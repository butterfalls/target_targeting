
Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001350  0800edd0  0800edd0  0000fdd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010120  08010120  00012268  2**0
                  CONTENTS
  4 .ARM          00000008  08010120  08010120  00011120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010128  08010128  00012268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010128  08010128  00011128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801012c  0801012c  0001112c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  08010130  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012268  2**0
                  CONTENTS
 10 .bss          00000790  20000268  20000268  00012268  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009f8  200009f8  00012268  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012268  2**0
                  CONTENTS, READONLY
 13 .debug_info   000169d4  00000000  00000000  00012298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000352f  00000000  00000000  00028c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  0002c1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001011  00000000  00000000  0002d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025971  00000000  00000000  0002e609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cc23  00000000  00000000  00053f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6c08  00000000  00000000  00070b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001477a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a3c  00000000  00000000  001477e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0014e224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800edb4 	.word	0x0800edb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	0800edb4 	.word	0x0800edb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9d3 	b.w	8001010 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b988 	b.w	8001010 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	468e      	mov	lr, r1
 8000d20:	4604      	mov	r4, r0
 8000d22:	4688      	mov	r8, r1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d14a      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4617      	mov	r7, r2
 8000d2c:	d962      	bls.n	8000df4 <__udivmoddi4+0xdc>
 8000d2e:	fab2 f682 	clz	r6, r2
 8000d32:	b14e      	cbz	r6, 8000d48 <__udivmoddi4+0x30>
 8000d34:	f1c6 0320 	rsb	r3, r6, #32
 8000d38:	fa01 f806 	lsl.w	r8, r1, r6
 8000d3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d40:	40b7      	lsls	r7, r6
 8000d42:	ea43 0808 	orr.w	r8, r3, r8
 8000d46:	40b4      	lsls	r4, r6
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d54:	0c23      	lsrs	r3, r4, #16
 8000d56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x62>
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d6c:	f080 80ea 	bcs.w	8000f44 <__udivmoddi4+0x22c>
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f240 80e7 	bls.w	8000f44 <__udivmoddi4+0x22c>
 8000d76:	3902      	subs	r1, #2
 8000d78:	443b      	add	r3, r7
 8000d7a:	1a9a      	subs	r2, r3, r2
 8000d7c:	b2a3      	uxth	r3, r4
 8000d7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d8e:	459c      	cmp	ip, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x8e>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d98:	f080 80d6 	bcs.w	8000f48 <__udivmoddi4+0x230>
 8000d9c:	459c      	cmp	ip, r3
 8000d9e:	f240 80d3 	bls.w	8000f48 <__udivmoddi4+0x230>
 8000da2:	443b      	add	r3, r7
 8000da4:	3802      	subs	r0, #2
 8000da6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000daa:	eba3 030c 	sub.w	r3, r3, ip
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11d      	cbz	r5, 8000dba <__udivmoddi4+0xa2>
 8000db2:	40f3      	lsrs	r3, r6
 8000db4:	2200      	movs	r2, #0
 8000db6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d905      	bls.n	8000dce <__udivmoddi4+0xb6>
 8000dc2:	b10d      	cbz	r5, 8000dc8 <__udivmoddi4+0xb0>
 8000dc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e7f5      	b.n	8000dba <__udivmoddi4+0xa2>
 8000dce:	fab3 f183 	clz	r1, r3
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d146      	bne.n	8000e64 <__udivmoddi4+0x14c>
 8000dd6:	4573      	cmp	r3, lr
 8000dd8:	d302      	bcc.n	8000de0 <__udivmoddi4+0xc8>
 8000dda:	4282      	cmp	r2, r0
 8000ddc:	f200 8105 	bhi.w	8000fea <__udivmoddi4+0x2d2>
 8000de0:	1a84      	subs	r4, r0, r2
 8000de2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000de6:	2001      	movs	r0, #1
 8000de8:	4690      	mov	r8, r2
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d0e5      	beq.n	8000dba <__udivmoddi4+0xa2>
 8000dee:	e9c5 4800 	strd	r4, r8, [r5]
 8000df2:	e7e2      	b.n	8000dba <__udivmoddi4+0xa2>
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f000 8090 	beq.w	8000f1a <__udivmoddi4+0x202>
 8000dfa:	fab2 f682 	clz	r6, r2
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f040 80a4 	bne.w	8000f4c <__udivmoddi4+0x234>
 8000e04:	1a8a      	subs	r2, r1, r2
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	b280      	uxth	r0, r0
 8000e0e:	b2bc      	uxth	r4, r7
 8000e10:	2101      	movs	r1, #1
 8000e12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x11e>
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x11c>
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	f200 80e0 	bhi.w	8000ff4 <__udivmoddi4+0x2dc>
 8000e34:	46c4      	mov	ip, r8
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e44:	fb02 f404 	mul.w	r4, r2, r4
 8000e48:	429c      	cmp	r4, r3
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x144>
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x142>
 8000e54:	429c      	cmp	r4, r3
 8000e56:	f200 80ca 	bhi.w	8000fee <__udivmoddi4+0x2d6>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	1b1b      	subs	r3, r3, r4
 8000e5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e62:	e7a5      	b.n	8000db0 <__udivmoddi4+0x98>
 8000e64:	f1c1 0620 	rsb	r6, r1, #32
 8000e68:	408b      	lsls	r3, r1
 8000e6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e6e:	431f      	orrs	r7, r3
 8000e70:	fa0e f401 	lsl.w	r4, lr, r1
 8000e74:	fa20 f306 	lsr.w	r3, r0, r6
 8000e78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e80:	4323      	orrs	r3, r4
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	fa1f fc87 	uxth.w	ip, r7
 8000e8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e8e:	0c1c      	lsrs	r4, r3, #16
 8000e90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea2:	d909      	bls.n	8000eb8 <__udivmoddi4+0x1a0>
 8000ea4:	193c      	adds	r4, r7, r4
 8000ea6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eaa:	f080 809c 	bcs.w	8000fe6 <__udivmoddi4+0x2ce>
 8000eae:	45a6      	cmp	lr, r4
 8000eb0:	f240 8099 	bls.w	8000fe6 <__udivmoddi4+0x2ce>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	eba4 040e 	sub.w	r4, r4, lr
 8000ebc:	fa1f fe83 	uxth.w	lr, r3
 8000ec0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ecc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed0:	45a4      	cmp	ip, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x1ce>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eda:	f080 8082 	bcs.w	8000fe2 <__udivmoddi4+0x2ca>
 8000ede:	45a4      	cmp	ip, r4
 8000ee0:	d97f      	bls.n	8000fe2 <__udivmoddi4+0x2ca>
 8000ee2:	3b02      	subs	r3, #2
 8000ee4:	443c      	add	r4, r7
 8000ee6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eea:	eba4 040c 	sub.w	r4, r4, ip
 8000eee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ef2:	4564      	cmp	r4, ip
 8000ef4:	4673      	mov	r3, lr
 8000ef6:	46e1      	mov	r9, ip
 8000ef8:	d362      	bcc.n	8000fc0 <__udivmoddi4+0x2a8>
 8000efa:	d05f      	beq.n	8000fbc <__udivmoddi4+0x2a4>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x1fe>
 8000efe:	ebb8 0203 	subs.w	r2, r8, r3
 8000f02:	eb64 0409 	sbc.w	r4, r4, r9
 8000f06:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f0e:	431e      	orrs	r6, r3
 8000f10:	40cc      	lsrs	r4, r1
 8000f12:	e9c5 6400 	strd	r6, r4, [r5]
 8000f16:	2100      	movs	r1, #0
 8000f18:	e74f      	b.n	8000dba <__udivmoddi4+0xa2>
 8000f1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f1e:	0c01      	lsrs	r1, r0, #16
 8000f20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f24:	b280      	uxth	r0, r0
 8000f26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	463c      	mov	r4, r7
 8000f30:	46b8      	mov	r8, r7
 8000f32:	46be      	mov	lr, r7
 8000f34:	2620      	movs	r6, #32
 8000f36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f3a:	eba2 0208 	sub.w	r2, r2, r8
 8000f3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f42:	e766      	b.n	8000e12 <__udivmoddi4+0xfa>
 8000f44:	4601      	mov	r1, r0
 8000f46:	e718      	b.n	8000d7a <__udivmoddi4+0x62>
 8000f48:	4610      	mov	r0, r2
 8000f4a:	e72c      	b.n	8000da6 <__udivmoddi4+0x8e>
 8000f4c:	f1c6 0220 	rsb	r2, r6, #32
 8000f50:	fa2e f302 	lsr.w	r3, lr, r2
 8000f54:	40b7      	lsls	r7, r6
 8000f56:	40b1      	lsls	r1, r6
 8000f58:	fa20 f202 	lsr.w	r2, r0, r2
 8000f5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f60:	430a      	orrs	r2, r1
 8000f62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f66:	b2bc      	uxth	r4, r7
 8000f68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f6c:	0c11      	lsrs	r1, r2, #16
 8000f6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f72:	fb08 f904 	mul.w	r9, r8, r4
 8000f76:	40b0      	lsls	r0, r6
 8000f78:	4589      	cmp	r9, r1
 8000f7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f7e:	b280      	uxth	r0, r0
 8000f80:	d93e      	bls.n	8001000 <__udivmoddi4+0x2e8>
 8000f82:	1879      	adds	r1, r7, r1
 8000f84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f88:	d201      	bcs.n	8000f8e <__udivmoddi4+0x276>
 8000f8a:	4589      	cmp	r9, r1
 8000f8c:	d81f      	bhi.n	8000fce <__udivmoddi4+0x2b6>
 8000f8e:	eba1 0109 	sub.w	r1, r1, r9
 8000f92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f96:	fb09 f804 	mul.w	r8, r9, r4
 8000f9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fa4:	4542      	cmp	r2, r8
 8000fa6:	d229      	bcs.n	8000ffc <__udivmoddi4+0x2e4>
 8000fa8:	18ba      	adds	r2, r7, r2
 8000faa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fae:	d2c4      	bcs.n	8000f3a <__udivmoddi4+0x222>
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d2c2      	bcs.n	8000f3a <__udivmoddi4+0x222>
 8000fb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000fb8:	443a      	add	r2, r7
 8000fba:	e7be      	b.n	8000f3a <__udivmoddi4+0x222>
 8000fbc:	45f0      	cmp	r8, lr
 8000fbe:	d29d      	bcs.n	8000efc <__udivmoddi4+0x1e4>
 8000fc0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fc4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fc8:	3801      	subs	r0, #1
 8000fca:	46e1      	mov	r9, ip
 8000fcc:	e796      	b.n	8000efc <__udivmoddi4+0x1e4>
 8000fce:	eba7 0909 	sub.w	r9, r7, r9
 8000fd2:	4449      	add	r1, r9
 8000fd4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fd8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fdc:	fb09 f804 	mul.w	r8, r9, r4
 8000fe0:	e7db      	b.n	8000f9a <__udivmoddi4+0x282>
 8000fe2:	4673      	mov	r3, lr
 8000fe4:	e77f      	b.n	8000ee6 <__udivmoddi4+0x1ce>
 8000fe6:	4650      	mov	r0, sl
 8000fe8:	e766      	b.n	8000eb8 <__udivmoddi4+0x1a0>
 8000fea:	4608      	mov	r0, r1
 8000fec:	e6fd      	b.n	8000dea <__udivmoddi4+0xd2>
 8000fee:	443b      	add	r3, r7
 8000ff0:	3a02      	subs	r2, #2
 8000ff2:	e733      	b.n	8000e5c <__udivmoddi4+0x144>
 8000ff4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ff8:	443b      	add	r3, r7
 8000ffa:	e71c      	b.n	8000e36 <__udivmoddi4+0x11e>
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	e79c      	b.n	8000f3a <__udivmoddi4+0x222>
 8001000:	eba1 0109 	sub.w	r1, r1, r9
 8001004:	46c4      	mov	ip, r8
 8001006:	fbb1 f9fe 	udiv	r9, r1, lr
 800100a:	fb09 f804 	mul.w	r8, r9, r4
 800100e:	e7c4      	b.n	8000f9a <__udivmoddi4+0x282>

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af04      	add	r7, sp, #16
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 800101e:	4b32      	ldr	r3, [pc, #200]	@ (80010e8 <set_int_enable+0xd4>)
 8001020:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001024:	2b00      	cmp	r3, #0
 8001026:	d025      	beq.n	8001074 <set_int_enable+0x60>
        if (enable)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 800102e:	2302      	movs	r3, #2
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	e001      	b.n	8001038 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001038:	4b2b      	ldr	r3, [pc, #172]	@ (80010e8 <set_int_enable+0xd4>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	b299      	uxth	r1, r3
 8001042:	4b29      	ldr	r3, [pc, #164]	@ (80010e8 <set_int_enable+0xd4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	7bdb      	ldrb	r3, [r3, #15]
 8001048:	461a      	mov	r2, r3
 800104a:	2305      	movs	r3, #5
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	2301      	movs	r3, #1
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	f107 030f 	add.w	r3, r7, #15
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	4824      	ldr	r0, [pc, #144]	@ (80010ec <set_int_enable+0xd8>)
 800105c:	f006 fe60 	bl	8007d20 <HAL_I2C_Mem_Write>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <set_int_enable+0x58>
            return -1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e039      	b.n	80010e0 <set_int_enable+0xcc>
        st.chip_cfg.int_enable = tmp;
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	4b1e      	ldr	r3, [pc, #120]	@ (80010e8 <set_int_enable+0xd4>)
 8001070:	745a      	strb	r2, [r3, #17]
 8001072:	e034      	b.n	80010de <set_int_enable+0xca>
    } else {
        if (!st.chip_cfg.sensors)
 8001074:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <set_int_enable+0xd4>)
 8001076:	7a9b      	ldrb	r3, [r3, #10]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <set_int_enable+0x6e>
            return -1;
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	e02e      	b.n	80010e0 <set_int_enable+0xcc>
        if (enable && st.chip_cfg.int_enable)
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d005      	beq.n	8001094 <set_int_enable+0x80>
 8001088:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <set_int_enable+0xd4>)
 800108a:	7c5b      	ldrb	r3, [r3, #17]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <set_int_enable+0x80>
            return 0;
 8001090:	2300      	movs	r3, #0
 8001092:	e025      	b.n	80010e0 <set_int_enable+0xcc>
        if (enable)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <set_int_enable+0x8c>
            tmp = BIT_DATA_RDY_EN;
 800109a:	2301      	movs	r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	e001      	b.n	80010a4 <set_int_enable+0x90>
        else
            tmp = 0x00;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80010a4:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <set_int_enable+0xd4>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	b299      	uxth	r1, r3
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <set_int_enable+0xd4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	7bdb      	ldrb	r3, [r3, #15]
 80010b4:	461a      	mov	r2, r3
 80010b6:	2305      	movs	r3, #5
 80010b8:	9302      	str	r3, [sp, #8]
 80010ba:	2301      	movs	r3, #1
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	f107 030f 	add.w	r3, r7, #15
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	4809      	ldr	r0, [pc, #36]	@ (80010ec <set_int_enable+0xd8>)
 80010c8:	f006 fe2a 	bl	8007d20 <HAL_I2C_Mem_Write>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d002      	beq.n	80010d8 <set_int_enable+0xc4>
            return -1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	e003      	b.n	80010e0 <set_int_enable+0xcc>
        st.chip_cfg.int_enable = tmp;
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <set_int_enable+0xd4>)
 80010dc:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	200002e8 	.word	0x200002e8

080010f0 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af04      	add	r7, sp, #16
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = 0x80;//BIT_RESET;
 80010f6:	2380      	movs	r3, #128	@ 0x80
 80010f8:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 80010fa:	4b95      	ldr	r3, [pc, #596]	@ (8001350 <mpu_init+0x260>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	b299      	uxth	r1, r3
 8001104:	4b92      	ldr	r3, [pc, #584]	@ (8001350 <mpu_init+0x260>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	7c9b      	ldrb	r3, [r3, #18]
 800110a:	461a      	mov	r2, r3
 800110c:	2305      	movs	r3, #5
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2301      	movs	r3, #1
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	463b      	mov	r3, r7
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	488e      	ldr	r0, [pc, #568]	@ (8001354 <mpu_init+0x264>)
 800111c:	f006 fe00 	bl	8007d20 <HAL_I2C_Mem_Write>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <mpu_init+0x3c>
        return -1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	e10c      	b.n	8001346 <mpu_init+0x256>
    delay_ms(100);
 800112c:	2064      	movs	r0, #100	@ 0x64
 800112e:	f006 f935 	bl	800739c <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8001132:	2300      	movs	r3, #0
 8001134:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 8001136:	4b86      	ldr	r3, [pc, #536]	@ (8001350 <mpu_init+0x260>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	b299      	uxth	r1, r3
 8001140:	4b83      	ldr	r3, [pc, #524]	@ (8001350 <mpu_init+0x260>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	7c9b      	ldrb	r3, [r3, #18]
 8001146:	461a      	mov	r2, r3
 8001148:	2305      	movs	r3, #5
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	2301      	movs	r3, #1
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	463b      	mov	r3, r7
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	487f      	ldr	r0, [pc, #508]	@ (8001354 <mpu_init+0x264>)
 8001158:	f006 fde2 	bl	8007d20 <HAL_I2C_Mem_Write>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <mpu_init+0x78>
        return -1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	e0ee      	b.n	8001346 <mpu_init+0x256>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 8001168:	4b79      	ldr	r3, [pc, #484]	@ (8001350 <mpu_init+0x260>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	b299      	uxth	r1, r3
 8001172:	4b77      	ldr	r3, [pc, #476]	@ (8001350 <mpu_init+0x260>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	7d9b      	ldrb	r3, [r3, #22]
 8001178:	461a      	mov	r2, r3
 800117a:	2305      	movs	r3, #5
 800117c:	9302      	str	r3, [sp, #8]
 800117e:	2306      	movs	r3, #6
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	463b      	mov	r3, r7
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2301      	movs	r3, #1
 8001188:	4872      	ldr	r0, [pc, #456]	@ (8001354 <mpu_init+0x264>)
 800118a:	f006 fec3 	bl	8007f14 <HAL_I2C_Mem_Read>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <mpu_init+0xaa>
        return -1;
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	e0d5      	b.n	8001346 <mpu_init+0x256>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 800119a:	797b      	ldrb	r3, [r7, #5]
 800119c:	b25b      	sxtb	r3, r3
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	b25a      	sxtb	r2, r3
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 80011ba:	787b      	ldrb	r3, [r7, #1]
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	71fb      	strb	r3, [r7, #7]

    if (rev) {
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d015      	beq.n	80011fc <mpu_init+0x10c>
        /* Congrats, these parts are better. */
        if (rev == 1)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d103      	bne.n	80011de <mpu_init+0xee>
            st.chip_cfg.accel_half = 1;
 80011d6:	4b5e      	ldr	r3, [pc, #376]	@ (8001350 <mpu_init+0x260>)
 80011d8:	2201      	movs	r2, #1
 80011da:	74da      	strb	r2, [r3, #19]
 80011dc:	e041      	b.n	8001262 <mpu_init+0x172>
        else if (rev == 2)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d103      	bne.n	80011ec <mpu_init+0xfc>
            st.chip_cfg.accel_half = 0;
 80011e4:	4b5a      	ldr	r3, [pc, #360]	@ (8001350 <mpu_init+0x260>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	74da      	strb	r2, [r3, #19]
 80011ea:	e03a      	b.n	8001262 <mpu_init+0x172>
        else {
            log_e("Unsupported software product rev %d.\n",rev);
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4619      	mov	r1, r3
 80011f0:	4859      	ldr	r0, [pc, #356]	@ (8001358 <mpu_init+0x268>)
 80011f2:	f00a fe53 	bl	800be9c <iprintf>
            return -1;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	e0a4      	b.n	8001346 <mpu_init+0x256>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, &(data[0])))
 80011fc:	4b54      	ldr	r3, [pc, #336]	@ (8001350 <mpu_init+0x260>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	b299      	uxth	r1, r3
 8001206:	4b52      	ldr	r3, [pc, #328]	@ (8001350 <mpu_init+0x260>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	78db      	ldrb	r3, [r3, #3]
 800120c:	461a      	mov	r2, r3
 800120e:	2305      	movs	r3, #5
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	463b      	mov	r3, r7
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	484d      	ldr	r0, [pc, #308]	@ (8001354 <mpu_init+0x264>)
 800121e:	f006 fe79 	bl	8007f14 <HAL_I2C_Mem_Read>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <mpu_init+0x13e>
            return -1;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	e08b      	b.n	8001346 <mpu_init+0x256>
        rev = data[0] & 0x0F;
 800122e:	783b      	ldrb	r3, [r7, #0]
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	71fb      	strb	r3, [r7, #7]
        if (!rev) {
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d105      	bne.n	8001248 <mpu_init+0x158>
            log_e("Product ID read as 0 indicates device is either incompatible or an MPU3050.\r\n");
 800123c:	4847      	ldr	r0, [pc, #284]	@ (800135c <mpu_init+0x26c>)
 800123e:	f00a fe95 	bl	800bf6c <puts>
            return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e07e      	b.n	8001346 <mpu_init+0x256>
        } else if (rev == 4) {
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2b04      	cmp	r3, #4
 800124c:	d106      	bne.n	800125c <mpu_init+0x16c>
            log_i("Half sensitivity part found.\r\n");
 800124e:	4844      	ldr	r0, [pc, #272]	@ (8001360 <mpu_init+0x270>)
 8001250:	f00a fe8c 	bl	800bf6c <puts>
            st.chip_cfg.accel_half = 1;
 8001254:	4b3e      	ldr	r3, [pc, #248]	@ (8001350 <mpu_init+0x260>)
 8001256:	2201      	movs	r2, #1
 8001258:	74da      	strb	r2, [r3, #19]
 800125a:	e002      	b.n	8001262 <mpu_init+0x172>
        } else
            st.chip_cfg.accel_half = 0;
 800125c:	4b3c      	ldr	r3, [pc, #240]	@ (8001350 <mpu_init+0x260>)
 800125e:	2200      	movs	r2, #0
 8001260:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 8001262:	4b3b      	ldr	r3, [pc, #236]	@ (8001350 <mpu_init+0x260>)
 8001264:	22ff      	movs	r2, #255	@ 0xff
 8001266:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8001268:	4b39      	ldr	r3, [pc, #228]	@ (8001350 <mpu_init+0x260>)
 800126a:	22ff      	movs	r2, #255	@ 0xff
 800126c:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800126e:	4b38      	ldr	r3, [pc, #224]	@ (8001350 <mpu_init+0x260>)
 8001270:	22ff      	movs	r2, #255	@ 0xff
 8001272:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8001274:	4b36      	ldr	r3, [pc, #216]	@ (8001350 <mpu_init+0x260>)
 8001276:	22ff      	movs	r2, #255	@ 0xff
 8001278:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 800127a:	4b35      	ldr	r3, [pc, #212]	@ (8001350 <mpu_init+0x260>)
 800127c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001280:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8001282:	4b33      	ldr	r3, [pc, #204]	@ (8001350 <mpu_init+0x260>)
 8001284:	22ff      	movs	r2, #255	@ 0xff
 8001286:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8001288:	4b31      	ldr	r3, [pc, #196]	@ (8001350 <mpu_init+0x260>)
 800128a:	22ff      	movs	r2, #255	@ 0xff
 800128c:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800128e:	4b30      	ldr	r3, [pc, #192]	@ (8001350 <mpu_init+0x260>)
 8001290:	2201      	movs	r2, #1
 8001292:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8001294:	4b2e      	ldr	r3, [pc, #184]	@ (8001350 <mpu_init+0x260>)
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    st.chip_cfg.latched_int = 0;
 800129c:	4b2c      	ldr	r3, [pc, #176]	@ (8001350 <mpu_init+0x260>)
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    st.chip_cfg.int_motion_only = 0;
 80012a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001350 <mpu_init+0x260>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 80012aa:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <mpu_init+0x260>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80012b0:	220c      	movs	r2, #12
 80012b2:	2100      	movs	r1, #0
 80012b4:	482b      	ldr	r0, [pc, #172]	@ (8001364 <mpu_init+0x274>)
 80012b6:	f00a ff6b 	bl	800c190 <memset>
    st.chip_cfg.dmp_on = 0;
 80012ba:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <mpu_init+0x260>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    st.chip_cfg.dmp_loaded = 0;
 80012c2:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <mpu_init+0x260>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 80012ca:	4b21      	ldr	r3, [pc, #132]	@ (8001350 <mpu_init+0x260>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    if (mpu_set_gyro_fsr(2000))
 80012d0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012d4:	f000 fa76 	bl	80017c4 <mpu_set_gyro_fsr>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <mpu_init+0x1f4>
        return -1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e030      	b.n	8001346 <mpu_init+0x256>
    if (mpu_set_accel_fsr(2))
 80012e4:	2002      	movs	r0, #2
 80012e6:	f000 fb07 	bl	80018f8 <mpu_set_accel_fsr>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <mpu_init+0x206>
        return -1;
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	e027      	b.n	8001346 <mpu_init+0x256>
    if (mpu_set_lpf(42))
 80012f6:	202a      	movs	r0, #42	@ 0x2a
 80012f8:	f000 fbae 	bl	8001a58 <mpu_set_lpf>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <mpu_init+0x218>
        return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e01e      	b.n	8001346 <mpu_init+0x256>
    if (mpu_set_sample_rate(50))
 8001308:	2032      	movs	r0, #50	@ 0x32
 800130a:	f000 fc19 	bl	8001b40 <mpu_set_sample_rate>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <mpu_init+0x22a>
        return -1;
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	e015      	b.n	8001346 <mpu_init+0x256>
    if (mpu_configure_fifo(0))
 800131a:	2000      	movs	r0, #0
 800131c:	f000 fd0a 	bl	8001d34 <mpu_configure_fifo>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <mpu_init+0x23c>
        return -1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	e00c      	b.n	8001346 <mpu_init+0x256>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 800132c:	2000      	movs	r0, #0
 800132e:	f000 fe89 	bl	8002044 <mpu_set_bypass>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <mpu_init+0x24e>
        return -1;
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	e003      	b.n	8001346 <mpu_init+0x256>
#endif

    mpu_set_sensors(0);
 800133e:	2000      	movs	r0, #0
 8001340:	f000 fd4a 	bl	8001dd8 <mpu_set_sensors>
    return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000000 	.word	0x20000000
 8001354:	200002e8 	.word	0x200002e8
 8001358:	0800edd0 	.word	0x0800edd0
 800135c:	0800edf8 	.word	0x0800edf8
 8001360:	0800ee48 	.word	0x0800ee48
 8001364:	20000016 	.word	0x20000016

08001368 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af04      	add	r7, sp, #16
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b28      	cmp	r3, #40	@ 0x28
 8001376:	d902      	bls.n	800137e <mpu_lp_accel_mode+0x16>
        return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	e07d      	b.n	800147a <mpu_lp_accel_mode+0x112>

    if (!rate) {
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d125      	bne.n	80013d0 <mpu_lp_accel_mode+0x68>
        mpu_set_int_latched(0);
 8001384:	2000      	movs	r0, #0
 8001386:	f000 ff5b 	bl	8002240 <mpu_set_int_latched>
        tmp[0] = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 800138e:	2307      	movs	r3, #7
 8001390:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001392:	4b3c      	ldr	r3, [pc, #240]	@ (8001484 <mpu_lp_accel_mode+0x11c>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	b299      	uxth	r1, r3
 800139c:	4b39      	ldr	r3, [pc, #228]	@ (8001484 <mpu_lp_accel_mode+0x11c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	7c9b      	ldrb	r3, [r3, #18]
 80013a2:	461a      	mov	r2, r3
 80013a4:	2305      	movs	r3, #5
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	2302      	movs	r3, #2
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	4834      	ldr	r0, [pc, #208]	@ (8001488 <mpu_lp_accel_mode+0x120>)
 80013b6:	f006 fcb3 	bl	8007d20 <HAL_I2C_Mem_Write>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <mpu_lp_accel_mode+0x5e>
            return -1;
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	e059      	b.n	800147a <mpu_lp_accel_mode+0x112>
        st.chip_cfg.lp_accel_mode = 0;
 80013c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001484 <mpu_lp_accel_mode+0x11c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	751a      	strb	r2, [r3, #20]
        return 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	e054      	b.n	800147a <mpu_lp_accel_mode+0x112>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 80013d0:	2001      	movs	r0, #1
 80013d2:	f000 ff35 	bl	8002240 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 80013d6:	2320      	movs	r3, #32
 80013d8:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d105      	bne.n	80013ec <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_1_25HZ;
 80013e0:	2300      	movs	r3, #0
 80013e2:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 80013e4:	2005      	movs	r0, #5
 80013e6:	f000 fb37 	bl	8001a58 <mpu_set_lpf>
 80013ea:	e016      	b.n	800141a <mpu_lp_accel_mode+0xb2>
    } else if (rate <= 5) {
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2b05      	cmp	r3, #5
 80013f0:	d805      	bhi.n	80013fe <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_5HZ;
 80013f2:	2301      	movs	r3, #1
 80013f4:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 80013f6:	2005      	movs	r0, #5
 80013f8:	f000 fb2e 	bl	8001a58 <mpu_set_lpf>
 80013fc:	e00d      	b.n	800141a <mpu_lp_accel_mode+0xb2>
    } else if (rate <= 20) {
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b14      	cmp	r3, #20
 8001402:	d805      	bhi.n	8001410 <mpu_lp_accel_mode+0xa8>
        tmp[1] = INV_LPA_20HZ;
 8001404:	2302      	movs	r3, #2
 8001406:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 8001408:	200a      	movs	r0, #10
 800140a:	f000 fb25 	bl	8001a58 <mpu_set_lpf>
 800140e:	e004      	b.n	800141a <mpu_lp_accel_mode+0xb2>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8001410:	2303      	movs	r3, #3
 8001412:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8001414:	2014      	movs	r0, #20
 8001416:	f000 fb1f 	bl	8001a58 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 800141a:	7b7b      	ldrb	r3, [r7, #13]
 800141c:	b25b      	sxtb	r3, r3
 800141e:	019b      	lsls	r3, r3, #6
 8001420:	b25b      	sxtb	r3, r3
 8001422:	f043 0307 	orr.w	r3, r3, #7
 8001426:	b25b      	sxtb	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800142c:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <mpu_lp_accel_mode+0x11c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	b299      	uxth	r1, r3
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <mpu_lp_accel_mode+0x11c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	7c9b      	ldrb	r3, [r3, #18]
 800143c:	461a      	mov	r2, r3
 800143e:	2305      	movs	r3, #5
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2302      	movs	r3, #2
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	480e      	ldr	r0, [pc, #56]	@ (8001488 <mpu_lp_accel_mode+0x120>)
 8001450:	f006 fc66 	bl	8007d20 <HAL_I2C_Mem_Write>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <mpu_lp_accel_mode+0xf8>
        return -1;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	e00c      	b.n	800147a <mpu_lp_accel_mode+0x112>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <mpu_lp_accel_mode+0x11c>)
 8001462:	2208      	movs	r2, #8
 8001464:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8001466:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <mpu_lp_accel_mode+0x11c>)
 8001468:	2200      	movs	r2, #0
 800146a:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <mpu_lp_accel_mode+0x11c>)
 800146e:	2201      	movs	r2, #1
 8001470:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8001472:	2000      	movs	r0, #0
 8001474:	f000 fc5e 	bl	8001d34 <mpu_configure_fifo>

    return 0;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000000 	.word	0x20000000
 8001488:	200002e8 	.word	0x200002e8

0800148c <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af04      	add	r7, sp, #16
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001492:	4b9e      	ldr	r3, [pc, #632]	@ (800170c <mpu_reset_fifo+0x280>)
 8001494:	7a9b      	ldrb	r3, [r3, #10]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <mpu_reset_fifo+0x14>
        return -1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e153      	b.n	8001748 <mpu_reset_fifo+0x2bc>

    data = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80014a4:	4b99      	ldr	r3, [pc, #612]	@ (800170c <mpu_reset_fifo+0x280>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	b299      	uxth	r1, r3
 80014ae:	4b97      	ldr	r3, [pc, #604]	@ (800170c <mpu_reset_fifo+0x280>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	7bdb      	ldrb	r3, [r3, #15]
 80014b4:	461a      	mov	r2, r3
 80014b6:	2305      	movs	r3, #5
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	2301      	movs	r3, #1
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2301      	movs	r3, #1
 80014c4:	4892      	ldr	r0, [pc, #584]	@ (8001710 <mpu_reset_fifo+0x284>)
 80014c6:	f006 fc2b 	bl	8007d20 <HAL_I2C_Mem_Write>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <mpu_reset_fifo+0x4a>
        return -1;
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	e138      	b.n	8001748 <mpu_reset_fifo+0x2bc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 80014d6:	4b8d      	ldr	r3, [pc, #564]	@ (800170c <mpu_reset_fifo+0x280>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	b299      	uxth	r1, r3
 80014e0:	4b8a      	ldr	r3, [pc, #552]	@ (800170c <mpu_reset_fifo+0x280>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	795b      	ldrb	r3, [r3, #5]
 80014e6:	461a      	mov	r2, r3
 80014e8:	2305      	movs	r3, #5
 80014ea:	9302      	str	r3, [sp, #8]
 80014ec:	2301      	movs	r3, #1
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	1dfb      	adds	r3, r7, #7
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2301      	movs	r3, #1
 80014f6:	4886      	ldr	r0, [pc, #536]	@ (8001710 <mpu_reset_fifo+0x284>)
 80014f8:	f006 fc12 	bl	8007d20 <HAL_I2C_Mem_Write>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d002      	beq.n	8001508 <mpu_reset_fifo+0x7c>
        return -1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	e11f      	b.n	8001748 <mpu_reset_fifo+0x2bc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001508:	4b80      	ldr	r3, [pc, #512]	@ (800170c <mpu_reset_fifo+0x280>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	b299      	uxth	r1, r3
 8001512:	4b7e      	ldr	r3, [pc, #504]	@ (800170c <mpu_reset_fifo+0x280>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	791b      	ldrb	r3, [r3, #4]
 8001518:	461a      	mov	r2, r3
 800151a:	2305      	movs	r3, #5
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	2301      	movs	r3, #1
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2301      	movs	r3, #1
 8001528:	4879      	ldr	r0, [pc, #484]	@ (8001710 <mpu_reset_fifo+0x284>)
 800152a:	f006 fbf9 	bl	8007d20 <HAL_I2C_Mem_Write>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <mpu_reset_fifo+0xae>
        return -1;
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	e106      	b.n	8001748 <mpu_reset_fifo+0x2bc>

    if (st.chip_cfg.dmp_on) {
 800153a:	4b74      	ldr	r3, [pc, #464]	@ (800170c <mpu_reset_fifo+0x280>)
 800153c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001540:	2b00      	cmp	r3, #0
 8001542:	d07e      	beq.n	8001642 <mpu_reset_fifo+0x1b6>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8001544:	230c      	movs	r3, #12
 8001546:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001548:	4b70      	ldr	r3, [pc, #448]	@ (800170c <mpu_reset_fifo+0x280>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b299      	uxth	r1, r3
 8001552:	4b6e      	ldr	r3, [pc, #440]	@ (800170c <mpu_reset_fifo+0x280>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	791b      	ldrb	r3, [r3, #4]
 8001558:	461a      	mov	r2, r3
 800155a:	2305      	movs	r3, #5
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	2301      	movs	r3, #1
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2301      	movs	r3, #1
 8001568:	4869      	ldr	r0, [pc, #420]	@ (8001710 <mpu_reset_fifo+0x284>)
 800156a:	f006 fbd9 	bl	8007d20 <HAL_I2C_Mem_Write>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <mpu_reset_fifo+0xee>
            return -1;
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	e0e6      	b.n	8001748 <mpu_reset_fifo+0x2bc>
       
        data = BIT_DMP_EN | BIT_FIFO_EN;
 800157a:	23c0      	movs	r3, #192	@ 0xc0
 800157c:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800157e:	4b63      	ldr	r3, [pc, #396]	@ (800170c <mpu_reset_fifo+0x280>)
 8001580:	7a9b      	ldrb	r3, [r3, #10]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d004      	beq.n	8001594 <mpu_reset_fifo+0x108>
            data |= BIT_AUX_IF_EN;
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	f043 0320 	orr.w	r3, r3, #32
 8001590:	b2db      	uxtb	r3, r3
 8001592:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001594:	4b5d      	ldr	r3, [pc, #372]	@ (800170c <mpu_reset_fifo+0x280>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	b299      	uxth	r1, r3
 800159e:	4b5b      	ldr	r3, [pc, #364]	@ (800170c <mpu_reset_fifo+0x280>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	791b      	ldrb	r3, [r3, #4]
 80015a4:	461a      	mov	r2, r3
 80015a6:	2305      	movs	r3, #5
 80015a8:	9302      	str	r3, [sp, #8]
 80015aa:	2301      	movs	r3, #1
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2301      	movs	r3, #1
 80015b4:	4856      	ldr	r0, [pc, #344]	@ (8001710 <mpu_reset_fifo+0x284>)
 80015b6:	f006 fbb3 	bl	8007d20 <HAL_I2C_Mem_Write>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d002      	beq.n	80015c6 <mpu_reset_fifo+0x13a>
            return -1;
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295
 80015c4:	e0c0      	b.n	8001748 <mpu_reset_fifo+0x2bc>
        if (st.chip_cfg.int_enable)
 80015c6:	4b51      	ldr	r3, [pc, #324]	@ (800170c <mpu_reset_fifo+0x280>)
 80015c8:	7c5b      	ldrb	r3, [r3, #17]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <mpu_reset_fifo+0x148>
            data = BIT_DMP_INT_EN;
 80015ce:	2302      	movs	r3, #2
 80015d0:	71fb      	strb	r3, [r7, #7]
 80015d2:	e001      	b.n	80015d8 <mpu_reset_fifo+0x14c>
        else
            data = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80015d8:	4b4c      	ldr	r3, [pc, #304]	@ (800170c <mpu_reset_fifo+0x280>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	b299      	uxth	r1, r3
 80015e2:	4b4a      	ldr	r3, [pc, #296]	@ (800170c <mpu_reset_fifo+0x280>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	7bdb      	ldrb	r3, [r3, #15]
 80015e8:	461a      	mov	r2, r3
 80015ea:	2305      	movs	r3, #5
 80015ec:	9302      	str	r3, [sp, #8]
 80015ee:	2301      	movs	r3, #1
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	1dfb      	adds	r3, r7, #7
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2301      	movs	r3, #1
 80015f8:	4845      	ldr	r0, [pc, #276]	@ (8001710 <mpu_reset_fifo+0x284>)
 80015fa:	f006 fb91 	bl	8007d20 <HAL_I2C_Mem_Write>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d002      	beq.n	800160a <mpu_reset_fifo+0x17e>
            return -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	e09e      	b.n	8001748 <mpu_reset_fifo+0x2bc>
        data = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800160e:	4b3f      	ldr	r3, [pc, #252]	@ (800170c <mpu_reset_fifo+0x280>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	b299      	uxth	r1, r3
 8001618:	4b3c      	ldr	r3, [pc, #240]	@ (800170c <mpu_reset_fifo+0x280>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	795b      	ldrb	r3, [r3, #5]
 800161e:	461a      	mov	r2, r3
 8001620:	2305      	movs	r3, #5
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	2301      	movs	r3, #1
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	1dfb      	adds	r3, r7, #7
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2301      	movs	r3, #1
 800162e:	4838      	ldr	r0, [pc, #224]	@ (8001710 <mpu_reset_fifo+0x284>)
 8001630:	f006 fb76 	bl	8007d20 <HAL_I2C_Mem_Write>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 8085 	beq.w	8001746 <mpu_reset_fifo+0x2ba>
            return -1;
 800163c:	f04f 33ff 	mov.w	r3, #4294967295
 8001640:	e082      	b.n	8001748 <mpu_reset_fifo+0x2bc>
    } else {
        data = BIT_FIFO_RST;
 8001642:	2304      	movs	r3, #4
 8001644:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001646:	4b31      	ldr	r3, [pc, #196]	@ (800170c <mpu_reset_fifo+0x280>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	b299      	uxth	r1, r3
 8001650:	4b2e      	ldr	r3, [pc, #184]	@ (800170c <mpu_reset_fifo+0x280>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	791b      	ldrb	r3, [r3, #4]
 8001656:	461a      	mov	r2, r3
 8001658:	2305      	movs	r3, #5
 800165a:	9302      	str	r3, [sp, #8]
 800165c:	2301      	movs	r3, #1
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	1dfb      	adds	r3, r7, #7
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2301      	movs	r3, #1
 8001666:	482a      	ldr	r0, [pc, #168]	@ (8001710 <mpu_reset_fifo+0x284>)
 8001668:	f006 fb5a 	bl	8007d20 <HAL_I2C_Mem_Write>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <mpu_reset_fifo+0x1ec>
            return -1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e067      	b.n	8001748 <mpu_reset_fifo+0x2bc>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8001678:	4b24      	ldr	r3, [pc, #144]	@ (800170c <mpu_reset_fifo+0x280>)
 800167a:	7c9b      	ldrb	r3, [r3, #18]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d105      	bne.n	800168c <mpu_reset_fifo+0x200>
 8001680:	4b22      	ldr	r3, [pc, #136]	@ (800170c <mpu_reset_fifo+0x280>)
 8001682:	7a9b      	ldrb	r3, [r3, #10]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <mpu_reset_fifo+0x206>
            data = BIT_FIFO_EN;
 800168c:	2340      	movs	r3, #64	@ 0x40
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	e001      	b.n	8001696 <mpu_reset_fifo+0x20a>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8001692:	2360      	movs	r3, #96	@ 0x60
 8001694:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001696:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <mpu_reset_fifo+0x280>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	b299      	uxth	r1, r3
 80016a0:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <mpu_reset_fifo+0x280>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	791b      	ldrb	r3, [r3, #4]
 80016a6:	461a      	mov	r2, r3
 80016a8:	2305      	movs	r3, #5
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	2301      	movs	r3, #1
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	1dfb      	adds	r3, r7, #7
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2301      	movs	r3, #1
 80016b6:	4816      	ldr	r0, [pc, #88]	@ (8001710 <mpu_reset_fifo+0x284>)
 80016b8:	f006 fb32 	bl	8007d20 <HAL_I2C_Mem_Write>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d002      	beq.n	80016c8 <mpu_reset_fifo+0x23c>
            return -1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	e03f      	b.n	8001748 <mpu_reset_fifo+0x2bc>
    
        if (st.chip_cfg.int_enable)
 80016c8:	4b10      	ldr	r3, [pc, #64]	@ (800170c <mpu_reset_fifo+0x280>)
 80016ca:	7c5b      	ldrb	r3, [r3, #17]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <mpu_reset_fifo+0x24a>
            data = BIT_DATA_RDY_EN;
 80016d0:	2301      	movs	r3, #1
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	e001      	b.n	80016da <mpu_reset_fifo+0x24e>
        else
            data = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80016da:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <mpu_reset_fifo+0x280>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	b299      	uxth	r1, r3
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <mpu_reset_fifo+0x280>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	7bdb      	ldrb	r3, [r3, #15]
 80016ea:	461a      	mov	r2, r3
 80016ec:	2305      	movs	r3, #5
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	2301      	movs	r3, #1
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2301      	movs	r3, #1
 80016fa:	4805      	ldr	r0, [pc, #20]	@ (8001710 <mpu_reset_fifo+0x284>)
 80016fc:	f006 fb10 	bl	8007d20 <HAL_I2C_Mem_Write>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <mpu_reset_fifo+0x288>
            return -1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
 800170a:	e01d      	b.n	8001748 <mpu_reset_fifo+0x2bc>
 800170c:	20000000 	.word	0x20000000
 8001710:	200002e8 	.word	0x200002e8
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8001714:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <mpu_reset_fifo+0x2c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	b299      	uxth	r1, r3
 800171e:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <mpu_reset_fifo+0x2c4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	795b      	ldrb	r3, [r3, #5]
 8001724:	461a      	mov	r2, r3
 8001726:	2305      	movs	r3, #5
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2301      	movs	r3, #1
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <mpu_reset_fifo+0x2c8>)
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2301      	movs	r3, #1
 8001734:	4808      	ldr	r0, [pc, #32]	@ (8001758 <mpu_reset_fifo+0x2cc>)
 8001736:	f006 faf3 	bl	8007d20 <HAL_I2C_Mem_Write>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <mpu_reset_fifo+0x2ba>
            return -1;
 8001740:	f04f 33ff 	mov.w	r3, #4294967295
 8001744:	e000      	b.n	8001748 <mpu_reset_fifo+0x2bc>
    }
    return 0;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000000 	.word	0x20000000
 8001754:	20000010 	.word	0x20000010
 8001758:	200002e8 	.word	0x200002e8

0800175c <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8001764:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <mpu_get_gyro_fsr+0x64>)
 8001766:	7a1b      	ldrb	r3, [r3, #8]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d81e      	bhi.n	80017aa <mpu_get_gyro_fsr+0x4e>
 800176c:	a201      	add	r2, pc, #4	@ (adr r2, 8001774 <mpu_get_gyro_fsr+0x18>)
 800176e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001772:	bf00      	nop
 8001774:	08001785 	.word	0x08001785
 8001778:	0800178d 	.word	0x0800178d
 800177c:	08001797 	.word	0x08001797
 8001780:	080017a1 	.word	0x080017a1
    case INV_FSR_250DPS:
        fsr[0] = 250;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	22fa      	movs	r2, #250	@ 0xfa
 8001788:	801a      	strh	r2, [r3, #0]
        break;
 800178a:	e012      	b.n	80017b2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001792:	801a      	strh	r2, [r3, #0]
        break;
 8001794:	e00d      	b.n	80017b2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800179c:	801a      	strh	r2, [r3, #0]
        break;
 800179e:	e008      	b.n	80017b2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80017a6:	801a      	strh	r2, [r3, #0]
        break;
 80017a8:	e003      	b.n	80017b2 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	801a      	strh	r2, [r3, #0]
        break;
 80017b0:	bf00      	nop
    }
    return 0;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	20000000 	.word	0x20000000

080017c4 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af04      	add	r7, sp, #16
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80017ce:	4b2b      	ldr	r3, [pc, #172]	@ (800187c <mpu_set_gyro_fsr+0xb8>)
 80017d0:	7a9b      	ldrb	r3, [r3, #10]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <mpu_set_gyro_fsr+0x18>
        return -1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	e04a      	b.n	8001872 <mpu_set_gyro_fsr+0xae>

    switch (fsr) {
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80017e2:	d017      	beq.n	8001814 <mpu_set_gyro_fsr+0x50>
 80017e4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80017e8:	dc17      	bgt.n	800181a <mpu_set_gyro_fsr+0x56>
 80017ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017ee:	d00e      	beq.n	800180e <mpu_set_gyro_fsr+0x4a>
 80017f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017f4:	dc11      	bgt.n	800181a <mpu_set_gyro_fsr+0x56>
 80017f6:	2bfa      	cmp	r3, #250	@ 0xfa
 80017f8:	d003      	beq.n	8001802 <mpu_set_gyro_fsr+0x3e>
 80017fa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017fe:	d003      	beq.n	8001808 <mpu_set_gyro_fsr+0x44>
 8001800:	e00b      	b.n	800181a <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
        break;
 8001806:	e00b      	b.n	8001820 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8001808:	2308      	movs	r3, #8
 800180a:	73fb      	strb	r3, [r7, #15]
        break;
 800180c:	e008      	b.n	8001820 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 800180e:	2310      	movs	r3, #16
 8001810:	73fb      	strb	r3, [r7, #15]
        break;
 8001812:	e005      	b.n	8001820 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8001814:	2318      	movs	r3, #24
 8001816:	73fb      	strb	r3, [r7, #15]
        break;
 8001818:	e002      	b.n	8001820 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	e028      	b.n	8001872 <mpu_set_gyro_fsr+0xae>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8001820:	4b16      	ldr	r3, [pc, #88]	@ (800187c <mpu_set_gyro_fsr+0xb8>)
 8001822:	7a1a      	ldrb	r2, [r3, #8]
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	08db      	lsrs	r3, r3, #3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	429a      	cmp	r2, r3
 800182c:	d101      	bne.n	8001832 <mpu_set_gyro_fsr+0x6e>
        return 0;
 800182e:	2300      	movs	r3, #0
 8001830:	e01f      	b.n	8001872 <mpu_set_gyro_fsr+0xae>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8001832:	4b12      	ldr	r3, [pc, #72]	@ (800187c <mpu_set_gyro_fsr+0xb8>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	b299      	uxth	r1, r3
 800183c:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <mpu_set_gyro_fsr+0xb8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	799b      	ldrb	r3, [r3, #6]
 8001842:	461a      	mov	r2, r3
 8001844:	2305      	movs	r3, #5
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	2301      	movs	r3, #1
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	f107 030f 	add.w	r3, r7, #15
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2301      	movs	r3, #1
 8001854:	480a      	ldr	r0, [pc, #40]	@ (8001880 <mpu_set_gyro_fsr+0xbc>)
 8001856:	f006 fa63 	bl	8007d20 <HAL_I2C_Mem_Write>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <mpu_set_gyro_fsr+0xa2>
        return -1;
 8001860:	f04f 33ff 	mov.w	r3, #4294967295
 8001864:	e005      	b.n	8001872 <mpu_set_gyro_fsr+0xae>
    st.chip_cfg.gyro_fsr = data >> 3;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	08db      	lsrs	r3, r3, #3
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b03      	ldr	r3, [pc, #12]	@ (800187c <mpu_set_gyro_fsr+0xb8>)
 800186e:	721a      	strb	r2, [r3, #8]
    return 0;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000000 	.word	0x20000000
 8001880:	200002e8 	.word	0x200002e8

08001884 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 800188c:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <mpu_get_accel_fsr+0x70>)
 800188e:	7a5b      	ldrb	r3, [r3, #9]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d81b      	bhi.n	80018cc <mpu_get_accel_fsr+0x48>
 8001894:	a201      	add	r2, pc, #4	@ (adr r2, 800189c <mpu_get_accel_fsr+0x18>)
 8001896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189a:	bf00      	nop
 800189c:	080018ad 	.word	0x080018ad
 80018a0:	080018b5 	.word	0x080018b5
 80018a4:	080018bd 	.word	0x080018bd
 80018a8:	080018c5 	.word	0x080018c5
    case INV_FSR_2G:
        fsr[0] = 2;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	701a      	strb	r2, [r3, #0]
        break;
 80018b2:	e00e      	b.n	80018d2 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2204      	movs	r2, #4
 80018b8:	701a      	strb	r2, [r3, #0]
        break;
 80018ba:	e00a      	b.n	80018d2 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2208      	movs	r2, #8
 80018c0:	701a      	strb	r2, [r3, #0]
        break;
 80018c2:	e006      	b.n	80018d2 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2210      	movs	r2, #16
 80018c8:	701a      	strb	r2, [r3, #0]
        break;
 80018ca:	e002      	b.n	80018d2 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295
 80018d0:	e00a      	b.n	80018e8 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <mpu_get_accel_fsr+0x70>)
 80018d4:	7cdb      	ldrb	r3, [r3, #19]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	701a      	strb	r2, [r3, #0]
    return 0;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	20000000 	.word	0x20000000

080018f8 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af04      	add	r7, sp, #16
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001902:	4b34      	ldr	r3, [pc, #208]	@ (80019d4 <mpu_set_accel_fsr+0xdc>)
 8001904:	7a9b      	ldrb	r3, [r3, #10]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d102      	bne.n	8001910 <mpu_set_accel_fsr+0x18>
        return -1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	e05d      	b.n	80019cc <mpu_set_accel_fsr+0xd4>

    switch (fsr) {
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	3b02      	subs	r3, #2
 8001914:	2b0e      	cmp	r3, #14
 8001916:	d82d      	bhi.n	8001974 <mpu_set_accel_fsr+0x7c>
 8001918:	a201      	add	r2, pc, #4	@ (adr r2, 8001920 <mpu_set_accel_fsr+0x28>)
 800191a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191e:	bf00      	nop
 8001920:	0800195d 	.word	0x0800195d
 8001924:	08001975 	.word	0x08001975
 8001928:	08001963 	.word	0x08001963
 800192c:	08001975 	.word	0x08001975
 8001930:	08001975 	.word	0x08001975
 8001934:	08001975 	.word	0x08001975
 8001938:	08001969 	.word	0x08001969
 800193c:	08001975 	.word	0x08001975
 8001940:	08001975 	.word	0x08001975
 8001944:	08001975 	.word	0x08001975
 8001948:	08001975 	.word	0x08001975
 800194c:	08001975 	.word	0x08001975
 8001950:	08001975 	.word	0x08001975
 8001954:	08001975 	.word	0x08001975
 8001958:	0800196f 	.word	0x0800196f
    case 2:
        data = INV_FSR_2G << 3;
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]
        break;
 8001960:	e00b      	b.n	800197a <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 8001962:	2308      	movs	r3, #8
 8001964:	73fb      	strb	r3, [r7, #15]
        break;
 8001966:	e008      	b.n	800197a <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8001968:	2310      	movs	r3, #16
 800196a:	73fb      	strb	r3, [r7, #15]
        break;
 800196c:	e005      	b.n	800197a <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 800196e:	2318      	movs	r3, #24
 8001970:	73fb      	strb	r3, [r7, #15]
        break;
 8001972:	e002      	b.n	800197a <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
 8001978:	e028      	b.n	80019cc <mpu_set_accel_fsr+0xd4>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 800197a:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <mpu_set_accel_fsr+0xdc>)
 800197c:	7a5a      	ldrb	r2, [r3, #9]
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	08db      	lsrs	r3, r3, #3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	429a      	cmp	r2, r3
 8001986:	d101      	bne.n	800198c <mpu_set_accel_fsr+0x94>
        return 0;
 8001988:	2300      	movs	r3, #0
 800198a:	e01f      	b.n	80019cc <mpu_set_accel_fsr+0xd4>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <mpu_set_accel_fsr+0xdc>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b299      	uxth	r1, r3
 8001996:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <mpu_set_accel_fsr+0xdc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	79db      	ldrb	r3, [r3, #7]
 800199c:	461a      	mov	r2, r3
 800199e:	2305      	movs	r3, #5
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	2301      	movs	r3, #1
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	f107 030f 	add.w	r3, r7, #15
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2301      	movs	r3, #1
 80019ae:	480a      	ldr	r0, [pc, #40]	@ (80019d8 <mpu_set_accel_fsr+0xe0>)
 80019b0:	f006 f9b6 	bl	8007d20 <HAL_I2C_Mem_Write>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <mpu_set_accel_fsr+0xc8>
        return -1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	e005      	b.n	80019cc <mpu_set_accel_fsr+0xd4>
    st.chip_cfg.accel_fsr = data >> 3;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	08db      	lsrs	r3, r3, #3
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <mpu_set_accel_fsr+0xdc>)
 80019c8:	725a      	strb	r2, [r3, #9]
    return 0;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	200002e8 	.word	0x200002e8

080019dc <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <mpu_get_lpf+0x78>)
 80019e6:	7adb      	ldrb	r3, [r3, #11]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	2b05      	cmp	r3, #5
 80019ec:	d826      	bhi.n	8001a3c <mpu_get_lpf+0x60>
 80019ee:	a201      	add	r2, pc, #4	@ (adr r2, 80019f4 <mpu_get_lpf+0x18>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001a0d 	.word	0x08001a0d
 80019f8:	08001a15 	.word	0x08001a15
 80019fc:	08001a1d 	.word	0x08001a1d
 8001a00:	08001a25 	.word	0x08001a25
 8001a04:	08001a2d 	.word	0x08001a2d
 8001a08:	08001a35 	.word	0x08001a35
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	22bc      	movs	r2, #188	@ 0xbc
 8001a10:	801a      	strh	r2, [r3, #0]
        break;
 8001a12:	e017      	b.n	8001a44 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2262      	movs	r2, #98	@ 0x62
 8001a18:	801a      	strh	r2, [r3, #0]
        break;
 8001a1a:	e013      	b.n	8001a44 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	222a      	movs	r2, #42	@ 0x2a
 8001a20:	801a      	strh	r2, [r3, #0]
        break;
 8001a22:	e00f      	b.n	8001a44 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2214      	movs	r2, #20
 8001a28:	801a      	strh	r2, [r3, #0]
        break;
 8001a2a:	e00b      	b.n	8001a44 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	220a      	movs	r2, #10
 8001a30:	801a      	strh	r2, [r3, #0]
        break;
 8001a32:	e007      	b.n	8001a44 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2205      	movs	r2, #5
 8001a38:	801a      	strh	r2, [r3, #0]
        break;
 8001a3a:	e003      	b.n	8001a44 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	801a      	strh	r2, [r3, #0]
        break;
 8001a42:	bf00      	nop
    }
    return 0;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000000 	.word	0x20000000

08001a58 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af04      	add	r7, sp, #16
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001a62:	4b28      	ldr	r3, [pc, #160]	@ (8001b04 <mpu_set_lpf+0xac>)
 8001a64:	7a9b      	ldrb	r3, [r3, #10]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d102      	bne.n	8001a70 <mpu_set_lpf+0x18>
        return -1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6e:	e044      	b.n	8001afa <mpu_set_lpf+0xa2>

    if (lpf >= 188)
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	2bbb      	cmp	r3, #187	@ 0xbb
 8001a74:	d902      	bls.n	8001a7c <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	e019      	b.n	8001ab0 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	2b61      	cmp	r3, #97	@ 0x61
 8001a80:	d902      	bls.n	8001a88 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 8001a82:	2302      	movs	r3, #2
 8001a84:	73fb      	strb	r3, [r7, #15]
 8001a86:	e013      	b.n	8001ab0 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	2b29      	cmp	r3, #41	@ 0x29
 8001a8c:	d902      	bls.n	8001a94 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	73fb      	strb	r3, [r7, #15]
 8001a92:	e00d      	b.n	8001ab0 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	2b13      	cmp	r3, #19
 8001a98:	d902      	bls.n	8001aa0 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	73fb      	strb	r3, [r7, #15]
 8001a9e:	e007      	b.n	8001ab0 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	2b09      	cmp	r3, #9
 8001aa4:	d902      	bls.n	8001aac <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	e001      	b.n	8001ab0 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8001aac:	2306      	movs	r3, #6
 8001aae:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <mpu_set_lpf+0xac>)
 8001ab2:	7ada      	ldrb	r2, [r3, #11]
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d101      	bne.n	8001abe <mpu_set_lpf+0x66>
        return 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e01d      	b.n	8001afa <mpu_set_lpf+0xa2>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001abe:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <mpu_set_lpf+0xac>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	b299      	uxth	r1, r3
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <mpu_set_lpf+0xac>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	789b      	ldrb	r3, [r3, #2]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2305      	movs	r3, #5
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	f107 030f 	add.w	r3, r7, #15
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	4809      	ldr	r0, [pc, #36]	@ (8001b08 <mpu_set_lpf+0xb0>)
 8001ae2:	f006 f91d 	bl	8007d20 <HAL_I2C_Mem_Write>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <mpu_set_lpf+0x9a>
        return -1;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
 8001af0:	e003      	b.n	8001afa <mpu_set_lpf+0xa2>
    st.chip_cfg.lpf = data;
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <mpu_set_lpf+0xac>)
 8001af6:	72da      	strb	r2, [r3, #11]
    return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000000 	.word	0x20000000
 8001b08:	200002e8 	.word	0x200002e8

08001b0c <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <mpu_get_sample_rate+0x30>)
 8001b16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <mpu_get_sample_rate+0x18>
        return -1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b22:	e004      	b.n	8001b2e <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8001b24:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <mpu_get_sample_rate+0x30>)
 8001b26:	89da      	ldrh	r2, [r3, #14]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	801a      	strh	r2, [r3, #0]
    return 0;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000000 	.word	0x20000000

08001b40 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af04      	add	r7, sp, #16
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001b4a:	4b34      	ldr	r3, [pc, #208]	@ (8001c1c <mpu_set_sample_rate+0xdc>)
 8001b4c:	7a9b      	ldrb	r3, [r3, #10]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <mpu_set_sample_rate+0x18>
        return -1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	e05c      	b.n	8001c12 <mpu_set_sample_rate+0xd2>

    if (st.chip_cfg.dmp_on)
 8001b58:	4b30      	ldr	r3, [pc, #192]	@ (8001c1c <mpu_set_sample_rate+0xdc>)
 8001b5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <mpu_set_sample_rate+0x28>
        return -1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e054      	b.n	8001c12 <mpu_set_sample_rate+0xd2>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8001b68:	4b2c      	ldr	r3, [pc, #176]	@ (8001c1c <mpu_set_sample_rate+0xdc>)
 8001b6a:	7d1b      	ldrb	r3, [r3, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00f      	beq.n	8001b90 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d009      	beq.n	8001b8a <mpu_set_sample_rate+0x4a>
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	2b28      	cmp	r3, #40	@ 0x28
 8001b7a:	d806      	bhi.n	8001b8a <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fbf1 	bl	8001368 <mpu_lp_accel_mode>
                return 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e043      	b.n	8001c12 <mpu_set_sample_rate+0xd2>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff fbec 	bl	8001368 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d802      	bhi.n	8001b9c <mpu_set_sample_rate+0x5c>
            rate = 4;
 8001b96:	2304      	movs	r3, #4
 8001b98:	80fb      	strh	r3, [r7, #6]
 8001b9a:	e006      	b.n	8001baa <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ba2:	d902      	bls.n	8001baa <mpu_set_sample_rate+0x6a>
            rate = 1000;
 8001ba4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ba8:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8001bbc:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <mpu_set_sample_rate+0xdc>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <mpu_set_sample_rate+0xdc>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	785b      	ldrb	r3, [r3, #1]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2305      	movs	r3, #5
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	f107 030f 	add.w	r3, r7, #15
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2301      	movs	r3, #1
 8001bde:	4810      	ldr	r0, [pc, #64]	@ (8001c20 <mpu_set_sample_rate+0xe0>)
 8001be0:	f006 f89e 	bl	8007d20 <HAL_I2C_Mem_Write>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <mpu_set_sample_rate+0xb0>
            return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e010      	b.n	8001c12 <mpu_set_sample_rate+0xd2>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bf8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <mpu_set_sample_rate+0xdc>)
 8001c00:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <mpu_set_sample_rate+0xdc>)
 8001c04:	89db      	ldrh	r3, [r3, #14]
 8001c06:	085b      	lsrs	r3, r3, #1
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff24 	bl	8001a58 <mpu_set_lpf>
        return 0;
 8001c10:	2300      	movs	r3, #0
    }
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	200002e8 	.word	0x200002e8

08001c24 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8001c2c:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <mpu_get_gyro_sens+0x5c>)
 8001c2e:	7a1b      	ldrb	r3, [r3, #8]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d81b      	bhi.n	8001c6c <mpu_get_gyro_sens+0x48>
 8001c34:	a201      	add	r2, pc, #4	@ (adr r2, 8001c3c <mpu_get_gyro_sens+0x18>)
 8001c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3a:	bf00      	nop
 8001c3c:	08001c4d 	.word	0x08001c4d
 8001c40:	08001c55 	.word	0x08001c55
 8001c44:	08001c5d 	.word	0x08001c5d
 8001c48:	08001c65 	.word	0x08001c65
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c84 <mpu_get_gyro_sens+0x60>)
 8001c50:	601a      	str	r2, [r3, #0]
        break;
 8001c52:	e00e      	b.n	8001c72 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a0c      	ldr	r2, [pc, #48]	@ (8001c88 <mpu_get_gyro_sens+0x64>)
 8001c58:	601a      	str	r2, [r3, #0]
        break;
 8001c5a:	e00a      	b.n	8001c72 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c8c <mpu_get_gyro_sens+0x68>)
 8001c60:	601a      	str	r2, [r3, #0]
        break;
 8001c62:	e006      	b.n	8001c72 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <mpu_get_gyro_sens+0x6c>)
 8001c68:	601a      	str	r2, [r3, #0]
        break;
 8001c6a:	e002      	b.n	8001c72 <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	e000      	b.n	8001c74 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	20000000 	.word	0x20000000
 8001c84:	43030000 	.word	0x43030000
 8001c88:	42830000 	.word	0x42830000
 8001c8c:	42033333 	.word	0x42033333
 8001c90:	41833333 	.word	0x41833333

08001c94 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d0c <mpu_get_accel_sens+0x78>)
 8001c9e:	7a5b      	ldrb	r3, [r3, #9]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d81f      	bhi.n	8001ce4 <mpu_get_accel_sens+0x50>
 8001ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cac <mpu_get_accel_sens+0x18>)
 8001ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001caa:	bf00      	nop
 8001cac:	08001cbd 	.word	0x08001cbd
 8001cb0:	08001cc7 	.word	0x08001cc7
 8001cb4:	08001cd1 	.word	0x08001cd1
 8001cb8:	08001cdb 	.word	0x08001cdb
    case INV_FSR_2G:
        sens[0] = 16384;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cc2:	801a      	strh	r2, [r3, #0]
        break;
 8001cc4:	e011      	b.n	8001cea <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f641 729c 	movw	r2, #8092	@ 0x1f9c
 8001ccc:	801a      	strh	r2, [r3, #0]
        break;
 8001cce:	e00c      	b.n	8001cea <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cd6:	801a      	strh	r2, [r3, #0]
        break;
 8001cd8:	e007      	b.n	8001cea <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ce0:	801a      	strh	r2, [r3, #0]
        break;
 8001ce2:	e002      	b.n	8001cea <mpu_get_accel_sens+0x56>
    default:
        return -1;
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce8:	e00a      	b.n	8001d00 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8001cea:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <mpu_get_accel_sens+0x78>)
 8001cec:	7cdb      	ldrb	r3, [r3, #19]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	085b      	lsrs	r3, r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	801a      	strh	r2, [r3, #0]
    return 0;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	20000000 	.word	0x20000000

08001d10 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <mpu_get_fifo_config+0x20>)
 8001d1a:	7c1a      	ldrb	r2, [r3, #16]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	701a      	strb	r2, [r3, #0]
    return 0;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000000 	.word	0x20000000

08001d34 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 8001d4a:	4b22      	ldr	r3, [pc, #136]	@ (8001dd4 <mpu_configure_fifo+0xa0>)
 8001d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <mpu_configure_fifo+0x24>
        return 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e038      	b.n	8001dca <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 8001d58:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <mpu_configure_fifo+0xa0>)
 8001d5a:	7a9b      	ldrb	r3, [r3, #10]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <mpu_configure_fifo+0x32>
            return -1;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
 8001d64:	e031      	b.n	8001dca <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 8001d66:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <mpu_configure_fifo+0xa0>)
 8001d68:	7c1b      	ldrb	r3, [r3, #16]
 8001d6a:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8001d6c:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <mpu_configure_fifo+0xa0>)
 8001d6e:	7a9a      	ldrb	r2, [r3, #10]
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	4013      	ands	r3, r2
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4b17      	ldr	r3, [pc, #92]	@ (8001dd4 <mpu_configure_fifo+0xa0>)
 8001d78:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8001d7a:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <mpu_configure_fifo+0xa0>)
 8001d7c:	7c1b      	ldrb	r3, [r3, #16]
 8001d7e:	79fa      	ldrb	r2, [r7, #7]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d003      	beq.n	8001d8c <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	e001      	b.n	8001d90 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <mpu_configure_fifo+0x6a>
 8001d96:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <mpu_configure_fifo+0xa0>)
 8001d98:	7d1b      	ldrb	r3, [r3, #20]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <mpu_configure_fifo+0x72>
            set_int_enable(1);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f7ff f938 	bl	8001014 <set_int_enable>
 8001da4:	e002      	b.n	8001dac <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff f934 	bl	8001014 <set_int_enable>
        if (sensors) {
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00a      	beq.n	8001dc8 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8001db2:	f7ff fb6b 	bl	800148c <mpu_reset_fifo>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8001dbc:	4a05      	ldr	r2, [pc, #20]	@ (8001dd4 <mpu_configure_fifo+0xa0>)
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	7413      	strb	r3, [r2, #16]
                return -1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	e000      	b.n	8001dca <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000000 	.word	0x20000000

08001dd8 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af04      	add	r7, sp, #16
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	e007      	b.n	8001e02 <mpu_set_sensors+0x2a>
    else if (sensors)
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <mpu_set_sensors+0x26>
        data = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e001      	b.n	8001e02 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8001dfe:	2340      	movs	r3, #64	@ 0x40
 8001e00:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001e02:	4b40      	ldr	r3, [pc, #256]	@ (8001f04 <mpu_set_sensors+0x12c>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	b299      	uxth	r1, r3
 8001e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f04 <mpu_set_sensors+0x12c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	7c9b      	ldrb	r3, [r3, #18]
 8001e12:	461a      	mov	r2, r3
 8001e14:	2305      	movs	r3, #5
 8001e16:	9302      	str	r3, [sp, #8]
 8001e18:	2301      	movs	r3, #1
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	f107 030f 	add.w	r3, r7, #15
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2301      	movs	r3, #1
 8001e24:	4838      	ldr	r0, [pc, #224]	@ (8001f08 <mpu_set_sensors+0x130>)
 8001e26:	f005 ff7b 	bl	8007d20 <HAL_I2C_Mem_Write>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
 8001e30:	4b34      	ldr	r3, [pc, #208]	@ (8001f04 <mpu_set_sensors+0x12c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	729a      	strb	r2, [r3, #10]
        return -1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	e05f      	b.n	8001efc <mpu_set_sensors+0x124>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	4b2f      	ldr	r3, [pc, #188]	@ (8001f04 <mpu_set_sensors+0x12c>)
 8001e46:	731a      	strb	r2, [r3, #12]

    data = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d104      	bne.n	8001e60 <mpu_set_sensors+0x88>
        data |= BIT_STBY_XG;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d104      	bne.n	8001e74 <mpu_set_sensors+0x9c>
        data |= BIT_STBY_YG;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d104      	bne.n	8001e88 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_ZG;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d104      	bne.n	8001e9c <mpu_set_sensors+0xc4>
        data |= BIT_STBY_XYZA;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001e9c:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <mpu_set_sensors+0x12c>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	b299      	uxth	r1, r3
 8001ea6:	4b17      	ldr	r3, [pc, #92]	@ (8001f04 <mpu_set_sensors+0x12c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	7cdb      	ldrb	r3, [r3, #19]
 8001eac:	461a      	mov	r2, r3
 8001eae:	2305      	movs	r3, #5
 8001eb0:	9302      	str	r3, [sp, #8]
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	f107 030f 	add.w	r3, r7, #15
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	4812      	ldr	r0, [pc, #72]	@ (8001f08 <mpu_set_sensors+0x130>)
 8001ec0:	f005 ff2e 	bl	8007d20 <HAL_I2C_Mem_Write>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <mpu_set_sensors+0xfe>
        st.chip_cfg.sensors = 0;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <mpu_set_sensors+0x12c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	729a      	strb	r2, [r3, #10]
        return -1;
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed4:	e012      	b.n	8001efc <mpu_set_sensors+0x124>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <mpu_set_sensors+0x110>
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d002      	beq.n	8001ee8 <mpu_set_sensors+0x110>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f000 f9ac 	bl	8002240 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8001ee8:	4a06      	ldr	r2, [pc, #24]	@ (8001f04 <mpu_set_sensors+0x12c>)
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8001eee:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <mpu_set_sensors+0x12c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8001ef4:	2032      	movs	r0, #50	@ 0x32
 8001ef6:	f005 fa51 	bl	800739c <HAL_Delay>
    return 0;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000000 	.word	0x20000000
 8001f08:	200002e8 	.word	0x200002e8

08001f0c <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	@ 0x28
 8001f10:	af04      	add	r7, sp, #16
 8001f12:	4603      	mov	r3, r0
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8001f1a:	4b48      	ldr	r3, [pc, #288]	@ (800203c <mpu_read_fifo_stream+0x130>)
 8001f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <mpu_read_fifo_stream+0x1e>
        return -1;
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
 8001f28:	e083      	b.n	8002032 <mpu_read_fifo_stream+0x126>
    if (!st.chip_cfg.sensors)
 8001f2a:	4b44      	ldr	r3, [pc, #272]	@ (800203c <mpu_read_fifo_stream+0x130>)
 8001f2c:	7a9b      	ldrb	r3, [r3, #10]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d102      	bne.n	8001f38 <mpu_read_fifo_stream+0x2c>
        return -1;
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	e07c      	b.n	8002032 <mpu_read_fifo_stream+0x126>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8001f38:	4b40      	ldr	r3, [pc, #256]	@ (800203c <mpu_read_fifo_stream+0x130>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	b299      	uxth	r1, r3
 8001f42:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <mpu_read_fifo_stream+0x130>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	7a9b      	ldrb	r3, [r3, #10]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2305      	movs	r3, #5
 8001f4c:	9302      	str	r3, [sp, #8]
 8001f4e:	2302      	movs	r3, #2
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2301      	movs	r3, #1
 8001f5a:	4839      	ldr	r0, [pc, #228]	@ (8002040 <mpu_read_fifo_stream+0x134>)
 8001f5c:	f005 ffda 	bl	8007f14 <HAL_I2C_Mem_Read>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <mpu_read_fifo_stream+0x60>
        return -1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e062      	b.n	8002032 <mpu_read_fifo_stream+0x126>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8001f6c:	7d3b      	ldrb	r3, [r7, #20]
 8001f6e:	b21b      	sxth	r3, r3
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	b21a      	sxth	r2, r3
 8001f74:	7d7b      	ldrb	r3, [r7, #21]
 8001f76:	b21b      	sxth	r3, r3
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8001f7e:	8afa      	ldrh	r2, [r7, #22]
 8001f80:	89fb      	ldrh	r3, [r7, #14]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d205      	bcs.n	8001f92 <mpu_read_fifo_stream+0x86>
        more[0] = 0;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
        return -1;
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f90:	e04f      	b.n	8002032 <mpu_read_fifo_stream+0x126>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8001f92:	4b2a      	ldr	r3, [pc, #168]	@ (800203c <mpu_read_fifo_stream+0x130>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	885b      	ldrh	r3, [r3, #2]
 8001f98:	085b      	lsrs	r3, r3, #1
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	8afa      	ldrh	r2, [r7, #22]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d923      	bls.n	8001fea <mpu_read_fifo_stream+0xde>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8001fa2:	4b26      	ldr	r3, [pc, #152]	@ (800203c <mpu_read_fifo_stream+0x130>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	b299      	uxth	r1, r3
 8001fac:	4b23      	ldr	r3, [pc, #140]	@ (800203c <mpu_read_fifo_stream+0x130>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	7c5b      	ldrb	r3, [r3, #17]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2305      	movs	r3, #5
 8001fb6:	9302      	str	r3, [sp, #8]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	481e      	ldr	r0, [pc, #120]	@ (8002040 <mpu_read_fifo_stream+0x134>)
 8001fc6:	f005 ffa5 	bl	8007f14 <HAL_I2C_Mem_Read>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <mpu_read_fifo_stream+0xca>
            return -1;
 8001fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd4:	e02d      	b.n	8002032 <mpu_read_fifo_stream+0x126>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8001fd6:	7d3b      	ldrb	r3, [r7, #20]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d004      	beq.n	8001fea <mpu_read_fifo_stream+0xde>
            mpu_reset_fifo();
 8001fe0:	f7ff fa54 	bl	800148c <mpu_reset_fifo>
            return -2;
 8001fe4:	f06f 0301 	mvn.w	r3, #1
 8001fe8:	e023      	b.n	8002032 <mpu_read_fifo_stream+0x126>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8001fea:	4b14      	ldr	r3, [pc, #80]	@ (800203c <mpu_read_fifo_stream+0x130>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	b299      	uxth	r1, r3
 8001ff4:	4b11      	ldr	r3, [pc, #68]	@ (800203c <mpu_read_fifo_stream+0x130>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	7adb      	ldrb	r3, [r3, #11]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2305      	movs	r3, #5
 8001ffe:	9302      	str	r3, [sp, #8]
 8002000:	89fb      	ldrh	r3, [r7, #14]
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2301      	movs	r3, #1
 800200a:	480d      	ldr	r0, [pc, #52]	@ (8002040 <mpu_read_fifo_stream+0x134>)
 800200c:	f005 ff82 	bl	8007f14 <HAL_I2C_Mem_Read>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <mpu_read_fifo_stream+0x110>
        return -1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	e00a      	b.n	8002032 <mpu_read_fifo_stream+0x126>
    more[0] = fifo_count / length - 1;
 800201c:	8afa      	ldrh	r2, [r7, #22]
 800201e:	89fb      	ldrh	r3, [r7, #14]
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	b29b      	uxth	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	3b01      	subs	r3, #1
 800202a:	b2da      	uxtb	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	701a      	strb	r2, [r3, #0]
    return 0;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000000 	.word	0x20000000
 8002040:	200002e8 	.word	0x200002e8

08002044 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af04      	add	r7, sp, #16
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800204e:	4b7a      	ldr	r3, [pc, #488]	@ (8002238 <mpu_set_bypass+0x1f4>)
 8002050:	7c9b      	ldrb	r3, [r3, #18]
 8002052:	79fa      	ldrb	r2, [r7, #7]
 8002054:	429a      	cmp	r2, r3
 8002056:	d101      	bne.n	800205c <mpu_set_bypass+0x18>
        return 0;
 8002058:	2300      	movs	r3, #0
 800205a:	e0e8      	b.n	800222e <mpu_set_bypass+0x1ea>

    if (bypass_on) {
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d06b      	beq.n	800213a <mpu_set_bypass+0xf6>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002062:	4b75      	ldr	r3, [pc, #468]	@ (8002238 <mpu_set_bypass+0x1f4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	b299      	uxth	r1, r3
 800206c:	4b72      	ldr	r3, [pc, #456]	@ (8002238 <mpu_set_bypass+0x1f4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	791b      	ldrb	r3, [r3, #4]
 8002072:	461a      	mov	r2, r3
 8002074:	2305      	movs	r3, #5
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	2301      	movs	r3, #1
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	f107 030f 	add.w	r3, r7, #15
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2301      	movs	r3, #1
 8002084:	486d      	ldr	r0, [pc, #436]	@ (800223c <mpu_set_bypass+0x1f8>)
 8002086:	f005 ff45 	bl	8007f14 <HAL_I2C_Mem_Read>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <mpu_set_bypass+0x52>
            return -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
 8002094:	e0cb      	b.n	800222e <mpu_set_bypass+0x1ea>
        tmp &= ~BIT_AUX_IF_EN;
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	f023 0320 	bic.w	r3, r3, #32
 800209c:	b2db      	uxtb	r3, r3
 800209e:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80020a0:	4b65      	ldr	r3, [pc, #404]	@ (8002238 <mpu_set_bypass+0x1f4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	b299      	uxth	r1, r3
 80020aa:	4b63      	ldr	r3, [pc, #396]	@ (8002238 <mpu_set_bypass+0x1f4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	791b      	ldrb	r3, [r3, #4]
 80020b0:	461a      	mov	r2, r3
 80020b2:	2305      	movs	r3, #5
 80020b4:	9302      	str	r3, [sp, #8]
 80020b6:	2301      	movs	r3, #1
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	f107 030f 	add.w	r3, r7, #15
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	2301      	movs	r3, #1
 80020c2:	485e      	ldr	r0, [pc, #376]	@ (800223c <mpu_set_bypass+0x1f8>)
 80020c4:	f005 fe2c 	bl	8007d20 <HAL_I2C_Mem_Write>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <mpu_set_bypass+0x90>
            return -1;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	e0ac      	b.n	800222e <mpu_set_bypass+0x1ea>
        delay_ms(3);
 80020d4:	2003      	movs	r0, #3
 80020d6:	f005 f961 	bl	800739c <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 80020da:	2302      	movs	r3, #2
 80020dc:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 80020de:	4b56      	ldr	r3, [pc, #344]	@ (8002238 <mpu_set_bypass+0x1f4>)
 80020e0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d004      	beq.n	80020f2 <mpu_set_bypass+0xae>
            tmp |= BIT_ACTL;
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 80020f2:	4b51      	ldr	r3, [pc, #324]	@ (8002238 <mpu_set_bypass+0x1f4>)
 80020f4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d004      	beq.n	8002106 <mpu_set_bypass+0xc2>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002102:	b2db      	uxtb	r3, r3
 8002104:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002106:	4b4c      	ldr	r3, [pc, #304]	@ (8002238 <mpu_set_bypass+0x1f4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	b299      	uxth	r1, r3
 8002110:	4b49      	ldr	r3, [pc, #292]	@ (8002238 <mpu_set_bypass+0x1f4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	7d1b      	ldrb	r3, [r3, #20]
 8002116:	461a      	mov	r2, r3
 8002118:	2305      	movs	r3, #5
 800211a:	9302      	str	r3, [sp, #8]
 800211c:	2301      	movs	r3, #1
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	f107 030f 	add.w	r3, r7, #15
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	2301      	movs	r3, #1
 8002128:	4844      	ldr	r0, [pc, #272]	@ (800223c <mpu_set_bypass+0x1f8>)
 800212a:	f005 fdf9 	bl	8007d20 <HAL_I2C_Mem_Write>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d078      	beq.n	8002226 <mpu_set_bypass+0x1e2>
            return -1;
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
 8002138:	e079      	b.n	800222e <mpu_set_bypass+0x1ea>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800213a:	4b3f      	ldr	r3, [pc, #252]	@ (8002238 <mpu_set_bypass+0x1f4>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	b299      	uxth	r1, r3
 8002144:	4b3c      	ldr	r3, [pc, #240]	@ (8002238 <mpu_set_bypass+0x1f4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	791b      	ldrb	r3, [r3, #4]
 800214a:	461a      	mov	r2, r3
 800214c:	2305      	movs	r3, #5
 800214e:	9302      	str	r3, [sp, #8]
 8002150:	2301      	movs	r3, #1
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	f107 030f 	add.w	r3, r7, #15
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2301      	movs	r3, #1
 800215c:	4837      	ldr	r0, [pc, #220]	@ (800223c <mpu_set_bypass+0x1f8>)
 800215e:	f005 fed9 	bl	8007f14 <HAL_I2C_Mem_Read>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <mpu_set_bypass+0x12a>
            return -1;
 8002168:	f04f 33ff 	mov.w	r3, #4294967295
 800216c:	e05f      	b.n	800222e <mpu_set_bypass+0x1ea>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800216e:	4b32      	ldr	r3, [pc, #200]	@ (8002238 <mpu_set_bypass+0x1f4>)
 8002170:	7a9b      	ldrb	r3, [r3, #10]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <mpu_set_bypass+0x142>
            tmp |= BIT_AUX_IF_EN;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	f043 0320 	orr.w	r3, r3, #32
 8002180:	b2db      	uxtb	r3, r3
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	e004      	b.n	8002190 <mpu_set_bypass+0x14c>
        else
            tmp &= ~BIT_AUX_IF_EN;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	f023 0320 	bic.w	r3, r3, #32
 800218c:	b2db      	uxtb	r3, r3
 800218e:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002190:	4b29      	ldr	r3, [pc, #164]	@ (8002238 <mpu_set_bypass+0x1f4>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	b299      	uxth	r1, r3
 800219a:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <mpu_set_bypass+0x1f4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	791b      	ldrb	r3, [r3, #4]
 80021a0:	461a      	mov	r2, r3
 80021a2:	2305      	movs	r3, #5
 80021a4:	9302      	str	r3, [sp, #8]
 80021a6:	2301      	movs	r3, #1
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	f107 030f 	add.w	r3, r7, #15
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2301      	movs	r3, #1
 80021b2:	4822      	ldr	r0, [pc, #136]	@ (800223c <mpu_set_bypass+0x1f8>)
 80021b4:	f005 fdb4 	bl	8007d20 <HAL_I2C_Mem_Write>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <mpu_set_bypass+0x180>
            return -1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
 80021c2:	e034      	b.n	800222e <mpu_set_bypass+0x1ea>
        delay_ms(3);
 80021c4:	2003      	movs	r0, #3
 80021c6:	f005 f8e9 	bl	800739c <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 80021ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <mpu_set_bypass+0x1f4>)
 80021cc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <mpu_set_bypass+0x196>
            tmp = BIT_ACTL;
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e001      	b.n	80021de <mpu_set_bypass+0x19a>
        else
            tmp = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 80021de:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <mpu_set_bypass+0x1f4>)
 80021e0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <mpu_set_bypass+0x1ae>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80021f2:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <mpu_set_bypass+0x1f4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	b299      	uxth	r1, r3
 80021fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <mpu_set_bypass+0x1f4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	7d1b      	ldrb	r3, [r3, #20]
 8002202:	461a      	mov	r2, r3
 8002204:	2305      	movs	r3, #5
 8002206:	9302      	str	r3, [sp, #8]
 8002208:	2301      	movs	r3, #1
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	f107 030f 	add.w	r3, r7, #15
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2301      	movs	r3, #1
 8002214:	4809      	ldr	r0, [pc, #36]	@ (800223c <mpu_set_bypass+0x1f8>)
 8002216:	f005 fd83 	bl	8007d20 <HAL_I2C_Mem_Write>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <mpu_set_bypass+0x1e2>
            return -1;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
 8002224:	e003      	b.n	800222e <mpu_set_bypass+0x1ea>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8002226:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <mpu_set_bypass+0x1f4>)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	7493      	strb	r3, [r2, #18]
    return 0;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000
 800223c:	200002e8 	.word	0x200002e8

08002240 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af04      	add	r7, sp, #16
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800224a:	4b23      	ldr	r3, [pc, #140]	@ (80022d8 <mpu_set_int_latched+0x98>)
 800224c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002250:	79fa      	ldrb	r2, [r7, #7]
 8002252:	429a      	cmp	r2, r3
 8002254:	d101      	bne.n	800225a <mpu_set_int_latched+0x1a>
        return 0;
 8002256:	2300      	movs	r3, #0
 8002258:	e039      	b.n	80022ce <mpu_set_int_latched+0x8e>

    if (enable)
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002260:	2330      	movs	r3, #48	@ 0x30
 8002262:	73fb      	strb	r3, [r7, #15]
 8002264:	e001      	b.n	800226a <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 800226a:	4b1b      	ldr	r3, [pc, #108]	@ (80022d8 <mpu_set_int_latched+0x98>)
 800226c:	7c9b      	ldrb	r3, [r3, #18]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	b2db      	uxtb	r3, r3
 800227a:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 800227c:	4b16      	ldr	r3, [pc, #88]	@ (80022d8 <mpu_set_int_latched+0x98>)
 800227e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002282:	2b00      	cmp	r3, #0
 8002284:	d004      	beq.n	8002290 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800228c:	b2db      	uxtb	r3, r3
 800228e:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <mpu_set_int_latched+0x98>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	b299      	uxth	r1, r3
 800229a:	4b0f      	ldr	r3, [pc, #60]	@ (80022d8 <mpu_set_int_latched+0x98>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	7d1b      	ldrb	r3, [r3, #20]
 80022a0:	461a      	mov	r2, r3
 80022a2:	2305      	movs	r3, #5
 80022a4:	9302      	str	r3, [sp, #8]
 80022a6:	2301      	movs	r3, #1
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	f107 030f 	add.w	r3, r7, #15
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2301      	movs	r3, #1
 80022b2:	480a      	ldr	r0, [pc, #40]	@ (80022dc <mpu_set_int_latched+0x9c>)
 80022b4:	f005 fd34 	bl	8007d20 <HAL_I2C_Mem_Write>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <mpu_set_int_latched+0x84>
        return -1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	e004      	b.n	80022ce <mpu_set_int_latched+0x8e>
    st.chip_cfg.latched_int = enable;
 80022c4:	4a04      	ldr	r2, [pc, #16]	@ (80022d8 <mpu_set_int_latched+0x98>)
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
    return 0;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000000 	.word	0x20000000
 80022dc:	200002e8 	.word	0x200002e8

080022e0 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	@ 0x28
 80022e4:	af04      	add	r7, sp, #16
 80022e6:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 80022e8:	4b45      	ldr	r3, [pc, #276]	@ (8002400 <get_accel_prod_shift+0x120>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	b299      	uxth	r1, r3
 80022f2:	2305      	movs	r3, #5
 80022f4:	9302      	str	r3, [sp, #8]
 80022f6:	2304      	movs	r3, #4
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	f107 0310 	add.w	r3, r7, #16
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2301      	movs	r3, #1
 8002302:	220d      	movs	r2, #13
 8002304:	483f      	ldr	r0, [pc, #252]	@ (8002404 <get_accel_prod_shift+0x124>)
 8002306:	f005 fe05 	bl	8007f14 <HAL_I2C_Mem_Read>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <get_accel_prod_shift+0x34>
        return 0x07;
 8002310:	2307      	movs	r3, #7
 8002312:	e071      	b.n	80023f8 <get_accel_prod_shift+0x118>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 8002314:	7c3b      	ldrb	r3, [r7, #16]
 8002316:	10db      	asrs	r3, r3, #3
 8002318:	b25b      	sxtb	r3, r3
 800231a:	f003 031c 	and.w	r3, r3, #28
 800231e:	b25a      	sxtb	r2, r3
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	111b      	asrs	r3, r3, #4
 8002324:	b25b      	sxtb	r3, r3
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	b25b      	sxtb	r3, r3
 800232c:	4313      	orrs	r3, r2
 800232e:	b25b      	sxtb	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 8002334:	7c7b      	ldrb	r3, [r7, #17]
 8002336:	10db      	asrs	r3, r3, #3
 8002338:	b25b      	sxtb	r3, r3
 800233a:	f003 031c 	and.w	r3, r3, #28
 800233e:	b25a      	sxtb	r2, r3
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	109b      	asrs	r3, r3, #2
 8002344:	b25b      	sxtb	r3, r3
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	b25b      	sxtb	r3, r3
 800234c:	4313      	orrs	r3, r2
 800234e:	b25b      	sxtb	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 8002354:	7cbb      	ldrb	r3, [r7, #18]
 8002356:	10db      	asrs	r3, r3, #3
 8002358:	b25b      	sxtb	r3, r3
 800235a:	f003 031c 	and.w	r3, r3, #28
 800235e:	b25a      	sxtb	r2, r3
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	b25b      	sxtb	r3, r3
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	b25b      	sxtb	r3, r3
 800236a:	4313      	orrs	r3, r2
 800236c:	b25b      	sxtb	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 8002372:	2300      	movs	r3, #0
 8002374:	75fb      	strb	r3, [r7, #23]
 8002376:	e03b      	b.n	80023f0 <get_accel_prod_shift+0x110>
        if (!shift_code[ii]) {
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	3318      	adds	r3, #24
 800237c:	443b      	add	r3, r7
 800237e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d107      	bne.n	8002396 <get_accel_prod_shift+0xb6>
            st_shift[ii] = 0.f;
 8002386:	7dfb      	ldrb	r3, [r7, #23]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
            continue;
 8002394:	e029      	b.n	80023ea <get_accel_prod_shift+0x10a>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	4a1a      	ldr	r2, [pc, #104]	@ (8002408 <get_accel_prod_shift+0x128>)
 80023a0:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 80023a2:	e00f      	b.n	80023c4 <get_accel_prod_shift+0xe4>
            st_shift[ii] *= 1.034f;
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	4413      	add	r3, r2
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800240c <get_accel_prod_shift+0x12c>
 80023bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c0:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	f103 0218 	add.w	r2, r3, #24
 80023ca:	443a      	add	r2, r7
 80023cc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80023d0:	3a01      	subs	r2, #1
 80023d2:	b2d1      	uxtb	r1, r2
 80023d4:	f103 0218 	add.w	r2, r3, #24
 80023d8:	443a      	add	r2, r7
 80023da:	f802 1c0c 	strb.w	r1, [r2, #-12]
 80023de:	3318      	adds	r3, #24
 80023e0:	443b      	add	r3, r7
 80023e2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1dc      	bne.n	80023a4 <get_accel_prod_shift+0xc4>
    for (ii = 0; ii < 3; ii++) {
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
 80023ec:	3301      	adds	r3, #1
 80023ee:	75fb      	strb	r3, [r7, #23]
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d9c0      	bls.n	8002378 <get_accel_prod_shift+0x98>
    }
    return 0;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000000 	.word	0x20000000
 8002404:	200002e8 	.word	0x200002e8
 8002408:	3eae147b 	.word	0x3eae147b
 800240c:	3f845a1d 	.word	0x3f845a1d

08002410 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	@ 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 800241e:	f107 030c 	add.w	r3, r7, #12
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ff5c 	bl	80022e0 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
 800242c:	e063      	b.n	80024f6 <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	6839      	ldr	r1, [r7, #0]
 800243e:	440b      	add	r3, r1
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	bfb8      	it	lt
 8002448:	425b      	neglt	r3, r3
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002452:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8002508 <accel_self_test+0xf8>
 8002456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800245a:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	3328      	adds	r3, #40	@ 0x28
 8002464:	443b      	add	r3, r7
 8002466:	3b1c      	subs	r3, #28
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	d023      	beq.n	80024be <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	3328      	adds	r3, #40	@ 0x28
 800247c:	443b      	add	r3, r7
 800247e:	3b1c      	subs	r3, #28
 8002480:	ed93 7a00 	vldr	s14, [r3]
 8002484:	edd7 6a07 	vldr	s13, [r7, #28]
 8002488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002494:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 8002498:	edd7 7a06 	vldr	s15, [r7, #24]
 800249c:	eef0 7ae7 	vabs.f32	s15, s15
 80024a0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800250c <accel_self_test+0xfc>
 80024a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ac:	dd20      	ble.n	80024f0 <accel_self_test+0xe0>
                result |= 1 << jj;
 80024ae:	2201      	movs	r2, #1
 80024b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	6a3a      	ldr	r2, [r7, #32]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	623b      	str	r3, [r7, #32]
 80024bc:	e018      	b.n	80024f0 <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 80024be:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002510 <accel_self_test+0x100>
 80024c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80024c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	d408      	bmi.n	80024e2 <accel_self_test+0xd2>
            (st_shift_cust > test.max_g))
 80024d0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002514 <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 80024d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80024d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e0:	dd06      	ble.n	80024f0 <accel_self_test+0xe0>
            result |= 1 << jj;
 80024e2:	2201      	movs	r2, #1
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	6a3a      	ldr	r2, [r7, #32]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	3301      	adds	r3, #1
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	dd98      	ble.n	800242e <accel_self_test+0x1e>
    }

    return result;
 80024fc:	6a3b      	ldr	r3, [r7, #32]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3728      	adds	r7, #40	@ 0x28
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	47800000 	.word	0x47800000
 800250c:	3e0f5c29 	.word	0x3e0f5c29
 8002510:	3e99999a 	.word	0x3e99999a
 8002514:	3f733333 	.word	0x3f733333

08002518 <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08c      	sub	sp, #48	@ 0x30
 800251c:	af04      	add	r7, sp, #16
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 8002526:	4b59      	ldr	r3, [pc, #356]	@ (800268c <gyro_self_test+0x174>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	b299      	uxth	r1, r3
 8002530:	2305      	movs	r3, #5
 8002532:	9302      	str	r3, [sp, #8]
 8002534:	2303      	movs	r3, #3
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	f107 0308 	add.w	r3, r7, #8
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2301      	movs	r3, #1
 8002540:	220d      	movs	r2, #13
 8002542:	4853      	ldr	r0, [pc, #332]	@ (8002690 <gyro_self_test+0x178>)
 8002544:	f005 fce6 	bl	8007f14 <HAL_I2C_Mem_Read>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <gyro_self_test+0x3a>
        return 0x07;
 800254e:	2307      	movs	r3, #7
 8002550:	e097      	b.n	8002682 <gyro_self_test+0x16a>

    tmp[0] &= 0x1F;
 8002552:	7a3b      	ldrb	r3, [r7, #8]
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	b2db      	uxtb	r3, r3
 800255a:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 800255c:	7a7b      	ldrb	r3, [r7, #9]
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	b2db      	uxtb	r3, r3
 8002564:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 8002566:	7abb      	ldrb	r3, [r7, #10]
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	b2db      	uxtb	r3, r3
 800256e:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	e080      	b.n	8002678 <gyro_self_test+0x160>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	6839      	ldr	r1, [r7, #0]
 8002586:	440b      	add	r3, r1
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	bfb8      	it	lt
 8002590:	425b      	neglt	r3, r3
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800259a:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002694 <gyro_self_test+0x17c>
 800259e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025a2:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 80025a6:	f107 0208 	add.w	r2, r7, #8
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	4413      	add	r3, r2
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d045      	beq.n	8002640 <gyro_self_test+0x128>
            st_shift = 3275.f / test.gyro_sens;
 80025b4:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8002698 <gyro_self_test+0x180>
 80025b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025bc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800269c <gyro_self_test+0x184>
 80025c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025c4:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 80025c8:	e007      	b.n	80025da <gyro_self_test+0xc2>
                st_shift *= 1.046f;
 80025ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80025ce:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80026a0 <gyro_self_test+0x188>
 80025d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025d6:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 80025da:	f107 0208 	add.w	r2, r7, #8
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	4413      	add	r3, r2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b2d9      	uxtb	r1, r3
 80025e8:	f107 0208 	add.w	r2, r7, #8
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	4413      	add	r3, r2
 80025f0:	460a      	mov	r2, r1
 80025f2:	701a      	strb	r2, [r3, #0]
 80025f4:	f107 0208 	add.w	r2, r7, #8
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	4413      	add	r3, r2
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1e3      	bne.n	80025ca <gyro_self_test+0xb2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 8002602:	edd7 6a04 	vldr	s13, [r7, #16]
 8002606:	ed97 7a05 	vldr	s14, [r7, #20]
 800260a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002616:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 800261a:	edd7 7a03 	vldr	s15, [r7, #12]
 800261e:	eef0 7ae7 	vabs.f32	s15, s15
 8002622:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80026a4 <gyro_self_test+0x18c>
 8002626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800262a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262e:	dd20      	ble.n	8002672 <gyro_self_test+0x15a>
                result |= 1 << jj;
 8002630:	2201      	movs	r2, #1
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	e018      	b.n	8002672 <gyro_self_test+0x15a>
        } else if ((st_shift_cust < test.min_dps) ||
 8002640:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002644:	edd7 7a04 	vldr	s15, [r7, #16]
 8002648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002650:	d408      	bmi.n	8002664 <gyro_self_test+0x14c>
            (st_shift_cust > test.max_dps))
 8002652:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80026a8 <gyro_self_test+0x190>
        } else if ((st_shift_cust < test.min_dps) ||
 8002656:	edd7 7a04 	vldr	s15, [r7, #16]
 800265a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800265e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002662:	dd06      	ble.n	8002672 <gyro_self_test+0x15a>
            result |= 1 << jj;
 8002664:	2201      	movs	r2, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3301      	adds	r3, #1
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2b02      	cmp	r3, #2
 800267c:	f77f af7b 	ble.w	8002576 <gyro_self_test+0x5e>
    }
    return result;
 8002680:	69bb      	ldr	r3, [r7, #24]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3720      	adds	r7, #32
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000000 	.word	0x20000000
 8002690:	200002e8 	.word	0x200002e8
 8002694:	47800000 	.word	0x47800000
 8002698:	00000083 	.word	0x00000083
 800269c:	454cb000 	.word	0x454cb000
 80026a0:	3f85e354 	.word	0x3f85e354
 80026a4:	3e0f5c29 	.word	0x3e0f5c29
 80026a8:	42d20000 	.word	0x42d20000

080026ac <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 80026ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b0:	b0bc      	sub	sp, #240	@ 0xf0
 80026b2:	af04      	add	r7, sp, #16
 80026b4:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 80026b8:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80026bc:	4613      	mov	r3, r2
 80026be:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    data[1] = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 80026ce:	4b9c      	ldr	r3, [pc, #624]	@ (8002940 <get_st_biases+0x294>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	b299      	uxth	r1, r3
 80026d8:	4b99      	ldr	r3, [pc, #612]	@ (8002940 <get_st_biases+0x294>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	7c9b      	ldrb	r3, [r3, #18]
 80026de:	461a      	mov	r2, r3
 80026e0:	2305      	movs	r3, #5
 80026e2:	9302      	str	r3, [sp, #8]
 80026e4:	2302      	movs	r3, #2
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	2301      	movs	r3, #1
 80026f0:	4894      	ldr	r0, [pc, #592]	@ (8002944 <get_st_biases+0x298>)
 80026f2:	f005 fb15 	bl	8007d20 <HAL_I2C_Mem_Write>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <get_st_biases+0x56>
        return -1;
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	e3dc      	b.n	8002ebc <get_st_biases+0x810>
    delay_ms(200);
 8002702:	20c8      	movs	r0, #200	@ 0xc8
 8002704:	f004 fe4a 	bl	800739c <HAL_Delay>
    data[0] = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 800270e:	4b8c      	ldr	r3, [pc, #560]	@ (8002940 <get_st_biases+0x294>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	b299      	uxth	r1, r3
 8002718:	4b89      	ldr	r3, [pc, #548]	@ (8002940 <get_st_biases+0x294>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	7bdb      	ldrb	r3, [r3, #15]
 800271e:	461a      	mov	r2, r3
 8002720:	2305      	movs	r3, #5
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	2301      	movs	r3, #1
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2301      	movs	r3, #1
 8002730:	4884      	ldr	r0, [pc, #528]	@ (8002944 <get_st_biases+0x298>)
 8002732:	f005 faf5 	bl	8007d20 <HAL_I2C_Mem_Write>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <get_st_biases+0x96>
        return -1;
 800273c:	f04f 33ff 	mov.w	r3, #4294967295
 8002740:	e3bc      	b.n	8002ebc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002742:	4b7f      	ldr	r3, [pc, #508]	@ (8002940 <get_st_biases+0x294>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	b299      	uxth	r1, r3
 800274c:	4b7c      	ldr	r3, [pc, #496]	@ (8002940 <get_st_biases+0x294>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	795b      	ldrb	r3, [r3, #5]
 8002752:	461a      	mov	r2, r3
 8002754:	2305      	movs	r3, #5
 8002756:	9302      	str	r3, [sp, #8]
 8002758:	2301      	movs	r3, #1
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	2301      	movs	r3, #1
 8002764:	4877      	ldr	r0, [pc, #476]	@ (8002944 <get_st_biases+0x298>)
 8002766:	f005 fadb 	bl	8007d20 <HAL_I2C_Mem_Write>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <get_st_biases+0xca>
        return -1;
 8002770:	f04f 33ff 	mov.w	r3, #4294967295
 8002774:	e3a2      	b.n	8002ebc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8002776:	4b72      	ldr	r3, [pc, #456]	@ (8002940 <get_st_biases+0x294>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	b299      	uxth	r1, r3
 8002780:	4b6f      	ldr	r3, [pc, #444]	@ (8002940 <get_st_biases+0x294>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	7c9b      	ldrb	r3, [r3, #18]
 8002786:	461a      	mov	r2, r3
 8002788:	2305      	movs	r3, #5
 800278a:	9302      	str	r3, [sp, #8]
 800278c:	2301      	movs	r3, #1
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2301      	movs	r3, #1
 8002798:	486a      	ldr	r0, [pc, #424]	@ (8002944 <get_st_biases+0x298>)
 800279a:	f005 fac1 	bl	8007d20 <HAL_I2C_Mem_Write>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <get_st_biases+0xfe>
        return -1;
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295
 80027a8:	e388      	b.n	8002ebc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80027aa:	4b65      	ldr	r3, [pc, #404]	@ (8002940 <get_st_biases+0x294>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	b299      	uxth	r1, r3
 80027b4:	4b62      	ldr	r3, [pc, #392]	@ (8002940 <get_st_biases+0x294>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	7ddb      	ldrb	r3, [r3, #23]
 80027ba:	461a      	mov	r2, r3
 80027bc:	2305      	movs	r3, #5
 80027be:	9302      	str	r3, [sp, #8]
 80027c0:	2301      	movs	r3, #1
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2301      	movs	r3, #1
 80027cc:	485d      	ldr	r0, [pc, #372]	@ (8002944 <get_st_biases+0x298>)
 80027ce:	f005 faa7 	bl	8007d20 <HAL_I2C_Mem_Write>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <get_st_biases+0x132>
        return -1;
 80027d8:	f04f 33ff 	mov.w	r3, #4294967295
 80027dc:	e36e      	b.n	8002ebc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80027de:	4b58      	ldr	r3, [pc, #352]	@ (8002940 <get_st_biases+0x294>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	b299      	uxth	r1, r3
 80027e8:	4b55      	ldr	r3, [pc, #340]	@ (8002940 <get_st_biases+0x294>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	791b      	ldrb	r3, [r3, #4]
 80027ee:	461a      	mov	r2, r3
 80027f0:	2305      	movs	r3, #5
 80027f2:	9302      	str	r3, [sp, #8]
 80027f4:	2301      	movs	r3, #1
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2301      	movs	r3, #1
 8002800:	4850      	ldr	r0, [pc, #320]	@ (8002944 <get_st_biases+0x298>)
 8002802:	f005 fa8d 	bl	8007d20 <HAL_I2C_Mem_Write>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <get_st_biases+0x166>
        return -1;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	e354      	b.n	8002ebc <get_st_biases+0x810>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 8002812:	230c      	movs	r3, #12
 8002814:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8002818:	4b49      	ldr	r3, [pc, #292]	@ (8002940 <get_st_biases+0x294>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	b299      	uxth	r1, r3
 8002822:	4b47      	ldr	r3, [pc, #284]	@ (8002940 <get_st_biases+0x294>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	791b      	ldrb	r3, [r3, #4]
 8002828:	461a      	mov	r2, r3
 800282a:	2305      	movs	r3, #5
 800282c:	9302      	str	r3, [sp, #8]
 800282e:	2301      	movs	r3, #1
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	2301      	movs	r3, #1
 800283a:	4842      	ldr	r0, [pc, #264]	@ (8002944 <get_st_biases+0x298>)
 800283c:	f005 fa70 	bl	8007d20 <HAL_I2C_Mem_Write>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <get_st_biases+0x1a0>
        return -1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
 800284a:	e337      	b.n	8002ebc <get_st_biases+0x810>
    delay_ms(15);
 800284c:	200f      	movs	r0, #15
 800284e:	f004 fda5 	bl	800739c <HAL_Delay>
    data[0] = st.test->reg_lpf;
 8002852:	4b3b      	ldr	r3, [pc, #236]	@ (8002940 <get_st_biases+0x294>)
 8002854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002856:	7a5b      	ldrb	r3, [r3, #9]
 8002858:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 800285c:	4b38      	ldr	r3, [pc, #224]	@ (8002940 <get_st_biases+0x294>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	b299      	uxth	r1, r3
 8002866:	4b36      	ldr	r3, [pc, #216]	@ (8002940 <get_st_biases+0x294>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	789b      	ldrb	r3, [r3, #2]
 800286c:	461a      	mov	r2, r3
 800286e:	2305      	movs	r3, #5
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	2301      	movs	r3, #1
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2301      	movs	r3, #1
 800287e:	4831      	ldr	r0, [pc, #196]	@ (8002944 <get_st_biases+0x298>)
 8002880:	f005 fa4e 	bl	8007d20 <HAL_I2C_Mem_Write>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <get_st_biases+0x1e4>
        return -1;
 800288a:	f04f 33ff 	mov.w	r3, #4294967295
 800288e:	e315      	b.n	8002ebc <get_st_biases+0x810>
    data[0] = st.test->reg_rate_div;
 8002890:	4b2b      	ldr	r3, [pc, #172]	@ (8002940 <get_st_biases+0x294>)
 8002892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002894:	7a1b      	ldrb	r3, [r3, #8]
 8002896:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 800289a:	4b29      	ldr	r3, [pc, #164]	@ (8002940 <get_st_biases+0x294>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	b299      	uxth	r1, r3
 80028a4:	4b26      	ldr	r3, [pc, #152]	@ (8002940 <get_st_biases+0x294>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	785b      	ldrb	r3, [r3, #1]
 80028aa:	461a      	mov	r2, r3
 80028ac:	2305      	movs	r3, #5
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	2301      	movs	r3, #1
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2301      	movs	r3, #1
 80028bc:	4821      	ldr	r0, [pc, #132]	@ (8002944 <get_st_biases+0x298>)
 80028be:	f005 fa2f 	bl	8007d20 <HAL_I2C_Mem_Write>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <get_st_biases+0x222>
        return -1;
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295
 80028cc:	e2f6      	b.n	8002ebc <get_st_biases+0x810>
    if (hw_test)
 80028ce:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <get_st_biases+0x23c>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 80028d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <get_st_biases+0x294>)
 80028d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028da:	7a9b      	ldrb	r3, [r3, #10]
 80028dc:	f063 031f 	orn	r3, r3, #31
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 80028e6:	e004      	b.n	80028f2 <get_st_biases+0x246>
    else
        data[0] = st.test->reg_gyro_fsr;
 80028e8:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <get_st_biases+0x294>)
 80028ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ec:	7a9b      	ldrb	r3, [r3, #10]
 80028ee:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 80028f2:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <get_st_biases+0x294>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	b299      	uxth	r1, r3
 80028fc:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <get_st_biases+0x294>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	799b      	ldrb	r3, [r3, #6]
 8002902:	461a      	mov	r2, r3
 8002904:	2305      	movs	r3, #5
 8002906:	9302      	str	r3, [sp, #8]
 8002908:	2301      	movs	r3, #1
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	2301      	movs	r3, #1
 8002914:	480b      	ldr	r0, [pc, #44]	@ (8002944 <get_st_biases+0x298>)
 8002916:	f005 fa03 	bl	8007d20 <HAL_I2C_Mem_Write>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <get_st_biases+0x27a>
        return -1;
 8002920:	f04f 33ff 	mov.w	r3, #4294967295
 8002924:	e2ca      	b.n	8002ebc <get_st_biases+0x810>

    if (hw_test)
 8002926:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00c      	beq.n	8002948 <get_st_biases+0x29c>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 800292e:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <get_st_biases+0x294>)
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	7adb      	ldrb	r3, [r3, #11]
 8002934:	f063 031f 	orn	r3, r3, #31
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 800293e:	e006      	b.n	800294e <get_st_biases+0x2a2>
 8002940:	20000000 	.word	0x20000000
 8002944:	200002e8 	.word	0x200002e8
    else
        data[0] = test.reg_accel_fsr;
 8002948:	2318      	movs	r3, #24
 800294a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 800294e:	4b73      	ldr	r3, [pc, #460]	@ (8002b1c <get_st_biases+0x470>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	b299      	uxth	r1, r3
 8002958:	4b70      	ldr	r3, [pc, #448]	@ (8002b1c <get_st_biases+0x470>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	79db      	ldrb	r3, [r3, #7]
 800295e:	461a      	mov	r2, r3
 8002960:	2305      	movs	r3, #5
 8002962:	9302      	str	r3, [sp, #8]
 8002964:	2301      	movs	r3, #1
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2301      	movs	r3, #1
 8002970:	486b      	ldr	r0, [pc, #428]	@ (8002b20 <get_st_biases+0x474>)
 8002972:	f005 f9d5 	bl	8007d20 <HAL_I2C_Mem_Write>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <get_st_biases+0x2d6>
        return -1;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
 8002980:	e29c      	b.n	8002ebc <get_st_biases+0x810>
    if (hw_test)
 8002982:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <get_st_biases+0x2e4>
        delay_ms(200);
 800298a:	20c8      	movs	r0, #200	@ 0xc8
 800298c:	f004 fd06 	bl	800739c <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 8002990:	2340      	movs	r3, #64	@ 0x40
 8002992:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8002996:	4b61      	ldr	r3, [pc, #388]	@ (8002b1c <get_st_biases+0x470>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	b299      	uxth	r1, r3
 80029a0:	4b5e      	ldr	r3, [pc, #376]	@ (8002b1c <get_st_biases+0x470>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	791b      	ldrb	r3, [r3, #4]
 80029a6:	461a      	mov	r2, r3
 80029a8:	2305      	movs	r3, #5
 80029aa:	9302      	str	r3, [sp, #8]
 80029ac:	2301      	movs	r3, #1
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2301      	movs	r3, #1
 80029b8:	4859      	ldr	r0, [pc, #356]	@ (8002b20 <get_st_biases+0x474>)
 80029ba:	f005 f9b1 	bl	8007d20 <HAL_I2C_Mem_Write>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <get_st_biases+0x31e>
        return -1;
 80029c4:	f04f 33ff 	mov.w	r3, #4294967295
 80029c8:	e278      	b.n	8002ebc <get_st_biases+0x810>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 80029ca:	2378      	movs	r3, #120	@ 0x78
 80029cc:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 80029d0:	4b52      	ldr	r3, [pc, #328]	@ (8002b1c <get_st_biases+0x470>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	b299      	uxth	r1, r3
 80029da:	4b50      	ldr	r3, [pc, #320]	@ (8002b1c <get_st_biases+0x470>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	795b      	ldrb	r3, [r3, #5]
 80029e0:	461a      	mov	r2, r3
 80029e2:	2305      	movs	r3, #5
 80029e4:	9302      	str	r3, [sp, #8]
 80029e6:	2301      	movs	r3, #1
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2301      	movs	r3, #1
 80029f2:	484b      	ldr	r0, [pc, #300]	@ (8002b20 <get_st_biases+0x474>)
 80029f4:	f005 f994 	bl	8007d20 <HAL_I2C_Mem_Write>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <get_st_biases+0x358>
        return -1;
 80029fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002a02:	e25b      	b.n	8002ebc <get_st_biases+0x810>
    delay_ms(test.wait_ms);
 8002a04:	2332      	movs	r3, #50	@ 0x32
 8002a06:	4618      	mov	r0, r3
 8002a08:	f004 fcc8 	bl	800739c <HAL_Delay>
    data[0] = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002a12:	4b42      	ldr	r3, [pc, #264]	@ (8002b1c <get_st_biases+0x470>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	b299      	uxth	r1, r3
 8002a1c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b1c <get_st_biases+0x470>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	795b      	ldrb	r3, [r3, #5]
 8002a22:	461a      	mov	r2, r3
 8002a24:	2305      	movs	r3, #5
 8002a26:	9302      	str	r3, [sp, #8]
 8002a28:	2301      	movs	r3, #1
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2301      	movs	r3, #1
 8002a34:	483a      	ldr	r0, [pc, #232]	@ (8002b20 <get_st_biases+0x474>)
 8002a36:	f005 f973 	bl	8007d20 <HAL_I2C_Mem_Write>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <get_st_biases+0x39a>
        return -1;
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295
 8002a44:	e23a      	b.n	8002ebc <get_st_biases+0x810>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 8002a46:	4b35      	ldr	r3, [pc, #212]	@ (8002b1c <get_st_biases+0x470>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	b299      	uxth	r1, r3
 8002a50:	4b32      	ldr	r3, [pc, #200]	@ (8002b1c <get_st_biases+0x470>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	7a9b      	ldrb	r3, [r3, #10]
 8002a56:	461a      	mov	r2, r3
 8002a58:	2305      	movs	r3, #5
 8002a5a:	9302      	str	r3, [sp, #8]
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2301      	movs	r3, #1
 8002a68:	482d      	ldr	r0, [pc, #180]	@ (8002b20 <get_st_biases+0x474>)
 8002a6a:	f005 fa53 	bl	8007f14 <HAL_I2C_Mem_Read>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <get_st_biases+0x3ce>
        return -1;
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295
 8002a78:	e220      	b.n	8002ebc <get_st_biases+0x810>

    fifo_count = (data[0] << 8) | data[1];
 8002a7a:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002a7e:	b21b      	sxth	r3, r3
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	b21a      	sxth	r2, r3
 8002a84:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002a88:	b21b      	sxth	r3, r3
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	b21b      	sxth	r3, r3
 8002a8e:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 8002a92:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 8002a96:	4b23      	ldr	r3, [pc, #140]	@ (8002b24 <get_st_biases+0x478>)
 8002a98:	fba3 2302 	umull	r2, r3, r3, r2
 8002a9c:	08db      	lsrs	r3, r3, #3
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 8002aa4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002aa8:	f103 0108 	add.w	r1, r3, #8
 8002aac:	2300      	movs	r3, #0
 8002aae:	600b      	str	r3, [r1, #0]
 8002ab0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ab4:	1d1a      	adds	r2, r3, #4
 8002ab6:	680b      	ldr	r3, [r1, #0]
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ac0:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 8002ac2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ac6:	f103 0108 	add.w	r1, r3, #8
 8002aca:	2300      	movs	r3, #0
 8002acc:	600b      	str	r3, [r1, #0]
 8002ace:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ad2:	1d1a      	adds	r2, r3, #4
 8002ad4:	680b      	ldr	r3, [r1, #0]
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ade:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002ae6:	e0b0      	b.n	8002c4a <get_st_biases+0x59e>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b1c <get_st_biases+0x470>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	b299      	uxth	r1, r3
 8002af2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <get_st_biases+0x470>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	7adb      	ldrb	r3, [r3, #11]
 8002af8:	461a      	mov	r2, r3
 8002afa:	2305      	movs	r3, #5
 8002afc:	9302      	str	r3, [sp, #8]
 8002afe:	230c      	movs	r3, #12
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	4805      	ldr	r0, [pc, #20]	@ (8002b20 <get_st_biases+0x474>)
 8002b0c:	f005 fa02 	bl	8007f14 <HAL_I2C_Mem_Read>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <get_st_biases+0x47c>
            return -1;
 8002b16:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1a:	e1cf      	b.n	8002ebc <get_st_biases+0x810>
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	200002e8 	.word	0x200002e8
 8002b24:	aaaaaaab 	.word	0xaaaaaaab
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8002b28:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002b2c:	b21b      	sxth	r3, r3
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	b21a      	sxth	r2, r3
 8002b32:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002b36:	b21b      	sxth	r3, r3
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	b21b      	sxth	r3, r3
 8002b3c:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 8002b40:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002b44:	b21b      	sxth	r3, r3
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	b21a      	sxth	r2, r3
 8002b4a:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8002b4e:	b21b      	sxth	r3, r3
 8002b50:	4313      	orrs	r3, r2
 8002b52:	b21b      	sxth	r3, r3
 8002b54:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 8002b58:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8002b5c:	b21b      	sxth	r3, r3
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	b21a      	sxth	r2, r3
 8002b62:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8002b66:	b21b      	sxth	r3, r3
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	b21b      	sxth	r3, r3
 8002b6c:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
        accel[0] += (long)accel_cur[0];
 8002b70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8002b7a:	441a      	add	r2, r3
 8002b7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b80:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 8002b82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b86:	3304      	adds	r3, #4
 8002b88:	6819      	ldr	r1, [r3, #0]
 8002b8a:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b94:	1d1a      	adds	r2, r3, #4
 8002b96:	180b      	adds	r3, r1, r0
 8002b98:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 8002b9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b9e:	3308      	adds	r3, #8
 8002ba0:	6819      	ldr	r1, [r3, #0]
 8002ba2:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bac:	f103 0208 	add.w	r2, r3, #8
 8002bb0:	180b      	adds	r3, r1, r0
 8002bb2:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 8002bb4:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8002bb8:	b21b      	sxth	r3, r3
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	b21a      	sxth	r2, r3
 8002bbe:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002bc2:	b21b      	sxth	r3, r3
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 8002bcc:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8002bd0:	b21b      	sxth	r3, r3
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	b21a      	sxth	r2, r3
 8002bd6:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 8002bda:	b21b      	sxth	r3, r3
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	b21b      	sxth	r3, r3
 8002be0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 8002be4:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8002be8:	b21b      	sxth	r3, r3
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	b21a      	sxth	r2, r3
 8002bee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8002bf2:	b21b      	sxth	r3, r3
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	b21b      	sxth	r3, r3
 8002bf8:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
        gyro[0] += (long)gyro_cur[0];
 8002bfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8002c06:	441a      	add	r2, r3
 8002c08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c0c:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 8002c0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c12:	3304      	adds	r3, #4
 8002c14:	6819      	ldr	r1, [r3, #0]
 8002c16:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c20:	1d1a      	adds	r2, r3, #4
 8002c22:	180b      	adds	r3, r1, r0
 8002c24:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 8002c26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c38:	f103 0208 	add.w	r2, r3, #8
 8002c3c:	180b      	adds	r3, r1, r0
 8002c3e:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 8002c40:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002c44:	3301      	adds	r3, #1
 8002c46:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002c4a:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 8002c4e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002c52:	429a      	cmp	r2, r3
 8002c54:	f4ff af48 	bcc.w	8002ae8 <get_st_biases+0x43c>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 8002c58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	17da      	asrs	r2, r3, #31
 8002c60:	461c      	mov	r4, r3
 8002c62:	4615      	mov	r5, r2
 8002c64:	1423      	asrs	r3, r4, #16
 8002c66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002c6a:	0423      	lsls	r3, r4, #16
 8002c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c70:	2283      	movs	r2, #131	@ 0x83
 8002c72:	2300      	movs	r3, #0
 8002c74:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8002c78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c7c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002c80:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002c84:	f7fd ffe0 	bl	8000c48 <__aeabi_ldivmod>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002c94:	2200      	movs	r2, #0
 8002c96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c9e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002ca2:	f7fd ffd1 	bl	8000c48 <__aeabi_ldivmod>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cae:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 8002cb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	17da      	asrs	r2, r3, #31
 8002cba:	4698      	mov	r8, r3
 8002cbc:	4691      	mov	r9, r2
 8002cbe:	ea4f 4328 	mov.w	r3, r8, asr #16
 8002cc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002cc6:	ea4f 4308 	mov.w	r3, r8, lsl #16
 8002cca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cce:	2283      	movs	r2, #131	@ 0x83
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002cd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cda:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002cde:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002ce2:	f7fd ffb1 	bl	8000c48 <__aeabi_ldivmod>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002cf8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002cfc:	f7fd ffa4 	bl	8000c48 <__aeabi_ldivmod>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d0c:	1d1a      	adds	r2, r3, #4
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 8002d12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d16:	3308      	adds	r3, #8
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	17da      	asrs	r2, r3, #31
 8002d1c:	469a      	mov	sl, r3
 8002d1e:	4693      	mov	fp, r2
 8002d20:	ea4f 432a 	mov.w	r3, sl, asr #16
 8002d24:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d26:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8002d2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d2c:	2283      	movs	r2, #131	@ 0x83
 8002d2e:	2300      	movs	r3, #0
 8002d30:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002d32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d34:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002d38:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002d3c:	f7fd ff84 	bl	8000c48 <__aeabi_ldivmod>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d50:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d52:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002d56:	f7fd ff77 	bl	8000c48 <__aeabi_ldivmod>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4610      	mov	r0, r2
 8002d60:	4619      	mov	r1, r3
 8002d62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d66:	f103 0208 	add.w	r2, r3, #8
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 8002d6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	17da      	asrs	r2, r3, #31
 8002d76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d78:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8002d7e:	460b      	mov	r3, r1
 8002d80:	141b      	asrs	r3, r3, #16
 8002d82:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d84:	460b      	mov	r3, r1
 8002d86:	041b      	lsls	r3, r3, #16
 8002d88:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d8e:	2300      	movs	r3, #0
 8002d90:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d98:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002d9c:	f7fd ff54 	bl	8000c48 <__aeabi_ldivmod>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4610      	mov	r0, r2
 8002da6:	4619      	mov	r1, r3
 8002da8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002dac:	2200      	movs	r2, #0
 8002dae:	643b      	str	r3, [r7, #64]	@ 0x40
 8002db0:	647a      	str	r2, [r7, #68]	@ 0x44
 8002db2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002db6:	f7fd ff47 	bl	8000c48 <__aeabi_ldivmod>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002dc2:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 8002dc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002dc8:	3304      	adds	r3, #4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	17da      	asrs	r2, r3, #31
 8002dce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002dd2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	141b      	asrs	r3, r3, #16
 8002dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ddc:	460b      	mov	r3, r1
 8002dde:	041b      	lsls	r3, r3, #16
 8002de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002de2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002de6:	2300      	movs	r3, #0
 8002de8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002df0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002df4:	f7fd ff28 	bl	8000c48 <__aeabi_ldivmod>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002e04:	2200      	movs	r2, #0
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e0e:	f7fd ff1b 	bl	8000c48 <__aeabi_ldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4602      	mov	r2, r0
 8002e22:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 8002e24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e28:	3308      	adds	r3, #8
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	17da      	asrs	r2, r3, #31
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	61fa      	str	r2, [r7, #28]
 8002e32:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002e36:	460b      	mov	r3, r1
 8002e38:	141b      	asrs	r3, r3, #16
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	041b      	lsls	r3, r3, #16
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e46:	2300      	movs	r3, #0
 8002e48:	60ba      	str	r2, [r7, #8]
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e54:	f7fd fef8 	bl	8000c48 <__aeabi_ldivmod>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002e64:	2200      	movs	r2, #0
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e6e:	f7fd feeb 	bl	8000c48 <__aeabi_ldivmod>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e7e:	3308      	adds	r3, #8
 8002e80:	4602      	mov	r2, r0
 8002e82:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 8002e84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e88:	3308      	adds	r3, #8
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	dd0a      	ble.n	8002ea6 <get_st_biases+0x7fa>
        accel[2] -= 65536L;
 8002e90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e94:	3308      	adds	r3, #8
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e9c:	3308      	adds	r3, #8
 8002e9e:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e009      	b.n	8002eba <get_st_biases+0x80e>
    else
        accel[2] += 65536L;
 8002ea6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002eaa:	3308      	adds	r3, #8
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002eb2:	3308      	adds	r3, #8
 8002eb4:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8002eb8:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	37e0      	adds	r7, #224	@ 0xe0
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec6:	bf00      	nop

08002ec8 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08e      	sub	sp, #56	@ 0x38
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 8002ed8:	4b64      	ldr	r3, [pc, #400]	@ (800306c <mpu_run_self_test+0x1a4>)
 8002eda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f000 fa18 	bl	8003318 <mpu_set_dmp_state>
        dmp_was_on = 1;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002eee:	e002      	b.n	8002ef6 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 8002ef6:	f107 030c 	add.w	r3, r7, #12
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe fc2e 	bl	800175c <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 8002f00:	f107 030f 	add.w	r3, r7, #15
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fe fcbd 	bl	8001884 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 8002f0a:	f107 0308 	add.w	r3, r7, #8
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe fd64 	bl	80019dc <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 8002f14:	f107 030a 	add.w	r3, r7, #10
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe fdf7 	bl	8001b0c <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 8002f1e:	4b53      	ldr	r3, [pc, #332]	@ (800306c <mpu_run_self_test+0x1a4>)
 8002f20:	7a9b      	ldrb	r3, [r3, #10]
 8002f22:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 8002f26:	f107 030e 	add.w	r3, r7, #14
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe fef0 	bl	8001d10 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 8002f30:	2300      	movs	r3, #0
 8002f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f34:	e00a      	b.n	8002f4c <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 8002f36:	2200      	movs	r2, #0
 8002f38:	6839      	ldr	r1, [r7, #0]
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff fbb6 	bl	80026ac <get_st_biases>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 8002f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f48:	3301      	adds	r3, #1
 8002f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f4c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f52:	429a      	cmp	r2, r3
 8002f54:	dbef      	blt.n	8002f36 <mpu_run_self_test+0x6e>
 8002f56:	e000      	b.n	8002f5a <mpu_run_self_test+0x92>
            break;
 8002f58:	bf00      	nop
    if (ii == tries) {
 8002f5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d102      	bne.n	8002f6a <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8002f68:	e045      	b.n	8002ff6 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f6e:	e00d      	b.n	8002f8c <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 8002f70:	f107 0110 	add.w	r1, r7, #16
 8002f74:	f107 031c 	add.w	r3, r7, #28
 8002f78:	2201      	movs	r2, #1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fb96 	bl	80026ac <get_st_biases>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 8002f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f88:	3301      	adds	r3, #1
 8002f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f92:	429a      	cmp	r2, r3
 8002f94:	dbec      	blt.n	8002f70 <mpu_run_self_test+0xa8>
 8002f96:	e000      	b.n	8002f9a <mpu_run_self_test+0xd2>
            break;
 8002f98:	bf00      	nop
    if (ii == tries) {
 8002f9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d102      	bne.n	8002faa <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8002fa8:	e025      	b.n	8002ff6 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 8002faa:	f107 0310 	add.w	r3, r7, #16
 8002fae:	4619      	mov	r1, r3
 8002fb0:	6838      	ldr	r0, [r7, #0]
 8002fb2:	f7ff fa2d 	bl	8002410 <accel_self_test>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 8002fbc:	f107 031c 	add.w	r3, r7, #28
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff faa8 	bl	8002518 <gyro_self_test>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    result = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!gyro_result)
 8002fd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <mpu_run_self_test+0x11a>
        result |= 0x01;
 8002fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!accel_result)
 8002fe2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d104      	bne.n	8002ff4 <mpu_run_self_test+0x12c>
        result |= 0x02;
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ff2:	e000      	b.n	8002ff6 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 8002ff4:	bf00      	nop
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800306c <mpu_run_self_test+0x1a4>)
 8002ff8:	22ff      	movs	r2, #255	@ 0xff
 8002ffa:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800306c <mpu_run_self_test+0x1a4>)
 8002ffe:	22ff      	movs	r2, #255	@ 0xff
 8003000:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8003002:	4b1a      	ldr	r3, [pc, #104]	@ (800306c <mpu_run_self_test+0x1a4>)
 8003004:	22ff      	movs	r2, #255	@ 0xff
 8003006:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8003008:	4b18      	ldr	r3, [pc, #96]	@ (800306c <mpu_run_self_test+0x1a4>)
 800300a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800300e:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 8003010:	4b16      	ldr	r3, [pc, #88]	@ (800306c <mpu_run_self_test+0x1a4>)
 8003012:	22ff      	movs	r2, #255	@ 0xff
 8003014:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 8003016:	4b15      	ldr	r3, [pc, #84]	@ (800306c <mpu_run_self_test+0x1a4>)
 8003018:	22ff      	movs	r2, #255	@ 0xff
 800301a:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800301c:	4b13      	ldr	r3, [pc, #76]	@ (800306c <mpu_run_self_test+0x1a4>)
 800301e:	2201      	movs	r2, #1
 8003020:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 8003022:	89bb      	ldrh	r3, [r7, #12]
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe fbcd 	bl	80017c4 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe fc63 	bl	80018f8 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 8003032:	893b      	ldrh	r3, [r7, #8]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fd0f 	bl	8001a58 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 800303a:	897b      	ldrh	r3, [r7, #10]
 800303c:	4618      	mov	r0, r3
 800303e:	f7fe fd7f 	bl	8001b40 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 8003042:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fec6 	bl	8001dd8 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 800304c:	7bbb      	ldrb	r3, [r7, #14]
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe fe70 	bl	8001d34 <mpu_configure_fifo>

    if (dmp_was_on)
 8003054:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <mpu_run_self_test+0x19a>
        mpu_set_dmp_state(1);
 800305c:	2001      	movs	r0, #1
 800305e:	f000 f95b 	bl	8003318 <mpu_set_dmp_state>

    return result;
 8003062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003064:	4618      	mov	r0, r3
 8003066:	3738      	adds	r7, #56	@ 0x38
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000000 	.word	0x20000000

08003070 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af04      	add	r7, sp, #16
 8003076:	4603      	mov	r3, r0
 8003078:	603a      	str	r2, [r7, #0]
 800307a:	80fb      	strh	r3, [r7, #6]
 800307c:	460b      	mov	r3, r1
 800307e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <mpu_write_mem+0x1c>
        return -1;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	e04e      	b.n	800312a <mpu_write_mem+0xba>
    if (!st.chip_cfg.sensors)
 800308c:	4b29      	ldr	r3, [pc, #164]	@ (8003134 <mpu_write_mem+0xc4>)
 800308e:	7a9b      	ldrb	r3, [r3, #10]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d102      	bne.n	800309a <mpu_write_mem+0x2a>
        return -1;
 8003094:	f04f 33ff 	mov.w	r3, #4294967295
 8003098:	e047      	b.n	800312a <mpu_write_mem+0xba>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	0a1b      	lsrs	r3, r3, #8
 800309e:	b29b      	uxth	r3, r3
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80030aa:	7b7b      	ldrb	r3, [r7, #13]
 80030ac:	461a      	mov	r2, r3
 80030ae:	88bb      	ldrh	r3, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	4a20      	ldr	r2, [pc, #128]	@ (8003134 <mpu_write_mem+0xc4>)
 80030b4:	6852      	ldr	r2, [r2, #4]
 80030b6:	8952      	ldrh	r2, [r2, #10]
 80030b8:	4293      	cmp	r3, r2
 80030ba:	dd02      	ble.n	80030c2 <mpu_write_mem+0x52>
        return -1;
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295
 80030c0:	e033      	b.n	800312a <mpu_write_mem+0xba>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80030c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003134 <mpu_write_mem+0xc4>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	b299      	uxth	r1, r3
 80030cc:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <mpu_write_mem+0xc4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	7e1b      	ldrb	r3, [r3, #24]
 80030d2:	461a      	mov	r2, r3
 80030d4:	2305      	movs	r3, #5
 80030d6:	9302      	str	r3, [sp, #8]
 80030d8:	2302      	movs	r3, #2
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	f107 030c 	add.w	r3, r7, #12
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	2301      	movs	r3, #1
 80030e4:	4814      	ldr	r0, [pc, #80]	@ (8003138 <mpu_write_mem+0xc8>)
 80030e6:	f004 fe1b 	bl	8007d20 <HAL_I2C_Mem_Write>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <mpu_write_mem+0x86>
        return -1;
 80030f0:	f04f 33ff 	mov.w	r3, #4294967295
 80030f4:	e019      	b.n	800312a <mpu_write_mem+0xba>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 80030f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003134 <mpu_write_mem+0xc4>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	b299      	uxth	r1, r3
 8003100:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <mpu_write_mem+0xc4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	7d5b      	ldrb	r3, [r3, #21]
 8003106:	461a      	mov	r2, r3
 8003108:	2305      	movs	r3, #5
 800310a:	9302      	str	r3, [sp, #8]
 800310c:	88bb      	ldrh	r3, [r7, #4]
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2301      	movs	r3, #1
 8003116:	4808      	ldr	r0, [pc, #32]	@ (8003138 <mpu_write_mem+0xc8>)
 8003118:	f004 fe02 	bl	8007d20 <HAL_I2C_Mem_Write>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <mpu_write_mem+0xb8>
        return -1;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	e000      	b.n	800312a <mpu_write_mem+0xba>
    return 0;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000000 	.word	0x20000000
 8003138:	200002e8 	.word	0x200002e8

0800313c <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af04      	add	r7, sp, #16
 8003142:	4603      	mov	r3, r0
 8003144:	603a      	str	r2, [r7, #0]
 8003146:	80fb      	strh	r3, [r7, #6]
 8003148:	460b      	mov	r3, r1
 800314a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <mpu_read_mem+0x1c>
        return -1;
 8003152:	f04f 33ff 	mov.w	r3, #4294967295
 8003156:	e04e      	b.n	80031f6 <mpu_read_mem+0xba>
    if (!st.chip_cfg.sensors)
 8003158:	4b29      	ldr	r3, [pc, #164]	@ (8003200 <mpu_read_mem+0xc4>)
 800315a:	7a9b      	ldrb	r3, [r3, #10]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <mpu_read_mem+0x2a>
        return -1;
 8003160:	f04f 33ff 	mov.w	r3, #4294967295
 8003164:	e047      	b.n	80031f6 <mpu_read_mem+0xba>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	b29b      	uxth	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 8003176:	7b7b      	ldrb	r3, [r7, #13]
 8003178:	461a      	mov	r2, r3
 800317a:	88bb      	ldrh	r3, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	4a20      	ldr	r2, [pc, #128]	@ (8003200 <mpu_read_mem+0xc4>)
 8003180:	6852      	ldr	r2, [r2, #4]
 8003182:	8952      	ldrh	r2, [r2, #10]
 8003184:	4293      	cmp	r3, r2
 8003186:	dd02      	ble.n	800318e <mpu_read_mem+0x52>
        return -1;
 8003188:	f04f 33ff 	mov.w	r3, #4294967295
 800318c:	e033      	b.n	80031f6 <mpu_read_mem+0xba>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800318e:	4b1c      	ldr	r3, [pc, #112]	@ (8003200 <mpu_read_mem+0xc4>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	b299      	uxth	r1, r3
 8003198:	4b19      	ldr	r3, [pc, #100]	@ (8003200 <mpu_read_mem+0xc4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	7e1b      	ldrb	r3, [r3, #24]
 800319e:	461a      	mov	r2, r3
 80031a0:	2305      	movs	r3, #5
 80031a2:	9302      	str	r3, [sp, #8]
 80031a4:	2302      	movs	r3, #2
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	2301      	movs	r3, #1
 80031b0:	4814      	ldr	r0, [pc, #80]	@ (8003204 <mpu_read_mem+0xc8>)
 80031b2:	f004 fdb5 	bl	8007d20 <HAL_I2C_Mem_Write>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <mpu_read_mem+0x86>
        return -1;
 80031bc:	f04f 33ff 	mov.w	r3, #4294967295
 80031c0:	e019      	b.n	80031f6 <mpu_read_mem+0xba>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 80031c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003200 <mpu_read_mem+0xc4>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	b299      	uxth	r1, r3
 80031cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <mpu_read_mem+0xc4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	7d5b      	ldrb	r3, [r3, #21]
 80031d2:	461a      	mov	r2, r3
 80031d4:	2305      	movs	r3, #5
 80031d6:	9302      	str	r3, [sp, #8]
 80031d8:	88bb      	ldrh	r3, [r7, #4]
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2301      	movs	r3, #1
 80031e2:	4808      	ldr	r0, [pc, #32]	@ (8003204 <mpu_read_mem+0xc8>)
 80031e4:	f004 fe96 	bl	8007f14 <HAL_I2C_Mem_Read>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <mpu_read_mem+0xb8>
        return -1;
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
 80031f2:	e000      	b.n	80031f6 <mpu_read_mem+0xba>
    return 0;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000000 	.word	0x20000000
 8003204:	200002e8 	.word	0x200002e8

08003208 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08e      	sub	sp, #56	@ 0x38
 800320c:	af04      	add	r7, sp, #16
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	4611      	mov	r1, r2
 8003212:	461a      	mov	r2, r3
 8003214:	4603      	mov	r3, r0
 8003216:	81fb      	strh	r3, [r7, #14]
 8003218:	460b      	mov	r3, r1
 800321a:	81bb      	strh	r3, [r7, #12]
 800321c:	4613      	mov	r3, r2
 800321e:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8003220:	4b3b      	ldr	r3, [pc, #236]	@ (8003310 <mpu_load_firmware+0x108>)
 8003222:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 800322a:	f04f 33ff 	mov.w	r3, #4294967295
 800322e:	e06b      	b.n	8003308 <mpu_load_firmware+0x100>

    if (!firmware)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <mpu_load_firmware+0x34>
        return -1;
 8003236:	f04f 33ff 	mov.w	r3, #4294967295
 800323a:	e065      	b.n	8003308 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 800323c:	2300      	movs	r3, #0
 800323e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003240:	e034      	b.n	80032ac <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b10      	cmp	r3, #16
 800324a:	bfa8      	it	ge
 800324c:	2310      	movge	r3, #16
 800324e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8003250:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	441a      	add	r2, r3
 8003256:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8003258:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff ff08 	bl	8003070 <mpu_write_mem>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <mpu_load_firmware+0x64>
            return -1;
 8003266:	f04f 33ff 	mov.w	r3, #4294967295
 800326a:	e04d      	b.n	8003308 <mpu_load_firmware+0x100>
        if (mpu_read_mem(ii, this_write, cur))
 800326c:	f107 0214 	add.w	r2, r7, #20
 8003270:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8003272:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff61 	bl	800313c <mpu_read_mem>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <mpu_load_firmware+0x7e>
            return -1;
 8003280:	f04f 33ff 	mov.w	r3, #4294967295
 8003284:	e040      	b.n	8003308 <mpu_load_firmware+0x100>
        if (memcmp(firmware+ii, cur, this_write))
 8003286:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	4413      	add	r3, r2
 800328c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800328e:	f107 0114 	add.w	r1, r7, #20
 8003292:	4618      	mov	r0, r3
 8003294:	f008 ff6c 	bl	800c170 <memcmp>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <mpu_load_firmware+0x9c>
            return -2;
 800329e:	f06f 0301 	mvn.w	r3, #1
 80032a2:	e031      	b.n	8003308 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 80032a4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80032a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032a8:	4413      	add	r3, r2
 80032aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80032ac:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80032ae:	89fb      	ldrh	r3, [r7, #14]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d3c6      	bcc.n	8003242 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 80032b4:	89bb      	ldrh	r3, [r7, #12]
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 80032be:	89bb      	ldrh	r3, [r7, #12]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 80032c4:	4b12      	ldr	r3, [pc, #72]	@ (8003310 <mpu_load_firmware+0x108>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	b299      	uxth	r1, r3
 80032ce:	4b10      	ldr	r3, [pc, #64]	@ (8003310 <mpu_load_firmware+0x108>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	7e9b      	ldrb	r3, [r3, #26]
 80032d4:	461a      	mov	r2, r3
 80032d6:	2305      	movs	r3, #5
 80032d8:	9302      	str	r3, [sp, #8]
 80032da:	2302      	movs	r3, #2
 80032dc:	9301      	str	r3, [sp, #4]
 80032de:	f107 0310 	add.w	r3, r7, #16
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	2301      	movs	r3, #1
 80032e6:	480b      	ldr	r0, [pc, #44]	@ (8003314 <mpu_load_firmware+0x10c>)
 80032e8:	f004 fd1a 	bl	8007d20 <HAL_I2C_Mem_Write>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <mpu_load_firmware+0xf0>
        return -1;
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295
 80032f6:	e007      	b.n	8003308 <mpu_load_firmware+0x100>

    st.chip_cfg.dmp_loaded = 1;
 80032f8:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <mpu_load_firmware+0x108>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8003300:	4a03      	ldr	r2, [pc, #12]	@ (8003310 <mpu_load_firmware+0x108>)
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	84d3      	strh	r3, [r2, #38]	@ 0x26
    return 0;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3728      	adds	r7, #40	@ 0x28
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000000 	.word	0x20000000
 8003314:	200002e8 	.word	0x200002e8

08003318 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af04      	add	r7, sp, #16
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8003322:	4b2e      	ldr	r3, [pc, #184]	@ (80033dc <mpu_set_dmp_state+0xc4>)
 8003324:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003328:	79fa      	ldrb	r2, [r7, #7]
 800332a:	429a      	cmp	r2, r3
 800332c:	d101      	bne.n	8003332 <mpu_set_dmp_state+0x1a>
        return 0;
 800332e:	2300      	movs	r3, #0
 8003330:	e050      	b.n	80033d4 <mpu_set_dmp_state+0xbc>

    if (enable) {
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d02f      	beq.n	8003398 <mpu_set_dmp_state+0x80>
        if (!st.chip_cfg.dmp_loaded)
 8003338:	4b28      	ldr	r3, [pc, #160]	@ (80033dc <mpu_set_dmp_state+0xc4>)
 800333a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <mpu_set_dmp_state+0x30>
            return -1;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	e045      	b.n	80033d4 <mpu_set_dmp_state+0xbc>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8003348:	2000      	movs	r0, #0
 800334a:	f7fd fe63 	bl	8001014 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 800334e:	2000      	movs	r0, #0
 8003350:	f7fe fe78 	bl	8002044 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8003354:	4b21      	ldr	r3, [pc, #132]	@ (80033dc <mpu_set_dmp_state+0xc4>)
 8003356:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe fbf1 	bl	8001b40 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8003362:	4b1e      	ldr	r3, [pc, #120]	@ (80033dc <mpu_set_dmp_state+0xc4>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	b299      	uxth	r1, r3
 800336c:	2305      	movs	r3, #5
 800336e:	9302      	str	r3, [sp, #8]
 8003370:	2301      	movs	r3, #1
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	f107 030f 	add.w	r3, r7, #15
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	2301      	movs	r3, #1
 800337c:	2223      	movs	r2, #35	@ 0x23
 800337e:	4818      	ldr	r0, [pc, #96]	@ (80033e0 <mpu_set_dmp_state+0xc8>)
 8003380:	f004 fcce 	bl	8007d20 <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 1;
 8003384:	4b15      	ldr	r3, [pc, #84]	@ (80033dc <mpu_set_dmp_state+0xc4>)
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 800338c:	2001      	movs	r0, #1
 800338e:	f7fd fe41 	bl	8001014 <set_int_enable>
        mpu_reset_fifo();
 8003392:	f7fe f87b 	bl	800148c <mpu_reset_fifo>
 8003396:	e01c      	b.n	80033d2 <mpu_set_dmp_state+0xba>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8003398:	2000      	movs	r0, #0
 800339a:	f7fd fe3b 	bl	8001014 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 800339e:	4b0f      	ldr	r3, [pc, #60]	@ (80033dc <mpu_set_dmp_state+0xc4>)
 80033a0:	7c1b      	ldrb	r3, [r3, #16]
 80033a2:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80033a4:	4b0d      	ldr	r3, [pc, #52]	@ (80033dc <mpu_set_dmp_state+0xc4>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	b299      	uxth	r1, r3
 80033ae:	2305      	movs	r3, #5
 80033b0:	9302      	str	r3, [sp, #8]
 80033b2:	2301      	movs	r3, #1
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	f107 030f 	add.w	r3, r7, #15
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	2301      	movs	r3, #1
 80033be:	2223      	movs	r2, #35	@ 0x23
 80033c0:	4807      	ldr	r0, [pc, #28]	@ (80033e0 <mpu_set_dmp_state+0xc8>)
 80033c2:	f004 fcad 	bl	8007d20 <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 0;
 80033c6:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <mpu_set_dmp_state+0xc4>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        mpu_reset_fifo();
 80033ce:	f7fe f85d 	bl	800148c <mpu_reset_fifo>
    }
    return 0;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000000 	.word	0x20000000
 80033e0:	200002e8 	.word	0x200002e8

080033e4 <myget_ms>:

    st.chip_cfg.int_motion_only = 0;
    return 0;
}
void myget_ms(unsigned long *time)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 80033fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003400:	23c8      	movs	r3, #200	@ 0xc8
 8003402:	4904      	ldr	r1, [pc, #16]	@ (8003414 <dmp_load_motion_driver_firmware+0x1c>)
 8003404:	f640 30f6 	movw	r0, #3062	@ 0xbf6
 8003408:	f7ff fefe 	bl	8003208 <mpu_load_firmware>
 800340c:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 800340e:	4618      	mov	r0, r3
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	0800f114 	.word	0x0800f114

08003418 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8003422:	4a6e      	ldr	r2, [pc, #440]	@ (80035dc <dmp_set_orientation+0x1c4>)
 8003424:	f107 0314 	add.w	r3, r7, #20
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	4611      	mov	r1, r2
 800342c:	8019      	strh	r1, [r3, #0]
 800342e:	3302      	adds	r3, #2
 8003430:	0c12      	lsrs	r2, r2, #16
 8003432:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8003434:	4a6a      	ldr	r2, [pc, #424]	@ (80035e0 <dmp_set_orientation+0x1c8>)
 8003436:	f107 0310 	add.w	r3, r7, #16
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	4611      	mov	r1, r2
 800343e:	8019      	strh	r1, [r3, #0]
 8003440:	3302      	adds	r3, #2
 8003442:	0c12      	lsrs	r2, r2, #16
 8003444:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8003446:	4a67      	ldr	r2, [pc, #412]	@ (80035e4 <dmp_set_orientation+0x1cc>)
 8003448:	f107 030c 	add.w	r3, r7, #12
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	4611      	mov	r1, r2
 8003450:	8019      	strh	r1, [r3, #0]
 8003452:	3302      	adds	r3, #2
 8003454:	0c12      	lsrs	r2, r2, #16
 8003456:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8003458:	4a63      	ldr	r2, [pc, #396]	@ (80035e8 <dmp_set_orientation+0x1d0>)
 800345a:	f107 0308 	add.w	r3, r7, #8
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	4611      	mov	r1, r2
 8003462:	8019      	strh	r1, [r3, #0]
 8003464:	3302      	adds	r3, #2
 8003466:	0c12      	lsrs	r2, r2, #16
 8003468:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	3320      	adds	r3, #32
 8003472:	443b      	add	r3, r7
 8003474:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003478:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	08db      	lsrs	r3, r3, #3
 800347e:	b29b      	uxth	r3, r3
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	3320      	adds	r3, #32
 8003486:	443b      	add	r3, r7
 8003488:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800348c:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	099b      	lsrs	r3, r3, #6
 8003492:	b29b      	uxth	r3, r3
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	3320      	adds	r3, #32
 800349a:	443b      	add	r3, r7
 800349c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034a0:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	3320      	adds	r3, #32
 80034aa:	443b      	add	r3, r7
 80034ac:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80034b0:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	08db      	lsrs	r3, r3, #3
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	3320      	adds	r3, #32
 80034be:	443b      	add	r3, r7
 80034c0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80034c4:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	3320      	adds	r3, #32
 80034d2:	443b      	add	r3, r7
 80034d4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80034d8:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 80034da:	f107 031c 	add.w	r3, r7, #28
 80034de:	461a      	mov	r2, r3
 80034e0:	2103      	movs	r1, #3
 80034e2:	f240 4026 	movw	r0, #1062	@ 0x426
 80034e6:	f7ff fdc3 	bl	8003070 <mpu_write_mem>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <dmp_set_orientation+0xde>
        return -1;
 80034f0:	f04f 33ff 	mov.w	r3, #4294967295
 80034f4:	e06e      	b.n	80035d4 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 80034f6:	f107 0318 	add.w	r3, r7, #24
 80034fa:	461a      	mov	r2, r3
 80034fc:	2103      	movs	r1, #3
 80034fe:	f240 402a 	movw	r0, #1066	@ 0x42a
 8003502:	f7ff fdb5 	bl	8003070 <mpu_write_mem>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <dmp_set_orientation+0xfa>
        return -1;
 800350c:	f04f 33ff 	mov.w	r3, #4294967295
 8003510:	e060      	b.n	80035d4 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8003512:	f107 031c 	add.w	r3, r7, #28
 8003516:	f107 020c 	add.w	r2, r7, #12
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	4611      	mov	r1, r2
 800351e:	8019      	strh	r1, [r3, #0]
 8003520:	3302      	adds	r3, #2
 8003522:	0c12      	lsrs	r2, r2, #16
 8003524:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8003526:	f107 0318 	add.w	r3, r7, #24
 800352a:	f107 0208 	add.w	r2, r7, #8
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	4611      	mov	r1, r2
 8003532:	8019      	strh	r1, [r3, #0]
 8003534:	3302      	adds	r3, #2
 8003536:	0c12      	lsrs	r2, r2, #16
 8003538:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d009      	beq.n	8003558 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 8003544:	7f3b      	ldrb	r3, [r7, #28]
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	b2db      	uxtb	r3, r3
 800354c:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 800354e:	7e3b      	ldrb	r3, [r7, #24]
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	b2db      	uxtb	r3, r3
 8003556:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 8003562:	7f7b      	ldrb	r3, [r7, #29]
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	b2db      	uxtb	r3, r3
 800356a:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 800356c:	7e7b      	ldrb	r3, [r7, #25]
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d009      	beq.n	8003594 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 8003580:	7fbb      	ldrb	r3, [r7, #30]
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 800358a:	7ebb      	ldrb	r3, [r7, #26]
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	b2db      	uxtb	r3, r3
 8003592:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8003594:	f107 031c 	add.w	r3, r7, #28
 8003598:	461a      	mov	r2, r3
 800359a:	2103      	movs	r1, #3
 800359c:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 80035a0:	f7ff fd66 	bl	8003070 <mpu_write_mem>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <dmp_set_orientation+0x198>
        return -1;
 80035aa:	f04f 33ff 	mov.w	r3, #4294967295
 80035ae:	e011      	b.n	80035d4 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 80035b0:	f107 0318 	add.w	r3, r7, #24
 80035b4:	461a      	mov	r2, r3
 80035b6:	2103      	movs	r1, #3
 80035b8:	f240 4031 	movw	r0, #1073	@ 0x431
 80035bc:	f7ff fd58 	bl	8003070 <mpu_write_mem>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <dmp_set_orientation+0x1b4>
        return -1;
 80035c6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ca:	e003      	b.n	80035d4 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 80035cc:	4a07      	ldr	r2, [pc, #28]	@ (80035ec <dmp_set_orientation+0x1d4>)
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	8113      	strh	r3, [r2, #8]
    return 0;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	0800ee68 	.word	0x0800ee68
 80035e0:	0800ee6c 	.word	0x0800ee6c
 80035e4:	0800ee70 	.word	0x0800ee70
 80035e8:	0800ee74 	.word	0x0800ee74
 80035ec:	20000284 	.word	0x20000284

080035f0 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 80035f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f4:	b08c      	sub	sp, #48	@ 0x30
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 80035fa:	4b80      	ldr	r3, [pc, #512]	@ (80037fc <dmp_set_gyro_bias+0x20c>)
 80035fc:	891b      	ldrh	r3, [r3, #8]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (dmp.orient & 4)
 800360c:	4b7b      	ldr	r3, [pc, #492]	@ (80037fc <dmp_set_gyro_bias+0x20c>)
 800360e:	891b      	ldrh	r3, [r3, #8]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	425b      	negs	r3, r3
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800361e:	4b77      	ldr	r3, [pc, #476]	@ (80037fc <dmp_set_gyro_bias+0x20c>)
 8003620:	891b      	ldrh	r3, [r3, #8]
 8003622:	08db      	lsrs	r3, r3, #3
 8003624:	b29b      	uxth	r3, r3
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	4413      	add	r3, r2
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (dmp.orient & 0x20)
 8003634:	4b71      	ldr	r3, [pc, #452]	@ (80037fc <dmp_set_gyro_bias+0x20c>)
 8003636:	891b      	ldrh	r3, [r3, #8]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 8003640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003642:	425b      	negs	r3, r3
 8003644:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8003646:	4b6d      	ldr	r3, [pc, #436]	@ (80037fc <dmp_set_gyro_bias+0x20c>)
 8003648:	891b      	ldrh	r3, [r3, #8]
 800364a:	099b      	lsrs	r3, r3, #6
 800364c:	b29b      	uxth	r3, r3
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	69fa      	ldr	r2, [r7, #28]
 8003656:	4413      	add	r3, r2
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dmp.orient & 0x100)
 800365c:	4b67      	ldr	r3, [pc, #412]	@ (80037fc <dmp_set_gyro_bias+0x20c>)
 800365e:	891b      	ldrh	r3, [r3, #8]
 8003660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 8003668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366a:	425b      	negs	r3, r3
 800366c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	17da      	asrs	r2, r3, #31
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	617a      	str	r2, [r7, #20]
 8003676:	4b62      	ldr	r3, [pc, #392]	@ (8003800 <dmp_set_gyro_bias+0x210>)
 8003678:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800367c:	460a      	mov	r2, r1
 800367e:	fb03 f202 	mul.w	r2, r3, r2
 8003682:	2300      	movs	r3, #0
 8003684:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003688:	4601      	mov	r1, r0
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	4413      	add	r3, r2
 8003690:	4a5b      	ldr	r2, [pc, #364]	@ (8003800 <dmp_set_gyro_bias+0x210>)
 8003692:	6939      	ldr	r1, [r7, #16]
 8003694:	fba1 ab02 	umull	sl, fp, r1, r2
 8003698:	445b      	add	r3, fp
 800369a:	469b      	mov	fp, r3
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	ea4f 729a 	mov.w	r2, sl, lsr #30
 80036a8:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 80036ac:	ea4f 73ab 	mov.w	r3, fp, asr #30
 80036b0:	4613      	mov	r3, r2
 80036b2:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b6:	17da      	asrs	r2, r3, #31
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	60fa      	str	r2, [r7, #12]
 80036bc:	4b50      	ldr	r3, [pc, #320]	@ (8003800 <dmp_set_gyro_bias+0x210>)
 80036be:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80036c2:	465a      	mov	r2, fp
 80036c4:	fb03 f202 	mul.w	r2, r3, r2
 80036c8:	2300      	movs	r3, #0
 80036ca:	4651      	mov	r1, sl
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	4413      	add	r3, r2
 80036d2:	4a4b      	ldr	r2, [pc, #300]	@ (8003800 <dmp_set_gyro_bias+0x210>)
 80036d4:	4651      	mov	r1, sl
 80036d6:	fba1 8902 	umull	r8, r9, r1, r2
 80036da:	444b      	add	r3, r9
 80036dc:	4699      	mov	r9, r3
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	ea4f 7298 	mov.w	r2, r8, lsr #30
 80036ea:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 80036ee:	ea4f 73a9 	mov.w	r3, r9, asr #30
 80036f2:	4613      	mov	r3, r2
 80036f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 80036f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f8:	17da      	asrs	r2, r3, #31
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	4b40      	ldr	r3, [pc, #256]	@ (8003800 <dmp_set_gyro_bias+0x210>)
 8003700:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003704:	464a      	mov	r2, r9
 8003706:	fb03 f202 	mul.w	r2, r3, r2
 800370a:	2300      	movs	r3, #0
 800370c:	4641      	mov	r1, r8
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	4a3a      	ldr	r2, [pc, #232]	@ (8003800 <dmp_set_gyro_bias+0x210>)
 8003716:	4641      	mov	r1, r8
 8003718:	fba1 4502 	umull	r4, r5, r1, r2
 800371c:	442b      	add	r3, r5
 800371e:	461d      	mov	r5, r3
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	0fa2      	lsrs	r2, r4, #30
 800372a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800372e:	17ab      	asrs	r3, r5, #30
 8003730:	4613      	mov	r3, r2
 8003732:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 8003734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003736:	161b      	asrs	r3, r3, #24
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	141b      	asrs	r3, r3, #16
 8003742:	b2db      	uxtb	r3, r3
 8003744:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	121b      	asrs	r3, r3, #8
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 800375a:	f107 0320 	add.w	r3, r7, #32
 800375e:	461a      	mov	r2, r3
 8003760:	2104      	movs	r1, #4
 8003762:	f44f 7074 	mov.w	r0, #976	@ 0x3d0
 8003766:	f7ff fc83 	bl	8003070 <mpu_write_mem>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <dmp_set_gyro_bias+0x186>
        return -1;
 8003770:	f04f 33ff 	mov.w	r3, #4294967295
 8003774:	e03c      	b.n	80037f0 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 8003776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003778:	161b      	asrs	r3, r3, #24
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 8003780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003782:	141b      	asrs	r3, r3, #16
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 800378a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378c:	121b      	asrs	r3, r3, #8
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 8003794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 800379c:	f107 0320 	add.w	r3, r7, #32
 80037a0:	461a      	mov	r2, r3
 80037a2:	2104      	movs	r1, #4
 80037a4:	f44f 7075 	mov.w	r0, #980	@ 0x3d4
 80037a8:	f7ff fc62 	bl	8003070 <mpu_write_mem>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <dmp_set_gyro_bias+0x1c8>
        return -1;
 80037b2:	f04f 33ff 	mov.w	r3, #4294967295
 80037b6:	e01b      	b.n	80037f0 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 80037b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ba:	161b      	asrs	r3, r3, #24
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 80037c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c4:	141b      	asrs	r3, r3, #16
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 80037cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ce:	121b      	asrs	r3, r3, #8
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 80037d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 80037de:	f107 0320 	add.w	r3, r7, #32
 80037e2:	461a      	mov	r2, r3
 80037e4:	2104      	movs	r1, #4
 80037e6:	f44f 7076 	mov.w	r0, #984	@ 0x3d8
 80037ea:	f7ff fc41 	bl	8003070 <mpu_write_mem>
 80037ee:	4603      	mov	r3, r0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3730      	adds	r7, #48	@ 0x30
 80037f4:	46bd      	mov	sp, r7
 80037f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037fa:	bf00      	nop
 80037fc:	20000284 	.word	0x20000284
 8003800:	02cae309 	.word	0x02cae309

08003804 <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 8003804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003808:	b094      	sub	sp, #80	@ 0x50
 800380a:	af00      	add	r7, sp, #0
 800380c:	6278      	str	r0, [r7, #36]	@ 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 800380e:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe fa3e 	bl	8001c94 <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 8003818:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800381a:	b29b      	uxth	r3, r3
 800381c:	2200      	movs	r2, #0
 800381e:	61bb      	str	r3, [r7, #24]
 8003820:	61fa      	str	r2, [r7, #28]
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	69f9      	ldr	r1, [r7, #28]
 800382c:	03cb      	lsls	r3, r1, #15
 800382e:	69b9      	ldr	r1, [r7, #24]
 8003830:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 8003834:	69b9      	ldr	r1, [r7, #24]
 8003836:	03ca      	lsls	r2, r1, #15
 8003838:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    //__no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 800383c:	4b71      	ldr	r3, [pc, #452]	@ (8003a04 <dmp_set_accel_bias+0x200>)
 800383e:	891b      	ldrh	r3, [r3, #8]
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003848:	4413      	add	r3, r2
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (dmp.orient & 4)
 800384e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a04 <dmp_set_accel_bias+0x200>)
 8003850:	891b      	ldrh	r3, [r3, #8]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 800385a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800385c:	425b      	negs	r3, r3
 800385e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8003860:	4b68      	ldr	r3, [pc, #416]	@ (8003a04 <dmp_set_accel_bias+0x200>)
 8003862:	891b      	ldrh	r3, [r3, #8]
 8003864:	08db      	lsrs	r3, r3, #3
 8003866:	b29b      	uxth	r3, r3
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003870:	4413      	add	r3, r2
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	643b      	str	r3, [r7, #64]	@ 0x40
    if (dmp.orient & 0x20)
 8003876:	4b63      	ldr	r3, [pc, #396]	@ (8003a04 <dmp_set_accel_bias+0x200>)
 8003878:	891b      	ldrh	r3, [r3, #8]
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 8003882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003884:	425b      	negs	r3, r3
 8003886:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8003888:	4b5e      	ldr	r3, [pc, #376]	@ (8003a04 <dmp_set_accel_bias+0x200>)
 800388a:	891b      	ldrh	r3, [r3, #8]
 800388c:	099b      	lsrs	r3, r3, #6
 800388e:	b29b      	uxth	r3, r3
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003898:	4413      	add	r3, r2
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	647b      	str	r3, [r7, #68]	@ 0x44
    if (dmp.orient & 0x100)
 800389e:	4b59      	ldr	r3, [pc, #356]	@ (8003a04 <dmp_set_accel_bias+0x200>)
 80038a0:	891b      	ldrh	r3, [r3, #8]
 80038a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 80038aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ac:	425b      	negs	r3, r3
 80038ae:	647b      	str	r3, [r7, #68]	@ 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 80038b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b2:	17da      	asrs	r2, r3, #31
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	617a      	str	r2, [r7, #20]
 80038b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038be:	460a      	mov	r2, r1
 80038c0:	fb02 f203 	mul.w	r2, r2, r3
 80038c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038c6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80038ca:	4601      	mov	r1, r0
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038d4:	6939      	ldr	r1, [r7, #16]
 80038d6:	fba2 ab01 	umull	sl, fp, r2, r1
 80038da:	445b      	add	r3, fp
 80038dc:	469b      	mov	fp, r3
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	ea4f 729a 	mov.w	r2, sl, lsr #30
 80038ea:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 80038ee:	ea4f 73ab 	mov.w	r3, fp, asr #30
 80038f2:	4613      	mov	r3, r2
 80038f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 80038f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f8:	17da      	asrs	r2, r3, #31
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	60fa      	str	r2, [r7, #12]
 80038fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003900:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003904:	465a      	mov	r2, fp
 8003906:	fb02 f203 	mul.w	r2, r2, r3
 800390a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800390c:	4651      	mov	r1, sl
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	4413      	add	r3, r2
 8003914:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003916:	4651      	mov	r1, sl
 8003918:	fba2 8901 	umull	r8, r9, r2, r1
 800391c:	444b      	add	r3, r9
 800391e:	4699      	mov	r9, r3
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800392c:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8003930:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003934:	4613      	mov	r3, r2
 8003936:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 8003938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800393a:	17da      	asrs	r2, r3, #31
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003942:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003946:	464a      	mov	r2, r9
 8003948:	fb02 f203 	mul.w	r2, r2, r3
 800394c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800394e:	4641      	mov	r1, r8
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	4413      	add	r3, r2
 8003956:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003958:	4641      	mov	r1, r8
 800395a:	fba2 4501 	umull	r4, r5, r2, r1
 800395e:	442b      	add	r3, r5
 8003960:	461d      	mov	r5, r3
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	0fa2      	lsrs	r2, r4, #30
 800396c:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8003970:	17ab      	asrs	r3, r5, #30
 8003972:	4613      	mov	r3, r2
 8003974:	647b      	str	r3, [r7, #68]	@ 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 8003976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003978:	161b      	asrs	r3, r3, #24
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 8003980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003982:	141b      	asrs	r3, r3, #16
 8003984:	b2db      	uxtb	r3, r3
 8003986:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 800398a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800398c:	121b      	asrs	r3, r3, #8
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 8003994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 800399c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800399e:	161b      	asrs	r3, r3, #24
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 80039a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a8:	141b      	asrs	r3, r3, #16
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 80039b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b2:	121b      	asrs	r3, r3, #8
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 80039ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 80039c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039c4:	161b      	asrs	r3, r3, #24
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 80039cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ce:	141b      	asrs	r3, r3, #16
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 80039d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039d8:	121b      	asrs	r3, r3, #8
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 80039e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 80039e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80039ec:	461a      	mov	r2, r3
 80039ee:	210c      	movs	r1, #12
 80039f0:	f44f 7025 	mov.w	r0, #660	@ 0x294
 80039f4:	f7ff fb3c 	bl	8003070 <mpu_write_mem>
 80039f8:	4603      	mov	r3, r0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3750      	adds	r7, #80	@ 0x50
 80039fe:	46bd      	mov	sp, r7
 8003a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a04:	20000284 	.word	0x20000284

08003a08 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8003a12:	4a1f      	ldr	r2, [pc, #124]	@ (8003a90 <dmp_set_fifo_rate+0x88>)
 8003a14:	f107 0310 	add.w	r3, r7, #16
 8003a18:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	2bc8      	cmp	r3, #200	@ 0xc8
 8003a22:	d902      	bls.n	8003a2a <dmp_set_fifo_rate+0x22>
        return -1;
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295
 8003a28:	e02e      	b.n	8003a88 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	22c8      	movs	r2, #200	@ 0xc8
 8003a2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8003a38:	8bfb      	ldrh	r3, [r7, #30]
 8003a3a:	0a1b      	lsrs	r3, r3, #8
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8003a42:	8bfb      	ldrh	r3, [r7, #30]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8003a48:	f107 0308 	add.w	r3, r7, #8
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2102      	movs	r1, #2
 8003a50:	f240 2016 	movw	r0, #534	@ 0x216
 8003a54:	f7ff fb0c 	bl	8003070 <mpu_write_mem>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <dmp_set_fifo_rate+0x5c>
        return -1;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a62:	e011      	b.n	8003a88 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8003a64:	f107 0310 	add.w	r3, r7, #16
 8003a68:	461a      	mov	r2, r3
 8003a6a:	210c      	movs	r1, #12
 8003a6c:	f640 20c1 	movw	r0, #2753	@ 0xac1
 8003a70:	f7ff fafe 	bl	8003070 <mpu_write_mem>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <dmp_set_fifo_rate+0x78>
        return -1;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	e003      	b.n	8003a88 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8003a80:	4a04      	ldr	r2, [pc, #16]	@ (8003a94 <dmp_set_fifo_rate+0x8c>)
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	8193      	strh	r3, [r2, #12]
    return 0;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3720      	adds	r7, #32
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	0800ee78 	.word	0x0800ee78
 8003a94:	20000284 	.word	0x20000284

08003a98 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	460a      	mov	r2, r1
 8003aa2:	71fb      	strb	r3, [r7, #7]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <dmp_set_tap_thresh+0x22>
 8003ab2:	88bb      	ldrh	r3, [r7, #4]
 8003ab4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003ab8:	d902      	bls.n	8003ac0 <dmp_set_tap_thresh+0x28>
        return -1;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	e10b      	b.n	8003cd8 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8003ac0:	88bb      	ldrh	r3, [r7, #4]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003aca:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8003ce0 <dmp_set_tap_thresh+0x248>
 8003ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ad2:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 8003ad6:	f107 030b 	add.w	r3, r7, #11
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fd fed2 	bl	8001884 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8003ae0:	7afb      	ldrb	r3, [r7, #11]
 8003ae2:	3b02      	subs	r3, #2
 8003ae4:	2b0e      	cmp	r3, #14
 8003ae6:	d87d      	bhi.n	8003be4 <dmp_set_tap_thresh+0x14c>
 8003ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <dmp_set_tap_thresh+0x58>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b2d 	.word	0x08003b2d
 8003af4:	08003be5 	.word	0x08003be5
 8003af8:	08003b5b 	.word	0x08003b5b
 8003afc:	08003be5 	.word	0x08003be5
 8003b00:	08003be5 	.word	0x08003be5
 8003b04:	08003be5 	.word	0x08003be5
 8003b08:	08003b89 	.word	0x08003b89
 8003b0c:	08003be5 	.word	0x08003be5
 8003b10:	08003be5 	.word	0x08003be5
 8003b14:	08003be5 	.word	0x08003be5
 8003b18:	08003be5 	.word	0x08003be5
 8003b1c:	08003be5 	.word	0x08003be5
 8003b20:	08003be5 	.word	0x08003be5
 8003b24:	08003be5 	.word	0x08003be5
 8003b28:	08003bb7 	.word	0x08003bb7
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8003b2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b30:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8003ce4 <dmp_set_tap_thresh+0x24c>
 8003b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b3c:	ee17 3a90 	vmov	r3, s15
 8003b40:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8003b42:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b46:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003ce8 <dmp_set_tap_thresh+0x250>
 8003b4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b52:	ee17 3a90 	vmov	r3, s15
 8003b56:	82bb      	strh	r3, [r7, #20]
        break;
 8003b58:	e047      	b.n	8003bea <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8003b5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b5e:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8003cec <dmp_set_tap_thresh+0x254>
 8003b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b6a:	ee17 3a90 	vmov	r3, s15
 8003b6e:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8003b70:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b74:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8003cf0 <dmp_set_tap_thresh+0x258>
 8003b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b80:	ee17 3a90 	vmov	r3, s15
 8003b84:	82bb      	strh	r3, [r7, #20]
        break;
 8003b86:	e030      	b.n	8003bea <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8003b88:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b8c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003cf4 <dmp_set_tap_thresh+0x25c>
 8003b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b98:	ee17 3a90 	vmov	r3, s15
 8003b9c:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8003b9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ba2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003cf8 <dmp_set_tap_thresh+0x260>
 8003ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bae:	ee17 3a90 	vmov	r3, s15
 8003bb2:	82bb      	strh	r3, [r7, #20]
        break;
 8003bb4:	e019      	b.n	8003bea <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8003bb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bba:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8003cfc <dmp_set_tap_thresh+0x264>
 8003bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc6:	ee17 3a90 	vmov	r3, s15
 8003bca:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8003bcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bd0:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003d00 <dmp_set_tap_thresh+0x268>
 8003bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bdc:	ee17 3a90 	vmov	r3, s15
 8003be0:	82bb      	strh	r3, [r7, #20]
        break;
 8003be2:	e002      	b.n	8003bea <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 8003be4:	f04f 33ff 	mov.w	r3, #4294967295
 8003be8:	e076      	b.n	8003cd8 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8003bea:	8afb      	ldrh	r3, [r7, #22]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8003bf4:	8afb      	ldrh	r3, [r7, #22]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8003bfa:	8abb      	ldrh	r3, [r7, #20]
 8003bfc:	0a1b      	lsrs	r3, r3, #8
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8003c04:	8abb      	ldrh	r3, [r7, #20]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01c      	beq.n	8003c4e <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8003c14:	f107 030c 	add.w	r3, r7, #12
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	f44f 70ea 	mov.w	r0, #468	@ 0x1d4
 8003c20:	f7ff fa26 	bl	8003070 <mpu_write_mem>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <dmp_set_tap_thresh+0x198>
            return -1;
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2e:	e053      	b.n	8003cd8 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8003c30:	f107 030c 	add.w	r3, r7, #12
 8003c34:	3302      	adds	r3, #2
 8003c36:	461a      	mov	r2, r3
 8003c38:	2102      	movs	r1, #2
 8003c3a:	f44f 7092 	mov.w	r0, #292	@ 0x124
 8003c3e:	f7ff fa17 	bl	8003070 <mpu_write_mem>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <dmp_set_tap_thresh+0x1b6>
            return -1;
 8003c48:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4c:	e044      	b.n	8003cd8 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01c      	beq.n	8003c92 <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8003c58:	f107 030c 	add.w	r3, r7, #12
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2102      	movs	r1, #2
 8003c60:	f44f 70ec 	mov.w	r0, #472	@ 0x1d8
 8003c64:	f7ff fa04 	bl	8003070 <mpu_write_mem>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <dmp_set_tap_thresh+0x1dc>
            return -1;
 8003c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c72:	e031      	b.n	8003cd8 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8003c74:	f107 030c 	add.w	r3, r7, #12
 8003c78:	3302      	adds	r3, #2
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	f44f 7094 	mov.w	r0, #296	@ 0x128
 8003c82:	f7ff f9f5 	bl	8003070 <mpu_write_mem>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <dmp_set_tap_thresh+0x1fa>
            return -1;
 8003c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c90:	e022      	b.n	8003cd8 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01c      	beq.n	8003cd6 <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8003c9c:	f107 030c 	add.w	r3, r7, #12
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	f44f 70ee 	mov.w	r0, #476	@ 0x1dc
 8003ca8:	f7ff f9e2 	bl	8003070 <mpu_write_mem>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <dmp_set_tap_thresh+0x220>
            return -1;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb6:	e00f      	b.n	8003cd8 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	3302      	adds	r3, #2
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003cc6:	f7ff f9d3 	bl	8003070 <mpu_write_mem>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <dmp_set_tap_thresh+0x23e>
            return -1;
 8003cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd4:	e000      	b.n	8003cd8 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	43480000 	.word	0x43480000
 8003ce4:	46800000 	.word	0x46800000
 8003ce8:	46400000 	.word	0x46400000
 8003cec:	46000000 	.word	0x46000000
 8003cf0:	45c00000 	.word	0x45c00000
 8003cf4:	45800000 	.word	0x45800000
 8003cf8:	45400000 	.word	0x45400000
 8003cfc:	45000000 	.word	0x45000000
 8003d00:	44c00000 	.word	0x44c00000

08003d04 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d004      	beq.n	8003d26 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d004      	beq.n	8003d3a <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	f043 030c 	orr.w	r3, r3, #12
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d004      	beq.n	8003d4e <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	f043 0303 	orr.w	r3, r3, #3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8003d4e:	f107 030f 	add.w	r3, r7, #15
 8003d52:	461a      	mov	r2, r3
 8003d54:	2101      	movs	r1, #1
 8003d56:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 8003d5a:	f7ff f989 	bl	8003070 <mpu_write_mem>
 8003d5e:	4603      	mov	r3, r0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <dmp_set_tap_count+0x16>
        min_taps = 1;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	71fb      	strb	r3, [r7, #7]
 8003d7c:	e004      	b.n	8003d88 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d901      	bls.n	8003d88 <dmp_set_tap_count+0x20>
        min_taps = 4;
 8003d84:	2304      	movs	r3, #4
 8003d86:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8003d90:	f107 030f 	add.w	r3, r7, #15
 8003d94:	461a      	mov	r2, r3
 8003d96:	2101      	movs	r1, #1
 8003d98:	f240 104f 	movw	r0, #335	@ 0x14f
 8003d9c:	f7ff f968 	bl	8003070 <mpu_write_mem>
 8003da0:	4603      	mov	r3, r0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	4a0c      	ldr	r2, [pc, #48]	@ (8003dec <dmp_set_tap_time+0x40>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003dc2:	89fb      	ldrh	r3, [r7, #14]
 8003dc4:	0a1b      	lsrs	r3, r3, #8
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003dcc:	89fb      	ldrh	r3, [r7, #14]
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8003dd2:	f107 030c 	add.w	r3, r7, #12
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2102      	movs	r1, #2
 8003dda:	f44f 70ef 	mov.w	r0, #478	@ 0x1de
 8003dde:	f7ff f947 	bl	8003070 <mpu_write_mem>
 8003de2:	4603      	mov	r3, r0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	cccccccd 	.word	0xcccccccd

08003df0 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	4a0c      	ldr	r2, [pc, #48]	@ (8003e30 <dmp_set_tap_time_multi+0x40>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	089b      	lsrs	r3, r3, #2
 8003e04:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003e06:	89fb      	ldrh	r3, [r7, #14]
 8003e08:	0a1b      	lsrs	r3, r3, #8
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003e10:	89fb      	ldrh	r3, [r7, #14]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 8003e16:	f107 030c 	add.w	r3, r7, #12
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	f44f 70ed 	mov.w	r0, #474	@ 0x1da
 8003e22:	f7ff f925 	bl	8003070 <mpu_write_mem>
 8003e26:	4603      	mov	r3, r0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	cccccccd 	.word	0xcccccccd

08003e34 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a13      	ldr	r2, [pc, #76]	@ (8003e90 <dmp_set_shake_reject_thresh+0x5c>)
 8003e44:	fb82 1203 	smull	r1, r2, r2, r3
 8003e48:	1192      	asrs	r2, r2, #6
 8003e4a:	17db      	asrs	r3, r3, #31
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	887a      	ldrh	r2, [r7, #2]
 8003e50:	fb02 f303 	mul.w	r3, r2, r3
 8003e54:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	161b      	asrs	r3, r3, #24
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	141b      	asrs	r3, r3, #16
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	121b      	asrs	r3, r3, #8
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8003e74:	f107 0308 	add.w	r3, r7, #8
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2104      	movs	r1, #4
 8003e7c:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 8003e80:	f7ff f8f6 	bl	8003070 <mpu_write_mem>
 8003e84:	4603      	mov	r3, r0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	10624dd3 	.word	0x10624dd3

08003e94 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	4a0c      	ldr	r2, [pc, #48]	@ (8003ed4 <dmp_set_shake_reject_time+0x40>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 8003eba:	f107 030c 	add.w	r3, r7, #12
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	f44f 70ad 	mov.w	r0, #346	@ 0x15a
 8003ec6:	f7ff f8d3 	bl	8003070 <mpu_write_mem>
 8003eca:	4603      	mov	r3, r0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	cccccccd 	.word	0xcccccccd

08003ed8 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8003f18 <dmp_set_shake_reject_timeout+0x40>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	089b      	lsrs	r3, r3, #2
 8003eec:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	0a1b      	lsrs	r3, r3, #8
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 8003efe:	f107 030c 	add.w	r3, r7, #12
 8003f02:	461a      	mov	r2, r3
 8003f04:	2102      	movs	r1, #2
 8003f06:	f44f 70ac 	mov.w	r0, #344	@ 0x158
 8003f0a:	f7ff f8b1 	bl	8003070 <mpu_write_mem>
 8003f0e:	4603      	mov	r3, r0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	cccccccd 	.word	0xcccccccd

08003f1c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8003f26:	2302      	movs	r3, #2
 8003f28:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 8003f2a:	23ca      	movs	r3, #202	@ 0xca
 8003f2c:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8003f2e:	23e3      	movs	r3, #227	@ 0xe3
 8003f30:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8003f32:	2309      	movs	r3, #9
 8003f34:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 8003f36:	f107 030c 	add.w	r3, r7, #12
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2104      	movs	r1, #4
 8003f3e:	2068      	movs	r0, #104	@ 0x68
 8003f40:	f7ff f896 	bl	8003070 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 8003f44:	23a3      	movs	r3, #163	@ 0xa3
 8003f46:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d006      	beq.n	8003f60 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 8003f52:	23c0      	movs	r3, #192	@ 0xc0
 8003f54:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 8003f56:	23c8      	movs	r3, #200	@ 0xc8
 8003f58:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 8003f5a:	23c2      	movs	r3, #194	@ 0xc2
 8003f5c:	73fb      	strb	r3, [r7, #15]
 8003f5e:	e005      	b.n	8003f6c <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 8003f60:	23a3      	movs	r3, #163	@ 0xa3
 8003f62:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 8003f64:	23a3      	movs	r3, #163	@ 0xa3
 8003f66:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 8003f68:	23a3      	movs	r3, #163	@ 0xa3
 8003f6a:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d006      	beq.n	8003f84 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 8003f76:	23c4      	movs	r3, #196	@ 0xc4
 8003f78:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 8003f7a:	23cc      	movs	r3, #204	@ 0xcc
 8003f7c:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 8003f7e:	23c6      	movs	r3, #198	@ 0xc6
 8003f80:	74bb      	strb	r3, [r7, #18]
 8003f82:	e005      	b.n	8003f90 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8003f84:	23a3      	movs	r3, #163	@ 0xa3
 8003f86:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 8003f88:	23a3      	movs	r3, #163	@ 0xa3
 8003f8a:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8003f8c:	23a3      	movs	r3, #163	@ 0xa3
 8003f8e:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 8003f90:	23a3      	movs	r3, #163	@ 0xa3
 8003f92:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8003f94:	23a3      	movs	r3, #163	@ 0xa3
 8003f96:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 8003f98:	23a3      	movs	r3, #163	@ 0xa3
 8003f9a:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8003f9c:	f107 030c 	add.w	r3, r7, #12
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	210a      	movs	r1, #10
 8003fa4:	f640 20a7 	movw	r0, #2727	@ 0xaa7
 8003fa8:	f7ff f862 	bl	8003070 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 8003fb6:	2320      	movs	r3, #32
 8003fb8:	733b      	strb	r3, [r7, #12]
 8003fba:	e001      	b.n	8003fc0 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8003fbc:	23d8      	movs	r3, #216	@ 0xd8
 8003fbe:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8003fc0:	f107 030c 	add.w	r3, r7, #12
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	f640 20b6 	movw	r0, #2742	@ 0xab6
 8003fcc:	f7ff f850 	bl	8003070 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 8003fda:	2001      	movs	r0, #1
 8003fdc:	f000 f8c6 	bl	800416c <dmp_enable_gyro_cal>
 8003fe0:	e002      	b.n	8003fe8 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	f000 f8c2 	bl	800416c <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d01d      	beq.n	800402e <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8003ff2:	88fb      	ldrh	r3, [r7, #6]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 8003ffc:	23b2      	movs	r3, #178	@ 0xb2
 8003ffe:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8004000:	238b      	movs	r3, #139	@ 0x8b
 8004002:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8004004:	23b6      	movs	r3, #182	@ 0xb6
 8004006:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8004008:	239b      	movs	r3, #155	@ 0x9b
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	e007      	b.n	800401e <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 800400e:	23b0      	movs	r3, #176	@ 0xb0
 8004010:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 8004012:	2380      	movs	r3, #128	@ 0x80
 8004014:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 8004016:	23b4      	movs	r3, #180	@ 0xb4
 8004018:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 800401a:	2390      	movs	r3, #144	@ 0x90
 800401c:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800401e:	f107 030c 	add.w	r3, r7, #12
 8004022:	461a      	mov	r2, r3
 8004024:	2104      	movs	r1, #4
 8004026:	f640 20a2 	movw	r0, #2722	@ 0xaa2
 800402a:	f7ff f821 	bl	8003070 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d025      	beq.n	8004084 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8004038:	23f8      	movs	r3, #248	@ 0xf8
 800403a:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800403c:	f107 030c 	add.w	r3, r7, #12
 8004040:	461a      	mov	r2, r3
 8004042:	2101      	movs	r1, #1
 8004044:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 8004048:	f7ff f812 	bl	8003070 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800404c:	21fa      	movs	r1, #250	@ 0xfa
 800404e:	2007      	movs	r0, #7
 8004050:	f7ff fd22 	bl	8003a98 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8004054:	2007      	movs	r0, #7
 8004056:	f7ff fe55 	bl	8003d04 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800405a:	2001      	movs	r0, #1
 800405c:	f7ff fe84 	bl	8003d68 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8004060:	2064      	movs	r0, #100	@ 0x64
 8004062:	f7ff fea3 	bl	8003dac <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 8004066:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800406a:	f7ff fec1 	bl	8003df0 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 800406e:	21c8      	movs	r1, #200	@ 0xc8
 8004070:	483c      	ldr	r0, [pc, #240]	@ (8004164 <dmp_enable_feature+0x248>)
 8004072:	f7ff fedf 	bl	8003e34 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 8004076:	2028      	movs	r0, #40	@ 0x28
 8004078:	f7ff ff0c 	bl	8003e94 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 800407c:	200a      	movs	r0, #10
 800407e:	f7ff ff2b 	bl	8003ed8 <dmp_set_shake_reject_timeout>
 8004082:	e009      	b.n	8004098 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 8004084:	23d8      	movs	r3, #216	@ 0xd8
 8004086:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 8004088:	f107 030c 	add.w	r3, r7, #12
 800408c:	461a      	mov	r2, r3
 800408e:	2101      	movs	r1, #1
 8004090:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 8004094:	f7fe ffec 	bl	8003070 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 80040a2:	23d9      	movs	r3, #217	@ 0xd9
 80040a4:	733b      	strb	r3, [r7, #12]
 80040a6:	e001      	b.n	80040ac <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 80040a8:	23d8      	movs	r3, #216	@ 0xd8
 80040aa:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 80040ac:	f107 030c 	add.w	r3, r7, #12
 80040b0:	461a      	mov	r2, r3
 80040b2:	2101      	movs	r1, #1
 80040b4:	f240 703d 	movw	r0, #1853	@ 0x73d
 80040b8:	f7fe ffda 	bl	8003070 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 80040bc:	88fb      	ldrh	r3, [r7, #6]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 80040c6:	2001      	movs	r0, #1
 80040c8:	f000 f880 	bl	80041cc <dmp_enable_lp_quat>
 80040cc:	e002      	b.n	80040d4 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 80040ce:	2000      	movs	r0, #0
 80040d0:	f000 f87c 	bl	80041cc <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 80040de:	2001      	movs	r0, #1
 80040e0:	f000 f89b 	bl	800421a <dmp_enable_6x_lp_quat>
 80040e4:	e002      	b.n	80040ec <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 80040e6:	2000      	movs	r0, #0
 80040e8:	f000 f897 	bl	800421a <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	f043 0308 	orr.w	r3, r3, #8
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004168 <dmp_enable_feature+0x24c>)
 80040f6:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 80040f8:	f7fd f9c8 	bl	800148c <mpu_reset_fifo>

    dmp.packet_length = 0;
 80040fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004168 <dmp_enable_feature+0x24c>)
 80040fe:	2200      	movs	r2, #0
 8004100:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 800410c:	4b16      	ldr	r3, [pc, #88]	@ (8004168 <dmp_enable_feature+0x24c>)
 800410e:	7b9b      	ldrb	r3, [r3, #14]
 8004110:	3306      	adds	r3, #6
 8004112:	b2da      	uxtb	r2, r3
 8004114:	4b14      	ldr	r3, [pc, #80]	@ (8004168 <dmp_enable_feature+0x24c>)
 8004116:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8004122:	4b11      	ldr	r3, [pc, #68]	@ (8004168 <dmp_enable_feature+0x24c>)
 8004124:	7b9b      	ldrb	r3, [r3, #14]
 8004126:	3306      	adds	r3, #6
 8004128:	b2da      	uxtb	r2, r3
 800412a:	4b0f      	ldr	r3, [pc, #60]	@ (8004168 <dmp_enable_feature+0x24c>)
 800412c:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	f003 0314 	and.w	r3, r3, #20
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8004138:	4b0b      	ldr	r3, [pc, #44]	@ (8004168 <dmp_enable_feature+0x24c>)
 800413a:	7b9b      	ldrb	r3, [r3, #14]
 800413c:	3310      	adds	r3, #16
 800413e:	b2da      	uxtb	r2, r3
 8004140:	4b09      	ldr	r3, [pc, #36]	@ (8004168 <dmp_enable_feature+0x24c>)
 8004142:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 800414e:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <dmp_enable_feature+0x24c>)
 8004150:	7b9b      	ldrb	r3, [r3, #14]
 8004152:	3304      	adds	r3, #4
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4b04      	ldr	r3, [pc, #16]	@ (8004168 <dmp_enable_feature+0x24c>)
 8004158:	739a      	strb	r2, [r3, #14]

    return 0;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	02cae309 	.word	0x02cae309
 8004168:	20000284 	.word	0x20000284

0800416c <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00f      	beq.n	800419c <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 800417c:	4a11      	ldr	r2, [pc, #68]	@ (80041c4 <dmp_enable_gyro_cal+0x58>)
 800417e:	f107 0314 	add.w	r3, r7, #20
 8004182:	ca07      	ldmia	r2, {r0, r1, r2}
 8004184:	c303      	stmia	r3!, {r0, r1}
 8004186:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8004188:	f107 0314 	add.w	r3, r7, #20
 800418c:	461a      	mov	r2, r3
 800418e:	2109      	movs	r1, #9
 8004190:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 8004194:	f7fe ff6c 	bl	8003070 <mpu_write_mem>
 8004198:	4603      	mov	r3, r0
 800419a:	e00e      	b.n	80041ba <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 800419c:	4a0a      	ldr	r2, [pc, #40]	@ (80041c8 <dmp_enable_gyro_cal+0x5c>)
 800419e:	f107 0308 	add.w	r3, r7, #8
 80041a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80041a4:	c303      	stmia	r3!, {r0, r1}
 80041a6:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80041a8:	f107 0308 	add.w	r3, r7, #8
 80041ac:	461a      	mov	r2, r3
 80041ae:	2109      	movs	r1, #9
 80041b0:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 80041b4:	f7fe ff5c 	bl	8003070 <mpu_write_mem>
 80041b8:	4603      	mov	r3, r0
    }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	0800ee84 	.word	0x0800ee84
 80041c8:	0800ee90 	.word	0x0800ee90

080041cc <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 80041dc:	23c0      	movs	r3, #192	@ 0xc0
 80041de:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 80041e0:	23c2      	movs	r3, #194	@ 0xc2
 80041e2:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 80041e4:	23c4      	movs	r3, #196	@ 0xc4
 80041e6:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 80041e8:	23c6      	movs	r3, #198	@ 0xc6
 80041ea:	73fb      	strb	r3, [r7, #15]
 80041ec:	e006      	b.n	80041fc <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 80041ee:	f107 030c 	add.w	r3, r7, #12
 80041f2:	2204      	movs	r2, #4
 80041f4:	218b      	movs	r1, #139	@ 0x8b
 80041f6:	4618      	mov	r0, r3
 80041f8:	f007 ffca 	bl	800c190 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 80041fc:	f107 030c 	add.w	r3, r7, #12
 8004200:	461a      	mov	r2, r3
 8004202:	2104      	movs	r1, #4
 8004204:	f640 2098 	movw	r0, #2712	@ 0xa98
 8004208:	f7fe ff32 	bl	8003070 <mpu_write_mem>

    return mpu_reset_fifo();
 800420c:	f7fd f93e 	bl	800148c <mpu_reset_fifo>
 8004210:	4603      	mov	r3, r0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	4603      	mov	r3, r0
 8004222:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 800422a:	2320      	movs	r3, #32
 800422c:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 800422e:	2328      	movs	r3, #40	@ 0x28
 8004230:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8004232:	2330      	movs	r3, #48	@ 0x30
 8004234:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 8004236:	2338      	movs	r3, #56	@ 0x38
 8004238:	73fb      	strb	r3, [r7, #15]
 800423a:	e006      	b.n	800424a <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	2204      	movs	r2, #4
 8004242:	21a3      	movs	r1, #163	@ 0xa3
 8004244:	4618      	mov	r0, r3
 8004246:	f007 ffa3 	bl	800c190 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 800424a:	f107 030c 	add.w	r3, r7, #12
 800424e:	461a      	mov	r2, r3
 8004250:	2104      	movs	r1, #4
 8004252:	f640 209e 	movw	r0, #2718	@ 0xa9e
 8004256:	f7fe ff0b 	bl	8003070 <mpu_write_mem>

    return mpu_reset_fifo();
 800425a:	f7fd f917 	bl	800148c <mpu_reset_fifo>
 800425e:	4603      	mov	r3, r0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3303      	adds	r3, #3
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800427a:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3303      	adds	r3, #3
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004286:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3301      	adds	r3, #1
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d012      	beq.n	80042bc <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 8004296:	7bbb      	ldrb	r3, [r7, #14]
 8004298:	08db      	lsrs	r3, r3, #3
 800429a:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 800429c:	7bbb      	ldrb	r3, [r7, #14]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	3301      	adds	r3, #1
 80042a6:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 80042a8:	4b10      	ldr	r3, [pc, #64]	@ (80042ec <decode_gesture+0x84>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 80042b0:	4b0e      	ldr	r3, [pc, #56]	@ (80042ec <decode_gesture+0x84>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	7b39      	ldrb	r1, [r7, #12]
 80042b6:	7b7a      	ldrb	r2, [r7, #13]
 80042b8:	4610      	mov	r0, r2
 80042ba:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3301      	adds	r3, #1
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 80042ca:	4b08      	ldr	r3, [pc, #32]	@ (80042ec <decode_gesture+0x84>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d006      	beq.n	80042e0 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 80042d2:	4b06      	ldr	r3, [pc, #24]	@ (80042ec <decode_gesture+0x84>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	7bfa      	ldrb	r2, [r7, #15]
 80042d8:	0992      	lsrs	r2, r2, #6
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	4610      	mov	r0, r2
 80042de:	4798      	blx	r3
    }

    return 0;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000284 	.word	0x20000284

080042f0 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b092      	sub	sp, #72	@ 0x48
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    sensors[0] = 0;
 8004304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004306:	2200      	movs	r2, #0
 8004308:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800430a:	4bb1      	ldr	r3, [pc, #708]	@ (80045d0 <dmp_read_fifo+0x2e0>)
 800430c:	7b9b      	ldrb	r3, [r3, #14]
 800430e:	4618      	mov	r0, r3
 8004310:	f107 0320 	add.w	r3, r7, #32
 8004314:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004316:	4619      	mov	r1, r3
 8004318:	f7fd fdf8 	bl	8001f0c <mpu_read_fifo_stream>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <dmp_read_fifo+0x38>
        return -1;
 8004322:	f04f 33ff 	mov.w	r3, #4294967295
 8004326:	e14e      	b.n	80045c6 <dmp_read_fifo+0x2d6>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8004328:	4ba9      	ldr	r3, [pc, #676]	@ (80045d0 <dmp_read_fifo+0x2e0>)
 800432a:	895b      	ldrh	r3, [r3, #10]
 800432c:	f003 0314 	and.w	r3, r3, #20
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 808a 	beq.w	800444a <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004336:	f897 3020 	ldrb.w	r3, [r7, #32]
 800433a:	061a      	lsls	r2, r3, #24
 800433c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004340:	041b      	lsls	r3, r3, #16
 8004342:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8004344:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004348:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800434a:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800434c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004350:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004356:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800435a:	061a      	lsls	r2, r3, #24
 800435c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004360:	041b      	lsls	r3, r3, #16
 8004362:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8004364:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004368:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800436a:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800436c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004370:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8004376:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004378:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800437a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800437e:	061a      	lsls	r2, r3, #24
 8004380:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8004388:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800438c:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800438e:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8004390:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004394:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800439a:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800439c:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800439e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80043a2:	061a      	lsls	r2, r3, #24
 80043a4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80043a8:	041b      	lsls	r3, r3, #16
 80043aa:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80043ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80043b0:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80043b2:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80043b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80043b8:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80043be:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80043c0:	601a      	str	r2, [r3, #0]
        ii += 16;
 80043c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80043c6:	3310      	adds	r3, #16
 80043c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	141b      	asrs	r3, r3, #16
 80043d2:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3304      	adds	r3, #4
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	141b      	asrs	r3, r3, #16
 80043dc:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3308      	adds	r3, #8
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	141b      	asrs	r3, r3, #16
 80043e6:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	330c      	adds	r3, #12
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	141b      	asrs	r3, r3, #16
 80043f0:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	fb03 f202 	mul.w	r2, r3, r2
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	6979      	ldr	r1, [r7, #20]
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	69b9      	ldr	r1, [r7, #24]
 8004408:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800440c:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	69f9      	ldr	r1, [r7, #28]
 8004412:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004416:	4413      	add	r3, r2
 8004418:	643b      	str	r3, [r7, #64]	@ 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 800441a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800441c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004420:	db03      	blt.n	800442a <dmp_read_fifo+0x13a>
 8004422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004424:	f1b3 5f88 	cmp.w	r3, #285212672	@ 0x11000000
 8004428:	dd07      	ble.n	800443a <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 800442a:	f7fd f82f 	bl	800148c <mpu_reset_fifo>
            sensors[0] = 0;
 800442e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004430:	2200      	movs	r2, #0
 8004432:	801a      	strh	r2, [r3, #0]
            return -1;
 8004434:	f04f 33ff 	mov.w	r3, #4294967295
 8004438:	e0c5      	b.n	80045c6 <dmp_read_fifo+0x2d6>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 800443a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800443c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004444:	b21a      	sxth	r2, r3
 8004446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004448:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800444a:	4b61      	ldr	r3, [pc, #388]	@ (80045d0 <dmp_read_fifo+0x2e0>)
 800444c:	895b      	ldrh	r3, [r3, #10]
 800444e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d04f      	beq.n	80044f6 <dmp_read_fifo+0x206>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004456:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800445a:	3348      	adds	r3, #72	@ 0x48
 800445c:	443b      	add	r3, r7
 800445e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004462:	b21b      	sxth	r3, r3
 8004464:	021b      	lsls	r3, r3, #8
 8004466:	b21a      	sxth	r2, r3
 8004468:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800446c:	3301      	adds	r3, #1
 800446e:	3348      	adds	r3, #72	@ 0x48
 8004470:	443b      	add	r3, r7
 8004472:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004476:	b21b      	sxth	r3, r3
 8004478:	4313      	orrs	r3, r2
 800447a:	b21a      	sxth	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8004480:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004484:	3302      	adds	r3, #2
 8004486:	3348      	adds	r3, #72	@ 0x48
 8004488:	443b      	add	r3, r7
 800448a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800448e:	b21b      	sxth	r3, r3
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	b219      	sxth	r1, r3
 8004494:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004498:	3303      	adds	r3, #3
 800449a:	3348      	adds	r3, #72	@ 0x48
 800449c:	443b      	add	r3, r7
 800449e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044a2:	b21a      	sxth	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	3302      	adds	r3, #2
 80044a8:	430a      	orrs	r2, r1
 80044aa:	b212      	sxth	r2, r2
 80044ac:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80044ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044b2:	3304      	adds	r3, #4
 80044b4:	3348      	adds	r3, #72	@ 0x48
 80044b6:	443b      	add	r3, r7
 80044b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044bc:	b21b      	sxth	r3, r3
 80044be:	021b      	lsls	r3, r3, #8
 80044c0:	b219      	sxth	r1, r3
 80044c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044c6:	3305      	adds	r3, #5
 80044c8:	3348      	adds	r3, #72	@ 0x48
 80044ca:	443b      	add	r3, r7
 80044cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044d0:	b21a      	sxth	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3304      	adds	r3, #4
 80044d6:	430a      	orrs	r2, r1
 80044d8:	b212      	sxth	r2, r2
 80044da:	801a      	strh	r2, [r3, #0]
        ii += 6;
 80044dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044e0:	3306      	adds	r3, #6
 80044e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 80044e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044ec:	f043 0308 	orr.w	r3, r3, #8
 80044f0:	b21a      	sxth	r2, r3
 80044f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044f4:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80044f6:	4b36      	ldr	r3, [pc, #216]	@ (80045d0 <dmp_read_fifo+0x2e0>)
 80044f8:	895b      	ldrh	r3, [r3, #10]
 80044fa:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d04f      	beq.n	80045a2 <dmp_read_fifo+0x2b2>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004502:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004506:	3348      	adds	r3, #72	@ 0x48
 8004508:	443b      	add	r3, r7
 800450a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800450e:	b21b      	sxth	r3, r3
 8004510:	021b      	lsls	r3, r3, #8
 8004512:	b21a      	sxth	r2, r3
 8004514:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004518:	3301      	adds	r3, #1
 800451a:	3348      	adds	r3, #72	@ 0x48
 800451c:	443b      	add	r3, r7
 800451e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004522:	b21b      	sxth	r3, r3
 8004524:	4313      	orrs	r3, r2
 8004526:	b21a      	sxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800452c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004530:	3302      	adds	r3, #2
 8004532:	3348      	adds	r3, #72	@ 0x48
 8004534:	443b      	add	r3, r7
 8004536:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800453a:	b21b      	sxth	r3, r3
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	b219      	sxth	r1, r3
 8004540:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004544:	3303      	adds	r3, #3
 8004546:	3348      	adds	r3, #72	@ 0x48
 8004548:	443b      	add	r3, r7
 800454a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800454e:	b21a      	sxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3302      	adds	r3, #2
 8004554:	430a      	orrs	r2, r1
 8004556:	b212      	sxth	r2, r2
 8004558:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800455a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800455e:	3304      	adds	r3, #4
 8004560:	3348      	adds	r3, #72	@ 0x48
 8004562:	443b      	add	r3, r7
 8004564:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004568:	b21b      	sxth	r3, r3
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	b219      	sxth	r1, r3
 800456e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004572:	3305      	adds	r3, #5
 8004574:	3348      	adds	r3, #72	@ 0x48
 8004576:	443b      	add	r3, r7
 8004578:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800457c:	b21a      	sxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3304      	adds	r3, #4
 8004582:	430a      	orrs	r2, r1
 8004584:	b212      	sxth	r2, r2
 8004586:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8004588:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800458c:	3306      	adds	r3, #6
 800458e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_GYRO;
 8004592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004598:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800459c:	b21a      	sxth	r2, r3
 800459e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045a0:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80045a2:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <dmp_read_fifo+0x2e0>)
 80045a4:	895b      	ldrh	r3, [r3, #10]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <dmp_read_fifo+0x2ce>
        decode_gesture(fifo_data + ii);
 80045ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045b2:	f107 0220 	add.w	r2, r7, #32
 80045b6:	4413      	add	r3, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff fe55 	bl	8004268 <decode_gesture>

    myget_ms(timestamp);
 80045be:	6838      	ldr	r0, [r7, #0]
 80045c0:	f7fe ff10 	bl	80033e4 <myget_ms>
    return 0;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3748      	adds	r7, #72	@ 0x48
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000284 	.word	0x20000284

080045d4 <run_self_test>:
#define DEFAULT_MPU_HZ (100)

#define q30 1073741824.0f

static int run_self_test(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	@ 0x28
 80045d8:	af00      	add	r7, sp, #0
    int result;
    long gyro[3], accel[3];

    result = mpu_run_self_test(gyro, accel);
 80045da:	f107 020c 	add.w	r2, r7, #12
 80045de:	f107 0318 	add.w	r3, r7, #24
 80045e2:	4611      	mov	r1, r2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fe fc6f 	bl	8002ec8 <mpu_run_self_test>
 80045ea:	6278      	str	r0, [r7, #36]	@ 0x24
    if (result == 0x3) {
 80045ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d150      	bne.n	8004694 <run_self_test+0xc0>
        /* Test passed. We can trust the gyro data here, so let's push it down
         * to the DMP.
         */
        float sens;
        unsigned short accel_sens;
        mpu_get_gyro_sens(&sens);
 80045f2:	f107 0308 	add.w	r3, r7, #8
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fd fb14 	bl	8001c24 <mpu_get_gyro_sens>
        gyro[0] = (long)(gyro[0] * sens);
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004606:	edd7 7a02 	vldr	s15, [r7, #8]
 800460a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004612:	ee17 3a90 	vmov	r3, s15
 8004616:	61bb      	str	r3, [r7, #24]
        gyro[1] = (long)(gyro[1] * sens);
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004622:	edd7 7a02 	vldr	s15, [r7, #8]
 8004626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800462e:	ee17 3a90 	vmov	r3, s15
 8004632:	61fb      	str	r3, [r7, #28]
        gyro[2] = (long)(gyro[2] * sens);
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800463e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800464a:	ee17 3a90 	vmov	r3, s15
 800464e:	623b      	str	r3, [r7, #32]
        dmp_set_gyro_bias(gyro);
 8004650:	f107 0318 	add.w	r3, r7, #24
 8004654:	4618      	mov	r0, r3
 8004656:	f7fe ffcb 	bl	80035f0 <dmp_set_gyro_bias>
        mpu_get_accel_sens(&accel_sens);
 800465a:	1dbb      	adds	r3, r7, #6
 800465c:	4618      	mov	r0, r3
 800465e:	f7fd fb19 	bl	8001c94 <mpu_get_accel_sens>
        accel[0] *= accel_sens;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	88fa      	ldrh	r2, [r7, #6]
 8004666:	fb02 f303 	mul.w	r3, r2, r3
 800466a:	60fb      	str	r3, [r7, #12]
        accel[1] *= accel_sens;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	88fa      	ldrh	r2, [r7, #6]
 8004670:	fb02 f303 	mul.w	r3, r2, r3
 8004674:	613b      	str	r3, [r7, #16]
        accel[2] *= accel_sens;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	88fa      	ldrh	r2, [r7, #6]
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	617b      	str	r3, [r7, #20]
        dmp_set_accel_bias(accel);
 8004680:	f107 030c 	add.w	r3, r7, #12
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff f8bd 	bl	8003804 <dmp_set_accel_bias>
		printf("setting bias succesfully ......\r\n");
 800468a:	4805      	ldr	r0, [pc, #20]	@ (80046a0 <run_self_test+0xcc>)
 800468c:	f007 fc6e 	bl	800bf6c <puts>
    }else
		{
			return -1;
		}
		return 0;
 8004690:	2300      	movs	r3, #0
 8004692:	e001      	b.n	8004698 <run_self_test+0xc4>
			return -1;
 8004694:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004698:	4618      	mov	r0, r3
 800469a:	3728      	adds	r7, #40	@ 0x28
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	0800eeb4 	.word	0x0800eeb4

080046a4 <inv_row_2_scale>:

static signed char gyro_orientation[9] = {-1, 0, 0,
                                           0,-1, 0,
                                           0, 0, 1};
static  unsigned short inv_row_2_scale(const signed char *row)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f993 3000 	ldrsb.w	r3, [r3]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	dd02      	ble.n	80046bc <inv_row_2_scale+0x18>
        b = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	81fb      	strh	r3, [r7, #14]
 80046ba:	e02d      	b.n	8004718 <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f993 3000 	ldrsb.w	r3, [r3]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	da02      	bge.n	80046cc <inv_row_2_scale+0x28>
        b = 4;
 80046c6:	2304      	movs	r3, #4
 80046c8:	81fb      	strh	r3, [r7, #14]
 80046ca:	e025      	b.n	8004718 <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3301      	adds	r3, #1
 80046d0:	f993 3000 	ldrsb.w	r3, [r3]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	dd02      	ble.n	80046de <inv_row_2_scale+0x3a>
        b = 1;
 80046d8:	2301      	movs	r3, #1
 80046da:	81fb      	strh	r3, [r7, #14]
 80046dc:	e01c      	b.n	8004718 <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3301      	adds	r3, #1
 80046e2:	f993 3000 	ldrsb.w	r3, [r3]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	da02      	bge.n	80046f0 <inv_row_2_scale+0x4c>
        b = 5;
 80046ea:	2305      	movs	r3, #5
 80046ec:	81fb      	strh	r3, [r7, #14]
 80046ee:	e013      	b.n	8004718 <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3302      	adds	r3, #2
 80046f4:	f993 3000 	ldrsb.w	r3, [r3]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	dd02      	ble.n	8004702 <inv_row_2_scale+0x5e>
        b = 2;
 80046fc:	2302      	movs	r3, #2
 80046fe:	81fb      	strh	r3, [r7, #14]
 8004700:	e00a      	b.n	8004718 <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3302      	adds	r3, #2
 8004706:	f993 3000 	ldrsb.w	r3, [r3]
 800470a:	2b00      	cmp	r3, #0
 800470c:	da02      	bge.n	8004714 <inv_row_2_scale+0x70>
        b = 6;
 800470e:	2306      	movs	r3, #6
 8004710:	81fb      	strh	r3, [r7, #14]
 8004712:	e001      	b.n	8004718 <inv_row_2_scale+0x74>
    else
        b = 7;      // error
 8004714:	2307      	movs	r3, #7
 8004716:	81fb      	strh	r3, [r7, #14]
    return b;
 8004718:	89fb      	ldrh	r3, [r7, #14]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <inv_orientation_matrix_to_scalar>:


static  unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
    unsigned short scalar;
    scalar = inv_row_2_scale(mtx);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff ffb8 	bl	80046a4 <inv_row_2_scale>
 8004734:	4603      	mov	r3, r0
 8004736:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3303      	adds	r3, #3
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ffb1 	bl	80046a4 <inv_row_2_scale>
 8004742:	4603      	mov	r3, r0
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	b21a      	sxth	r2, r3
 8004748:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800474c:	4313      	orrs	r3, r2
 800474e:	b21b      	sxth	r3, r3
 8004750:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3306      	adds	r3, #6
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff ffa4 	bl	80046a4 <inv_row_2_scale>
 800475c:	4603      	mov	r3, r0
 800475e:	019b      	lsls	r3, r3, #6
 8004760:	b21a      	sxth	r2, r3
 8004762:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004766:	4313      	orrs	r3, r2
 8004768:	b21b      	sxth	r3, r3
 800476a:	81fb      	strh	r3, [r7, #14]


    return scalar;
 800476c:	89fb      	ldrh	r3, [r7, #14]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <MPU6050_DMP_Init>:

int MPU6050_DMP_Init(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
	int result;
	//struct int_param_s int_param;
	result = mpu_init();
 800477e:	f7fc fcb7 	bl	80010f0 <mpu_init>
 8004782:	6078      	str	r0, [r7, #4]
	if(result != 0)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <MPU6050_DMP_Init+0x18>
	{
		 return -1;
 800478a:	f04f 33ff 	mov.w	r3, #4294967295
 800478e:	e05d      	b.n	800484c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 8004790:	2078      	movs	r0, #120	@ 0x78
 8004792:	f7fd fb21 	bl	8001dd8 <mpu_set_sensors>
 8004796:	6078      	str	r0, [r7, #4]
	if(result != 0)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <MPU6050_DMP_Init+0x2c>
	{
		 return -2;
 800479e:	f06f 0301 	mvn.w	r3, #1
 80047a2:	e053      	b.n	800484c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 80047a4:	2078      	movs	r0, #120	@ 0x78
 80047a6:	f7fd fac5 	bl	8001d34 <mpu_configure_fifo>
 80047aa:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <MPU6050_DMP_Init+0x40>
	{
		 return -3;
 80047b2:	f06f 0302 	mvn.w	r3, #2
 80047b6:	e049      	b.n	800484c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_set_sample_rate(DEFAULT_MPU_HZ);
 80047b8:	2064      	movs	r0, #100	@ 0x64
 80047ba:	f7fd f9c1 	bl	8001b40 <mpu_set_sample_rate>
 80047be:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <MPU6050_DMP_Init+0x54>
	{
		 return -4;
 80047c6:	f06f 0303 	mvn.w	r3, #3
 80047ca:	e03f      	b.n	800484c <MPU6050_DMP_Init+0xd4>
	}
	
	result = dmp_load_motion_driver_firmware();
 80047cc:	f7fe fe14 	bl	80033f8 <dmp_load_motion_driver_firmware>
 80047d0:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <MPU6050_DMP_Init+0x66>
	{
		 return -5;
 80047d8:	f06f 0304 	mvn.w	r3, #4
 80047dc:	e036      	b.n	800484c <MPU6050_DMP_Init+0xd4>
	}
	result = dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation));
 80047de:	481d      	ldr	r0, [pc, #116]	@ (8004854 <MPU6050_DMP_Init+0xdc>)
 80047e0:	f7ff ffa1 	bl	8004726 <inv_orientation_matrix_to_scalar>
 80047e4:	4603      	mov	r3, r0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe fe16 	bl	8003418 <dmp_set_orientation>
 80047ec:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <MPU6050_DMP_Init+0x82>
	{
		 return -6;
 80047f4:	f06f 0305 	mvn.w	r3, #5
 80047f8:	e028      	b.n	800484c <MPU6050_DMP_Init+0xd4>
	}
	result = dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 80047fa:	f240 1073 	movw	r0, #371	@ 0x173
 80047fe:	f7ff fb8d 	bl	8003f1c <dmp_enable_feature>
 8004802:	6078      	str	r0, [r7, #4]
	        DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
	        DMP_FEATURE_GYRO_CAL);
	if(result != 0)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <MPU6050_DMP_Init+0x98>
	{
		 return -7;
 800480a:	f06f 0306 	mvn.w	r3, #6
 800480e:	e01d      	b.n	800484c <MPU6050_DMP_Init+0xd4>
	}
	result = dmp_set_fifo_rate(DEFAULT_MPU_HZ);
 8004810:	2064      	movs	r0, #100	@ 0x64
 8004812:	f7ff f8f9 	bl	8003a08 <dmp_set_fifo_rate>
 8004816:	6078      	str	r0, [r7, #4]
	if(result != 0)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <MPU6050_DMP_Init+0xac>
	{
		 return -8;
 800481e:	f06f 0307 	mvn.w	r3, #7
 8004822:	e013      	b.n	800484c <MPU6050_DMP_Init+0xd4>
	}
	result = run_self_test();
 8004824:	f7ff fed6 	bl	80045d4 <run_self_test>
 8004828:	6078      	str	r0, [r7, #4]
	if(result != 0)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <MPU6050_DMP_Init+0xbe>
	{
		 return -9;
 8004830:	f06f 0308 	mvn.w	r3, #8
 8004834:	e00a      	b.n	800484c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_set_dmp_state(1);
 8004836:	2001      	movs	r0, #1
 8004838:	f7fe fd6e 	bl	8003318 <mpu_set_dmp_state>
 800483c:	6078      	str	r0, [r7, #4]
	if(result != 0)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <MPU6050_DMP_Init+0xd2>
	{
		 return -10;
 8004844:	f06f 0309 	mvn.w	r3, #9
 8004848:	e000      	b.n	800484c <MPU6050_DMP_Init+0xd4>
	}
	return 0;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	2000002c 	.word	0x2000002c

08004858 <MPU6050_DMP_Get_Data>:

int MPU6050_DMP_Get_Data(float *Pitch,float *Roll,float *Yaw)
{
 8004858:	b5b0      	push	{r4, r5, r7, lr}
 800485a:	b094      	sub	sp, #80	@ 0x50
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
	float q0 = 0.0f;
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	647b      	str	r3, [r7, #68]	@ 0x44
	float q1 = 0.0f;
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	643b      	str	r3, [r7, #64]	@ 0x40
	float q2 = 0.0f;
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float q3 = 0.0f;
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	63bb      	str	r3, [r7, #56]	@ 0x38
	short accel[3]; 
	long quat[4];
  unsigned long timestamp;
	short sensors;
	unsigned char more;
	if(dmp_read_fifo(gyro,accel,quat,&timestamp,&sensors,&more))
 800487c:	f107 0414 	add.w	r4, r7, #20
 8004880:	f107 0218 	add.w	r2, r7, #24
 8004884:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8004888:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800488c:	f107 0311 	add.w	r3, r7, #17
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	f107 0312 	add.w	r3, r7, #18
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	4623      	mov	r3, r4
 800489a:	f7ff fd29 	bl	80042f0 <dmp_read_fifo>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <MPU6050_DMP_Get_Data+0x52>
	{
		return -1;
 80048a4:	f04f 33ff 	mov.w	r3, #4294967295
 80048a8:	e0f6      	b.n	8004a98 <MPU6050_DMP_Get_Data+0x240>
	}
	if(sensors & INV_WXYZ_QUAT)
 80048aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 80ee 	beq.w	8004a96 <MPU6050_DMP_Get_Data+0x23e>
	{
		q0=quat[0] / q30;
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	ee07 3a90 	vmov	s15, r3
 80048c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048c4:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8004aa8 <MPU6050_DMP_Get_Data+0x250>
 80048c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048cc:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		q1=quat[1] / q30;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048da:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8004aa8 <MPU6050_DMP_Get_Data+0x250>
 80048de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048e2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q2=quat[2] / q30;
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	ee07 3a90 	vmov	s15, r3
 80048ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048f0:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8004aa8 <MPU6050_DMP_Get_Data+0x250>
 80048f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048f8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q3=quat[3] / q30;
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004906:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8004aa8 <MPU6050_DMP_Get_Data+0x250>
 800490a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800490e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		
		*Pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3; 	
 8004912:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004916:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800491a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800491e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004922:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004926:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800492a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800492e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800493a:	ee17 0a90 	vmov	r0, s15
 800493e:	f7fb fe03 	bl	8000548 <__aeabi_f2d>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	ec43 2b10 	vmov	d0, r2, r3
 800494a:	f009 fc5b 	bl	800e204 <asin>
 800494e:	ec51 0b10 	vmov	r0, r1, d0
 8004952:	a353      	add	r3, pc, #332	@ (adr r3, 8004aa0 <MPU6050_DMP_Get_Data+0x248>)
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f7fb fe4e 	bl	80005f8 <__aeabi_dmul>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4610      	mov	r0, r2
 8004962:	4619      	mov	r1, r3
 8004964:	f7fc f920 	bl	8000ba8 <__aeabi_d2f>
 8004968:	4602      	mov	r2, r0
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	601a      	str	r2, [r3, #0]
		*Roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; // roll
 800496e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004972:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004976:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800497a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800497e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004982:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004986:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800498a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800498e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004992:	ee17 0a90 	vmov	r0, s15
 8004996:	f7fb fdd7 	bl	8000548 <__aeabi_f2d>
 800499a:	4604      	mov	r4, r0
 800499c:	460d      	mov	r5, r1
 800499e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80049a2:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80049a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049aa:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80049ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049b2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80049b6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80049ba:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80049be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049ce:	ee17 0a90 	vmov	r0, s15
 80049d2:	f7fb fdb9 	bl	8000548 <__aeabi_f2d>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	ec43 2b11 	vmov	d1, r2, r3
 80049de:	ec45 4b10 	vmov	d0, r4, r5
 80049e2:	f009 fc43 	bl	800e26c <atan2>
 80049e6:	ec51 0b10 	vmov	r0, r1, d0
 80049ea:	a32d      	add	r3, pc, #180	@ (adr r3, 8004aa0 <MPU6050_DMP_Get_Data+0x248>)
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f7fb fe02 	bl	80005f8 <__aeabi_dmul>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4610      	mov	r0, r2
 80049fa:	4619      	mov	r1, r3
 80049fc:	f7fc f8d4 	bl	8000ba8 <__aeabi_d2f>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	601a      	str	r2, [r3, #0]
		*Yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;	//yaw
 8004a06:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004a0a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004a0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a12:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8004a16:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004a1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004a26:	ee17 0a90 	vmov	r0, s15
 8004a2a:	f7fb fd8d 	bl	8000548 <__aeabi_f2d>
 8004a2e:	4604      	mov	r4, r0
 8004a30:	460d      	mov	r5, r1
 8004a32:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004a36:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004a3a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004a3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a46:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004a4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a52:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004a56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a5e:	ee17 0a90 	vmov	r0, s15
 8004a62:	f7fb fd71 	bl	8000548 <__aeabi_f2d>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	ec43 2b11 	vmov	d1, r2, r3
 8004a6e:	ec45 4b10 	vmov	d0, r4, r5
 8004a72:	f009 fbfb 	bl	800e26c <atan2>
 8004a76:	ec51 0b10 	vmov	r0, r1, d0
 8004a7a:	a309      	add	r3, pc, #36	@ (adr r3, 8004aa0 <MPU6050_DMP_Get_Data+0x248>)
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	f7fb fdba 	bl	80005f8 <__aeabi_dmul>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	f7fc f88c 	bl	8000ba8 <__aeabi_d2f>
 8004a90:	4602      	mov	r2, r0
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	601a      	str	r2, [r3, #0]
	}
	return 0;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3748      	adds	r7, #72	@ 0x48
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8004aa0:	66666666 	.word	0x66666666
 8004aa4:	404ca666 	.word	0x404ca666
 8004aa8:	4e800000 	.word	0x4e800000

08004aac <Servo_Init>:
// 定时器时钟频率（假设APB1=84MHz，TIMx使用84MHz）
#define TIMER_CLK_FREQ 84000000  // 单位：Hz

void Servo_Init(Servo* servo, TIM_HandleTypeDef* timer, uint32_t channel,
                GPIO_TypeDef* gpio_port, uint16_t gpio_pin) 
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
    servo->timer = timer;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	601a      	str	r2, [r3, #0]
    servo->channel = channel;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	605a      	str	r2, [r3, #4]
    servo->gpio_port = gpio_port;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	609a      	str	r2, [r3, #8]
    servo->gpio_pin = gpio_pin;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8c3a      	ldrh	r2, [r7, #32]
 8004ad0:	819a      	strh	r2, [r3, #12]
    servo->pulse_width = SERVO_MIN_PULSE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004ad8:	611a      	str	r2, [r3, #16]

    // 配置PWM周期
    uint32_t period_cycles = (TIMER_CLK_FREQ / 1000000) * SERVO_PWM_PERIOD / 
                            (timer->Init.Prescaler + 1);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	3301      	adds	r3, #1
    uint32_t period_cycles = (TIMER_CLK_FREQ / 1000000) * SERVO_PWM_PERIOD / 
 8004ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8004b18 <Servo_Init+0x6c>)
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_AUTORELOAD(timer, period_cycles - 1);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	3a01      	subs	r2, #1
 8004af0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	1e5a      	subs	r2, r3, #1
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	60da      	str	r2, [r3, #12]

    // 启动PWM
    HAL_TIM_PWM_Start(timer, channel);
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	68b8      	ldr	r0, [r7, #8]
 8004afe:	f004 fcef 	bl	80094e0 <HAL_TIM_PWM_Start>
    Servo_SetPulse(servo, servo->pulse_width);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	4619      	mov	r1, r3
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f807 	bl	8004b1c <Servo_SetPulse>
}
 8004b0e:	bf00      	nop
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	0019a280 	.word	0x0019a280

08004b1c <Servo_SetPulse>:
                    (uint32_t)((SERVO_MAX_PULSE - SERVO_MIN_PULSE) * angle / 180.0f);
    
    Servo_SetPulse(servo, pulse);
}

void Servo_SetPulse(Servo* servo, uint32_t pulse_us) {
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
    // 计算比较寄存器值
    uint32_t pulse_cycles = (TIMER_CLK_FREQ / 1000000) * pulse_us / 
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2254      	movs	r2, #84	@ 0x54
 8004b2a:	fb03 f202 	mul.w	r2, r3, r2
                           (servo->timer->Init.Prescaler + 1);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	3301      	adds	r3, #1
    uint32_t pulse_cycles = (TIMER_CLK_FREQ / 1000000) * pulse_us / 
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	60fb      	str	r3, [r7, #12]
    
    // 设置比较值
    switch(servo->channel) {
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <Servo_SetPulse+0x2e>
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d006      	beq.n	8004b56 <Servo_SetPulse+0x3a>
 8004b48:	e00b      	b.n	8004b62 <Servo_SetPulse+0x46>
        case TIM_CHANNEL_1:
            __HAL_TIM_SET_COMPARE(servo->timer, TIM_CHANNEL_1, pulse_cycles);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8004b54:	e005      	b.n	8004b62 <Servo_SetPulse+0x46>
        case TIM_CHANNEL_2:
            __HAL_TIM_SET_COMPARE(servo->timer, TIM_CHANNEL_2, pulse_cycles);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8004b60:	bf00      	nop
        // 添加其他通道...
    }
    servo->pulse_width = pulse_us;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	611a      	str	r2, [r3, #16]
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08e      	sub	sp, #56	@ 0x38
 8004b78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	605a      	str	r2, [r3, #4]
 8004b84:	609a      	str	r2, [r3, #8]
 8004b86:	60da      	str	r2, [r3, #12]
 8004b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	623b      	str	r3, [r7, #32]
 8004b8e:	4b99      	ldr	r3, [pc, #612]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b92:	4a98      	ldr	r2, [pc, #608]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004b94:	f043 0310 	orr.w	r3, r3, #16
 8004b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b9a:	4b96      	ldr	r3, [pc, #600]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	623b      	str	r3, [r7, #32]
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
 8004baa:	4b92      	ldr	r3, [pc, #584]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bae:	4a91      	ldr	r2, [pc, #580]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004bb0:	f043 0304 	orr.w	r3, r3, #4
 8004bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bb6:	4b8f      	ldr	r3, [pc, #572]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	4b8b      	ldr	r3, [pc, #556]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	4a8a      	ldr	r2, [pc, #552]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004bcc:	f043 0320 	orr.w	r3, r3, #32
 8004bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bd2:	4b88      	ldr	r3, [pc, #544]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	61bb      	str	r3, [r7, #24]
 8004bdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	4b84      	ldr	r3, [pc, #528]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be6:	4a83      	ldr	r2, [pc, #524]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bee:	4b81      	ldr	r3, [pc, #516]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	4b7d      	ldr	r3, [pc, #500]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c02:	4a7c      	ldr	r2, [pc, #496]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c0a:	4b7a      	ldr	r3, [pc, #488]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	4b76      	ldr	r3, [pc, #472]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1e:	4a75      	ldr	r2, [pc, #468]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004c20:	f043 0302 	orr.w	r3, r3, #2
 8004c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c26:	4b73      	ldr	r3, [pc, #460]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	4b6f      	ldr	r3, [pc, #444]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3a:	4a6e      	ldr	r2, [pc, #440]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c42:	4b6c      	ldr	r3, [pc, #432]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c4e:	2300      	movs	r3, #0
 8004c50:	607b      	str	r3, [r7, #4]
 8004c52:	4b68      	ldr	r3, [pc, #416]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	4a67      	ldr	r2, [pc, #412]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004c58:	f043 0308 	orr.w	r3, r3, #8
 8004c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c5e:	4b65      	ldr	r3, [pc, #404]	@ (8004df4 <MX_GPIO_Init+0x280>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	607b      	str	r3, [r7, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M4_IN1_Pin|M4_IN2_Pin|M3_IN1_Pin, GPIO_PIN_RESET);
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	212a      	movs	r1, #42	@ 0x2a
 8004c6e:	4862      	ldr	r0, [pc, #392]	@ (8004df8 <MX_GPIO_Init+0x284>)
 8004c70:	f002 fef8 	bl	8007a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_IN2_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8004c74:	2200      	movs	r2, #0
 8004c76:	f24f 0102 	movw	r1, #61442	@ 0xf002
 8004c7a:	4860      	ldr	r0, [pc, #384]	@ (8004dfc <MX_GPIO_Init+0x288>)
 8004c7c:	f002 fef2 	bl	8007a64 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, M1_IN1_Pin|GPIO_PIN_1|M2_IN1_Pin, GPIO_PIN_RESET);
 8004c80:	2200      	movs	r2, #0
 8004c82:	210b      	movs	r1, #11
 8004c84:	485e      	ldr	r0, [pc, #376]	@ (8004e00 <MX_GPIO_Init+0x28c>)
 8004c86:	f002 feed 	bl	8007a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M1_IN2_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f44f 51ac 	mov.w	r1, #5504	@ 0x1580
 8004c90:	485c      	ldr	r0, [pc, #368]	@ (8004e04 <MX_GPIO_Init+0x290>)
 8004c92:	f002 fee7 	bl	8007a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_RESET);
 8004c96:	2200      	movs	r2, #0
 8004c98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c9c:	485a      	ldr	r0, [pc, #360]	@ (8004e08 <MX_GPIO_Init+0x294>)
 8004c9e:	f002 fee1 	bl	8007a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE6
                           PE13 PE14 PE15 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8004ca2:	f24e 035f 	movw	r3, #57439	@ 0xe05f
 8004ca6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4853      	ldr	r0, [pc, #332]	@ (8004e04 <MX_GPIO_Init+0x290>)
 8004cb8:	f002 fd38 	bl	800772c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC2 PC4
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8004cbc:	f242 1315 	movw	r3, #8469	@ 0x2115
 8004cc0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4849      	ldr	r0, [pc, #292]	@ (8004df8 <MX_GPIO_Init+0x284>)
 8004cd2:	f002 fd2b 	bl	800772c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF7 PF10
                           PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004cd6:	f64f 43bf 	movw	r3, #64703	@ 0xfcbf
 8004cda:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4848      	ldr	r0, [pc, #288]	@ (8004e0c <MX_GPIO_Init+0x298>)
 8004cec:	f002 fd1e 	bl	800772c <HAL_GPIO_Init>

  /*Configure GPIO pins : M4_IN1_Pin M4_IN2_Pin M3_IN1_Pin */
  GPIO_InitStruct.Pin = M4_IN1_Pin|M4_IN2_Pin|M3_IN1_Pin;
 8004cf0:	232a      	movs	r3, #42	@ 0x2a
 8004cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d04:	4619      	mov	r1, r3
 8004d06:	483c      	ldr	r0, [pc, #240]	@ (8004df8 <MX_GPIO_Init+0x284>)
 8004d08:	f002 fd10 	bl	800772c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
 8004d0c:	f649 0330 	movw	r3, #38960	@ 0x9830
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d12:	2303      	movs	r3, #3
 8004d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d1e:	4619      	mov	r1, r3
 8004d20:	483b      	ldr	r0, [pc, #236]	@ (8004e10 <MX_GPIO_Init+0x29c>)
 8004d22:	f002 fd03 	bl	800772c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB3 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8004d26:	f240 333d 	movw	r3, #829	@ 0x33d
 8004d2a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4830      	ldr	r0, [pc, #192]	@ (8004dfc <MX_GPIO_Init+0x288>)
 8004d3c:	f002 fcf6 	bl	800772c <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_IN2_Pin PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = M3_IN2_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8004d40:	f24f 0302 	movw	r3, #61442	@ 0xf002
 8004d44:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d46:	2301      	movs	r3, #1
 8004d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d56:	4619      	mov	r1, r3
 8004d58:	4828      	ldr	r0, [pc, #160]	@ (8004dfc <MX_GPIO_Init+0x288>)
 8004d5a:	f002 fce7 	bl	800772c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin PG1 M2_IN1_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|GPIO_PIN_1|M2_IN1_Pin;
 8004d5e:	230b      	movs	r3, #11
 8004d60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d62:	2301      	movs	r3, #1
 8004d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d72:	4619      	mov	r1, r3
 8004d74:	4822      	ldr	r0, [pc, #136]	@ (8004e00 <MX_GPIO_Init+0x28c>)
 8004d76:	f002 fcd9 	bl	800772c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN2_Pin PE8 PE10 PE12 */
  GPIO_InitStruct.Pin = M1_IN2_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 8004d7a:	f44f 53ac 	mov.w	r3, #5504	@ 0x1580
 8004d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d80:	2301      	movs	r3, #1
 8004d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d84:	2300      	movs	r3, #0
 8004d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d90:	4619      	mov	r1, r3
 8004d92:	481c      	ldr	r0, [pc, #112]	@ (8004e04 <MX_GPIO_Init+0x290>)
 8004d94:	f002 fcca 	bl	800772c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD14 PD0 PD1 PD3
                           PD4 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004d98:	f644 73db 	movw	r3, #20443	@ 0x4fdb
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004daa:	4619      	mov	r1, r3
 8004dac:	4816      	ldr	r0, [pc, #88]	@ (8004e08 <MX_GPIO_Init+0x294>)
 8004dae:	f002 fcbd 	bl	800772c <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IN2_Pin */
  GPIO_InitStruct.Pin = M2_IN2_Pin;
 8004db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004db6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004db8:	2301      	movs	r3, #1
 8004dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(M2_IN2_GPIO_Port, &GPIO_InitStruct);
 8004dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dc8:	4619      	mov	r1, r3
 8004dca:	480f      	ldr	r0, [pc, #60]	@ (8004e08 <MX_GPIO_Init+0x294>)
 8004dcc:	f002 fcae 	bl	800772c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG4 PG5 PG6
                           PG7 PG8 PG9 PG10
                           PG11 PG12 PG13 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8004dd0:	f64b 73f4 	movw	r3, #49140	@ 0xbff4
 8004dd4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004de2:	4619      	mov	r1, r3
 8004de4:	4806      	ldr	r0, [pc, #24]	@ (8004e00 <MX_GPIO_Init+0x28c>)
 8004de6:	f002 fca1 	bl	800772c <HAL_GPIO_Init>

}
 8004dea:	bf00      	nop
 8004dec:	3738      	adds	r7, #56	@ 0x38
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40023800 	.word	0x40023800
 8004df8:	40020800 	.word	0x40020800
 8004dfc:	40020400 	.word	0x40020400
 8004e00:	40021800 	.word	0x40021800
 8004e04:	40021000 	.word	0x40021000
 8004e08:	40020c00 	.word	0x40020c00
 8004e0c:	40021400 	.word	0x40021400
 8004e10:	40020000 	.word	0x40020000

08004e14 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004e18:	4b12      	ldr	r3, [pc, #72]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e1a:	4a13      	ldr	r2, [pc, #76]	@ (8004e68 <MX_I2C1_Init+0x54>)
 8004e1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004e1e:	4b11      	ldr	r3, [pc, #68]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e20:	4a12      	ldr	r2, [pc, #72]	@ (8004e6c <MX_I2C1_Init+0x58>)
 8004e22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004e24:	4b0f      	ldr	r3, [pc, #60]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e30:	4b0c      	ldr	r3, [pc, #48]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e38:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004e3e:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e44:	4b07      	ldr	r3, [pc, #28]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e4a:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004e50:	4804      	ldr	r0, [pc, #16]	@ (8004e64 <MX_I2C1_Init+0x50>)
 8004e52:	f002 fe21 	bl	8007a98 <HAL_I2C_Init>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004e5c:	f000 fac6 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004e60:	bf00      	nop
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000294 	.word	0x20000294
 8004e68:	40005400 	.word	0x40005400
 8004e6c:	000186a0 	.word	0x000186a0

08004e70 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004e74:	4b12      	ldr	r3, [pc, #72]	@ (8004ec0 <MX_I2C3_Init+0x50>)
 8004e76:	4a13      	ldr	r2, [pc, #76]	@ (8004ec4 <MX_I2C3_Init+0x54>)
 8004e78:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8004e7a:	4b11      	ldr	r3, [pc, #68]	@ (8004ec0 <MX_I2C3_Init+0x50>)
 8004e7c:	4a12      	ldr	r2, [pc, #72]	@ (8004ec8 <MX_I2C3_Init+0x58>)
 8004e7e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004e80:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec0 <MX_I2C3_Init+0x50>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004e86:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec0 <MX_I2C3_Init+0x50>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec0 <MX_I2C3_Init+0x50>)
 8004e8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e92:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e94:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec0 <MX_I2C3_Init+0x50>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004e9a:	4b09      	ldr	r3, [pc, #36]	@ (8004ec0 <MX_I2C3_Init+0x50>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ea0:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <MX_I2C3_Init+0x50>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ea6:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <MX_I2C3_Init+0x50>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004eac:	4804      	ldr	r0, [pc, #16]	@ (8004ec0 <MX_I2C3_Init+0x50>)
 8004eae:	f002 fdf3 	bl	8007a98 <HAL_I2C_Init>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004eb8:	f000 fa98 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004ebc:	bf00      	nop
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	200002e8 	.word	0x200002e8
 8004ec4:	40005c00 	.word	0x40005c00
 8004ec8:	000186a0 	.word	0x000186a0

08004ecc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08c      	sub	sp, #48	@ 0x30
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ed4:	f107 031c 	add.w	r3, r7, #28
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	605a      	str	r2, [r3, #4]
 8004ede:	609a      	str	r2, [r3, #8]
 8004ee0:	60da      	str	r2, [r3, #12]
 8004ee2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a42      	ldr	r2, [pc, #264]	@ (8004ff4 <HAL_I2C_MspInit+0x128>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d12c      	bne.n	8004f48 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	4b41      	ldr	r3, [pc, #260]	@ (8004ff8 <HAL_I2C_MspInit+0x12c>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef6:	4a40      	ldr	r2, [pc, #256]	@ (8004ff8 <HAL_I2C_MspInit+0x12c>)
 8004ef8:	f043 0302 	orr.w	r3, r3, #2
 8004efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004efe:	4b3e      	ldr	r3, [pc, #248]	@ (8004ff8 <HAL_I2C_MspInit+0x12c>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f0a:	23c0      	movs	r3, #192	@ 0xc0
 8004f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f0e:	2312      	movs	r3, #18
 8004f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f16:	2303      	movs	r3, #3
 8004f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f1a:	2304      	movs	r3, #4
 8004f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f1e:	f107 031c 	add.w	r3, r7, #28
 8004f22:	4619      	mov	r1, r3
 8004f24:	4835      	ldr	r0, [pc, #212]	@ (8004ffc <HAL_I2C_MspInit+0x130>)
 8004f26:	f002 fc01 	bl	800772c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	4b32      	ldr	r3, [pc, #200]	@ (8004ff8 <HAL_I2C_MspInit+0x12c>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	4a31      	ldr	r2, [pc, #196]	@ (8004ff8 <HAL_I2C_MspInit+0x12c>)
 8004f34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ff8 <HAL_I2C_MspInit+0x12c>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8004f46:	e050      	b.n	8004fea <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8005000 <HAL_I2C_MspInit+0x134>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d14b      	bne.n	8004fea <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	4b28      	ldr	r3, [pc, #160]	@ (8004ff8 <HAL_I2C_MspInit+0x12c>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	4a27      	ldr	r2, [pc, #156]	@ (8004ff8 <HAL_I2C_MspInit+0x12c>)
 8004f5c:	f043 0304 	orr.w	r3, r3, #4
 8004f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f62:	4b25      	ldr	r3, [pc, #148]	@ (8004ff8 <HAL_I2C_MspInit+0x12c>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	4b21      	ldr	r3, [pc, #132]	@ (8004ff8 <HAL_I2C_MspInit+0x12c>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f76:	4a20      	ldr	r2, [pc, #128]	@ (8004ff8 <HAL_I2C_MspInit+0x12c>)
 8004f78:	f043 0301 	orr.w	r3, r3, #1
 8004f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff8 <HAL_I2C_MspInit+0x12c>)
 8004f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004f8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f90:	2312      	movs	r3, #18
 8004f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f94:	2300      	movs	r3, #0
 8004f96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fa0:	f107 031c 	add.w	r3, r7, #28
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4817      	ldr	r0, [pc, #92]	@ (8005004 <HAL_I2C_MspInit+0x138>)
 8004fa8:	f002 fbc0 	bl	800772c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fb2:	2312      	movs	r3, #18
 8004fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004fbe:	2304      	movs	r3, #4
 8004fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc2:	f107 031c 	add.w	r3, r7, #28
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	480f      	ldr	r0, [pc, #60]	@ (8005008 <HAL_I2C_MspInit+0x13c>)
 8004fca:	f002 fbaf 	bl	800772c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	4b09      	ldr	r3, [pc, #36]	@ (8004ff8 <HAL_I2C_MspInit+0x12c>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	4a08      	ldr	r2, [pc, #32]	@ (8004ff8 <HAL_I2C_MspInit+0x12c>)
 8004fd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fde:	4b06      	ldr	r3, [pc, #24]	@ (8004ff8 <HAL_I2C_MspInit+0x12c>)
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fe6:	60bb      	str	r3, [r7, #8]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
}
 8004fea:	bf00      	nop
 8004fec:	3730      	adds	r7, #48	@ 0x30
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40005400 	.word	0x40005400
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	40020400 	.word	0x40020400
 8005000:	40005c00 	.word	0x40005c00
 8005004:	40020800 	.word	0x40020800
 8005008:	40020000 	.word	0x40020000

0800500c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, message , strlen(message), 100);
 8005014:	4809      	ldr	r0, [pc, #36]	@ (800503c <HAL_UART_RxCpltCallback+0x30>)
 8005016:	f7fb f92b 	bl	8000270 <strlen>
 800501a:	4603      	mov	r3, r0
 800501c:	b29a      	uxth	r2, r3
 800501e:	2364      	movs	r3, #100	@ 0x64
 8005020:	4906      	ldr	r1, [pc, #24]	@ (800503c <HAL_UART_RxCpltCallback+0x30>)
 8005022:	4807      	ldr	r0, [pc, #28]	@ (8005040 <HAL_UART_RxCpltCallback+0x34>)
 8005024:	f005 fa1c 	bl	800a460 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart1, receivedata, 2);
 8005028:	2202      	movs	r2, #2
 800502a:	4906      	ldr	r1, [pc, #24]	@ (8005044 <HAL_UART_RxCpltCallback+0x38>)
 800502c:	4804      	ldr	r0, [pc, #16]	@ (8005040 <HAL_UART_RxCpltCallback+0x34>)
 800502e:	f005 faa2 	bl	800a576 <HAL_UART_Receive_IT>
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000038 	.word	0x20000038
 8005040:	20000788 	.word	0x20000788
 8005044:	200003d0 	.word	0x200003d0

08005048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005048:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800504c:	b0b0      	sub	sp, #192	@ 0xc0
 800504e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005050:	f002 f932 	bl	80072b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005054:	f000 f960 	bl	8005318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005058:	f7ff fd8c 	bl	8004b74 <MX_GPIO_Init>
  MX_I2C1_Init();
 800505c:	f7ff feda 	bl	8004e14 <MX_I2C1_Init>
  MX_I2C3_Init();
 8005060:	f7ff ff06 	bl	8004e70 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8005064:	f001 fe98 	bl	8006d98 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8005068:	f000 ffca 	bl	8006000 <MX_TIM1_Init>
  MX_TIM2_Init();
 800506c:	f001 f820 	bl	80060b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005070:	f001 f872 	bl	8006158 <MX_TIM3_Init>
  MX_TIM4_Init();
 8005074:	f001 f8c4 	bl	8006200 <MX_TIM4_Init>
  MX_TIM5_Init();
 8005078:	f001 f916 	bl	80062a8 <MX_TIM5_Init>
  MX_TIM8_Init();
 800507c:	f001 f98a 	bl	8006394 <MX_TIM8_Init>
  MX_TIM9_Init();
 8005080:	f001 fa28 	bl	80064d4 <MX_TIM9_Init>
  MX_TIM10_Init();
 8005084:	f001 fa88 	bl	8006598 <MX_TIM10_Init>
  MX_UART4_Init();
 8005088:	f001 fe32 	bl	8006cf0 <MX_UART4_Init>
  MX_UART5_Init();
 800508c:	f001 fe5a 	bl	8006d44 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8005090:	f001 feac 	bl	8006dec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005094:	f001 fed4 	bl	8006e40 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8005098:	f001 fefc 	bl	8006e94 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 800509c:	f001 faca 	bl	8006634 <MX_TIM13_Init>
  MX_TIM14_Init();
 80050a0:	f001 fb16 	bl	80066d0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, receivedata, 2);
 80050a4:	2202      	movs	r2, #2
 80050a6:	497c      	ldr	r1, [pc, #496]	@ (8005298 <main+0x250>)
 80050a8:	487c      	ldr	r0, [pc, #496]	@ (800529c <main+0x254>)
 80050aa:	f005 fa64 	bl	800a576 <HAL_UART_Receive_IT>

  // 初始化超声波传感器
  Ultrasonic_Init(&ultrasonic_sensor);
 80050ae:	487c      	ldr	r0, [pc, #496]	@ (80052a0 <main+0x258>)
 80050b0:	f001 fdd4 	bl	8006c5c <Ultrasonic_Init>

  // 初始化MPU6050 DMP
  int mpu_result;
  int retry_count = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  do {
      mpu_result = MPU6050_DMP_Init();
 80050ba:	f7ff fb5d 	bl	8004778 <MPU6050_DMP_Init>
 80050be:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
      if (mpu_result != 0) {
 80050c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01c      	beq.n	8005104 <main+0xbc>
          char error_msg[100];
          sprintf(error_msg, "MPU6050 DMP 初始化失败，错误码: %d，重试次数: %d\r\n", mpu_result, retry_count);
 80050ca:	1d38      	adds	r0, r7, #4
 80050cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050d0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80050d4:	4973      	ldr	r1, [pc, #460]	@ (80052a4 <main+0x25c>)
 80050d6:	f006 ff51 	bl	800bf7c <siprintf>
          HAL_UART_Transmit(&huart1, (uint8_t*)error_msg, strlen(error_msg), 100);
 80050da:	1d3b      	adds	r3, r7, #4
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fb f8c7 	bl	8000270 <strlen>
 80050e2:	4603      	mov	r3, r0
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	1d39      	adds	r1, r7, #4
 80050e8:	2364      	movs	r3, #100	@ 0x64
 80050ea:	486c      	ldr	r0, [pc, #432]	@ (800529c <main+0x254>)
 80050ec:	f005 f9b8 	bl	800a460 <HAL_UART_Transmit>
          
          // 等待一段时间后重试
          HAL_Delay(500); // 等待500ms
 80050f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80050f4:	f002 f952 	bl	800739c <HAL_Delay>
          retry_count++;
 80050f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050fc:	3301      	adds	r3, #1
 80050fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005102:	e012      	b.n	800512a <main+0xe2>
      } else {
          char success_msg[100];
          sprintf(success_msg, "MPU6050 初始化成功，共尝试 %d 次\r\n", retry_count + 1);
 8005104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	1d3b      	adds	r3, r7, #4
 800510c:	4966      	ldr	r1, [pc, #408]	@ (80052a8 <main+0x260>)
 800510e:	4618      	mov	r0, r3
 8005110:	f006 ff34 	bl	800bf7c <siprintf>
          HAL_UART_Transmit(&huart1, (uint8_t*)success_msg, strlen(success_msg), 100);
 8005114:	1d3b      	adds	r3, r7, #4
 8005116:	4618      	mov	r0, r3
 8005118:	f7fb f8aa 	bl	8000270 <strlen>
 800511c:	4603      	mov	r3, r0
 800511e:	b29a      	uxth	r2, r3
 8005120:	1d39      	adds	r1, r7, #4
 8005122:	2364      	movs	r3, #100	@ 0x64
 8005124:	485d      	ldr	r0, [pc, #372]	@ (800529c <main+0x254>)
 8005126:	f005 f99b 	bl	800a460 <HAL_UART_Transmit>
      }
  } while (mpu_result != 0);
 800512a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1c3      	bne.n	80050ba <main+0x72>

  Motor_Init(MOTOR_1,
 8005132:	4b5e      	ldr	r3, [pc, #376]	@ (80052ac <main+0x264>)
 8005134:	9303      	str	r3, [sp, #12]
 8005136:	2380      	movs	r3, #128	@ 0x80
 8005138:	9302      	str	r3, [sp, #8]
 800513a:	4b5d      	ldr	r3, [pc, #372]	@ (80052b0 <main+0x268>)
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	2301      	movs	r3, #1
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	4b5c      	ldr	r3, [pc, #368]	@ (80052b4 <main+0x26c>)
 8005144:	2208      	movs	r2, #8
 8005146:	495c      	ldr	r1, [pc, #368]	@ (80052b8 <main+0x270>)
 8005148:	2000      	movs	r0, #0
 800514a:	f000 f955 	bl	80053f8 <Motor_Init>
            &htim5, TIM_CHANNEL_3,
            M1_IN1_GPIO_Port, M1_IN1_Pin,
            M1_IN2_GPIO_Port, M1_IN2_Pin,
            &htim1);

  Motor_Init(MOTOR_2,
 800514e:	4b5b      	ldr	r3, [pc, #364]	@ (80052bc <main+0x274>)
 8005150:	9303      	str	r3, [sp, #12]
 8005152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005156:	9302      	str	r3, [sp, #8]
 8005158:	4b59      	ldr	r3, [pc, #356]	@ (80052c0 <main+0x278>)
 800515a:	9301      	str	r3, [sp, #4]
 800515c:	2308      	movs	r3, #8
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	4b54      	ldr	r3, [pc, #336]	@ (80052b4 <main+0x26c>)
 8005162:	2200      	movs	r2, #0
 8005164:	4957      	ldr	r1, [pc, #348]	@ (80052c4 <main+0x27c>)
 8005166:	2001      	movs	r0, #1
 8005168:	f000 f946 	bl	80053f8 <Motor_Init>
            &htim8, TIM_CHANNEL_1,
            M2_IN1_GPIO_Port, M2_IN1_Pin,
            M2_IN2_GPIO_Port, M2_IN2_Pin,
            &htim4);

  Motor_Init(MOTOR_3,
 800516c:	4b56      	ldr	r3, [pc, #344]	@ (80052c8 <main+0x280>)
 800516e:	9303      	str	r3, [sp, #12]
 8005170:	2302      	movs	r3, #2
 8005172:	9302      	str	r3, [sp, #8]
 8005174:	4b55      	ldr	r3, [pc, #340]	@ (80052cc <main+0x284>)
 8005176:	9301      	str	r3, [sp, #4]
 8005178:	2320      	movs	r3, #32
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	4b54      	ldr	r3, [pc, #336]	@ (80052d0 <main+0x288>)
 800517e:	2200      	movs	r2, #0
 8005180:	4954      	ldr	r1, [pc, #336]	@ (80052d4 <main+0x28c>)
 8005182:	2002      	movs	r0, #2
 8005184:	f000 f938 	bl	80053f8 <Motor_Init>
            &htim9, TIM_CHANNEL_1,
            M3_IN1_GPIO_Port, M3_IN1_Pin,
            M3_IN2_GPIO_Port, M3_IN2_Pin,
            &htim3);

  Motor_Init(MOTOR_4,
 8005188:	4b53      	ldr	r3, [pc, #332]	@ (80052d8 <main+0x290>)
 800518a:	9303      	str	r3, [sp, #12]
 800518c:	2308      	movs	r3, #8
 800518e:	9302      	str	r3, [sp, #8]
 8005190:	4b4f      	ldr	r3, [pc, #316]	@ (80052d0 <main+0x288>)
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	2302      	movs	r3, #2
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	4b4d      	ldr	r3, [pc, #308]	@ (80052d0 <main+0x288>)
 800519a:	2200      	movs	r2, #0
 800519c:	494f      	ldr	r1, [pc, #316]	@ (80052dc <main+0x294>)
 800519e:	2003      	movs	r0, #3
 80051a0:	f000 f92a 	bl	80053f8 <Motor_Init>
            &htim10, TIM_CHANNEL_1,
            M4_IN1_GPIO_Port, M4_IN1_Pin,
            M4_IN2_GPIO_Port, M4_IN2_Pin,
            &htim2);

  Servo_Init(&servo1, &htim13, TIM_CHANNEL_1, GPIOF, GPIO_PIN_8);
 80051a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	4b4d      	ldr	r3, [pc, #308]	@ (80052e0 <main+0x298>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	494d      	ldr	r1, [pc, #308]	@ (80052e4 <main+0x29c>)
 80051b0:	484d      	ldr	r0, [pc, #308]	@ (80052e8 <main+0x2a0>)
 80051b2:	f7ff fc7b 	bl	8004aac <Servo_Init>
  Servo_Init(&servo2, &htim14, TIM_CHANNEL_1, GPIOF, GPIO_PIN_9);
 80051b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	4b48      	ldr	r3, [pc, #288]	@ (80052e0 <main+0x298>)
 80051be:	2200      	movs	r2, #0
 80051c0:	494a      	ldr	r1, [pc, #296]	@ (80052ec <main+0x2a4>)
 80051c2:	484b      	ldr	r0, [pc, #300]	@ (80052f0 <main+0x2a8>)
 80051c4:	f7ff fc72 	bl	8004aac <Servo_Init>

  prev_time = HAL_GetTick();
 80051c8:	f002 f8dc 	bl	8007384 <HAL_GetTick>
 80051cc:	4603      	mov	r3, r0
 80051ce:	4a49      	ldr	r2, [pc, #292]	@ (80052f4 <main+0x2ac>)
 80051d0:	6013      	str	r3, [r2, #0]

  /*------------------------------------MPU6050 DMP执行部分-------------------------------------*/
  if (MPU6050_DMP_Get_Data(&pitch, &roll, &yaw) == 0) {
 80051d2:	4a49      	ldr	r2, [pc, #292]	@ (80052f8 <main+0x2b0>)
 80051d4:	4949      	ldr	r1, [pc, #292]	@ (80052fc <main+0x2b4>)
 80051d6:	484a      	ldr	r0, [pc, #296]	@ (8005300 <main+0x2b8>)
 80051d8:	f7ff fb3e 	bl	8004858 <MPU6050_DMP_Get_Data>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d129      	bne.n	8005236 <main+0x1ee>
      char mpu_buf[64];
      sprintf(mpu_buf, "Pitch: %.2f, Roll: %.2f, Yaw: %.2f\r\n", pitch, roll, yaw);
 80051e2:	4b47      	ldr	r3, [pc, #284]	@ (8005300 <main+0x2b8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fb f9ae 	bl	8000548 <__aeabi_f2d>
 80051ec:	4680      	mov	r8, r0
 80051ee:	4689      	mov	r9, r1
 80051f0:	4b42      	ldr	r3, [pc, #264]	@ (80052fc <main+0x2b4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fb f9a7 	bl	8000548 <__aeabi_f2d>
 80051fa:	4604      	mov	r4, r0
 80051fc:	460d      	mov	r5, r1
 80051fe:	4b3e      	ldr	r3, [pc, #248]	@ (80052f8 <main+0x2b0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f7fb f9a0 	bl	8000548 <__aeabi_f2d>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	1d38      	adds	r0, r7, #4
 800520e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005212:	e9cd 4500 	strd	r4, r5, [sp]
 8005216:	4642      	mov	r2, r8
 8005218:	464b      	mov	r3, r9
 800521a:	493a      	ldr	r1, [pc, #232]	@ (8005304 <main+0x2bc>)
 800521c:	f006 feae 	bl	800bf7c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)mpu_buf, strlen(mpu_buf), 100);
 8005220:	1d3b      	adds	r3, r7, #4
 8005222:	4618      	mov	r0, r3
 8005224:	f7fb f824 	bl	8000270 <strlen>
 8005228:	4603      	mov	r3, r0
 800522a:	b29a      	uxth	r2, r3
 800522c:	1d39      	adds	r1, r7, #4
 800522e:	2364      	movs	r3, #100	@ 0x64
 8005230:	481a      	ldr	r0, [pc, #104]	@ (800529c <main+0x254>)
 8005232:	f005 f915 	bl	800a460 <HAL_UART_Transmit>
  }
  
  // 设置目标偏航角为当前偏航角
  target_yaw = yaw;
 8005236:	4b30      	ldr	r3, [pc, #192]	@ (80052f8 <main+0x2b0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a33      	ldr	r2, [pc, #204]	@ (8005308 <main+0x2c0>)
 800523c:	6013      	str	r3, [r2, #0]
  
  // 重置PID控制器，避免积分项累积
  PID_Reset(&pid_yaw);
 800523e:	4833      	ldr	r0, [pc, #204]	@ (800530c <main+0x2c4>)
 8005240:	f000 fd92 	bl	8005d68 <PID_Reset>
  PID_Reset(&pid_encoder);
 8005244:	4832      	ldr	r0, [pc, #200]	@ (8005310 <main+0x2c8>)
 8005246:	f000 fd8f 	bl	8005d68 <PID_Reset>
  
  char debug_buf[64];
  sprintf(debug_buf, "目标偏航角设置为: %.2f\r\n", target_yaw);
 800524a:	4b2f      	ldr	r3, [pc, #188]	@ (8005308 <main+0x2c0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f7fb f97a 	bl	8000548 <__aeabi_f2d>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800525c:	492d      	ldr	r1, [pc, #180]	@ (8005314 <main+0x2cc>)
 800525e:	f006 fe8d 	bl	800bf7c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)debug_buf, strlen(debug_buf), 100);
 8005262:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8005266:	4618      	mov	r0, r3
 8005268:	f7fb f802 	bl	8000270 <strlen>
 800526c:	4603      	mov	r3, r0
 800526e:	b29a      	uxth	r2, r3
 8005270:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8005274:	2364      	movs	r3, #100	@ 0x64
 8005276:	4809      	ldr	r0, [pc, #36]	@ (800529c <main+0x254>)
 8005278:	f005 f8f2 	bl	800a460 <HAL_UART_Transmit>
    // // 开始下一次测量
    // Ultrasonic_StartMeasurement(&ultrasonic_sensor);

    /*--------------------------------------电机执行部分---------------------------------------------*/
    // 使用四轮直行控制，速度为50
    Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, 50);
 800527c:	2332      	movs	r3, #50	@ 0x32
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	2303      	movs	r3, #3
 8005282:	2202      	movs	r2, #2
 8005284:	2101      	movs	r1, #1
 8005286:	2000      	movs	r0, #0
 8005288:	f000 fa6e 	bl	8005768 <Motor_Straight>

    HAL_Delay(10);  
 800528c:	200a      	movs	r0, #10
 800528e:	f002 f885 	bl	800739c <HAL_Delay>
    Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, 50);
 8005292:	bf00      	nop
 8005294:	e7f2      	b.n	800527c <main+0x234>
 8005296:	bf00      	nop
 8005298:	200003d0 	.word	0x200003d0
 800529c:	20000788 	.word	0x20000788
 80052a0:	20000044 	.word	0x20000044
 80052a4:	0800eed8 	.word	0x0800eed8
 80052a8:	0800ef1c 	.word	0x0800ef1c
 80052ac:	20000414 	.word	0x20000414
 80052b0:	40021000 	.word	0x40021000
 80052b4:	40021800 	.word	0x40021800
 80052b8:	20000534 	.word	0x20000534
 80052bc:	200004ec 	.word	0x200004ec
 80052c0:	40020c00 	.word	0x40020c00
 80052c4:	2000057c 	.word	0x2000057c
 80052c8:	200004a4 	.word	0x200004a4
 80052cc:	40020400 	.word	0x40020400
 80052d0:	40020800 	.word	0x40020800
 80052d4:	200005c4 	.word	0x200005c4
 80052d8:	2000045c 	.word	0x2000045c
 80052dc:	2000060c 	.word	0x2000060c
 80052e0:	40021400 	.word	0x40021400
 80052e4:	20000654 	.word	0x20000654
 80052e8:	200003d4 	.word	0x200003d4
 80052ec:	2000069c 	.word	0x2000069c
 80052f0:	200003e8 	.word	0x200003e8
 80052f4:	200003cc 	.word	0x200003cc
 80052f8:	20000404 	.word	0x20000404
 80052fc:	20000400 	.word	0x20000400
 8005300:	200003fc 	.word	0x200003fc
 8005304:	0800ef4c 	.word	0x0800ef4c
 8005308:	20000408 	.word	0x20000408
 800530c:	2000007c 	.word	0x2000007c
 8005310:	20000064 	.word	0x20000064
 8005314:	0800ef74 	.word	0x0800ef74

08005318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b094      	sub	sp, #80	@ 0x50
 800531c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800531e:	f107 0320 	add.w	r3, r7, #32
 8005322:	2230      	movs	r2, #48	@ 0x30
 8005324:	2100      	movs	r1, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f006 ff32 	bl	800c190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800532c:	f107 030c 	add.w	r3, r7, #12
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	605a      	str	r2, [r3, #4]
 8005336:	609a      	str	r2, [r3, #8]
 8005338:	60da      	str	r2, [r3, #12]
 800533a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800533c:	2300      	movs	r3, #0
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	4b28      	ldr	r3, [pc, #160]	@ (80053e4 <SystemClock_Config+0xcc>)
 8005342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005344:	4a27      	ldr	r2, [pc, #156]	@ (80053e4 <SystemClock_Config+0xcc>)
 8005346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800534a:	6413      	str	r3, [r2, #64]	@ 0x40
 800534c:	4b25      	ldr	r3, [pc, #148]	@ (80053e4 <SystemClock_Config+0xcc>)
 800534e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005358:	2300      	movs	r3, #0
 800535a:	607b      	str	r3, [r7, #4]
 800535c:	4b22      	ldr	r3, [pc, #136]	@ (80053e8 <SystemClock_Config+0xd0>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a21      	ldr	r2, [pc, #132]	@ (80053e8 <SystemClock_Config+0xd0>)
 8005362:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	4b1f      	ldr	r3, [pc, #124]	@ (80053e8 <SystemClock_Config+0xd0>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005374:	2302      	movs	r3, #2
 8005376:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005378:	2301      	movs	r3, #1
 800537a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800537c:	2310      	movs	r3, #16
 800537e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005380:	2302      	movs	r3, #2
 8005382:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005384:	2300      	movs	r3, #0
 8005386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005388:	2308      	movs	r3, #8
 800538a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800538c:	23a8      	movs	r3, #168	@ 0xa8
 800538e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005390:	2302      	movs	r3, #2
 8005392:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005394:	2304      	movs	r3, #4
 8005396:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005398:	f107 0320 	add.w	r3, r7, #32
 800539c:	4618      	mov	r0, r3
 800539e:	f003 fb9f 	bl	8008ae0 <HAL_RCC_OscConfig>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80053a8:	f000 f820 	bl	80053ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053ac:	230f      	movs	r3, #15
 80053ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053b0:	2302      	movs	r3, #2
 80053b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80053b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80053bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80053be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80053c4:	f107 030c 	add.w	r3, r7, #12
 80053c8:	2105      	movs	r1, #5
 80053ca:	4618      	mov	r0, r3
 80053cc:	f003 fe00 	bl	8008fd0 <HAL_RCC_ClockConfig>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80053d6:	f000 f809 	bl	80053ec <Error_Handler>
  }
}
 80053da:	bf00      	nop
 80053dc:	3750      	adds	r7, #80	@ 0x50
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40023800 	.word	0x40023800
 80053e8:	40007000 	.word	0x40007000

080053ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80053f0:	b672      	cpsid	i
}
 80053f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80053f4:	bf00      	nop
 80053f6:	e7fd      	b.n	80053f4 <Error_Handler+0x8>

080053f8 <Motor_Init>:
void Motor_Init(Motor_ID id,
                TIM_HandleTypeDef* pwm_tim, uint32_t pwm_ch,
                GPIO_TypeDef* in1_port, uint16_t in1_pin,
                GPIO_TypeDef* in2_port, uint16_t in2_pin,
                TIM_HandleTypeDef* encoder_tim)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	607a      	str	r2, [r7, #4]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]
    motors[id].pwm_tim = pwm_tim;
 8005408:	7bfa      	ldrb	r2, [r7, #15]
 800540a:	4938      	ldr	r1, [pc, #224]	@ (80054ec <Motor_Init+0xf4>)
 800540c:	4613      	mov	r3, r2
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	601a      	str	r2, [r3, #0]
    motors[id].pwm_channel = pwm_ch;
 800541a:	7bfa      	ldrb	r2, [r7, #15]
 800541c:	4933      	ldr	r1, [pc, #204]	@ (80054ec <Motor_Init+0xf4>)
 800541e:	4613      	mov	r3, r2
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	4413      	add	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	440b      	add	r3, r1
 8005428:	3304      	adds	r3, #4
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	601a      	str	r2, [r3, #0]

    motors[id].in1_port = in1_port;
 800542e:	7bfa      	ldrb	r2, [r7, #15]
 8005430:	492e      	ldr	r1, [pc, #184]	@ (80054ec <Motor_Init+0xf4>)
 8005432:	4613      	mov	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	3308      	adds	r3, #8
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	601a      	str	r2, [r3, #0]
    motors[id].in1_pin = in1_pin;
 8005442:	7bfa      	ldrb	r2, [r7, #15]
 8005444:	4929      	ldr	r1, [pc, #164]	@ (80054ec <Motor_Init+0xf4>)
 8005446:	4613      	mov	r3, r2
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	330c      	adds	r3, #12
 8005452:	8b3a      	ldrh	r2, [r7, #24]
 8005454:	801a      	strh	r2, [r3, #0]
    motors[id].in2_port = in2_port;
 8005456:	7bfa      	ldrb	r2, [r7, #15]
 8005458:	4924      	ldr	r1, [pc, #144]	@ (80054ec <Motor_Init+0xf4>)
 800545a:	4613      	mov	r3, r2
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	3310      	adds	r3, #16
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	601a      	str	r2, [r3, #0]
    motors[id].in2_pin = in2_pin;
 800546a:	7bfa      	ldrb	r2, [r7, #15]
 800546c:	491f      	ldr	r1, [pc, #124]	@ (80054ec <Motor_Init+0xf4>)
 800546e:	4613      	mov	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	3314      	adds	r3, #20
 800547a:	8c3a      	ldrh	r2, [r7, #32]
 800547c:	801a      	strh	r2, [r3, #0]

    motors[id].encoder_tim = encoder_tim;
 800547e:	7bfa      	ldrb	r2, [r7, #15]
 8005480:	491a      	ldr	r1, [pc, #104]	@ (80054ec <Motor_Init+0xf4>)
 8005482:	4613      	mov	r3, r2
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	440b      	add	r3, r1
 800548c:	3318      	adds	r3, #24
 800548e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005490:	601a      	str	r2, [r3, #0]
    motors[id].encoder_offset = 0;
 8005492:	7bfa      	ldrb	r2, [r7, #15]
 8005494:	4915      	ldr	r1, [pc, #84]	@ (80054ec <Motor_Init+0xf4>)
 8005496:	4613      	mov	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	331c      	adds	r3, #28
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
    motors[id].encoder_total = 0;
 80054a6:	7bfa      	ldrb	r2, [r7, #15]
 80054a8:	4910      	ldr	r1, [pc, #64]	@ (80054ec <Motor_Init+0xf4>)
 80054aa:	4613      	mov	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	440b      	add	r3, r1
 80054b4:	3320      	adds	r3, #32
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]

    HAL_TIM_PWM_Start(pwm_tim, pwm_ch);
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	68b8      	ldr	r0, [r7, #8]
 80054be:	f004 f80f 	bl	80094e0 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(encoder_tim, TIM_CHANNEL_ALL);
 80054c2:	213c      	movs	r1, #60	@ 0x3c
 80054c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054c6:	f004 f979 	bl	80097bc <HAL_TIM_Encoder_Start>
    motors[id].encoder_offset = (int32_t)__HAL_TIM_GET_COUNTER(encoder_tim);
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d0:	7bfa      	ldrb	r2, [r7, #15]
 80054d2:	4618      	mov	r0, r3
 80054d4:	4905      	ldr	r1, [pc, #20]	@ (80054ec <Motor_Init+0xf4>)
 80054d6:	4613      	mov	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	331c      	adds	r3, #28
 80054e2:	6018      	str	r0, [r3, #0]
}
 80054e4:	bf00      	nop
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	2000033c 	.word	0x2000033c

080054f0 <Motor_SetSpeed>:

void Motor_SetSpeed(Motor_ID id, int16_t speed)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	460a      	mov	r2, r1
 80054fa:	71fb      	strb	r3, [r7, #7]
 80054fc:	4613      	mov	r3, r2
 80054fe:	80bb      	strh	r3, [r7, #4]
    speed = (speed > 100) ? 100 : (speed < -100) ? -100 : speed;
 8005500:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005504:	2b64      	cmp	r3, #100	@ 0x64
 8005506:	dc08      	bgt.n	800551a <Motor_SetSpeed+0x2a>
 8005508:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800550c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8005510:	4293      	cmp	r3, r2
 8005512:	bfb8      	it	lt
 8005514:	4613      	movlt	r3, r2
 8005516:	b21b      	sxth	r3, r3
 8005518:	e000      	b.n	800551c <Motor_SetSpeed+0x2c>
 800551a:	2364      	movs	r3, #100	@ 0x64
 800551c:	80bb      	strh	r3, [r7, #4]

    if(speed >= 0) {
 800551e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	db2c      	blt.n	8005580 <Motor_SetSpeed+0x90>
        HAL_GPIO_WritePin(motors[id].in1_port, motors[id].in1_pin, GPIO_PIN_SET);
 8005526:	79fa      	ldrb	r2, [r7, #7]
 8005528:	495e      	ldr	r1, [pc, #376]	@ (80056a4 <Motor_SetSpeed+0x1b4>)
 800552a:	4613      	mov	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	3308      	adds	r3, #8
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	79fa      	ldrb	r2, [r7, #7]
 800553a:	495a      	ldr	r1, [pc, #360]	@ (80056a4 <Motor_SetSpeed+0x1b4>)
 800553c:	4613      	mov	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	330c      	adds	r3, #12
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	2201      	movs	r2, #1
 800554c:	4619      	mov	r1, r3
 800554e:	f002 fa89 	bl	8007a64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motors[id].in2_port, motors[id].in2_pin, GPIO_PIN_RESET);
 8005552:	79fa      	ldrb	r2, [r7, #7]
 8005554:	4953      	ldr	r1, [pc, #332]	@ (80056a4 <Motor_SetSpeed+0x1b4>)
 8005556:	4613      	mov	r3, r2
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	3310      	adds	r3, #16
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	79fa      	ldrb	r2, [r7, #7]
 8005566:	494f      	ldr	r1, [pc, #316]	@ (80056a4 <Motor_SetSpeed+0x1b4>)
 8005568:	4613      	mov	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	3314      	adds	r3, #20
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	2200      	movs	r2, #0
 8005578:	4619      	mov	r1, r3
 800557a:	f002 fa73 	bl	8007a64 <HAL_GPIO_WritePin>
 800557e:	e02f      	b.n	80055e0 <Motor_SetSpeed+0xf0>
    } else {
        HAL_GPIO_WritePin(motors[id].in1_port, motors[id].in1_pin, GPIO_PIN_RESET);
 8005580:	79fa      	ldrb	r2, [r7, #7]
 8005582:	4948      	ldr	r1, [pc, #288]	@ (80056a4 <Motor_SetSpeed+0x1b4>)
 8005584:	4613      	mov	r3, r2
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	3308      	adds	r3, #8
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	79fa      	ldrb	r2, [r7, #7]
 8005594:	4943      	ldr	r1, [pc, #268]	@ (80056a4 <Motor_SetSpeed+0x1b4>)
 8005596:	4613      	mov	r3, r2
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	4413      	add	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	440b      	add	r3, r1
 80055a0:	330c      	adds	r3, #12
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	2200      	movs	r2, #0
 80055a6:	4619      	mov	r1, r3
 80055a8:	f002 fa5c 	bl	8007a64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motors[id].in2_port, motors[id].in2_pin, GPIO_PIN_SET);
 80055ac:	79fa      	ldrb	r2, [r7, #7]
 80055ae:	493d      	ldr	r1, [pc, #244]	@ (80056a4 <Motor_SetSpeed+0x1b4>)
 80055b0:	4613      	mov	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	3310      	adds	r3, #16
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	79fa      	ldrb	r2, [r7, #7]
 80055c0:	4938      	ldr	r1, [pc, #224]	@ (80056a4 <Motor_SetSpeed+0x1b4>)
 80055c2:	4613      	mov	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	440b      	add	r3, r1
 80055cc:	3314      	adds	r3, #20
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	2201      	movs	r2, #1
 80055d2:	4619      	mov	r1, r3
 80055d4:	f002 fa46 	bl	8007a64 <HAL_GPIO_WritePin>
        speed = -speed;
 80055d8:	88bb      	ldrh	r3, [r7, #4]
 80055da:	425b      	negs	r3, r3
 80055dc:	b29b      	uxth	r3, r3
 80055de:	80bb      	strh	r3, [r7, #4]
    }

    uint32_t duty = (speed * 999) / 100;
 80055e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80055e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80055e8:	fb02 f303 	mul.w	r3, r2, r3
 80055ec:	4a2e      	ldr	r2, [pc, #184]	@ (80056a8 <Motor_SetSpeed+0x1b8>)
 80055ee:	fb82 1203 	smull	r1, r2, r2, r3
 80055f2:	1152      	asrs	r2, r2, #5
 80055f4:	17db      	asrs	r3, r3, #31
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 80055fa:	79fa      	ldrb	r2, [r7, #7]
 80055fc:	4929      	ldr	r1, [pc, #164]	@ (80056a4 <Motor_SetSpeed+0x1b4>)
 80055fe:	4613      	mov	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	3304      	adds	r3, #4
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10b      	bne.n	8005628 <Motor_SetSpeed+0x138>
 8005610:	79fa      	ldrb	r2, [r7, #7]
 8005612:	4924      	ldr	r1, [pc, #144]	@ (80056a4 <Motor_SetSpeed+0x1b4>)
 8005614:	4613      	mov	r3, r2
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	4413      	add	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8005626:	e038      	b.n	800569a <Motor_SetSpeed+0x1aa>
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 8005628:	79fa      	ldrb	r2, [r7, #7]
 800562a:	491e      	ldr	r1, [pc, #120]	@ (80056a4 <Motor_SetSpeed+0x1b4>)
 800562c:	4613      	mov	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	3304      	adds	r3, #4
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b04      	cmp	r3, #4
 800563c:	d10b      	bne.n	8005656 <Motor_SetSpeed+0x166>
 800563e:	79fa      	ldrb	r2, [r7, #7]
 8005640:	4918      	ldr	r1, [pc, #96]	@ (80056a4 <Motor_SetSpeed+0x1b4>)
 8005642:	4613      	mov	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005654:	e021      	b.n	800569a <Motor_SetSpeed+0x1aa>
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 8005656:	79fa      	ldrb	r2, [r7, #7]
 8005658:	4912      	ldr	r1, [pc, #72]	@ (80056a4 <Motor_SetSpeed+0x1b4>)
 800565a:	4613      	mov	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	3304      	adds	r3, #4
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d10b      	bne.n	8005684 <Motor_SetSpeed+0x194>
 800566c:	79fa      	ldrb	r2, [r7, #7]
 800566e:	490d      	ldr	r1, [pc, #52]	@ (80056a4 <Motor_SetSpeed+0x1b4>)
 8005670:	4613      	mov	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8005682:	e00a      	b.n	800569a <Motor_SetSpeed+0x1aa>
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 8005684:	79fa      	ldrb	r2, [r7, #7]
 8005686:	4907      	ldr	r1, [pc, #28]	@ (80056a4 <Motor_SetSpeed+0x1b4>)
 8005688:	4613      	mov	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	4413      	add	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	2000033c 	.word	0x2000033c
 80056a8:	51eb851f 	.word	0x51eb851f

080056ac <Motor_GetEncoder>:

int32_t Motor_GetEncoder(Motor_ID id)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	71fb      	strb	r3, [r7, #7]
    int32_t current_cnt = (int32_t)__HAL_TIM_GET_COUNTER(motors[id].encoder_tim);
 80056b6:	79fa      	ldrb	r2, [r7, #7]
 80056b8:	492a      	ldr	r1, [pc, #168]	@ (8005764 <Motor_GetEncoder+0xb8>)
 80056ba:	4613      	mov	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	3318      	adds	r3, #24
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056cc:	60bb      	str	r3, [r7, #8]
    int32_t diff = current_cnt - motors[id].encoder_offset;
 80056ce:	79fa      	ldrb	r2, [r7, #7]
 80056d0:	4924      	ldr	r1, [pc, #144]	@ (8005764 <Motor_GetEncoder+0xb8>)
 80056d2:	4613      	mov	r3, r2
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	331c      	adds	r3, #28
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	60fb      	str	r3, [r7, #12]
    
    if (diff > 32767) diff -= 65536;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ec:	db04      	blt.n	80056f8 <Motor_GetEncoder+0x4c>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	e007      	b.n	8005708 <Motor_GetEncoder+0x5c>
    else if (diff < -32768) diff += 65536;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80056fe:	da03      	bge.n	8005708 <Motor_GetEncoder+0x5c>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005706:	60fb      	str	r3, [r7, #12]
    
    motors[id].encoder_total += diff;
 8005708:	79fa      	ldrb	r2, [r7, #7]
 800570a:	4916      	ldr	r1, [pc, #88]	@ (8005764 <Motor_GetEncoder+0xb8>)
 800570c:	4613      	mov	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	3320      	adds	r3, #32
 8005718:	6819      	ldr	r1, [r3, #0]
 800571a:	79fa      	ldrb	r2, [r7, #7]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4419      	add	r1, r3
 8005720:	4810      	ldr	r0, [pc, #64]	@ (8005764 <Motor_GetEncoder+0xb8>)
 8005722:	4613      	mov	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4403      	add	r3, r0
 800572c:	3320      	adds	r3, #32
 800572e:	6019      	str	r1, [r3, #0]
    motors[id].encoder_offset = current_cnt;
 8005730:	79fa      	ldrb	r2, [r7, #7]
 8005732:	490c      	ldr	r1, [pc, #48]	@ (8005764 <Motor_GetEncoder+0xb8>)
 8005734:	4613      	mov	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	331c      	adds	r3, #28
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	601a      	str	r2, [r3, #0]
    
    return motors[id].encoder_total;
 8005744:	79fa      	ldrb	r2, [r7, #7]
 8005746:	4907      	ldr	r1, [pc, #28]	@ (8005764 <Motor_GetEncoder+0xb8>)
 8005748:	4613      	mov	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	3320      	adds	r3, #32
 8005754:	681b      	ldr	r3, [r3, #0]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	2000033c 	.word	0x2000033c

08005768 <Motor_Straight>:
    Motor_SetSpeed(id2, speed2);
    
    Debug_Output("RIGHT", position_error, encoder_pid_output, speed1, speed2);
}

void Motor_Straight(Motor_ID id1, Motor_ID id2, Motor_ID id3, Motor_ID id4, int16_t speed) {
 8005768:	b590      	push	{r4, r7, lr}
 800576a:	b099      	sub	sp, #100	@ 0x64
 800576c:	af00      	add	r7, sp, #0
 800576e:	4604      	mov	r4, r0
 8005770:	4608      	mov	r0, r1
 8005772:	4611      	mov	r1, r2
 8005774:	461a      	mov	r2, r3
 8005776:	4623      	mov	r3, r4
 8005778:	71fb      	strb	r3, [r7, #7]
 800577a:	4603      	mov	r3, r0
 800577c:	71bb      	strb	r3, [r7, #6]
 800577e:	460b      	mov	r3, r1
 8005780:	717b      	strb	r3, [r7, #5]
 8005782:	4613      	mov	r3, r2
 8005784:	713b      	strb	r3, [r7, #4]
    uint32_t current_time = HAL_GetTick();
 8005786:	f001 fdfd 	bl	8007384 <HAL_GetTick>
 800578a:	6538      	str	r0, [r7, #80]	@ 0x50
    float dt = (current_time - prev_time) / 1000.0f;
 800578c:	4bd4      	ldr	r3, [pc, #848]	@ (8005ae0 <Motor_Straight+0x378>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	ee07 3a90 	vmov	s15, r3
 8005798:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800579c:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8005ae4 <Motor_Straight+0x37c>
 80057a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057a4:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    
    // 添加时间差保护
    if (dt <= 0.001f) {
 80057a8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80057ac:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8005ae8 <Motor_Straight+0x380>
 80057b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b8:	d801      	bhi.n	80057be <Motor_Straight+0x56>
        dt = 0.001f;  // 最小时间差为1ms
 80057ba:	4bcc      	ldr	r3, [pc, #816]	@ (8005aec <Motor_Straight+0x384>)
 80057bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
    prev_time = current_time;
 80057be:	4ac8      	ldr	r2, [pc, #800]	@ (8005ae0 <Motor_Straight+0x378>)
 80057c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057c2:	6013      	str	r3, [r2, #0]

    // 获取编码器值
    int32_t enc1 = Motor_GetEncoder(id1);
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff ff70 	bl	80056ac <Motor_GetEncoder>
 80057cc:	64f8      	str	r0, [r7, #76]	@ 0x4c
    int32_t enc2 = -Motor_GetEncoder(id2);
 80057ce:	79bb      	ldrb	r3, [r7, #6]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff ff6b 	bl	80056ac <Motor_GetEncoder>
 80057d6:	4603      	mov	r3, r0
 80057d8:	425b      	negs	r3, r3
 80057da:	64bb      	str	r3, [r7, #72]	@ 0x48
    int32_t enc3 = Motor_GetEncoder(id3);
 80057dc:	797b      	ldrb	r3, [r7, #5]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff ff64 	bl	80056ac <Motor_GetEncoder>
 80057e4:	6478      	str	r0, [r7, #68]	@ 0x44
    int32_t enc4 = -Motor_GetEncoder(id4);
 80057e6:	793b      	ldrb	r3, [r7, #4]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff ff5f 	bl	80056ac <Motor_GetEncoder>
 80057ee:	4603      	mov	r3, r0
 80057f0:	425b      	negs	r3, r3
 80057f2:	643b      	str	r3, [r7, #64]	@ 0x40

    // 获取当前偏航角
    float pitch, roll, yaw;
    if (MPU6050_DMP_Get_Data(&pitch, &roll, &yaw) != 0) {
 80057f4:	f107 020c 	add.w	r2, r7, #12
 80057f8:	f107 0110 	add.w	r1, r7, #16
 80057fc:	f107 0314 	add.w	r3, r7, #20
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff f829 	bl	8004858 <MPU6050_DMP_Get_Data>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d014      	beq.n	8005836 <Motor_Straight+0xce>
        // MPU6050读取失败，停止所有电机
        Motor_SetSpeed(id1, 0);
 800580c:	79fb      	ldrb	r3, [r7, #7]
 800580e:	2100      	movs	r1, #0
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fe6d 	bl	80054f0 <Motor_SetSpeed>
        Motor_SetSpeed(id2, 0);
 8005816:	79bb      	ldrb	r3, [r7, #6]
 8005818:	2100      	movs	r1, #0
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff fe68 	bl	80054f0 <Motor_SetSpeed>
        Motor_SetSpeed(id3, 0);
 8005820:	797b      	ldrb	r3, [r7, #5]
 8005822:	2100      	movs	r1, #0
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff fe63 	bl	80054f0 <Motor_SetSpeed>
        Motor_SetSpeed(id4, 0);
 800582a:	793b      	ldrb	r3, [r7, #4]
 800582c:	2100      	movs	r1, #0
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff fe5e 	bl	80054f0 <Motor_SetSpeed>
 8005834:	e151      	b.n	8005ada <Motor_Straight+0x372>
        return;
    }

    // 计算偏航角误差
    float yaw_error = target_yaw - yaw;
 8005836:	4bae      	ldr	r3, [pc, #696]	@ (8005af0 <Motor_Straight+0x388>)
 8005838:	ed93 7a00 	vldr	s14, [r3]
 800583c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005844:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    if (yaw_error > 180) yaw_error -= 360;
 8005848:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800584c:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8005af4 <Motor_Straight+0x38c>
 8005850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005858:	dd08      	ble.n	800586c <Motor_Straight+0x104>
 800585a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800585e:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8005af8 <Motor_Straight+0x390>
 8005862:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005866:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 800586a:	e010      	b.n	800588e <Motor_Straight+0x126>
    else if (yaw_error < -180) yaw_error += 360;
 800586c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8005870:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8005afc <Motor_Straight+0x394>
 8005874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587c:	d507      	bpl.n	800588e <Motor_Straight+0x126>
 800587e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8005882:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8005af8 <Motor_Straight+0x390>
 8005886:	ee77 7a87 	vadd.f32	s15, s15, s14
 800588a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

    // 计算编码器误差 - 修正后的计算方式
    int32_t left_error = enc1 - enc3;  // 左侧轮子同步
 800588e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int32_t right_error = enc2 - enc4;  // 右侧轮子同步
 8005896:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	63bb      	str	r3, [r7, #56]	@ 0x38
    int32_t position_error = (left_error + right_error) / 2;  // 左右两侧同步
 800589e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80058a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a2:	4413      	add	r3, r2
 80058a4:	0fda      	lsrs	r2, r3, #31
 80058a6:	4413      	add	r3, r2
 80058a8:	105b      	asrs	r3, r3, #1
 80058aa:	637b      	str	r3, [r7, #52]	@ 0x34

    // 速度分配 - 修正后的分配方式
    float base_speed = speed;
 80058ac:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
 80058b0:	ee07 3a90 	vmov	s15, r3
 80058b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    
    // 限制PID输出的最大值，防止过度修正
    float max_pid_output = base_speed * 0.3f;  // 降低PID输出最大值为基准速度的30%
 80058bc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80058c0:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8005b00 <Motor_Straight+0x398>
 80058c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058c8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    
    float yaw_pid_output = 0.0f;
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	657b      	str	r3, [r7, #84]	@ 0x54
    float encoder_pid_output = 0.0f;
 80058d2:	f04f 0300 	mov.w	r3, #0
 80058d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    
    // 只有当偏航角误差大于1度时才进行PID调整
    if (fabs(yaw_error) > 1.0f) {
 80058d8:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80058dc:	eef0 7ae7 	vabs.f32	s15, s15
 80058e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ec:	dd1d      	ble.n	800592a <Motor_Straight+0x1c2>
        yaw_pid_output = PID_Calculate(&pid_yaw, yaw_error, dt);
 80058ee:	edd7 0a17 	vldr	s1, [r7, #92]	@ 0x5c
 80058f2:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 80058f6:	4883      	ldr	r0, [pc, #524]	@ (8005b04 <Motor_Straight+0x39c>)
 80058f8:	f000 f9ba 	bl	8005c70 <PID_Calculate>
 80058fc:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
        yaw_pid_output = fmaxf(fminf(yaw_pid_output, max_pid_output), -max_pid_output);
 8005900:	edd7 0a0b 	vldr	s1, [r7, #44]	@ 0x2c
 8005904:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8005908:	f008 fcdf 	bl	800e2ca <fminf>
 800590c:	eeb0 7a40 	vmov.f32	s14, s0
 8005910:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005914:	eef1 7a67 	vneg.f32	s15, s15
 8005918:	eef0 0a67 	vmov.f32	s1, s15
 800591c:	eeb0 0a47 	vmov.f32	s0, s14
 8005920:	f008 fcb6 	bl	800e290 <fmaxf>
 8005924:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
 8005928:	e002      	b.n	8005930 <Motor_Straight+0x1c8>
    } else {
        // 误差小于1度时，重置PID控制器
        PID_Reset(&pid_yaw);
 800592a:	4876      	ldr	r0, [pc, #472]	@ (8005b04 <Motor_Straight+0x39c>)
 800592c:	f000 fa1c 	bl	8005d68 <PID_Reset>
    }
    
    // 使用偏航角PID输出作为编码器PID的目标值
    encoder_pid_output = PID_Calculate(&pid_encoder, position_error - yaw_pid_output, dt);
 8005930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800593a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800593e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005942:	edd7 0a17 	vldr	s1, [r7, #92]	@ 0x5c
 8005946:	eeb0 0a67 	vmov.f32	s0, s15
 800594a:	486f      	ldr	r0, [pc, #444]	@ (8005b08 <Motor_Straight+0x3a0>)
 800594c:	f000 f990 	bl	8005c70 <PID_Calculate>
 8005950:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    encoder_pid_output = fmaxf(fminf(encoder_pid_output, max_pid_output), -max_pid_output);
 8005954:	edd7 0a0b 	vldr	s1, [r7, #44]	@ 0x2c
 8005958:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800595c:	f008 fcb5 	bl	800e2ca <fminf>
 8005960:	eeb0 7a40 	vmov.f32	s14, s0
 8005964:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005968:	eef1 7a67 	vneg.f32	s15, s15
 800596c:	eef0 0a67 	vmov.f32	s1, s15
 8005970:	eeb0 0a47 	vmov.f32	s0, s14
 8005974:	f008 fc8c 	bl	800e290 <fmaxf>
 8005978:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    
    // 左侧轮子
    float speed1 = base_speed - encoder_pid_output - yaw_pid_output;  // 左前
 800597c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8005980:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005988:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800598c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005990:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float speed3 = base_speed - encoder_pid_output - yaw_pid_output;  // 左后
 8005994:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8005998:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800599c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059a0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80059a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059a8:	edc7 7a08 	vstr	s15, [r7, #32]
    // 右侧轮子
    float speed2 = base_speed + encoder_pid_output + yaw_pid_output;  // 右前
 80059ac:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80059b0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80059b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059b8:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80059bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059c0:	edc7 7a07 	vstr	s15, [r7, #28]
    float speed4 = base_speed + encoder_pid_output + yaw_pid_output;  // 右后
 80059c4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80059c8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80059cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059d0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80059d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059d8:	edc7 7a06 	vstr	s15, [r7, #24]

    // 限幅
    speed1 = fmaxf(fminf(speed1, 100.0f), -100.0f);
 80059dc:	eddf 0a4b 	vldr	s1, [pc, #300]	@ 8005b0c <Motor_Straight+0x3a4>
 80059e0:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80059e4:	f008 fc71 	bl	800e2ca <fminf>
 80059e8:	eef0 7a40 	vmov.f32	s15, s0
 80059ec:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8005b10 <Motor_Straight+0x3a8>
 80059f0:	eeb0 0a67 	vmov.f32	s0, s15
 80059f4:	f008 fc4c 	bl	800e290 <fmaxf>
 80059f8:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    speed2 = fmaxf(fminf(speed2, 100.0f), -100.0f);
 80059fc:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8005b0c <Motor_Straight+0x3a4>
 8005a00:	ed97 0a07 	vldr	s0, [r7, #28]
 8005a04:	f008 fc61 	bl	800e2ca <fminf>
 8005a08:	eef0 7a40 	vmov.f32	s15, s0
 8005a0c:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8005b10 <Motor_Straight+0x3a8>
 8005a10:	eeb0 0a67 	vmov.f32	s0, s15
 8005a14:	f008 fc3c 	bl	800e290 <fmaxf>
 8005a18:	ed87 0a07 	vstr	s0, [r7, #28]
    speed3 = fmaxf(fminf(speed3, 100.0f), -100.0f);
 8005a1c:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8005b0c <Motor_Straight+0x3a4>
 8005a20:	ed97 0a08 	vldr	s0, [r7, #32]
 8005a24:	f008 fc51 	bl	800e2ca <fminf>
 8005a28:	eef0 7a40 	vmov.f32	s15, s0
 8005a2c:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8005b10 <Motor_Straight+0x3a8>
 8005a30:	eeb0 0a67 	vmov.f32	s0, s15
 8005a34:	f008 fc2c 	bl	800e290 <fmaxf>
 8005a38:	ed87 0a08 	vstr	s0, [r7, #32]
    speed4 = fmaxf(fminf(speed4, 100.0f), -100.0f);
 8005a3c:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8005b0c <Motor_Straight+0x3a4>
 8005a40:	ed97 0a06 	vldr	s0, [r7, #24]
 8005a44:	f008 fc41 	bl	800e2ca <fminf>
 8005a48:	eef0 7a40 	vmov.f32	s15, s0
 8005a4c:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8005b10 <Motor_Straight+0x3a8>
 8005a50:	eeb0 0a67 	vmov.f32	s0, s15
 8005a54:	f008 fc1c 	bl	800e290 <fmaxf>
 8005a58:	ed87 0a06 	vstr	s0, [r7, #24]

    // 设置电机速度
    Motor_SetSpeed(id1, speed1);
 8005a5c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a64:	ee17 3a90 	vmov	r3, s15
 8005a68:	b21a      	sxth	r2, r3
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fd3e 	bl	80054f0 <Motor_SetSpeed>
    Motor_SetSpeed(id2, speed2);
 8005a74:	edd7 7a07 	vldr	s15, [r7, #28]
 8005a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a7c:	ee17 3a90 	vmov	r3, s15
 8005a80:	b21a      	sxth	r2, r3
 8005a82:	79bb      	ldrb	r3, [r7, #6]
 8005a84:	4611      	mov	r1, r2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff fd32 	bl	80054f0 <Motor_SetSpeed>
    Motor_SetSpeed(id3, speed3);
 8005a8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a94:	ee17 3a90 	vmov	r3, s15
 8005a98:	b21a      	sxth	r2, r3
 8005a9a:	797b      	ldrb	r3, [r7, #5]
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff fd26 	bl	80054f0 <Motor_SetSpeed>
    Motor_SetSpeed(id4, speed4);
 8005aa4:	edd7 7a06 	vldr	s15, [r7, #24]
 8005aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005aac:	ee17 3a90 	vmov	r3, s15
 8005ab0:	b21a      	sxth	r2, r3
 8005ab2:	793b      	ldrb	r3, [r7, #4]
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff fd1a 	bl	80054f0 <Motor_SetSpeed>

    // 输出调试信息，包括编码器误差和PID输出
    Debug_Output_Yaw("STRAIGHT", yaw_error, yaw_pid_output, speed1, speed2, speed3, speed4);
 8005abc:	edd7 2a06 	vldr	s5, [r7, #24]
 8005ac0:	ed97 2a08 	vldr	s4, [r7, #32]
 8005ac4:	edd7 1a07 	vldr	s3, [r7, #28]
 8005ac8:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8005acc:	edd7 0a15 	vldr	s1, [r7, #84]	@ 0x54
 8005ad0:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 8005ad4:	480f      	ldr	r0, [pc, #60]	@ (8005b14 <Motor_Straight+0x3ac>)
 8005ad6:	f000 f81f 	bl	8005b18 <Debug_Output_Yaw>
}
 8005ada:	3764      	adds	r7, #100	@ 0x64
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd90      	pop	{r4, r7, pc}
 8005ae0:	200003cc 	.word	0x200003cc
 8005ae4:	447a0000 	.word	0x447a0000
 8005ae8:	3a83126f 	.word	0x3a83126f
 8005aec:	3a83126f 	.word	0x3a83126f
 8005af0:	20000408 	.word	0x20000408
 8005af4:	43340000 	.word	0x43340000
 8005af8:	43b40000 	.word	0x43b40000
 8005afc:	c3340000 	.word	0xc3340000
 8005b00:	3e99999a 	.word	0x3e99999a
 8005b04:	2000007c 	.word	0x2000007c
 8005b08:	20000064 	.word	0x20000064
 8005b0c:	42c80000 	.word	0x42c80000
 8005b10:	c2c80000 	.word	0xc2c80000
 8005b14:	0800efa8 	.word	0x0800efa8

08005b18 <Debug_Output_Yaw>:
        HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
        last_debug = HAL_GetTick();
    }
}

void Debug_Output_Yaw(const char* movement, float yaw_error, float pid_out, float speed1, float speed2, float speed3, float speed4) {
 8005b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b1c:	b0d8      	sub	sp, #352	@ 0x160
 8005b1e:	af12      	add	r7, sp, #72	@ 0x48
 8005b20:	6378      	str	r0, [r7, #52]	@ 0x34
 8005b22:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8005b26:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8005b2a:	ed87 1a0a 	vstr	s2, [r7, #40]	@ 0x28
 8005b2e:	edc7 1a09 	vstr	s3, [r7, #36]	@ 0x24
 8005b32:	ed87 2a08 	vstr	s4, [r7, #32]
 8005b36:	edc7 2a07 	vstr	s5, [r7, #28]
    static uint32_t last_debug = 0;
    if (HAL_GetTick() - last_debug > 100) {
 8005b3a:	f001 fc23 	bl	8007384 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	4b47      	ldr	r3, [pc, #284]	@ (8005c60 <Debug_Output_Yaw+0x148>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b64      	cmp	r3, #100	@ 0x64
 8005b48:	f240 8083 	bls.w	8005c52 <Debug_Output_Yaw+0x13a>
        // 获取编码器值
        int32_t enc1 = Motor_GetEncoder(MOTOR_1);
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	f7ff fdad 	bl	80056ac <Motor_GetEncoder>
 8005b52:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
        int32_t enc2 = -Motor_GetEncoder(MOTOR_2);
 8005b56:	2001      	movs	r0, #1
 8005b58:	f7ff fda8 	bl	80056ac <Motor_GetEncoder>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	425b      	negs	r3, r3
 8005b60:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        int32_t enc3 = Motor_GetEncoder(MOTOR_3);
 8005b64:	2002      	movs	r0, #2
 8005b66:	f7ff fda1 	bl	80056ac <Motor_GetEncoder>
 8005b6a:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
        int32_t enc4 = -Motor_GetEncoder(MOTOR_4);
 8005b6e:	2003      	movs	r0, #3
 8005b70:	f7ff fd9c 	bl	80056ac <Motor_GetEncoder>
 8005b74:	4603      	mov	r3, r0
 8005b76:	425b      	negs	r3, r3
 8005b78:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        
        // 计算编码器误差
        int32_t left_error = enc1 - enc3;  // 左侧轮子同步
 8005b7c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        int32_t right_error = enc2 - enc4;  // 右侧轮子同步
 8005b8a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8005b8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        
        char buf[200];
        sprintf(buf, "%s | YawErr: %5.1f | PID: %6.2f | enc1:%5ld, enc2:%5ld, enc3:%5ld, enc4:%5ld | EncPID: %6.2f | M1: %5.1f | M2: %5.1f | M3: %5.1f | M4: %5.1f\r\n",
 8005b98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b9a:	f7fa fcd5 	bl	8000548 <__aeabi_f2d>
 8005b9e:	4680      	mov	r8, r0
 8005ba0:	4689      	mov	r9, r1
 8005ba2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ba4:	f7fa fcd0 	bl	8000548 <__aeabi_f2d>
 8005ba8:	4682      	mov	sl, r0
 8005baa:	468b      	mov	fp, r1
                movement, yaw_error, pid_out, enc1, enc2, enc3, enc4, pid_encoder.integral, speed1, speed2, speed3, speed4);
 8005bac:	4b2d      	ldr	r3, [pc, #180]	@ (8005c64 <Debug_Output_Yaw+0x14c>)
 8005bae:	68db      	ldr	r3, [r3, #12]
        sprintf(buf, "%s | YawErr: %5.1f | PID: %6.2f | enc1:%5ld, enc2:%5ld, enc3:%5ld, enc4:%5ld | EncPID: %6.2f | M1: %5.1f | M2: %5.1f | M3: %5.1f | M4: %5.1f\r\n",
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fa fcc9 	bl	8000548 <__aeabi_f2d>
 8005bb6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8005bba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bbc:	f7fa fcc4 	bl	8000548 <__aeabi_f2d>
 8005bc0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005bc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005bc6:	f7fa fcbf 	bl	8000548 <__aeabi_f2d>
 8005bca:	e9c7 0100 	strd	r0, r1, [r7]
 8005bce:	6a38      	ldr	r0, [r7, #32]
 8005bd0:	f7fa fcba 	bl	8000548 <__aeabi_f2d>
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	460d      	mov	r5, r1
 8005bd8:	69f8      	ldr	r0, [r7, #28]
 8005bda:	f7fa fcb5 	bl	8000548 <__aeabi_f2d>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8005be6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005bea:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 8005bee:	ed97 7b00 	vldr	d7, [r7]
 8005bf2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005bf6:	ed97 7b02 	vldr	d7, [r7, #8]
 8005bfa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005bfe:	ed97 7b04 	vldr	d7, [r7, #16]
 8005c02:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005c06:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005c0a:	9307      	str	r3, [sp, #28]
 8005c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c10:	9306      	str	r3, [sp, #24]
 8005c12:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005c16:	9305      	str	r3, [sp, #20]
 8005c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1c:	9304      	str	r3, [sp, #16]
 8005c1e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8005c22:	e9cd 8900 	strd	r8, r9, [sp]
 8005c26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c28:	490f      	ldr	r1, [pc, #60]	@ (8005c68 <Debug_Output_Yaw+0x150>)
 8005c2a:	f006 f9a7 	bl	800bf7c <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
 8005c2e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fa fb1c 	bl	8000270 <strlen>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8005c40:	2364      	movs	r3, #100	@ 0x64
 8005c42:	480a      	ldr	r0, [pc, #40]	@ (8005c6c <Debug_Output_Yaw+0x154>)
 8005c44:	f004 fc0c 	bl	800a460 <HAL_UART_Transmit>
        last_debug = HAL_GetTick();
 8005c48:	f001 fb9c 	bl	8007384 <HAL_GetTick>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	4a04      	ldr	r2, [pc, #16]	@ (8005c60 <Debug_Output_Yaw+0x148>)
 8005c50:	6013      	str	r3, [r2, #0]
    }
}
 8005c52:	bf00      	nop
 8005c54:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c5e:	bf00      	nop
 8005c60:	2000040c 	.word	0x2000040c
 8005c64:	20000064 	.word	0x20000064
 8005c68:	0800f034 	.word	0x0800f034
 8005c6c:	20000788 	.word	0x20000788

08005c70 <PID_Calculate>:
    .prev_error = 0.0f,
    .max_integral = 50.0f  // 降低积分上限
};

/* Exported functions --------------------------------------------------------*/
float PID_Calculate(PIDController* pid, float error, float dt) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	ed87 0a02 	vstr	s0, [r7, #8]
 8005c7c:	edc7 0a01 	vstr	s1, [r7, #4]
    // 添加时间差保护
    if (dt <= 0.001f) {
 8005c80:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c84:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005d60 <PID_Calculate+0xf0>
 8005c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c90:	d801      	bhi.n	8005c96 <PID_Calculate+0x26>
        dt = 0.001f;  // 最小时间差为1ms
 8005c92:	4b34      	ldr	r3, [pc, #208]	@ (8005d64 <PID_Calculate+0xf4>)
 8005c94:	607b      	str	r3, [r7, #4]
    }

    float proportional = pid->Kp * error;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	edd3 7a00 	vldr	s15, [r3]
 8005c9c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca4:	edc7 7a07 	vstr	s15, [r7, #28]

    pid->integral += error * dt;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	ed93 7a03 	vldr	s14, [r3, #12]
 8005cae:	edd7 6a02 	vldr	s13, [r7, #8]
 8005cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	edc3 7a03 	vstr	s15, [r3, #12]
    pid->integral = fmaxf(fminf(pid->integral, pid->max_integral), -pid->max_integral);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	ed93 7a05 	vldr	s14, [r3, #20]
 8005cd0:	eef0 0a47 	vmov.f32	s1, s14
 8005cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8005cd8:	f008 faf7 	bl	800e2ca <fminf>
 8005cdc:	eeb0 7a40 	vmov.f32	s14, s0
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	edd3 7a05 	vldr	s15, [r3, #20]
 8005ce6:	eef1 7a67 	vneg.f32	s15, s15
 8005cea:	eef0 0a67 	vmov.f32	s1, s15
 8005cee:	eeb0 0a47 	vmov.f32	s0, s14
 8005cf2:	f008 facd 	bl	800e290 <fmaxf>
 8005cf6:	eef0 7a40 	vmov.f32	s15, s0
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	edc3 7a03 	vstr	s15, [r3, #12]

    float derivative = pid->Kd * (error - pid->prev_error) / dt;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	ed93 7a02 	vldr	s14, [r3, #8]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d0c:	edd7 6a02 	vldr	s13, [r7, #8]
 8005d10:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005d14:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005d18:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d20:	edc7 7a06 	vstr	s15, [r7, #24]

    float output = proportional + (pid->Ki * pid->integral) + derivative;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	ed93 7a01 	vldr	s14, [r3, #4]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d34:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d3c:	ed97 7a06 	vldr	s14, [r7, #24]
 8005d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d44:	edc7 7a05 	vstr	s15, [r7, #20]

    pid->prev_error = error;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	611a      	str	r2, [r3, #16]

    return output;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	ee07 3a90 	vmov	s15, r3
}
 8005d54:	eeb0 0a67 	vmov.f32	s0, s15
 8005d58:	3720      	adds	r7, #32
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	3a83126f 	.word	0x3a83126f
 8005d64:	3a83126f 	.word	0x3a83126f

08005d68 <PID_Reset>:

void PID_Reset(PIDController* pid) {
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
    pid->integral = 0.0f;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f04f 0200 	mov.w	r2, #0
 8005d76:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0.0f;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f04f 0200 	mov.w	r2, #0
 8005d7e:	611a      	str	r2, [r3, #16]
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d92:	2300      	movs	r3, #0
 8005d94:	607b      	str	r3, [r7, #4]
 8005d96:	4b10      	ldr	r3, [pc, #64]	@ (8005dd8 <HAL_MspInit+0x4c>)
 8005d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9a:	4a0f      	ldr	r2, [pc, #60]	@ (8005dd8 <HAL_MspInit+0x4c>)
 8005d9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005da2:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd8 <HAL_MspInit+0x4c>)
 8005da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005daa:	607b      	str	r3, [r7, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dae:	2300      	movs	r3, #0
 8005db0:	603b      	str	r3, [r7, #0]
 8005db2:	4b09      	ldr	r3, [pc, #36]	@ (8005dd8 <HAL_MspInit+0x4c>)
 8005db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db6:	4a08      	ldr	r2, [pc, #32]	@ (8005dd8 <HAL_MspInit+0x4c>)
 8005db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005dbe:	4b06      	ldr	r3, [pc, #24]	@ (8005dd8 <HAL_MspInit+0x4c>)
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dc6:	603b      	str	r3, [r7, #0]
 8005dc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40023800 	.word	0x40023800

08005ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005de0:	bf00      	nop
 8005de2:	e7fd      	b.n	8005de0 <NMI_Handler+0x4>

08005de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005de8:	bf00      	nop
 8005dea:	e7fd      	b.n	8005de8 <HardFault_Handler+0x4>

08005dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005df0:	bf00      	nop
 8005df2:	e7fd      	b.n	8005df0 <MemManage_Handler+0x4>

08005df4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005df8:	bf00      	nop
 8005dfa:	e7fd      	b.n	8005df8 <BusFault_Handler+0x4>

08005dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e00:	bf00      	nop
 8005e02:	e7fd      	b.n	8005e00 <UsageFault_Handler+0x4>

08005e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e04:	b480      	push	{r7}
 8005e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e08:	bf00      	nop
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e12:	b480      	push	{r7}
 8005e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e16:	bf00      	nop
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e24:	bf00      	nop
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e32:	f001 fa93 	bl	800735c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e36:	bf00      	nop
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005e40:	4802      	ldr	r0, [pc, #8]	@ (8005e4c <USART1_IRQHandler+0x10>)
 8005e42:	f004 fbbd 	bl	800a5c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005e46:	bf00      	nop
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000788 	.word	0x20000788

08005e50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  return 1;
 8005e54:	2301      	movs	r3, #1
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <_kill>:

int _kill(int pid, int sig)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005e6a:	f006 f9e3 	bl	800c234 <__errno>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2216      	movs	r2, #22
 8005e72:	601a      	str	r2, [r3, #0]
  return -1;
 8005e74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <_exit>:

void _exit (int status)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005e88:	f04f 31ff 	mov.w	r1, #4294967295
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff ffe7 	bl	8005e60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005e92:	bf00      	nop
 8005e94:	e7fd      	b.n	8005e92 <_exit+0x12>

08005e96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b086      	sub	sp, #24
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e00a      	b.n	8005ebe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005ea8:	f3af 8000 	nop.w
 8005eac:	4601      	mov	r1, r0
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	60ba      	str	r2, [r7, #8]
 8005eb4:	b2ca      	uxtb	r2, r1
 8005eb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	dbf0      	blt.n	8005ea8 <_read+0x12>
  }

  return len;
 8005ec6:	687b      	ldr	r3, [r7, #4]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	e009      	b.n	8005ef6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	1c5a      	adds	r2, r3, #1
 8005ee6:	60ba      	str	r2, [r7, #8]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	dbf1      	blt.n	8005ee2 <_write+0x12>
  }
  return len;
 8005efe:	687b      	ldr	r3, [r7, #4]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <_close>:

int _close(int file)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f30:	605a      	str	r2, [r3, #4]
  return 0;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <_isatty>:

int _isatty(int file)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005f48:	2301      	movs	r3, #1
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f78:	4a14      	ldr	r2, [pc, #80]	@ (8005fcc <_sbrk+0x5c>)
 8005f7a:	4b15      	ldr	r3, [pc, #84]	@ (8005fd0 <_sbrk+0x60>)
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f84:	4b13      	ldr	r3, [pc, #76]	@ (8005fd4 <_sbrk+0x64>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f8c:	4b11      	ldr	r3, [pc, #68]	@ (8005fd4 <_sbrk+0x64>)
 8005f8e:	4a12      	ldr	r2, [pc, #72]	@ (8005fd8 <_sbrk+0x68>)
 8005f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f92:	4b10      	ldr	r3, [pc, #64]	@ (8005fd4 <_sbrk+0x64>)
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4413      	add	r3, r2
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d207      	bcs.n	8005fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005fa0:	f006 f948 	bl	800c234 <__errno>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	220c      	movs	r2, #12
 8005fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005faa:	f04f 33ff 	mov.w	r3, #4294967295
 8005fae:	e009      	b.n	8005fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005fb0:	4b08      	ldr	r3, [pc, #32]	@ (8005fd4 <_sbrk+0x64>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005fb6:	4b07      	ldr	r3, [pc, #28]	@ (8005fd4 <_sbrk+0x64>)
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	4a05      	ldr	r2, [pc, #20]	@ (8005fd4 <_sbrk+0x64>)
 8005fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20020000 	.word	0x20020000
 8005fd0:	00000400 	.word	0x00000400
 8005fd4:	20000410 	.word	0x20000410
 8005fd8:	200009f8 	.word	0x200009f8

08005fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005fe0:	4b06      	ldr	r3, [pc, #24]	@ (8005ffc <SystemInit+0x20>)
 8005fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe6:	4a05      	ldr	r2, [pc, #20]	@ (8005ffc <SystemInit+0x20>)
 8005fe8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005fec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ff0:	bf00      	nop
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	e000ed00 	.word	0xe000ed00

08006000 <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08c      	sub	sp, #48	@ 0x30
 8006004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006006:	f107 030c 	add.w	r3, r7, #12
 800600a:	2224      	movs	r2, #36	@ 0x24
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f006 f8be 	bl	800c190 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006014:	1d3b      	adds	r3, r7, #4
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800601c:	4b22      	ldr	r3, [pc, #136]	@ (80060a8 <MX_TIM1_Init+0xa8>)
 800601e:	4a23      	ldr	r2, [pc, #140]	@ (80060ac <MX_TIM1_Init+0xac>)
 8006020:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8006022:	4b21      	ldr	r3, [pc, #132]	@ (80060a8 <MX_TIM1_Init+0xa8>)
 8006024:	2201      	movs	r2, #1
 8006026:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006028:	4b1f      	ldr	r3, [pc, #124]	@ (80060a8 <MX_TIM1_Init+0xa8>)
 800602a:	2200      	movs	r2, #0
 800602c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800602e:	4b1e      	ldr	r3, [pc, #120]	@ (80060a8 <MX_TIM1_Init+0xa8>)
 8006030:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006034:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006036:	4b1c      	ldr	r3, [pc, #112]	@ (80060a8 <MX_TIM1_Init+0xa8>)
 8006038:	2200      	movs	r2, #0
 800603a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800603c:	4b1a      	ldr	r3, [pc, #104]	@ (80060a8 <MX_TIM1_Init+0xa8>)
 800603e:	2200      	movs	r2, #0
 8006040:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006042:	4b19      	ldr	r3, [pc, #100]	@ (80060a8 <MX_TIM1_Init+0xa8>)
 8006044:	2200      	movs	r2, #0
 8006046:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006048:	2301      	movs	r3, #1
 800604a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800604c:	2300      	movs	r3, #0
 800604e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006050:	2301      	movs	r3, #1
 8006052:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006054:	2300      	movs	r3, #0
 8006056:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8006058:	230f      	movs	r3, #15
 800605a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800605c:	2300      	movs	r3, #0
 800605e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006060:	2301      	movs	r3, #1
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006064:	2300      	movs	r3, #0
 8006066:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8006068:	230f      	movs	r3, #15
 800606a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800606c:	f107 030c 	add.w	r3, r7, #12
 8006070:	4619      	mov	r1, r3
 8006072:	480d      	ldr	r0, [pc, #52]	@ (80060a8 <MX_TIM1_Init+0xa8>)
 8006074:	f003 fafc 	bl	8009670 <HAL_TIM_Encoder_Init>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800607e:	f7ff f9b5 	bl	80053ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006082:	2300      	movs	r3, #0
 8006084:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006086:	2300      	movs	r3, #0
 8006088:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800608a:	1d3b      	adds	r3, r7, #4
 800608c:	4619      	mov	r1, r3
 800608e:	4806      	ldr	r0, [pc, #24]	@ (80060a8 <MX_TIM1_Init+0xa8>)
 8006090:	f004 f8c8 	bl	800a224 <HAL_TIMEx_MasterConfigSynchronization>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800609a:	f7ff f9a7 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800609e:	bf00      	nop
 80060a0:	3730      	adds	r7, #48	@ 0x30
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000414 	.word	0x20000414
 80060ac:	40010000 	.word	0x40010000

080060b0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08c      	sub	sp, #48	@ 0x30
 80060b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80060b6:	f107 030c 	add.w	r3, r7, #12
 80060ba:	2224      	movs	r2, #36	@ 0x24
 80060bc:	2100      	movs	r1, #0
 80060be:	4618      	mov	r0, r3
 80060c0:	f006 f866 	bl	800c190 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060c4:	1d3b      	adds	r3, r7, #4
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80060cc:	4b21      	ldr	r3, [pc, #132]	@ (8006154 <MX_TIM2_Init+0xa4>)
 80060ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80060d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 80060d4:	4b1f      	ldr	r3, [pc, #124]	@ (8006154 <MX_TIM2_Init+0xa4>)
 80060d6:	2201      	movs	r2, #1
 80060d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060da:	4b1e      	ldr	r3, [pc, #120]	@ (8006154 <MX_TIM2_Init+0xa4>)
 80060dc:	2200      	movs	r2, #0
 80060de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80060e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006154 <MX_TIM2_Init+0xa4>)
 80060e2:	f04f 32ff 	mov.w	r2, #4294967295
 80060e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006154 <MX_TIM2_Init+0xa4>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060ee:	4b19      	ldr	r3, [pc, #100]	@ (8006154 <MX_TIM2_Init+0xa4>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80060f4:	2301      	movs	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80060f8:	2300      	movs	r3, #0
 80060fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80060fc:	2301      	movs	r3, #1
 80060fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006100:	2300      	movs	r3, #0
 8006102:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006104:	2300      	movs	r3, #0
 8006106:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006108:	2300      	movs	r3, #0
 800610a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800610c:	2301      	movs	r3, #1
 800610e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006110:	2300      	movs	r3, #0
 8006112:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8006118:	f107 030c 	add.w	r3, r7, #12
 800611c:	4619      	mov	r1, r3
 800611e:	480d      	ldr	r0, [pc, #52]	@ (8006154 <MX_TIM2_Init+0xa4>)
 8006120:	f003 faa6 	bl	8009670 <HAL_TIM_Encoder_Init>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800612a:	f7ff f95f 	bl	80053ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800612e:	2300      	movs	r3, #0
 8006130:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006132:	2300      	movs	r3, #0
 8006134:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006136:	1d3b      	adds	r3, r7, #4
 8006138:	4619      	mov	r1, r3
 800613a:	4806      	ldr	r0, [pc, #24]	@ (8006154 <MX_TIM2_Init+0xa4>)
 800613c:	f004 f872 	bl	800a224 <HAL_TIMEx_MasterConfigSynchronization>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8006146:	f7ff f951 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800614a:	bf00      	nop
 800614c:	3730      	adds	r7, #48	@ 0x30
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	2000045c 	.word	0x2000045c

08006158 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08c      	sub	sp, #48	@ 0x30
 800615c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800615e:	f107 030c 	add.w	r3, r7, #12
 8006162:	2224      	movs	r2, #36	@ 0x24
 8006164:	2100      	movs	r1, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f006 f812 	bl	800c190 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800616c:	1d3b      	adds	r3, r7, #4
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006174:	4b20      	ldr	r3, [pc, #128]	@ (80061f8 <MX_TIM3_Init+0xa0>)
 8006176:	4a21      	ldr	r2, [pc, #132]	@ (80061fc <MX_TIM3_Init+0xa4>)
 8006178:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 800617a:	4b1f      	ldr	r3, [pc, #124]	@ (80061f8 <MX_TIM3_Init+0xa0>)
 800617c:	2201      	movs	r2, #1
 800617e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006180:	4b1d      	ldr	r3, [pc, #116]	@ (80061f8 <MX_TIM3_Init+0xa0>)
 8006182:	2200      	movs	r2, #0
 8006184:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006186:	4b1c      	ldr	r3, [pc, #112]	@ (80061f8 <MX_TIM3_Init+0xa0>)
 8006188:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800618c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800618e:	4b1a      	ldr	r3, [pc, #104]	@ (80061f8 <MX_TIM3_Init+0xa0>)
 8006190:	2200      	movs	r2, #0
 8006192:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006194:	4b18      	ldr	r3, [pc, #96]	@ (80061f8 <MX_TIM3_Init+0xa0>)
 8006196:	2200      	movs	r2, #0
 8006198:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800619a:	2301      	movs	r3, #1
 800619c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800619e:	2300      	movs	r3, #0
 80061a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80061a2:	2301      	movs	r3, #1
 80061a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80061ae:	2300      	movs	r3, #0
 80061b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80061b2:	2301      	movs	r3, #1
 80061b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80061b6:	2300      	movs	r3, #0
 80061b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80061be:	f107 030c 	add.w	r3, r7, #12
 80061c2:	4619      	mov	r1, r3
 80061c4:	480c      	ldr	r0, [pc, #48]	@ (80061f8 <MX_TIM3_Init+0xa0>)
 80061c6:	f003 fa53 	bl	8009670 <HAL_TIM_Encoder_Init>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80061d0:	f7ff f90c 	bl	80053ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061d4:	2300      	movs	r3, #0
 80061d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061d8:	2300      	movs	r3, #0
 80061da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80061dc:	1d3b      	adds	r3, r7, #4
 80061de:	4619      	mov	r1, r3
 80061e0:	4805      	ldr	r0, [pc, #20]	@ (80061f8 <MX_TIM3_Init+0xa0>)
 80061e2:	f004 f81f 	bl	800a224 <HAL_TIMEx_MasterConfigSynchronization>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80061ec:	f7ff f8fe 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80061f0:	bf00      	nop
 80061f2:	3730      	adds	r7, #48	@ 0x30
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	200004a4 	.word	0x200004a4
 80061fc:	40000400 	.word	0x40000400

08006200 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08c      	sub	sp, #48	@ 0x30
 8006204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006206:	f107 030c 	add.w	r3, r7, #12
 800620a:	2224      	movs	r2, #36	@ 0x24
 800620c:	2100      	movs	r1, #0
 800620e:	4618      	mov	r0, r3
 8006210:	f005 ffbe 	bl	800c190 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006214:	1d3b      	adds	r3, r7, #4
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800621c:	4b20      	ldr	r3, [pc, #128]	@ (80062a0 <MX_TIM4_Init+0xa0>)
 800621e:	4a21      	ldr	r2, [pc, #132]	@ (80062a4 <MX_TIM4_Init+0xa4>)
 8006220:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 8006222:	4b1f      	ldr	r3, [pc, #124]	@ (80062a0 <MX_TIM4_Init+0xa0>)
 8006224:	2201      	movs	r2, #1
 8006226:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006228:	4b1d      	ldr	r3, [pc, #116]	@ (80062a0 <MX_TIM4_Init+0xa0>)
 800622a:	2200      	movs	r2, #0
 800622c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800622e:	4b1c      	ldr	r3, [pc, #112]	@ (80062a0 <MX_TIM4_Init+0xa0>)
 8006230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006234:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006236:	4b1a      	ldr	r3, [pc, #104]	@ (80062a0 <MX_TIM4_Init+0xa0>)
 8006238:	2200      	movs	r2, #0
 800623a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800623c:	4b18      	ldr	r3, [pc, #96]	@ (80062a0 <MX_TIM4_Init+0xa0>)
 800623e:	2200      	movs	r2, #0
 8006240:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006242:	2301      	movs	r3, #1
 8006244:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006246:	2300      	movs	r3, #0
 8006248:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800624a:	2301      	movs	r3, #1
 800624c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800624e:	2300      	movs	r3, #0
 8006250:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006256:	2300      	movs	r3, #0
 8006258:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800625a:	2301      	movs	r3, #1
 800625c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800625e:	2300      	movs	r3, #0
 8006260:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006262:	2300      	movs	r3, #0
 8006264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006266:	f107 030c 	add.w	r3, r7, #12
 800626a:	4619      	mov	r1, r3
 800626c:	480c      	ldr	r0, [pc, #48]	@ (80062a0 <MX_TIM4_Init+0xa0>)
 800626e:	f003 f9ff 	bl	8009670 <HAL_TIM_Encoder_Init>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8006278:	f7ff f8b8 	bl	80053ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800627c:	2300      	movs	r3, #0
 800627e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006280:	2300      	movs	r3, #0
 8006282:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006284:	1d3b      	adds	r3, r7, #4
 8006286:	4619      	mov	r1, r3
 8006288:	4805      	ldr	r0, [pc, #20]	@ (80062a0 <MX_TIM4_Init+0xa0>)
 800628a:	f003 ffcb 	bl	800a224 <HAL_TIMEx_MasterConfigSynchronization>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8006294:	f7ff f8aa 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006298:	bf00      	nop
 800629a:	3730      	adds	r7, #48	@ 0x30
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	200004ec 	.word	0x200004ec
 80062a4:	40000800 	.word	0x40000800

080062a8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08e      	sub	sp, #56	@ 0x38
 80062ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	605a      	str	r2, [r3, #4]
 80062b8:	609a      	str	r2, [r3, #8]
 80062ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062bc:	f107 0320 	add.w	r3, r7, #32
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062c6:	1d3b      	adds	r3, r7, #4
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	605a      	str	r2, [r3, #4]
 80062ce:	609a      	str	r2, [r3, #8]
 80062d0:	60da      	str	r2, [r3, #12]
 80062d2:	611a      	str	r2, [r3, #16]
 80062d4:	615a      	str	r2, [r3, #20]
 80062d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80062d8:	4b2c      	ldr	r3, [pc, #176]	@ (800638c <MX_TIM5_Init+0xe4>)
 80062da:	4a2d      	ldr	r2, [pc, #180]	@ (8006390 <MX_TIM5_Init+0xe8>)
 80062dc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 168-1;
 80062de:	4b2b      	ldr	r3, [pc, #172]	@ (800638c <MX_TIM5_Init+0xe4>)
 80062e0:	22a7      	movs	r2, #167	@ 0xa7
 80062e2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062e4:	4b29      	ldr	r3, [pc, #164]	@ (800638c <MX_TIM5_Init+0xe4>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80062ea:	4b28      	ldr	r3, [pc, #160]	@ (800638c <MX_TIM5_Init+0xe4>)
 80062ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80062f0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062f2:	4b26      	ldr	r3, [pc, #152]	@ (800638c <MX_TIM5_Init+0xe4>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062f8:	4b24      	ldr	r3, [pc, #144]	@ (800638c <MX_TIM5_Init+0xe4>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80062fe:	4823      	ldr	r0, [pc, #140]	@ (800638c <MX_TIM5_Init+0xe4>)
 8006300:	f003 f846 	bl	8009390 <HAL_TIM_Base_Init>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800630a:	f7ff f86f 	bl	80053ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800630e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006312:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8006314:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006318:	4619      	mov	r1, r3
 800631a:	481c      	ldr	r0, [pc, #112]	@ (800638c <MX_TIM5_Init+0xe4>)
 800631c:	f003 fb9e 	bl	8009a5c <HAL_TIM_ConfigClockSource>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8006326:	f7ff f861 	bl	80053ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800632a:	4818      	ldr	r0, [pc, #96]	@ (800638c <MX_TIM5_Init+0xe4>)
 800632c:	f003 f87f 	bl	800942e <HAL_TIM_PWM_Init>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8006336:	f7ff f859 	bl	80053ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800633a:	2300      	movs	r3, #0
 800633c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800633e:	2300      	movs	r3, #0
 8006340:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006342:	f107 0320 	add.w	r3, r7, #32
 8006346:	4619      	mov	r1, r3
 8006348:	4810      	ldr	r0, [pc, #64]	@ (800638c <MX_TIM5_Init+0xe4>)
 800634a:	f003 ff6b 	bl	800a224 <HAL_TIMEx_MasterConfigSynchronization>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8006354:	f7ff f84a 	bl	80053ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006358:	2360      	movs	r3, #96	@ 0x60
 800635a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006364:	2300      	movs	r3, #0
 8006366:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006368:	1d3b      	adds	r3, r7, #4
 800636a:	2208      	movs	r2, #8
 800636c:	4619      	mov	r1, r3
 800636e:	4807      	ldr	r0, [pc, #28]	@ (800638c <MX_TIM5_Init+0xe4>)
 8006370:	f003 fab2 	bl	80098d8 <HAL_TIM_PWM_ConfigChannel>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800637a:	f7ff f837 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800637e:	4803      	ldr	r0, [pc, #12]	@ (800638c <MX_TIM5_Init+0xe4>)
 8006380:	f000 fb6c 	bl	8006a5c <HAL_TIM_MspPostInit>

}
 8006384:	bf00      	nop
 8006386:	3738      	adds	r7, #56	@ 0x38
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000534 	.word	0x20000534
 8006390:	40000c00 	.word	0x40000c00

08006394 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b096      	sub	sp, #88	@ 0x58
 8006398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800639a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	605a      	str	r2, [r3, #4]
 80063a4:	609a      	str	r2, [r3, #8]
 80063a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	605a      	str	r2, [r3, #4]
 80063bc:	609a      	str	r2, [r3, #8]
 80063be:	60da      	str	r2, [r3, #12]
 80063c0:	611a      	str	r2, [r3, #16]
 80063c2:	615a      	str	r2, [r3, #20]
 80063c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80063c6:	1d3b      	adds	r3, r7, #4
 80063c8:	2220      	movs	r2, #32
 80063ca:	2100      	movs	r1, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f005 fedf 	bl	800c190 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80063d2:	4b3e      	ldr	r3, [pc, #248]	@ (80064cc <MX_TIM8_Init+0x138>)
 80063d4:	4a3e      	ldr	r2, [pc, #248]	@ (80064d0 <MX_TIM8_Init+0x13c>)
 80063d6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 80063d8:	4b3c      	ldr	r3, [pc, #240]	@ (80064cc <MX_TIM8_Init+0x138>)
 80063da:	22a7      	movs	r2, #167	@ 0xa7
 80063dc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063de:	4b3b      	ldr	r3, [pc, #236]	@ (80064cc <MX_TIM8_Init+0x138>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 80063e4:	4b39      	ldr	r3, [pc, #228]	@ (80064cc <MX_TIM8_Init+0x138>)
 80063e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80063ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063ec:	4b37      	ldr	r3, [pc, #220]	@ (80064cc <MX_TIM8_Init+0x138>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80063f2:	4b36      	ldr	r3, [pc, #216]	@ (80064cc <MX_TIM8_Init+0x138>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063f8:	4b34      	ldr	r3, [pc, #208]	@ (80064cc <MX_TIM8_Init+0x138>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80063fe:	4833      	ldr	r0, [pc, #204]	@ (80064cc <MX_TIM8_Init+0x138>)
 8006400:	f002 ffc6 	bl	8009390 <HAL_TIM_Base_Init>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800640a:	f7fe ffef 	bl	80053ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800640e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006412:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8006414:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006418:	4619      	mov	r1, r3
 800641a:	482c      	ldr	r0, [pc, #176]	@ (80064cc <MX_TIM8_Init+0x138>)
 800641c:	f003 fb1e 	bl	8009a5c <HAL_TIM_ConfigClockSource>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8006426:	f7fe ffe1 	bl	80053ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800642a:	4828      	ldr	r0, [pc, #160]	@ (80064cc <MX_TIM8_Init+0x138>)
 800642c:	f002 ffff 	bl	800942e <HAL_TIM_PWM_Init>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8006436:	f7fe ffd9 	bl	80053ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800643a:	2300      	movs	r3, #0
 800643c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800643e:	2300      	movs	r3, #0
 8006440:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006442:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006446:	4619      	mov	r1, r3
 8006448:	4820      	ldr	r0, [pc, #128]	@ (80064cc <MX_TIM8_Init+0x138>)
 800644a:	f003 feeb 	bl	800a224 <HAL_TIMEx_MasterConfigSynchronization>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8006454:	f7fe ffca 	bl	80053ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006458:	2360      	movs	r3, #96	@ 0x60
 800645a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006460:	2300      	movs	r3, #0
 8006462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006464:	2300      	movs	r3, #0
 8006466:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006468:	2300      	movs	r3, #0
 800646a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800646c:	2300      	movs	r3, #0
 800646e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006470:	2300      	movs	r3, #0
 8006472:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006478:	2200      	movs	r2, #0
 800647a:	4619      	mov	r1, r3
 800647c:	4813      	ldr	r0, [pc, #76]	@ (80064cc <MX_TIM8_Init+0x138>)
 800647e:	f003 fa2b 	bl	80098d8 <HAL_TIM_PWM_ConfigChannel>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8006488:	f7fe ffb0 	bl	80053ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800648c:	2300      	movs	r3, #0
 800648e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006490:	2300      	movs	r3, #0
 8006492:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800649c:	2300      	movs	r3, #0
 800649e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80064a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80064a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80064aa:	1d3b      	adds	r3, r7, #4
 80064ac:	4619      	mov	r1, r3
 80064ae:	4807      	ldr	r0, [pc, #28]	@ (80064cc <MX_TIM8_Init+0x138>)
 80064b0:	f003 ff34 	bl	800a31c <HAL_TIMEx_ConfigBreakDeadTime>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80064ba:	f7fe ff97 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80064be:	4803      	ldr	r0, [pc, #12]	@ (80064cc <MX_TIM8_Init+0x138>)
 80064c0:	f000 facc 	bl	8006a5c <HAL_TIM_MspPostInit>

}
 80064c4:	bf00      	nop
 80064c6:	3758      	adds	r7, #88	@ 0x58
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	2000057c 	.word	0x2000057c
 80064d0:	40010400 	.word	0x40010400

080064d4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08c      	sub	sp, #48	@ 0x30
 80064d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80064da:	f107 0320 	add.w	r3, r7, #32
 80064de:	2200      	movs	r2, #0
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	605a      	str	r2, [r3, #4]
 80064e4:	609a      	str	r2, [r3, #8]
 80064e6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064e8:	1d3b      	adds	r3, r7, #4
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	605a      	str	r2, [r3, #4]
 80064f0:	609a      	str	r2, [r3, #8]
 80064f2:	60da      	str	r2, [r3, #12]
 80064f4:	611a      	str	r2, [r3, #16]
 80064f6:	615a      	str	r2, [r3, #20]
 80064f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80064fa:	4b25      	ldr	r3, [pc, #148]	@ (8006590 <MX_TIM9_Init+0xbc>)
 80064fc:	4a25      	ldr	r2, [pc, #148]	@ (8006594 <MX_TIM9_Init+0xc0>)
 80064fe:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 8006500:	4b23      	ldr	r3, [pc, #140]	@ (8006590 <MX_TIM9_Init+0xbc>)
 8006502:	22a7      	movs	r2, #167	@ 0xa7
 8006504:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006506:	4b22      	ldr	r3, [pc, #136]	@ (8006590 <MX_TIM9_Init+0xbc>)
 8006508:	2200      	movs	r2, #0
 800650a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 800650c:	4b20      	ldr	r3, [pc, #128]	@ (8006590 <MX_TIM9_Init+0xbc>)
 800650e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006512:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006514:	4b1e      	ldr	r3, [pc, #120]	@ (8006590 <MX_TIM9_Init+0xbc>)
 8006516:	2200      	movs	r2, #0
 8006518:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800651a:	4b1d      	ldr	r3, [pc, #116]	@ (8006590 <MX_TIM9_Init+0xbc>)
 800651c:	2200      	movs	r2, #0
 800651e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8006520:	481b      	ldr	r0, [pc, #108]	@ (8006590 <MX_TIM9_Init+0xbc>)
 8006522:	f002 ff35 	bl	8009390 <HAL_TIM_Base_Init>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800652c:	f7fe ff5e 	bl	80053ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006530:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006534:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8006536:	f107 0320 	add.w	r3, r7, #32
 800653a:	4619      	mov	r1, r3
 800653c:	4814      	ldr	r0, [pc, #80]	@ (8006590 <MX_TIM9_Init+0xbc>)
 800653e:	f003 fa8d 	bl	8009a5c <HAL_TIM_ConfigClockSource>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8006548:	f7fe ff50 	bl	80053ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800654c:	4810      	ldr	r0, [pc, #64]	@ (8006590 <MX_TIM9_Init+0xbc>)
 800654e:	f002 ff6e 	bl	800942e <HAL_TIM_PWM_Init>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8006558:	f7fe ff48 	bl	80053ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800655c:	2360      	movs	r3, #96	@ 0x60
 800655e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800656c:	1d3b      	adds	r3, r7, #4
 800656e:	2200      	movs	r2, #0
 8006570:	4619      	mov	r1, r3
 8006572:	4807      	ldr	r0, [pc, #28]	@ (8006590 <MX_TIM9_Init+0xbc>)
 8006574:	f003 f9b0 	bl	80098d8 <HAL_TIM_PWM_ConfigChannel>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800657e:	f7fe ff35 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8006582:	4803      	ldr	r0, [pc, #12]	@ (8006590 <MX_TIM9_Init+0xbc>)
 8006584:	f000 fa6a 	bl	8006a5c <HAL_TIM_MspPostInit>

}
 8006588:	bf00      	nop
 800658a:	3730      	adds	r7, #48	@ 0x30
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	200005c4 	.word	0x200005c4
 8006594:	40014000 	.word	0x40014000

08006598 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800659e:	1d3b      	adds	r3, r7, #4
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	605a      	str	r2, [r3, #4]
 80065a6:	609a      	str	r2, [r3, #8]
 80065a8:	60da      	str	r2, [r3, #12]
 80065aa:	611a      	str	r2, [r3, #16]
 80065ac:	615a      	str	r2, [r3, #20]
 80065ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80065b0:	4b1e      	ldr	r3, [pc, #120]	@ (800662c <MX_TIM10_Init+0x94>)
 80065b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006630 <MX_TIM10_Init+0x98>)
 80065b4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80065b6:	4b1d      	ldr	r3, [pc, #116]	@ (800662c <MX_TIM10_Init+0x94>)
 80065b8:	22a7      	movs	r2, #167	@ 0xa7
 80065ba:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065bc:	4b1b      	ldr	r3, [pc, #108]	@ (800662c <MX_TIM10_Init+0x94>)
 80065be:	2200      	movs	r2, #0
 80065c0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 80065c2:	4b1a      	ldr	r3, [pc, #104]	@ (800662c <MX_TIM10_Init+0x94>)
 80065c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80065c8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065ca:	4b18      	ldr	r3, [pc, #96]	@ (800662c <MX_TIM10_Init+0x94>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065d0:	4b16      	ldr	r3, [pc, #88]	@ (800662c <MX_TIM10_Init+0x94>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80065d6:	4815      	ldr	r0, [pc, #84]	@ (800662c <MX_TIM10_Init+0x94>)
 80065d8:	f002 feda 	bl	8009390 <HAL_TIM_Base_Init>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80065e2:	f7fe ff03 	bl	80053ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80065e6:	4811      	ldr	r0, [pc, #68]	@ (800662c <MX_TIM10_Init+0x94>)
 80065e8:	f002 ff21 	bl	800942e <HAL_TIM_PWM_Init>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80065f2:	f7fe fefb 	bl	80053ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065f6:	2360      	movs	r3, #96	@ 0x60
 80065f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065fe:	2300      	movs	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006602:	2300      	movs	r3, #0
 8006604:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006606:	1d3b      	adds	r3, r7, #4
 8006608:	2200      	movs	r2, #0
 800660a:	4619      	mov	r1, r3
 800660c:	4807      	ldr	r0, [pc, #28]	@ (800662c <MX_TIM10_Init+0x94>)
 800660e:	f003 f963 	bl	80098d8 <HAL_TIM_PWM_ConfigChannel>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006618:	f7fe fee8 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800661c:	4803      	ldr	r0, [pc, #12]	@ (800662c <MX_TIM10_Init+0x94>)
 800661e:	f000 fa1d 	bl	8006a5c <HAL_TIM_MspPostInit>

}
 8006622:	bf00      	nop
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	2000060c 	.word	0x2000060c
 8006630:	40014400 	.word	0x40014400

08006634 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b088      	sub	sp, #32
 8006638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800663a:	1d3b      	adds	r3, r7, #4
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	605a      	str	r2, [r3, #4]
 8006642:	609a      	str	r2, [r3, #8]
 8006644:	60da      	str	r2, [r3, #12]
 8006646:	611a      	str	r2, [r3, #16]
 8006648:	615a      	str	r2, [r3, #20]
 800664a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800664c:	4b1e      	ldr	r3, [pc, #120]	@ (80066c8 <MX_TIM13_Init+0x94>)
 800664e:	4a1f      	ldr	r2, [pc, #124]	@ (80066cc <MX_TIM13_Init+0x98>)
 8006650:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8006652:	4b1d      	ldr	r3, [pc, #116]	@ (80066c8 <MX_TIM13_Init+0x94>)
 8006654:	2200      	movs	r2, #0
 8006656:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006658:	4b1b      	ldr	r3, [pc, #108]	@ (80066c8 <MX_TIM13_Init+0x94>)
 800665a:	2200      	movs	r2, #0
 800665c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800665e:	4b1a      	ldr	r3, [pc, #104]	@ (80066c8 <MX_TIM13_Init+0x94>)
 8006660:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006664:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006666:	4b18      	ldr	r3, [pc, #96]	@ (80066c8 <MX_TIM13_Init+0x94>)
 8006668:	2200      	movs	r2, #0
 800666a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800666c:	4b16      	ldr	r3, [pc, #88]	@ (80066c8 <MX_TIM13_Init+0x94>)
 800666e:	2200      	movs	r2, #0
 8006670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006672:	4815      	ldr	r0, [pc, #84]	@ (80066c8 <MX_TIM13_Init+0x94>)
 8006674:	f002 fe8c 	bl	8009390 <HAL_TIM_Base_Init>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800667e:	f7fe feb5 	bl	80053ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8006682:	4811      	ldr	r0, [pc, #68]	@ (80066c8 <MX_TIM13_Init+0x94>)
 8006684:	f002 fed3 	bl	800942e <HAL_TIM_PWM_Init>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800668e:	f7fe fead 	bl	80053ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006692:	2360      	movs	r3, #96	@ 0x60
 8006694:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800669a:	2300      	movs	r3, #0
 800669c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80066a2:	1d3b      	adds	r3, r7, #4
 80066a4:	2200      	movs	r2, #0
 80066a6:	4619      	mov	r1, r3
 80066a8:	4807      	ldr	r0, [pc, #28]	@ (80066c8 <MX_TIM13_Init+0x94>)
 80066aa:	f003 f915 	bl	80098d8 <HAL_TIM_PWM_ConfigChannel>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80066b4:	f7fe fe9a 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80066b8:	4803      	ldr	r0, [pc, #12]	@ (80066c8 <MX_TIM13_Init+0x94>)
 80066ba:	f000 f9cf 	bl	8006a5c <HAL_TIM_MspPostInit>

}
 80066be:	bf00      	nop
 80066c0:	3720      	adds	r7, #32
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20000654 	.word	0x20000654
 80066cc:	40001c00 	.word	0x40001c00

080066d0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80066d6:	1d3b      	adds	r3, r7, #4
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	605a      	str	r2, [r3, #4]
 80066de:	609a      	str	r2, [r3, #8]
 80066e0:	60da      	str	r2, [r3, #12]
 80066e2:	611a      	str	r2, [r3, #16]
 80066e4:	615a      	str	r2, [r3, #20]
 80066e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80066e8:	4b1e      	ldr	r3, [pc, #120]	@ (8006764 <MX_TIM14_Init+0x94>)
 80066ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006768 <MX_TIM14_Init+0x98>)
 80066ec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 80066ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006764 <MX_TIM14_Init+0x94>)
 80066f0:	2253      	movs	r2, #83	@ 0x53
 80066f2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006764 <MX_TIM14_Init+0x94>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 40000-1;
 80066fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006764 <MX_TIM14_Init+0x94>)
 80066fc:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8006700:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006702:	4b18      	ldr	r3, [pc, #96]	@ (8006764 <MX_TIM14_Init+0x94>)
 8006704:	2200      	movs	r2, #0
 8006706:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006708:	4b16      	ldr	r3, [pc, #88]	@ (8006764 <MX_TIM14_Init+0x94>)
 800670a:	2200      	movs	r2, #0
 800670c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800670e:	4815      	ldr	r0, [pc, #84]	@ (8006764 <MX_TIM14_Init+0x94>)
 8006710:	f002 fe3e 	bl	8009390 <HAL_TIM_Base_Init>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800671a:	f7fe fe67 	bl	80053ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800671e:	4811      	ldr	r0, [pc, #68]	@ (8006764 <MX_TIM14_Init+0x94>)
 8006720:	f002 fe85 	bl	800942e <HAL_TIM_PWM_Init>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800672a:	f7fe fe5f 	bl	80053ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800672e:	2360      	movs	r3, #96	@ 0x60
 8006730:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8006732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006736:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006738:	2300      	movs	r3, #0
 800673a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800673c:	2300      	movs	r3, #0
 800673e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006740:	1d3b      	adds	r3, r7, #4
 8006742:	2200      	movs	r2, #0
 8006744:	4619      	mov	r1, r3
 8006746:	4807      	ldr	r0, [pc, #28]	@ (8006764 <MX_TIM14_Init+0x94>)
 8006748:	f003 f8c6 	bl	80098d8 <HAL_TIM_PWM_ConfigChannel>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8006752:	f7fe fe4b 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8006756:	4803      	ldr	r0, [pc, #12]	@ (8006764 <MX_TIM14_Init+0x94>)
 8006758:	f000 f980 	bl	8006a5c <HAL_TIM_MspPostInit>

}
 800675c:	bf00      	nop
 800675e:	3720      	adds	r7, #32
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	2000069c 	.word	0x2000069c
 8006768:	40002000 	.word	0x40002000

0800676c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b090      	sub	sp, #64	@ 0x40
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006774:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	605a      	str	r2, [r3, #4]
 800677e:	609a      	str	r2, [r3, #8]
 8006780:	60da      	str	r2, [r3, #12]
 8006782:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a65      	ldr	r2, [pc, #404]	@ (8006920 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d12d      	bne.n	80067ea <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800678e:	2300      	movs	r3, #0
 8006790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006792:	4b64      	ldr	r3, [pc, #400]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8006794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006796:	4a63      	ldr	r2, [pc, #396]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8006798:	f043 0301 	orr.w	r3, r3, #1
 800679c:	6453      	str	r3, [r2, #68]	@ 0x44
 800679e:	4b61      	ldr	r3, [pc, #388]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80067a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80067aa:	2300      	movs	r3, #0
 80067ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ae:	4b5d      	ldr	r3, [pc, #372]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80067b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b2:	4a5c      	ldr	r2, [pc, #368]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80067b4:	f043 0310 	orr.w	r3, r3, #16
 80067b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80067ba:	4b5a      	ldr	r3, [pc, #360]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80067bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067be:	f003 0310 	and.w	r3, r3, #16
 80067c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M1_E1_Pin|M1_E2_Pin;
 80067c6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80067ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067cc:	2302      	movs	r3, #2
 80067ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d0:	2300      	movs	r3, #0
 80067d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067d4:	2300      	movs	r3, #0
 80067d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80067d8:	2301      	movs	r3, #1
 80067da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80067e0:	4619      	mov	r1, r3
 80067e2:	4851      	ldr	r0, [pc, #324]	@ (8006928 <HAL_TIM_Encoder_MspInit+0x1bc>)
 80067e4:	f000 ffa2 	bl	800772c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80067e8:	e095      	b.n	8006916 <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(tim_encoderHandle->Instance==TIM2)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067f2:	d12c      	bne.n	800684e <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80067f4:	2300      	movs	r3, #0
 80067f6:	623b      	str	r3, [r7, #32]
 80067f8:	4b4a      	ldr	r3, [pc, #296]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80067fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fc:	4a49      	ldr	r2, [pc, #292]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	6413      	str	r3, [r2, #64]	@ 0x40
 8006804:	4b47      	ldr	r3, [pc, #284]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8006806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	623b      	str	r3, [r7, #32]
 800680e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006810:	2300      	movs	r3, #0
 8006812:	61fb      	str	r3, [r7, #28]
 8006814:	4b43      	ldr	r3, [pc, #268]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8006816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006818:	4a42      	ldr	r2, [pc, #264]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800681a:	f043 0301 	orr.w	r3, r3, #1
 800681e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006820:	4b40      	ldr	r3, [pc, #256]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8006822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	61fb      	str	r3, [r7, #28]
 800682a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = M4_E1_Pin|M4_E2_Pin;
 800682c:	2303      	movs	r3, #3
 800682e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006830:	2302      	movs	r3, #2
 8006832:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006834:	2300      	movs	r3, #0
 8006836:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006838:	2300      	movs	r3, #0
 800683a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800683c:	2301      	movs	r3, #1
 800683e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006840:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006844:	4619      	mov	r1, r3
 8006846:	4839      	ldr	r0, [pc, #228]	@ (800692c <HAL_TIM_Encoder_MspInit+0x1c0>)
 8006848:	f000 ff70 	bl	800772c <HAL_GPIO_Init>
}
 800684c:	e063      	b.n	8006916 <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(tim_encoderHandle->Instance==TIM3)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a37      	ldr	r2, [pc, #220]	@ (8006930 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d12c      	bne.n	80068b2 <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006858:	2300      	movs	r3, #0
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	4b31      	ldr	r3, [pc, #196]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800685e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006860:	4a30      	ldr	r2, [pc, #192]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8006862:	f043 0302 	orr.w	r3, r3, #2
 8006866:	6413      	str	r3, [r2, #64]	@ 0x40
 8006868:	4b2e      	ldr	r3, [pc, #184]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800686a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	4b2a      	ldr	r3, [pc, #168]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800687a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800687c:	4a29      	ldr	r2, [pc, #164]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800687e:	f043 0301 	orr.w	r3, r3, #1
 8006882:	6313      	str	r3, [r2, #48]	@ 0x30
 8006884:	4b27      	ldr	r3, [pc, #156]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8006886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M3_E1_Pin|M3_E2_Pin;
 8006890:	23c0      	movs	r3, #192	@ 0xc0
 8006892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006894:	2302      	movs	r3, #2
 8006896:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006898:	2300      	movs	r3, #0
 800689a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800689c:	2300      	movs	r3, #0
 800689e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80068a0:	2302      	movs	r3, #2
 80068a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80068a8:	4619      	mov	r1, r3
 80068aa:	4820      	ldr	r0, [pc, #128]	@ (800692c <HAL_TIM_Encoder_MspInit+0x1c0>)
 80068ac:	f000 ff3e 	bl	800772c <HAL_GPIO_Init>
}
 80068b0:	e031      	b.n	8006916 <HAL_TIM_Encoder_MspInit+0x1aa>
  else if(tim_encoderHandle->Instance==TIM4)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006934 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d12c      	bne.n	8006916 <HAL_TIM_Encoder_MspInit+0x1aa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80068bc:	2300      	movs	r3, #0
 80068be:	613b      	str	r3, [r7, #16]
 80068c0:	4b18      	ldr	r3, [pc, #96]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80068c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c4:	4a17      	ldr	r2, [pc, #92]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80068c6:	f043 0304 	orr.w	r3, r3, #4
 80068ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80068cc:	4b15      	ldr	r3, [pc, #84]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80068ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	4b11      	ldr	r3, [pc, #68]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80068de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e0:	4a10      	ldr	r2, [pc, #64]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80068e2:	f043 0308 	orr.w	r3, r3, #8
 80068e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80068e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006924 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80068ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2_E1_Pin|M2_E2_Pin;
 80068f4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80068f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068fa:	2302      	movs	r3, #2
 80068fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fe:	2300      	movs	r3, #0
 8006900:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006902:	2300      	movs	r3, #0
 8006904:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006906:	2302      	movs	r3, #2
 8006908:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800690a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800690e:	4619      	mov	r1, r3
 8006910:	4809      	ldr	r0, [pc, #36]	@ (8006938 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8006912:	f000 ff0b 	bl	800772c <HAL_GPIO_Init>
}
 8006916:	bf00      	nop
 8006918:	3740      	adds	r7, #64	@ 0x40
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	40010000 	.word	0x40010000
 8006924:	40023800 	.word	0x40023800
 8006928:	40021000 	.word	0x40021000
 800692c:	40020000 	.word	0x40020000
 8006930:	40000400 	.word	0x40000400
 8006934:	40000800 	.word	0x40000800
 8006938:	40020c00 	.word	0x40020c00

0800693c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800693c:	b480      	push	{r7}
 800693e:	b089      	sub	sp, #36	@ 0x24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a3d      	ldr	r2, [pc, #244]	@ (8006a40 <HAL_TIM_Base_MspInit+0x104>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d10e      	bne.n	800696c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800694e:	2300      	movs	r3, #0
 8006950:	61fb      	str	r3, [r7, #28]
 8006952:	4b3c      	ldr	r3, [pc, #240]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006956:	4a3b      	ldr	r2, [pc, #236]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 8006958:	f043 0308 	orr.w	r3, r3, #8
 800695c:	6413      	str	r3, [r2, #64]	@ 0x40
 800695e:	4b39      	ldr	r3, [pc, #228]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 8006960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006962:	f003 0308 	and.w	r3, r3, #8
 8006966:	61fb      	str	r3, [r7, #28]
 8006968:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800696a:	e062      	b.n	8006a32 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM8)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a35      	ldr	r2, [pc, #212]	@ (8006a48 <HAL_TIM_Base_MspInit+0x10c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d10e      	bne.n	8006994 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006976:	2300      	movs	r3, #0
 8006978:	61bb      	str	r3, [r7, #24]
 800697a:	4b32      	ldr	r3, [pc, #200]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 800697c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697e:	4a31      	ldr	r2, [pc, #196]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 8006980:	f043 0302 	orr.w	r3, r3, #2
 8006984:	6453      	str	r3, [r2, #68]	@ 0x44
 8006986:	4b2f      	ldr	r3, [pc, #188]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 8006988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	61bb      	str	r3, [r7, #24]
 8006990:	69bb      	ldr	r3, [r7, #24]
}
 8006992:	e04e      	b.n	8006a32 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM9)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a2c      	ldr	r2, [pc, #176]	@ (8006a4c <HAL_TIM_Base_MspInit+0x110>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d10e      	bne.n	80069bc <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800699e:	2300      	movs	r3, #0
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	4b28      	ldr	r3, [pc, #160]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 80069a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a6:	4a27      	ldr	r2, [pc, #156]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 80069a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80069ae:	4b25      	ldr	r3, [pc, #148]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 80069b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	697b      	ldr	r3, [r7, #20]
}
 80069ba:	e03a      	b.n	8006a32 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM10)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a23      	ldr	r2, [pc, #140]	@ (8006a50 <HAL_TIM_Base_MspInit+0x114>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d10e      	bne.n	80069e4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80069c6:	2300      	movs	r3, #0
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 80069cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 80069d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80069d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 80069d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	693b      	ldr	r3, [r7, #16]
}
 80069e2:	e026      	b.n	8006a32 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM13)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a1a      	ldr	r2, [pc, #104]	@ (8006a54 <HAL_TIM_Base_MspInit+0x118>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d10e      	bne.n	8006a0c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	4b14      	ldr	r3, [pc, #80]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 80069f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f6:	4a13      	ldr	r2, [pc, #76]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 80069f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80069fe:	4b11      	ldr	r3, [pc, #68]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 8006a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	68fb      	ldr	r3, [r7, #12]
}
 8006a0a:	e012      	b.n	8006a32 <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM14)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a11      	ldr	r2, [pc, #68]	@ (8006a58 <HAL_TIM_Base_MspInit+0x11c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d10d      	bne.n	8006a32 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006a16:	2300      	movs	r3, #0
 8006a18:	60bb      	str	r3, [r7, #8]
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1e:	4a09      	ldr	r2, [pc, #36]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 8006a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a26:	4b07      	ldr	r3, [pc, #28]	@ (8006a44 <HAL_TIM_Base_MspInit+0x108>)
 8006a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a2e:	60bb      	str	r3, [r7, #8]
 8006a30:	68bb      	ldr	r3, [r7, #8]
}
 8006a32:	bf00      	nop
 8006a34:	3724      	adds	r7, #36	@ 0x24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40000c00 	.word	0x40000c00
 8006a44:	40023800 	.word	0x40023800
 8006a48:	40010400 	.word	0x40010400
 8006a4c:	40014000 	.word	0x40014000
 8006a50:	40014400 	.word	0x40014400
 8006a54:	40001c00 	.word	0x40001c00
 8006a58:	40002000 	.word	0x40002000

08006a5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08e      	sub	sp, #56	@ 0x38
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	605a      	str	r2, [r3, #4]
 8006a6e:	609a      	str	r2, [r3, #8]
 8006a70:	60da      	str	r2, [r3, #12]
 8006a72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a6d      	ldr	r2, [pc, #436]	@ (8006c30 <HAL_TIM_MspPostInit+0x1d4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d11e      	bne.n	8006abc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a7e:	2300      	movs	r3, #0
 8006a80:	623b      	str	r3, [r7, #32]
 8006a82:	4b6c      	ldr	r3, [pc, #432]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a86:	4a6b      	ldr	r2, [pc, #428]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006a88:	f043 0301 	orr.w	r3, r3, #1
 8006a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a8e:	4b69      	ldr	r3, [pc, #420]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	623b      	str	r3, [r7, #32]
 8006a98:	6a3b      	ldr	r3, [r7, #32]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin;
 8006a9a:	2304      	movs	r3, #4
 8006a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006aaa:	2302      	movs	r3, #2
 8006aac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8006aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4860      	ldr	r0, [pc, #384]	@ (8006c38 <HAL_TIM_MspPostInit+0x1dc>)
 8006ab6:	f000 fe39 	bl	800772c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8006aba:	e0b4      	b.n	8006c26 <HAL_TIM_MspPostInit+0x1ca>
  else if(timHandle->Instance==TIM8)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a5e      	ldr	r2, [pc, #376]	@ (8006c3c <HAL_TIM_MspPostInit+0x1e0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d11e      	bne.n	8006b04 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	4b5a      	ldr	r3, [pc, #360]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ace:	4a59      	ldr	r2, [pc, #356]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006ad0:	f043 0304 	orr.w	r3, r3, #4
 8006ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ad6:	4b57      	ldr	r3, [pc, #348]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	61fb      	str	r3, [r7, #28]
 8006ae0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = M2_PWM_Pin;
 8006ae2:	2340      	movs	r3, #64	@ 0x40
 8006ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006aee:	2300      	movs	r3, #0
 8006af0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006af2:	2303      	movs	r3, #3
 8006af4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(M2_PWM_GPIO_Port, &GPIO_InitStruct);
 8006af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006afa:	4619      	mov	r1, r3
 8006afc:	4850      	ldr	r0, [pc, #320]	@ (8006c40 <HAL_TIM_MspPostInit+0x1e4>)
 8006afe:	f000 fe15 	bl	800772c <HAL_GPIO_Init>
}
 8006b02:	e090      	b.n	8006c26 <HAL_TIM_MspPostInit+0x1ca>
  else if(timHandle->Instance==TIM9)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a4e      	ldr	r2, [pc, #312]	@ (8006c44 <HAL_TIM_MspPostInit+0x1e8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d11e      	bne.n	8006b4c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	4b48      	ldr	r3, [pc, #288]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b16:	4a47      	ldr	r2, [pc, #284]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006b18:	f043 0310 	orr.w	r3, r3, #16
 8006b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b1e:	4b45      	ldr	r3, [pc, #276]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b22:	f003 0310 	and.w	r3, r3, #16
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M3_PWM_Pin;
 8006b2a:	2320      	movs	r3, #32
 8006b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b2e:	2302      	movs	r3, #2
 8006b30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b36:	2300      	movs	r3, #0
 8006b38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(M3_PWM_GPIO_Port, &GPIO_InitStruct);
 8006b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b42:	4619      	mov	r1, r3
 8006b44:	4840      	ldr	r0, [pc, #256]	@ (8006c48 <HAL_TIM_MspPostInit+0x1ec>)
 8006b46:	f000 fdf1 	bl	800772c <HAL_GPIO_Init>
}
 8006b4a:	e06c      	b.n	8006c26 <HAL_TIM_MspPostInit+0x1ca>
  else if(timHandle->Instance==TIM10)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a3e      	ldr	r2, [pc, #248]	@ (8006c4c <HAL_TIM_MspPostInit+0x1f0>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d11e      	bne.n	8006b94 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	4b36      	ldr	r3, [pc, #216]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5e:	4a35      	ldr	r2, [pc, #212]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006b60:	f043 0320 	orr.w	r3, r3, #32
 8006b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b66:	4b33      	ldr	r3, [pc, #204]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6a:	f003 0320 	and.w	r3, r3, #32
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M4_PWM_Pin;
 8006b72:	2340      	movs	r3, #64	@ 0x40
 8006b74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b76:	2302      	movs	r3, #2
 8006b78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006b82:	2303      	movs	r3, #3
 8006b84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(M4_PWM_GPIO_Port, &GPIO_InitStruct);
 8006b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4830      	ldr	r0, [pc, #192]	@ (8006c50 <HAL_TIM_MspPostInit+0x1f4>)
 8006b8e:	f000 fdcd 	bl	800772c <HAL_GPIO_Init>
}
 8006b92:	e048      	b.n	8006c26 <HAL_TIM_MspPostInit+0x1ca>
  else if(timHandle->Instance==TIM13)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a2e      	ldr	r2, [pc, #184]	@ (8006c54 <HAL_TIM_MspPostInit+0x1f8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d11f      	bne.n	8006bde <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	613b      	str	r3, [r7, #16]
 8006ba2:	4b24      	ldr	r3, [pc, #144]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba6:	4a23      	ldr	r2, [pc, #140]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006ba8:	f043 0320 	orr.w	r3, r3, #32
 8006bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8006bae:	4b21      	ldr	r3, [pc, #132]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	613b      	str	r3, [r7, #16]
 8006bb8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo2_Pin;
 8006bba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8006bcc:	2309      	movs	r3, #9
 8006bce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo2_GPIO_Port, &GPIO_InitStruct);
 8006bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	481e      	ldr	r0, [pc, #120]	@ (8006c50 <HAL_TIM_MspPostInit+0x1f4>)
 8006bd8:	f000 fda8 	bl	800772c <HAL_GPIO_Init>
}
 8006bdc:	e023      	b.n	8006c26 <HAL_TIM_MspPostInit+0x1ca>
  else if(timHandle->Instance==TIM14)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1d      	ldr	r2, [pc, #116]	@ (8006c58 <HAL_TIM_MspPostInit+0x1fc>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d11e      	bne.n	8006c26 <HAL_TIM_MspPostInit+0x1ca>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006be8:	2300      	movs	r3, #0
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	4b11      	ldr	r3, [pc, #68]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf0:	4a10      	ldr	r2, [pc, #64]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006bf2:	f043 0320 	orr.w	r3, r3, #32
 8006bf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8006bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8006c34 <HAL_TIM_MspPostInit+0x1d8>)
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfc:	f003 0320 	and.w	r3, r3, #32
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_Pin;
 8006c04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c12:	2300      	movs	r3, #0
 8006c14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8006c16:	2309      	movs	r3, #9
 8006c18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo1_GPIO_Port, &GPIO_InitStruct);
 8006c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c1e:	4619      	mov	r1, r3
 8006c20:	480b      	ldr	r0, [pc, #44]	@ (8006c50 <HAL_TIM_MspPostInit+0x1f4>)
 8006c22:	f000 fd83 	bl	800772c <HAL_GPIO_Init>
}
 8006c26:	bf00      	nop
 8006c28:	3738      	adds	r7, #56	@ 0x38
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	40000c00 	.word	0x40000c00
 8006c34:	40023800 	.word	0x40023800
 8006c38:	40020000 	.word	0x40020000
 8006c3c:	40010400 	.word	0x40010400
 8006c40:	40020800 	.word	0x40020800
 8006c44:	40014000 	.word	0x40014000
 8006c48:	40021000 	.word	0x40021000
 8006c4c:	40014400 	.word	0x40014400
 8006c50:	40021400 	.word	0x40021400
 8006c54:	40001c00 	.word	0x40001c00
 8006c58:	40002000 	.word	0x40002000

08006c5c <Ultrasonic_Init>:

// 全局传感器数组
static UltrasonicSensor* active_sensors[MAX_ULTRASONIC_SENSORS] = {0};
static uint8_t sensor_count = 0;

void Ultrasonic_Init(UltrasonicSensor* sensor) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
    if (sensor_count >= MAX_ULTRASONIC_SENSORS) return;
 8006c64:	4b20      	ldr	r3, [pc, #128]	@ (8006ce8 <Ultrasonic_Init+0x8c>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d838      	bhi.n	8006cde <Ultrasonic_Init+0x82>
    
    // 配置Trig为输出
    GPIO_InitTypeDef gpio_init = {
 8006c6c:	f107 030c 	add.w	r3, r7, #12
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	605a      	str	r2, [r3, #4]
 8006c76:	609a      	str	r2, [r3, #8]
 8006c78:	60da      	str	r2, [r3, #12]
 8006c7a:	611a      	str	r2, [r3, #16]
        .Pin = sensor->trig_pin,
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	889b      	ldrh	r3, [r3, #4]
    GPIO_InitTypeDef gpio_init = {
 8006c80:	60fb      	str	r3, [r7, #12]
 8006c82:	2301      	movs	r3, #1
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	2302      	movs	r3, #2
 8006c88:	61bb      	str	r3, [r7, #24]
        .Mode = GPIO_MODE_OUTPUT_PP,
        .Pull = GPIO_NOPULL,
        .Speed = GPIO_SPEED_FREQ_HIGH
    };
    HAL_GPIO_Init(sensor->trig_port, &gpio_init);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f107 020c 	add.w	r2, r7, #12
 8006c92:	4611      	mov	r1, r2
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 fd49 	bl	800772c <HAL_GPIO_Init>
    
    // 配置Echo为中断输入
    gpio_init.Pin = sensor->echo_pin;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	899b      	ldrh	r3, [r3, #12]
 8006c9e:	60fb      	str	r3, [r7, #12]
    gpio_init.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006ca0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006ca4:	613b      	str	r3, [r7, #16]
    gpio_init.Pull = GPIO_PULLDOWN;
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(sensor->echo_port, &gpio_init);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f107 020c 	add.w	r2, r7, #12
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fd39 	bl	800772c <HAL_GPIO_Init>
    
    sensor->state = US_STATE_IDLE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	739a      	strb	r2, [r3, #14]
    sensor->data_ready = 0;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	771a      	strb	r2, [r3, #28]
    
    // 添加到活动传感器数组
    active_sensors[sensor_count++] = sensor;
 8006cc6:	4b08      	ldr	r3, [pc, #32]	@ (8006ce8 <Ultrasonic_Init+0x8c>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	b2d1      	uxtb	r1, r2
 8006cce:	4a06      	ldr	r2, [pc, #24]	@ (8006ce8 <Ultrasonic_Init+0x8c>)
 8006cd0:	7011      	strb	r1, [r2, #0]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4a05      	ldr	r2, [pc, #20]	@ (8006cec <Ultrasonic_Init+0x90>)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006cdc:	e000      	b.n	8006ce0 <Ultrasonic_Init+0x84>
    if (sensor_count >= MAX_ULTRASONIC_SENSORS) return;
 8006cde:	bf00      	nop
}
 8006ce0:	3720      	adds	r7, #32
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	200006f4 	.word	0x200006f4
 8006cec:	200006e4 	.word	0x200006e4

08006cf0 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8006cf4:	4b11      	ldr	r3, [pc, #68]	@ (8006d3c <MX_UART4_Init+0x4c>)
 8006cf6:	4a12      	ldr	r2, [pc, #72]	@ (8006d40 <MX_UART4_Init+0x50>)
 8006cf8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8006cfa:	4b10      	ldr	r3, [pc, #64]	@ (8006d3c <MX_UART4_Init+0x4c>)
 8006cfc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006d00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006d02:	4b0e      	ldr	r3, [pc, #56]	@ (8006d3c <MX_UART4_Init+0x4c>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006d08:	4b0c      	ldr	r3, [pc, #48]	@ (8006d3c <MX_UART4_Init+0x4c>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d3c <MX_UART4_Init+0x4c>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006d14:	4b09      	ldr	r3, [pc, #36]	@ (8006d3c <MX_UART4_Init+0x4c>)
 8006d16:	220c      	movs	r2, #12
 8006d18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d1a:	4b08      	ldr	r3, [pc, #32]	@ (8006d3c <MX_UART4_Init+0x4c>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d20:	4b06      	ldr	r3, [pc, #24]	@ (8006d3c <MX_UART4_Init+0x4c>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006d26:	4805      	ldr	r0, [pc, #20]	@ (8006d3c <MX_UART4_Init+0x4c>)
 8006d28:	f003 fb4a 	bl	800a3c0 <HAL_UART_Init>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8006d32:	f7fe fb5b 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8006d36:	bf00      	nop
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	200006f8 	.word	0x200006f8
 8006d40:	40004c00 	.word	0x40004c00

08006d44 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006d48:	4b11      	ldr	r3, [pc, #68]	@ (8006d90 <MX_UART5_Init+0x4c>)
 8006d4a:	4a12      	ldr	r2, [pc, #72]	@ (8006d94 <MX_UART5_Init+0x50>)
 8006d4c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8006d4e:	4b10      	ldr	r3, [pc, #64]	@ (8006d90 <MX_UART5_Init+0x4c>)
 8006d50:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006d54:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006d56:	4b0e      	ldr	r3, [pc, #56]	@ (8006d90 <MX_UART5_Init+0x4c>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d90 <MX_UART5_Init+0x4c>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006d62:	4b0b      	ldr	r3, [pc, #44]	@ (8006d90 <MX_UART5_Init+0x4c>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006d68:	4b09      	ldr	r3, [pc, #36]	@ (8006d90 <MX_UART5_Init+0x4c>)
 8006d6a:	220c      	movs	r2, #12
 8006d6c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d6e:	4b08      	ldr	r3, [pc, #32]	@ (8006d90 <MX_UART5_Init+0x4c>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d74:	4b06      	ldr	r3, [pc, #24]	@ (8006d90 <MX_UART5_Init+0x4c>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006d7a:	4805      	ldr	r0, [pc, #20]	@ (8006d90 <MX_UART5_Init+0x4c>)
 8006d7c:	f003 fb20 	bl	800a3c0 <HAL_UART_Init>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8006d86:	f7fe fb31 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006d8a:	bf00      	nop
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	20000740 	.word	0x20000740
 8006d94:	40005000 	.word	0x40005000

08006d98 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006d9c:	4b11      	ldr	r3, [pc, #68]	@ (8006de4 <MX_USART1_UART_Init+0x4c>)
 8006d9e:	4a12      	ldr	r2, [pc, #72]	@ (8006de8 <MX_USART1_UART_Init+0x50>)
 8006da0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006da2:	4b10      	ldr	r3, [pc, #64]	@ (8006de4 <MX_USART1_UART_Init+0x4c>)
 8006da4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006da8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006daa:	4b0e      	ldr	r3, [pc, #56]	@ (8006de4 <MX_USART1_UART_Init+0x4c>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006db0:	4b0c      	ldr	r3, [pc, #48]	@ (8006de4 <MX_USART1_UART_Init+0x4c>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006db6:	4b0b      	ldr	r3, [pc, #44]	@ (8006de4 <MX_USART1_UART_Init+0x4c>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006dbc:	4b09      	ldr	r3, [pc, #36]	@ (8006de4 <MX_USART1_UART_Init+0x4c>)
 8006dbe:	220c      	movs	r2, #12
 8006dc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006dc2:	4b08      	ldr	r3, [pc, #32]	@ (8006de4 <MX_USART1_UART_Init+0x4c>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006dc8:	4b06      	ldr	r3, [pc, #24]	@ (8006de4 <MX_USART1_UART_Init+0x4c>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006dce:	4805      	ldr	r0, [pc, #20]	@ (8006de4 <MX_USART1_UART_Init+0x4c>)
 8006dd0:	f003 faf6 	bl	800a3c0 <HAL_UART_Init>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006dda:	f7fe fb07 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006dde:	bf00      	nop
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20000788 	.word	0x20000788
 8006de8:	40011000 	.word	0x40011000

08006dec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006df0:	4b11      	ldr	r3, [pc, #68]	@ (8006e38 <MX_USART2_UART_Init+0x4c>)
 8006df2:	4a12      	ldr	r2, [pc, #72]	@ (8006e3c <MX_USART2_UART_Init+0x50>)
 8006df4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006df6:	4b10      	ldr	r3, [pc, #64]	@ (8006e38 <MX_USART2_UART_Init+0x4c>)
 8006df8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006dfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8006e38 <MX_USART2_UART_Init+0x4c>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006e04:	4b0c      	ldr	r3, [pc, #48]	@ (8006e38 <MX_USART2_UART_Init+0x4c>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e38 <MX_USART2_UART_Init+0x4c>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006e10:	4b09      	ldr	r3, [pc, #36]	@ (8006e38 <MX_USART2_UART_Init+0x4c>)
 8006e12:	220c      	movs	r2, #12
 8006e14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e16:	4b08      	ldr	r3, [pc, #32]	@ (8006e38 <MX_USART2_UART_Init+0x4c>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e1c:	4b06      	ldr	r3, [pc, #24]	@ (8006e38 <MX_USART2_UART_Init+0x4c>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006e22:	4805      	ldr	r0, [pc, #20]	@ (8006e38 <MX_USART2_UART_Init+0x4c>)
 8006e24:	f003 facc 	bl	800a3c0 <HAL_UART_Init>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006e2e:	f7fe fadd 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006e32:	bf00      	nop
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	200007d0 	.word	0x200007d0
 8006e3c:	40004400 	.word	0x40004400

08006e40 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006e44:	4b11      	ldr	r3, [pc, #68]	@ (8006e8c <MX_USART3_UART_Init+0x4c>)
 8006e46:	4a12      	ldr	r2, [pc, #72]	@ (8006e90 <MX_USART3_UART_Init+0x50>)
 8006e48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8006e4a:	4b10      	ldr	r3, [pc, #64]	@ (8006e8c <MX_USART3_UART_Init+0x4c>)
 8006e4c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006e50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006e52:	4b0e      	ldr	r3, [pc, #56]	@ (8006e8c <MX_USART3_UART_Init+0x4c>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006e58:	4b0c      	ldr	r3, [pc, #48]	@ (8006e8c <MX_USART3_UART_Init+0x4c>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e8c <MX_USART3_UART_Init+0x4c>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006e64:	4b09      	ldr	r3, [pc, #36]	@ (8006e8c <MX_USART3_UART_Init+0x4c>)
 8006e66:	220c      	movs	r2, #12
 8006e68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e6a:	4b08      	ldr	r3, [pc, #32]	@ (8006e8c <MX_USART3_UART_Init+0x4c>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e70:	4b06      	ldr	r3, [pc, #24]	@ (8006e8c <MX_USART3_UART_Init+0x4c>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006e76:	4805      	ldr	r0, [pc, #20]	@ (8006e8c <MX_USART3_UART_Init+0x4c>)
 8006e78:	f003 faa2 	bl	800a3c0 <HAL_UART_Init>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006e82:	f7fe fab3 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006e86:	bf00      	nop
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000818 	.word	0x20000818
 8006e90:	40004800 	.word	0x40004800

08006e94 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8006e98:	4b11      	ldr	r3, [pc, #68]	@ (8006ee0 <MX_USART6_UART_Init+0x4c>)
 8006e9a:	4a12      	ldr	r2, [pc, #72]	@ (8006ee4 <MX_USART6_UART_Init+0x50>)
 8006e9c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8006e9e:	4b10      	ldr	r3, [pc, #64]	@ (8006ee0 <MX_USART6_UART_Init+0x4c>)
 8006ea0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006ea4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee0 <MX_USART6_UART_Init+0x4c>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006eac:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee0 <MX_USART6_UART_Init+0x4c>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee0 <MX_USART6_UART_Init+0x4c>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006eb8:	4b09      	ldr	r3, [pc, #36]	@ (8006ee0 <MX_USART6_UART_Init+0x4c>)
 8006eba:	220c      	movs	r2, #12
 8006ebc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ebe:	4b08      	ldr	r3, [pc, #32]	@ (8006ee0 <MX_USART6_UART_Init+0x4c>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006ec4:	4b06      	ldr	r3, [pc, #24]	@ (8006ee0 <MX_USART6_UART_Init+0x4c>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8006eca:	4805      	ldr	r0, [pc, #20]	@ (8006ee0 <MX_USART6_UART_Init+0x4c>)
 8006ecc:	f003 fa78 	bl	800a3c0 <HAL_UART_Init>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8006ed6:	f7fe fa89 	bl	80053ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8006eda:	bf00      	nop
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20000860 	.word	0x20000860
 8006ee4:	40011400 	.word	0x40011400

08006ee8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b096      	sub	sp, #88	@ 0x58
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ef0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	605a      	str	r2, [r3, #4]
 8006efa:	609a      	str	r2, [r3, #8]
 8006efc:	60da      	str	r2, [r3, #12]
 8006efe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a9f      	ldr	r2, [pc, #636]	@ (8007184 <HAL_UART_MspInit+0x29c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d12d      	bne.n	8006f66 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f0e:	4b9e      	ldr	r3, [pc, #632]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8006f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f12:	4a9d      	ldr	r2, [pc, #628]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8006f14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f1a:	4b9b      	ldr	r3, [pc, #620]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f22:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f26:	2300      	movs	r3, #0
 8006f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f2a:	4b97      	ldr	r3, [pc, #604]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f2e:	4a96      	ldr	r2, [pc, #600]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8006f30:	f043 0304 	orr.w	r3, r3, #4
 8006f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f36:	4b94      	ldr	r3, [pc, #592]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8006f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3a:	f003 0304 	and.w	r3, r3, #4
 8006f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006f42:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006f46:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f48:	2302      	movs	r3, #2
 8006f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f50:	2303      	movs	r3, #3
 8006f52:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006f54:	2308      	movs	r3, #8
 8006f56:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f58:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	488b      	ldr	r0, [pc, #556]	@ (800718c <HAL_UART_MspInit+0x2a4>)
 8006f60:	f000 fbe4 	bl	800772c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8006f64:	e172      	b.n	800724c <HAL_UART_MspInit+0x364>
  else if(uartHandle->Instance==UART5)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a89      	ldr	r2, [pc, #548]	@ (8007190 <HAL_UART_MspInit+0x2a8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d14b      	bne.n	8007008 <HAL_UART_MspInit+0x120>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006f70:	2300      	movs	r3, #0
 8006f72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f74:	4b84      	ldr	r3, [pc, #528]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8006f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f78:	4a83      	ldr	r2, [pc, #524]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8006f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f80:	4b81      	ldr	r3, [pc, #516]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8006f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f90:	4b7d      	ldr	r3, [pc, #500]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8006f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f94:	4a7c      	ldr	r2, [pc, #496]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8006f96:	f043 0304 	orr.w	r3, r3, #4
 8006f9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f9c:	4b7a      	ldr	r3, [pc, #488]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8006f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006fa8:	2300      	movs	r3, #0
 8006faa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fac:	4b76      	ldr	r3, [pc, #472]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8006fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb0:	4a75      	ldr	r2, [pc, #468]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8006fb2:	f043 0308 	orr.w	r3, r3, #8
 8006fb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fb8:	4b73      	ldr	r3, [pc, #460]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8006fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006fc8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fca:	2302      	movs	r3, #2
 8006fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006fd6:	2308      	movs	r3, #8
 8006fd8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fda:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006fde:	4619      	mov	r1, r3
 8006fe0:	486a      	ldr	r0, [pc, #424]	@ (800718c <HAL_UART_MspInit+0x2a4>)
 8006fe2:	f000 fba3 	bl	800772c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006fe6:	2304      	movs	r3, #4
 8006fe8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fea:	2302      	movs	r3, #2
 8006fec:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006ff6:	2308      	movs	r3, #8
 8006ff8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ffa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006ffe:	4619      	mov	r1, r3
 8007000:	4864      	ldr	r0, [pc, #400]	@ (8007194 <HAL_UART_MspInit+0x2ac>)
 8007002:	f000 fb93 	bl	800772c <HAL_GPIO_Init>
}
 8007006:	e121      	b.n	800724c <HAL_UART_MspInit+0x364>
  else if(uartHandle->Instance==USART1)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a62      	ldr	r2, [pc, #392]	@ (8007198 <HAL_UART_MspInit+0x2b0>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d135      	bne.n	800707e <HAL_UART_MspInit+0x196>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007012:	2300      	movs	r3, #0
 8007014:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007016:	4b5c      	ldr	r3, [pc, #368]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8007018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800701a:	4a5b      	ldr	r2, [pc, #364]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 800701c:	f043 0310 	orr.w	r3, r3, #16
 8007020:	6453      	str	r3, [r2, #68]	@ 0x44
 8007022:	4b59      	ldr	r3, [pc, #356]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8007024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007026:	f003 0310 	and.w	r3, r3, #16
 800702a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800702c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800702e:	2300      	movs	r3, #0
 8007030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007032:	4b55      	ldr	r3, [pc, #340]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8007034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007036:	4a54      	ldr	r2, [pc, #336]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8007038:	f043 0301 	orr.w	r3, r3, #1
 800703c:	6313      	str	r3, [r2, #48]	@ 0x30
 800703e:	4b52      	ldr	r3, [pc, #328]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8007040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800704a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800704e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007050:	2302      	movs	r3, #2
 8007052:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007054:	2300      	movs	r3, #0
 8007056:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007058:	2303      	movs	r3, #3
 800705a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800705c:	2307      	movs	r3, #7
 800705e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007060:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007064:	4619      	mov	r1, r3
 8007066:	484d      	ldr	r0, [pc, #308]	@ (800719c <HAL_UART_MspInit+0x2b4>)
 8007068:	f000 fb60 	bl	800772c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800706c:	2200      	movs	r2, #0
 800706e:	2100      	movs	r1, #0
 8007070:	2025      	movs	r0, #37	@ 0x25
 8007072:	f000 fa92 	bl	800759a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007076:	2025      	movs	r0, #37	@ 0x25
 8007078:	f000 faab 	bl	80075d2 <HAL_NVIC_EnableIRQ>
}
 800707c:	e0e6      	b.n	800724c <HAL_UART_MspInit+0x364>
  else if(uartHandle->Instance==USART2)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a47      	ldr	r2, [pc, #284]	@ (80071a0 <HAL_UART_MspInit+0x2b8>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d14a      	bne.n	800711e <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007088:	2300      	movs	r3, #0
 800708a:	627b      	str	r3, [r7, #36]	@ 0x24
 800708c:	4b3e      	ldr	r3, [pc, #248]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 800708e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007090:	4a3d      	ldr	r2, [pc, #244]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8007092:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007096:	6413      	str	r3, [r2, #64]	@ 0x40
 8007098:	4b3b      	ldr	r3, [pc, #236]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 800709a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80070a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070a4:	2300      	movs	r3, #0
 80070a6:	623b      	str	r3, [r7, #32]
 80070a8:	4b37      	ldr	r3, [pc, #220]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 80070aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ac:	4a36      	ldr	r2, [pc, #216]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 80070ae:	f043 0301 	orr.w	r3, r3, #1
 80070b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80070b4:	4b34      	ldr	r3, [pc, #208]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 80070b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	623b      	str	r3, [r7, #32]
 80070be:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80070c0:	2300      	movs	r3, #0
 80070c2:	61fb      	str	r3, [r7, #28]
 80070c4:	4b30      	ldr	r3, [pc, #192]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 80070c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c8:	4a2f      	ldr	r2, [pc, #188]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 80070ca:	f043 0308 	orr.w	r3, r3, #8
 80070ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80070d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 80070d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	61fb      	str	r3, [r7, #28]
 80070da:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80070dc:	2308      	movs	r3, #8
 80070de:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070e0:	2302      	movs	r3, #2
 80070e2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e4:	2300      	movs	r3, #0
 80070e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070e8:	2303      	movs	r3, #3
 80070ea:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80070ec:	2307      	movs	r3, #7
 80070ee:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070f0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80070f4:	4619      	mov	r1, r3
 80070f6:	4829      	ldr	r0, [pc, #164]	@ (800719c <HAL_UART_MspInit+0x2b4>)
 80070f8:	f000 fb18 	bl	800772c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80070fc:	2320      	movs	r3, #32
 80070fe:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007100:	2302      	movs	r3, #2
 8007102:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007104:	2300      	movs	r3, #0
 8007106:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007108:	2303      	movs	r3, #3
 800710a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800710c:	2307      	movs	r3, #7
 800710e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007110:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007114:	4619      	mov	r1, r3
 8007116:	481f      	ldr	r0, [pc, #124]	@ (8007194 <HAL_UART_MspInit+0x2ac>)
 8007118:	f000 fb08 	bl	800772c <HAL_GPIO_Init>
}
 800711c:	e096      	b.n	800724c <HAL_UART_MspInit+0x364>
  else if(uartHandle->Instance==USART3)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a20      	ldr	r2, [pc, #128]	@ (80071a4 <HAL_UART_MspInit+0x2bc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d141      	bne.n	80071ac <HAL_UART_MspInit+0x2c4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007128:	2300      	movs	r3, #0
 800712a:	61bb      	str	r3, [r7, #24]
 800712c:	4b16      	ldr	r3, [pc, #88]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 800712e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007130:	4a15      	ldr	r2, [pc, #84]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8007132:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007136:	6413      	str	r3, [r2, #64]	@ 0x40
 8007138:	4b13      	ldr	r3, [pc, #76]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 800713a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007140:	61bb      	str	r3, [r7, #24]
 8007142:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007144:	2300      	movs	r3, #0
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	4b0f      	ldr	r3, [pc, #60]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 800714a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800714c:	4a0e      	ldr	r2, [pc, #56]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 800714e:	f043 0302 	orr.w	r3, r3, #2
 8007152:	6313      	str	r3, [r2, #48]	@ 0x30
 8007154:	4b0c      	ldr	r3, [pc, #48]	@ (8007188 <HAL_UART_MspInit+0x2a0>)
 8007156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007160:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007164:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007166:	2302      	movs	r3, #2
 8007168:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800716a:	2300      	movs	r3, #0
 800716c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800716e:	2303      	movs	r3, #3
 8007170:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007172:	2307      	movs	r3, #7
 8007174:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007176:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800717a:	4619      	mov	r1, r3
 800717c:	480a      	ldr	r0, [pc, #40]	@ (80071a8 <HAL_UART_MspInit+0x2c0>)
 800717e:	f000 fad5 	bl	800772c <HAL_GPIO_Init>
}
 8007182:	e063      	b.n	800724c <HAL_UART_MspInit+0x364>
 8007184:	40004c00 	.word	0x40004c00
 8007188:	40023800 	.word	0x40023800
 800718c:	40020800 	.word	0x40020800
 8007190:	40005000 	.word	0x40005000
 8007194:	40020c00 	.word	0x40020c00
 8007198:	40011000 	.word	0x40011000
 800719c:	40020000 	.word	0x40020000
 80071a0:	40004400 	.word	0x40004400
 80071a4:	40004800 	.word	0x40004800
 80071a8:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART6)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a28      	ldr	r2, [pc, #160]	@ (8007254 <HAL_UART_MspInit+0x36c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d14a      	bne.n	800724c <HAL_UART_MspInit+0x364>
    __HAL_RCC_USART6_CLK_ENABLE();
 80071b6:	2300      	movs	r3, #0
 80071b8:	613b      	str	r3, [r7, #16]
 80071ba:	4b27      	ldr	r3, [pc, #156]	@ (8007258 <HAL_UART_MspInit+0x370>)
 80071bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071be:	4a26      	ldr	r2, [pc, #152]	@ (8007258 <HAL_UART_MspInit+0x370>)
 80071c0:	f043 0320 	orr.w	r3, r3, #32
 80071c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80071c6:	4b24      	ldr	r3, [pc, #144]	@ (8007258 <HAL_UART_MspInit+0x370>)
 80071c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	613b      	str	r3, [r7, #16]
 80071d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	4b20      	ldr	r3, [pc, #128]	@ (8007258 <HAL_UART_MspInit+0x370>)
 80071d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071da:	4a1f      	ldr	r2, [pc, #124]	@ (8007258 <HAL_UART_MspInit+0x370>)
 80071dc:	f043 0304 	orr.w	r3, r3, #4
 80071e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80071e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007258 <HAL_UART_MspInit+0x370>)
 80071e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e6:	f003 0304 	and.w	r3, r3, #4
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80071ee:	2300      	movs	r3, #0
 80071f0:	60bb      	str	r3, [r7, #8]
 80071f2:	4b19      	ldr	r3, [pc, #100]	@ (8007258 <HAL_UART_MspInit+0x370>)
 80071f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f6:	4a18      	ldr	r2, [pc, #96]	@ (8007258 <HAL_UART_MspInit+0x370>)
 80071f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80071fe:	4b16      	ldr	r3, [pc, #88]	@ (8007258 <HAL_UART_MspInit+0x370>)
 8007200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007206:	60bb      	str	r3, [r7, #8]
 8007208:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800720a:	2380      	movs	r3, #128	@ 0x80
 800720c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800720e:	2302      	movs	r3, #2
 8007210:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007212:	2300      	movs	r3, #0
 8007214:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007216:	2303      	movs	r3, #3
 8007218:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800721a:	2308      	movs	r3, #8
 800721c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800721e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007222:	4619      	mov	r1, r3
 8007224:	480d      	ldr	r0, [pc, #52]	@ (800725c <HAL_UART_MspInit+0x374>)
 8007226:	f000 fa81 	bl	800772c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800722a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800722e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007230:	2302      	movs	r3, #2
 8007232:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007234:	2300      	movs	r3, #0
 8007236:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007238:	2303      	movs	r3, #3
 800723a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800723c:	2308      	movs	r3, #8
 800723e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007240:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007244:	4619      	mov	r1, r3
 8007246:	4806      	ldr	r0, [pc, #24]	@ (8007260 <HAL_UART_MspInit+0x378>)
 8007248:	f000 fa70 	bl	800772c <HAL_GPIO_Init>
}
 800724c:	bf00      	nop
 800724e:	3758      	adds	r7, #88	@ 0x58
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	40011400 	.word	0x40011400
 8007258:	40023800 	.word	0x40023800
 800725c:	40020800 	.word	0x40020800
 8007260:	40021800 	.word	0x40021800

08007264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007264:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800729c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007268:	f7fe feb8 	bl	8005fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800726c:	480c      	ldr	r0, [pc, #48]	@ (80072a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800726e:	490d      	ldr	r1, [pc, #52]	@ (80072a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007270:	4a0d      	ldr	r2, [pc, #52]	@ (80072a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007274:	e002      	b.n	800727c <LoopCopyDataInit>

08007276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800727a:	3304      	adds	r3, #4

0800727c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800727c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800727e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007280:	d3f9      	bcc.n	8007276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007282:	4a0a      	ldr	r2, [pc, #40]	@ (80072ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007284:	4c0a      	ldr	r4, [pc, #40]	@ (80072b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007288:	e001      	b.n	800728e <LoopFillZerobss>

0800728a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800728a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800728c:	3204      	adds	r2, #4

0800728e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800728e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007290:	d3fb      	bcc.n	800728a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007292:	f004 ffd5 	bl	800c240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007296:	f7fd fed7 	bl	8005048 <main>
  bx  lr    
 800729a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800729c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80072a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80072a4:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 80072a8:	08010130 	.word	0x08010130
  ldr r2, =_sbss
 80072ac:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 80072b0:	200009f8 	.word	0x200009f8

080072b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80072b4:	e7fe      	b.n	80072b4 <ADC_IRQHandler>
	...

080072b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80072bc:	4b0e      	ldr	r3, [pc, #56]	@ (80072f8 <HAL_Init+0x40>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a0d      	ldr	r2, [pc, #52]	@ (80072f8 <HAL_Init+0x40>)
 80072c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80072c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80072c8:	4b0b      	ldr	r3, [pc, #44]	@ (80072f8 <HAL_Init+0x40>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a0a      	ldr	r2, [pc, #40]	@ (80072f8 <HAL_Init+0x40>)
 80072ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80072d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072d4:	4b08      	ldr	r3, [pc, #32]	@ (80072f8 <HAL_Init+0x40>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a07      	ldr	r2, [pc, #28]	@ (80072f8 <HAL_Init+0x40>)
 80072da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072e0:	2003      	movs	r0, #3
 80072e2:	f000 f94f 	bl	8007584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80072e6:	200f      	movs	r0, #15
 80072e8:	f000 f808 	bl	80072fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80072ec:	f7fe fd4e 	bl	8005d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	40023c00 	.word	0x40023c00

080072fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007304:	4b12      	ldr	r3, [pc, #72]	@ (8007350 <HAL_InitTick+0x54>)
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	4b12      	ldr	r3, [pc, #72]	@ (8007354 <HAL_InitTick+0x58>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	4619      	mov	r1, r3
 800730e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007312:	fbb3 f3f1 	udiv	r3, r3, r1
 8007316:	fbb2 f3f3 	udiv	r3, r2, r3
 800731a:	4618      	mov	r0, r3
 800731c:	f000 f967 	bl	80075ee <HAL_SYSTICK_Config>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e00e      	b.n	8007348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b0f      	cmp	r3, #15
 800732e:	d80a      	bhi.n	8007346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007330:	2200      	movs	r2, #0
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	f04f 30ff 	mov.w	r0, #4294967295
 8007338:	f000 f92f 	bl	800759a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800733c:	4a06      	ldr	r2, [pc, #24]	@ (8007358 <HAL_InitTick+0x5c>)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	e000      	b.n	8007348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
}
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	20000094 	.word	0x20000094
 8007354:	2000009c 	.word	0x2000009c
 8007358:	20000098 	.word	0x20000098

0800735c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007360:	4b06      	ldr	r3, [pc, #24]	@ (800737c <HAL_IncTick+0x20>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	461a      	mov	r2, r3
 8007366:	4b06      	ldr	r3, [pc, #24]	@ (8007380 <HAL_IncTick+0x24>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4413      	add	r3, r2
 800736c:	4a04      	ldr	r2, [pc, #16]	@ (8007380 <HAL_IncTick+0x24>)
 800736e:	6013      	str	r3, [r2, #0]
}
 8007370:	bf00      	nop
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	2000009c 	.word	0x2000009c
 8007380:	200008a8 	.word	0x200008a8

08007384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
  return uwTick;
 8007388:	4b03      	ldr	r3, [pc, #12]	@ (8007398 <HAL_GetTick+0x14>)
 800738a:	681b      	ldr	r3, [r3, #0]
}
 800738c:	4618      	mov	r0, r3
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	200008a8 	.word	0x200008a8

0800739c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80073a4:	f7ff ffee 	bl	8007384 <HAL_GetTick>
 80073a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b4:	d005      	beq.n	80073c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80073b6:	4b0a      	ldr	r3, [pc, #40]	@ (80073e0 <HAL_Delay+0x44>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4413      	add	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80073c2:	bf00      	nop
 80073c4:	f7ff ffde 	bl	8007384 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d8f7      	bhi.n	80073c4 <HAL_Delay+0x28>
  {
  }
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	2000009c 	.word	0x2000009c

080073e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f003 0307 	and.w	r3, r3, #7
 80073f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007428 <__NVIC_SetPriorityGrouping+0x44>)
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007400:	4013      	ands	r3, r2
 8007402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800740c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007416:	4a04      	ldr	r2, [pc, #16]	@ (8007428 <__NVIC_SetPriorityGrouping+0x44>)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	60d3      	str	r3, [r2, #12]
}
 800741c:	bf00      	nop
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	e000ed00 	.word	0xe000ed00

0800742c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007430:	4b04      	ldr	r3, [pc, #16]	@ (8007444 <__NVIC_GetPriorityGrouping+0x18>)
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	0a1b      	lsrs	r3, r3, #8
 8007436:	f003 0307 	and.w	r3, r3, #7
}
 800743a:	4618      	mov	r0, r3
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	e000ed00 	.word	0xe000ed00

08007448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007456:	2b00      	cmp	r3, #0
 8007458:	db0b      	blt.n	8007472 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800745a:	79fb      	ldrb	r3, [r7, #7]
 800745c:	f003 021f 	and.w	r2, r3, #31
 8007460:	4907      	ldr	r1, [pc, #28]	@ (8007480 <__NVIC_EnableIRQ+0x38>)
 8007462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007466:	095b      	lsrs	r3, r3, #5
 8007468:	2001      	movs	r0, #1
 800746a:	fa00 f202 	lsl.w	r2, r0, r2
 800746e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	e000e100 	.word	0xe000e100

08007484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	6039      	str	r1, [r7, #0]
 800748e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007494:	2b00      	cmp	r3, #0
 8007496:	db0a      	blt.n	80074ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	b2da      	uxtb	r2, r3
 800749c:	490c      	ldr	r1, [pc, #48]	@ (80074d0 <__NVIC_SetPriority+0x4c>)
 800749e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074a2:	0112      	lsls	r2, r2, #4
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	440b      	add	r3, r1
 80074a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074ac:	e00a      	b.n	80074c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	4908      	ldr	r1, [pc, #32]	@ (80074d4 <__NVIC_SetPriority+0x50>)
 80074b4:	79fb      	ldrb	r3, [r7, #7]
 80074b6:	f003 030f 	and.w	r3, r3, #15
 80074ba:	3b04      	subs	r3, #4
 80074bc:	0112      	lsls	r2, r2, #4
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	440b      	add	r3, r1
 80074c2:	761a      	strb	r2, [r3, #24]
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	e000e100 	.word	0xe000e100
 80074d4:	e000ed00 	.word	0xe000ed00

080074d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074d8:	b480      	push	{r7}
 80074da:	b089      	sub	sp, #36	@ 0x24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	f1c3 0307 	rsb	r3, r3, #7
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	bf28      	it	cs
 80074f6:	2304      	movcs	r3, #4
 80074f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	3304      	adds	r3, #4
 80074fe:	2b06      	cmp	r3, #6
 8007500:	d902      	bls.n	8007508 <NVIC_EncodePriority+0x30>
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	3b03      	subs	r3, #3
 8007506:	e000      	b.n	800750a <NVIC_EncodePriority+0x32>
 8007508:	2300      	movs	r3, #0
 800750a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800750c:	f04f 32ff 	mov.w	r2, #4294967295
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	fa02 f303 	lsl.w	r3, r2, r3
 8007516:	43da      	mvns	r2, r3
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	401a      	ands	r2, r3
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007520:	f04f 31ff 	mov.w	r1, #4294967295
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	fa01 f303 	lsl.w	r3, r1, r3
 800752a:	43d9      	mvns	r1, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007530:	4313      	orrs	r3, r2
         );
}
 8007532:	4618      	mov	r0, r3
 8007534:	3724      	adds	r7, #36	@ 0x24
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
	...

08007540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3b01      	subs	r3, #1
 800754c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007550:	d301      	bcc.n	8007556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007552:	2301      	movs	r3, #1
 8007554:	e00f      	b.n	8007576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007556:	4a0a      	ldr	r2, [pc, #40]	@ (8007580 <SysTick_Config+0x40>)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3b01      	subs	r3, #1
 800755c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800755e:	210f      	movs	r1, #15
 8007560:	f04f 30ff 	mov.w	r0, #4294967295
 8007564:	f7ff ff8e 	bl	8007484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007568:	4b05      	ldr	r3, [pc, #20]	@ (8007580 <SysTick_Config+0x40>)
 800756a:	2200      	movs	r2, #0
 800756c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800756e:	4b04      	ldr	r3, [pc, #16]	@ (8007580 <SysTick_Config+0x40>)
 8007570:	2207      	movs	r2, #7
 8007572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	e000e010 	.word	0xe000e010

08007584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7ff ff29 	bl	80073e4 <__NVIC_SetPriorityGrouping>
}
 8007592:	bf00      	nop
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800759a:	b580      	push	{r7, lr}
 800759c:	b086      	sub	sp, #24
 800759e:	af00      	add	r7, sp, #0
 80075a0:	4603      	mov	r3, r0
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	607a      	str	r2, [r7, #4]
 80075a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80075ac:	f7ff ff3e 	bl	800742c <__NVIC_GetPriorityGrouping>
 80075b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	6978      	ldr	r0, [r7, #20]
 80075b8:	f7ff ff8e 	bl	80074d8 <NVIC_EncodePriority>
 80075bc:	4602      	mov	r2, r0
 80075be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075c2:	4611      	mov	r1, r2
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7ff ff5d 	bl	8007484 <__NVIC_SetPriority>
}
 80075ca:	bf00      	nop
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	4603      	mov	r3, r0
 80075da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80075dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff ff31 	bl	8007448 <__NVIC_EnableIRQ>
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff ffa2 	bl	8007540 <SysTick_Config>
 80075fc:	4603      	mov	r3, r0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007612:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007614:	f7ff feb6 	bl	8007384 <HAL_GetTick>
 8007618:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d008      	beq.n	8007638 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2280      	movs	r2, #128	@ 0x80
 800762a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e052      	b.n	80076de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0216 	bic.w	r2, r2, #22
 8007646:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695a      	ldr	r2, [r3, #20]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007656:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765c:	2b00      	cmp	r3, #0
 800765e:	d103      	bne.n	8007668 <HAL_DMA_Abort+0x62>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007664:	2b00      	cmp	r3, #0
 8007666:	d007      	beq.n	8007678 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0208 	bic.w	r2, r2, #8
 8007676:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0201 	bic.w	r2, r2, #1
 8007686:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007688:	e013      	b.n	80076b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800768a:	f7ff fe7b 	bl	8007384 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b05      	cmp	r3, #5
 8007696:	d90c      	bls.n	80076b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2203      	movs	r2, #3
 80076a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e015      	b.n	80076de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e4      	bne.n	800768a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076c4:	223f      	movs	r2, #63	@ 0x3f
 80076c6:	409a      	lsls	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d004      	beq.n	8007704 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2280      	movs	r2, #128	@ 0x80
 80076fe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e00c      	b.n	800771e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2205      	movs	r2, #5
 8007708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0201 	bic.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
	...

0800772c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800772c:	b480      	push	{r7}
 800772e:	b089      	sub	sp, #36	@ 0x24
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800773a:	2300      	movs	r3, #0
 800773c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800773e:	2300      	movs	r3, #0
 8007740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007742:	2300      	movs	r3, #0
 8007744:	61fb      	str	r3, [r7, #28]
 8007746:	e16b      	b.n	8007a20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007748:	2201      	movs	r2, #1
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	fa02 f303 	lsl.w	r3, r2, r3
 8007750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4013      	ands	r3, r2
 800775a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	429a      	cmp	r2, r3
 8007762:	f040 815a 	bne.w	8007a1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f003 0303 	and.w	r3, r3, #3
 800776e:	2b01      	cmp	r3, #1
 8007770:	d005      	beq.n	800777e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800777a:	2b02      	cmp	r3, #2
 800777c:	d130      	bne.n	80077e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	005b      	lsls	r3, r3, #1
 8007788:	2203      	movs	r2, #3
 800778a:	fa02 f303 	lsl.w	r3, r2, r3
 800778e:	43db      	mvns	r3, r3
 8007790:	69ba      	ldr	r2, [r7, #24]
 8007792:	4013      	ands	r3, r2
 8007794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	fa02 f303 	lsl.w	r3, r2, r3
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80077b4:	2201      	movs	r2, #1
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	fa02 f303 	lsl.w	r3, r2, r3
 80077bc:	43db      	mvns	r3, r3
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	4013      	ands	r3, r2
 80077c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	091b      	lsrs	r3, r3, #4
 80077ca:	f003 0201 	and.w	r2, r3, #1
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	fa02 f303 	lsl.w	r3, r2, r3
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f003 0303 	and.w	r3, r3, #3
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d017      	beq.n	800781c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	2203      	movs	r2, #3
 80077f8:	fa02 f303 	lsl.w	r3, r2, r3
 80077fc:	43db      	mvns	r3, r3
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	4013      	ands	r3, r2
 8007802:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	689a      	ldr	r2, [r3, #8]
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	005b      	lsls	r3, r3, #1
 800780c:	fa02 f303 	lsl.w	r3, r2, r3
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	4313      	orrs	r3, r2
 8007814:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f003 0303 	and.w	r3, r3, #3
 8007824:	2b02      	cmp	r3, #2
 8007826:	d123      	bne.n	8007870 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	08da      	lsrs	r2, r3, #3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3208      	adds	r2, #8
 8007830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007834:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	f003 0307 	and.w	r3, r3, #7
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	220f      	movs	r2, #15
 8007840:	fa02 f303 	lsl.w	r3, r2, r3
 8007844:	43db      	mvns	r3, r3
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	4013      	ands	r3, r2
 800784a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	691a      	ldr	r2, [r3, #16]
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	fa02 f303 	lsl.w	r3, r2, r3
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	4313      	orrs	r3, r2
 8007860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	08da      	lsrs	r2, r3, #3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3208      	adds	r2, #8
 800786a:	69b9      	ldr	r1, [r7, #24]
 800786c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	2203      	movs	r2, #3
 800787c:	fa02 f303 	lsl.w	r3, r2, r3
 8007880:	43db      	mvns	r3, r3
 8007882:	69ba      	ldr	r2, [r7, #24]
 8007884:	4013      	ands	r3, r2
 8007886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f003 0203 	and.w	r2, r3, #3
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	fa02 f303 	lsl.w	r3, r2, r3
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	4313      	orrs	r3, r2
 800789c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 80b4 	beq.w	8007a1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]
 80078b6:	4b60      	ldr	r3, [pc, #384]	@ (8007a38 <HAL_GPIO_Init+0x30c>)
 80078b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ba:	4a5f      	ldr	r2, [pc, #380]	@ (8007a38 <HAL_GPIO_Init+0x30c>)
 80078bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80078c2:	4b5d      	ldr	r3, [pc, #372]	@ (8007a38 <HAL_GPIO_Init+0x30c>)
 80078c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078ce:	4a5b      	ldr	r2, [pc, #364]	@ (8007a3c <HAL_GPIO_Init+0x310>)
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	089b      	lsrs	r3, r3, #2
 80078d4:	3302      	adds	r3, #2
 80078d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	220f      	movs	r2, #15
 80078e6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ea:	43db      	mvns	r3, r3
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	4013      	ands	r3, r2
 80078f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a52      	ldr	r2, [pc, #328]	@ (8007a40 <HAL_GPIO_Init+0x314>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d02b      	beq.n	8007952 <HAL_GPIO_Init+0x226>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a51      	ldr	r2, [pc, #324]	@ (8007a44 <HAL_GPIO_Init+0x318>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d025      	beq.n	800794e <HAL_GPIO_Init+0x222>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a50      	ldr	r2, [pc, #320]	@ (8007a48 <HAL_GPIO_Init+0x31c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d01f      	beq.n	800794a <HAL_GPIO_Init+0x21e>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a4f      	ldr	r2, [pc, #316]	@ (8007a4c <HAL_GPIO_Init+0x320>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d019      	beq.n	8007946 <HAL_GPIO_Init+0x21a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a4e      	ldr	r2, [pc, #312]	@ (8007a50 <HAL_GPIO_Init+0x324>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d013      	beq.n	8007942 <HAL_GPIO_Init+0x216>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a4d      	ldr	r2, [pc, #308]	@ (8007a54 <HAL_GPIO_Init+0x328>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d00d      	beq.n	800793e <HAL_GPIO_Init+0x212>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a4c      	ldr	r2, [pc, #304]	@ (8007a58 <HAL_GPIO_Init+0x32c>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d007      	beq.n	800793a <HAL_GPIO_Init+0x20e>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a4b      	ldr	r2, [pc, #300]	@ (8007a5c <HAL_GPIO_Init+0x330>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d101      	bne.n	8007936 <HAL_GPIO_Init+0x20a>
 8007932:	2307      	movs	r3, #7
 8007934:	e00e      	b.n	8007954 <HAL_GPIO_Init+0x228>
 8007936:	2308      	movs	r3, #8
 8007938:	e00c      	b.n	8007954 <HAL_GPIO_Init+0x228>
 800793a:	2306      	movs	r3, #6
 800793c:	e00a      	b.n	8007954 <HAL_GPIO_Init+0x228>
 800793e:	2305      	movs	r3, #5
 8007940:	e008      	b.n	8007954 <HAL_GPIO_Init+0x228>
 8007942:	2304      	movs	r3, #4
 8007944:	e006      	b.n	8007954 <HAL_GPIO_Init+0x228>
 8007946:	2303      	movs	r3, #3
 8007948:	e004      	b.n	8007954 <HAL_GPIO_Init+0x228>
 800794a:	2302      	movs	r3, #2
 800794c:	e002      	b.n	8007954 <HAL_GPIO_Init+0x228>
 800794e:	2301      	movs	r3, #1
 8007950:	e000      	b.n	8007954 <HAL_GPIO_Init+0x228>
 8007952:	2300      	movs	r3, #0
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	f002 0203 	and.w	r2, r2, #3
 800795a:	0092      	lsls	r2, r2, #2
 800795c:	4093      	lsls	r3, r2
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	4313      	orrs	r3, r2
 8007962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007964:	4935      	ldr	r1, [pc, #212]	@ (8007a3c <HAL_GPIO_Init+0x310>)
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	089b      	lsrs	r3, r3, #2
 800796a:	3302      	adds	r3, #2
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007972:	4b3b      	ldr	r3, [pc, #236]	@ (8007a60 <HAL_GPIO_Init+0x334>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	43db      	mvns	r3, r3
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	4013      	ands	r3, r2
 8007980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	4313      	orrs	r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007996:	4a32      	ldr	r2, [pc, #200]	@ (8007a60 <HAL_GPIO_Init+0x334>)
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800799c:	4b30      	ldr	r3, [pc, #192]	@ (8007a60 <HAL_GPIO_Init+0x334>)
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	43db      	mvns	r3, r3
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	4013      	ands	r3, r2
 80079aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	4313      	orrs	r3, r2
 80079be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80079c0:	4a27      	ldr	r2, [pc, #156]	@ (8007a60 <HAL_GPIO_Init+0x334>)
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80079c6:	4b26      	ldr	r3, [pc, #152]	@ (8007a60 <HAL_GPIO_Init+0x334>)
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	43db      	mvns	r3, r3
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	4013      	ands	r3, r2
 80079d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80079ea:	4a1d      	ldr	r2, [pc, #116]	@ (8007a60 <HAL_GPIO_Init+0x334>)
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80079f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007a60 <HAL_GPIO_Init+0x334>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	43db      	mvns	r3, r3
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	4013      	ands	r3, r2
 80079fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d003      	beq.n	8007a14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007a14:	4a12      	ldr	r2, [pc, #72]	@ (8007a60 <HAL_GPIO_Init+0x334>)
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	61fb      	str	r3, [r7, #28]
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	2b0f      	cmp	r3, #15
 8007a24:	f67f ae90 	bls.w	8007748 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007a28:	bf00      	nop
 8007a2a:	bf00      	nop
 8007a2c:	3724      	adds	r7, #36	@ 0x24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	40023800 	.word	0x40023800
 8007a3c:	40013800 	.word	0x40013800
 8007a40:	40020000 	.word	0x40020000
 8007a44:	40020400 	.word	0x40020400
 8007a48:	40020800 	.word	0x40020800
 8007a4c:	40020c00 	.word	0x40020c00
 8007a50:	40021000 	.word	0x40021000
 8007a54:	40021400 	.word	0x40021400
 8007a58:	40021800 	.word	0x40021800
 8007a5c:	40021c00 	.word	0x40021c00
 8007a60:	40013c00 	.word	0x40013c00

08007a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	807b      	strh	r3, [r7, #2]
 8007a70:	4613      	mov	r3, r2
 8007a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a74:	787b      	ldrb	r3, [r7, #1]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a7a:	887a      	ldrh	r2, [r7, #2]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007a80:	e003      	b.n	8007a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007a82:	887b      	ldrh	r3, [r7, #2]
 8007a84:	041a      	lsls	r2, r3, #16
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	619a      	str	r2, [r3, #24]
}
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
	...

08007a98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e12b      	b.n	8007d02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d106      	bne.n	8007ac4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7fd fa04 	bl	8004ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2224      	movs	r2, #36	@ 0x24
 8007ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0201 	bic.w	r2, r2, #1
 8007ada:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007aea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007afa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007afc:	f001 fc20 	bl	8009340 <HAL_RCC_GetPCLK1Freq>
 8007b00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	4a81      	ldr	r2, [pc, #516]	@ (8007d0c <HAL_I2C_Init+0x274>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d807      	bhi.n	8007b1c <HAL_I2C_Init+0x84>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4a80      	ldr	r2, [pc, #512]	@ (8007d10 <HAL_I2C_Init+0x278>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	bf94      	ite	ls
 8007b14:	2301      	movls	r3, #1
 8007b16:	2300      	movhi	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	e006      	b.n	8007b2a <HAL_I2C_Init+0x92>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4a7d      	ldr	r2, [pc, #500]	@ (8007d14 <HAL_I2C_Init+0x27c>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	bf94      	ite	ls
 8007b24:	2301      	movls	r3, #1
 8007b26:	2300      	movhi	r3, #0
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e0e7      	b.n	8007d02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	4a78      	ldr	r2, [pc, #480]	@ (8007d18 <HAL_I2C_Init+0x280>)
 8007b36:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3a:	0c9b      	lsrs	r3, r3, #18
 8007b3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	4a6a      	ldr	r2, [pc, #424]	@ (8007d0c <HAL_I2C_Init+0x274>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d802      	bhi.n	8007b6c <HAL_I2C_Init+0xd4>
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	e009      	b.n	8007b80 <HAL_I2C_Init+0xe8>
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007b72:	fb02 f303 	mul.w	r3, r2, r3
 8007b76:	4a69      	ldr	r2, [pc, #420]	@ (8007d1c <HAL_I2C_Init+0x284>)
 8007b78:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7c:	099b      	lsrs	r3, r3, #6
 8007b7e:	3301      	adds	r3, #1
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6812      	ldr	r2, [r2, #0]
 8007b84:	430b      	orrs	r3, r1
 8007b86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	69db      	ldr	r3, [r3, #28]
 8007b8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007b92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	495c      	ldr	r1, [pc, #368]	@ (8007d0c <HAL_I2C_Init+0x274>)
 8007b9c:	428b      	cmp	r3, r1
 8007b9e:	d819      	bhi.n	8007bd4 <HAL_I2C_Init+0x13c>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	1e59      	subs	r1, r3, #1
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	005b      	lsls	r3, r3, #1
 8007baa:	fbb1 f3f3 	udiv	r3, r1, r3
 8007bae:	1c59      	adds	r1, r3, #1
 8007bb0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007bb4:	400b      	ands	r3, r1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <HAL_I2C_Init+0x138>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	1e59      	subs	r1, r3, #1
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8007bc8:	3301      	adds	r3, #1
 8007bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bce:	e051      	b.n	8007c74 <HAL_I2C_Init+0x1dc>
 8007bd0:	2304      	movs	r3, #4
 8007bd2:	e04f      	b.n	8007c74 <HAL_I2C_Init+0x1dc>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d111      	bne.n	8007c00 <HAL_I2C_Init+0x168>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	1e58      	subs	r0, r3, #1
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6859      	ldr	r1, [r3, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	440b      	add	r3, r1
 8007bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bee:	3301      	adds	r3, #1
 8007bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	bf0c      	ite	eq
 8007bf8:	2301      	moveq	r3, #1
 8007bfa:	2300      	movne	r3, #0
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	e012      	b.n	8007c26 <HAL_I2C_Init+0x18e>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	1e58      	subs	r0, r3, #1
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6859      	ldr	r1, [r3, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	440b      	add	r3, r1
 8007c0e:	0099      	lsls	r1, r3, #2
 8007c10:	440b      	add	r3, r1
 8007c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c16:	3301      	adds	r3, #1
 8007c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bf0c      	ite	eq
 8007c20:	2301      	moveq	r3, #1
 8007c22:	2300      	movne	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <HAL_I2C_Init+0x196>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e022      	b.n	8007c74 <HAL_I2C_Init+0x1dc>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10e      	bne.n	8007c54 <HAL_I2C_Init+0x1bc>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	1e58      	subs	r0, r3, #1
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6859      	ldr	r1, [r3, #4]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	440b      	add	r3, r1
 8007c44:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c48:	3301      	adds	r3, #1
 8007c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c52:	e00f      	b.n	8007c74 <HAL_I2C_Init+0x1dc>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	1e58      	subs	r0, r3, #1
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6859      	ldr	r1, [r3, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	0099      	lsls	r1, r3, #2
 8007c64:	440b      	add	r3, r1
 8007c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c74:	6879      	ldr	r1, [r7, #4]
 8007c76:	6809      	ldr	r1, [r1, #0]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69da      	ldr	r2, [r3, #28]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007ca2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	6911      	ldr	r1, [r2, #16]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	68d2      	ldr	r2, [r2, #12]
 8007cae:	4311      	orrs	r1, r2
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6812      	ldr	r2, [r2, #0]
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	695a      	ldr	r2, [r3, #20]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0201 	orr.w	r2, r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2220      	movs	r2, #32
 8007cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	000186a0 	.word	0x000186a0
 8007d10:	001e847f 	.word	0x001e847f
 8007d14:	003d08ff 	.word	0x003d08ff
 8007d18:	431bde83 	.word	0x431bde83
 8007d1c:	10624dd3 	.word	0x10624dd3

08007d20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b088      	sub	sp, #32
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	4608      	mov	r0, r1
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	817b      	strh	r3, [r7, #10]
 8007d32:	460b      	mov	r3, r1
 8007d34:	813b      	strh	r3, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d3a:	f7ff fb23 	bl	8007384 <HAL_GetTick>
 8007d3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	f040 80d9 	bne.w	8007f00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	2319      	movs	r3, #25
 8007d54:	2201      	movs	r2, #1
 8007d56:	496d      	ldr	r1, [pc, #436]	@ (8007f0c <HAL_I2C_Mem_Write+0x1ec>)
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f000 fc8b 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007d64:	2302      	movs	r3, #2
 8007d66:	e0cc      	b.n	8007f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d101      	bne.n	8007d76 <HAL_I2C_Mem_Write+0x56>
 8007d72:	2302      	movs	r3, #2
 8007d74:	e0c5      	b.n	8007f02 <HAL_I2C_Mem_Write+0x1e2>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d007      	beq.n	8007d9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0201 	orr.w	r2, r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007daa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2221      	movs	r2, #33	@ 0x21
 8007db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2240      	movs	r2, #64	@ 0x40
 8007db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6a3a      	ldr	r2, [r7, #32]
 8007dc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4a4d      	ldr	r2, [pc, #308]	@ (8007f10 <HAL_I2C_Mem_Write+0x1f0>)
 8007ddc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007dde:	88f8      	ldrh	r0, [r7, #6]
 8007de0:	893a      	ldrh	r2, [r7, #8]
 8007de2:	8979      	ldrh	r1, [r7, #10]
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	4603      	mov	r3, r0
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 fac2 	bl	8008378 <I2C_RequestMemoryWrite>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d052      	beq.n	8007ea0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e081      	b.n	8007f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 fd50 	bl	80088a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00d      	beq.n	8007e2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d107      	bne.n	8007e26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e06b      	b.n	8007f02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2e:	781a      	ldrb	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	3b01      	subs	r3, #1
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	f003 0304 	and.w	r3, r3, #4
 8007e64:	2b04      	cmp	r3, #4
 8007e66:	d11b      	bne.n	8007ea0 <HAL_I2C_Mem_Write+0x180>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d017      	beq.n	8007ea0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e74:	781a      	ldrb	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1aa      	bne.n	8007dfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 fd43 	bl	8008938 <I2C_WaitOnBTFFlagUntilTimeout>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00d      	beq.n	8007ed4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d107      	bne.n	8007ed0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ece:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e016      	b.n	8007f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	e000      	b.n	8007f02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007f00:	2302      	movs	r3, #2
  }
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	00100002 	.word	0x00100002
 8007f10:	ffff0000 	.word	0xffff0000

08007f14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08c      	sub	sp, #48	@ 0x30
 8007f18:	af02      	add	r7, sp, #8
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	461a      	mov	r2, r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	817b      	strh	r3, [r7, #10]
 8007f26:	460b      	mov	r3, r1
 8007f28:	813b      	strh	r3, [r7, #8]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f2e:	f7ff fa29 	bl	8007384 <HAL_GetTick>
 8007f32:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	f040 8214 	bne.w	800836a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	2319      	movs	r3, #25
 8007f48:	2201      	movs	r2, #1
 8007f4a:	497b      	ldr	r1, [pc, #492]	@ (8008138 <HAL_I2C_Mem_Read+0x224>)
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 fb91 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e207      	b.n	800836c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d101      	bne.n	8007f6a <HAL_I2C_Mem_Read+0x56>
 8007f66:	2302      	movs	r3, #2
 8007f68:	e200      	b.n	800836c <HAL_I2C_Mem_Read+0x458>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d007      	beq.n	8007f90 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f042 0201 	orr.w	r2, r2, #1
 8007f8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2222      	movs	r2, #34	@ 0x22
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2240      	movs	r2, #64	@ 0x40
 8007fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4a5b      	ldr	r2, [pc, #364]	@ (800813c <HAL_I2C_Mem_Read+0x228>)
 8007fd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fd2:	88f8      	ldrh	r0, [r7, #6]
 8007fd4:	893a      	ldrh	r2, [r7, #8]
 8007fd6:	8979      	ldrh	r1, [r7, #10]
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fda:	9301      	str	r3, [sp, #4]
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 fa5e 	bl	80084a4 <I2C_RequestMemoryRead>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e1bc      	b.n	800836c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d113      	bne.n	8008022 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	623b      	str	r3, [r7, #32]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	623b      	str	r3, [r7, #32]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	623b      	str	r3, [r7, #32]
 800800e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	e190      	b.n	8008344 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008026:	2b01      	cmp	r3, #1
 8008028:	d11b      	bne.n	8008062 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800803a:	2300      	movs	r3, #0
 800803c:	61fb      	str	r3, [r7, #28]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	61fb      	str	r3, [r7, #28]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	61fb      	str	r3, [r7, #28]
 800804e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800805e:	601a      	str	r2, [r3, #0]
 8008060:	e170      	b.n	8008344 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008066:	2b02      	cmp	r3, #2
 8008068:	d11b      	bne.n	80080a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008078:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008088:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800808a:	2300      	movs	r3, #0
 800808c:	61bb      	str	r3, [r7, #24]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	61bb      	str	r3, [r7, #24]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	61bb      	str	r3, [r7, #24]
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	e150      	b.n	8008344 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080a2:	2300      	movs	r3, #0
 80080a4:	617b      	str	r3, [r7, #20]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	617b      	str	r3, [r7, #20]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80080b8:	e144      	b.n	8008344 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080be:	2b03      	cmp	r3, #3
 80080c0:	f200 80f1 	bhi.w	80082a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d123      	bne.n	8008114 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fc79 	bl	80089c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e145      	b.n	800836c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	691a      	ldr	r2, [r3, #16]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ea:	b2d2      	uxtb	r2, r2
 80080ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080fc:	3b01      	subs	r3, #1
 80080fe:	b29a      	uxth	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008108:	b29b      	uxth	r3, r3
 800810a:	3b01      	subs	r3, #1
 800810c:	b29a      	uxth	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008112:	e117      	b.n	8008344 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008118:	2b02      	cmp	r3, #2
 800811a:	d14e      	bne.n	80081ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800811c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008122:	2200      	movs	r2, #0
 8008124:	4906      	ldr	r1, [pc, #24]	@ (8008140 <HAL_I2C_Mem_Read+0x22c>)
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 faa4 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d008      	beq.n	8008144 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e11a      	b.n	800836c <HAL_I2C_Mem_Read+0x458>
 8008136:	bf00      	nop
 8008138:	00100002 	.word	0x00100002
 800813c:	ffff0000 	.word	0xffff0000
 8008140:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008152:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	691a      	ldr	r2, [r3, #16]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815e:	b2d2      	uxtb	r2, r2
 8008160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008170:	3b01      	subs	r3, #1
 8008172:	b29a      	uxth	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800817c:	b29b      	uxth	r3, r3
 800817e:	3b01      	subs	r3, #1
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	691a      	ldr	r2, [r3, #16]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008190:	b2d2      	uxtb	r2, r2
 8008192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	3b01      	subs	r3, #1
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80081b8:	e0c4      	b.n	8008344 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c0:	2200      	movs	r2, #0
 80081c2:	496c      	ldr	r1, [pc, #432]	@ (8008374 <HAL_I2C_Mem_Read+0x460>)
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 fa55 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e0cb      	b.n	800836c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	691a      	ldr	r2, [r3, #16]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ee:	b2d2      	uxtb	r2, r2
 80081f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008200:	3b01      	subs	r3, #1
 8008202:	b29a      	uxth	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800820c:	b29b      	uxth	r3, r3
 800820e:	3b01      	subs	r3, #1
 8008210:	b29a      	uxth	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821c:	2200      	movs	r2, #0
 800821e:	4955      	ldr	r1, [pc, #340]	@ (8008374 <HAL_I2C_Mem_Read+0x460>)
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 fa27 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e09d      	b.n	800836c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800823e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	691a      	ldr	r2, [r3, #16]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800825c:	3b01      	subs	r3, #1
 800825e:	b29a      	uxth	r2, r3
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008268:	b29b      	uxth	r3, r3
 800826a:	3b01      	subs	r3, #1
 800826c:	b29a      	uxth	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	691a      	ldr	r2, [r3, #16]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827c:	b2d2      	uxtb	r2, r2
 800827e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008284:	1c5a      	adds	r2, r3, #1
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800828e:	3b01      	subs	r3, #1
 8008290:	b29a      	uxth	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800829a:	b29b      	uxth	r3, r3
 800829c:	3b01      	subs	r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80082a4:	e04e      	b.n	8008344 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 fb8c 	bl	80089c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e058      	b.n	800836c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	691a      	ldr	r2, [r3, #16]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c4:	b2d2      	uxtb	r2, r2
 80082c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082d6:	3b01      	subs	r3, #1
 80082d8:	b29a      	uxth	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	3b01      	subs	r3, #1
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	f003 0304 	and.w	r3, r3, #4
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d124      	bne.n	8008344 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d107      	bne.n	8008312 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008310:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	691a      	ldr	r2, [r3, #16]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800831c:	b2d2      	uxtb	r2, r2
 800831e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800832e:	3b01      	subs	r3, #1
 8008330:	b29a      	uxth	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800833a:	b29b      	uxth	r3, r3
 800833c:	3b01      	subs	r3, #1
 800833e:	b29a      	uxth	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008348:	2b00      	cmp	r3, #0
 800834a:	f47f aeb6 	bne.w	80080ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2220      	movs	r2, #32
 8008352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	e000      	b.n	800836c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800836a:	2302      	movs	r3, #2
  }
}
 800836c:	4618      	mov	r0, r3
 800836e:	3728      	adds	r7, #40	@ 0x28
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	00010004 	.word	0x00010004

08008378 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af02      	add	r7, sp, #8
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	4608      	mov	r0, r1
 8008382:	4611      	mov	r1, r2
 8008384:	461a      	mov	r2, r3
 8008386:	4603      	mov	r3, r0
 8008388:	817b      	strh	r3, [r7, #10]
 800838a:	460b      	mov	r3, r1
 800838c:	813b      	strh	r3, [r7, #8]
 800838e:	4613      	mov	r3, r2
 8008390:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f000 f960 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00d      	beq.n	80083d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083c8:	d103      	bne.n	80083d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e05f      	b.n	8008496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083d6:	897b      	ldrh	r3, [r7, #10]
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	461a      	mov	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80083e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e8:	6a3a      	ldr	r2, [r7, #32]
 80083ea:	492d      	ldr	r1, [pc, #180]	@ (80084a0 <I2C_RequestMemoryWrite+0x128>)
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 f9bb 	bl	8008768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e04c      	b.n	8008496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083fc:	2300      	movs	r3, #0
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	617b      	str	r3, [r7, #20]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	617b      	str	r3, [r7, #20]
 8008410:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008414:	6a39      	ldr	r1, [r7, #32]
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 fa46 	bl	80088a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00d      	beq.n	800843e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008426:	2b04      	cmp	r3, #4
 8008428:	d107      	bne.n	800843a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008438:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e02b      	b.n	8008496 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800843e:	88fb      	ldrh	r3, [r7, #6]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d105      	bne.n	8008450 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008444:	893b      	ldrh	r3, [r7, #8]
 8008446:	b2da      	uxtb	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	611a      	str	r2, [r3, #16]
 800844e:	e021      	b.n	8008494 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008450:	893b      	ldrh	r3, [r7, #8]
 8008452:	0a1b      	lsrs	r3, r3, #8
 8008454:	b29b      	uxth	r3, r3
 8008456:	b2da      	uxtb	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800845e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008460:	6a39      	ldr	r1, [r7, #32]
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 fa20 	bl	80088a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00d      	beq.n	800848a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008472:	2b04      	cmp	r3, #4
 8008474:	d107      	bne.n	8008486 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008484:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e005      	b.n	8008496 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800848a:	893b      	ldrh	r3, [r7, #8]
 800848c:	b2da      	uxtb	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	00010002 	.word	0x00010002

080084a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b088      	sub	sp, #32
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	4608      	mov	r0, r1
 80084ae:	4611      	mov	r1, r2
 80084b0:	461a      	mov	r2, r3
 80084b2:	4603      	mov	r3, r0
 80084b4:	817b      	strh	r3, [r7, #10]
 80084b6:	460b      	mov	r3, r1
 80084b8:	813b      	strh	r3, [r7, #8]
 80084ba:	4613      	mov	r3, r2
 80084bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80084cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80084dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 f8c2 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00d      	beq.n	8008512 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008500:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008504:	d103      	bne.n	800850e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800850c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e0aa      	b.n	8008668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008512:	897b      	ldrh	r3, [r7, #10]
 8008514:	b2db      	uxtb	r3, r3
 8008516:	461a      	mov	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008520:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	6a3a      	ldr	r2, [r7, #32]
 8008526:	4952      	ldr	r1, [pc, #328]	@ (8008670 <I2C_RequestMemoryRead+0x1cc>)
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 f91d 	bl	8008768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e097      	b.n	8008668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008538:	2300      	movs	r3, #0
 800853a:	617b      	str	r3, [r7, #20]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	617b      	str	r3, [r7, #20]
 800854c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800854e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008550:	6a39      	ldr	r1, [r7, #32]
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 f9a8 	bl	80088a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00d      	beq.n	800857a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008562:	2b04      	cmp	r3, #4
 8008564:	d107      	bne.n	8008576 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008574:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e076      	b.n	8008668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800857a:	88fb      	ldrh	r3, [r7, #6]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d105      	bne.n	800858c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008580:	893b      	ldrh	r3, [r7, #8]
 8008582:	b2da      	uxtb	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	611a      	str	r2, [r3, #16]
 800858a:	e021      	b.n	80085d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800858c:	893b      	ldrh	r3, [r7, #8]
 800858e:	0a1b      	lsrs	r3, r3, #8
 8008590:	b29b      	uxth	r3, r3
 8008592:	b2da      	uxtb	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800859a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800859c:	6a39      	ldr	r1, [r7, #32]
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 f982 	bl	80088a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00d      	beq.n	80085c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ae:	2b04      	cmp	r3, #4
 80085b0:	d107      	bne.n	80085c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e050      	b.n	8008668 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085c6:	893b      	ldrh	r3, [r7, #8]
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085d2:	6a39      	ldr	r1, [r7, #32]
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 f967 	bl	80088a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00d      	beq.n	80085fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e4:	2b04      	cmp	r3, #4
 80085e6:	d107      	bne.n	80085f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e035      	b.n	8008668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800860a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800860c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	2200      	movs	r2, #0
 8008614:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 f82b 	bl	8008674 <I2C_WaitOnFlagUntilTimeout>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00d      	beq.n	8008640 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800862e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008632:	d103      	bne.n	800863c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800863a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e013      	b.n	8008668 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008640:	897b      	ldrh	r3, [r7, #10]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	f043 0301 	orr.w	r3, r3, #1
 8008648:	b2da      	uxtb	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008652:	6a3a      	ldr	r2, [r7, #32]
 8008654:	4906      	ldr	r1, [pc, #24]	@ (8008670 <I2C_RequestMemoryRead+0x1cc>)
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 f886 	bl	8008768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e000      	b.n	8008668 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	00010002 	.word	0x00010002

08008674 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	4613      	mov	r3, r2
 8008682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008684:	e048      	b.n	8008718 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868c:	d044      	beq.n	8008718 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800868e:	f7fe fe79 	bl	8007384 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	429a      	cmp	r2, r3
 800869c:	d302      	bcc.n	80086a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d139      	bne.n	8008718 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	0c1b      	lsrs	r3, r3, #16
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d10d      	bne.n	80086ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	43da      	mvns	r2, r3
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	4013      	ands	r3, r2
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	bf0c      	ite	eq
 80086c0:	2301      	moveq	r3, #1
 80086c2:	2300      	movne	r3, #0
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	461a      	mov	r2, r3
 80086c8:	e00c      	b.n	80086e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	43da      	mvns	r2, r3
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	4013      	ands	r3, r2
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	2b00      	cmp	r3, #0
 80086da:	bf0c      	ite	eq
 80086dc:	2301      	moveq	r3, #1
 80086de:	2300      	movne	r3, #0
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	461a      	mov	r2, r3
 80086e4:	79fb      	ldrb	r3, [r7, #7]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d116      	bne.n	8008718 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008704:	f043 0220 	orr.w	r2, r3, #32
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e023      	b.n	8008760 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	0c1b      	lsrs	r3, r3, #16
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b01      	cmp	r3, #1
 8008720:	d10d      	bne.n	800873e <I2C_WaitOnFlagUntilTimeout+0xca>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	43da      	mvns	r2, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	4013      	ands	r3, r2
 800872e:	b29b      	uxth	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	bf0c      	ite	eq
 8008734:	2301      	moveq	r3, #1
 8008736:	2300      	movne	r3, #0
 8008738:	b2db      	uxtb	r3, r3
 800873a:	461a      	mov	r2, r3
 800873c:	e00c      	b.n	8008758 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	43da      	mvns	r2, r3
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	4013      	ands	r3, r2
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	bf0c      	ite	eq
 8008750:	2301      	moveq	r3, #1
 8008752:	2300      	movne	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	429a      	cmp	r2, r3
 800875c:	d093      	beq.n	8008686 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008776:	e071      	b.n	800885c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008786:	d123      	bne.n	80087d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008796:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80087a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087bc:	f043 0204 	orr.w	r2, r3, #4
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e067      	b.n	80088a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d6:	d041      	beq.n	800885c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087d8:	f7fe fdd4 	bl	8007384 <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d302      	bcc.n	80087ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d136      	bne.n	800885c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	0c1b      	lsrs	r3, r3, #16
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d10c      	bne.n	8008812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	43da      	mvns	r2, r3
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	4013      	ands	r3, r2
 8008804:	b29b      	uxth	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	bf14      	ite	ne
 800880a:	2301      	movne	r3, #1
 800880c:	2300      	moveq	r3, #0
 800880e:	b2db      	uxtb	r3, r3
 8008810:	e00b      	b.n	800882a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	43da      	mvns	r2, r3
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	4013      	ands	r3, r2
 800881e:	b29b      	uxth	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	bf14      	ite	ne
 8008824:	2301      	movne	r3, #1
 8008826:	2300      	moveq	r3, #0
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d016      	beq.n	800885c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2220      	movs	r2, #32
 8008838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008848:	f043 0220 	orr.w	r2, r3, #32
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e021      	b.n	80088a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	0c1b      	lsrs	r3, r3, #16
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b01      	cmp	r3, #1
 8008864:	d10c      	bne.n	8008880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	43da      	mvns	r2, r3
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	4013      	ands	r3, r2
 8008872:	b29b      	uxth	r3, r3
 8008874:	2b00      	cmp	r3, #0
 8008876:	bf14      	ite	ne
 8008878:	2301      	movne	r3, #1
 800887a:	2300      	moveq	r3, #0
 800887c:	b2db      	uxtb	r3, r3
 800887e:	e00b      	b.n	8008898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	43da      	mvns	r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	4013      	ands	r3, r2
 800888c:	b29b      	uxth	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	bf14      	ite	ne
 8008892:	2301      	movne	r3, #1
 8008894:	2300      	moveq	r3, #0
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	f47f af6d 	bne.w	8008778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088b4:	e034      	b.n	8008920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 f8e3 	bl	8008a82 <I2C_IsAcknowledgeFailed>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e034      	b.n	8008930 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088cc:	d028      	beq.n	8008920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ce:	f7fe fd59 	bl	8007384 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d302      	bcc.n	80088e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d11d      	bne.n	8008920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088ee:	2b80      	cmp	r3, #128	@ 0x80
 80088f0:	d016      	beq.n	8008920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800890c:	f043 0220 	orr.w	r2, r3, #32
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e007      	b.n	8008930 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800892a:	2b80      	cmp	r3, #128	@ 0x80
 800892c:	d1c3      	bne.n	80088b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008944:	e034      	b.n	80089b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 f89b 	bl	8008a82 <I2C_IsAcknowledgeFailed>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e034      	b.n	80089c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895c:	d028      	beq.n	80089b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800895e:	f7fe fd11 	bl	8007384 <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	429a      	cmp	r2, r3
 800896c:	d302      	bcc.n	8008974 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d11d      	bne.n	80089b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	f003 0304 	and.w	r3, r3, #4
 800897e:	2b04      	cmp	r3, #4
 8008980:	d016      	beq.n	80089b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2220      	movs	r2, #32
 800898c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899c:	f043 0220 	orr.w	r2, r3, #32
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e007      	b.n	80089c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	f003 0304 	and.w	r3, r3, #4
 80089ba:	2b04      	cmp	r3, #4
 80089bc:	d1c3      	bne.n	8008946 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089d4:	e049      	b.n	8008a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	f003 0310 	and.w	r3, r3, #16
 80089e0:	2b10      	cmp	r3, #16
 80089e2:	d119      	bne.n	8008a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f06f 0210 	mvn.w	r2, #16
 80089ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2220      	movs	r2, #32
 80089f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e030      	b.n	8008a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a18:	f7fe fcb4 	bl	8007384 <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d302      	bcc.n	8008a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d11d      	bne.n	8008a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a38:	2b40      	cmp	r3, #64	@ 0x40
 8008a3a:	d016      	beq.n	8008a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a56:	f043 0220 	orr.w	r2, r3, #32
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e007      	b.n	8008a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a74:	2b40      	cmp	r3, #64	@ 0x40
 8008a76:	d1ae      	bne.n	80089d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b083      	sub	sp, #12
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a98:	d11b      	bne.n	8008ad2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008aa2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2220      	movs	r2, #32
 8008aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008abe:	f043 0204 	orr.w	r2, r3, #4
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e267      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d075      	beq.n	8008bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008afe:	4b88      	ldr	r3, [pc, #544]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f003 030c 	and.w	r3, r3, #12
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d00c      	beq.n	8008b24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b0a:	4b85      	ldr	r3, [pc, #532]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008b12:	2b08      	cmp	r3, #8
 8008b14:	d112      	bne.n	8008b3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b16:	4b82      	ldr	r3, [pc, #520]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b22:	d10b      	bne.n	8008b3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b24:	4b7e      	ldr	r3, [pc, #504]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d05b      	beq.n	8008be8 <HAL_RCC_OscConfig+0x108>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d157      	bne.n	8008be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e242      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b44:	d106      	bne.n	8008b54 <HAL_RCC_OscConfig+0x74>
 8008b46:	4b76      	ldr	r3, [pc, #472]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a75      	ldr	r2, [pc, #468]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b50:	6013      	str	r3, [r2, #0]
 8008b52:	e01d      	b.n	8008b90 <HAL_RCC_OscConfig+0xb0>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b5c:	d10c      	bne.n	8008b78 <HAL_RCC_OscConfig+0x98>
 8008b5e:	4b70      	ldr	r3, [pc, #448]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a6f      	ldr	r2, [pc, #444]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a6c      	ldr	r2, [pc, #432]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	e00b      	b.n	8008b90 <HAL_RCC_OscConfig+0xb0>
 8008b78:	4b69      	ldr	r3, [pc, #420]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a68      	ldr	r2, [pc, #416]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	4b66      	ldr	r3, [pc, #408]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a65      	ldr	r2, [pc, #404]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d013      	beq.n	8008bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b98:	f7fe fbf4 	bl	8007384 <HAL_GetTick>
 8008b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b9e:	e008      	b.n	8008bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ba0:	f7fe fbf0 	bl	8007384 <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	2b64      	cmp	r3, #100	@ 0x64
 8008bac:	d901      	bls.n	8008bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e207      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bb2:	4b5b      	ldr	r3, [pc, #364]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d0f0      	beq.n	8008ba0 <HAL_RCC_OscConfig+0xc0>
 8008bbe:	e014      	b.n	8008bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bc0:	f7fe fbe0 	bl	8007384 <HAL_GetTick>
 8008bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bc6:	e008      	b.n	8008bda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bc8:	f7fe fbdc 	bl	8007384 <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	2b64      	cmp	r3, #100	@ 0x64
 8008bd4:	d901      	bls.n	8008bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e1f3      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bda:	4b51      	ldr	r3, [pc, #324]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1f0      	bne.n	8008bc8 <HAL_RCC_OscConfig+0xe8>
 8008be6:	e000      	b.n	8008bea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0302 	and.w	r3, r3, #2
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d063      	beq.n	8008cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f003 030c 	and.w	r3, r3, #12
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c02:	4b47      	ldr	r3, [pc, #284]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008c0a:	2b08      	cmp	r3, #8
 8008c0c:	d11c      	bne.n	8008c48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c0e:	4b44      	ldr	r3, [pc, #272]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d116      	bne.n	8008c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c1a:	4b41      	ldr	r3, [pc, #260]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d005      	beq.n	8008c32 <HAL_RCC_OscConfig+0x152>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d001      	beq.n	8008c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e1c7      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c32:	4b3b      	ldr	r3, [pc, #236]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	4937      	ldr	r1, [pc, #220]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c46:	e03a      	b.n	8008cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d020      	beq.n	8008c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c50:	4b34      	ldr	r3, [pc, #208]	@ (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008c52:	2201      	movs	r2, #1
 8008c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c56:	f7fe fb95 	bl	8007384 <HAL_GetTick>
 8008c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c5c:	e008      	b.n	8008c70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c5e:	f7fe fb91 	bl	8007384 <HAL_GetTick>
 8008c62:	4602      	mov	r2, r0
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d901      	bls.n	8008c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e1a8      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c70:	4b2b      	ldr	r3, [pc, #172]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0302 	and.w	r3, r3, #2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d0f0      	beq.n	8008c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c7c:	4b28      	ldr	r3, [pc, #160]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	00db      	lsls	r3, r3, #3
 8008c8a:	4925      	ldr	r1, [pc, #148]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	600b      	str	r3, [r1, #0]
 8008c90:	e015      	b.n	8008cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c92:	4b24      	ldr	r3, [pc, #144]	@ (8008d24 <HAL_RCC_OscConfig+0x244>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c98:	f7fe fb74 	bl	8007384 <HAL_GetTick>
 8008c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c9e:	e008      	b.n	8008cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ca0:	f7fe fb70 	bl	8007384 <HAL_GetTick>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d901      	bls.n	8008cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e187      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1f0      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0308 	and.w	r3, r3, #8
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d036      	beq.n	8008d38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d016      	beq.n	8008d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cd2:	4b15      	ldr	r3, [pc, #84]	@ (8008d28 <HAL_RCC_OscConfig+0x248>)
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cd8:	f7fe fb54 	bl	8007384 <HAL_GetTick>
 8008cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cde:	e008      	b.n	8008cf2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ce0:	f7fe fb50 	bl	8007384 <HAL_GetTick>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d901      	bls.n	8008cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e167      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8008d20 <HAL_RCC_OscConfig+0x240>)
 8008cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0f0      	beq.n	8008ce0 <HAL_RCC_OscConfig+0x200>
 8008cfe:	e01b      	b.n	8008d38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d00:	4b09      	ldr	r3, [pc, #36]	@ (8008d28 <HAL_RCC_OscConfig+0x248>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d06:	f7fe fb3d 	bl	8007384 <HAL_GetTick>
 8008d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d0c:	e00e      	b.n	8008d2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d0e:	f7fe fb39 	bl	8007384 <HAL_GetTick>
 8008d12:	4602      	mov	r2, r0
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	d907      	bls.n	8008d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	e150      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
 8008d20:	40023800 	.word	0x40023800
 8008d24:	42470000 	.word	0x42470000
 8008d28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d2c:	4b88      	ldr	r3, [pc, #544]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d30:	f003 0302 	and.w	r3, r3, #2
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1ea      	bne.n	8008d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0304 	and.w	r3, r3, #4
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 8097 	beq.w	8008e74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d46:	2300      	movs	r3, #0
 8008d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d4a:	4b81      	ldr	r3, [pc, #516]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10f      	bne.n	8008d76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d56:	2300      	movs	r3, #0
 8008d58:	60bb      	str	r3, [r7, #8]
 8008d5a:	4b7d      	ldr	r3, [pc, #500]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d5e:	4a7c      	ldr	r2, [pc, #496]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d66:	4b7a      	ldr	r3, [pc, #488]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d6e:	60bb      	str	r3, [r7, #8]
 8008d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d72:	2301      	movs	r3, #1
 8008d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d76:	4b77      	ldr	r3, [pc, #476]	@ (8008f54 <HAL_RCC_OscConfig+0x474>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d118      	bne.n	8008db4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d82:	4b74      	ldr	r3, [pc, #464]	@ (8008f54 <HAL_RCC_OscConfig+0x474>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a73      	ldr	r2, [pc, #460]	@ (8008f54 <HAL_RCC_OscConfig+0x474>)
 8008d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d8e:	f7fe faf9 	bl	8007384 <HAL_GetTick>
 8008d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d94:	e008      	b.n	8008da8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d96:	f7fe faf5 	bl	8007384 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d901      	bls.n	8008da8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e10c      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008da8:	4b6a      	ldr	r3, [pc, #424]	@ (8008f54 <HAL_RCC_OscConfig+0x474>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0f0      	beq.n	8008d96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d106      	bne.n	8008dca <HAL_RCC_OscConfig+0x2ea>
 8008dbc:	4b64      	ldr	r3, [pc, #400]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dc0:	4a63      	ldr	r2, [pc, #396]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008dc2:	f043 0301 	orr.w	r3, r3, #1
 8008dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dc8:	e01c      	b.n	8008e04 <HAL_RCC_OscConfig+0x324>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	2b05      	cmp	r3, #5
 8008dd0:	d10c      	bne.n	8008dec <HAL_RCC_OscConfig+0x30c>
 8008dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dd6:	4a5e      	ldr	r2, [pc, #376]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008dd8:	f043 0304 	orr.w	r3, r3, #4
 8008ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dde:	4b5c      	ldr	r3, [pc, #368]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008de2:	4a5b      	ldr	r2, [pc, #364]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008de4:	f043 0301 	orr.w	r3, r3, #1
 8008de8:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dea:	e00b      	b.n	8008e04 <HAL_RCC_OscConfig+0x324>
 8008dec:	4b58      	ldr	r3, [pc, #352]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008df0:	4a57      	ldr	r2, [pc, #348]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008df2:	f023 0301 	bic.w	r3, r3, #1
 8008df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008df8:	4b55      	ldr	r3, [pc, #340]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dfc:	4a54      	ldr	r2, [pc, #336]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008dfe:	f023 0304 	bic.w	r3, r3, #4
 8008e02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d015      	beq.n	8008e38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e0c:	f7fe faba 	bl	8007384 <HAL_GetTick>
 8008e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e12:	e00a      	b.n	8008e2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e14:	f7fe fab6 	bl	8007384 <HAL_GetTick>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d901      	bls.n	8008e2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e0cb      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e2a:	4b49      	ldr	r3, [pc, #292]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e2e:	f003 0302 	and.w	r3, r3, #2
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0ee      	beq.n	8008e14 <HAL_RCC_OscConfig+0x334>
 8008e36:	e014      	b.n	8008e62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e38:	f7fe faa4 	bl	8007384 <HAL_GetTick>
 8008e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e3e:	e00a      	b.n	8008e56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e40:	f7fe faa0 	bl	8007384 <HAL_GetTick>
 8008e44:	4602      	mov	r2, r0
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d901      	bls.n	8008e56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e0b5      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e56:	4b3e      	ldr	r3, [pc, #248]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e5a:	f003 0302 	and.w	r3, r3, #2
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1ee      	bne.n	8008e40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d105      	bne.n	8008e74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e68:	4b39      	ldr	r3, [pc, #228]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6c:	4a38      	ldr	r2, [pc, #224]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 80a1 	beq.w	8008fc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e7e:	4b34      	ldr	r3, [pc, #208]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f003 030c 	and.w	r3, r3, #12
 8008e86:	2b08      	cmp	r3, #8
 8008e88:	d05c      	beq.n	8008f44 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d141      	bne.n	8008f16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e92:	4b31      	ldr	r3, [pc, #196]	@ (8008f58 <HAL_RCC_OscConfig+0x478>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e98:	f7fe fa74 	bl	8007384 <HAL_GetTick>
 8008e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e9e:	e008      	b.n	8008eb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ea0:	f7fe fa70 	bl	8007384 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d901      	bls.n	8008eb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e087      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eb2:	4b27      	ldr	r3, [pc, #156]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1f0      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	69da      	ldr	r2, [r3, #28]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ecc:	019b      	lsls	r3, r3, #6
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed4:	085b      	lsrs	r3, r3, #1
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	041b      	lsls	r3, r3, #16
 8008eda:	431a      	orrs	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee0:	061b      	lsls	r3, r3, #24
 8008ee2:	491b      	ldr	r1, [pc, #108]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8008f58 <HAL_RCC_OscConfig+0x478>)
 8008eea:	2201      	movs	r2, #1
 8008eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eee:	f7fe fa49 	bl	8007384 <HAL_GetTick>
 8008ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ef4:	e008      	b.n	8008f08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ef6:	f7fe fa45 	bl	8007384 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d901      	bls.n	8008f08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e05c      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f08:	4b11      	ldr	r3, [pc, #68]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d0f0      	beq.n	8008ef6 <HAL_RCC_OscConfig+0x416>
 8008f14:	e054      	b.n	8008fc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f16:	4b10      	ldr	r3, [pc, #64]	@ (8008f58 <HAL_RCC_OscConfig+0x478>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f1c:	f7fe fa32 	bl	8007384 <HAL_GetTick>
 8008f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f22:	e008      	b.n	8008f36 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f24:	f7fe fa2e 	bl	8007384 <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d901      	bls.n	8008f36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e045      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f36:	4b06      	ldr	r3, [pc, #24]	@ (8008f50 <HAL_RCC_OscConfig+0x470>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1f0      	bne.n	8008f24 <HAL_RCC_OscConfig+0x444>
 8008f42:	e03d      	b.n	8008fc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d107      	bne.n	8008f5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e038      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
 8008f50:	40023800 	.word	0x40023800
 8008f54:	40007000 	.word	0x40007000
 8008f58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8008fcc <HAL_RCC_OscConfig+0x4ec>)
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	699b      	ldr	r3, [r3, #24]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d028      	beq.n	8008fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d121      	bne.n	8008fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d11a      	bne.n	8008fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008f92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d111      	bne.n	8008fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa2:	085b      	lsrs	r3, r3, #1
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d107      	bne.n	8008fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d001      	beq.n	8008fc0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e000      	b.n	8008fc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3718      	adds	r7, #24
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	40023800 	.word	0x40023800

08008fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e0cc      	b.n	800917e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fe4:	4b68      	ldr	r3, [pc, #416]	@ (8009188 <HAL_RCC_ClockConfig+0x1b8>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0307 	and.w	r3, r3, #7
 8008fec:	683a      	ldr	r2, [r7, #0]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d90c      	bls.n	800900c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ff2:	4b65      	ldr	r3, [pc, #404]	@ (8009188 <HAL_RCC_ClockConfig+0x1b8>)
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	b2d2      	uxtb	r2, r2
 8008ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ffa:	4b63      	ldr	r3, [pc, #396]	@ (8009188 <HAL_RCC_ClockConfig+0x1b8>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0307 	and.w	r3, r3, #7
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	429a      	cmp	r2, r3
 8009006:	d001      	beq.n	800900c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e0b8      	b.n	800917e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0302 	and.w	r3, r3, #2
 8009014:	2b00      	cmp	r3, #0
 8009016:	d020      	beq.n	800905a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0304 	and.w	r3, r3, #4
 8009020:	2b00      	cmp	r3, #0
 8009022:	d005      	beq.n	8009030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009024:	4b59      	ldr	r3, [pc, #356]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	4a58      	ldr	r2, [pc, #352]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 800902a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800902e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0308 	and.w	r3, r3, #8
 8009038:	2b00      	cmp	r3, #0
 800903a:	d005      	beq.n	8009048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800903c:	4b53      	ldr	r3, [pc, #332]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	4a52      	ldr	r2, [pc, #328]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 8009042:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009048:	4b50      	ldr	r3, [pc, #320]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	494d      	ldr	r1, [pc, #308]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 8009056:	4313      	orrs	r3, r2
 8009058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	2b00      	cmp	r3, #0
 8009064:	d044      	beq.n	80090f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d107      	bne.n	800907e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800906e:	4b47      	ldr	r3, [pc, #284]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009076:	2b00      	cmp	r3, #0
 8009078:	d119      	bne.n	80090ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e07f      	b.n	800917e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	2b02      	cmp	r3, #2
 8009084:	d003      	beq.n	800908e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800908a:	2b03      	cmp	r3, #3
 800908c:	d107      	bne.n	800909e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800908e:	4b3f      	ldr	r3, [pc, #252]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009096:	2b00      	cmp	r3, #0
 8009098:	d109      	bne.n	80090ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e06f      	b.n	800917e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800909e:	4b3b      	ldr	r3, [pc, #236]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 0302 	and.w	r3, r3, #2
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e067      	b.n	800917e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090ae:	4b37      	ldr	r3, [pc, #220]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f023 0203 	bic.w	r2, r3, #3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	4934      	ldr	r1, [pc, #208]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 80090bc:	4313      	orrs	r3, r2
 80090be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090c0:	f7fe f960 	bl	8007384 <HAL_GetTick>
 80090c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090c6:	e00a      	b.n	80090de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090c8:	f7fe f95c 	bl	8007384 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d901      	bls.n	80090de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e04f      	b.n	800917e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090de:	4b2b      	ldr	r3, [pc, #172]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f003 020c 	and.w	r2, r3, #12
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d1eb      	bne.n	80090c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090f0:	4b25      	ldr	r3, [pc, #148]	@ (8009188 <HAL_RCC_ClockConfig+0x1b8>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0307 	and.w	r3, r3, #7
 80090f8:	683a      	ldr	r2, [r7, #0]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d20c      	bcs.n	8009118 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090fe:	4b22      	ldr	r3, [pc, #136]	@ (8009188 <HAL_RCC_ClockConfig+0x1b8>)
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	b2d2      	uxtb	r2, r2
 8009104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009106:	4b20      	ldr	r3, [pc, #128]	@ (8009188 <HAL_RCC_ClockConfig+0x1b8>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0307 	and.w	r3, r3, #7
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	429a      	cmp	r2, r3
 8009112:	d001      	beq.n	8009118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e032      	b.n	800917e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0304 	and.w	r3, r3, #4
 8009120:	2b00      	cmp	r3, #0
 8009122:	d008      	beq.n	8009136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009124:	4b19      	ldr	r3, [pc, #100]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	4916      	ldr	r1, [pc, #88]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 8009132:	4313      	orrs	r3, r2
 8009134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0308 	and.w	r3, r3, #8
 800913e:	2b00      	cmp	r3, #0
 8009140:	d009      	beq.n	8009156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009142:	4b12      	ldr	r3, [pc, #72]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	00db      	lsls	r3, r3, #3
 8009150:	490e      	ldr	r1, [pc, #56]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 8009152:	4313      	orrs	r3, r2
 8009154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009156:	f000 f821 	bl	800919c <HAL_RCC_GetSysClockFreq>
 800915a:	4602      	mov	r2, r0
 800915c:	4b0b      	ldr	r3, [pc, #44]	@ (800918c <HAL_RCC_ClockConfig+0x1bc>)
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	091b      	lsrs	r3, r3, #4
 8009162:	f003 030f 	and.w	r3, r3, #15
 8009166:	490a      	ldr	r1, [pc, #40]	@ (8009190 <HAL_RCC_ClockConfig+0x1c0>)
 8009168:	5ccb      	ldrb	r3, [r1, r3]
 800916a:	fa22 f303 	lsr.w	r3, r2, r3
 800916e:	4a09      	ldr	r2, [pc, #36]	@ (8009194 <HAL_RCC_ClockConfig+0x1c4>)
 8009170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009172:	4b09      	ldr	r3, [pc, #36]	@ (8009198 <HAL_RCC_ClockConfig+0x1c8>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4618      	mov	r0, r3
 8009178:	f7fe f8c0 	bl	80072fc <HAL_InitTick>

  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	40023c00 	.word	0x40023c00
 800918c:	40023800 	.word	0x40023800
 8009190:	0800fd0c 	.word	0x0800fd0c
 8009194:	20000094 	.word	0x20000094
 8009198:	20000098 	.word	0x20000098

0800919c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800919c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091a0:	b090      	sub	sp, #64	@ 0x40
 80091a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80091a8:	2300      	movs	r3, #0
 80091aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091b4:	4b59      	ldr	r3, [pc, #356]	@ (800931c <HAL_RCC_GetSysClockFreq+0x180>)
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f003 030c 	and.w	r3, r3, #12
 80091bc:	2b08      	cmp	r3, #8
 80091be:	d00d      	beq.n	80091dc <HAL_RCC_GetSysClockFreq+0x40>
 80091c0:	2b08      	cmp	r3, #8
 80091c2:	f200 80a1 	bhi.w	8009308 <HAL_RCC_GetSysClockFreq+0x16c>
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <HAL_RCC_GetSysClockFreq+0x34>
 80091ca:	2b04      	cmp	r3, #4
 80091cc:	d003      	beq.n	80091d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80091ce:	e09b      	b.n	8009308 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80091d0:	4b53      	ldr	r3, [pc, #332]	@ (8009320 <HAL_RCC_GetSysClockFreq+0x184>)
 80091d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80091d4:	e09b      	b.n	800930e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80091d6:	4b53      	ldr	r3, [pc, #332]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x188>)
 80091d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80091da:	e098      	b.n	800930e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80091dc:	4b4f      	ldr	r3, [pc, #316]	@ (800931c <HAL_RCC_GetSysClockFreq+0x180>)
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80091e6:	4b4d      	ldr	r3, [pc, #308]	@ (800931c <HAL_RCC_GetSysClockFreq+0x180>)
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d028      	beq.n	8009244 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091f2:	4b4a      	ldr	r3, [pc, #296]	@ (800931c <HAL_RCC_GetSysClockFreq+0x180>)
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	099b      	lsrs	r3, r3, #6
 80091f8:	2200      	movs	r2, #0
 80091fa:	623b      	str	r3, [r7, #32]
 80091fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009204:	2100      	movs	r1, #0
 8009206:	4b47      	ldr	r3, [pc, #284]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x188>)
 8009208:	fb03 f201 	mul.w	r2, r3, r1
 800920c:	2300      	movs	r3, #0
 800920e:	fb00 f303 	mul.w	r3, r0, r3
 8009212:	4413      	add	r3, r2
 8009214:	4a43      	ldr	r2, [pc, #268]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x188>)
 8009216:	fba0 1202 	umull	r1, r2, r0, r2
 800921a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800921c:	460a      	mov	r2, r1
 800921e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009222:	4413      	add	r3, r2
 8009224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009228:	2200      	movs	r2, #0
 800922a:	61bb      	str	r3, [r7, #24]
 800922c:	61fa      	str	r2, [r7, #28]
 800922e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009232:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009236:	f7f7 fd57 	bl	8000ce8 <__aeabi_uldivmod>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4613      	mov	r3, r2
 8009240:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009242:	e053      	b.n	80092ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009244:	4b35      	ldr	r3, [pc, #212]	@ (800931c <HAL_RCC_GetSysClockFreq+0x180>)
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	099b      	lsrs	r3, r3, #6
 800924a:	2200      	movs	r2, #0
 800924c:	613b      	str	r3, [r7, #16]
 800924e:	617a      	str	r2, [r7, #20]
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009256:	f04f 0b00 	mov.w	fp, #0
 800925a:	4652      	mov	r2, sl
 800925c:	465b      	mov	r3, fp
 800925e:	f04f 0000 	mov.w	r0, #0
 8009262:	f04f 0100 	mov.w	r1, #0
 8009266:	0159      	lsls	r1, r3, #5
 8009268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800926c:	0150      	lsls	r0, r2, #5
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	ebb2 080a 	subs.w	r8, r2, sl
 8009276:	eb63 090b 	sbc.w	r9, r3, fp
 800927a:	f04f 0200 	mov.w	r2, #0
 800927e:	f04f 0300 	mov.w	r3, #0
 8009282:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009286:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800928a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800928e:	ebb2 0408 	subs.w	r4, r2, r8
 8009292:	eb63 0509 	sbc.w	r5, r3, r9
 8009296:	f04f 0200 	mov.w	r2, #0
 800929a:	f04f 0300 	mov.w	r3, #0
 800929e:	00eb      	lsls	r3, r5, #3
 80092a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092a4:	00e2      	lsls	r2, r4, #3
 80092a6:	4614      	mov	r4, r2
 80092a8:	461d      	mov	r5, r3
 80092aa:	eb14 030a 	adds.w	r3, r4, sl
 80092ae:	603b      	str	r3, [r7, #0]
 80092b0:	eb45 030b 	adc.w	r3, r5, fp
 80092b4:	607b      	str	r3, [r7, #4]
 80092b6:	f04f 0200 	mov.w	r2, #0
 80092ba:	f04f 0300 	mov.w	r3, #0
 80092be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80092c2:	4629      	mov	r1, r5
 80092c4:	028b      	lsls	r3, r1, #10
 80092c6:	4621      	mov	r1, r4
 80092c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80092cc:	4621      	mov	r1, r4
 80092ce:	028a      	lsls	r2, r1, #10
 80092d0:	4610      	mov	r0, r2
 80092d2:	4619      	mov	r1, r3
 80092d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d6:	2200      	movs	r2, #0
 80092d8:	60bb      	str	r3, [r7, #8]
 80092da:	60fa      	str	r2, [r7, #12]
 80092dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092e0:	f7f7 fd02 	bl	8000ce8 <__aeabi_uldivmod>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4613      	mov	r3, r2
 80092ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80092ec:	4b0b      	ldr	r3, [pc, #44]	@ (800931c <HAL_RCC_GetSysClockFreq+0x180>)
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	0c1b      	lsrs	r3, r3, #16
 80092f2:	f003 0303 	and.w	r3, r3, #3
 80092f6:	3301      	adds	r3, #1
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80092fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80092fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009300:	fbb2 f3f3 	udiv	r3, r2, r3
 8009304:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009306:	e002      	b.n	800930e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009308:	4b05      	ldr	r3, [pc, #20]	@ (8009320 <HAL_RCC_GetSysClockFreq+0x184>)
 800930a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800930c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800930e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009310:	4618      	mov	r0, r3
 8009312:	3740      	adds	r7, #64	@ 0x40
 8009314:	46bd      	mov	sp, r7
 8009316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800931a:	bf00      	nop
 800931c:	40023800 	.word	0x40023800
 8009320:	00f42400 	.word	0x00f42400
 8009324:	017d7840 	.word	0x017d7840

08009328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009328:	b480      	push	{r7}
 800932a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800932c:	4b03      	ldr	r3, [pc, #12]	@ (800933c <HAL_RCC_GetHCLKFreq+0x14>)
 800932e:	681b      	ldr	r3, [r3, #0]
}
 8009330:	4618      	mov	r0, r3
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	20000094 	.word	0x20000094

08009340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009344:	f7ff fff0 	bl	8009328 <HAL_RCC_GetHCLKFreq>
 8009348:	4602      	mov	r2, r0
 800934a:	4b05      	ldr	r3, [pc, #20]	@ (8009360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	0a9b      	lsrs	r3, r3, #10
 8009350:	f003 0307 	and.w	r3, r3, #7
 8009354:	4903      	ldr	r1, [pc, #12]	@ (8009364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009356:	5ccb      	ldrb	r3, [r1, r3]
 8009358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800935c:	4618      	mov	r0, r3
 800935e:	bd80      	pop	{r7, pc}
 8009360:	40023800 	.word	0x40023800
 8009364:	0800fd1c 	.word	0x0800fd1c

08009368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800936c:	f7ff ffdc 	bl	8009328 <HAL_RCC_GetHCLKFreq>
 8009370:	4602      	mov	r2, r0
 8009372:	4b05      	ldr	r3, [pc, #20]	@ (8009388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	0b5b      	lsrs	r3, r3, #13
 8009378:	f003 0307 	and.w	r3, r3, #7
 800937c:	4903      	ldr	r1, [pc, #12]	@ (800938c <HAL_RCC_GetPCLK2Freq+0x24>)
 800937e:	5ccb      	ldrb	r3, [r1, r3]
 8009380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009384:	4618      	mov	r0, r3
 8009386:	bd80      	pop	{r7, pc}
 8009388:	40023800 	.word	0x40023800
 800938c:	0800fd1c 	.word	0x0800fd1c

08009390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e041      	b.n	8009426 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d106      	bne.n	80093bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7fd fac0 	bl	800693c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2202      	movs	r2, #2
 80093c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3304      	adds	r3, #4
 80093cc:	4619      	mov	r1, r3
 80093ce:	4610      	mov	r0, r2
 80093d0:	f000 fc0c 	bl	8009bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b082      	sub	sp, #8
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d101      	bne.n	8009440 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e041      	b.n	80094c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b00      	cmp	r3, #0
 800944a:	d106      	bne.n	800945a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f839 	bl	80094cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2202      	movs	r2, #2
 800945e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	3304      	adds	r3, #4
 800946a:	4619      	mov	r1, r3
 800946c:	4610      	mov	r0, r2
 800946e:	f000 fbbd 	bl	8009bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d109      	bne.n	8009504 <HAL_TIM_PWM_Start+0x24>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	bf14      	ite	ne
 80094fc:	2301      	movne	r3, #1
 80094fe:	2300      	moveq	r3, #0
 8009500:	b2db      	uxtb	r3, r3
 8009502:	e022      	b.n	800954a <HAL_TIM_PWM_Start+0x6a>
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	2b04      	cmp	r3, #4
 8009508:	d109      	bne.n	800951e <HAL_TIM_PWM_Start+0x3e>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b01      	cmp	r3, #1
 8009514:	bf14      	ite	ne
 8009516:	2301      	movne	r3, #1
 8009518:	2300      	moveq	r3, #0
 800951a:	b2db      	uxtb	r3, r3
 800951c:	e015      	b.n	800954a <HAL_TIM_PWM_Start+0x6a>
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b08      	cmp	r3, #8
 8009522:	d109      	bne.n	8009538 <HAL_TIM_PWM_Start+0x58>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b01      	cmp	r3, #1
 800952e:	bf14      	ite	ne
 8009530:	2301      	movne	r3, #1
 8009532:	2300      	moveq	r3, #0
 8009534:	b2db      	uxtb	r3, r3
 8009536:	e008      	b.n	800954a <HAL_TIM_PWM_Start+0x6a>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b01      	cmp	r3, #1
 8009542:	bf14      	ite	ne
 8009544:	2301      	movne	r3, #1
 8009546:	2300      	moveq	r3, #0
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e07c      	b.n	800964c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d104      	bne.n	8009562 <HAL_TIM_PWM_Start+0x82>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2202      	movs	r2, #2
 800955c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009560:	e013      	b.n	800958a <HAL_TIM_PWM_Start+0xaa>
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	2b04      	cmp	r3, #4
 8009566:	d104      	bne.n	8009572 <HAL_TIM_PWM_Start+0x92>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2202      	movs	r2, #2
 800956c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009570:	e00b      	b.n	800958a <HAL_TIM_PWM_Start+0xaa>
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	2b08      	cmp	r3, #8
 8009576:	d104      	bne.n	8009582 <HAL_TIM_PWM_Start+0xa2>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009580:	e003      	b.n	800958a <HAL_TIM_PWM_Start+0xaa>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2202      	movs	r2, #2
 8009586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2201      	movs	r2, #1
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	4618      	mov	r0, r3
 8009594:	f000 fe20 	bl	800a1d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a2d      	ldr	r2, [pc, #180]	@ (8009654 <HAL_TIM_PWM_Start+0x174>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d004      	beq.n	80095ac <HAL_TIM_PWM_Start+0xcc>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a2c      	ldr	r2, [pc, #176]	@ (8009658 <HAL_TIM_PWM_Start+0x178>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d101      	bne.n	80095b0 <HAL_TIM_PWM_Start+0xd0>
 80095ac:	2301      	movs	r3, #1
 80095ae:	e000      	b.n	80095b2 <HAL_TIM_PWM_Start+0xd2>
 80095b0:	2300      	movs	r3, #0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d007      	beq.n	80095c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80095c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a22      	ldr	r2, [pc, #136]	@ (8009654 <HAL_TIM_PWM_Start+0x174>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d022      	beq.n	8009616 <HAL_TIM_PWM_Start+0x136>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095d8:	d01d      	beq.n	8009616 <HAL_TIM_PWM_Start+0x136>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a1f      	ldr	r2, [pc, #124]	@ (800965c <HAL_TIM_PWM_Start+0x17c>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d018      	beq.n	8009616 <HAL_TIM_PWM_Start+0x136>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009660 <HAL_TIM_PWM_Start+0x180>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d013      	beq.n	8009616 <HAL_TIM_PWM_Start+0x136>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a1c      	ldr	r2, [pc, #112]	@ (8009664 <HAL_TIM_PWM_Start+0x184>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d00e      	beq.n	8009616 <HAL_TIM_PWM_Start+0x136>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a16      	ldr	r2, [pc, #88]	@ (8009658 <HAL_TIM_PWM_Start+0x178>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d009      	beq.n	8009616 <HAL_TIM_PWM_Start+0x136>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a18      	ldr	r2, [pc, #96]	@ (8009668 <HAL_TIM_PWM_Start+0x188>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d004      	beq.n	8009616 <HAL_TIM_PWM_Start+0x136>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a16      	ldr	r2, [pc, #88]	@ (800966c <HAL_TIM_PWM_Start+0x18c>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d111      	bne.n	800963a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	f003 0307 	and.w	r3, r3, #7
 8009620:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2b06      	cmp	r3, #6
 8009626:	d010      	beq.n	800964a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f042 0201 	orr.w	r2, r2, #1
 8009636:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009638:	e007      	b.n	800964a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f042 0201 	orr.w	r2, r2, #1
 8009648:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	40010000 	.word	0x40010000
 8009658:	40010400 	.word	0x40010400
 800965c:	40000400 	.word	0x40000400
 8009660:	40000800 	.word	0x40000800
 8009664:	40000c00 	.word	0x40000c00
 8009668:	40014000 	.word	0x40014000
 800966c:	40001800 	.word	0x40001800

08009670 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d101      	bne.n	8009684 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e097      	b.n	80097b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2b00      	cmp	r3, #0
 800968e:	d106      	bne.n	800969e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7fd f867 	bl	800676c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2202      	movs	r2, #2
 80096a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	6812      	ldr	r2, [r2, #0]
 80096b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096b4:	f023 0307 	bic.w	r3, r3, #7
 80096b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3304      	adds	r3, #4
 80096c2:	4619      	mov	r1, r3
 80096c4:	4610      	mov	r0, r2
 80096c6:	f000 fa91 	bl	8009bec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	4313      	orrs	r3, r2
 80096ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096f2:	f023 0303 	bic.w	r3, r3, #3
 80096f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	689a      	ldr	r2, [r3, #8]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	021b      	lsls	r3, r3, #8
 8009702:	4313      	orrs	r3, r2
 8009704:	693a      	ldr	r2, [r7, #16]
 8009706:	4313      	orrs	r3, r2
 8009708:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009710:	f023 030c 	bic.w	r3, r3, #12
 8009714:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800971c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009720:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	68da      	ldr	r2, [r3, #12]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	021b      	lsls	r3, r3, #8
 800972c:	4313      	orrs	r3, r2
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	4313      	orrs	r3, r2
 8009732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	011a      	lsls	r2, r3, #4
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	031b      	lsls	r3, r3, #12
 8009740:	4313      	orrs	r3, r2
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	4313      	orrs	r3, r2
 8009746:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800974e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009756:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	011b      	lsls	r3, r3, #4
 8009762:	4313      	orrs	r3, r2
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	4313      	orrs	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3718      	adds	r7, #24
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80097cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80097d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80097e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d110      	bne.n	800980e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d102      	bne.n	80097f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80097f2:	7b7b      	ldrb	r3, [r7, #13]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d001      	beq.n	80097fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e069      	b.n	80098d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2202      	movs	r2, #2
 8009800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2202      	movs	r2, #2
 8009808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800980c:	e031      	b.n	8009872 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	2b04      	cmp	r3, #4
 8009812:	d110      	bne.n	8009836 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009814:	7bbb      	ldrb	r3, [r7, #14]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d102      	bne.n	8009820 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800981a:	7b3b      	ldrb	r3, [r7, #12]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d001      	beq.n	8009824 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e055      	b.n	80098d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2202      	movs	r2, #2
 8009828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2202      	movs	r2, #2
 8009830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009834:	e01d      	b.n	8009872 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d108      	bne.n	800984e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800983c:	7bbb      	ldrb	r3, [r7, #14]
 800983e:	2b01      	cmp	r3, #1
 8009840:	d105      	bne.n	800984e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009842:	7b7b      	ldrb	r3, [r7, #13]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d102      	bne.n	800984e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009848:	7b3b      	ldrb	r3, [r7, #12]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d001      	beq.n	8009852 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e03e      	b.n	80098d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2202      	movs	r2, #2
 8009856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2202      	movs	r2, #2
 800985e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2202      	movs	r2, #2
 8009866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2202      	movs	r2, #2
 800986e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <HAL_TIM_Encoder_Start+0xc4>
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	2b04      	cmp	r3, #4
 800987c:	d008      	beq.n	8009890 <HAL_TIM_Encoder_Start+0xd4>
 800987e:	e00f      	b.n	80098a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2201      	movs	r2, #1
 8009886:	2100      	movs	r1, #0
 8009888:	4618      	mov	r0, r3
 800988a:	f000 fca5 	bl	800a1d8 <TIM_CCxChannelCmd>
      break;
 800988e:	e016      	b.n	80098be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2201      	movs	r2, #1
 8009896:	2104      	movs	r1, #4
 8009898:	4618      	mov	r0, r3
 800989a:	f000 fc9d 	bl	800a1d8 <TIM_CCxChannelCmd>
      break;
 800989e:	e00e      	b.n	80098be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2201      	movs	r2, #1
 80098a6:	2100      	movs	r1, #0
 80098a8:	4618      	mov	r0, r3
 80098aa:	f000 fc95 	bl	800a1d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2201      	movs	r2, #1
 80098b4:	2104      	movs	r1, #4
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 fc8e 	bl	800a1d8 <TIM_CCxChannelCmd>
      break;
 80098bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f042 0201 	orr.w	r2, r2, #1
 80098cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d101      	bne.n	80098f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80098f2:	2302      	movs	r3, #2
 80098f4:	e0ae      	b.n	8009a54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b0c      	cmp	r3, #12
 8009902:	f200 809f 	bhi.w	8009a44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009906:	a201      	add	r2, pc, #4	@ (adr r2, 800990c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	08009941 	.word	0x08009941
 8009910:	08009a45 	.word	0x08009a45
 8009914:	08009a45 	.word	0x08009a45
 8009918:	08009a45 	.word	0x08009a45
 800991c:	08009981 	.word	0x08009981
 8009920:	08009a45 	.word	0x08009a45
 8009924:	08009a45 	.word	0x08009a45
 8009928:	08009a45 	.word	0x08009a45
 800992c:	080099c3 	.word	0x080099c3
 8009930:	08009a45 	.word	0x08009a45
 8009934:	08009a45 	.word	0x08009a45
 8009938:	08009a45 	.word	0x08009a45
 800993c:	08009a03 	.word	0x08009a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68b9      	ldr	r1, [r7, #8]
 8009946:	4618      	mov	r0, r3
 8009948:	f000 f9fc 	bl	8009d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	699a      	ldr	r2, [r3, #24]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f042 0208 	orr.w	r2, r2, #8
 800995a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	699a      	ldr	r2, [r3, #24]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f022 0204 	bic.w	r2, r2, #4
 800996a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6999      	ldr	r1, [r3, #24]
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	691a      	ldr	r2, [r3, #16]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	430a      	orrs	r2, r1
 800997c:	619a      	str	r2, [r3, #24]
      break;
 800997e:	e064      	b.n	8009a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68b9      	ldr	r1, [r7, #8]
 8009986:	4618      	mov	r0, r3
 8009988:	f000 fa4c 	bl	8009e24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	699a      	ldr	r2, [r3, #24]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800999a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	699a      	ldr	r2, [r3, #24]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6999      	ldr	r1, [r3, #24]
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	021a      	lsls	r2, r3, #8
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	430a      	orrs	r2, r1
 80099be:	619a      	str	r2, [r3, #24]
      break;
 80099c0:	e043      	b.n	8009a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68b9      	ldr	r1, [r7, #8]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f000 faa1 	bl	8009f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	69da      	ldr	r2, [r3, #28]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f042 0208 	orr.w	r2, r2, #8
 80099dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	69da      	ldr	r2, [r3, #28]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f022 0204 	bic.w	r2, r2, #4
 80099ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	69d9      	ldr	r1, [r3, #28]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	691a      	ldr	r2, [r3, #16]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	430a      	orrs	r2, r1
 80099fe:	61da      	str	r2, [r3, #28]
      break;
 8009a00:	e023      	b.n	8009a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68b9      	ldr	r1, [r7, #8]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 faf5 	bl	8009ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	69da      	ldr	r2, [r3, #28]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	69da      	ldr	r2, [r3, #28]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	69d9      	ldr	r1, [r3, #28]
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	021a      	lsls	r2, r3, #8
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	61da      	str	r2, [r3, #28]
      break;
 8009a42:	e002      	b.n	8009a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	75fb      	strb	r3, [r7, #23]
      break;
 8009a48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3718      	adds	r7, #24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a66:	2300      	movs	r3, #0
 8009a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d101      	bne.n	8009a78 <HAL_TIM_ConfigClockSource+0x1c>
 8009a74:	2302      	movs	r3, #2
 8009a76:	e0b4      	b.n	8009be2 <HAL_TIM_ConfigClockSource+0x186>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2202      	movs	r2, #2
 8009a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68ba      	ldr	r2, [r7, #8]
 8009aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ab0:	d03e      	beq.n	8009b30 <HAL_TIM_ConfigClockSource+0xd4>
 8009ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ab6:	f200 8087 	bhi.w	8009bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009abe:	f000 8086 	beq.w	8009bce <HAL_TIM_ConfigClockSource+0x172>
 8009ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ac6:	d87f      	bhi.n	8009bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ac8:	2b70      	cmp	r3, #112	@ 0x70
 8009aca:	d01a      	beq.n	8009b02 <HAL_TIM_ConfigClockSource+0xa6>
 8009acc:	2b70      	cmp	r3, #112	@ 0x70
 8009ace:	d87b      	bhi.n	8009bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ad0:	2b60      	cmp	r3, #96	@ 0x60
 8009ad2:	d050      	beq.n	8009b76 <HAL_TIM_ConfigClockSource+0x11a>
 8009ad4:	2b60      	cmp	r3, #96	@ 0x60
 8009ad6:	d877      	bhi.n	8009bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ad8:	2b50      	cmp	r3, #80	@ 0x50
 8009ada:	d03c      	beq.n	8009b56 <HAL_TIM_ConfigClockSource+0xfa>
 8009adc:	2b50      	cmp	r3, #80	@ 0x50
 8009ade:	d873      	bhi.n	8009bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ae0:	2b40      	cmp	r3, #64	@ 0x40
 8009ae2:	d058      	beq.n	8009b96 <HAL_TIM_ConfigClockSource+0x13a>
 8009ae4:	2b40      	cmp	r3, #64	@ 0x40
 8009ae6:	d86f      	bhi.n	8009bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ae8:	2b30      	cmp	r3, #48	@ 0x30
 8009aea:	d064      	beq.n	8009bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8009aec:	2b30      	cmp	r3, #48	@ 0x30
 8009aee:	d86b      	bhi.n	8009bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009af0:	2b20      	cmp	r3, #32
 8009af2:	d060      	beq.n	8009bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8009af4:	2b20      	cmp	r3, #32
 8009af6:	d867      	bhi.n	8009bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d05c      	beq.n	8009bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8009afc:	2b10      	cmp	r3, #16
 8009afe:	d05a      	beq.n	8009bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8009b00:	e062      	b.n	8009bc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b12:	f000 fb41 	bl	800a198 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009b24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	609a      	str	r2, [r3, #8]
      break;
 8009b2e:	e04f      	b.n	8009bd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b40:	f000 fb2a 	bl	800a198 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	689a      	ldr	r2, [r3, #8]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b52:	609a      	str	r2, [r3, #8]
      break;
 8009b54:	e03c      	b.n	8009bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b62:	461a      	mov	r2, r3
 8009b64:	f000 fa9e 	bl	800a0a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2150      	movs	r1, #80	@ 0x50
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 faf7 	bl	800a162 <TIM_ITRx_SetConfig>
      break;
 8009b74:	e02c      	b.n	8009bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b82:	461a      	mov	r2, r3
 8009b84:	f000 fabd 	bl	800a102 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2160      	movs	r1, #96	@ 0x60
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 fae7 	bl	800a162 <TIM_ITRx_SetConfig>
      break;
 8009b94:	e01c      	b.n	8009bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f000 fa7e 	bl	800a0a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2140      	movs	r1, #64	@ 0x40
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 fad7 	bl	800a162 <TIM_ITRx_SetConfig>
      break;
 8009bb4:	e00c      	b.n	8009bd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	f000 face 	bl	800a162 <TIM_ITRx_SetConfig>
      break;
 8009bc6:	e003      	b.n	8009bd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	73fb      	strb	r3, [r7, #15]
      break;
 8009bcc:	e000      	b.n	8009bd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009bce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
	...

08009bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a46      	ldr	r2, [pc, #280]	@ (8009d18 <TIM_Base_SetConfig+0x12c>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d013      	beq.n	8009c2c <TIM_Base_SetConfig+0x40>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c0a:	d00f      	beq.n	8009c2c <TIM_Base_SetConfig+0x40>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a43      	ldr	r2, [pc, #268]	@ (8009d1c <TIM_Base_SetConfig+0x130>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d00b      	beq.n	8009c2c <TIM_Base_SetConfig+0x40>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a42      	ldr	r2, [pc, #264]	@ (8009d20 <TIM_Base_SetConfig+0x134>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d007      	beq.n	8009c2c <TIM_Base_SetConfig+0x40>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a41      	ldr	r2, [pc, #260]	@ (8009d24 <TIM_Base_SetConfig+0x138>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d003      	beq.n	8009c2c <TIM_Base_SetConfig+0x40>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a40      	ldr	r2, [pc, #256]	@ (8009d28 <TIM_Base_SetConfig+0x13c>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d108      	bne.n	8009c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a35      	ldr	r2, [pc, #212]	@ (8009d18 <TIM_Base_SetConfig+0x12c>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d02b      	beq.n	8009c9e <TIM_Base_SetConfig+0xb2>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c4c:	d027      	beq.n	8009c9e <TIM_Base_SetConfig+0xb2>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a32      	ldr	r2, [pc, #200]	@ (8009d1c <TIM_Base_SetConfig+0x130>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d023      	beq.n	8009c9e <TIM_Base_SetConfig+0xb2>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a31      	ldr	r2, [pc, #196]	@ (8009d20 <TIM_Base_SetConfig+0x134>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d01f      	beq.n	8009c9e <TIM_Base_SetConfig+0xb2>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a30      	ldr	r2, [pc, #192]	@ (8009d24 <TIM_Base_SetConfig+0x138>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d01b      	beq.n	8009c9e <TIM_Base_SetConfig+0xb2>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a2f      	ldr	r2, [pc, #188]	@ (8009d28 <TIM_Base_SetConfig+0x13c>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d017      	beq.n	8009c9e <TIM_Base_SetConfig+0xb2>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a2e      	ldr	r2, [pc, #184]	@ (8009d2c <TIM_Base_SetConfig+0x140>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d013      	beq.n	8009c9e <TIM_Base_SetConfig+0xb2>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a2d      	ldr	r2, [pc, #180]	@ (8009d30 <TIM_Base_SetConfig+0x144>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d00f      	beq.n	8009c9e <TIM_Base_SetConfig+0xb2>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a2c      	ldr	r2, [pc, #176]	@ (8009d34 <TIM_Base_SetConfig+0x148>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d00b      	beq.n	8009c9e <TIM_Base_SetConfig+0xb2>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a2b      	ldr	r2, [pc, #172]	@ (8009d38 <TIM_Base_SetConfig+0x14c>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d007      	beq.n	8009c9e <TIM_Base_SetConfig+0xb2>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a2a      	ldr	r2, [pc, #168]	@ (8009d3c <TIM_Base_SetConfig+0x150>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d003      	beq.n	8009c9e <TIM_Base_SetConfig+0xb2>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a29      	ldr	r2, [pc, #164]	@ (8009d40 <TIM_Base_SetConfig+0x154>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d108      	bne.n	8009cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	689a      	ldr	r2, [r3, #8]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a10      	ldr	r2, [pc, #64]	@ (8009d18 <TIM_Base_SetConfig+0x12c>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d003      	beq.n	8009ce4 <TIM_Base_SetConfig+0xf8>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a12      	ldr	r2, [pc, #72]	@ (8009d28 <TIM_Base_SetConfig+0x13c>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d103      	bne.n	8009cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	691a      	ldr	r2, [r3, #16]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	f003 0301 	and.w	r3, r3, #1
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d105      	bne.n	8009d0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	f023 0201 	bic.w	r2, r3, #1
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	611a      	str	r2, [r3, #16]
  }
}
 8009d0a:	bf00      	nop
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	40010000 	.word	0x40010000
 8009d1c:	40000400 	.word	0x40000400
 8009d20:	40000800 	.word	0x40000800
 8009d24:	40000c00 	.word	0x40000c00
 8009d28:	40010400 	.word	0x40010400
 8009d2c:	40014000 	.word	0x40014000
 8009d30:	40014400 	.word	0x40014400
 8009d34:	40014800 	.word	0x40014800
 8009d38:	40001800 	.word	0x40001800
 8009d3c:	40001c00 	.word	0x40001c00
 8009d40:	40002000 	.word	0x40002000

08009d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a1b      	ldr	r3, [r3, #32]
 8009d58:	f023 0201 	bic.w	r2, r3, #1
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 0303 	bic.w	r3, r3, #3
 8009d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f023 0302 	bic.w	r3, r3, #2
 8009d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a20      	ldr	r2, [pc, #128]	@ (8009e1c <TIM_OC1_SetConfig+0xd8>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d003      	beq.n	8009da8 <TIM_OC1_SetConfig+0x64>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a1f      	ldr	r2, [pc, #124]	@ (8009e20 <TIM_OC1_SetConfig+0xdc>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d10c      	bne.n	8009dc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	f023 0308 	bic.w	r3, r3, #8
 8009dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f023 0304 	bic.w	r3, r3, #4
 8009dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a15      	ldr	r2, [pc, #84]	@ (8009e1c <TIM_OC1_SetConfig+0xd8>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d003      	beq.n	8009dd2 <TIM_OC1_SetConfig+0x8e>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a14      	ldr	r2, [pc, #80]	@ (8009e20 <TIM_OC1_SetConfig+0xdc>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d111      	bne.n	8009df6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	695b      	ldr	r3, [r3, #20]
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	685a      	ldr	r2, [r3, #4]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	697a      	ldr	r2, [r7, #20]
 8009e0e:	621a      	str	r2, [r3, #32]
}
 8009e10:	bf00      	nop
 8009e12:	371c      	adds	r7, #28
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	40010000 	.word	0x40010000
 8009e20:	40010400 	.word	0x40010400

08009e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b087      	sub	sp, #28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	f023 0210 	bic.w	r2, r3, #16
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	699b      	ldr	r3, [r3, #24]
 8009e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	021b      	lsls	r3, r3, #8
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	f023 0320 	bic.w	r3, r3, #32
 8009e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	011b      	lsls	r3, r3, #4
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a22      	ldr	r2, [pc, #136]	@ (8009f08 <TIM_OC2_SetConfig+0xe4>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d003      	beq.n	8009e8c <TIM_OC2_SetConfig+0x68>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a21      	ldr	r2, [pc, #132]	@ (8009f0c <TIM_OC2_SetConfig+0xe8>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d10d      	bne.n	8009ea8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	011b      	lsls	r3, r3, #4
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ea6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a17      	ldr	r2, [pc, #92]	@ (8009f08 <TIM_OC2_SetConfig+0xe4>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d003      	beq.n	8009eb8 <TIM_OC2_SetConfig+0x94>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a16      	ldr	r2, [pc, #88]	@ (8009f0c <TIM_OC2_SetConfig+0xe8>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d113      	bne.n	8009ee0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009ebe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	693a      	ldr	r2, [r7, #16]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	693a      	ldr	r2, [r7, #16]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	685a      	ldr	r2, [r3, #4]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	621a      	str	r2, [r3, #32]
}
 8009efa:	bf00      	nop
 8009efc:	371c      	adds	r7, #28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	40010000 	.word	0x40010000
 8009f0c:	40010400 	.word	0x40010400

08009f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b087      	sub	sp, #28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a1b      	ldr	r3, [r3, #32]
 8009f24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	69db      	ldr	r3, [r3, #28]
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f023 0303 	bic.w	r3, r3, #3
 8009f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	021b      	lsls	r3, r3, #8
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	4a21      	ldr	r2, [pc, #132]	@ (8009ff0 <TIM_OC3_SetConfig+0xe0>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d003      	beq.n	8009f76 <TIM_OC3_SetConfig+0x66>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a20      	ldr	r2, [pc, #128]	@ (8009ff4 <TIM_OC3_SetConfig+0xe4>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d10d      	bne.n	8009f92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	021b      	lsls	r3, r3, #8
 8009f84:	697a      	ldr	r2, [r7, #20]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a16      	ldr	r2, [pc, #88]	@ (8009ff0 <TIM_OC3_SetConfig+0xe0>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d003      	beq.n	8009fa2 <TIM_OC3_SetConfig+0x92>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a15      	ldr	r2, [pc, #84]	@ (8009ff4 <TIM_OC3_SetConfig+0xe4>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d113      	bne.n	8009fca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	011b      	lsls	r3, r3, #4
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	011b      	lsls	r3, r3, #4
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	621a      	str	r2, [r3, #32]
}
 8009fe4:	bf00      	nop
 8009fe6:	371c      	adds	r7, #28
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	40010000 	.word	0x40010000
 8009ff4:	40010400 	.word	0x40010400

08009ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a1b      	ldr	r3, [r3, #32]
 800a00c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a02e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	021b      	lsls	r3, r3, #8
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	4313      	orrs	r3, r2
 800a03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	031b      	lsls	r3, r3, #12
 800a04a:	693a      	ldr	r2, [r7, #16]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a12      	ldr	r2, [pc, #72]	@ (800a09c <TIM_OC4_SetConfig+0xa4>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d003      	beq.n	800a060 <TIM_OC4_SetConfig+0x68>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a11      	ldr	r2, [pc, #68]	@ (800a0a0 <TIM_OC4_SetConfig+0xa8>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d109      	bne.n	800a074 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	695b      	ldr	r3, [r3, #20]
 800a06c:	019b      	lsls	r3, r3, #6
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	4313      	orrs	r3, r2
 800a072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	621a      	str	r2, [r3, #32]
}
 800a08e:	bf00      	nop
 800a090:	371c      	adds	r7, #28
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	40010000 	.word	0x40010000
 800a0a0:	40010400 	.word	0x40010400

0800a0a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6a1b      	ldr	r3, [r3, #32]
 800a0b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6a1b      	ldr	r3, [r3, #32]
 800a0ba:	f023 0201 	bic.w	r2, r3, #1
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	011b      	lsls	r3, r3, #4
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	f023 030a 	bic.w	r3, r3, #10
 800a0e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	621a      	str	r2, [r3, #32]
}
 800a0f6:	bf00      	nop
 800a0f8:	371c      	adds	r7, #28
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a102:	b480      	push	{r7}
 800a104:	b087      	sub	sp, #28
 800a106:	af00      	add	r7, sp, #0
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	60b9      	str	r1, [r7, #8]
 800a10c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6a1b      	ldr	r3, [r3, #32]
 800a118:	f023 0210 	bic.w	r2, r3, #16
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	699b      	ldr	r3, [r3, #24]
 800a124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a12c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	031b      	lsls	r3, r3, #12
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	4313      	orrs	r3, r2
 800a136:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a13e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	011b      	lsls	r3, r3, #4
 800a144:	697a      	ldr	r2, [r7, #20]
 800a146:	4313      	orrs	r3, r2
 800a148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	621a      	str	r2, [r3, #32]
}
 800a156:	bf00      	nop
 800a158:	371c      	adds	r7, #28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a162:	b480      	push	{r7}
 800a164:	b085      	sub	sp, #20
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4313      	orrs	r3, r2
 800a180:	f043 0307 	orr.w	r3, r3, #7
 800a184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	609a      	str	r2, [r3, #8]
}
 800a18c:	bf00      	nop
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a198:	b480      	push	{r7}
 800a19a:	b087      	sub	sp, #28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	021a      	lsls	r2, r3, #8
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	697a      	ldr	r2, [r7, #20]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	609a      	str	r2, [r3, #8]
}
 800a1cc:	bf00      	nop
 800a1ce:	371c      	adds	r7, #28
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b087      	sub	sp, #28
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	f003 031f 	and.w	r3, r3, #31
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6a1a      	ldr	r2, [r3, #32]
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	43db      	mvns	r3, r3
 800a1fa:	401a      	ands	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6a1a      	ldr	r2, [r3, #32]
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	f003 031f 	and.w	r3, r3, #31
 800a20a:	6879      	ldr	r1, [r7, #4]
 800a20c:	fa01 f303 	lsl.w	r3, r1, r3
 800a210:	431a      	orrs	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	621a      	str	r2, [r3, #32]
}
 800a216:	bf00      	nop
 800a218:	371c      	adds	r7, #28
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
	...

0800a224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a234:	2b01      	cmp	r3, #1
 800a236:	d101      	bne.n	800a23c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a238:	2302      	movs	r3, #2
 800a23a:	e05a      	b.n	800a2f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2202      	movs	r2, #2
 800a248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a21      	ldr	r2, [pc, #132]	@ (800a300 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d022      	beq.n	800a2c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a288:	d01d      	beq.n	800a2c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a1d      	ldr	r2, [pc, #116]	@ (800a304 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d018      	beq.n	800a2c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a1b      	ldr	r2, [pc, #108]	@ (800a308 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d013      	beq.n	800a2c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a1a      	ldr	r2, [pc, #104]	@ (800a30c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d00e      	beq.n	800a2c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a18      	ldr	r2, [pc, #96]	@ (800a310 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d009      	beq.n	800a2c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a17      	ldr	r2, [pc, #92]	@ (800a314 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d004      	beq.n	800a2c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a15      	ldr	r2, [pc, #84]	@ (800a318 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d10c      	bne.n	800a2e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	40010000 	.word	0x40010000
 800a304:	40000400 	.word	0x40000400
 800a308:	40000800 	.word	0x40000800
 800a30c:	40000c00 	.word	0x40000c00
 800a310:	40010400 	.word	0x40010400
 800a314:	40014000 	.word	0x40014000
 800a318:	40001800 	.word	0x40001800

0800a31c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a326:	2300      	movs	r3, #0
 800a328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a330:	2b01      	cmp	r3, #1
 800a332:	d101      	bne.n	800a338 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a334:	2302      	movs	r3, #2
 800a336:	e03d      	b.n	800a3b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	4313      	orrs	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	4313      	orrs	r3, r2
 800a368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4313      	orrs	r3, r2
 800a376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	4313      	orrs	r3, r2
 800a384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	4313      	orrs	r3, r2
 800a392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	69db      	ldr	r3, [r3, #28]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d101      	bne.n	800a3d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e042      	b.n	800a458 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d106      	bne.n	800a3ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f7fc fd7e 	bl	8006ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2224      	movs	r2, #36	@ 0x24
 800a3f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68da      	ldr	r2, [r3, #12]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fdbd 	bl	800af84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	691a      	ldr	r2, [r3, #16]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	695a      	ldr	r2, [r3, #20]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68da      	ldr	r2, [r3, #12]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2220      	movs	r2, #32
 800a444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2220      	movs	r2, #32
 800a44c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08a      	sub	sp, #40	@ 0x28
 800a464:	af02      	add	r7, sp, #8
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	603b      	str	r3, [r7, #0]
 800a46c:	4613      	mov	r3, r2
 800a46e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a470:	2300      	movs	r3, #0
 800a472:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b20      	cmp	r3, #32
 800a47e:	d175      	bne.n	800a56c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d002      	beq.n	800a48c <HAL_UART_Transmit+0x2c>
 800a486:	88fb      	ldrh	r3, [r7, #6]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d101      	bne.n	800a490 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e06e      	b.n	800a56e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2221      	movs	r2, #33	@ 0x21
 800a49a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a49e:	f7fc ff71 	bl	8007384 <HAL_GetTick>
 800a4a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	88fa      	ldrh	r2, [r7, #6]
 800a4a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	88fa      	ldrh	r2, [r7, #6]
 800a4ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4b8:	d108      	bne.n	800a4cc <HAL_UART_Transmit+0x6c>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d104      	bne.n	800a4cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	61bb      	str	r3, [r7, #24]
 800a4ca:	e003      	b.n	800a4d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a4d4:	e02e      	b.n	800a534 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	2180      	movs	r1, #128	@ 0x80
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f000 fb1f 	bl	800ab24 <UART_WaitOnFlagUntilTimeout>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d005      	beq.n	800a4f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2220      	movs	r2, #32
 800a4f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e03a      	b.n	800a56e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d10b      	bne.n	800a516 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	881b      	ldrh	r3, [r3, #0]
 800a502:	461a      	mov	r2, r3
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a50c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	3302      	adds	r3, #2
 800a512:	61bb      	str	r3, [r7, #24]
 800a514:	e007      	b.n	800a526 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	781a      	ldrb	r2, [r3, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	3301      	adds	r3, #1
 800a524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	3b01      	subs	r3, #1
 800a52e:	b29a      	uxth	r2, r3
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a538:	b29b      	uxth	r3, r3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1cb      	bne.n	800a4d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	9300      	str	r3, [sp, #0]
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2200      	movs	r2, #0
 800a546:	2140      	movs	r1, #64	@ 0x40
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f000 faeb 	bl	800ab24 <UART_WaitOnFlagUntilTimeout>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d005      	beq.n	800a560 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2220      	movs	r2, #32
 800a558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a55c:	2303      	movs	r3, #3
 800a55e:	e006      	b.n	800a56e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2220      	movs	r2, #32
 800a564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	e000      	b.n	800a56e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a56c:	2302      	movs	r3, #2
  }
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3720      	adds	r7, #32
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b084      	sub	sp, #16
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	60b9      	str	r1, [r7, #8]
 800a580:	4613      	mov	r3, r2
 800a582:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b20      	cmp	r3, #32
 800a58e:	d112      	bne.n	800a5b6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d002      	beq.n	800a59c <HAL_UART_Receive_IT+0x26>
 800a596:	88fb      	ldrh	r3, [r7, #6]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d101      	bne.n	800a5a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	e00b      	b.n	800a5b8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a5a6:	88fb      	ldrh	r3, [r7, #6]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	68b9      	ldr	r1, [r7, #8]
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f000 fb12 	bl	800abd6 <UART_Start_Receive_IT>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	e000      	b.n	800a5b8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a5b6:	2302      	movs	r3, #2
  }
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b0ba      	sub	sp, #232	@ 0xe8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a5f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5f6:	f003 030f 	and.w	r3, r3, #15
 800a5fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a5fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a602:	2b00      	cmp	r3, #0
 800a604:	d10f      	bne.n	800a626 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a60a:	f003 0320 	and.w	r3, r3, #32
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d009      	beq.n	800a626 <HAL_UART_IRQHandler+0x66>
 800a612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a616:	f003 0320 	and.w	r3, r3, #32
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d003      	beq.n	800a626 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fbf2 	bl	800ae08 <UART_Receive_IT>
      return;
 800a624:	e25b      	b.n	800aade <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f000 80de 	beq.w	800a7ec <HAL_UART_IRQHandler+0x22c>
 800a630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d106      	bne.n	800a64a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a63c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a640:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a644:	2b00      	cmp	r3, #0
 800a646:	f000 80d1 	beq.w	800a7ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a64a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00b      	beq.n	800a66e <HAL_UART_IRQHandler+0xae>
 800a656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a65a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d005      	beq.n	800a66e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a666:	f043 0201 	orr.w	r2, r3, #1
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a66e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a672:	f003 0304 	and.w	r3, r3, #4
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00b      	beq.n	800a692 <HAL_UART_IRQHandler+0xd2>
 800a67a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	2b00      	cmp	r3, #0
 800a684:	d005      	beq.n	800a692 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a68a:	f043 0202 	orr.w	r2, r3, #2
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a696:	f003 0302 	and.w	r3, r3, #2
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00b      	beq.n	800a6b6 <HAL_UART_IRQHandler+0xf6>
 800a69e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d005      	beq.n	800a6b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6ae:	f043 0204 	orr.w	r2, r3, #4
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6ba:	f003 0308 	and.w	r3, r3, #8
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d011      	beq.n	800a6e6 <HAL_UART_IRQHandler+0x126>
 800a6c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6c6:	f003 0320 	and.w	r3, r3, #32
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d105      	bne.n	800a6da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a6ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d005      	beq.n	800a6e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6de:	f043 0208 	orr.w	r2, r3, #8
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f000 81f2 	beq.w	800aad4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6f4:	f003 0320 	and.w	r3, r3, #32
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d008      	beq.n	800a70e <HAL_UART_IRQHandler+0x14e>
 800a6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a700:	f003 0320 	and.w	r3, r3, #32
 800a704:	2b00      	cmp	r3, #0
 800a706:	d002      	beq.n	800a70e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fb7d 	bl	800ae08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	695b      	ldr	r3, [r3, #20]
 800a714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a718:	2b40      	cmp	r3, #64	@ 0x40
 800a71a:	bf0c      	ite	eq
 800a71c:	2301      	moveq	r3, #1
 800a71e:	2300      	movne	r3, #0
 800a720:	b2db      	uxtb	r3, r3
 800a722:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a72a:	f003 0308 	and.w	r3, r3, #8
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d103      	bne.n	800a73a <HAL_UART_IRQHandler+0x17a>
 800a732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a736:	2b00      	cmp	r3, #0
 800a738:	d04f      	beq.n	800a7da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fa85 	bl	800ac4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a74a:	2b40      	cmp	r3, #64	@ 0x40
 800a74c:	d141      	bne.n	800a7d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	3314      	adds	r3, #20
 800a754:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a758:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a75c:	e853 3f00 	ldrex	r3, [r3]
 800a760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a764:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a76c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3314      	adds	r3, #20
 800a776:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a77a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a77e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a782:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a786:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a78a:	e841 2300 	strex	r3, r2, [r1]
 800a78e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1d9      	bne.n	800a74e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d013      	beq.n	800a7ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7a6:	4a7e      	ldr	r2, [pc, #504]	@ (800a9a0 <HAL_UART_IRQHandler+0x3e0>)
 800a7a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fc ff99 	bl	80076e6 <HAL_DMA_Abort_IT>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d016      	beq.n	800a7e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7c8:	e00e      	b.n	800a7e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f994 	bl	800aaf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7d0:	e00a      	b.n	800a7e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f990 	bl	800aaf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7d8:	e006      	b.n	800a7e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 f98c 	bl	800aaf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a7e6:	e175      	b.n	800aad4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7e8:	bf00      	nop
    return;
 800a7ea:	e173      	b.n	800aad4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	f040 814f 	bne.w	800aa94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a7f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7fa:	f003 0310 	and.w	r3, r3, #16
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 8148 	beq.w	800aa94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a808:	f003 0310 	and.w	r3, r3, #16
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f000 8141 	beq.w	800aa94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a812:	2300      	movs	r3, #0
 800a814:	60bb      	str	r3, [r7, #8]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	60bb      	str	r3, [r7, #8]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	60bb      	str	r3, [r7, #8]
 800a826:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	695b      	ldr	r3, [r3, #20]
 800a82e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a832:	2b40      	cmp	r3, #64	@ 0x40
 800a834:	f040 80b6 	bne.w	800a9a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a844:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f000 8145 	beq.w	800aad8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a856:	429a      	cmp	r2, r3
 800a858:	f080 813e 	bcs.w	800aad8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a862:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a86e:	f000 8088 	beq.w	800a982 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	330c      	adds	r3, #12
 800a878:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a880:	e853 3f00 	ldrex	r3, [r3]
 800a884:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a888:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a88c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a890:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	330c      	adds	r3, #12
 800a89a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a89e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a8a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a8aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a8b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1d9      	bne.n	800a872 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3314      	adds	r3, #20
 800a8c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a8c8:	e853 3f00 	ldrex	r3, [r3]
 800a8cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a8ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a8d0:	f023 0301 	bic.w	r3, r3, #1
 800a8d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3314      	adds	r3, #20
 800a8de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a8e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a8e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a8ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a8ee:	e841 2300 	strex	r3, r2, [r1]
 800a8f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a8f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1e1      	bne.n	800a8be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	3314      	adds	r3, #20
 800a900:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a902:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a904:	e853 3f00 	ldrex	r3, [r3]
 800a908:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a90a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a90c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3314      	adds	r3, #20
 800a91a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a91e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a920:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a922:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a924:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a926:	e841 2300 	strex	r3, r2, [r1]
 800a92a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a92c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1e3      	bne.n	800a8fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2220      	movs	r2, #32
 800a936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	330c      	adds	r3, #12
 800a946:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a94a:	e853 3f00 	ldrex	r3, [r3]
 800a94e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a952:	f023 0310 	bic.w	r3, r3, #16
 800a956:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	330c      	adds	r3, #12
 800a960:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a964:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a966:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a968:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a96a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a96c:	e841 2300 	strex	r3, r2, [r1]
 800a970:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e3      	bne.n	800a940 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fc fe42 	bl	8007606 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2202      	movs	r2, #2
 800a986:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a990:	b29b      	uxth	r3, r3
 800a992:	1ad3      	subs	r3, r2, r3
 800a994:	b29b      	uxth	r3, r3
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f8b7 	bl	800ab0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a99e:	e09b      	b.n	800aad8 <HAL_UART_IRQHandler+0x518>
 800a9a0:	0800ad11 	.word	0x0800ad11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f000 808e 	beq.w	800aadc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a9c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 8089 	beq.w	800aadc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	330c      	adds	r3, #12
 800a9d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d4:	e853 3f00 	ldrex	r3, [r3]
 800a9d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a9da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	330c      	adds	r3, #12
 800a9ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a9ee:	647a      	str	r2, [r7, #68]	@ 0x44
 800a9f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a9f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9f6:	e841 2300 	strex	r3, r2, [r1]
 800a9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a9fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1e3      	bne.n	800a9ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	3314      	adds	r3, #20
 800aa08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0c:	e853 3f00 	ldrex	r3, [r3]
 800aa10:	623b      	str	r3, [r7, #32]
   return(result);
 800aa12:	6a3b      	ldr	r3, [r7, #32]
 800aa14:	f023 0301 	bic.w	r3, r3, #1
 800aa18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	3314      	adds	r3, #20
 800aa22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aa26:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa2e:	e841 2300 	strex	r3, r2, [r1]
 800aa32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1e3      	bne.n	800aa02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2220      	movs	r2, #32
 800aa3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	330c      	adds	r3, #12
 800aa4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	e853 3f00 	ldrex	r3, [r3]
 800aa56:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f023 0310 	bic.w	r3, r3, #16
 800aa5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	330c      	adds	r3, #12
 800aa68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800aa6c:	61fa      	str	r2, [r7, #28]
 800aa6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa70:	69b9      	ldr	r1, [r7, #24]
 800aa72:	69fa      	ldr	r2, [r7, #28]
 800aa74:	e841 2300 	strex	r3, r2, [r1]
 800aa78:	617b      	str	r3, [r7, #20]
   return(result);
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1e3      	bne.n	800aa48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2202      	movs	r2, #2
 800aa84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 f83d 	bl	800ab0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa92:	e023      	b.n	800aadc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d009      	beq.n	800aab4 <HAL_UART_IRQHandler+0x4f4>
 800aaa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d003      	beq.n	800aab4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 f943 	bl	800ad38 <UART_Transmit_IT>
    return;
 800aab2:	e014      	b.n	800aade <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00e      	beq.n	800aade <HAL_UART_IRQHandler+0x51e>
 800aac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d008      	beq.n	800aade <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 f983 	bl	800add8 <UART_EndTransmit_IT>
    return;
 800aad2:	e004      	b.n	800aade <HAL_UART_IRQHandler+0x51e>
    return;
 800aad4:	bf00      	nop
 800aad6:	e002      	b.n	800aade <HAL_UART_IRQHandler+0x51e>
      return;
 800aad8:	bf00      	nop
 800aada:	e000      	b.n	800aade <HAL_UART_IRQHandler+0x51e>
      return;
 800aadc:	bf00      	nop
  }
}
 800aade:	37e8      	adds	r7, #232	@ 0xe8
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab18:	bf00      	nop
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b086      	sub	sp, #24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	603b      	str	r3, [r7, #0]
 800ab30:	4613      	mov	r3, r2
 800ab32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab34:	e03b      	b.n	800abae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab36:	6a3b      	ldr	r3, [r7, #32]
 800ab38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3c:	d037      	beq.n	800abae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab3e:	f7fc fc21 	bl	8007384 <HAL_GetTick>
 800ab42:	4602      	mov	r2, r0
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	6a3a      	ldr	r2, [r7, #32]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d302      	bcc.n	800ab54 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d101      	bne.n	800ab58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ab54:	2303      	movs	r3, #3
 800ab56:	e03a      	b.n	800abce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	f003 0304 	and.w	r3, r3, #4
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d023      	beq.n	800abae <UART_WaitOnFlagUntilTimeout+0x8a>
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	2b80      	cmp	r3, #128	@ 0x80
 800ab6a:	d020      	beq.n	800abae <UART_WaitOnFlagUntilTimeout+0x8a>
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	2b40      	cmp	r3, #64	@ 0x40
 800ab70:	d01d      	beq.n	800abae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 0308 	and.w	r3, r3, #8
 800ab7c:	2b08      	cmp	r3, #8
 800ab7e:	d116      	bne.n	800abae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ab80:	2300      	movs	r3, #0
 800ab82:	617b      	str	r3, [r7, #20]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	617b      	str	r3, [r7, #20]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	617b      	str	r3, [r7, #20]
 800ab94:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f000 f857 	bl	800ac4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2208      	movs	r2, #8
 800aba0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e00f      	b.n	800abce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	4013      	ands	r3, r2
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	429a      	cmp	r2, r3
 800abbc:	bf0c      	ite	eq
 800abbe:	2301      	moveq	r3, #1
 800abc0:	2300      	movne	r3, #0
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	461a      	mov	r2, r3
 800abc6:	79fb      	ldrb	r3, [r7, #7]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d0b4      	beq.n	800ab36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3718      	adds	r7, #24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abd6:	b480      	push	{r7}
 800abd8:	b085      	sub	sp, #20
 800abda:	af00      	add	r7, sp, #0
 800abdc:	60f8      	str	r0, [r7, #12]
 800abde:	60b9      	str	r1, [r7, #8]
 800abe0:	4613      	mov	r3, r2
 800abe2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	88fa      	ldrh	r2, [r7, #6]
 800abee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	88fa      	ldrh	r2, [r7, #6]
 800abf4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2222      	movs	r2, #34	@ 0x22
 800ac00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d007      	beq.n	800ac1c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68da      	ldr	r2, [r3, #12]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac1a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	695a      	ldr	r2, [r3, #20]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f042 0201 	orr.w	r2, r2, #1
 800ac2a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68da      	ldr	r2, [r3, #12]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f042 0220 	orr.w	r2, r2, #32
 800ac3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3714      	adds	r7, #20
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b095      	sub	sp, #84	@ 0x54
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	330c      	adds	r3, #12
 800ac58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac5c:	e853 3f00 	ldrex	r3, [r3]
 800ac60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	330c      	adds	r3, #12
 800ac70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac72:	643a      	str	r2, [r7, #64]	@ 0x40
 800ac74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac7a:	e841 2300 	strex	r3, r2, [r1]
 800ac7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1e5      	bne.n	800ac52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	3314      	adds	r3, #20
 800ac8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8e:	6a3b      	ldr	r3, [r7, #32]
 800ac90:	e853 3f00 	ldrex	r3, [r3]
 800ac94:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	f023 0301 	bic.w	r3, r3, #1
 800ac9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	3314      	adds	r3, #20
 800aca4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acae:	e841 2300 	strex	r3, r2, [r1]
 800acb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800acb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1e5      	bne.n	800ac86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d119      	bne.n	800acf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	330c      	adds	r3, #12
 800acc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	e853 3f00 	ldrex	r3, [r3]
 800acd0:	60bb      	str	r3, [r7, #8]
   return(result);
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	f023 0310 	bic.w	r3, r3, #16
 800acd8:	647b      	str	r3, [r7, #68]	@ 0x44
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	330c      	adds	r3, #12
 800ace0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ace2:	61ba      	str	r2, [r7, #24]
 800ace4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace6:	6979      	ldr	r1, [r7, #20]
 800ace8:	69ba      	ldr	r2, [r7, #24]
 800acea:	e841 2300 	strex	r3, r2, [r1]
 800acee:	613b      	str	r3, [r7, #16]
   return(result);
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1e5      	bne.n	800acc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2220      	movs	r2, #32
 800acfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ad04:	bf00      	nop
 800ad06:	3754      	adds	r7, #84	@ 0x54
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2200      	movs	r2, #0
 800ad28:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f7ff fee4 	bl	800aaf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad30:	bf00      	nop
 800ad32:	3710      	adds	r7, #16
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	2b21      	cmp	r3, #33	@ 0x21
 800ad4a:	d13e      	bne.n	800adca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad54:	d114      	bne.n	800ad80 <UART_Transmit_IT+0x48>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d110      	bne.n	800ad80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a1b      	ldr	r3, [r3, #32]
 800ad62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	461a      	mov	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a1b      	ldr	r3, [r3, #32]
 800ad78:	1c9a      	adds	r2, r3, #2
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	621a      	str	r2, [r3, #32]
 800ad7e:	e008      	b.n	800ad92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6a1b      	ldr	r3, [r3, #32]
 800ad84:	1c59      	adds	r1, r3, #1
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	6211      	str	r1, [r2, #32]
 800ad8a:	781a      	ldrb	r2, [r3, #0]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	4619      	mov	r1, r3
 800ada0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10f      	bne.n	800adc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	68da      	ldr	r2, [r3, #12]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800adb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68da      	ldr	r2, [r3, #12]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800adc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	e000      	b.n	800adcc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800adca:	2302      	movs	r3, #2
  }
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3714      	adds	r7, #20
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68da      	ldr	r2, [r3, #12]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800adee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2220      	movs	r2, #32
 800adf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7ff fe73 	bl	800aae4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b08c      	sub	sp, #48	@ 0x30
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	2b22      	cmp	r3, #34	@ 0x22
 800ae1a:	f040 80ae 	bne.w	800af7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	689b      	ldr	r3, [r3, #8]
 800ae22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae26:	d117      	bne.n	800ae58 <UART_Receive_IT+0x50>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d113      	bne.n	800ae58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ae30:	2300      	movs	r3, #0
 800ae32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae50:	1c9a      	adds	r2, r3, #2
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	629a      	str	r2, [r3, #40]	@ 0x28
 800ae56:	e026      	b.n	800aea6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae6a:	d007      	beq.n	800ae7c <UART_Receive_IT+0x74>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10a      	bne.n	800ae8a <UART_Receive_IT+0x82>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d106      	bne.n	800ae8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	b2da      	uxtb	r2, r3
 800ae84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae86:	701a      	strb	r2, [r3, #0]
 800ae88:	e008      	b.n	800ae9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae96:	b2da      	uxtb	r2, r3
 800ae98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aea0:	1c5a      	adds	r2, r3, #1
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	3b01      	subs	r3, #1
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d15d      	bne.n	800af76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68da      	ldr	r2, [r3, #12]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f022 0220 	bic.w	r2, r2, #32
 800aec8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68da      	ldr	r2, [r3, #12]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aed8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	695a      	ldr	r2, [r3, #20]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f022 0201 	bic.w	r2, r2, #1
 800aee8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2220      	movs	r2, #32
 800aeee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d135      	bne.n	800af6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	330c      	adds	r3, #12
 800af0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	e853 3f00 	ldrex	r3, [r3]
 800af14:	613b      	str	r3, [r7, #16]
   return(result);
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	f023 0310 	bic.w	r3, r3, #16
 800af1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	330c      	adds	r3, #12
 800af24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af26:	623a      	str	r2, [r7, #32]
 800af28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2a:	69f9      	ldr	r1, [r7, #28]
 800af2c:	6a3a      	ldr	r2, [r7, #32]
 800af2e:	e841 2300 	strex	r3, r2, [r1]
 800af32:	61bb      	str	r3, [r7, #24]
   return(result);
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1e5      	bne.n	800af06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0310 	and.w	r3, r3, #16
 800af44:	2b10      	cmp	r3, #16
 800af46:	d10a      	bne.n	800af5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af48:	2300      	movs	r3, #0
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	60fb      	str	r3, [r7, #12]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	60fb      	str	r3, [r7, #12]
 800af5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800af62:	4619      	mov	r1, r3
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7ff fdd1 	bl	800ab0c <HAL_UARTEx_RxEventCallback>
 800af6a:	e002      	b.n	800af72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f7fa f84d 	bl	800500c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800af72:	2300      	movs	r3, #0
 800af74:	e002      	b.n	800af7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800af76:	2300      	movs	r3, #0
 800af78:	e000      	b.n	800af7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800af7a:	2302      	movs	r3, #2
  }
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3730      	adds	r7, #48	@ 0x30
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af88:	b0c0      	sub	sp, #256	@ 0x100
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800af9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afa0:	68d9      	ldr	r1, [r3, #12]
 800afa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	ea40 0301 	orr.w	r3, r0, r1
 800afac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800afae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afb2:	689a      	ldr	r2, [r3, #8]
 800afb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	431a      	orrs	r2, r3
 800afbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afc0:	695b      	ldr	r3, [r3, #20]
 800afc2:	431a      	orrs	r2, r3
 800afc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afc8:	69db      	ldr	r3, [r3, #28]
 800afca:	4313      	orrs	r3, r2
 800afcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800afd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800afdc:	f021 010c 	bic.w	r1, r1, #12
 800afe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800afea:	430b      	orrs	r3, r1
 800afec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800afee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	695b      	ldr	r3, [r3, #20]
 800aff6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800affa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800affe:	6999      	ldr	r1, [r3, #24]
 800b000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	ea40 0301 	orr.w	r3, r0, r1
 800b00a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b00c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	4b8f      	ldr	r3, [pc, #572]	@ (800b250 <UART_SetConfig+0x2cc>)
 800b014:	429a      	cmp	r2, r3
 800b016:	d005      	beq.n	800b024 <UART_SetConfig+0xa0>
 800b018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	4b8d      	ldr	r3, [pc, #564]	@ (800b254 <UART_SetConfig+0x2d0>)
 800b020:	429a      	cmp	r2, r3
 800b022:	d104      	bne.n	800b02e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b024:	f7fe f9a0 	bl	8009368 <HAL_RCC_GetPCLK2Freq>
 800b028:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b02c:	e003      	b.n	800b036 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b02e:	f7fe f987 	bl	8009340 <HAL_RCC_GetPCLK1Freq>
 800b032:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b03a:	69db      	ldr	r3, [r3, #28]
 800b03c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b040:	f040 810c 	bne.w	800b25c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b048:	2200      	movs	r2, #0
 800b04a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b04e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b052:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b056:	4622      	mov	r2, r4
 800b058:	462b      	mov	r3, r5
 800b05a:	1891      	adds	r1, r2, r2
 800b05c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b05e:	415b      	adcs	r3, r3
 800b060:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b062:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b066:	4621      	mov	r1, r4
 800b068:	eb12 0801 	adds.w	r8, r2, r1
 800b06c:	4629      	mov	r1, r5
 800b06e:	eb43 0901 	adc.w	r9, r3, r1
 800b072:	f04f 0200 	mov.w	r2, #0
 800b076:	f04f 0300 	mov.w	r3, #0
 800b07a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b07e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b086:	4690      	mov	r8, r2
 800b088:	4699      	mov	r9, r3
 800b08a:	4623      	mov	r3, r4
 800b08c:	eb18 0303 	adds.w	r3, r8, r3
 800b090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b094:	462b      	mov	r3, r5
 800b096:	eb49 0303 	adc.w	r3, r9, r3
 800b09a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b09e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b0aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b0ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	18db      	adds	r3, r3, r3
 800b0b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	eb42 0303 	adc.w	r3, r2, r3
 800b0be:	657b      	str	r3, [r7, #84]	@ 0x54
 800b0c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b0c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b0c8:	f7f5 fe0e 	bl	8000ce8 <__aeabi_uldivmod>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	4b61      	ldr	r3, [pc, #388]	@ (800b258 <UART_SetConfig+0x2d4>)
 800b0d2:	fba3 2302 	umull	r2, r3, r3, r2
 800b0d6:	095b      	lsrs	r3, r3, #5
 800b0d8:	011c      	lsls	r4, r3, #4
 800b0da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b0e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b0e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b0ec:	4642      	mov	r2, r8
 800b0ee:	464b      	mov	r3, r9
 800b0f0:	1891      	adds	r1, r2, r2
 800b0f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b0f4:	415b      	adcs	r3, r3
 800b0f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b0fc:	4641      	mov	r1, r8
 800b0fe:	eb12 0a01 	adds.w	sl, r2, r1
 800b102:	4649      	mov	r1, r9
 800b104:	eb43 0b01 	adc.w	fp, r3, r1
 800b108:	f04f 0200 	mov.w	r2, #0
 800b10c:	f04f 0300 	mov.w	r3, #0
 800b110:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b114:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b11c:	4692      	mov	sl, r2
 800b11e:	469b      	mov	fp, r3
 800b120:	4643      	mov	r3, r8
 800b122:	eb1a 0303 	adds.w	r3, sl, r3
 800b126:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b12a:	464b      	mov	r3, r9
 800b12c:	eb4b 0303 	adc.w	r3, fp, r3
 800b130:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b140:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b144:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b148:	460b      	mov	r3, r1
 800b14a:	18db      	adds	r3, r3, r3
 800b14c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b14e:	4613      	mov	r3, r2
 800b150:	eb42 0303 	adc.w	r3, r2, r3
 800b154:	647b      	str	r3, [r7, #68]	@ 0x44
 800b156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b15a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b15e:	f7f5 fdc3 	bl	8000ce8 <__aeabi_uldivmod>
 800b162:	4602      	mov	r2, r0
 800b164:	460b      	mov	r3, r1
 800b166:	4611      	mov	r1, r2
 800b168:	4b3b      	ldr	r3, [pc, #236]	@ (800b258 <UART_SetConfig+0x2d4>)
 800b16a:	fba3 2301 	umull	r2, r3, r3, r1
 800b16e:	095b      	lsrs	r3, r3, #5
 800b170:	2264      	movs	r2, #100	@ 0x64
 800b172:	fb02 f303 	mul.w	r3, r2, r3
 800b176:	1acb      	subs	r3, r1, r3
 800b178:	00db      	lsls	r3, r3, #3
 800b17a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b17e:	4b36      	ldr	r3, [pc, #216]	@ (800b258 <UART_SetConfig+0x2d4>)
 800b180:	fba3 2302 	umull	r2, r3, r3, r2
 800b184:	095b      	lsrs	r3, r3, #5
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b18c:	441c      	add	r4, r3
 800b18e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b192:	2200      	movs	r2, #0
 800b194:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b198:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b19c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b1a0:	4642      	mov	r2, r8
 800b1a2:	464b      	mov	r3, r9
 800b1a4:	1891      	adds	r1, r2, r2
 800b1a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b1a8:	415b      	adcs	r3, r3
 800b1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b1b0:	4641      	mov	r1, r8
 800b1b2:	1851      	adds	r1, r2, r1
 800b1b4:	6339      	str	r1, [r7, #48]	@ 0x30
 800b1b6:	4649      	mov	r1, r9
 800b1b8:	414b      	adcs	r3, r1
 800b1ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1bc:	f04f 0200 	mov.w	r2, #0
 800b1c0:	f04f 0300 	mov.w	r3, #0
 800b1c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b1c8:	4659      	mov	r1, fp
 800b1ca:	00cb      	lsls	r3, r1, #3
 800b1cc:	4651      	mov	r1, sl
 800b1ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1d2:	4651      	mov	r1, sl
 800b1d4:	00ca      	lsls	r2, r1, #3
 800b1d6:	4610      	mov	r0, r2
 800b1d8:	4619      	mov	r1, r3
 800b1da:	4603      	mov	r3, r0
 800b1dc:	4642      	mov	r2, r8
 800b1de:	189b      	adds	r3, r3, r2
 800b1e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b1e4:	464b      	mov	r3, r9
 800b1e6:	460a      	mov	r2, r1
 800b1e8:	eb42 0303 	adc.w	r3, r2, r3
 800b1ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b1f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b1fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b204:	460b      	mov	r3, r1
 800b206:	18db      	adds	r3, r3, r3
 800b208:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b20a:	4613      	mov	r3, r2
 800b20c:	eb42 0303 	adc.w	r3, r2, r3
 800b210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b216:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b21a:	f7f5 fd65 	bl	8000ce8 <__aeabi_uldivmod>
 800b21e:	4602      	mov	r2, r0
 800b220:	460b      	mov	r3, r1
 800b222:	4b0d      	ldr	r3, [pc, #52]	@ (800b258 <UART_SetConfig+0x2d4>)
 800b224:	fba3 1302 	umull	r1, r3, r3, r2
 800b228:	095b      	lsrs	r3, r3, #5
 800b22a:	2164      	movs	r1, #100	@ 0x64
 800b22c:	fb01 f303 	mul.w	r3, r1, r3
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	00db      	lsls	r3, r3, #3
 800b234:	3332      	adds	r3, #50	@ 0x32
 800b236:	4a08      	ldr	r2, [pc, #32]	@ (800b258 <UART_SetConfig+0x2d4>)
 800b238:	fba2 2303 	umull	r2, r3, r2, r3
 800b23c:	095b      	lsrs	r3, r3, #5
 800b23e:	f003 0207 	and.w	r2, r3, #7
 800b242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4422      	add	r2, r4
 800b24a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b24c:	e106      	b.n	800b45c <UART_SetConfig+0x4d8>
 800b24e:	bf00      	nop
 800b250:	40011000 	.word	0x40011000
 800b254:	40011400 	.word	0x40011400
 800b258:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b25c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b260:	2200      	movs	r2, #0
 800b262:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b266:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b26a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b26e:	4642      	mov	r2, r8
 800b270:	464b      	mov	r3, r9
 800b272:	1891      	adds	r1, r2, r2
 800b274:	6239      	str	r1, [r7, #32]
 800b276:	415b      	adcs	r3, r3
 800b278:	627b      	str	r3, [r7, #36]	@ 0x24
 800b27a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b27e:	4641      	mov	r1, r8
 800b280:	1854      	adds	r4, r2, r1
 800b282:	4649      	mov	r1, r9
 800b284:	eb43 0501 	adc.w	r5, r3, r1
 800b288:	f04f 0200 	mov.w	r2, #0
 800b28c:	f04f 0300 	mov.w	r3, #0
 800b290:	00eb      	lsls	r3, r5, #3
 800b292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b296:	00e2      	lsls	r2, r4, #3
 800b298:	4614      	mov	r4, r2
 800b29a:	461d      	mov	r5, r3
 800b29c:	4643      	mov	r3, r8
 800b29e:	18e3      	adds	r3, r4, r3
 800b2a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b2a4:	464b      	mov	r3, r9
 800b2a6:	eb45 0303 	adc.w	r3, r5, r3
 800b2aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b2ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b2be:	f04f 0200 	mov.w	r2, #0
 800b2c2:	f04f 0300 	mov.w	r3, #0
 800b2c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	008b      	lsls	r3, r1, #2
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	008a      	lsls	r2, r1, #2
 800b2d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b2dc:	f7f5 fd04 	bl	8000ce8 <__aeabi_uldivmod>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	4b60      	ldr	r3, [pc, #384]	@ (800b468 <UART_SetConfig+0x4e4>)
 800b2e6:	fba3 2302 	umull	r2, r3, r3, r2
 800b2ea:	095b      	lsrs	r3, r3, #5
 800b2ec:	011c      	lsls	r4, r3, #4
 800b2ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b2f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b2fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b300:	4642      	mov	r2, r8
 800b302:	464b      	mov	r3, r9
 800b304:	1891      	adds	r1, r2, r2
 800b306:	61b9      	str	r1, [r7, #24]
 800b308:	415b      	adcs	r3, r3
 800b30a:	61fb      	str	r3, [r7, #28]
 800b30c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b310:	4641      	mov	r1, r8
 800b312:	1851      	adds	r1, r2, r1
 800b314:	6139      	str	r1, [r7, #16]
 800b316:	4649      	mov	r1, r9
 800b318:	414b      	adcs	r3, r1
 800b31a:	617b      	str	r3, [r7, #20]
 800b31c:	f04f 0200 	mov.w	r2, #0
 800b320:	f04f 0300 	mov.w	r3, #0
 800b324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b328:	4659      	mov	r1, fp
 800b32a:	00cb      	lsls	r3, r1, #3
 800b32c:	4651      	mov	r1, sl
 800b32e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b332:	4651      	mov	r1, sl
 800b334:	00ca      	lsls	r2, r1, #3
 800b336:	4610      	mov	r0, r2
 800b338:	4619      	mov	r1, r3
 800b33a:	4603      	mov	r3, r0
 800b33c:	4642      	mov	r2, r8
 800b33e:	189b      	adds	r3, r3, r2
 800b340:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b344:	464b      	mov	r3, r9
 800b346:	460a      	mov	r2, r1
 800b348:	eb42 0303 	adc.w	r3, r2, r3
 800b34c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b35a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b35c:	f04f 0200 	mov.w	r2, #0
 800b360:	f04f 0300 	mov.w	r3, #0
 800b364:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b368:	4649      	mov	r1, r9
 800b36a:	008b      	lsls	r3, r1, #2
 800b36c:	4641      	mov	r1, r8
 800b36e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b372:	4641      	mov	r1, r8
 800b374:	008a      	lsls	r2, r1, #2
 800b376:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b37a:	f7f5 fcb5 	bl	8000ce8 <__aeabi_uldivmod>
 800b37e:	4602      	mov	r2, r0
 800b380:	460b      	mov	r3, r1
 800b382:	4611      	mov	r1, r2
 800b384:	4b38      	ldr	r3, [pc, #224]	@ (800b468 <UART_SetConfig+0x4e4>)
 800b386:	fba3 2301 	umull	r2, r3, r3, r1
 800b38a:	095b      	lsrs	r3, r3, #5
 800b38c:	2264      	movs	r2, #100	@ 0x64
 800b38e:	fb02 f303 	mul.w	r3, r2, r3
 800b392:	1acb      	subs	r3, r1, r3
 800b394:	011b      	lsls	r3, r3, #4
 800b396:	3332      	adds	r3, #50	@ 0x32
 800b398:	4a33      	ldr	r2, [pc, #204]	@ (800b468 <UART_SetConfig+0x4e4>)
 800b39a:	fba2 2303 	umull	r2, r3, r2, r3
 800b39e:	095b      	lsrs	r3, r3, #5
 800b3a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b3a4:	441c      	add	r4, r3
 800b3a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	673b      	str	r3, [r7, #112]	@ 0x70
 800b3ae:	677a      	str	r2, [r7, #116]	@ 0x74
 800b3b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b3b4:	4642      	mov	r2, r8
 800b3b6:	464b      	mov	r3, r9
 800b3b8:	1891      	adds	r1, r2, r2
 800b3ba:	60b9      	str	r1, [r7, #8]
 800b3bc:	415b      	adcs	r3, r3
 800b3be:	60fb      	str	r3, [r7, #12]
 800b3c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b3c4:	4641      	mov	r1, r8
 800b3c6:	1851      	adds	r1, r2, r1
 800b3c8:	6039      	str	r1, [r7, #0]
 800b3ca:	4649      	mov	r1, r9
 800b3cc:	414b      	adcs	r3, r1
 800b3ce:	607b      	str	r3, [r7, #4]
 800b3d0:	f04f 0200 	mov.w	r2, #0
 800b3d4:	f04f 0300 	mov.w	r3, #0
 800b3d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b3dc:	4659      	mov	r1, fp
 800b3de:	00cb      	lsls	r3, r1, #3
 800b3e0:	4651      	mov	r1, sl
 800b3e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3e6:	4651      	mov	r1, sl
 800b3e8:	00ca      	lsls	r2, r1, #3
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	4642      	mov	r2, r8
 800b3f2:	189b      	adds	r3, r3, r2
 800b3f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b3f6:	464b      	mov	r3, r9
 800b3f8:	460a      	mov	r2, r1
 800b3fa:	eb42 0303 	adc.w	r3, r2, r3
 800b3fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	663b      	str	r3, [r7, #96]	@ 0x60
 800b40a:	667a      	str	r2, [r7, #100]	@ 0x64
 800b40c:	f04f 0200 	mov.w	r2, #0
 800b410:	f04f 0300 	mov.w	r3, #0
 800b414:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b418:	4649      	mov	r1, r9
 800b41a:	008b      	lsls	r3, r1, #2
 800b41c:	4641      	mov	r1, r8
 800b41e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b422:	4641      	mov	r1, r8
 800b424:	008a      	lsls	r2, r1, #2
 800b426:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b42a:	f7f5 fc5d 	bl	8000ce8 <__aeabi_uldivmod>
 800b42e:	4602      	mov	r2, r0
 800b430:	460b      	mov	r3, r1
 800b432:	4b0d      	ldr	r3, [pc, #52]	@ (800b468 <UART_SetConfig+0x4e4>)
 800b434:	fba3 1302 	umull	r1, r3, r3, r2
 800b438:	095b      	lsrs	r3, r3, #5
 800b43a:	2164      	movs	r1, #100	@ 0x64
 800b43c:	fb01 f303 	mul.w	r3, r1, r3
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	011b      	lsls	r3, r3, #4
 800b444:	3332      	adds	r3, #50	@ 0x32
 800b446:	4a08      	ldr	r2, [pc, #32]	@ (800b468 <UART_SetConfig+0x4e4>)
 800b448:	fba2 2303 	umull	r2, r3, r2, r3
 800b44c:	095b      	lsrs	r3, r3, #5
 800b44e:	f003 020f 	and.w	r2, r3, #15
 800b452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4422      	add	r2, r4
 800b45a:	609a      	str	r2, [r3, #8]
}
 800b45c:	bf00      	nop
 800b45e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b462:	46bd      	mov	sp, r7
 800b464:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b468:	51eb851f 	.word	0x51eb851f

0800b46c <__cvt>:
 800b46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b470:	ec57 6b10 	vmov	r6, r7, d0
 800b474:	2f00      	cmp	r7, #0
 800b476:	460c      	mov	r4, r1
 800b478:	4619      	mov	r1, r3
 800b47a:	463b      	mov	r3, r7
 800b47c:	bfbb      	ittet	lt
 800b47e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b482:	461f      	movlt	r7, r3
 800b484:	2300      	movge	r3, #0
 800b486:	232d      	movlt	r3, #45	@ 0x2d
 800b488:	700b      	strb	r3, [r1, #0]
 800b48a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b48c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b490:	4691      	mov	r9, r2
 800b492:	f023 0820 	bic.w	r8, r3, #32
 800b496:	bfbc      	itt	lt
 800b498:	4632      	movlt	r2, r6
 800b49a:	4616      	movlt	r6, r2
 800b49c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b4a0:	d005      	beq.n	800b4ae <__cvt+0x42>
 800b4a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b4a6:	d100      	bne.n	800b4aa <__cvt+0x3e>
 800b4a8:	3401      	adds	r4, #1
 800b4aa:	2102      	movs	r1, #2
 800b4ac:	e000      	b.n	800b4b0 <__cvt+0x44>
 800b4ae:	2103      	movs	r1, #3
 800b4b0:	ab03      	add	r3, sp, #12
 800b4b2:	9301      	str	r3, [sp, #4]
 800b4b4:	ab02      	add	r3, sp, #8
 800b4b6:	9300      	str	r3, [sp, #0]
 800b4b8:	ec47 6b10 	vmov	d0, r6, r7
 800b4bc:	4653      	mov	r3, sl
 800b4be:	4622      	mov	r2, r4
 800b4c0:	f000 ff6e 	bl	800c3a0 <_dtoa_r>
 800b4c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	d119      	bne.n	800b500 <__cvt+0x94>
 800b4cc:	f019 0f01 	tst.w	r9, #1
 800b4d0:	d00e      	beq.n	800b4f0 <__cvt+0x84>
 800b4d2:	eb00 0904 	add.w	r9, r0, r4
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	2300      	movs	r3, #0
 800b4da:	4630      	mov	r0, r6
 800b4dc:	4639      	mov	r1, r7
 800b4de:	f7f5 faf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4e2:	b108      	cbz	r0, 800b4e8 <__cvt+0x7c>
 800b4e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b4e8:	2230      	movs	r2, #48	@ 0x30
 800b4ea:	9b03      	ldr	r3, [sp, #12]
 800b4ec:	454b      	cmp	r3, r9
 800b4ee:	d31e      	bcc.n	800b52e <__cvt+0xc2>
 800b4f0:	9b03      	ldr	r3, [sp, #12]
 800b4f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4f4:	1b5b      	subs	r3, r3, r5
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	6013      	str	r3, [r2, #0]
 800b4fa:	b004      	add	sp, #16
 800b4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b500:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b504:	eb00 0904 	add.w	r9, r0, r4
 800b508:	d1e5      	bne.n	800b4d6 <__cvt+0x6a>
 800b50a:	7803      	ldrb	r3, [r0, #0]
 800b50c:	2b30      	cmp	r3, #48	@ 0x30
 800b50e:	d10a      	bne.n	800b526 <__cvt+0xba>
 800b510:	2200      	movs	r2, #0
 800b512:	2300      	movs	r3, #0
 800b514:	4630      	mov	r0, r6
 800b516:	4639      	mov	r1, r7
 800b518:	f7f5 fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b51c:	b918      	cbnz	r0, 800b526 <__cvt+0xba>
 800b51e:	f1c4 0401 	rsb	r4, r4, #1
 800b522:	f8ca 4000 	str.w	r4, [sl]
 800b526:	f8da 3000 	ldr.w	r3, [sl]
 800b52a:	4499      	add	r9, r3
 800b52c:	e7d3      	b.n	800b4d6 <__cvt+0x6a>
 800b52e:	1c59      	adds	r1, r3, #1
 800b530:	9103      	str	r1, [sp, #12]
 800b532:	701a      	strb	r2, [r3, #0]
 800b534:	e7d9      	b.n	800b4ea <__cvt+0x7e>

0800b536 <__exponent>:
 800b536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b538:	2900      	cmp	r1, #0
 800b53a:	bfba      	itte	lt
 800b53c:	4249      	neglt	r1, r1
 800b53e:	232d      	movlt	r3, #45	@ 0x2d
 800b540:	232b      	movge	r3, #43	@ 0x2b
 800b542:	2909      	cmp	r1, #9
 800b544:	7002      	strb	r2, [r0, #0]
 800b546:	7043      	strb	r3, [r0, #1]
 800b548:	dd29      	ble.n	800b59e <__exponent+0x68>
 800b54a:	f10d 0307 	add.w	r3, sp, #7
 800b54e:	461d      	mov	r5, r3
 800b550:	270a      	movs	r7, #10
 800b552:	461a      	mov	r2, r3
 800b554:	fbb1 f6f7 	udiv	r6, r1, r7
 800b558:	fb07 1416 	mls	r4, r7, r6, r1
 800b55c:	3430      	adds	r4, #48	@ 0x30
 800b55e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b562:	460c      	mov	r4, r1
 800b564:	2c63      	cmp	r4, #99	@ 0x63
 800b566:	f103 33ff 	add.w	r3, r3, #4294967295
 800b56a:	4631      	mov	r1, r6
 800b56c:	dcf1      	bgt.n	800b552 <__exponent+0x1c>
 800b56e:	3130      	adds	r1, #48	@ 0x30
 800b570:	1e94      	subs	r4, r2, #2
 800b572:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b576:	1c41      	adds	r1, r0, #1
 800b578:	4623      	mov	r3, r4
 800b57a:	42ab      	cmp	r3, r5
 800b57c:	d30a      	bcc.n	800b594 <__exponent+0x5e>
 800b57e:	f10d 0309 	add.w	r3, sp, #9
 800b582:	1a9b      	subs	r3, r3, r2
 800b584:	42ac      	cmp	r4, r5
 800b586:	bf88      	it	hi
 800b588:	2300      	movhi	r3, #0
 800b58a:	3302      	adds	r3, #2
 800b58c:	4403      	add	r3, r0
 800b58e:	1a18      	subs	r0, r3, r0
 800b590:	b003      	add	sp, #12
 800b592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b594:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b598:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b59c:	e7ed      	b.n	800b57a <__exponent+0x44>
 800b59e:	2330      	movs	r3, #48	@ 0x30
 800b5a0:	3130      	adds	r1, #48	@ 0x30
 800b5a2:	7083      	strb	r3, [r0, #2]
 800b5a4:	70c1      	strb	r1, [r0, #3]
 800b5a6:	1d03      	adds	r3, r0, #4
 800b5a8:	e7f1      	b.n	800b58e <__exponent+0x58>
	...

0800b5ac <_printf_float>:
 800b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b0:	b08d      	sub	sp, #52	@ 0x34
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b5b8:	4616      	mov	r6, r2
 800b5ba:	461f      	mov	r7, r3
 800b5bc:	4605      	mov	r5, r0
 800b5be:	f000 fdef 	bl	800c1a0 <_localeconv_r>
 800b5c2:	6803      	ldr	r3, [r0, #0]
 800b5c4:	9304      	str	r3, [sp, #16]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7f4 fe52 	bl	8000270 <strlen>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b5d4:	9005      	str	r0, [sp, #20]
 800b5d6:	3307      	adds	r3, #7
 800b5d8:	f023 0307 	bic.w	r3, r3, #7
 800b5dc:	f103 0208 	add.w	r2, r3, #8
 800b5e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b5e4:	f8d4 b000 	ldr.w	fp, [r4]
 800b5e8:	f8c8 2000 	str.w	r2, [r8]
 800b5ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b5f4:	9307      	str	r3, [sp, #28]
 800b5f6:	f8cd 8018 	str.w	r8, [sp, #24]
 800b5fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b5fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b602:	4b9c      	ldr	r3, [pc, #624]	@ (800b874 <_printf_float+0x2c8>)
 800b604:	f04f 32ff 	mov.w	r2, #4294967295
 800b608:	f7f5 fa90 	bl	8000b2c <__aeabi_dcmpun>
 800b60c:	bb70      	cbnz	r0, 800b66c <_printf_float+0xc0>
 800b60e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b612:	4b98      	ldr	r3, [pc, #608]	@ (800b874 <_printf_float+0x2c8>)
 800b614:	f04f 32ff 	mov.w	r2, #4294967295
 800b618:	f7f5 fa6a 	bl	8000af0 <__aeabi_dcmple>
 800b61c:	bb30      	cbnz	r0, 800b66c <_printf_float+0xc0>
 800b61e:	2200      	movs	r2, #0
 800b620:	2300      	movs	r3, #0
 800b622:	4640      	mov	r0, r8
 800b624:	4649      	mov	r1, r9
 800b626:	f7f5 fa59 	bl	8000adc <__aeabi_dcmplt>
 800b62a:	b110      	cbz	r0, 800b632 <_printf_float+0x86>
 800b62c:	232d      	movs	r3, #45	@ 0x2d
 800b62e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b632:	4a91      	ldr	r2, [pc, #580]	@ (800b878 <_printf_float+0x2cc>)
 800b634:	4b91      	ldr	r3, [pc, #580]	@ (800b87c <_printf_float+0x2d0>)
 800b636:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b63a:	bf8c      	ite	hi
 800b63c:	4690      	movhi	r8, r2
 800b63e:	4698      	movls	r8, r3
 800b640:	2303      	movs	r3, #3
 800b642:	6123      	str	r3, [r4, #16]
 800b644:	f02b 0304 	bic.w	r3, fp, #4
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	f04f 0900 	mov.w	r9, #0
 800b64e:	9700      	str	r7, [sp, #0]
 800b650:	4633      	mov	r3, r6
 800b652:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b654:	4621      	mov	r1, r4
 800b656:	4628      	mov	r0, r5
 800b658:	f000 f9d2 	bl	800ba00 <_printf_common>
 800b65c:	3001      	adds	r0, #1
 800b65e:	f040 808d 	bne.w	800b77c <_printf_float+0x1d0>
 800b662:	f04f 30ff 	mov.w	r0, #4294967295
 800b666:	b00d      	add	sp, #52	@ 0x34
 800b668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b66c:	4642      	mov	r2, r8
 800b66e:	464b      	mov	r3, r9
 800b670:	4640      	mov	r0, r8
 800b672:	4649      	mov	r1, r9
 800b674:	f7f5 fa5a 	bl	8000b2c <__aeabi_dcmpun>
 800b678:	b140      	cbz	r0, 800b68c <_printf_float+0xe0>
 800b67a:	464b      	mov	r3, r9
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	bfbc      	itt	lt
 800b680:	232d      	movlt	r3, #45	@ 0x2d
 800b682:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b686:	4a7e      	ldr	r2, [pc, #504]	@ (800b880 <_printf_float+0x2d4>)
 800b688:	4b7e      	ldr	r3, [pc, #504]	@ (800b884 <_printf_float+0x2d8>)
 800b68a:	e7d4      	b.n	800b636 <_printf_float+0x8a>
 800b68c:	6863      	ldr	r3, [r4, #4]
 800b68e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b692:	9206      	str	r2, [sp, #24]
 800b694:	1c5a      	adds	r2, r3, #1
 800b696:	d13b      	bne.n	800b710 <_printf_float+0x164>
 800b698:	2306      	movs	r3, #6
 800b69a:	6063      	str	r3, [r4, #4]
 800b69c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	6022      	str	r2, [r4, #0]
 800b6a4:	9303      	str	r3, [sp, #12]
 800b6a6:	ab0a      	add	r3, sp, #40	@ 0x28
 800b6a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b6ac:	ab09      	add	r3, sp, #36	@ 0x24
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	6861      	ldr	r1, [r4, #4]
 800b6b2:	ec49 8b10 	vmov	d0, r8, r9
 800b6b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f7ff fed6 	bl	800b46c <__cvt>
 800b6c0:	9b06      	ldr	r3, [sp, #24]
 800b6c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6c4:	2b47      	cmp	r3, #71	@ 0x47
 800b6c6:	4680      	mov	r8, r0
 800b6c8:	d129      	bne.n	800b71e <_printf_float+0x172>
 800b6ca:	1cc8      	adds	r0, r1, #3
 800b6cc:	db02      	blt.n	800b6d4 <_printf_float+0x128>
 800b6ce:	6863      	ldr	r3, [r4, #4]
 800b6d0:	4299      	cmp	r1, r3
 800b6d2:	dd41      	ble.n	800b758 <_printf_float+0x1ac>
 800b6d4:	f1aa 0a02 	sub.w	sl, sl, #2
 800b6d8:	fa5f fa8a 	uxtb.w	sl, sl
 800b6dc:	3901      	subs	r1, #1
 800b6de:	4652      	mov	r2, sl
 800b6e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b6e4:	9109      	str	r1, [sp, #36]	@ 0x24
 800b6e6:	f7ff ff26 	bl	800b536 <__exponent>
 800b6ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6ec:	1813      	adds	r3, r2, r0
 800b6ee:	2a01      	cmp	r2, #1
 800b6f0:	4681      	mov	r9, r0
 800b6f2:	6123      	str	r3, [r4, #16]
 800b6f4:	dc02      	bgt.n	800b6fc <_printf_float+0x150>
 800b6f6:	6822      	ldr	r2, [r4, #0]
 800b6f8:	07d2      	lsls	r2, r2, #31
 800b6fa:	d501      	bpl.n	800b700 <_printf_float+0x154>
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	6123      	str	r3, [r4, #16]
 800b700:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b704:	2b00      	cmp	r3, #0
 800b706:	d0a2      	beq.n	800b64e <_printf_float+0xa2>
 800b708:	232d      	movs	r3, #45	@ 0x2d
 800b70a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b70e:	e79e      	b.n	800b64e <_printf_float+0xa2>
 800b710:	9a06      	ldr	r2, [sp, #24]
 800b712:	2a47      	cmp	r2, #71	@ 0x47
 800b714:	d1c2      	bne.n	800b69c <_printf_float+0xf0>
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1c0      	bne.n	800b69c <_printf_float+0xf0>
 800b71a:	2301      	movs	r3, #1
 800b71c:	e7bd      	b.n	800b69a <_printf_float+0xee>
 800b71e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b722:	d9db      	bls.n	800b6dc <_printf_float+0x130>
 800b724:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b728:	d118      	bne.n	800b75c <_printf_float+0x1b0>
 800b72a:	2900      	cmp	r1, #0
 800b72c:	6863      	ldr	r3, [r4, #4]
 800b72e:	dd0b      	ble.n	800b748 <_printf_float+0x19c>
 800b730:	6121      	str	r1, [r4, #16]
 800b732:	b913      	cbnz	r3, 800b73a <_printf_float+0x18e>
 800b734:	6822      	ldr	r2, [r4, #0]
 800b736:	07d0      	lsls	r0, r2, #31
 800b738:	d502      	bpl.n	800b740 <_printf_float+0x194>
 800b73a:	3301      	adds	r3, #1
 800b73c:	440b      	add	r3, r1
 800b73e:	6123      	str	r3, [r4, #16]
 800b740:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b742:	f04f 0900 	mov.w	r9, #0
 800b746:	e7db      	b.n	800b700 <_printf_float+0x154>
 800b748:	b913      	cbnz	r3, 800b750 <_printf_float+0x1a4>
 800b74a:	6822      	ldr	r2, [r4, #0]
 800b74c:	07d2      	lsls	r2, r2, #31
 800b74e:	d501      	bpl.n	800b754 <_printf_float+0x1a8>
 800b750:	3302      	adds	r3, #2
 800b752:	e7f4      	b.n	800b73e <_printf_float+0x192>
 800b754:	2301      	movs	r3, #1
 800b756:	e7f2      	b.n	800b73e <_printf_float+0x192>
 800b758:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b75c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b75e:	4299      	cmp	r1, r3
 800b760:	db05      	blt.n	800b76e <_printf_float+0x1c2>
 800b762:	6823      	ldr	r3, [r4, #0]
 800b764:	6121      	str	r1, [r4, #16]
 800b766:	07d8      	lsls	r0, r3, #31
 800b768:	d5ea      	bpl.n	800b740 <_printf_float+0x194>
 800b76a:	1c4b      	adds	r3, r1, #1
 800b76c:	e7e7      	b.n	800b73e <_printf_float+0x192>
 800b76e:	2900      	cmp	r1, #0
 800b770:	bfd4      	ite	le
 800b772:	f1c1 0202 	rsble	r2, r1, #2
 800b776:	2201      	movgt	r2, #1
 800b778:	4413      	add	r3, r2
 800b77a:	e7e0      	b.n	800b73e <_printf_float+0x192>
 800b77c:	6823      	ldr	r3, [r4, #0]
 800b77e:	055a      	lsls	r2, r3, #21
 800b780:	d407      	bmi.n	800b792 <_printf_float+0x1e6>
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	4642      	mov	r2, r8
 800b786:	4631      	mov	r1, r6
 800b788:	4628      	mov	r0, r5
 800b78a:	47b8      	blx	r7
 800b78c:	3001      	adds	r0, #1
 800b78e:	d12b      	bne.n	800b7e8 <_printf_float+0x23c>
 800b790:	e767      	b.n	800b662 <_printf_float+0xb6>
 800b792:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b796:	f240 80dd 	bls.w	800b954 <_printf_float+0x3a8>
 800b79a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	f7f5 f991 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d033      	beq.n	800b812 <_printf_float+0x266>
 800b7aa:	4a37      	ldr	r2, [pc, #220]	@ (800b888 <_printf_float+0x2dc>)
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	4631      	mov	r1, r6
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	47b8      	blx	r7
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	f43f af54 	beq.w	800b662 <_printf_float+0xb6>
 800b7ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b7be:	4543      	cmp	r3, r8
 800b7c0:	db02      	blt.n	800b7c8 <_printf_float+0x21c>
 800b7c2:	6823      	ldr	r3, [r4, #0]
 800b7c4:	07d8      	lsls	r0, r3, #31
 800b7c6:	d50f      	bpl.n	800b7e8 <_printf_float+0x23c>
 800b7c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7cc:	4631      	mov	r1, r6
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	47b8      	blx	r7
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	f43f af45 	beq.w	800b662 <_printf_float+0xb6>
 800b7d8:	f04f 0900 	mov.w	r9, #0
 800b7dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800b7e0:	f104 0a1a 	add.w	sl, r4, #26
 800b7e4:	45c8      	cmp	r8, r9
 800b7e6:	dc09      	bgt.n	800b7fc <_printf_float+0x250>
 800b7e8:	6823      	ldr	r3, [r4, #0]
 800b7ea:	079b      	lsls	r3, r3, #30
 800b7ec:	f100 8103 	bmi.w	800b9f6 <_printf_float+0x44a>
 800b7f0:	68e0      	ldr	r0, [r4, #12]
 800b7f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7f4:	4298      	cmp	r0, r3
 800b7f6:	bfb8      	it	lt
 800b7f8:	4618      	movlt	r0, r3
 800b7fa:	e734      	b.n	800b666 <_printf_float+0xba>
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	4652      	mov	r2, sl
 800b800:	4631      	mov	r1, r6
 800b802:	4628      	mov	r0, r5
 800b804:	47b8      	blx	r7
 800b806:	3001      	adds	r0, #1
 800b808:	f43f af2b 	beq.w	800b662 <_printf_float+0xb6>
 800b80c:	f109 0901 	add.w	r9, r9, #1
 800b810:	e7e8      	b.n	800b7e4 <_printf_float+0x238>
 800b812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b814:	2b00      	cmp	r3, #0
 800b816:	dc39      	bgt.n	800b88c <_printf_float+0x2e0>
 800b818:	4a1b      	ldr	r2, [pc, #108]	@ (800b888 <_printf_float+0x2dc>)
 800b81a:	2301      	movs	r3, #1
 800b81c:	4631      	mov	r1, r6
 800b81e:	4628      	mov	r0, r5
 800b820:	47b8      	blx	r7
 800b822:	3001      	adds	r0, #1
 800b824:	f43f af1d 	beq.w	800b662 <_printf_float+0xb6>
 800b828:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b82c:	ea59 0303 	orrs.w	r3, r9, r3
 800b830:	d102      	bne.n	800b838 <_printf_float+0x28c>
 800b832:	6823      	ldr	r3, [r4, #0]
 800b834:	07d9      	lsls	r1, r3, #31
 800b836:	d5d7      	bpl.n	800b7e8 <_printf_float+0x23c>
 800b838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b83c:	4631      	mov	r1, r6
 800b83e:	4628      	mov	r0, r5
 800b840:	47b8      	blx	r7
 800b842:	3001      	adds	r0, #1
 800b844:	f43f af0d 	beq.w	800b662 <_printf_float+0xb6>
 800b848:	f04f 0a00 	mov.w	sl, #0
 800b84c:	f104 0b1a 	add.w	fp, r4, #26
 800b850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b852:	425b      	negs	r3, r3
 800b854:	4553      	cmp	r3, sl
 800b856:	dc01      	bgt.n	800b85c <_printf_float+0x2b0>
 800b858:	464b      	mov	r3, r9
 800b85a:	e793      	b.n	800b784 <_printf_float+0x1d8>
 800b85c:	2301      	movs	r3, #1
 800b85e:	465a      	mov	r2, fp
 800b860:	4631      	mov	r1, r6
 800b862:	4628      	mov	r0, r5
 800b864:	47b8      	blx	r7
 800b866:	3001      	adds	r0, #1
 800b868:	f43f aefb 	beq.w	800b662 <_printf_float+0xb6>
 800b86c:	f10a 0a01 	add.w	sl, sl, #1
 800b870:	e7ee      	b.n	800b850 <_printf_float+0x2a4>
 800b872:	bf00      	nop
 800b874:	7fefffff 	.word	0x7fefffff
 800b878:	0800fd28 	.word	0x0800fd28
 800b87c:	0800fd24 	.word	0x0800fd24
 800b880:	0800fd30 	.word	0x0800fd30
 800b884:	0800fd2c 	.word	0x0800fd2c
 800b888:	0800fd34 	.word	0x0800fd34
 800b88c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b88e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b892:	4553      	cmp	r3, sl
 800b894:	bfa8      	it	ge
 800b896:	4653      	movge	r3, sl
 800b898:	2b00      	cmp	r3, #0
 800b89a:	4699      	mov	r9, r3
 800b89c:	dc36      	bgt.n	800b90c <_printf_float+0x360>
 800b89e:	f04f 0b00 	mov.w	fp, #0
 800b8a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8a6:	f104 021a 	add.w	r2, r4, #26
 800b8aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b8ac:	9306      	str	r3, [sp, #24]
 800b8ae:	eba3 0309 	sub.w	r3, r3, r9
 800b8b2:	455b      	cmp	r3, fp
 800b8b4:	dc31      	bgt.n	800b91a <_printf_float+0x36e>
 800b8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8b8:	459a      	cmp	sl, r3
 800b8ba:	dc3a      	bgt.n	800b932 <_printf_float+0x386>
 800b8bc:	6823      	ldr	r3, [r4, #0]
 800b8be:	07da      	lsls	r2, r3, #31
 800b8c0:	d437      	bmi.n	800b932 <_printf_float+0x386>
 800b8c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8c4:	ebaa 0903 	sub.w	r9, sl, r3
 800b8c8:	9b06      	ldr	r3, [sp, #24]
 800b8ca:	ebaa 0303 	sub.w	r3, sl, r3
 800b8ce:	4599      	cmp	r9, r3
 800b8d0:	bfa8      	it	ge
 800b8d2:	4699      	movge	r9, r3
 800b8d4:	f1b9 0f00 	cmp.w	r9, #0
 800b8d8:	dc33      	bgt.n	800b942 <_printf_float+0x396>
 800b8da:	f04f 0800 	mov.w	r8, #0
 800b8de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8e2:	f104 0b1a 	add.w	fp, r4, #26
 800b8e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8e8:	ebaa 0303 	sub.w	r3, sl, r3
 800b8ec:	eba3 0309 	sub.w	r3, r3, r9
 800b8f0:	4543      	cmp	r3, r8
 800b8f2:	f77f af79 	ble.w	800b7e8 <_printf_float+0x23c>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	465a      	mov	r2, fp
 800b8fa:	4631      	mov	r1, r6
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	47b8      	blx	r7
 800b900:	3001      	adds	r0, #1
 800b902:	f43f aeae 	beq.w	800b662 <_printf_float+0xb6>
 800b906:	f108 0801 	add.w	r8, r8, #1
 800b90a:	e7ec      	b.n	800b8e6 <_printf_float+0x33a>
 800b90c:	4642      	mov	r2, r8
 800b90e:	4631      	mov	r1, r6
 800b910:	4628      	mov	r0, r5
 800b912:	47b8      	blx	r7
 800b914:	3001      	adds	r0, #1
 800b916:	d1c2      	bne.n	800b89e <_printf_float+0x2f2>
 800b918:	e6a3      	b.n	800b662 <_printf_float+0xb6>
 800b91a:	2301      	movs	r3, #1
 800b91c:	4631      	mov	r1, r6
 800b91e:	4628      	mov	r0, r5
 800b920:	9206      	str	r2, [sp, #24]
 800b922:	47b8      	blx	r7
 800b924:	3001      	adds	r0, #1
 800b926:	f43f ae9c 	beq.w	800b662 <_printf_float+0xb6>
 800b92a:	9a06      	ldr	r2, [sp, #24]
 800b92c:	f10b 0b01 	add.w	fp, fp, #1
 800b930:	e7bb      	b.n	800b8aa <_printf_float+0x2fe>
 800b932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b936:	4631      	mov	r1, r6
 800b938:	4628      	mov	r0, r5
 800b93a:	47b8      	blx	r7
 800b93c:	3001      	adds	r0, #1
 800b93e:	d1c0      	bne.n	800b8c2 <_printf_float+0x316>
 800b940:	e68f      	b.n	800b662 <_printf_float+0xb6>
 800b942:	9a06      	ldr	r2, [sp, #24]
 800b944:	464b      	mov	r3, r9
 800b946:	4442      	add	r2, r8
 800b948:	4631      	mov	r1, r6
 800b94a:	4628      	mov	r0, r5
 800b94c:	47b8      	blx	r7
 800b94e:	3001      	adds	r0, #1
 800b950:	d1c3      	bne.n	800b8da <_printf_float+0x32e>
 800b952:	e686      	b.n	800b662 <_printf_float+0xb6>
 800b954:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b958:	f1ba 0f01 	cmp.w	sl, #1
 800b95c:	dc01      	bgt.n	800b962 <_printf_float+0x3b6>
 800b95e:	07db      	lsls	r3, r3, #31
 800b960:	d536      	bpl.n	800b9d0 <_printf_float+0x424>
 800b962:	2301      	movs	r3, #1
 800b964:	4642      	mov	r2, r8
 800b966:	4631      	mov	r1, r6
 800b968:	4628      	mov	r0, r5
 800b96a:	47b8      	blx	r7
 800b96c:	3001      	adds	r0, #1
 800b96e:	f43f ae78 	beq.w	800b662 <_printf_float+0xb6>
 800b972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b976:	4631      	mov	r1, r6
 800b978:	4628      	mov	r0, r5
 800b97a:	47b8      	blx	r7
 800b97c:	3001      	adds	r0, #1
 800b97e:	f43f ae70 	beq.w	800b662 <_printf_float+0xb6>
 800b982:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b986:	2200      	movs	r2, #0
 800b988:	2300      	movs	r3, #0
 800b98a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b98e:	f7f5 f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b992:	b9c0      	cbnz	r0, 800b9c6 <_printf_float+0x41a>
 800b994:	4653      	mov	r3, sl
 800b996:	f108 0201 	add.w	r2, r8, #1
 800b99a:	4631      	mov	r1, r6
 800b99c:	4628      	mov	r0, r5
 800b99e:	47b8      	blx	r7
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	d10c      	bne.n	800b9be <_printf_float+0x412>
 800b9a4:	e65d      	b.n	800b662 <_printf_float+0xb6>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	465a      	mov	r2, fp
 800b9aa:	4631      	mov	r1, r6
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	47b8      	blx	r7
 800b9b0:	3001      	adds	r0, #1
 800b9b2:	f43f ae56 	beq.w	800b662 <_printf_float+0xb6>
 800b9b6:	f108 0801 	add.w	r8, r8, #1
 800b9ba:	45d0      	cmp	r8, sl
 800b9bc:	dbf3      	blt.n	800b9a6 <_printf_float+0x3fa>
 800b9be:	464b      	mov	r3, r9
 800b9c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b9c4:	e6df      	b.n	800b786 <_printf_float+0x1da>
 800b9c6:	f04f 0800 	mov.w	r8, #0
 800b9ca:	f104 0b1a 	add.w	fp, r4, #26
 800b9ce:	e7f4      	b.n	800b9ba <_printf_float+0x40e>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	4642      	mov	r2, r8
 800b9d4:	e7e1      	b.n	800b99a <_printf_float+0x3ee>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	464a      	mov	r2, r9
 800b9da:	4631      	mov	r1, r6
 800b9dc:	4628      	mov	r0, r5
 800b9de:	47b8      	blx	r7
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	f43f ae3e 	beq.w	800b662 <_printf_float+0xb6>
 800b9e6:	f108 0801 	add.w	r8, r8, #1
 800b9ea:	68e3      	ldr	r3, [r4, #12]
 800b9ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b9ee:	1a5b      	subs	r3, r3, r1
 800b9f0:	4543      	cmp	r3, r8
 800b9f2:	dcf0      	bgt.n	800b9d6 <_printf_float+0x42a>
 800b9f4:	e6fc      	b.n	800b7f0 <_printf_float+0x244>
 800b9f6:	f04f 0800 	mov.w	r8, #0
 800b9fa:	f104 0919 	add.w	r9, r4, #25
 800b9fe:	e7f4      	b.n	800b9ea <_printf_float+0x43e>

0800ba00 <_printf_common>:
 800ba00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba04:	4616      	mov	r6, r2
 800ba06:	4698      	mov	r8, r3
 800ba08:	688a      	ldr	r2, [r1, #8]
 800ba0a:	690b      	ldr	r3, [r1, #16]
 800ba0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba10:	4293      	cmp	r3, r2
 800ba12:	bfb8      	it	lt
 800ba14:	4613      	movlt	r3, r2
 800ba16:	6033      	str	r3, [r6, #0]
 800ba18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba1c:	4607      	mov	r7, r0
 800ba1e:	460c      	mov	r4, r1
 800ba20:	b10a      	cbz	r2, 800ba26 <_printf_common+0x26>
 800ba22:	3301      	adds	r3, #1
 800ba24:	6033      	str	r3, [r6, #0]
 800ba26:	6823      	ldr	r3, [r4, #0]
 800ba28:	0699      	lsls	r1, r3, #26
 800ba2a:	bf42      	ittt	mi
 800ba2c:	6833      	ldrmi	r3, [r6, #0]
 800ba2e:	3302      	addmi	r3, #2
 800ba30:	6033      	strmi	r3, [r6, #0]
 800ba32:	6825      	ldr	r5, [r4, #0]
 800ba34:	f015 0506 	ands.w	r5, r5, #6
 800ba38:	d106      	bne.n	800ba48 <_printf_common+0x48>
 800ba3a:	f104 0a19 	add.w	sl, r4, #25
 800ba3e:	68e3      	ldr	r3, [r4, #12]
 800ba40:	6832      	ldr	r2, [r6, #0]
 800ba42:	1a9b      	subs	r3, r3, r2
 800ba44:	42ab      	cmp	r3, r5
 800ba46:	dc26      	bgt.n	800ba96 <_printf_common+0x96>
 800ba48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba4c:	6822      	ldr	r2, [r4, #0]
 800ba4e:	3b00      	subs	r3, #0
 800ba50:	bf18      	it	ne
 800ba52:	2301      	movne	r3, #1
 800ba54:	0692      	lsls	r2, r2, #26
 800ba56:	d42b      	bmi.n	800bab0 <_printf_common+0xb0>
 800ba58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba5c:	4641      	mov	r1, r8
 800ba5e:	4638      	mov	r0, r7
 800ba60:	47c8      	blx	r9
 800ba62:	3001      	adds	r0, #1
 800ba64:	d01e      	beq.n	800baa4 <_printf_common+0xa4>
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	6922      	ldr	r2, [r4, #16]
 800ba6a:	f003 0306 	and.w	r3, r3, #6
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	bf02      	ittt	eq
 800ba72:	68e5      	ldreq	r5, [r4, #12]
 800ba74:	6833      	ldreq	r3, [r6, #0]
 800ba76:	1aed      	subeq	r5, r5, r3
 800ba78:	68a3      	ldr	r3, [r4, #8]
 800ba7a:	bf0c      	ite	eq
 800ba7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba80:	2500      	movne	r5, #0
 800ba82:	4293      	cmp	r3, r2
 800ba84:	bfc4      	itt	gt
 800ba86:	1a9b      	subgt	r3, r3, r2
 800ba88:	18ed      	addgt	r5, r5, r3
 800ba8a:	2600      	movs	r6, #0
 800ba8c:	341a      	adds	r4, #26
 800ba8e:	42b5      	cmp	r5, r6
 800ba90:	d11a      	bne.n	800bac8 <_printf_common+0xc8>
 800ba92:	2000      	movs	r0, #0
 800ba94:	e008      	b.n	800baa8 <_printf_common+0xa8>
 800ba96:	2301      	movs	r3, #1
 800ba98:	4652      	mov	r2, sl
 800ba9a:	4641      	mov	r1, r8
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	47c8      	blx	r9
 800baa0:	3001      	adds	r0, #1
 800baa2:	d103      	bne.n	800baac <_printf_common+0xac>
 800baa4:	f04f 30ff 	mov.w	r0, #4294967295
 800baa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baac:	3501      	adds	r5, #1
 800baae:	e7c6      	b.n	800ba3e <_printf_common+0x3e>
 800bab0:	18e1      	adds	r1, r4, r3
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	2030      	movs	r0, #48	@ 0x30
 800bab6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800baba:	4422      	add	r2, r4
 800babc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bac0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bac4:	3302      	adds	r3, #2
 800bac6:	e7c7      	b.n	800ba58 <_printf_common+0x58>
 800bac8:	2301      	movs	r3, #1
 800baca:	4622      	mov	r2, r4
 800bacc:	4641      	mov	r1, r8
 800bace:	4638      	mov	r0, r7
 800bad0:	47c8      	blx	r9
 800bad2:	3001      	adds	r0, #1
 800bad4:	d0e6      	beq.n	800baa4 <_printf_common+0xa4>
 800bad6:	3601      	adds	r6, #1
 800bad8:	e7d9      	b.n	800ba8e <_printf_common+0x8e>
	...

0800badc <_printf_i>:
 800badc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bae0:	7e0f      	ldrb	r7, [r1, #24]
 800bae2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bae4:	2f78      	cmp	r7, #120	@ 0x78
 800bae6:	4691      	mov	r9, r2
 800bae8:	4680      	mov	r8, r0
 800baea:	460c      	mov	r4, r1
 800baec:	469a      	mov	sl, r3
 800baee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800baf2:	d807      	bhi.n	800bb04 <_printf_i+0x28>
 800baf4:	2f62      	cmp	r7, #98	@ 0x62
 800baf6:	d80a      	bhi.n	800bb0e <_printf_i+0x32>
 800baf8:	2f00      	cmp	r7, #0
 800bafa:	f000 80d1 	beq.w	800bca0 <_printf_i+0x1c4>
 800bafe:	2f58      	cmp	r7, #88	@ 0x58
 800bb00:	f000 80b8 	beq.w	800bc74 <_printf_i+0x198>
 800bb04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bb0c:	e03a      	b.n	800bb84 <_printf_i+0xa8>
 800bb0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bb12:	2b15      	cmp	r3, #21
 800bb14:	d8f6      	bhi.n	800bb04 <_printf_i+0x28>
 800bb16:	a101      	add	r1, pc, #4	@ (adr r1, 800bb1c <_printf_i+0x40>)
 800bb18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb1c:	0800bb75 	.word	0x0800bb75
 800bb20:	0800bb89 	.word	0x0800bb89
 800bb24:	0800bb05 	.word	0x0800bb05
 800bb28:	0800bb05 	.word	0x0800bb05
 800bb2c:	0800bb05 	.word	0x0800bb05
 800bb30:	0800bb05 	.word	0x0800bb05
 800bb34:	0800bb89 	.word	0x0800bb89
 800bb38:	0800bb05 	.word	0x0800bb05
 800bb3c:	0800bb05 	.word	0x0800bb05
 800bb40:	0800bb05 	.word	0x0800bb05
 800bb44:	0800bb05 	.word	0x0800bb05
 800bb48:	0800bc87 	.word	0x0800bc87
 800bb4c:	0800bbb3 	.word	0x0800bbb3
 800bb50:	0800bc41 	.word	0x0800bc41
 800bb54:	0800bb05 	.word	0x0800bb05
 800bb58:	0800bb05 	.word	0x0800bb05
 800bb5c:	0800bca9 	.word	0x0800bca9
 800bb60:	0800bb05 	.word	0x0800bb05
 800bb64:	0800bbb3 	.word	0x0800bbb3
 800bb68:	0800bb05 	.word	0x0800bb05
 800bb6c:	0800bb05 	.word	0x0800bb05
 800bb70:	0800bc49 	.word	0x0800bc49
 800bb74:	6833      	ldr	r3, [r6, #0]
 800bb76:	1d1a      	adds	r2, r3, #4
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	6032      	str	r2, [r6, #0]
 800bb7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb84:	2301      	movs	r3, #1
 800bb86:	e09c      	b.n	800bcc2 <_printf_i+0x1e6>
 800bb88:	6833      	ldr	r3, [r6, #0]
 800bb8a:	6820      	ldr	r0, [r4, #0]
 800bb8c:	1d19      	adds	r1, r3, #4
 800bb8e:	6031      	str	r1, [r6, #0]
 800bb90:	0606      	lsls	r6, r0, #24
 800bb92:	d501      	bpl.n	800bb98 <_printf_i+0xbc>
 800bb94:	681d      	ldr	r5, [r3, #0]
 800bb96:	e003      	b.n	800bba0 <_printf_i+0xc4>
 800bb98:	0645      	lsls	r5, r0, #25
 800bb9a:	d5fb      	bpl.n	800bb94 <_printf_i+0xb8>
 800bb9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bba0:	2d00      	cmp	r5, #0
 800bba2:	da03      	bge.n	800bbac <_printf_i+0xd0>
 800bba4:	232d      	movs	r3, #45	@ 0x2d
 800bba6:	426d      	negs	r5, r5
 800bba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbac:	4858      	ldr	r0, [pc, #352]	@ (800bd10 <_printf_i+0x234>)
 800bbae:	230a      	movs	r3, #10
 800bbb0:	e011      	b.n	800bbd6 <_printf_i+0xfa>
 800bbb2:	6821      	ldr	r1, [r4, #0]
 800bbb4:	6833      	ldr	r3, [r6, #0]
 800bbb6:	0608      	lsls	r0, r1, #24
 800bbb8:	f853 5b04 	ldr.w	r5, [r3], #4
 800bbbc:	d402      	bmi.n	800bbc4 <_printf_i+0xe8>
 800bbbe:	0649      	lsls	r1, r1, #25
 800bbc0:	bf48      	it	mi
 800bbc2:	b2ad      	uxthmi	r5, r5
 800bbc4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bbc6:	4852      	ldr	r0, [pc, #328]	@ (800bd10 <_printf_i+0x234>)
 800bbc8:	6033      	str	r3, [r6, #0]
 800bbca:	bf14      	ite	ne
 800bbcc:	230a      	movne	r3, #10
 800bbce:	2308      	moveq	r3, #8
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bbd6:	6866      	ldr	r6, [r4, #4]
 800bbd8:	60a6      	str	r6, [r4, #8]
 800bbda:	2e00      	cmp	r6, #0
 800bbdc:	db05      	blt.n	800bbea <_printf_i+0x10e>
 800bbde:	6821      	ldr	r1, [r4, #0]
 800bbe0:	432e      	orrs	r6, r5
 800bbe2:	f021 0104 	bic.w	r1, r1, #4
 800bbe6:	6021      	str	r1, [r4, #0]
 800bbe8:	d04b      	beq.n	800bc82 <_printf_i+0x1a6>
 800bbea:	4616      	mov	r6, r2
 800bbec:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbf0:	fb03 5711 	mls	r7, r3, r1, r5
 800bbf4:	5dc7      	ldrb	r7, [r0, r7]
 800bbf6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbfa:	462f      	mov	r7, r5
 800bbfc:	42bb      	cmp	r3, r7
 800bbfe:	460d      	mov	r5, r1
 800bc00:	d9f4      	bls.n	800bbec <_printf_i+0x110>
 800bc02:	2b08      	cmp	r3, #8
 800bc04:	d10b      	bne.n	800bc1e <_printf_i+0x142>
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	07df      	lsls	r7, r3, #31
 800bc0a:	d508      	bpl.n	800bc1e <_printf_i+0x142>
 800bc0c:	6923      	ldr	r3, [r4, #16]
 800bc0e:	6861      	ldr	r1, [r4, #4]
 800bc10:	4299      	cmp	r1, r3
 800bc12:	bfde      	ittt	le
 800bc14:	2330      	movle	r3, #48	@ 0x30
 800bc16:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc1e:	1b92      	subs	r2, r2, r6
 800bc20:	6122      	str	r2, [r4, #16]
 800bc22:	f8cd a000 	str.w	sl, [sp]
 800bc26:	464b      	mov	r3, r9
 800bc28:	aa03      	add	r2, sp, #12
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	4640      	mov	r0, r8
 800bc2e:	f7ff fee7 	bl	800ba00 <_printf_common>
 800bc32:	3001      	adds	r0, #1
 800bc34:	d14a      	bne.n	800bccc <_printf_i+0x1f0>
 800bc36:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3a:	b004      	add	sp, #16
 800bc3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc40:	6823      	ldr	r3, [r4, #0]
 800bc42:	f043 0320 	orr.w	r3, r3, #32
 800bc46:	6023      	str	r3, [r4, #0]
 800bc48:	4832      	ldr	r0, [pc, #200]	@ (800bd14 <_printf_i+0x238>)
 800bc4a:	2778      	movs	r7, #120	@ 0x78
 800bc4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc50:	6823      	ldr	r3, [r4, #0]
 800bc52:	6831      	ldr	r1, [r6, #0]
 800bc54:	061f      	lsls	r7, r3, #24
 800bc56:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc5a:	d402      	bmi.n	800bc62 <_printf_i+0x186>
 800bc5c:	065f      	lsls	r7, r3, #25
 800bc5e:	bf48      	it	mi
 800bc60:	b2ad      	uxthmi	r5, r5
 800bc62:	6031      	str	r1, [r6, #0]
 800bc64:	07d9      	lsls	r1, r3, #31
 800bc66:	bf44      	itt	mi
 800bc68:	f043 0320 	orrmi.w	r3, r3, #32
 800bc6c:	6023      	strmi	r3, [r4, #0]
 800bc6e:	b11d      	cbz	r5, 800bc78 <_printf_i+0x19c>
 800bc70:	2310      	movs	r3, #16
 800bc72:	e7ad      	b.n	800bbd0 <_printf_i+0xf4>
 800bc74:	4826      	ldr	r0, [pc, #152]	@ (800bd10 <_printf_i+0x234>)
 800bc76:	e7e9      	b.n	800bc4c <_printf_i+0x170>
 800bc78:	6823      	ldr	r3, [r4, #0]
 800bc7a:	f023 0320 	bic.w	r3, r3, #32
 800bc7e:	6023      	str	r3, [r4, #0]
 800bc80:	e7f6      	b.n	800bc70 <_printf_i+0x194>
 800bc82:	4616      	mov	r6, r2
 800bc84:	e7bd      	b.n	800bc02 <_printf_i+0x126>
 800bc86:	6833      	ldr	r3, [r6, #0]
 800bc88:	6825      	ldr	r5, [r4, #0]
 800bc8a:	6961      	ldr	r1, [r4, #20]
 800bc8c:	1d18      	adds	r0, r3, #4
 800bc8e:	6030      	str	r0, [r6, #0]
 800bc90:	062e      	lsls	r6, r5, #24
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	d501      	bpl.n	800bc9a <_printf_i+0x1be>
 800bc96:	6019      	str	r1, [r3, #0]
 800bc98:	e002      	b.n	800bca0 <_printf_i+0x1c4>
 800bc9a:	0668      	lsls	r0, r5, #25
 800bc9c:	d5fb      	bpl.n	800bc96 <_printf_i+0x1ba>
 800bc9e:	8019      	strh	r1, [r3, #0]
 800bca0:	2300      	movs	r3, #0
 800bca2:	6123      	str	r3, [r4, #16]
 800bca4:	4616      	mov	r6, r2
 800bca6:	e7bc      	b.n	800bc22 <_printf_i+0x146>
 800bca8:	6833      	ldr	r3, [r6, #0]
 800bcaa:	1d1a      	adds	r2, r3, #4
 800bcac:	6032      	str	r2, [r6, #0]
 800bcae:	681e      	ldr	r6, [r3, #0]
 800bcb0:	6862      	ldr	r2, [r4, #4]
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f7f4 fa8b 	bl	80001d0 <memchr>
 800bcba:	b108      	cbz	r0, 800bcc0 <_printf_i+0x1e4>
 800bcbc:	1b80      	subs	r0, r0, r6
 800bcbe:	6060      	str	r0, [r4, #4]
 800bcc0:	6863      	ldr	r3, [r4, #4]
 800bcc2:	6123      	str	r3, [r4, #16]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcca:	e7aa      	b.n	800bc22 <_printf_i+0x146>
 800bccc:	6923      	ldr	r3, [r4, #16]
 800bcce:	4632      	mov	r2, r6
 800bcd0:	4649      	mov	r1, r9
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	47d0      	blx	sl
 800bcd6:	3001      	adds	r0, #1
 800bcd8:	d0ad      	beq.n	800bc36 <_printf_i+0x15a>
 800bcda:	6823      	ldr	r3, [r4, #0]
 800bcdc:	079b      	lsls	r3, r3, #30
 800bcde:	d413      	bmi.n	800bd08 <_printf_i+0x22c>
 800bce0:	68e0      	ldr	r0, [r4, #12]
 800bce2:	9b03      	ldr	r3, [sp, #12]
 800bce4:	4298      	cmp	r0, r3
 800bce6:	bfb8      	it	lt
 800bce8:	4618      	movlt	r0, r3
 800bcea:	e7a6      	b.n	800bc3a <_printf_i+0x15e>
 800bcec:	2301      	movs	r3, #1
 800bcee:	4632      	mov	r2, r6
 800bcf0:	4649      	mov	r1, r9
 800bcf2:	4640      	mov	r0, r8
 800bcf4:	47d0      	blx	sl
 800bcf6:	3001      	adds	r0, #1
 800bcf8:	d09d      	beq.n	800bc36 <_printf_i+0x15a>
 800bcfa:	3501      	adds	r5, #1
 800bcfc:	68e3      	ldr	r3, [r4, #12]
 800bcfe:	9903      	ldr	r1, [sp, #12]
 800bd00:	1a5b      	subs	r3, r3, r1
 800bd02:	42ab      	cmp	r3, r5
 800bd04:	dcf2      	bgt.n	800bcec <_printf_i+0x210>
 800bd06:	e7eb      	b.n	800bce0 <_printf_i+0x204>
 800bd08:	2500      	movs	r5, #0
 800bd0a:	f104 0619 	add.w	r6, r4, #25
 800bd0e:	e7f5      	b.n	800bcfc <_printf_i+0x220>
 800bd10:	0800fd36 	.word	0x0800fd36
 800bd14:	0800fd47 	.word	0x0800fd47

0800bd18 <std>:
 800bd18:	2300      	movs	r3, #0
 800bd1a:	b510      	push	{r4, lr}
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	e9c0 3300 	strd	r3, r3, [r0]
 800bd22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd26:	6083      	str	r3, [r0, #8]
 800bd28:	8181      	strh	r1, [r0, #12]
 800bd2a:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd2c:	81c2      	strh	r2, [r0, #14]
 800bd2e:	6183      	str	r3, [r0, #24]
 800bd30:	4619      	mov	r1, r3
 800bd32:	2208      	movs	r2, #8
 800bd34:	305c      	adds	r0, #92	@ 0x5c
 800bd36:	f000 fa2b 	bl	800c190 <memset>
 800bd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd70 <std+0x58>)
 800bd3c:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd74 <std+0x5c>)
 800bd40:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd42:	4b0d      	ldr	r3, [pc, #52]	@ (800bd78 <std+0x60>)
 800bd44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd46:	4b0d      	ldr	r3, [pc, #52]	@ (800bd7c <std+0x64>)
 800bd48:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd4a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd80 <std+0x68>)
 800bd4c:	6224      	str	r4, [r4, #32]
 800bd4e:	429c      	cmp	r4, r3
 800bd50:	d006      	beq.n	800bd60 <std+0x48>
 800bd52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd56:	4294      	cmp	r4, r2
 800bd58:	d002      	beq.n	800bd60 <std+0x48>
 800bd5a:	33d0      	adds	r3, #208	@ 0xd0
 800bd5c:	429c      	cmp	r4, r3
 800bd5e:	d105      	bne.n	800bd6c <std+0x54>
 800bd60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd68:	f000 ba8e 	b.w	800c288 <__retarget_lock_init_recursive>
 800bd6c:	bd10      	pop	{r4, pc}
 800bd6e:	bf00      	nop
 800bd70:	0800bfc1 	.word	0x0800bfc1
 800bd74:	0800bfe3 	.word	0x0800bfe3
 800bd78:	0800c01b 	.word	0x0800c01b
 800bd7c:	0800c03f 	.word	0x0800c03f
 800bd80:	200008ac 	.word	0x200008ac

0800bd84 <stdio_exit_handler>:
 800bd84:	4a02      	ldr	r2, [pc, #8]	@ (800bd90 <stdio_exit_handler+0xc>)
 800bd86:	4903      	ldr	r1, [pc, #12]	@ (800bd94 <stdio_exit_handler+0x10>)
 800bd88:	4803      	ldr	r0, [pc, #12]	@ (800bd98 <stdio_exit_handler+0x14>)
 800bd8a:	f000 b869 	b.w	800be60 <_fwalk_sglue>
 800bd8e:	bf00      	nop
 800bd90:	200000a0 	.word	0x200000a0
 800bd94:	0800de71 	.word	0x0800de71
 800bd98:	200000b0 	.word	0x200000b0

0800bd9c <cleanup_stdio>:
 800bd9c:	6841      	ldr	r1, [r0, #4]
 800bd9e:	4b0c      	ldr	r3, [pc, #48]	@ (800bdd0 <cleanup_stdio+0x34>)
 800bda0:	4299      	cmp	r1, r3
 800bda2:	b510      	push	{r4, lr}
 800bda4:	4604      	mov	r4, r0
 800bda6:	d001      	beq.n	800bdac <cleanup_stdio+0x10>
 800bda8:	f002 f862 	bl	800de70 <_fflush_r>
 800bdac:	68a1      	ldr	r1, [r4, #8]
 800bdae:	4b09      	ldr	r3, [pc, #36]	@ (800bdd4 <cleanup_stdio+0x38>)
 800bdb0:	4299      	cmp	r1, r3
 800bdb2:	d002      	beq.n	800bdba <cleanup_stdio+0x1e>
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f002 f85b 	bl	800de70 <_fflush_r>
 800bdba:	68e1      	ldr	r1, [r4, #12]
 800bdbc:	4b06      	ldr	r3, [pc, #24]	@ (800bdd8 <cleanup_stdio+0x3c>)
 800bdbe:	4299      	cmp	r1, r3
 800bdc0:	d004      	beq.n	800bdcc <cleanup_stdio+0x30>
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdc8:	f002 b852 	b.w	800de70 <_fflush_r>
 800bdcc:	bd10      	pop	{r4, pc}
 800bdce:	bf00      	nop
 800bdd0:	200008ac 	.word	0x200008ac
 800bdd4:	20000914 	.word	0x20000914
 800bdd8:	2000097c 	.word	0x2000097c

0800bddc <global_stdio_init.part.0>:
 800bddc:	b510      	push	{r4, lr}
 800bdde:	4b0b      	ldr	r3, [pc, #44]	@ (800be0c <global_stdio_init.part.0+0x30>)
 800bde0:	4c0b      	ldr	r4, [pc, #44]	@ (800be10 <global_stdio_init.part.0+0x34>)
 800bde2:	4a0c      	ldr	r2, [pc, #48]	@ (800be14 <global_stdio_init.part.0+0x38>)
 800bde4:	601a      	str	r2, [r3, #0]
 800bde6:	4620      	mov	r0, r4
 800bde8:	2200      	movs	r2, #0
 800bdea:	2104      	movs	r1, #4
 800bdec:	f7ff ff94 	bl	800bd18 <std>
 800bdf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	2109      	movs	r1, #9
 800bdf8:	f7ff ff8e 	bl	800bd18 <std>
 800bdfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800be00:	2202      	movs	r2, #2
 800be02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be06:	2112      	movs	r1, #18
 800be08:	f7ff bf86 	b.w	800bd18 <std>
 800be0c:	200009e4 	.word	0x200009e4
 800be10:	200008ac 	.word	0x200008ac
 800be14:	0800bd85 	.word	0x0800bd85

0800be18 <__sfp_lock_acquire>:
 800be18:	4801      	ldr	r0, [pc, #4]	@ (800be20 <__sfp_lock_acquire+0x8>)
 800be1a:	f000 ba36 	b.w	800c28a <__retarget_lock_acquire_recursive>
 800be1e:	bf00      	nop
 800be20:	200009ed 	.word	0x200009ed

0800be24 <__sfp_lock_release>:
 800be24:	4801      	ldr	r0, [pc, #4]	@ (800be2c <__sfp_lock_release+0x8>)
 800be26:	f000 ba31 	b.w	800c28c <__retarget_lock_release_recursive>
 800be2a:	bf00      	nop
 800be2c:	200009ed 	.word	0x200009ed

0800be30 <__sinit>:
 800be30:	b510      	push	{r4, lr}
 800be32:	4604      	mov	r4, r0
 800be34:	f7ff fff0 	bl	800be18 <__sfp_lock_acquire>
 800be38:	6a23      	ldr	r3, [r4, #32]
 800be3a:	b11b      	cbz	r3, 800be44 <__sinit+0x14>
 800be3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be40:	f7ff bff0 	b.w	800be24 <__sfp_lock_release>
 800be44:	4b04      	ldr	r3, [pc, #16]	@ (800be58 <__sinit+0x28>)
 800be46:	6223      	str	r3, [r4, #32]
 800be48:	4b04      	ldr	r3, [pc, #16]	@ (800be5c <__sinit+0x2c>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d1f5      	bne.n	800be3c <__sinit+0xc>
 800be50:	f7ff ffc4 	bl	800bddc <global_stdio_init.part.0>
 800be54:	e7f2      	b.n	800be3c <__sinit+0xc>
 800be56:	bf00      	nop
 800be58:	0800bd9d 	.word	0x0800bd9d
 800be5c:	200009e4 	.word	0x200009e4

0800be60 <_fwalk_sglue>:
 800be60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be64:	4607      	mov	r7, r0
 800be66:	4688      	mov	r8, r1
 800be68:	4614      	mov	r4, r2
 800be6a:	2600      	movs	r6, #0
 800be6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be70:	f1b9 0901 	subs.w	r9, r9, #1
 800be74:	d505      	bpl.n	800be82 <_fwalk_sglue+0x22>
 800be76:	6824      	ldr	r4, [r4, #0]
 800be78:	2c00      	cmp	r4, #0
 800be7a:	d1f7      	bne.n	800be6c <_fwalk_sglue+0xc>
 800be7c:	4630      	mov	r0, r6
 800be7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be82:	89ab      	ldrh	r3, [r5, #12]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d907      	bls.n	800be98 <_fwalk_sglue+0x38>
 800be88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be8c:	3301      	adds	r3, #1
 800be8e:	d003      	beq.n	800be98 <_fwalk_sglue+0x38>
 800be90:	4629      	mov	r1, r5
 800be92:	4638      	mov	r0, r7
 800be94:	47c0      	blx	r8
 800be96:	4306      	orrs	r6, r0
 800be98:	3568      	adds	r5, #104	@ 0x68
 800be9a:	e7e9      	b.n	800be70 <_fwalk_sglue+0x10>

0800be9c <iprintf>:
 800be9c:	b40f      	push	{r0, r1, r2, r3}
 800be9e:	b507      	push	{r0, r1, r2, lr}
 800bea0:	4906      	ldr	r1, [pc, #24]	@ (800bebc <iprintf+0x20>)
 800bea2:	ab04      	add	r3, sp, #16
 800bea4:	6808      	ldr	r0, [r1, #0]
 800bea6:	f853 2b04 	ldr.w	r2, [r3], #4
 800beaa:	6881      	ldr	r1, [r0, #8]
 800beac:	9301      	str	r3, [sp, #4]
 800beae:	f001 fe43 	bl	800db38 <_vfiprintf_r>
 800beb2:	b003      	add	sp, #12
 800beb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800beb8:	b004      	add	sp, #16
 800beba:	4770      	bx	lr
 800bebc:	200000ac 	.word	0x200000ac

0800bec0 <_puts_r>:
 800bec0:	6a03      	ldr	r3, [r0, #32]
 800bec2:	b570      	push	{r4, r5, r6, lr}
 800bec4:	6884      	ldr	r4, [r0, #8]
 800bec6:	4605      	mov	r5, r0
 800bec8:	460e      	mov	r6, r1
 800beca:	b90b      	cbnz	r3, 800bed0 <_puts_r+0x10>
 800becc:	f7ff ffb0 	bl	800be30 <__sinit>
 800bed0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bed2:	07db      	lsls	r3, r3, #31
 800bed4:	d405      	bmi.n	800bee2 <_puts_r+0x22>
 800bed6:	89a3      	ldrh	r3, [r4, #12]
 800bed8:	0598      	lsls	r0, r3, #22
 800beda:	d402      	bmi.n	800bee2 <_puts_r+0x22>
 800bedc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bede:	f000 f9d4 	bl	800c28a <__retarget_lock_acquire_recursive>
 800bee2:	89a3      	ldrh	r3, [r4, #12]
 800bee4:	0719      	lsls	r1, r3, #28
 800bee6:	d502      	bpl.n	800beee <_puts_r+0x2e>
 800bee8:	6923      	ldr	r3, [r4, #16]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d135      	bne.n	800bf5a <_puts_r+0x9a>
 800beee:	4621      	mov	r1, r4
 800bef0:	4628      	mov	r0, r5
 800bef2:	f000 f8e7 	bl	800c0c4 <__swsetup_r>
 800bef6:	b380      	cbz	r0, 800bf5a <_puts_r+0x9a>
 800bef8:	f04f 35ff 	mov.w	r5, #4294967295
 800befc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800befe:	07da      	lsls	r2, r3, #31
 800bf00:	d405      	bmi.n	800bf0e <_puts_r+0x4e>
 800bf02:	89a3      	ldrh	r3, [r4, #12]
 800bf04:	059b      	lsls	r3, r3, #22
 800bf06:	d402      	bmi.n	800bf0e <_puts_r+0x4e>
 800bf08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf0a:	f000 f9bf 	bl	800c28c <__retarget_lock_release_recursive>
 800bf0e:	4628      	mov	r0, r5
 800bf10:	bd70      	pop	{r4, r5, r6, pc}
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	da04      	bge.n	800bf20 <_puts_r+0x60>
 800bf16:	69a2      	ldr	r2, [r4, #24]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	dc17      	bgt.n	800bf4c <_puts_r+0x8c>
 800bf1c:	290a      	cmp	r1, #10
 800bf1e:	d015      	beq.n	800bf4c <_puts_r+0x8c>
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	1c5a      	adds	r2, r3, #1
 800bf24:	6022      	str	r2, [r4, #0]
 800bf26:	7019      	strb	r1, [r3, #0]
 800bf28:	68a3      	ldr	r3, [r4, #8]
 800bf2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	60a3      	str	r3, [r4, #8]
 800bf32:	2900      	cmp	r1, #0
 800bf34:	d1ed      	bne.n	800bf12 <_puts_r+0x52>
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	da11      	bge.n	800bf5e <_puts_r+0x9e>
 800bf3a:	4622      	mov	r2, r4
 800bf3c:	210a      	movs	r1, #10
 800bf3e:	4628      	mov	r0, r5
 800bf40:	f000 f881 	bl	800c046 <__swbuf_r>
 800bf44:	3001      	adds	r0, #1
 800bf46:	d0d7      	beq.n	800bef8 <_puts_r+0x38>
 800bf48:	250a      	movs	r5, #10
 800bf4a:	e7d7      	b.n	800befc <_puts_r+0x3c>
 800bf4c:	4622      	mov	r2, r4
 800bf4e:	4628      	mov	r0, r5
 800bf50:	f000 f879 	bl	800c046 <__swbuf_r>
 800bf54:	3001      	adds	r0, #1
 800bf56:	d1e7      	bne.n	800bf28 <_puts_r+0x68>
 800bf58:	e7ce      	b.n	800bef8 <_puts_r+0x38>
 800bf5a:	3e01      	subs	r6, #1
 800bf5c:	e7e4      	b.n	800bf28 <_puts_r+0x68>
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	1c5a      	adds	r2, r3, #1
 800bf62:	6022      	str	r2, [r4, #0]
 800bf64:	220a      	movs	r2, #10
 800bf66:	701a      	strb	r2, [r3, #0]
 800bf68:	e7ee      	b.n	800bf48 <_puts_r+0x88>
	...

0800bf6c <puts>:
 800bf6c:	4b02      	ldr	r3, [pc, #8]	@ (800bf78 <puts+0xc>)
 800bf6e:	4601      	mov	r1, r0
 800bf70:	6818      	ldr	r0, [r3, #0]
 800bf72:	f7ff bfa5 	b.w	800bec0 <_puts_r>
 800bf76:	bf00      	nop
 800bf78:	200000ac 	.word	0x200000ac

0800bf7c <siprintf>:
 800bf7c:	b40e      	push	{r1, r2, r3}
 800bf7e:	b510      	push	{r4, lr}
 800bf80:	b09d      	sub	sp, #116	@ 0x74
 800bf82:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bf84:	9002      	str	r0, [sp, #8]
 800bf86:	9006      	str	r0, [sp, #24]
 800bf88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bf8c:	480a      	ldr	r0, [pc, #40]	@ (800bfb8 <siprintf+0x3c>)
 800bf8e:	9107      	str	r1, [sp, #28]
 800bf90:	9104      	str	r1, [sp, #16]
 800bf92:	490a      	ldr	r1, [pc, #40]	@ (800bfbc <siprintf+0x40>)
 800bf94:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf98:	9105      	str	r1, [sp, #20]
 800bf9a:	2400      	movs	r4, #0
 800bf9c:	a902      	add	r1, sp, #8
 800bf9e:	6800      	ldr	r0, [r0, #0]
 800bfa0:	9301      	str	r3, [sp, #4]
 800bfa2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bfa4:	f001 fca2 	bl	800d8ec <_svfiprintf_r>
 800bfa8:	9b02      	ldr	r3, [sp, #8]
 800bfaa:	701c      	strb	r4, [r3, #0]
 800bfac:	b01d      	add	sp, #116	@ 0x74
 800bfae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfb2:	b003      	add	sp, #12
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	200000ac 	.word	0x200000ac
 800bfbc:	ffff0208 	.word	0xffff0208

0800bfc0 <__sread>:
 800bfc0:	b510      	push	{r4, lr}
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc8:	f000 f910 	bl	800c1ec <_read_r>
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	bfab      	itete	ge
 800bfd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bfd2:	89a3      	ldrhlt	r3, [r4, #12]
 800bfd4:	181b      	addge	r3, r3, r0
 800bfd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bfda:	bfac      	ite	ge
 800bfdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bfde:	81a3      	strhlt	r3, [r4, #12]
 800bfe0:	bd10      	pop	{r4, pc}

0800bfe2 <__swrite>:
 800bfe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe6:	461f      	mov	r7, r3
 800bfe8:	898b      	ldrh	r3, [r1, #12]
 800bfea:	05db      	lsls	r3, r3, #23
 800bfec:	4605      	mov	r5, r0
 800bfee:	460c      	mov	r4, r1
 800bff0:	4616      	mov	r6, r2
 800bff2:	d505      	bpl.n	800c000 <__swrite+0x1e>
 800bff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff8:	2302      	movs	r3, #2
 800bffa:	2200      	movs	r2, #0
 800bffc:	f000 f8e4 	bl	800c1c8 <_lseek_r>
 800c000:	89a3      	ldrh	r3, [r4, #12]
 800c002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c006:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c00a:	81a3      	strh	r3, [r4, #12]
 800c00c:	4632      	mov	r2, r6
 800c00e:	463b      	mov	r3, r7
 800c010:	4628      	mov	r0, r5
 800c012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c016:	f000 b8fb 	b.w	800c210 <_write_r>

0800c01a <__sseek>:
 800c01a:	b510      	push	{r4, lr}
 800c01c:	460c      	mov	r4, r1
 800c01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c022:	f000 f8d1 	bl	800c1c8 <_lseek_r>
 800c026:	1c43      	adds	r3, r0, #1
 800c028:	89a3      	ldrh	r3, [r4, #12]
 800c02a:	bf15      	itete	ne
 800c02c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c02e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c032:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c036:	81a3      	strheq	r3, [r4, #12]
 800c038:	bf18      	it	ne
 800c03a:	81a3      	strhne	r3, [r4, #12]
 800c03c:	bd10      	pop	{r4, pc}

0800c03e <__sclose>:
 800c03e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c042:	f000 b8b1 	b.w	800c1a8 <_close_r>

0800c046 <__swbuf_r>:
 800c046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c048:	460e      	mov	r6, r1
 800c04a:	4614      	mov	r4, r2
 800c04c:	4605      	mov	r5, r0
 800c04e:	b118      	cbz	r0, 800c058 <__swbuf_r+0x12>
 800c050:	6a03      	ldr	r3, [r0, #32]
 800c052:	b90b      	cbnz	r3, 800c058 <__swbuf_r+0x12>
 800c054:	f7ff feec 	bl	800be30 <__sinit>
 800c058:	69a3      	ldr	r3, [r4, #24]
 800c05a:	60a3      	str	r3, [r4, #8]
 800c05c:	89a3      	ldrh	r3, [r4, #12]
 800c05e:	071a      	lsls	r2, r3, #28
 800c060:	d501      	bpl.n	800c066 <__swbuf_r+0x20>
 800c062:	6923      	ldr	r3, [r4, #16]
 800c064:	b943      	cbnz	r3, 800c078 <__swbuf_r+0x32>
 800c066:	4621      	mov	r1, r4
 800c068:	4628      	mov	r0, r5
 800c06a:	f000 f82b 	bl	800c0c4 <__swsetup_r>
 800c06e:	b118      	cbz	r0, 800c078 <__swbuf_r+0x32>
 800c070:	f04f 37ff 	mov.w	r7, #4294967295
 800c074:	4638      	mov	r0, r7
 800c076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	6922      	ldr	r2, [r4, #16]
 800c07c:	1a98      	subs	r0, r3, r2
 800c07e:	6963      	ldr	r3, [r4, #20]
 800c080:	b2f6      	uxtb	r6, r6
 800c082:	4283      	cmp	r3, r0
 800c084:	4637      	mov	r7, r6
 800c086:	dc05      	bgt.n	800c094 <__swbuf_r+0x4e>
 800c088:	4621      	mov	r1, r4
 800c08a:	4628      	mov	r0, r5
 800c08c:	f001 fef0 	bl	800de70 <_fflush_r>
 800c090:	2800      	cmp	r0, #0
 800c092:	d1ed      	bne.n	800c070 <__swbuf_r+0x2a>
 800c094:	68a3      	ldr	r3, [r4, #8]
 800c096:	3b01      	subs	r3, #1
 800c098:	60a3      	str	r3, [r4, #8]
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	1c5a      	adds	r2, r3, #1
 800c09e:	6022      	str	r2, [r4, #0]
 800c0a0:	701e      	strb	r6, [r3, #0]
 800c0a2:	6962      	ldr	r2, [r4, #20]
 800c0a4:	1c43      	adds	r3, r0, #1
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d004      	beq.n	800c0b4 <__swbuf_r+0x6e>
 800c0aa:	89a3      	ldrh	r3, [r4, #12]
 800c0ac:	07db      	lsls	r3, r3, #31
 800c0ae:	d5e1      	bpl.n	800c074 <__swbuf_r+0x2e>
 800c0b0:	2e0a      	cmp	r6, #10
 800c0b2:	d1df      	bne.n	800c074 <__swbuf_r+0x2e>
 800c0b4:	4621      	mov	r1, r4
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	f001 feda 	bl	800de70 <_fflush_r>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d0d9      	beq.n	800c074 <__swbuf_r+0x2e>
 800c0c0:	e7d6      	b.n	800c070 <__swbuf_r+0x2a>
	...

0800c0c4 <__swsetup_r>:
 800c0c4:	b538      	push	{r3, r4, r5, lr}
 800c0c6:	4b29      	ldr	r3, [pc, #164]	@ (800c16c <__swsetup_r+0xa8>)
 800c0c8:	4605      	mov	r5, r0
 800c0ca:	6818      	ldr	r0, [r3, #0]
 800c0cc:	460c      	mov	r4, r1
 800c0ce:	b118      	cbz	r0, 800c0d8 <__swsetup_r+0x14>
 800c0d0:	6a03      	ldr	r3, [r0, #32]
 800c0d2:	b90b      	cbnz	r3, 800c0d8 <__swsetup_r+0x14>
 800c0d4:	f7ff feac 	bl	800be30 <__sinit>
 800c0d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0dc:	0719      	lsls	r1, r3, #28
 800c0de:	d422      	bmi.n	800c126 <__swsetup_r+0x62>
 800c0e0:	06da      	lsls	r2, r3, #27
 800c0e2:	d407      	bmi.n	800c0f4 <__swsetup_r+0x30>
 800c0e4:	2209      	movs	r2, #9
 800c0e6:	602a      	str	r2, [r5, #0]
 800c0e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0ec:	81a3      	strh	r3, [r4, #12]
 800c0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f2:	e033      	b.n	800c15c <__swsetup_r+0x98>
 800c0f4:	0758      	lsls	r0, r3, #29
 800c0f6:	d512      	bpl.n	800c11e <__swsetup_r+0x5a>
 800c0f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0fa:	b141      	cbz	r1, 800c10e <__swsetup_r+0x4a>
 800c0fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c100:	4299      	cmp	r1, r3
 800c102:	d002      	beq.n	800c10a <__swsetup_r+0x46>
 800c104:	4628      	mov	r0, r5
 800c106:	f000 ff1b 	bl	800cf40 <_free_r>
 800c10a:	2300      	movs	r3, #0
 800c10c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c10e:	89a3      	ldrh	r3, [r4, #12]
 800c110:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c114:	81a3      	strh	r3, [r4, #12]
 800c116:	2300      	movs	r3, #0
 800c118:	6063      	str	r3, [r4, #4]
 800c11a:	6923      	ldr	r3, [r4, #16]
 800c11c:	6023      	str	r3, [r4, #0]
 800c11e:	89a3      	ldrh	r3, [r4, #12]
 800c120:	f043 0308 	orr.w	r3, r3, #8
 800c124:	81a3      	strh	r3, [r4, #12]
 800c126:	6923      	ldr	r3, [r4, #16]
 800c128:	b94b      	cbnz	r3, 800c13e <__swsetup_r+0x7a>
 800c12a:	89a3      	ldrh	r3, [r4, #12]
 800c12c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c134:	d003      	beq.n	800c13e <__swsetup_r+0x7a>
 800c136:	4621      	mov	r1, r4
 800c138:	4628      	mov	r0, r5
 800c13a:	f001 fee7 	bl	800df0c <__smakebuf_r>
 800c13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c142:	f013 0201 	ands.w	r2, r3, #1
 800c146:	d00a      	beq.n	800c15e <__swsetup_r+0x9a>
 800c148:	2200      	movs	r2, #0
 800c14a:	60a2      	str	r2, [r4, #8]
 800c14c:	6962      	ldr	r2, [r4, #20]
 800c14e:	4252      	negs	r2, r2
 800c150:	61a2      	str	r2, [r4, #24]
 800c152:	6922      	ldr	r2, [r4, #16]
 800c154:	b942      	cbnz	r2, 800c168 <__swsetup_r+0xa4>
 800c156:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c15a:	d1c5      	bne.n	800c0e8 <__swsetup_r+0x24>
 800c15c:	bd38      	pop	{r3, r4, r5, pc}
 800c15e:	0799      	lsls	r1, r3, #30
 800c160:	bf58      	it	pl
 800c162:	6962      	ldrpl	r2, [r4, #20]
 800c164:	60a2      	str	r2, [r4, #8]
 800c166:	e7f4      	b.n	800c152 <__swsetup_r+0x8e>
 800c168:	2000      	movs	r0, #0
 800c16a:	e7f7      	b.n	800c15c <__swsetup_r+0x98>
 800c16c:	200000ac 	.word	0x200000ac

0800c170 <memcmp>:
 800c170:	b510      	push	{r4, lr}
 800c172:	3901      	subs	r1, #1
 800c174:	4402      	add	r2, r0
 800c176:	4290      	cmp	r0, r2
 800c178:	d101      	bne.n	800c17e <memcmp+0xe>
 800c17a:	2000      	movs	r0, #0
 800c17c:	e005      	b.n	800c18a <memcmp+0x1a>
 800c17e:	7803      	ldrb	r3, [r0, #0]
 800c180:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c184:	42a3      	cmp	r3, r4
 800c186:	d001      	beq.n	800c18c <memcmp+0x1c>
 800c188:	1b18      	subs	r0, r3, r4
 800c18a:	bd10      	pop	{r4, pc}
 800c18c:	3001      	adds	r0, #1
 800c18e:	e7f2      	b.n	800c176 <memcmp+0x6>

0800c190 <memset>:
 800c190:	4402      	add	r2, r0
 800c192:	4603      	mov	r3, r0
 800c194:	4293      	cmp	r3, r2
 800c196:	d100      	bne.n	800c19a <memset+0xa>
 800c198:	4770      	bx	lr
 800c19a:	f803 1b01 	strb.w	r1, [r3], #1
 800c19e:	e7f9      	b.n	800c194 <memset+0x4>

0800c1a0 <_localeconv_r>:
 800c1a0:	4800      	ldr	r0, [pc, #0]	@ (800c1a4 <_localeconv_r+0x4>)
 800c1a2:	4770      	bx	lr
 800c1a4:	200001ec 	.word	0x200001ec

0800c1a8 <_close_r>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	4d06      	ldr	r5, [pc, #24]	@ (800c1c4 <_close_r+0x1c>)
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	4608      	mov	r0, r1
 800c1b2:	602b      	str	r3, [r5, #0]
 800c1b4:	f7f9 fea8 	bl	8005f08 <_close>
 800c1b8:	1c43      	adds	r3, r0, #1
 800c1ba:	d102      	bne.n	800c1c2 <_close_r+0x1a>
 800c1bc:	682b      	ldr	r3, [r5, #0]
 800c1be:	b103      	cbz	r3, 800c1c2 <_close_r+0x1a>
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	bd38      	pop	{r3, r4, r5, pc}
 800c1c4:	200009e8 	.word	0x200009e8

0800c1c8 <_lseek_r>:
 800c1c8:	b538      	push	{r3, r4, r5, lr}
 800c1ca:	4d07      	ldr	r5, [pc, #28]	@ (800c1e8 <_lseek_r+0x20>)
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	4608      	mov	r0, r1
 800c1d0:	4611      	mov	r1, r2
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	602a      	str	r2, [r5, #0]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	f7f9 febd 	bl	8005f56 <_lseek>
 800c1dc:	1c43      	adds	r3, r0, #1
 800c1de:	d102      	bne.n	800c1e6 <_lseek_r+0x1e>
 800c1e0:	682b      	ldr	r3, [r5, #0]
 800c1e2:	b103      	cbz	r3, 800c1e6 <_lseek_r+0x1e>
 800c1e4:	6023      	str	r3, [r4, #0]
 800c1e6:	bd38      	pop	{r3, r4, r5, pc}
 800c1e8:	200009e8 	.word	0x200009e8

0800c1ec <_read_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4d07      	ldr	r5, [pc, #28]	@ (800c20c <_read_r+0x20>)
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	4608      	mov	r0, r1
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	602a      	str	r2, [r5, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	f7f9 fe4b 	bl	8005e96 <_read>
 800c200:	1c43      	adds	r3, r0, #1
 800c202:	d102      	bne.n	800c20a <_read_r+0x1e>
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	b103      	cbz	r3, 800c20a <_read_r+0x1e>
 800c208:	6023      	str	r3, [r4, #0]
 800c20a:	bd38      	pop	{r3, r4, r5, pc}
 800c20c:	200009e8 	.word	0x200009e8

0800c210 <_write_r>:
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	4d07      	ldr	r5, [pc, #28]	@ (800c230 <_write_r+0x20>)
 800c214:	4604      	mov	r4, r0
 800c216:	4608      	mov	r0, r1
 800c218:	4611      	mov	r1, r2
 800c21a:	2200      	movs	r2, #0
 800c21c:	602a      	str	r2, [r5, #0]
 800c21e:	461a      	mov	r2, r3
 800c220:	f7f9 fe56 	bl	8005ed0 <_write>
 800c224:	1c43      	adds	r3, r0, #1
 800c226:	d102      	bne.n	800c22e <_write_r+0x1e>
 800c228:	682b      	ldr	r3, [r5, #0]
 800c22a:	b103      	cbz	r3, 800c22e <_write_r+0x1e>
 800c22c:	6023      	str	r3, [r4, #0]
 800c22e:	bd38      	pop	{r3, r4, r5, pc}
 800c230:	200009e8 	.word	0x200009e8

0800c234 <__errno>:
 800c234:	4b01      	ldr	r3, [pc, #4]	@ (800c23c <__errno+0x8>)
 800c236:	6818      	ldr	r0, [r3, #0]
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	200000ac 	.word	0x200000ac

0800c240 <__libc_init_array>:
 800c240:	b570      	push	{r4, r5, r6, lr}
 800c242:	4d0d      	ldr	r5, [pc, #52]	@ (800c278 <__libc_init_array+0x38>)
 800c244:	4c0d      	ldr	r4, [pc, #52]	@ (800c27c <__libc_init_array+0x3c>)
 800c246:	1b64      	subs	r4, r4, r5
 800c248:	10a4      	asrs	r4, r4, #2
 800c24a:	2600      	movs	r6, #0
 800c24c:	42a6      	cmp	r6, r4
 800c24e:	d109      	bne.n	800c264 <__libc_init_array+0x24>
 800c250:	4d0b      	ldr	r5, [pc, #44]	@ (800c280 <__libc_init_array+0x40>)
 800c252:	4c0c      	ldr	r4, [pc, #48]	@ (800c284 <__libc_init_array+0x44>)
 800c254:	f002 fdae 	bl	800edb4 <_init>
 800c258:	1b64      	subs	r4, r4, r5
 800c25a:	10a4      	asrs	r4, r4, #2
 800c25c:	2600      	movs	r6, #0
 800c25e:	42a6      	cmp	r6, r4
 800c260:	d105      	bne.n	800c26e <__libc_init_array+0x2e>
 800c262:	bd70      	pop	{r4, r5, r6, pc}
 800c264:	f855 3b04 	ldr.w	r3, [r5], #4
 800c268:	4798      	blx	r3
 800c26a:	3601      	adds	r6, #1
 800c26c:	e7ee      	b.n	800c24c <__libc_init_array+0xc>
 800c26e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c272:	4798      	blx	r3
 800c274:	3601      	adds	r6, #1
 800c276:	e7f2      	b.n	800c25e <__libc_init_array+0x1e>
 800c278:	08010128 	.word	0x08010128
 800c27c:	08010128 	.word	0x08010128
 800c280:	08010128 	.word	0x08010128
 800c284:	0801012c 	.word	0x0801012c

0800c288 <__retarget_lock_init_recursive>:
 800c288:	4770      	bx	lr

0800c28a <__retarget_lock_acquire_recursive>:
 800c28a:	4770      	bx	lr

0800c28c <__retarget_lock_release_recursive>:
 800c28c:	4770      	bx	lr

0800c28e <quorem>:
 800c28e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c292:	6903      	ldr	r3, [r0, #16]
 800c294:	690c      	ldr	r4, [r1, #16]
 800c296:	42a3      	cmp	r3, r4
 800c298:	4607      	mov	r7, r0
 800c29a:	db7e      	blt.n	800c39a <quorem+0x10c>
 800c29c:	3c01      	subs	r4, #1
 800c29e:	f101 0814 	add.w	r8, r1, #20
 800c2a2:	00a3      	lsls	r3, r4, #2
 800c2a4:	f100 0514 	add.w	r5, r0, #20
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2ae:	9301      	str	r3, [sp, #4]
 800c2b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c2b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c2c4:	d32e      	bcc.n	800c324 <quorem+0x96>
 800c2c6:	f04f 0a00 	mov.w	sl, #0
 800c2ca:	46c4      	mov	ip, r8
 800c2cc:	46ae      	mov	lr, r5
 800c2ce:	46d3      	mov	fp, sl
 800c2d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c2d4:	b298      	uxth	r0, r3
 800c2d6:	fb06 a000 	mla	r0, r6, r0, sl
 800c2da:	0c02      	lsrs	r2, r0, #16
 800c2dc:	0c1b      	lsrs	r3, r3, #16
 800c2de:	fb06 2303 	mla	r3, r6, r3, r2
 800c2e2:	f8de 2000 	ldr.w	r2, [lr]
 800c2e6:	b280      	uxth	r0, r0
 800c2e8:	b292      	uxth	r2, r2
 800c2ea:	1a12      	subs	r2, r2, r0
 800c2ec:	445a      	add	r2, fp
 800c2ee:	f8de 0000 	ldr.w	r0, [lr]
 800c2f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c2fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c300:	b292      	uxth	r2, r2
 800c302:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c306:	45e1      	cmp	r9, ip
 800c308:	f84e 2b04 	str.w	r2, [lr], #4
 800c30c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c310:	d2de      	bcs.n	800c2d0 <quorem+0x42>
 800c312:	9b00      	ldr	r3, [sp, #0]
 800c314:	58eb      	ldr	r3, [r5, r3]
 800c316:	b92b      	cbnz	r3, 800c324 <quorem+0x96>
 800c318:	9b01      	ldr	r3, [sp, #4]
 800c31a:	3b04      	subs	r3, #4
 800c31c:	429d      	cmp	r5, r3
 800c31e:	461a      	mov	r2, r3
 800c320:	d32f      	bcc.n	800c382 <quorem+0xf4>
 800c322:	613c      	str	r4, [r7, #16]
 800c324:	4638      	mov	r0, r7
 800c326:	f001 f97d 	bl	800d624 <__mcmp>
 800c32a:	2800      	cmp	r0, #0
 800c32c:	db25      	blt.n	800c37a <quorem+0xec>
 800c32e:	4629      	mov	r1, r5
 800c330:	2000      	movs	r0, #0
 800c332:	f858 2b04 	ldr.w	r2, [r8], #4
 800c336:	f8d1 c000 	ldr.w	ip, [r1]
 800c33a:	fa1f fe82 	uxth.w	lr, r2
 800c33e:	fa1f f38c 	uxth.w	r3, ip
 800c342:	eba3 030e 	sub.w	r3, r3, lr
 800c346:	4403      	add	r3, r0
 800c348:	0c12      	lsrs	r2, r2, #16
 800c34a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c34e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c352:	b29b      	uxth	r3, r3
 800c354:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c358:	45c1      	cmp	r9, r8
 800c35a:	f841 3b04 	str.w	r3, [r1], #4
 800c35e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c362:	d2e6      	bcs.n	800c332 <quorem+0xa4>
 800c364:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c368:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c36c:	b922      	cbnz	r2, 800c378 <quorem+0xea>
 800c36e:	3b04      	subs	r3, #4
 800c370:	429d      	cmp	r5, r3
 800c372:	461a      	mov	r2, r3
 800c374:	d30b      	bcc.n	800c38e <quorem+0x100>
 800c376:	613c      	str	r4, [r7, #16]
 800c378:	3601      	adds	r6, #1
 800c37a:	4630      	mov	r0, r6
 800c37c:	b003      	add	sp, #12
 800c37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c382:	6812      	ldr	r2, [r2, #0]
 800c384:	3b04      	subs	r3, #4
 800c386:	2a00      	cmp	r2, #0
 800c388:	d1cb      	bne.n	800c322 <quorem+0x94>
 800c38a:	3c01      	subs	r4, #1
 800c38c:	e7c6      	b.n	800c31c <quorem+0x8e>
 800c38e:	6812      	ldr	r2, [r2, #0]
 800c390:	3b04      	subs	r3, #4
 800c392:	2a00      	cmp	r2, #0
 800c394:	d1ef      	bne.n	800c376 <quorem+0xe8>
 800c396:	3c01      	subs	r4, #1
 800c398:	e7ea      	b.n	800c370 <quorem+0xe2>
 800c39a:	2000      	movs	r0, #0
 800c39c:	e7ee      	b.n	800c37c <quorem+0xee>
	...

0800c3a0 <_dtoa_r>:
 800c3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a4:	69c7      	ldr	r7, [r0, #28]
 800c3a6:	b097      	sub	sp, #92	@ 0x5c
 800c3a8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c3ac:	ec55 4b10 	vmov	r4, r5, d0
 800c3b0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c3b2:	9107      	str	r1, [sp, #28]
 800c3b4:	4681      	mov	r9, r0
 800c3b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c3b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c3ba:	b97f      	cbnz	r7, 800c3dc <_dtoa_r+0x3c>
 800c3bc:	2010      	movs	r0, #16
 800c3be:	f000 fe09 	bl	800cfd4 <malloc>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	f8c9 001c 	str.w	r0, [r9, #28]
 800c3c8:	b920      	cbnz	r0, 800c3d4 <_dtoa_r+0x34>
 800c3ca:	4ba9      	ldr	r3, [pc, #676]	@ (800c670 <_dtoa_r+0x2d0>)
 800c3cc:	21ef      	movs	r1, #239	@ 0xef
 800c3ce:	48a9      	ldr	r0, [pc, #676]	@ (800c674 <_dtoa_r+0x2d4>)
 800c3d0:	f001 fe32 	bl	800e038 <__assert_func>
 800c3d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c3d8:	6007      	str	r7, [r0, #0]
 800c3da:	60c7      	str	r7, [r0, #12]
 800c3dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c3e0:	6819      	ldr	r1, [r3, #0]
 800c3e2:	b159      	cbz	r1, 800c3fc <_dtoa_r+0x5c>
 800c3e4:	685a      	ldr	r2, [r3, #4]
 800c3e6:	604a      	str	r2, [r1, #4]
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	4093      	lsls	r3, r2
 800c3ec:	608b      	str	r3, [r1, #8]
 800c3ee:	4648      	mov	r0, r9
 800c3f0:	f000 fee6 	bl	800d1c0 <_Bfree>
 800c3f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	601a      	str	r2, [r3, #0]
 800c3fc:	1e2b      	subs	r3, r5, #0
 800c3fe:	bfb9      	ittee	lt
 800c400:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c404:	9305      	strlt	r3, [sp, #20]
 800c406:	2300      	movge	r3, #0
 800c408:	6033      	strge	r3, [r6, #0]
 800c40a:	9f05      	ldr	r7, [sp, #20]
 800c40c:	4b9a      	ldr	r3, [pc, #616]	@ (800c678 <_dtoa_r+0x2d8>)
 800c40e:	bfbc      	itt	lt
 800c410:	2201      	movlt	r2, #1
 800c412:	6032      	strlt	r2, [r6, #0]
 800c414:	43bb      	bics	r3, r7
 800c416:	d112      	bne.n	800c43e <_dtoa_r+0x9e>
 800c418:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c41a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c41e:	6013      	str	r3, [r2, #0]
 800c420:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c424:	4323      	orrs	r3, r4
 800c426:	f000 855a 	beq.w	800cede <_dtoa_r+0xb3e>
 800c42a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c42c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c68c <_dtoa_r+0x2ec>
 800c430:	2b00      	cmp	r3, #0
 800c432:	f000 855c 	beq.w	800ceee <_dtoa_r+0xb4e>
 800c436:	f10a 0303 	add.w	r3, sl, #3
 800c43a:	f000 bd56 	b.w	800ceea <_dtoa_r+0xb4a>
 800c43e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c442:	2200      	movs	r2, #0
 800c444:	ec51 0b17 	vmov	r0, r1, d7
 800c448:	2300      	movs	r3, #0
 800c44a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c44e:	f7f4 fb3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c452:	4680      	mov	r8, r0
 800c454:	b158      	cbz	r0, 800c46e <_dtoa_r+0xce>
 800c456:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c458:	2301      	movs	r3, #1
 800c45a:	6013      	str	r3, [r2, #0]
 800c45c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c45e:	b113      	cbz	r3, 800c466 <_dtoa_r+0xc6>
 800c460:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c462:	4b86      	ldr	r3, [pc, #536]	@ (800c67c <_dtoa_r+0x2dc>)
 800c464:	6013      	str	r3, [r2, #0]
 800c466:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c690 <_dtoa_r+0x2f0>
 800c46a:	f000 bd40 	b.w	800ceee <_dtoa_r+0xb4e>
 800c46e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c472:	aa14      	add	r2, sp, #80	@ 0x50
 800c474:	a915      	add	r1, sp, #84	@ 0x54
 800c476:	4648      	mov	r0, r9
 800c478:	f001 f984 	bl	800d784 <__d2b>
 800c47c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c480:	9002      	str	r0, [sp, #8]
 800c482:	2e00      	cmp	r6, #0
 800c484:	d078      	beq.n	800c578 <_dtoa_r+0x1d8>
 800c486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c488:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c48c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c490:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c494:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c498:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c49c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	4b76      	ldr	r3, [pc, #472]	@ (800c680 <_dtoa_r+0x2e0>)
 800c4a6:	f7f3 feef 	bl	8000288 <__aeabi_dsub>
 800c4aa:	a36b      	add	r3, pc, #428	@ (adr r3, 800c658 <_dtoa_r+0x2b8>)
 800c4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b0:	f7f4 f8a2 	bl	80005f8 <__aeabi_dmul>
 800c4b4:	a36a      	add	r3, pc, #424	@ (adr r3, 800c660 <_dtoa_r+0x2c0>)
 800c4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ba:	f7f3 fee7 	bl	800028c <__adddf3>
 800c4be:	4604      	mov	r4, r0
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	460d      	mov	r5, r1
 800c4c4:	f7f4 f82e 	bl	8000524 <__aeabi_i2d>
 800c4c8:	a367      	add	r3, pc, #412	@ (adr r3, 800c668 <_dtoa_r+0x2c8>)
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f7f4 f893 	bl	80005f8 <__aeabi_dmul>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	4629      	mov	r1, r5
 800c4da:	f7f3 fed7 	bl	800028c <__adddf3>
 800c4de:	4604      	mov	r4, r0
 800c4e0:	460d      	mov	r5, r1
 800c4e2:	f7f4 fb39 	bl	8000b58 <__aeabi_d2iz>
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	4607      	mov	r7, r0
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	4629      	mov	r1, r5
 800c4f0:	f7f4 faf4 	bl	8000adc <__aeabi_dcmplt>
 800c4f4:	b140      	cbz	r0, 800c508 <_dtoa_r+0x168>
 800c4f6:	4638      	mov	r0, r7
 800c4f8:	f7f4 f814 	bl	8000524 <__aeabi_i2d>
 800c4fc:	4622      	mov	r2, r4
 800c4fe:	462b      	mov	r3, r5
 800c500:	f7f4 fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c504:	b900      	cbnz	r0, 800c508 <_dtoa_r+0x168>
 800c506:	3f01      	subs	r7, #1
 800c508:	2f16      	cmp	r7, #22
 800c50a:	d852      	bhi.n	800c5b2 <_dtoa_r+0x212>
 800c50c:	4b5d      	ldr	r3, [pc, #372]	@ (800c684 <_dtoa_r+0x2e4>)
 800c50e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c516:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c51a:	f7f4 fadf 	bl	8000adc <__aeabi_dcmplt>
 800c51e:	2800      	cmp	r0, #0
 800c520:	d049      	beq.n	800c5b6 <_dtoa_r+0x216>
 800c522:	3f01      	subs	r7, #1
 800c524:	2300      	movs	r3, #0
 800c526:	9310      	str	r3, [sp, #64]	@ 0x40
 800c528:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c52a:	1b9b      	subs	r3, r3, r6
 800c52c:	1e5a      	subs	r2, r3, #1
 800c52e:	bf45      	ittet	mi
 800c530:	f1c3 0301 	rsbmi	r3, r3, #1
 800c534:	9300      	strmi	r3, [sp, #0]
 800c536:	2300      	movpl	r3, #0
 800c538:	2300      	movmi	r3, #0
 800c53a:	9206      	str	r2, [sp, #24]
 800c53c:	bf54      	ite	pl
 800c53e:	9300      	strpl	r3, [sp, #0]
 800c540:	9306      	strmi	r3, [sp, #24]
 800c542:	2f00      	cmp	r7, #0
 800c544:	db39      	blt.n	800c5ba <_dtoa_r+0x21a>
 800c546:	9b06      	ldr	r3, [sp, #24]
 800c548:	970d      	str	r7, [sp, #52]	@ 0x34
 800c54a:	443b      	add	r3, r7
 800c54c:	9306      	str	r3, [sp, #24]
 800c54e:	2300      	movs	r3, #0
 800c550:	9308      	str	r3, [sp, #32]
 800c552:	9b07      	ldr	r3, [sp, #28]
 800c554:	2b09      	cmp	r3, #9
 800c556:	d863      	bhi.n	800c620 <_dtoa_r+0x280>
 800c558:	2b05      	cmp	r3, #5
 800c55a:	bfc4      	itt	gt
 800c55c:	3b04      	subgt	r3, #4
 800c55e:	9307      	strgt	r3, [sp, #28]
 800c560:	9b07      	ldr	r3, [sp, #28]
 800c562:	f1a3 0302 	sub.w	r3, r3, #2
 800c566:	bfcc      	ite	gt
 800c568:	2400      	movgt	r4, #0
 800c56a:	2401      	movle	r4, #1
 800c56c:	2b03      	cmp	r3, #3
 800c56e:	d863      	bhi.n	800c638 <_dtoa_r+0x298>
 800c570:	e8df f003 	tbb	[pc, r3]
 800c574:	2b375452 	.word	0x2b375452
 800c578:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c57c:	441e      	add	r6, r3
 800c57e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c582:	2b20      	cmp	r3, #32
 800c584:	bfc1      	itttt	gt
 800c586:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c58a:	409f      	lslgt	r7, r3
 800c58c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c590:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c594:	bfd6      	itet	le
 800c596:	f1c3 0320 	rsble	r3, r3, #32
 800c59a:	ea47 0003 	orrgt.w	r0, r7, r3
 800c59e:	fa04 f003 	lslle.w	r0, r4, r3
 800c5a2:	f7f3 ffaf 	bl	8000504 <__aeabi_ui2d>
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c5ac:	3e01      	subs	r6, #1
 800c5ae:	9212      	str	r2, [sp, #72]	@ 0x48
 800c5b0:	e776      	b.n	800c4a0 <_dtoa_r+0x100>
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e7b7      	b.n	800c526 <_dtoa_r+0x186>
 800c5b6:	9010      	str	r0, [sp, #64]	@ 0x40
 800c5b8:	e7b6      	b.n	800c528 <_dtoa_r+0x188>
 800c5ba:	9b00      	ldr	r3, [sp, #0]
 800c5bc:	1bdb      	subs	r3, r3, r7
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	427b      	negs	r3, r7
 800c5c2:	9308      	str	r3, [sp, #32]
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	930d      	str	r3, [sp, #52]	@ 0x34
 800c5c8:	e7c3      	b.n	800c552 <_dtoa_r+0x1b2>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5d0:	eb07 0b03 	add.w	fp, r7, r3
 800c5d4:	f10b 0301 	add.w	r3, fp, #1
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	9303      	str	r3, [sp, #12]
 800c5dc:	bfb8      	it	lt
 800c5de:	2301      	movlt	r3, #1
 800c5e0:	e006      	b.n	800c5f0 <_dtoa_r+0x250>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	dd28      	ble.n	800c63e <_dtoa_r+0x29e>
 800c5ec:	469b      	mov	fp, r3
 800c5ee:	9303      	str	r3, [sp, #12]
 800c5f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	2204      	movs	r2, #4
 800c5f8:	f102 0514 	add.w	r5, r2, #20
 800c5fc:	429d      	cmp	r5, r3
 800c5fe:	d926      	bls.n	800c64e <_dtoa_r+0x2ae>
 800c600:	6041      	str	r1, [r0, #4]
 800c602:	4648      	mov	r0, r9
 800c604:	f000 fd9c 	bl	800d140 <_Balloc>
 800c608:	4682      	mov	sl, r0
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d142      	bne.n	800c694 <_dtoa_r+0x2f4>
 800c60e:	4b1e      	ldr	r3, [pc, #120]	@ (800c688 <_dtoa_r+0x2e8>)
 800c610:	4602      	mov	r2, r0
 800c612:	f240 11af 	movw	r1, #431	@ 0x1af
 800c616:	e6da      	b.n	800c3ce <_dtoa_r+0x2e>
 800c618:	2300      	movs	r3, #0
 800c61a:	e7e3      	b.n	800c5e4 <_dtoa_r+0x244>
 800c61c:	2300      	movs	r3, #0
 800c61e:	e7d5      	b.n	800c5cc <_dtoa_r+0x22c>
 800c620:	2401      	movs	r4, #1
 800c622:	2300      	movs	r3, #0
 800c624:	9307      	str	r3, [sp, #28]
 800c626:	9409      	str	r4, [sp, #36]	@ 0x24
 800c628:	f04f 3bff 	mov.w	fp, #4294967295
 800c62c:	2200      	movs	r2, #0
 800c62e:	f8cd b00c 	str.w	fp, [sp, #12]
 800c632:	2312      	movs	r3, #18
 800c634:	920c      	str	r2, [sp, #48]	@ 0x30
 800c636:	e7db      	b.n	800c5f0 <_dtoa_r+0x250>
 800c638:	2301      	movs	r3, #1
 800c63a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c63c:	e7f4      	b.n	800c628 <_dtoa_r+0x288>
 800c63e:	f04f 0b01 	mov.w	fp, #1
 800c642:	f8cd b00c 	str.w	fp, [sp, #12]
 800c646:	465b      	mov	r3, fp
 800c648:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c64c:	e7d0      	b.n	800c5f0 <_dtoa_r+0x250>
 800c64e:	3101      	adds	r1, #1
 800c650:	0052      	lsls	r2, r2, #1
 800c652:	e7d1      	b.n	800c5f8 <_dtoa_r+0x258>
 800c654:	f3af 8000 	nop.w
 800c658:	636f4361 	.word	0x636f4361
 800c65c:	3fd287a7 	.word	0x3fd287a7
 800c660:	8b60c8b3 	.word	0x8b60c8b3
 800c664:	3fc68a28 	.word	0x3fc68a28
 800c668:	509f79fb 	.word	0x509f79fb
 800c66c:	3fd34413 	.word	0x3fd34413
 800c670:	0800fd65 	.word	0x0800fd65
 800c674:	0800fd7c 	.word	0x0800fd7c
 800c678:	7ff00000 	.word	0x7ff00000
 800c67c:	0800fd35 	.word	0x0800fd35
 800c680:	3ff80000 	.word	0x3ff80000
 800c684:	0800fed0 	.word	0x0800fed0
 800c688:	0800fdd4 	.word	0x0800fdd4
 800c68c:	0800fd61 	.word	0x0800fd61
 800c690:	0800fd34 	.word	0x0800fd34
 800c694:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c698:	6018      	str	r0, [r3, #0]
 800c69a:	9b03      	ldr	r3, [sp, #12]
 800c69c:	2b0e      	cmp	r3, #14
 800c69e:	f200 80a1 	bhi.w	800c7e4 <_dtoa_r+0x444>
 800c6a2:	2c00      	cmp	r4, #0
 800c6a4:	f000 809e 	beq.w	800c7e4 <_dtoa_r+0x444>
 800c6a8:	2f00      	cmp	r7, #0
 800c6aa:	dd33      	ble.n	800c714 <_dtoa_r+0x374>
 800c6ac:	4b9c      	ldr	r3, [pc, #624]	@ (800c920 <_dtoa_r+0x580>)
 800c6ae:	f007 020f 	and.w	r2, r7, #15
 800c6b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6b6:	ed93 7b00 	vldr	d7, [r3]
 800c6ba:	05f8      	lsls	r0, r7, #23
 800c6bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c6c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c6c4:	d516      	bpl.n	800c6f4 <_dtoa_r+0x354>
 800c6c6:	4b97      	ldr	r3, [pc, #604]	@ (800c924 <_dtoa_r+0x584>)
 800c6c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c6cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6d0:	f7f4 f8bc 	bl	800084c <__aeabi_ddiv>
 800c6d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6d8:	f004 040f 	and.w	r4, r4, #15
 800c6dc:	2603      	movs	r6, #3
 800c6de:	4d91      	ldr	r5, [pc, #580]	@ (800c924 <_dtoa_r+0x584>)
 800c6e0:	b954      	cbnz	r4, 800c6f8 <_dtoa_r+0x358>
 800c6e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c6e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6ea:	f7f4 f8af 	bl	800084c <__aeabi_ddiv>
 800c6ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6f2:	e028      	b.n	800c746 <_dtoa_r+0x3a6>
 800c6f4:	2602      	movs	r6, #2
 800c6f6:	e7f2      	b.n	800c6de <_dtoa_r+0x33e>
 800c6f8:	07e1      	lsls	r1, r4, #31
 800c6fa:	d508      	bpl.n	800c70e <_dtoa_r+0x36e>
 800c6fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c700:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c704:	f7f3 ff78 	bl	80005f8 <__aeabi_dmul>
 800c708:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c70c:	3601      	adds	r6, #1
 800c70e:	1064      	asrs	r4, r4, #1
 800c710:	3508      	adds	r5, #8
 800c712:	e7e5      	b.n	800c6e0 <_dtoa_r+0x340>
 800c714:	f000 80af 	beq.w	800c876 <_dtoa_r+0x4d6>
 800c718:	427c      	negs	r4, r7
 800c71a:	4b81      	ldr	r3, [pc, #516]	@ (800c920 <_dtoa_r+0x580>)
 800c71c:	4d81      	ldr	r5, [pc, #516]	@ (800c924 <_dtoa_r+0x584>)
 800c71e:	f004 020f 	and.w	r2, r4, #15
 800c722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c72e:	f7f3 ff63 	bl	80005f8 <__aeabi_dmul>
 800c732:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c736:	1124      	asrs	r4, r4, #4
 800c738:	2300      	movs	r3, #0
 800c73a:	2602      	movs	r6, #2
 800c73c:	2c00      	cmp	r4, #0
 800c73e:	f040 808f 	bne.w	800c860 <_dtoa_r+0x4c0>
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1d3      	bne.n	800c6ee <_dtoa_r+0x34e>
 800c746:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c748:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f000 8094 	beq.w	800c87a <_dtoa_r+0x4da>
 800c752:	4b75      	ldr	r3, [pc, #468]	@ (800c928 <_dtoa_r+0x588>)
 800c754:	2200      	movs	r2, #0
 800c756:	4620      	mov	r0, r4
 800c758:	4629      	mov	r1, r5
 800c75a:	f7f4 f9bf 	bl	8000adc <__aeabi_dcmplt>
 800c75e:	2800      	cmp	r0, #0
 800c760:	f000 808b 	beq.w	800c87a <_dtoa_r+0x4da>
 800c764:	9b03      	ldr	r3, [sp, #12]
 800c766:	2b00      	cmp	r3, #0
 800c768:	f000 8087 	beq.w	800c87a <_dtoa_r+0x4da>
 800c76c:	f1bb 0f00 	cmp.w	fp, #0
 800c770:	dd34      	ble.n	800c7dc <_dtoa_r+0x43c>
 800c772:	4620      	mov	r0, r4
 800c774:	4b6d      	ldr	r3, [pc, #436]	@ (800c92c <_dtoa_r+0x58c>)
 800c776:	2200      	movs	r2, #0
 800c778:	4629      	mov	r1, r5
 800c77a:	f7f3 ff3d 	bl	80005f8 <__aeabi_dmul>
 800c77e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c782:	f107 38ff 	add.w	r8, r7, #4294967295
 800c786:	3601      	adds	r6, #1
 800c788:	465c      	mov	r4, fp
 800c78a:	4630      	mov	r0, r6
 800c78c:	f7f3 feca 	bl	8000524 <__aeabi_i2d>
 800c790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c794:	f7f3 ff30 	bl	80005f8 <__aeabi_dmul>
 800c798:	4b65      	ldr	r3, [pc, #404]	@ (800c930 <_dtoa_r+0x590>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	f7f3 fd76 	bl	800028c <__adddf3>
 800c7a0:	4605      	mov	r5, r0
 800c7a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c7a6:	2c00      	cmp	r4, #0
 800c7a8:	d16a      	bne.n	800c880 <_dtoa_r+0x4e0>
 800c7aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7ae:	4b61      	ldr	r3, [pc, #388]	@ (800c934 <_dtoa_r+0x594>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f7f3 fd69 	bl	8000288 <__aeabi_dsub>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c7be:	462a      	mov	r2, r5
 800c7c0:	4633      	mov	r3, r6
 800c7c2:	f7f4 f9a9 	bl	8000b18 <__aeabi_dcmpgt>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	f040 8298 	bne.w	800ccfc <_dtoa_r+0x95c>
 800c7cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7d0:	462a      	mov	r2, r5
 800c7d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c7d6:	f7f4 f981 	bl	8000adc <__aeabi_dcmplt>
 800c7da:	bb38      	cbnz	r0, 800c82c <_dtoa_r+0x48c>
 800c7dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c7e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c7e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f2c0 8157 	blt.w	800ca9a <_dtoa_r+0x6fa>
 800c7ec:	2f0e      	cmp	r7, #14
 800c7ee:	f300 8154 	bgt.w	800ca9a <_dtoa_r+0x6fa>
 800c7f2:	4b4b      	ldr	r3, [pc, #300]	@ (800c920 <_dtoa_r+0x580>)
 800c7f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c7f8:	ed93 7b00 	vldr	d7, [r3]
 800c7fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	ed8d 7b00 	vstr	d7, [sp]
 800c804:	f280 80e5 	bge.w	800c9d2 <_dtoa_r+0x632>
 800c808:	9b03      	ldr	r3, [sp, #12]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f300 80e1 	bgt.w	800c9d2 <_dtoa_r+0x632>
 800c810:	d10c      	bne.n	800c82c <_dtoa_r+0x48c>
 800c812:	4b48      	ldr	r3, [pc, #288]	@ (800c934 <_dtoa_r+0x594>)
 800c814:	2200      	movs	r2, #0
 800c816:	ec51 0b17 	vmov	r0, r1, d7
 800c81a:	f7f3 feed 	bl	80005f8 <__aeabi_dmul>
 800c81e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c822:	f7f4 f96f 	bl	8000b04 <__aeabi_dcmpge>
 800c826:	2800      	cmp	r0, #0
 800c828:	f000 8266 	beq.w	800ccf8 <_dtoa_r+0x958>
 800c82c:	2400      	movs	r4, #0
 800c82e:	4625      	mov	r5, r4
 800c830:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c832:	4656      	mov	r6, sl
 800c834:	ea6f 0803 	mvn.w	r8, r3
 800c838:	2700      	movs	r7, #0
 800c83a:	4621      	mov	r1, r4
 800c83c:	4648      	mov	r0, r9
 800c83e:	f000 fcbf 	bl	800d1c0 <_Bfree>
 800c842:	2d00      	cmp	r5, #0
 800c844:	f000 80bd 	beq.w	800c9c2 <_dtoa_r+0x622>
 800c848:	b12f      	cbz	r7, 800c856 <_dtoa_r+0x4b6>
 800c84a:	42af      	cmp	r7, r5
 800c84c:	d003      	beq.n	800c856 <_dtoa_r+0x4b6>
 800c84e:	4639      	mov	r1, r7
 800c850:	4648      	mov	r0, r9
 800c852:	f000 fcb5 	bl	800d1c0 <_Bfree>
 800c856:	4629      	mov	r1, r5
 800c858:	4648      	mov	r0, r9
 800c85a:	f000 fcb1 	bl	800d1c0 <_Bfree>
 800c85e:	e0b0      	b.n	800c9c2 <_dtoa_r+0x622>
 800c860:	07e2      	lsls	r2, r4, #31
 800c862:	d505      	bpl.n	800c870 <_dtoa_r+0x4d0>
 800c864:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c868:	f7f3 fec6 	bl	80005f8 <__aeabi_dmul>
 800c86c:	3601      	adds	r6, #1
 800c86e:	2301      	movs	r3, #1
 800c870:	1064      	asrs	r4, r4, #1
 800c872:	3508      	adds	r5, #8
 800c874:	e762      	b.n	800c73c <_dtoa_r+0x39c>
 800c876:	2602      	movs	r6, #2
 800c878:	e765      	b.n	800c746 <_dtoa_r+0x3a6>
 800c87a:	9c03      	ldr	r4, [sp, #12]
 800c87c:	46b8      	mov	r8, r7
 800c87e:	e784      	b.n	800c78a <_dtoa_r+0x3ea>
 800c880:	4b27      	ldr	r3, [pc, #156]	@ (800c920 <_dtoa_r+0x580>)
 800c882:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c884:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c888:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c88c:	4454      	add	r4, sl
 800c88e:	2900      	cmp	r1, #0
 800c890:	d054      	beq.n	800c93c <_dtoa_r+0x59c>
 800c892:	4929      	ldr	r1, [pc, #164]	@ (800c938 <_dtoa_r+0x598>)
 800c894:	2000      	movs	r0, #0
 800c896:	f7f3 ffd9 	bl	800084c <__aeabi_ddiv>
 800c89a:	4633      	mov	r3, r6
 800c89c:	462a      	mov	r2, r5
 800c89e:	f7f3 fcf3 	bl	8000288 <__aeabi_dsub>
 800c8a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c8a6:	4656      	mov	r6, sl
 800c8a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8ac:	f7f4 f954 	bl	8000b58 <__aeabi_d2iz>
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	f7f3 fe37 	bl	8000524 <__aeabi_i2d>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8be:	f7f3 fce3 	bl	8000288 <__aeabi_dsub>
 800c8c2:	3530      	adds	r5, #48	@ 0x30
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c8cc:	f806 5b01 	strb.w	r5, [r6], #1
 800c8d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c8d4:	f7f4 f902 	bl	8000adc <__aeabi_dcmplt>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d172      	bne.n	800c9c2 <_dtoa_r+0x622>
 800c8dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8e0:	4911      	ldr	r1, [pc, #68]	@ (800c928 <_dtoa_r+0x588>)
 800c8e2:	2000      	movs	r0, #0
 800c8e4:	f7f3 fcd0 	bl	8000288 <__aeabi_dsub>
 800c8e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c8ec:	f7f4 f8f6 	bl	8000adc <__aeabi_dcmplt>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	f040 80b4 	bne.w	800ca5e <_dtoa_r+0x6be>
 800c8f6:	42a6      	cmp	r6, r4
 800c8f8:	f43f af70 	beq.w	800c7dc <_dtoa_r+0x43c>
 800c8fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c900:	4b0a      	ldr	r3, [pc, #40]	@ (800c92c <_dtoa_r+0x58c>)
 800c902:	2200      	movs	r2, #0
 800c904:	f7f3 fe78 	bl	80005f8 <__aeabi_dmul>
 800c908:	4b08      	ldr	r3, [pc, #32]	@ (800c92c <_dtoa_r+0x58c>)
 800c90a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c90e:	2200      	movs	r2, #0
 800c910:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c914:	f7f3 fe70 	bl	80005f8 <__aeabi_dmul>
 800c918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c91c:	e7c4      	b.n	800c8a8 <_dtoa_r+0x508>
 800c91e:	bf00      	nop
 800c920:	0800fed0 	.word	0x0800fed0
 800c924:	0800fea8 	.word	0x0800fea8
 800c928:	3ff00000 	.word	0x3ff00000
 800c92c:	40240000 	.word	0x40240000
 800c930:	401c0000 	.word	0x401c0000
 800c934:	40140000 	.word	0x40140000
 800c938:	3fe00000 	.word	0x3fe00000
 800c93c:	4631      	mov	r1, r6
 800c93e:	4628      	mov	r0, r5
 800c940:	f7f3 fe5a 	bl	80005f8 <__aeabi_dmul>
 800c944:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c948:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c94a:	4656      	mov	r6, sl
 800c94c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c950:	f7f4 f902 	bl	8000b58 <__aeabi_d2iz>
 800c954:	4605      	mov	r5, r0
 800c956:	f7f3 fde5 	bl	8000524 <__aeabi_i2d>
 800c95a:	4602      	mov	r2, r0
 800c95c:	460b      	mov	r3, r1
 800c95e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c962:	f7f3 fc91 	bl	8000288 <__aeabi_dsub>
 800c966:	3530      	adds	r5, #48	@ 0x30
 800c968:	f806 5b01 	strb.w	r5, [r6], #1
 800c96c:	4602      	mov	r2, r0
 800c96e:	460b      	mov	r3, r1
 800c970:	42a6      	cmp	r6, r4
 800c972:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c976:	f04f 0200 	mov.w	r2, #0
 800c97a:	d124      	bne.n	800c9c6 <_dtoa_r+0x626>
 800c97c:	4baf      	ldr	r3, [pc, #700]	@ (800cc3c <_dtoa_r+0x89c>)
 800c97e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c982:	f7f3 fc83 	bl	800028c <__adddf3>
 800c986:	4602      	mov	r2, r0
 800c988:	460b      	mov	r3, r1
 800c98a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c98e:	f7f4 f8c3 	bl	8000b18 <__aeabi_dcmpgt>
 800c992:	2800      	cmp	r0, #0
 800c994:	d163      	bne.n	800ca5e <_dtoa_r+0x6be>
 800c996:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c99a:	49a8      	ldr	r1, [pc, #672]	@ (800cc3c <_dtoa_r+0x89c>)
 800c99c:	2000      	movs	r0, #0
 800c99e:	f7f3 fc73 	bl	8000288 <__aeabi_dsub>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9aa:	f7f4 f897 	bl	8000adc <__aeabi_dcmplt>
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f43f af14 	beq.w	800c7dc <_dtoa_r+0x43c>
 800c9b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c9b6:	1e73      	subs	r3, r6, #1
 800c9b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c9ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c9be:	2b30      	cmp	r3, #48	@ 0x30
 800c9c0:	d0f8      	beq.n	800c9b4 <_dtoa_r+0x614>
 800c9c2:	4647      	mov	r7, r8
 800c9c4:	e03b      	b.n	800ca3e <_dtoa_r+0x69e>
 800c9c6:	4b9e      	ldr	r3, [pc, #632]	@ (800cc40 <_dtoa_r+0x8a0>)
 800c9c8:	f7f3 fe16 	bl	80005f8 <__aeabi_dmul>
 800c9cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9d0:	e7bc      	b.n	800c94c <_dtoa_r+0x5ac>
 800c9d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c9d6:	4656      	mov	r6, sl
 800c9d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9dc:	4620      	mov	r0, r4
 800c9de:	4629      	mov	r1, r5
 800c9e0:	f7f3 ff34 	bl	800084c <__aeabi_ddiv>
 800c9e4:	f7f4 f8b8 	bl	8000b58 <__aeabi_d2iz>
 800c9e8:	4680      	mov	r8, r0
 800c9ea:	f7f3 fd9b 	bl	8000524 <__aeabi_i2d>
 800c9ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9f2:	f7f3 fe01 	bl	80005f8 <__aeabi_dmul>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	4629      	mov	r1, r5
 800c9fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ca02:	f7f3 fc41 	bl	8000288 <__aeabi_dsub>
 800ca06:	f806 4b01 	strb.w	r4, [r6], #1
 800ca0a:	9d03      	ldr	r5, [sp, #12]
 800ca0c:	eba6 040a 	sub.w	r4, r6, sl
 800ca10:	42a5      	cmp	r5, r4
 800ca12:	4602      	mov	r2, r0
 800ca14:	460b      	mov	r3, r1
 800ca16:	d133      	bne.n	800ca80 <_dtoa_r+0x6e0>
 800ca18:	f7f3 fc38 	bl	800028c <__adddf3>
 800ca1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca20:	4604      	mov	r4, r0
 800ca22:	460d      	mov	r5, r1
 800ca24:	f7f4 f878 	bl	8000b18 <__aeabi_dcmpgt>
 800ca28:	b9c0      	cbnz	r0, 800ca5c <_dtoa_r+0x6bc>
 800ca2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca2e:	4620      	mov	r0, r4
 800ca30:	4629      	mov	r1, r5
 800ca32:	f7f4 f849 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca36:	b110      	cbz	r0, 800ca3e <_dtoa_r+0x69e>
 800ca38:	f018 0f01 	tst.w	r8, #1
 800ca3c:	d10e      	bne.n	800ca5c <_dtoa_r+0x6bc>
 800ca3e:	9902      	ldr	r1, [sp, #8]
 800ca40:	4648      	mov	r0, r9
 800ca42:	f000 fbbd 	bl	800d1c0 <_Bfree>
 800ca46:	2300      	movs	r3, #0
 800ca48:	7033      	strb	r3, [r6, #0]
 800ca4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ca4c:	3701      	adds	r7, #1
 800ca4e:	601f      	str	r7, [r3, #0]
 800ca50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f000 824b 	beq.w	800ceee <_dtoa_r+0xb4e>
 800ca58:	601e      	str	r6, [r3, #0]
 800ca5a:	e248      	b.n	800ceee <_dtoa_r+0xb4e>
 800ca5c:	46b8      	mov	r8, r7
 800ca5e:	4633      	mov	r3, r6
 800ca60:	461e      	mov	r6, r3
 800ca62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca66:	2a39      	cmp	r2, #57	@ 0x39
 800ca68:	d106      	bne.n	800ca78 <_dtoa_r+0x6d8>
 800ca6a:	459a      	cmp	sl, r3
 800ca6c:	d1f8      	bne.n	800ca60 <_dtoa_r+0x6c0>
 800ca6e:	2230      	movs	r2, #48	@ 0x30
 800ca70:	f108 0801 	add.w	r8, r8, #1
 800ca74:	f88a 2000 	strb.w	r2, [sl]
 800ca78:	781a      	ldrb	r2, [r3, #0]
 800ca7a:	3201      	adds	r2, #1
 800ca7c:	701a      	strb	r2, [r3, #0]
 800ca7e:	e7a0      	b.n	800c9c2 <_dtoa_r+0x622>
 800ca80:	4b6f      	ldr	r3, [pc, #444]	@ (800cc40 <_dtoa_r+0x8a0>)
 800ca82:	2200      	movs	r2, #0
 800ca84:	f7f3 fdb8 	bl	80005f8 <__aeabi_dmul>
 800ca88:	2200      	movs	r2, #0
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	4604      	mov	r4, r0
 800ca8e:	460d      	mov	r5, r1
 800ca90:	f7f4 f81a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d09f      	beq.n	800c9d8 <_dtoa_r+0x638>
 800ca98:	e7d1      	b.n	800ca3e <_dtoa_r+0x69e>
 800ca9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca9c:	2a00      	cmp	r2, #0
 800ca9e:	f000 80ea 	beq.w	800cc76 <_dtoa_r+0x8d6>
 800caa2:	9a07      	ldr	r2, [sp, #28]
 800caa4:	2a01      	cmp	r2, #1
 800caa6:	f300 80cd 	bgt.w	800cc44 <_dtoa_r+0x8a4>
 800caaa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800caac:	2a00      	cmp	r2, #0
 800caae:	f000 80c1 	beq.w	800cc34 <_dtoa_r+0x894>
 800cab2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cab6:	9c08      	ldr	r4, [sp, #32]
 800cab8:	9e00      	ldr	r6, [sp, #0]
 800caba:	9a00      	ldr	r2, [sp, #0]
 800cabc:	441a      	add	r2, r3
 800cabe:	9200      	str	r2, [sp, #0]
 800cac0:	9a06      	ldr	r2, [sp, #24]
 800cac2:	2101      	movs	r1, #1
 800cac4:	441a      	add	r2, r3
 800cac6:	4648      	mov	r0, r9
 800cac8:	9206      	str	r2, [sp, #24]
 800caca:	f000 fc2d 	bl	800d328 <__i2b>
 800cace:	4605      	mov	r5, r0
 800cad0:	b166      	cbz	r6, 800caec <_dtoa_r+0x74c>
 800cad2:	9b06      	ldr	r3, [sp, #24]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	dd09      	ble.n	800caec <_dtoa_r+0x74c>
 800cad8:	42b3      	cmp	r3, r6
 800cada:	9a00      	ldr	r2, [sp, #0]
 800cadc:	bfa8      	it	ge
 800cade:	4633      	movge	r3, r6
 800cae0:	1ad2      	subs	r2, r2, r3
 800cae2:	9200      	str	r2, [sp, #0]
 800cae4:	9a06      	ldr	r2, [sp, #24]
 800cae6:	1af6      	subs	r6, r6, r3
 800cae8:	1ad3      	subs	r3, r2, r3
 800caea:	9306      	str	r3, [sp, #24]
 800caec:	9b08      	ldr	r3, [sp, #32]
 800caee:	b30b      	cbz	r3, 800cb34 <_dtoa_r+0x794>
 800caf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	f000 80c6 	beq.w	800cc84 <_dtoa_r+0x8e4>
 800caf8:	2c00      	cmp	r4, #0
 800cafa:	f000 80c0 	beq.w	800cc7e <_dtoa_r+0x8de>
 800cafe:	4629      	mov	r1, r5
 800cb00:	4622      	mov	r2, r4
 800cb02:	4648      	mov	r0, r9
 800cb04:	f000 fcc8 	bl	800d498 <__pow5mult>
 800cb08:	9a02      	ldr	r2, [sp, #8]
 800cb0a:	4601      	mov	r1, r0
 800cb0c:	4605      	mov	r5, r0
 800cb0e:	4648      	mov	r0, r9
 800cb10:	f000 fc20 	bl	800d354 <__multiply>
 800cb14:	9902      	ldr	r1, [sp, #8]
 800cb16:	4680      	mov	r8, r0
 800cb18:	4648      	mov	r0, r9
 800cb1a:	f000 fb51 	bl	800d1c0 <_Bfree>
 800cb1e:	9b08      	ldr	r3, [sp, #32]
 800cb20:	1b1b      	subs	r3, r3, r4
 800cb22:	9308      	str	r3, [sp, #32]
 800cb24:	f000 80b1 	beq.w	800cc8a <_dtoa_r+0x8ea>
 800cb28:	9a08      	ldr	r2, [sp, #32]
 800cb2a:	4641      	mov	r1, r8
 800cb2c:	4648      	mov	r0, r9
 800cb2e:	f000 fcb3 	bl	800d498 <__pow5mult>
 800cb32:	9002      	str	r0, [sp, #8]
 800cb34:	2101      	movs	r1, #1
 800cb36:	4648      	mov	r0, r9
 800cb38:	f000 fbf6 	bl	800d328 <__i2b>
 800cb3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb3e:	4604      	mov	r4, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f000 81d8 	beq.w	800cef6 <_dtoa_r+0xb56>
 800cb46:	461a      	mov	r2, r3
 800cb48:	4601      	mov	r1, r0
 800cb4a:	4648      	mov	r0, r9
 800cb4c:	f000 fca4 	bl	800d498 <__pow5mult>
 800cb50:	9b07      	ldr	r3, [sp, #28]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	4604      	mov	r4, r0
 800cb56:	f300 809f 	bgt.w	800cc98 <_dtoa_r+0x8f8>
 800cb5a:	9b04      	ldr	r3, [sp, #16]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	f040 8097 	bne.w	800cc90 <_dtoa_r+0x8f0>
 800cb62:	9b05      	ldr	r3, [sp, #20]
 800cb64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f040 8093 	bne.w	800cc94 <_dtoa_r+0x8f4>
 800cb6e:	9b05      	ldr	r3, [sp, #20]
 800cb70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cb74:	0d1b      	lsrs	r3, r3, #20
 800cb76:	051b      	lsls	r3, r3, #20
 800cb78:	b133      	cbz	r3, 800cb88 <_dtoa_r+0x7e8>
 800cb7a:	9b00      	ldr	r3, [sp, #0]
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	9b06      	ldr	r3, [sp, #24]
 800cb82:	3301      	adds	r3, #1
 800cb84:	9306      	str	r3, [sp, #24]
 800cb86:	2301      	movs	r3, #1
 800cb88:	9308      	str	r3, [sp, #32]
 800cb8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	f000 81b8 	beq.w	800cf02 <_dtoa_r+0xb62>
 800cb92:	6923      	ldr	r3, [r4, #16]
 800cb94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb98:	6918      	ldr	r0, [r3, #16]
 800cb9a:	f000 fb79 	bl	800d290 <__hi0bits>
 800cb9e:	f1c0 0020 	rsb	r0, r0, #32
 800cba2:	9b06      	ldr	r3, [sp, #24]
 800cba4:	4418      	add	r0, r3
 800cba6:	f010 001f 	ands.w	r0, r0, #31
 800cbaa:	f000 8082 	beq.w	800ccb2 <_dtoa_r+0x912>
 800cbae:	f1c0 0320 	rsb	r3, r0, #32
 800cbb2:	2b04      	cmp	r3, #4
 800cbb4:	dd73      	ble.n	800cc9e <_dtoa_r+0x8fe>
 800cbb6:	9b00      	ldr	r3, [sp, #0]
 800cbb8:	f1c0 001c 	rsb	r0, r0, #28
 800cbbc:	4403      	add	r3, r0
 800cbbe:	9300      	str	r3, [sp, #0]
 800cbc0:	9b06      	ldr	r3, [sp, #24]
 800cbc2:	4403      	add	r3, r0
 800cbc4:	4406      	add	r6, r0
 800cbc6:	9306      	str	r3, [sp, #24]
 800cbc8:	9b00      	ldr	r3, [sp, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	dd05      	ble.n	800cbda <_dtoa_r+0x83a>
 800cbce:	9902      	ldr	r1, [sp, #8]
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	4648      	mov	r0, r9
 800cbd4:	f000 fcba 	bl	800d54c <__lshift>
 800cbd8:	9002      	str	r0, [sp, #8]
 800cbda:	9b06      	ldr	r3, [sp, #24]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	dd05      	ble.n	800cbec <_dtoa_r+0x84c>
 800cbe0:	4621      	mov	r1, r4
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	4648      	mov	r0, r9
 800cbe6:	f000 fcb1 	bl	800d54c <__lshift>
 800cbea:	4604      	mov	r4, r0
 800cbec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d061      	beq.n	800ccb6 <_dtoa_r+0x916>
 800cbf2:	9802      	ldr	r0, [sp, #8]
 800cbf4:	4621      	mov	r1, r4
 800cbf6:	f000 fd15 	bl	800d624 <__mcmp>
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	da5b      	bge.n	800ccb6 <_dtoa_r+0x916>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	9902      	ldr	r1, [sp, #8]
 800cc02:	220a      	movs	r2, #10
 800cc04:	4648      	mov	r0, r9
 800cc06:	f000 fafd 	bl	800d204 <__multadd>
 800cc0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc0c:	9002      	str	r0, [sp, #8]
 800cc0e:	f107 38ff 	add.w	r8, r7, #4294967295
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f000 8177 	beq.w	800cf06 <_dtoa_r+0xb66>
 800cc18:	4629      	mov	r1, r5
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	220a      	movs	r2, #10
 800cc1e:	4648      	mov	r0, r9
 800cc20:	f000 faf0 	bl	800d204 <__multadd>
 800cc24:	f1bb 0f00 	cmp.w	fp, #0
 800cc28:	4605      	mov	r5, r0
 800cc2a:	dc6f      	bgt.n	800cd0c <_dtoa_r+0x96c>
 800cc2c:	9b07      	ldr	r3, [sp, #28]
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	dc49      	bgt.n	800ccc6 <_dtoa_r+0x926>
 800cc32:	e06b      	b.n	800cd0c <_dtoa_r+0x96c>
 800cc34:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cc36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cc3a:	e73c      	b.n	800cab6 <_dtoa_r+0x716>
 800cc3c:	3fe00000 	.word	0x3fe00000
 800cc40:	40240000 	.word	0x40240000
 800cc44:	9b03      	ldr	r3, [sp, #12]
 800cc46:	1e5c      	subs	r4, r3, #1
 800cc48:	9b08      	ldr	r3, [sp, #32]
 800cc4a:	42a3      	cmp	r3, r4
 800cc4c:	db09      	blt.n	800cc62 <_dtoa_r+0x8c2>
 800cc4e:	1b1c      	subs	r4, r3, r4
 800cc50:	9b03      	ldr	r3, [sp, #12]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	f6bf af30 	bge.w	800cab8 <_dtoa_r+0x718>
 800cc58:	9b00      	ldr	r3, [sp, #0]
 800cc5a:	9a03      	ldr	r2, [sp, #12]
 800cc5c:	1a9e      	subs	r6, r3, r2
 800cc5e:	2300      	movs	r3, #0
 800cc60:	e72b      	b.n	800caba <_dtoa_r+0x71a>
 800cc62:	9b08      	ldr	r3, [sp, #32]
 800cc64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cc66:	9408      	str	r4, [sp, #32]
 800cc68:	1ae3      	subs	r3, r4, r3
 800cc6a:	441a      	add	r2, r3
 800cc6c:	9e00      	ldr	r6, [sp, #0]
 800cc6e:	9b03      	ldr	r3, [sp, #12]
 800cc70:	920d      	str	r2, [sp, #52]	@ 0x34
 800cc72:	2400      	movs	r4, #0
 800cc74:	e721      	b.n	800caba <_dtoa_r+0x71a>
 800cc76:	9c08      	ldr	r4, [sp, #32]
 800cc78:	9e00      	ldr	r6, [sp, #0]
 800cc7a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cc7c:	e728      	b.n	800cad0 <_dtoa_r+0x730>
 800cc7e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cc82:	e751      	b.n	800cb28 <_dtoa_r+0x788>
 800cc84:	9a08      	ldr	r2, [sp, #32]
 800cc86:	9902      	ldr	r1, [sp, #8]
 800cc88:	e750      	b.n	800cb2c <_dtoa_r+0x78c>
 800cc8a:	f8cd 8008 	str.w	r8, [sp, #8]
 800cc8e:	e751      	b.n	800cb34 <_dtoa_r+0x794>
 800cc90:	2300      	movs	r3, #0
 800cc92:	e779      	b.n	800cb88 <_dtoa_r+0x7e8>
 800cc94:	9b04      	ldr	r3, [sp, #16]
 800cc96:	e777      	b.n	800cb88 <_dtoa_r+0x7e8>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	9308      	str	r3, [sp, #32]
 800cc9c:	e779      	b.n	800cb92 <_dtoa_r+0x7f2>
 800cc9e:	d093      	beq.n	800cbc8 <_dtoa_r+0x828>
 800cca0:	9a00      	ldr	r2, [sp, #0]
 800cca2:	331c      	adds	r3, #28
 800cca4:	441a      	add	r2, r3
 800cca6:	9200      	str	r2, [sp, #0]
 800cca8:	9a06      	ldr	r2, [sp, #24]
 800ccaa:	441a      	add	r2, r3
 800ccac:	441e      	add	r6, r3
 800ccae:	9206      	str	r2, [sp, #24]
 800ccb0:	e78a      	b.n	800cbc8 <_dtoa_r+0x828>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	e7f4      	b.n	800cca0 <_dtoa_r+0x900>
 800ccb6:	9b03      	ldr	r3, [sp, #12]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	46b8      	mov	r8, r7
 800ccbc:	dc20      	bgt.n	800cd00 <_dtoa_r+0x960>
 800ccbe:	469b      	mov	fp, r3
 800ccc0:	9b07      	ldr	r3, [sp, #28]
 800ccc2:	2b02      	cmp	r3, #2
 800ccc4:	dd1e      	ble.n	800cd04 <_dtoa_r+0x964>
 800ccc6:	f1bb 0f00 	cmp.w	fp, #0
 800ccca:	f47f adb1 	bne.w	800c830 <_dtoa_r+0x490>
 800ccce:	4621      	mov	r1, r4
 800ccd0:	465b      	mov	r3, fp
 800ccd2:	2205      	movs	r2, #5
 800ccd4:	4648      	mov	r0, r9
 800ccd6:	f000 fa95 	bl	800d204 <__multadd>
 800ccda:	4601      	mov	r1, r0
 800ccdc:	4604      	mov	r4, r0
 800ccde:	9802      	ldr	r0, [sp, #8]
 800cce0:	f000 fca0 	bl	800d624 <__mcmp>
 800cce4:	2800      	cmp	r0, #0
 800cce6:	f77f ada3 	ble.w	800c830 <_dtoa_r+0x490>
 800ccea:	4656      	mov	r6, sl
 800ccec:	2331      	movs	r3, #49	@ 0x31
 800ccee:	f806 3b01 	strb.w	r3, [r6], #1
 800ccf2:	f108 0801 	add.w	r8, r8, #1
 800ccf6:	e59f      	b.n	800c838 <_dtoa_r+0x498>
 800ccf8:	9c03      	ldr	r4, [sp, #12]
 800ccfa:	46b8      	mov	r8, r7
 800ccfc:	4625      	mov	r5, r4
 800ccfe:	e7f4      	b.n	800ccea <_dtoa_r+0x94a>
 800cd00:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cd04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	f000 8101 	beq.w	800cf0e <_dtoa_r+0xb6e>
 800cd0c:	2e00      	cmp	r6, #0
 800cd0e:	dd05      	ble.n	800cd1c <_dtoa_r+0x97c>
 800cd10:	4629      	mov	r1, r5
 800cd12:	4632      	mov	r2, r6
 800cd14:	4648      	mov	r0, r9
 800cd16:	f000 fc19 	bl	800d54c <__lshift>
 800cd1a:	4605      	mov	r5, r0
 800cd1c:	9b08      	ldr	r3, [sp, #32]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d05c      	beq.n	800cddc <_dtoa_r+0xa3c>
 800cd22:	6869      	ldr	r1, [r5, #4]
 800cd24:	4648      	mov	r0, r9
 800cd26:	f000 fa0b 	bl	800d140 <_Balloc>
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	b928      	cbnz	r0, 800cd3a <_dtoa_r+0x99a>
 800cd2e:	4b82      	ldr	r3, [pc, #520]	@ (800cf38 <_dtoa_r+0xb98>)
 800cd30:	4602      	mov	r2, r0
 800cd32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cd36:	f7ff bb4a 	b.w	800c3ce <_dtoa_r+0x2e>
 800cd3a:	692a      	ldr	r2, [r5, #16]
 800cd3c:	3202      	adds	r2, #2
 800cd3e:	0092      	lsls	r2, r2, #2
 800cd40:	f105 010c 	add.w	r1, r5, #12
 800cd44:	300c      	adds	r0, #12
 800cd46:	f001 f969 	bl	800e01c <memcpy>
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	4631      	mov	r1, r6
 800cd4e:	4648      	mov	r0, r9
 800cd50:	f000 fbfc 	bl	800d54c <__lshift>
 800cd54:	f10a 0301 	add.w	r3, sl, #1
 800cd58:	9300      	str	r3, [sp, #0]
 800cd5a:	eb0a 030b 	add.w	r3, sl, fp
 800cd5e:	9308      	str	r3, [sp, #32]
 800cd60:	9b04      	ldr	r3, [sp, #16]
 800cd62:	f003 0301 	and.w	r3, r3, #1
 800cd66:	462f      	mov	r7, r5
 800cd68:	9306      	str	r3, [sp, #24]
 800cd6a:	4605      	mov	r5, r0
 800cd6c:	9b00      	ldr	r3, [sp, #0]
 800cd6e:	9802      	ldr	r0, [sp, #8]
 800cd70:	4621      	mov	r1, r4
 800cd72:	f103 3bff 	add.w	fp, r3, #4294967295
 800cd76:	f7ff fa8a 	bl	800c28e <quorem>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	3330      	adds	r3, #48	@ 0x30
 800cd7e:	9003      	str	r0, [sp, #12]
 800cd80:	4639      	mov	r1, r7
 800cd82:	9802      	ldr	r0, [sp, #8]
 800cd84:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd86:	f000 fc4d 	bl	800d624 <__mcmp>
 800cd8a:	462a      	mov	r2, r5
 800cd8c:	9004      	str	r0, [sp, #16]
 800cd8e:	4621      	mov	r1, r4
 800cd90:	4648      	mov	r0, r9
 800cd92:	f000 fc63 	bl	800d65c <__mdiff>
 800cd96:	68c2      	ldr	r2, [r0, #12]
 800cd98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd9a:	4606      	mov	r6, r0
 800cd9c:	bb02      	cbnz	r2, 800cde0 <_dtoa_r+0xa40>
 800cd9e:	4601      	mov	r1, r0
 800cda0:	9802      	ldr	r0, [sp, #8]
 800cda2:	f000 fc3f 	bl	800d624 <__mcmp>
 800cda6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cda8:	4602      	mov	r2, r0
 800cdaa:	4631      	mov	r1, r6
 800cdac:	4648      	mov	r0, r9
 800cdae:	920c      	str	r2, [sp, #48]	@ 0x30
 800cdb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdb2:	f000 fa05 	bl	800d1c0 <_Bfree>
 800cdb6:	9b07      	ldr	r3, [sp, #28]
 800cdb8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cdba:	9e00      	ldr	r6, [sp, #0]
 800cdbc:	ea42 0103 	orr.w	r1, r2, r3
 800cdc0:	9b06      	ldr	r3, [sp, #24]
 800cdc2:	4319      	orrs	r1, r3
 800cdc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdc6:	d10d      	bne.n	800cde4 <_dtoa_r+0xa44>
 800cdc8:	2b39      	cmp	r3, #57	@ 0x39
 800cdca:	d027      	beq.n	800ce1c <_dtoa_r+0xa7c>
 800cdcc:	9a04      	ldr	r2, [sp, #16]
 800cdce:	2a00      	cmp	r2, #0
 800cdd0:	dd01      	ble.n	800cdd6 <_dtoa_r+0xa36>
 800cdd2:	9b03      	ldr	r3, [sp, #12]
 800cdd4:	3331      	adds	r3, #49	@ 0x31
 800cdd6:	f88b 3000 	strb.w	r3, [fp]
 800cdda:	e52e      	b.n	800c83a <_dtoa_r+0x49a>
 800cddc:	4628      	mov	r0, r5
 800cdde:	e7b9      	b.n	800cd54 <_dtoa_r+0x9b4>
 800cde0:	2201      	movs	r2, #1
 800cde2:	e7e2      	b.n	800cdaa <_dtoa_r+0xa0a>
 800cde4:	9904      	ldr	r1, [sp, #16]
 800cde6:	2900      	cmp	r1, #0
 800cde8:	db04      	blt.n	800cdf4 <_dtoa_r+0xa54>
 800cdea:	9807      	ldr	r0, [sp, #28]
 800cdec:	4301      	orrs	r1, r0
 800cdee:	9806      	ldr	r0, [sp, #24]
 800cdf0:	4301      	orrs	r1, r0
 800cdf2:	d120      	bne.n	800ce36 <_dtoa_r+0xa96>
 800cdf4:	2a00      	cmp	r2, #0
 800cdf6:	ddee      	ble.n	800cdd6 <_dtoa_r+0xa36>
 800cdf8:	9902      	ldr	r1, [sp, #8]
 800cdfa:	9300      	str	r3, [sp, #0]
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	4648      	mov	r0, r9
 800ce00:	f000 fba4 	bl	800d54c <__lshift>
 800ce04:	4621      	mov	r1, r4
 800ce06:	9002      	str	r0, [sp, #8]
 800ce08:	f000 fc0c 	bl	800d624 <__mcmp>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	9b00      	ldr	r3, [sp, #0]
 800ce10:	dc02      	bgt.n	800ce18 <_dtoa_r+0xa78>
 800ce12:	d1e0      	bne.n	800cdd6 <_dtoa_r+0xa36>
 800ce14:	07da      	lsls	r2, r3, #31
 800ce16:	d5de      	bpl.n	800cdd6 <_dtoa_r+0xa36>
 800ce18:	2b39      	cmp	r3, #57	@ 0x39
 800ce1a:	d1da      	bne.n	800cdd2 <_dtoa_r+0xa32>
 800ce1c:	2339      	movs	r3, #57	@ 0x39
 800ce1e:	f88b 3000 	strb.w	r3, [fp]
 800ce22:	4633      	mov	r3, r6
 800ce24:	461e      	mov	r6, r3
 800ce26:	3b01      	subs	r3, #1
 800ce28:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ce2c:	2a39      	cmp	r2, #57	@ 0x39
 800ce2e:	d04e      	beq.n	800cece <_dtoa_r+0xb2e>
 800ce30:	3201      	adds	r2, #1
 800ce32:	701a      	strb	r2, [r3, #0]
 800ce34:	e501      	b.n	800c83a <_dtoa_r+0x49a>
 800ce36:	2a00      	cmp	r2, #0
 800ce38:	dd03      	ble.n	800ce42 <_dtoa_r+0xaa2>
 800ce3a:	2b39      	cmp	r3, #57	@ 0x39
 800ce3c:	d0ee      	beq.n	800ce1c <_dtoa_r+0xa7c>
 800ce3e:	3301      	adds	r3, #1
 800ce40:	e7c9      	b.n	800cdd6 <_dtoa_r+0xa36>
 800ce42:	9a00      	ldr	r2, [sp, #0]
 800ce44:	9908      	ldr	r1, [sp, #32]
 800ce46:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ce4a:	428a      	cmp	r2, r1
 800ce4c:	d028      	beq.n	800cea0 <_dtoa_r+0xb00>
 800ce4e:	9902      	ldr	r1, [sp, #8]
 800ce50:	2300      	movs	r3, #0
 800ce52:	220a      	movs	r2, #10
 800ce54:	4648      	mov	r0, r9
 800ce56:	f000 f9d5 	bl	800d204 <__multadd>
 800ce5a:	42af      	cmp	r7, r5
 800ce5c:	9002      	str	r0, [sp, #8]
 800ce5e:	f04f 0300 	mov.w	r3, #0
 800ce62:	f04f 020a 	mov.w	r2, #10
 800ce66:	4639      	mov	r1, r7
 800ce68:	4648      	mov	r0, r9
 800ce6a:	d107      	bne.n	800ce7c <_dtoa_r+0xadc>
 800ce6c:	f000 f9ca 	bl	800d204 <__multadd>
 800ce70:	4607      	mov	r7, r0
 800ce72:	4605      	mov	r5, r0
 800ce74:	9b00      	ldr	r3, [sp, #0]
 800ce76:	3301      	adds	r3, #1
 800ce78:	9300      	str	r3, [sp, #0]
 800ce7a:	e777      	b.n	800cd6c <_dtoa_r+0x9cc>
 800ce7c:	f000 f9c2 	bl	800d204 <__multadd>
 800ce80:	4629      	mov	r1, r5
 800ce82:	4607      	mov	r7, r0
 800ce84:	2300      	movs	r3, #0
 800ce86:	220a      	movs	r2, #10
 800ce88:	4648      	mov	r0, r9
 800ce8a:	f000 f9bb 	bl	800d204 <__multadd>
 800ce8e:	4605      	mov	r5, r0
 800ce90:	e7f0      	b.n	800ce74 <_dtoa_r+0xad4>
 800ce92:	f1bb 0f00 	cmp.w	fp, #0
 800ce96:	bfcc      	ite	gt
 800ce98:	465e      	movgt	r6, fp
 800ce9a:	2601      	movle	r6, #1
 800ce9c:	4456      	add	r6, sl
 800ce9e:	2700      	movs	r7, #0
 800cea0:	9902      	ldr	r1, [sp, #8]
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	2201      	movs	r2, #1
 800cea6:	4648      	mov	r0, r9
 800cea8:	f000 fb50 	bl	800d54c <__lshift>
 800ceac:	4621      	mov	r1, r4
 800ceae:	9002      	str	r0, [sp, #8]
 800ceb0:	f000 fbb8 	bl	800d624 <__mcmp>
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	dcb4      	bgt.n	800ce22 <_dtoa_r+0xa82>
 800ceb8:	d102      	bne.n	800cec0 <_dtoa_r+0xb20>
 800ceba:	9b00      	ldr	r3, [sp, #0]
 800cebc:	07db      	lsls	r3, r3, #31
 800cebe:	d4b0      	bmi.n	800ce22 <_dtoa_r+0xa82>
 800cec0:	4633      	mov	r3, r6
 800cec2:	461e      	mov	r6, r3
 800cec4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cec8:	2a30      	cmp	r2, #48	@ 0x30
 800ceca:	d0fa      	beq.n	800cec2 <_dtoa_r+0xb22>
 800cecc:	e4b5      	b.n	800c83a <_dtoa_r+0x49a>
 800cece:	459a      	cmp	sl, r3
 800ced0:	d1a8      	bne.n	800ce24 <_dtoa_r+0xa84>
 800ced2:	2331      	movs	r3, #49	@ 0x31
 800ced4:	f108 0801 	add.w	r8, r8, #1
 800ced8:	f88a 3000 	strb.w	r3, [sl]
 800cedc:	e4ad      	b.n	800c83a <_dtoa_r+0x49a>
 800cede:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cee0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800cf3c <_dtoa_r+0xb9c>
 800cee4:	b11b      	cbz	r3, 800ceee <_dtoa_r+0xb4e>
 800cee6:	f10a 0308 	add.w	r3, sl, #8
 800ceea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ceec:	6013      	str	r3, [r2, #0]
 800ceee:	4650      	mov	r0, sl
 800cef0:	b017      	add	sp, #92	@ 0x5c
 800cef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef6:	9b07      	ldr	r3, [sp, #28]
 800cef8:	2b01      	cmp	r3, #1
 800cefa:	f77f ae2e 	ble.w	800cb5a <_dtoa_r+0x7ba>
 800cefe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf00:	9308      	str	r3, [sp, #32]
 800cf02:	2001      	movs	r0, #1
 800cf04:	e64d      	b.n	800cba2 <_dtoa_r+0x802>
 800cf06:	f1bb 0f00 	cmp.w	fp, #0
 800cf0a:	f77f aed9 	ble.w	800ccc0 <_dtoa_r+0x920>
 800cf0e:	4656      	mov	r6, sl
 800cf10:	9802      	ldr	r0, [sp, #8]
 800cf12:	4621      	mov	r1, r4
 800cf14:	f7ff f9bb 	bl	800c28e <quorem>
 800cf18:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800cf1c:	f806 3b01 	strb.w	r3, [r6], #1
 800cf20:	eba6 020a 	sub.w	r2, r6, sl
 800cf24:	4593      	cmp	fp, r2
 800cf26:	ddb4      	ble.n	800ce92 <_dtoa_r+0xaf2>
 800cf28:	9902      	ldr	r1, [sp, #8]
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	220a      	movs	r2, #10
 800cf2e:	4648      	mov	r0, r9
 800cf30:	f000 f968 	bl	800d204 <__multadd>
 800cf34:	9002      	str	r0, [sp, #8]
 800cf36:	e7eb      	b.n	800cf10 <_dtoa_r+0xb70>
 800cf38:	0800fdd4 	.word	0x0800fdd4
 800cf3c:	0800fd58 	.word	0x0800fd58

0800cf40 <_free_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	4605      	mov	r5, r0
 800cf44:	2900      	cmp	r1, #0
 800cf46:	d041      	beq.n	800cfcc <_free_r+0x8c>
 800cf48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf4c:	1f0c      	subs	r4, r1, #4
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	bfb8      	it	lt
 800cf52:	18e4      	addlt	r4, r4, r3
 800cf54:	f000 f8e8 	bl	800d128 <__malloc_lock>
 800cf58:	4a1d      	ldr	r2, [pc, #116]	@ (800cfd0 <_free_r+0x90>)
 800cf5a:	6813      	ldr	r3, [r2, #0]
 800cf5c:	b933      	cbnz	r3, 800cf6c <_free_r+0x2c>
 800cf5e:	6063      	str	r3, [r4, #4]
 800cf60:	6014      	str	r4, [r2, #0]
 800cf62:	4628      	mov	r0, r5
 800cf64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf68:	f000 b8e4 	b.w	800d134 <__malloc_unlock>
 800cf6c:	42a3      	cmp	r3, r4
 800cf6e:	d908      	bls.n	800cf82 <_free_r+0x42>
 800cf70:	6820      	ldr	r0, [r4, #0]
 800cf72:	1821      	adds	r1, r4, r0
 800cf74:	428b      	cmp	r3, r1
 800cf76:	bf01      	itttt	eq
 800cf78:	6819      	ldreq	r1, [r3, #0]
 800cf7a:	685b      	ldreq	r3, [r3, #4]
 800cf7c:	1809      	addeq	r1, r1, r0
 800cf7e:	6021      	streq	r1, [r4, #0]
 800cf80:	e7ed      	b.n	800cf5e <_free_r+0x1e>
 800cf82:	461a      	mov	r2, r3
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	b10b      	cbz	r3, 800cf8c <_free_r+0x4c>
 800cf88:	42a3      	cmp	r3, r4
 800cf8a:	d9fa      	bls.n	800cf82 <_free_r+0x42>
 800cf8c:	6811      	ldr	r1, [r2, #0]
 800cf8e:	1850      	adds	r0, r2, r1
 800cf90:	42a0      	cmp	r0, r4
 800cf92:	d10b      	bne.n	800cfac <_free_r+0x6c>
 800cf94:	6820      	ldr	r0, [r4, #0]
 800cf96:	4401      	add	r1, r0
 800cf98:	1850      	adds	r0, r2, r1
 800cf9a:	4283      	cmp	r3, r0
 800cf9c:	6011      	str	r1, [r2, #0]
 800cf9e:	d1e0      	bne.n	800cf62 <_free_r+0x22>
 800cfa0:	6818      	ldr	r0, [r3, #0]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	6053      	str	r3, [r2, #4]
 800cfa6:	4408      	add	r0, r1
 800cfa8:	6010      	str	r0, [r2, #0]
 800cfaa:	e7da      	b.n	800cf62 <_free_r+0x22>
 800cfac:	d902      	bls.n	800cfb4 <_free_r+0x74>
 800cfae:	230c      	movs	r3, #12
 800cfb0:	602b      	str	r3, [r5, #0]
 800cfb2:	e7d6      	b.n	800cf62 <_free_r+0x22>
 800cfb4:	6820      	ldr	r0, [r4, #0]
 800cfb6:	1821      	adds	r1, r4, r0
 800cfb8:	428b      	cmp	r3, r1
 800cfba:	bf04      	itt	eq
 800cfbc:	6819      	ldreq	r1, [r3, #0]
 800cfbe:	685b      	ldreq	r3, [r3, #4]
 800cfc0:	6063      	str	r3, [r4, #4]
 800cfc2:	bf04      	itt	eq
 800cfc4:	1809      	addeq	r1, r1, r0
 800cfc6:	6021      	streq	r1, [r4, #0]
 800cfc8:	6054      	str	r4, [r2, #4]
 800cfca:	e7ca      	b.n	800cf62 <_free_r+0x22>
 800cfcc:	bd38      	pop	{r3, r4, r5, pc}
 800cfce:	bf00      	nop
 800cfd0:	200009f4 	.word	0x200009f4

0800cfd4 <malloc>:
 800cfd4:	4b02      	ldr	r3, [pc, #8]	@ (800cfe0 <malloc+0xc>)
 800cfd6:	4601      	mov	r1, r0
 800cfd8:	6818      	ldr	r0, [r3, #0]
 800cfda:	f000 b825 	b.w	800d028 <_malloc_r>
 800cfde:	bf00      	nop
 800cfe0:	200000ac 	.word	0x200000ac

0800cfe4 <sbrk_aligned>:
 800cfe4:	b570      	push	{r4, r5, r6, lr}
 800cfe6:	4e0f      	ldr	r6, [pc, #60]	@ (800d024 <sbrk_aligned+0x40>)
 800cfe8:	460c      	mov	r4, r1
 800cfea:	6831      	ldr	r1, [r6, #0]
 800cfec:	4605      	mov	r5, r0
 800cfee:	b911      	cbnz	r1, 800cff6 <sbrk_aligned+0x12>
 800cff0:	f001 f804 	bl	800dffc <_sbrk_r>
 800cff4:	6030      	str	r0, [r6, #0]
 800cff6:	4621      	mov	r1, r4
 800cff8:	4628      	mov	r0, r5
 800cffa:	f000 ffff 	bl	800dffc <_sbrk_r>
 800cffe:	1c43      	adds	r3, r0, #1
 800d000:	d103      	bne.n	800d00a <sbrk_aligned+0x26>
 800d002:	f04f 34ff 	mov.w	r4, #4294967295
 800d006:	4620      	mov	r0, r4
 800d008:	bd70      	pop	{r4, r5, r6, pc}
 800d00a:	1cc4      	adds	r4, r0, #3
 800d00c:	f024 0403 	bic.w	r4, r4, #3
 800d010:	42a0      	cmp	r0, r4
 800d012:	d0f8      	beq.n	800d006 <sbrk_aligned+0x22>
 800d014:	1a21      	subs	r1, r4, r0
 800d016:	4628      	mov	r0, r5
 800d018:	f000 fff0 	bl	800dffc <_sbrk_r>
 800d01c:	3001      	adds	r0, #1
 800d01e:	d1f2      	bne.n	800d006 <sbrk_aligned+0x22>
 800d020:	e7ef      	b.n	800d002 <sbrk_aligned+0x1e>
 800d022:	bf00      	nop
 800d024:	200009f0 	.word	0x200009f0

0800d028 <_malloc_r>:
 800d028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d02c:	1ccd      	adds	r5, r1, #3
 800d02e:	f025 0503 	bic.w	r5, r5, #3
 800d032:	3508      	adds	r5, #8
 800d034:	2d0c      	cmp	r5, #12
 800d036:	bf38      	it	cc
 800d038:	250c      	movcc	r5, #12
 800d03a:	2d00      	cmp	r5, #0
 800d03c:	4606      	mov	r6, r0
 800d03e:	db01      	blt.n	800d044 <_malloc_r+0x1c>
 800d040:	42a9      	cmp	r1, r5
 800d042:	d904      	bls.n	800d04e <_malloc_r+0x26>
 800d044:	230c      	movs	r3, #12
 800d046:	6033      	str	r3, [r6, #0]
 800d048:	2000      	movs	r0, #0
 800d04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d04e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d124 <_malloc_r+0xfc>
 800d052:	f000 f869 	bl	800d128 <__malloc_lock>
 800d056:	f8d8 3000 	ldr.w	r3, [r8]
 800d05a:	461c      	mov	r4, r3
 800d05c:	bb44      	cbnz	r4, 800d0b0 <_malloc_r+0x88>
 800d05e:	4629      	mov	r1, r5
 800d060:	4630      	mov	r0, r6
 800d062:	f7ff ffbf 	bl	800cfe4 <sbrk_aligned>
 800d066:	1c43      	adds	r3, r0, #1
 800d068:	4604      	mov	r4, r0
 800d06a:	d158      	bne.n	800d11e <_malloc_r+0xf6>
 800d06c:	f8d8 4000 	ldr.w	r4, [r8]
 800d070:	4627      	mov	r7, r4
 800d072:	2f00      	cmp	r7, #0
 800d074:	d143      	bne.n	800d0fe <_malloc_r+0xd6>
 800d076:	2c00      	cmp	r4, #0
 800d078:	d04b      	beq.n	800d112 <_malloc_r+0xea>
 800d07a:	6823      	ldr	r3, [r4, #0]
 800d07c:	4639      	mov	r1, r7
 800d07e:	4630      	mov	r0, r6
 800d080:	eb04 0903 	add.w	r9, r4, r3
 800d084:	f000 ffba 	bl	800dffc <_sbrk_r>
 800d088:	4581      	cmp	r9, r0
 800d08a:	d142      	bne.n	800d112 <_malloc_r+0xea>
 800d08c:	6821      	ldr	r1, [r4, #0]
 800d08e:	1a6d      	subs	r5, r5, r1
 800d090:	4629      	mov	r1, r5
 800d092:	4630      	mov	r0, r6
 800d094:	f7ff ffa6 	bl	800cfe4 <sbrk_aligned>
 800d098:	3001      	adds	r0, #1
 800d09a:	d03a      	beq.n	800d112 <_malloc_r+0xea>
 800d09c:	6823      	ldr	r3, [r4, #0]
 800d09e:	442b      	add	r3, r5
 800d0a0:	6023      	str	r3, [r4, #0]
 800d0a2:	f8d8 3000 	ldr.w	r3, [r8]
 800d0a6:	685a      	ldr	r2, [r3, #4]
 800d0a8:	bb62      	cbnz	r2, 800d104 <_malloc_r+0xdc>
 800d0aa:	f8c8 7000 	str.w	r7, [r8]
 800d0ae:	e00f      	b.n	800d0d0 <_malloc_r+0xa8>
 800d0b0:	6822      	ldr	r2, [r4, #0]
 800d0b2:	1b52      	subs	r2, r2, r5
 800d0b4:	d420      	bmi.n	800d0f8 <_malloc_r+0xd0>
 800d0b6:	2a0b      	cmp	r2, #11
 800d0b8:	d917      	bls.n	800d0ea <_malloc_r+0xc2>
 800d0ba:	1961      	adds	r1, r4, r5
 800d0bc:	42a3      	cmp	r3, r4
 800d0be:	6025      	str	r5, [r4, #0]
 800d0c0:	bf18      	it	ne
 800d0c2:	6059      	strne	r1, [r3, #4]
 800d0c4:	6863      	ldr	r3, [r4, #4]
 800d0c6:	bf08      	it	eq
 800d0c8:	f8c8 1000 	streq.w	r1, [r8]
 800d0cc:	5162      	str	r2, [r4, r5]
 800d0ce:	604b      	str	r3, [r1, #4]
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	f000 f82f 	bl	800d134 <__malloc_unlock>
 800d0d6:	f104 000b 	add.w	r0, r4, #11
 800d0da:	1d23      	adds	r3, r4, #4
 800d0dc:	f020 0007 	bic.w	r0, r0, #7
 800d0e0:	1ac2      	subs	r2, r0, r3
 800d0e2:	bf1c      	itt	ne
 800d0e4:	1a1b      	subne	r3, r3, r0
 800d0e6:	50a3      	strne	r3, [r4, r2]
 800d0e8:	e7af      	b.n	800d04a <_malloc_r+0x22>
 800d0ea:	6862      	ldr	r2, [r4, #4]
 800d0ec:	42a3      	cmp	r3, r4
 800d0ee:	bf0c      	ite	eq
 800d0f0:	f8c8 2000 	streq.w	r2, [r8]
 800d0f4:	605a      	strne	r2, [r3, #4]
 800d0f6:	e7eb      	b.n	800d0d0 <_malloc_r+0xa8>
 800d0f8:	4623      	mov	r3, r4
 800d0fa:	6864      	ldr	r4, [r4, #4]
 800d0fc:	e7ae      	b.n	800d05c <_malloc_r+0x34>
 800d0fe:	463c      	mov	r4, r7
 800d100:	687f      	ldr	r7, [r7, #4]
 800d102:	e7b6      	b.n	800d072 <_malloc_r+0x4a>
 800d104:	461a      	mov	r2, r3
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	42a3      	cmp	r3, r4
 800d10a:	d1fb      	bne.n	800d104 <_malloc_r+0xdc>
 800d10c:	2300      	movs	r3, #0
 800d10e:	6053      	str	r3, [r2, #4]
 800d110:	e7de      	b.n	800d0d0 <_malloc_r+0xa8>
 800d112:	230c      	movs	r3, #12
 800d114:	6033      	str	r3, [r6, #0]
 800d116:	4630      	mov	r0, r6
 800d118:	f000 f80c 	bl	800d134 <__malloc_unlock>
 800d11c:	e794      	b.n	800d048 <_malloc_r+0x20>
 800d11e:	6005      	str	r5, [r0, #0]
 800d120:	e7d6      	b.n	800d0d0 <_malloc_r+0xa8>
 800d122:	bf00      	nop
 800d124:	200009f4 	.word	0x200009f4

0800d128 <__malloc_lock>:
 800d128:	4801      	ldr	r0, [pc, #4]	@ (800d130 <__malloc_lock+0x8>)
 800d12a:	f7ff b8ae 	b.w	800c28a <__retarget_lock_acquire_recursive>
 800d12e:	bf00      	nop
 800d130:	200009ec 	.word	0x200009ec

0800d134 <__malloc_unlock>:
 800d134:	4801      	ldr	r0, [pc, #4]	@ (800d13c <__malloc_unlock+0x8>)
 800d136:	f7ff b8a9 	b.w	800c28c <__retarget_lock_release_recursive>
 800d13a:	bf00      	nop
 800d13c:	200009ec 	.word	0x200009ec

0800d140 <_Balloc>:
 800d140:	b570      	push	{r4, r5, r6, lr}
 800d142:	69c6      	ldr	r6, [r0, #28]
 800d144:	4604      	mov	r4, r0
 800d146:	460d      	mov	r5, r1
 800d148:	b976      	cbnz	r6, 800d168 <_Balloc+0x28>
 800d14a:	2010      	movs	r0, #16
 800d14c:	f7ff ff42 	bl	800cfd4 <malloc>
 800d150:	4602      	mov	r2, r0
 800d152:	61e0      	str	r0, [r4, #28]
 800d154:	b920      	cbnz	r0, 800d160 <_Balloc+0x20>
 800d156:	4b18      	ldr	r3, [pc, #96]	@ (800d1b8 <_Balloc+0x78>)
 800d158:	4818      	ldr	r0, [pc, #96]	@ (800d1bc <_Balloc+0x7c>)
 800d15a:	216b      	movs	r1, #107	@ 0x6b
 800d15c:	f000 ff6c 	bl	800e038 <__assert_func>
 800d160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d164:	6006      	str	r6, [r0, #0]
 800d166:	60c6      	str	r6, [r0, #12]
 800d168:	69e6      	ldr	r6, [r4, #28]
 800d16a:	68f3      	ldr	r3, [r6, #12]
 800d16c:	b183      	cbz	r3, 800d190 <_Balloc+0x50>
 800d16e:	69e3      	ldr	r3, [r4, #28]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d176:	b9b8      	cbnz	r0, 800d1a8 <_Balloc+0x68>
 800d178:	2101      	movs	r1, #1
 800d17a:	fa01 f605 	lsl.w	r6, r1, r5
 800d17e:	1d72      	adds	r2, r6, #5
 800d180:	0092      	lsls	r2, r2, #2
 800d182:	4620      	mov	r0, r4
 800d184:	f000 ff76 	bl	800e074 <_calloc_r>
 800d188:	b160      	cbz	r0, 800d1a4 <_Balloc+0x64>
 800d18a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d18e:	e00e      	b.n	800d1ae <_Balloc+0x6e>
 800d190:	2221      	movs	r2, #33	@ 0x21
 800d192:	2104      	movs	r1, #4
 800d194:	4620      	mov	r0, r4
 800d196:	f000 ff6d 	bl	800e074 <_calloc_r>
 800d19a:	69e3      	ldr	r3, [r4, #28]
 800d19c:	60f0      	str	r0, [r6, #12]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1e4      	bne.n	800d16e <_Balloc+0x2e>
 800d1a4:	2000      	movs	r0, #0
 800d1a6:	bd70      	pop	{r4, r5, r6, pc}
 800d1a8:	6802      	ldr	r2, [r0, #0]
 800d1aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1b4:	e7f7      	b.n	800d1a6 <_Balloc+0x66>
 800d1b6:	bf00      	nop
 800d1b8:	0800fd65 	.word	0x0800fd65
 800d1bc:	0800fde5 	.word	0x0800fde5

0800d1c0 <_Bfree>:
 800d1c0:	b570      	push	{r4, r5, r6, lr}
 800d1c2:	69c6      	ldr	r6, [r0, #28]
 800d1c4:	4605      	mov	r5, r0
 800d1c6:	460c      	mov	r4, r1
 800d1c8:	b976      	cbnz	r6, 800d1e8 <_Bfree+0x28>
 800d1ca:	2010      	movs	r0, #16
 800d1cc:	f7ff ff02 	bl	800cfd4 <malloc>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	61e8      	str	r0, [r5, #28]
 800d1d4:	b920      	cbnz	r0, 800d1e0 <_Bfree+0x20>
 800d1d6:	4b09      	ldr	r3, [pc, #36]	@ (800d1fc <_Bfree+0x3c>)
 800d1d8:	4809      	ldr	r0, [pc, #36]	@ (800d200 <_Bfree+0x40>)
 800d1da:	218f      	movs	r1, #143	@ 0x8f
 800d1dc:	f000 ff2c 	bl	800e038 <__assert_func>
 800d1e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1e4:	6006      	str	r6, [r0, #0]
 800d1e6:	60c6      	str	r6, [r0, #12]
 800d1e8:	b13c      	cbz	r4, 800d1fa <_Bfree+0x3a>
 800d1ea:	69eb      	ldr	r3, [r5, #28]
 800d1ec:	6862      	ldr	r2, [r4, #4]
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1f4:	6021      	str	r1, [r4, #0]
 800d1f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1fa:	bd70      	pop	{r4, r5, r6, pc}
 800d1fc:	0800fd65 	.word	0x0800fd65
 800d200:	0800fde5 	.word	0x0800fde5

0800d204 <__multadd>:
 800d204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d208:	690d      	ldr	r5, [r1, #16]
 800d20a:	4607      	mov	r7, r0
 800d20c:	460c      	mov	r4, r1
 800d20e:	461e      	mov	r6, r3
 800d210:	f101 0c14 	add.w	ip, r1, #20
 800d214:	2000      	movs	r0, #0
 800d216:	f8dc 3000 	ldr.w	r3, [ip]
 800d21a:	b299      	uxth	r1, r3
 800d21c:	fb02 6101 	mla	r1, r2, r1, r6
 800d220:	0c1e      	lsrs	r6, r3, #16
 800d222:	0c0b      	lsrs	r3, r1, #16
 800d224:	fb02 3306 	mla	r3, r2, r6, r3
 800d228:	b289      	uxth	r1, r1
 800d22a:	3001      	adds	r0, #1
 800d22c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d230:	4285      	cmp	r5, r0
 800d232:	f84c 1b04 	str.w	r1, [ip], #4
 800d236:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d23a:	dcec      	bgt.n	800d216 <__multadd+0x12>
 800d23c:	b30e      	cbz	r6, 800d282 <__multadd+0x7e>
 800d23e:	68a3      	ldr	r3, [r4, #8]
 800d240:	42ab      	cmp	r3, r5
 800d242:	dc19      	bgt.n	800d278 <__multadd+0x74>
 800d244:	6861      	ldr	r1, [r4, #4]
 800d246:	4638      	mov	r0, r7
 800d248:	3101      	adds	r1, #1
 800d24a:	f7ff ff79 	bl	800d140 <_Balloc>
 800d24e:	4680      	mov	r8, r0
 800d250:	b928      	cbnz	r0, 800d25e <__multadd+0x5a>
 800d252:	4602      	mov	r2, r0
 800d254:	4b0c      	ldr	r3, [pc, #48]	@ (800d288 <__multadd+0x84>)
 800d256:	480d      	ldr	r0, [pc, #52]	@ (800d28c <__multadd+0x88>)
 800d258:	21ba      	movs	r1, #186	@ 0xba
 800d25a:	f000 feed 	bl	800e038 <__assert_func>
 800d25e:	6922      	ldr	r2, [r4, #16]
 800d260:	3202      	adds	r2, #2
 800d262:	f104 010c 	add.w	r1, r4, #12
 800d266:	0092      	lsls	r2, r2, #2
 800d268:	300c      	adds	r0, #12
 800d26a:	f000 fed7 	bl	800e01c <memcpy>
 800d26e:	4621      	mov	r1, r4
 800d270:	4638      	mov	r0, r7
 800d272:	f7ff ffa5 	bl	800d1c0 <_Bfree>
 800d276:	4644      	mov	r4, r8
 800d278:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d27c:	3501      	adds	r5, #1
 800d27e:	615e      	str	r6, [r3, #20]
 800d280:	6125      	str	r5, [r4, #16]
 800d282:	4620      	mov	r0, r4
 800d284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d288:	0800fdd4 	.word	0x0800fdd4
 800d28c:	0800fde5 	.word	0x0800fde5

0800d290 <__hi0bits>:
 800d290:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d294:	4603      	mov	r3, r0
 800d296:	bf36      	itet	cc
 800d298:	0403      	lslcc	r3, r0, #16
 800d29a:	2000      	movcs	r0, #0
 800d29c:	2010      	movcc	r0, #16
 800d29e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2a2:	bf3c      	itt	cc
 800d2a4:	021b      	lslcc	r3, r3, #8
 800d2a6:	3008      	addcc	r0, #8
 800d2a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2ac:	bf3c      	itt	cc
 800d2ae:	011b      	lslcc	r3, r3, #4
 800d2b0:	3004      	addcc	r0, #4
 800d2b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2b6:	bf3c      	itt	cc
 800d2b8:	009b      	lslcc	r3, r3, #2
 800d2ba:	3002      	addcc	r0, #2
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	db05      	blt.n	800d2cc <__hi0bits+0x3c>
 800d2c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d2c4:	f100 0001 	add.w	r0, r0, #1
 800d2c8:	bf08      	it	eq
 800d2ca:	2020      	moveq	r0, #32
 800d2cc:	4770      	bx	lr

0800d2ce <__lo0bits>:
 800d2ce:	6803      	ldr	r3, [r0, #0]
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	f013 0007 	ands.w	r0, r3, #7
 800d2d6:	d00b      	beq.n	800d2f0 <__lo0bits+0x22>
 800d2d8:	07d9      	lsls	r1, r3, #31
 800d2da:	d421      	bmi.n	800d320 <__lo0bits+0x52>
 800d2dc:	0798      	lsls	r0, r3, #30
 800d2de:	bf49      	itett	mi
 800d2e0:	085b      	lsrmi	r3, r3, #1
 800d2e2:	089b      	lsrpl	r3, r3, #2
 800d2e4:	2001      	movmi	r0, #1
 800d2e6:	6013      	strmi	r3, [r2, #0]
 800d2e8:	bf5c      	itt	pl
 800d2ea:	6013      	strpl	r3, [r2, #0]
 800d2ec:	2002      	movpl	r0, #2
 800d2ee:	4770      	bx	lr
 800d2f0:	b299      	uxth	r1, r3
 800d2f2:	b909      	cbnz	r1, 800d2f8 <__lo0bits+0x2a>
 800d2f4:	0c1b      	lsrs	r3, r3, #16
 800d2f6:	2010      	movs	r0, #16
 800d2f8:	b2d9      	uxtb	r1, r3
 800d2fa:	b909      	cbnz	r1, 800d300 <__lo0bits+0x32>
 800d2fc:	3008      	adds	r0, #8
 800d2fe:	0a1b      	lsrs	r3, r3, #8
 800d300:	0719      	lsls	r1, r3, #28
 800d302:	bf04      	itt	eq
 800d304:	091b      	lsreq	r3, r3, #4
 800d306:	3004      	addeq	r0, #4
 800d308:	0799      	lsls	r1, r3, #30
 800d30a:	bf04      	itt	eq
 800d30c:	089b      	lsreq	r3, r3, #2
 800d30e:	3002      	addeq	r0, #2
 800d310:	07d9      	lsls	r1, r3, #31
 800d312:	d403      	bmi.n	800d31c <__lo0bits+0x4e>
 800d314:	085b      	lsrs	r3, r3, #1
 800d316:	f100 0001 	add.w	r0, r0, #1
 800d31a:	d003      	beq.n	800d324 <__lo0bits+0x56>
 800d31c:	6013      	str	r3, [r2, #0]
 800d31e:	4770      	bx	lr
 800d320:	2000      	movs	r0, #0
 800d322:	4770      	bx	lr
 800d324:	2020      	movs	r0, #32
 800d326:	4770      	bx	lr

0800d328 <__i2b>:
 800d328:	b510      	push	{r4, lr}
 800d32a:	460c      	mov	r4, r1
 800d32c:	2101      	movs	r1, #1
 800d32e:	f7ff ff07 	bl	800d140 <_Balloc>
 800d332:	4602      	mov	r2, r0
 800d334:	b928      	cbnz	r0, 800d342 <__i2b+0x1a>
 800d336:	4b05      	ldr	r3, [pc, #20]	@ (800d34c <__i2b+0x24>)
 800d338:	4805      	ldr	r0, [pc, #20]	@ (800d350 <__i2b+0x28>)
 800d33a:	f240 1145 	movw	r1, #325	@ 0x145
 800d33e:	f000 fe7b 	bl	800e038 <__assert_func>
 800d342:	2301      	movs	r3, #1
 800d344:	6144      	str	r4, [r0, #20]
 800d346:	6103      	str	r3, [r0, #16]
 800d348:	bd10      	pop	{r4, pc}
 800d34a:	bf00      	nop
 800d34c:	0800fdd4 	.word	0x0800fdd4
 800d350:	0800fde5 	.word	0x0800fde5

0800d354 <__multiply>:
 800d354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d358:	4617      	mov	r7, r2
 800d35a:	690a      	ldr	r2, [r1, #16]
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	429a      	cmp	r2, r3
 800d360:	bfa8      	it	ge
 800d362:	463b      	movge	r3, r7
 800d364:	4689      	mov	r9, r1
 800d366:	bfa4      	itt	ge
 800d368:	460f      	movge	r7, r1
 800d36a:	4699      	movge	r9, r3
 800d36c:	693d      	ldr	r5, [r7, #16]
 800d36e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	6879      	ldr	r1, [r7, #4]
 800d376:	eb05 060a 	add.w	r6, r5, sl
 800d37a:	42b3      	cmp	r3, r6
 800d37c:	b085      	sub	sp, #20
 800d37e:	bfb8      	it	lt
 800d380:	3101      	addlt	r1, #1
 800d382:	f7ff fedd 	bl	800d140 <_Balloc>
 800d386:	b930      	cbnz	r0, 800d396 <__multiply+0x42>
 800d388:	4602      	mov	r2, r0
 800d38a:	4b41      	ldr	r3, [pc, #260]	@ (800d490 <__multiply+0x13c>)
 800d38c:	4841      	ldr	r0, [pc, #260]	@ (800d494 <__multiply+0x140>)
 800d38e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d392:	f000 fe51 	bl	800e038 <__assert_func>
 800d396:	f100 0414 	add.w	r4, r0, #20
 800d39a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d39e:	4623      	mov	r3, r4
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	4573      	cmp	r3, lr
 800d3a4:	d320      	bcc.n	800d3e8 <__multiply+0x94>
 800d3a6:	f107 0814 	add.w	r8, r7, #20
 800d3aa:	f109 0114 	add.w	r1, r9, #20
 800d3ae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d3b2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d3b6:	9302      	str	r3, [sp, #8]
 800d3b8:	1beb      	subs	r3, r5, r7
 800d3ba:	3b15      	subs	r3, #21
 800d3bc:	f023 0303 	bic.w	r3, r3, #3
 800d3c0:	3304      	adds	r3, #4
 800d3c2:	3715      	adds	r7, #21
 800d3c4:	42bd      	cmp	r5, r7
 800d3c6:	bf38      	it	cc
 800d3c8:	2304      	movcc	r3, #4
 800d3ca:	9301      	str	r3, [sp, #4]
 800d3cc:	9b02      	ldr	r3, [sp, #8]
 800d3ce:	9103      	str	r1, [sp, #12]
 800d3d0:	428b      	cmp	r3, r1
 800d3d2:	d80c      	bhi.n	800d3ee <__multiply+0x9a>
 800d3d4:	2e00      	cmp	r6, #0
 800d3d6:	dd03      	ble.n	800d3e0 <__multiply+0x8c>
 800d3d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d055      	beq.n	800d48c <__multiply+0x138>
 800d3e0:	6106      	str	r6, [r0, #16]
 800d3e2:	b005      	add	sp, #20
 800d3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e8:	f843 2b04 	str.w	r2, [r3], #4
 800d3ec:	e7d9      	b.n	800d3a2 <__multiply+0x4e>
 800d3ee:	f8b1 a000 	ldrh.w	sl, [r1]
 800d3f2:	f1ba 0f00 	cmp.w	sl, #0
 800d3f6:	d01f      	beq.n	800d438 <__multiply+0xe4>
 800d3f8:	46c4      	mov	ip, r8
 800d3fa:	46a1      	mov	r9, r4
 800d3fc:	2700      	movs	r7, #0
 800d3fe:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d402:	f8d9 3000 	ldr.w	r3, [r9]
 800d406:	fa1f fb82 	uxth.w	fp, r2
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d410:	443b      	add	r3, r7
 800d412:	f8d9 7000 	ldr.w	r7, [r9]
 800d416:	0c12      	lsrs	r2, r2, #16
 800d418:	0c3f      	lsrs	r7, r7, #16
 800d41a:	fb0a 7202 	mla	r2, sl, r2, r7
 800d41e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d422:	b29b      	uxth	r3, r3
 800d424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d428:	4565      	cmp	r5, ip
 800d42a:	f849 3b04 	str.w	r3, [r9], #4
 800d42e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d432:	d8e4      	bhi.n	800d3fe <__multiply+0xaa>
 800d434:	9b01      	ldr	r3, [sp, #4]
 800d436:	50e7      	str	r7, [r4, r3]
 800d438:	9b03      	ldr	r3, [sp, #12]
 800d43a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d43e:	3104      	adds	r1, #4
 800d440:	f1b9 0f00 	cmp.w	r9, #0
 800d444:	d020      	beq.n	800d488 <__multiply+0x134>
 800d446:	6823      	ldr	r3, [r4, #0]
 800d448:	4647      	mov	r7, r8
 800d44a:	46a4      	mov	ip, r4
 800d44c:	f04f 0a00 	mov.w	sl, #0
 800d450:	f8b7 b000 	ldrh.w	fp, [r7]
 800d454:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d458:	fb09 220b 	mla	r2, r9, fp, r2
 800d45c:	4452      	add	r2, sl
 800d45e:	b29b      	uxth	r3, r3
 800d460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d464:	f84c 3b04 	str.w	r3, [ip], #4
 800d468:	f857 3b04 	ldr.w	r3, [r7], #4
 800d46c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d470:	f8bc 3000 	ldrh.w	r3, [ip]
 800d474:	fb09 330a 	mla	r3, r9, sl, r3
 800d478:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d47c:	42bd      	cmp	r5, r7
 800d47e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d482:	d8e5      	bhi.n	800d450 <__multiply+0xfc>
 800d484:	9a01      	ldr	r2, [sp, #4]
 800d486:	50a3      	str	r3, [r4, r2]
 800d488:	3404      	adds	r4, #4
 800d48a:	e79f      	b.n	800d3cc <__multiply+0x78>
 800d48c:	3e01      	subs	r6, #1
 800d48e:	e7a1      	b.n	800d3d4 <__multiply+0x80>
 800d490:	0800fdd4 	.word	0x0800fdd4
 800d494:	0800fde5 	.word	0x0800fde5

0800d498 <__pow5mult>:
 800d498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d49c:	4615      	mov	r5, r2
 800d49e:	f012 0203 	ands.w	r2, r2, #3
 800d4a2:	4607      	mov	r7, r0
 800d4a4:	460e      	mov	r6, r1
 800d4a6:	d007      	beq.n	800d4b8 <__pow5mult+0x20>
 800d4a8:	4c25      	ldr	r4, [pc, #148]	@ (800d540 <__pow5mult+0xa8>)
 800d4aa:	3a01      	subs	r2, #1
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d4b2:	f7ff fea7 	bl	800d204 <__multadd>
 800d4b6:	4606      	mov	r6, r0
 800d4b8:	10ad      	asrs	r5, r5, #2
 800d4ba:	d03d      	beq.n	800d538 <__pow5mult+0xa0>
 800d4bc:	69fc      	ldr	r4, [r7, #28]
 800d4be:	b97c      	cbnz	r4, 800d4e0 <__pow5mult+0x48>
 800d4c0:	2010      	movs	r0, #16
 800d4c2:	f7ff fd87 	bl	800cfd4 <malloc>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	61f8      	str	r0, [r7, #28]
 800d4ca:	b928      	cbnz	r0, 800d4d8 <__pow5mult+0x40>
 800d4cc:	4b1d      	ldr	r3, [pc, #116]	@ (800d544 <__pow5mult+0xac>)
 800d4ce:	481e      	ldr	r0, [pc, #120]	@ (800d548 <__pow5mult+0xb0>)
 800d4d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d4d4:	f000 fdb0 	bl	800e038 <__assert_func>
 800d4d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4dc:	6004      	str	r4, [r0, #0]
 800d4de:	60c4      	str	r4, [r0, #12]
 800d4e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d4e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4e8:	b94c      	cbnz	r4, 800d4fe <__pow5mult+0x66>
 800d4ea:	f240 2171 	movw	r1, #625	@ 0x271
 800d4ee:	4638      	mov	r0, r7
 800d4f0:	f7ff ff1a 	bl	800d328 <__i2b>
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	6003      	str	r3, [r0, #0]
 800d4fe:	f04f 0900 	mov.w	r9, #0
 800d502:	07eb      	lsls	r3, r5, #31
 800d504:	d50a      	bpl.n	800d51c <__pow5mult+0x84>
 800d506:	4631      	mov	r1, r6
 800d508:	4622      	mov	r2, r4
 800d50a:	4638      	mov	r0, r7
 800d50c:	f7ff ff22 	bl	800d354 <__multiply>
 800d510:	4631      	mov	r1, r6
 800d512:	4680      	mov	r8, r0
 800d514:	4638      	mov	r0, r7
 800d516:	f7ff fe53 	bl	800d1c0 <_Bfree>
 800d51a:	4646      	mov	r6, r8
 800d51c:	106d      	asrs	r5, r5, #1
 800d51e:	d00b      	beq.n	800d538 <__pow5mult+0xa0>
 800d520:	6820      	ldr	r0, [r4, #0]
 800d522:	b938      	cbnz	r0, 800d534 <__pow5mult+0x9c>
 800d524:	4622      	mov	r2, r4
 800d526:	4621      	mov	r1, r4
 800d528:	4638      	mov	r0, r7
 800d52a:	f7ff ff13 	bl	800d354 <__multiply>
 800d52e:	6020      	str	r0, [r4, #0]
 800d530:	f8c0 9000 	str.w	r9, [r0]
 800d534:	4604      	mov	r4, r0
 800d536:	e7e4      	b.n	800d502 <__pow5mult+0x6a>
 800d538:	4630      	mov	r0, r6
 800d53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d53e:	bf00      	nop
 800d540:	0800fe98 	.word	0x0800fe98
 800d544:	0800fd65 	.word	0x0800fd65
 800d548:	0800fde5 	.word	0x0800fde5

0800d54c <__lshift>:
 800d54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d550:	460c      	mov	r4, r1
 800d552:	6849      	ldr	r1, [r1, #4]
 800d554:	6923      	ldr	r3, [r4, #16]
 800d556:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d55a:	68a3      	ldr	r3, [r4, #8]
 800d55c:	4607      	mov	r7, r0
 800d55e:	4691      	mov	r9, r2
 800d560:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d564:	f108 0601 	add.w	r6, r8, #1
 800d568:	42b3      	cmp	r3, r6
 800d56a:	db0b      	blt.n	800d584 <__lshift+0x38>
 800d56c:	4638      	mov	r0, r7
 800d56e:	f7ff fde7 	bl	800d140 <_Balloc>
 800d572:	4605      	mov	r5, r0
 800d574:	b948      	cbnz	r0, 800d58a <__lshift+0x3e>
 800d576:	4602      	mov	r2, r0
 800d578:	4b28      	ldr	r3, [pc, #160]	@ (800d61c <__lshift+0xd0>)
 800d57a:	4829      	ldr	r0, [pc, #164]	@ (800d620 <__lshift+0xd4>)
 800d57c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d580:	f000 fd5a 	bl	800e038 <__assert_func>
 800d584:	3101      	adds	r1, #1
 800d586:	005b      	lsls	r3, r3, #1
 800d588:	e7ee      	b.n	800d568 <__lshift+0x1c>
 800d58a:	2300      	movs	r3, #0
 800d58c:	f100 0114 	add.w	r1, r0, #20
 800d590:	f100 0210 	add.w	r2, r0, #16
 800d594:	4618      	mov	r0, r3
 800d596:	4553      	cmp	r3, sl
 800d598:	db33      	blt.n	800d602 <__lshift+0xb6>
 800d59a:	6920      	ldr	r0, [r4, #16]
 800d59c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5a0:	f104 0314 	add.w	r3, r4, #20
 800d5a4:	f019 091f 	ands.w	r9, r9, #31
 800d5a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d5b0:	d02b      	beq.n	800d60a <__lshift+0xbe>
 800d5b2:	f1c9 0e20 	rsb	lr, r9, #32
 800d5b6:	468a      	mov	sl, r1
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	6818      	ldr	r0, [r3, #0]
 800d5bc:	fa00 f009 	lsl.w	r0, r0, r9
 800d5c0:	4310      	orrs	r0, r2
 800d5c2:	f84a 0b04 	str.w	r0, [sl], #4
 800d5c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ca:	459c      	cmp	ip, r3
 800d5cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d5d0:	d8f3      	bhi.n	800d5ba <__lshift+0x6e>
 800d5d2:	ebac 0304 	sub.w	r3, ip, r4
 800d5d6:	3b15      	subs	r3, #21
 800d5d8:	f023 0303 	bic.w	r3, r3, #3
 800d5dc:	3304      	adds	r3, #4
 800d5de:	f104 0015 	add.w	r0, r4, #21
 800d5e2:	4560      	cmp	r0, ip
 800d5e4:	bf88      	it	hi
 800d5e6:	2304      	movhi	r3, #4
 800d5e8:	50ca      	str	r2, [r1, r3]
 800d5ea:	b10a      	cbz	r2, 800d5f0 <__lshift+0xa4>
 800d5ec:	f108 0602 	add.w	r6, r8, #2
 800d5f0:	3e01      	subs	r6, #1
 800d5f2:	4638      	mov	r0, r7
 800d5f4:	612e      	str	r6, [r5, #16]
 800d5f6:	4621      	mov	r1, r4
 800d5f8:	f7ff fde2 	bl	800d1c0 <_Bfree>
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d602:	f842 0f04 	str.w	r0, [r2, #4]!
 800d606:	3301      	adds	r3, #1
 800d608:	e7c5      	b.n	800d596 <__lshift+0x4a>
 800d60a:	3904      	subs	r1, #4
 800d60c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d610:	f841 2f04 	str.w	r2, [r1, #4]!
 800d614:	459c      	cmp	ip, r3
 800d616:	d8f9      	bhi.n	800d60c <__lshift+0xc0>
 800d618:	e7ea      	b.n	800d5f0 <__lshift+0xa4>
 800d61a:	bf00      	nop
 800d61c:	0800fdd4 	.word	0x0800fdd4
 800d620:	0800fde5 	.word	0x0800fde5

0800d624 <__mcmp>:
 800d624:	690a      	ldr	r2, [r1, #16]
 800d626:	4603      	mov	r3, r0
 800d628:	6900      	ldr	r0, [r0, #16]
 800d62a:	1a80      	subs	r0, r0, r2
 800d62c:	b530      	push	{r4, r5, lr}
 800d62e:	d10e      	bne.n	800d64e <__mcmp+0x2a>
 800d630:	3314      	adds	r3, #20
 800d632:	3114      	adds	r1, #20
 800d634:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d638:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d63c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d640:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d644:	4295      	cmp	r5, r2
 800d646:	d003      	beq.n	800d650 <__mcmp+0x2c>
 800d648:	d205      	bcs.n	800d656 <__mcmp+0x32>
 800d64a:	f04f 30ff 	mov.w	r0, #4294967295
 800d64e:	bd30      	pop	{r4, r5, pc}
 800d650:	42a3      	cmp	r3, r4
 800d652:	d3f3      	bcc.n	800d63c <__mcmp+0x18>
 800d654:	e7fb      	b.n	800d64e <__mcmp+0x2a>
 800d656:	2001      	movs	r0, #1
 800d658:	e7f9      	b.n	800d64e <__mcmp+0x2a>
	...

0800d65c <__mdiff>:
 800d65c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d660:	4689      	mov	r9, r1
 800d662:	4606      	mov	r6, r0
 800d664:	4611      	mov	r1, r2
 800d666:	4648      	mov	r0, r9
 800d668:	4614      	mov	r4, r2
 800d66a:	f7ff ffdb 	bl	800d624 <__mcmp>
 800d66e:	1e05      	subs	r5, r0, #0
 800d670:	d112      	bne.n	800d698 <__mdiff+0x3c>
 800d672:	4629      	mov	r1, r5
 800d674:	4630      	mov	r0, r6
 800d676:	f7ff fd63 	bl	800d140 <_Balloc>
 800d67a:	4602      	mov	r2, r0
 800d67c:	b928      	cbnz	r0, 800d68a <__mdiff+0x2e>
 800d67e:	4b3f      	ldr	r3, [pc, #252]	@ (800d77c <__mdiff+0x120>)
 800d680:	f240 2137 	movw	r1, #567	@ 0x237
 800d684:	483e      	ldr	r0, [pc, #248]	@ (800d780 <__mdiff+0x124>)
 800d686:	f000 fcd7 	bl	800e038 <__assert_func>
 800d68a:	2301      	movs	r3, #1
 800d68c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d690:	4610      	mov	r0, r2
 800d692:	b003      	add	sp, #12
 800d694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d698:	bfbc      	itt	lt
 800d69a:	464b      	movlt	r3, r9
 800d69c:	46a1      	movlt	r9, r4
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d6a4:	bfba      	itte	lt
 800d6a6:	461c      	movlt	r4, r3
 800d6a8:	2501      	movlt	r5, #1
 800d6aa:	2500      	movge	r5, #0
 800d6ac:	f7ff fd48 	bl	800d140 <_Balloc>
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	b918      	cbnz	r0, 800d6bc <__mdiff+0x60>
 800d6b4:	4b31      	ldr	r3, [pc, #196]	@ (800d77c <__mdiff+0x120>)
 800d6b6:	f240 2145 	movw	r1, #581	@ 0x245
 800d6ba:	e7e3      	b.n	800d684 <__mdiff+0x28>
 800d6bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d6c0:	6926      	ldr	r6, [r4, #16]
 800d6c2:	60c5      	str	r5, [r0, #12]
 800d6c4:	f109 0310 	add.w	r3, r9, #16
 800d6c8:	f109 0514 	add.w	r5, r9, #20
 800d6cc:	f104 0e14 	add.w	lr, r4, #20
 800d6d0:	f100 0b14 	add.w	fp, r0, #20
 800d6d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d6d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d6dc:	9301      	str	r3, [sp, #4]
 800d6de:	46d9      	mov	r9, fp
 800d6e0:	f04f 0c00 	mov.w	ip, #0
 800d6e4:	9b01      	ldr	r3, [sp, #4]
 800d6e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d6ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d6ee:	9301      	str	r3, [sp, #4]
 800d6f0:	fa1f f38a 	uxth.w	r3, sl
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	b283      	uxth	r3, r0
 800d6f8:	1acb      	subs	r3, r1, r3
 800d6fa:	0c00      	lsrs	r0, r0, #16
 800d6fc:	4463      	add	r3, ip
 800d6fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d702:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d706:	b29b      	uxth	r3, r3
 800d708:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d70c:	4576      	cmp	r6, lr
 800d70e:	f849 3b04 	str.w	r3, [r9], #4
 800d712:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d716:	d8e5      	bhi.n	800d6e4 <__mdiff+0x88>
 800d718:	1b33      	subs	r3, r6, r4
 800d71a:	3b15      	subs	r3, #21
 800d71c:	f023 0303 	bic.w	r3, r3, #3
 800d720:	3415      	adds	r4, #21
 800d722:	3304      	adds	r3, #4
 800d724:	42a6      	cmp	r6, r4
 800d726:	bf38      	it	cc
 800d728:	2304      	movcc	r3, #4
 800d72a:	441d      	add	r5, r3
 800d72c:	445b      	add	r3, fp
 800d72e:	461e      	mov	r6, r3
 800d730:	462c      	mov	r4, r5
 800d732:	4544      	cmp	r4, r8
 800d734:	d30e      	bcc.n	800d754 <__mdiff+0xf8>
 800d736:	f108 0103 	add.w	r1, r8, #3
 800d73a:	1b49      	subs	r1, r1, r5
 800d73c:	f021 0103 	bic.w	r1, r1, #3
 800d740:	3d03      	subs	r5, #3
 800d742:	45a8      	cmp	r8, r5
 800d744:	bf38      	it	cc
 800d746:	2100      	movcc	r1, #0
 800d748:	440b      	add	r3, r1
 800d74a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d74e:	b191      	cbz	r1, 800d776 <__mdiff+0x11a>
 800d750:	6117      	str	r7, [r2, #16]
 800d752:	e79d      	b.n	800d690 <__mdiff+0x34>
 800d754:	f854 1b04 	ldr.w	r1, [r4], #4
 800d758:	46e6      	mov	lr, ip
 800d75a:	0c08      	lsrs	r0, r1, #16
 800d75c:	fa1c fc81 	uxtah	ip, ip, r1
 800d760:	4471      	add	r1, lr
 800d762:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d766:	b289      	uxth	r1, r1
 800d768:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d76c:	f846 1b04 	str.w	r1, [r6], #4
 800d770:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d774:	e7dd      	b.n	800d732 <__mdiff+0xd6>
 800d776:	3f01      	subs	r7, #1
 800d778:	e7e7      	b.n	800d74a <__mdiff+0xee>
 800d77a:	bf00      	nop
 800d77c:	0800fdd4 	.word	0x0800fdd4
 800d780:	0800fde5 	.word	0x0800fde5

0800d784 <__d2b>:
 800d784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d788:	460f      	mov	r7, r1
 800d78a:	2101      	movs	r1, #1
 800d78c:	ec59 8b10 	vmov	r8, r9, d0
 800d790:	4616      	mov	r6, r2
 800d792:	f7ff fcd5 	bl	800d140 <_Balloc>
 800d796:	4604      	mov	r4, r0
 800d798:	b930      	cbnz	r0, 800d7a8 <__d2b+0x24>
 800d79a:	4602      	mov	r2, r0
 800d79c:	4b23      	ldr	r3, [pc, #140]	@ (800d82c <__d2b+0xa8>)
 800d79e:	4824      	ldr	r0, [pc, #144]	@ (800d830 <__d2b+0xac>)
 800d7a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800d7a4:	f000 fc48 	bl	800e038 <__assert_func>
 800d7a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d7ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7b0:	b10d      	cbz	r5, 800d7b6 <__d2b+0x32>
 800d7b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d7b6:	9301      	str	r3, [sp, #4]
 800d7b8:	f1b8 0300 	subs.w	r3, r8, #0
 800d7bc:	d023      	beq.n	800d806 <__d2b+0x82>
 800d7be:	4668      	mov	r0, sp
 800d7c0:	9300      	str	r3, [sp, #0]
 800d7c2:	f7ff fd84 	bl	800d2ce <__lo0bits>
 800d7c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d7ca:	b1d0      	cbz	r0, 800d802 <__d2b+0x7e>
 800d7cc:	f1c0 0320 	rsb	r3, r0, #32
 800d7d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d7d4:	430b      	orrs	r3, r1
 800d7d6:	40c2      	lsrs	r2, r0
 800d7d8:	6163      	str	r3, [r4, #20]
 800d7da:	9201      	str	r2, [sp, #4]
 800d7dc:	9b01      	ldr	r3, [sp, #4]
 800d7de:	61a3      	str	r3, [r4, #24]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	bf0c      	ite	eq
 800d7e4:	2201      	moveq	r2, #1
 800d7e6:	2202      	movne	r2, #2
 800d7e8:	6122      	str	r2, [r4, #16]
 800d7ea:	b1a5      	cbz	r5, 800d816 <__d2b+0x92>
 800d7ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d7f0:	4405      	add	r5, r0
 800d7f2:	603d      	str	r5, [r7, #0]
 800d7f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d7f8:	6030      	str	r0, [r6, #0]
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	b003      	add	sp, #12
 800d7fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d802:	6161      	str	r1, [r4, #20]
 800d804:	e7ea      	b.n	800d7dc <__d2b+0x58>
 800d806:	a801      	add	r0, sp, #4
 800d808:	f7ff fd61 	bl	800d2ce <__lo0bits>
 800d80c:	9b01      	ldr	r3, [sp, #4]
 800d80e:	6163      	str	r3, [r4, #20]
 800d810:	3020      	adds	r0, #32
 800d812:	2201      	movs	r2, #1
 800d814:	e7e8      	b.n	800d7e8 <__d2b+0x64>
 800d816:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d81a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d81e:	6038      	str	r0, [r7, #0]
 800d820:	6918      	ldr	r0, [r3, #16]
 800d822:	f7ff fd35 	bl	800d290 <__hi0bits>
 800d826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d82a:	e7e5      	b.n	800d7f8 <__d2b+0x74>
 800d82c:	0800fdd4 	.word	0x0800fdd4
 800d830:	0800fde5 	.word	0x0800fde5

0800d834 <__ssputs_r>:
 800d834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d838:	688e      	ldr	r6, [r1, #8]
 800d83a:	461f      	mov	r7, r3
 800d83c:	42be      	cmp	r6, r7
 800d83e:	680b      	ldr	r3, [r1, #0]
 800d840:	4682      	mov	sl, r0
 800d842:	460c      	mov	r4, r1
 800d844:	4690      	mov	r8, r2
 800d846:	d82d      	bhi.n	800d8a4 <__ssputs_r+0x70>
 800d848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d84c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d850:	d026      	beq.n	800d8a0 <__ssputs_r+0x6c>
 800d852:	6965      	ldr	r5, [r4, #20]
 800d854:	6909      	ldr	r1, [r1, #16]
 800d856:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d85a:	eba3 0901 	sub.w	r9, r3, r1
 800d85e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d862:	1c7b      	adds	r3, r7, #1
 800d864:	444b      	add	r3, r9
 800d866:	106d      	asrs	r5, r5, #1
 800d868:	429d      	cmp	r5, r3
 800d86a:	bf38      	it	cc
 800d86c:	461d      	movcc	r5, r3
 800d86e:	0553      	lsls	r3, r2, #21
 800d870:	d527      	bpl.n	800d8c2 <__ssputs_r+0x8e>
 800d872:	4629      	mov	r1, r5
 800d874:	f7ff fbd8 	bl	800d028 <_malloc_r>
 800d878:	4606      	mov	r6, r0
 800d87a:	b360      	cbz	r0, 800d8d6 <__ssputs_r+0xa2>
 800d87c:	6921      	ldr	r1, [r4, #16]
 800d87e:	464a      	mov	r2, r9
 800d880:	f000 fbcc 	bl	800e01c <memcpy>
 800d884:	89a3      	ldrh	r3, [r4, #12]
 800d886:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d88a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d88e:	81a3      	strh	r3, [r4, #12]
 800d890:	6126      	str	r6, [r4, #16]
 800d892:	6165      	str	r5, [r4, #20]
 800d894:	444e      	add	r6, r9
 800d896:	eba5 0509 	sub.w	r5, r5, r9
 800d89a:	6026      	str	r6, [r4, #0]
 800d89c:	60a5      	str	r5, [r4, #8]
 800d89e:	463e      	mov	r6, r7
 800d8a0:	42be      	cmp	r6, r7
 800d8a2:	d900      	bls.n	800d8a6 <__ssputs_r+0x72>
 800d8a4:	463e      	mov	r6, r7
 800d8a6:	6820      	ldr	r0, [r4, #0]
 800d8a8:	4632      	mov	r2, r6
 800d8aa:	4641      	mov	r1, r8
 800d8ac:	f000 fb6a 	bl	800df84 <memmove>
 800d8b0:	68a3      	ldr	r3, [r4, #8]
 800d8b2:	1b9b      	subs	r3, r3, r6
 800d8b4:	60a3      	str	r3, [r4, #8]
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	4433      	add	r3, r6
 800d8ba:	6023      	str	r3, [r4, #0]
 800d8bc:	2000      	movs	r0, #0
 800d8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8c2:	462a      	mov	r2, r5
 800d8c4:	f000 fbfc 	bl	800e0c0 <_realloc_r>
 800d8c8:	4606      	mov	r6, r0
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d1e0      	bne.n	800d890 <__ssputs_r+0x5c>
 800d8ce:	6921      	ldr	r1, [r4, #16]
 800d8d0:	4650      	mov	r0, sl
 800d8d2:	f7ff fb35 	bl	800cf40 <_free_r>
 800d8d6:	230c      	movs	r3, #12
 800d8d8:	f8ca 3000 	str.w	r3, [sl]
 800d8dc:	89a3      	ldrh	r3, [r4, #12]
 800d8de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8e2:	81a3      	strh	r3, [r4, #12]
 800d8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e8:	e7e9      	b.n	800d8be <__ssputs_r+0x8a>
	...

0800d8ec <_svfiprintf_r>:
 800d8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f0:	4698      	mov	r8, r3
 800d8f2:	898b      	ldrh	r3, [r1, #12]
 800d8f4:	061b      	lsls	r3, r3, #24
 800d8f6:	b09d      	sub	sp, #116	@ 0x74
 800d8f8:	4607      	mov	r7, r0
 800d8fa:	460d      	mov	r5, r1
 800d8fc:	4614      	mov	r4, r2
 800d8fe:	d510      	bpl.n	800d922 <_svfiprintf_r+0x36>
 800d900:	690b      	ldr	r3, [r1, #16]
 800d902:	b973      	cbnz	r3, 800d922 <_svfiprintf_r+0x36>
 800d904:	2140      	movs	r1, #64	@ 0x40
 800d906:	f7ff fb8f 	bl	800d028 <_malloc_r>
 800d90a:	6028      	str	r0, [r5, #0]
 800d90c:	6128      	str	r0, [r5, #16]
 800d90e:	b930      	cbnz	r0, 800d91e <_svfiprintf_r+0x32>
 800d910:	230c      	movs	r3, #12
 800d912:	603b      	str	r3, [r7, #0]
 800d914:	f04f 30ff 	mov.w	r0, #4294967295
 800d918:	b01d      	add	sp, #116	@ 0x74
 800d91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d91e:	2340      	movs	r3, #64	@ 0x40
 800d920:	616b      	str	r3, [r5, #20]
 800d922:	2300      	movs	r3, #0
 800d924:	9309      	str	r3, [sp, #36]	@ 0x24
 800d926:	2320      	movs	r3, #32
 800d928:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d92c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d930:	2330      	movs	r3, #48	@ 0x30
 800d932:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dad0 <_svfiprintf_r+0x1e4>
 800d936:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d93a:	f04f 0901 	mov.w	r9, #1
 800d93e:	4623      	mov	r3, r4
 800d940:	469a      	mov	sl, r3
 800d942:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d946:	b10a      	cbz	r2, 800d94c <_svfiprintf_r+0x60>
 800d948:	2a25      	cmp	r2, #37	@ 0x25
 800d94a:	d1f9      	bne.n	800d940 <_svfiprintf_r+0x54>
 800d94c:	ebba 0b04 	subs.w	fp, sl, r4
 800d950:	d00b      	beq.n	800d96a <_svfiprintf_r+0x7e>
 800d952:	465b      	mov	r3, fp
 800d954:	4622      	mov	r2, r4
 800d956:	4629      	mov	r1, r5
 800d958:	4638      	mov	r0, r7
 800d95a:	f7ff ff6b 	bl	800d834 <__ssputs_r>
 800d95e:	3001      	adds	r0, #1
 800d960:	f000 80a7 	beq.w	800dab2 <_svfiprintf_r+0x1c6>
 800d964:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d966:	445a      	add	r2, fp
 800d968:	9209      	str	r2, [sp, #36]	@ 0x24
 800d96a:	f89a 3000 	ldrb.w	r3, [sl]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	f000 809f 	beq.w	800dab2 <_svfiprintf_r+0x1c6>
 800d974:	2300      	movs	r3, #0
 800d976:	f04f 32ff 	mov.w	r2, #4294967295
 800d97a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d97e:	f10a 0a01 	add.w	sl, sl, #1
 800d982:	9304      	str	r3, [sp, #16]
 800d984:	9307      	str	r3, [sp, #28]
 800d986:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d98a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d98c:	4654      	mov	r4, sl
 800d98e:	2205      	movs	r2, #5
 800d990:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d994:	484e      	ldr	r0, [pc, #312]	@ (800dad0 <_svfiprintf_r+0x1e4>)
 800d996:	f7f2 fc1b 	bl	80001d0 <memchr>
 800d99a:	9a04      	ldr	r2, [sp, #16]
 800d99c:	b9d8      	cbnz	r0, 800d9d6 <_svfiprintf_r+0xea>
 800d99e:	06d0      	lsls	r0, r2, #27
 800d9a0:	bf44      	itt	mi
 800d9a2:	2320      	movmi	r3, #32
 800d9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9a8:	0711      	lsls	r1, r2, #28
 800d9aa:	bf44      	itt	mi
 800d9ac:	232b      	movmi	r3, #43	@ 0x2b
 800d9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d9b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9b8:	d015      	beq.n	800d9e6 <_svfiprintf_r+0xfa>
 800d9ba:	9a07      	ldr	r2, [sp, #28]
 800d9bc:	4654      	mov	r4, sl
 800d9be:	2000      	movs	r0, #0
 800d9c0:	f04f 0c0a 	mov.w	ip, #10
 800d9c4:	4621      	mov	r1, r4
 800d9c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9ca:	3b30      	subs	r3, #48	@ 0x30
 800d9cc:	2b09      	cmp	r3, #9
 800d9ce:	d94b      	bls.n	800da68 <_svfiprintf_r+0x17c>
 800d9d0:	b1b0      	cbz	r0, 800da00 <_svfiprintf_r+0x114>
 800d9d2:	9207      	str	r2, [sp, #28]
 800d9d4:	e014      	b.n	800da00 <_svfiprintf_r+0x114>
 800d9d6:	eba0 0308 	sub.w	r3, r0, r8
 800d9da:	fa09 f303 	lsl.w	r3, r9, r3
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	9304      	str	r3, [sp, #16]
 800d9e2:	46a2      	mov	sl, r4
 800d9e4:	e7d2      	b.n	800d98c <_svfiprintf_r+0xa0>
 800d9e6:	9b03      	ldr	r3, [sp, #12]
 800d9e8:	1d19      	adds	r1, r3, #4
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	9103      	str	r1, [sp, #12]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	bfbb      	ittet	lt
 800d9f2:	425b      	neglt	r3, r3
 800d9f4:	f042 0202 	orrlt.w	r2, r2, #2
 800d9f8:	9307      	strge	r3, [sp, #28]
 800d9fa:	9307      	strlt	r3, [sp, #28]
 800d9fc:	bfb8      	it	lt
 800d9fe:	9204      	strlt	r2, [sp, #16]
 800da00:	7823      	ldrb	r3, [r4, #0]
 800da02:	2b2e      	cmp	r3, #46	@ 0x2e
 800da04:	d10a      	bne.n	800da1c <_svfiprintf_r+0x130>
 800da06:	7863      	ldrb	r3, [r4, #1]
 800da08:	2b2a      	cmp	r3, #42	@ 0x2a
 800da0a:	d132      	bne.n	800da72 <_svfiprintf_r+0x186>
 800da0c:	9b03      	ldr	r3, [sp, #12]
 800da0e:	1d1a      	adds	r2, r3, #4
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	9203      	str	r2, [sp, #12]
 800da14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da18:	3402      	adds	r4, #2
 800da1a:	9305      	str	r3, [sp, #20]
 800da1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dae0 <_svfiprintf_r+0x1f4>
 800da20:	7821      	ldrb	r1, [r4, #0]
 800da22:	2203      	movs	r2, #3
 800da24:	4650      	mov	r0, sl
 800da26:	f7f2 fbd3 	bl	80001d0 <memchr>
 800da2a:	b138      	cbz	r0, 800da3c <_svfiprintf_r+0x150>
 800da2c:	9b04      	ldr	r3, [sp, #16]
 800da2e:	eba0 000a 	sub.w	r0, r0, sl
 800da32:	2240      	movs	r2, #64	@ 0x40
 800da34:	4082      	lsls	r2, r0
 800da36:	4313      	orrs	r3, r2
 800da38:	3401      	adds	r4, #1
 800da3a:	9304      	str	r3, [sp, #16]
 800da3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da40:	4824      	ldr	r0, [pc, #144]	@ (800dad4 <_svfiprintf_r+0x1e8>)
 800da42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da46:	2206      	movs	r2, #6
 800da48:	f7f2 fbc2 	bl	80001d0 <memchr>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	d036      	beq.n	800dabe <_svfiprintf_r+0x1d2>
 800da50:	4b21      	ldr	r3, [pc, #132]	@ (800dad8 <_svfiprintf_r+0x1ec>)
 800da52:	bb1b      	cbnz	r3, 800da9c <_svfiprintf_r+0x1b0>
 800da54:	9b03      	ldr	r3, [sp, #12]
 800da56:	3307      	adds	r3, #7
 800da58:	f023 0307 	bic.w	r3, r3, #7
 800da5c:	3308      	adds	r3, #8
 800da5e:	9303      	str	r3, [sp, #12]
 800da60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da62:	4433      	add	r3, r6
 800da64:	9309      	str	r3, [sp, #36]	@ 0x24
 800da66:	e76a      	b.n	800d93e <_svfiprintf_r+0x52>
 800da68:	fb0c 3202 	mla	r2, ip, r2, r3
 800da6c:	460c      	mov	r4, r1
 800da6e:	2001      	movs	r0, #1
 800da70:	e7a8      	b.n	800d9c4 <_svfiprintf_r+0xd8>
 800da72:	2300      	movs	r3, #0
 800da74:	3401      	adds	r4, #1
 800da76:	9305      	str	r3, [sp, #20]
 800da78:	4619      	mov	r1, r3
 800da7a:	f04f 0c0a 	mov.w	ip, #10
 800da7e:	4620      	mov	r0, r4
 800da80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da84:	3a30      	subs	r2, #48	@ 0x30
 800da86:	2a09      	cmp	r2, #9
 800da88:	d903      	bls.n	800da92 <_svfiprintf_r+0x1a6>
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d0c6      	beq.n	800da1c <_svfiprintf_r+0x130>
 800da8e:	9105      	str	r1, [sp, #20]
 800da90:	e7c4      	b.n	800da1c <_svfiprintf_r+0x130>
 800da92:	fb0c 2101 	mla	r1, ip, r1, r2
 800da96:	4604      	mov	r4, r0
 800da98:	2301      	movs	r3, #1
 800da9a:	e7f0      	b.n	800da7e <_svfiprintf_r+0x192>
 800da9c:	ab03      	add	r3, sp, #12
 800da9e:	9300      	str	r3, [sp, #0]
 800daa0:	462a      	mov	r2, r5
 800daa2:	4b0e      	ldr	r3, [pc, #56]	@ (800dadc <_svfiprintf_r+0x1f0>)
 800daa4:	a904      	add	r1, sp, #16
 800daa6:	4638      	mov	r0, r7
 800daa8:	f7fd fd80 	bl	800b5ac <_printf_float>
 800daac:	1c42      	adds	r2, r0, #1
 800daae:	4606      	mov	r6, r0
 800dab0:	d1d6      	bne.n	800da60 <_svfiprintf_r+0x174>
 800dab2:	89ab      	ldrh	r3, [r5, #12]
 800dab4:	065b      	lsls	r3, r3, #25
 800dab6:	f53f af2d 	bmi.w	800d914 <_svfiprintf_r+0x28>
 800daba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dabc:	e72c      	b.n	800d918 <_svfiprintf_r+0x2c>
 800dabe:	ab03      	add	r3, sp, #12
 800dac0:	9300      	str	r3, [sp, #0]
 800dac2:	462a      	mov	r2, r5
 800dac4:	4b05      	ldr	r3, [pc, #20]	@ (800dadc <_svfiprintf_r+0x1f0>)
 800dac6:	a904      	add	r1, sp, #16
 800dac8:	4638      	mov	r0, r7
 800daca:	f7fe f807 	bl	800badc <_printf_i>
 800dace:	e7ed      	b.n	800daac <_svfiprintf_r+0x1c0>
 800dad0:	0800fe3e 	.word	0x0800fe3e
 800dad4:	0800fe48 	.word	0x0800fe48
 800dad8:	0800b5ad 	.word	0x0800b5ad
 800dadc:	0800d835 	.word	0x0800d835
 800dae0:	0800fe44 	.word	0x0800fe44

0800dae4 <__sfputc_r>:
 800dae4:	6893      	ldr	r3, [r2, #8]
 800dae6:	3b01      	subs	r3, #1
 800dae8:	2b00      	cmp	r3, #0
 800daea:	b410      	push	{r4}
 800daec:	6093      	str	r3, [r2, #8]
 800daee:	da08      	bge.n	800db02 <__sfputc_r+0x1e>
 800daf0:	6994      	ldr	r4, [r2, #24]
 800daf2:	42a3      	cmp	r3, r4
 800daf4:	db01      	blt.n	800dafa <__sfputc_r+0x16>
 800daf6:	290a      	cmp	r1, #10
 800daf8:	d103      	bne.n	800db02 <__sfputc_r+0x1e>
 800dafa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dafe:	f7fe baa2 	b.w	800c046 <__swbuf_r>
 800db02:	6813      	ldr	r3, [r2, #0]
 800db04:	1c58      	adds	r0, r3, #1
 800db06:	6010      	str	r0, [r2, #0]
 800db08:	7019      	strb	r1, [r3, #0]
 800db0a:	4608      	mov	r0, r1
 800db0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db10:	4770      	bx	lr

0800db12 <__sfputs_r>:
 800db12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db14:	4606      	mov	r6, r0
 800db16:	460f      	mov	r7, r1
 800db18:	4614      	mov	r4, r2
 800db1a:	18d5      	adds	r5, r2, r3
 800db1c:	42ac      	cmp	r4, r5
 800db1e:	d101      	bne.n	800db24 <__sfputs_r+0x12>
 800db20:	2000      	movs	r0, #0
 800db22:	e007      	b.n	800db34 <__sfputs_r+0x22>
 800db24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db28:	463a      	mov	r2, r7
 800db2a:	4630      	mov	r0, r6
 800db2c:	f7ff ffda 	bl	800dae4 <__sfputc_r>
 800db30:	1c43      	adds	r3, r0, #1
 800db32:	d1f3      	bne.n	800db1c <__sfputs_r+0xa>
 800db34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800db38 <_vfiprintf_r>:
 800db38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3c:	460d      	mov	r5, r1
 800db3e:	b09d      	sub	sp, #116	@ 0x74
 800db40:	4614      	mov	r4, r2
 800db42:	4698      	mov	r8, r3
 800db44:	4606      	mov	r6, r0
 800db46:	b118      	cbz	r0, 800db50 <_vfiprintf_r+0x18>
 800db48:	6a03      	ldr	r3, [r0, #32]
 800db4a:	b90b      	cbnz	r3, 800db50 <_vfiprintf_r+0x18>
 800db4c:	f7fe f970 	bl	800be30 <__sinit>
 800db50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db52:	07d9      	lsls	r1, r3, #31
 800db54:	d405      	bmi.n	800db62 <_vfiprintf_r+0x2a>
 800db56:	89ab      	ldrh	r3, [r5, #12]
 800db58:	059a      	lsls	r2, r3, #22
 800db5a:	d402      	bmi.n	800db62 <_vfiprintf_r+0x2a>
 800db5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db5e:	f7fe fb94 	bl	800c28a <__retarget_lock_acquire_recursive>
 800db62:	89ab      	ldrh	r3, [r5, #12]
 800db64:	071b      	lsls	r3, r3, #28
 800db66:	d501      	bpl.n	800db6c <_vfiprintf_r+0x34>
 800db68:	692b      	ldr	r3, [r5, #16]
 800db6a:	b99b      	cbnz	r3, 800db94 <_vfiprintf_r+0x5c>
 800db6c:	4629      	mov	r1, r5
 800db6e:	4630      	mov	r0, r6
 800db70:	f7fe faa8 	bl	800c0c4 <__swsetup_r>
 800db74:	b170      	cbz	r0, 800db94 <_vfiprintf_r+0x5c>
 800db76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db78:	07dc      	lsls	r4, r3, #31
 800db7a:	d504      	bpl.n	800db86 <_vfiprintf_r+0x4e>
 800db7c:	f04f 30ff 	mov.w	r0, #4294967295
 800db80:	b01d      	add	sp, #116	@ 0x74
 800db82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db86:	89ab      	ldrh	r3, [r5, #12]
 800db88:	0598      	lsls	r0, r3, #22
 800db8a:	d4f7      	bmi.n	800db7c <_vfiprintf_r+0x44>
 800db8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db8e:	f7fe fb7d 	bl	800c28c <__retarget_lock_release_recursive>
 800db92:	e7f3      	b.n	800db7c <_vfiprintf_r+0x44>
 800db94:	2300      	movs	r3, #0
 800db96:	9309      	str	r3, [sp, #36]	@ 0x24
 800db98:	2320      	movs	r3, #32
 800db9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800dba2:	2330      	movs	r3, #48	@ 0x30
 800dba4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dd54 <_vfiprintf_r+0x21c>
 800dba8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dbac:	f04f 0901 	mov.w	r9, #1
 800dbb0:	4623      	mov	r3, r4
 800dbb2:	469a      	mov	sl, r3
 800dbb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbb8:	b10a      	cbz	r2, 800dbbe <_vfiprintf_r+0x86>
 800dbba:	2a25      	cmp	r2, #37	@ 0x25
 800dbbc:	d1f9      	bne.n	800dbb2 <_vfiprintf_r+0x7a>
 800dbbe:	ebba 0b04 	subs.w	fp, sl, r4
 800dbc2:	d00b      	beq.n	800dbdc <_vfiprintf_r+0xa4>
 800dbc4:	465b      	mov	r3, fp
 800dbc6:	4622      	mov	r2, r4
 800dbc8:	4629      	mov	r1, r5
 800dbca:	4630      	mov	r0, r6
 800dbcc:	f7ff ffa1 	bl	800db12 <__sfputs_r>
 800dbd0:	3001      	adds	r0, #1
 800dbd2:	f000 80a7 	beq.w	800dd24 <_vfiprintf_r+0x1ec>
 800dbd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbd8:	445a      	add	r2, fp
 800dbda:	9209      	str	r2, [sp, #36]	@ 0x24
 800dbdc:	f89a 3000 	ldrb.w	r3, [sl]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	f000 809f 	beq.w	800dd24 <_vfiprintf_r+0x1ec>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbf0:	f10a 0a01 	add.w	sl, sl, #1
 800dbf4:	9304      	str	r3, [sp, #16]
 800dbf6:	9307      	str	r3, [sp, #28]
 800dbf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dbfc:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbfe:	4654      	mov	r4, sl
 800dc00:	2205      	movs	r2, #5
 800dc02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc06:	4853      	ldr	r0, [pc, #332]	@ (800dd54 <_vfiprintf_r+0x21c>)
 800dc08:	f7f2 fae2 	bl	80001d0 <memchr>
 800dc0c:	9a04      	ldr	r2, [sp, #16]
 800dc0e:	b9d8      	cbnz	r0, 800dc48 <_vfiprintf_r+0x110>
 800dc10:	06d1      	lsls	r1, r2, #27
 800dc12:	bf44      	itt	mi
 800dc14:	2320      	movmi	r3, #32
 800dc16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc1a:	0713      	lsls	r3, r2, #28
 800dc1c:	bf44      	itt	mi
 800dc1e:	232b      	movmi	r3, #43	@ 0x2b
 800dc20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc24:	f89a 3000 	ldrb.w	r3, [sl]
 800dc28:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc2a:	d015      	beq.n	800dc58 <_vfiprintf_r+0x120>
 800dc2c:	9a07      	ldr	r2, [sp, #28]
 800dc2e:	4654      	mov	r4, sl
 800dc30:	2000      	movs	r0, #0
 800dc32:	f04f 0c0a 	mov.w	ip, #10
 800dc36:	4621      	mov	r1, r4
 800dc38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc3c:	3b30      	subs	r3, #48	@ 0x30
 800dc3e:	2b09      	cmp	r3, #9
 800dc40:	d94b      	bls.n	800dcda <_vfiprintf_r+0x1a2>
 800dc42:	b1b0      	cbz	r0, 800dc72 <_vfiprintf_r+0x13a>
 800dc44:	9207      	str	r2, [sp, #28]
 800dc46:	e014      	b.n	800dc72 <_vfiprintf_r+0x13a>
 800dc48:	eba0 0308 	sub.w	r3, r0, r8
 800dc4c:	fa09 f303 	lsl.w	r3, r9, r3
 800dc50:	4313      	orrs	r3, r2
 800dc52:	9304      	str	r3, [sp, #16]
 800dc54:	46a2      	mov	sl, r4
 800dc56:	e7d2      	b.n	800dbfe <_vfiprintf_r+0xc6>
 800dc58:	9b03      	ldr	r3, [sp, #12]
 800dc5a:	1d19      	adds	r1, r3, #4
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	9103      	str	r1, [sp, #12]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	bfbb      	ittet	lt
 800dc64:	425b      	neglt	r3, r3
 800dc66:	f042 0202 	orrlt.w	r2, r2, #2
 800dc6a:	9307      	strge	r3, [sp, #28]
 800dc6c:	9307      	strlt	r3, [sp, #28]
 800dc6e:	bfb8      	it	lt
 800dc70:	9204      	strlt	r2, [sp, #16]
 800dc72:	7823      	ldrb	r3, [r4, #0]
 800dc74:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc76:	d10a      	bne.n	800dc8e <_vfiprintf_r+0x156>
 800dc78:	7863      	ldrb	r3, [r4, #1]
 800dc7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc7c:	d132      	bne.n	800dce4 <_vfiprintf_r+0x1ac>
 800dc7e:	9b03      	ldr	r3, [sp, #12]
 800dc80:	1d1a      	adds	r2, r3, #4
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	9203      	str	r2, [sp, #12]
 800dc86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc8a:	3402      	adds	r4, #2
 800dc8c:	9305      	str	r3, [sp, #20]
 800dc8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dd64 <_vfiprintf_r+0x22c>
 800dc92:	7821      	ldrb	r1, [r4, #0]
 800dc94:	2203      	movs	r2, #3
 800dc96:	4650      	mov	r0, sl
 800dc98:	f7f2 fa9a 	bl	80001d0 <memchr>
 800dc9c:	b138      	cbz	r0, 800dcae <_vfiprintf_r+0x176>
 800dc9e:	9b04      	ldr	r3, [sp, #16]
 800dca0:	eba0 000a 	sub.w	r0, r0, sl
 800dca4:	2240      	movs	r2, #64	@ 0x40
 800dca6:	4082      	lsls	r2, r0
 800dca8:	4313      	orrs	r3, r2
 800dcaa:	3401      	adds	r4, #1
 800dcac:	9304      	str	r3, [sp, #16]
 800dcae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcb2:	4829      	ldr	r0, [pc, #164]	@ (800dd58 <_vfiprintf_r+0x220>)
 800dcb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dcb8:	2206      	movs	r2, #6
 800dcba:	f7f2 fa89 	bl	80001d0 <memchr>
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	d03f      	beq.n	800dd42 <_vfiprintf_r+0x20a>
 800dcc2:	4b26      	ldr	r3, [pc, #152]	@ (800dd5c <_vfiprintf_r+0x224>)
 800dcc4:	bb1b      	cbnz	r3, 800dd0e <_vfiprintf_r+0x1d6>
 800dcc6:	9b03      	ldr	r3, [sp, #12]
 800dcc8:	3307      	adds	r3, #7
 800dcca:	f023 0307 	bic.w	r3, r3, #7
 800dcce:	3308      	adds	r3, #8
 800dcd0:	9303      	str	r3, [sp, #12]
 800dcd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcd4:	443b      	add	r3, r7
 800dcd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcd8:	e76a      	b.n	800dbb0 <_vfiprintf_r+0x78>
 800dcda:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcde:	460c      	mov	r4, r1
 800dce0:	2001      	movs	r0, #1
 800dce2:	e7a8      	b.n	800dc36 <_vfiprintf_r+0xfe>
 800dce4:	2300      	movs	r3, #0
 800dce6:	3401      	adds	r4, #1
 800dce8:	9305      	str	r3, [sp, #20]
 800dcea:	4619      	mov	r1, r3
 800dcec:	f04f 0c0a 	mov.w	ip, #10
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcf6:	3a30      	subs	r2, #48	@ 0x30
 800dcf8:	2a09      	cmp	r2, #9
 800dcfa:	d903      	bls.n	800dd04 <_vfiprintf_r+0x1cc>
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d0c6      	beq.n	800dc8e <_vfiprintf_r+0x156>
 800dd00:	9105      	str	r1, [sp, #20]
 800dd02:	e7c4      	b.n	800dc8e <_vfiprintf_r+0x156>
 800dd04:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd08:	4604      	mov	r4, r0
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	e7f0      	b.n	800dcf0 <_vfiprintf_r+0x1b8>
 800dd0e:	ab03      	add	r3, sp, #12
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	462a      	mov	r2, r5
 800dd14:	4b12      	ldr	r3, [pc, #72]	@ (800dd60 <_vfiprintf_r+0x228>)
 800dd16:	a904      	add	r1, sp, #16
 800dd18:	4630      	mov	r0, r6
 800dd1a:	f7fd fc47 	bl	800b5ac <_printf_float>
 800dd1e:	4607      	mov	r7, r0
 800dd20:	1c78      	adds	r0, r7, #1
 800dd22:	d1d6      	bne.n	800dcd2 <_vfiprintf_r+0x19a>
 800dd24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd26:	07d9      	lsls	r1, r3, #31
 800dd28:	d405      	bmi.n	800dd36 <_vfiprintf_r+0x1fe>
 800dd2a:	89ab      	ldrh	r3, [r5, #12]
 800dd2c:	059a      	lsls	r2, r3, #22
 800dd2e:	d402      	bmi.n	800dd36 <_vfiprintf_r+0x1fe>
 800dd30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd32:	f7fe faab 	bl	800c28c <__retarget_lock_release_recursive>
 800dd36:	89ab      	ldrh	r3, [r5, #12]
 800dd38:	065b      	lsls	r3, r3, #25
 800dd3a:	f53f af1f 	bmi.w	800db7c <_vfiprintf_r+0x44>
 800dd3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd40:	e71e      	b.n	800db80 <_vfiprintf_r+0x48>
 800dd42:	ab03      	add	r3, sp, #12
 800dd44:	9300      	str	r3, [sp, #0]
 800dd46:	462a      	mov	r2, r5
 800dd48:	4b05      	ldr	r3, [pc, #20]	@ (800dd60 <_vfiprintf_r+0x228>)
 800dd4a:	a904      	add	r1, sp, #16
 800dd4c:	4630      	mov	r0, r6
 800dd4e:	f7fd fec5 	bl	800badc <_printf_i>
 800dd52:	e7e4      	b.n	800dd1e <_vfiprintf_r+0x1e6>
 800dd54:	0800fe3e 	.word	0x0800fe3e
 800dd58:	0800fe48 	.word	0x0800fe48
 800dd5c:	0800b5ad 	.word	0x0800b5ad
 800dd60:	0800db13 	.word	0x0800db13
 800dd64:	0800fe44 	.word	0x0800fe44

0800dd68 <__sflush_r>:
 800dd68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd70:	0716      	lsls	r6, r2, #28
 800dd72:	4605      	mov	r5, r0
 800dd74:	460c      	mov	r4, r1
 800dd76:	d454      	bmi.n	800de22 <__sflush_r+0xba>
 800dd78:	684b      	ldr	r3, [r1, #4]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	dc02      	bgt.n	800dd84 <__sflush_r+0x1c>
 800dd7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	dd48      	ble.n	800de16 <__sflush_r+0xae>
 800dd84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd86:	2e00      	cmp	r6, #0
 800dd88:	d045      	beq.n	800de16 <__sflush_r+0xae>
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dd90:	682f      	ldr	r7, [r5, #0]
 800dd92:	6a21      	ldr	r1, [r4, #32]
 800dd94:	602b      	str	r3, [r5, #0]
 800dd96:	d030      	beq.n	800ddfa <__sflush_r+0x92>
 800dd98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dd9a:	89a3      	ldrh	r3, [r4, #12]
 800dd9c:	0759      	lsls	r1, r3, #29
 800dd9e:	d505      	bpl.n	800ddac <__sflush_r+0x44>
 800dda0:	6863      	ldr	r3, [r4, #4]
 800dda2:	1ad2      	subs	r2, r2, r3
 800dda4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dda6:	b10b      	cbz	r3, 800ddac <__sflush_r+0x44>
 800dda8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ddaa:	1ad2      	subs	r2, r2, r3
 800ddac:	2300      	movs	r3, #0
 800ddae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ddb0:	6a21      	ldr	r1, [r4, #32]
 800ddb2:	4628      	mov	r0, r5
 800ddb4:	47b0      	blx	r6
 800ddb6:	1c43      	adds	r3, r0, #1
 800ddb8:	89a3      	ldrh	r3, [r4, #12]
 800ddba:	d106      	bne.n	800ddca <__sflush_r+0x62>
 800ddbc:	6829      	ldr	r1, [r5, #0]
 800ddbe:	291d      	cmp	r1, #29
 800ddc0:	d82b      	bhi.n	800de1a <__sflush_r+0xb2>
 800ddc2:	4a2a      	ldr	r2, [pc, #168]	@ (800de6c <__sflush_r+0x104>)
 800ddc4:	40ca      	lsrs	r2, r1
 800ddc6:	07d6      	lsls	r6, r2, #31
 800ddc8:	d527      	bpl.n	800de1a <__sflush_r+0xb2>
 800ddca:	2200      	movs	r2, #0
 800ddcc:	6062      	str	r2, [r4, #4]
 800ddce:	04d9      	lsls	r1, r3, #19
 800ddd0:	6922      	ldr	r2, [r4, #16]
 800ddd2:	6022      	str	r2, [r4, #0]
 800ddd4:	d504      	bpl.n	800dde0 <__sflush_r+0x78>
 800ddd6:	1c42      	adds	r2, r0, #1
 800ddd8:	d101      	bne.n	800ddde <__sflush_r+0x76>
 800ddda:	682b      	ldr	r3, [r5, #0]
 800dddc:	b903      	cbnz	r3, 800dde0 <__sflush_r+0x78>
 800ddde:	6560      	str	r0, [r4, #84]	@ 0x54
 800dde0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dde2:	602f      	str	r7, [r5, #0]
 800dde4:	b1b9      	cbz	r1, 800de16 <__sflush_r+0xae>
 800dde6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ddea:	4299      	cmp	r1, r3
 800ddec:	d002      	beq.n	800ddf4 <__sflush_r+0x8c>
 800ddee:	4628      	mov	r0, r5
 800ddf0:	f7ff f8a6 	bl	800cf40 <_free_r>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	6363      	str	r3, [r4, #52]	@ 0x34
 800ddf8:	e00d      	b.n	800de16 <__sflush_r+0xae>
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	47b0      	blx	r6
 800de00:	4602      	mov	r2, r0
 800de02:	1c50      	adds	r0, r2, #1
 800de04:	d1c9      	bne.n	800dd9a <__sflush_r+0x32>
 800de06:	682b      	ldr	r3, [r5, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d0c6      	beq.n	800dd9a <__sflush_r+0x32>
 800de0c:	2b1d      	cmp	r3, #29
 800de0e:	d001      	beq.n	800de14 <__sflush_r+0xac>
 800de10:	2b16      	cmp	r3, #22
 800de12:	d11e      	bne.n	800de52 <__sflush_r+0xea>
 800de14:	602f      	str	r7, [r5, #0]
 800de16:	2000      	movs	r0, #0
 800de18:	e022      	b.n	800de60 <__sflush_r+0xf8>
 800de1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de1e:	b21b      	sxth	r3, r3
 800de20:	e01b      	b.n	800de5a <__sflush_r+0xf2>
 800de22:	690f      	ldr	r7, [r1, #16]
 800de24:	2f00      	cmp	r7, #0
 800de26:	d0f6      	beq.n	800de16 <__sflush_r+0xae>
 800de28:	0793      	lsls	r3, r2, #30
 800de2a:	680e      	ldr	r6, [r1, #0]
 800de2c:	bf08      	it	eq
 800de2e:	694b      	ldreq	r3, [r1, #20]
 800de30:	600f      	str	r7, [r1, #0]
 800de32:	bf18      	it	ne
 800de34:	2300      	movne	r3, #0
 800de36:	eba6 0807 	sub.w	r8, r6, r7
 800de3a:	608b      	str	r3, [r1, #8]
 800de3c:	f1b8 0f00 	cmp.w	r8, #0
 800de40:	dde9      	ble.n	800de16 <__sflush_r+0xae>
 800de42:	6a21      	ldr	r1, [r4, #32]
 800de44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800de46:	4643      	mov	r3, r8
 800de48:	463a      	mov	r2, r7
 800de4a:	4628      	mov	r0, r5
 800de4c:	47b0      	blx	r6
 800de4e:	2800      	cmp	r0, #0
 800de50:	dc08      	bgt.n	800de64 <__sflush_r+0xfc>
 800de52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de5a:	81a3      	strh	r3, [r4, #12]
 800de5c:	f04f 30ff 	mov.w	r0, #4294967295
 800de60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de64:	4407      	add	r7, r0
 800de66:	eba8 0800 	sub.w	r8, r8, r0
 800de6a:	e7e7      	b.n	800de3c <__sflush_r+0xd4>
 800de6c:	20400001 	.word	0x20400001

0800de70 <_fflush_r>:
 800de70:	b538      	push	{r3, r4, r5, lr}
 800de72:	690b      	ldr	r3, [r1, #16]
 800de74:	4605      	mov	r5, r0
 800de76:	460c      	mov	r4, r1
 800de78:	b913      	cbnz	r3, 800de80 <_fflush_r+0x10>
 800de7a:	2500      	movs	r5, #0
 800de7c:	4628      	mov	r0, r5
 800de7e:	bd38      	pop	{r3, r4, r5, pc}
 800de80:	b118      	cbz	r0, 800de8a <_fflush_r+0x1a>
 800de82:	6a03      	ldr	r3, [r0, #32]
 800de84:	b90b      	cbnz	r3, 800de8a <_fflush_r+0x1a>
 800de86:	f7fd ffd3 	bl	800be30 <__sinit>
 800de8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d0f3      	beq.n	800de7a <_fflush_r+0xa>
 800de92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800de94:	07d0      	lsls	r0, r2, #31
 800de96:	d404      	bmi.n	800dea2 <_fflush_r+0x32>
 800de98:	0599      	lsls	r1, r3, #22
 800de9a:	d402      	bmi.n	800dea2 <_fflush_r+0x32>
 800de9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de9e:	f7fe f9f4 	bl	800c28a <__retarget_lock_acquire_recursive>
 800dea2:	4628      	mov	r0, r5
 800dea4:	4621      	mov	r1, r4
 800dea6:	f7ff ff5f 	bl	800dd68 <__sflush_r>
 800deaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800deac:	07da      	lsls	r2, r3, #31
 800deae:	4605      	mov	r5, r0
 800deb0:	d4e4      	bmi.n	800de7c <_fflush_r+0xc>
 800deb2:	89a3      	ldrh	r3, [r4, #12]
 800deb4:	059b      	lsls	r3, r3, #22
 800deb6:	d4e1      	bmi.n	800de7c <_fflush_r+0xc>
 800deb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800deba:	f7fe f9e7 	bl	800c28c <__retarget_lock_release_recursive>
 800debe:	e7dd      	b.n	800de7c <_fflush_r+0xc>

0800dec0 <__swhatbuf_r>:
 800dec0:	b570      	push	{r4, r5, r6, lr}
 800dec2:	460c      	mov	r4, r1
 800dec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dec8:	2900      	cmp	r1, #0
 800deca:	b096      	sub	sp, #88	@ 0x58
 800decc:	4615      	mov	r5, r2
 800dece:	461e      	mov	r6, r3
 800ded0:	da0d      	bge.n	800deee <__swhatbuf_r+0x2e>
 800ded2:	89a3      	ldrh	r3, [r4, #12]
 800ded4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ded8:	f04f 0100 	mov.w	r1, #0
 800dedc:	bf14      	ite	ne
 800dede:	2340      	movne	r3, #64	@ 0x40
 800dee0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dee4:	2000      	movs	r0, #0
 800dee6:	6031      	str	r1, [r6, #0]
 800dee8:	602b      	str	r3, [r5, #0]
 800deea:	b016      	add	sp, #88	@ 0x58
 800deec:	bd70      	pop	{r4, r5, r6, pc}
 800deee:	466a      	mov	r2, sp
 800def0:	f000 f862 	bl	800dfb8 <_fstat_r>
 800def4:	2800      	cmp	r0, #0
 800def6:	dbec      	blt.n	800ded2 <__swhatbuf_r+0x12>
 800def8:	9901      	ldr	r1, [sp, #4]
 800defa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800defe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800df02:	4259      	negs	r1, r3
 800df04:	4159      	adcs	r1, r3
 800df06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df0a:	e7eb      	b.n	800dee4 <__swhatbuf_r+0x24>

0800df0c <__smakebuf_r>:
 800df0c:	898b      	ldrh	r3, [r1, #12]
 800df0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df10:	079d      	lsls	r5, r3, #30
 800df12:	4606      	mov	r6, r0
 800df14:	460c      	mov	r4, r1
 800df16:	d507      	bpl.n	800df28 <__smakebuf_r+0x1c>
 800df18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800df1c:	6023      	str	r3, [r4, #0]
 800df1e:	6123      	str	r3, [r4, #16]
 800df20:	2301      	movs	r3, #1
 800df22:	6163      	str	r3, [r4, #20]
 800df24:	b003      	add	sp, #12
 800df26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df28:	ab01      	add	r3, sp, #4
 800df2a:	466a      	mov	r2, sp
 800df2c:	f7ff ffc8 	bl	800dec0 <__swhatbuf_r>
 800df30:	9f00      	ldr	r7, [sp, #0]
 800df32:	4605      	mov	r5, r0
 800df34:	4639      	mov	r1, r7
 800df36:	4630      	mov	r0, r6
 800df38:	f7ff f876 	bl	800d028 <_malloc_r>
 800df3c:	b948      	cbnz	r0, 800df52 <__smakebuf_r+0x46>
 800df3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df42:	059a      	lsls	r2, r3, #22
 800df44:	d4ee      	bmi.n	800df24 <__smakebuf_r+0x18>
 800df46:	f023 0303 	bic.w	r3, r3, #3
 800df4a:	f043 0302 	orr.w	r3, r3, #2
 800df4e:	81a3      	strh	r3, [r4, #12]
 800df50:	e7e2      	b.n	800df18 <__smakebuf_r+0xc>
 800df52:	89a3      	ldrh	r3, [r4, #12]
 800df54:	6020      	str	r0, [r4, #0]
 800df56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df5a:	81a3      	strh	r3, [r4, #12]
 800df5c:	9b01      	ldr	r3, [sp, #4]
 800df5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800df62:	b15b      	cbz	r3, 800df7c <__smakebuf_r+0x70>
 800df64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df68:	4630      	mov	r0, r6
 800df6a:	f000 f837 	bl	800dfdc <_isatty_r>
 800df6e:	b128      	cbz	r0, 800df7c <__smakebuf_r+0x70>
 800df70:	89a3      	ldrh	r3, [r4, #12]
 800df72:	f023 0303 	bic.w	r3, r3, #3
 800df76:	f043 0301 	orr.w	r3, r3, #1
 800df7a:	81a3      	strh	r3, [r4, #12]
 800df7c:	89a3      	ldrh	r3, [r4, #12]
 800df7e:	431d      	orrs	r5, r3
 800df80:	81a5      	strh	r5, [r4, #12]
 800df82:	e7cf      	b.n	800df24 <__smakebuf_r+0x18>

0800df84 <memmove>:
 800df84:	4288      	cmp	r0, r1
 800df86:	b510      	push	{r4, lr}
 800df88:	eb01 0402 	add.w	r4, r1, r2
 800df8c:	d902      	bls.n	800df94 <memmove+0x10>
 800df8e:	4284      	cmp	r4, r0
 800df90:	4623      	mov	r3, r4
 800df92:	d807      	bhi.n	800dfa4 <memmove+0x20>
 800df94:	1e43      	subs	r3, r0, #1
 800df96:	42a1      	cmp	r1, r4
 800df98:	d008      	beq.n	800dfac <memmove+0x28>
 800df9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dfa2:	e7f8      	b.n	800df96 <memmove+0x12>
 800dfa4:	4402      	add	r2, r0
 800dfa6:	4601      	mov	r1, r0
 800dfa8:	428a      	cmp	r2, r1
 800dfaa:	d100      	bne.n	800dfae <memmove+0x2a>
 800dfac:	bd10      	pop	{r4, pc}
 800dfae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dfb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dfb6:	e7f7      	b.n	800dfa8 <memmove+0x24>

0800dfb8 <_fstat_r>:
 800dfb8:	b538      	push	{r3, r4, r5, lr}
 800dfba:	4d07      	ldr	r5, [pc, #28]	@ (800dfd8 <_fstat_r+0x20>)
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	4608      	mov	r0, r1
 800dfc2:	4611      	mov	r1, r2
 800dfc4:	602b      	str	r3, [r5, #0]
 800dfc6:	f7f7 ffab 	bl	8005f20 <_fstat>
 800dfca:	1c43      	adds	r3, r0, #1
 800dfcc:	d102      	bne.n	800dfd4 <_fstat_r+0x1c>
 800dfce:	682b      	ldr	r3, [r5, #0]
 800dfd0:	b103      	cbz	r3, 800dfd4 <_fstat_r+0x1c>
 800dfd2:	6023      	str	r3, [r4, #0]
 800dfd4:	bd38      	pop	{r3, r4, r5, pc}
 800dfd6:	bf00      	nop
 800dfd8:	200009e8 	.word	0x200009e8

0800dfdc <_isatty_r>:
 800dfdc:	b538      	push	{r3, r4, r5, lr}
 800dfde:	4d06      	ldr	r5, [pc, #24]	@ (800dff8 <_isatty_r+0x1c>)
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	4608      	mov	r0, r1
 800dfe6:	602b      	str	r3, [r5, #0]
 800dfe8:	f7f7 ffaa 	bl	8005f40 <_isatty>
 800dfec:	1c43      	adds	r3, r0, #1
 800dfee:	d102      	bne.n	800dff6 <_isatty_r+0x1a>
 800dff0:	682b      	ldr	r3, [r5, #0]
 800dff2:	b103      	cbz	r3, 800dff6 <_isatty_r+0x1a>
 800dff4:	6023      	str	r3, [r4, #0]
 800dff6:	bd38      	pop	{r3, r4, r5, pc}
 800dff8:	200009e8 	.word	0x200009e8

0800dffc <_sbrk_r>:
 800dffc:	b538      	push	{r3, r4, r5, lr}
 800dffe:	4d06      	ldr	r5, [pc, #24]	@ (800e018 <_sbrk_r+0x1c>)
 800e000:	2300      	movs	r3, #0
 800e002:	4604      	mov	r4, r0
 800e004:	4608      	mov	r0, r1
 800e006:	602b      	str	r3, [r5, #0]
 800e008:	f7f7 ffb2 	bl	8005f70 <_sbrk>
 800e00c:	1c43      	adds	r3, r0, #1
 800e00e:	d102      	bne.n	800e016 <_sbrk_r+0x1a>
 800e010:	682b      	ldr	r3, [r5, #0]
 800e012:	b103      	cbz	r3, 800e016 <_sbrk_r+0x1a>
 800e014:	6023      	str	r3, [r4, #0]
 800e016:	bd38      	pop	{r3, r4, r5, pc}
 800e018:	200009e8 	.word	0x200009e8

0800e01c <memcpy>:
 800e01c:	440a      	add	r2, r1
 800e01e:	4291      	cmp	r1, r2
 800e020:	f100 33ff 	add.w	r3, r0, #4294967295
 800e024:	d100      	bne.n	800e028 <memcpy+0xc>
 800e026:	4770      	bx	lr
 800e028:	b510      	push	{r4, lr}
 800e02a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e02e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e032:	4291      	cmp	r1, r2
 800e034:	d1f9      	bne.n	800e02a <memcpy+0xe>
 800e036:	bd10      	pop	{r4, pc}

0800e038 <__assert_func>:
 800e038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e03a:	4614      	mov	r4, r2
 800e03c:	461a      	mov	r2, r3
 800e03e:	4b09      	ldr	r3, [pc, #36]	@ (800e064 <__assert_func+0x2c>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	4605      	mov	r5, r0
 800e044:	68d8      	ldr	r0, [r3, #12]
 800e046:	b14c      	cbz	r4, 800e05c <__assert_func+0x24>
 800e048:	4b07      	ldr	r3, [pc, #28]	@ (800e068 <__assert_func+0x30>)
 800e04a:	9100      	str	r1, [sp, #0]
 800e04c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e050:	4906      	ldr	r1, [pc, #24]	@ (800e06c <__assert_func+0x34>)
 800e052:	462b      	mov	r3, r5
 800e054:	f000 f870 	bl	800e138 <fiprintf>
 800e058:	f000 f880 	bl	800e15c <abort>
 800e05c:	4b04      	ldr	r3, [pc, #16]	@ (800e070 <__assert_func+0x38>)
 800e05e:	461c      	mov	r4, r3
 800e060:	e7f3      	b.n	800e04a <__assert_func+0x12>
 800e062:	bf00      	nop
 800e064:	200000ac 	.word	0x200000ac
 800e068:	0800fe59 	.word	0x0800fe59
 800e06c:	0800fe66 	.word	0x0800fe66
 800e070:	0800fe94 	.word	0x0800fe94

0800e074 <_calloc_r>:
 800e074:	b570      	push	{r4, r5, r6, lr}
 800e076:	fba1 5402 	umull	r5, r4, r1, r2
 800e07a:	b934      	cbnz	r4, 800e08a <_calloc_r+0x16>
 800e07c:	4629      	mov	r1, r5
 800e07e:	f7fe ffd3 	bl	800d028 <_malloc_r>
 800e082:	4606      	mov	r6, r0
 800e084:	b928      	cbnz	r0, 800e092 <_calloc_r+0x1e>
 800e086:	4630      	mov	r0, r6
 800e088:	bd70      	pop	{r4, r5, r6, pc}
 800e08a:	220c      	movs	r2, #12
 800e08c:	6002      	str	r2, [r0, #0]
 800e08e:	2600      	movs	r6, #0
 800e090:	e7f9      	b.n	800e086 <_calloc_r+0x12>
 800e092:	462a      	mov	r2, r5
 800e094:	4621      	mov	r1, r4
 800e096:	f7fe f87b 	bl	800c190 <memset>
 800e09a:	e7f4      	b.n	800e086 <_calloc_r+0x12>

0800e09c <__ascii_mbtowc>:
 800e09c:	b082      	sub	sp, #8
 800e09e:	b901      	cbnz	r1, 800e0a2 <__ascii_mbtowc+0x6>
 800e0a0:	a901      	add	r1, sp, #4
 800e0a2:	b142      	cbz	r2, 800e0b6 <__ascii_mbtowc+0x1a>
 800e0a4:	b14b      	cbz	r3, 800e0ba <__ascii_mbtowc+0x1e>
 800e0a6:	7813      	ldrb	r3, [r2, #0]
 800e0a8:	600b      	str	r3, [r1, #0]
 800e0aa:	7812      	ldrb	r2, [r2, #0]
 800e0ac:	1e10      	subs	r0, r2, #0
 800e0ae:	bf18      	it	ne
 800e0b0:	2001      	movne	r0, #1
 800e0b2:	b002      	add	sp, #8
 800e0b4:	4770      	bx	lr
 800e0b6:	4610      	mov	r0, r2
 800e0b8:	e7fb      	b.n	800e0b2 <__ascii_mbtowc+0x16>
 800e0ba:	f06f 0001 	mvn.w	r0, #1
 800e0be:	e7f8      	b.n	800e0b2 <__ascii_mbtowc+0x16>

0800e0c0 <_realloc_r>:
 800e0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c4:	4607      	mov	r7, r0
 800e0c6:	4614      	mov	r4, r2
 800e0c8:	460d      	mov	r5, r1
 800e0ca:	b921      	cbnz	r1, 800e0d6 <_realloc_r+0x16>
 800e0cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d0:	4611      	mov	r1, r2
 800e0d2:	f7fe bfa9 	b.w	800d028 <_malloc_r>
 800e0d6:	b92a      	cbnz	r2, 800e0e4 <_realloc_r+0x24>
 800e0d8:	f7fe ff32 	bl	800cf40 <_free_r>
 800e0dc:	4625      	mov	r5, r4
 800e0de:	4628      	mov	r0, r5
 800e0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e4:	f000 f841 	bl	800e16a <_malloc_usable_size_r>
 800e0e8:	4284      	cmp	r4, r0
 800e0ea:	4606      	mov	r6, r0
 800e0ec:	d802      	bhi.n	800e0f4 <_realloc_r+0x34>
 800e0ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e0f2:	d8f4      	bhi.n	800e0de <_realloc_r+0x1e>
 800e0f4:	4621      	mov	r1, r4
 800e0f6:	4638      	mov	r0, r7
 800e0f8:	f7fe ff96 	bl	800d028 <_malloc_r>
 800e0fc:	4680      	mov	r8, r0
 800e0fe:	b908      	cbnz	r0, 800e104 <_realloc_r+0x44>
 800e100:	4645      	mov	r5, r8
 800e102:	e7ec      	b.n	800e0de <_realloc_r+0x1e>
 800e104:	42b4      	cmp	r4, r6
 800e106:	4622      	mov	r2, r4
 800e108:	4629      	mov	r1, r5
 800e10a:	bf28      	it	cs
 800e10c:	4632      	movcs	r2, r6
 800e10e:	f7ff ff85 	bl	800e01c <memcpy>
 800e112:	4629      	mov	r1, r5
 800e114:	4638      	mov	r0, r7
 800e116:	f7fe ff13 	bl	800cf40 <_free_r>
 800e11a:	e7f1      	b.n	800e100 <_realloc_r+0x40>

0800e11c <__ascii_wctomb>:
 800e11c:	4603      	mov	r3, r0
 800e11e:	4608      	mov	r0, r1
 800e120:	b141      	cbz	r1, 800e134 <__ascii_wctomb+0x18>
 800e122:	2aff      	cmp	r2, #255	@ 0xff
 800e124:	d904      	bls.n	800e130 <__ascii_wctomb+0x14>
 800e126:	228a      	movs	r2, #138	@ 0x8a
 800e128:	601a      	str	r2, [r3, #0]
 800e12a:	f04f 30ff 	mov.w	r0, #4294967295
 800e12e:	4770      	bx	lr
 800e130:	700a      	strb	r2, [r1, #0]
 800e132:	2001      	movs	r0, #1
 800e134:	4770      	bx	lr
	...

0800e138 <fiprintf>:
 800e138:	b40e      	push	{r1, r2, r3}
 800e13a:	b503      	push	{r0, r1, lr}
 800e13c:	4601      	mov	r1, r0
 800e13e:	ab03      	add	r3, sp, #12
 800e140:	4805      	ldr	r0, [pc, #20]	@ (800e158 <fiprintf+0x20>)
 800e142:	f853 2b04 	ldr.w	r2, [r3], #4
 800e146:	6800      	ldr	r0, [r0, #0]
 800e148:	9301      	str	r3, [sp, #4]
 800e14a:	f7ff fcf5 	bl	800db38 <_vfiprintf_r>
 800e14e:	b002      	add	sp, #8
 800e150:	f85d eb04 	ldr.w	lr, [sp], #4
 800e154:	b003      	add	sp, #12
 800e156:	4770      	bx	lr
 800e158:	200000ac 	.word	0x200000ac

0800e15c <abort>:
 800e15c:	b508      	push	{r3, lr}
 800e15e:	2006      	movs	r0, #6
 800e160:	f000 f834 	bl	800e1cc <raise>
 800e164:	2001      	movs	r0, #1
 800e166:	f7f7 fe8b 	bl	8005e80 <_exit>

0800e16a <_malloc_usable_size_r>:
 800e16a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e16e:	1f18      	subs	r0, r3, #4
 800e170:	2b00      	cmp	r3, #0
 800e172:	bfbc      	itt	lt
 800e174:	580b      	ldrlt	r3, [r1, r0]
 800e176:	18c0      	addlt	r0, r0, r3
 800e178:	4770      	bx	lr

0800e17a <_raise_r>:
 800e17a:	291f      	cmp	r1, #31
 800e17c:	b538      	push	{r3, r4, r5, lr}
 800e17e:	4605      	mov	r5, r0
 800e180:	460c      	mov	r4, r1
 800e182:	d904      	bls.n	800e18e <_raise_r+0x14>
 800e184:	2316      	movs	r3, #22
 800e186:	6003      	str	r3, [r0, #0]
 800e188:	f04f 30ff 	mov.w	r0, #4294967295
 800e18c:	bd38      	pop	{r3, r4, r5, pc}
 800e18e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e190:	b112      	cbz	r2, 800e198 <_raise_r+0x1e>
 800e192:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e196:	b94b      	cbnz	r3, 800e1ac <_raise_r+0x32>
 800e198:	4628      	mov	r0, r5
 800e19a:	f000 f831 	bl	800e200 <_getpid_r>
 800e19e:	4622      	mov	r2, r4
 800e1a0:	4601      	mov	r1, r0
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1a8:	f000 b818 	b.w	800e1dc <_kill_r>
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d00a      	beq.n	800e1c6 <_raise_r+0x4c>
 800e1b0:	1c59      	adds	r1, r3, #1
 800e1b2:	d103      	bne.n	800e1bc <_raise_r+0x42>
 800e1b4:	2316      	movs	r3, #22
 800e1b6:	6003      	str	r3, [r0, #0]
 800e1b8:	2001      	movs	r0, #1
 800e1ba:	e7e7      	b.n	800e18c <_raise_r+0x12>
 800e1bc:	2100      	movs	r1, #0
 800e1be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	4798      	blx	r3
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	e7e0      	b.n	800e18c <_raise_r+0x12>
	...

0800e1cc <raise>:
 800e1cc:	4b02      	ldr	r3, [pc, #8]	@ (800e1d8 <raise+0xc>)
 800e1ce:	4601      	mov	r1, r0
 800e1d0:	6818      	ldr	r0, [r3, #0]
 800e1d2:	f7ff bfd2 	b.w	800e17a <_raise_r>
 800e1d6:	bf00      	nop
 800e1d8:	200000ac 	.word	0x200000ac

0800e1dc <_kill_r>:
 800e1dc:	b538      	push	{r3, r4, r5, lr}
 800e1de:	4d07      	ldr	r5, [pc, #28]	@ (800e1fc <_kill_r+0x20>)
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	4608      	mov	r0, r1
 800e1e6:	4611      	mov	r1, r2
 800e1e8:	602b      	str	r3, [r5, #0]
 800e1ea:	f7f7 fe39 	bl	8005e60 <_kill>
 800e1ee:	1c43      	adds	r3, r0, #1
 800e1f0:	d102      	bne.n	800e1f8 <_kill_r+0x1c>
 800e1f2:	682b      	ldr	r3, [r5, #0]
 800e1f4:	b103      	cbz	r3, 800e1f8 <_kill_r+0x1c>
 800e1f6:	6023      	str	r3, [r4, #0]
 800e1f8:	bd38      	pop	{r3, r4, r5, pc}
 800e1fa:	bf00      	nop
 800e1fc:	200009e8 	.word	0x200009e8

0800e200 <_getpid_r>:
 800e200:	f7f7 be26 	b.w	8005e50 <_getpid>

0800e204 <asin>:
 800e204:	b538      	push	{r3, r4, r5, lr}
 800e206:	ed2d 8b02 	vpush	{d8}
 800e20a:	ec55 4b10 	vmov	r4, r5, d0
 800e20e:	f000 f897 	bl	800e340 <__ieee754_asin>
 800e212:	4622      	mov	r2, r4
 800e214:	462b      	mov	r3, r5
 800e216:	4620      	mov	r0, r4
 800e218:	4629      	mov	r1, r5
 800e21a:	eeb0 8a40 	vmov.f32	s16, s0
 800e21e:	eef0 8a60 	vmov.f32	s17, s1
 800e222:	f7f2 fc83 	bl	8000b2c <__aeabi_dcmpun>
 800e226:	b9a8      	cbnz	r0, 800e254 <asin+0x50>
 800e228:	ec45 4b10 	vmov	d0, r4, r5
 800e22c:	f000 f820 	bl	800e270 <fabs>
 800e230:	4b0c      	ldr	r3, [pc, #48]	@ (800e264 <asin+0x60>)
 800e232:	ec51 0b10 	vmov	r0, r1, d0
 800e236:	2200      	movs	r2, #0
 800e238:	f7f2 fc6e 	bl	8000b18 <__aeabi_dcmpgt>
 800e23c:	b150      	cbz	r0, 800e254 <asin+0x50>
 800e23e:	f7fd fff9 	bl	800c234 <__errno>
 800e242:	ecbd 8b02 	vpop	{d8}
 800e246:	2321      	movs	r3, #33	@ 0x21
 800e248:	6003      	str	r3, [r0, #0]
 800e24a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e24e:	4806      	ldr	r0, [pc, #24]	@ (800e268 <asin+0x64>)
 800e250:	f000 b816 	b.w	800e280 <nan>
 800e254:	eeb0 0a48 	vmov.f32	s0, s16
 800e258:	eef0 0a68 	vmov.f32	s1, s17
 800e25c:	ecbd 8b02 	vpop	{d8}
 800e260:	bd38      	pop	{r3, r4, r5, pc}
 800e262:	bf00      	nop
 800e264:	3ff00000 	.word	0x3ff00000
 800e268:	0800fe94 	.word	0x0800fe94

0800e26c <atan2>:
 800e26c:	f000 ba6c 	b.w	800e748 <__ieee754_atan2>

0800e270 <fabs>:
 800e270:	ec51 0b10 	vmov	r0, r1, d0
 800e274:	4602      	mov	r2, r0
 800e276:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e27a:	ec43 2b10 	vmov	d0, r2, r3
 800e27e:	4770      	bx	lr

0800e280 <nan>:
 800e280:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e288 <nan+0x8>
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop
 800e288:	00000000 	.word	0x00000000
 800e28c:	7ff80000 	.word	0x7ff80000

0800e290 <fmaxf>:
 800e290:	b508      	push	{r3, lr}
 800e292:	ed2d 8b02 	vpush	{d8}
 800e296:	eeb0 8a40 	vmov.f32	s16, s0
 800e29a:	eef0 8a60 	vmov.f32	s17, s1
 800e29e:	f000 f831 	bl	800e304 <__fpclassifyf>
 800e2a2:	b930      	cbnz	r0, 800e2b2 <fmaxf+0x22>
 800e2a4:	eeb0 8a68 	vmov.f32	s16, s17
 800e2a8:	eeb0 0a48 	vmov.f32	s0, s16
 800e2ac:	ecbd 8b02 	vpop	{d8}
 800e2b0:	bd08      	pop	{r3, pc}
 800e2b2:	eeb0 0a68 	vmov.f32	s0, s17
 800e2b6:	f000 f825 	bl	800e304 <__fpclassifyf>
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	d0f4      	beq.n	800e2a8 <fmaxf+0x18>
 800e2be:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c6:	dded      	ble.n	800e2a4 <fmaxf+0x14>
 800e2c8:	e7ee      	b.n	800e2a8 <fmaxf+0x18>

0800e2ca <fminf>:
 800e2ca:	b508      	push	{r3, lr}
 800e2cc:	ed2d 8b02 	vpush	{d8}
 800e2d0:	eeb0 8a40 	vmov.f32	s16, s0
 800e2d4:	eef0 8a60 	vmov.f32	s17, s1
 800e2d8:	f000 f814 	bl	800e304 <__fpclassifyf>
 800e2dc:	b930      	cbnz	r0, 800e2ec <fminf+0x22>
 800e2de:	eeb0 8a68 	vmov.f32	s16, s17
 800e2e2:	eeb0 0a48 	vmov.f32	s0, s16
 800e2e6:	ecbd 8b02 	vpop	{d8}
 800e2ea:	bd08      	pop	{r3, pc}
 800e2ec:	eeb0 0a68 	vmov.f32	s0, s17
 800e2f0:	f000 f808 	bl	800e304 <__fpclassifyf>
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	d0f4      	beq.n	800e2e2 <fminf+0x18>
 800e2f8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e300:	d5ed      	bpl.n	800e2de <fminf+0x14>
 800e302:	e7ee      	b.n	800e2e2 <fminf+0x18>

0800e304 <__fpclassifyf>:
 800e304:	ee10 3a10 	vmov	r3, s0
 800e308:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800e30c:	d00d      	beq.n	800e32a <__fpclassifyf+0x26>
 800e30e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800e312:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800e316:	d30a      	bcc.n	800e32e <__fpclassifyf+0x2a>
 800e318:	4b07      	ldr	r3, [pc, #28]	@ (800e338 <__fpclassifyf+0x34>)
 800e31a:	1e42      	subs	r2, r0, #1
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d908      	bls.n	800e332 <__fpclassifyf+0x2e>
 800e320:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800e324:	4258      	negs	r0, r3
 800e326:	4158      	adcs	r0, r3
 800e328:	4770      	bx	lr
 800e32a:	2002      	movs	r0, #2
 800e32c:	4770      	bx	lr
 800e32e:	2004      	movs	r0, #4
 800e330:	4770      	bx	lr
 800e332:	2003      	movs	r0, #3
 800e334:	4770      	bx	lr
 800e336:	bf00      	nop
 800e338:	007ffffe 	.word	0x007ffffe
 800e33c:	00000000 	.word	0x00000000

0800e340 <__ieee754_asin>:
 800e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e344:	ec55 4b10 	vmov	r4, r5, d0
 800e348:	4bc7      	ldr	r3, [pc, #796]	@ (800e668 <__ieee754_asin+0x328>)
 800e34a:	b087      	sub	sp, #28
 800e34c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e350:	429e      	cmp	r6, r3
 800e352:	9501      	str	r5, [sp, #4]
 800e354:	d92d      	bls.n	800e3b2 <__ieee754_asin+0x72>
 800e356:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800e35a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800e35e:	4326      	orrs	r6, r4
 800e360:	d116      	bne.n	800e390 <__ieee754_asin+0x50>
 800e362:	a3a7      	add	r3, pc, #668	@ (adr r3, 800e600 <__ieee754_asin+0x2c0>)
 800e364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e368:	4620      	mov	r0, r4
 800e36a:	4629      	mov	r1, r5
 800e36c:	f7f2 f944 	bl	80005f8 <__aeabi_dmul>
 800e370:	a3a5      	add	r3, pc, #660	@ (adr r3, 800e608 <__ieee754_asin+0x2c8>)
 800e372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e376:	4606      	mov	r6, r0
 800e378:	460f      	mov	r7, r1
 800e37a:	4620      	mov	r0, r4
 800e37c:	4629      	mov	r1, r5
 800e37e:	f7f2 f93b 	bl	80005f8 <__aeabi_dmul>
 800e382:	4602      	mov	r2, r0
 800e384:	460b      	mov	r3, r1
 800e386:	4630      	mov	r0, r6
 800e388:	4639      	mov	r1, r7
 800e38a:	f7f1 ff7f 	bl	800028c <__adddf3>
 800e38e:	e009      	b.n	800e3a4 <__ieee754_asin+0x64>
 800e390:	4622      	mov	r2, r4
 800e392:	462b      	mov	r3, r5
 800e394:	4620      	mov	r0, r4
 800e396:	4629      	mov	r1, r5
 800e398:	f7f1 ff76 	bl	8000288 <__aeabi_dsub>
 800e39c:	4602      	mov	r2, r0
 800e39e:	460b      	mov	r3, r1
 800e3a0:	f7f2 fa54 	bl	800084c <__aeabi_ddiv>
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	460d      	mov	r5, r1
 800e3a8:	ec45 4b10 	vmov	d0, r4, r5
 800e3ac:	b007      	add	sp, #28
 800e3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b2:	4bae      	ldr	r3, [pc, #696]	@ (800e66c <__ieee754_asin+0x32c>)
 800e3b4:	429e      	cmp	r6, r3
 800e3b6:	d810      	bhi.n	800e3da <__ieee754_asin+0x9a>
 800e3b8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800e3bc:	f080 80ad 	bcs.w	800e51a <__ieee754_asin+0x1da>
 800e3c0:	a393      	add	r3, pc, #588	@ (adr r3, 800e610 <__ieee754_asin+0x2d0>)
 800e3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	f7f1 ff5f 	bl	800028c <__adddf3>
 800e3ce:	4ba8      	ldr	r3, [pc, #672]	@ (800e670 <__ieee754_asin+0x330>)
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	f7f2 fba1 	bl	8000b18 <__aeabi_dcmpgt>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d1e6      	bne.n	800e3a8 <__ieee754_asin+0x68>
 800e3da:	ec45 4b10 	vmov	d0, r4, r5
 800e3de:	f7ff ff47 	bl	800e270 <fabs>
 800e3e2:	49a3      	ldr	r1, [pc, #652]	@ (800e670 <__ieee754_asin+0x330>)
 800e3e4:	ec53 2b10 	vmov	r2, r3, d0
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	f7f1 ff4d 	bl	8000288 <__aeabi_dsub>
 800e3ee:	4ba1      	ldr	r3, [pc, #644]	@ (800e674 <__ieee754_asin+0x334>)
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	f7f2 f901 	bl	80005f8 <__aeabi_dmul>
 800e3f6:	a388      	add	r3, pc, #544	@ (adr r3, 800e618 <__ieee754_asin+0x2d8>)
 800e3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fc:	4604      	mov	r4, r0
 800e3fe:	460d      	mov	r5, r1
 800e400:	f7f2 f8fa 	bl	80005f8 <__aeabi_dmul>
 800e404:	a386      	add	r3, pc, #536	@ (adr r3, 800e620 <__ieee754_asin+0x2e0>)
 800e406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40a:	f7f1 ff3f 	bl	800028c <__adddf3>
 800e40e:	4622      	mov	r2, r4
 800e410:	462b      	mov	r3, r5
 800e412:	f7f2 f8f1 	bl	80005f8 <__aeabi_dmul>
 800e416:	a384      	add	r3, pc, #528	@ (adr r3, 800e628 <__ieee754_asin+0x2e8>)
 800e418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41c:	f7f1 ff34 	bl	8000288 <__aeabi_dsub>
 800e420:	4622      	mov	r2, r4
 800e422:	462b      	mov	r3, r5
 800e424:	f7f2 f8e8 	bl	80005f8 <__aeabi_dmul>
 800e428:	a381      	add	r3, pc, #516	@ (adr r3, 800e630 <__ieee754_asin+0x2f0>)
 800e42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42e:	f7f1 ff2d 	bl	800028c <__adddf3>
 800e432:	4622      	mov	r2, r4
 800e434:	462b      	mov	r3, r5
 800e436:	f7f2 f8df 	bl	80005f8 <__aeabi_dmul>
 800e43a:	a37f      	add	r3, pc, #508	@ (adr r3, 800e638 <__ieee754_asin+0x2f8>)
 800e43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e440:	f7f1 ff22 	bl	8000288 <__aeabi_dsub>
 800e444:	4622      	mov	r2, r4
 800e446:	462b      	mov	r3, r5
 800e448:	f7f2 f8d6 	bl	80005f8 <__aeabi_dmul>
 800e44c:	a37c      	add	r3, pc, #496	@ (adr r3, 800e640 <__ieee754_asin+0x300>)
 800e44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e452:	f7f1 ff1b 	bl	800028c <__adddf3>
 800e456:	4622      	mov	r2, r4
 800e458:	462b      	mov	r3, r5
 800e45a:	f7f2 f8cd 	bl	80005f8 <__aeabi_dmul>
 800e45e:	a37a      	add	r3, pc, #488	@ (adr r3, 800e648 <__ieee754_asin+0x308>)
 800e460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e468:	4620      	mov	r0, r4
 800e46a:	4629      	mov	r1, r5
 800e46c:	f7f2 f8c4 	bl	80005f8 <__aeabi_dmul>
 800e470:	a377      	add	r3, pc, #476	@ (adr r3, 800e650 <__ieee754_asin+0x310>)
 800e472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e476:	f7f1 ff07 	bl	8000288 <__aeabi_dsub>
 800e47a:	4622      	mov	r2, r4
 800e47c:	462b      	mov	r3, r5
 800e47e:	f7f2 f8bb 	bl	80005f8 <__aeabi_dmul>
 800e482:	a375      	add	r3, pc, #468	@ (adr r3, 800e658 <__ieee754_asin+0x318>)
 800e484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e488:	f7f1 ff00 	bl	800028c <__adddf3>
 800e48c:	4622      	mov	r2, r4
 800e48e:	462b      	mov	r3, r5
 800e490:	f7f2 f8b2 	bl	80005f8 <__aeabi_dmul>
 800e494:	a372      	add	r3, pc, #456	@ (adr r3, 800e660 <__ieee754_asin+0x320>)
 800e496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49a:	f7f1 fef5 	bl	8000288 <__aeabi_dsub>
 800e49e:	4622      	mov	r2, r4
 800e4a0:	462b      	mov	r3, r5
 800e4a2:	f7f2 f8a9 	bl	80005f8 <__aeabi_dmul>
 800e4a6:	4b72      	ldr	r3, [pc, #456]	@ (800e670 <__ieee754_asin+0x330>)
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	f7f1 feef 	bl	800028c <__adddf3>
 800e4ae:	ec45 4b10 	vmov	d0, r4, r5
 800e4b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4b6:	f000 fba7 	bl	800ec08 <__ieee754_sqrt>
 800e4ba:	4b6f      	ldr	r3, [pc, #444]	@ (800e678 <__ieee754_asin+0x338>)
 800e4bc:	429e      	cmp	r6, r3
 800e4be:	ec5b ab10 	vmov	sl, fp, d0
 800e4c2:	f240 80db 	bls.w	800e67c <__ieee754_asin+0x33c>
 800e4c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4ce:	f7f2 f9bd 	bl	800084c <__aeabi_ddiv>
 800e4d2:	4652      	mov	r2, sl
 800e4d4:	465b      	mov	r3, fp
 800e4d6:	f7f2 f88f 	bl	80005f8 <__aeabi_dmul>
 800e4da:	4652      	mov	r2, sl
 800e4dc:	465b      	mov	r3, fp
 800e4de:	f7f1 fed5 	bl	800028c <__adddf3>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	f7f1 fed1 	bl	800028c <__adddf3>
 800e4ea:	a347      	add	r3, pc, #284	@ (adr r3, 800e608 <__ieee754_asin+0x2c8>)
 800e4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f0:	f7f1 feca 	bl	8000288 <__aeabi_dsub>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	a141      	add	r1, pc, #260	@ (adr r1, 800e600 <__ieee754_asin+0x2c0>)
 800e4fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4fe:	f7f1 fec3 	bl	8000288 <__aeabi_dsub>
 800e502:	9b01      	ldr	r3, [sp, #4]
 800e504:	2b00      	cmp	r3, #0
 800e506:	bfdc      	itt	le
 800e508:	4602      	movle	r2, r0
 800e50a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800e50e:	4604      	mov	r4, r0
 800e510:	460d      	mov	r5, r1
 800e512:	bfdc      	itt	le
 800e514:	4614      	movle	r4, r2
 800e516:	461d      	movle	r5, r3
 800e518:	e746      	b.n	800e3a8 <__ieee754_asin+0x68>
 800e51a:	4622      	mov	r2, r4
 800e51c:	462b      	mov	r3, r5
 800e51e:	4620      	mov	r0, r4
 800e520:	4629      	mov	r1, r5
 800e522:	f7f2 f869 	bl	80005f8 <__aeabi_dmul>
 800e526:	a33c      	add	r3, pc, #240	@ (adr r3, 800e618 <__ieee754_asin+0x2d8>)
 800e528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52c:	4606      	mov	r6, r0
 800e52e:	460f      	mov	r7, r1
 800e530:	f7f2 f862 	bl	80005f8 <__aeabi_dmul>
 800e534:	a33a      	add	r3, pc, #232	@ (adr r3, 800e620 <__ieee754_asin+0x2e0>)
 800e536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53a:	f7f1 fea7 	bl	800028c <__adddf3>
 800e53e:	4632      	mov	r2, r6
 800e540:	463b      	mov	r3, r7
 800e542:	f7f2 f859 	bl	80005f8 <__aeabi_dmul>
 800e546:	a338      	add	r3, pc, #224	@ (adr r3, 800e628 <__ieee754_asin+0x2e8>)
 800e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54c:	f7f1 fe9c 	bl	8000288 <__aeabi_dsub>
 800e550:	4632      	mov	r2, r6
 800e552:	463b      	mov	r3, r7
 800e554:	f7f2 f850 	bl	80005f8 <__aeabi_dmul>
 800e558:	a335      	add	r3, pc, #212	@ (adr r3, 800e630 <__ieee754_asin+0x2f0>)
 800e55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55e:	f7f1 fe95 	bl	800028c <__adddf3>
 800e562:	4632      	mov	r2, r6
 800e564:	463b      	mov	r3, r7
 800e566:	f7f2 f847 	bl	80005f8 <__aeabi_dmul>
 800e56a:	a333      	add	r3, pc, #204	@ (adr r3, 800e638 <__ieee754_asin+0x2f8>)
 800e56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e570:	f7f1 fe8a 	bl	8000288 <__aeabi_dsub>
 800e574:	4632      	mov	r2, r6
 800e576:	463b      	mov	r3, r7
 800e578:	f7f2 f83e 	bl	80005f8 <__aeabi_dmul>
 800e57c:	a330      	add	r3, pc, #192	@ (adr r3, 800e640 <__ieee754_asin+0x300>)
 800e57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e582:	f7f1 fe83 	bl	800028c <__adddf3>
 800e586:	4632      	mov	r2, r6
 800e588:	463b      	mov	r3, r7
 800e58a:	f7f2 f835 	bl	80005f8 <__aeabi_dmul>
 800e58e:	a32e      	add	r3, pc, #184	@ (adr r3, 800e648 <__ieee754_asin+0x308>)
 800e590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e594:	4680      	mov	r8, r0
 800e596:	4689      	mov	r9, r1
 800e598:	4630      	mov	r0, r6
 800e59a:	4639      	mov	r1, r7
 800e59c:	f7f2 f82c 	bl	80005f8 <__aeabi_dmul>
 800e5a0:	a32b      	add	r3, pc, #172	@ (adr r3, 800e650 <__ieee754_asin+0x310>)
 800e5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a6:	f7f1 fe6f 	bl	8000288 <__aeabi_dsub>
 800e5aa:	4632      	mov	r2, r6
 800e5ac:	463b      	mov	r3, r7
 800e5ae:	f7f2 f823 	bl	80005f8 <__aeabi_dmul>
 800e5b2:	a329      	add	r3, pc, #164	@ (adr r3, 800e658 <__ieee754_asin+0x318>)
 800e5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b8:	f7f1 fe68 	bl	800028c <__adddf3>
 800e5bc:	4632      	mov	r2, r6
 800e5be:	463b      	mov	r3, r7
 800e5c0:	f7f2 f81a 	bl	80005f8 <__aeabi_dmul>
 800e5c4:	a326      	add	r3, pc, #152	@ (adr r3, 800e660 <__ieee754_asin+0x320>)
 800e5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ca:	f7f1 fe5d 	bl	8000288 <__aeabi_dsub>
 800e5ce:	4632      	mov	r2, r6
 800e5d0:	463b      	mov	r3, r7
 800e5d2:	f7f2 f811 	bl	80005f8 <__aeabi_dmul>
 800e5d6:	4b26      	ldr	r3, [pc, #152]	@ (800e670 <__ieee754_asin+0x330>)
 800e5d8:	2200      	movs	r2, #0
 800e5da:	f7f1 fe57 	bl	800028c <__adddf3>
 800e5de:	4602      	mov	r2, r0
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	4640      	mov	r0, r8
 800e5e4:	4649      	mov	r1, r9
 800e5e6:	f7f2 f931 	bl	800084c <__aeabi_ddiv>
 800e5ea:	4622      	mov	r2, r4
 800e5ec:	462b      	mov	r3, r5
 800e5ee:	f7f2 f803 	bl	80005f8 <__aeabi_dmul>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	4629      	mov	r1, r5
 800e5fa:	e6c6      	b.n	800e38a <__ieee754_asin+0x4a>
 800e5fc:	f3af 8000 	nop.w
 800e600:	54442d18 	.word	0x54442d18
 800e604:	3ff921fb 	.word	0x3ff921fb
 800e608:	33145c07 	.word	0x33145c07
 800e60c:	3c91a626 	.word	0x3c91a626
 800e610:	8800759c 	.word	0x8800759c
 800e614:	7e37e43c 	.word	0x7e37e43c
 800e618:	0dfdf709 	.word	0x0dfdf709
 800e61c:	3f023de1 	.word	0x3f023de1
 800e620:	7501b288 	.word	0x7501b288
 800e624:	3f49efe0 	.word	0x3f49efe0
 800e628:	b5688f3b 	.word	0xb5688f3b
 800e62c:	3fa48228 	.word	0x3fa48228
 800e630:	0e884455 	.word	0x0e884455
 800e634:	3fc9c155 	.word	0x3fc9c155
 800e638:	03eb6f7d 	.word	0x03eb6f7d
 800e63c:	3fd4d612 	.word	0x3fd4d612
 800e640:	55555555 	.word	0x55555555
 800e644:	3fc55555 	.word	0x3fc55555
 800e648:	b12e9282 	.word	0xb12e9282
 800e64c:	3fb3b8c5 	.word	0x3fb3b8c5
 800e650:	1b8d0159 	.word	0x1b8d0159
 800e654:	3fe6066c 	.word	0x3fe6066c
 800e658:	9c598ac8 	.word	0x9c598ac8
 800e65c:	40002ae5 	.word	0x40002ae5
 800e660:	1c8a2d4b 	.word	0x1c8a2d4b
 800e664:	40033a27 	.word	0x40033a27
 800e668:	3fefffff 	.word	0x3fefffff
 800e66c:	3fdfffff 	.word	0x3fdfffff
 800e670:	3ff00000 	.word	0x3ff00000
 800e674:	3fe00000 	.word	0x3fe00000
 800e678:	3fef3332 	.word	0x3fef3332
 800e67c:	4652      	mov	r2, sl
 800e67e:	465b      	mov	r3, fp
 800e680:	4650      	mov	r0, sl
 800e682:	4659      	mov	r1, fp
 800e684:	f7f1 fe02 	bl	800028c <__adddf3>
 800e688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e68c:	4606      	mov	r6, r0
 800e68e:	460f      	mov	r7, r1
 800e690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e694:	f7f2 f8da 	bl	800084c <__aeabi_ddiv>
 800e698:	4602      	mov	r2, r0
 800e69a:	460b      	mov	r3, r1
 800e69c:	4630      	mov	r0, r6
 800e69e:	4639      	mov	r1, r7
 800e6a0:	f7f1 ffaa 	bl	80005f8 <__aeabi_dmul>
 800e6a4:	f04f 0800 	mov.w	r8, #0
 800e6a8:	4606      	mov	r6, r0
 800e6aa:	460f      	mov	r7, r1
 800e6ac:	4642      	mov	r2, r8
 800e6ae:	465b      	mov	r3, fp
 800e6b0:	4640      	mov	r0, r8
 800e6b2:	4659      	mov	r1, fp
 800e6b4:	f7f1 ffa0 	bl	80005f8 <__aeabi_dmul>
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	4620      	mov	r0, r4
 800e6be:	4629      	mov	r1, r5
 800e6c0:	f7f1 fde2 	bl	8000288 <__aeabi_dsub>
 800e6c4:	4642      	mov	r2, r8
 800e6c6:	4604      	mov	r4, r0
 800e6c8:	460d      	mov	r5, r1
 800e6ca:	465b      	mov	r3, fp
 800e6cc:	4650      	mov	r0, sl
 800e6ce:	4659      	mov	r1, fp
 800e6d0:	f7f1 fddc 	bl	800028c <__adddf3>
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	4620      	mov	r0, r4
 800e6da:	4629      	mov	r1, r5
 800e6dc:	f7f2 f8b6 	bl	800084c <__aeabi_ddiv>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	f7f1 fdd2 	bl	800028c <__adddf3>
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	460b      	mov	r3, r1
 800e6ec:	a112      	add	r1, pc, #72	@ (adr r1, 800e738 <__ieee754_asin+0x3f8>)
 800e6ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6f2:	f7f1 fdc9 	bl	8000288 <__aeabi_dsub>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	4630      	mov	r0, r6
 800e6fc:	4639      	mov	r1, r7
 800e6fe:	f7f1 fdc3 	bl	8000288 <__aeabi_dsub>
 800e702:	4642      	mov	r2, r8
 800e704:	4604      	mov	r4, r0
 800e706:	460d      	mov	r5, r1
 800e708:	465b      	mov	r3, fp
 800e70a:	4640      	mov	r0, r8
 800e70c:	4659      	mov	r1, fp
 800e70e:	f7f1 fdbd 	bl	800028c <__adddf3>
 800e712:	4602      	mov	r2, r0
 800e714:	460b      	mov	r3, r1
 800e716:	a10a      	add	r1, pc, #40	@ (adr r1, 800e740 <__ieee754_asin+0x400>)
 800e718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e71c:	f7f1 fdb4 	bl	8000288 <__aeabi_dsub>
 800e720:	4602      	mov	r2, r0
 800e722:	460b      	mov	r3, r1
 800e724:	4620      	mov	r0, r4
 800e726:	4629      	mov	r1, r5
 800e728:	f7f1 fdae 	bl	8000288 <__aeabi_dsub>
 800e72c:	4602      	mov	r2, r0
 800e72e:	460b      	mov	r3, r1
 800e730:	a103      	add	r1, pc, #12	@ (adr r1, 800e740 <__ieee754_asin+0x400>)
 800e732:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e736:	e6e2      	b.n	800e4fe <__ieee754_asin+0x1be>
 800e738:	33145c07 	.word	0x33145c07
 800e73c:	3c91a626 	.word	0x3c91a626
 800e740:	54442d18 	.word	0x54442d18
 800e744:	3fe921fb 	.word	0x3fe921fb

0800e748 <__ieee754_atan2>:
 800e748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e74c:	ec57 6b11 	vmov	r6, r7, d1
 800e750:	4273      	negs	r3, r6
 800e752:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e8d0 <__ieee754_atan2+0x188>
 800e756:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800e75a:	4333      	orrs	r3, r6
 800e75c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e760:	4543      	cmp	r3, r8
 800e762:	ec51 0b10 	vmov	r0, r1, d0
 800e766:	4635      	mov	r5, r6
 800e768:	d809      	bhi.n	800e77e <__ieee754_atan2+0x36>
 800e76a:	4244      	negs	r4, r0
 800e76c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e770:	4304      	orrs	r4, r0
 800e772:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e776:	4544      	cmp	r4, r8
 800e778:	468e      	mov	lr, r1
 800e77a:	4681      	mov	r9, r0
 800e77c:	d907      	bls.n	800e78e <__ieee754_atan2+0x46>
 800e77e:	4632      	mov	r2, r6
 800e780:	463b      	mov	r3, r7
 800e782:	f7f1 fd83 	bl	800028c <__adddf3>
 800e786:	ec41 0b10 	vmov	d0, r0, r1
 800e78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e78e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800e792:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800e796:	4334      	orrs	r4, r6
 800e798:	d103      	bne.n	800e7a2 <__ieee754_atan2+0x5a>
 800e79a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e79e:	f000 b89b 	b.w	800e8d8 <atan>
 800e7a2:	17bc      	asrs	r4, r7, #30
 800e7a4:	f004 0402 	and.w	r4, r4, #2
 800e7a8:	ea53 0909 	orrs.w	r9, r3, r9
 800e7ac:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e7b0:	d107      	bne.n	800e7c2 <__ieee754_atan2+0x7a>
 800e7b2:	2c02      	cmp	r4, #2
 800e7b4:	d05f      	beq.n	800e876 <__ieee754_atan2+0x12e>
 800e7b6:	2c03      	cmp	r4, #3
 800e7b8:	d1e5      	bne.n	800e786 <__ieee754_atan2+0x3e>
 800e7ba:	a143      	add	r1, pc, #268	@ (adr r1, 800e8c8 <__ieee754_atan2+0x180>)
 800e7bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7c0:	e7e1      	b.n	800e786 <__ieee754_atan2+0x3e>
 800e7c2:	4315      	orrs	r5, r2
 800e7c4:	d106      	bne.n	800e7d4 <__ieee754_atan2+0x8c>
 800e7c6:	f1be 0f00 	cmp.w	lr, #0
 800e7ca:	db5f      	blt.n	800e88c <__ieee754_atan2+0x144>
 800e7cc:	a136      	add	r1, pc, #216	@ (adr r1, 800e8a8 <__ieee754_atan2+0x160>)
 800e7ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7d2:	e7d8      	b.n	800e786 <__ieee754_atan2+0x3e>
 800e7d4:	4542      	cmp	r2, r8
 800e7d6:	d10f      	bne.n	800e7f8 <__ieee754_atan2+0xb0>
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	f104 34ff 	add.w	r4, r4, #4294967295
 800e7de:	d107      	bne.n	800e7f0 <__ieee754_atan2+0xa8>
 800e7e0:	2c02      	cmp	r4, #2
 800e7e2:	d84c      	bhi.n	800e87e <__ieee754_atan2+0x136>
 800e7e4:	4b36      	ldr	r3, [pc, #216]	@ (800e8c0 <__ieee754_atan2+0x178>)
 800e7e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e7ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e7ee:	e7ca      	b.n	800e786 <__ieee754_atan2+0x3e>
 800e7f0:	2c02      	cmp	r4, #2
 800e7f2:	d848      	bhi.n	800e886 <__ieee754_atan2+0x13e>
 800e7f4:	4b33      	ldr	r3, [pc, #204]	@ (800e8c4 <__ieee754_atan2+0x17c>)
 800e7f6:	e7f6      	b.n	800e7e6 <__ieee754_atan2+0x9e>
 800e7f8:	4543      	cmp	r3, r8
 800e7fa:	d0e4      	beq.n	800e7c6 <__ieee754_atan2+0x7e>
 800e7fc:	1a9b      	subs	r3, r3, r2
 800e7fe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e802:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e806:	da1e      	bge.n	800e846 <__ieee754_atan2+0xfe>
 800e808:	2f00      	cmp	r7, #0
 800e80a:	da01      	bge.n	800e810 <__ieee754_atan2+0xc8>
 800e80c:	323c      	adds	r2, #60	@ 0x3c
 800e80e:	db1e      	blt.n	800e84e <__ieee754_atan2+0x106>
 800e810:	4632      	mov	r2, r6
 800e812:	463b      	mov	r3, r7
 800e814:	f7f2 f81a 	bl	800084c <__aeabi_ddiv>
 800e818:	ec41 0b10 	vmov	d0, r0, r1
 800e81c:	f7ff fd28 	bl	800e270 <fabs>
 800e820:	f000 f85a 	bl	800e8d8 <atan>
 800e824:	ec51 0b10 	vmov	r0, r1, d0
 800e828:	2c01      	cmp	r4, #1
 800e82a:	d013      	beq.n	800e854 <__ieee754_atan2+0x10c>
 800e82c:	2c02      	cmp	r4, #2
 800e82e:	d015      	beq.n	800e85c <__ieee754_atan2+0x114>
 800e830:	2c00      	cmp	r4, #0
 800e832:	d0a8      	beq.n	800e786 <__ieee754_atan2+0x3e>
 800e834:	a318      	add	r3, pc, #96	@ (adr r3, 800e898 <__ieee754_atan2+0x150>)
 800e836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83a:	f7f1 fd25 	bl	8000288 <__aeabi_dsub>
 800e83e:	a318      	add	r3, pc, #96	@ (adr r3, 800e8a0 <__ieee754_atan2+0x158>)
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	e014      	b.n	800e870 <__ieee754_atan2+0x128>
 800e846:	a118      	add	r1, pc, #96	@ (adr r1, 800e8a8 <__ieee754_atan2+0x160>)
 800e848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e84c:	e7ec      	b.n	800e828 <__ieee754_atan2+0xe0>
 800e84e:	2000      	movs	r0, #0
 800e850:	2100      	movs	r1, #0
 800e852:	e7e9      	b.n	800e828 <__ieee754_atan2+0xe0>
 800e854:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e858:	4619      	mov	r1, r3
 800e85a:	e794      	b.n	800e786 <__ieee754_atan2+0x3e>
 800e85c:	a30e      	add	r3, pc, #56	@ (adr r3, 800e898 <__ieee754_atan2+0x150>)
 800e85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e862:	f7f1 fd11 	bl	8000288 <__aeabi_dsub>
 800e866:	4602      	mov	r2, r0
 800e868:	460b      	mov	r3, r1
 800e86a:	a10d      	add	r1, pc, #52	@ (adr r1, 800e8a0 <__ieee754_atan2+0x158>)
 800e86c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e870:	f7f1 fd0a 	bl	8000288 <__aeabi_dsub>
 800e874:	e787      	b.n	800e786 <__ieee754_atan2+0x3e>
 800e876:	a10a      	add	r1, pc, #40	@ (adr r1, 800e8a0 <__ieee754_atan2+0x158>)
 800e878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e87c:	e783      	b.n	800e786 <__ieee754_atan2+0x3e>
 800e87e:	a10c      	add	r1, pc, #48	@ (adr r1, 800e8b0 <__ieee754_atan2+0x168>)
 800e880:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e884:	e77f      	b.n	800e786 <__ieee754_atan2+0x3e>
 800e886:	2000      	movs	r0, #0
 800e888:	2100      	movs	r1, #0
 800e88a:	e77c      	b.n	800e786 <__ieee754_atan2+0x3e>
 800e88c:	a10a      	add	r1, pc, #40	@ (adr r1, 800e8b8 <__ieee754_atan2+0x170>)
 800e88e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e892:	e778      	b.n	800e786 <__ieee754_atan2+0x3e>
 800e894:	f3af 8000 	nop.w
 800e898:	33145c07 	.word	0x33145c07
 800e89c:	3ca1a626 	.word	0x3ca1a626
 800e8a0:	54442d18 	.word	0x54442d18
 800e8a4:	400921fb 	.word	0x400921fb
 800e8a8:	54442d18 	.word	0x54442d18
 800e8ac:	3ff921fb 	.word	0x3ff921fb
 800e8b0:	54442d18 	.word	0x54442d18
 800e8b4:	3fe921fb 	.word	0x3fe921fb
 800e8b8:	54442d18 	.word	0x54442d18
 800e8bc:	bff921fb 	.word	0xbff921fb
 800e8c0:	080100b8 	.word	0x080100b8
 800e8c4:	080100a0 	.word	0x080100a0
 800e8c8:	54442d18 	.word	0x54442d18
 800e8cc:	c00921fb 	.word	0xc00921fb
 800e8d0:	7ff00000 	.word	0x7ff00000
 800e8d4:	00000000 	.word	0x00000000

0800e8d8 <atan>:
 800e8d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8dc:	ec55 4b10 	vmov	r4, r5, d0
 800e8e0:	4bbf      	ldr	r3, [pc, #764]	@ (800ebe0 <atan+0x308>)
 800e8e2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e8e6:	429e      	cmp	r6, r3
 800e8e8:	46ab      	mov	fp, r5
 800e8ea:	d918      	bls.n	800e91e <atan+0x46>
 800e8ec:	4bbd      	ldr	r3, [pc, #756]	@ (800ebe4 <atan+0x30c>)
 800e8ee:	429e      	cmp	r6, r3
 800e8f0:	d801      	bhi.n	800e8f6 <atan+0x1e>
 800e8f2:	d109      	bne.n	800e908 <atan+0x30>
 800e8f4:	b144      	cbz	r4, 800e908 <atan+0x30>
 800e8f6:	4622      	mov	r2, r4
 800e8f8:	462b      	mov	r3, r5
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	4629      	mov	r1, r5
 800e8fe:	f7f1 fcc5 	bl	800028c <__adddf3>
 800e902:	4604      	mov	r4, r0
 800e904:	460d      	mov	r5, r1
 800e906:	e006      	b.n	800e916 <atan+0x3e>
 800e908:	f1bb 0f00 	cmp.w	fp, #0
 800e90c:	f340 812b 	ble.w	800eb66 <atan+0x28e>
 800e910:	a597      	add	r5, pc, #604	@ (adr r5, 800eb70 <atan+0x298>)
 800e912:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e916:	ec45 4b10 	vmov	d0, r4, r5
 800e91a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e91e:	4bb2      	ldr	r3, [pc, #712]	@ (800ebe8 <atan+0x310>)
 800e920:	429e      	cmp	r6, r3
 800e922:	d813      	bhi.n	800e94c <atan+0x74>
 800e924:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e928:	429e      	cmp	r6, r3
 800e92a:	d80c      	bhi.n	800e946 <atan+0x6e>
 800e92c:	a392      	add	r3, pc, #584	@ (adr r3, 800eb78 <atan+0x2a0>)
 800e92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e932:	4620      	mov	r0, r4
 800e934:	4629      	mov	r1, r5
 800e936:	f7f1 fca9 	bl	800028c <__adddf3>
 800e93a:	4bac      	ldr	r3, [pc, #688]	@ (800ebec <atan+0x314>)
 800e93c:	2200      	movs	r2, #0
 800e93e:	f7f2 f8eb 	bl	8000b18 <__aeabi_dcmpgt>
 800e942:	2800      	cmp	r0, #0
 800e944:	d1e7      	bne.n	800e916 <atan+0x3e>
 800e946:	f04f 3aff 	mov.w	sl, #4294967295
 800e94a:	e029      	b.n	800e9a0 <atan+0xc8>
 800e94c:	f7ff fc90 	bl	800e270 <fabs>
 800e950:	4ba7      	ldr	r3, [pc, #668]	@ (800ebf0 <atan+0x318>)
 800e952:	429e      	cmp	r6, r3
 800e954:	ec55 4b10 	vmov	r4, r5, d0
 800e958:	f200 80bc 	bhi.w	800ead4 <atan+0x1fc>
 800e95c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e960:	429e      	cmp	r6, r3
 800e962:	f200 809e 	bhi.w	800eaa2 <atan+0x1ca>
 800e966:	4622      	mov	r2, r4
 800e968:	462b      	mov	r3, r5
 800e96a:	4620      	mov	r0, r4
 800e96c:	4629      	mov	r1, r5
 800e96e:	f7f1 fc8d 	bl	800028c <__adddf3>
 800e972:	4b9e      	ldr	r3, [pc, #632]	@ (800ebec <atan+0x314>)
 800e974:	2200      	movs	r2, #0
 800e976:	f7f1 fc87 	bl	8000288 <__aeabi_dsub>
 800e97a:	2200      	movs	r2, #0
 800e97c:	4606      	mov	r6, r0
 800e97e:	460f      	mov	r7, r1
 800e980:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e984:	4620      	mov	r0, r4
 800e986:	4629      	mov	r1, r5
 800e988:	f7f1 fc80 	bl	800028c <__adddf3>
 800e98c:	4602      	mov	r2, r0
 800e98e:	460b      	mov	r3, r1
 800e990:	4630      	mov	r0, r6
 800e992:	4639      	mov	r1, r7
 800e994:	f7f1 ff5a 	bl	800084c <__aeabi_ddiv>
 800e998:	f04f 0a00 	mov.w	sl, #0
 800e99c:	4604      	mov	r4, r0
 800e99e:	460d      	mov	r5, r1
 800e9a0:	4622      	mov	r2, r4
 800e9a2:	462b      	mov	r3, r5
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	f7f1 fe26 	bl	80005f8 <__aeabi_dmul>
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	4680      	mov	r8, r0
 800e9b2:	4689      	mov	r9, r1
 800e9b4:	f7f1 fe20 	bl	80005f8 <__aeabi_dmul>
 800e9b8:	a371      	add	r3, pc, #452	@ (adr r3, 800eb80 <atan+0x2a8>)
 800e9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9be:	4606      	mov	r6, r0
 800e9c0:	460f      	mov	r7, r1
 800e9c2:	f7f1 fe19 	bl	80005f8 <__aeabi_dmul>
 800e9c6:	a370      	add	r3, pc, #448	@ (adr r3, 800eb88 <atan+0x2b0>)
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	f7f1 fc5e 	bl	800028c <__adddf3>
 800e9d0:	4632      	mov	r2, r6
 800e9d2:	463b      	mov	r3, r7
 800e9d4:	f7f1 fe10 	bl	80005f8 <__aeabi_dmul>
 800e9d8:	a36d      	add	r3, pc, #436	@ (adr r3, 800eb90 <atan+0x2b8>)
 800e9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9de:	f7f1 fc55 	bl	800028c <__adddf3>
 800e9e2:	4632      	mov	r2, r6
 800e9e4:	463b      	mov	r3, r7
 800e9e6:	f7f1 fe07 	bl	80005f8 <__aeabi_dmul>
 800e9ea:	a36b      	add	r3, pc, #428	@ (adr r3, 800eb98 <atan+0x2c0>)
 800e9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f0:	f7f1 fc4c 	bl	800028c <__adddf3>
 800e9f4:	4632      	mov	r2, r6
 800e9f6:	463b      	mov	r3, r7
 800e9f8:	f7f1 fdfe 	bl	80005f8 <__aeabi_dmul>
 800e9fc:	a368      	add	r3, pc, #416	@ (adr r3, 800eba0 <atan+0x2c8>)
 800e9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea02:	f7f1 fc43 	bl	800028c <__adddf3>
 800ea06:	4632      	mov	r2, r6
 800ea08:	463b      	mov	r3, r7
 800ea0a:	f7f1 fdf5 	bl	80005f8 <__aeabi_dmul>
 800ea0e:	a366      	add	r3, pc, #408	@ (adr r3, 800eba8 <atan+0x2d0>)
 800ea10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea14:	f7f1 fc3a 	bl	800028c <__adddf3>
 800ea18:	4642      	mov	r2, r8
 800ea1a:	464b      	mov	r3, r9
 800ea1c:	f7f1 fdec 	bl	80005f8 <__aeabi_dmul>
 800ea20:	a363      	add	r3, pc, #396	@ (adr r3, 800ebb0 <atan+0x2d8>)
 800ea22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea26:	4680      	mov	r8, r0
 800ea28:	4689      	mov	r9, r1
 800ea2a:	4630      	mov	r0, r6
 800ea2c:	4639      	mov	r1, r7
 800ea2e:	f7f1 fde3 	bl	80005f8 <__aeabi_dmul>
 800ea32:	a361      	add	r3, pc, #388	@ (adr r3, 800ebb8 <atan+0x2e0>)
 800ea34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea38:	f7f1 fc26 	bl	8000288 <__aeabi_dsub>
 800ea3c:	4632      	mov	r2, r6
 800ea3e:	463b      	mov	r3, r7
 800ea40:	f7f1 fdda 	bl	80005f8 <__aeabi_dmul>
 800ea44:	a35e      	add	r3, pc, #376	@ (adr r3, 800ebc0 <atan+0x2e8>)
 800ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4a:	f7f1 fc1d 	bl	8000288 <__aeabi_dsub>
 800ea4e:	4632      	mov	r2, r6
 800ea50:	463b      	mov	r3, r7
 800ea52:	f7f1 fdd1 	bl	80005f8 <__aeabi_dmul>
 800ea56:	a35c      	add	r3, pc, #368	@ (adr r3, 800ebc8 <atan+0x2f0>)
 800ea58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5c:	f7f1 fc14 	bl	8000288 <__aeabi_dsub>
 800ea60:	4632      	mov	r2, r6
 800ea62:	463b      	mov	r3, r7
 800ea64:	f7f1 fdc8 	bl	80005f8 <__aeabi_dmul>
 800ea68:	a359      	add	r3, pc, #356	@ (adr r3, 800ebd0 <atan+0x2f8>)
 800ea6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6e:	f7f1 fc0b 	bl	8000288 <__aeabi_dsub>
 800ea72:	4632      	mov	r2, r6
 800ea74:	463b      	mov	r3, r7
 800ea76:	f7f1 fdbf 	bl	80005f8 <__aeabi_dmul>
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	4640      	mov	r0, r8
 800ea80:	4649      	mov	r1, r9
 800ea82:	f7f1 fc03 	bl	800028c <__adddf3>
 800ea86:	4622      	mov	r2, r4
 800ea88:	462b      	mov	r3, r5
 800ea8a:	f7f1 fdb5 	bl	80005f8 <__aeabi_dmul>
 800ea8e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ea92:	4602      	mov	r2, r0
 800ea94:	460b      	mov	r3, r1
 800ea96:	d148      	bne.n	800eb2a <atan+0x252>
 800ea98:	4620      	mov	r0, r4
 800ea9a:	4629      	mov	r1, r5
 800ea9c:	f7f1 fbf4 	bl	8000288 <__aeabi_dsub>
 800eaa0:	e72f      	b.n	800e902 <atan+0x2a>
 800eaa2:	4b52      	ldr	r3, [pc, #328]	@ (800ebec <atan+0x314>)
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	4629      	mov	r1, r5
 800eaaa:	f7f1 fbed 	bl	8000288 <__aeabi_dsub>
 800eaae:	4b4f      	ldr	r3, [pc, #316]	@ (800ebec <atan+0x314>)
 800eab0:	4606      	mov	r6, r0
 800eab2:	460f      	mov	r7, r1
 800eab4:	2200      	movs	r2, #0
 800eab6:	4620      	mov	r0, r4
 800eab8:	4629      	mov	r1, r5
 800eaba:	f7f1 fbe7 	bl	800028c <__adddf3>
 800eabe:	4602      	mov	r2, r0
 800eac0:	460b      	mov	r3, r1
 800eac2:	4630      	mov	r0, r6
 800eac4:	4639      	mov	r1, r7
 800eac6:	f7f1 fec1 	bl	800084c <__aeabi_ddiv>
 800eaca:	f04f 0a01 	mov.w	sl, #1
 800eace:	4604      	mov	r4, r0
 800ead0:	460d      	mov	r5, r1
 800ead2:	e765      	b.n	800e9a0 <atan+0xc8>
 800ead4:	4b47      	ldr	r3, [pc, #284]	@ (800ebf4 <atan+0x31c>)
 800ead6:	429e      	cmp	r6, r3
 800ead8:	d21c      	bcs.n	800eb14 <atan+0x23c>
 800eada:	4b47      	ldr	r3, [pc, #284]	@ (800ebf8 <atan+0x320>)
 800eadc:	2200      	movs	r2, #0
 800eade:	4620      	mov	r0, r4
 800eae0:	4629      	mov	r1, r5
 800eae2:	f7f1 fbd1 	bl	8000288 <__aeabi_dsub>
 800eae6:	4b44      	ldr	r3, [pc, #272]	@ (800ebf8 <atan+0x320>)
 800eae8:	4606      	mov	r6, r0
 800eaea:	460f      	mov	r7, r1
 800eaec:	2200      	movs	r2, #0
 800eaee:	4620      	mov	r0, r4
 800eaf0:	4629      	mov	r1, r5
 800eaf2:	f7f1 fd81 	bl	80005f8 <__aeabi_dmul>
 800eaf6:	4b3d      	ldr	r3, [pc, #244]	@ (800ebec <atan+0x314>)
 800eaf8:	2200      	movs	r2, #0
 800eafa:	f7f1 fbc7 	bl	800028c <__adddf3>
 800eafe:	4602      	mov	r2, r0
 800eb00:	460b      	mov	r3, r1
 800eb02:	4630      	mov	r0, r6
 800eb04:	4639      	mov	r1, r7
 800eb06:	f7f1 fea1 	bl	800084c <__aeabi_ddiv>
 800eb0a:	f04f 0a02 	mov.w	sl, #2
 800eb0e:	4604      	mov	r4, r0
 800eb10:	460d      	mov	r5, r1
 800eb12:	e745      	b.n	800e9a0 <atan+0xc8>
 800eb14:	4622      	mov	r2, r4
 800eb16:	462b      	mov	r3, r5
 800eb18:	4938      	ldr	r1, [pc, #224]	@ (800ebfc <atan+0x324>)
 800eb1a:	2000      	movs	r0, #0
 800eb1c:	f7f1 fe96 	bl	800084c <__aeabi_ddiv>
 800eb20:	f04f 0a03 	mov.w	sl, #3
 800eb24:	4604      	mov	r4, r0
 800eb26:	460d      	mov	r5, r1
 800eb28:	e73a      	b.n	800e9a0 <atan+0xc8>
 800eb2a:	4b35      	ldr	r3, [pc, #212]	@ (800ec00 <atan+0x328>)
 800eb2c:	4e35      	ldr	r6, [pc, #212]	@ (800ec04 <atan+0x32c>)
 800eb2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb36:	f7f1 fba7 	bl	8000288 <__aeabi_dsub>
 800eb3a:	4622      	mov	r2, r4
 800eb3c:	462b      	mov	r3, r5
 800eb3e:	f7f1 fba3 	bl	8000288 <__aeabi_dsub>
 800eb42:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800eb46:	4602      	mov	r2, r0
 800eb48:	460b      	mov	r3, r1
 800eb4a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800eb4e:	f7f1 fb9b 	bl	8000288 <__aeabi_dsub>
 800eb52:	f1bb 0f00 	cmp.w	fp, #0
 800eb56:	4604      	mov	r4, r0
 800eb58:	460d      	mov	r5, r1
 800eb5a:	f6bf aedc 	bge.w	800e916 <atan+0x3e>
 800eb5e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eb62:	461d      	mov	r5, r3
 800eb64:	e6d7      	b.n	800e916 <atan+0x3e>
 800eb66:	a51c      	add	r5, pc, #112	@ (adr r5, 800ebd8 <atan+0x300>)
 800eb68:	e9d5 4500 	ldrd	r4, r5, [r5]
 800eb6c:	e6d3      	b.n	800e916 <atan+0x3e>
 800eb6e:	bf00      	nop
 800eb70:	54442d18 	.word	0x54442d18
 800eb74:	3ff921fb 	.word	0x3ff921fb
 800eb78:	8800759c 	.word	0x8800759c
 800eb7c:	7e37e43c 	.word	0x7e37e43c
 800eb80:	e322da11 	.word	0xe322da11
 800eb84:	3f90ad3a 	.word	0x3f90ad3a
 800eb88:	24760deb 	.word	0x24760deb
 800eb8c:	3fa97b4b 	.word	0x3fa97b4b
 800eb90:	a0d03d51 	.word	0xa0d03d51
 800eb94:	3fb10d66 	.word	0x3fb10d66
 800eb98:	c54c206e 	.word	0xc54c206e
 800eb9c:	3fb745cd 	.word	0x3fb745cd
 800eba0:	920083ff 	.word	0x920083ff
 800eba4:	3fc24924 	.word	0x3fc24924
 800eba8:	5555550d 	.word	0x5555550d
 800ebac:	3fd55555 	.word	0x3fd55555
 800ebb0:	2c6a6c2f 	.word	0x2c6a6c2f
 800ebb4:	bfa2b444 	.word	0xbfa2b444
 800ebb8:	52defd9a 	.word	0x52defd9a
 800ebbc:	3fadde2d 	.word	0x3fadde2d
 800ebc0:	af749a6d 	.word	0xaf749a6d
 800ebc4:	3fb3b0f2 	.word	0x3fb3b0f2
 800ebc8:	fe231671 	.word	0xfe231671
 800ebcc:	3fbc71c6 	.word	0x3fbc71c6
 800ebd0:	9998ebc4 	.word	0x9998ebc4
 800ebd4:	3fc99999 	.word	0x3fc99999
 800ebd8:	54442d18 	.word	0x54442d18
 800ebdc:	bff921fb 	.word	0xbff921fb
 800ebe0:	440fffff 	.word	0x440fffff
 800ebe4:	7ff00000 	.word	0x7ff00000
 800ebe8:	3fdbffff 	.word	0x3fdbffff
 800ebec:	3ff00000 	.word	0x3ff00000
 800ebf0:	3ff2ffff 	.word	0x3ff2ffff
 800ebf4:	40038000 	.word	0x40038000
 800ebf8:	3ff80000 	.word	0x3ff80000
 800ebfc:	bff00000 	.word	0xbff00000
 800ec00:	080100d0 	.word	0x080100d0
 800ec04:	080100f0 	.word	0x080100f0

0800ec08 <__ieee754_sqrt>:
 800ec08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec0c:	4a66      	ldr	r2, [pc, #408]	@ (800eda8 <__ieee754_sqrt+0x1a0>)
 800ec0e:	ec55 4b10 	vmov	r4, r5, d0
 800ec12:	43aa      	bics	r2, r5
 800ec14:	462b      	mov	r3, r5
 800ec16:	4621      	mov	r1, r4
 800ec18:	d110      	bne.n	800ec3c <__ieee754_sqrt+0x34>
 800ec1a:	4622      	mov	r2, r4
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	4629      	mov	r1, r5
 800ec20:	f7f1 fcea 	bl	80005f8 <__aeabi_dmul>
 800ec24:	4602      	mov	r2, r0
 800ec26:	460b      	mov	r3, r1
 800ec28:	4620      	mov	r0, r4
 800ec2a:	4629      	mov	r1, r5
 800ec2c:	f7f1 fb2e 	bl	800028c <__adddf3>
 800ec30:	4604      	mov	r4, r0
 800ec32:	460d      	mov	r5, r1
 800ec34:	ec45 4b10 	vmov	d0, r4, r5
 800ec38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec3c:	2d00      	cmp	r5, #0
 800ec3e:	dc0e      	bgt.n	800ec5e <__ieee754_sqrt+0x56>
 800ec40:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ec44:	4322      	orrs	r2, r4
 800ec46:	d0f5      	beq.n	800ec34 <__ieee754_sqrt+0x2c>
 800ec48:	b19d      	cbz	r5, 800ec72 <__ieee754_sqrt+0x6a>
 800ec4a:	4622      	mov	r2, r4
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	4629      	mov	r1, r5
 800ec50:	f7f1 fb1a 	bl	8000288 <__aeabi_dsub>
 800ec54:	4602      	mov	r2, r0
 800ec56:	460b      	mov	r3, r1
 800ec58:	f7f1 fdf8 	bl	800084c <__aeabi_ddiv>
 800ec5c:	e7e8      	b.n	800ec30 <__ieee754_sqrt+0x28>
 800ec5e:	152a      	asrs	r2, r5, #20
 800ec60:	d115      	bne.n	800ec8e <__ieee754_sqrt+0x86>
 800ec62:	2000      	movs	r0, #0
 800ec64:	e009      	b.n	800ec7a <__ieee754_sqrt+0x72>
 800ec66:	0acb      	lsrs	r3, r1, #11
 800ec68:	3a15      	subs	r2, #21
 800ec6a:	0549      	lsls	r1, r1, #21
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d0fa      	beq.n	800ec66 <__ieee754_sqrt+0x5e>
 800ec70:	e7f7      	b.n	800ec62 <__ieee754_sqrt+0x5a>
 800ec72:	462a      	mov	r2, r5
 800ec74:	e7fa      	b.n	800ec6c <__ieee754_sqrt+0x64>
 800ec76:	005b      	lsls	r3, r3, #1
 800ec78:	3001      	adds	r0, #1
 800ec7a:	02dc      	lsls	r4, r3, #11
 800ec7c:	d5fb      	bpl.n	800ec76 <__ieee754_sqrt+0x6e>
 800ec7e:	1e44      	subs	r4, r0, #1
 800ec80:	1b12      	subs	r2, r2, r4
 800ec82:	f1c0 0420 	rsb	r4, r0, #32
 800ec86:	fa21 f404 	lsr.w	r4, r1, r4
 800ec8a:	4323      	orrs	r3, r4
 800ec8c:	4081      	lsls	r1, r0
 800ec8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec92:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800ec96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ec9a:	07d2      	lsls	r2, r2, #31
 800ec9c:	bf5c      	itt	pl
 800ec9e:	005b      	lslpl	r3, r3, #1
 800eca0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800eca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eca8:	bf58      	it	pl
 800ecaa:	0049      	lslpl	r1, r1, #1
 800ecac:	2600      	movs	r6, #0
 800ecae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ecb2:	107f      	asrs	r7, r7, #1
 800ecb4:	0049      	lsls	r1, r1, #1
 800ecb6:	2016      	movs	r0, #22
 800ecb8:	4632      	mov	r2, r6
 800ecba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ecbe:	1915      	adds	r5, r2, r4
 800ecc0:	429d      	cmp	r5, r3
 800ecc2:	bfde      	ittt	le
 800ecc4:	192a      	addle	r2, r5, r4
 800ecc6:	1b5b      	suble	r3, r3, r5
 800ecc8:	1936      	addle	r6, r6, r4
 800ecca:	0fcd      	lsrs	r5, r1, #31
 800eccc:	3801      	subs	r0, #1
 800ecce:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ecd2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ecd6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ecda:	d1f0      	bne.n	800ecbe <__ieee754_sqrt+0xb6>
 800ecdc:	4605      	mov	r5, r0
 800ecde:	2420      	movs	r4, #32
 800ece0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ece4:	4293      	cmp	r3, r2
 800ece6:	eb0c 0e00 	add.w	lr, ip, r0
 800ecea:	dc02      	bgt.n	800ecf2 <__ieee754_sqrt+0xea>
 800ecec:	d113      	bne.n	800ed16 <__ieee754_sqrt+0x10e>
 800ecee:	458e      	cmp	lr, r1
 800ecf0:	d811      	bhi.n	800ed16 <__ieee754_sqrt+0x10e>
 800ecf2:	f1be 0f00 	cmp.w	lr, #0
 800ecf6:	eb0e 000c 	add.w	r0, lr, ip
 800ecfa:	da3f      	bge.n	800ed7c <__ieee754_sqrt+0x174>
 800ecfc:	2800      	cmp	r0, #0
 800ecfe:	db3d      	blt.n	800ed7c <__ieee754_sqrt+0x174>
 800ed00:	f102 0801 	add.w	r8, r2, #1
 800ed04:	1a9b      	subs	r3, r3, r2
 800ed06:	458e      	cmp	lr, r1
 800ed08:	bf88      	it	hi
 800ed0a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ed0e:	eba1 010e 	sub.w	r1, r1, lr
 800ed12:	4465      	add	r5, ip
 800ed14:	4642      	mov	r2, r8
 800ed16:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ed1a:	3c01      	subs	r4, #1
 800ed1c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ed20:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ed24:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ed28:	d1dc      	bne.n	800ece4 <__ieee754_sqrt+0xdc>
 800ed2a:	4319      	orrs	r1, r3
 800ed2c:	d01b      	beq.n	800ed66 <__ieee754_sqrt+0x15e>
 800ed2e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800edac <__ieee754_sqrt+0x1a4>
 800ed32:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800edb0 <__ieee754_sqrt+0x1a8>
 800ed36:	e9da 0100 	ldrd	r0, r1, [sl]
 800ed3a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ed3e:	f7f1 faa3 	bl	8000288 <__aeabi_dsub>
 800ed42:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed46:	4602      	mov	r2, r0
 800ed48:	460b      	mov	r3, r1
 800ed4a:	4640      	mov	r0, r8
 800ed4c:	4649      	mov	r1, r9
 800ed4e:	f7f1 fecf 	bl	8000af0 <__aeabi_dcmple>
 800ed52:	b140      	cbz	r0, 800ed66 <__ieee754_sqrt+0x15e>
 800ed54:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ed58:	e9da 0100 	ldrd	r0, r1, [sl]
 800ed5c:	e9db 2300 	ldrd	r2, r3, [fp]
 800ed60:	d10e      	bne.n	800ed80 <__ieee754_sqrt+0x178>
 800ed62:	3601      	adds	r6, #1
 800ed64:	4625      	mov	r5, r4
 800ed66:	1073      	asrs	r3, r6, #1
 800ed68:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800ed6c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800ed70:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800ed74:	086b      	lsrs	r3, r5, #1
 800ed76:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800ed7a:	e759      	b.n	800ec30 <__ieee754_sqrt+0x28>
 800ed7c:	4690      	mov	r8, r2
 800ed7e:	e7c1      	b.n	800ed04 <__ieee754_sqrt+0xfc>
 800ed80:	f7f1 fa84 	bl	800028c <__adddf3>
 800ed84:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed88:	4602      	mov	r2, r0
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	4640      	mov	r0, r8
 800ed8e:	4649      	mov	r1, r9
 800ed90:	f7f1 fea4 	bl	8000adc <__aeabi_dcmplt>
 800ed94:	b120      	cbz	r0, 800eda0 <__ieee754_sqrt+0x198>
 800ed96:	1cab      	adds	r3, r5, #2
 800ed98:	bf08      	it	eq
 800ed9a:	3601      	addeq	r6, #1
 800ed9c:	3502      	adds	r5, #2
 800ed9e:	e7e2      	b.n	800ed66 <__ieee754_sqrt+0x15e>
 800eda0:	1c6b      	adds	r3, r5, #1
 800eda2:	f023 0501 	bic.w	r5, r3, #1
 800eda6:	e7de      	b.n	800ed66 <__ieee754_sqrt+0x15e>
 800eda8:	7ff00000 	.word	0x7ff00000
 800edac:	08010118 	.word	0x08010118
 800edb0:	08010110 	.word	0x08010110

0800edb4 <_init>:
 800edb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edb6:	bf00      	nop
 800edb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edba:	bc08      	pop	{r3}
 800edbc:	469e      	mov	lr, r3
 800edbe:	4770      	bx	lr

0800edc0 <_fini>:
 800edc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edc2:	bf00      	nop
 800edc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edc6:	bc08      	pop	{r3}
 800edc8:	469e      	mov	lr, r3
 800edca:	4770      	bx	lr
