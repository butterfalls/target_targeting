
Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011544  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001780  080116d8  080116d8  000126d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e58  08012e58  000142a8  2**0
                  CONTENTS
  4 .ARM          00000008  08012e58  08012e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e60  08012e60  000142a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e60  08012e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012e64  08012e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a8  20000000  08012e68  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000142a8  2**0
                  CONTENTS
 10 .bss          000008dc  200002a8  200002a8  000142a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b84  20000b84  000142a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000142a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018de7  00000000  00000000  000142d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003afe  00000000  00000000  0002d0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  00030bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001105  00000000  00000000  00032160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026416  00000000  00000000  00033265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d92c  00000000  00000000  0005967b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d75b6  00000000  00000000  00076fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014e55d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e44  00000000  00000000  0014e5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  001553e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a8 	.word	0x200002a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080116bc 	.word	0x080116bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ac 	.word	0x200002ac
 80001cc:	080116bc 	.word	0x080116bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9d3 	b.w	8001050 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b988 	b.w	8001050 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	468e      	mov	lr, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	4688      	mov	r8, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4617      	mov	r7, r2
 8000d6c:	d962      	bls.n	8000e34 <__udivmoddi4+0xdc>
 8000d6e:	fab2 f682 	clz	r6, r2
 8000d72:	b14e      	cbz	r6, 8000d88 <__udivmoddi4+0x30>
 8000d74:	f1c6 0320 	rsb	r3, r6, #32
 8000d78:	fa01 f806 	lsl.w	r8, r1, r6
 8000d7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d80:	40b7      	lsls	r7, r6
 8000d82:	ea43 0808 	orr.w	r8, r3, r8
 8000d86:	40b4      	lsls	r4, r6
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	fa1f fc87 	uxth.w	ip, r7
 8000d90:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d94:	0c23      	lsrs	r3, r4, #16
 8000d96:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9e:	fb01 f20c 	mul.w	r2, r1, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dac:	f080 80ea 	bcs.w	8000f84 <__udivmoddi4+0x22c>
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f240 80e7 	bls.w	8000f84 <__udivmoddi4+0x22c>
 8000db6:	3902      	subs	r1, #2
 8000db8:	443b      	add	r3, r7
 8000dba:	1a9a      	subs	r2, r3, r2
 8000dbc:	b2a3      	uxth	r3, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dca:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dce:	459c      	cmp	ip, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x8e>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd8:	f080 80d6 	bcs.w	8000f88 <__udivmoddi4+0x230>
 8000ddc:	459c      	cmp	ip, r3
 8000dde:	f240 80d3 	bls.w	8000f88 <__udivmoddi4+0x230>
 8000de2:	443b      	add	r3, r7
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dea:	eba3 030c 	sub.w	r3, r3, ip
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40f3      	lsrs	r3, r6
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xb6>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb0>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x14c>
 8000e16:	4573      	cmp	r3, lr
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xc8>
 8000e1a:	4282      	cmp	r2, r0
 8000e1c:	f200 8105 	bhi.w	800102a <__udivmoddi4+0x2d2>
 8000e20:	1a84      	subs	r4, r0, r2
 8000e22:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	4690      	mov	r8, r2
 8000e2a:	2d00      	cmp	r5, #0
 8000e2c:	d0e5      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e2e:	e9c5 4800 	strd	r4, r8, [r5]
 8000e32:	e7e2      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f000 8090 	beq.w	8000f5a <__udivmoddi4+0x202>
 8000e3a:	fab2 f682 	clz	r6, r2
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	f040 80a4 	bne.w	8000f8c <__udivmoddi4+0x234>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	0c03      	lsrs	r3, r0, #16
 8000e48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4c:	b280      	uxth	r0, r0
 8000e4e:	b2bc      	uxth	r4, r7
 8000e50:	2101      	movs	r1, #1
 8000e52:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e56:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x11e>
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x11c>
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	f200 80e0 	bhi.w	8001034 <__udivmoddi4+0x2dc>
 8000e74:	46c4      	mov	ip, r8
 8000e76:	1a9b      	subs	r3, r3, r2
 8000e78:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e7c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e80:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e84:	fb02 f404 	mul.w	r4, r2, r4
 8000e88:	429c      	cmp	r4, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x144>
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x142>
 8000e94:	429c      	cmp	r4, r3
 8000e96:	f200 80ca 	bhi.w	800102e <__udivmoddi4+0x2d6>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	1b1b      	subs	r3, r3, r4
 8000e9e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x98>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb4:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ebc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ec0:	4323      	orrs	r3, r4
 8000ec2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec6:	fa1f fc87 	uxth.w	ip, r7
 8000eca:	fbbe f0f9 	udiv	r0, lr, r9
 8000ece:	0c1c      	lsrs	r4, r3, #16
 8000ed0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000edc:	45a6      	cmp	lr, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d909      	bls.n	8000ef8 <__udivmoddi4+0x1a0>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eea:	f080 809c 	bcs.w	8001026 <__udivmoddi4+0x2ce>
 8000eee:	45a6      	cmp	lr, r4
 8000ef0:	f240 8099 	bls.w	8001026 <__udivmoddi4+0x2ce>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	eba4 040e 	sub.w	r4, r4, lr
 8000efc:	fa1f fe83 	uxth.w	lr, r3
 8000f00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f04:	fb09 4413 	mls	r4, r9, r3, r4
 8000f08:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f0c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f10:	45a4      	cmp	ip, r4
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1ce>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f1a:	f080 8082 	bcs.w	8001022 <__udivmoddi4+0x2ca>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d97f      	bls.n	8001022 <__udivmoddi4+0x2ca>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f2a:	eba4 040c 	sub.w	r4, r4, ip
 8000f2e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f32:	4564      	cmp	r4, ip
 8000f34:	4673      	mov	r3, lr
 8000f36:	46e1      	mov	r9, ip
 8000f38:	d362      	bcc.n	8001000 <__udivmoddi4+0x2a8>
 8000f3a:	d05f      	beq.n	8000ffc <__udivmoddi4+0x2a4>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x1fe>
 8000f3e:	ebb8 0203 	subs.w	r2, r8, r3
 8000f42:	eb64 0409 	sbc.w	r4, r4, r9
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4e:	431e      	orrs	r6, r3
 8000f50:	40cc      	lsrs	r4, r1
 8000f52:	e9c5 6400 	strd	r6, r4, [r5]
 8000f56:	2100      	movs	r1, #0
 8000f58:	e74f      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000f5a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5e:	0c01      	lsrs	r1, r0, #16
 8000f60:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f64:	b280      	uxth	r0, r0
 8000f66:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	463c      	mov	r4, r7
 8000f70:	46b8      	mov	r8, r7
 8000f72:	46be      	mov	lr, r7
 8000f74:	2620      	movs	r6, #32
 8000f76:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f7a:	eba2 0208 	sub.w	r2, r2, r8
 8000f7e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f82:	e766      	b.n	8000e52 <__udivmoddi4+0xfa>
 8000f84:	4601      	mov	r1, r0
 8000f86:	e718      	b.n	8000dba <__udivmoddi4+0x62>
 8000f88:	4610      	mov	r0, r2
 8000f8a:	e72c      	b.n	8000de6 <__udivmoddi4+0x8e>
 8000f8c:	f1c6 0220 	rsb	r2, r6, #32
 8000f90:	fa2e f302 	lsr.w	r3, lr, r2
 8000f94:	40b7      	lsls	r7, r6
 8000f96:	40b1      	lsls	r1, r6
 8000f98:	fa20 f202 	lsr.w	r2, r0, r2
 8000f9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa6:	b2bc      	uxth	r4, r7
 8000fa8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fac:	0c11      	lsrs	r1, r2, #16
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb08 f904 	mul.w	r9, r8, r4
 8000fb6:	40b0      	lsls	r0, r6
 8000fb8:	4589      	cmp	r9, r1
 8000fba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fbe:	b280      	uxth	r0, r0
 8000fc0:	d93e      	bls.n	8001040 <__udivmoddi4+0x2e8>
 8000fc2:	1879      	adds	r1, r7, r1
 8000fc4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc8:	d201      	bcs.n	8000fce <__udivmoddi4+0x276>
 8000fca:	4589      	cmp	r9, r1
 8000fcc:	d81f      	bhi.n	800100e <__udivmoddi4+0x2b6>
 8000fce:	eba1 0109 	sub.w	r1, r1, r9
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fb09 f804 	mul.w	r8, r9, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe4:	4542      	cmp	r2, r8
 8000fe6:	d229      	bcs.n	800103c <__udivmoddi4+0x2e4>
 8000fe8:	18ba      	adds	r2, r7, r2
 8000fea:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fee:	d2c4      	bcs.n	8000f7a <__udivmoddi4+0x222>
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d2c2      	bcs.n	8000f7a <__udivmoddi4+0x222>
 8000ff4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff8:	443a      	add	r2, r7
 8000ffa:	e7be      	b.n	8000f7a <__udivmoddi4+0x222>
 8000ffc:	45f0      	cmp	r8, lr
 8000ffe:	d29d      	bcs.n	8000f3c <__udivmoddi4+0x1e4>
 8001000:	ebbe 0302 	subs.w	r3, lr, r2
 8001004:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001008:	3801      	subs	r0, #1
 800100a:	46e1      	mov	r9, ip
 800100c:	e796      	b.n	8000f3c <__udivmoddi4+0x1e4>
 800100e:	eba7 0909 	sub.w	r9, r7, r9
 8001012:	4449      	add	r1, r9
 8001014:	f1a8 0c02 	sub.w	ip, r8, #2
 8001018:	fbb1 f9fe 	udiv	r9, r1, lr
 800101c:	fb09 f804 	mul.w	r8, r9, r4
 8001020:	e7db      	b.n	8000fda <__udivmoddi4+0x282>
 8001022:	4673      	mov	r3, lr
 8001024:	e77f      	b.n	8000f26 <__udivmoddi4+0x1ce>
 8001026:	4650      	mov	r0, sl
 8001028:	e766      	b.n	8000ef8 <__udivmoddi4+0x1a0>
 800102a:	4608      	mov	r0, r1
 800102c:	e6fd      	b.n	8000e2a <__udivmoddi4+0xd2>
 800102e:	443b      	add	r3, r7
 8001030:	3a02      	subs	r2, #2
 8001032:	e733      	b.n	8000e9c <__udivmoddi4+0x144>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	443b      	add	r3, r7
 800103a:	e71c      	b.n	8000e76 <__udivmoddi4+0x11e>
 800103c:	4649      	mov	r1, r9
 800103e:	e79c      	b.n	8000f7a <__udivmoddi4+0x222>
 8001040:	eba1 0109 	sub.w	r1, r1, r9
 8001044:	46c4      	mov	ip, r8
 8001046:	fbb1 f9fe 	udiv	r9, r1, lr
 800104a:	fb09 f804 	mul.w	r8, r9, r4
 800104e:	e7c4      	b.n	8000fda <__udivmoddi4+0x282>

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af04      	add	r7, sp, #16
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 800105e:	4b32      	ldr	r3, [pc, #200]	@ (8001128 <set_int_enable+0xd4>)
 8001060:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001064:	2b00      	cmp	r3, #0
 8001066:	d025      	beq.n	80010b4 <set_int_enable+0x60>
        if (enable)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 800106e:	2302      	movs	r3, #2
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e001      	b.n	8001078 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001078:	4b2b      	ldr	r3, [pc, #172]	@ (8001128 <set_int_enable+0xd4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	b299      	uxth	r1, r3
 8001082:	4b29      	ldr	r3, [pc, #164]	@ (8001128 <set_int_enable+0xd4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	7bdb      	ldrb	r3, [r3, #15]
 8001088:	461a      	mov	r2, r3
 800108a:	2305      	movs	r3, #5
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f107 030f 	add.w	r3, r7, #15
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	4824      	ldr	r0, [pc, #144]	@ (800112c <set_int_enable+0xd8>)
 800109c:	f009 fb0c 	bl	800a6b8 <HAL_I2C_Mem_Write>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <set_int_enable+0x58>
            return -1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e039      	b.n	8001120 <set_int_enable+0xcc>
        st.chip_cfg.int_enable = tmp;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <set_int_enable+0xd4>)
 80010b0:	745a      	strb	r2, [r3, #17]
 80010b2:	e034      	b.n	800111e <set_int_enable+0xca>
    } else {
        if (!st.chip_cfg.sensors)
 80010b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <set_int_enable+0xd4>)
 80010b6:	7a9b      	ldrb	r3, [r3, #10]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <set_int_enable+0x6e>
            return -1;
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	e02e      	b.n	8001120 <set_int_enable+0xcc>
        if (enable && st.chip_cfg.int_enable)
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <set_int_enable+0x80>
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <set_int_enable+0xd4>)
 80010ca:	7c5b      	ldrb	r3, [r3, #17]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <set_int_enable+0x80>
            return 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e025      	b.n	8001120 <set_int_enable+0xcc>
        if (enable)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <set_int_enable+0x8c>
            tmp = BIT_DATA_RDY_EN;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e001      	b.n	80010e4 <set_int_enable+0x90>
        else
            tmp = 0x00;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80010e4:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <set_int_enable+0xd4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	b299      	uxth	r1, r3
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <set_int_enable+0xd4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	7bdb      	ldrb	r3, [r3, #15]
 80010f4:	461a      	mov	r2, r3
 80010f6:	2305      	movs	r3, #5
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	2301      	movs	r3, #1
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	f107 030f 	add.w	r3, r7, #15
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	4809      	ldr	r0, [pc, #36]	@ (800112c <set_int_enable+0xd8>)
 8001108:	f009 fad6 	bl	800a6b8 <HAL_I2C_Mem_Write>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <set_int_enable+0xc4>
            return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e003      	b.n	8001120 <set_int_enable+0xcc>
        st.chip_cfg.int_enable = tmp;
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	4b03      	ldr	r3, [pc, #12]	@ (8001128 <set_int_enable+0xd4>)
 800111c:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000000 	.word	0x20000000
 800112c:	20000328 	.word	0x20000328

08001130 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af04      	add	r7, sp, #16
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = 0x80;//BIT_RESET;
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 800113a:	4b95      	ldr	r3, [pc, #596]	@ (8001390 <mpu_init+0x260>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	b299      	uxth	r1, r3
 8001144:	4b92      	ldr	r3, [pc, #584]	@ (8001390 <mpu_init+0x260>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	7c9b      	ldrb	r3, [r3, #18]
 800114a:	461a      	mov	r2, r3
 800114c:	2305      	movs	r3, #5
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	2301      	movs	r3, #1
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	463b      	mov	r3, r7
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	488e      	ldr	r0, [pc, #568]	@ (8001394 <mpu_init+0x264>)
 800115c:	f009 faac 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <mpu_init+0x3c>
        return -1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e10c      	b.n	8001386 <mpu_init+0x256>
    delay_ms(100);
 800116c:	2064      	movs	r0, #100	@ 0x64
 800116e:	f008 fcb3 	bl	8009ad8 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8001172:	2300      	movs	r3, #0
 8001174:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 8001176:	4b86      	ldr	r3, [pc, #536]	@ (8001390 <mpu_init+0x260>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b299      	uxth	r1, r3
 8001180:	4b83      	ldr	r3, [pc, #524]	@ (8001390 <mpu_init+0x260>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	7c9b      	ldrb	r3, [r3, #18]
 8001186:	461a      	mov	r2, r3
 8001188:	2305      	movs	r3, #5
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2301      	movs	r3, #1
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	463b      	mov	r3, r7
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	487f      	ldr	r0, [pc, #508]	@ (8001394 <mpu_init+0x264>)
 8001198:	f009 fa8e 	bl	800a6b8 <HAL_I2C_Mem_Write>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <mpu_init+0x78>
        return -1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	e0ee      	b.n	8001386 <mpu_init+0x256>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 80011a8:	4b79      	ldr	r3, [pc, #484]	@ (8001390 <mpu_init+0x260>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	b299      	uxth	r1, r3
 80011b2:	4b77      	ldr	r3, [pc, #476]	@ (8001390 <mpu_init+0x260>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	7d9b      	ldrb	r3, [r3, #22]
 80011b8:	461a      	mov	r2, r3
 80011ba:	2305      	movs	r3, #5
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	2306      	movs	r3, #6
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	463b      	mov	r3, r7
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	4872      	ldr	r0, [pc, #456]	@ (8001394 <mpu_init+0x264>)
 80011ca:	f009 fb6f 	bl	800a8ac <HAL_I2C_Mem_Read>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <mpu_init+0xaa>
        return -1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	e0d5      	b.n	8001386 <mpu_init+0x256>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 80011da:	797b      	ldrb	r3, [r7, #5]
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 80011fa:	787b      	ldrb	r3, [r7, #1]
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8001204:	4313      	orrs	r3, r2
 8001206:	b25b      	sxtb	r3, r3
 8001208:	71fb      	strb	r3, [r7, #7]

    if (rev) {
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d015      	beq.n	800123c <mpu_init+0x10c>
        /* Congrats, these parts are better. */
        if (rev == 1)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d103      	bne.n	800121e <mpu_init+0xee>
            st.chip_cfg.accel_half = 1;
 8001216:	4b5e      	ldr	r3, [pc, #376]	@ (8001390 <mpu_init+0x260>)
 8001218:	2201      	movs	r2, #1
 800121a:	74da      	strb	r2, [r3, #19]
 800121c:	e041      	b.n	80012a2 <mpu_init+0x172>
        else if (rev == 2)
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d103      	bne.n	800122c <mpu_init+0xfc>
            st.chip_cfg.accel_half = 0;
 8001224:	4b5a      	ldr	r3, [pc, #360]	@ (8001390 <mpu_init+0x260>)
 8001226:	2200      	movs	r2, #0
 8001228:	74da      	strb	r2, [r3, #19]
 800122a:	e03a      	b.n	80012a2 <mpu_init+0x172>
        else {
            log_e("Unsupported software product rev %d.\n",rev);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4619      	mov	r1, r3
 8001230:	4859      	ldr	r0, [pc, #356]	@ (8001398 <mpu_init+0x268>)
 8001232:	f00d fc09 	bl	800ea48 <iprintf>
            return -1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e0a4      	b.n	8001386 <mpu_init+0x256>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, &(data[0])))
 800123c:	4b54      	ldr	r3, [pc, #336]	@ (8001390 <mpu_init+0x260>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	b299      	uxth	r1, r3
 8001246:	4b52      	ldr	r3, [pc, #328]	@ (8001390 <mpu_init+0x260>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	78db      	ldrb	r3, [r3, #3]
 800124c:	461a      	mov	r2, r3
 800124e:	2305      	movs	r3, #5
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	2301      	movs	r3, #1
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	463b      	mov	r3, r7
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	484d      	ldr	r0, [pc, #308]	@ (8001394 <mpu_init+0x264>)
 800125e:	f009 fb25 	bl	800a8ac <HAL_I2C_Mem_Read>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <mpu_init+0x13e>
            return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	e08b      	b.n	8001386 <mpu_init+0x256>
        rev = data[0] & 0x0F;
 800126e:	783b      	ldrb	r3, [r7, #0]
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	71fb      	strb	r3, [r7, #7]
        if (!rev) {
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <mpu_init+0x158>
            log_e("Product ID read as 0 indicates device is either incompatible or an MPU3050.\r\n");
 800127c:	4847      	ldr	r0, [pc, #284]	@ (800139c <mpu_init+0x26c>)
 800127e:	f00d fc4b 	bl	800eb18 <puts>
            return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e07e      	b.n	8001386 <mpu_init+0x256>
        } else if (rev == 4) {
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b04      	cmp	r3, #4
 800128c:	d106      	bne.n	800129c <mpu_init+0x16c>
            log_i("Half sensitivity part found.\r\n");
 800128e:	4844      	ldr	r0, [pc, #272]	@ (80013a0 <mpu_init+0x270>)
 8001290:	f00d fc42 	bl	800eb18 <puts>
            st.chip_cfg.accel_half = 1;
 8001294:	4b3e      	ldr	r3, [pc, #248]	@ (8001390 <mpu_init+0x260>)
 8001296:	2201      	movs	r2, #1
 8001298:	74da      	strb	r2, [r3, #19]
 800129a:	e002      	b.n	80012a2 <mpu_init+0x172>
        } else
            st.chip_cfg.accel_half = 0;
 800129c:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <mpu_init+0x260>)
 800129e:	2200      	movs	r2, #0
 80012a0:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 80012a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <mpu_init+0x260>)
 80012a4:	22ff      	movs	r2, #255	@ 0xff
 80012a6:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 80012a8:	4b39      	ldr	r3, [pc, #228]	@ (8001390 <mpu_init+0x260>)
 80012aa:	22ff      	movs	r2, #255	@ 0xff
 80012ac:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 80012ae:	4b38      	ldr	r3, [pc, #224]	@ (8001390 <mpu_init+0x260>)
 80012b0:	22ff      	movs	r2, #255	@ 0xff
 80012b2:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 80012b4:	4b36      	ldr	r3, [pc, #216]	@ (8001390 <mpu_init+0x260>)
 80012b6:	22ff      	movs	r2, #255	@ 0xff
 80012b8:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 80012ba:	4b35      	ldr	r3, [pc, #212]	@ (8001390 <mpu_init+0x260>)
 80012bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012c0:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 80012c2:	4b33      	ldr	r3, [pc, #204]	@ (8001390 <mpu_init+0x260>)
 80012c4:	22ff      	movs	r2, #255	@ 0xff
 80012c6:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 80012c8:	4b31      	ldr	r3, [pc, #196]	@ (8001390 <mpu_init+0x260>)
 80012ca:	22ff      	movs	r2, #255	@ 0xff
 80012cc:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80012ce:	4b30      	ldr	r3, [pc, #192]	@ (8001390 <mpu_init+0x260>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 80012d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001390 <mpu_init+0x260>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    st.chip_cfg.latched_int = 0;
 80012dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001390 <mpu_init+0x260>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    st.chip_cfg.int_motion_only = 0;
 80012e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <mpu_init+0x260>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 80012ea:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <mpu_init+0x260>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80012f0:	220c      	movs	r2, #12
 80012f2:	2100      	movs	r1, #0
 80012f4:	482b      	ldr	r0, [pc, #172]	@ (80013a4 <mpu_init+0x274>)
 80012f6:	f00d fcff 	bl	800ecf8 <memset>
    st.chip_cfg.dmp_on = 0;
 80012fa:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <mpu_init+0x260>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    st.chip_cfg.dmp_loaded = 0;
 8001302:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <mpu_init+0x260>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <mpu_init+0x260>)
 800130c:	2200      	movs	r2, #0
 800130e:	84da      	strh	r2, [r3, #38]	@ 0x26

    if (mpu_set_gyro_fsr(2000))
 8001310:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001314:	f000 fa76 	bl	8001804 <mpu_set_gyro_fsr>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <mpu_init+0x1f4>
        return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e030      	b.n	8001386 <mpu_init+0x256>
    if (mpu_set_accel_fsr(2))
 8001324:	2002      	movs	r0, #2
 8001326:	f000 fb07 	bl	8001938 <mpu_set_accel_fsr>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <mpu_init+0x206>
        return -1;
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	e027      	b.n	8001386 <mpu_init+0x256>
    if (mpu_set_lpf(42))
 8001336:	202a      	movs	r0, #42	@ 0x2a
 8001338:	f000 fbae 	bl	8001a98 <mpu_set_lpf>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <mpu_init+0x218>
        return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e01e      	b.n	8001386 <mpu_init+0x256>
    if (mpu_set_sample_rate(50))
 8001348:	2032      	movs	r0, #50	@ 0x32
 800134a:	f000 fc19 	bl	8001b80 <mpu_set_sample_rate>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <mpu_init+0x22a>
        return -1;
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	e015      	b.n	8001386 <mpu_init+0x256>
    if (mpu_configure_fifo(0))
 800135a:	2000      	movs	r0, #0
 800135c:	f000 fd0a 	bl	8001d74 <mpu_configure_fifo>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <mpu_init+0x23c>
        return -1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e00c      	b.n	8001386 <mpu_init+0x256>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 800136c:	2000      	movs	r0, #0
 800136e:	f000 fe89 	bl	8002084 <mpu_set_bypass>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <mpu_init+0x24e>
        return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	e003      	b.n	8001386 <mpu_init+0x256>
#endif

    mpu_set_sensors(0);
 800137e:	2000      	movs	r0, #0
 8001380:	f000 fd4a 	bl	8001e18 <mpu_set_sensors>
    return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000000 	.word	0x20000000
 8001394:	20000328 	.word	0x20000328
 8001398:	080116d8 	.word	0x080116d8
 800139c:	08011700 	.word	0x08011700
 80013a0:	08011750 	.word	0x08011750
 80013a4:	20000016 	.word	0x20000016

080013a8 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af04      	add	r7, sp, #16
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b28      	cmp	r3, #40	@ 0x28
 80013b6:	d902      	bls.n	80013be <mpu_lp_accel_mode+0x16>
        return -1;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	e07d      	b.n	80014ba <mpu_lp_accel_mode+0x112>

    if (!rate) {
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d125      	bne.n	8001410 <mpu_lp_accel_mode+0x68>
        mpu_set_int_latched(0);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f000 ff5b 	bl	8002280 <mpu_set_int_latched>
        tmp[0] = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 80013ce:	2307      	movs	r3, #7
 80013d0:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80013d2:	4b3c      	ldr	r3, [pc, #240]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	b299      	uxth	r1, r3
 80013dc:	4b39      	ldr	r3, [pc, #228]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	7c9b      	ldrb	r3, [r3, #18]
 80013e2:	461a      	mov	r2, r3
 80013e4:	2305      	movs	r3, #5
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	2302      	movs	r3, #2
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	4834      	ldr	r0, [pc, #208]	@ (80014c8 <mpu_lp_accel_mode+0x120>)
 80013f6:	f009 f95f 	bl	800a6b8 <HAL_I2C_Mem_Write>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <mpu_lp_accel_mode+0x5e>
            return -1;
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	e059      	b.n	80014ba <mpu_lp_accel_mode+0x112>
        st.chip_cfg.lp_accel_mode = 0;
 8001406:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 8001408:	2200      	movs	r2, #0
 800140a:	751a      	strb	r2, [r3, #20]
        return 0;
 800140c:	2300      	movs	r3, #0
 800140e:	e054      	b.n	80014ba <mpu_lp_accel_mode+0x112>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8001410:	2001      	movs	r0, #1
 8001412:	f000 ff35 	bl	8002280 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8001416:	2320      	movs	r3, #32
 8001418:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d105      	bne.n	800142c <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_1_25HZ;
 8001420:	2300      	movs	r3, #0
 8001422:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001424:	2005      	movs	r0, #5
 8001426:	f000 fb37 	bl	8001a98 <mpu_set_lpf>
 800142a:	e016      	b.n	800145a <mpu_lp_accel_mode+0xb2>
    } else if (rate <= 5) {
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d805      	bhi.n	800143e <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_5HZ;
 8001432:	2301      	movs	r3, #1
 8001434:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001436:	2005      	movs	r0, #5
 8001438:	f000 fb2e 	bl	8001a98 <mpu_set_lpf>
 800143c:	e00d      	b.n	800145a <mpu_lp_accel_mode+0xb2>
    } else if (rate <= 20) {
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b14      	cmp	r3, #20
 8001442:	d805      	bhi.n	8001450 <mpu_lp_accel_mode+0xa8>
        tmp[1] = INV_LPA_20HZ;
 8001444:	2302      	movs	r3, #2
 8001446:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 8001448:	200a      	movs	r0, #10
 800144a:	f000 fb25 	bl	8001a98 <mpu_set_lpf>
 800144e:	e004      	b.n	800145a <mpu_lp_accel_mode+0xb2>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8001450:	2303      	movs	r3, #3
 8001452:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8001454:	2014      	movs	r0, #20
 8001456:	f000 fb1f 	bl	8001a98 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 800145a:	7b7b      	ldrb	r3, [r7, #13]
 800145c:	b25b      	sxtb	r3, r3
 800145e:	019b      	lsls	r3, r3, #6
 8001460:	b25b      	sxtb	r3, r3
 8001462:	f043 0307 	orr.w	r3, r3, #7
 8001466:	b25b      	sxtb	r3, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	b299      	uxth	r1, r3
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7c9b      	ldrb	r3, [r3, #18]
 800147c:	461a      	mov	r2, r3
 800147e:	2305      	movs	r3, #5
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	2302      	movs	r3, #2
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	480e      	ldr	r0, [pc, #56]	@ (80014c8 <mpu_lp_accel_mode+0x120>)
 8001490:	f009 f912 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <mpu_lp_accel_mode+0xf8>
        return -1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e00c      	b.n	80014ba <mpu_lp_accel_mode+0x112>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80014a2:	2208      	movs	r2, #8
 80014a4:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 fc5e 	bl	8001d74 <mpu_configure_fifo>

    return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000328 	.word	0x20000328

080014cc <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af04      	add	r7, sp, #16
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80014d2:	4b9e      	ldr	r3, [pc, #632]	@ (800174c <mpu_reset_fifo+0x280>)
 80014d4:	7a9b      	ldrb	r3, [r3, #10]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <mpu_reset_fifo+0x14>
        return -1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	e153      	b.n	8001788 <mpu_reset_fifo+0x2bc>

    data = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80014e4:	4b99      	ldr	r3, [pc, #612]	@ (800174c <mpu_reset_fifo+0x280>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	b299      	uxth	r1, r3
 80014ee:	4b97      	ldr	r3, [pc, #604]	@ (800174c <mpu_reset_fifo+0x280>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	7bdb      	ldrb	r3, [r3, #15]
 80014f4:	461a      	mov	r2, r3
 80014f6:	2305      	movs	r3, #5
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	2301      	movs	r3, #1
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2301      	movs	r3, #1
 8001504:	4892      	ldr	r0, [pc, #584]	@ (8001750 <mpu_reset_fifo+0x284>)
 8001506:	f009 f8d7 	bl	800a6b8 <HAL_I2C_Mem_Write>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <mpu_reset_fifo+0x4a>
        return -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	e138      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001516:	4b8d      	ldr	r3, [pc, #564]	@ (800174c <mpu_reset_fifo+0x280>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	b299      	uxth	r1, r3
 8001520:	4b8a      	ldr	r3, [pc, #552]	@ (800174c <mpu_reset_fifo+0x280>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	795b      	ldrb	r3, [r3, #5]
 8001526:	461a      	mov	r2, r3
 8001528:	2305      	movs	r3, #5
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	2301      	movs	r3, #1
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	4886      	ldr	r0, [pc, #536]	@ (8001750 <mpu_reset_fifo+0x284>)
 8001538:	f009 f8be 	bl	800a6b8 <HAL_I2C_Mem_Write>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <mpu_reset_fifo+0x7c>
        return -1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e11f      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001548:	4b80      	ldr	r3, [pc, #512]	@ (800174c <mpu_reset_fifo+0x280>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b299      	uxth	r1, r3
 8001552:	4b7e      	ldr	r3, [pc, #504]	@ (800174c <mpu_reset_fifo+0x280>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	791b      	ldrb	r3, [r3, #4]
 8001558:	461a      	mov	r2, r3
 800155a:	2305      	movs	r3, #5
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	2301      	movs	r3, #1
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2301      	movs	r3, #1
 8001568:	4879      	ldr	r0, [pc, #484]	@ (8001750 <mpu_reset_fifo+0x284>)
 800156a:	f009 f8a5 	bl	800a6b8 <HAL_I2C_Mem_Write>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <mpu_reset_fifo+0xae>
        return -1;
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	e106      	b.n	8001788 <mpu_reset_fifo+0x2bc>

    if (st.chip_cfg.dmp_on) {
 800157a:	4b74      	ldr	r3, [pc, #464]	@ (800174c <mpu_reset_fifo+0x280>)
 800157c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001580:	2b00      	cmp	r3, #0
 8001582:	d07e      	beq.n	8001682 <mpu_reset_fifo+0x1b6>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8001584:	230c      	movs	r3, #12
 8001586:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001588:	4b70      	ldr	r3, [pc, #448]	@ (800174c <mpu_reset_fifo+0x280>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	b299      	uxth	r1, r3
 8001592:	4b6e      	ldr	r3, [pc, #440]	@ (800174c <mpu_reset_fifo+0x280>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	791b      	ldrb	r3, [r3, #4]
 8001598:	461a      	mov	r2, r3
 800159a:	2305      	movs	r3, #5
 800159c:	9302      	str	r3, [sp, #8]
 800159e:	2301      	movs	r3, #1
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2301      	movs	r3, #1
 80015a8:	4869      	ldr	r0, [pc, #420]	@ (8001750 <mpu_reset_fifo+0x284>)
 80015aa:	f009 f885 	bl	800a6b8 <HAL_I2C_Mem_Write>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <mpu_reset_fifo+0xee>
            return -1;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	e0e6      	b.n	8001788 <mpu_reset_fifo+0x2bc>
       
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80015ba:	23c0      	movs	r3, #192	@ 0xc0
 80015bc:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80015be:	4b63      	ldr	r3, [pc, #396]	@ (800174c <mpu_reset_fifo+0x280>)
 80015c0:	7a9b      	ldrb	r3, [r3, #10]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <mpu_reset_fifo+0x108>
            data |= BIT_AUX_IF_EN;
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f043 0320 	orr.w	r3, r3, #32
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80015d4:	4b5d      	ldr	r3, [pc, #372]	@ (800174c <mpu_reset_fifo+0x280>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	b299      	uxth	r1, r3
 80015de:	4b5b      	ldr	r3, [pc, #364]	@ (800174c <mpu_reset_fifo+0x280>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	791b      	ldrb	r3, [r3, #4]
 80015e4:	461a      	mov	r2, r3
 80015e6:	2305      	movs	r3, #5
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2301      	movs	r3, #1
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2301      	movs	r3, #1
 80015f4:	4856      	ldr	r0, [pc, #344]	@ (8001750 <mpu_reset_fifo+0x284>)
 80015f6:	f009 f85f 	bl	800a6b8 <HAL_I2C_Mem_Write>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <mpu_reset_fifo+0x13a>
            return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
 8001604:	e0c0      	b.n	8001788 <mpu_reset_fifo+0x2bc>
        if (st.chip_cfg.int_enable)
 8001606:	4b51      	ldr	r3, [pc, #324]	@ (800174c <mpu_reset_fifo+0x280>)
 8001608:	7c5b      	ldrb	r3, [r3, #17]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <mpu_reset_fifo+0x148>
            data = BIT_DMP_INT_EN;
 800160e:	2302      	movs	r3, #2
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	e001      	b.n	8001618 <mpu_reset_fifo+0x14c>
        else
            data = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001618:	4b4c      	ldr	r3, [pc, #304]	@ (800174c <mpu_reset_fifo+0x280>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	b299      	uxth	r1, r3
 8001622:	4b4a      	ldr	r3, [pc, #296]	@ (800174c <mpu_reset_fifo+0x280>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	7bdb      	ldrb	r3, [r3, #15]
 8001628:	461a      	mov	r2, r3
 800162a:	2305      	movs	r3, #5
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	2301      	movs	r3, #1
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2301      	movs	r3, #1
 8001638:	4845      	ldr	r0, [pc, #276]	@ (8001750 <mpu_reset_fifo+0x284>)
 800163a:	f009 f83d 	bl	800a6b8 <HAL_I2C_Mem_Write>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <mpu_reset_fifo+0x17e>
            return -1;
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	e09e      	b.n	8001788 <mpu_reset_fifo+0x2bc>
        data = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800164e:	4b3f      	ldr	r3, [pc, #252]	@ (800174c <mpu_reset_fifo+0x280>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	b299      	uxth	r1, r3
 8001658:	4b3c      	ldr	r3, [pc, #240]	@ (800174c <mpu_reset_fifo+0x280>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	795b      	ldrb	r3, [r3, #5]
 800165e:	461a      	mov	r2, r3
 8001660:	2305      	movs	r3, #5
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	2301      	movs	r3, #1
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	1dfb      	adds	r3, r7, #7
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2301      	movs	r3, #1
 800166e:	4838      	ldr	r0, [pc, #224]	@ (8001750 <mpu_reset_fifo+0x284>)
 8001670:	f009 f822 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8085 	beq.w	8001786 <mpu_reset_fifo+0x2ba>
            return -1;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	e082      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    } else {
        data = BIT_FIFO_RST;
 8001682:	2304      	movs	r3, #4
 8001684:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001686:	4b31      	ldr	r3, [pc, #196]	@ (800174c <mpu_reset_fifo+0x280>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	b299      	uxth	r1, r3
 8001690:	4b2e      	ldr	r3, [pc, #184]	@ (800174c <mpu_reset_fifo+0x280>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	791b      	ldrb	r3, [r3, #4]
 8001696:	461a      	mov	r2, r3
 8001698:	2305      	movs	r3, #5
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2301      	movs	r3, #1
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	482a      	ldr	r0, [pc, #168]	@ (8001750 <mpu_reset_fifo+0x284>)
 80016a8:	f009 f806 	bl	800a6b8 <HAL_I2C_Mem_Write>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <mpu_reset_fifo+0x1ec>
            return -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e067      	b.n	8001788 <mpu_reset_fifo+0x2bc>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80016b8:	4b24      	ldr	r3, [pc, #144]	@ (800174c <mpu_reset_fifo+0x280>)
 80016ba:	7c9b      	ldrb	r3, [r3, #18]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d105      	bne.n	80016cc <mpu_reset_fifo+0x200>
 80016c0:	4b22      	ldr	r3, [pc, #136]	@ (800174c <mpu_reset_fifo+0x280>)
 80016c2:	7a9b      	ldrb	r3, [r3, #10]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <mpu_reset_fifo+0x206>
            data = BIT_FIFO_EN;
 80016cc:	2340      	movs	r3, #64	@ 0x40
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	e001      	b.n	80016d6 <mpu_reset_fifo+0x20a>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 80016d2:	2360      	movs	r3, #96	@ 0x60
 80016d4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80016d6:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <mpu_reset_fifo+0x280>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	b299      	uxth	r1, r3
 80016e0:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <mpu_reset_fifo+0x280>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	791b      	ldrb	r3, [r3, #4]
 80016e6:	461a      	mov	r2, r3
 80016e8:	2305      	movs	r3, #5
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	2301      	movs	r3, #1
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	1dfb      	adds	r3, r7, #7
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	4816      	ldr	r0, [pc, #88]	@ (8001750 <mpu_reset_fifo+0x284>)
 80016f8:	f008 ffde 	bl	800a6b8 <HAL_I2C_Mem_Write>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <mpu_reset_fifo+0x23c>
            return -1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e03f      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    
        if (st.chip_cfg.int_enable)
 8001708:	4b10      	ldr	r3, [pc, #64]	@ (800174c <mpu_reset_fifo+0x280>)
 800170a:	7c5b      	ldrb	r3, [r3, #17]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <mpu_reset_fifo+0x24a>
            data = BIT_DATA_RDY_EN;
 8001710:	2301      	movs	r3, #1
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	e001      	b.n	800171a <mpu_reset_fifo+0x24e>
        else
            data = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <mpu_reset_fifo+0x280>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	b299      	uxth	r1, r3
 8001724:	4b09      	ldr	r3, [pc, #36]	@ (800174c <mpu_reset_fifo+0x280>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	7bdb      	ldrb	r3, [r3, #15]
 800172a:	461a      	mov	r2, r3
 800172c:	2305      	movs	r3, #5
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	2301      	movs	r3, #1
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	1dfb      	adds	r3, r7, #7
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	4805      	ldr	r0, [pc, #20]	@ (8001750 <mpu_reset_fifo+0x284>)
 800173c:	f008 ffbc 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <mpu_reset_fifo+0x288>
            return -1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	e01d      	b.n	8001788 <mpu_reset_fifo+0x2bc>
 800174c:	20000000 	.word	0x20000000
 8001750:	20000328 	.word	0x20000328
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <mpu_reset_fifo+0x2c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	b299      	uxth	r1, r3
 800175e:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <mpu_reset_fifo+0x2c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	795b      	ldrb	r3, [r3, #5]
 8001764:	461a      	mov	r2, r3
 8001766:	2305      	movs	r3, #5
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	2301      	movs	r3, #1
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <mpu_reset_fifo+0x2c8>)
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	4808      	ldr	r0, [pc, #32]	@ (8001798 <mpu_reset_fifo+0x2cc>)
 8001776:	f008 ff9f 	bl	800a6b8 <HAL_I2C_Mem_Write>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <mpu_reset_fifo+0x2ba>
            return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	e000      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    }
    return 0;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000000 	.word	0x20000000
 8001794:	20000010 	.word	0x20000010
 8001798:	20000328 	.word	0x20000328

0800179c <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 80017a4:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <mpu_get_gyro_fsr+0x64>)
 80017a6:	7a1b      	ldrb	r3, [r3, #8]
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d81e      	bhi.n	80017ea <mpu_get_gyro_fsr+0x4e>
 80017ac:	a201      	add	r2, pc, #4	@ (adr r2, 80017b4 <mpu_get_gyro_fsr+0x18>)
 80017ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b2:	bf00      	nop
 80017b4:	080017c5 	.word	0x080017c5
 80017b8:	080017cd 	.word	0x080017cd
 80017bc:	080017d7 	.word	0x080017d7
 80017c0:	080017e1 	.word	0x080017e1
    case INV_FSR_250DPS:
        fsr[0] = 250;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	22fa      	movs	r2, #250	@ 0xfa
 80017c8:	801a      	strh	r2, [r3, #0]
        break;
 80017ca:	e012      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80017d2:	801a      	strh	r2, [r3, #0]
        break;
 80017d4:	e00d      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017dc:	801a      	strh	r2, [r3, #0]
        break;
 80017de:	e008      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80017e6:	801a      	strh	r2, [r3, #0]
        break;
 80017e8:	e003      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	801a      	strh	r2, [r3, #0]
        break;
 80017f0:	bf00      	nop
    }
    return 0;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	20000000 	.word	0x20000000

08001804 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af04      	add	r7, sp, #16
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800180e:	4b2b      	ldr	r3, [pc, #172]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 8001810:	7a9b      	ldrb	r3, [r3, #10]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <mpu_set_gyro_fsr+0x18>
        return -1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e04a      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>

    switch (fsr) {
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001822:	d017      	beq.n	8001854 <mpu_set_gyro_fsr+0x50>
 8001824:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001828:	dc17      	bgt.n	800185a <mpu_set_gyro_fsr+0x56>
 800182a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800182e:	d00e      	beq.n	800184e <mpu_set_gyro_fsr+0x4a>
 8001830:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001834:	dc11      	bgt.n	800185a <mpu_set_gyro_fsr+0x56>
 8001836:	2bfa      	cmp	r3, #250	@ 0xfa
 8001838:	d003      	beq.n	8001842 <mpu_set_gyro_fsr+0x3e>
 800183a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800183e:	d003      	beq.n	8001848 <mpu_set_gyro_fsr+0x44>
 8001840:	e00b      	b.n	800185a <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
        break;
 8001846:	e00b      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8001848:	2308      	movs	r3, #8
 800184a:	73fb      	strb	r3, [r7, #15]
        break;
 800184c:	e008      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 800184e:	2310      	movs	r3, #16
 8001850:	73fb      	strb	r3, [r7, #15]
        break;
 8001852:	e005      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8001854:	2318      	movs	r3, #24
 8001856:	73fb      	strb	r3, [r7, #15]
        break;
 8001858:	e002      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e028      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 8001862:	7a1a      	ldrb	r2, [r3, #8]
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	429a      	cmp	r2, r3
 800186c:	d101      	bne.n	8001872 <mpu_set_gyro_fsr+0x6e>
        return 0;
 800186e:	2300      	movs	r3, #0
 8001870:	e01f      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8001872:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	b299      	uxth	r1, r3
 800187c:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	799b      	ldrb	r3, [r3, #6]
 8001882:	461a      	mov	r2, r3
 8001884:	2305      	movs	r3, #5
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2301      	movs	r3, #1
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	f107 030f 	add.w	r3, r7, #15
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	480a      	ldr	r0, [pc, #40]	@ (80018c0 <mpu_set_gyro_fsr+0xbc>)
 8001896:	f008 ff0f 	bl	800a6b8 <HAL_I2C_Mem_Write>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <mpu_set_gyro_fsr+0xa2>
        return -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	e005      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>
    st.chip_cfg.gyro_fsr = data >> 3;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 80018ae:	721a      	strb	r2, [r3, #8]
    return 0;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000328 	.word	0x20000328

080018c4 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <mpu_get_accel_fsr+0x70>)
 80018ce:	7a5b      	ldrb	r3, [r3, #9]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d81b      	bhi.n	800190c <mpu_get_accel_fsr+0x48>
 80018d4:	a201      	add	r2, pc, #4	@ (adr r2, 80018dc <mpu_get_accel_fsr+0x18>)
 80018d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018da:	bf00      	nop
 80018dc:	080018ed 	.word	0x080018ed
 80018e0:	080018f5 	.word	0x080018f5
 80018e4:	080018fd 	.word	0x080018fd
 80018e8:	08001905 	.word	0x08001905
    case INV_FSR_2G:
        fsr[0] = 2;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	701a      	strb	r2, [r3, #0]
        break;
 80018f2:	e00e      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2204      	movs	r2, #4
 80018f8:	701a      	strb	r2, [r3, #0]
        break;
 80018fa:	e00a      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2208      	movs	r2, #8
 8001900:	701a      	strb	r2, [r3, #0]
        break;
 8001902:	e006      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2210      	movs	r2, #16
 8001908:	701a      	strb	r2, [r3, #0]
        break;
 800190a:	e002      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	e00a      	b.n	8001928 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <mpu_get_accel_fsr+0x70>)
 8001914:	7cdb      	ldrb	r3, [r3, #19]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	b2da      	uxtb	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	701a      	strb	r2, [r3, #0]
    return 0;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	20000000 	.word	0x20000000

08001938 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af04      	add	r7, sp, #16
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001942:	4b34      	ldr	r3, [pc, #208]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 8001944:	7a9b      	ldrb	r3, [r3, #10]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <mpu_set_accel_fsr+0x18>
        return -1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e05d      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>

    switch (fsr) {
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	3b02      	subs	r3, #2
 8001954:	2b0e      	cmp	r3, #14
 8001956:	d82d      	bhi.n	80019b4 <mpu_set_accel_fsr+0x7c>
 8001958:	a201      	add	r2, pc, #4	@ (adr r2, 8001960 <mpu_set_accel_fsr+0x28>)
 800195a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195e:	bf00      	nop
 8001960:	0800199d 	.word	0x0800199d
 8001964:	080019b5 	.word	0x080019b5
 8001968:	080019a3 	.word	0x080019a3
 800196c:	080019b5 	.word	0x080019b5
 8001970:	080019b5 	.word	0x080019b5
 8001974:	080019b5 	.word	0x080019b5
 8001978:	080019a9 	.word	0x080019a9
 800197c:	080019b5 	.word	0x080019b5
 8001980:	080019b5 	.word	0x080019b5
 8001984:	080019b5 	.word	0x080019b5
 8001988:	080019b5 	.word	0x080019b5
 800198c:	080019b5 	.word	0x080019b5
 8001990:	080019b5 	.word	0x080019b5
 8001994:	080019b5 	.word	0x080019b5
 8001998:	080019af 	.word	0x080019af
    case 2:
        data = INV_FSR_2G << 3;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
        break;
 80019a0:	e00b      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 80019a2:	2308      	movs	r3, #8
 80019a4:	73fb      	strb	r3, [r7, #15]
        break;
 80019a6:	e008      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 80019a8:	2310      	movs	r3, #16
 80019aa:	73fb      	strb	r3, [r7, #15]
        break;
 80019ac:	e005      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 80019ae:	2318      	movs	r3, #24
 80019b0:	73fb      	strb	r3, [r7, #15]
        break;
 80019b2:	e002      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
 80019b8:	e028      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 80019ba:	4b16      	ldr	r3, [pc, #88]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 80019bc:	7a5a      	ldrb	r2, [r3, #9]
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	08db      	lsrs	r3, r3, #3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d101      	bne.n	80019cc <mpu_set_accel_fsr+0x94>
        return 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	e01f      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	b299      	uxth	r1, r3
 80019d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	79db      	ldrb	r3, [r3, #7]
 80019dc:	461a      	mov	r2, r3
 80019de:	2305      	movs	r3, #5
 80019e0:	9302      	str	r3, [sp, #8]
 80019e2:	2301      	movs	r3, #1
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	f107 030f 	add.w	r3, r7, #15
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2301      	movs	r3, #1
 80019ee:	480a      	ldr	r0, [pc, #40]	@ (8001a18 <mpu_set_accel_fsr+0xe0>)
 80019f0:	f008 fe62 	bl	800a6b8 <HAL_I2C_Mem_Write>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <mpu_set_accel_fsr+0xc8>
        return -1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	e005      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>
    st.chip_cfg.accel_fsr = data >> 3;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	08db      	lsrs	r3, r3, #3
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 8001a08:	725a      	strb	r2, [r3, #9]
    return 0;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000328 	.word	0x20000328

08001a1c <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 8001a24:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <mpu_get_lpf+0x78>)
 8001a26:	7adb      	ldrb	r3, [r3, #11]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	2b05      	cmp	r3, #5
 8001a2c:	d826      	bhi.n	8001a7c <mpu_get_lpf+0x60>
 8001a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <mpu_get_lpf+0x18>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a4d 	.word	0x08001a4d
 8001a38:	08001a55 	.word	0x08001a55
 8001a3c:	08001a5d 	.word	0x08001a5d
 8001a40:	08001a65 	.word	0x08001a65
 8001a44:	08001a6d 	.word	0x08001a6d
 8001a48:	08001a75 	.word	0x08001a75
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	22bc      	movs	r2, #188	@ 0xbc
 8001a50:	801a      	strh	r2, [r3, #0]
        break;
 8001a52:	e017      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2262      	movs	r2, #98	@ 0x62
 8001a58:	801a      	strh	r2, [r3, #0]
        break;
 8001a5a:	e013      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	222a      	movs	r2, #42	@ 0x2a
 8001a60:	801a      	strh	r2, [r3, #0]
        break;
 8001a62:	e00f      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2214      	movs	r2, #20
 8001a68:	801a      	strh	r2, [r3, #0]
        break;
 8001a6a:	e00b      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	220a      	movs	r2, #10
 8001a70:	801a      	strh	r2, [r3, #0]
        break;
 8001a72:	e007      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2205      	movs	r2, #5
 8001a78:	801a      	strh	r2, [r3, #0]
        break;
 8001a7a:	e003      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	801a      	strh	r2, [r3, #0]
        break;
 8001a82:	bf00      	nop
    }
    return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000000 	.word	0x20000000

08001a98 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af04      	add	r7, sp, #16
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001aa2:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001aa4:	7a9b      	ldrb	r3, [r3, #10]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <mpu_set_lpf+0x18>
        return -1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e044      	b.n	8001b3a <mpu_set_lpf+0xa2>

    if (lpf >= 188)
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	2bbb      	cmp	r3, #187	@ 0xbb
 8001ab4:	d902      	bls.n	8001abc <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	e019      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	2b61      	cmp	r3, #97	@ 0x61
 8001ac0:	d902      	bls.n	8001ac8 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	e013      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	2b29      	cmp	r3, #41	@ 0x29
 8001acc:	d902      	bls.n	8001ad4 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	e00d      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	2b13      	cmp	r3, #19
 8001ad8:	d902      	bls.n	8001ae0 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8001ada:	2304      	movs	r3, #4
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e007      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	2b09      	cmp	r3, #9
 8001ae4:	d902      	bls.n	8001aec <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 8001ae6:	2305      	movs	r3, #5
 8001ae8:	73fb      	strb	r3, [r7, #15]
 8001aea:	e001      	b.n	8001af0 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8001aec:	2306      	movs	r3, #6
 8001aee:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8001af0:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001af2:	7ada      	ldrb	r2, [r3, #11]
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d101      	bne.n	8001afe <mpu_set_lpf+0x66>
        return 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e01d      	b.n	8001b3a <mpu_set_lpf+0xa2>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001afe:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	b299      	uxth	r1, r3
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	789b      	ldrb	r3, [r3, #2]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2305      	movs	r3, #5
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	2301      	movs	r3, #1
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	f107 030f 	add.w	r3, r7, #15
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	4809      	ldr	r0, [pc, #36]	@ (8001b48 <mpu_set_lpf+0xb0>)
 8001b22:	f008 fdc9 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <mpu_set_lpf+0x9a>
        return -1;
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b30:	e003      	b.n	8001b3a <mpu_set_lpf+0xa2>
    st.chip_cfg.lpf = data;
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001b36:	72da      	strb	r2, [r3, #11]
    return 0;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000328 	.word	0x20000328

08001b4c <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 8001b54:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <mpu_get_sample_rate+0x30>)
 8001b56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <mpu_get_sample_rate+0x18>
        return -1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e004      	b.n	8001b6e <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <mpu_get_sample_rate+0x30>)
 8001b66:	89da      	ldrh	r2, [r3, #14]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	801a      	strh	r2, [r3, #0]
    return 0;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000000 	.word	0x20000000

08001b80 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af04      	add	r7, sp, #16
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001b8a:	4b34      	ldr	r3, [pc, #208]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001b8c:	7a9b      	ldrb	r3, [r3, #10]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d102      	bne.n	8001b98 <mpu_set_sample_rate+0x18>
        return -1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e05c      	b.n	8001c52 <mpu_set_sample_rate+0xd2>

    if (st.chip_cfg.dmp_on)
 8001b98:	4b30      	ldr	r3, [pc, #192]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001b9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <mpu_set_sample_rate+0x28>
        return -1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	e054      	b.n	8001c52 <mpu_set_sample_rate+0xd2>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001baa:	7d1b      	ldrb	r3, [r3, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00f      	beq.n	8001bd0 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <mpu_set_sample_rate+0x4a>
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	2b28      	cmp	r3, #40	@ 0x28
 8001bba:	d806      	bhi.n	8001bca <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fbf1 	bl	80013a8 <mpu_lp_accel_mode>
                return 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e043      	b.n	8001c52 <mpu_set_sample_rate+0xd2>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff fbec 	bl	80013a8 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d802      	bhi.n	8001bdc <mpu_set_sample_rate+0x5c>
            rate = 4;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	80fb      	strh	r3, [r7, #6]
 8001bda:	e006      	b.n	8001bea <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001be2:	d902      	bls.n	8001bea <mpu_set_sample_rate+0x6a>
            rate = 1000;
 8001be4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be8:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bf0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8001bfc:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	b299      	uxth	r1, r3
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	785b      	ldrb	r3, [r3, #1]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2305      	movs	r3, #5
 8001c10:	9302      	str	r3, [sp, #8]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	f107 030f 	add.w	r3, r7, #15
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	4810      	ldr	r0, [pc, #64]	@ (8001c60 <mpu_set_sample_rate+0xe0>)
 8001c20:	f008 fd4a 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <mpu_set_sample_rate+0xb0>
            return -1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e010      	b.n	8001c52 <mpu_set_sample_rate+0xd2>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	3301      	adds	r3, #1
 8001c34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c38:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001c40:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001c44:	89db      	ldrh	r3, [r3, #14]
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff24 	bl	8001a98 <mpu_set_lpf>
        return 0;
 8001c50:	2300      	movs	r3, #0
    }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000328 	.word	0x20000328

08001c64 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <mpu_get_gyro_sens+0x5c>)
 8001c6e:	7a1b      	ldrb	r3, [r3, #8]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d81b      	bhi.n	8001cac <mpu_get_gyro_sens+0x48>
 8001c74:	a201      	add	r2, pc, #4	@ (adr r2, 8001c7c <mpu_get_gyro_sens+0x18>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001c95 	.word	0x08001c95
 8001c84:	08001c9d 	.word	0x08001c9d
 8001c88:	08001ca5 	.word	0x08001ca5
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <mpu_get_gyro_sens+0x60>)
 8001c90:	601a      	str	r2, [r3, #0]
        break;
 8001c92:	e00e      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <mpu_get_gyro_sens+0x64>)
 8001c98:	601a      	str	r2, [r3, #0]
        break;
 8001c9a:	e00a      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <mpu_get_gyro_sens+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
        break;
 8001ca2:	e006      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <mpu_get_gyro_sens+0x6c>)
 8001ca8:	601a      	str	r2, [r3, #0]
        break;
 8001caa:	e002      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	e000      	b.n	8001cb4 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	43030000 	.word	0x43030000
 8001cc8:	42830000 	.word	0x42830000
 8001ccc:	42033333 	.word	0x42033333
 8001cd0:	41833333 	.word	0x41833333

08001cd4 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d4c <mpu_get_accel_sens+0x78>)
 8001cde:	7a5b      	ldrb	r3, [r3, #9]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d81f      	bhi.n	8001d24 <mpu_get_accel_sens+0x50>
 8001ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cec <mpu_get_accel_sens+0x18>)
 8001ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cea:	bf00      	nop
 8001cec:	08001cfd 	.word	0x08001cfd
 8001cf0:	08001d07 	.word	0x08001d07
 8001cf4:	08001d11 	.word	0x08001d11
 8001cf8:	08001d1b 	.word	0x08001d1b
    case INV_FSR_2G:
        sens[0] = 16384;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d02:	801a      	strh	r2, [r3, #0]
        break;
 8001d04:	e011      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f641 729c 	movw	r2, #8092	@ 0x1f9c
 8001d0c:	801a      	strh	r2, [r3, #0]
        break;
 8001d0e:	e00c      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d16:	801a      	strh	r2, [r3, #0]
        break;
 8001d18:	e007      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d20:	801a      	strh	r2, [r3, #0]
        break;
 8001d22:	e002      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    default:
        return -1;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	e00a      	b.n	8001d40 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8001d2a:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <mpu_get_accel_sens+0x78>)
 8001d2c:	7cdb      	ldrb	r3, [r3, #19]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	085b      	lsrs	r3, r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	801a      	strh	r2, [r3, #0]
    return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	20000000 	.word	0x20000000

08001d50 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8001d58:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <mpu_get_fifo_config+0x20>)
 8001d5a:	7c1a      	ldrb	r2, [r3, #16]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	701a      	strb	r2, [r3, #0]
    return 0;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000000 	.word	0x20000000

08001d74 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 8001d8a:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001d8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <mpu_configure_fifo+0x24>
        return 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e038      	b.n	8001e0a <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 8001d98:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001d9a:	7a9b      	ldrb	r3, [r3, #10]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <mpu_configure_fifo+0x32>
            return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
 8001da4:	e031      	b.n	8001e0a <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 8001da6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001da8:	7c1b      	ldrb	r3, [r3, #16]
 8001daa:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dae:	7a9a      	ldrb	r2, [r3, #10]
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4013      	ands	r3, r2
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001db8:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8001dba:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dbc:	7c1b      	ldrb	r3, [r3, #16]
 8001dbe:	79fa      	ldrb	r2, [r7, #7]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d003      	beq.n	8001dcc <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	e001      	b.n	8001dd0 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d103      	bne.n	8001dde <mpu_configure_fifo+0x6a>
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dd8:	7d1b      	ldrb	r3, [r3, #20]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <mpu_configure_fifo+0x72>
            set_int_enable(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f7ff f938 	bl	8001054 <set_int_enable>
 8001de4:	e002      	b.n	8001dec <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff f934 	bl	8001054 <set_int_enable>
        if (sensors) {
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00a      	beq.n	8001e08 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8001df2:	f7ff fb6b 	bl	80014cc <mpu_reset_fifo>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8001dfc:	4a05      	ldr	r2, [pc, #20]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	7413      	strb	r3, [r2, #16]
                return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	e000      	b.n	8001e0a <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8001e08:	68fb      	ldr	r3, [r7, #12]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000

08001e18 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af04      	add	r7, sp, #16
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e007      	b.n	8001e42 <mpu_set_sensors+0x2a>
    else if (sensors)
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <mpu_set_sensors+0x26>
        data = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e001      	b.n	8001e42 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8001e3e:	2340      	movs	r3, #64	@ 0x40
 8001e40:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001e42:	4b40      	ldr	r3, [pc, #256]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	b299      	uxth	r1, r3
 8001e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	7c9b      	ldrb	r3, [r3, #18]
 8001e52:	461a      	mov	r2, r3
 8001e54:	2305      	movs	r3, #5
 8001e56:	9302      	str	r3, [sp, #8]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	f107 030f 	add.w	r3, r7, #15
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	2301      	movs	r3, #1
 8001e64:	4838      	ldr	r0, [pc, #224]	@ (8001f48 <mpu_set_sensors+0x130>)
 8001e66:	f008 fc27 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
 8001e70:	4b34      	ldr	r3, [pc, #208]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	729a      	strb	r2, [r3, #10]
        return -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e05f      	b.n	8001f3c <mpu_set_sensors+0x124>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b2f      	ldr	r3, [pc, #188]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e86:	731a      	strb	r2, [r3, #12]

    data = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d104      	bne.n	8001ea0 <mpu_set_sensors+0x88>
        data |= BIT_STBY_XG;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d104      	bne.n	8001eb4 <mpu_set_sensors+0x9c>
        data |= BIT_STBY_YG;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d104      	bne.n	8001ec8 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_ZG;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d104      	bne.n	8001edc <mpu_set_sensors+0xc4>
        data |= BIT_STBY_XYZA;
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001edc:	4b19      	ldr	r3, [pc, #100]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	b299      	uxth	r1, r3
 8001ee6:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	7cdb      	ldrb	r3, [r3, #19]
 8001eec:	461a      	mov	r2, r3
 8001eee:	2305      	movs	r3, #5
 8001ef0:	9302      	str	r3, [sp, #8]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	f107 030f 	add.w	r3, r7, #15
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2301      	movs	r3, #1
 8001efe:	4812      	ldr	r0, [pc, #72]	@ (8001f48 <mpu_set_sensors+0x130>)
 8001f00:	f008 fbda 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <mpu_set_sensors+0xfe>
        st.chip_cfg.sensors = 0;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	729a      	strb	r2, [r3, #10]
        return -1;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295
 8001f14:	e012      	b.n	8001f3c <mpu_set_sensors+0x124>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <mpu_set_sensors+0x110>
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d002      	beq.n	8001f28 <mpu_set_sensors+0x110>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f000 f9ac 	bl	8002280 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8001f28:	4a06      	ldr	r2, [pc, #24]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8001f2e:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8001f34:	2032      	movs	r0, #50	@ 0x32
 8001f36:	f007 fdcf 	bl	8009ad8 <HAL_Delay>
    return 0;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000000 	.word	0x20000000
 8001f48:	20000328 	.word	0x20000328

08001f4c <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	@ 0x28
 8001f50:	af04      	add	r7, sp, #16
 8001f52:	4603      	mov	r3, r0
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8001f5a:	4b48      	ldr	r3, [pc, #288]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <mpu_read_fifo_stream+0x1e>
        return -1;
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295
 8001f68:	e083      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    if (!st.chip_cfg.sensors)
 8001f6a:	4b44      	ldr	r3, [pc, #272]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f6c:	7a9b      	ldrb	r3, [r3, #10]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <mpu_read_fifo_stream+0x2c>
        return -1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	e07c      	b.n	8002072 <mpu_read_fifo_stream+0x126>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8001f78:	4b40      	ldr	r3, [pc, #256]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	b299      	uxth	r1, r3
 8001f82:	4b3e      	ldr	r3, [pc, #248]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	7a9b      	ldrb	r3, [r3, #10]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2305      	movs	r3, #5
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	2302      	movs	r3, #2
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2301      	movs	r3, #1
 8001f9a:	4839      	ldr	r0, [pc, #228]	@ (8002080 <mpu_read_fifo_stream+0x134>)
 8001f9c:	f008 fc86 	bl	800a8ac <HAL_I2C_Mem_Read>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <mpu_read_fifo_stream+0x60>
        return -1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	e062      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8001fac:	7d3b      	ldrb	r3, [r7, #20]
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	b21a      	sxth	r2, r3
 8001fb4:	7d7b      	ldrb	r3, [r7, #21]
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8001fbe:	8afa      	ldrh	r2, [r7, #22]
 8001fc0:	89fb      	ldrh	r3, [r7, #14]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d205      	bcs.n	8001fd2 <mpu_read_fifo_stream+0x86>
        more[0] = 0;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
        return -1;
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd0:	e04f      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	885b      	ldrh	r3, [r3, #2]
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	8afa      	ldrh	r2, [r7, #22]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d923      	bls.n	800202a <mpu_read_fifo_stream+0xde>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8001fe2:	4b26      	ldr	r3, [pc, #152]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	b299      	uxth	r1, r3
 8001fec:	4b23      	ldr	r3, [pc, #140]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	7c5b      	ldrb	r3, [r3, #17]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2305      	movs	r3, #5
 8001ff6:	9302      	str	r3, [sp, #8]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2301      	movs	r3, #1
 8002004:	481e      	ldr	r0, [pc, #120]	@ (8002080 <mpu_read_fifo_stream+0x134>)
 8002006:	f008 fc51 	bl	800a8ac <HAL_I2C_Mem_Read>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <mpu_read_fifo_stream+0xca>
            return -1;
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	e02d      	b.n	8002072 <mpu_read_fifo_stream+0x126>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8002016:	7d3b      	ldrb	r3, [r7, #20]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	d004      	beq.n	800202a <mpu_read_fifo_stream+0xde>
            mpu_reset_fifo();
 8002020:	f7ff fa54 	bl	80014cc <mpu_reset_fifo>
            return -2;
 8002024:	f06f 0301 	mvn.w	r3, #1
 8002028:	e023      	b.n	8002072 <mpu_read_fifo_stream+0x126>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <mpu_read_fifo_stream+0x130>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	b299      	uxth	r1, r3
 8002034:	4b11      	ldr	r3, [pc, #68]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	7adb      	ldrb	r3, [r3, #11]
 800203a:	461a      	mov	r2, r3
 800203c:	2305      	movs	r3, #5
 800203e:	9302      	str	r3, [sp, #8]
 8002040:	89fb      	ldrh	r3, [r7, #14]
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2301      	movs	r3, #1
 800204a:	480d      	ldr	r0, [pc, #52]	@ (8002080 <mpu_read_fifo_stream+0x134>)
 800204c:	f008 fc2e 	bl	800a8ac <HAL_I2C_Mem_Read>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <mpu_read_fifo_stream+0x110>
        return -1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	e00a      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    more[0] = fifo_count / length - 1;
 800205c:	8afa      	ldrh	r2, [r7, #22]
 800205e:	89fb      	ldrh	r3, [r7, #14]
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	b29b      	uxth	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b2da      	uxtb	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	701a      	strb	r2, [r3, #0]
    return 0;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000000 	.word	0x20000000
 8002080:	20000328 	.word	0x20000328

08002084 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af04      	add	r7, sp, #16
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800208e:	4b7a      	ldr	r3, [pc, #488]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002090:	7c9b      	ldrb	r3, [r3, #18]
 8002092:	79fa      	ldrb	r2, [r7, #7]
 8002094:	429a      	cmp	r2, r3
 8002096:	d101      	bne.n	800209c <mpu_set_bypass+0x18>
        return 0;
 8002098:	2300      	movs	r3, #0
 800209a:	e0e8      	b.n	800226e <mpu_set_bypass+0x1ea>

    if (bypass_on) {
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d06b      	beq.n	800217a <mpu_set_bypass+0xf6>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80020a2:	4b75      	ldr	r3, [pc, #468]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	b299      	uxth	r1, r3
 80020ac:	4b72      	ldr	r3, [pc, #456]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	791b      	ldrb	r3, [r3, #4]
 80020b2:	461a      	mov	r2, r3
 80020b4:	2305      	movs	r3, #5
 80020b6:	9302      	str	r3, [sp, #8]
 80020b8:	2301      	movs	r3, #1
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	f107 030f 	add.w	r3, r7, #15
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2301      	movs	r3, #1
 80020c4:	486d      	ldr	r0, [pc, #436]	@ (800227c <mpu_set_bypass+0x1f8>)
 80020c6:	f008 fbf1 	bl	800a8ac <HAL_I2C_Mem_Read>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <mpu_set_bypass+0x52>
            return -1;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
 80020d4:	e0cb      	b.n	800226e <mpu_set_bypass+0x1ea>
        tmp &= ~BIT_AUX_IF_EN;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	f023 0320 	bic.w	r3, r3, #32
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80020e0:	4b65      	ldr	r3, [pc, #404]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	b299      	uxth	r1, r3
 80020ea:	4b63      	ldr	r3, [pc, #396]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	791b      	ldrb	r3, [r3, #4]
 80020f0:	461a      	mov	r2, r3
 80020f2:	2305      	movs	r3, #5
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	2301      	movs	r3, #1
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	f107 030f 	add.w	r3, r7, #15
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2301      	movs	r3, #1
 8002102:	485e      	ldr	r0, [pc, #376]	@ (800227c <mpu_set_bypass+0x1f8>)
 8002104:	f008 fad8 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <mpu_set_bypass+0x90>
            return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
 8002112:	e0ac      	b.n	800226e <mpu_set_bypass+0x1ea>
        delay_ms(3);
 8002114:	2003      	movs	r0, #3
 8002116:	f007 fcdf 	bl	8009ad8 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 800211a:	2302      	movs	r3, #2
 800211c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800211e:	4b56      	ldr	r3, [pc, #344]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002120:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <mpu_set_bypass+0xae>
            tmp |= BIT_ACTL;
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800212e:	b2db      	uxtb	r3, r3
 8002130:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002132:	4b51      	ldr	r3, [pc, #324]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002134:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <mpu_set_bypass+0xc2>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002142:	b2db      	uxtb	r3, r3
 8002144:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002146:	4b4c      	ldr	r3, [pc, #304]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	b299      	uxth	r1, r3
 8002150:	4b49      	ldr	r3, [pc, #292]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	7d1b      	ldrb	r3, [r3, #20]
 8002156:	461a      	mov	r2, r3
 8002158:	2305      	movs	r3, #5
 800215a:	9302      	str	r3, [sp, #8]
 800215c:	2301      	movs	r3, #1
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	f107 030f 	add.w	r3, r7, #15
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2301      	movs	r3, #1
 8002168:	4844      	ldr	r0, [pc, #272]	@ (800227c <mpu_set_bypass+0x1f8>)
 800216a:	f008 faa5 	bl	800a6b8 <HAL_I2C_Mem_Write>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d078      	beq.n	8002266 <mpu_set_bypass+0x1e2>
            return -1;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	e079      	b.n	800226e <mpu_set_bypass+0x1ea>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800217a:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <mpu_set_bypass+0x1f4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	b299      	uxth	r1, r3
 8002184:	4b3c      	ldr	r3, [pc, #240]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	791b      	ldrb	r3, [r3, #4]
 800218a:	461a      	mov	r2, r3
 800218c:	2305      	movs	r3, #5
 800218e:	9302      	str	r3, [sp, #8]
 8002190:	2301      	movs	r3, #1
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	f107 030f 	add.w	r3, r7, #15
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2301      	movs	r3, #1
 800219c:	4837      	ldr	r0, [pc, #220]	@ (800227c <mpu_set_bypass+0x1f8>)
 800219e:	f008 fb85 	bl	800a8ac <HAL_I2C_Mem_Read>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <mpu_set_bypass+0x12a>
            return -1;
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ac:	e05f      	b.n	800226e <mpu_set_bypass+0x1ea>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80021ae:	4b32      	ldr	r3, [pc, #200]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80021b0:	7a9b      	ldrb	r3, [r3, #10]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <mpu_set_bypass+0x142>
            tmp |= BIT_AUX_IF_EN;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	f043 0320 	orr.w	r3, r3, #32
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	e004      	b.n	80021d0 <mpu_set_bypass+0x14c>
        else
            tmp &= ~BIT_AUX_IF_EN;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	f023 0320 	bic.w	r3, r3, #32
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80021d0:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	b299      	uxth	r1, r3
 80021da:	4b27      	ldr	r3, [pc, #156]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	791b      	ldrb	r3, [r3, #4]
 80021e0:	461a      	mov	r2, r3
 80021e2:	2305      	movs	r3, #5
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	2301      	movs	r3, #1
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	f107 030f 	add.w	r3, r7, #15
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2301      	movs	r3, #1
 80021f2:	4822      	ldr	r0, [pc, #136]	@ (800227c <mpu_set_bypass+0x1f8>)
 80021f4:	f008 fa60 	bl	800a6b8 <HAL_I2C_Mem_Write>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <mpu_set_bypass+0x180>
            return -1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	e034      	b.n	800226e <mpu_set_bypass+0x1ea>
        delay_ms(3);
 8002204:	2003      	movs	r0, #3
 8002206:	f007 fc67 	bl	8009ad8 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 800220a:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <mpu_set_bypass+0x1f4>)
 800220c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <mpu_set_bypass+0x196>
            tmp = BIT_ACTL;
 8002214:	2380      	movs	r3, #128	@ 0x80
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e001      	b.n	800221e <mpu_set_bypass+0x19a>
        else
            tmp = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002220:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <mpu_set_bypass+0x1ae>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800222e:	b2db      	uxtb	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	b299      	uxth	r1, r3
 800223c:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <mpu_set_bypass+0x1f4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	7d1b      	ldrb	r3, [r3, #20]
 8002242:	461a      	mov	r2, r3
 8002244:	2305      	movs	r3, #5
 8002246:	9302      	str	r3, [sp, #8]
 8002248:	2301      	movs	r3, #1
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	f107 030f 	add.w	r3, r7, #15
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2301      	movs	r3, #1
 8002254:	4809      	ldr	r0, [pc, #36]	@ (800227c <mpu_set_bypass+0x1f8>)
 8002256:	f008 fa2f 	bl	800a6b8 <HAL_I2C_Mem_Write>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <mpu_set_bypass+0x1e2>
            return -1;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295
 8002264:	e003      	b.n	800226e <mpu_set_bypass+0x1ea>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8002266:	4a04      	ldr	r2, [pc, #16]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	7493      	strb	r3, [r2, #18]
    return 0;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000000 	.word	0x20000000
 800227c:	20000328 	.word	0x20000328

08002280 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af04      	add	r7, sp, #16
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800228a:	4b23      	ldr	r3, [pc, #140]	@ (8002318 <mpu_set_int_latched+0x98>)
 800228c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002290:	79fa      	ldrb	r2, [r7, #7]
 8002292:	429a      	cmp	r2, r3
 8002294:	d101      	bne.n	800229a <mpu_set_int_latched+0x1a>
        return 0;
 8002296:	2300      	movs	r3, #0
 8002298:	e039      	b.n	800230e <mpu_set_int_latched+0x8e>

    if (enable)
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80022a0:	2330      	movs	r3, #48	@ 0x30
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e001      	b.n	80022aa <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 80022aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022ac:	7c9b      	ldrb	r3, [r3, #18]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 80022bc:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022be:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d004      	beq.n	80022d0 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	b299      	uxth	r1, r3
 80022da:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	7d1b      	ldrb	r3, [r3, #20]
 80022e0:	461a      	mov	r2, r3
 80022e2:	2305      	movs	r3, #5
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	2301      	movs	r3, #1
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	f107 030f 	add.w	r3, r7, #15
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2301      	movs	r3, #1
 80022f2:	480a      	ldr	r0, [pc, #40]	@ (800231c <mpu_set_int_latched+0x9c>)
 80022f4:	f008 f9e0 	bl	800a6b8 <HAL_I2C_Mem_Write>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <mpu_set_int_latched+0x84>
        return -1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	e004      	b.n	800230e <mpu_set_int_latched+0x8e>
    st.chip_cfg.latched_int = enable;
 8002304:	4a04      	ldr	r2, [pc, #16]	@ (8002318 <mpu_set_int_latched+0x98>)
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
    return 0;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000
 800231c:	20000328 	.word	0x20000328

08002320 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	@ 0x28
 8002324:	af04      	add	r7, sp, #16
 8002326:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8002328:	4b45      	ldr	r3, [pc, #276]	@ (8002440 <get_accel_prod_shift+0x120>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	b299      	uxth	r1, r3
 8002332:	2305      	movs	r3, #5
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	2304      	movs	r3, #4
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	f107 0310 	add.w	r3, r7, #16
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2301      	movs	r3, #1
 8002342:	220d      	movs	r2, #13
 8002344:	483f      	ldr	r0, [pc, #252]	@ (8002444 <get_accel_prod_shift+0x124>)
 8002346:	f008 fab1 	bl	800a8ac <HAL_I2C_Mem_Read>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <get_accel_prod_shift+0x34>
        return 0x07;
 8002350:	2307      	movs	r3, #7
 8002352:	e071      	b.n	8002438 <get_accel_prod_shift+0x118>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 8002354:	7c3b      	ldrb	r3, [r7, #16]
 8002356:	10db      	asrs	r3, r3, #3
 8002358:	b25b      	sxtb	r3, r3
 800235a:	f003 031c 	and.w	r3, r3, #28
 800235e:	b25a      	sxtb	r2, r3
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	111b      	asrs	r3, r3, #4
 8002364:	b25b      	sxtb	r3, r3
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	b25b      	sxtb	r3, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	b25b      	sxtb	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 8002374:	7c7b      	ldrb	r3, [r7, #17]
 8002376:	10db      	asrs	r3, r3, #3
 8002378:	b25b      	sxtb	r3, r3
 800237a:	f003 031c 	and.w	r3, r3, #28
 800237e:	b25a      	sxtb	r2, r3
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	109b      	asrs	r3, r3, #2
 8002384:	b25b      	sxtb	r3, r3
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	b25b      	sxtb	r3, r3
 800238c:	4313      	orrs	r3, r2
 800238e:	b25b      	sxtb	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 8002394:	7cbb      	ldrb	r3, [r7, #18]
 8002396:	10db      	asrs	r3, r3, #3
 8002398:	b25b      	sxtb	r3, r3
 800239a:	f003 031c 	and.w	r3, r3, #28
 800239e:	b25a      	sxtb	r2, r3
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	b25b      	sxtb	r3, r3
 80023aa:	4313      	orrs	r3, r2
 80023ac:	b25b      	sxtb	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 80023b2:	2300      	movs	r3, #0
 80023b4:	75fb      	strb	r3, [r7, #23]
 80023b6:	e03b      	b.n	8002430 <get_accel_prod_shift+0x110>
        if (!shift_code[ii]) {
 80023b8:	7dfb      	ldrb	r3, [r7, #23]
 80023ba:	3318      	adds	r3, #24
 80023bc:	443b      	add	r3, r7
 80023be:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <get_accel_prod_shift+0xb6>
            st_shift[ii] = 0.f;
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
            continue;
 80023d4:	e029      	b.n	800242a <get_accel_prod_shift+0x10a>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	4a1a      	ldr	r2, [pc, #104]	@ (8002448 <get_accel_prod_shift+0x128>)
 80023e0:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 80023e2:	e00f      	b.n	8002404 <get_accel_prod_shift+0xe4>
            st_shift[ii] *= 1.034f;
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800244c <get_accel_prod_shift+0x12c>
 80023fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002400:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 8002404:	7dfb      	ldrb	r3, [r7, #23]
 8002406:	f103 0218 	add.w	r2, r3, #24
 800240a:	443a      	add	r2, r7
 800240c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8002410:	3a01      	subs	r2, #1
 8002412:	b2d1      	uxtb	r1, r2
 8002414:	f103 0218 	add.w	r2, r3, #24
 8002418:	443a      	add	r2, r7
 800241a:	f802 1c0c 	strb.w	r1, [r2, #-12]
 800241e:	3318      	adds	r3, #24
 8002420:	443b      	add	r3, r7
 8002422:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1dc      	bne.n	80023e4 <get_accel_prod_shift+0xc4>
    for (ii = 0; ii < 3; ii++) {
 800242a:	7dfb      	ldrb	r3, [r7, #23]
 800242c:	3301      	adds	r3, #1
 800242e:	75fb      	strb	r3, [r7, #23]
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d9c0      	bls.n	80023b8 <get_accel_prod_shift+0x98>
    }
    return 0;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000000 	.word	0x20000000
 8002444:	20000328 	.word	0x20000328
 8002448:	3eae147b 	.word	0x3eae147b
 800244c:	3f845a1d 	.word	0x3f845a1d

08002450 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	@ 0x28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff5c 	bl	8002320 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
 800246c:	e063      	b.n	8002536 <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	440b      	add	r3, r1
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	bfb8      	it	lt
 8002488:	425b      	neglt	r3, r3
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002492:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8002548 <accel_self_test+0xf8>
 8002496:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800249a:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	3328      	adds	r3, #40	@ 0x28
 80024a4:	443b      	add	r3, r7
 80024a6:	3b1c      	subs	r3, #28
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	d023      	beq.n	80024fe <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	3328      	adds	r3, #40	@ 0x28
 80024bc:	443b      	add	r3, r7
 80024be:	3b1c      	subs	r3, #28
 80024c0:	ed93 7a00 	vldr	s14, [r3]
 80024c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80024c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024d4:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 80024d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80024dc:	eef0 7ae7 	vabs.f32	s15, s15
 80024e0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800254c <accel_self_test+0xfc>
 80024e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ec:	dd20      	ble.n	8002530 <accel_self_test+0xe0>
                result |= 1 << jj;
 80024ee:	2201      	movs	r2, #1
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	6a3a      	ldr	r2, [r7, #32]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	e018      	b.n	8002530 <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 80024fe:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002550 <accel_self_test+0x100>
 8002502:	edd7 7a07 	vldr	s15, [r7, #28]
 8002506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250e:	d408      	bmi.n	8002522 <accel_self_test+0xd2>
            (st_shift_cust > test.max_g))
 8002510:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002554 <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 8002514:	edd7 7a07 	vldr	s15, [r7, #28]
 8002518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002520:	dd06      	ble.n	8002530 <accel_self_test+0xe0>
            result |= 1 << jj;
 8002522:	2201      	movs	r2, #1
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	6a3a      	ldr	r2, [r7, #32]
 800252c:	4313      	orrs	r3, r2
 800252e:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	3301      	adds	r3, #1
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	2b02      	cmp	r3, #2
 800253a:	dd98      	ble.n	800246e <accel_self_test+0x1e>
    }

    return result;
 800253c:	6a3b      	ldr	r3, [r7, #32]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3728      	adds	r7, #40	@ 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	47800000 	.word	0x47800000
 800254c:	3e0f5c29 	.word	0x3e0f5c29
 8002550:	3e99999a 	.word	0x3e99999a
 8002554:	3f733333 	.word	0x3f733333

08002558 <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08c      	sub	sp, #48	@ 0x30
 800255c:	af04      	add	r7, sp, #16
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 8002566:	4b59      	ldr	r3, [pc, #356]	@ (80026cc <gyro_self_test+0x174>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	b299      	uxth	r1, r3
 8002570:	2305      	movs	r3, #5
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	2303      	movs	r3, #3
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2301      	movs	r3, #1
 8002580:	220d      	movs	r2, #13
 8002582:	4853      	ldr	r0, [pc, #332]	@ (80026d0 <gyro_self_test+0x178>)
 8002584:	f008 f992 	bl	800a8ac <HAL_I2C_Mem_Read>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <gyro_self_test+0x3a>
        return 0x07;
 800258e:	2307      	movs	r3, #7
 8002590:	e097      	b.n	80026c2 <gyro_self_test+0x16a>

    tmp[0] &= 0x1F;
 8002592:	7a3b      	ldrb	r3, [r7, #8]
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	b2db      	uxtb	r3, r3
 800259a:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 800259c:	7a7b      	ldrb	r3, [r7, #9]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 80025a6:	7abb      	ldrb	r3, [r7, #10]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	e080      	b.n	80026b8 <gyro_self_test+0x160>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	6839      	ldr	r1, [r7, #0]
 80025c6:	440b      	add	r3, r1
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bfb8      	it	lt
 80025d0:	425b      	neglt	r3, r3
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025da:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80026d4 <gyro_self_test+0x17c>
 80025de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e2:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 80025e6:	f107 0208 	add.w	r2, r7, #8
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4413      	add	r3, r2
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d045      	beq.n	8002680 <gyro_self_test+0x128>
            st_shift = 3275.f / test.gyro_sens;
 80025f4:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80026d8 <gyro_self_test+0x180>
 80025f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025fc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80026dc <gyro_self_test+0x184>
 8002600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002604:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8002608:	e007      	b.n	800261a <gyro_self_test+0xc2>
                st_shift *= 1.046f;
 800260a:	edd7 7a05 	vldr	s15, [r7, #20]
 800260e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80026e0 <gyro_self_test+0x188>
 8002612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002616:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 800261a:	f107 0208 	add.w	r2, r7, #8
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	4413      	add	r3, r2
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	3b01      	subs	r3, #1
 8002626:	b2d9      	uxtb	r1, r3
 8002628:	f107 0208 	add.w	r2, r7, #8
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	460a      	mov	r2, r1
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	f107 0208 	add.w	r2, r7, #8
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	4413      	add	r3, r2
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e3      	bne.n	800260a <gyro_self_test+0xb2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 8002642:	edd7 6a04 	vldr	s13, [r7, #16]
 8002646:	ed97 7a05 	vldr	s14, [r7, #20]
 800264a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002652:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002656:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 800265a:	edd7 7a03 	vldr	s15, [r7, #12]
 800265e:	eef0 7ae7 	vabs.f32	s15, s15
 8002662:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80026e4 <gyro_self_test+0x18c>
 8002666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	dd20      	ble.n	80026b2 <gyro_self_test+0x15a>
                result |= 1 << jj;
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	e018      	b.n	80026b2 <gyro_self_test+0x15a>
        } else if ((st_shift_cust < test.min_dps) ||
 8002680:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002684:	edd7 7a04 	vldr	s15, [r7, #16]
 8002688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	d408      	bmi.n	80026a4 <gyro_self_test+0x14c>
            (st_shift_cust > test.max_dps))
 8002692:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80026e8 <gyro_self_test+0x190>
        } else if ((st_shift_cust < test.min_dps) ||
 8002696:	edd7 7a04 	vldr	s15, [r7, #16]
 800269a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a2:	dd06      	ble.n	80026b2 <gyro_self_test+0x15a>
            result |= 1 << jj;
 80026a4:	2201      	movs	r2, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	f77f af7b 	ble.w	80025b6 <gyro_self_test+0x5e>
    }
    return result;
 80026c0:	69bb      	ldr	r3, [r7, #24]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000328 	.word	0x20000328
 80026d4:	47800000 	.word	0x47800000
 80026d8:	00000083 	.word	0x00000083
 80026dc:	454cb000 	.word	0x454cb000
 80026e0:	3f85e354 	.word	0x3f85e354
 80026e4:	3e0f5c29 	.word	0x3e0f5c29
 80026e8:	42d20000 	.word	0x42d20000

080026ec <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 80026ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f0:	b0bc      	sub	sp, #240	@ 0xf0
 80026f2:	af04      	add	r7, sp, #16
 80026f4:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 80026f8:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80026fc:	4613      	mov	r3, r2
 80026fe:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 8002702:	2301      	movs	r3, #1
 8002704:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    data[1] = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 800270e:	4b9c      	ldr	r3, [pc, #624]	@ (8002980 <get_st_biases+0x294>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	b299      	uxth	r1, r3
 8002718:	4b99      	ldr	r3, [pc, #612]	@ (8002980 <get_st_biases+0x294>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	7c9b      	ldrb	r3, [r3, #18]
 800271e:	461a      	mov	r2, r3
 8002720:	2305      	movs	r3, #5
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	2302      	movs	r3, #2
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2301      	movs	r3, #1
 8002730:	4894      	ldr	r0, [pc, #592]	@ (8002984 <get_st_biases+0x298>)
 8002732:	f007 ffc1 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <get_st_biases+0x56>
        return -1;
 800273c:	f04f 33ff 	mov.w	r3, #4294967295
 8002740:	e3dc      	b.n	8002efc <get_st_biases+0x810>
    delay_ms(200);
 8002742:	20c8      	movs	r0, #200	@ 0xc8
 8002744:	f007 f9c8 	bl	8009ad8 <HAL_Delay>
    data[0] = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 800274e:	4b8c      	ldr	r3, [pc, #560]	@ (8002980 <get_st_biases+0x294>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	b299      	uxth	r1, r3
 8002758:	4b89      	ldr	r3, [pc, #548]	@ (8002980 <get_st_biases+0x294>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	7bdb      	ldrb	r3, [r3, #15]
 800275e:	461a      	mov	r2, r3
 8002760:	2305      	movs	r3, #5
 8002762:	9302      	str	r3, [sp, #8]
 8002764:	2301      	movs	r3, #1
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2301      	movs	r3, #1
 8002770:	4884      	ldr	r0, [pc, #528]	@ (8002984 <get_st_biases+0x298>)
 8002772:	f007 ffa1 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <get_st_biases+0x96>
        return -1;
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
 8002780:	e3bc      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002782:	4b7f      	ldr	r3, [pc, #508]	@ (8002980 <get_st_biases+0x294>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	b299      	uxth	r1, r3
 800278c:	4b7c      	ldr	r3, [pc, #496]	@ (8002980 <get_st_biases+0x294>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	795b      	ldrb	r3, [r3, #5]
 8002792:	461a      	mov	r2, r3
 8002794:	2305      	movs	r3, #5
 8002796:	9302      	str	r3, [sp, #8]
 8002798:	2301      	movs	r3, #1
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2301      	movs	r3, #1
 80027a4:	4877      	ldr	r0, [pc, #476]	@ (8002984 <get_st_biases+0x298>)
 80027a6:	f007 ff87 	bl	800a6b8 <HAL_I2C_Mem_Write>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <get_st_biases+0xca>
        return -1;
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
 80027b4:	e3a2      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80027b6:	4b72      	ldr	r3, [pc, #456]	@ (8002980 <get_st_biases+0x294>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	b299      	uxth	r1, r3
 80027c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002980 <get_st_biases+0x294>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	7c9b      	ldrb	r3, [r3, #18]
 80027c6:	461a      	mov	r2, r3
 80027c8:	2305      	movs	r3, #5
 80027ca:	9302      	str	r3, [sp, #8]
 80027cc:	2301      	movs	r3, #1
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2301      	movs	r3, #1
 80027d8:	486a      	ldr	r0, [pc, #424]	@ (8002984 <get_st_biases+0x298>)
 80027da:	f007 ff6d 	bl	800a6b8 <HAL_I2C_Mem_Write>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <get_st_biases+0xfe>
        return -1;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	e388      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80027ea:	4b65      	ldr	r3, [pc, #404]	@ (8002980 <get_st_biases+0x294>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	b299      	uxth	r1, r3
 80027f4:	4b62      	ldr	r3, [pc, #392]	@ (8002980 <get_st_biases+0x294>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	7ddb      	ldrb	r3, [r3, #23]
 80027fa:	461a      	mov	r2, r3
 80027fc:	2305      	movs	r3, #5
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	2301      	movs	r3, #1
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	485d      	ldr	r0, [pc, #372]	@ (8002984 <get_st_biases+0x298>)
 800280e:	f007 ff53 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <get_st_biases+0x132>
        return -1;
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
 800281c:	e36e      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800281e:	4b58      	ldr	r3, [pc, #352]	@ (8002980 <get_st_biases+0x294>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	b299      	uxth	r1, r3
 8002828:	4b55      	ldr	r3, [pc, #340]	@ (8002980 <get_st_biases+0x294>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	791b      	ldrb	r3, [r3, #4]
 800282e:	461a      	mov	r2, r3
 8002830:	2305      	movs	r3, #5
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	2301      	movs	r3, #1
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2301      	movs	r3, #1
 8002840:	4850      	ldr	r0, [pc, #320]	@ (8002984 <get_st_biases+0x298>)
 8002842:	f007 ff39 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <get_st_biases+0x166>
        return -1;
 800284c:	f04f 33ff 	mov.w	r3, #4294967295
 8002850:	e354      	b.n	8002efc <get_st_biases+0x810>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 8002852:	230c      	movs	r3, #12
 8002854:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8002858:	4b49      	ldr	r3, [pc, #292]	@ (8002980 <get_st_biases+0x294>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	b299      	uxth	r1, r3
 8002862:	4b47      	ldr	r3, [pc, #284]	@ (8002980 <get_st_biases+0x294>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	791b      	ldrb	r3, [r3, #4]
 8002868:	461a      	mov	r2, r3
 800286a:	2305      	movs	r3, #5
 800286c:	9302      	str	r3, [sp, #8]
 800286e:	2301      	movs	r3, #1
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2301      	movs	r3, #1
 800287a:	4842      	ldr	r0, [pc, #264]	@ (8002984 <get_st_biases+0x298>)
 800287c:	f007 ff1c 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <get_st_biases+0x1a0>
        return -1;
 8002886:	f04f 33ff 	mov.w	r3, #4294967295
 800288a:	e337      	b.n	8002efc <get_st_biases+0x810>
    delay_ms(15);
 800288c:	200f      	movs	r0, #15
 800288e:	f007 f923 	bl	8009ad8 <HAL_Delay>
    data[0] = st.test->reg_lpf;
 8002892:	4b3b      	ldr	r3, [pc, #236]	@ (8002980 <get_st_biases+0x294>)
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	7a5b      	ldrb	r3, [r3, #9]
 8002898:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 800289c:	4b38      	ldr	r3, [pc, #224]	@ (8002980 <get_st_biases+0x294>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	b299      	uxth	r1, r3
 80028a6:	4b36      	ldr	r3, [pc, #216]	@ (8002980 <get_st_biases+0x294>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	789b      	ldrb	r3, [r3, #2]
 80028ac:	461a      	mov	r2, r3
 80028ae:	2305      	movs	r3, #5
 80028b0:	9302      	str	r3, [sp, #8]
 80028b2:	2301      	movs	r3, #1
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2301      	movs	r3, #1
 80028be:	4831      	ldr	r0, [pc, #196]	@ (8002984 <get_st_biases+0x298>)
 80028c0:	f007 fefa 	bl	800a6b8 <HAL_I2C_Mem_Write>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <get_st_biases+0x1e4>
        return -1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	e315      	b.n	8002efc <get_st_biases+0x810>
    data[0] = st.test->reg_rate_div;
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <get_st_biases+0x294>)
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	7a1b      	ldrb	r3, [r3, #8]
 80028d6:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 80028da:	4b29      	ldr	r3, [pc, #164]	@ (8002980 <get_st_biases+0x294>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	b299      	uxth	r1, r3
 80028e4:	4b26      	ldr	r3, [pc, #152]	@ (8002980 <get_st_biases+0x294>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	785b      	ldrb	r3, [r3, #1]
 80028ea:	461a      	mov	r2, r3
 80028ec:	2305      	movs	r3, #5
 80028ee:	9302      	str	r3, [sp, #8]
 80028f0:	2301      	movs	r3, #1
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2301      	movs	r3, #1
 80028fc:	4821      	ldr	r0, [pc, #132]	@ (8002984 <get_st_biases+0x298>)
 80028fe:	f007 fedb 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <get_st_biases+0x222>
        return -1;
 8002908:	f04f 33ff 	mov.w	r3, #4294967295
 800290c:	e2f6      	b.n	8002efc <get_st_biases+0x810>
    if (hw_test)
 800290e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <get_st_biases+0x23c>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 8002916:	4b1a      	ldr	r3, [pc, #104]	@ (8002980 <get_st_biases+0x294>)
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	7a9b      	ldrb	r3, [r3, #10]
 800291c:	f063 031f 	orn	r3, r3, #31
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 8002926:	e004      	b.n	8002932 <get_st_biases+0x246>
    else
        data[0] = st.test->reg_gyro_fsr;
 8002928:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <get_st_biases+0x294>)
 800292a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292c:	7a9b      	ldrb	r3, [r3, #10]
 800292e:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 8002932:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <get_st_biases+0x294>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	b299      	uxth	r1, r3
 800293c:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <get_st_biases+0x294>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	799b      	ldrb	r3, [r3, #6]
 8002942:	461a      	mov	r2, r3
 8002944:	2305      	movs	r3, #5
 8002946:	9302      	str	r3, [sp, #8]
 8002948:	2301      	movs	r3, #1
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2301      	movs	r3, #1
 8002954:	480b      	ldr	r0, [pc, #44]	@ (8002984 <get_st_biases+0x298>)
 8002956:	f007 feaf 	bl	800a6b8 <HAL_I2C_Mem_Write>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <get_st_biases+0x27a>
        return -1;
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	e2ca      	b.n	8002efc <get_st_biases+0x810>

    if (hw_test)
 8002966:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00c      	beq.n	8002988 <get_st_biases+0x29c>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 800296e:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <get_st_biases+0x294>)
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	7adb      	ldrb	r3, [r3, #11]
 8002974:	f063 031f 	orn	r3, r3, #31
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 800297e:	e006      	b.n	800298e <get_st_biases+0x2a2>
 8002980:	20000000 	.word	0x20000000
 8002984:	20000328 	.word	0x20000328
    else
        data[0] = test.reg_accel_fsr;
 8002988:	2318      	movs	r3, #24
 800298a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 800298e:	4b73      	ldr	r3, [pc, #460]	@ (8002b5c <get_st_biases+0x470>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	b299      	uxth	r1, r3
 8002998:	4b70      	ldr	r3, [pc, #448]	@ (8002b5c <get_st_biases+0x470>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	79db      	ldrb	r3, [r3, #7]
 800299e:	461a      	mov	r2, r3
 80029a0:	2305      	movs	r3, #5
 80029a2:	9302      	str	r3, [sp, #8]
 80029a4:	2301      	movs	r3, #1
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2301      	movs	r3, #1
 80029b0:	486b      	ldr	r0, [pc, #428]	@ (8002b60 <get_st_biases+0x474>)
 80029b2:	f007 fe81 	bl	800a6b8 <HAL_I2C_Mem_Write>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <get_st_biases+0x2d6>
        return -1;
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295
 80029c0:	e29c      	b.n	8002efc <get_st_biases+0x810>
    if (hw_test)
 80029c2:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <get_st_biases+0x2e4>
        delay_ms(200);
 80029ca:	20c8      	movs	r0, #200	@ 0xc8
 80029cc:	f007 f884 	bl	8009ad8 <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 80029d0:	2340      	movs	r3, #64	@ 0x40
 80029d2:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80029d6:	4b61      	ldr	r3, [pc, #388]	@ (8002b5c <get_st_biases+0x470>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	b299      	uxth	r1, r3
 80029e0:	4b5e      	ldr	r3, [pc, #376]	@ (8002b5c <get_st_biases+0x470>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	791b      	ldrb	r3, [r3, #4]
 80029e6:	461a      	mov	r2, r3
 80029e8:	2305      	movs	r3, #5
 80029ea:	9302      	str	r3, [sp, #8]
 80029ec:	2301      	movs	r3, #1
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2301      	movs	r3, #1
 80029f8:	4859      	ldr	r0, [pc, #356]	@ (8002b60 <get_st_biases+0x474>)
 80029fa:	f007 fe5d 	bl	800a6b8 <HAL_I2C_Mem_Write>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <get_st_biases+0x31e>
        return -1;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
 8002a08:	e278      	b.n	8002efc <get_st_biases+0x810>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 8002a0a:	2378      	movs	r3, #120	@ 0x78
 8002a0c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002a10:	4b52      	ldr	r3, [pc, #328]	@ (8002b5c <get_st_biases+0x470>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	b299      	uxth	r1, r3
 8002a1a:	4b50      	ldr	r3, [pc, #320]	@ (8002b5c <get_st_biases+0x470>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	795b      	ldrb	r3, [r3, #5]
 8002a20:	461a      	mov	r2, r3
 8002a22:	2305      	movs	r3, #5
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	2301      	movs	r3, #1
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	2301      	movs	r3, #1
 8002a32:	484b      	ldr	r0, [pc, #300]	@ (8002b60 <get_st_biases+0x474>)
 8002a34:	f007 fe40 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <get_st_biases+0x358>
        return -1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	e25b      	b.n	8002efc <get_st_biases+0x810>
    delay_ms(test.wait_ms);
 8002a44:	2332      	movs	r3, #50	@ 0x32
 8002a46:	4618      	mov	r0, r3
 8002a48:	f007 f846 	bl	8009ad8 <HAL_Delay>
    data[0] = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002a52:	4b42      	ldr	r3, [pc, #264]	@ (8002b5c <get_st_biases+0x470>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	b299      	uxth	r1, r3
 8002a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b5c <get_st_biases+0x470>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	795b      	ldrb	r3, [r3, #5]
 8002a62:	461a      	mov	r2, r3
 8002a64:	2305      	movs	r3, #5
 8002a66:	9302      	str	r3, [sp, #8]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2301      	movs	r3, #1
 8002a74:	483a      	ldr	r0, [pc, #232]	@ (8002b60 <get_st_biases+0x474>)
 8002a76:	f007 fe1f 	bl	800a6b8 <HAL_I2C_Mem_Write>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <get_st_biases+0x39a>
        return -1;
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	e23a      	b.n	8002efc <get_st_biases+0x810>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 8002a86:	4b35      	ldr	r3, [pc, #212]	@ (8002b5c <get_st_biases+0x470>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	b299      	uxth	r1, r3
 8002a90:	4b32      	ldr	r3, [pc, #200]	@ (8002b5c <get_st_biases+0x470>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	7a9b      	ldrb	r3, [r3, #10]
 8002a96:	461a      	mov	r2, r3
 8002a98:	2305      	movs	r3, #5
 8002a9a:	9302      	str	r3, [sp, #8]
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	482d      	ldr	r0, [pc, #180]	@ (8002b60 <get_st_biases+0x474>)
 8002aaa:	f007 feff 	bl	800a8ac <HAL_I2C_Mem_Read>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <get_st_biases+0x3ce>
        return -1;
 8002ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab8:	e220      	b.n	8002efc <get_st_biases+0x810>

    fifo_count = (data[0] << 8) | data[1];
 8002aba:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002abe:	b21b      	sxth	r3, r3
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	b21a      	sxth	r2, r3
 8002ac4:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b21b      	sxth	r3, r3
 8002ace:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 8002ad2:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 8002ad6:	4b23      	ldr	r3, [pc, #140]	@ (8002b64 <get_st_biases+0x478>)
 8002ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8002adc:	08db      	lsrs	r3, r3, #3
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 8002ae4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ae8:	f103 0108 	add.w	r1, r3, #8
 8002aec:	2300      	movs	r3, #0
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002af4:	1d1a      	adds	r2, r3, #4
 8002af6:	680b      	ldr	r3, [r1, #0]
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b00:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 8002b02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b06:	f103 0108 	add.w	r1, r3, #8
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	600b      	str	r3, [r1, #0]
 8002b0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b12:	1d1a      	adds	r2, r3, #4
 8002b14:	680b      	ldr	r3, [r1, #0]
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b1e:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 8002b20:	2300      	movs	r3, #0
 8002b22:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002b26:	e0b0      	b.n	8002c8a <get_st_biases+0x59e>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <get_st_biases+0x470>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	b299      	uxth	r1, r3
 8002b32:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <get_st_biases+0x470>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	7adb      	ldrb	r3, [r3, #11]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2305      	movs	r3, #5
 8002b3c:	9302      	str	r3, [sp, #8]
 8002b3e:	230c      	movs	r3, #12
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2301      	movs	r3, #1
 8002b4a:	4805      	ldr	r0, [pc, #20]	@ (8002b60 <get_st_biases+0x474>)
 8002b4c:	f007 feae 	bl	800a8ac <HAL_I2C_Mem_Read>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <get_st_biases+0x47c>
            return -1;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5a:	e1cf      	b.n	8002efc <get_st_biases+0x810>
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000328 	.word	0x20000328
 8002b64:	aaaaaaab 	.word	0xaaaaaaab
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8002b68:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002b6c:	b21b      	sxth	r3, r3
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	b21a      	sxth	r2, r3
 8002b72:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002b76:	b21b      	sxth	r3, r3
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 8002b80:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	b21a      	sxth	r2, r3
 8002b8a:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8002b8e:	b21b      	sxth	r3, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b21b      	sxth	r3, r3
 8002b94:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 8002b98:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8002b9c:	b21b      	sxth	r3, r3
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	b21a      	sxth	r2, r3
 8002ba2:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
        accel[0] += (long)accel_cur[0];
 8002bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8002bba:	441a      	add	r2, r3
 8002bbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bc0:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 8002bc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	6819      	ldr	r1, [r3, #0]
 8002bca:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bd4:	1d1a      	adds	r2, r3, #4
 8002bd6:	180b      	adds	r3, r1, r0
 8002bd8:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 8002bda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bde:	3308      	adds	r3, #8
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 8002be6:	4618      	mov	r0, r3
 8002be8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bec:	f103 0208 	add.w	r2, r3, #8
 8002bf0:	180b      	adds	r3, r1, r0
 8002bf2:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 8002bf4:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	b21a      	sxth	r2, r3
 8002bfe:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002c02:	b21b      	sxth	r3, r3
 8002c04:	4313      	orrs	r3, r2
 8002c06:	b21b      	sxth	r3, r3
 8002c08:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 8002c0c:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8002c10:	b21b      	sxth	r3, r3
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	b21a      	sxth	r2, r3
 8002c16:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 8002c1a:	b21b      	sxth	r3, r3
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 8002c24:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8002c28:	b21b      	sxth	r3, r3
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	b21a      	sxth	r2, r3
 8002c2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8002c32:	b21b      	sxth	r3, r3
 8002c34:	4313      	orrs	r3, r2
 8002c36:	b21b      	sxth	r3, r3
 8002c38:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
        gyro[0] += (long)gyro_cur[0];
 8002c3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8002c46:	441a      	add	r2, r3
 8002c48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c4c:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 8002c4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c52:	3304      	adds	r3, #4
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c60:	1d1a      	adds	r2, r3, #4
 8002c62:	180b      	adds	r3, r1, r0
 8002c64:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 8002c66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c78:	f103 0208 	add.w	r2, r3, #8
 8002c7c:	180b      	adds	r3, r1, r0
 8002c7e:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 8002c80:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002c84:	3301      	adds	r3, #1
 8002c86:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002c8a:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 8002c8e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002c92:	429a      	cmp	r2, r3
 8002c94:	f4ff af48 	bcc.w	8002b28 <get_st_biases+0x43c>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 8002c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	17da      	asrs	r2, r3, #31
 8002ca0:	461c      	mov	r4, r3
 8002ca2:	4615      	mov	r5, r2
 8002ca4:	1423      	asrs	r3, r4, #16
 8002ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002caa:	0423      	lsls	r3, r4, #16
 8002cac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002cb0:	2283      	movs	r2, #131	@ 0x83
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8002cb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cbc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002cc0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002cc4:	f7fd ffe0 	bl	8000c88 <__aeabi_ldivmod>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cde:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002ce2:	f7fd ffd1 	bl	8000c88 <__aeabi_ldivmod>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cee:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 8002cf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	17da      	asrs	r2, r3, #31
 8002cfa:	4698      	mov	r8, r3
 8002cfc:	4691      	mov	r9, r2
 8002cfe:	ea4f 4328 	mov.w	r3, r8, asr #16
 8002d02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d06:	ea4f 4308 	mov.w	r3, r8, lsl #16
 8002d0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d0e:	2283      	movs	r2, #131	@ 0x83
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d1a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002d1e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002d22:	f7fd ffb1 	bl	8000c88 <__aeabi_ldivmod>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002d32:	2200      	movs	r2, #0
 8002d34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d38:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002d3c:	f7fd ffa4 	bl	8000c88 <__aeabi_ldivmod>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d4c:	1d1a      	adds	r2, r3, #4
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 8002d52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d56:	3308      	adds	r3, #8
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	17da      	asrs	r2, r3, #31
 8002d5c:	469a      	mov	sl, r3
 8002d5e:	4693      	mov	fp, r2
 8002d60:	ea4f 432a 	mov.w	r3, sl, asr #16
 8002d64:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d66:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8002d6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d6c:	2283      	movs	r2, #131	@ 0x83
 8002d6e:	2300      	movs	r3, #0
 8002d70:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002d72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d74:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002d78:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002d7c:	f7fd ff84 	bl	8000c88 <__aeabi_ldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d90:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d92:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002d96:	f7fd ff77 	bl	8000c88 <__aeabi_ldivmod>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002da6:	f103 0208 	add.w	r2, r3, #8
 8002daa:	4603      	mov	r3, r0
 8002dac:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 8002dae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	17da      	asrs	r2, r3, #31
 8002db6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002db8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002dba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	141b      	asrs	r3, r3, #16
 8002dc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dce:	2300      	movs	r3, #0
 8002dd0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dd8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002ddc:	f7fd ff54 	bl	8000c88 <__aeabi_ldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4610      	mov	r0, r2
 8002de6:	4619      	mov	r1, r3
 8002de8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002dec:	2200      	movs	r2, #0
 8002dee:	643b      	str	r3, [r7, #64]	@ 0x40
 8002df0:	647a      	str	r2, [r7, #68]	@ 0x44
 8002df2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002df6:	f7fd ff47 	bl	8000c88 <__aeabi_ldivmod>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e02:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 8002e04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e08:	3304      	adds	r3, #4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	17da      	asrs	r2, r3, #31
 8002e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e12:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002e16:	460b      	mov	r3, r1
 8002e18:	141b      	asrs	r3, r3, #16
 8002e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	041b      	lsls	r3, r3, #16
 8002e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e26:	2300      	movs	r3, #0
 8002e28:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e30:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002e34:	f7fd ff28 	bl	8000c88 <__aeabi_ldivmod>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002e44:	2200      	movs	r2, #0
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e4e:	f7fd ff1b 	bl	8000c88 <__aeabi_ldivmod>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e5e:	3304      	adds	r3, #4
 8002e60:	4602      	mov	r2, r0
 8002e62:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 8002e64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e68:	3308      	adds	r3, #8
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	17da      	asrs	r2, r3, #31
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	61fa      	str	r2, [r7, #28]
 8002e72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002e76:	460b      	mov	r3, r1
 8002e78:	141b      	asrs	r3, r3, #16
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	041b      	lsls	r3, r3, #16
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e86:	2300      	movs	r3, #0
 8002e88:	60ba      	str	r2, [r7, #8]
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e94:	f7fd fef8 	bl	8000c88 <__aeabi_ldivmod>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eae:	f7fd feeb 	bl	8000c88 <__aeabi_ldivmod>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 8002ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ec8:	3308      	adds	r3, #8
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	dd0a      	ble.n	8002ee6 <get_st_biases+0x7fa>
        accel[2] -= 65536L;
 8002ed0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002edc:	3308      	adds	r3, #8
 8002ede:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e009      	b.n	8002efa <get_st_biases+0x80e>
    else
        accel[2] += 65536L;
 8002ee6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002eea:	3308      	adds	r3, #8
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8002ef8:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	37e0      	adds	r7, #224	@ 0xe0
 8002f00:	46bd      	mov	sp, r7
 8002f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f06:	bf00      	nop

08002f08 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08e      	sub	sp, #56	@ 0x38
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 8002f12:	2302      	movs	r3, #2
 8002f14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 8002f18:	4b64      	ldr	r3, [pc, #400]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8002f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f000 fa18 	bl	8003358 <mpu_set_dmp_state>
        dmp_was_on = 1;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002f2e:	e002      	b.n	8002f36 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 8002f36:	f107 030c 	add.w	r3, r7, #12
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fc2e 	bl	800179c <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 8002f40:	f107 030f 	add.w	r3, r7, #15
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe fcbd 	bl	80018c4 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 8002f4a:	f107 0308 	add.w	r3, r7, #8
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fd64 	bl	8001a1c <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 8002f54:	f107 030a 	add.w	r3, r7, #10
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fdf7 	bl	8001b4c <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 8002f5e:	4b53      	ldr	r3, [pc, #332]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8002f60:	7a9b      	ldrb	r3, [r3, #10]
 8002f62:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 8002f66:	f107 030e 	add.w	r3, r7, #14
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fef0 	bl	8001d50 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f74:	e00a      	b.n	8002f8c <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 8002f76:	2200      	movs	r2, #0
 8002f78:	6839      	ldr	r1, [r7, #0]
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fbb6 	bl	80026ec <get_st_biases>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 8002f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f88:	3301      	adds	r3, #1
 8002f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f92:	429a      	cmp	r2, r3
 8002f94:	dbef      	blt.n	8002f76 <mpu_run_self_test+0x6e>
 8002f96:	e000      	b.n	8002f9a <mpu_run_self_test+0x92>
            break;
 8002f98:	bf00      	nop
    if (ii == tries) {
 8002f9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d102      	bne.n	8002faa <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8002fa8:	e045      	b.n	8003036 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fae:	e00d      	b.n	8002fcc <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 8002fb0:	f107 0110 	add.w	r1, r7, #16
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	2201      	movs	r2, #1
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fb96 	bl	80026ec <get_st_biases>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc8:	3301      	adds	r3, #1
 8002fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fcc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	dbec      	blt.n	8002fb0 <mpu_run_self_test+0xa8>
 8002fd6:	e000      	b.n	8002fda <mpu_run_self_test+0xd2>
            break;
 8002fd8:	bf00      	nop
    if (ii == tries) {
 8002fda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002fde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d102      	bne.n	8002fea <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8002fe8:	e025      	b.n	8003036 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 8002fea:	f107 0310 	add.w	r3, r7, #16
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6838      	ldr	r0, [r7, #0]
 8002ff2:	f7ff fa2d 	bl	8002450 <accel_self_test>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff faa8 	bl	8002558 <gyro_self_test>
 8003008:	4603      	mov	r3, r0
 800300a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    result = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!gyro_result)
 8003012:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <mpu_run_self_test+0x11a>
        result |= 0x01;
 800301a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!accel_result)
 8003022:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <mpu_run_self_test+0x12c>
        result |= 0x02;
 800302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	633b      	str	r3, [r7, #48]	@ 0x30
 8003032:	e000      	b.n	8003036 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 8003034:	bf00      	nop
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 8003036:	4b1d      	ldr	r3, [pc, #116]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003038:	22ff      	movs	r2, #255	@ 0xff
 800303a:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800303c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ac <mpu_run_self_test+0x1a4>)
 800303e:	22ff      	movs	r2, #255	@ 0xff
 8003040:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8003042:	4b1a      	ldr	r3, [pc, #104]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003044:	22ff      	movs	r2, #255	@ 0xff
 8003046:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8003048:	4b18      	ldr	r3, [pc, #96]	@ (80030ac <mpu_run_self_test+0x1a4>)
 800304a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800304e:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 8003050:	4b16      	ldr	r3, [pc, #88]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003052:	22ff      	movs	r2, #255	@ 0xff
 8003054:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 8003056:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003058:	22ff      	movs	r2, #255	@ 0xff
 800305a:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800305c:	4b13      	ldr	r3, [pc, #76]	@ (80030ac <mpu_run_self_test+0x1a4>)
 800305e:	2201      	movs	r2, #1
 8003060:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 8003062:	89bb      	ldrh	r3, [r7, #12]
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe fbcd 	bl	8001804 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe fc63 	bl	8001938 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 8003072:	893b      	ldrh	r3, [r7, #8]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe fd0f 	bl	8001a98 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 800307a:	897b      	ldrh	r3, [r7, #10]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fd7f 	bl	8001b80 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 8003082:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fec6 	bl	8001e18 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 800308c:	7bbb      	ldrb	r3, [r7, #14]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe fe70 	bl	8001d74 <mpu_configure_fifo>

    if (dmp_was_on)
 8003094:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <mpu_run_self_test+0x19a>
        mpu_set_dmp_state(1);
 800309c:	2001      	movs	r0, #1
 800309e:	f000 f95b 	bl	8003358 <mpu_set_dmp_state>

    return result;
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3738      	adds	r7, #56	@ 0x38
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000000 	.word	0x20000000

080030b0 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af04      	add	r7, sp, #16
 80030b6:	4603      	mov	r3, r0
 80030b8:	603a      	str	r2, [r7, #0]
 80030ba:	80fb      	strh	r3, [r7, #6]
 80030bc:	460b      	mov	r3, r1
 80030be:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <mpu_write_mem+0x1c>
        return -1;
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	e04e      	b.n	800316a <mpu_write_mem+0xba>
    if (!st.chip_cfg.sensors)
 80030cc:	4b29      	ldr	r3, [pc, #164]	@ (8003174 <mpu_write_mem+0xc4>)
 80030ce:	7a9b      	ldrb	r3, [r3, #10]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <mpu_write_mem+0x2a>
        return -1;
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295
 80030d8:	e047      	b.n	800316a <mpu_write_mem+0xba>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	b29b      	uxth	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80030ea:	7b7b      	ldrb	r3, [r7, #13]
 80030ec:	461a      	mov	r2, r3
 80030ee:	88bb      	ldrh	r3, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	4a20      	ldr	r2, [pc, #128]	@ (8003174 <mpu_write_mem+0xc4>)
 80030f4:	6852      	ldr	r2, [r2, #4]
 80030f6:	8952      	ldrh	r2, [r2, #10]
 80030f8:	4293      	cmp	r3, r2
 80030fa:	dd02      	ble.n	8003102 <mpu_write_mem+0x52>
        return -1;
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003100:	e033      	b.n	800316a <mpu_write_mem+0xba>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8003102:	4b1c      	ldr	r3, [pc, #112]	@ (8003174 <mpu_write_mem+0xc4>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	b299      	uxth	r1, r3
 800310c:	4b19      	ldr	r3, [pc, #100]	@ (8003174 <mpu_write_mem+0xc4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	7e1b      	ldrb	r3, [r3, #24]
 8003112:	461a      	mov	r2, r3
 8003114:	2305      	movs	r3, #5
 8003116:	9302      	str	r3, [sp, #8]
 8003118:	2302      	movs	r3, #2
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	f107 030c 	add.w	r3, r7, #12
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	2301      	movs	r3, #1
 8003124:	4814      	ldr	r0, [pc, #80]	@ (8003178 <mpu_write_mem+0xc8>)
 8003126:	f007 fac7 	bl	800a6b8 <HAL_I2C_Mem_Write>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <mpu_write_mem+0x86>
        return -1;
 8003130:	f04f 33ff 	mov.w	r3, #4294967295
 8003134:	e019      	b.n	800316a <mpu_write_mem+0xba>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8003136:	4b0f      	ldr	r3, [pc, #60]	@ (8003174 <mpu_write_mem+0xc4>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	b299      	uxth	r1, r3
 8003140:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <mpu_write_mem+0xc4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	7d5b      	ldrb	r3, [r3, #21]
 8003146:	461a      	mov	r2, r3
 8003148:	2305      	movs	r3, #5
 800314a:	9302      	str	r3, [sp, #8]
 800314c:	88bb      	ldrh	r3, [r7, #4]
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2301      	movs	r3, #1
 8003156:	4808      	ldr	r0, [pc, #32]	@ (8003178 <mpu_write_mem+0xc8>)
 8003158:	f007 faae 	bl	800a6b8 <HAL_I2C_Mem_Write>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <mpu_write_mem+0xb8>
        return -1;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295
 8003166:	e000      	b.n	800316a <mpu_write_mem+0xba>
    return 0;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000000 	.word	0x20000000
 8003178:	20000328 	.word	0x20000328

0800317c <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af04      	add	r7, sp, #16
 8003182:	4603      	mov	r3, r0
 8003184:	603a      	str	r2, [r7, #0]
 8003186:	80fb      	strh	r3, [r7, #6]
 8003188:	460b      	mov	r3, r1
 800318a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d102      	bne.n	8003198 <mpu_read_mem+0x1c>
        return -1;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	e04e      	b.n	8003236 <mpu_read_mem+0xba>
    if (!st.chip_cfg.sensors)
 8003198:	4b29      	ldr	r3, [pc, #164]	@ (8003240 <mpu_read_mem+0xc4>)
 800319a:	7a9b      	ldrb	r3, [r3, #10]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <mpu_read_mem+0x2a>
        return -1;
 80031a0:	f04f 33ff 	mov.w	r3, #4294967295
 80031a4:	e047      	b.n	8003236 <mpu_read_mem+0xba>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80031b6:	7b7b      	ldrb	r3, [r7, #13]
 80031b8:	461a      	mov	r2, r3
 80031ba:	88bb      	ldrh	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	4a20      	ldr	r2, [pc, #128]	@ (8003240 <mpu_read_mem+0xc4>)
 80031c0:	6852      	ldr	r2, [r2, #4]
 80031c2:	8952      	ldrh	r2, [r2, #10]
 80031c4:	4293      	cmp	r3, r2
 80031c6:	dd02      	ble.n	80031ce <mpu_read_mem+0x52>
        return -1;
 80031c8:	f04f 33ff 	mov.w	r3, #4294967295
 80031cc:	e033      	b.n	8003236 <mpu_read_mem+0xba>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80031ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003240 <mpu_read_mem+0xc4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	b299      	uxth	r1, r3
 80031d8:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <mpu_read_mem+0xc4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	7e1b      	ldrb	r3, [r3, #24]
 80031de:	461a      	mov	r2, r3
 80031e0:	2305      	movs	r3, #5
 80031e2:	9302      	str	r3, [sp, #8]
 80031e4:	2302      	movs	r3, #2
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	2301      	movs	r3, #1
 80031f0:	4814      	ldr	r0, [pc, #80]	@ (8003244 <mpu_read_mem+0xc8>)
 80031f2:	f007 fa61 	bl	800a6b8 <HAL_I2C_Mem_Write>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <mpu_read_mem+0x86>
        return -1;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003200:	e019      	b.n	8003236 <mpu_read_mem+0xba>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8003202:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <mpu_read_mem+0xc4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	b299      	uxth	r1, r3
 800320c:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <mpu_read_mem+0xc4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	7d5b      	ldrb	r3, [r3, #21]
 8003212:	461a      	mov	r2, r3
 8003214:	2305      	movs	r3, #5
 8003216:	9302      	str	r3, [sp, #8]
 8003218:	88bb      	ldrh	r3, [r7, #4]
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2301      	movs	r3, #1
 8003222:	4808      	ldr	r0, [pc, #32]	@ (8003244 <mpu_read_mem+0xc8>)
 8003224:	f007 fb42 	bl	800a8ac <HAL_I2C_Mem_Read>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <mpu_read_mem+0xb8>
        return -1;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	e000      	b.n	8003236 <mpu_read_mem+0xba>
    return 0;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000000 	.word	0x20000000
 8003244:	20000328 	.word	0x20000328

08003248 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	@ 0x38
 800324c:	af04      	add	r7, sp, #16
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	4611      	mov	r1, r2
 8003252:	461a      	mov	r2, r3
 8003254:	4603      	mov	r3, r0
 8003256:	81fb      	strh	r3, [r7, #14]
 8003258:	460b      	mov	r3, r1
 800325a:	81bb      	strh	r3, [r7, #12]
 800325c:	4613      	mov	r3, r2
 800325e:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8003260:	4b3b      	ldr	r3, [pc, #236]	@ (8003350 <mpu_load_firmware+0x108>)
 8003262:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	e06b      	b.n	8003348 <mpu_load_firmware+0x100>

    if (!firmware)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <mpu_load_firmware+0x34>
        return -1;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295
 800327a:	e065      	b.n	8003348 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 800327c:	2300      	movs	r3, #0
 800327e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003280:	e034      	b.n	80032ec <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8003282:	89fa      	ldrh	r2, [r7, #14]
 8003284:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b10      	cmp	r3, #16
 800328a:	bfa8      	it	ge
 800328c:	2310      	movge	r3, #16
 800328e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8003290:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	441a      	add	r2, r3
 8003296:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8003298:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ff08 	bl	80030b0 <mpu_write_mem>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <mpu_load_firmware+0x64>
            return -1;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
 80032aa:	e04d      	b.n	8003348 <mpu_load_firmware+0x100>
        if (mpu_read_mem(ii, this_write, cur))
 80032ac:	f107 0214 	add.w	r2, r7, #20
 80032b0:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80032b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff61 	bl	800317c <mpu_read_mem>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <mpu_load_firmware+0x7e>
            return -1;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	e040      	b.n	8003348 <mpu_load_firmware+0x100>
        if (memcmp(firmware+ii, cur, this_write))
 80032c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4413      	add	r3, r2
 80032cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032ce:	f107 0114 	add.w	r1, r7, #20
 80032d2:	4618      	mov	r0, r3
 80032d4:	f00b fd00 	bl	800ecd8 <memcmp>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <mpu_load_firmware+0x9c>
            return -2;
 80032de:	f06f 0301 	mvn.w	r3, #1
 80032e2:	e031      	b.n	8003348 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 80032e4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80032e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032e8:	4413      	add	r3, r2
 80032ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80032ec:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80032ee:	89fb      	ldrh	r3, [r7, #14]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d3c6      	bcc.n	8003282 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 80032f4:	89bb      	ldrh	r3, [r7, #12]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 80032fe:	89bb      	ldrh	r3, [r7, #12]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8003304:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <mpu_load_firmware+0x108>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	b299      	uxth	r1, r3
 800330e:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <mpu_load_firmware+0x108>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	7e9b      	ldrb	r3, [r3, #26]
 8003314:	461a      	mov	r2, r3
 8003316:	2305      	movs	r3, #5
 8003318:	9302      	str	r3, [sp, #8]
 800331a:	2302      	movs	r3, #2
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	f107 0310 	add.w	r3, r7, #16
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2301      	movs	r3, #1
 8003326:	480b      	ldr	r0, [pc, #44]	@ (8003354 <mpu_load_firmware+0x10c>)
 8003328:	f007 f9c6 	bl	800a6b8 <HAL_I2C_Mem_Write>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <mpu_load_firmware+0xf0>
        return -1;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295
 8003336:	e007      	b.n	8003348 <mpu_load_firmware+0x100>

    st.chip_cfg.dmp_loaded = 1;
 8003338:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <mpu_load_firmware+0x108>)
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8003340:	4a03      	ldr	r2, [pc, #12]	@ (8003350 <mpu_load_firmware+0x108>)
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	84d3      	strh	r3, [r2, #38]	@ 0x26
    return 0;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3728      	adds	r7, #40	@ 0x28
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000000 	.word	0x20000000
 8003354:	20000328 	.word	0x20000328

08003358 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af04      	add	r7, sp, #16
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8003362:	4b2e      	ldr	r3, [pc, #184]	@ (800341c <mpu_set_dmp_state+0xc4>)
 8003364:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003368:	79fa      	ldrb	r2, [r7, #7]
 800336a:	429a      	cmp	r2, r3
 800336c:	d101      	bne.n	8003372 <mpu_set_dmp_state+0x1a>
        return 0;
 800336e:	2300      	movs	r3, #0
 8003370:	e050      	b.n	8003414 <mpu_set_dmp_state+0xbc>

    if (enable) {
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d02f      	beq.n	80033d8 <mpu_set_dmp_state+0x80>
        if (!st.chip_cfg.dmp_loaded)
 8003378:	4b28      	ldr	r3, [pc, #160]	@ (800341c <mpu_set_dmp_state+0xc4>)
 800337a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <mpu_set_dmp_state+0x30>
            return -1;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295
 8003386:	e045      	b.n	8003414 <mpu_set_dmp_state+0xbc>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8003388:	2000      	movs	r0, #0
 800338a:	f7fd fe63 	bl	8001054 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 800338e:	2000      	movs	r0, #0
 8003390:	f7fe fe78 	bl	8002084 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8003394:	4b21      	ldr	r3, [pc, #132]	@ (800341c <mpu_set_dmp_state+0xc4>)
 8003396:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe fbf1 	bl	8001b80 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80033a2:	4b1e      	ldr	r3, [pc, #120]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	b299      	uxth	r1, r3
 80033ac:	2305      	movs	r3, #5
 80033ae:	9302      	str	r3, [sp, #8]
 80033b0:	2301      	movs	r3, #1
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	f107 030f 	add.w	r3, r7, #15
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2301      	movs	r3, #1
 80033bc:	2223      	movs	r2, #35	@ 0x23
 80033be:	4818      	ldr	r0, [pc, #96]	@ (8003420 <mpu_set_dmp_state+0xc8>)
 80033c0:	f007 f97a 	bl	800a6b8 <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 1;
 80033c4:	4b15      	ldr	r3, [pc, #84]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 80033cc:	2001      	movs	r0, #1
 80033ce:	f7fd fe41 	bl	8001054 <set_int_enable>
        mpu_reset_fifo();
 80033d2:	f7fe f87b 	bl	80014cc <mpu_reset_fifo>
 80033d6:	e01c      	b.n	8003412 <mpu_set_dmp_state+0xba>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 80033d8:	2000      	movs	r0, #0
 80033da:	f7fd fe3b 	bl	8001054 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 80033de:	4b0f      	ldr	r3, [pc, #60]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033e0:	7c1b      	ldrb	r3, [r3, #16]
 80033e2:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80033e4:	4b0d      	ldr	r3, [pc, #52]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	b299      	uxth	r1, r3
 80033ee:	2305      	movs	r3, #5
 80033f0:	9302      	str	r3, [sp, #8]
 80033f2:	2301      	movs	r3, #1
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	f107 030f 	add.w	r3, r7, #15
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2301      	movs	r3, #1
 80033fe:	2223      	movs	r2, #35	@ 0x23
 8003400:	4807      	ldr	r0, [pc, #28]	@ (8003420 <mpu_set_dmp_state+0xc8>)
 8003402:	f007 f959 	bl	800a6b8 <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 0;
 8003406:	4b05      	ldr	r3, [pc, #20]	@ (800341c <mpu_set_dmp_state+0xc4>)
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        mpu_reset_fifo();
 800340e:	f7fe f85d 	bl	80014cc <mpu_reset_fifo>
    }
    return 0;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20000000 	.word	0x20000000
 8003420:	20000328 	.word	0x20000328

08003424 <myget_ms>:

    st.chip_cfg.int_motion_only = 0;
    return 0;
}
void myget_ms(unsigned long *time)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 800343c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003440:	23c8      	movs	r3, #200	@ 0xc8
 8003442:	4904      	ldr	r1, [pc, #16]	@ (8003454 <dmp_load_motion_driver_firmware+0x1c>)
 8003444:	f640 30f6 	movw	r0, #3062	@ 0xbf6
 8003448:	f7ff fefe 	bl	8003248 <mpu_load_firmware>
 800344c:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 800344e:	4618      	mov	r0, r3
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	0801185c 	.word	0x0801185c

08003458 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8003462:	4a6e      	ldr	r2, [pc, #440]	@ (800361c <dmp_set_orientation+0x1c4>)
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	4611      	mov	r1, r2
 800346c:	8019      	strh	r1, [r3, #0]
 800346e:	3302      	adds	r3, #2
 8003470:	0c12      	lsrs	r2, r2, #16
 8003472:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8003474:	4a6a      	ldr	r2, [pc, #424]	@ (8003620 <dmp_set_orientation+0x1c8>)
 8003476:	f107 0310 	add.w	r3, r7, #16
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	4611      	mov	r1, r2
 800347e:	8019      	strh	r1, [r3, #0]
 8003480:	3302      	adds	r3, #2
 8003482:	0c12      	lsrs	r2, r2, #16
 8003484:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8003486:	4a67      	ldr	r2, [pc, #412]	@ (8003624 <dmp_set_orientation+0x1cc>)
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	4611      	mov	r1, r2
 8003490:	8019      	strh	r1, [r3, #0]
 8003492:	3302      	adds	r3, #2
 8003494:	0c12      	lsrs	r2, r2, #16
 8003496:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8003498:	4a63      	ldr	r2, [pc, #396]	@ (8003628 <dmp_set_orientation+0x1d0>)
 800349a:	f107 0308 	add.w	r3, r7, #8
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	4611      	mov	r1, r2
 80034a2:	8019      	strh	r1, [r3, #0]
 80034a4:	3302      	adds	r3, #2
 80034a6:	0c12      	lsrs	r2, r2, #16
 80034a8:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	3320      	adds	r3, #32
 80034b2:	443b      	add	r3, r7
 80034b4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034b8:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	08db      	lsrs	r3, r3, #3
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	3320      	adds	r3, #32
 80034c6:	443b      	add	r3, r7
 80034c8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034cc:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	099b      	lsrs	r3, r3, #6
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	3320      	adds	r3, #32
 80034da:	443b      	add	r3, r7
 80034dc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034e0:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	3320      	adds	r3, #32
 80034ea:	443b      	add	r3, r7
 80034ec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80034f0:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	08db      	lsrs	r3, r3, #3
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	3320      	adds	r3, #32
 80034fe:	443b      	add	r3, r7
 8003500:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003504:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	099b      	lsrs	r3, r3, #6
 800350a:	b29b      	uxth	r3, r3
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	3320      	adds	r3, #32
 8003512:	443b      	add	r3, r7
 8003514:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003518:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 800351a:	f107 031c 	add.w	r3, r7, #28
 800351e:	461a      	mov	r2, r3
 8003520:	2103      	movs	r1, #3
 8003522:	f240 4026 	movw	r0, #1062	@ 0x426
 8003526:	f7ff fdc3 	bl	80030b0 <mpu_write_mem>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <dmp_set_orientation+0xde>
        return -1;
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
 8003534:	e06e      	b.n	8003614 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8003536:	f107 0318 	add.w	r3, r7, #24
 800353a:	461a      	mov	r2, r3
 800353c:	2103      	movs	r1, #3
 800353e:	f240 402a 	movw	r0, #1066	@ 0x42a
 8003542:	f7ff fdb5 	bl	80030b0 <mpu_write_mem>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <dmp_set_orientation+0xfa>
        return -1;
 800354c:	f04f 33ff 	mov.w	r3, #4294967295
 8003550:	e060      	b.n	8003614 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8003552:	f107 031c 	add.w	r3, r7, #28
 8003556:	f107 020c 	add.w	r2, r7, #12
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	4611      	mov	r1, r2
 800355e:	8019      	strh	r1, [r3, #0]
 8003560:	3302      	adds	r3, #2
 8003562:	0c12      	lsrs	r2, r2, #16
 8003564:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8003566:	f107 0318 	add.w	r3, r7, #24
 800356a:	f107 0208 	add.w	r2, r7, #8
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	4611      	mov	r1, r2
 8003572:	8019      	strh	r1, [r3, #0]
 8003574:	3302      	adds	r3, #2
 8003576:	0c12      	lsrs	r2, r2, #16
 8003578:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 8003584:	7f3b      	ldrb	r3, [r7, #28]
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 800358e:	7e3b      	ldrb	r3, [r7, #24]
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	b2db      	uxtb	r3, r3
 8003596:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 80035a2:	7f7b      	ldrb	r3, [r7, #29]
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 80035ac:	7e7b      	ldrb	r3, [r7, #25]
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 80035c0:	7fbb      	ldrb	r3, [r7, #30]
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 80035ca:	7ebb      	ldrb	r3, [r7, #26]
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 80035d4:	f107 031c 	add.w	r3, r7, #28
 80035d8:	461a      	mov	r2, r3
 80035da:	2103      	movs	r1, #3
 80035dc:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 80035e0:	f7ff fd66 	bl	80030b0 <mpu_write_mem>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <dmp_set_orientation+0x198>
        return -1;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	e011      	b.n	8003614 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 80035f0:	f107 0318 	add.w	r3, r7, #24
 80035f4:	461a      	mov	r2, r3
 80035f6:	2103      	movs	r1, #3
 80035f8:	f240 4031 	movw	r0, #1073	@ 0x431
 80035fc:	f7ff fd58 	bl	80030b0 <mpu_write_mem>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <dmp_set_orientation+0x1b4>
        return -1;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	e003      	b.n	8003614 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 800360c:	4a07      	ldr	r2, [pc, #28]	@ (800362c <dmp_set_orientation+0x1d4>)
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	8113      	strh	r3, [r2, #8]
    return 0;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	08011770 	.word	0x08011770
 8003620:	08011774 	.word	0x08011774
 8003624:	08011778 	.word	0x08011778
 8003628:	0801177c 	.word	0x0801177c
 800362c:	200002c4 	.word	0x200002c4

08003630 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 8003630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003634:	b08c      	sub	sp, #48	@ 0x30
 8003636:	af00      	add	r7, sp, #0
 8003638:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 800363a:	4b80      	ldr	r3, [pc, #512]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 800363c:	891b      	ldrh	r3, [r3, #8]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (dmp.orient & 4)
 800364c:	4b7b      	ldr	r3, [pc, #492]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 800364e:	891b      	ldrh	r3, [r3, #8]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	425b      	negs	r3, r3
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800365e:	4b77      	ldr	r3, [pc, #476]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 8003660:	891b      	ldrh	r3, [r3, #8]
 8003662:	08db      	lsrs	r3, r3, #3
 8003664:	b29b      	uxth	r3, r3
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (dmp.orient & 0x20)
 8003674:	4b71      	ldr	r3, [pc, #452]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 8003676:	891b      	ldrh	r3, [r3, #8]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 8003680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003682:	425b      	negs	r3, r3
 8003684:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8003686:	4b6d      	ldr	r3, [pc, #436]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 8003688:	891b      	ldrh	r3, [r3, #8]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	b29b      	uxth	r3, r3
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	4413      	add	r3, r2
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dmp.orient & 0x100)
 800369c:	4b67      	ldr	r3, [pc, #412]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 800369e:	891b      	ldrh	r3, [r3, #8]
 80036a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 80036a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036aa:	425b      	negs	r3, r3
 80036ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	17da      	asrs	r2, r3, #31
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	617a      	str	r2, [r7, #20]
 80036b6:	4b62      	ldr	r3, [pc, #392]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 80036b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036bc:	460a      	mov	r2, r1
 80036be:	fb03 f202 	mul.w	r2, r3, r2
 80036c2:	2300      	movs	r3, #0
 80036c4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80036c8:	4601      	mov	r1, r0
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	4a5b      	ldr	r2, [pc, #364]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 80036d2:	6939      	ldr	r1, [r7, #16]
 80036d4:	fba1 ab02 	umull	sl, fp, r1, r2
 80036d8:	445b      	add	r3, fp
 80036da:	469b      	mov	fp, r3
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	ea4f 729a 	mov.w	r2, sl, lsr #30
 80036e8:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 80036ec:	ea4f 73ab 	mov.w	r3, fp, asr #30
 80036f0:	4613      	mov	r3, r2
 80036f2:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 80036f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f6:	17da      	asrs	r2, r3, #31
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	60fa      	str	r2, [r7, #12]
 80036fc:	4b50      	ldr	r3, [pc, #320]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 80036fe:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003702:	465a      	mov	r2, fp
 8003704:	fb03 f202 	mul.w	r2, r3, r2
 8003708:	2300      	movs	r3, #0
 800370a:	4651      	mov	r1, sl
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	4413      	add	r3, r2
 8003712:	4a4b      	ldr	r2, [pc, #300]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 8003714:	4651      	mov	r1, sl
 8003716:	fba1 8902 	umull	r8, r9, r1, r2
 800371a:	444b      	add	r3, r9
 800371c:	4699      	mov	r9, r3
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800372a:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800372e:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003732:	4613      	mov	r3, r2
 8003734:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8003736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003738:	17da      	asrs	r2, r3, #31
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	4b40      	ldr	r3, [pc, #256]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 8003740:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003744:	464a      	mov	r2, r9
 8003746:	fb03 f202 	mul.w	r2, r3, r2
 800374a:	2300      	movs	r3, #0
 800374c:	4641      	mov	r1, r8
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	4413      	add	r3, r2
 8003754:	4a3a      	ldr	r2, [pc, #232]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 8003756:	4641      	mov	r1, r8
 8003758:	fba1 4502 	umull	r4, r5, r1, r2
 800375c:	442b      	add	r3, r5
 800375e:	461d      	mov	r5, r3
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	0fa2      	lsrs	r2, r4, #30
 800376a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800376e:	17ab      	asrs	r3, r5, #30
 8003770:	4613      	mov	r3, r2
 8003772:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	161b      	asrs	r3, r3, #24
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	141b      	asrs	r3, r3, #16
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	121b      	asrs	r3, r3, #8
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	b2db      	uxtb	r3, r3
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 800379a:	f107 0320 	add.w	r3, r7, #32
 800379e:	461a      	mov	r2, r3
 80037a0:	2104      	movs	r1, #4
 80037a2:	f44f 7074 	mov.w	r0, #976	@ 0x3d0
 80037a6:	f7ff fc83 	bl	80030b0 <mpu_write_mem>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <dmp_set_gyro_bias+0x186>
        return -1;
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
 80037b4:	e03c      	b.n	8003830 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 80037b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b8:	161b      	asrs	r3, r3, #24
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 80037c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c2:	141b      	asrs	r3, r3, #16
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 80037ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037cc:	121b      	asrs	r3, r3, #8
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 80037dc:	f107 0320 	add.w	r3, r7, #32
 80037e0:	461a      	mov	r2, r3
 80037e2:	2104      	movs	r1, #4
 80037e4:	f44f 7075 	mov.w	r0, #980	@ 0x3d4
 80037e8:	f7ff fc62 	bl	80030b0 <mpu_write_mem>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <dmp_set_gyro_bias+0x1c8>
        return -1;
 80037f2:	f04f 33ff 	mov.w	r3, #4294967295
 80037f6:	e01b      	b.n	8003830 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 80037f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fa:	161b      	asrs	r3, r3, #24
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 8003802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003804:	141b      	asrs	r3, r3, #16
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 800380c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380e:	121b      	asrs	r3, r3, #8
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 8003816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 800381e:	f107 0320 	add.w	r3, r7, #32
 8003822:	461a      	mov	r2, r3
 8003824:	2104      	movs	r1, #4
 8003826:	f44f 7076 	mov.w	r0, #984	@ 0x3d8
 800382a:	f7ff fc41 	bl	80030b0 <mpu_write_mem>
 800382e:	4603      	mov	r3, r0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3730      	adds	r7, #48	@ 0x30
 8003834:	46bd      	mov	sp, r7
 8003836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383a:	bf00      	nop
 800383c:	200002c4 	.word	0x200002c4
 8003840:	02cae309 	.word	0x02cae309

08003844 <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 8003844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003848:	b094      	sub	sp, #80	@ 0x50
 800384a:	af00      	add	r7, sp, #0
 800384c:	6278      	str	r0, [r7, #36]	@ 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 800384e:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fa3e 	bl	8001cd4 <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 8003858:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800385a:	b29b      	uxth	r3, r3
 800385c:	2200      	movs	r2, #0
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	61fa      	str	r2, [r7, #28]
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	69f9      	ldr	r1, [r7, #28]
 800386c:	03cb      	lsls	r3, r1, #15
 800386e:	69b9      	ldr	r1, [r7, #24]
 8003870:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 8003874:	69b9      	ldr	r1, [r7, #24]
 8003876:	03ca      	lsls	r2, r1, #15
 8003878:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    //__no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 800387c:	4b71      	ldr	r3, [pc, #452]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 800387e:	891b      	ldrh	r3, [r3, #8]
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003888:	4413      	add	r3, r2
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (dmp.orient & 4)
 800388e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 8003890:	891b      	ldrh	r3, [r3, #8]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 800389a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800389c:	425b      	negs	r3, r3
 800389e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 80038a0:	4b68      	ldr	r3, [pc, #416]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038a2:	891b      	ldrh	r3, [r3, #8]
 80038a4:	08db      	lsrs	r3, r3, #3
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b0:	4413      	add	r3, r2
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (dmp.orient & 0x20)
 80038b6:	4b63      	ldr	r3, [pc, #396]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038b8:	891b      	ldrh	r3, [r3, #8]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 80038c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c4:	425b      	negs	r3, r3
 80038c6:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 80038c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038ca:	891b      	ldrh	r3, [r3, #8]
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d8:	4413      	add	r3, r2
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	647b      	str	r3, [r7, #68]	@ 0x44
    if (dmp.orient & 0x100)
 80038de:	4b59      	ldr	r3, [pc, #356]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038e0:	891b      	ldrh	r3, [r3, #8]
 80038e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 80038ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ec:	425b      	negs	r3, r3
 80038ee:	647b      	str	r3, [r7, #68]	@ 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 80038f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038f2:	17da      	asrs	r2, r3, #31
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	617a      	str	r2, [r7, #20]
 80038f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038fe:	460a      	mov	r2, r1
 8003900:	fb02 f203 	mul.w	r2, r2, r3
 8003904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003906:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800390a:	4601      	mov	r1, r0
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003914:	6939      	ldr	r1, [r7, #16]
 8003916:	fba2 ab01 	umull	sl, fp, r2, r1
 800391a:	445b      	add	r3, fp
 800391c:	469b      	mov	fp, r3
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800392a:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 800392e:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8003932:	4613      	mov	r3, r2
 8003934:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 8003936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003938:	17da      	asrs	r2, r3, #31
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	60fa      	str	r2, [r7, #12]
 800393e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003940:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003944:	465a      	mov	r2, fp
 8003946:	fb02 f203 	mul.w	r2, r2, r3
 800394a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800394c:	4651      	mov	r1, sl
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003956:	4651      	mov	r1, sl
 8003958:	fba2 8901 	umull	r8, r9, r2, r1
 800395c:	444b      	add	r3, r9
 800395e:	4699      	mov	r9, r3
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800396c:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8003970:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003974:	4613      	mov	r3, r2
 8003976:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 8003978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800397a:	17da      	asrs	r2, r3, #31
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003982:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003986:	464a      	mov	r2, r9
 8003988:	fb02 f203 	mul.w	r2, r2, r3
 800398c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800398e:	4641      	mov	r1, r8
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003998:	4641      	mov	r1, r8
 800399a:	fba2 4501 	umull	r4, r5, r2, r1
 800399e:	442b      	add	r3, r5
 80039a0:	461d      	mov	r5, r3
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	0fa2      	lsrs	r2, r4, #30
 80039ac:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80039b0:	17ab      	asrs	r3, r5, #30
 80039b2:	4613      	mov	r3, r2
 80039b4:	647b      	str	r3, [r7, #68]	@ 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 80039b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b8:	161b      	asrs	r3, r3, #24
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 80039c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039c2:	141b      	asrs	r3, r3, #16
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 80039ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039cc:	121b      	asrs	r3, r3, #8
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 80039d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 80039dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039de:	161b      	asrs	r3, r3, #24
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 80039e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e8:	141b      	asrs	r3, r3, #16
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 80039f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f2:	121b      	asrs	r3, r3, #8
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 80039fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 8003a02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a04:	161b      	asrs	r3, r3, #24
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 8003a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a0e:	141b      	asrs	r3, r3, #16
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 8003a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a18:	121b      	asrs	r3, r3, #8
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 8003a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 8003a28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	210c      	movs	r1, #12
 8003a30:	f44f 7025 	mov.w	r0, #660	@ 0x294
 8003a34:	f7ff fb3c 	bl	80030b0 <mpu_write_mem>
 8003a38:	4603      	mov	r3, r0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3750      	adds	r7, #80	@ 0x50
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a44:	200002c4 	.word	0x200002c4

08003a48 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8003a52:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad0 <dmp_set_fifo_rate+0x88>)
 8003a54:	f107 0310 	add.w	r3, r7, #16
 8003a58:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2bc8      	cmp	r3, #200	@ 0xc8
 8003a62:	d902      	bls.n	8003a6a <dmp_set_fifo_rate+0x22>
        return -1;
 8003a64:	f04f 33ff 	mov.w	r3, #4294967295
 8003a68:	e02e      	b.n	8003ac8 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	22c8      	movs	r2, #200	@ 0xc8
 8003a6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8003a78:	8bfb      	ldrh	r3, [r7, #30]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8003a82:	8bfb      	ldrh	r3, [r7, #30]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8003a88:	f107 0308 	add.w	r3, r7, #8
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2102      	movs	r1, #2
 8003a90:	f240 2016 	movw	r0, #534	@ 0x216
 8003a94:	f7ff fb0c 	bl	80030b0 <mpu_write_mem>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <dmp_set_fifo_rate+0x5c>
        return -1;
 8003a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa2:	e011      	b.n	8003ac8 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	210c      	movs	r1, #12
 8003aac:	f640 20c1 	movw	r0, #2753	@ 0xac1
 8003ab0:	f7ff fafe 	bl	80030b0 <mpu_write_mem>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <dmp_set_fifo_rate+0x78>
        return -1;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	e003      	b.n	8003ac8 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8003ac0:	4a04      	ldr	r2, [pc, #16]	@ (8003ad4 <dmp_set_fifo_rate+0x8c>)
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	8193      	strh	r3, [r2, #12]
    return 0;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	08011780 	.word	0x08011780
 8003ad4:	200002c4 	.word	0x200002c4

08003ad8 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	460a      	mov	r2, r1
 8003ae2:	71fb      	strb	r3, [r7, #7]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <dmp_set_tap_thresh+0x22>
 8003af2:	88bb      	ldrh	r3, [r7, #4]
 8003af4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003af8:	d902      	bls.n	8003b00 <dmp_set_tap_thresh+0x28>
        return -1;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
 8003afe:	e10b      	b.n	8003d18 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8003b00:	88bb      	ldrh	r3, [r7, #4]
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b0a:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8003d20 <dmp_set_tap_thresh+0x248>
 8003b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b12:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 8003b16:	f107 030b 	add.w	r3, r7, #11
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fd fed2 	bl	80018c4 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8003b20:	7afb      	ldrb	r3, [r7, #11]
 8003b22:	3b02      	subs	r3, #2
 8003b24:	2b0e      	cmp	r3, #14
 8003b26:	d87d      	bhi.n	8003c24 <dmp_set_tap_thresh+0x14c>
 8003b28:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <dmp_set_tap_thresh+0x58>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b6d 	.word	0x08003b6d
 8003b34:	08003c25 	.word	0x08003c25
 8003b38:	08003b9b 	.word	0x08003b9b
 8003b3c:	08003c25 	.word	0x08003c25
 8003b40:	08003c25 	.word	0x08003c25
 8003b44:	08003c25 	.word	0x08003c25
 8003b48:	08003bc9 	.word	0x08003bc9
 8003b4c:	08003c25 	.word	0x08003c25
 8003b50:	08003c25 	.word	0x08003c25
 8003b54:	08003c25 	.word	0x08003c25
 8003b58:	08003c25 	.word	0x08003c25
 8003b5c:	08003c25 	.word	0x08003c25
 8003b60:	08003c25 	.word	0x08003c25
 8003b64:	08003c25 	.word	0x08003c25
 8003b68:	08003bf7 	.word	0x08003bf7
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8003b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b70:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8003d24 <dmp_set_tap_thresh+0x24c>
 8003b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b7c:	ee17 3a90 	vmov	r3, s15
 8003b80:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8003b82:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b86:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003d28 <dmp_set_tap_thresh+0x250>
 8003b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b92:	ee17 3a90 	vmov	r3, s15
 8003b96:	82bb      	strh	r3, [r7, #20]
        break;
 8003b98:	e047      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8003b9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b9e:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8003d2c <dmp_set_tap_thresh+0x254>
 8003ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003baa:	ee17 3a90 	vmov	r3, s15
 8003bae:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8003bb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bb4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8003d30 <dmp_set_tap_thresh+0x258>
 8003bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc0:	ee17 3a90 	vmov	r3, s15
 8003bc4:	82bb      	strh	r3, [r7, #20]
        break;
 8003bc6:	e030      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8003bc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bcc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003d34 <dmp_set_tap_thresh+0x25c>
 8003bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd8:	ee17 3a90 	vmov	r3, s15
 8003bdc:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8003bde:	edd7 7a04 	vldr	s15, [r7, #16]
 8003be2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003d38 <dmp_set_tap_thresh+0x260>
 8003be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bee:	ee17 3a90 	vmov	r3, s15
 8003bf2:	82bb      	strh	r3, [r7, #20]
        break;
 8003bf4:	e019      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8003bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bfa:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8003d3c <dmp_set_tap_thresh+0x264>
 8003bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c06:	ee17 3a90 	vmov	r3, s15
 8003c0a:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8003c0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c10:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003d40 <dmp_set_tap_thresh+0x268>
 8003c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c1c:	ee17 3a90 	vmov	r3, s15
 8003c20:	82bb      	strh	r3, [r7, #20]
        break;
 8003c22:	e002      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	e076      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8003c2a:	8afb      	ldrh	r3, [r7, #22]
 8003c2c:	0a1b      	lsrs	r3, r3, #8
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8003c34:	8afb      	ldrh	r3, [r7, #22]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8003c3a:	8abb      	ldrh	r3, [r7, #20]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8003c44:	8abb      	ldrh	r3, [r7, #20]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01c      	beq.n	8003c8e <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8003c54:	f107 030c 	add.w	r3, r7, #12
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	f44f 70ea 	mov.w	r0, #468	@ 0x1d4
 8003c60:	f7ff fa26 	bl	80030b0 <mpu_write_mem>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <dmp_set_tap_thresh+0x198>
            return -1;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	e053      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8003c70:	f107 030c 	add.w	r3, r7, #12
 8003c74:	3302      	adds	r3, #2
 8003c76:	461a      	mov	r2, r3
 8003c78:	2102      	movs	r1, #2
 8003c7a:	f44f 7092 	mov.w	r0, #292	@ 0x124
 8003c7e:	f7ff fa17 	bl	80030b0 <mpu_write_mem>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <dmp_set_tap_thresh+0x1b6>
            return -1;
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	e044      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01c      	beq.n	8003cd2 <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8003c98:	f107 030c 	add.w	r3, r7, #12
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	f44f 70ec 	mov.w	r0, #472	@ 0x1d8
 8003ca4:	f7ff fa04 	bl	80030b0 <mpu_write_mem>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <dmp_set_tap_thresh+0x1dc>
            return -1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb2:	e031      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8003cb4:	f107 030c 	add.w	r3, r7, #12
 8003cb8:	3302      	adds	r3, #2
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	f44f 7094 	mov.w	r0, #296	@ 0x128
 8003cc2:	f7ff f9f5 	bl	80030b0 <mpu_write_mem>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <dmp_set_tap_thresh+0x1fa>
            return -1;
 8003ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd0:	e022      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01c      	beq.n	8003d16 <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8003cdc:	f107 030c 	add.w	r3, r7, #12
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	f44f 70ee 	mov.w	r0, #476	@ 0x1dc
 8003ce8:	f7ff f9e2 	bl	80030b0 <mpu_write_mem>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <dmp_set_tap_thresh+0x220>
            return -1;
 8003cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf6:	e00f      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8003cf8:	f107 030c 	add.w	r3, r7, #12
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2102      	movs	r1, #2
 8003d02:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003d06:	f7ff f9d3 	bl	80030b0 <mpu_write_mem>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <dmp_set_tap_thresh+0x23e>
            return -1;
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
 8003d14:	e000      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	43480000 	.word	0x43480000
 8003d24:	46800000 	.word	0x46800000
 8003d28:	46400000 	.word	0x46400000
 8003d2c:	46000000 	.word	0x46000000
 8003d30:	45c00000 	.word	0x45c00000
 8003d34:	45800000 	.word	0x45800000
 8003d38:	45400000 	.word	0x45400000
 8003d3c:	45000000 	.word	0x45000000
 8003d40:	44c00000 	.word	0x44c00000

08003d44 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d004      	beq.n	8003d66 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d004      	beq.n	8003d7a <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	f043 030c 	orr.w	r3, r3, #12
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	f043 0303 	orr.w	r3, r3, #3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8003d8e:	f107 030f 	add.w	r3, r7, #15
 8003d92:	461a      	mov	r2, r3
 8003d94:	2101      	movs	r1, #1
 8003d96:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 8003d9a:	f7ff f989 	bl	80030b0 <mpu_write_mem>
 8003d9e:	4603      	mov	r3, r0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <dmp_set_tap_count+0x16>
        min_taps = 1;
 8003db8:	2301      	movs	r3, #1
 8003dba:	71fb      	strb	r3, [r7, #7]
 8003dbc:	e004      	b.n	8003dc8 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d901      	bls.n	8003dc8 <dmp_set_tap_count+0x20>
        min_taps = 4;
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8003dd0:	f107 030f 	add.w	r3, r7, #15
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	f240 104f 	movw	r0, #335	@ 0x14f
 8003ddc:	f7ff f968 	bl	80030b0 <mpu_write_mem>
 8003de0:	4603      	mov	r3, r0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	4a0c      	ldr	r2, [pc, #48]	@ (8003e2c <dmp_set_tap_time+0x40>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003e02:	89fb      	ldrh	r3, [r7, #14]
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003e0c:	89fb      	ldrh	r3, [r7, #14]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8003e12:	f107 030c 	add.w	r3, r7, #12
 8003e16:	461a      	mov	r2, r3
 8003e18:	2102      	movs	r1, #2
 8003e1a:	f44f 70ef 	mov.w	r0, #478	@ 0x1de
 8003e1e:	f7ff f947 	bl	80030b0 <mpu_write_mem>
 8003e22:	4603      	mov	r3, r0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	cccccccd 	.word	0xcccccccd

08003e30 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8003e70 <dmp_set_tap_time_multi+0x40>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003e46:	89fb      	ldrh	r3, [r7, #14]
 8003e48:	0a1b      	lsrs	r3, r3, #8
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 8003e56:	f107 030c 	add.w	r3, r7, #12
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	f44f 70ed 	mov.w	r0, #474	@ 0x1da
 8003e62:	f7ff f925 	bl	80030b0 <mpu_write_mem>
 8003e66:	4603      	mov	r3, r0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	cccccccd 	.word	0xcccccccd

08003e74 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a13      	ldr	r2, [pc, #76]	@ (8003ed0 <dmp_set_shake_reject_thresh+0x5c>)
 8003e84:	fb82 1203 	smull	r1, r2, r2, r3
 8003e88:	1192      	asrs	r2, r2, #6
 8003e8a:	17db      	asrs	r3, r3, #31
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	887a      	ldrh	r2, [r7, #2]
 8003e90:	fb02 f303 	mul.w	r3, r2, r3
 8003e94:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	161b      	asrs	r3, r3, #24
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	141b      	asrs	r3, r3, #16
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	121b      	asrs	r3, r3, #8
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8003eb4:	f107 0308 	add.w	r3, r7, #8
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2104      	movs	r1, #4
 8003ebc:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 8003ec0:	f7ff f8f6 	bl	80030b0 <mpu_write_mem>
 8003ec4:	4603      	mov	r3, r0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	10624dd3 	.word	0x10624dd3

08003ed4 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8003f14 <dmp_set_shake_reject_time+0x40>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	0a1b      	lsrs	r3, r3, #8
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 8003efa:	f107 030c 	add.w	r3, r7, #12
 8003efe:	461a      	mov	r2, r3
 8003f00:	2102      	movs	r1, #2
 8003f02:	f44f 70ad 	mov.w	r0, #346	@ 0x15a
 8003f06:	f7ff f8d3 	bl	80030b0 <mpu_write_mem>
 8003f0a:	4603      	mov	r3, r0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	cccccccd 	.word	0xcccccccd

08003f18 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	4a0c      	ldr	r2, [pc, #48]	@ (8003f58 <dmp_set_shake_reject_timeout+0x40>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	089b      	lsrs	r3, r3, #2
 8003f2c:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	0a1b      	lsrs	r3, r3, #8
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 8003f3e:	f107 030c 	add.w	r3, r7, #12
 8003f42:	461a      	mov	r2, r3
 8003f44:	2102      	movs	r1, #2
 8003f46:	f44f 70ac 	mov.w	r0, #344	@ 0x158
 8003f4a:	f7ff f8b1 	bl	80030b0 <mpu_write_mem>
 8003f4e:	4603      	mov	r3, r0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	cccccccd 	.word	0xcccccccd

08003f5c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8003f66:	2302      	movs	r3, #2
 8003f68:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 8003f6a:	23ca      	movs	r3, #202	@ 0xca
 8003f6c:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8003f6e:	23e3      	movs	r3, #227	@ 0xe3
 8003f70:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8003f72:	2309      	movs	r3, #9
 8003f74:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 8003f76:	f107 030c 	add.w	r3, r7, #12
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	2104      	movs	r1, #4
 8003f7e:	2068      	movs	r0, #104	@ 0x68
 8003f80:	f7ff f896 	bl	80030b0 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 8003f84:	23a3      	movs	r3, #163	@ 0xa3
 8003f86:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d006      	beq.n	8003fa0 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 8003f92:	23c0      	movs	r3, #192	@ 0xc0
 8003f94:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 8003f96:	23c8      	movs	r3, #200	@ 0xc8
 8003f98:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 8003f9a:	23c2      	movs	r3, #194	@ 0xc2
 8003f9c:	73fb      	strb	r3, [r7, #15]
 8003f9e:	e005      	b.n	8003fac <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 8003fa0:	23a3      	movs	r3, #163	@ 0xa3
 8003fa2:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 8003fa4:	23a3      	movs	r3, #163	@ 0xa3
 8003fa6:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 8003fa8:	23a3      	movs	r3, #163	@ 0xa3
 8003faa:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d006      	beq.n	8003fc4 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 8003fb6:	23c4      	movs	r3, #196	@ 0xc4
 8003fb8:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 8003fba:	23cc      	movs	r3, #204	@ 0xcc
 8003fbc:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 8003fbe:	23c6      	movs	r3, #198	@ 0xc6
 8003fc0:	74bb      	strb	r3, [r7, #18]
 8003fc2:	e005      	b.n	8003fd0 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8003fc4:	23a3      	movs	r3, #163	@ 0xa3
 8003fc6:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 8003fc8:	23a3      	movs	r3, #163	@ 0xa3
 8003fca:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8003fcc:	23a3      	movs	r3, #163	@ 0xa3
 8003fce:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 8003fd0:	23a3      	movs	r3, #163	@ 0xa3
 8003fd2:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8003fd4:	23a3      	movs	r3, #163	@ 0xa3
 8003fd6:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 8003fd8:	23a3      	movs	r3, #163	@ 0xa3
 8003fda:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8003fdc:	f107 030c 	add.w	r3, r7, #12
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	210a      	movs	r1, #10
 8003fe4:	f640 20a7 	movw	r0, #2727	@ 0xaa7
 8003fe8:	f7ff f862 	bl	80030b0 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	733b      	strb	r3, [r7, #12]
 8003ffa:	e001      	b.n	8004000 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8003ffc:	23d8      	movs	r3, #216	@ 0xd8
 8003ffe:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8004000:	f107 030c 	add.w	r3, r7, #12
 8004004:	461a      	mov	r2, r3
 8004006:	2101      	movs	r1, #1
 8004008:	f640 20b6 	movw	r0, #2742	@ 0xab6
 800400c:	f7ff f850 	bl	80030b0 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800401a:	2001      	movs	r0, #1
 800401c:	f000 f8c6 	bl	80041ac <dmp_enable_gyro_cal>
 8004020:	e002      	b.n	8004028 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 8004022:	2000      	movs	r0, #0
 8004024:	f000 f8c2 	bl	80041ac <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01d      	beq.n	800406e <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 800403c:	23b2      	movs	r3, #178	@ 0xb2
 800403e:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8004040:	238b      	movs	r3, #139	@ 0x8b
 8004042:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8004044:	23b6      	movs	r3, #182	@ 0xb6
 8004046:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8004048:	239b      	movs	r3, #155	@ 0x9b
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e007      	b.n	800405e <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 800404e:	23b0      	movs	r3, #176	@ 0xb0
 8004050:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 8004052:	2380      	movs	r3, #128	@ 0x80
 8004054:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 8004056:	23b4      	movs	r3, #180	@ 0xb4
 8004058:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 800405a:	2390      	movs	r3, #144	@ 0x90
 800405c:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800405e:	f107 030c 	add.w	r3, r7, #12
 8004062:	461a      	mov	r2, r3
 8004064:	2104      	movs	r1, #4
 8004066:	f640 20a2 	movw	r0, #2722	@ 0xaa2
 800406a:	f7ff f821 	bl	80030b0 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d025      	beq.n	80040c4 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8004078:	23f8      	movs	r3, #248	@ 0xf8
 800407a:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800407c:	f107 030c 	add.w	r3, r7, #12
 8004080:	461a      	mov	r2, r3
 8004082:	2101      	movs	r1, #1
 8004084:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 8004088:	f7ff f812 	bl	80030b0 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800408c:	21fa      	movs	r1, #250	@ 0xfa
 800408e:	2007      	movs	r0, #7
 8004090:	f7ff fd22 	bl	8003ad8 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8004094:	2007      	movs	r0, #7
 8004096:	f7ff fe55 	bl	8003d44 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800409a:	2001      	movs	r0, #1
 800409c:	f7ff fe84 	bl	8003da8 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 80040a0:	2064      	movs	r0, #100	@ 0x64
 80040a2:	f7ff fea3 	bl	8003dec <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 80040a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80040aa:	f7ff fec1 	bl	8003e30 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 80040ae:	21c8      	movs	r1, #200	@ 0xc8
 80040b0:	483c      	ldr	r0, [pc, #240]	@ (80041a4 <dmp_enable_feature+0x248>)
 80040b2:	f7ff fedf 	bl	8003e74 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 80040b6:	2028      	movs	r0, #40	@ 0x28
 80040b8:	f7ff ff0c 	bl	8003ed4 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 80040bc:	200a      	movs	r0, #10
 80040be:	f7ff ff2b 	bl	8003f18 <dmp_set_shake_reject_timeout>
 80040c2:	e009      	b.n	80040d8 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 80040c4:	23d8      	movs	r3, #216	@ 0xd8
 80040c6:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80040c8:	f107 030c 	add.w	r3, r7, #12
 80040cc:	461a      	mov	r2, r3
 80040ce:	2101      	movs	r1, #1
 80040d0:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 80040d4:	f7fe ffec 	bl	80030b0 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 80040d8:	88fb      	ldrh	r3, [r7, #6]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 80040e2:	23d9      	movs	r3, #217	@ 0xd9
 80040e4:	733b      	strb	r3, [r7, #12]
 80040e6:	e001      	b.n	80040ec <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 80040e8:	23d8      	movs	r3, #216	@ 0xd8
 80040ea:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 80040ec:	f107 030c 	add.w	r3, r7, #12
 80040f0:	461a      	mov	r2, r3
 80040f2:	2101      	movs	r1, #1
 80040f4:	f240 703d 	movw	r0, #1853	@ 0x73d
 80040f8:	f7fe ffda 	bl	80030b0 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 8004106:	2001      	movs	r0, #1
 8004108:	f000 f880 	bl	800420c <dmp_enable_lp_quat>
 800410c:	e002      	b.n	8004114 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 800410e:	2000      	movs	r0, #0
 8004110:	f000 f87c 	bl	800420c <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 800411e:	2001      	movs	r0, #1
 8004120:	f000 f89b 	bl	800425a <dmp_enable_6x_lp_quat>
 8004124:	e002      	b.n	800412c <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 8004126:	2000      	movs	r0, #0
 8004128:	f000 f897 	bl	800425a <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	f043 0308 	orr.w	r3, r3, #8
 8004132:	b29a      	uxth	r2, r3
 8004134:	4b1c      	ldr	r3, [pc, #112]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004136:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8004138:	f7fd f9c8 	bl	80014cc <mpu_reset_fifo>

    dmp.packet_length = 0;
 800413c:	4b1a      	ldr	r3, [pc, #104]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800413e:	2200      	movs	r2, #0
 8004140:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8004142:	88fb      	ldrh	r3, [r7, #6]
 8004144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 800414c:	4b16      	ldr	r3, [pc, #88]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800414e:	7b9b      	ldrb	r3, [r3, #14]
 8004150:	3306      	adds	r3, #6
 8004152:	b2da      	uxtb	r2, r3
 8004154:	4b14      	ldr	r3, [pc, #80]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004156:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8004162:	4b11      	ldr	r3, [pc, #68]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004164:	7b9b      	ldrb	r3, [r3, #14]
 8004166:	3306      	adds	r3, #6
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4b0f      	ldr	r3, [pc, #60]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800416c:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	f003 0314 	and.w	r3, r3, #20
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8004178:	4b0b      	ldr	r3, [pc, #44]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800417a:	7b9b      	ldrb	r3, [r3, #14]
 800417c:	3310      	adds	r3, #16
 800417e:	b2da      	uxtb	r2, r3
 8004180:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004182:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 800418e:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004190:	7b9b      	ldrb	r3, [r3, #14]
 8004192:	3304      	adds	r3, #4
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4b04      	ldr	r3, [pc, #16]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004198:	739a      	strb	r2, [r3, #14]

    return 0;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	02cae309 	.word	0x02cae309
 80041a8:	200002c4 	.word	0x200002c4

080041ac <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00f      	beq.n	80041dc <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 80041bc:	4a11      	ldr	r2, [pc, #68]	@ (8004204 <dmp_enable_gyro_cal+0x58>)
 80041be:	f107 0314 	add.w	r3, r7, #20
 80041c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80041c4:	c303      	stmia	r3!, {r0, r1}
 80041c6:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80041c8:	f107 0314 	add.w	r3, r7, #20
 80041cc:	461a      	mov	r2, r3
 80041ce:	2109      	movs	r1, #9
 80041d0:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 80041d4:	f7fe ff6c 	bl	80030b0 <mpu_write_mem>
 80041d8:	4603      	mov	r3, r0
 80041da:	e00e      	b.n	80041fa <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80041dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004208 <dmp_enable_gyro_cal+0x5c>)
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80041e4:	c303      	stmia	r3!, {r0, r1}
 80041e6:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80041e8:	f107 0308 	add.w	r3, r7, #8
 80041ec:	461a      	mov	r2, r3
 80041ee:	2109      	movs	r1, #9
 80041f0:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 80041f4:	f7fe ff5c 	bl	80030b0 <mpu_write_mem>
 80041f8:	4603      	mov	r3, r0
    }
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	0801178c 	.word	0x0801178c
 8004208:	08011798 	.word	0x08011798

0800420c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 800421c:	23c0      	movs	r3, #192	@ 0xc0
 800421e:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8004220:	23c2      	movs	r3, #194	@ 0xc2
 8004222:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8004224:	23c4      	movs	r3, #196	@ 0xc4
 8004226:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8004228:	23c6      	movs	r3, #198	@ 0xc6
 800422a:	73fb      	strb	r3, [r7, #15]
 800422c:	e006      	b.n	800423c <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 800422e:	f107 030c 	add.w	r3, r7, #12
 8004232:	2204      	movs	r2, #4
 8004234:	218b      	movs	r1, #139	@ 0x8b
 8004236:	4618      	mov	r0, r3
 8004238:	f00a fd5e 	bl	800ecf8 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	461a      	mov	r2, r3
 8004242:	2104      	movs	r1, #4
 8004244:	f640 2098 	movw	r0, #2712	@ 0xa98
 8004248:	f7fe ff32 	bl	80030b0 <mpu_write_mem>

    return mpu_reset_fifo();
 800424c:	f7fd f93e 	bl	80014cc <mpu_reset_fifo>
 8004250:	4603      	mov	r3, r0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	4603      	mov	r3, r0
 8004262:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 800426a:	2320      	movs	r3, #32
 800426c:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 800426e:	2328      	movs	r3, #40	@ 0x28
 8004270:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8004272:	2330      	movs	r3, #48	@ 0x30
 8004274:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 8004276:	2338      	movs	r3, #56	@ 0x38
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	e006      	b.n	800428a <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 800427c:	f107 030c 	add.w	r3, r7, #12
 8004280:	2204      	movs	r2, #4
 8004282:	21a3      	movs	r1, #163	@ 0xa3
 8004284:	4618      	mov	r0, r3
 8004286:	f00a fd37 	bl	800ecf8 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 800428a:	f107 030c 	add.w	r3, r7, #12
 800428e:	461a      	mov	r2, r3
 8004290:	2104      	movs	r1, #4
 8004292:	f640 209e 	movw	r0, #2718	@ 0xa9e
 8004296:	f7fe ff0b 	bl	80030b0 <mpu_write_mem>

    return mpu_reset_fifo();
 800429a:	f7fd f917 	bl	80014cc <mpu_reset_fifo>
 800429e:	4603      	mov	r3, r0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3303      	adds	r3, #3
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042ba:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3303      	adds	r3, #3
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042c6:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3301      	adds	r3, #1
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d012      	beq.n	80042fc <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 80042d6:	7bbb      	ldrb	r3, [r7, #14]
 80042d8:	08db      	lsrs	r3, r3, #3
 80042da:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 80042dc:	7bbb      	ldrb	r3, [r7, #14]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	3301      	adds	r3, #1
 80042e6:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 80042e8:	4b10      	ldr	r3, [pc, #64]	@ (800432c <decode_gesture+0x84>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 80042f0:	4b0e      	ldr	r3, [pc, #56]	@ (800432c <decode_gesture+0x84>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	7b39      	ldrb	r1, [r7, #12]
 80042f6:	7b7a      	ldrb	r2, [r7, #13]
 80042f8:	4610      	mov	r0, r2
 80042fa:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3301      	adds	r3, #1
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 800430a:	4b08      	ldr	r3, [pc, #32]	@ (800432c <decode_gesture+0x84>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d006      	beq.n	8004320 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8004312:	4b06      	ldr	r3, [pc, #24]	@ (800432c <decode_gesture+0x84>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	7bfa      	ldrb	r2, [r7, #15]
 8004318:	0992      	lsrs	r2, r2, #6
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	4610      	mov	r0, r2
 800431e:	4798      	blx	r3
    }

    return 0;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	200002c4 	.word	0x200002c4

08004330 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b092      	sub	sp, #72	@ 0x48
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    sensors[0] = 0;
 8004344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004346:	2200      	movs	r2, #0
 8004348:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800434a:	4bb1      	ldr	r3, [pc, #708]	@ (8004610 <dmp_read_fifo+0x2e0>)
 800434c:	7b9b      	ldrb	r3, [r3, #14]
 800434e:	4618      	mov	r0, r3
 8004350:	f107 0320 	add.w	r3, r7, #32
 8004354:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004356:	4619      	mov	r1, r3
 8004358:	f7fd fdf8 	bl	8001f4c <mpu_read_fifo_stream>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <dmp_read_fifo+0x38>
        return -1;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
 8004366:	e14e      	b.n	8004606 <dmp_read_fifo+0x2d6>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8004368:	4ba9      	ldr	r3, [pc, #676]	@ (8004610 <dmp_read_fifo+0x2e0>)
 800436a:	895b      	ldrh	r3, [r3, #10]
 800436c:	f003 0314 	and.w	r3, r3, #20
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 808a 	beq.w	800448a <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004376:	f897 3020 	ldrb.w	r3, [r7, #32]
 800437a:	061a      	lsls	r2, r3, #24
 800437c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004380:	041b      	lsls	r3, r3, #16
 8004382:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8004384:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004388:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800438a:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800438c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004390:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004396:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800439a:	061a      	lsls	r2, r3, #24
 800439c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80043a0:	041b      	lsls	r3, r3, #16
 80043a2:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80043a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80043a8:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80043aa:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80043ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043b0:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80043b6:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80043b8:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80043be:	061a      	lsls	r2, r3, #24
 80043c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80043c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80043cc:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043ce:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80043d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043d4:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80043da:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043dc:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80043de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80043e2:	061a      	lsls	r2, r3, #24
 80043e4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80043e8:	041b      	lsls	r3, r3, #16
 80043ea:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80043ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80043f0:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80043f2:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80043f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80043f8:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80043fe:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004400:	601a      	str	r2, [r3, #0]
        ii += 16;
 8004402:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004406:	3310      	adds	r3, #16
 8004408:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	141b      	asrs	r3, r3, #16
 8004412:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3304      	adds	r3, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	141b      	asrs	r3, r3, #16
 800441c:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3308      	adds	r3, #8
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	141b      	asrs	r3, r3, #16
 8004426:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	330c      	adds	r3, #12
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	141b      	asrs	r3, r3, #16
 8004430:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	fb03 f202 	mul.w	r2, r3, r2
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	6979      	ldr	r1, [r7, #20]
 800443e:	fb01 f303 	mul.w	r3, r1, r3
 8004442:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	69b9      	ldr	r1, [r7, #24]
 8004448:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800444c:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	69f9      	ldr	r1, [r7, #28]
 8004452:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004456:	4413      	add	r3, r2
 8004458:	643b      	str	r3, [r7, #64]	@ 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 800445a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800445c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004460:	db03      	blt.n	800446a <dmp_read_fifo+0x13a>
 8004462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004464:	f1b3 5f88 	cmp.w	r3, #285212672	@ 0x11000000
 8004468:	dd07      	ble.n	800447a <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 800446a:	f7fd f82f 	bl	80014cc <mpu_reset_fifo>
            sensors[0] = 0;
 800446e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004470:	2200      	movs	r2, #0
 8004472:	801a      	strh	r2, [r3, #0]
            return -1;
 8004474:	f04f 33ff 	mov.w	r3, #4294967295
 8004478:	e0c5      	b.n	8004606 <dmp_read_fifo+0x2d6>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 800447a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800447c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004484:	b21a      	sxth	r2, r3
 8004486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004488:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800448a:	4b61      	ldr	r3, [pc, #388]	@ (8004610 <dmp_read_fifo+0x2e0>)
 800448c:	895b      	ldrh	r3, [r3, #10]
 800448e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d04f      	beq.n	8004536 <dmp_read_fifo+0x206>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004496:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800449a:	3348      	adds	r3, #72	@ 0x48
 800449c:	443b      	add	r3, r7
 800449e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044a2:	b21b      	sxth	r3, r3
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	b21a      	sxth	r2, r3
 80044a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044ac:	3301      	adds	r3, #1
 80044ae:	3348      	adds	r3, #72	@ 0x48
 80044b0:	443b      	add	r3, r7
 80044b2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044b6:	b21b      	sxth	r3, r3
 80044b8:	4313      	orrs	r3, r2
 80044ba:	b21a      	sxth	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80044c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044c4:	3302      	adds	r3, #2
 80044c6:	3348      	adds	r3, #72	@ 0x48
 80044c8:	443b      	add	r3, r7
 80044ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044ce:	b21b      	sxth	r3, r3
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	b219      	sxth	r1, r3
 80044d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044d8:	3303      	adds	r3, #3
 80044da:	3348      	adds	r3, #72	@ 0x48
 80044dc:	443b      	add	r3, r7
 80044de:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044e2:	b21a      	sxth	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	3302      	adds	r3, #2
 80044e8:	430a      	orrs	r2, r1
 80044ea:	b212      	sxth	r2, r2
 80044ec:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80044ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044f2:	3304      	adds	r3, #4
 80044f4:	3348      	adds	r3, #72	@ 0x48
 80044f6:	443b      	add	r3, r7
 80044f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044fc:	b21b      	sxth	r3, r3
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	b219      	sxth	r1, r3
 8004502:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004506:	3305      	adds	r3, #5
 8004508:	3348      	adds	r3, #72	@ 0x48
 800450a:	443b      	add	r3, r7
 800450c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004510:	b21a      	sxth	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3304      	adds	r3, #4
 8004516:	430a      	orrs	r2, r1
 8004518:	b212      	sxth	r2, r2
 800451a:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800451c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004520:	3306      	adds	r3, #6
 8004522:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8004526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800452c:	f043 0308 	orr.w	r3, r3, #8
 8004530:	b21a      	sxth	r2, r3
 8004532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004534:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004536:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <dmp_read_fifo+0x2e0>)
 8004538:	895b      	ldrh	r3, [r3, #10]
 800453a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800453e:	2b00      	cmp	r3, #0
 8004540:	d04f      	beq.n	80045e2 <dmp_read_fifo+0x2b2>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004542:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004546:	3348      	adds	r3, #72	@ 0x48
 8004548:	443b      	add	r3, r7
 800454a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800454e:	b21b      	sxth	r3, r3
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	b21a      	sxth	r2, r3
 8004554:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004558:	3301      	adds	r3, #1
 800455a:	3348      	adds	r3, #72	@ 0x48
 800455c:	443b      	add	r3, r7
 800455e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004562:	b21b      	sxth	r3, r3
 8004564:	4313      	orrs	r3, r2
 8004566:	b21a      	sxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800456c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004570:	3302      	adds	r3, #2
 8004572:	3348      	adds	r3, #72	@ 0x48
 8004574:	443b      	add	r3, r7
 8004576:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800457a:	b21b      	sxth	r3, r3
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	b219      	sxth	r1, r3
 8004580:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004584:	3303      	adds	r3, #3
 8004586:	3348      	adds	r3, #72	@ 0x48
 8004588:	443b      	add	r3, r7
 800458a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800458e:	b21a      	sxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3302      	adds	r3, #2
 8004594:	430a      	orrs	r2, r1
 8004596:	b212      	sxth	r2, r2
 8004598:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800459a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800459e:	3304      	adds	r3, #4
 80045a0:	3348      	adds	r3, #72	@ 0x48
 80045a2:	443b      	add	r3, r7
 80045a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045a8:	b21b      	sxth	r3, r3
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	b219      	sxth	r1, r3
 80045ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045b2:	3305      	adds	r3, #5
 80045b4:	3348      	adds	r3, #72	@ 0x48
 80045b6:	443b      	add	r3, r7
 80045b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045bc:	b21a      	sxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3304      	adds	r3, #4
 80045c2:	430a      	orrs	r2, r1
 80045c4:	b212      	sxth	r2, r2
 80045c6:	801a      	strh	r2, [r3, #0]
        ii += 6;
 80045c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045cc:	3306      	adds	r3, #6
 80045ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_GYRO;
 80045d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045d8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80045dc:	b21a      	sxth	r2, r3
 80045de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045e0:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80045e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <dmp_read_fifo+0x2e0>)
 80045e4:	895b      	ldrh	r3, [r3, #10]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <dmp_read_fifo+0x2ce>
        decode_gesture(fifo_data + ii);
 80045ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045f2:	f107 0220 	add.w	r2, r7, #32
 80045f6:	4413      	add	r3, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fe55 	bl	80042a8 <decode_gesture>

    myget_ms(timestamp);
 80045fe:	6838      	ldr	r0, [r7, #0]
 8004600:	f7fe ff10 	bl	8003424 <myget_ms>
    return 0;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3748      	adds	r7, #72	@ 0x48
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	200002c4 	.word	0x200002c4

08004614 <run_self_test>:
#define DEFAULT_MPU_HZ (100)

#define q30 1073741824.0f

static int run_self_test(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	@ 0x28
 8004618:	af00      	add	r7, sp, #0
    int result;
    long gyro[3], accel[3];

    result = mpu_run_self_test(gyro, accel);
 800461a:	f107 020c 	add.w	r2, r7, #12
 800461e:	f107 0318 	add.w	r3, r7, #24
 8004622:	4611      	mov	r1, r2
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe fc6f 	bl	8002f08 <mpu_run_self_test>
 800462a:	6278      	str	r0, [r7, #36]	@ 0x24
    if (result == 0x3) {
 800462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462e:	2b03      	cmp	r3, #3
 8004630:	d150      	bne.n	80046d4 <run_self_test+0xc0>
        /* Test passed. We can trust the gyro data here, so let's push it down
         * to the DMP.
         */
        float sens;
        unsigned short accel_sens;
        mpu_get_gyro_sens(&sens);
 8004632:	f107 0308 	add.w	r3, r7, #8
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fb14 	bl	8001c64 <mpu_get_gyro_sens>
        gyro[0] = (long)(gyro[0] * sens);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004646:	edd7 7a02 	vldr	s15, [r7, #8]
 800464a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004652:	ee17 3a90 	vmov	r3, s15
 8004656:	61bb      	str	r3, [r7, #24]
        gyro[1] = (long)(gyro[1] * sens);
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004662:	edd7 7a02 	vldr	s15, [r7, #8]
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800466e:	ee17 3a90 	vmov	r3, s15
 8004672:	61fb      	str	r3, [r7, #28]
        gyro[2] = (long)(gyro[2] * sens);
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800467e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800468a:	ee17 3a90 	vmov	r3, s15
 800468e:	623b      	str	r3, [r7, #32]
        dmp_set_gyro_bias(gyro);
 8004690:	f107 0318 	add.w	r3, r7, #24
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe ffcb 	bl	8003630 <dmp_set_gyro_bias>
        mpu_get_accel_sens(&accel_sens);
 800469a:	1dbb      	adds	r3, r7, #6
 800469c:	4618      	mov	r0, r3
 800469e:	f7fd fb19 	bl	8001cd4 <mpu_get_accel_sens>
        accel[0] *= accel_sens;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	88fa      	ldrh	r2, [r7, #6]
 80046a6:	fb02 f303 	mul.w	r3, r2, r3
 80046aa:	60fb      	str	r3, [r7, #12]
        accel[1] *= accel_sens;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	88fa      	ldrh	r2, [r7, #6]
 80046b0:	fb02 f303 	mul.w	r3, r2, r3
 80046b4:	613b      	str	r3, [r7, #16]
        accel[2] *= accel_sens;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	88fa      	ldrh	r2, [r7, #6]
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	617b      	str	r3, [r7, #20]
        dmp_set_accel_bias(accel);
 80046c0:	f107 030c 	add.w	r3, r7, #12
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff f8bd 	bl	8003844 <dmp_set_accel_bias>
		printf("setting bias succesfully ......\r\n");
 80046ca:	4805      	ldr	r0, [pc, #20]	@ (80046e0 <run_self_test+0xcc>)
 80046cc:	f00a fa24 	bl	800eb18 <puts>
    }else
		{
			return -1;
		}
		return 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e001      	b.n	80046d8 <run_self_test+0xc4>
			return -1;
 80046d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3728      	adds	r7, #40	@ 0x28
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	080117bc 	.word	0x080117bc

080046e4 <inv_row_2_scale>:

static signed char gyro_orientation[9] = {-1, 0, 0,
                                           0,-1, 0,
                                           0, 0, 1};
static  unsigned short inv_row_2_scale(const signed char *row)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f993 3000 	ldrsb.w	r3, [r3]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	dd02      	ble.n	80046fc <inv_row_2_scale+0x18>
        b = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	81fb      	strh	r3, [r7, #14]
 80046fa:	e02d      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f993 3000 	ldrsb.w	r3, [r3]
 8004702:	2b00      	cmp	r3, #0
 8004704:	da02      	bge.n	800470c <inv_row_2_scale+0x28>
        b = 4;
 8004706:	2304      	movs	r3, #4
 8004708:	81fb      	strh	r3, [r7, #14]
 800470a:	e025      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3301      	adds	r3, #1
 8004710:	f993 3000 	ldrsb.w	r3, [r3]
 8004714:	2b00      	cmp	r3, #0
 8004716:	dd02      	ble.n	800471e <inv_row_2_scale+0x3a>
        b = 1;
 8004718:	2301      	movs	r3, #1
 800471a:	81fb      	strh	r3, [r7, #14]
 800471c:	e01c      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3301      	adds	r3, #1
 8004722:	f993 3000 	ldrsb.w	r3, [r3]
 8004726:	2b00      	cmp	r3, #0
 8004728:	da02      	bge.n	8004730 <inv_row_2_scale+0x4c>
        b = 5;
 800472a:	2305      	movs	r3, #5
 800472c:	81fb      	strh	r3, [r7, #14]
 800472e:	e013      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3302      	adds	r3, #2
 8004734:	f993 3000 	ldrsb.w	r3, [r3]
 8004738:	2b00      	cmp	r3, #0
 800473a:	dd02      	ble.n	8004742 <inv_row_2_scale+0x5e>
        b = 2;
 800473c:	2302      	movs	r3, #2
 800473e:	81fb      	strh	r3, [r7, #14]
 8004740:	e00a      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3302      	adds	r3, #2
 8004746:	f993 3000 	ldrsb.w	r3, [r3]
 800474a:	2b00      	cmp	r3, #0
 800474c:	da02      	bge.n	8004754 <inv_row_2_scale+0x70>
        b = 6;
 800474e:	2306      	movs	r3, #6
 8004750:	81fb      	strh	r3, [r7, #14]
 8004752:	e001      	b.n	8004758 <inv_row_2_scale+0x74>
    else
        b = 7;      // error
 8004754:	2307      	movs	r3, #7
 8004756:	81fb      	strh	r3, [r7, #14]
    return b;
 8004758:	89fb      	ldrh	r3, [r7, #14]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <inv_orientation_matrix_to_scalar>:


static  unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b084      	sub	sp, #16
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
    unsigned short scalar;
    scalar = inv_row_2_scale(mtx);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ffb8 	bl	80046e4 <inv_row_2_scale>
 8004774:	4603      	mov	r3, r0
 8004776:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3303      	adds	r3, #3
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff ffb1 	bl	80046e4 <inv_row_2_scale>
 8004782:	4603      	mov	r3, r0
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	b21a      	sxth	r2, r3
 8004788:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800478c:	4313      	orrs	r3, r2
 800478e:	b21b      	sxth	r3, r3
 8004790:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3306      	adds	r3, #6
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff ffa4 	bl	80046e4 <inv_row_2_scale>
 800479c:	4603      	mov	r3, r0
 800479e:	019b      	lsls	r3, r3, #6
 80047a0:	b21a      	sxth	r2, r3
 80047a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	b21b      	sxth	r3, r3
 80047aa:	81fb      	strh	r3, [r7, #14]


    return scalar;
 80047ac:	89fb      	ldrh	r3, [r7, #14]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <MPU6050_DMP_Init>:

int MPU6050_DMP_Init(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
	int result;
	//struct int_param_s int_param;
	result = mpu_init();
 80047be:	f7fc fcb7 	bl	8001130 <mpu_init>
 80047c2:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <MPU6050_DMP_Init+0x18>
	{
		 return -1;
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
 80047ce:	e05d      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 80047d0:	2078      	movs	r0, #120	@ 0x78
 80047d2:	f7fd fb21 	bl	8001e18 <mpu_set_sensors>
 80047d6:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <MPU6050_DMP_Init+0x2c>
	{
		 return -2;
 80047de:	f06f 0301 	mvn.w	r3, #1
 80047e2:	e053      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 80047e4:	2078      	movs	r0, #120	@ 0x78
 80047e6:	f7fd fac5 	bl	8001d74 <mpu_configure_fifo>
 80047ea:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <MPU6050_DMP_Init+0x40>
	{
		 return -3;
 80047f2:	f06f 0302 	mvn.w	r3, #2
 80047f6:	e049      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_set_sample_rate(DEFAULT_MPU_HZ);
 80047f8:	2064      	movs	r0, #100	@ 0x64
 80047fa:	f7fd f9c1 	bl	8001b80 <mpu_set_sample_rate>
 80047fe:	6078      	str	r0, [r7, #4]
	if(result != 0)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <MPU6050_DMP_Init+0x54>
	{
		 return -4;
 8004806:	f06f 0303 	mvn.w	r3, #3
 800480a:	e03f      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	
	result = dmp_load_motion_driver_firmware();
 800480c:	f7fe fe14 	bl	8003438 <dmp_load_motion_driver_firmware>
 8004810:	6078      	str	r0, [r7, #4]
	if(result != 0)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <MPU6050_DMP_Init+0x66>
	{
		 return -5;
 8004818:	f06f 0304 	mvn.w	r3, #4
 800481c:	e036      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation));
 800481e:	481d      	ldr	r0, [pc, #116]	@ (8004894 <MPU6050_DMP_Init+0xdc>)
 8004820:	f7ff ffa1 	bl	8004766 <inv_orientation_matrix_to_scalar>
 8004824:	4603      	mov	r3, r0
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fe16 	bl	8003458 <dmp_set_orientation>
 800482c:	6078      	str	r0, [r7, #4]
	if(result != 0)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <MPU6050_DMP_Init+0x82>
	{
		 return -6;
 8004834:	f06f 0305 	mvn.w	r3, #5
 8004838:	e028      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 800483a:	f240 1073 	movw	r0, #371	@ 0x173
 800483e:	f7ff fb8d 	bl	8003f5c <dmp_enable_feature>
 8004842:	6078      	str	r0, [r7, #4]
	        DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
	        DMP_FEATURE_GYRO_CAL);
	if(result != 0)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <MPU6050_DMP_Init+0x98>
	{
		 return -7;
 800484a:	f06f 0306 	mvn.w	r3, #6
 800484e:	e01d      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = dmp_set_fifo_rate(DEFAULT_MPU_HZ);
 8004850:	2064      	movs	r0, #100	@ 0x64
 8004852:	f7ff f8f9 	bl	8003a48 <dmp_set_fifo_rate>
 8004856:	6078      	str	r0, [r7, #4]
	if(result != 0)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <MPU6050_DMP_Init+0xac>
	{
		 return -8;
 800485e:	f06f 0307 	mvn.w	r3, #7
 8004862:	e013      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = run_self_test();
 8004864:	f7ff fed6 	bl	8004614 <run_self_test>
 8004868:	6078      	str	r0, [r7, #4]
	if(result != 0)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <MPU6050_DMP_Init+0xbe>
	{
		 return -9;
 8004870:	f06f 0308 	mvn.w	r3, #8
 8004874:	e00a      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_set_dmp_state(1);
 8004876:	2001      	movs	r0, #1
 8004878:	f7fe fd6e 	bl	8003358 <mpu_set_dmp_state>
 800487c:	6078      	str	r0, [r7, #4]
	if(result != 0)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <MPU6050_DMP_Init+0xd2>
	{
		 return -10;
 8004884:	f06f 0309 	mvn.w	r3, #9
 8004888:	e000      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	return 0;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	2000002c 	.word	0x2000002c

08004898 <MPU6050_DMP_Get_Data>:

int MPU6050_DMP_Get_Data(float *Pitch,float *Roll,float *Yaw)
{
 8004898:	b5b0      	push	{r4, r5, r7, lr}
 800489a:	b094      	sub	sp, #80	@ 0x50
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
	float q0 = 0.0f;
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	647b      	str	r3, [r7, #68]	@ 0x44
	float q1 = 0.0f;
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	643b      	str	r3, [r7, #64]	@ 0x40
	float q2 = 0.0f;
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float q3 = 0.0f;
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	short accel[3]; 
	long quat[4];
  unsigned long timestamp;
	short sensors;
	unsigned char more;
	if(dmp_read_fifo(gyro,accel,quat,&timestamp,&sensors,&more))
 80048bc:	f107 0414 	add.w	r4, r7, #20
 80048c0:	f107 0218 	add.w	r2, r7, #24
 80048c4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80048c8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80048cc:	f107 0311 	add.w	r3, r7, #17
 80048d0:	9301      	str	r3, [sp, #4]
 80048d2:	f107 0312 	add.w	r3, r7, #18
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	4623      	mov	r3, r4
 80048da:	f7ff fd29 	bl	8004330 <dmp_read_fifo>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <MPU6050_DMP_Get_Data+0x52>
	{
		return -1;
 80048e4:	f04f 33ff 	mov.w	r3, #4294967295
 80048e8:	e0f6      	b.n	8004ad8 <MPU6050_DMP_Get_Data+0x240>
	}
	if(sensors & INV_WXYZ_QUAT)
 80048ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80ee 	beq.w	8004ad6 <MPU6050_DMP_Get_Data+0x23e>
	{
		q0=quat[0] / q30;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	ee07 3a90 	vmov	s15, r3
 8004900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004904:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8004ae8 <MPU6050_DMP_Get_Data+0x250>
 8004908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800490c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		q1=quat[1] / q30;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800491a:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8004ae8 <MPU6050_DMP_Get_Data+0x250>
 800491e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004922:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q2=quat[2] / q30;
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	ee07 3a90 	vmov	s15, r3
 800492c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004930:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8004ae8 <MPU6050_DMP_Get_Data+0x250>
 8004934:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004938:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q3=quat[3] / q30;
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004946:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8004ae8 <MPU6050_DMP_Get_Data+0x250>
 800494a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800494e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		
		*Pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3; 	
 8004952:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004956:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800495a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800495e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004966:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800496a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800496e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800497a:	ee17 0a90 	vmov	r0, s15
 800497e:	f7fb fde3 	bl	8000548 <__aeabi_f2d>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	ec43 2b10 	vmov	d0, r2, r3
 800498a:	f00c f847 	bl	8010a1c <asin>
 800498e:	ec51 0b10 	vmov	r0, r1, d0
 8004992:	a353      	add	r3, pc, #332	@ (adr r3, 8004ae0 <MPU6050_DMP_Get_Data+0x248>)
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f7fb fe2e 	bl	80005f8 <__aeabi_dmul>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	f7fc f920 	bl	8000be8 <__aeabi_d2f>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	601a      	str	r2, [r3, #0]
		*Roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; // roll
 80049ae:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80049b2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80049b6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80049ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049be:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80049c2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80049c6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80049ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d2:	ee17 0a90 	vmov	r0, s15
 80049d6:	f7fb fdb7 	bl	8000548 <__aeabi_f2d>
 80049da:	4604      	mov	r4, r0
 80049dc:	460d      	mov	r5, r1
 80049de:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80049e2:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80049e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049ea:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80049ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049f2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80049f6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80049fa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80049fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a0e:	ee17 0a90 	vmov	r0, s15
 8004a12:	f7fb fd99 	bl	8000548 <__aeabi_f2d>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	ec43 2b11 	vmov	d1, r2, r3
 8004a1e:	ec45 4b10 	vmov	d0, r4, r5
 8004a22:	f00c f82f 	bl	8010a84 <atan2>
 8004a26:	ec51 0b10 	vmov	r0, r1, d0
 8004a2a:	a32d      	add	r3, pc, #180	@ (adr r3, 8004ae0 <MPU6050_DMP_Get_Data+0x248>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f7fb fde2 	bl	80005f8 <__aeabi_dmul>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f7fc f8d4 	bl	8000be8 <__aeabi_d2f>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	601a      	str	r2, [r3, #0]
		*Yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;	//yaw
 8004a46:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004a4a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a52:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8004a56:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004a66:	ee17 0a90 	vmov	r0, s15
 8004a6a:	f7fb fd6d 	bl	8000548 <__aeabi_f2d>
 8004a6e:	4604      	mov	r4, r0
 8004a70:	460d      	mov	r5, r1
 8004a72:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004a76:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004a7a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004a7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a86:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004a8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a92:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004a96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a9e:	ee17 0a90 	vmov	r0, s15
 8004aa2:	f7fb fd51 	bl	8000548 <__aeabi_f2d>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	ec43 2b11 	vmov	d1, r2, r3
 8004aae:	ec45 4b10 	vmov	d0, r4, r5
 8004ab2:	f00b ffe7 	bl	8010a84 <atan2>
 8004ab6:	ec51 0b10 	vmov	r0, r1, d0
 8004aba:	a309      	add	r3, pc, #36	@ (adr r3, 8004ae0 <MPU6050_DMP_Get_Data+0x248>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f7fb fd9a 	bl	80005f8 <__aeabi_dmul>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4619      	mov	r1, r3
 8004acc:	f7fc f88c 	bl	8000be8 <__aeabi_d2f>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	601a      	str	r2, [r3, #0]
	}
	return 0;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3748      	adds	r7, #72	@ 0x48
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae0:	66666666 	.word	0x66666666
 8004ae4:	404ca666 	.word	0x404ca666
 8004ae8:	4e800000 	.word	0x4e800000

08004aec <OLED_I2C_Init>:
// #define OLED_W_SCL(x) HAL_GPIO_WritePin(GPIOB, SCL_Pin, (GPIO_PinState)(x))
// #define OLED_W_SDA(x) HAL_GPIO_WritePin(GPIOB, SDA_Pin, (GPIO_PinState)(x))

/*引脚初始化*/
void OLED_I2C_Init(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
	// 使用硬件I2C1，不需要手动初始化GPIO
	// 在CubeMX中已经配置好了I2C1
}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <OLED_WriteCommand>:
 * @brief  OLED写命令
 * @param  Command 要写入的命令
 * @retval 无
 */
void OLED_WriteCommand(uint8_t Command)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {0x00, Command}; // 0x00表示写命令
 8004b06:	2300      	movs	r3, #0
 8004b08:	733b      	strb	r3, [r7, #12]
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, buf, 2, 100);
 8004b0e:	f107 020c 	add.w	r2, r7, #12
 8004b12:	2364      	movs	r3, #100	@ 0x64
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	2302      	movs	r3, #2
 8004b18:	2178      	movs	r1, #120	@ 0x78
 8004b1a:	4803      	ldr	r0, [pc, #12]	@ (8004b28 <OLED_WriteCommand+0x2c>)
 8004b1c:	f005 fcce 	bl	800a4bc <HAL_I2C_Master_Transmit>
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	200002d4 	.word	0x200002d4

08004b2c <OLED_WriteData>:
 * @brief  OLED写数据
 * @param  Data 要写入的数据
 * @retval 无
 */
void OLED_WriteData(uint8_t Data)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	4603      	mov	r3, r0
 8004b34:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {0x40, Data}; // 0x40表示写数据
 8004b36:	2340      	movs	r3, #64	@ 0x40
 8004b38:	733b      	strb	r3, [r7, #12]
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, buf, 2, 100);
 8004b3e:	f107 020c 	add.w	r2, r7, #12
 8004b42:	2364      	movs	r3, #100	@ 0x64
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	2302      	movs	r3, #2
 8004b48:	2178      	movs	r1, #120	@ 0x78
 8004b4a:	4803      	ldr	r0, [pc, #12]	@ (8004b58 <OLED_WriteData+0x2c>)
 8004b4c:	f005 fcb6 	bl	800a4bc <HAL_I2C_Master_Transmit>
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	200002d4 	.word	0x200002d4

08004b5c <OLED_SetCursor>:
 * @param  Y 以左上为原点，向下方向的坐标，范围：0~7
 * @param  X 以左上为原点，向右方向的坐标，范围：0~127
 * @retval 无
 */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	460a      	mov	r2, r1
 8004b66:	71fb      	strb	r3, [r7, #7]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);				 //设置Y位置
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff ffc1 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4)); //设置X位置4位
 8004b7a:	79bb      	ldrb	r3, [r7, #6]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	f043 0310 	orr.w	r3, r3, #16
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff ffb8 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));		 //设置X位置4位
 8004b8c:	79bb      	ldrb	r3, [r7, #6]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff ffb1 	bl	8004afc <OLED_WriteCommand>
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <OLED_Clear>:
 * @brief  OLED清屏
 * @param  无
 * @retval 无
 */
void OLED_Clear(void)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8004ba8:	2300      	movs	r3, #0
 8004baa:	71bb      	strb	r3, [r7, #6]
 8004bac:	e014      	b.n	8004bd8 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 8004bae:	79bb      	ldrb	r3, [r7, #6]
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff ffd2 	bl	8004b5c <OLED_SetCursor>
		for (i = 0; i < 128; i++)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	71fb      	strb	r3, [r7, #7]
 8004bbc:	e005      	b.n	8004bca <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	f7ff ffb4 	bl	8004b2c <OLED_WriteData>
		for (i = 0; i < 128; i++)
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	71fb      	strb	r3, [r7, #7]
 8004bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	daf5      	bge.n	8004bbe <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 8004bd2:	79bb      	ldrb	r3, [r7, #6]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	71bb      	strb	r3, [r7, #6]
 8004bd8:	79bb      	ldrb	r3, [r7, #6]
 8004bda:	2b07      	cmp	r3, #7
 8004bdc:	d9e7      	bls.n	8004bae <OLED_Clear+0xc>
		}
	}
}
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <OLED_Clear_Part>:
 * @param  start 列开始位，范围：1~16
 * @param  end 列开始位，范围：1~16
 * @retval 无
 */
void OLED_Clear_Part(uint8_t Line, uint8_t start, uint8_t end)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	71fb      	strb	r3, [r7, #7]
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	71bb      	strb	r3, [r7, #6]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	717b      	strb	r3, [r7, #5]
	uint8_t i, Column;
	for (Column = start; Column <= end; Column++)
 8004bfa:	79bb      	ldrb	r3, [r7, #6]
 8004bfc:	73bb      	strb	r3, [r7, #14]
 8004bfe:	e036      	b.n	8004c6e <OLED_Clear_Part+0x86>
	{
		OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8); //设置光标位置在上半部
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	7bbb      	ldrb	r3, [r7, #14]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f7ff ffa0 	bl	8004b5c <OLED_SetCursor>
		for (i = 0; i < 8; i++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e005      	b.n	8004c2e <OLED_Clear_Part+0x46>
		{
			OLED_WriteData(0x00); //显示上半部分内
 8004c22:	2000      	movs	r0, #0
 8004c24:	f7ff ff82 	bl	8004b2c <OLED_WriteData>
		for (i = 0; i < 8; i++)
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	2b07      	cmp	r3, #7
 8004c32:	d9f6      	bls.n	8004c22 <OLED_Clear_Part+0x3a>
		}
		OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8); //设置光标位置在下半部
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	7bbb      	ldrb	r3, [r7, #14]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f7ff ff86 	bl	8004b5c <OLED_SetCursor>
		for (i = 0; i < 8; i++)
 8004c50:	2300      	movs	r3, #0
 8004c52:	73fb      	strb	r3, [r7, #15]
 8004c54:	e005      	b.n	8004c62 <OLED_Clear_Part+0x7a>
		{
			OLED_WriteData(0x00); //显示下半部分内
 8004c56:	2000      	movs	r0, #0
 8004c58:	f7ff ff68 	bl	8004b2c <OLED_WriteData>
		for (i = 0; i < 8; i++)
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b07      	cmp	r3, #7
 8004c66:	d9f6      	bls.n	8004c56 <OLED_Clear_Part+0x6e>
	for (Column = start; Column <= end; Column++)
 8004c68:	7bbb      	ldrb	r3, [r7, #14]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	73bb      	strb	r3, [r7, #14]
 8004c6e:	7bba      	ldrb	r2, [r7, #14]
 8004c70:	797b      	ldrb	r3, [r7, #5]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d9c4      	bls.n	8004c00 <OLED_Clear_Part+0x18>
		}
	}
}
 8004c76:	bf00      	nop
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <OLED_ShowChar>:
 * @param  Column 列位，范围：1~16
 * @param  Char 要显示的一个字，范围：ASCII见字符
 * @retval 无
 */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	71fb      	strb	r3, [r7, #7]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	71bb      	strb	r3, [r7, #6]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8); //设置光标位置在上半部
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	79bb      	ldrb	r3, [r7, #6]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f7ff ff57 	bl	8004b5c <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
 8004cb2:	e00e      	b.n	8004cd2 <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]); //显示上半部分内
 8004cb4:	797b      	ldrb	r3, [r7, #5]
 8004cb6:	f1a3 0220 	sub.w	r2, r3, #32
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	491b      	ldr	r1, [pc, #108]	@ (8004d2c <OLED_ShowChar+0xac>)
 8004cbe:	0112      	lsls	r2, r2, #4
 8004cc0:	440a      	add	r2, r1
 8004cc2:	4413      	add	r3, r2
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff ff30 	bl	8004b2c <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b07      	cmp	r3, #7
 8004cd6:	d9ed      	bls.n	8004cb4 <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8); //设置光标位置在下半部
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	79bb      	ldrb	r3, [r7, #6]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	4619      	mov	r1, r3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	f7ff ff34 	bl	8004b5c <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	73fb      	strb	r3, [r7, #15]
 8004cf8:	e00f      	b.n	8004d1a <OLED_ShowChar+0x9a>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]); //显示下半部分内
 8004cfa:	797b      	ldrb	r3, [r7, #5]
 8004cfc:	f1a3 0220 	sub.w	r2, r3, #32
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	3308      	adds	r3, #8
 8004d04:	4909      	ldr	r1, [pc, #36]	@ (8004d2c <OLED_ShowChar+0xac>)
 8004d06:	0112      	lsls	r2, r2, #4
 8004d08:	440a      	add	r2, r1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff ff0c 	bl	8004b2c <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	3301      	adds	r3, #1
 8004d18:	73fb      	strb	r3, [r7, #15]
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	2b07      	cmp	r3, #7
 8004d1e:	d9ec      	bls.n	8004cfa <OLED_ShowChar+0x7a>
	}
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	08012454 	.word	0x08012454

08004d30 <OLED_ShowString>:
 * @param  Column 起始列位置，范围：1~16
 * @param  String 要显示的字符串，范围：ASCII见字符
 * @retval 无
 */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4603      	mov	r3, r0
 8004d38:	603a      	str	r2, [r7, #0]
 8004d3a:	71fb      	strb	r3, [r7, #7]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 8004d40:	2300      	movs	r3, #0
 8004d42:	73fb      	strb	r3, [r7, #15]
 8004d44:	e00e      	b.n	8004d64 <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 8004d46:	79ba      	ldrb	r2, [r7, #6]
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	b2d9      	uxtb	r1, r3
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	4413      	add	r3, r2
 8004d54:	781a      	ldrb	r2, [r3, #0]
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff ff91 	bl	8004c80 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
 8004d60:	3301      	adds	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	4413      	add	r3, r2
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ea      	bne.n	8004d46 <OLED_ShowString+0x16>
	}
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <OLED_Pow>:
/**
 * @brief  OLED次方函数
 * @retval 返回值等于X的Y次方
 */
uint32_t OLED_Pow(uint32_t X, uint32_t Y)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
	uint32_t Result = 1;
 8004d84:	2301      	movs	r3, #1
 8004d86:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8004d88:	e004      	b.n	8004d94 <OLED_Pow+0x1a>
	{
		Result *= X;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	1e5a      	subs	r2, r3, #1
 8004d98:	603a      	str	r2, [r7, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f5      	bne.n	8004d8a <OLED_Pow+0x10>
	}
	return Result;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <OLED_ShowNum>:
 * @param  Number 要显示的数字，范围：0~4294967295
 * @param  Length 要显示数字的长度，范围：1~10
 * @retval 无
 */
void OLED_ShowNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 8004dac:	b590      	push	{r4, r7, lr}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	603a      	str	r2, [r7, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	4603      	mov	r3, r0
 8004db8:	71fb      	strb	r3, [r7, #7]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	71bb      	strb	r3, [r7, #6]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < Length; i++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
 8004dc6:	e023      	b.n	8004e10 <OLED_ShowNum+0x64>
	{
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(10, Length - i - 1) % 10 + '0');
 8004dc8:	79ba      	ldrb	r2, [r7, #6]
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	4413      	add	r3, r2
 8004dce:	b2dc      	uxtb	r4, r3
 8004dd0:	797a      	ldrb	r2, [r7, #5]
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	4619      	mov	r1, r3
 8004dda:	200a      	movs	r0, #10
 8004ddc:	f7ff ffcd 	bl	8004d7a <OLED_Pow>
 8004de0:	4602      	mov	r2, r0
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004de8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e24 <OLED_ShowNum+0x78>)
 8004dea:	fba3 2301 	umull	r2, r3, r3, r1
 8004dee:	08da      	lsrs	r2, r3, #3
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	1aca      	subs	r2, r1, r3
 8004dfa:	b2d3      	uxtb	r3, r2
 8004dfc:	3330      	adds	r3, #48	@ 0x30
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	4621      	mov	r1, r4
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ff3b 	bl	8004c80 <OLED_ShowChar>
	for (i = 0; i < Length; i++)
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
 8004e10:	7bfa      	ldrb	r2, [r7, #15]
 8004e12:	797b      	ldrb	r3, [r7, #5]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d3d7      	bcc.n	8004dc8 <OLED_ShowNum+0x1c>
	}
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}
 8004e22:	bf00      	nop
 8004e24:	cccccccd 	.word	0xcccccccd

08004e28 <OLED_Init>:
 * @brief  OLED初始化
 * @param  无
 * @retval 无
 */
void OLED_Init(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
	// 增加上电延时
	HAL_Delay(100);  // 使用HAL_Delay替代for循环延时
 8004e2c:	2064      	movs	r0, #100	@ 0x64
 8004e2e:	f004 fe53 	bl	8009ad8 <HAL_Delay>

	// 初始化I2C
	OLED_I2C_Init();
 8004e32:	f7ff fe5b 	bl	8004aec <OLED_I2C_Init>

	// 等待OLED稳定
	HAL_Delay(100);
 8004e36:	2064      	movs	r0, #100	@ 0x64
 8004e38:	f004 fe4e 	bl	8009ad8 <HAL_Delay>

	OLED_WriteCommand(0xAE); //关闭显示
 8004e3c:	20ae      	movs	r0, #174	@ 0xae
 8004e3e:	f7ff fe5d 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xD5); //设置显示时钟分比/震荡器频率
 8004e42:	20d5      	movs	r0, #213	@ 0xd5
 8004e44:	f7ff fe5a 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 8004e48:	2080      	movs	r0, #128	@ 0x80
 8004e4a:	f7ff fe57 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xA8); //设置多路复用
 8004e4e:	20a8      	movs	r0, #168	@ 0xa8
 8004e50:	f7ff fe54 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 8004e54:	203f      	movs	r0, #63	@ 0x3f
 8004e56:	f7ff fe51 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xD3); //设置显示偏移
 8004e5a:	20d3      	movs	r0, #211	@ 0xd3
 8004e5c:	f7ff fe4e 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 8004e60:	2000      	movs	r0, #0
 8004e62:	f7ff fe4b 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0x40); //设置显示开始
 8004e66:	2040      	movs	r0, #64	@ 0x40
 8004e68:	f7ff fe48 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xA1); //设置左右方向0xA1正常 0xA0左右反置
 8004e6c:	20a1      	movs	r0, #161	@ 0xa1
 8004e6e:	f7ff fe45 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xC8); //设置上下方向0xC8正常 0xC0上下反置
 8004e72:	20c8      	movs	r0, #200	@ 0xc8
 8004e74:	f7ff fe42 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xDA); //设置COM引脚件配
 8004e78:	20da      	movs	r0, #218	@ 0xda
 8004e7a:	f7ff fe3f 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8004e7e:	2012      	movs	r0, #18
 8004e80:	f7ff fe3c 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0x81); //设置对比度控
 8004e84:	2081      	movs	r0, #129	@ 0x81
 8004e86:	f7ff fe39 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 8004e8a:	20cf      	movs	r0, #207	@ 0xcf
 8004e8c:	f7ff fe36 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xD9); //设置预充电周
 8004e90:	20d9      	movs	r0, #217	@ 0xd9
 8004e92:	f7ff fe33 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8004e96:	20f1      	movs	r0, #241	@ 0xf1
 8004e98:	f7ff fe30 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xDB); //设置VCOMH取消选择级别
 8004e9c:	20db      	movs	r0, #219	@ 0xdb
 8004e9e:	f7ff fe2d 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8004ea2:	2030      	movs	r0, #48	@ 0x30
 8004ea4:	f7ff fe2a 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xA4); //设置整个显示打开/关闭
 8004ea8:	20a4      	movs	r0, #164	@ 0xa4
 8004eaa:	f7ff fe27 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xA6); //设置正常/倒转显示
 8004eae:	20a6      	movs	r0, #166	@ 0xa6
 8004eb0:	f7ff fe24 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0x8D); //设置充电
 8004eb4:	208d      	movs	r0, #141	@ 0x8d
 8004eb6:	f7ff fe21 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8004eba:	2014      	movs	r0, #20
 8004ebc:	f7ff fe1e 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xAF); //开显示
 8004ec0:	20af      	movs	r0, #175	@ 0xaf
 8004ec2:	f7ff fe1b 	bl	8004afc <OLED_WriteCommand>

	OLED_Clear(); // OLED清屏
 8004ec6:	f7ff fe6c 	bl	8004ba2 <OLED_Clear>
	
	// 等待显示稳定
	HAL_Delay(100);
 8004eca:	2064      	movs	r0, #100	@ 0x64
 8004ecc:	f004 fe04 	bl	8009ad8 <HAL_Delay>
}
 8004ed0:	bf00      	nop
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <Servo_Init>:
// 定时器时钟频率（APB2=84MHz，TIMx使用84MHz）
#define TIMER_CLK_FREQ 168000000  // 单位：Hz

void Servo_Init(Servo* servo, TIM_HandleTypeDef* timer, uint32_t channel,
                GPIO_TypeDef* gpio_port, uint16_t gpio_pin) 
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
    servo->timer = timer;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	601a      	str	r2, [r3, #0]
    servo->channel = channel;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	605a      	str	r2, [r3, #4]
    servo->gpio_port = gpio_port;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	609a      	str	r2, [r3, #8]
    servo->gpio_pin = gpio_pin;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8c3a      	ldrh	r2, [r7, #32]
 8004ef8:	819a      	strh	r2, [r3, #12]
    servo->pulse_width = SERVO_MIN_PULSE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004f00:	611a      	str	r2, [r3, #16]

    // 配置PWM周期
    uint32_t period_cycles = (TIMER_CLK_FREQ / 1000000) * SERVO_PWM_PERIOD / 
                            (timer->Init.Prescaler + 1);
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	3301      	adds	r3, #1
    uint32_t period_cycles = (TIMER_CLK_FREQ / 1000000) * SERVO_PWM_PERIOD / 
 8004f08:	4a0d      	ldr	r2, [pc, #52]	@ (8004f40 <Servo_Init+0x6c>)
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_AUTORELOAD(timer, period_cycles - 1);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	3a01      	subs	r2, #1
 8004f18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	1e5a      	subs	r2, r3, #1
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	60da      	str	r2, [r3, #12]

    // 启动PWM
    HAL_TIM_PWM_Start(timer, channel);
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	68b8      	ldr	r0, [r7, #8]
 8004f26:	f007 f893 	bl	800c050 <HAL_TIM_PWM_Start>
    Servo_SetPulse(servo, servo->pulse_width);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f807 	bl	8004f44 <Servo_SetPulse>
}
 8004f36:	bf00      	nop
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	00334500 	.word	0x00334500

08004f44 <Servo_SetPulse>:
                    (uint32_t)((SERVO_MAX_PULSE - SERVO_MIN_PULSE) * angle / 180.0f);
    
    Servo_SetPulse(servo, pulse);
}

void Servo_SetPulse(Servo* servo, uint32_t pulse_us) {
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
    // 计算比较寄存器值
    uint32_t pulse_cycles = (TIMER_CLK_FREQ / 1000000) * pulse_us / 
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	22a8      	movs	r2, #168	@ 0xa8
 8004f52:	fb03 f202 	mul.w	r2, r3, r2
                           (servo->timer->Init.Prescaler + 1);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	3301      	adds	r3, #1
    uint32_t pulse_cycles = (TIMER_CLK_FREQ / 1000000) * pulse_us / 
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	60fb      	str	r3, [r7, #12]
    
    // 设置比较值
    switch(servo->channel) {
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <Servo_SetPulse+0x2e>
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d006      	beq.n	8004f7e <Servo_SetPulse+0x3a>
 8004f70:	e00b      	b.n	8004f8a <Servo_SetPulse+0x46>
        case TIM_CHANNEL_1:
            __HAL_TIM_SET_COMPARE(servo->timer, TIM_CHANNEL_1, pulse_cycles);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8004f7c:	e005      	b.n	8004f8a <Servo_SetPulse+0x46>
        case TIM_CHANNEL_2:
            __HAL_TIM_SET_COMPARE(servo->timer, TIM_CHANNEL_2, pulse_cycles);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8004f88:	bf00      	nop
        // 添加其他通道...
    }
    servo->pulse_width = pulse_us;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	611a      	str	r2, [r3, #16]
}
 8004f90:	bf00      	nop
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08e      	sub	sp, #56	@ 0x38
 8004fa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	605a      	str	r2, [r3, #4]
 8004fac:	609a      	str	r2, [r3, #8]
 8004fae:	60da      	str	r2, [r3, #12]
 8004fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	4bac      	ldr	r3, [pc, #688]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fba:	4aab      	ldr	r2, [pc, #684]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fbc:	f043 0310 	orr.w	r3, r3, #16
 8004fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fc2:	4ba9      	ldr	r3, [pc, #676]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc6:	f003 0310 	and.w	r3, r3, #16
 8004fca:	623b      	str	r3, [r7, #32]
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	4ba5      	ldr	r3, [pc, #660]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd6:	4aa4      	ldr	r2, [pc, #656]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fd8:	f043 0304 	orr.w	r3, r3, #4
 8004fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fde:	4ba2      	ldr	r3, [pc, #648]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	4b9e      	ldr	r3, [pc, #632]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff2:	4a9d      	ldr	r2, [pc, #628]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004ff4:	f043 0320 	orr.w	r3, r3, #32
 8004ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ffa:	4b9b      	ldr	r3, [pc, #620]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005006:	2300      	movs	r3, #0
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	4b97      	ldr	r3, [pc, #604]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500e:	4a96      	ldr	r2, [pc, #600]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005014:	6313      	str	r3, [r2, #48]	@ 0x30
 8005016:	4b94      	ldr	r3, [pc, #592]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	4b90      	ldr	r3, [pc, #576]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502a:	4a8f      	ldr	r2, [pc, #572]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	6313      	str	r3, [r2, #48]	@ 0x30
 8005032:	4b8d      	ldr	r3, [pc, #564]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	4b89      	ldr	r3, [pc, #548]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005046:	4a88      	ldr	r2, [pc, #544]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005048:	f043 0302 	orr.w	r3, r3, #2
 800504c:	6313      	str	r3, [r2, #48]	@ 0x30
 800504e:	4b86      	ldr	r3, [pc, #536]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	4b82      	ldr	r3, [pc, #520]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005062:	4a81      	ldr	r2, [pc, #516]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005064:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005068:	6313      	str	r3, [r2, #48]	@ 0x30
 800506a:	4b7f      	ldr	r3, [pc, #508]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005076:	2300      	movs	r3, #0
 8005078:	607b      	str	r3, [r7, #4]
 800507a:	4b7b      	ldr	r3, [pc, #492]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507e:	4a7a      	ldr	r2, [pc, #488]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005080:	f043 0308 	orr.w	r3, r3, #8
 8005084:	6313      	str	r3, [r2, #48]	@ 0x30
 8005086:	4b78      	ldr	r3, [pc, #480]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M4_IN1_Pin|M4_IN2_Pin|M3_IN1_Pin, GPIO_PIN_RESET);
 8005092:	2200      	movs	r2, #0
 8005094:	212a      	movs	r1, #42	@ 0x2a
 8005096:	4875      	ldr	r0, [pc, #468]	@ (800526c <MX_GPIO_Init+0x2d0>)
 8005098:	f005 f89a 	bl	800a1d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_IN2_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800509c:	2200      	movs	r2, #0
 800509e:	f24f 0102 	movw	r1, #61442	@ 0xf002
 80050a2:	4873      	ldr	r0, [pc, #460]	@ (8005270 <MX_GPIO_Init+0x2d4>)
 80050a4:	f005 f894 	bl	800a1d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, M1_IN1_Pin|GPIO_PIN_1|M2_IN1_Pin|Trig_2_Pin, GPIO_PIN_RESET);
 80050a8:	2200      	movs	r2, #0
 80050aa:	f248 010b 	movw	r1, #32779	@ 0x800b
 80050ae:	4871      	ldr	r0, [pc, #452]	@ (8005274 <MX_GPIO_Init+0x2d8>)
 80050b0:	f005 f88e 	bl	800a1d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M1_IN2_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12
 80050b4:	2200      	movs	r2, #0
 80050b6:	f24d 5180 	movw	r1, #54656	@ 0xd580
 80050ba:	486f      	ldr	r0, [pc, #444]	@ (8005278 <MX_GPIO_Init+0x2dc>)
 80050bc:	f005 f888 	bl	800a1d0 <HAL_GPIO_WritePin>
                          |Trig_4_Pin|Trig_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_RESET);
 80050c0:	2200      	movs	r2, #0
 80050c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050c6:	486d      	ldr	r0, [pc, #436]	@ (800527c <MX_GPIO_Init+0x2e0>)
 80050c8:	f005 f882 	bl	800a1d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE13
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_13
 80050cc:	f242 031f 	movw	r3, #8223	@ 0x201f
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050d2:	2303      	movs	r3, #3
 80050d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050de:	4619      	mov	r1, r3
 80050e0:	4865      	ldr	r0, [pc, #404]	@ (8005278 <MX_GPIO_Init+0x2dc>)
 80050e2:	f004 fec1 	bl	8009e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC2 PC4
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 80050e6:	f242 1315 	movw	r3, #8469	@ 0x2115
 80050ea:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ec:	2303      	movs	r3, #3
 80050ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050f8:	4619      	mov	r1, r3
 80050fa:	485c      	ldr	r0, [pc, #368]	@ (800526c <MX_GPIO_Init+0x2d0>)
 80050fc:	f004 feb4 	bl	8009e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF7 PF8
                           PF9 PF10 PF11 PF12
                           PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005100:	f64f 73bf 	movw	r3, #65471	@ 0xffbf
 8005104:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005106:	2303      	movs	r3, #3
 8005108:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510a:	2300      	movs	r3, #0
 800510c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800510e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005112:	4619      	mov	r1, r3
 8005114:	485a      	ldr	r0, [pc, #360]	@ (8005280 <MX_GPIO_Init+0x2e4>)
 8005116:	f004 fea7 	bl	8009e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : M4_IN1_Pin M4_IN2_Pin M3_IN1_Pin */
  GPIO_InitStruct.Pin = M4_IN1_Pin|M4_IN2_Pin|M3_IN1_Pin;
 800511a:	232a      	movs	r3, #42	@ 0x2a
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800511e:	2301      	movs	r3, #1
 8005120:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005122:	2300      	movs	r3, #0
 8005124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005126:	2300      	movs	r3, #0
 8005128:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800512a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800512e:	4619      	mov	r1, r3
 8005130:	484e      	ldr	r0, [pc, #312]	@ (800526c <MX_GPIO_Init+0x2d0>)
 8005132:	f004 fe99 	bl	8009e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8005136:	f649 0310 	movw	r3, #38928	@ 0x9810
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800513c:	2303      	movs	r3, #3
 800513e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005148:	4619      	mov	r1, r3
 800514a:	484e      	ldr	r0, [pc, #312]	@ (8005284 <MX_GPIO_Init+0x2e8>)
 800514c:	f004 fe8c 	bl	8009e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8005150:	f240 3335 	movw	r3, #821	@ 0x335
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005156:	2303      	movs	r3, #3
 8005158:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515a:	2300      	movs	r3, #0
 800515c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800515e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005162:	4619      	mov	r1, r3
 8005164:	4842      	ldr	r0, [pc, #264]	@ (8005270 <MX_GPIO_Init+0x2d4>)
 8005166:	f004 fe7f 	bl	8009e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_IN2_Pin PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = M3_IN2_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800516a:	f24f 0302 	movw	r3, #61442	@ 0xf002
 800516e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005170:	2301      	movs	r3, #1
 8005172:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005174:	2300      	movs	r3, #0
 8005176:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005178:	2300      	movs	r3, #0
 800517a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800517c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005180:	4619      	mov	r1, r3
 8005182:	483b      	ldr	r0, [pc, #236]	@ (8005270 <MX_GPIO_Init+0x2d4>)
 8005184:	f004 fe70 	bl	8009e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin PG1 M2_IN1_Pin Trig_2_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|GPIO_PIN_1|M2_IN1_Pin|Trig_2_Pin;
 8005188:	f248 030b 	movw	r3, #32779	@ 0x800b
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800518e:	2301      	movs	r3, #1
 8005190:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005192:	2300      	movs	r3, #0
 8005194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005196:	2300      	movs	r3, #0
 8005198:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800519a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800519e:	4619      	mov	r1, r3
 80051a0:	4834      	ldr	r0, [pc, #208]	@ (8005274 <MX_GPIO_Init+0x2d8>)
 80051a2:	f004 fe61 	bl	8009e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN2_Pin PE8 PE10 PE12
                           Trig_4_Pin Trig_3_Pin */
  GPIO_InitStruct.Pin = M1_IN2_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12
 80051a6:	f24d 5380 	movw	r3, #54656	@ 0xd580
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |Trig_4_Pin|Trig_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051ac:	2301      	movs	r3, #1
 80051ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b4:	2300      	movs	r3, #0
 80051b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051bc:	4619      	mov	r1, r3
 80051be:	482e      	ldr	r0, [pc, #184]	@ (8005278 <MX_GPIO_Init+0x2dc>)
 80051c0:	f004 fe52 	bl	8009e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Echo_4_Pin Echo_3_Pin */
  GPIO_InitStruct.Pin = Echo_4_Pin|Echo_3_Pin;
 80051c4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80051c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80051ca:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80051ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051d8:	4619      	mov	r1, r3
 80051da:	4825      	ldr	r0, [pc, #148]	@ (8005270 <MX_GPIO_Init+0x2d4>)
 80051dc:	f004 fe44 	bl	8009e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD0
                           PD1 PD3 PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_0
 80051e0:	f644 439b 	movw	r3, #19611	@ 0x4c9b
 80051e4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051e6:	2303      	movs	r3, #3
 80051e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051f2:	4619      	mov	r1, r3
 80051f4:	4821      	ldr	r0, [pc, #132]	@ (800527c <MX_GPIO_Init+0x2e0>)
 80051f6:	f004 fe37 	bl	8009e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IN2_Pin */
  GPIO_InitStruct.Pin = M2_IN2_Pin;
 80051fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005200:	2301      	movs	r3, #1
 8005202:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005204:	2300      	movs	r3, #0
 8005206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005208:	2300      	movs	r3, #0
 800520a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(M2_IN2_GPIO_Port, &GPIO_InitStruct);
 800520c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005210:	4619      	mov	r1, r3
 8005212:	481a      	ldr	r0, [pc, #104]	@ (800527c <MX_GPIO_Init+0x2e0>)
 8005214:	f004 fe28 	bl	8009e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG4 PG5 PG6
                           PG7 PG8 PG10 PG11
                           PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8005218:	f641 53f4 	movw	r3, #7668	@ 0x1df4
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800521e:	2303      	movs	r3, #3
 8005220:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005222:	2300      	movs	r3, #0
 8005224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800522a:	4619      	mov	r1, r3
 800522c:	4811      	ldr	r0, [pc, #68]	@ (8005274 <MX_GPIO_Init+0x2d8>)
 800522e:	f004 fe1b 	bl	8009e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_2_Pin */
  GPIO_InitStruct.Pin = Echo_2_Pin;
 8005232:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005238:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800523c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523e:	2300      	movs	r3, #0
 8005240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Echo_2_GPIO_Port, &GPIO_InitStruct);
 8005242:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005246:	4619      	mov	r1, r3
 8005248:	480a      	ldr	r0, [pc, #40]	@ (8005274 <MX_GPIO_Init+0x2d8>)
 800524a:	f004 fe0d 	bl	8009e68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800524e:	2200      	movs	r2, #0
 8005250:	2100      	movs	r1, #0
 8005252:	2028      	movs	r0, #40	@ 0x28
 8005254:	f004 fd3f 	bl	8009cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005258:	2028      	movs	r0, #40	@ 0x28
 800525a:	f004 fd58 	bl	8009d0e <HAL_NVIC_EnableIRQ>

}
 800525e:	bf00      	nop
 8005260:	3738      	adds	r7, #56	@ 0x38
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40023800 	.word	0x40023800
 800526c:	40020800 	.word	0x40020800
 8005270:	40020400 	.word	0x40020400
 8005274:	40021800 	.word	0x40021800
 8005278:	40021000 	.word	0x40021000
 800527c:	40020c00 	.word	0x40020c00
 8005280:	40021400 	.word	0x40021400
 8005284:	40020000 	.word	0x40020000

08005288 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800528c:	4b12      	ldr	r3, [pc, #72]	@ (80052d8 <MX_I2C1_Init+0x50>)
 800528e:	4a13      	ldr	r2, [pc, #76]	@ (80052dc <MX_I2C1_Init+0x54>)
 8005290:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005292:	4b11      	ldr	r3, [pc, #68]	@ (80052d8 <MX_I2C1_Init+0x50>)
 8005294:	4a12      	ldr	r2, [pc, #72]	@ (80052e0 <MX_I2C1_Init+0x58>)
 8005296:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005298:	4b0f      	ldr	r3, [pc, #60]	@ (80052d8 <MX_I2C1_Init+0x50>)
 800529a:	2200      	movs	r2, #0
 800529c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800529e:	4b0e      	ldr	r3, [pc, #56]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052a4:	4b0c      	ldr	r3, [pc, #48]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80052aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052ac:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80052b2:	4b09      	ldr	r3, [pc, #36]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052b8:	4b07      	ldr	r3, [pc, #28]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80052be:	4b06      	ldr	r3, [pc, #24]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052c4:	4804      	ldr	r0, [pc, #16]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052c6:	f004 ffb5 	bl	800a234 <HAL_I2C_Init>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80052d0:	f001 ffc0 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80052d4:	bf00      	nop
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	200002d4 	.word	0x200002d4
 80052dc:	40005400 	.word	0x40005400
 80052e0:	00061a80 	.word	0x00061a80

080052e4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80052e8:	4b12      	ldr	r3, [pc, #72]	@ (8005334 <MX_I2C3_Init+0x50>)
 80052ea:	4a13      	ldr	r2, [pc, #76]	@ (8005338 <MX_I2C3_Init+0x54>)
 80052ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80052ee:	4b11      	ldr	r3, [pc, #68]	@ (8005334 <MX_I2C3_Init+0x50>)
 80052f0:	4a12      	ldr	r2, [pc, #72]	@ (800533c <MX_I2C3_Init+0x58>)
 80052f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80052f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005334 <MX_I2C3_Init+0x50>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80052fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005334 <MX_I2C3_Init+0x50>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005300:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <MX_I2C3_Init+0x50>)
 8005302:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005306:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005308:	4b0a      	ldr	r3, [pc, #40]	@ (8005334 <MX_I2C3_Init+0x50>)
 800530a:	2200      	movs	r2, #0
 800530c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800530e:	4b09      	ldr	r3, [pc, #36]	@ (8005334 <MX_I2C3_Init+0x50>)
 8005310:	2200      	movs	r2, #0
 8005312:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005314:	4b07      	ldr	r3, [pc, #28]	@ (8005334 <MX_I2C3_Init+0x50>)
 8005316:	2200      	movs	r2, #0
 8005318:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800531a:	4b06      	ldr	r3, [pc, #24]	@ (8005334 <MX_I2C3_Init+0x50>)
 800531c:	2200      	movs	r2, #0
 800531e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005320:	4804      	ldr	r0, [pc, #16]	@ (8005334 <MX_I2C3_Init+0x50>)
 8005322:	f004 ff87 	bl	800a234 <HAL_I2C_Init>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800532c:	f001 ff92 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005330:	bf00      	nop
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000328 	.word	0x20000328
 8005338:	40005c00 	.word	0x40005c00
 800533c:	000186a0 	.word	0x000186a0

08005340 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08c      	sub	sp, #48	@ 0x30
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005348:	f107 031c 	add.w	r3, r7, #28
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	605a      	str	r2, [r3, #4]
 8005352:	609a      	str	r2, [r3, #8]
 8005354:	60da      	str	r2, [r3, #12]
 8005356:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a42      	ldr	r2, [pc, #264]	@ (8005468 <HAL_I2C_MspInit+0x128>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d12c      	bne.n	80053bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	4b41      	ldr	r3, [pc, #260]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 8005368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536a:	4a40      	ldr	r2, [pc, #256]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 800536c:	f043 0302 	orr.w	r3, r3, #2
 8005370:	6313      	str	r3, [r2, #48]	@ 0x30
 8005372:	4b3e      	ldr	r3, [pc, #248]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 8005374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	61bb      	str	r3, [r7, #24]
 800537c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800537e:	23c0      	movs	r3, #192	@ 0xc0
 8005380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005382:	2312      	movs	r3, #18
 8005384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005386:	2300      	movs	r3, #0
 8005388:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800538a:	2303      	movs	r3, #3
 800538c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800538e:	2304      	movs	r3, #4
 8005390:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005392:	f107 031c 	add.w	r3, r7, #28
 8005396:	4619      	mov	r1, r3
 8005398:	4835      	ldr	r0, [pc, #212]	@ (8005470 <HAL_I2C_MspInit+0x130>)
 800539a:	f004 fd65 	bl	8009e68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	4b32      	ldr	r3, [pc, #200]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a6:	4a31      	ldr	r2, [pc, #196]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80053ae:	4b2f      	ldr	r3, [pc, #188]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80053ba:	e050      	b.n	800545e <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005474 <HAL_I2C_MspInit+0x134>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d14b      	bne.n	800545e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	4b28      	ldr	r3, [pc, #160]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ce:	4a27      	ldr	r2, [pc, #156]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053d0:	f043 0304 	orr.w	r3, r3, #4
 80053d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80053d6:	4b25      	ldr	r3, [pc, #148]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	4b21      	ldr	r3, [pc, #132]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ea:	4a20      	ldr	r2, [pc, #128]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80053f2:	4b1e      	ldr	r3, [pc, #120]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005404:	2312      	movs	r3, #18
 8005406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005408:	2300      	movs	r3, #0
 800540a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800540c:	2303      	movs	r3, #3
 800540e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005410:	2304      	movs	r3, #4
 8005412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005414:	f107 031c 	add.w	r3, r7, #28
 8005418:	4619      	mov	r1, r3
 800541a:	4817      	ldr	r0, [pc, #92]	@ (8005478 <HAL_I2C_MspInit+0x138>)
 800541c:	f004 fd24 	bl	8009e68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005426:	2312      	movs	r3, #18
 8005428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542a:	2300      	movs	r3, #0
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800542e:	2303      	movs	r3, #3
 8005430:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005432:	2304      	movs	r3, #4
 8005434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005436:	f107 031c 	add.w	r3, r7, #28
 800543a:	4619      	mov	r1, r3
 800543c:	480f      	ldr	r0, [pc, #60]	@ (800547c <HAL_I2C_MspInit+0x13c>)
 800543e:	f004 fd13 	bl	8009e68 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005442:	2300      	movs	r3, #0
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	4b09      	ldr	r3, [pc, #36]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544a:	4a08      	ldr	r2, [pc, #32]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 800544c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005450:	6413      	str	r3, [r2, #64]	@ 0x40
 8005452:	4b06      	ldr	r3, [pc, #24]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 8005454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800545a:	60bb      	str	r3, [r7, #8]
 800545c:	68bb      	ldr	r3, [r7, #8]
}
 800545e:	bf00      	nop
 8005460:	3730      	adds	r7, #48	@ 0x30
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40005400 	.word	0x40005400
 800546c:	40023800 	.word	0x40023800
 8005470:	40020400 	.word	0x40020400
 8005474:	40005c00 	.word	0x40005c00
 8005478:	40020800 	.word	0x40020800
 800547c:	40020000 	.word	0x40020000

08005480 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define CLAMP(value, min, max) ((value) < (min) ? (min) : ((value) > (max) ? (max) : (value)))

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    // 检查是否是UART5（US100传感器使用的串口）
    if (huart == &huart5||huart == &huart2||huart == &huart3||huart == &huart4) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a14      	ldr	r2, [pc, #80]	@ (80054dc <HAL_UART_RxCpltCallback+0x5c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00b      	beq.n	80054a8 <HAL_UART_RxCpltCallback+0x28>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a13      	ldr	r2, [pc, #76]	@ (80054e0 <HAL_UART_RxCpltCallback+0x60>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <HAL_UART_RxCpltCallback+0x28>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a12      	ldr	r2, [pc, #72]	@ (80054e4 <HAL_UART_RxCpltCallback+0x64>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <HAL_UART_RxCpltCallback+0x28>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a11      	ldr	r2, [pc, #68]	@ (80054e8 <HAL_UART_RxCpltCallback+0x68>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d102      	bne.n	80054ae <HAL_UART_RxCpltCallback+0x2e>
        // 调用US100库的回调函数
        US100_UART_RxCpltCallback(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f003 fed3 	bl	8009254 <US100_UART_RxCpltCallback>
    } 
    if (huart == &huart1) {
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a0e      	ldr	r2, [pc, #56]	@ (80054ec <HAL_UART_RxCpltCallback+0x6c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d10e      	bne.n	80054d4 <HAL_UART_RxCpltCallback+0x54>
        // 处理其他串口的回调
        HAL_UART_Transmit(&huart1, message, strlen(message), 100);
 80054b6:	480e      	ldr	r0, [pc, #56]	@ (80054f0 <HAL_UART_RxCpltCallback+0x70>)
 80054b8:	f7fa feda 	bl	8000270 <strlen>
 80054bc:	4603      	mov	r3, r0
 80054be:	b29a      	uxth	r2, r3
 80054c0:	2364      	movs	r3, #100	@ 0x64
 80054c2:	490b      	ldr	r1, [pc, #44]	@ (80054f0 <HAL_UART_RxCpltCallback+0x70>)
 80054c4:	4809      	ldr	r0, [pc, #36]	@ (80054ec <HAL_UART_RxCpltCallback+0x6c>)
 80054c6:	f007 fd83 	bl	800cfd0 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart1, receivedata, 2);
 80054ca:	2202      	movs	r2, #2
 80054cc:	4909      	ldr	r1, [pc, #36]	@ (80054f4 <HAL_UART_RxCpltCallback+0x74>)
 80054ce:	4807      	ldr	r0, [pc, #28]	@ (80054ec <HAL_UART_RxCpltCallback+0x6c>)
 80054d0:	f007 fe09 	bl	800d0e6 <HAL_UART_Receive_IT>
    //     HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
        
    //     // 继续接收下一个字节
    //     HAL_UART_Receive_IT(&huart4, &uart4_rx_buffer, 1);
    // }
}
 80054d4:	bf00      	nop
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	200008cc 	.word	0x200008cc
 80054e0:	2000095c 	.word	0x2000095c
 80054e4:	200009a4 	.word	0x200009a4
 80054e8:	20000884 	.word	0x20000884
 80054ec:	20000914 	.word	0x20000914
 80054f0:	20000050 	.word	0x20000050
 80054f4:	2000044c 	.word	0x2000044c

080054f8 <meandistances>:

float* meandistances(float* distances)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]

    if (cz)
 8005500:	4b6d      	ldr	r3, [pc, #436]	@ (80056b8 <meandistances+0x1c0>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d020      	beq.n	800554a <meandistances+0x52>
    {
        cz = 0;
 8005508:	4b6b      	ldr	r3, [pc, #428]	@ (80056b8 <meandistances+0x1c0>)
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
        count_100ms = 1;
 800550e:	4b6b      	ldr	r3, [pc, #428]	@ (80056bc <meandistances+0x1c4>)
 8005510:	2201      	movs	r2, #1
 8005512:	601a      	str	r2, [r3, #0]
        start = HAL_GetTick();
 8005514:	f004 fad4 	bl	8009ac0 <HAL_GetTick>
 8005518:	4603      	mov	r3, r0
 800551a:	4a69      	ldr	r2, [pc, #420]	@ (80056c0 <meandistances+0x1c8>)
 800551c:	6013      	str	r3, [r2, #0]
        now = start;
 800551e:	4b68      	ldr	r3, [pc, #416]	@ (80056c0 <meandistances+0x1c8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a68      	ldr	r2, [pc, #416]	@ (80056c4 <meandistances+0x1cc>)
 8005524:	6013      	str	r3, [r2, #0]
        sum[0] = distances[0];
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a67      	ldr	r2, [pc, #412]	@ (80056c8 <meandistances+0x1d0>)
 800552c:	6013      	str	r3, [r2, #0]
        sum[1] = distances[1];
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	4a65      	ldr	r2, [pc, #404]	@ (80056c8 <meandistances+0x1d0>)
 8005534:	6053      	str	r3, [r2, #4]
        sum[2] = distances[2];
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	4a63      	ldr	r2, [pc, #396]	@ (80056c8 <meandistances+0x1d0>)
 800553c:	6093      	str	r3, [r2, #8]
        sum[3] = distances[3];
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	4a61      	ldr	r2, [pc, #388]	@ (80056c8 <meandistances+0x1d0>)
 8005544:	60d3      	str	r3, [r2, #12]
        return mean;  // 初始返回0值
 8005546:	4b61      	ldr	r3, [pc, #388]	@ (80056cc <meandistances+0x1d4>)
 8005548:	e0b1      	b.n	80056ae <meandistances+0x1b6>
    }
    else
    {
        now = HAL_GetTick();
 800554a:	f004 fab9 	bl	8009ac0 <HAL_GetTick>
 800554e:	4603      	mov	r3, r0
 8005550:	4a5c      	ldr	r2, [pc, #368]	@ (80056c4 <meandistances+0x1cc>)
 8005552:	6013      	str	r3, [r2, #0]
        if (now - start <= 100)
 8005554:	4b5b      	ldr	r3, [pc, #364]	@ (80056c4 <meandistances+0x1cc>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	4b59      	ldr	r3, [pc, #356]	@ (80056c0 <meandistances+0x1c8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b64      	cmp	r3, #100	@ 0x64
 8005560:	d835      	bhi.n	80055ce <meandistances+0xd6>
        {
            sum[0] += distances[0];
 8005562:	4b59      	ldr	r3, [pc, #356]	@ (80056c8 <meandistances+0x1d0>)
 8005564:	ed93 7a00 	vldr	s14, [r3]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	edd3 7a00 	vldr	s15, [r3]
 800556e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005572:	4b55      	ldr	r3, [pc, #340]	@ (80056c8 <meandistances+0x1d0>)
 8005574:	edc3 7a00 	vstr	s15, [r3]
            sum[1] += distances[1];
 8005578:	4b53      	ldr	r3, [pc, #332]	@ (80056c8 <meandistances+0x1d0>)
 800557a:	ed93 7a01 	vldr	s14, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3304      	adds	r3, #4
 8005582:	edd3 7a00 	vldr	s15, [r3]
 8005586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800558a:	4b4f      	ldr	r3, [pc, #316]	@ (80056c8 <meandistances+0x1d0>)
 800558c:	edc3 7a01 	vstr	s15, [r3, #4]
            sum[2] += distances[2];
 8005590:	4b4d      	ldr	r3, [pc, #308]	@ (80056c8 <meandistances+0x1d0>)
 8005592:	ed93 7a02 	vldr	s14, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3308      	adds	r3, #8
 800559a:	edd3 7a00 	vldr	s15, [r3]
 800559e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055a2:	4b49      	ldr	r3, [pc, #292]	@ (80056c8 <meandistances+0x1d0>)
 80055a4:	edc3 7a02 	vstr	s15, [r3, #8]
            sum[3] += distances[3];
 80055a8:	4b47      	ldr	r3, [pc, #284]	@ (80056c8 <meandistances+0x1d0>)
 80055aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	330c      	adds	r3, #12
 80055b2:	edd3 7a00 	vldr	s15, [r3]
 80055b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055ba:	4b43      	ldr	r3, [pc, #268]	@ (80056c8 <meandistances+0x1d0>)
 80055bc:	edc3 7a03 	vstr	s15, [r3, #12]
            count_100ms += 1;
 80055c0:	4b3e      	ldr	r3, [pc, #248]	@ (80056bc <meandistances+0x1c4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	4a3d      	ldr	r2, [pc, #244]	@ (80056bc <meandistances+0x1c4>)
 80055c8:	6013      	str	r3, [r2, #0]
            return mean;  // 返回当前均值
 80055ca:	4b40      	ldr	r3, [pc, #256]	@ (80056cc <meandistances+0x1d4>)
 80055cc:	e06f      	b.n	80056ae <meandistances+0x1b6>
        }
        else
        {
            sum[0] += distances[0];
 80055ce:	4b3e      	ldr	r3, [pc, #248]	@ (80056c8 <meandistances+0x1d0>)
 80055d0:	ed93 7a00 	vldr	s14, [r3]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	edd3 7a00 	vldr	s15, [r3]
 80055da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055de:	4b3a      	ldr	r3, [pc, #232]	@ (80056c8 <meandistances+0x1d0>)
 80055e0:	edc3 7a00 	vstr	s15, [r3]
            sum[1] += distances[1];
 80055e4:	4b38      	ldr	r3, [pc, #224]	@ (80056c8 <meandistances+0x1d0>)
 80055e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3304      	adds	r3, #4
 80055ee:	edd3 7a00 	vldr	s15, [r3]
 80055f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055f6:	4b34      	ldr	r3, [pc, #208]	@ (80056c8 <meandistances+0x1d0>)
 80055f8:	edc3 7a01 	vstr	s15, [r3, #4]
            sum[2] += distances[2];
 80055fc:	4b32      	ldr	r3, [pc, #200]	@ (80056c8 <meandistances+0x1d0>)
 80055fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3308      	adds	r3, #8
 8005606:	edd3 7a00 	vldr	s15, [r3]
 800560a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800560e:	4b2e      	ldr	r3, [pc, #184]	@ (80056c8 <meandistances+0x1d0>)
 8005610:	edc3 7a02 	vstr	s15, [r3, #8]
            sum[3] += distances[3];
 8005614:	4b2c      	ldr	r3, [pc, #176]	@ (80056c8 <meandistances+0x1d0>)
 8005616:	ed93 7a03 	vldr	s14, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	330c      	adds	r3, #12
 800561e:	edd3 7a00 	vldr	s15, [r3]
 8005622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005626:	4b28      	ldr	r3, [pc, #160]	@ (80056c8 <meandistances+0x1d0>)
 8005628:	edc3 7a03 	vstr	s15, [r3, #12]
            count_100ms += 1;
 800562c:	4b23      	ldr	r3, [pc, #140]	@ (80056bc <meandistances+0x1c4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3301      	adds	r3, #1
 8005632:	4a22      	ldr	r2, [pc, #136]	@ (80056bc <meandistances+0x1c4>)
 8005634:	6013      	str	r3, [r2, #0]

            mean[0] = sum[0] / count_100ms;
 8005636:	4b24      	ldr	r3, [pc, #144]	@ (80056c8 <meandistances+0x1d0>)
 8005638:	edd3 6a00 	vldr	s13, [r3]
 800563c:	4b1f      	ldr	r3, [pc, #124]	@ (80056bc <meandistances+0x1c4>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	ee07 3a90 	vmov	s15, r3
 8005644:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800564c:	4b1f      	ldr	r3, [pc, #124]	@ (80056cc <meandistances+0x1d4>)
 800564e:	edc3 7a00 	vstr	s15, [r3]
            mean[1] = sum[1] / count_100ms;
 8005652:	4b1d      	ldr	r3, [pc, #116]	@ (80056c8 <meandistances+0x1d0>)
 8005654:	edd3 6a01 	vldr	s13, [r3, #4]
 8005658:	4b18      	ldr	r3, [pc, #96]	@ (80056bc <meandistances+0x1c4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	ee07 3a90 	vmov	s15, r3
 8005660:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005668:	4b18      	ldr	r3, [pc, #96]	@ (80056cc <meandistances+0x1d4>)
 800566a:	edc3 7a01 	vstr	s15, [r3, #4]
            mean[2] = sum[2] / count_100ms;
 800566e:	4b16      	ldr	r3, [pc, #88]	@ (80056c8 <meandistances+0x1d0>)
 8005670:	edd3 6a02 	vldr	s13, [r3, #8]
 8005674:	4b11      	ldr	r3, [pc, #68]	@ (80056bc <meandistances+0x1c4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	ee07 3a90 	vmov	s15, r3
 800567c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005684:	4b11      	ldr	r3, [pc, #68]	@ (80056cc <meandistances+0x1d4>)
 8005686:	edc3 7a02 	vstr	s15, [r3, #8]
            mean[3] = sum[3] / count_100ms;
 800568a:	4b0f      	ldr	r3, [pc, #60]	@ (80056c8 <meandistances+0x1d0>)
 800568c:	edd3 6a03 	vldr	s13, [r3, #12]
 8005690:	4b0a      	ldr	r3, [pc, #40]	@ (80056bc <meandistances+0x1c4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800569c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a0:	4b0a      	ldr	r3, [pc, #40]	@ (80056cc <meandistances+0x1d4>)
 80056a2:	edc3 7a03 	vstr	s15, [r3, #12]

            cz = 1;
 80056a6:	4b04      	ldr	r3, [pc, #16]	@ (80056b8 <meandistances+0x1c0>)
 80056a8:	2201      	movs	r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
            return mean;
 80056ac:	4b07      	ldr	r3, [pc, #28]	@ (80056cc <meandistances+0x1d4>)
        }
    }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000048 	.word	0x20000048
 80056bc:	2000041c 	.word	0x2000041c
 80056c0:	20000444 	.word	0x20000444
 80056c4:	20000448 	.word	0x20000448
 80056c8:	20000424 	.word	0x20000424
 80056cc:	20000434 	.word	0x20000434

080056d0 <smooth_speed_transition>:

#define MAX_SPEED_STEP 5  // 每次最大速度变化量
uint8_t smooth_speed_transition(uint8_t current, uint8_t target) {
 80056d0:	b5b0      	push	{r4, r5, r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	460a      	mov	r2, r1
 80056da:	71fb      	strb	r3, [r7, #7]
 80056dc:	4613      	mov	r3, r2
 80056de:	71bb      	strb	r3, [r7, #6]
    if(target > current) {
 80056e0:	79ba      	ldrb	r2, [r7, #6]
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d91b      	bls.n	8005720 <smooth_speed_transition+0x50>
        return fmin(current + MAX_SPEED_STEP, target);
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	3305      	adds	r3, #5
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fa ff19 	bl	8000524 <__aeabi_i2d>
 80056f2:	4604      	mov	r4, r0
 80056f4:	460d      	mov	r5, r1
 80056f6:	79bb      	ldrb	r3, [r7, #6]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fa ff03 	bl	8000504 <__aeabi_ui2d>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	ec43 2b11 	vmov	d1, r2, r3
 8005706:	ec45 4b10 	vmov	d0, r4, r5
 800570a:	f00b f9f7 	bl	8010afc <fmin>
 800570e:	ec53 2b10 	vmov	r2, r3, d0
 8005712:	4610      	mov	r0, r2
 8005714:	4619      	mov	r1, r3
 8005716:	f7fb fa47 	bl	8000ba8 <__aeabi_d2uiz>
 800571a:	4603      	mov	r3, r0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	e020      	b.n	8005762 <smooth_speed_transition+0x92>
    } else if(target < current) {
 8005720:	79ba      	ldrb	r2, [r7, #6]
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	429a      	cmp	r2, r3
 8005726:	d21b      	bcs.n	8005760 <smooth_speed_transition+0x90>
        return fmax(current - MAX_SPEED_STEP, target);
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	3b05      	subs	r3, #5
 800572c:	4618      	mov	r0, r3
 800572e:	f7fa fef9 	bl	8000524 <__aeabi_i2d>
 8005732:	4604      	mov	r4, r0
 8005734:	460d      	mov	r5, r1
 8005736:	79bb      	ldrb	r3, [r7, #6]
 8005738:	4618      	mov	r0, r3
 800573a:	f7fa fee3 	bl	8000504 <__aeabi_ui2d>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	ec43 2b11 	vmov	d1, r2, r3
 8005746:	ec45 4b10 	vmov	d0, r4, r5
 800574a:	f00b f9ad 	bl	8010aa8 <fmax>
 800574e:	ec53 2b10 	vmov	r2, r3, d0
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	f7fb fa27 	bl	8000ba8 <__aeabi_d2uiz>
 800575a:	4603      	mov	r3, r0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	e000      	b.n	8005762 <smooth_speed_transition+0x92>
    }
    return current;
 8005760:	79fb      	ldrb	r3, [r7, #7]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800576c <PID_ResetAll>:

void PID_ResetAll(void) {
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  PID_Reset(&pid_yaw);
 8005770:	4806      	ldr	r0, [pc, #24]	@ (800578c <PID_ResetAll+0x20>)
 8005772:	f002 fc01 	bl	8007f78 <PID_Reset>
  PID_Reset(&pid_rear);
 8005776:	4806      	ldr	r0, [pc, #24]	@ (8005790 <PID_ResetAll+0x24>)
 8005778:	f002 fbfe 	bl	8007f78 <PID_Reset>
  PID_Reset(&pid_front);
 800577c:	4805      	ldr	r0, [pc, #20]	@ (8005794 <PID_ResetAll+0x28>)
 800577e:	f002 fbfb 	bl	8007f78 <PID_Reset>
  PID_Reset(&pid_position);
 8005782:	4805      	ldr	r0, [pc, #20]	@ (8005798 <PID_ResetAll+0x2c>)
 8005784:	f002 fbf8 	bl	8007f78 <PID_Reset>
}
 8005788:	bf00      	nop
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000074 	.word	0x20000074
 8005790:	200000a4 	.word	0x200000a4
 8005794:	2000008c 	.word	0x2000008c
 8005798:	200000bc 	.word	0x200000bc

0800579c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b0c4      	sub	sp, #272	@ 0x110
 80057a0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80057a2:	f004 f927 	bl	80099f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80057a6:	f001 fceb 	bl	8007180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80057aa:	f7ff fbf7 	bl	8004f9c <MX_GPIO_Init>
  MX_I2C1_Init();
 80057ae:	f7ff fd6b 	bl	8005288 <MX_I2C1_Init>
  MX_I2C3_Init();
 80057b2:	f7ff fd97 	bl	80052e4 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80057b6:	f003 fea5 	bl	8009504 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80057ba:	f002 fd6b 	bl	8008294 <MX_TIM1_Init>
  MX_TIM3_Init();
 80057be:	f002 fe15 	bl	80083ec <MX_TIM3_Init>
  MX_TIM4_Init();
 80057c2:	f002 fe67 	bl	8008494 <MX_TIM4_Init>
  MX_TIM5_Init();
 80057c6:	f002 feb9 	bl	800853c <MX_TIM5_Init>
  MX_TIM8_Init();
 80057ca:	f002 ff85 	bl	80086d8 <MX_TIM8_Init>
  MX_TIM9_Init();
 80057ce:	f003 f831 	bl	8008834 <MX_TIM9_Init>
  MX_TIM10_Init();
 80057d2:	f003 f89d 	bl	8008910 <MX_TIM10_Init>
  MX_TIM2_Init();
 80057d6:	f002 fdb5 	bl	8008344 <MX_TIM2_Init>
  MX_UART4_Init();
 80057da:	f003 fe3f 	bl	800945c <MX_UART4_Init>
  MX_UART5_Init();
 80057de:	f003 fe67 	bl	80094b0 <MX_UART5_Init>
  MX_USART2_UART_Init();
 80057e2:	f003 feb9 	bl	8009558 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80057e6:	f003 fee1 	bl	80095ac <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80057ea:	f003 ff09 	bl	8009600 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80057ee:	f002 ff3d 	bl	800866c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80057f2:	f7ff fb19 	bl	8004e28 <OLED_Init>

  HAL_UART_Receive_IT(&huart1, receivedata, 2);
 80057f6:	2202      	movs	r2, #2
 80057f8:	49ba      	ldr	r1, [pc, #744]	@ (8005ae4 <main+0x348>)
 80057fa:	48bb      	ldr	r0, [pc, #748]	@ (8005ae8 <main+0x34c>)
 80057fc:	f007 fc73 	bl	800d0e6 <HAL_UART_Receive_IT>
  // 初始化UART4接收
  HAL_UART_Receive_IT(&huart4, &uart4_rx_buffer, 1);
 8005800:	2201      	movs	r2, #1
 8005802:	49ba      	ldr	r1, [pc, #744]	@ (8005aec <main+0x350>)
 8005804:	48ba      	ldr	r0, [pc, #744]	@ (8005af0 <main+0x354>)
 8005806:	f007 fc6e 	bl	800d0e6 <HAL_UART_Receive_IT>
  
  HAL_TIM_Base_Start(&htim6);
 800580a:	48ba      	ldr	r0, [pc, #744]	@ (8005af4 <main+0x358>)
 800580c:	f006 fb5e 	bl	800becc <HAL_TIM_Base_Start>
  Reset_Timer();  // 重置计时器
 8005810:	f001 fede 	bl	80075d0 <Reset_Timer>
  
  // 初始化MPU6050 DMP
  int mpu_result;
  int retry_count = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  uint32_t init_start_time = HAL_GetTick();
 800581a:	f004 f951 	bl	8009ac0 <HAL_GetTick>
 800581e:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
  
  do {
      mpu_result = MPU6050_DMP_Init();
 8005822:	f7fe ffc9 	bl	80047b8 <MPU6050_DMP_Init>
 8005826:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
      if (mpu_result != 0) {
 800582a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01f      	beq.n	8005872 <main+0xd6>
          retry_count++;
 8005832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005836:	3301      	adds	r3, #1
 8005838:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
          // 只在每10次重试时更新显示，减少OLED操作
          if (retry_count % 10 == 0) {
 800583c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	@ 0xfc
 8005840:	4bad      	ldr	r3, [pc, #692]	@ (8005af8 <main+0x35c>)
 8005842:	fb83 2301 	smull	r2, r3, r3, r1
 8005846:	109a      	asrs	r2, r3, #2
 8005848:	17cb      	asrs	r3, r1, #31
 800584a:	1ad2      	subs	r2, r2, r3
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	1aca      	subs	r2, r1, r3
 8005856:	2a00      	cmp	r2, #0
 8005858:	d10b      	bne.n	8005872 <main+0xd6>
              OLED_ShowString(1,1,"INITING...");
 800585a:	4aa8      	ldr	r2, [pc, #672]	@ (8005afc <main+0x360>)
 800585c:	2101      	movs	r1, #1
 800585e:	2001      	movs	r0, #1
 8005860:	f7ff fa66 	bl	8004d30 <OLED_ShowString>
              OLED_ShowNum(1,11,retry_count,2);
 8005864:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8005868:	2302      	movs	r3, #2
 800586a:	210b      	movs	r1, #11
 800586c:	2001      	movs	r0, #1
 800586e:	f7ff fa9d 	bl	8004dac <OLED_ShowNum>
          }
      }
  } while (mpu_result != 0);
 8005872:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1d3      	bne.n	8005822 <main+0x86>
  
  OLED_Clear();
 800587a:	f7ff f992 	bl	8004ba2 <OLED_Clear>
  OLED_ShowString(1,1,"SUCCESS");
 800587e:	4aa0      	ldr	r2, [pc, #640]	@ (8005b00 <main+0x364>)
 8005880:	2101      	movs	r1, #1
 8005882:	2001      	movs	r0, #1
 8005884:	f7ff fa54 	bl	8004d30 <OLED_ShowString>
  // 显示初始化耗时
  uint32_t init_time = HAL_GetTick() - init_start_time;
 8005888:	f004 f91a 	bl	8009ac0 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  OLED_ShowNum(2,1,init_time,4);
 8005898:	2304      	movs	r3, #4
 800589a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800589e:	2101      	movs	r1, #1
 80058a0:	2002      	movs	r0, #2
 80058a2:	f7ff fa83 	bl	8004dac <OLED_ShowNum>
  OLED_ShowString(2,5,"ms");
 80058a6:	4a97      	ldr	r2, [pc, #604]	@ (8005b04 <main+0x368>)
 80058a8:	2105      	movs	r1, #5
 80058aa:	2002      	movs	r0, #2
 80058ac:	f7ff fa40 	bl	8004d30 <OLED_ShowString>
  // Ultrasonic_Init(&ultrasonic_sensors[2], Trig_3_GPIO_Port, Trig_3_Pin, Echo_3_GPIO_Port, Echo_3_Pin);  // 传感器3
  // Ultrasonic_Init(&ultrasonic_sensors[3], Trig_4_GPIO_Port, Trig_4_Pin, Echo_4_GPIO_Port, Echo_4_Pin);  // 传感器4
  // Ultrasonic_Init(&ultrasonic_sensors[4], Trig_5_GPIO_Port, Trig_5_Pin, Echo_5_GPIO_Port, Echo_5_Pin);  // 传感器5

  // 初始化US100传感器顺时针1234
  US100_Init(&us100_sensor2, &huart5);
 80058b0:	4995      	ldr	r1, [pc, #596]	@ (8005b08 <main+0x36c>)
 80058b2:	4896      	ldr	r0, [pc, #600]	@ (8005b0c <main+0x370>)
 80058b4:	f003 fbdc 	bl	8009070 <US100_Init>
  US100_Init(&us100_sensor1, &huart4);
 80058b8:	498d      	ldr	r1, [pc, #564]	@ (8005af0 <main+0x354>)
 80058ba:	4895      	ldr	r0, [pc, #596]	@ (8005b10 <main+0x374>)
 80058bc:	f003 fbd8 	bl	8009070 <US100_Init>
  US100_Init(&us100_sensor4, &huart3);
 80058c0:	4994      	ldr	r1, [pc, #592]	@ (8005b14 <main+0x378>)
 80058c2:	4895      	ldr	r0, [pc, #596]	@ (8005b18 <main+0x37c>)
 80058c4:	f003 fbd4 	bl	8009070 <US100_Init>
  US100_Init(&us100_sensor3, &huart2);
 80058c8:	4994      	ldr	r1, [pc, #592]	@ (8005b1c <main+0x380>)
 80058ca:	4895      	ldr	r0, [pc, #596]	@ (8005b20 <main+0x384>)
 80058cc:	f003 fbd0 	bl	8009070 <US100_Init>
  
  // 等待一段时间，确保传感器稳定
  HAL_Delay(50);
 80058d0:	2032      	movs	r0, #50	@ 0x32
 80058d2:	f004 f901 	bl	8009ad8 <HAL_Delay>
  
  // 开始第一次测量
  US100_StartMeasurement(&us100_sensor1);
 80058d6:	488e      	ldr	r0, [pc, #568]	@ (8005b10 <main+0x374>)
 80058d8:	f003 fc0c 	bl	80090f4 <US100_StartMeasurement>
  US100_StartMeasurement(&us100_sensor2);
 80058dc:	488b      	ldr	r0, [pc, #556]	@ (8005b0c <main+0x370>)
 80058de:	f003 fc09 	bl	80090f4 <US100_StartMeasurement>
  US100_StartMeasurement(&us100_sensor3);
 80058e2:	488f      	ldr	r0, [pc, #572]	@ (8005b20 <main+0x384>)
 80058e4:	f003 fc06 	bl	80090f4 <US100_StartMeasurement>
  US100_StartMeasurement(&us100_sensor4);
 80058e8:	488b      	ldr	r0, [pc, #556]	@ (8005b18 <main+0x37c>)
 80058ea:	f003 fc03 	bl	80090f4 <US100_StartMeasurement>

  Motor_Init(MOTOR_1,
 80058ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005b24 <main+0x388>)
 80058f0:	9303      	str	r3, [sp, #12]
 80058f2:	2380      	movs	r3, #128	@ 0x80
 80058f4:	9302      	str	r3, [sp, #8]
 80058f6:	4b8c      	ldr	r3, [pc, #560]	@ (8005b28 <main+0x38c>)
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	2301      	movs	r3, #1
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	4b8b      	ldr	r3, [pc, #556]	@ (8005b2c <main+0x390>)
 8005900:	2200      	movs	r2, #0
 8005902:	498b      	ldr	r1, [pc, #556]	@ (8005b30 <main+0x394>)
 8005904:	2000      	movs	r0, #0
 8005906:	f001 fcab 	bl	8007260 <Motor_Init>
            &htim5, TIM_CHANNEL_1,
            M1_IN1_GPIO_Port, M1_IN1_Pin,
            M1_IN2_GPIO_Port, M1_IN2_Pin,
            &htim1);

  Motor_Init(MOTOR_2,
 800590a:	4b8a      	ldr	r3, [pc, #552]	@ (8005b34 <main+0x398>)
 800590c:	9303      	str	r3, [sp, #12]
 800590e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005912:	9302      	str	r3, [sp, #8]
 8005914:	4b88      	ldr	r3, [pc, #544]	@ (8005b38 <main+0x39c>)
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	2308      	movs	r3, #8
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	4b83      	ldr	r3, [pc, #524]	@ (8005b2c <main+0x390>)
 800591e:	2204      	movs	r2, #4
 8005920:	4983      	ldr	r1, [pc, #524]	@ (8005b30 <main+0x394>)
 8005922:	2001      	movs	r0, #1
 8005924:	f001 fc9c 	bl	8007260 <Motor_Init>
            &htim5, TIM_CHANNEL_2,
            M2_IN1_GPIO_Port, M2_IN1_Pin,
            M2_IN2_GPIO_Port, M2_IN2_Pin,
            &htim4);

  Motor_Init(MOTOR_3,
 8005928:	4b84      	ldr	r3, [pc, #528]	@ (8005b3c <main+0x3a0>)
 800592a:	9303      	str	r3, [sp, #12]
 800592c:	2302      	movs	r3, #2
 800592e:	9302      	str	r3, [sp, #8]
 8005930:	4b83      	ldr	r3, [pc, #524]	@ (8005b40 <main+0x3a4>)
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	2320      	movs	r3, #32
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	4b82      	ldr	r3, [pc, #520]	@ (8005b44 <main+0x3a8>)
 800593a:	2208      	movs	r2, #8
 800593c:	497c      	ldr	r1, [pc, #496]	@ (8005b30 <main+0x394>)
 800593e:	2002      	movs	r0, #2
 8005940:	f001 fc8e 	bl	8007260 <Motor_Init>
            &htim5, TIM_CHANNEL_3,
            M3_IN1_GPIO_Port, M3_IN1_Pin,
            M3_IN2_GPIO_Port, M3_IN2_Pin,
            &htim3);

  Motor_Init(MOTOR_4,
 8005944:	4b80      	ldr	r3, [pc, #512]	@ (8005b48 <main+0x3ac>)
 8005946:	9303      	str	r3, [sp, #12]
 8005948:	2308      	movs	r3, #8
 800594a:	9302      	str	r3, [sp, #8]
 800594c:	4b7d      	ldr	r3, [pc, #500]	@ (8005b44 <main+0x3a8>)
 800594e:	9301      	str	r3, [sp, #4]
 8005950:	2302      	movs	r3, #2
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	4b7b      	ldr	r3, [pc, #492]	@ (8005b44 <main+0x3a8>)
 8005956:	220c      	movs	r2, #12
 8005958:	4975      	ldr	r1, [pc, #468]	@ (8005b30 <main+0x394>)
 800595a:	2003      	movs	r0, #3
 800595c:	f001 fc80 	bl	8007260 <Motor_Init>
            &htim5, TIM_CHANNEL_4,
            M4_IN1_GPIO_Port, M4_IN1_Pin,
            M4_IN2_GPIO_Port, M4_IN2_Pin,
            &htim2);

  Servo_Init(&servo1, &htim8, TIM_CHANNEL_1, Servo_1_GPIO_Port, Servo_1_Pin);
 8005960:	2340      	movs	r3, #64	@ 0x40
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	4b77      	ldr	r3, [pc, #476]	@ (8005b44 <main+0x3a8>)
 8005966:	2200      	movs	r2, #0
 8005968:	4978      	ldr	r1, [pc, #480]	@ (8005b4c <main+0x3b0>)
 800596a:	4879      	ldr	r0, [pc, #484]	@ (8005b50 <main+0x3b4>)
 800596c:	f7ff fab2 	bl	8004ed4 <Servo_Init>
  Servo_Init(&servo2, &htim8, TIM_CHANNEL_2, Servo_2_GPIO_Port, Servo_2_Pin);
 8005970:	2380      	movs	r3, #128	@ 0x80
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	4b73      	ldr	r3, [pc, #460]	@ (8005b44 <main+0x3a8>)
 8005976:	2204      	movs	r2, #4
 8005978:	4974      	ldr	r1, [pc, #464]	@ (8005b4c <main+0x3b0>)
 800597a:	4876      	ldr	r0, [pc, #472]	@ (8005b54 <main+0x3b8>)
 800597c:	f7ff faaa 	bl	8004ed4 <Servo_Init>
  Servo_Init(&servo3, &htim9, TIM_CHANNEL_1, Servo_3_GPIO_Port, Servo_3_Pin);
 8005980:	2320      	movs	r3, #32
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	4b68      	ldr	r3, [pc, #416]	@ (8005b28 <main+0x38c>)
 8005986:	2200      	movs	r2, #0
 8005988:	4973      	ldr	r1, [pc, #460]	@ (8005b58 <main+0x3bc>)
 800598a:	4874      	ldr	r0, [pc, #464]	@ (8005b5c <main+0x3c0>)
 800598c:	f7ff faa2 	bl	8004ed4 <Servo_Init>
  Servo_Init(&servo4, &htim9, TIM_CHANNEL_2, Servo_4_GPIO_Port, Servo_4_Pin);
 8005990:	2340      	movs	r3, #64	@ 0x40
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	4b64      	ldr	r3, [pc, #400]	@ (8005b28 <main+0x38c>)
 8005996:	2204      	movs	r2, #4
 8005998:	496f      	ldr	r1, [pc, #444]	@ (8005b58 <main+0x3bc>)
 800599a:	4871      	ldr	r0, [pc, #452]	@ (8005b60 <main+0x3c4>)
 800599c:	f7ff fa9a 	bl	8004ed4 <Servo_Init>
  Servo_Init(&servo5, &htim10, TIM_CHANNEL_1, Servo_5_GPIO_Port, Servo_5_Pin);
 80059a0:	2340      	movs	r3, #64	@ 0x40
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	4b6f      	ldr	r3, [pc, #444]	@ (8005b64 <main+0x3c8>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	496f      	ldr	r1, [pc, #444]	@ (8005b68 <main+0x3cc>)
 80059aa:	4870      	ldr	r0, [pc, #448]	@ (8005b6c <main+0x3d0>)
 80059ac:	f7ff fa92 	bl	8004ed4 <Servo_Init>

  prev_time = HAL_GetTick();
 80059b0:	f004 f886 	bl	8009ac0 <HAL_GetTick>
 80059b4:	4603      	mov	r3, r0
 80059b6:	4a6e      	ldr	r2, [pc, #440]	@ (8005b70 <main+0x3d4>)
 80059b8:	6013      	str	r3, [r2, #0]

  /*------------------------------------MPU6050 DMP执行部分-------------------------------------*/
    OLED_ShowString(3,1,"yaw:");
 80059ba:	4a6e      	ldr	r2, [pc, #440]	@ (8005b74 <main+0x3d8>)
 80059bc:	2101      	movs	r1, #1
 80059be:	2003      	movs	r0, #3
 80059c0:	f7ff f9b6 	bl	8004d30 <OLED_ShowString>
    OLED_ShowString(3,9,"TAR:");
 80059c4:	4a6c      	ldr	r2, [pc, #432]	@ (8005b78 <main+0x3dc>)
 80059c6:	2109      	movs	r1, #9
 80059c8:	2003      	movs	r0, #3
 80059ca:	f7ff f9b1 	bl	8004d30 <OLED_ShowString>

  
  // 设置目标偏航角为当前偏航角
  target_yaw = yaw;
 80059ce:	4b6b      	ldr	r3, [pc, #428]	@ (8005b7c <main+0x3e0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a6b      	ldr	r2, [pc, #428]	@ (8005b80 <main+0x3e4>)
 80059d4:	6013      	str	r3, [r2, #0]
  
  // 重置PID控制器，避免积分项累积
  PID_Reset(&pid_yaw);
 80059d6:	486b      	ldr	r0, [pc, #428]	@ (8005b84 <main+0x3e8>)
 80059d8:	f002 face 	bl	8007f78 <PID_Reset>
  PID_Reset(&pid_encoder);
 80059dc:	486a      	ldr	r0, [pc, #424]	@ (8005b88 <main+0x3ec>)
 80059de:	f002 facb 	bl	8007f78 <PID_Reset>
  OLED_Clear_Part(1,1,5);
 80059e2:	2205      	movs	r2, #5
 80059e4:	2101      	movs	r1, #1
 80059e6:	2001      	movs	r0, #1
 80059e8:	f7ff f8fe 	bl	8004be8 <OLED_Clear_Part>
  OLED_ShowString(1, 6, "mm");
 80059ec:	4a67      	ldr	r2, [pc, #412]	@ (8005b8c <main+0x3f0>)
 80059ee:	2106      	movs	r1, #6
 80059f0:	2001      	movs	r0, #1
 80059f2:	f7ff f99d 	bl	8004d30 <OLED_ShowString>
  OLED_ShowString(1, 14, "mm");
 80059f6:	4a65      	ldr	r2, [pc, #404]	@ (8005b8c <main+0x3f0>)
 80059f8:	210e      	movs	r1, #14
 80059fa:	2001      	movs	r0, #1
 80059fc:	f7ff f998 	bl	8004d30 <OLED_ShowString>
  OLED_ShowString(2, 6, "mm");
 8005a00:	4a62      	ldr	r2, [pc, #392]	@ (8005b8c <main+0x3f0>)
 8005a02:	2106      	movs	r1, #6
 8005a04:	2002      	movs	r0, #2
 8005a06:	f7ff f993 	bl	8004d30 <OLED_ShowString>
  OLED_ShowString(2, 14, "mm");
 8005a0a:	4a60      	ldr	r2, [pc, #384]	@ (8005b8c <main+0x3f0>)
 8005a0c:	210e      	movs	r1, #14
 8005a0e:	2002      	movs	r0, #2
 8005a10:	f7ff f98e 	bl	8004d30 <OLED_ShowString>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uint32_t current_time = HAL_GetTick();
 8005a14:	f004 f854 	bl	8009ac0 <HAL_GetTick>
 8005a18:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
    
    // 添加延时，确保超声波传感器有足够的时间完成测量
    // HAL_Delay(50);  // 增加延时到50ms，给传感器更多恢复时间

    /*----------------------------------------------------------------------------US100传感器执行部分-------------------------------------------------------------*/
    US100_GetAllValidDistances(distances);
 8005a1c:	485c      	ldr	r0, [pc, #368]	@ (8005b90 <main+0x3f4>)
 8005a1e:	f003 fc71 	bl	8009304 <US100_GetAllValidDistances>
    
    if (current_time - oled_prev_time >= 100) {  // 每100ms更新一次显示
 8005a22:	4b5c      	ldr	r3, [pc, #368]	@ (8005b94 <main+0x3f8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b63      	cmp	r3, #99	@ 0x63
 8005a2e:	d933      	bls.n	8005a98 <main+0x2fc>
        // 显示超声波距离，即使某些传感器没有数据也显示
        OLED_ShowNum(1, 1, distances[0], 5);  // 左前
 8005a30:	4b57      	ldr	r3, [pc, #348]	@ (8005b90 <main+0x3f4>)
 8005a32:	edd3 7a00 	vldr	s15, [r3]
 8005a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a3a:	2305      	movs	r3, #5
 8005a3c:	ee17 2a90 	vmov	r2, s15
 8005a40:	2101      	movs	r1, #1
 8005a42:	2001      	movs	r0, #1
 8005a44:	f7ff f9b2 	bl	8004dac <OLED_ShowNum>
        OLED_ShowNum(1, 9, distances[1], 5);  // 右前
 8005a48:	4b51      	ldr	r3, [pc, #324]	@ (8005b90 <main+0x3f4>)
 8005a4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a52:	2305      	movs	r3, #5
 8005a54:	ee17 2a90 	vmov	r2, s15
 8005a58:	2109      	movs	r1, #9
 8005a5a:	2001      	movs	r0, #1
 8005a5c:	f7ff f9a6 	bl	8004dac <OLED_ShowNum>
        OLED_ShowNum(2, 1, distances[2], 5);  // 左后
 8005a60:	4b4b      	ldr	r3, [pc, #300]	@ (8005b90 <main+0x3f4>)
 8005a62:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a6a:	2305      	movs	r3, #5
 8005a6c:	ee17 2a90 	vmov	r2, s15
 8005a70:	2101      	movs	r1, #1
 8005a72:	2002      	movs	r0, #2
 8005a74:	f7ff f99a 	bl	8004dac <OLED_ShowNum>
        OLED_ShowNum(2, 9, distances[3], 5);  // 右后
 8005a78:	4b45      	ldr	r3, [pc, #276]	@ (8005b90 <main+0x3f4>)
 8005a7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a82:	2305      	movs	r3, #5
 8005a84:	ee17 2a90 	vmov	r2, s15
 8005a88:	2109      	movs	r1, #9
 8005a8a:	2002      	movs	r0, #2
 8005a8c:	f7ff f98e 	bl	8004dac <OLED_ShowNum>
        oled_prev_time = current_time;
 8005a90:	4a40      	ldr	r2, [pc, #256]	@ (8005b94 <main+0x3f8>)
 8005a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a96:	6013      	str	r3, [r2, #0]
    }

    if(delay_flag) 
 8005a98:	4b3f      	ldr	r3, [pc, #252]	@ (8005b98 <main+0x3fc>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d006      	beq.n	8005aae <main+0x312>
    {
      HAL_Delay(500);
 8005aa0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005aa4:	f004 f818 	bl	8009ad8 <HAL_Delay>
      delay_flag=false;
 8005aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8005b98 <main+0x3fc>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	701a      	strb	r2, [r3, #0]
    /*---------------------------------------------------------------电机执行部分---------------------------------------------------------------------------------*/
    // straight_us100(distances[0]);
    // Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, 60, &yaw, &target_yaw);
    // Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, 60, &yaw, &target_yaw);
    // Update_Target_Yaw(&yaw, &target_yaw);
    OLED_ShowChar(3,5,yaw >= 0 ? '+' : '-'); 
 8005aae:	4b33      	ldr	r3, [pc, #204]	@ (8005b7c <main+0x3e0>)
 8005ab0:	edd3 7a00 	vldr	s15, [r3]
 8005ab4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005abc:	db01      	blt.n	8005ac2 <main+0x326>
 8005abe:	232b      	movs	r3, #43	@ 0x2b
 8005ac0:	e000      	b.n	8005ac4 <main+0x328>
 8005ac2:	232d      	movs	r3, #45	@ 0x2d
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2105      	movs	r1, #5
 8005ac8:	2003      	movs	r0, #3
 8005aca:	f7ff f8d9 	bl	8004c80 <OLED_ShowChar>
    OLED_ShowChar(3,13,target_yaw >= 0 ? '+' : '-'); 
 8005ace:	4b2c      	ldr	r3, [pc, #176]	@ (8005b80 <main+0x3e4>)
 8005ad0:	edd3 7a00 	vldr	s15, [r3]
 8005ad4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005adc:	db5e      	blt.n	8005b9c <main+0x400>
 8005ade:	232b      	movs	r3, #43	@ 0x2b
 8005ae0:	e05d      	b.n	8005b9e <main+0x402>
 8005ae2:	bf00      	nop
 8005ae4:	2000044c 	.word	0x2000044c
 8005ae8:	20000914 	.word	0x20000914
 8005aec:	2000044e 	.word	0x2000044e
 8005af0:	20000884 	.word	0x20000884
 8005af4:	200006ac 	.word	0x200006ac
 8005af8:	66666667 	.word	0x66666667
 8005afc:	080117e0 	.word	0x080117e0
 8005b00:	080117ec 	.word	0x080117ec
 8005b04:	080117f4 	.word	0x080117f4
 8005b08:	200008cc 	.word	0x200008cc
 8005b0c:	200004c8 	.word	0x200004c8
 8005b10:	200004b4 	.word	0x200004b4
 8005b14:	200009a4 	.word	0x200009a4
 8005b18:	200004f0 	.word	0x200004f0
 8005b1c:	2000095c 	.word	0x2000095c
 8005b20:	200004dc 	.word	0x200004dc
 8005b24:	20000544 	.word	0x20000544
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	40021800 	.word	0x40021800
 8005b30:	20000664 	.word	0x20000664
 8005b34:	2000061c 	.word	0x2000061c
 8005b38:	40020c00 	.word	0x40020c00
 8005b3c:	200005d4 	.word	0x200005d4
 8005b40:	40020400 	.word	0x40020400
 8005b44:	40020800 	.word	0x40020800
 8005b48:	2000058c 	.word	0x2000058c
 8005b4c:	200006f4 	.word	0x200006f4
 8005b50:	20000450 	.word	0x20000450
 8005b54:	20000464 	.word	0x20000464
 8005b58:	2000073c 	.word	0x2000073c
 8005b5c:	20000478 	.word	0x20000478
 8005b60:	2000048c 	.word	0x2000048c
 8005b64:	40021400 	.word	0x40021400
 8005b68:	20000784 	.word	0x20000784
 8005b6c:	200004a0 	.word	0x200004a0
 8005b70:	2000040c 	.word	0x2000040c
 8005b74:	080117f8 	.word	0x080117f8
 8005b78:	08011800 	.word	0x08011800
 8005b7c:	20000510 	.word	0x20000510
 8005b80:	2000050c 	.word	0x2000050c
 8005b84:	20000074 	.word	0x20000074
 8005b88:	2000005c 	.word	0x2000005c
 8005b8c:	08011808 	.word	0x08011808
 8005b90:	20000038 	.word	0x20000038
 8005b94:	20000410 	.word	0x20000410
 8005b98:	2000004d 	.word	0x2000004d
 8005b9c:	232d      	movs	r3, #45	@ 0x2d
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	210d      	movs	r1, #13
 8005ba2:	2003      	movs	r0, #3
 8005ba4:	f7ff f86c 	bl	8004c80 <OLED_ShowChar>
    OLED_ShowNum(3,14,fabsf(target_yaw),3);
 8005ba8:	4bbd      	ldr	r3, [pc, #756]	@ (8005ea0 <main+0x704>)
 8005baa:	edd3 7a00 	vldr	s15, [r3]
 8005bae:	eef0 7ae7 	vabs.f32	s15, s15
 8005bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	ee17 2a90 	vmov	r2, s15
 8005bbc:	210e      	movs	r1, #14
 8005bbe:	2003      	movs	r0, #3
 8005bc0:	f7ff f8f4 	bl	8004dac <OLED_ShowNum>
    OLED_ShowNum(3,6,fabsf(yaw),3);
 8005bc4:	4bb7      	ldr	r3, [pc, #732]	@ (8005ea4 <main+0x708>)
 8005bc6:	edd3 7a00 	vldr	s15, [r3]
 8005bca:	eef0 7ae7 	vabs.f32	s15, s15
 8005bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	ee17 2a90 	vmov	r2, s15
 8005bd8:	2106      	movs	r1, #6
 8005bda:	2003      	movs	r0, #3
 8005bdc:	f7ff f8e6 	bl	8004dac <OLED_ShowNum>
    
    OLED_ShowNum(4,1,path,2);  // 显示毫秒
 8005be0:	4bb1      	ldr	r3, [pc, #708]	@ (8005ea8 <main+0x70c>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	2302      	movs	r3, #2
 8005be6:	2101      	movs	r1, #1
 8005be8:	2004      	movs	r0, #4
 8005bea:	f7ff f8df 	bl	8004dac <OLED_ShowNum>
    // OLED_ShowNum(4,4,time,4); OLED_ShowNum(4,10,time_start,4);
    meandistances(distances);
 8005bee:	48af      	ldr	r0, [pc, #700]	@ (8005eac <main+0x710>)
 8005bf0:	f7ff fc82 	bl	80054f8 <meandistances>

    switch (path)
 8005bf4:	4bac      	ldr	r3, [pc, #688]	@ (8005ea8 <main+0x70c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b0c      	cmp	r3, #12
 8005bfa:	f63f af0b 	bhi.w	8005a14 <main+0x278>
 8005bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8005c04 <main+0x468>)
 8005c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c04:	08005c39 	.word	0x08005c39
 8005c08:	08005d8b 	.word	0x08005d8b
 8005c0c:	08005f19 	.word	0x08005f19
 8005c10:	080060b7 	.word	0x080060b7
 8005c14:	0800625f 	.word	0x0800625f
 8005c18:	080063fd 	.word	0x080063fd
 8005c1c:	080065a7 	.word	0x080065a7
 8005c20:	08006749 	.word	0x08006749
 8005c24:	080068f7 	.word	0x080068f7
 8005c28:	08006a93 	.word	0x08006a93
 8005c2c:	08006c41 	.word	0x08006c41
 8005c30:	08006ddd 	.word	0x08006ddd
 8005c34:	08006f89 	.word	0x08006f89
    {
    case 0: {
      // 参数定义
      const float TARGET_DISTANCE = 70.0f;   // 目标保持距离
 8005c38:	4b9d      	ldr	r3, [pc, #628]	@ (8005eb0 <main+0x714>)
 8005c3a:	623b      	str	r3, [r7, #32]
      const float DECEL_RANGE = 100.0f;      // 减速区间范围（70~170mm）
 8005c3c:	4b9d      	ldr	r3, [pc, #628]	@ (8005eb4 <main+0x718>)
 8005c3e:	61fb      	str	r3, [r7, #28]
      const uint8_t MIN_SPEED = 10;          // 最小速度（靠近时）
 8005c40:	230a      	movs	r3, #10
 8005c42:	76fb      	strb	r3, [r7, #27]
      const uint8_t MAX_SPEED = 60;          // 最大速度（远端时）
 8005c44:	233c      	movs	r3, #60	@ 0x3c
 8005c46:	76bb      	strb	r3, [r7, #26]
  
      // 获取当前检测距离（使用第4个传感器）
      float current_distance = distances[3]; 
 8005c48:	4b98      	ldr	r3, [pc, #608]	@ (8005eac <main+0x710>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	617b      	str	r3, [r7, #20]
  
      // 速度计算逻辑
      uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 8005c4e:	7ebb      	ldrb	r3, [r7, #26]
 8005c50:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
  
      if (current_distance <= TARGET_DISTANCE) {
 8005c54:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c58:	edd7 7a08 	vldr	s15, [r7, #32]
 8005c5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c64:	d821      	bhi.n	8005caa <main+0x50e>
          // 区域3：到达目标距离（≤70mm）
          motor_speed = MIN_SPEED;
 8005c66:	7efb      	ldrb	r3, [r7, #27]
 8005c68:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
  
          // 执行路径切换逻辑
          if(flag) {
 8005c6c:	4b92      	ldr	r3, [pc, #584]	@ (8005eb8 <main+0x71c>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d007      	beq.n	8005c84 <main+0x4e8>
              time_start = HAL_GetTick();
 8005c74:	f003 ff24 	bl	8009ac0 <HAL_GetTick>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	4a90      	ldr	r2, [pc, #576]	@ (8005ebc <main+0x720>)
 8005c7c:	6013      	str	r3, [r2, #0]
              flag = false;
 8005c7e:	4b8e      	ldr	r3, [pc, #568]	@ (8005eb8 <main+0x71c>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	701a      	strb	r2, [r3, #0]
          }
          if(HAL_GetTick() - time_start >= 100) {
 8005c84:	f003 ff1c 	bl	8009ac0 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	4b8c      	ldr	r3, [pc, #560]	@ (8005ebc <main+0x720>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b63      	cmp	r3, #99	@ 0x63
 8005c92:	d954      	bls.n	8005d3e <main+0x5a2>
              path += 1;
 8005c94:	4b84      	ldr	r3, [pc, #528]	@ (8005ea8 <main+0x70c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	4a83      	ldr	r2, [pc, #524]	@ (8005ea8 <main+0x70c>)
 8005c9c:	6013      	str	r3, [r2, #0]
              PID_ResetAll(); // 重置所有PID控制器
 8005c9e:	f7ff fd65 	bl	800576c <PID_ResetAll>
              flag = true;
 8005ca2:	4b85      	ldr	r3, [pc, #532]	@ (8005eb8 <main+0x71c>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	701a      	strb	r2, [r3, #0]
 8005ca8:	e049      	b.n	8005d3e <main+0x5a2>
          }
      } 
      else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8005caa:	ed97 7a08 	vldr	s14, [r7, #32]
 8005cae:	edd7 7a07 	vldr	s15, [r7, #28]
 8005cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cb6:	ed97 7a05 	vldr	s14, [r7, #20]
 8005cba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc2:	d839      	bhi.n	8005d38 <main+0x59c>
          // 区域2：减速区间（70~170mm）
          // 距离越近速度越慢，线性变化：170mm->60, 70mm->10
          float distance_from_target = current_distance - TARGET_DISTANCE;
 8005cc4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005cc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cd0:	edc7 7a04 	vstr	s15, [r7, #16]
          float ratio = 1.0f - (distance_from_target / DECEL_RANGE);
 8005cd4:	edd7 6a04 	vldr	s13, [r7, #16]
 8005cd8:	ed97 7a07 	vldr	s14, [r7, #28]
 8005cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ce0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ce8:	edc7 7a03 	vstr	s15, [r7, #12]
          motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 8005cec:	7eba      	ldrb	r2, [r7, #26]
 8005cee:	7efb      	ldrb	r3, [r7, #27]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d06:	edc7 7a01 	vstr	s15, [r7, #4]
 8005d0a:	793b      	ldrb	r3, [r7, #4]
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	7efb      	ldrb	r3, [r7, #27]
 8005d10:	4413      	add	r3, r2
 8005d12:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
          motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8005d16:	f897 20fb 	ldrb.w	r2, [r7, #251]	@ 0xfb
 8005d1a:	7efb      	ldrb	r3, [r7, #27]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d307      	bcc.n	8005d30 <main+0x594>
 8005d20:	f897 20fb 	ldrb.w	r2, [r7, #251]	@ 0xfb
 8005d24:	7ebb      	ldrb	r3, [r7, #26]
 8005d26:	4293      	cmp	r3, r2
 8005d28:	bf28      	it	cs
 8005d2a:	4613      	movcs	r3, r2
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	e000      	b.n	8005d32 <main+0x596>
 8005d30:	7efb      	ldrb	r3, [r7, #27]
 8005d32:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
 8005d36:	e002      	b.n	8005d3e <main+0x5a2>
      }
      else {
          // 区域1：全速区间（>170mm）
          motor_speed = MAX_SPEED;
 8005d38:	7ebb      	ldrb	r3, [r7, #26]
 8005d3a:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
      }
  
      // 执行带平滑过渡的电机控制
      static uint8_t last_speed = 0;
      motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8005d3e:	4b60      	ldr	r3, [pc, #384]	@ (8005ec0 <main+0x724>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	f897 20fb 	ldrb.w	r2, [r7, #251]	@ 0xfb
 8005d46:	4611      	mov	r1, r2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff fcc1 	bl	80056d0 <smooth_speed_transition>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
      last_speed = motor_speed;
 8005d54:	4a5a      	ldr	r2, [pc, #360]	@ (8005ec0 <main+0x724>)
 8005d56:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8005d5a:	7013      	strb	r3, [r2, #0]
  
      Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8005d5c:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8005d60:	b21b      	sxth	r3, r3
 8005d62:	4a4f      	ldr	r2, [pc, #316]	@ (8005ea0 <main+0x704>)
 8005d64:	9202      	str	r2, [sp, #8]
 8005d66:	4a4f      	ldr	r2, [pc, #316]	@ (8005ea4 <main+0x708>)
 8005d68:	9201      	str	r2, [sp, #4]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	2202      	movs	r2, #2
 8005d70:	2101      	movs	r1, #1
 8005d72:	2000      	movs	r0, #0
 8005d74:	f001 fe60 	bl	8007a38 <Motor_Straight>
  
      OLED_ShowNum(4, 4, motor_speed, 2);
 8005d78:	f897 20fb 	ldrb.w	r2, [r7, #251]	@ 0xfb
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	2104      	movs	r1, #4
 8005d80:	2004      	movs	r0, #4
 8005d82:	f7ff f813 	bl	8004dac <OLED_ShowNum>
      break;
 8005d86:	f001 b9dd 	b.w	8007144 <main+0x19a8>
  }
    
      case 1: {
        // 参数定义
        const float TARGET_DISTANCE = 70.0f;   // 目标保持距离
 8005d8a:	4b49      	ldr	r3, [pc, #292]	@ (8005eb0 <main+0x714>)
 8005d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
        const float DECEL_RANGE = 100.0f;      // 减速区间范围（70~170mm）
 8005d8e:	4b49      	ldr	r3, [pc, #292]	@ (8005eb4 <main+0x718>)
 8005d90:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t MIN_SPEED = 10;          // 最小速度（靠近时）
 8005d92:	230a      	movs	r3, #10
 8005d94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        const uint8_t MAX_SPEED = 60;          // 最大速度（远端时）
 8005d98:	233c      	movs	r3, #60	@ 0x3c
 8005d9a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    
        // 获取当前检测距离（使用第4个传感器）
        float current_distance = distances[3]; 
 8005d9e:	4b43      	ldr	r3, [pc, #268]	@ (8005eac <main+0x710>)
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
        // 速度计算逻辑
        uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 8005da4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005da8:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
    
        if (current_distance <= TARGET_DISTANCE) {
 8005dac:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8005db0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dbc:	d822      	bhi.n	8005e04 <main+0x668>
            // 区域3：到达目标距离（≤70mm）
            motor_speed = MIN_SPEED;
 8005dbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005dc2:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
    
            // 执行路径切换逻辑
            if(flag) {
 8005dc6:	4b3c      	ldr	r3, [pc, #240]	@ (8005eb8 <main+0x71c>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <main+0x642>
                time_start = HAL_GetTick();
 8005dce:	f003 fe77 	bl	8009ac0 <HAL_GetTick>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	4a39      	ldr	r2, [pc, #228]	@ (8005ebc <main+0x720>)
 8005dd6:	6013      	str	r3, [r2, #0]
                flag = false;
 8005dd8:	4b37      	ldr	r3, [pc, #220]	@ (8005eb8 <main+0x71c>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	701a      	strb	r2, [r3, #0]
            }
            if(HAL_GetTick() - time_start >= 100) {
 8005dde:	f003 fe6f 	bl	8009ac0 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	4b35      	ldr	r3, [pc, #212]	@ (8005ebc <main+0x720>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b63      	cmp	r3, #99	@ 0x63
 8005dec:	d96e      	bls.n	8005ecc <main+0x730>
                path += 1;
 8005dee:	4b2e      	ldr	r3, [pc, #184]	@ (8005ea8 <main+0x70c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3301      	adds	r3, #1
 8005df4:	4a2c      	ldr	r2, [pc, #176]	@ (8005ea8 <main+0x70c>)
 8005df6:	6013      	str	r3, [r2, #0]
                PID_ResetAll(); // 重置所有PID控制器
 8005df8:	f7ff fcb8 	bl	800576c <PID_ResetAll>
                flag = true;
 8005dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8005eb8 <main+0x71c>)
 8005dfe:	2201      	movs	r2, #1
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	e063      	b.n	8005ecc <main+0x730>
            }
        } 
        else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8005e04:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8005e08:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e10:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8005e14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e1c:	d852      	bhi.n	8005ec4 <main+0x728>
            // 区域2：减速区间（70~170mm）
            // 距离越近速度越慢，线性变化：170mm->60, 70mm->10
            float distance_from_target = current_distance - TARGET_DISTANCE;
 8005e1e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8005e22:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005e26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e2a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float ratio = 1.0f - (distance_from_target / DECEL_RANGE);
 8005e2e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005e32:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8005e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e42:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 8005e46:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8005e4a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	ee07 3a90 	vmov	s15, r3
 8005e54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e58:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e64:	edc7 7a01 	vstr	s15, [r7, #4]
 8005e68:	793b      	ldrb	r3, [r7, #4]
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e70:	4413      	add	r3, r2
 8005e72:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
            motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8005e76:	f897 20fa 	ldrb.w	r2, [r7, #250]	@ 0xfa
 8005e7a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d308      	bcc.n	8005e94 <main+0x6f8>
 8005e82:	f897 20fa 	ldrb.w	r2, [r7, #250]	@ 0xfa
 8005e86:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	bf28      	it	cs
 8005e8e:	4613      	movcs	r3, r2
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	e001      	b.n	8005e98 <main+0x6fc>
 8005e94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e98:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
 8005e9c:	e016      	b.n	8005ecc <main+0x730>
 8005e9e:	bf00      	nop
 8005ea0:	2000050c 	.word	0x2000050c
 8005ea4:	20000510 	.word	0x20000510
 8005ea8:	20000414 	.word	0x20000414
 8005eac:	20000038 	.word	0x20000038
 8005eb0:	428c0000 	.word	0x428c0000
 8005eb4:	42c80000 	.word	0x42c80000
 8005eb8:	2000004c 	.word	0x2000004c
 8005ebc:	20000420 	.word	0x20000420
 8005ec0:	20000504 	.word	0x20000504
        }
        else {
            // 区域1：全速区间（>170mm）
            motor_speed = MAX_SPEED;
 8005ec4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005ec8:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
        }
    
        // 执行带平滑过渡的电机控制
        static uint8_t last_speed = 0;
        motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8005ecc:	4b98      	ldr	r3, [pc, #608]	@ (8006130 <main+0x994>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	f897 20fa 	ldrb.w	r2, [r7, #250]	@ 0xfa
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff fbfa 	bl	80056d0 <smooth_speed_transition>
 8005edc:	4603      	mov	r3, r0
 8005ede:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
        last_speed = motor_speed;
 8005ee2:	4a93      	ldr	r2, [pc, #588]	@ (8006130 <main+0x994>)
 8005ee4:	f897 30fa 	ldrb.w	r3, [r7, #250]	@ 0xfa
 8005ee8:	7013      	strb	r3, [r2, #0]
    
        Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8005eea:	f897 30fa 	ldrb.w	r3, [r7, #250]	@ 0xfa
 8005eee:	b21b      	sxth	r3, r3
 8005ef0:	4a90      	ldr	r2, [pc, #576]	@ (8006134 <main+0x998>)
 8005ef2:	9202      	str	r2, [sp, #8]
 8005ef4:	4a90      	ldr	r2, [pc, #576]	@ (8006138 <main+0x99c>)
 8005ef6:	9201      	str	r2, [sp, #4]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	2303      	movs	r3, #3
 8005efc:	2202      	movs	r2, #2
 8005efe:	2101      	movs	r1, #1
 8005f00:	2000      	movs	r0, #0
 8005f02:	f001 fb75 	bl	80075f0 <Motor_Rightward>
    
        OLED_ShowNum(4, 4, motor_speed, 2);
 8005f06:	f897 20fa 	ldrb.w	r2, [r7, #250]	@ 0xfa
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	2104      	movs	r1, #4
 8005f0e:	2004      	movs	r0, #4
 8005f10:	f7fe ff4c 	bl	8004dac <OLED_ShowNum>
        break;
 8005f14:	f001 b916 	b.w	8007144 <main+0x19a8>
    }
    
    case 2:
      if (path_change!=2)
 8005f18:	4b88      	ldr	r3, [pc, #544]	@ (800613c <main+0x9a0>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	f000 80b1 	beq.w	8006084 <main+0x8e8>
      {
        if ((distances[0]>=70&& mean[0]>=70 && path_change==0)||(distances[0]<=70&& mean[0]<=70&& path_change==1))
 8005f22:	4b87      	ldr	r3, [pc, #540]	@ (8006140 <main+0x9a4>)
 8005f24:	edd3 7a00 	vldr	s15, [r3]
 8005f28:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8006144 <main+0x9a8>
 8005f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f34:	db0d      	blt.n	8005f52 <main+0x7b6>
 8005f36:	4b84      	ldr	r3, [pc, #528]	@ (8006148 <main+0x9ac>)
 8005f38:	edd3 7a00 	vldr	s15, [r3]
 8005f3c:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8006144 <main+0x9a8>
 8005f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f48:	db03      	blt.n	8005f52 <main+0x7b6>
 8005f4a:	4b7c      	ldr	r3, [pc, #496]	@ (800613c <main+0x9a0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d017      	beq.n	8005f82 <main+0x7e6>
 8005f52:	4b7b      	ldr	r3, [pc, #492]	@ (8006140 <main+0x9a4>)
 8005f54:	edd3 7a00 	vldr	s15, [r3]
 8005f58:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8006144 <main+0x9a8>
 8005f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f64:	d81b      	bhi.n	8005f9e <main+0x802>
 8005f66:	4b78      	ldr	r3, [pc, #480]	@ (8006148 <main+0x9ac>)
 8005f68:	edd3 7a00 	vldr	s15, [r3]
 8005f6c:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8006144 <main+0x9a8>
 8005f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f78:	d811      	bhi.n	8005f9e <main+0x802>
 8005f7a:	4b70      	ldr	r3, [pc, #448]	@ (800613c <main+0x9a0>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d10d      	bne.n	8005f9e <main+0x802>
        {
          Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8005f82:	4b6c      	ldr	r3, [pc, #432]	@ (8006134 <main+0x998>)
 8005f84:	9302      	str	r3, [sp, #8]
 8005f86:	4b6c      	ldr	r3, [pc, #432]	@ (8006138 <main+0x99c>)
 8005f88:	9301      	str	r3, [sp, #4]
 8005f8a:	f06f 031d 	mvn.w	r3, #29
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	2303      	movs	r3, #3
 8005f92:	2202      	movs	r2, #2
 8005f94:	2101      	movs	r1, #1
 8005f96:	2000      	movs	r0, #0
 8005f98:	f001 fd4e 	bl	8007a38 <Motor_Straight>
 8005f9c:	e089      	b.n	80060b2 <main+0x916>
        }else if (distances[0]<=70&& mean[0]<=70 && path_change==0)
 8005f9e:	4b68      	ldr	r3, [pc, #416]	@ (8006140 <main+0x9a4>)
 8005fa0:	edd3 7a00 	vldr	s15, [r3]
 8005fa4:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8006144 <main+0x9a8>
 8005fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb0:	d82b      	bhi.n	800600a <main+0x86e>
 8005fb2:	4b65      	ldr	r3, [pc, #404]	@ (8006148 <main+0x9ac>)
 8005fb4:	edd3 7a00 	vldr	s15, [r3]
 8005fb8:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8006144 <main+0x9a8>
 8005fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc4:	d821      	bhi.n	800600a <main+0x86e>
 8005fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800613c <main+0x9a0>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d11d      	bne.n	800600a <main+0x86e>
        {
          if(flag){
 8005fce:	4b5f      	ldr	r3, [pc, #380]	@ (800614c <main+0x9b0>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d007      	beq.n	8005fe6 <main+0x84a>
            time_start = HAL_GetTick();
 8005fd6:	f003 fd73 	bl	8009ac0 <HAL_GetTick>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	4a5c      	ldr	r2, [pc, #368]	@ (8006150 <main+0x9b4>)
 8005fde:	6013      	str	r3, [r2, #0]
            flag = false;
 8005fe0:	4b5a      	ldr	r3, [pc, #360]	@ (800614c <main+0x9b0>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
          }
          uint32_t time = HAL_GetTick();
 8005fe6:	f003 fd6b 	bl	8009ac0 <HAL_GetTick>
 8005fea:	6438      	str	r0, [r7, #64]	@ 0x40
          if(time - time_start >=100){
 8005fec:	4b58      	ldr	r3, [pc, #352]	@ (8006150 <main+0x9b4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b63      	cmp	r3, #99	@ 0x63
 8005ff6:	d95b      	bls.n	80060b0 <main+0x914>
            path_change+=1;
 8005ff8:	4b50      	ldr	r3, [pc, #320]	@ (800613c <main+0x9a0>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	4a4f      	ldr	r2, [pc, #316]	@ (800613c <main+0x9a0>)
 8006000:	6013      	str	r3, [r2, #0]
            flag = true;
 8006002:	4b52      	ldr	r3, [pc, #328]	@ (800614c <main+0x9b0>)
 8006004:	2201      	movs	r2, #1
 8006006:	701a      	strb	r2, [r3, #0]
        {
 8006008:	e052      	b.n	80060b0 <main+0x914>
          }
        }else if (distances[0]>=70&& mean[0]>=70&& path_change==1)
 800600a:	4b4d      	ldr	r3, [pc, #308]	@ (8006140 <main+0x9a4>)
 800600c:	edd3 7a00 	vldr	s15, [r3]
 8006010:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006144 <main+0x9a8>
 8006014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800601c:	da01      	bge.n	8006022 <main+0x886>
        PID_Reset(&pid_rear);
        PID_Reset(&pid_front);
        PID_Reset(&pid_position);
      }
        
      break;
 800601e:	f001 b87f 	b.w	8007120 <main+0x1984>
        }else if (distances[0]>=70&& mean[0]>=70&& path_change==1)
 8006022:	4b49      	ldr	r3, [pc, #292]	@ (8006148 <main+0x9ac>)
 8006024:	edd3 7a00 	vldr	s15, [r3]
 8006028:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8006144 <main+0x9a8>
 800602c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006034:	da01      	bge.n	800603a <main+0x89e>
      break;
 8006036:	f001 b873 	b.w	8007120 <main+0x1984>
        }else if (distances[0]>=70&& mean[0]>=70&& path_change==1)
 800603a:	4b40      	ldr	r3, [pc, #256]	@ (800613c <main+0x9a0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b01      	cmp	r3, #1
 8006040:	f041 806e 	bne.w	8007120 <main+0x1984>
          if(flag){
 8006044:	4b41      	ldr	r3, [pc, #260]	@ (800614c <main+0x9b0>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <main+0x8c0>
            time_start = HAL_GetTick();
 800604c:	f003 fd38 	bl	8009ac0 <HAL_GetTick>
 8006050:	4603      	mov	r3, r0
 8006052:	4a3f      	ldr	r2, [pc, #252]	@ (8006150 <main+0x9b4>)
 8006054:	6013      	str	r3, [r2, #0]
            flag = false;
 8006056:	4b3d      	ldr	r3, [pc, #244]	@ (800614c <main+0x9b0>)
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
          uint32_t time = HAL_GetTick();
 800605c:	f003 fd30 	bl	8009ac0 <HAL_GetTick>
 8006060:	63f8      	str	r0, [r7, #60]	@ 0x3c
          if(time - time_start >=100){
 8006062:	4b3b      	ldr	r3, [pc, #236]	@ (8006150 <main+0x9b4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b63      	cmp	r3, #99	@ 0x63
 800606c:	f241 8058 	bls.w	8007120 <main+0x1984>
            path_change+=1;
 8006070:	4b32      	ldr	r3, [pc, #200]	@ (800613c <main+0x9a0>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3301      	adds	r3, #1
 8006076:	4a31      	ldr	r2, [pc, #196]	@ (800613c <main+0x9a0>)
 8006078:	6013      	str	r3, [r2, #0]
            flag = true;
 800607a:	4b34      	ldr	r3, [pc, #208]	@ (800614c <main+0x9b0>)
 800607c:	2201      	movs	r2, #1
 800607e:	701a      	strb	r2, [r3, #0]
      break;
 8006080:	f001 b84e 	b.w	8007120 <main+0x1984>
        path_change = 0;
 8006084:	4b2d      	ldr	r3, [pc, #180]	@ (800613c <main+0x9a0>)
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]
        path +=1;
 800608a:	4b32      	ldr	r3, [pc, #200]	@ (8006154 <main+0x9b8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3301      	adds	r3, #1
 8006090:	4a30      	ldr	r2, [pc, #192]	@ (8006154 <main+0x9b8>)
 8006092:	6013      	str	r3, [r2, #0]
        PID_Reset(&pid_yaw);        
 8006094:	4830      	ldr	r0, [pc, #192]	@ (8006158 <main+0x9bc>)
 8006096:	f001 ff6f 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_rear);
 800609a:	4830      	ldr	r0, [pc, #192]	@ (800615c <main+0x9c0>)
 800609c:	f001 ff6c 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_front);
 80060a0:	482f      	ldr	r0, [pc, #188]	@ (8006160 <main+0x9c4>)
 80060a2:	f001 ff69 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_position);
 80060a6:	482f      	ldr	r0, [pc, #188]	@ (8006164 <main+0x9c8>)
 80060a8:	f001 ff66 	bl	8007f78 <PID_Reset>
      break;
 80060ac:	f001 b838 	b.w	8007120 <main+0x1984>
        {
 80060b0:	bf00      	nop
      break;
 80060b2:	f001 b835 	b.w	8007120 <main+0x1984>

    case 3:{
      // 参数定义
      const float TARGET_DISTANCE = 70.0f;   // 目标保持距离
 80060b6:	4b2c      	ldr	r3, [pc, #176]	@ (8006168 <main+0x9cc>)
 80060b8:	65bb      	str	r3, [r7, #88]	@ 0x58
      const float DECEL_RANGE = 100.0f;      // 减速区间范围（70~170mm）
 80060ba:	4b2c      	ldr	r3, [pc, #176]	@ (800616c <main+0x9d0>)
 80060bc:	657b      	str	r3, [r7, #84]	@ 0x54
      const uint8_t MIN_SPEED = -10;          // 最小速度（靠近时）
 80060be:	23f6      	movs	r3, #246	@ 0xf6
 80060c0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      const uint8_t MAX_SPEED = -60;          // 最大速度（远端时）
 80060c4:	23c4      	movs	r3, #196	@ 0xc4
 80060c6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  
      // 获取当前检测距离（使用第4个传感器）
      float current_distance = distances[3]; 
 80060ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006140 <main+0x9a4>)
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  
      // 速度计算逻辑
      uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 80060d0:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80060d4:	f887 30f9 	strb.w	r3, [r7, #249]	@ 0xf9
  
      if (current_distance <= TARGET_DISTANCE) {
 80060d8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80060dc:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80060e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e8:	d842      	bhi.n	8006170 <main+0x9d4>
          // 区域3：到达目标距离（≤70mm）
          motor_speed = MIN_SPEED;
 80060ea:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80060ee:	f887 30f9 	strb.w	r3, [r7, #249]	@ 0xf9
  
          // 执行路径切换逻辑
          if(flag) {
 80060f2:	4b16      	ldr	r3, [pc, #88]	@ (800614c <main+0x9b0>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <main+0x96e>
              time_start = HAL_GetTick();
 80060fa:	f003 fce1 	bl	8009ac0 <HAL_GetTick>
 80060fe:	4603      	mov	r3, r0
 8006100:	4a13      	ldr	r2, [pc, #76]	@ (8006150 <main+0x9b4>)
 8006102:	6013      	str	r3, [r2, #0]
              flag = false;
 8006104:	4b11      	ldr	r3, [pc, #68]	@ (800614c <main+0x9b0>)
 8006106:	2200      	movs	r2, #0
 8006108:	701a      	strb	r2, [r3, #0]
          }
          if(HAL_GetTick() - time_start >= 100) {
 800610a:	f003 fcd9 	bl	8009ac0 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	4b0f      	ldr	r3, [pc, #60]	@ (8006150 <main+0x9b4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b63      	cmp	r3, #99	@ 0x63
 8006118:	d97b      	bls.n	8006212 <main+0xa76>
              path += 1;
 800611a:	4b0e      	ldr	r3, [pc, #56]	@ (8006154 <main+0x9b8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3301      	adds	r3, #1
 8006120:	4a0c      	ldr	r2, [pc, #48]	@ (8006154 <main+0x9b8>)
 8006122:	6013      	str	r3, [r2, #0]
              PID_ResetAll(); // 重置所有PID控制器
 8006124:	f7ff fb22 	bl	800576c <PID_ResetAll>
              flag = true;
 8006128:	4b08      	ldr	r3, [pc, #32]	@ (800614c <main+0x9b0>)
 800612a:	2201      	movs	r2, #1
 800612c:	701a      	strb	r2, [r3, #0]
 800612e:	e070      	b.n	8006212 <main+0xa76>
 8006130:	20000505 	.word	0x20000505
 8006134:	2000050c 	.word	0x2000050c
 8006138:	20000510 	.word	0x20000510
 800613c:	20000418 	.word	0x20000418
 8006140:	20000038 	.word	0x20000038
 8006144:	428c0000 	.word	0x428c0000
 8006148:	20000434 	.word	0x20000434
 800614c:	2000004c 	.word	0x2000004c
 8006150:	20000420 	.word	0x20000420
 8006154:	20000414 	.word	0x20000414
 8006158:	20000074 	.word	0x20000074
 800615c:	200000a4 	.word	0x200000a4
 8006160:	2000008c 	.word	0x2000008c
 8006164:	200000bc 	.word	0x200000bc
 8006168:	428c0000 	.word	0x428c0000
 800616c:	42c80000 	.word	0x42c80000
          }
      } 
      else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8006170:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8006174:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8006178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800617c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8006180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006188:	d83f      	bhi.n	800620a <main+0xa6e>
          // 区域2：减速区间（70~170mm）
          // 距离越近速度越慢，线性变化：170mm->60, 70mm->10
          float distance_from_target = current_distance - TARGET_DISTANCE;
 800618a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800618e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006196:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
          float ratio = 1.0f - (distance_from_target / DECEL_RANGE);
 800619a:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 800619e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80061a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061ae:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
          motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 80061b2:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 80061b6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	ee07 3a90 	vmov	s15, r3
 80061c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061c4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80061c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80061d4:	793b      	ldrb	r3, [r7, #4]
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80061dc:	4413      	add	r3, r2
 80061de:	f887 30f9 	strb.w	r3, [r7, #249]	@ 0xf9
          motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 80061e2:	f897 20f9 	ldrb.w	r2, [r7, #249]	@ 0xf9
 80061e6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d308      	bcc.n	8006200 <main+0xa64>
 80061ee:	f897 20f9 	ldrb.w	r2, [r7, #249]	@ 0xf9
 80061f2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80061f6:	4293      	cmp	r3, r2
 80061f8:	bf28      	it	cs
 80061fa:	4613      	movcs	r3, r2
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	e001      	b.n	8006204 <main+0xa68>
 8006200:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8006204:	f887 30f9 	strb.w	r3, [r7, #249]	@ 0xf9
 8006208:	e003      	b.n	8006212 <main+0xa76>
      }
      else {
          // 区域1：全速区间（>170mm）
          motor_speed = MAX_SPEED;
 800620a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800620e:	f887 30f9 	strb.w	r3, [r7, #249]	@ 0xf9
      }
  
      // 执行带平滑过渡的电机控制
      static uint8_t last_speed = 0;
      motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8006212:	4b99      	ldr	r3, [pc, #612]	@ (8006478 <main+0xcdc>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	f897 20f9 	ldrb.w	r2, [r7, #249]	@ 0xf9
 800621a:	4611      	mov	r1, r2
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff fa57 	bl	80056d0 <smooth_speed_transition>
 8006222:	4603      	mov	r3, r0
 8006224:	f887 30f9 	strb.w	r3, [r7, #249]	@ 0xf9
      last_speed = motor_speed;
 8006228:	4a93      	ldr	r2, [pc, #588]	@ (8006478 <main+0xcdc>)
 800622a:	f897 30f9 	ldrb.w	r3, [r7, #249]	@ 0xf9
 800622e:	7013      	strb	r3, [r2, #0]
  
      Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8006230:	f897 30f9 	ldrb.w	r3, [r7, #249]	@ 0xf9
 8006234:	b21b      	sxth	r3, r3
 8006236:	4a91      	ldr	r2, [pc, #580]	@ (800647c <main+0xce0>)
 8006238:	9202      	str	r2, [sp, #8]
 800623a:	4a91      	ldr	r2, [pc, #580]	@ (8006480 <main+0xce4>)
 800623c:	9201      	str	r2, [sp, #4]
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	2303      	movs	r3, #3
 8006242:	2202      	movs	r2, #2
 8006244:	2101      	movs	r1, #1
 8006246:	2000      	movs	r0, #0
 8006248:	f001 f9d2 	bl	80075f0 <Motor_Rightward>
  
      OLED_ShowNum(4, 4, motor_speed, 2);
 800624c:	f897 20f9 	ldrb.w	r2, [r7, #249]	@ 0xf9
 8006250:	2302      	movs	r3, #2
 8006252:	2104      	movs	r1, #4
 8006254:	2004      	movs	r0, #4
 8006256:	f7fe fda9 	bl	8004dac <OLED_ShowNum>
      break;
 800625a:	f000 bf73 	b.w	8007144 <main+0x19a8>
  }

    case 4:

      if (path_change!=2)
 800625e:	4b89      	ldr	r3, [pc, #548]	@ (8006484 <main+0xce8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b02      	cmp	r3, #2
 8006264:	f000 80b1 	beq.w	80063ca <main+0xc2e>
      {
        if ((distances[3]>=70 && mean[3]>=70  && path_change==0)||(distances[3]<=70 && mean[3]<=70 && path_change==1))
 8006268:	4b87      	ldr	r3, [pc, #540]	@ (8006488 <main+0xcec>)
 800626a:	edd3 7a03 	vldr	s15, [r3, #12]
 800626e:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800648c <main+0xcf0>
 8006272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800627a:	db0d      	blt.n	8006298 <main+0xafc>
 800627c:	4b84      	ldr	r3, [pc, #528]	@ (8006490 <main+0xcf4>)
 800627e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006282:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800648c <main+0xcf0>
 8006286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800628a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800628e:	db03      	blt.n	8006298 <main+0xafc>
 8006290:	4b7c      	ldr	r3, [pc, #496]	@ (8006484 <main+0xce8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d017      	beq.n	80062c8 <main+0xb2c>
 8006298:	4b7b      	ldr	r3, [pc, #492]	@ (8006488 <main+0xcec>)
 800629a:	edd3 7a03 	vldr	s15, [r3, #12]
 800629e:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800648c <main+0xcf0>
 80062a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062aa:	d81b      	bhi.n	80062e4 <main+0xb48>
 80062ac:	4b78      	ldr	r3, [pc, #480]	@ (8006490 <main+0xcf4>)
 80062ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80062b2:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 800648c <main+0xcf0>
 80062b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062be:	d811      	bhi.n	80062e4 <main+0xb48>
 80062c0:	4b70      	ldr	r3, [pc, #448]	@ (8006484 <main+0xce8>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d10d      	bne.n	80062e4 <main+0xb48>
        {
          Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 80062c8:	4b6c      	ldr	r3, [pc, #432]	@ (800647c <main+0xce0>)
 80062ca:	9302      	str	r3, [sp, #8]
 80062cc:	4b6c      	ldr	r3, [pc, #432]	@ (8006480 <main+0xce4>)
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	f06f 031d 	mvn.w	r3, #29
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	2303      	movs	r3, #3
 80062d8:	2202      	movs	r2, #2
 80062da:	2101      	movs	r1, #1
 80062dc:	2000      	movs	r0, #0
 80062de:	f001 fbab 	bl	8007a38 <Motor_Straight>
 80062e2:	e089      	b.n	80063f8 <main+0xc5c>
        }else if (distances[3]<=70&& mean[3]<=70&& path_change==0)
 80062e4:	4b68      	ldr	r3, [pc, #416]	@ (8006488 <main+0xcec>)
 80062e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80062ea:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800648c <main+0xcf0>
 80062ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f6:	d82b      	bhi.n	8006350 <main+0xbb4>
 80062f8:	4b65      	ldr	r3, [pc, #404]	@ (8006490 <main+0xcf4>)
 80062fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80062fe:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800648c <main+0xcf0>
 8006302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800630a:	d821      	bhi.n	8006350 <main+0xbb4>
 800630c:	4b5d      	ldr	r3, [pc, #372]	@ (8006484 <main+0xce8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d11d      	bne.n	8006350 <main+0xbb4>
        {
          if(flag){
 8006314:	4b5f      	ldr	r3, [pc, #380]	@ (8006494 <main+0xcf8>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d007      	beq.n	800632c <main+0xb90>
            time_start = HAL_GetTick();
 800631c:	f003 fbd0 	bl	8009ac0 <HAL_GetTick>
 8006320:	4603      	mov	r3, r0
 8006322:	4a5d      	ldr	r2, [pc, #372]	@ (8006498 <main+0xcfc>)
 8006324:	6013      	str	r3, [r2, #0]
            flag = false;
 8006326:	4b5b      	ldr	r3, [pc, #364]	@ (8006494 <main+0xcf8>)
 8006328:	2200      	movs	r2, #0
 800632a:	701a      	strb	r2, [r3, #0]
          }
          uint32_t time = HAL_GetTick();
 800632c:	f003 fbc8 	bl	8009ac0 <HAL_GetTick>
 8006330:	6638      	str	r0, [r7, #96]	@ 0x60
          if(time - time_start >=100){
 8006332:	4b59      	ldr	r3, [pc, #356]	@ (8006498 <main+0xcfc>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b63      	cmp	r3, #99	@ 0x63
 800633c:	d95b      	bls.n	80063f6 <main+0xc5a>
            path_change+=1;
 800633e:	4b51      	ldr	r3, [pc, #324]	@ (8006484 <main+0xce8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3301      	adds	r3, #1
 8006344:	4a4f      	ldr	r2, [pc, #316]	@ (8006484 <main+0xce8>)
 8006346:	6013      	str	r3, [r2, #0]
            flag = true;
 8006348:	4b52      	ldr	r3, [pc, #328]	@ (8006494 <main+0xcf8>)
 800634a:	2201      	movs	r2, #1
 800634c:	701a      	strb	r2, [r3, #0]
        {
 800634e:	e052      	b.n	80063f6 <main+0xc5a>
          }
        }else if (distances[3]>=70&& mean[3]>=70&& path_change==1)
 8006350:	4b4d      	ldr	r3, [pc, #308]	@ (8006488 <main+0xcec>)
 8006352:	edd3 7a03 	vldr	s15, [r3, #12]
 8006356:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800648c <main+0xcf0>
 800635a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800635e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006362:	da01      	bge.n	8006368 <main+0xbcc>
        PID_Reset(&pid_rear);
        PID_Reset(&pid_front);
        PID_Reset(&pid_position);
      }
        
      break;
 8006364:	f000 bedf 	b.w	8007126 <main+0x198a>
        }else if (distances[3]>=70&& mean[3]>=70&& path_change==1)
 8006368:	4b49      	ldr	r3, [pc, #292]	@ (8006490 <main+0xcf4>)
 800636a:	edd3 7a03 	vldr	s15, [r3, #12]
 800636e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800648c <main+0xcf0>
 8006372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637a:	da01      	bge.n	8006380 <main+0xbe4>
      break;
 800637c:	f000 bed3 	b.w	8007126 <main+0x198a>
        }else if (distances[3]>=70&& mean[3]>=70&& path_change==1)
 8006380:	4b40      	ldr	r3, [pc, #256]	@ (8006484 <main+0xce8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	f040 86ce 	bne.w	8007126 <main+0x198a>
          if(flag){
 800638a:	4b42      	ldr	r3, [pc, #264]	@ (8006494 <main+0xcf8>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <main+0xc06>
            time_start = HAL_GetTick();
 8006392:	f003 fb95 	bl	8009ac0 <HAL_GetTick>
 8006396:	4603      	mov	r3, r0
 8006398:	4a3f      	ldr	r2, [pc, #252]	@ (8006498 <main+0xcfc>)
 800639a:	6013      	str	r3, [r2, #0]
            flag = false;
 800639c:	4b3d      	ldr	r3, [pc, #244]	@ (8006494 <main+0xcf8>)
 800639e:	2200      	movs	r2, #0
 80063a0:	701a      	strb	r2, [r3, #0]
          uint32_t time = HAL_GetTick();
 80063a2:	f003 fb8d 	bl	8009ac0 <HAL_GetTick>
 80063a6:	65f8      	str	r0, [r7, #92]	@ 0x5c
          if(time - time_start >=100){
 80063a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006498 <main+0xcfc>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b63      	cmp	r3, #99	@ 0x63
 80063b2:	f240 86b8 	bls.w	8007126 <main+0x198a>
            path_change+=1;
 80063b6:	4b33      	ldr	r3, [pc, #204]	@ (8006484 <main+0xce8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3301      	adds	r3, #1
 80063bc:	4a31      	ldr	r2, [pc, #196]	@ (8006484 <main+0xce8>)
 80063be:	6013      	str	r3, [r2, #0]
            flag = true;
 80063c0:	4b34      	ldr	r3, [pc, #208]	@ (8006494 <main+0xcf8>)
 80063c2:	2201      	movs	r2, #1
 80063c4:	701a      	strb	r2, [r3, #0]
      break;
 80063c6:	f000 beae 	b.w	8007126 <main+0x198a>
        path_change = 0;
 80063ca:	4b2e      	ldr	r3, [pc, #184]	@ (8006484 <main+0xce8>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
        path +=1;
 80063d0:	4b32      	ldr	r3, [pc, #200]	@ (800649c <main+0xd00>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3301      	adds	r3, #1
 80063d6:	4a31      	ldr	r2, [pc, #196]	@ (800649c <main+0xd00>)
 80063d8:	6013      	str	r3, [r2, #0]
        PID_Reset(&pid_yaw);        
 80063da:	4831      	ldr	r0, [pc, #196]	@ (80064a0 <main+0xd04>)
 80063dc:	f001 fdcc 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_rear);
 80063e0:	4830      	ldr	r0, [pc, #192]	@ (80064a4 <main+0xd08>)
 80063e2:	f001 fdc9 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_front);
 80063e6:	4830      	ldr	r0, [pc, #192]	@ (80064a8 <main+0xd0c>)
 80063e8:	f001 fdc6 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_position);
 80063ec:	482f      	ldr	r0, [pc, #188]	@ (80064ac <main+0xd10>)
 80063ee:	f001 fdc3 	bl	8007f78 <PID_Reset>
      break;
 80063f2:	f000 be98 	b.w	8007126 <main+0x198a>
        {
 80063f6:	bf00      	nop
      break;
 80063f8:	f000 be95 	b.w	8007126 <main+0x198a>

    case 5:{
      // 参数定义
      const float TARGET_DISTANCE = 70.0f;   // 目标保持距离
 80063fc:	4b2c      	ldr	r3, [pc, #176]	@ (80064b0 <main+0xd14>)
 80063fe:	67bb      	str	r3, [r7, #120]	@ 0x78
      const float DECEL_RANGE = 100.0f;      // 减速区间范围（70~170mm）
 8006400:	4b2c      	ldr	r3, [pc, #176]	@ (80064b4 <main+0xd18>)
 8006402:	677b      	str	r3, [r7, #116]	@ 0x74
      const uint8_t MIN_SPEED = 10;          // 最小速度（靠近时）
 8006404:	230a      	movs	r3, #10
 8006406:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
      const uint8_t MAX_SPEED = 60;          // 最大速度（远端时）
 800640a:	233c      	movs	r3, #60	@ 0x3c
 800640c:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
  
      // 获取当前检测距离（使用第4个传感器）
      float current_distance = distances[3]; 
 8006410:	4b1d      	ldr	r3, [pc, #116]	@ (8006488 <main+0xcec>)
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	66fb      	str	r3, [r7, #108]	@ 0x6c
  
      // 速度计算逻辑
      uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 8006416:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800641a:	f887 30f8 	strb.w	r3, [r7, #248]	@ 0xf8
  
      if (current_distance <= TARGET_DISTANCE) {
 800641e:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8006422:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8006426:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800642a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800642e:	d843      	bhi.n	80064b8 <main+0xd1c>
          // 区域3：到达目标距离（≤70mm）
          motor_speed = MIN_SPEED;
 8006430:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8006434:	f887 30f8 	strb.w	r3, [r7, #248]	@ 0xf8
  
          // 执行路径切换逻辑
          if(flag) {
 8006438:	4b16      	ldr	r3, [pc, #88]	@ (8006494 <main+0xcf8>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <main+0xcb4>
              time_start = HAL_GetTick();
 8006440:	f003 fb3e 	bl	8009ac0 <HAL_GetTick>
 8006444:	4603      	mov	r3, r0
 8006446:	4a14      	ldr	r2, [pc, #80]	@ (8006498 <main+0xcfc>)
 8006448:	6013      	str	r3, [r2, #0]
              flag = false;
 800644a:	4b12      	ldr	r3, [pc, #72]	@ (8006494 <main+0xcf8>)
 800644c:	2200      	movs	r2, #0
 800644e:	701a      	strb	r2, [r3, #0]
          }
          if(HAL_GetTick() - time_start >= 100) {
 8006450:	f003 fb36 	bl	8009ac0 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	4b10      	ldr	r3, [pc, #64]	@ (8006498 <main+0xcfc>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b63      	cmp	r3, #99	@ 0x63
 800645e:	d97c      	bls.n	800655a <main+0xdbe>
              path += 1;
 8006460:	4b0e      	ldr	r3, [pc, #56]	@ (800649c <main+0xd00>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3301      	adds	r3, #1
 8006466:	4a0d      	ldr	r2, [pc, #52]	@ (800649c <main+0xd00>)
 8006468:	6013      	str	r3, [r2, #0]
              PID_ResetAll(); // 重置所有PID控制器
 800646a:	f7ff f97f 	bl	800576c <PID_ResetAll>
              flag = true;
 800646e:	4b09      	ldr	r3, [pc, #36]	@ (8006494 <main+0xcf8>)
 8006470:	2201      	movs	r2, #1
 8006472:	701a      	strb	r2, [r3, #0]
 8006474:	e071      	b.n	800655a <main+0xdbe>
 8006476:	bf00      	nop
 8006478:	20000506 	.word	0x20000506
 800647c:	2000050c 	.word	0x2000050c
 8006480:	20000510 	.word	0x20000510
 8006484:	20000418 	.word	0x20000418
 8006488:	20000038 	.word	0x20000038
 800648c:	428c0000 	.word	0x428c0000
 8006490:	20000434 	.word	0x20000434
 8006494:	2000004c 	.word	0x2000004c
 8006498:	20000420 	.word	0x20000420
 800649c:	20000414 	.word	0x20000414
 80064a0:	20000074 	.word	0x20000074
 80064a4:	200000a4 	.word	0x200000a4
 80064a8:	2000008c 	.word	0x2000008c
 80064ac:	200000bc 	.word	0x200000bc
 80064b0:	428c0000 	.word	0x428c0000
 80064b4:	42c80000 	.word	0x42c80000
          }
      } 
      else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 80064b8:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80064bc:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80064c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064c4:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80064c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d0:	d83f      	bhi.n	8006552 <main+0xdb6>
          // 区域2：减速区间（70~170mm）
          // 距离越近速度越慢，线性变化：170mm->60, 70mm->10
          float distance_from_target = current_distance - TARGET_DISTANCE;
 80064d2:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80064d6:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80064da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064de:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
          float ratio = 1.0f - (distance_from_target / DECEL_RANGE);
 80064e2:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 80064e6:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80064ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064f6:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
          motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 80064fa:	f897 2072 	ldrb.w	r2, [r7, #114]	@ 0x72
 80064fe:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	ee07 3a90 	vmov	s15, r3
 8006508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800650c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8006510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006518:	edc7 7a01 	vstr	s15, [r7, #4]
 800651c:	793b      	ldrb	r3, [r7, #4]
 800651e:	b2da      	uxtb	r2, r3
 8006520:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8006524:	4413      	add	r3, r2
 8006526:	f887 30f8 	strb.w	r3, [r7, #248]	@ 0xf8
          motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 800652a:	f897 20f8 	ldrb.w	r2, [r7, #248]	@ 0xf8
 800652e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8006532:	429a      	cmp	r2, r3
 8006534:	d308      	bcc.n	8006548 <main+0xdac>
 8006536:	f897 20f8 	ldrb.w	r2, [r7, #248]	@ 0xf8
 800653a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800653e:	4293      	cmp	r3, r2
 8006540:	bf28      	it	cs
 8006542:	4613      	movcs	r3, r2
 8006544:	b2db      	uxtb	r3, r3
 8006546:	e001      	b.n	800654c <main+0xdb0>
 8006548:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800654c:	f887 30f8 	strb.w	r3, [r7, #248]	@ 0xf8
 8006550:	e003      	b.n	800655a <main+0xdbe>
      }
      else {
          // 区域1：全速区间（>170mm）
          motor_speed = MAX_SPEED;
 8006552:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8006556:	f887 30f8 	strb.w	r3, [r7, #248]	@ 0xf8
      }
  
      // 执行带平滑过渡的电机控制
      static uint8_t last_speed = 0;
      motor_speed = smooth_speed_transition(last_speed, motor_speed);
 800655a:	4b9b      	ldr	r3, [pc, #620]	@ (80067c8 <main+0x102c>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	f897 20f8 	ldrb.w	r2, [r7, #248]	@ 0xf8
 8006562:	4611      	mov	r1, r2
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff f8b3 	bl	80056d0 <smooth_speed_transition>
 800656a:	4603      	mov	r3, r0
 800656c:	f887 30f8 	strb.w	r3, [r7, #248]	@ 0xf8
      last_speed = motor_speed;
 8006570:	4a95      	ldr	r2, [pc, #596]	@ (80067c8 <main+0x102c>)
 8006572:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 8006576:	7013      	strb	r3, [r2, #0]
  
      Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8006578:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 800657c:	b21b      	sxth	r3, r3
 800657e:	4a93      	ldr	r2, [pc, #588]	@ (80067cc <main+0x1030>)
 8006580:	9202      	str	r2, [sp, #8]
 8006582:	4a93      	ldr	r2, [pc, #588]	@ (80067d0 <main+0x1034>)
 8006584:	9201      	str	r2, [sp, #4]
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	2303      	movs	r3, #3
 800658a:	2202      	movs	r2, #2
 800658c:	2101      	movs	r1, #1
 800658e:	2000      	movs	r0, #0
 8006590:	f001 f82e 	bl	80075f0 <Motor_Rightward>
  
      OLED_ShowNum(4, 4, motor_speed, 2);
 8006594:	f897 20f8 	ldrb.w	r2, [r7, #248]	@ 0xf8
 8006598:	2302      	movs	r3, #2
 800659a:	2104      	movs	r1, #4
 800659c:	2004      	movs	r0, #4
 800659e:	f7fe fc05 	bl	8004dac <OLED_ShowNum>
      break;
 80065a2:	f000 bdcf 	b.w	8007144 <main+0x19a8>
  }

      case 6:
      if (path_change!=2)
 80065a6:	4b8b      	ldr	r3, [pc, #556]	@ (80067d4 <main+0x1038>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	f000 80b3 	beq.w	8006716 <main+0xf7a>
      {
        if ((distances[0]>=70 && mean[0]>=70 && path_change==0)||(distances[0]<=70 && mean[0]<=70 && path_change==1))
 80065b0:	4b89      	ldr	r3, [pc, #548]	@ (80067d8 <main+0x103c>)
 80065b2:	edd3 7a00 	vldr	s15, [r3]
 80065b6:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 80067dc <main+0x1040>
 80065ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c2:	db0d      	blt.n	80065e0 <main+0xe44>
 80065c4:	4b86      	ldr	r3, [pc, #536]	@ (80067e0 <main+0x1044>)
 80065c6:	edd3 7a00 	vldr	s15, [r3]
 80065ca:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 80067dc <main+0x1040>
 80065ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d6:	db03      	blt.n	80065e0 <main+0xe44>
 80065d8:	4b7e      	ldr	r3, [pc, #504]	@ (80067d4 <main+0x1038>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d017      	beq.n	8006610 <main+0xe74>
 80065e0:	4b7d      	ldr	r3, [pc, #500]	@ (80067d8 <main+0x103c>)
 80065e2:	edd3 7a00 	vldr	s15, [r3]
 80065e6:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 80067dc <main+0x1040>
 80065ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f2:	d81b      	bhi.n	800662c <main+0xe90>
 80065f4:	4b7a      	ldr	r3, [pc, #488]	@ (80067e0 <main+0x1044>)
 80065f6:	edd3 7a00 	vldr	s15, [r3]
 80065fa:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 80067dc <main+0x1040>
 80065fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006606:	d811      	bhi.n	800662c <main+0xe90>
 8006608:	4b72      	ldr	r3, [pc, #456]	@ (80067d4 <main+0x1038>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d10d      	bne.n	800662c <main+0xe90>
        {
          Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8006610:	4b6e      	ldr	r3, [pc, #440]	@ (80067cc <main+0x1030>)
 8006612:	9302      	str	r3, [sp, #8]
 8006614:	4b6e      	ldr	r3, [pc, #440]	@ (80067d0 <main+0x1034>)
 8006616:	9301      	str	r3, [sp, #4]
 8006618:	f06f 031d 	mvn.w	r3, #29
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	2303      	movs	r3, #3
 8006620:	2202      	movs	r2, #2
 8006622:	2101      	movs	r1, #1
 8006624:	2000      	movs	r0, #0
 8006626:	f001 fa07 	bl	8007a38 <Motor_Straight>
 800662a:	e08b      	b.n	8006744 <main+0xfa8>
        }else if (distances[0]<=70 && mean[0]<=70 && path_change==0)
 800662c:	4b6a      	ldr	r3, [pc, #424]	@ (80067d8 <main+0x103c>)
 800662e:	edd3 7a00 	vldr	s15, [r3]
 8006632:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80067dc <main+0x1040>
 8006636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800663a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663e:	d82d      	bhi.n	800669c <main+0xf00>
 8006640:	4b67      	ldr	r3, [pc, #412]	@ (80067e0 <main+0x1044>)
 8006642:	edd3 7a00 	vldr	s15, [r3]
 8006646:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80067dc <main+0x1040>
 800664a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800664e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006652:	d823      	bhi.n	800669c <main+0xf00>
 8006654:	4b5f      	ldr	r3, [pc, #380]	@ (80067d4 <main+0x1038>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d11f      	bne.n	800669c <main+0xf00>
        {
          if(flag){
 800665c:	4b61      	ldr	r3, [pc, #388]	@ (80067e4 <main+0x1048>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d007      	beq.n	8006674 <main+0xed8>
            time_start = HAL_GetTick();
 8006664:	f003 fa2c 	bl	8009ac0 <HAL_GetTick>
 8006668:	4603      	mov	r3, r0
 800666a:	4a5f      	ldr	r2, [pc, #380]	@ (80067e8 <main+0x104c>)
 800666c:	6013      	str	r3, [r2, #0]
            flag = false;
 800666e:	4b5d      	ldr	r3, [pc, #372]	@ (80067e4 <main+0x1048>)
 8006670:	2200      	movs	r2, #0
 8006672:	701a      	strb	r2, [r3, #0]
          }
          uint32_t time = HAL_GetTick();
 8006674:	f003 fa24 	bl	8009ac0 <HAL_GetTick>
 8006678:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
          if(time - time_start >=100){
 800667c:	4b5a      	ldr	r3, [pc, #360]	@ (80067e8 <main+0x104c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b63      	cmp	r3, #99	@ 0x63
 8006688:	d95b      	bls.n	8006742 <main+0xfa6>
            path_change+=1;
 800668a:	4b52      	ldr	r3, [pc, #328]	@ (80067d4 <main+0x1038>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3301      	adds	r3, #1
 8006690:	4a50      	ldr	r2, [pc, #320]	@ (80067d4 <main+0x1038>)
 8006692:	6013      	str	r3, [r2, #0]
            flag = true;
 8006694:	4b53      	ldr	r3, [pc, #332]	@ (80067e4 <main+0x1048>)
 8006696:	2201      	movs	r2, #1
 8006698:	701a      	strb	r2, [r3, #0]
        {
 800669a:	e052      	b.n	8006742 <main+0xfa6>
          }
        }else if (distances[0]>=70 && mean[0]>=70 && path_change==1)
 800669c:	4b4e      	ldr	r3, [pc, #312]	@ (80067d8 <main+0x103c>)
 800669e:	edd3 7a00 	vldr	s15, [r3]
 80066a2:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80067dc <main+0x1040>
 80066a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ae:	da01      	bge.n	80066b4 <main+0xf18>
        PID_Reset(&pid_rear);
        PID_Reset(&pid_front);
        PID_Reset(&pid_position);
      }
        
      break;
 80066b0:	f000 bd3c 	b.w	800712c <main+0x1990>
        }else if (distances[0]>=70 && mean[0]>=70 && path_change==1)
 80066b4:	4b4a      	ldr	r3, [pc, #296]	@ (80067e0 <main+0x1044>)
 80066b6:	edd3 7a00 	vldr	s15, [r3]
 80066ba:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80067dc <main+0x1040>
 80066be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c6:	da01      	bge.n	80066cc <main+0xf30>
      break;
 80066c8:	f000 bd30 	b.w	800712c <main+0x1990>
        }else if (distances[0]>=70 && mean[0]>=70 && path_change==1)
 80066cc:	4b41      	ldr	r3, [pc, #260]	@ (80067d4 <main+0x1038>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	f040 852b 	bne.w	800712c <main+0x1990>
          if(flag){
 80066d6:	4b43      	ldr	r3, [pc, #268]	@ (80067e4 <main+0x1048>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <main+0xf52>
            time_start = HAL_GetTick();
 80066de:	f003 f9ef 	bl	8009ac0 <HAL_GetTick>
 80066e2:	4603      	mov	r3, r0
 80066e4:	4a40      	ldr	r2, [pc, #256]	@ (80067e8 <main+0x104c>)
 80066e6:	6013      	str	r3, [r2, #0]
            flag = false;
 80066e8:	4b3e      	ldr	r3, [pc, #248]	@ (80067e4 <main+0x1048>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	701a      	strb	r2, [r3, #0]
          uint32_t time = HAL_GetTick();
 80066ee:	f003 f9e7 	bl	8009ac0 <HAL_GetTick>
 80066f2:	67f8      	str	r0, [r7, #124]	@ 0x7c
          if(time - time_start >=100){
 80066f4:	4b3c      	ldr	r3, [pc, #240]	@ (80067e8 <main+0x104c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b63      	cmp	r3, #99	@ 0x63
 80066fe:	f240 8515 	bls.w	800712c <main+0x1990>
            path_change+=1;
 8006702:	4b34      	ldr	r3, [pc, #208]	@ (80067d4 <main+0x1038>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3301      	adds	r3, #1
 8006708:	4a32      	ldr	r2, [pc, #200]	@ (80067d4 <main+0x1038>)
 800670a:	6013      	str	r3, [r2, #0]
            flag = true;
 800670c:	4b35      	ldr	r3, [pc, #212]	@ (80067e4 <main+0x1048>)
 800670e:	2201      	movs	r2, #1
 8006710:	701a      	strb	r2, [r3, #0]
      break;
 8006712:	f000 bd0b 	b.w	800712c <main+0x1990>
        path_change = 0;
 8006716:	4b2f      	ldr	r3, [pc, #188]	@ (80067d4 <main+0x1038>)
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]
        path +=1;
 800671c:	4b33      	ldr	r3, [pc, #204]	@ (80067ec <main+0x1050>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3301      	adds	r3, #1
 8006722:	4a32      	ldr	r2, [pc, #200]	@ (80067ec <main+0x1050>)
 8006724:	6013      	str	r3, [r2, #0]
        PID_Reset(&pid_yaw);        
 8006726:	4832      	ldr	r0, [pc, #200]	@ (80067f0 <main+0x1054>)
 8006728:	f001 fc26 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_rear);
 800672c:	4831      	ldr	r0, [pc, #196]	@ (80067f4 <main+0x1058>)
 800672e:	f001 fc23 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_front);
 8006732:	4831      	ldr	r0, [pc, #196]	@ (80067f8 <main+0x105c>)
 8006734:	f001 fc20 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_position);
 8006738:	4830      	ldr	r0, [pc, #192]	@ (80067fc <main+0x1060>)
 800673a:	f001 fc1d 	bl	8007f78 <PID_Reset>
      break;
 800673e:	f000 bcf5 	b.w	800712c <main+0x1990>
        {
 8006742:	bf00      	nop
      break;
 8006744:	f000 bcf2 	b.w	800712c <main+0x1990>

    case 7:{
        // 参数定义
        const float TARGET_DISTANCE = 70.0f;   // 目标保持距离
 8006748:	4b2d      	ldr	r3, [pc, #180]	@ (8006800 <main+0x1064>)
 800674a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        const float DECEL_RANGE = 100.0f;      // 减速区间范围（70~170mm）
 800674e:	4b2d      	ldr	r3, [pc, #180]	@ (8006804 <main+0x1068>)
 8006750:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        const uint8_t MIN_SPEED = -10;          // 最小速度（靠近时）
 8006754:	23f6      	movs	r3, #246	@ 0xf6
 8006756:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
        const uint8_t MAX_SPEED = -60;          // 最大速度（远端时）
 800675a:	23c4      	movs	r3, #196	@ 0xc4
 800675c:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    
        // 获取当前检测距离（使用第4个传感器）
        float current_distance = distances[3]; 
 8006760:	4b1d      	ldr	r3, [pc, #116]	@ (80067d8 <main+0x103c>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    
        // 速度计算逻辑
        uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 8006768:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 800676c:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
    
        if (current_distance <= TARGET_DISTANCE) {
 8006770:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8006774:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8006778:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800677c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006780:	d842      	bhi.n	8006808 <main+0x106c>
            // 区域3：到达目标距离（≤70mm）
            motor_speed = MIN_SPEED;
 8006782:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8006786:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
    
            // 执行路径切换逻辑
            if(flag) {
 800678a:	4b16      	ldr	r3, [pc, #88]	@ (80067e4 <main+0x1048>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <main+0x1006>
                time_start = HAL_GetTick();
 8006792:	f003 f995 	bl	8009ac0 <HAL_GetTick>
 8006796:	4603      	mov	r3, r0
 8006798:	4a13      	ldr	r2, [pc, #76]	@ (80067e8 <main+0x104c>)
 800679a:	6013      	str	r3, [r2, #0]
                flag = false;
 800679c:	4b11      	ldr	r3, [pc, #68]	@ (80067e4 <main+0x1048>)
 800679e:	2200      	movs	r2, #0
 80067a0:	701a      	strb	r2, [r3, #0]
            }
            if(HAL_GetTick() - time_start >= 100) {
 80067a2:	f003 f98d 	bl	8009ac0 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	4b0f      	ldr	r3, [pc, #60]	@ (80067e8 <main+0x104c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b63      	cmp	r3, #99	@ 0x63
 80067b0:	d97b      	bls.n	80068aa <main+0x110e>
                path += 1;
 80067b2:	4b0e      	ldr	r3, [pc, #56]	@ (80067ec <main+0x1050>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3301      	adds	r3, #1
 80067b8:	4a0c      	ldr	r2, [pc, #48]	@ (80067ec <main+0x1050>)
 80067ba:	6013      	str	r3, [r2, #0]
                PID_ResetAll(); // 重置所有PID控制器
 80067bc:	f7fe ffd6 	bl	800576c <PID_ResetAll>
                flag = true;
 80067c0:	4b08      	ldr	r3, [pc, #32]	@ (80067e4 <main+0x1048>)
 80067c2:	2201      	movs	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]
 80067c6:	e070      	b.n	80068aa <main+0x110e>
 80067c8:	20000507 	.word	0x20000507
 80067cc:	2000050c 	.word	0x2000050c
 80067d0:	20000510 	.word	0x20000510
 80067d4:	20000418 	.word	0x20000418
 80067d8:	20000038 	.word	0x20000038
 80067dc:	428c0000 	.word	0x428c0000
 80067e0:	20000434 	.word	0x20000434
 80067e4:	2000004c 	.word	0x2000004c
 80067e8:	20000420 	.word	0x20000420
 80067ec:	20000414 	.word	0x20000414
 80067f0:	20000074 	.word	0x20000074
 80067f4:	200000a4 	.word	0x200000a4
 80067f8:	2000008c 	.word	0x2000008c
 80067fc:	200000bc 	.word	0x200000bc
 8006800:	428c0000 	.word	0x428c0000
 8006804:	42c80000 	.word	0x42c80000
            }
        } 
        else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8006808:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800680c:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8006810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006814:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8006818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800681c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006820:	d83f      	bhi.n	80068a2 <main+0x1106>
            // 区域2：减速区间（70~170mm）
            // 距离越近速度越慢，线性变化：170mm->60, 70mm->10
            float distance_from_target = current_distance - TARGET_DISTANCE;
 8006822:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8006826:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800682a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800682e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            float ratio = 1.0f - (distance_from_target / DECEL_RANGE);
 8006832:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 8006836:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800683a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800683e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006846:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 800684a:	f897 2092 	ldrb.w	r2, [r7, #146]	@ 0x92
 800684e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	ee07 3a90 	vmov	s15, r3
 8006858:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800685c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8006860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006868:	edc7 7a01 	vstr	s15, [r7, #4]
 800686c:	793b      	ldrb	r3, [r7, #4]
 800686e:	b2da      	uxtb	r2, r3
 8006870:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8006874:	4413      	add	r3, r2
 8006876:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
            motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 800687a:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 800687e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8006882:	429a      	cmp	r2, r3
 8006884:	d308      	bcc.n	8006898 <main+0x10fc>
 8006886:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 800688a:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 800688e:	4293      	cmp	r3, r2
 8006890:	bf28      	it	cs
 8006892:	4613      	movcs	r3, r2
 8006894:	b2db      	uxtb	r3, r3
 8006896:	e001      	b.n	800689c <main+0x1100>
 8006898:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800689c:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
 80068a0:	e003      	b.n	80068aa <main+0x110e>
        }
        else {
            // 区域1：全速区间（>170mm）
            motor_speed = MAX_SPEED;
 80068a2:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80068a6:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
        }
    
        // 执行带平滑过渡的电机控制
        static uint8_t last_speed = 0;
        motor_speed = smooth_speed_transition(last_speed, motor_speed);
 80068aa:	4b9a      	ldr	r3, [pc, #616]	@ (8006b14 <main+0x1378>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 80068b2:	4611      	mov	r1, r2
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fe ff0b 	bl	80056d0 <smooth_speed_transition>
 80068ba:	4603      	mov	r3, r0
 80068bc:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
        last_speed = motor_speed;
 80068c0:	4a94      	ldr	r2, [pc, #592]	@ (8006b14 <main+0x1378>)
 80068c2:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 80068c6:	7013      	strb	r3, [r2, #0]
    
        Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 80068c8:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 80068cc:	b21b      	sxth	r3, r3
 80068ce:	4a92      	ldr	r2, [pc, #584]	@ (8006b18 <main+0x137c>)
 80068d0:	9202      	str	r2, [sp, #8]
 80068d2:	4a92      	ldr	r2, [pc, #584]	@ (8006b1c <main+0x1380>)
 80068d4:	9201      	str	r2, [sp, #4]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	2303      	movs	r3, #3
 80068da:	2202      	movs	r2, #2
 80068dc:	2101      	movs	r1, #1
 80068de:	2000      	movs	r0, #0
 80068e0:	f000 fe86 	bl	80075f0 <Motor_Rightward>
    
        OLED_ShowNum(4, 4, motor_speed, 2);
 80068e4:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 80068e8:	2302      	movs	r3, #2
 80068ea:	2104      	movs	r1, #4
 80068ec:	2004      	movs	r0, #4
 80068ee:	f7fe fa5d 	bl	8004dac <OLED_ShowNum>
        break;
 80068f2:	f000 bc27 	b.w	8007144 <main+0x19a8>
    }

    case 8:

      if (path_change!=2)
 80068f6:	4b8a      	ldr	r3, [pc, #552]	@ (8006b20 <main+0x1384>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	f000 80b2 	beq.w	8006a64 <main+0x12c8>
      {
        if ((distances[3]>=70 && mean[3]>=70 && path_change==0)||(distances[3]<=70 && mean[3]<=70 && path_change==1))
 8006900:	4b88      	ldr	r3, [pc, #544]	@ (8006b24 <main+0x1388>)
 8006902:	edd3 7a03 	vldr	s15, [r3, #12]
 8006906:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8006b28 <main+0x138c>
 800690a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800690e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006912:	db0d      	blt.n	8006930 <main+0x1194>
 8006914:	4b85      	ldr	r3, [pc, #532]	@ (8006b2c <main+0x1390>)
 8006916:	edd3 7a03 	vldr	s15, [r3, #12]
 800691a:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8006b28 <main+0x138c>
 800691e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006926:	db03      	blt.n	8006930 <main+0x1194>
 8006928:	4b7d      	ldr	r3, [pc, #500]	@ (8006b20 <main+0x1384>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d017      	beq.n	8006960 <main+0x11c4>
 8006930:	4b7c      	ldr	r3, [pc, #496]	@ (8006b24 <main+0x1388>)
 8006932:	edd3 7a03 	vldr	s15, [r3, #12]
 8006936:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8006b28 <main+0x138c>
 800693a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800693e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006942:	d81b      	bhi.n	800697c <main+0x11e0>
 8006944:	4b79      	ldr	r3, [pc, #484]	@ (8006b2c <main+0x1390>)
 8006946:	edd3 7a03 	vldr	s15, [r3, #12]
 800694a:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8006b28 <main+0x138c>
 800694e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006956:	d811      	bhi.n	800697c <main+0x11e0>
 8006958:	4b71      	ldr	r3, [pc, #452]	@ (8006b20 <main+0x1384>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d10d      	bne.n	800697c <main+0x11e0>
        {
          Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8006960:	4b6d      	ldr	r3, [pc, #436]	@ (8006b18 <main+0x137c>)
 8006962:	9302      	str	r3, [sp, #8]
 8006964:	4b6d      	ldr	r3, [pc, #436]	@ (8006b1c <main+0x1380>)
 8006966:	9301      	str	r3, [sp, #4]
 8006968:	f06f 031d 	mvn.w	r3, #29
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	2303      	movs	r3, #3
 8006970:	2202      	movs	r2, #2
 8006972:	2101      	movs	r1, #1
 8006974:	2000      	movs	r0, #0
 8006976:	f001 f85f 	bl	8007a38 <Motor_Straight>
 800697a:	e089      	b.n	8006a90 <main+0x12f4>
        }else if (distances[3]<=70 && mean[3]<=70 && path_change==0)
 800697c:	4b69      	ldr	r3, [pc, #420]	@ (8006b24 <main+0x1388>)
 800697e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006982:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8006b28 <main+0x138c>
 8006986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800698a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698e:	d82d      	bhi.n	80069ec <main+0x1250>
 8006990:	4b66      	ldr	r3, [pc, #408]	@ (8006b2c <main+0x1390>)
 8006992:	edd3 7a03 	vldr	s15, [r3, #12]
 8006996:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8006b28 <main+0x138c>
 800699a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800699e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a2:	d823      	bhi.n	80069ec <main+0x1250>
 80069a4:	4b5e      	ldr	r3, [pc, #376]	@ (8006b20 <main+0x1384>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d11f      	bne.n	80069ec <main+0x1250>
        {
          if(flag){
 80069ac:	4b60      	ldr	r3, [pc, #384]	@ (8006b30 <main+0x1394>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d007      	beq.n	80069c4 <main+0x1228>
            time_start = HAL_GetTick();
 80069b4:	f003 f884 	bl	8009ac0 <HAL_GetTick>
 80069b8:	4603      	mov	r3, r0
 80069ba:	4a5e      	ldr	r2, [pc, #376]	@ (8006b34 <main+0x1398>)
 80069bc:	6013      	str	r3, [r2, #0]
            flag = false;
 80069be:	4b5c      	ldr	r3, [pc, #368]	@ (8006b30 <main+0x1394>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	701a      	strb	r2, [r3, #0]
          }
          uint32_t time = HAL_GetTick();
 80069c4:	f003 f87c 	bl	8009ac0 <HAL_GetTick>
 80069c8:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
          if(time - time_start >=100){
 80069cc:	4b59      	ldr	r3, [pc, #356]	@ (8006b34 <main+0x1398>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b63      	cmp	r3, #99	@ 0x63
 80069d8:	d959      	bls.n	8006a8e <main+0x12f2>
            path_change+=1;
 80069da:	4b51      	ldr	r3, [pc, #324]	@ (8006b20 <main+0x1384>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3301      	adds	r3, #1
 80069e0:	4a4f      	ldr	r2, [pc, #316]	@ (8006b20 <main+0x1384>)
 80069e2:	6013      	str	r3, [r2, #0]
            flag = true;
 80069e4:	4b52      	ldr	r3, [pc, #328]	@ (8006b30 <main+0x1394>)
 80069e6:	2201      	movs	r2, #1
 80069e8:	701a      	strb	r2, [r3, #0]
        {
 80069ea:	e050      	b.n	8006a8e <main+0x12f2>
          }
        }else if (distances[3]>=70 && mean[3]>=70 && path_change==1)
 80069ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006b24 <main+0x1388>)
 80069ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80069f2:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8006b28 <main+0x138c>
 80069f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069fe:	da00      	bge.n	8006a02 <main+0x1266>
        PID_Reset(&pid_rear);
        PID_Reset(&pid_front);
        PID_Reset(&pid_position);
      }
        
      break;
 8006a00:	e397      	b.n	8007132 <main+0x1996>
        }else if (distances[3]>=70 && mean[3]>=70 && path_change==1)
 8006a02:	4b4a      	ldr	r3, [pc, #296]	@ (8006b2c <main+0x1390>)
 8006a04:	edd3 7a03 	vldr	s15, [r3, #12]
 8006a08:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8006b28 <main+0x138c>
 8006a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a14:	da00      	bge.n	8006a18 <main+0x127c>
      break;
 8006a16:	e38c      	b.n	8007132 <main+0x1996>
        }else if (distances[3]>=70 && mean[3]>=70 && path_change==1)
 8006a18:	4b41      	ldr	r3, [pc, #260]	@ (8006b20 <main+0x1384>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	f040 8388 	bne.w	8007132 <main+0x1996>
          if(flag){
 8006a22:	4b43      	ldr	r3, [pc, #268]	@ (8006b30 <main+0x1394>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d007      	beq.n	8006a3a <main+0x129e>
            time_start = HAL_GetTick();
 8006a2a:	f003 f849 	bl	8009ac0 <HAL_GetTick>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	4a40      	ldr	r2, [pc, #256]	@ (8006b34 <main+0x1398>)
 8006a32:	6013      	str	r3, [r2, #0]
            flag = false;
 8006a34:	4b3e      	ldr	r3, [pc, #248]	@ (8006b30 <main+0x1394>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	701a      	strb	r2, [r3, #0]
          uint32_t time = HAL_GetTick();
 8006a3a:	f003 f841 	bl	8009ac0 <HAL_GetTick>
 8006a3e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
          if(time - time_start >=100){
 8006a42:	4b3c      	ldr	r3, [pc, #240]	@ (8006b34 <main+0x1398>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b63      	cmp	r3, #99	@ 0x63
 8006a4e:	f240 8370 	bls.w	8007132 <main+0x1996>
            path_change+=1;
 8006a52:	4b33      	ldr	r3, [pc, #204]	@ (8006b20 <main+0x1384>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3301      	adds	r3, #1
 8006a58:	4a31      	ldr	r2, [pc, #196]	@ (8006b20 <main+0x1384>)
 8006a5a:	6013      	str	r3, [r2, #0]
            flag = true;
 8006a5c:	4b34      	ldr	r3, [pc, #208]	@ (8006b30 <main+0x1394>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	701a      	strb	r2, [r3, #0]
      break;
 8006a62:	e366      	b.n	8007132 <main+0x1996>
        path_change = 0;
 8006a64:	4b2e      	ldr	r3, [pc, #184]	@ (8006b20 <main+0x1384>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
        path +=1;
 8006a6a:	4b33      	ldr	r3, [pc, #204]	@ (8006b38 <main+0x139c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	4a31      	ldr	r2, [pc, #196]	@ (8006b38 <main+0x139c>)
 8006a72:	6013      	str	r3, [r2, #0]
        PID_Reset(&pid_yaw);        
 8006a74:	4831      	ldr	r0, [pc, #196]	@ (8006b3c <main+0x13a0>)
 8006a76:	f001 fa7f 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_rear);
 8006a7a:	4831      	ldr	r0, [pc, #196]	@ (8006b40 <main+0x13a4>)
 8006a7c:	f001 fa7c 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_front);
 8006a80:	4830      	ldr	r0, [pc, #192]	@ (8006b44 <main+0x13a8>)
 8006a82:	f001 fa79 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_position);
 8006a86:	4830      	ldr	r0, [pc, #192]	@ (8006b48 <main+0x13ac>)
 8006a88:	f001 fa76 	bl	8007f78 <PID_Reset>
      break;
 8006a8c:	e351      	b.n	8007132 <main+0x1996>
        {
 8006a8e:	bf00      	nop
      break;
 8006a90:	e34f      	b.n	8007132 <main+0x1996>

    case 9:{
      // 参数定义
      const float TARGET_DISTANCE = 70.0f;   // 目标保持距离
 8006a92:	4b2e      	ldr	r3, [pc, #184]	@ (8006b4c <main+0x13b0>)
 8006a94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
      const float DECEL_RANGE = 100.0f;      // 减速区间范围（70~170mm）
 8006a98:	4b2d      	ldr	r3, [pc, #180]	@ (8006b50 <main+0x13b4>)
 8006a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      const uint8_t MIN_SPEED = 10;          // 最小速度（靠近时）
 8006a9e:	230a      	movs	r3, #10
 8006aa0:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
      const uint8_t MAX_SPEED = 60;          // 最大速度（远端时）
 8006aa4:	233c      	movs	r3, #60	@ 0x3c
 8006aa6:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
  
      // 获取当前检测距离（使用第4个传感器）
      float current_distance = distances[3]; 
 8006aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8006b24 <main+0x1388>)
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
      // 速度计算逻辑
      uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 8006ab2:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8006ab6:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
  
      if (current_distance <= TARGET_DISTANCE) {
 8006aba:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8006abe:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8006ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aca:	d843      	bhi.n	8006b54 <main+0x13b8>
          // 区域3：到达目标距离（≤70mm）
          motor_speed = MIN_SPEED;
 8006acc:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8006ad0:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
  
          // 执行路径切换逻辑
          if(flag) {
 8006ad4:	4b16      	ldr	r3, [pc, #88]	@ (8006b30 <main+0x1394>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d007      	beq.n	8006aec <main+0x1350>
              time_start = HAL_GetTick();
 8006adc:	f002 fff0 	bl	8009ac0 <HAL_GetTick>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	4a14      	ldr	r2, [pc, #80]	@ (8006b34 <main+0x1398>)
 8006ae4:	6013      	str	r3, [r2, #0]
              flag = false;
 8006ae6:	4b12      	ldr	r3, [pc, #72]	@ (8006b30 <main+0x1394>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	701a      	strb	r2, [r3, #0]
          }
          if(HAL_GetTick() - time_start >= 100) {
 8006aec:	f002 ffe8 	bl	8009ac0 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	4b10      	ldr	r3, [pc, #64]	@ (8006b34 <main+0x1398>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b63      	cmp	r3, #99	@ 0x63
 8006afa:	d97c      	bls.n	8006bf6 <main+0x145a>
              path += 1;
 8006afc:	4b0e      	ldr	r3, [pc, #56]	@ (8006b38 <main+0x139c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3301      	adds	r3, #1
 8006b02:	4a0d      	ldr	r2, [pc, #52]	@ (8006b38 <main+0x139c>)
 8006b04:	6013      	str	r3, [r2, #0]
              PID_ResetAll(); // 重置所有PID控制器
 8006b06:	f7fe fe31 	bl	800576c <PID_ResetAll>
              flag = true;
 8006b0a:	4b09      	ldr	r3, [pc, #36]	@ (8006b30 <main+0x1394>)
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	e071      	b.n	8006bf6 <main+0x145a>
 8006b12:	bf00      	nop
 8006b14:	20000508 	.word	0x20000508
 8006b18:	2000050c 	.word	0x2000050c
 8006b1c:	20000510 	.word	0x20000510
 8006b20:	20000418 	.word	0x20000418
 8006b24:	20000038 	.word	0x20000038
 8006b28:	428c0000 	.word	0x428c0000
 8006b2c:	20000434 	.word	0x20000434
 8006b30:	2000004c 	.word	0x2000004c
 8006b34:	20000420 	.word	0x20000420
 8006b38:	20000414 	.word	0x20000414
 8006b3c:	20000074 	.word	0x20000074
 8006b40:	200000a4 	.word	0x200000a4
 8006b44:	2000008c 	.word	0x2000008c
 8006b48:	200000bc 	.word	0x200000bc
 8006b4c:	428c0000 	.word	0x428c0000
 8006b50:	42c80000 	.word	0x42c80000
          }
      } 
      else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8006b54:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8006b58:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8006b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b60:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8006b64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b6c:	d83f      	bhi.n	8006bee <main+0x1452>
          // 区域2：减速区间（70~170mm）
          // 距离越近速度越慢，线性变化：170mm->60, 70mm->10
          float distance_from_target = current_distance - TARGET_DISTANCE;
 8006b6e:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8006b72:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8006b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b7a:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
          float ratio = 1.0f - (distance_from_target / DECEL_RANGE);
 8006b7e:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 8006b82:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8006b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b92:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
          motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 8006b96:	f897 20b2 	ldrb.w	r2, [r7, #178]	@ 0xb2
 8006b9a:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	ee07 3a90 	vmov	s15, r3
 8006ba4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ba8:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8006bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bb4:	edc7 7a01 	vstr	s15, [r7, #4]
 8006bb8:	793b      	ldrb	r3, [r7, #4]
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
          motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8006bc6:	f897 20f6 	ldrb.w	r2, [r7, #246]	@ 0xf6
 8006bca:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d308      	bcc.n	8006be4 <main+0x1448>
 8006bd2:	f897 20f6 	ldrb.w	r2, [r7, #246]	@ 0xf6
 8006bd6:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	bf28      	it	cs
 8006bde:	4613      	movcs	r3, r2
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	e001      	b.n	8006be8 <main+0x144c>
 8006be4:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8006be8:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
 8006bec:	e003      	b.n	8006bf6 <main+0x145a>
      }
      else {
          // 区域1：全速区间（>170mm）
          motor_speed = MAX_SPEED;
 8006bee:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8006bf2:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
      }
  
      // 执行带平滑过渡的电机控制
      static uint8_t last_speed = 0;
      motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8006bf6:	4b99      	ldr	r3, [pc, #612]	@ (8006e5c <main+0x16c0>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	f897 20f6 	ldrb.w	r2, [r7, #246]	@ 0xf6
 8006bfe:	4611      	mov	r1, r2
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fe fd65 	bl	80056d0 <smooth_speed_transition>
 8006c06:	4603      	mov	r3, r0
 8006c08:	f887 30f6 	strb.w	r3, [r7, #246]	@ 0xf6
      last_speed = motor_speed;
 8006c0c:	4a93      	ldr	r2, [pc, #588]	@ (8006e5c <main+0x16c0>)
 8006c0e:	f897 30f6 	ldrb.w	r3, [r7, #246]	@ 0xf6
 8006c12:	7013      	strb	r3, [r2, #0]
  
      Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8006c14:	f897 30f6 	ldrb.w	r3, [r7, #246]	@ 0xf6
 8006c18:	b21b      	sxth	r3, r3
 8006c1a:	4a91      	ldr	r2, [pc, #580]	@ (8006e60 <main+0x16c4>)
 8006c1c:	9202      	str	r2, [sp, #8]
 8006c1e:	4a91      	ldr	r2, [pc, #580]	@ (8006e64 <main+0x16c8>)
 8006c20:	9201      	str	r2, [sp, #4]
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	2303      	movs	r3, #3
 8006c26:	2202      	movs	r2, #2
 8006c28:	2101      	movs	r1, #1
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	f000 fce0 	bl	80075f0 <Motor_Rightward>
  
      OLED_ShowNum(4, 4, motor_speed, 2);
 8006c30:	f897 20f6 	ldrb.w	r2, [r7, #246]	@ 0xf6
 8006c34:	2302      	movs	r3, #2
 8006c36:	2104      	movs	r1, #4
 8006c38:	2004      	movs	r0, #4
 8006c3a:	f7fe f8b7 	bl	8004dac <OLED_ShowNum>
      break;
 8006c3e:	e281      	b.n	8007144 <main+0x19a8>
  }

    case 10:
      if (path_change!=2)
 8006c40:	4b89      	ldr	r3, [pc, #548]	@ (8006e68 <main+0x16cc>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	f000 80b2 	beq.w	8006dae <main+0x1612>
      {
        if ((distances[0]>=70 && mean[0]>=70 && path_change==0)||(distances[0]<=70 && mean[0]<=70 && path_change==1))
 8006c4a:	4b88      	ldr	r3, [pc, #544]	@ (8006e6c <main+0x16d0>)
 8006c4c:	edd3 7a00 	vldr	s15, [r3]
 8006c50:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8006e70 <main+0x16d4>
 8006c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5c:	db0d      	blt.n	8006c7a <main+0x14de>
 8006c5e:	4b85      	ldr	r3, [pc, #532]	@ (8006e74 <main+0x16d8>)
 8006c60:	edd3 7a00 	vldr	s15, [r3]
 8006c64:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8006e70 <main+0x16d4>
 8006c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c70:	db03      	blt.n	8006c7a <main+0x14de>
 8006c72:	4b7d      	ldr	r3, [pc, #500]	@ (8006e68 <main+0x16cc>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d017      	beq.n	8006caa <main+0x150e>
 8006c7a:	4b7c      	ldr	r3, [pc, #496]	@ (8006e6c <main+0x16d0>)
 8006c7c:	edd3 7a00 	vldr	s15, [r3]
 8006c80:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8006e70 <main+0x16d4>
 8006c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8c:	d81b      	bhi.n	8006cc6 <main+0x152a>
 8006c8e:	4b79      	ldr	r3, [pc, #484]	@ (8006e74 <main+0x16d8>)
 8006c90:	edd3 7a00 	vldr	s15, [r3]
 8006c94:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8006e70 <main+0x16d4>
 8006c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca0:	d811      	bhi.n	8006cc6 <main+0x152a>
 8006ca2:	4b71      	ldr	r3, [pc, #452]	@ (8006e68 <main+0x16cc>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d10d      	bne.n	8006cc6 <main+0x152a>
        {
          Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8006caa:	4b6d      	ldr	r3, [pc, #436]	@ (8006e60 <main+0x16c4>)
 8006cac:	9302      	str	r3, [sp, #8]
 8006cae:	4b6d      	ldr	r3, [pc, #436]	@ (8006e64 <main+0x16c8>)
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	f06f 031d 	mvn.w	r3, #29
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	2303      	movs	r3, #3
 8006cba:	2202      	movs	r2, #2
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	f000 feba 	bl	8007a38 <Motor_Straight>
 8006cc4:	e089      	b.n	8006dda <main+0x163e>
        }else if (distances[0]<=70 && mean[0]<=70 && path_change==0)
 8006cc6:	4b69      	ldr	r3, [pc, #420]	@ (8006e6c <main+0x16d0>)
 8006cc8:	edd3 7a00 	vldr	s15, [r3]
 8006ccc:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8006e70 <main+0x16d4>
 8006cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd8:	d82d      	bhi.n	8006d36 <main+0x159a>
 8006cda:	4b66      	ldr	r3, [pc, #408]	@ (8006e74 <main+0x16d8>)
 8006cdc:	edd3 7a00 	vldr	s15, [r3]
 8006ce0:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8006e70 <main+0x16d4>
 8006ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cec:	d823      	bhi.n	8006d36 <main+0x159a>
 8006cee:	4b5e      	ldr	r3, [pc, #376]	@ (8006e68 <main+0x16cc>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d11f      	bne.n	8006d36 <main+0x159a>
        {
          if(flag){
 8006cf6:	4b60      	ldr	r3, [pc, #384]	@ (8006e78 <main+0x16dc>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d007      	beq.n	8006d0e <main+0x1572>
            time_start = HAL_GetTick();
 8006cfe:	f002 fedf 	bl	8009ac0 <HAL_GetTick>
 8006d02:	4603      	mov	r3, r0
 8006d04:	4a5d      	ldr	r2, [pc, #372]	@ (8006e7c <main+0x16e0>)
 8006d06:	6013      	str	r3, [r2, #0]
            flag = false;
 8006d08:	4b5b      	ldr	r3, [pc, #364]	@ (8006e78 <main+0x16dc>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	701a      	strb	r2, [r3, #0]
          }
          uint32_t time = HAL_GetTick();
 8006d0e:	f002 fed7 	bl	8009ac0 <HAL_GetTick>
 8006d12:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
          if(time - time_start >=100){
 8006d16:	4b59      	ldr	r3, [pc, #356]	@ (8006e7c <main+0x16e0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b63      	cmp	r3, #99	@ 0x63
 8006d22:	d959      	bls.n	8006dd8 <main+0x163c>
            path_change+=1;
 8006d24:	4b50      	ldr	r3, [pc, #320]	@ (8006e68 <main+0x16cc>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	4a4f      	ldr	r2, [pc, #316]	@ (8006e68 <main+0x16cc>)
 8006d2c:	6013      	str	r3, [r2, #0]
            flag = true;
 8006d2e:	4b52      	ldr	r3, [pc, #328]	@ (8006e78 <main+0x16dc>)
 8006d30:	2201      	movs	r2, #1
 8006d32:	701a      	strb	r2, [r3, #0]
        {
 8006d34:	e050      	b.n	8006dd8 <main+0x163c>
          }
        }else if (distances[0]>=70 && mean[0]>=70 && path_change==1)
 8006d36:	4b4d      	ldr	r3, [pc, #308]	@ (8006e6c <main+0x16d0>)
 8006d38:	edd3 7a00 	vldr	s15, [r3]
 8006d3c:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006e70 <main+0x16d4>
 8006d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d48:	da00      	bge.n	8006d4c <main+0x15b0>
        PID_Reset(&pid_rear);
        PID_Reset(&pid_front);
        PID_Reset(&pid_position);
      }
        
      break;
 8006d4a:	e1f5      	b.n	8007138 <main+0x199c>
        }else if (distances[0]>=70 && mean[0]>=70 && path_change==1)
 8006d4c:	4b49      	ldr	r3, [pc, #292]	@ (8006e74 <main+0x16d8>)
 8006d4e:	edd3 7a00 	vldr	s15, [r3]
 8006d52:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8006e70 <main+0x16d4>
 8006d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d5e:	da00      	bge.n	8006d62 <main+0x15c6>
      break;
 8006d60:	e1ea      	b.n	8007138 <main+0x199c>
        }else if (distances[0]>=70 && mean[0]>=70 && path_change==1)
 8006d62:	4b41      	ldr	r3, [pc, #260]	@ (8006e68 <main+0x16cc>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	f040 81e6 	bne.w	8007138 <main+0x199c>
          if(flag){
 8006d6c:	4b42      	ldr	r3, [pc, #264]	@ (8006e78 <main+0x16dc>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <main+0x15e8>
            time_start = HAL_GetTick();
 8006d74:	f002 fea4 	bl	8009ac0 <HAL_GetTick>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	4a40      	ldr	r2, [pc, #256]	@ (8006e7c <main+0x16e0>)
 8006d7c:	6013      	str	r3, [r2, #0]
            flag = false;
 8006d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8006e78 <main+0x16dc>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	701a      	strb	r2, [r3, #0]
          uint32_t time = HAL_GetTick();
 8006d84:	f002 fe9c 	bl	8009ac0 <HAL_GetTick>
 8006d88:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
          if(time - time_start >=100){
 8006d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8006e7c <main+0x16e0>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b63      	cmp	r3, #99	@ 0x63
 8006d98:	f240 81ce 	bls.w	8007138 <main+0x199c>
            path_change+=1;
 8006d9c:	4b32      	ldr	r3, [pc, #200]	@ (8006e68 <main+0x16cc>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3301      	adds	r3, #1
 8006da2:	4a31      	ldr	r2, [pc, #196]	@ (8006e68 <main+0x16cc>)
 8006da4:	6013      	str	r3, [r2, #0]
            flag = true;
 8006da6:	4b34      	ldr	r3, [pc, #208]	@ (8006e78 <main+0x16dc>)
 8006da8:	2201      	movs	r2, #1
 8006daa:	701a      	strb	r2, [r3, #0]
      break;
 8006dac:	e1c4      	b.n	8007138 <main+0x199c>
        path_change = 0;
 8006dae:	4b2e      	ldr	r3, [pc, #184]	@ (8006e68 <main+0x16cc>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]
        path +=1;
 8006db4:	4b32      	ldr	r3, [pc, #200]	@ (8006e80 <main+0x16e4>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3301      	adds	r3, #1
 8006dba:	4a31      	ldr	r2, [pc, #196]	@ (8006e80 <main+0x16e4>)
 8006dbc:	6013      	str	r3, [r2, #0]
        PID_Reset(&pid_yaw);        
 8006dbe:	4831      	ldr	r0, [pc, #196]	@ (8006e84 <main+0x16e8>)
 8006dc0:	f001 f8da 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_rear);
 8006dc4:	4830      	ldr	r0, [pc, #192]	@ (8006e88 <main+0x16ec>)
 8006dc6:	f001 f8d7 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_front);
 8006dca:	4830      	ldr	r0, [pc, #192]	@ (8006e8c <main+0x16f0>)
 8006dcc:	f001 f8d4 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_position);
 8006dd0:	482f      	ldr	r0, [pc, #188]	@ (8006e90 <main+0x16f4>)
 8006dd2:	f001 f8d1 	bl	8007f78 <PID_Reset>
      break;
 8006dd6:	e1af      	b.n	8007138 <main+0x199c>
        {
 8006dd8:	bf00      	nop
      break;
 8006dda:	e1ad      	b.n	8007138 <main+0x199c>

    case 11:{
      // 参数定义
      const float TARGET_DISTANCE = 70.0f;   // 目标保持距离
 8006ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8006e94 <main+0x16f8>)
 8006dde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      const float DECEL_RANGE = 100.0f;      // 减速区间范围（70~170mm）
 8006de2:	4b2d      	ldr	r3, [pc, #180]	@ (8006e98 <main+0x16fc>)
 8006de4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      const uint8_t MIN_SPEED = -10;          // 最小速度（靠近时）
 8006de8:	23f6      	movs	r3, #246	@ 0xf6
 8006dea:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
      const uint8_t MAX_SPEED = -60;          // 最大速度（远端时）
 8006dee:	23c4      	movs	r3, #196	@ 0xc4
 8006df0:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
  
      // 获取当前检测距离（使用第4个传感器）
      float current_distance = distances[3]; 
 8006df4:	4b1d      	ldr	r3, [pc, #116]	@ (8006e6c <main+0x16d0>)
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  
      // 速度计算逻辑
      uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 8006dfc:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8006e00:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
  
      if (current_distance <= TARGET_DISTANCE) {
 8006e04:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8006e08:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8006e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e14:	d842      	bhi.n	8006e9c <main+0x1700>
          // 区域3：到达目标距离（≤70mm）
          motor_speed = MIN_SPEED;
 8006e16:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006e1a:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
  
          // 执行路径切换逻辑
          if(flag) {
 8006e1e:	4b16      	ldr	r3, [pc, #88]	@ (8006e78 <main+0x16dc>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d007      	beq.n	8006e36 <main+0x169a>
              time_start = HAL_GetTick();
 8006e26:	f002 fe4b 	bl	8009ac0 <HAL_GetTick>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	4a13      	ldr	r2, [pc, #76]	@ (8006e7c <main+0x16e0>)
 8006e2e:	6013      	str	r3, [r2, #0]
              flag = false;
 8006e30:	4b11      	ldr	r3, [pc, #68]	@ (8006e78 <main+0x16dc>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	701a      	strb	r2, [r3, #0]
          }
          if(HAL_GetTick() - time_start >= 100) {
 8006e36:	f002 fe43 	bl	8009ac0 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006e7c <main+0x16e0>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b63      	cmp	r3, #99	@ 0x63
 8006e44:	d97b      	bls.n	8006f3e <main+0x17a2>
              path += 1;
 8006e46:	4b0e      	ldr	r3, [pc, #56]	@ (8006e80 <main+0x16e4>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8006e80 <main+0x16e4>)
 8006e4e:	6013      	str	r3, [r2, #0]
              PID_ResetAll(); // 重置所有PID控制器
 8006e50:	f7fe fc8c 	bl	800576c <PID_ResetAll>
              flag = true;
 8006e54:	4b08      	ldr	r3, [pc, #32]	@ (8006e78 <main+0x16dc>)
 8006e56:	2201      	movs	r2, #1
 8006e58:	701a      	strb	r2, [r3, #0]
 8006e5a:	e070      	b.n	8006f3e <main+0x17a2>
 8006e5c:	20000509 	.word	0x20000509
 8006e60:	2000050c 	.word	0x2000050c
 8006e64:	20000510 	.word	0x20000510
 8006e68:	20000418 	.word	0x20000418
 8006e6c:	20000038 	.word	0x20000038
 8006e70:	428c0000 	.word	0x428c0000
 8006e74:	20000434 	.word	0x20000434
 8006e78:	2000004c 	.word	0x2000004c
 8006e7c:	20000420 	.word	0x20000420
 8006e80:	20000414 	.word	0x20000414
 8006e84:	20000074 	.word	0x20000074
 8006e88:	200000a4 	.word	0x200000a4
 8006e8c:	2000008c 	.word	0x2000008c
 8006e90:	200000bc 	.word	0x200000bc
 8006e94:	428c0000 	.word	0x428c0000
 8006e98:	42c80000 	.word	0x42c80000
          }
      } 
      else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8006e9c:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8006ea0:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8006ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ea8:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8006eac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb4:	d83f      	bhi.n	8006f36 <main+0x179a>
          // 区域2：减速区间（70~170mm）
          // 距离越近速度越慢，线性变化：170mm->60, 70mm->10
          float distance_from_target = current_distance - TARGET_DISTANCE;
 8006eb6:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8006eba:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8006ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ec2:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8
          float ratio = 1.0f - (distance_from_target / DECEL_RANGE);
 8006ec6:	edd7 6a32 	vldr	s13, [r7, #200]	@ 0xc8
 8006eca:	ed97 7a35 	vldr	s14, [r7, #212]	@ 0xd4
 8006ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006eda:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
          motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 8006ede:	f897 20d2 	ldrb.w	r2, [r7, #210]	@ 0xd2
 8006ee2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	ee07 3a90 	vmov	s15, r3
 8006eec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ef0:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8006ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006efc:	edc7 7a01 	vstr	s15, [r7, #4]
 8006f00:	793b      	ldrb	r3, [r7, #4]
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006f08:	4413      	add	r3, r2
 8006f0a:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
          motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8006f0e:	f897 20f5 	ldrb.w	r2, [r7, #245]	@ 0xf5
 8006f12:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d308      	bcc.n	8006f2c <main+0x1790>
 8006f1a:	f897 20f5 	ldrb.w	r2, [r7, #245]	@ 0xf5
 8006f1e:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8006f22:	4293      	cmp	r3, r2
 8006f24:	bf28      	it	cs
 8006f26:	4613      	movcs	r3, r2
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	e001      	b.n	8006f30 <main+0x1794>
 8006f2c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006f30:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
 8006f34:	e003      	b.n	8006f3e <main+0x17a2>
      }
      else {
          // 区域1：全速区间（>170mm）
          motor_speed = MAX_SPEED;
 8006f36:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8006f3a:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
      }
  
      // 执行带平滑过渡的电机控制
      static uint8_t last_speed = 0;
      motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8006f3e:	4b82      	ldr	r3, [pc, #520]	@ (8007148 <main+0x19ac>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	f897 20f5 	ldrb.w	r2, [r7, #245]	@ 0xf5
 8006f46:	4611      	mov	r1, r2
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fe fbc1 	bl	80056d0 <smooth_speed_transition>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
      last_speed = motor_speed;
 8006f54:	4a7c      	ldr	r2, [pc, #496]	@ (8007148 <main+0x19ac>)
 8006f56:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
 8006f5a:	7013      	strb	r3, [r2, #0]
  
      Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8006f5c:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
 8006f60:	b21b      	sxth	r3, r3
 8006f62:	4a7a      	ldr	r2, [pc, #488]	@ (800714c <main+0x19b0>)
 8006f64:	9202      	str	r2, [sp, #8]
 8006f66:	4a7a      	ldr	r2, [pc, #488]	@ (8007150 <main+0x19b4>)
 8006f68:	9201      	str	r2, [sp, #4]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	2202      	movs	r2, #2
 8006f70:	2101      	movs	r1, #1
 8006f72:	2000      	movs	r0, #0
 8006f74:	f000 fb3c 	bl	80075f0 <Motor_Rightward>
  
      OLED_ShowNum(4, 4, motor_speed, 2);
 8006f78:	f897 20f5 	ldrb.w	r2, [r7, #245]	@ 0xf5
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	2104      	movs	r1, #4
 8006f80:	2004      	movs	r0, #4
 8006f82:	f7fd ff13 	bl	8004dac <OLED_ShowNum>
      break;
 8006f86:	e0dd      	b.n	8007144 <main+0x19a8>
  }

    case 12:

      if (path_change!=2)
 8006f88:	4b72      	ldr	r3, [pc, #456]	@ (8007154 <main+0x19b8>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	f000 80b0 	beq.w	80070f2 <main+0x1956>
      {
        if ((distances[3]>=70 && mean[3]>=70 && path_change==0)||(distances[3]<=70 && mean[3]<=70 && path_change==1))
 8006f92:	4b71      	ldr	r3, [pc, #452]	@ (8007158 <main+0x19bc>)
 8006f94:	edd3 7a03 	vldr	s15, [r3, #12]
 8006f98:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 800715c <main+0x19c0>
 8006f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa4:	db0d      	blt.n	8006fc2 <main+0x1826>
 8006fa6:	4b6e      	ldr	r3, [pc, #440]	@ (8007160 <main+0x19c4>)
 8006fa8:	edd3 7a03 	vldr	s15, [r3, #12]
 8006fac:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800715c <main+0x19c0>
 8006fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb8:	db03      	blt.n	8006fc2 <main+0x1826>
 8006fba:	4b66      	ldr	r3, [pc, #408]	@ (8007154 <main+0x19b8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d017      	beq.n	8006ff2 <main+0x1856>
 8006fc2:	4b65      	ldr	r3, [pc, #404]	@ (8007158 <main+0x19bc>)
 8006fc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8006fc8:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 800715c <main+0x19c0>
 8006fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd4:	d81b      	bhi.n	800700e <main+0x1872>
 8006fd6:	4b62      	ldr	r3, [pc, #392]	@ (8007160 <main+0x19c4>)
 8006fd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8006fdc:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800715c <main+0x19c0>
 8006fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe8:	d811      	bhi.n	800700e <main+0x1872>
 8006fea:	4b5a      	ldr	r3, [pc, #360]	@ (8007154 <main+0x19b8>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d10d      	bne.n	800700e <main+0x1872>
        {
          Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8006ff2:	4b56      	ldr	r3, [pc, #344]	@ (800714c <main+0x19b0>)
 8006ff4:	9302      	str	r3, [sp, #8]
 8006ff6:	4b56      	ldr	r3, [pc, #344]	@ (8007150 <main+0x19b4>)
 8006ff8:	9301      	str	r3, [sp, #4]
 8006ffa:	f06f 031d 	mvn.w	r3, #29
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	2303      	movs	r3, #3
 8007002:	2202      	movs	r2, #2
 8007004:	2101      	movs	r1, #1
 8007006:	2000      	movs	r0, #0
 8007008:	f000 fd16 	bl	8007a38 <Motor_Straight>
 800700c:	e087      	b.n	800711e <main+0x1982>
        }else if (distances[3]<=70 && mean[3]<=70 && path_change==0)
 800700e:	4b52      	ldr	r3, [pc, #328]	@ (8007158 <main+0x19bc>)
 8007010:	edd3 7a03 	vldr	s15, [r3, #12]
 8007014:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800715c <main+0x19c0>
 8007018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800701c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007020:	d82d      	bhi.n	800707e <main+0x18e2>
 8007022:	4b4f      	ldr	r3, [pc, #316]	@ (8007160 <main+0x19c4>)
 8007024:	edd3 7a03 	vldr	s15, [r3, #12]
 8007028:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 800715c <main+0x19c0>
 800702c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007034:	d823      	bhi.n	800707e <main+0x18e2>
 8007036:	4b47      	ldr	r3, [pc, #284]	@ (8007154 <main+0x19b8>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d11f      	bne.n	800707e <main+0x18e2>
        {
          if(flag){
 800703e:	4b49      	ldr	r3, [pc, #292]	@ (8007164 <main+0x19c8>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <main+0x18ba>
            time_start = HAL_GetTick();
 8007046:	f002 fd3b 	bl	8009ac0 <HAL_GetTick>
 800704a:	4603      	mov	r3, r0
 800704c:	4a46      	ldr	r2, [pc, #280]	@ (8007168 <main+0x19cc>)
 800704e:	6013      	str	r3, [r2, #0]
            flag = false;
 8007050:	4b44      	ldr	r3, [pc, #272]	@ (8007164 <main+0x19c8>)
 8007052:	2200      	movs	r2, #0
 8007054:	701a      	strb	r2, [r3, #0]
          }
          uint32_t time = HAL_GetTick();
 8007056:	f002 fd33 	bl	8009ac0 <HAL_GetTick>
 800705a:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
          if(time - time_start >=100){
 800705e:	4b42      	ldr	r3, [pc, #264]	@ (8007168 <main+0x19cc>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	2b63      	cmp	r3, #99	@ 0x63
 800706a:	d957      	bls.n	800711c <main+0x1980>
            path_change+=1;
 800706c:	4b39      	ldr	r3, [pc, #228]	@ (8007154 <main+0x19b8>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3301      	adds	r3, #1
 8007072:	4a38      	ldr	r2, [pc, #224]	@ (8007154 <main+0x19b8>)
 8007074:	6013      	str	r3, [r2, #0]
            flag = true;
 8007076:	4b3b      	ldr	r3, [pc, #236]	@ (8007164 <main+0x19c8>)
 8007078:	2201      	movs	r2, #1
 800707a:	701a      	strb	r2, [r3, #0]
        {
 800707c:	e04e      	b.n	800711c <main+0x1980>
          }
        }else if (distances[3]>=70 && mean[3]>=70 && path_change==1)
 800707e:	4b36      	ldr	r3, [pc, #216]	@ (8007158 <main+0x19bc>)
 8007080:	edd3 7a03 	vldr	s15, [r3, #12]
 8007084:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800715c <main+0x19c0>
 8007088:	eef4 7ac7 	vcmpe.f32	s15, s14
 800708c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007090:	da00      	bge.n	8007094 <main+0x18f8>
        PID_Reset(&pid_rear);
        PID_Reset(&pid_front);
        PID_Reset(&pid_position);
      }
        
      break;
 8007092:	e054      	b.n	800713e <main+0x19a2>
        }else if (distances[3]>=70 && mean[3]>=70 && path_change==1)
 8007094:	4b32      	ldr	r3, [pc, #200]	@ (8007160 <main+0x19c4>)
 8007096:	edd3 7a03 	vldr	s15, [r3, #12]
 800709a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800715c <main+0x19c0>
 800709e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a6:	da00      	bge.n	80070aa <main+0x190e>
      break;
 80070a8:	e049      	b.n	800713e <main+0x19a2>
        }else if (distances[3]>=70 && mean[3]>=70 && path_change==1)
 80070aa:	4b2a      	ldr	r3, [pc, #168]	@ (8007154 <main+0x19b8>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d145      	bne.n	800713e <main+0x19a2>
          if(flag){
 80070b2:	4b2c      	ldr	r3, [pc, #176]	@ (8007164 <main+0x19c8>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d007      	beq.n	80070ca <main+0x192e>
            time_start = HAL_GetTick();
 80070ba:	f002 fd01 	bl	8009ac0 <HAL_GetTick>
 80070be:	4603      	mov	r3, r0
 80070c0:	4a29      	ldr	r2, [pc, #164]	@ (8007168 <main+0x19cc>)
 80070c2:	6013      	str	r3, [r2, #0]
            flag = false;
 80070c4:	4b27      	ldr	r3, [pc, #156]	@ (8007164 <main+0x19c8>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]
          uint32_t time = HAL_GetTick();
 80070ca:	f002 fcf9 	bl	8009ac0 <HAL_GetTick>
 80070ce:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
          if(time - time_start >=100){
 80070d2:	4b25      	ldr	r3, [pc, #148]	@ (8007168 <main+0x19cc>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b63      	cmp	r3, #99	@ 0x63
 80070de:	d92e      	bls.n	800713e <main+0x19a2>
            path_change+=1;
 80070e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007154 <main+0x19b8>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3301      	adds	r3, #1
 80070e6:	4a1b      	ldr	r2, [pc, #108]	@ (8007154 <main+0x19b8>)
 80070e8:	6013      	str	r3, [r2, #0]
            flag = true;
 80070ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007164 <main+0x19c8>)
 80070ec:	2201      	movs	r2, #1
 80070ee:	701a      	strb	r2, [r3, #0]
      break;
 80070f0:	e025      	b.n	800713e <main+0x19a2>
        path_change = 0;
 80070f2:	4b18      	ldr	r3, [pc, #96]	@ (8007154 <main+0x19b8>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	601a      	str	r2, [r3, #0]
        path +=1;
 80070f8:	4b1c      	ldr	r3, [pc, #112]	@ (800716c <main+0x19d0>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3301      	adds	r3, #1
 80070fe:	4a1b      	ldr	r2, [pc, #108]	@ (800716c <main+0x19d0>)
 8007100:	6013      	str	r3, [r2, #0]
        PID_Reset(&pid_yaw);        
 8007102:	481b      	ldr	r0, [pc, #108]	@ (8007170 <main+0x19d4>)
 8007104:	f000 ff38 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_rear);
 8007108:	481a      	ldr	r0, [pc, #104]	@ (8007174 <main+0x19d8>)
 800710a:	f000 ff35 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_front);
 800710e:	481a      	ldr	r0, [pc, #104]	@ (8007178 <main+0x19dc>)
 8007110:	f000 ff32 	bl	8007f78 <PID_Reset>
        PID_Reset(&pid_position);
 8007114:	4819      	ldr	r0, [pc, #100]	@ (800717c <main+0x19e0>)
 8007116:	f000 ff2f 	bl	8007f78 <PID_Reset>
      break;
 800711a:	e010      	b.n	800713e <main+0x19a2>
        {
 800711c:	bf00      	nop
      break;
 800711e:	e00e      	b.n	800713e <main+0x19a2>
      break;
 8007120:	bf00      	nop
 8007122:	f7fe bc77 	b.w	8005a14 <main+0x278>
      break;
 8007126:	bf00      	nop
 8007128:	f7fe bc74 	b.w	8005a14 <main+0x278>
      break;
 800712c:	bf00      	nop
 800712e:	f7fe bc71 	b.w	8005a14 <main+0x278>
      break;
 8007132:	bf00      	nop
 8007134:	f7fe bc6e 	b.w	8005a14 <main+0x278>
      break;
 8007138:	bf00      	nop
 800713a:	f7fe bc6b 	b.w	8005a14 <main+0x278>
      break;
 800713e:	bf00      	nop
 8007140:	f7fe bc68 	b.w	8005a14 <main+0x278>
  {
 8007144:	f7fe bc66 	b.w	8005a14 <main+0x278>
 8007148:	2000050a 	.word	0x2000050a
 800714c:	2000050c 	.word	0x2000050c
 8007150:	20000510 	.word	0x20000510
 8007154:	20000418 	.word	0x20000418
 8007158:	20000038 	.word	0x20000038
 800715c:	428c0000 	.word	0x428c0000
 8007160:	20000434 	.word	0x20000434
 8007164:	2000004c 	.word	0x2000004c
 8007168:	20000420 	.word	0x20000420
 800716c:	20000414 	.word	0x20000414
 8007170:	20000074 	.word	0x20000074
 8007174:	200000a4 	.word	0x200000a4
 8007178:	2000008c 	.word	0x2000008c
 800717c:	200000bc 	.word	0x200000bc

08007180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b094      	sub	sp, #80	@ 0x50
 8007184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007186:	f107 0320 	add.w	r3, r7, #32
 800718a:	2230      	movs	r2, #48	@ 0x30
 800718c:	2100      	movs	r1, #0
 800718e:	4618      	mov	r0, r3
 8007190:	f007 fdb2 	bl	800ecf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007194:	f107 030c 	add.w	r3, r7, #12
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	605a      	str	r2, [r3, #4]
 800719e:	609a      	str	r2, [r3, #8]
 80071a0:	60da      	str	r2, [r3, #12]
 80071a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80071a4:	2300      	movs	r3, #0
 80071a6:	60bb      	str	r3, [r7, #8]
 80071a8:	4b28      	ldr	r3, [pc, #160]	@ (800724c <SystemClock_Config+0xcc>)
 80071aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ac:	4a27      	ldr	r2, [pc, #156]	@ (800724c <SystemClock_Config+0xcc>)
 80071ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80071b4:	4b25      	ldr	r3, [pc, #148]	@ (800724c <SystemClock_Config+0xcc>)
 80071b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80071c0:	2300      	movs	r3, #0
 80071c2:	607b      	str	r3, [r7, #4]
 80071c4:	4b22      	ldr	r3, [pc, #136]	@ (8007250 <SystemClock_Config+0xd0>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a21      	ldr	r2, [pc, #132]	@ (8007250 <SystemClock_Config+0xd0>)
 80071ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071ce:	6013      	str	r3, [r2, #0]
 80071d0:	4b1f      	ldr	r3, [pc, #124]	@ (8007250 <SystemClock_Config+0xd0>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071d8:	607b      	str	r3, [r7, #4]
 80071da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80071dc:	2302      	movs	r3, #2
 80071de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80071e0:	2301      	movs	r3, #1
 80071e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80071e4:	2310      	movs	r3, #16
 80071e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071e8:	2302      	movs	r3, #2
 80071ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80071ec:	2300      	movs	r3, #0
 80071ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80071f0:	2308      	movs	r3, #8
 80071f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80071f4:	23a8      	movs	r3, #168	@ 0xa8
 80071f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80071f8:	2302      	movs	r3, #2
 80071fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80071fc:	2304      	movs	r3, #4
 80071fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007200:	f107 0320 	add.w	r3, r7, #32
 8007204:	4618      	mov	r0, r3
 8007206:	f004 f9b9 	bl	800b57c <HAL_RCC_OscConfig>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007210:	f000 f820 	bl	8007254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007214:	230f      	movs	r3, #15
 8007216:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007218:	2302      	movs	r3, #2
 800721a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800721c:	2300      	movs	r3, #0
 800721e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007220:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8007224:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800722a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800722c:	f107 030c 	add.w	r3, r7, #12
 8007230:	2105      	movs	r1, #5
 8007232:	4618      	mov	r0, r3
 8007234:	f004 fc1a 	bl	800ba6c <HAL_RCC_ClockConfig>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800723e:	f000 f809 	bl	8007254 <Error_Handler>
  }
}
 8007242:	bf00      	nop
 8007244:	3750      	adds	r7, #80	@ 0x50
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40023800 	.word	0x40023800
 8007250:	40007000 	.word	0x40007000

08007254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007254:	b480      	push	{r7}
 8007256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007258:	b672      	cpsid	i
}
 800725a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800725c:	bf00      	nop
 800725e:	e7fd      	b.n	800725c <Error_Handler+0x8>

08007260 <Motor_Init>:
void Motor_Init(Motor_ID id,
                TIM_HandleTypeDef* pwm_tim, uint32_t pwm_ch,
                GPIO_TypeDef* in1_port, uint16_t in1_pin,
                GPIO_TypeDef* in2_port, uint16_t in2_pin,
                TIM_HandleTypeDef* encoder_tim)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	607a      	str	r2, [r7, #4]
 800726a:	603b      	str	r3, [r7, #0]
 800726c:	4603      	mov	r3, r0
 800726e:	73fb      	strb	r3, [r7, #15]
    motors[id].pwm_tim = pwm_tim;
 8007270:	7bfa      	ldrb	r2, [r7, #15]
 8007272:	4938      	ldr	r1, [pc, #224]	@ (8007354 <Motor_Init+0xf4>)
 8007274:	4613      	mov	r3, r2
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	440b      	add	r3, r1
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	601a      	str	r2, [r3, #0]
    motors[id].pwm_channel = pwm_ch;
 8007282:	7bfa      	ldrb	r2, [r7, #15]
 8007284:	4933      	ldr	r1, [pc, #204]	@ (8007354 <Motor_Init+0xf4>)
 8007286:	4613      	mov	r3, r2
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	440b      	add	r3, r1
 8007290:	3304      	adds	r3, #4
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	601a      	str	r2, [r3, #0]

    motors[id].in1_port = in1_port;
 8007296:	7bfa      	ldrb	r2, [r7, #15]
 8007298:	492e      	ldr	r1, [pc, #184]	@ (8007354 <Motor_Init+0xf4>)
 800729a:	4613      	mov	r3, r2
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	4413      	add	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	440b      	add	r3, r1
 80072a4:	3308      	adds	r3, #8
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	601a      	str	r2, [r3, #0]
    motors[id].in1_pin = in1_pin;
 80072aa:	7bfa      	ldrb	r2, [r7, #15]
 80072ac:	4929      	ldr	r1, [pc, #164]	@ (8007354 <Motor_Init+0xf4>)
 80072ae:	4613      	mov	r3, r2
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	4413      	add	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	440b      	add	r3, r1
 80072b8:	330c      	adds	r3, #12
 80072ba:	8b3a      	ldrh	r2, [r7, #24]
 80072bc:	801a      	strh	r2, [r3, #0]
    motors[id].in2_port = in2_port;
 80072be:	7bfa      	ldrb	r2, [r7, #15]
 80072c0:	4924      	ldr	r1, [pc, #144]	@ (8007354 <Motor_Init+0xf4>)
 80072c2:	4613      	mov	r3, r2
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	440b      	add	r3, r1
 80072cc:	3310      	adds	r3, #16
 80072ce:	69fa      	ldr	r2, [r7, #28]
 80072d0:	601a      	str	r2, [r3, #0]
    motors[id].in2_pin = in2_pin;
 80072d2:	7bfa      	ldrb	r2, [r7, #15]
 80072d4:	491f      	ldr	r1, [pc, #124]	@ (8007354 <Motor_Init+0xf4>)
 80072d6:	4613      	mov	r3, r2
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	440b      	add	r3, r1
 80072e0:	3314      	adds	r3, #20
 80072e2:	8c3a      	ldrh	r2, [r7, #32]
 80072e4:	801a      	strh	r2, [r3, #0]

    motors[id].encoder_tim = encoder_tim;
 80072e6:	7bfa      	ldrb	r2, [r7, #15]
 80072e8:	491a      	ldr	r1, [pc, #104]	@ (8007354 <Motor_Init+0xf4>)
 80072ea:	4613      	mov	r3, r2
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	4413      	add	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	3318      	adds	r3, #24
 80072f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072f8:	601a      	str	r2, [r3, #0]
    motors[id].encoder_offset = 0;
 80072fa:	7bfa      	ldrb	r2, [r7, #15]
 80072fc:	4915      	ldr	r1, [pc, #84]	@ (8007354 <Motor_Init+0xf4>)
 80072fe:	4613      	mov	r3, r2
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	4413      	add	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	440b      	add	r3, r1
 8007308:	331c      	adds	r3, #28
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
    motors[id].encoder_total = 0;
 800730e:	7bfa      	ldrb	r2, [r7, #15]
 8007310:	4910      	ldr	r1, [pc, #64]	@ (8007354 <Motor_Init+0xf4>)
 8007312:	4613      	mov	r3, r2
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	440b      	add	r3, r1
 800731c:	3320      	adds	r3, #32
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]

    HAL_TIM_PWM_Start(pwm_tim, pwm_ch);
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	68b8      	ldr	r0, [r7, #8]
 8007326:	f004 fe93 	bl	800c050 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(encoder_tim, TIM_CHANNEL_1|TIM_CHANNEL_2);
 800732a:	2104      	movs	r1, #4
 800732c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800732e:	f004 fffd 	bl	800c32c <HAL_TIM_Encoder_Start>
    motors[id].encoder_offset = (int32_t)__HAL_TIM_GET_COUNTER(encoder_tim);
 8007332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007338:	7bfa      	ldrb	r2, [r7, #15]
 800733a:	4618      	mov	r0, r3
 800733c:	4905      	ldr	r1, [pc, #20]	@ (8007354 <Motor_Init+0xf4>)
 800733e:	4613      	mov	r3, r2
 8007340:	00db      	lsls	r3, r3, #3
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	440b      	add	r3, r1
 8007348:	331c      	adds	r3, #28
 800734a:	6018      	str	r0, [r3, #0]
}
 800734c:	bf00      	nop
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	2000037c 	.word	0x2000037c

08007358 <Motor_SetSpeed>:

void Motor_SetSpeed(Motor_ID id, int16_t speed)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	4603      	mov	r3, r0
 8007360:	460a      	mov	r2, r1
 8007362:	71fb      	strb	r3, [r7, #7]
 8007364:	4613      	mov	r3, r2
 8007366:	80bb      	strh	r3, [r7, #4]
    speed = (speed > 100) ? 100 : (speed < -100) ? -100 : speed;
 8007368:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800736c:	2b64      	cmp	r3, #100	@ 0x64
 800736e:	dc08      	bgt.n	8007382 <Motor_SetSpeed+0x2a>
 8007370:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007374:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8007378:	4293      	cmp	r3, r2
 800737a:	bfb8      	it	lt
 800737c:	4613      	movlt	r3, r2
 800737e:	b21b      	sxth	r3, r3
 8007380:	e000      	b.n	8007384 <Motor_SetSpeed+0x2c>
 8007382:	2364      	movs	r3, #100	@ 0x64
 8007384:	80bb      	strh	r3, [r7, #4]

    if(speed >= 0) {
 8007386:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	db2c      	blt.n	80073e8 <Motor_SetSpeed+0x90>
        HAL_GPIO_WritePin(motors[id].in1_port, motors[id].in1_pin, GPIO_PIN_SET);
 800738e:	79fa      	ldrb	r2, [r7, #7]
 8007390:	495e      	ldr	r1, [pc, #376]	@ (800750c <Motor_SetSpeed+0x1b4>)
 8007392:	4613      	mov	r3, r2
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	440b      	add	r3, r1
 800739c:	3308      	adds	r3, #8
 800739e:	6818      	ldr	r0, [r3, #0]
 80073a0:	79fa      	ldrb	r2, [r7, #7]
 80073a2:	495a      	ldr	r1, [pc, #360]	@ (800750c <Motor_SetSpeed+0x1b4>)
 80073a4:	4613      	mov	r3, r2
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	440b      	add	r3, r1
 80073ae:	330c      	adds	r3, #12
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	2201      	movs	r2, #1
 80073b4:	4619      	mov	r1, r3
 80073b6:	f002 ff0b 	bl	800a1d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motors[id].in2_port, motors[id].in2_pin, GPIO_PIN_RESET);
 80073ba:	79fa      	ldrb	r2, [r7, #7]
 80073bc:	4953      	ldr	r1, [pc, #332]	@ (800750c <Motor_SetSpeed+0x1b4>)
 80073be:	4613      	mov	r3, r2
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	3310      	adds	r3, #16
 80073ca:	6818      	ldr	r0, [r3, #0]
 80073cc:	79fa      	ldrb	r2, [r7, #7]
 80073ce:	494f      	ldr	r1, [pc, #316]	@ (800750c <Motor_SetSpeed+0x1b4>)
 80073d0:	4613      	mov	r3, r2
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	440b      	add	r3, r1
 80073da:	3314      	adds	r3, #20
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	2200      	movs	r2, #0
 80073e0:	4619      	mov	r1, r3
 80073e2:	f002 fef5 	bl	800a1d0 <HAL_GPIO_WritePin>
 80073e6:	e02f      	b.n	8007448 <Motor_SetSpeed+0xf0>
    } else {
        HAL_GPIO_WritePin(motors[id].in1_port, motors[id].in1_pin, GPIO_PIN_RESET);
 80073e8:	79fa      	ldrb	r2, [r7, #7]
 80073ea:	4948      	ldr	r1, [pc, #288]	@ (800750c <Motor_SetSpeed+0x1b4>)
 80073ec:	4613      	mov	r3, r2
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	4413      	add	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	440b      	add	r3, r1
 80073f6:	3308      	adds	r3, #8
 80073f8:	6818      	ldr	r0, [r3, #0]
 80073fa:	79fa      	ldrb	r2, [r7, #7]
 80073fc:	4943      	ldr	r1, [pc, #268]	@ (800750c <Motor_SetSpeed+0x1b4>)
 80073fe:	4613      	mov	r3, r2
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	440b      	add	r3, r1
 8007408:	330c      	adds	r3, #12
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	2200      	movs	r2, #0
 800740e:	4619      	mov	r1, r3
 8007410:	f002 fede 	bl	800a1d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motors[id].in2_port, motors[id].in2_pin, GPIO_PIN_SET);
 8007414:	79fa      	ldrb	r2, [r7, #7]
 8007416:	493d      	ldr	r1, [pc, #244]	@ (800750c <Motor_SetSpeed+0x1b4>)
 8007418:	4613      	mov	r3, r2
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	440b      	add	r3, r1
 8007422:	3310      	adds	r3, #16
 8007424:	6818      	ldr	r0, [r3, #0]
 8007426:	79fa      	ldrb	r2, [r7, #7]
 8007428:	4938      	ldr	r1, [pc, #224]	@ (800750c <Motor_SetSpeed+0x1b4>)
 800742a:	4613      	mov	r3, r2
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	440b      	add	r3, r1
 8007434:	3314      	adds	r3, #20
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	2201      	movs	r2, #1
 800743a:	4619      	mov	r1, r3
 800743c:	f002 fec8 	bl	800a1d0 <HAL_GPIO_WritePin>
        speed = -speed;
 8007440:	88bb      	ldrh	r3, [r7, #4]
 8007442:	425b      	negs	r3, r3
 8007444:	b29b      	uxth	r3, r3
 8007446:	80bb      	strh	r3, [r7, #4]
    }

    uint32_t duty = (speed * 9999) / 100;
 8007448:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800744c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8007450:	fb02 f303 	mul.w	r3, r2, r3
 8007454:	4a2e      	ldr	r2, [pc, #184]	@ (8007510 <Motor_SetSpeed+0x1b8>)
 8007456:	fb82 1203 	smull	r1, r2, r2, r3
 800745a:	1152      	asrs	r2, r2, #5
 800745c:	17db      	asrs	r3, r3, #31
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 8007462:	79fa      	ldrb	r2, [r7, #7]
 8007464:	4929      	ldr	r1, [pc, #164]	@ (800750c <Motor_SetSpeed+0x1b4>)
 8007466:	4613      	mov	r3, r2
 8007468:	00db      	lsls	r3, r3, #3
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	440b      	add	r3, r1
 8007470:	3304      	adds	r3, #4
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10b      	bne.n	8007490 <Motor_SetSpeed+0x138>
 8007478:	79fa      	ldrb	r2, [r7, #7]
 800747a:	4924      	ldr	r1, [pc, #144]	@ (800750c <Motor_SetSpeed+0x1b4>)
 800747c:	4613      	mov	r3, r2
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	4413      	add	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	440b      	add	r3, r1
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800748e:	e038      	b.n	8007502 <Motor_SetSpeed+0x1aa>
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 8007490:	79fa      	ldrb	r2, [r7, #7]
 8007492:	491e      	ldr	r1, [pc, #120]	@ (800750c <Motor_SetSpeed+0x1b4>)
 8007494:	4613      	mov	r3, r2
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	3304      	adds	r3, #4
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d10b      	bne.n	80074be <Motor_SetSpeed+0x166>
 80074a6:	79fa      	ldrb	r2, [r7, #7]
 80074a8:	4918      	ldr	r1, [pc, #96]	@ (800750c <Motor_SetSpeed+0x1b4>)
 80074aa:	4613      	mov	r3, r2
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	4413      	add	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80074bc:	e021      	b.n	8007502 <Motor_SetSpeed+0x1aa>
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 80074be:	79fa      	ldrb	r2, [r7, #7]
 80074c0:	4912      	ldr	r1, [pc, #72]	@ (800750c <Motor_SetSpeed+0x1b4>)
 80074c2:	4613      	mov	r3, r2
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	440b      	add	r3, r1
 80074cc:	3304      	adds	r3, #4
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d10b      	bne.n	80074ec <Motor_SetSpeed+0x194>
 80074d4:	79fa      	ldrb	r2, [r7, #7]
 80074d6:	490d      	ldr	r1, [pc, #52]	@ (800750c <Motor_SetSpeed+0x1b4>)
 80074d8:	4613      	mov	r3, r2
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	440b      	add	r3, r1
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80074ea:	e00a      	b.n	8007502 <Motor_SetSpeed+0x1aa>
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 80074ec:	79fa      	ldrb	r2, [r7, #7]
 80074ee:	4907      	ldr	r1, [pc, #28]	@ (800750c <Motor_SetSpeed+0x1b4>)
 80074f0:	4613      	mov	r3, r2
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	440b      	add	r3, r1
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8007502:	bf00      	nop
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	2000037c 	.word	0x2000037c
 8007510:	51eb851f 	.word	0x51eb851f

08007514 <Motor_GetEncoder>:

int32_t Motor_GetEncoder(Motor_ID id)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	71fb      	strb	r3, [r7, #7]
    int32_t current_cnt = (int32_t)__HAL_TIM_GET_COUNTER(motors[id].encoder_tim);
 800751e:	79fa      	ldrb	r2, [r7, #7]
 8007520:	492a      	ldr	r1, [pc, #168]	@ (80075cc <Motor_GetEncoder+0xb8>)
 8007522:	4613      	mov	r3, r2
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	440b      	add	r3, r1
 800752c:	3318      	adds	r3, #24
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007534:	60bb      	str	r3, [r7, #8]
    int32_t diff = current_cnt - motors[id].encoder_offset;
 8007536:	79fa      	ldrb	r2, [r7, #7]
 8007538:	4924      	ldr	r1, [pc, #144]	@ (80075cc <Motor_GetEncoder+0xb8>)
 800753a:	4613      	mov	r3, r2
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	331c      	adds	r3, #28
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	60fb      	str	r3, [r7, #12]
    
    if (diff > 32767) diff -= 65536;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007554:	db04      	blt.n	8007560 <Motor_GetEncoder+0x4c>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	e007      	b.n	8007570 <Motor_GetEncoder+0x5c>
    else if (diff < -32768) diff += 65536;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8007566:	da03      	bge.n	8007570 <Motor_GetEncoder+0x5c>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800756e:	60fb      	str	r3, [r7, #12]
    
    motors[id].encoder_total += diff;
 8007570:	79fa      	ldrb	r2, [r7, #7]
 8007572:	4916      	ldr	r1, [pc, #88]	@ (80075cc <Motor_GetEncoder+0xb8>)
 8007574:	4613      	mov	r3, r2
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	3320      	adds	r3, #32
 8007580:	6819      	ldr	r1, [r3, #0]
 8007582:	79fa      	ldrb	r2, [r7, #7]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4419      	add	r1, r3
 8007588:	4810      	ldr	r0, [pc, #64]	@ (80075cc <Motor_GetEncoder+0xb8>)
 800758a:	4613      	mov	r3, r2
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	4413      	add	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4403      	add	r3, r0
 8007594:	3320      	adds	r3, #32
 8007596:	6019      	str	r1, [r3, #0]
    motors[id].encoder_offset = current_cnt;
 8007598:	79fa      	ldrb	r2, [r7, #7]
 800759a:	490c      	ldr	r1, [pc, #48]	@ (80075cc <Motor_GetEncoder+0xb8>)
 800759c:	4613      	mov	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	4413      	add	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	440b      	add	r3, r1
 80075a6:	331c      	adds	r3, #28
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	601a      	str	r2, [r3, #0]
    
    return motors[id].encoder_total;
 80075ac:	79fa      	ldrb	r2, [r7, #7]
 80075ae:	4907      	ldr	r1, [pc, #28]	@ (80075cc <Motor_GetEncoder+0xb8>)
 80075b0:	4613      	mov	r3, r2
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	4413      	add	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	440b      	add	r3, r1
 80075ba:	3320      	adds	r3, #32
 80075bc:	681b      	ldr	r3, [r3, #0]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	2000037c 	.word	0x2000037c

080075d0 <Reset_Timer>:
    prev_counter = current_counter;
    return diff ; 
}

void Reset_Timer(void)
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
    prev_counter = __HAL_TIM_GET_COUNTER(&htim6);
 80075d4:	4b04      	ldr	r3, [pc, #16]	@ (80075e8 <Reset_Timer+0x18>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075da:	4a04      	ldr	r2, [pc, #16]	@ (80075ec <Reset_Timer+0x1c>)
 80075dc:	6013      	str	r3, [r2, #0]
}
 80075de:	bf00      	nop
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	200006ac 	.word	0x200006ac
 80075ec:	20000514 	.word	0x20000514

080075f0 <Motor_Rightward>:

void Motor_Rightward(Motor_ID id1, Motor_ID id2, Motor_ID id3, Motor_ID id4, int16_t speed, float* yaw, float* target_yaw) {
 80075f0:	b590      	push	{r4, r7, lr}
 80075f2:	b09f      	sub	sp, #124	@ 0x7c
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4604      	mov	r4, r0
 80075f8:	4608      	mov	r0, r1
 80075fa:	4611      	mov	r1, r2
 80075fc:	461a      	mov	r2, r3
 80075fe:	4623      	mov	r3, r4
 8007600:	71fb      	strb	r3, [r7, #7]
 8007602:	4603      	mov	r3, r0
 8007604:	71bb      	strb	r3, [r7, #6]
 8007606:	460b      	mov	r3, r1
 8007608:	717b      	strb	r3, [r7, #5]
 800760a:	4613      	mov	r3, r2
 800760c:	713b      	strb	r3, [r7, #4]
    // 使用 HAL_GetTick 计算时间差
    static uint32_t prev_tick = 0;
    uint32_t current_tick = HAL_GetTick();
 800760e:	f002 fa57 	bl	8009ac0 <HAL_GetTick>
 8007612:	66b8      	str	r0, [r7, #104]	@ 0x68
    float dt = (current_tick - prev_tick) / 1000.0f;  // 转换为秒
 8007614:	4b87      	ldr	r3, [pc, #540]	@ (8007834 <Motor_Rightward+0x244>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	ee07 3a90 	vmov	s15, r3
 8007620:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007624:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8007838 <Motor_Rightward+0x248>
 8007628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800762c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    prev_tick = current_tick;
 8007630:	4a80      	ldr	r2, [pc, #512]	@ (8007834 <Motor_Rightward+0x244>)
 8007632:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007634:	6013      	str	r3, [r2, #0]

    if (dt <= 0.001f) {
 8007636:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800763a:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800783c <Motor_Rightward+0x24c>
 800763e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007646:	d801      	bhi.n	800764c <Motor_Rightward+0x5c>
        dt = 0.001f;  // 最小时间差为1ms
 8007648:	4b7d      	ldr	r3, [pc, #500]	@ (8007840 <Motor_Rightward+0x250>)
 800764a:	677b      	str	r3, [r7, #116]	@ 0x74

    // 静态变量存储上一次的编码器值
    static int32_t prev_enc1 = 0, prev_enc2 = 0, prev_enc3 = 0, prev_enc4 = 0;

    // 获取当前编码器值
    int32_t enc1 = Motor_GetEncoder(id1);
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	4618      	mov	r0, r3
 8007650:	f7ff ff60 	bl	8007514 <Motor_GetEncoder>
 8007654:	6678      	str	r0, [r7, #100]	@ 0x64
    int32_t enc2 = -Motor_GetEncoder(id2);
 8007656:	79bb      	ldrb	r3, [r7, #6]
 8007658:	4618      	mov	r0, r3
 800765a:	f7ff ff5b 	bl	8007514 <Motor_GetEncoder>
 800765e:	4603      	mov	r3, r0
 8007660:	425b      	negs	r3, r3
 8007662:	663b      	str	r3, [r7, #96]	@ 0x60
    int32_t enc3 = -Motor_GetEncoder(id3);
 8007664:	797b      	ldrb	r3, [r7, #5]
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff ff54 	bl	8007514 <Motor_GetEncoder>
 800766c:	4603      	mov	r3, r0
 800766e:	425b      	negs	r3, r3
 8007670:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int32_t enc4 = Motor_GetEncoder(id4);
 8007672:	793b      	ldrb	r3, [r7, #4]
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff ff4d 	bl	8007514 <Motor_GetEncoder>
 800767a:	65b8      	str	r0, [r7, #88]	@ 0x58

    // 计算编码器速度（单位时间内的变化量）
    float speed1 = (enc1 - prev_enc1) / dt;
 800767c:	4b71      	ldr	r3, [pc, #452]	@ (8007844 <Motor_Rightward+0x254>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	ee07 3a90 	vmov	s15, r3
 8007688:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800768c:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007694:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float speed2 = (enc2 - prev_enc2) / dt;
 8007698:	4b6b      	ldr	r3, [pc, #428]	@ (8007848 <Motor_Rightward+0x258>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	ee07 3a90 	vmov	s15, r3
 80076a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80076a8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80076ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    float speed3 = (enc3 - prev_enc3) / dt;
 80076b4:	4b65      	ldr	r3, [pc, #404]	@ (800784c <Motor_Rightward+0x25c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	ee07 3a90 	vmov	s15, r3
 80076c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80076c4:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80076c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076cc:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float speed4 = (enc4 - prev_enc4) / dt;
 80076d0:	4b5f      	ldr	r3, [pc, #380]	@ (8007850 <Motor_Rightward+0x260>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	ee07 3a90 	vmov	s15, r3
 80076dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80076e0:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80076e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076e8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    // OLED_ShowNum(2,2,(int16_t)fabsf(speed3),4);  // 左后数字
    // OLED_ShowChar(2,9,speed4 >= 0 ? '+' : '-');  // 右前符号
    // OLED_ShowNum(2,10,(int16_t)fabsf(speed4),4);  // 右前数字

    // 更新上一次的编码器值
    prev_enc1 = enc1;
 80076ec:	4a55      	ldr	r2, [pc, #340]	@ (8007844 <Motor_Rightward+0x254>)
 80076ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076f0:	6013      	str	r3, [r2, #0]
    prev_enc2 = enc2;
 80076f2:	4a55      	ldr	r2, [pc, #340]	@ (8007848 <Motor_Rightward+0x258>)
 80076f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076f6:	6013      	str	r3, [r2, #0]
    prev_enc3 = enc3;
 80076f8:	4a54      	ldr	r2, [pc, #336]	@ (800784c <Motor_Rightward+0x25c>)
 80076fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076fc:	6013      	str	r3, [r2, #0]
    prev_enc4 = enc4;
 80076fe:	4a54      	ldr	r2, [pc, #336]	@ (8007850 <Motor_Rightward+0x260>)
 8007700:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007702:	6013      	str	r3, [r2, #0]

    // 获取当前偏航角
    float pitch, roll, current_yaw;
    if (MPU6050_DMP_Get_Data(&pitch, &roll, &current_yaw) != 0) {
 8007704:	f107 020c 	add.w	r2, r7, #12
 8007708:	f107 0110 	add.w	r1, r7, #16
 800770c:	f107 0314 	add.w	r3, r7, #20
 8007710:	4618      	mov	r0, r3
 8007712:	f7fd f8c1 	bl	8004898 <MPU6050_DMP_Get_Data>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d014      	beq.n	8007746 <Motor_Rightward+0x156>
        Motor_SetSpeed(id1, 0);
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	2100      	movs	r1, #0
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff fe19 	bl	8007358 <Motor_SetSpeed>
        Motor_SetSpeed(id2, 0);
 8007726:	79bb      	ldrb	r3, [r7, #6]
 8007728:	2100      	movs	r1, #0
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff fe14 	bl	8007358 <Motor_SetSpeed>
        Motor_SetSpeed(id3, 0);
 8007730:	797b      	ldrb	r3, [r7, #5]
 8007732:	2100      	movs	r1, #0
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff fe0f 	bl	8007358 <Motor_SetSpeed>
        Motor_SetSpeed(id4, 0);
 800773a:	793b      	ldrb	r3, [r7, #4]
 800773c:	2100      	movs	r1, #0
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff fe0a 	bl	8007358 <Motor_SetSpeed>
 8007744:	e168      	b.n	8007a18 <Motor_Rightward+0x428>
        return;
    }
    *yaw = current_yaw;
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800774c:	601a      	str	r2, [r3, #0]
        
    float yaw_error = *target_yaw - *yaw;
 800774e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007752:	ed93 7a00 	vldr	s14, [r3]
 8007756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800775a:	edd3 7a00 	vldr	s15, [r3]
 800775e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007762:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    if (yaw_error > 180) yaw_error -= 360;
 8007766:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800776a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8007854 <Motor_Rightward+0x264>
 800776e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007776:	dd08      	ble.n	800778a <Motor_Rightward+0x19a>
 8007778:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800777c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8007858 <Motor_Rightward+0x268>
 8007780:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007784:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 8007788:	e010      	b.n	80077ac <Motor_Rightward+0x1bc>
    else if (yaw_error < -180) yaw_error += 360;
 800778a:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800778e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800785c <Motor_Rightward+0x26c>
 8007792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800779a:	d507      	bpl.n	80077ac <Motor_Rightward+0x1bc>
 800779c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80077a0:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8007858 <Motor_Rightward+0x268>
 80077a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077a8:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

    // 计算速度误差
    float front_speed_error = speed1 - speed4;  // 前轮组速度同步（左前-右前）
 80077ac:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80077b0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80077b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077b8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float rear_speed_error = speed2 - speed3;   // 后轮组速度同步（右后-左后）
 80077bc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80077c0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80077c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077c8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float position_speed_error = (front_speed_error - rear_speed_error) / 2;  // 前后轮组速度同步
 80077cc:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80077d0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80077d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80077d8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80077dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077e0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // 速度分配 - 修正后的分配方式
    float base_speed = speed;
 80077e4:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	@ 0x88
 80077e8:	ee07 3a90 	vmov	s15, r3
 80077ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077f0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    
    // 限制PID输出的最大值，防止过度修正
    float max_pid_output = base_speed * 0.3f;  // 降低PID输出最大值为基准速度的30%
 80077f4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80077f8:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007860 <Motor_Rightward+0x270>
 80077fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007800:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    
    // 计算偏航角PID输出
    float yaw_pid_output = 0.0f;
 8007804:	f04f 0300 	mov.w	r3, #0
 8007808:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (fabs(yaw_error) > 1.0f) {
 800780a:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800780e:	eef0 7ae7 	vabs.f32	s15, s15
 8007812:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800781a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781e:	dd23      	ble.n	8007868 <Motor_Rightward+0x278>
        yaw_pid_output = PID_Calculate(&pid_yaw, yaw_error, dt);
 8007820:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007824:	ed97 0a1c 	vldr	s0, [r7, #112]	@ 0x70
 8007828:	480e      	ldr	r0, [pc, #56]	@ (8007864 <Motor_Rightward+0x274>)
 800782a:	f000 fb29 	bl	8007e80 <PID_Calculate>
 800782e:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
 8007832:	e01c      	b.n	800786e <Motor_Rightward+0x27e>
 8007834:	20000518 	.word	0x20000518
 8007838:	447a0000 	.word	0x447a0000
 800783c:	3a83126f 	.word	0x3a83126f
 8007840:	3a83126f 	.word	0x3a83126f
 8007844:	2000051c 	.word	0x2000051c
 8007848:	20000520 	.word	0x20000520
 800784c:	20000524 	.word	0x20000524
 8007850:	20000528 	.word	0x20000528
 8007854:	43340000 	.word	0x43340000
 8007858:	43b40000 	.word	0x43b40000
 800785c:	c3340000 	.word	0xc3340000
 8007860:	3e99999a 	.word	0x3e99999a
 8007864:	20000074 	.word	0x20000074
        // yaw_pid_output = fmaxf(fminf(yaw_pid_output, max_pid_output*1), -max_pid_output*1);
    } else {
        // 误差小于1度时，重置PID控制器
        PID_Reset(&pid_yaw);
 8007868:	486d      	ldr	r0, [pc, #436]	@ (8007a20 <Motor_Rightward+0x430>)
 800786a:	f000 fb85 	bl	8007f78 <PID_Reset>
    }
    
    // 计算前后轮组的速度PID输出
    float front_pid_output = PID_Calculate(&pid_front, front_speed_error, dt);
 800786e:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007872:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8007876:	486b      	ldr	r0, [pc, #428]	@ (8007a24 <Motor_Rightward+0x434>)
 8007878:	f000 fb02 	bl	8007e80 <PID_Calculate>
 800787c:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
    float rear_pid_output = PID_Calculate(&pid_rear, rear_speed_error, dt);
 8007880:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007884:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8007888:	4867      	ldr	r0, [pc, #412]	@ (8007a28 <Motor_Rightward+0x438>)
 800788a:	f000 faf9 	bl	8007e80 <PID_Calculate>
 800788e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
    float position_pid_output = PID_Calculate(&pid_position, position_speed_error + yaw_pid_output, dt);
 8007892:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8007896:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800789a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800789e:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 80078a2:	eeb0 0a67 	vmov.f32	s0, s15
 80078a6:	4861      	ldr	r0, [pc, #388]	@ (8007a2c <Motor_Rightward+0x43c>)
 80078a8:	f000 faea 	bl	8007e80 <PID_Calculate>
 80078ac:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    // front_pid_output = fmaxf(fminf(front_pid_output, max_pid_output*1), -max_pid_output*1);
    // rear_pid_output = fmaxf(fminf(rear_pid_output, max_pid_output*1), -max_pid_output*1);
    // position_pid_output = fmaxf(fminf(position_pid_output, max_pid_output*1), -max_pid_output*1);
    
    // 前轮组 - 左前右前同步
    float motor_speed1 = -(base_speed - front_pid_output - position_pid_output - yaw_pid_output);  // 左前
 80078b0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80078b4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80078b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80078bc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80078c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80078c4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80078c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078cc:	eef1 7a67 	vneg.f32	s15, s15
 80078d0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float motor_speed4 = (base_speed + front_pid_output - position_pid_output - yaw_pid_output);   // 右前
 80078d4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80078d8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80078dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078e0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80078e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80078e8:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80078ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078f0:	edc7 7a08 	vstr	s15, [r7, #32]
    
    // 后轮组 - 左后右后同步
    float motor_speed2 = (base_speed - rear_pid_output + position_pid_output + yaw_pid_output);   // 右后
 80078f4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80078f8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80078fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007900:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007908:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800790c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007910:	edc7 7a07 	vstr	s15, [r7, #28]
    float motor_speed3 = -(base_speed + rear_pid_output + position_pid_output + yaw_pid_output);  // 左后
 8007914:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007918:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800791c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007920:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007924:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007928:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800792c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007930:	eef1 7a67 	vneg.f32	s15, s15
 8007934:	edc7 7a06 	vstr	s15, [r7, #24]

    // 限幅
    motor_speed1 = fmaxf(fminf(motor_speed1, 100.0f), -100.0f);
 8007938:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8007a30 <Motor_Rightward+0x440>
 800793c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8007940:	f009 f947 	bl	8010bd2 <fminf>
 8007944:	eef0 7a40 	vmov.f32	s15, s0
 8007948:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8007a34 <Motor_Rightward+0x444>
 800794c:	eeb0 0a67 	vmov.f32	s0, s15
 8007950:	f009 f922 	bl	8010b98 <fmaxf>
 8007954:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    motor_speed2 = fmaxf(fminf(motor_speed2, 100.0f), -100.0f);
 8007958:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8007a30 <Motor_Rightward+0x440>
 800795c:	ed97 0a07 	vldr	s0, [r7, #28]
 8007960:	f009 f937 	bl	8010bd2 <fminf>
 8007964:	eef0 7a40 	vmov.f32	s15, s0
 8007968:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8007a34 <Motor_Rightward+0x444>
 800796c:	eeb0 0a67 	vmov.f32	s0, s15
 8007970:	f009 f912 	bl	8010b98 <fmaxf>
 8007974:	ed87 0a07 	vstr	s0, [r7, #28]
    motor_speed3 = fmaxf(fminf(motor_speed3, 100.0f), -100.0f);
 8007978:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8007a30 <Motor_Rightward+0x440>
 800797c:	ed97 0a06 	vldr	s0, [r7, #24]
 8007980:	f009 f927 	bl	8010bd2 <fminf>
 8007984:	eef0 7a40 	vmov.f32	s15, s0
 8007988:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8007a34 <Motor_Rightward+0x444>
 800798c:	eeb0 0a67 	vmov.f32	s0, s15
 8007990:	f009 f902 	bl	8010b98 <fmaxf>
 8007994:	ed87 0a06 	vstr	s0, [r7, #24]
    motor_speed4 = fmaxf(fminf(motor_speed4, 100.0f), -100.0f);
 8007998:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8007a30 <Motor_Rightward+0x440>
 800799c:	ed97 0a08 	vldr	s0, [r7, #32]
 80079a0:	f009 f917 	bl	8010bd2 <fminf>
 80079a4:	eef0 7a40 	vmov.f32	s15, s0
 80079a8:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8007a34 <Motor_Rightward+0x444>
 80079ac:	eeb0 0a67 	vmov.f32	s0, s15
 80079b0:	f009 f8f2 	bl	8010b98 <fmaxf>
 80079b4:	ed87 0a08 	vstr	s0, [r7, #32]

    // 设置电机速度
    Motor_SetSpeed(id1, motor_speed1);
 80079b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80079bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079c0:	ee17 3a90 	vmov	r3, s15
 80079c4:	b21a      	sxth	r2, r3
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	4611      	mov	r1, r2
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7ff fcc4 	bl	8007358 <Motor_SetSpeed>
    Motor_SetSpeed(id2, motor_speed2);
 80079d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80079d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079d8:	ee17 3a90 	vmov	r3, s15
 80079dc:	b21a      	sxth	r2, r3
 80079de:	79bb      	ldrb	r3, [r7, #6]
 80079e0:	4611      	mov	r1, r2
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff fcb8 	bl	8007358 <Motor_SetSpeed>
    Motor_SetSpeed(id3, motor_speed3);
 80079e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80079ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079f0:	ee17 3a90 	vmov	r3, s15
 80079f4:	b21a      	sxth	r2, r3
 80079f6:	797b      	ldrb	r3, [r7, #5]
 80079f8:	4611      	mov	r1, r2
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff fcac 	bl	8007358 <Motor_SetSpeed>
    Motor_SetSpeed(id4, motor_speed4);
 8007a00:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a08:	ee17 3a90 	vmov	r3, s15
 8007a0c:	b21a      	sxth	r2, r3
 8007a0e:	793b      	ldrb	r3, [r7, #4]
 8007a10:	4611      	mov	r1, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff fca0 	bl	8007358 <Motor_SetSpeed>
}
 8007a18:	377c      	adds	r7, #124	@ 0x7c
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd90      	pop	{r4, r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000074 	.word	0x20000074
 8007a24:	2000008c 	.word	0x2000008c
 8007a28:	200000a4 	.word	0x200000a4
 8007a2c:	200000bc 	.word	0x200000bc
 8007a30:	42c80000 	.word	0x42c80000
 8007a34:	c2c80000 	.word	0xc2c80000

08007a38 <Motor_Straight>:

void Motor_Straight(Motor_ID id1, Motor_ID id2, Motor_ID id3, Motor_ID id4, int16_t speed, float* yaw, float* target_yaw) {
 8007a38:	b590      	push	{r4, r7, lr}
 8007a3a:	b09f      	sub	sp, #124	@ 0x7c
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	4604      	mov	r4, r0
 8007a40:	4608      	mov	r0, r1
 8007a42:	4611      	mov	r1, r2
 8007a44:	461a      	mov	r2, r3
 8007a46:	4623      	mov	r3, r4
 8007a48:	71fb      	strb	r3, [r7, #7]
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	71bb      	strb	r3, [r7, #6]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	717b      	strb	r3, [r7, #5]
 8007a52:	4613      	mov	r3, r2
 8007a54:	713b      	strb	r3, [r7, #4]
    // 使用 HAL_GetTick 计算时间差
    static uint32_t prev_tick = 0;
    uint32_t current_tick = HAL_GetTick();
 8007a56:	f002 f833 	bl	8009ac0 <HAL_GetTick>
 8007a5a:	66b8      	str	r0, [r7, #104]	@ 0x68
    float dt = (current_tick - prev_tick) / 1000.0f;  // 转换为秒
 8007a5c:	4b87      	ldr	r3, [pc, #540]	@ (8007c7c <Motor_Straight+0x244>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	ee07 3a90 	vmov	s15, r3
 8007a68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a6c:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8007c80 <Motor_Straight+0x248>
 8007a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a74:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    prev_tick = current_tick;
 8007a78:	4a80      	ldr	r2, [pc, #512]	@ (8007c7c <Motor_Straight+0x244>)
 8007a7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a7c:	6013      	str	r3, [r2, #0]
        
    // 添加时间差保护
    if (dt <= 0.001f) {
 8007a7e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8007a82:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8007c84 <Motor_Straight+0x24c>
 8007a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a8e:	d801      	bhi.n	8007a94 <Motor_Straight+0x5c>
        dt = 0.001f;  // 最小时间差为1ms
 8007a90:	4b7d      	ldr	r3, [pc, #500]	@ (8007c88 <Motor_Straight+0x250>)
 8007a92:	677b      	str	r3, [r7, #116]	@ 0x74

    // 静态变量存储上一次的编码器值
    static int32_t prev_enc1 = 0, prev_enc2 = 0, prev_enc3 = 0, prev_enc4 = 0;

    // 获取当前编码器值
    int32_t enc1 = Motor_GetEncoder(id1);
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff fd3c 	bl	8007514 <Motor_GetEncoder>
 8007a9c:	6678      	str	r0, [r7, #100]	@ 0x64
    int32_t enc2 = -Motor_GetEncoder(id2);
 8007a9e:	79bb      	ldrb	r3, [r7, #6]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff fd37 	bl	8007514 <Motor_GetEncoder>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	425b      	negs	r3, r3
 8007aaa:	663b      	str	r3, [r7, #96]	@ 0x60
    int32_t enc3 = Motor_GetEncoder(id3);
 8007aac:	797b      	ldrb	r3, [r7, #5]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff fd30 	bl	8007514 <Motor_GetEncoder>
 8007ab4:	65f8      	str	r0, [r7, #92]	@ 0x5c
    int32_t enc4 = -Motor_GetEncoder(id4);
 8007ab6:	793b      	ldrb	r3, [r7, #4]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff fd2b 	bl	8007514 <Motor_GetEncoder>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	425b      	negs	r3, r3
 8007ac2:	65bb      	str	r3, [r7, #88]	@ 0x58

    // 计算编码器速度（单位时间内的变化量）
    float speed1 = (enc1 - prev_enc1) / dt;
 8007ac4:	4b71      	ldr	r3, [pc, #452]	@ (8007c8c <Motor_Straight+0x254>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	ee07 3a90 	vmov	s15, r3
 8007ad0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007ad4:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007adc:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float speed2 = (enc2 - prev_enc2) / dt;
 8007ae0:	4b6b      	ldr	r3, [pc, #428]	@ (8007c90 <Motor_Straight+0x258>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	ee07 3a90 	vmov	s15, r3
 8007aec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007af0:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007af8:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    float speed3 = (enc3 - prev_enc3) / dt;
 8007afc:	4b65      	ldr	r3, [pc, #404]	@ (8007c94 <Motor_Straight+0x25c>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	ee07 3a90 	vmov	s15, r3
 8007b08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007b0c:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b14:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float speed4 = (enc4 - prev_enc4) / dt;
 8007b18:	4b5f      	ldr	r3, [pc, #380]	@ (8007c98 <Motor_Straight+0x260>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	ee07 3a90 	vmov	s15, r3
 8007b24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007b28:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b30:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    // OLED_ShowNum(2,2,(int16_t)fabsf(speed3),4);  // 左后数字
    // OLED_ShowChar(2,9,speed4 >= 0 ? '+' : '-');  // 右前符号
    // OLED_ShowNum(2,10,(int16_t)fabsf(speed4),4);  // 右前数字

    // 更新上一次的编码器值
    prev_enc1 = enc1;
 8007b34:	4a55      	ldr	r2, [pc, #340]	@ (8007c8c <Motor_Straight+0x254>)
 8007b36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b38:	6013      	str	r3, [r2, #0]
    prev_enc2 = enc2;
 8007b3a:	4a55      	ldr	r2, [pc, #340]	@ (8007c90 <Motor_Straight+0x258>)
 8007b3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b3e:	6013      	str	r3, [r2, #0]
    prev_enc3 = enc3;
 8007b40:	4a54      	ldr	r2, [pc, #336]	@ (8007c94 <Motor_Straight+0x25c>)
 8007b42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b44:	6013      	str	r3, [r2, #0]
    prev_enc4 = enc4;
 8007b46:	4a54      	ldr	r2, [pc, #336]	@ (8007c98 <Motor_Straight+0x260>)
 8007b48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b4a:	6013      	str	r3, [r2, #0]

    // 获取当前偏航角
    float pitch, roll, current_yaw;
    if (MPU6050_DMP_Get_Data(&pitch, &roll, &current_yaw) != 0) {
 8007b4c:	f107 020c 	add.w	r2, r7, #12
 8007b50:	f107 0110 	add.w	r1, r7, #16
 8007b54:	f107 0314 	add.w	r3, r7, #20
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fc fe9d 	bl	8004898 <MPU6050_DMP_Get_Data>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d014      	beq.n	8007b8e <Motor_Straight+0x156>
        Motor_SetSpeed(id1, 0);
 8007b64:	79fb      	ldrb	r3, [r7, #7]
 8007b66:	2100      	movs	r1, #0
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7ff fbf5 	bl	8007358 <Motor_SetSpeed>
        Motor_SetSpeed(id2, 0);
 8007b6e:	79bb      	ldrb	r3, [r7, #6]
 8007b70:	2100      	movs	r1, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7ff fbf0 	bl	8007358 <Motor_SetSpeed>
        Motor_SetSpeed(id3, 0);
 8007b78:	797b      	ldrb	r3, [r7, #5]
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7ff fbeb 	bl	8007358 <Motor_SetSpeed>
        Motor_SetSpeed(id4, 0);
 8007b82:	793b      	ldrb	r3, [r7, #4]
 8007b84:	2100      	movs	r1, #0
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff fbe6 	bl	8007358 <Motor_SetSpeed>
 8007b8c:	e168      	b.n	8007e60 <Motor_Straight+0x428>
        return;
    }
    *yaw = current_yaw;
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b94:	601a      	str	r2, [r3, #0]

    // 计算偏航角误差
    float yaw_error = *target_yaw - *yaw;
 8007b96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b9a:	ed93 7a00 	vldr	s14, [r3]
 8007b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ba2:	edd3 7a00 	vldr	s15, [r3]
 8007ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007baa:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    if (yaw_error > 180) yaw_error -= 360;
 8007bae:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007bb2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8007c9c <Motor_Straight+0x264>
 8007bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bbe:	dd08      	ble.n	8007bd2 <Motor_Straight+0x19a>
 8007bc0:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007bc4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8007ca0 <Motor_Straight+0x268>
 8007bc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007bcc:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 8007bd0:	e010      	b.n	8007bf4 <Motor_Straight+0x1bc>
    else if (yaw_error < -180) yaw_error += 360;
 8007bd2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007bd6:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8007ca4 <Motor_Straight+0x26c>
 8007bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007be2:	d507      	bpl.n	8007bf4 <Motor_Straight+0x1bc>
 8007be4:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007be8:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8007ca0 <Motor_Straight+0x268>
 8007bec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bf0:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

    // 计算速度误差
    float left_speed_error = speed1 - speed3;  // 左侧轮子速度同步
 8007bf4:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8007bf8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8007bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c00:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float right_speed_error = speed2 - speed4;  // 右侧轮子速度同步
 8007c04:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8007c08:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8007c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c10:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float position_speed_error = (left_speed_error + right_speed_error) / 2;  // 左右两侧速度同步
 8007c14:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8007c18:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8007c1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007c20:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8007c24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c28:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // 速度分配 - 修正后的分配方式
    float base_speed = speed;
 8007c2c:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	@ 0x88
 8007c30:	ee07 3a90 	vmov	s15, r3
 8007c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c38:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    
    // 限制PID输出的最大值，防止过度修正
    float max_pid_output = base_speed * 0.3f;
 8007c3c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8007c40:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007ca8 <Motor_Straight+0x270>
 8007c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c48:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    
    // 计算偏航角PID输出
    float yaw_pid_output = 0.0f;
 8007c4c:	f04f 0300 	mov.w	r3, #0
 8007c50:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (fabs(yaw_error) > 1.0f) {
 8007c52:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007c56:	eef0 7ae7 	vabs.f32	s15, s15
 8007c5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c66:	dd23      	ble.n	8007cb0 <Motor_Straight+0x278>
        yaw_pid_output = PID_Calculate(&pid_yaw, yaw_error, dt);
 8007c68:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007c6c:	ed97 0a1c 	vldr	s0, [r7, #112]	@ 0x70
 8007c70:	480e      	ldr	r0, [pc, #56]	@ (8007cac <Motor_Straight+0x274>)
 8007c72:	f000 f905 	bl	8007e80 <PID_Calculate>
 8007c76:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
 8007c7a:	e01c      	b.n	8007cb6 <Motor_Straight+0x27e>
 8007c7c:	2000052c 	.word	0x2000052c
 8007c80:	447a0000 	.word	0x447a0000
 8007c84:	3a83126f 	.word	0x3a83126f
 8007c88:	3a83126f 	.word	0x3a83126f
 8007c8c:	20000530 	.word	0x20000530
 8007c90:	20000534 	.word	0x20000534
 8007c94:	20000538 	.word	0x20000538
 8007c98:	2000053c 	.word	0x2000053c
 8007c9c:	43340000 	.word	0x43340000
 8007ca0:	43b40000 	.word	0x43b40000
 8007ca4:	c3340000 	.word	0xc3340000
 8007ca8:	3e99999a 	.word	0x3e99999a
 8007cac:	20000074 	.word	0x20000074
        // yaw_pid_output = fmaxf(fminf(yaw_pid_output, max_pid_output*1), -max_pid_output*1);
    } else {
        // 误差小于1度时，重置PID控制器
        PID_Reset(&pid_yaw);
 8007cb0:	486d      	ldr	r0, [pc, #436]	@ (8007e68 <Motor_Straight+0x430>)
 8007cb2:	f000 f961 	bl	8007f78 <PID_Reset>
    }
    
    // 计算左右轮组的速度PID输出
    float left_pid_output = PID_Calculate(&pid_front, left_speed_error, dt);
 8007cb6:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007cba:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8007cbe:	486b      	ldr	r0, [pc, #428]	@ (8007e6c <Motor_Straight+0x434>)
 8007cc0:	f000 f8de 	bl	8007e80 <PID_Calculate>
 8007cc4:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
    float right_pid_output = PID_Calculate(&pid_rear, right_speed_error, dt);
 8007cc8:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007ccc:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8007cd0:	4867      	ldr	r0, [pc, #412]	@ (8007e70 <Motor_Straight+0x438>)
 8007cd2:	f000 f8d5 	bl	8007e80 <PID_Calculate>
 8007cd6:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
    float position_pid_output = PID_Calculate(&pid_position, position_speed_error + yaw_pid_output, dt);
 8007cda:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8007cde:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ce6:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007cea:	eeb0 0a67 	vmov.f32	s0, s15
 8007cee:	4861      	ldr	r0, [pc, #388]	@ (8007e74 <Motor_Straight+0x43c>)
 8007cf0:	f000 f8c6 	bl	8007e80 <PID_Calculate>
 8007cf4:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    // left_pid_output = fmaxf(fminf(left_pid_output, max_pid_output*1), -max_pid_output*1);
    // right_pid_output = fmaxf(fminf(right_pid_output, max_pid_output*1), -max_pid_output*1);
    // position_pid_output = fmaxf(fminf(position_pid_output, max_pid_output*1), -max_pid_output*1);
    
    // 左侧轮子 - 正转
    float motor_speed1 = -(base_speed - left_pid_output - position_pid_output - yaw_pid_output);  // 左前
 8007cf8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007cfc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8007d00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d04:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007d08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d0c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d14:	eef1 7a67 	vneg.f32	s15, s15
 8007d18:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float motor_speed3 = (base_speed + left_pid_output - position_pid_output - yaw_pid_output);   // 左后
 8007d1c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007d20:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8007d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d28:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007d2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d30:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d38:	edc7 7a08 	vstr	s15, [r7, #32]
    
    // 右侧轮子 - 反转
    float motor_speed2 = (base_speed - right_pid_output + position_pid_output + yaw_pid_output);  // 右前
 8007d3c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007d40:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007d44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d48:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d50:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8007d54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d58:	edc7 7a07 	vstr	s15, [r7, #28]
    float motor_speed4 = -(base_speed + right_pid_output + position_pid_output + yaw_pid_output); // 右后
 8007d5c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007d60:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007d64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d68:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d70:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d78:	eef1 7a67 	vneg.f32	s15, s15
 8007d7c:	edc7 7a06 	vstr	s15, [r7, #24]

    // 限幅
    motor_speed1 = fmaxf(fminf(motor_speed1, 100.0f), -100.0f);
 8007d80:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8007e78 <Motor_Straight+0x440>
 8007d84:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8007d88:	f008 ff23 	bl	8010bd2 <fminf>
 8007d8c:	eef0 7a40 	vmov.f32	s15, s0
 8007d90:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8007e7c <Motor_Straight+0x444>
 8007d94:	eeb0 0a67 	vmov.f32	s0, s15
 8007d98:	f008 fefe 	bl	8010b98 <fmaxf>
 8007d9c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    motor_speed2 = fmaxf(fminf(motor_speed2, 100.0f), -100.0f);
 8007da0:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8007e78 <Motor_Straight+0x440>
 8007da4:	ed97 0a07 	vldr	s0, [r7, #28]
 8007da8:	f008 ff13 	bl	8010bd2 <fminf>
 8007dac:	eef0 7a40 	vmov.f32	s15, s0
 8007db0:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8007e7c <Motor_Straight+0x444>
 8007db4:	eeb0 0a67 	vmov.f32	s0, s15
 8007db8:	f008 feee 	bl	8010b98 <fmaxf>
 8007dbc:	ed87 0a07 	vstr	s0, [r7, #28]
    motor_speed3 = fmaxf(fminf(motor_speed3, 100.0f), -100.0f);
 8007dc0:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8007e78 <Motor_Straight+0x440>
 8007dc4:	ed97 0a08 	vldr	s0, [r7, #32]
 8007dc8:	f008 ff03 	bl	8010bd2 <fminf>
 8007dcc:	eef0 7a40 	vmov.f32	s15, s0
 8007dd0:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8007e7c <Motor_Straight+0x444>
 8007dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8007dd8:	f008 fede 	bl	8010b98 <fmaxf>
 8007ddc:	ed87 0a08 	vstr	s0, [r7, #32]
    motor_speed4 = fmaxf(fminf(motor_speed4, 100.0f), -100.0f);
 8007de0:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8007e78 <Motor_Straight+0x440>
 8007de4:	ed97 0a06 	vldr	s0, [r7, #24]
 8007de8:	f008 fef3 	bl	8010bd2 <fminf>
 8007dec:	eef0 7a40 	vmov.f32	s15, s0
 8007df0:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8007e7c <Motor_Straight+0x444>
 8007df4:	eeb0 0a67 	vmov.f32	s0, s15
 8007df8:	f008 fece 	bl	8010b98 <fmaxf>
 8007dfc:	ed87 0a06 	vstr	s0, [r7, #24]

    // 设置电机速度
    Motor_SetSpeed(id1, motor_speed1);
 8007e00:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8007e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e08:	ee17 3a90 	vmov	r3, s15
 8007e0c:	b21a      	sxth	r2, r3
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	4611      	mov	r1, r2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff faa0 	bl	8007358 <Motor_SetSpeed>
    Motor_SetSpeed(id2, motor_speed2);
 8007e18:	edd7 7a07 	vldr	s15, [r7, #28]
 8007e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e20:	ee17 3a90 	vmov	r3, s15
 8007e24:	b21a      	sxth	r2, r3
 8007e26:	79bb      	ldrb	r3, [r7, #6]
 8007e28:	4611      	mov	r1, r2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7ff fa94 	bl	8007358 <Motor_SetSpeed>
    Motor_SetSpeed(id3, motor_speed3);
 8007e30:	edd7 7a08 	vldr	s15, [r7, #32]
 8007e34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e38:	ee17 3a90 	vmov	r3, s15
 8007e3c:	b21a      	sxth	r2, r3
 8007e3e:	797b      	ldrb	r3, [r7, #5]
 8007e40:	4611      	mov	r1, r2
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff fa88 	bl	8007358 <Motor_SetSpeed>
    Motor_SetSpeed(id4, motor_speed4);
 8007e48:	edd7 7a06 	vldr	s15, [r7, #24]
 8007e4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e50:	ee17 3a90 	vmov	r3, s15
 8007e54:	b21a      	sxth	r2, r3
 8007e56:	793b      	ldrb	r3, [r7, #4]
 8007e58:	4611      	mov	r1, r2
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff fa7c 	bl	8007358 <Motor_SetSpeed>
}
 8007e60:	377c      	adds	r7, #124	@ 0x7c
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd90      	pop	{r4, r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20000074 	.word	0x20000074
 8007e6c:	2000008c 	.word	0x2000008c
 8007e70:	200000a4 	.word	0x200000a4
 8007e74:	200000bc 	.word	0x200000bc
 8007e78:	42c80000 	.word	0x42c80000
 8007e7c:	c2c80000 	.word	0xc2c80000

08007e80 <PID_Calculate>:
    .prev_error = 0.0f,
    .max_integral = 50.0f
};

/* Exported functions --------------------------------------------------------*/
float PID_Calculate(PIDController* pid, float error, float dt) {
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b088      	sub	sp, #32
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	ed87 0a02 	vstr	s0, [r7, #8]
 8007e8c:	edc7 0a01 	vstr	s1, [r7, #4]
    // 添加时间差保护
    if (dt <= 0.001f) {
 8007e90:	edd7 7a01 	vldr	s15, [r7, #4]
 8007e94:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8007f70 <PID_Calculate+0xf0>
 8007e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea0:	d801      	bhi.n	8007ea6 <PID_Calculate+0x26>
        dt = 0.001f;  // 最小时间差为1ms
 8007ea2:	4b34      	ldr	r3, [pc, #208]	@ (8007f74 <PID_Calculate+0xf4>)
 8007ea4:	607b      	str	r3, [r7, #4]
    }

    float proportional = pid->Kp * error;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	edd3 7a00 	vldr	s15, [r3]
 8007eac:	ed97 7a02 	vldr	s14, [r7, #8]
 8007eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb4:	edc7 7a07 	vstr	s15, [r7, #28]

    pid->integral += error * dt;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	ed93 7a03 	vldr	s14, [r3, #12]
 8007ebe:	edd7 6a02 	vldr	s13, [r7, #8]
 8007ec2:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	edc3 7a03 	vstr	s15, [r3, #12]
    pid->integral = fmaxf(fminf(pid->integral, pid->max_integral), -pid->max_integral);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	edd3 7a03 	vldr	s15, [r3, #12]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	ed93 7a05 	vldr	s14, [r3, #20]
 8007ee0:	eef0 0a47 	vmov.f32	s1, s14
 8007ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8007ee8:	f008 fe73 	bl	8010bd2 <fminf>
 8007eec:	eeb0 7a40 	vmov.f32	s14, s0
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	edd3 7a05 	vldr	s15, [r3, #20]
 8007ef6:	eef1 7a67 	vneg.f32	s15, s15
 8007efa:	eef0 0a67 	vmov.f32	s1, s15
 8007efe:	eeb0 0a47 	vmov.f32	s0, s14
 8007f02:	f008 fe49 	bl	8010b98 <fmaxf>
 8007f06:	eef0 7a40 	vmov.f32	s15, s0
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	edc3 7a03 	vstr	s15, [r3, #12]

    float derivative = pid->Kd * (error - pid->prev_error) / dt;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	ed93 7a02 	vldr	s14, [r3, #8]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	edd3 7a04 	vldr	s15, [r3, #16]
 8007f1c:	edd7 6a02 	vldr	s13, [r7, #8]
 8007f20:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007f24:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007f28:	ed97 7a01 	vldr	s14, [r7, #4]
 8007f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f30:	edc7 7a06 	vstr	s15, [r7, #24]

    float output = proportional + (pid->Ki * pid->integral) + derivative;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	ed93 7a01 	vldr	s14, [r3, #4]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8007f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f44:	edd7 7a07 	vldr	s15, [r7, #28]
 8007f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f4c:	ed97 7a06 	vldr	s14, [r7, #24]
 8007f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f54:	edc7 7a05 	vstr	s15, [r7, #20]

    pid->prev_error = error;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	611a      	str	r2, [r3, #16]

    return output;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	ee07 3a90 	vmov	s15, r3
}
 8007f64:	eeb0 0a67 	vmov.f32	s0, s15
 8007f68:	3720      	adds	r7, #32
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	3a83126f 	.word	0x3a83126f
 8007f74:	3a83126f 	.word	0x3a83126f

08007f78 <PID_Reset>:

void PID_Reset(PIDController* pid) {
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
    pid->integral = 0.0f;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f04f 0200 	mov.w	r2, #0
 8007f86:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0.0f;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f04f 0200 	mov.w	r2, #0
 8007f8e:	611a      	str	r2, [r3, #16]
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	607b      	str	r3, [r7, #4]
 8007fa6:	4b10      	ldr	r3, [pc, #64]	@ (8007fe8 <HAL_MspInit+0x4c>)
 8007fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007faa:	4a0f      	ldr	r2, [pc, #60]	@ (8007fe8 <HAL_MspInit+0x4c>)
 8007fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8007fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe8 <HAL_MspInit+0x4c>)
 8007fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fba:	607b      	str	r3, [r7, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	603b      	str	r3, [r7, #0]
 8007fc2:	4b09      	ldr	r3, [pc, #36]	@ (8007fe8 <HAL_MspInit+0x4c>)
 8007fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc6:	4a08      	ldr	r2, [pc, #32]	@ (8007fe8 <HAL_MspInit+0x4c>)
 8007fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8007fce:	4b06      	ldr	r3, [pc, #24]	@ (8007fe8 <HAL_MspInit+0x4c>)
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fd6:	603b      	str	r3, [r7, #0]
 8007fd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007fda:	bf00      	nop
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	40023800 	.word	0x40023800

08007fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007ff0:	bf00      	nop
 8007ff2:	e7fd      	b.n	8007ff0 <NMI_Handler+0x4>

08007ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007ff8:	bf00      	nop
 8007ffa:	e7fd      	b.n	8007ff8 <HardFault_Handler+0x4>

08007ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008000:	bf00      	nop
 8008002:	e7fd      	b.n	8008000 <MemManage_Handler+0x4>

08008004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008004:	b480      	push	{r7}
 8008006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008008:	bf00      	nop
 800800a:	e7fd      	b.n	8008008 <BusFault_Handler+0x4>

0800800c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800800c:	b480      	push	{r7}
 800800e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008010:	bf00      	nop
 8008012:	e7fd      	b.n	8008010 <UsageFault_Handler+0x4>

08008014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008014:	b480      	push	{r7}
 8008016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008018:	bf00      	nop
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008022:	b480      	push	{r7}
 8008024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008026:	bf00      	nop
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008030:	b480      	push	{r7}
 8008032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008034:	bf00      	nop
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008042:	f001 fd29 	bl	8009a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008046:	bf00      	nop
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008050:	4802      	ldr	r0, [pc, #8]	@ (800805c <USART1_IRQHandler+0x10>)
 8008052:	f005 f86d 	bl	800d130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008056:	bf00      	nop
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20000914 	.word	0x20000914

08008060 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008064:	4802      	ldr	r0, [pc, #8]	@ (8008070 <USART2_IRQHandler+0x10>)
 8008066:	f005 f863 	bl	800d130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800806a:	bf00      	nop
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	2000095c 	.word	0x2000095c

08008074 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008078:	4802      	ldr	r0, [pc, #8]	@ (8008084 <USART3_IRQHandler+0x10>)
 800807a:	f005 f859 	bl	800d130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800807e:	bf00      	nop
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	200009a4 	.word	0x200009a4

08008088 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Echo_4_Pin);
 800808c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008090:	f002 f8b8 	bl	800a204 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Echo_3_Pin);
 8008094:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008098:	f002 f8b4 	bl	800a204 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Echo_2_Pin);
 800809c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80080a0:	f002 f8b0 	bl	800a204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80080a4:	bf00      	nop
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80080ac:	4802      	ldr	r0, [pc, #8]	@ (80080b8 <UART4_IRQHandler+0x10>)
 80080ae:	f005 f83f 	bl	800d130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80080b2:	bf00      	nop
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20000884 	.word	0x20000884

080080bc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80080c0:	4802      	ldr	r0, [pc, #8]	@ (80080cc <UART5_IRQHandler+0x10>)
 80080c2:	f005 f835 	bl	800d130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80080c6:	bf00      	nop
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	200008cc 	.word	0x200008cc

080080d0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80080d4:	4802      	ldr	r0, [pc, #8]	@ (80080e0 <USART6_IRQHandler+0x10>)
 80080d6:	f005 f82b 	bl	800d130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80080da:	bf00      	nop
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	200009ec 	.word	0x200009ec

080080e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80080e4:	b480      	push	{r7}
 80080e6:	af00      	add	r7, sp, #0
  return 1;
 80080e8:	2301      	movs	r3, #1
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <_kill>:

int _kill(int pid, int sig)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80080fe:	f006 fe4d 	bl	800ed9c <__errno>
 8008102:	4603      	mov	r3, r0
 8008104:	2216      	movs	r2, #22
 8008106:	601a      	str	r2, [r3, #0]
  return -1;
 8008108:	f04f 33ff 	mov.w	r3, #4294967295
}
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <_exit>:

void _exit (int status)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800811c:	f04f 31ff 	mov.w	r1, #4294967295
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7ff ffe7 	bl	80080f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008126:	bf00      	nop
 8008128:	e7fd      	b.n	8008126 <_exit+0x12>

0800812a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b086      	sub	sp, #24
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008136:	2300      	movs	r3, #0
 8008138:	617b      	str	r3, [r7, #20]
 800813a:	e00a      	b.n	8008152 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800813c:	f3af 8000 	nop.w
 8008140:	4601      	mov	r1, r0
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	60ba      	str	r2, [r7, #8]
 8008148:	b2ca      	uxtb	r2, r1
 800814a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	3301      	adds	r3, #1
 8008150:	617b      	str	r3, [r7, #20]
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	429a      	cmp	r2, r3
 8008158:	dbf0      	blt.n	800813c <_read+0x12>
  }

  return len;
 800815a:	687b      	ldr	r3, [r7, #4]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008170:	2300      	movs	r3, #0
 8008172:	617b      	str	r3, [r7, #20]
 8008174:	e009      	b.n	800818a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	60ba      	str	r2, [r7, #8]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	4618      	mov	r0, r3
 8008180:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	3301      	adds	r3, #1
 8008188:	617b      	str	r3, [r7, #20]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	429a      	cmp	r2, r3
 8008190:	dbf1      	blt.n	8008176 <_write+0x12>
  }
  return len;
 8008192:	687b      	ldr	r3, [r7, #4]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <_close>:

int _close(int file)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80081a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80081c4:	605a      	str	r2, [r3, #4]
  return 0;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <_isatty>:

int _isatty(int file)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80081dc:	2301      	movs	r3, #1
}
 80081de:	4618      	mov	r0, r3
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b085      	sub	sp, #20
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800820c:	4a14      	ldr	r2, [pc, #80]	@ (8008260 <_sbrk+0x5c>)
 800820e:	4b15      	ldr	r3, [pc, #84]	@ (8008264 <_sbrk+0x60>)
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008218:	4b13      	ldr	r3, [pc, #76]	@ (8008268 <_sbrk+0x64>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d102      	bne.n	8008226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008220:	4b11      	ldr	r3, [pc, #68]	@ (8008268 <_sbrk+0x64>)
 8008222:	4a12      	ldr	r2, [pc, #72]	@ (800826c <_sbrk+0x68>)
 8008224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008226:	4b10      	ldr	r3, [pc, #64]	@ (8008268 <_sbrk+0x64>)
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4413      	add	r3, r2
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	429a      	cmp	r2, r3
 8008232:	d207      	bcs.n	8008244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008234:	f006 fdb2 	bl	800ed9c <__errno>
 8008238:	4603      	mov	r3, r0
 800823a:	220c      	movs	r2, #12
 800823c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800823e:	f04f 33ff 	mov.w	r3, #4294967295
 8008242:	e009      	b.n	8008258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008244:	4b08      	ldr	r3, [pc, #32]	@ (8008268 <_sbrk+0x64>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800824a:	4b07      	ldr	r3, [pc, #28]	@ (8008268 <_sbrk+0x64>)
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4413      	add	r3, r2
 8008252:	4a05      	ldr	r2, [pc, #20]	@ (8008268 <_sbrk+0x64>)
 8008254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008256:	68fb      	ldr	r3, [r7, #12]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	20020000 	.word	0x20020000
 8008264:	00000400 	.word	0x00000400
 8008268:	20000540 	.word	0x20000540
 800826c:	20000b88 	.word	0x20000b88

08008270 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008270:	b480      	push	{r7}
 8008272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008274:	4b06      	ldr	r3, [pc, #24]	@ (8008290 <SystemInit+0x20>)
 8008276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800827a:	4a05      	ldr	r2, [pc, #20]	@ (8008290 <SystemInit+0x20>)
 800827c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008280:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008284:	bf00      	nop
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	e000ed00 	.word	0xe000ed00

08008294 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b08c      	sub	sp, #48	@ 0x30
 8008298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800829a:	f107 030c 	add.w	r3, r7, #12
 800829e:	2224      	movs	r2, #36	@ 0x24
 80082a0:	2100      	movs	r1, #0
 80082a2:	4618      	mov	r0, r3
 80082a4:	f006 fd28 	bl	800ecf8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082a8:	1d3b      	adds	r3, r7, #4
 80082aa:	2200      	movs	r2, #0
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80082b0:	4b22      	ldr	r3, [pc, #136]	@ (800833c <MX_TIM1_Init+0xa8>)
 80082b2:	4a23      	ldr	r2, [pc, #140]	@ (8008340 <MX_TIM1_Init+0xac>)
 80082b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80082b6:	4b21      	ldr	r3, [pc, #132]	@ (800833c <MX_TIM1_Init+0xa8>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082bc:	4b1f      	ldr	r3, [pc, #124]	@ (800833c <MX_TIM1_Init+0xa8>)
 80082be:	2200      	movs	r2, #0
 80082c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80082c2:	4b1e      	ldr	r3, [pc, #120]	@ (800833c <MX_TIM1_Init+0xa8>)
 80082c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80082c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082ca:	4b1c      	ldr	r3, [pc, #112]	@ (800833c <MX_TIM1_Init+0xa8>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80082d0:	4b1a      	ldr	r3, [pc, #104]	@ (800833c <MX_TIM1_Init+0xa8>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80082d6:	4b19      	ldr	r3, [pc, #100]	@ (800833c <MX_TIM1_Init+0xa8>)
 80082d8:	2200      	movs	r2, #0
 80082da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80082dc:	2301      	movs	r3, #1
 80082de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80082e0:	2300      	movs	r3, #0
 80082e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80082e4:	2301      	movs	r3, #1
 80082e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80082e8:	2300      	movs	r3, #0
 80082ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80082ec:	230f      	movs	r3, #15
 80082ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80082f0:	2300      	movs	r3, #0
 80082f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80082f4:	2301      	movs	r3, #1
 80082f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80082f8:	2300      	movs	r3, #0
 80082fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80082fc:	230f      	movs	r3, #15
 80082fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8008300:	f107 030c 	add.w	r3, r7, #12
 8008304:	4619      	mov	r1, r3
 8008306:	480d      	ldr	r0, [pc, #52]	@ (800833c <MX_TIM1_Init+0xa8>)
 8008308:	f003 ff6a 	bl	800c1e0 <HAL_TIM_Encoder_Init>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8008312:	f7fe ff9f 	bl	8007254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008316:	2300      	movs	r3, #0
 8008318:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800831a:	2300      	movs	r3, #0
 800831c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800831e:	1d3b      	adds	r3, r7, #4
 8008320:	4619      	mov	r1, r3
 8008322:	4806      	ldr	r0, [pc, #24]	@ (800833c <MX_TIM1_Init+0xa8>)
 8008324:	f004 fd36 	bl	800cd94 <HAL_TIMEx_MasterConfigSynchronization>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800832e:	f7fe ff91 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008332:	bf00      	nop
 8008334:	3730      	adds	r7, #48	@ 0x30
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	20000544 	.word	0x20000544
 8008340:	40010000 	.word	0x40010000

08008344 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08c      	sub	sp, #48	@ 0x30
 8008348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800834a:	f107 030c 	add.w	r3, r7, #12
 800834e:	2224      	movs	r2, #36	@ 0x24
 8008350:	2100      	movs	r1, #0
 8008352:	4618      	mov	r0, r3
 8008354:	f006 fcd0 	bl	800ecf8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008358:	1d3b      	adds	r3, r7, #4
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008360:	4b21      	ldr	r3, [pc, #132]	@ (80083e8 <MX_TIM2_Init+0xa4>)
 8008362:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008366:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008368:	4b1f      	ldr	r3, [pc, #124]	@ (80083e8 <MX_TIM2_Init+0xa4>)
 800836a:	2200      	movs	r2, #0
 800836c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800836e:	4b1e      	ldr	r3, [pc, #120]	@ (80083e8 <MX_TIM2_Init+0xa4>)
 8008370:	2200      	movs	r2, #0
 8008372:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8008374:	4b1c      	ldr	r3, [pc, #112]	@ (80083e8 <MX_TIM2_Init+0xa4>)
 8008376:	f04f 32ff 	mov.w	r2, #4294967295
 800837a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800837c:	4b1a      	ldr	r3, [pc, #104]	@ (80083e8 <MX_TIM2_Init+0xa4>)
 800837e:	2200      	movs	r2, #0
 8008380:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008382:	4b19      	ldr	r3, [pc, #100]	@ (80083e8 <MX_TIM2_Init+0xa4>)
 8008384:	2200      	movs	r2, #0
 8008386:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8008388:	2301      	movs	r3, #1
 800838a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800838c:	2300      	movs	r3, #0
 800838e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008390:	2301      	movs	r3, #1
 8008392:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008394:	2300      	movs	r3, #0
 8008396:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8008398:	230f      	movs	r3, #15
 800839a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800839c:	2300      	movs	r3, #0
 800839e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80083a0:	2301      	movs	r3, #1
 80083a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80083a4:	2300      	movs	r3, #0
 80083a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80083a8:	230f      	movs	r3, #15
 80083aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80083ac:	f107 030c 	add.w	r3, r7, #12
 80083b0:	4619      	mov	r1, r3
 80083b2:	480d      	ldr	r0, [pc, #52]	@ (80083e8 <MX_TIM2_Init+0xa4>)
 80083b4:	f003 ff14 	bl	800c1e0 <HAL_TIM_Encoder_Init>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80083be:	f7fe ff49 	bl	8007254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80083c2:	2300      	movs	r3, #0
 80083c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80083ca:	1d3b      	adds	r3, r7, #4
 80083cc:	4619      	mov	r1, r3
 80083ce:	4806      	ldr	r0, [pc, #24]	@ (80083e8 <MX_TIM2_Init+0xa4>)
 80083d0:	f004 fce0 	bl	800cd94 <HAL_TIMEx_MasterConfigSynchronization>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80083da:	f7fe ff3b 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80083de:	bf00      	nop
 80083e0:	3730      	adds	r7, #48	@ 0x30
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	2000058c 	.word	0x2000058c

080083ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08c      	sub	sp, #48	@ 0x30
 80083f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80083f2:	f107 030c 	add.w	r3, r7, #12
 80083f6:	2224      	movs	r2, #36	@ 0x24
 80083f8:	2100      	movs	r1, #0
 80083fa:	4618      	mov	r0, r3
 80083fc:	f006 fc7c 	bl	800ecf8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008400:	1d3b      	adds	r3, r7, #4
 8008402:	2200      	movs	r2, #0
 8008404:	601a      	str	r2, [r3, #0]
 8008406:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008408:	4b20      	ldr	r3, [pc, #128]	@ (800848c <MX_TIM3_Init+0xa0>)
 800840a:	4a21      	ldr	r2, [pc, #132]	@ (8008490 <MX_TIM3_Init+0xa4>)
 800840c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800840e:	4b1f      	ldr	r3, [pc, #124]	@ (800848c <MX_TIM3_Init+0xa0>)
 8008410:	2200      	movs	r2, #0
 8008412:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008414:	4b1d      	ldr	r3, [pc, #116]	@ (800848c <MX_TIM3_Init+0xa0>)
 8008416:	2200      	movs	r2, #0
 8008418:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800841a:	4b1c      	ldr	r3, [pc, #112]	@ (800848c <MX_TIM3_Init+0xa0>)
 800841c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008420:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008422:	4b1a      	ldr	r3, [pc, #104]	@ (800848c <MX_TIM3_Init+0xa0>)
 8008424:	2200      	movs	r2, #0
 8008426:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008428:	4b18      	ldr	r3, [pc, #96]	@ (800848c <MX_TIM3_Init+0xa0>)
 800842a:	2200      	movs	r2, #0
 800842c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800842e:	2301      	movs	r3, #1
 8008430:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008432:	2300      	movs	r3, #0
 8008434:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008436:	2301      	movs	r3, #1
 8008438:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800843a:	2300      	movs	r3, #0
 800843c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800843e:	230f      	movs	r3, #15
 8008440:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008442:	2300      	movs	r3, #0
 8008444:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008446:	2301      	movs	r3, #1
 8008448:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800844a:	2300      	movs	r3, #0
 800844c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800844e:	230f      	movs	r3, #15
 8008450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8008452:	f107 030c 	add.w	r3, r7, #12
 8008456:	4619      	mov	r1, r3
 8008458:	480c      	ldr	r0, [pc, #48]	@ (800848c <MX_TIM3_Init+0xa0>)
 800845a:	f003 fec1 	bl	800c1e0 <HAL_TIM_Encoder_Init>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8008464:	f7fe fef6 	bl	8007254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008468:	2300      	movs	r3, #0
 800846a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800846c:	2300      	movs	r3, #0
 800846e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008470:	1d3b      	adds	r3, r7, #4
 8008472:	4619      	mov	r1, r3
 8008474:	4805      	ldr	r0, [pc, #20]	@ (800848c <MX_TIM3_Init+0xa0>)
 8008476:	f004 fc8d 	bl	800cd94 <HAL_TIMEx_MasterConfigSynchronization>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8008480:	f7fe fee8 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8008484:	bf00      	nop
 8008486:	3730      	adds	r7, #48	@ 0x30
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	200005d4 	.word	0x200005d4
 8008490:	40000400 	.word	0x40000400

08008494 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08c      	sub	sp, #48	@ 0x30
 8008498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800849a:	f107 030c 	add.w	r3, r7, #12
 800849e:	2224      	movs	r2, #36	@ 0x24
 80084a0:	2100      	movs	r1, #0
 80084a2:	4618      	mov	r0, r3
 80084a4:	f006 fc28 	bl	800ecf8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80084a8:	1d3b      	adds	r3, r7, #4
 80084aa:	2200      	movs	r2, #0
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80084b0:	4b20      	ldr	r3, [pc, #128]	@ (8008534 <MX_TIM4_Init+0xa0>)
 80084b2:	4a21      	ldr	r2, [pc, #132]	@ (8008538 <MX_TIM4_Init+0xa4>)
 80084b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80084b6:	4b1f      	ldr	r3, [pc, #124]	@ (8008534 <MX_TIM4_Init+0xa0>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008534 <MX_TIM4_Init+0xa0>)
 80084be:	2200      	movs	r2, #0
 80084c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80084c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008534 <MX_TIM4_Init+0xa0>)
 80084c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80084c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084ca:	4b1a      	ldr	r3, [pc, #104]	@ (8008534 <MX_TIM4_Init+0xa0>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80084d0:	4b18      	ldr	r3, [pc, #96]	@ (8008534 <MX_TIM4_Init+0xa0>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80084d6:	2301      	movs	r3, #1
 80084d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80084da:	2300      	movs	r3, #0
 80084dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80084de:	2301      	movs	r3, #1
 80084e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80084e2:	2300      	movs	r3, #0
 80084e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80084e6:	230f      	movs	r3, #15
 80084e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80084ea:	2300      	movs	r3, #0
 80084ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80084ee:	2301      	movs	r3, #1
 80084f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80084f2:	2300      	movs	r3, #0
 80084f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80084fa:	f107 030c 	add.w	r3, r7, #12
 80084fe:	4619      	mov	r1, r3
 8008500:	480c      	ldr	r0, [pc, #48]	@ (8008534 <MX_TIM4_Init+0xa0>)
 8008502:	f003 fe6d 	bl	800c1e0 <HAL_TIM_Encoder_Init>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d001      	beq.n	8008510 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800850c:	f7fe fea2 	bl	8007254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008510:	2300      	movs	r3, #0
 8008512:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008514:	2300      	movs	r3, #0
 8008516:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008518:	1d3b      	adds	r3, r7, #4
 800851a:	4619      	mov	r1, r3
 800851c:	4805      	ldr	r0, [pc, #20]	@ (8008534 <MX_TIM4_Init+0xa0>)
 800851e:	f004 fc39 	bl	800cd94 <HAL_TIMEx_MasterConfigSynchronization>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8008528:	f7fe fe94 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800852c:	bf00      	nop
 800852e:	3730      	adds	r7, #48	@ 0x30
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	2000061c 	.word	0x2000061c
 8008538:	40000800 	.word	0x40000800

0800853c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08e      	sub	sp, #56	@ 0x38
 8008540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008542:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008546:	2200      	movs	r2, #0
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	605a      	str	r2, [r3, #4]
 800854c:	609a      	str	r2, [r3, #8]
 800854e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008550:	f107 0320 	add.w	r3, r7, #32
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800855a:	1d3b      	adds	r3, r7, #4
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	605a      	str	r2, [r3, #4]
 8008562:	609a      	str	r2, [r3, #8]
 8008564:	60da      	str	r2, [r3, #12]
 8008566:	611a      	str	r2, [r3, #16]
 8008568:	615a      	str	r2, [r3, #20]
 800856a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800856c:	4b3d      	ldr	r3, [pc, #244]	@ (8008664 <MX_TIM5_Init+0x128>)
 800856e:	4a3e      	ldr	r2, [pc, #248]	@ (8008668 <MX_TIM5_Init+0x12c>)
 8008570:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8008572:	4b3c      	ldr	r3, [pc, #240]	@ (8008664 <MX_TIM5_Init+0x128>)
 8008574:	2253      	movs	r2, #83	@ 0x53
 8008576:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008578:	4b3a      	ldr	r3, [pc, #232]	@ (8008664 <MX_TIM5_Init+0x128>)
 800857a:	2200      	movs	r2, #0
 800857c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 800857e:	4b39      	ldr	r3, [pc, #228]	@ (8008664 <MX_TIM5_Init+0x128>)
 8008580:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008584:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008586:	4b37      	ldr	r3, [pc, #220]	@ (8008664 <MX_TIM5_Init+0x128>)
 8008588:	2200      	movs	r2, #0
 800858a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800858c:	4b35      	ldr	r3, [pc, #212]	@ (8008664 <MX_TIM5_Init+0x128>)
 800858e:	2200      	movs	r2, #0
 8008590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008592:	4834      	ldr	r0, [pc, #208]	@ (8008664 <MX_TIM5_Init+0x128>)
 8008594:	f003 fc4a 	bl	800be2c <HAL_TIM_Base_Init>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800859e:	f7fe fe59 	bl	8007254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80085a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80085a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80085ac:	4619      	mov	r1, r3
 80085ae:	482d      	ldr	r0, [pc, #180]	@ (8008664 <MX_TIM5_Init+0x128>)
 80085b0:	f004 f80c 	bl	800c5cc <HAL_TIM_ConfigClockSource>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80085ba:	f7fe fe4b 	bl	8007254 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80085be:	4829      	ldr	r0, [pc, #164]	@ (8008664 <MX_TIM5_Init+0x128>)
 80085c0:	f003 fcec 	bl	800bf9c <HAL_TIM_PWM_Init>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80085ca:	f7fe fe43 	bl	8007254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80085ce:	2300      	movs	r3, #0
 80085d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085d2:	2300      	movs	r3, #0
 80085d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80085d6:	f107 0320 	add.w	r3, r7, #32
 80085da:	4619      	mov	r1, r3
 80085dc:	4821      	ldr	r0, [pc, #132]	@ (8008664 <MX_TIM5_Init+0x128>)
 80085de:	f004 fbd9 	bl	800cd94 <HAL_TIMEx_MasterConfigSynchronization>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80085e8:	f7fe fe34 	bl	8007254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80085ec:	2360      	movs	r3, #96	@ 0x60
 80085ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80085f4:	2300      	movs	r3, #0
 80085f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80085fc:	1d3b      	adds	r3, r7, #4
 80085fe:	2200      	movs	r2, #0
 8008600:	4619      	mov	r1, r3
 8008602:	4818      	ldr	r0, [pc, #96]	@ (8008664 <MX_TIM5_Init+0x128>)
 8008604:	f003 ff20 	bl	800c448 <HAL_TIM_PWM_ConfigChannel>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800860e:	f7fe fe21 	bl	8007254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008612:	1d3b      	adds	r3, r7, #4
 8008614:	2204      	movs	r2, #4
 8008616:	4619      	mov	r1, r3
 8008618:	4812      	ldr	r0, [pc, #72]	@ (8008664 <MX_TIM5_Init+0x128>)
 800861a:	f003 ff15 	bl	800c448 <HAL_TIM_PWM_ConfigChannel>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8008624:	f7fe fe16 	bl	8007254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008628:	1d3b      	adds	r3, r7, #4
 800862a:	2208      	movs	r2, #8
 800862c:	4619      	mov	r1, r3
 800862e:	480d      	ldr	r0, [pc, #52]	@ (8008664 <MX_TIM5_Init+0x128>)
 8008630:	f003 ff0a 	bl	800c448 <HAL_TIM_PWM_ConfigChannel>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 800863a:	f7fe fe0b 	bl	8007254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800863e:	1d3b      	adds	r3, r7, #4
 8008640:	220c      	movs	r2, #12
 8008642:	4619      	mov	r1, r3
 8008644:	4807      	ldr	r0, [pc, #28]	@ (8008664 <MX_TIM5_Init+0x128>)
 8008646:	f003 feff 	bl	800c448 <HAL_TIM_PWM_ConfigChannel>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <MX_TIM5_Init+0x118>
  {
    Error_Handler();
 8008650:	f7fe fe00 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8008654:	4803      	ldr	r0, [pc, #12]	@ (8008664 <MX_TIM5_Init+0x128>)
 8008656:	f000 fb2b 	bl	8008cb0 <HAL_TIM_MspPostInit>

}
 800865a:	bf00      	nop
 800865c:	3738      	adds	r7, #56	@ 0x38
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	20000664 	.word	0x20000664
 8008668:	40000c00 	.word	0x40000c00

0800866c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008672:	463b      	mov	r3, r7
 8008674:	2200      	movs	r2, #0
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800867a:	4b15      	ldr	r3, [pc, #84]	@ (80086d0 <MX_TIM6_Init+0x64>)
 800867c:	4a15      	ldr	r2, [pc, #84]	@ (80086d4 <MX_TIM6_Init+0x68>)
 800867e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8008680:	4b13      	ldr	r3, [pc, #76]	@ (80086d0 <MX_TIM6_Init+0x64>)
 8008682:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8008686:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008688:	4b11      	ldr	r3, [pc, #68]	@ (80086d0 <MX_TIM6_Init+0x64>)
 800868a:	2200      	movs	r2, #0
 800868c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800868e:	4b10      	ldr	r3, [pc, #64]	@ (80086d0 <MX_TIM6_Init+0x64>)
 8008690:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008694:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008696:	4b0e      	ldr	r3, [pc, #56]	@ (80086d0 <MX_TIM6_Init+0x64>)
 8008698:	2200      	movs	r2, #0
 800869a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800869c:	480c      	ldr	r0, [pc, #48]	@ (80086d0 <MX_TIM6_Init+0x64>)
 800869e:	f003 fbc5 	bl	800be2c <HAL_TIM_Base_Init>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80086a8:	f7fe fdd4 	bl	8007254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80086ac:	2300      	movs	r3, #0
 80086ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80086b0:	2300      	movs	r3, #0
 80086b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80086b4:	463b      	mov	r3, r7
 80086b6:	4619      	mov	r1, r3
 80086b8:	4805      	ldr	r0, [pc, #20]	@ (80086d0 <MX_TIM6_Init+0x64>)
 80086ba:	f004 fb6b 	bl	800cd94 <HAL_TIMEx_MasterConfigSynchronization>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80086c4:	f7fe fdc6 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80086c8:	bf00      	nop
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	200006ac 	.word	0x200006ac
 80086d4:	40001000 	.word	0x40001000

080086d8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b096      	sub	sp, #88	@ 0x58
 80086dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80086de:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80086e2:	2200      	movs	r2, #0
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	605a      	str	r2, [r3, #4]
 80086e8:	609a      	str	r2, [r3, #8]
 80086ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80086ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80086f0:	2200      	movs	r2, #0
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80086f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	605a      	str	r2, [r3, #4]
 8008700:	609a      	str	r2, [r3, #8]
 8008702:	60da      	str	r2, [r3, #12]
 8008704:	611a      	str	r2, [r3, #16]
 8008706:	615a      	str	r2, [r3, #20]
 8008708:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800870a:	1d3b      	adds	r3, r7, #4
 800870c:	2220      	movs	r2, #32
 800870e:	2100      	movs	r1, #0
 8008710:	4618      	mov	r0, r3
 8008712:	f006 faf1 	bl	800ecf8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008716:	4b45      	ldr	r3, [pc, #276]	@ (800882c <MX_TIM8_Init+0x154>)
 8008718:	4a45      	ldr	r2, [pc, #276]	@ (8008830 <MX_TIM8_Init+0x158>)
 800871a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800871c:	4b43      	ldr	r3, [pc, #268]	@ (800882c <MX_TIM8_Init+0x154>)
 800871e:	22a7      	movs	r2, #167	@ 0xa7
 8008720:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008722:	4b42      	ldr	r3, [pc, #264]	@ (800882c <MX_TIM8_Init+0x154>)
 8008724:	2200      	movs	r2, #0
 8008726:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000-1;
 8008728:	4b40      	ldr	r3, [pc, #256]	@ (800882c <MX_TIM8_Init+0x154>)
 800872a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800872e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008730:	4b3e      	ldr	r3, [pc, #248]	@ (800882c <MX_TIM8_Init+0x154>)
 8008732:	2200      	movs	r2, #0
 8008734:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008736:	4b3d      	ldr	r3, [pc, #244]	@ (800882c <MX_TIM8_Init+0x154>)
 8008738:	2200      	movs	r2, #0
 800873a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800873c:	4b3b      	ldr	r3, [pc, #236]	@ (800882c <MX_TIM8_Init+0x154>)
 800873e:	2200      	movs	r2, #0
 8008740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008742:	483a      	ldr	r0, [pc, #232]	@ (800882c <MX_TIM8_Init+0x154>)
 8008744:	f003 fb72 	bl	800be2c <HAL_TIM_Base_Init>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800874e:	f7fe fd81 	bl	8007254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008752:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008756:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008758:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800875c:	4619      	mov	r1, r3
 800875e:	4833      	ldr	r0, [pc, #204]	@ (800882c <MX_TIM8_Init+0x154>)
 8008760:	f003 ff34 	bl	800c5cc <HAL_TIM_ConfigClockSource>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800876a:	f7fe fd73 	bl	8007254 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800876e:	482f      	ldr	r0, [pc, #188]	@ (800882c <MX_TIM8_Init+0x154>)
 8008770:	f003 fc14 	bl	800bf9c <HAL_TIM_PWM_Init>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800877a:	f7fe fd6b 	bl	8007254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800877e:	2300      	movs	r3, #0
 8008780:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008782:	2300      	movs	r3, #0
 8008784:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008786:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800878a:	4619      	mov	r1, r3
 800878c:	4827      	ldr	r0, [pc, #156]	@ (800882c <MX_TIM8_Init+0x154>)
 800878e:	f004 fb01 	bl	800cd94 <HAL_TIMEx_MasterConfigSynchronization>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8008798:	f7fe fd5c 	bl	8007254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800879c:	2360      	movs	r3, #96	@ 0x60
 800879e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1000;
 80087a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80087a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80087a6:	2300      	movs	r3, #0
 80087a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80087aa:	2300      	movs	r3, #0
 80087ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80087ae:	2300      	movs	r3, #0
 80087b0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80087b2:	2300      	movs	r3, #0
 80087b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80087b6:	2300      	movs	r3, #0
 80087b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80087ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087be:	2200      	movs	r2, #0
 80087c0:	4619      	mov	r1, r3
 80087c2:	481a      	ldr	r0, [pc, #104]	@ (800882c <MX_TIM8_Init+0x154>)
 80087c4:	f003 fe40 	bl	800c448 <HAL_TIM_PWM_ConfigChannel>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80087ce:	f7fe fd41 	bl	8007254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80087d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087d6:	2204      	movs	r2, #4
 80087d8:	4619      	mov	r1, r3
 80087da:	4814      	ldr	r0, [pc, #80]	@ (800882c <MX_TIM8_Init+0x154>)
 80087dc:	f003 fe34 	bl	800c448 <HAL_TIM_PWM_ConfigChannel>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 80087e6:	f7fe fd35 	bl	8007254 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80087ea:	2300      	movs	r3, #0
 80087ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80087ee:	2300      	movs	r3, #0
 80087f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80087fa:	2300      	movs	r3, #0
 80087fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80087fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008802:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008804:	2300      	movs	r3, #0
 8008806:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008808:	1d3b      	adds	r3, r7, #4
 800880a:	4619      	mov	r1, r3
 800880c:	4807      	ldr	r0, [pc, #28]	@ (800882c <MX_TIM8_Init+0x154>)
 800880e:	f004 fb3d 	bl	800ce8c <HAL_TIMEx_ConfigBreakDeadTime>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8008818:	f7fe fd1c 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800881c:	4803      	ldr	r0, [pc, #12]	@ (800882c <MX_TIM8_Init+0x154>)
 800881e:	f000 fa47 	bl	8008cb0 <HAL_TIM_MspPostInit>

}
 8008822:	bf00      	nop
 8008824:	3758      	adds	r7, #88	@ 0x58
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	200006f4 	.word	0x200006f4
 8008830:	40010400 	.word	0x40010400

08008834 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08c      	sub	sp, #48	@ 0x30
 8008838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800883a:	f107 0320 	add.w	r3, r7, #32
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	605a      	str	r2, [r3, #4]
 8008844:	609a      	str	r2, [r3, #8]
 8008846:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008848:	1d3b      	adds	r3, r7, #4
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	605a      	str	r2, [r3, #4]
 8008850:	609a      	str	r2, [r3, #8]
 8008852:	60da      	str	r2, [r3, #12]
 8008854:	611a      	str	r2, [r3, #16]
 8008856:	615a      	str	r2, [r3, #20]
 8008858:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800885a:	4b2b      	ldr	r3, [pc, #172]	@ (8008908 <MX_TIM9_Init+0xd4>)
 800885c:	4a2b      	ldr	r2, [pc, #172]	@ (800890c <MX_TIM9_Init+0xd8>)
 800885e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 8008860:	4b29      	ldr	r3, [pc, #164]	@ (8008908 <MX_TIM9_Init+0xd4>)
 8008862:	22a7      	movs	r2, #167	@ 0xa7
 8008864:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008866:	4b28      	ldr	r3, [pc, #160]	@ (8008908 <MX_TIM9_Init+0xd4>)
 8008868:	2200      	movs	r2, #0
 800886a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 800886c:	4b26      	ldr	r3, [pc, #152]	@ (8008908 <MX_TIM9_Init+0xd4>)
 800886e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008872:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008874:	4b24      	ldr	r3, [pc, #144]	@ (8008908 <MX_TIM9_Init+0xd4>)
 8008876:	2200      	movs	r2, #0
 8008878:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800887a:	4b23      	ldr	r3, [pc, #140]	@ (8008908 <MX_TIM9_Init+0xd4>)
 800887c:	2200      	movs	r2, #0
 800887e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8008880:	4821      	ldr	r0, [pc, #132]	@ (8008908 <MX_TIM9_Init+0xd4>)
 8008882:	f003 fad3 	bl	800be2c <HAL_TIM_Base_Init>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800888c:	f7fe fce2 	bl	8007254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008894:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8008896:	f107 0320 	add.w	r3, r7, #32
 800889a:	4619      	mov	r1, r3
 800889c:	481a      	ldr	r0, [pc, #104]	@ (8008908 <MX_TIM9_Init+0xd4>)
 800889e:	f003 fe95 	bl	800c5cc <HAL_TIM_ConfigClockSource>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80088a8:	f7fe fcd4 	bl	8007254 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80088ac:	4816      	ldr	r0, [pc, #88]	@ (8008908 <MX_TIM9_Init+0xd4>)
 80088ae:	f003 fb75 	bl	800bf9c <HAL_TIM_PWM_Init>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80088b8:	f7fe fccc 	bl	8007254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80088bc:	2360      	movs	r3, #96	@ 0x60
 80088be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80088c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80088c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80088ca:	2300      	movs	r3, #0
 80088cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80088ce:	1d3b      	adds	r3, r7, #4
 80088d0:	2200      	movs	r2, #0
 80088d2:	4619      	mov	r1, r3
 80088d4:	480c      	ldr	r0, [pc, #48]	@ (8008908 <MX_TIM9_Init+0xd4>)
 80088d6:	f003 fdb7 	bl	800c448 <HAL_TIM_PWM_ConfigChannel>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 80088e0:	f7fe fcb8 	bl	8007254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80088e4:	1d3b      	adds	r3, r7, #4
 80088e6:	2204      	movs	r2, #4
 80088e8:	4619      	mov	r1, r3
 80088ea:	4807      	ldr	r0, [pc, #28]	@ (8008908 <MX_TIM9_Init+0xd4>)
 80088ec:	f003 fdac 	bl	800c448 <HAL_TIM_PWM_ConfigChannel>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 80088f6:	f7fe fcad 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80088fa:	4803      	ldr	r0, [pc, #12]	@ (8008908 <MX_TIM9_Init+0xd4>)
 80088fc:	f000 f9d8 	bl	8008cb0 <HAL_TIM_MspPostInit>

}
 8008900:	bf00      	nop
 8008902:	3730      	adds	r7, #48	@ 0x30
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	2000073c 	.word	0x2000073c
 800890c:	40014000 	.word	0x40014000

08008910 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8008916:	1d3b      	adds	r3, r7, #4
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	605a      	str	r2, [r3, #4]
 800891e:	609a      	str	r2, [r3, #8]
 8008920:	60da      	str	r2, [r3, #12]
 8008922:	611a      	str	r2, [r3, #16]
 8008924:	615a      	str	r2, [r3, #20]
 8008926:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8008928:	4b1e      	ldr	r3, [pc, #120]	@ (80089a4 <MX_TIM10_Init+0x94>)
 800892a:	4a1f      	ldr	r2, [pc, #124]	@ (80089a8 <MX_TIM10_Init+0x98>)
 800892c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 800892e:	4b1d      	ldr	r3, [pc, #116]	@ (80089a4 <MX_TIM10_Init+0x94>)
 8008930:	22a7      	movs	r2, #167	@ 0xa7
 8008932:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008934:	4b1b      	ldr	r3, [pc, #108]	@ (80089a4 <MX_TIM10_Init+0x94>)
 8008936:	2200      	movs	r2, #0
 8008938:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 20000-1;
 800893a:	4b1a      	ldr	r3, [pc, #104]	@ (80089a4 <MX_TIM10_Init+0x94>)
 800893c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008940:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008942:	4b18      	ldr	r3, [pc, #96]	@ (80089a4 <MX_TIM10_Init+0x94>)
 8008944:	2200      	movs	r2, #0
 8008946:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008948:	4b16      	ldr	r3, [pc, #88]	@ (80089a4 <MX_TIM10_Init+0x94>)
 800894a:	2200      	movs	r2, #0
 800894c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800894e:	4815      	ldr	r0, [pc, #84]	@ (80089a4 <MX_TIM10_Init+0x94>)
 8008950:	f003 fa6c 	bl	800be2c <HAL_TIM_Base_Init>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d001      	beq.n	800895e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800895a:	f7fe fc7b 	bl	8007254 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800895e:	4811      	ldr	r0, [pc, #68]	@ (80089a4 <MX_TIM10_Init+0x94>)
 8008960:	f003 fb1c 	bl	800bf9c <HAL_TIM_PWM_Init>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800896a:	f7fe fc73 	bl	8007254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800896e:	2360      	movs	r3, #96	@ 0x60
 8008970:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008976:	2300      	movs	r3, #0
 8008978:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800897e:	1d3b      	adds	r3, r7, #4
 8008980:	2200      	movs	r2, #0
 8008982:	4619      	mov	r1, r3
 8008984:	4807      	ldr	r0, [pc, #28]	@ (80089a4 <MX_TIM10_Init+0x94>)
 8008986:	f003 fd5f 	bl	800c448 <HAL_TIM_PWM_ConfigChannel>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8008990:	f7fe fc60 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8008994:	4803      	ldr	r0, [pc, #12]	@ (80089a4 <MX_TIM10_Init+0x94>)
 8008996:	f000 f98b 	bl	8008cb0 <HAL_TIM_MspPostInit>

}
 800899a:	bf00      	nop
 800899c:	3720      	adds	r7, #32
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	20000784 	.word	0x20000784
 80089a8:	40014400 	.word	0x40014400

080089ac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b090      	sub	sp, #64	@ 0x40
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	605a      	str	r2, [r3, #4]
 80089be:	609a      	str	r2, [r3, #8]
 80089c0:	60da      	str	r2, [r3, #12]
 80089c2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a74      	ldr	r2, [pc, #464]	@ (8008b9c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d12d      	bne.n	8008a2a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80089ce:	2300      	movs	r3, #0
 80089d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089d2:	4b73      	ldr	r3, [pc, #460]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80089d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089d6:	4a72      	ldr	r2, [pc, #456]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80089d8:	f043 0301 	orr.w	r3, r3, #1
 80089dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80089de:	4b70      	ldr	r3, [pc, #448]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80089e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80089ea:	2300      	movs	r3, #0
 80089ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80089ee:	4b6c      	ldr	r3, [pc, #432]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80089f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089f2:	4a6b      	ldr	r2, [pc, #428]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80089f4:	f043 0310 	orr.w	r3, r3, #16
 80089f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80089fa:	4b69      	ldr	r3, [pc, #420]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80089fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089fe:	f003 0310 	and.w	r3, r3, #16
 8008a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M1_E1_Pin|M1_E2_Pin;
 8008a06:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8008a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a14:	2300      	movs	r3, #0
 8008a16:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008a1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008a20:	4619      	mov	r1, r3
 8008a22:	4860      	ldr	r0, [pc, #384]	@ (8008ba4 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8008a24:	f001 fa20 	bl	8009e68 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8008a28:	e0b3      	b.n	8008b92 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM2)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a32:	d14a      	bne.n	8008aca <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008a34:	2300      	movs	r3, #0
 8008a36:	623b      	str	r3, [r7, #32]
 8008a38:	4b59      	ldr	r3, [pc, #356]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3c:	4a58      	ldr	r2, [pc, #352]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008a3e:	f043 0301 	orr.w	r3, r3, #1
 8008a42:	6413      	str	r3, [r2, #64]	@ 0x40
 8008a44:	4b56      	ldr	r3, [pc, #344]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	623b      	str	r3, [r7, #32]
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a50:	2300      	movs	r3, #0
 8008a52:	61fb      	str	r3, [r7, #28]
 8008a54:	4b52      	ldr	r3, [pc, #328]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a58:	4a51      	ldr	r2, [pc, #324]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008a5a:	f043 0301 	orr.w	r3, r3, #1
 8008a5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a60:	4b4f      	ldr	r3, [pc, #316]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	61fb      	str	r3, [r7, #28]
 8008a6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	61bb      	str	r3, [r7, #24]
 8008a70:	4b4b      	ldr	r3, [pc, #300]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a74:	4a4a      	ldr	r2, [pc, #296]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008a76:	f043 0302 	orr.w	r3, r3, #2
 8008a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a7c:	4b48      	ldr	r3, [pc, #288]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a80:	f003 0302 	and.w	r3, r3, #2
 8008a84:	61bb      	str	r3, [r7, #24]
 8008a86:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M4_E1_Pin;
 8008a88:	2320      	movs	r3, #32
 8008a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a90:	2300      	movs	r3, #0
 8008a92:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a94:	2300      	movs	r3, #0
 8008a96:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M4_E1_GPIO_Port, &GPIO_InitStruct);
 8008a9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4841      	ldr	r0, [pc, #260]	@ (8008ba8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8008aa4:	f001 f9e0 	bl	8009e68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M4_E2_Pin;
 8008aa8:	2308      	movs	r3, #8
 8008aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aac:	2302      	movs	r3, #2
 8008aae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M4_E2_GPIO_Port, &GPIO_InitStruct);
 8008abc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	483a      	ldr	r0, [pc, #232]	@ (8008bac <HAL_TIM_Encoder_MspInit+0x200>)
 8008ac4:	f001 f9d0 	bl	8009e68 <HAL_GPIO_Init>
}
 8008ac8:	e063      	b.n	8008b92 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM3)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a38      	ldr	r2, [pc, #224]	@ (8008bb0 <HAL_TIM_Encoder_MspInit+0x204>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d12c      	bne.n	8008b2e <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	4b31      	ldr	r3, [pc, #196]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008adc:	4a30      	ldr	r2, [pc, #192]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008ade:	f043 0302 	orr.w	r3, r3, #2
 8008ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8008ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	617b      	str	r3, [r7, #20]
 8008aee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008af0:	2300      	movs	r3, #0
 8008af2:	613b      	str	r3, [r7, #16]
 8008af4:	4b2a      	ldr	r3, [pc, #168]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af8:	4a29      	ldr	r2, [pc, #164]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008afa:	f043 0301 	orr.w	r3, r3, #1
 8008afe:	6313      	str	r3, [r2, #48]	@ 0x30
 8008b00:	4b27      	ldr	r3, [pc, #156]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	613b      	str	r3, [r7, #16]
 8008b0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_E1_Pin|M3_E2_Pin;
 8008b0c:	23c0      	movs	r3, #192	@ 0xc0
 8008b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b10:	2302      	movs	r3, #2
 8008b12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b14:	2300      	movs	r3, #0
 8008b16:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008b24:	4619      	mov	r1, r3
 8008b26:	4820      	ldr	r0, [pc, #128]	@ (8008ba8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8008b28:	f001 f99e 	bl	8009e68 <HAL_GPIO_Init>
}
 8008b2c:	e031      	b.n	8008b92 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM4)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a20      	ldr	r2, [pc, #128]	@ (8008bb4 <HAL_TIM_Encoder_MspInit+0x208>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d12c      	bne.n	8008b92 <HAL_TIM_Encoder_MspInit+0x1e6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008b38:	2300      	movs	r3, #0
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	4b18      	ldr	r3, [pc, #96]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b40:	4a17      	ldr	r2, [pc, #92]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008b42:	f043 0304 	orr.w	r3, r3, #4
 8008b46:	6413      	str	r3, [r2, #64]	@ 0x40
 8008b48:	4b15      	ldr	r3, [pc, #84]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b4c:	f003 0304 	and.w	r3, r3, #4
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008b54:	2300      	movs	r3, #0
 8008b56:	60bb      	str	r3, [r7, #8]
 8008b58:	4b11      	ldr	r3, [pc, #68]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b5c:	4a10      	ldr	r2, [pc, #64]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008b5e:	f043 0308 	orr.w	r3, r3, #8
 8008b62:	6313      	str	r3, [r2, #48]	@ 0x30
 8008b64:	4b0e      	ldr	r3, [pc, #56]	@ (8008ba0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8008b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b68:	f003 0308 	and.w	r3, r3, #8
 8008b6c:	60bb      	str	r3, [r7, #8]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M2_E1_Pin|M2_E2_Pin;
 8008b70:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8008b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b76:	2302      	movs	r3, #2
 8008b78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008b82:	2302      	movs	r3, #2
 8008b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008b86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	480a      	ldr	r0, [pc, #40]	@ (8008bb8 <HAL_TIM_Encoder_MspInit+0x20c>)
 8008b8e:	f001 f96b 	bl	8009e68 <HAL_GPIO_Init>
}
 8008b92:	bf00      	nop
 8008b94:	3740      	adds	r7, #64	@ 0x40
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	40010000 	.word	0x40010000
 8008ba0:	40023800 	.word	0x40023800
 8008ba4:	40021000 	.word	0x40021000
 8008ba8:	40020000 	.word	0x40020000
 8008bac:	40020400 	.word	0x40020400
 8008bb0:	40000400 	.word	0x40000400
 8008bb4:	40000800 	.word	0x40000800
 8008bb8:	40020c00 	.word	0x40020c00

08008bbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b089      	sub	sp, #36	@ 0x24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a33      	ldr	r2, [pc, #204]	@ (8008c98 <HAL_TIM_Base_MspInit+0xdc>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d10e      	bne.n	8008bec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008bce:	2300      	movs	r3, #0
 8008bd0:	61fb      	str	r3, [r7, #28]
 8008bd2:	4b32      	ldr	r3, [pc, #200]	@ (8008c9c <HAL_TIM_Base_MspInit+0xe0>)
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd6:	4a31      	ldr	r2, [pc, #196]	@ (8008c9c <HAL_TIM_Base_MspInit+0xe0>)
 8008bd8:	f043 0308 	orr.w	r3, r3, #8
 8008bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8008bde:	4b2f      	ldr	r3, [pc, #188]	@ (8008c9c <HAL_TIM_Base_MspInit+0xe0>)
 8008be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be2:	f003 0308 	and.w	r3, r3, #8
 8008be6:	61fb      	str	r3, [r7, #28]
 8008be8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8008bea:	e04e      	b.n	8008c8a <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM6)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8008ca0 <HAL_TIM_Base_MspInit+0xe4>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d10e      	bne.n	8008c14 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	61bb      	str	r3, [r7, #24]
 8008bfa:	4b28      	ldr	r3, [pc, #160]	@ (8008c9c <HAL_TIM_Base_MspInit+0xe0>)
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfe:	4a27      	ldr	r2, [pc, #156]	@ (8008c9c <HAL_TIM_Base_MspInit+0xe0>)
 8008c00:	f043 0310 	orr.w	r3, r3, #16
 8008c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8008c06:	4b25      	ldr	r3, [pc, #148]	@ (8008c9c <HAL_TIM_Base_MspInit+0xe0>)
 8008c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0a:	f003 0310 	and.w	r3, r3, #16
 8008c0e:	61bb      	str	r3, [r7, #24]
 8008c10:	69bb      	ldr	r3, [r7, #24]
}
 8008c12:	e03a      	b.n	8008c8a <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM8)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a22      	ldr	r2, [pc, #136]	@ (8008ca4 <HAL_TIM_Base_MspInit+0xe8>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d10e      	bne.n	8008c3c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008c1e:	2300      	movs	r3, #0
 8008c20:	617b      	str	r3, [r7, #20]
 8008c22:	4b1e      	ldr	r3, [pc, #120]	@ (8008c9c <HAL_TIM_Base_MspInit+0xe0>)
 8008c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c26:	4a1d      	ldr	r2, [pc, #116]	@ (8008c9c <HAL_TIM_Base_MspInit+0xe0>)
 8008c28:	f043 0302 	orr.w	r3, r3, #2
 8008c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8008c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8008c9c <HAL_TIM_Base_MspInit+0xe0>)
 8008c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c32:	f003 0302 	and.w	r3, r3, #2
 8008c36:	617b      	str	r3, [r7, #20]
 8008c38:	697b      	ldr	r3, [r7, #20]
}
 8008c3a:	e026      	b.n	8008c8a <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM9)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a19      	ldr	r2, [pc, #100]	@ (8008ca8 <HAL_TIM_Base_MspInit+0xec>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d10e      	bne.n	8008c64 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8008c46:	2300      	movs	r3, #0
 8008c48:	613b      	str	r3, [r7, #16]
 8008c4a:	4b14      	ldr	r3, [pc, #80]	@ (8008c9c <HAL_TIM_Base_MspInit+0xe0>)
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c4e:	4a13      	ldr	r2, [pc, #76]	@ (8008c9c <HAL_TIM_Base_MspInit+0xe0>)
 8008c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8008c56:	4b11      	ldr	r3, [pc, #68]	@ (8008c9c <HAL_TIM_Base_MspInit+0xe0>)
 8008c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c5e:	613b      	str	r3, [r7, #16]
 8008c60:	693b      	ldr	r3, [r7, #16]
}
 8008c62:	e012      	b.n	8008c8a <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM10)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a10      	ldr	r2, [pc, #64]	@ (8008cac <HAL_TIM_Base_MspInit+0xf0>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d10d      	bne.n	8008c8a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60fb      	str	r3, [r7, #12]
 8008c72:	4b0a      	ldr	r3, [pc, #40]	@ (8008c9c <HAL_TIM_Base_MspInit+0xe0>)
 8008c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c76:	4a09      	ldr	r2, [pc, #36]	@ (8008c9c <HAL_TIM_Base_MspInit+0xe0>)
 8008c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8008c7e:	4b07      	ldr	r3, [pc, #28]	@ (8008c9c <HAL_TIM_Base_MspInit+0xe0>)
 8008c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	68fb      	ldr	r3, [r7, #12]
}
 8008c8a:	bf00      	nop
 8008c8c:	3724      	adds	r7, #36	@ 0x24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	40000c00 	.word	0x40000c00
 8008c9c:	40023800 	.word	0x40023800
 8008ca0:	40001000 	.word	0x40001000
 8008ca4:	40010400 	.word	0x40010400
 8008ca8:	40014000 	.word	0x40014000
 8008cac:	40014400 	.word	0x40014400

08008cb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b08c      	sub	sp, #48	@ 0x30
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cb8:	f107 031c 	add.w	r3, r7, #28
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	605a      	str	r2, [r3, #4]
 8008cc2:	609a      	str	r2, [r3, #8]
 8008cc4:	60da      	str	r2, [r3, #12]
 8008cc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a48      	ldr	r2, [pc, #288]	@ (8008df0 <HAL_TIM_MspPostInit+0x140>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d11e      	bne.n	8008d10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	61bb      	str	r3, [r7, #24]
 8008cd6:	4b47      	ldr	r3, [pc, #284]	@ (8008df4 <HAL_TIM_MspPostInit+0x144>)
 8008cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cda:	4a46      	ldr	r2, [pc, #280]	@ (8008df4 <HAL_TIM_MspPostInit+0x144>)
 8008cdc:	f043 0301 	orr.w	r3, r3, #1
 8008ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008ce2:	4b44      	ldr	r3, [pc, #272]	@ (8008df4 <HAL_TIM_MspPostInit+0x144>)
 8008ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	61bb      	str	r3, [r7, #24]
 8008cec:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin|M4_PWM_Pin;
 8008cee:	230f      	movs	r3, #15
 8008cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008cfe:	2302      	movs	r3, #2
 8008d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d02:	f107 031c 	add.w	r3, r7, #28
 8008d06:	4619      	mov	r1, r3
 8008d08:	483b      	ldr	r0, [pc, #236]	@ (8008df8 <HAL_TIM_MspPostInit+0x148>)
 8008d0a:	f001 f8ad 	bl	8009e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8008d0e:	e06a      	b.n	8008de6 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM8)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a39      	ldr	r2, [pc, #228]	@ (8008dfc <HAL_TIM_MspPostInit+0x14c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d11e      	bne.n	8008d58 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	617b      	str	r3, [r7, #20]
 8008d1e:	4b35      	ldr	r3, [pc, #212]	@ (8008df4 <HAL_TIM_MspPostInit+0x144>)
 8008d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d22:	4a34      	ldr	r2, [pc, #208]	@ (8008df4 <HAL_TIM_MspPostInit+0x144>)
 8008d24:	f043 0304 	orr.w	r3, r3, #4
 8008d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d2a:	4b32      	ldr	r3, [pc, #200]	@ (8008df4 <HAL_TIM_MspPostInit+0x144>)
 8008d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d2e:	f003 0304 	and.w	r3, r3, #4
 8008d32:	617b      	str	r3, [r7, #20]
 8008d34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Servo_1_Pin|Servo_2_Pin;
 8008d36:	23c0      	movs	r3, #192	@ 0xc0
 8008d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d42:	2300      	movs	r3, #0
 8008d44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8008d46:	2303      	movs	r3, #3
 8008d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d4a:	f107 031c 	add.w	r3, r7, #28
 8008d4e:	4619      	mov	r1, r3
 8008d50:	482b      	ldr	r0, [pc, #172]	@ (8008e00 <HAL_TIM_MspPostInit+0x150>)
 8008d52:	f001 f889 	bl	8009e68 <HAL_GPIO_Init>
}
 8008d56:	e046      	b.n	8008de6 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM9)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a29      	ldr	r2, [pc, #164]	@ (8008e04 <HAL_TIM_MspPostInit+0x154>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d11e      	bne.n	8008da0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008d62:	2300      	movs	r3, #0
 8008d64:	613b      	str	r3, [r7, #16]
 8008d66:	4b23      	ldr	r3, [pc, #140]	@ (8008df4 <HAL_TIM_MspPostInit+0x144>)
 8008d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6a:	4a22      	ldr	r2, [pc, #136]	@ (8008df4 <HAL_TIM_MspPostInit+0x144>)
 8008d6c:	f043 0310 	orr.w	r3, r3, #16
 8008d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d72:	4b20      	ldr	r3, [pc, #128]	@ (8008df4 <HAL_TIM_MspPostInit+0x144>)
 8008d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d76:	f003 0310 	and.w	r3, r3, #16
 8008d7a:	613b      	str	r3, [r7, #16]
 8008d7c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo_3_Pin|Servo_4_Pin;
 8008d7e:	2360      	movs	r3, #96	@ 0x60
 8008d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d82:	2302      	movs	r3, #2
 8008d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008d92:	f107 031c 	add.w	r3, r7, #28
 8008d96:	4619      	mov	r1, r3
 8008d98:	481b      	ldr	r0, [pc, #108]	@ (8008e08 <HAL_TIM_MspPostInit+0x158>)
 8008d9a:	f001 f865 	bl	8009e68 <HAL_GPIO_Init>
}
 8008d9e:	e022      	b.n	8008de6 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM10)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a19      	ldr	r2, [pc, #100]	@ (8008e0c <HAL_TIM_MspPostInit+0x15c>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d11d      	bne.n	8008de6 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]
 8008dae:	4b11      	ldr	r3, [pc, #68]	@ (8008df4 <HAL_TIM_MspPostInit+0x144>)
 8008db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db2:	4a10      	ldr	r2, [pc, #64]	@ (8008df4 <HAL_TIM_MspPostInit+0x144>)
 8008db4:	f043 0320 	orr.w	r3, r3, #32
 8008db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008dba:	4b0e      	ldr	r3, [pc, #56]	@ (8008df4 <HAL_TIM_MspPostInit+0x144>)
 8008dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dbe:	f003 0320 	and.w	r3, r3, #32
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_5_Pin;
 8008dc6:	2340      	movs	r3, #64	@ 0x40
 8008dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dca:	2302      	movs	r3, #2
 8008dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Servo_5_GPIO_Port, &GPIO_InitStruct);
 8008dda:	f107 031c 	add.w	r3, r7, #28
 8008dde:	4619      	mov	r1, r3
 8008de0:	480b      	ldr	r0, [pc, #44]	@ (8008e10 <HAL_TIM_MspPostInit+0x160>)
 8008de2:	f001 f841 	bl	8009e68 <HAL_GPIO_Init>
}
 8008de6:	bf00      	nop
 8008de8:	3730      	adds	r7, #48	@ 0x30
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	40000c00 	.word	0x40000c00
 8008df4:	40023800 	.word	0x40023800
 8008df8:	40020000 	.word	0x40020000
 8008dfc:	40010400 	.word	0x40010400
 8008e00:	40020800 	.word	0x40020800
 8008e04:	40014000 	.word	0x40014000
 8008e08:	40021000 	.word	0x40021000
 8008e0c:	40014400 	.word	0x40014400
 8008e10:	40021400 	.word	0x40021400

08008e14 <get_us_timestamp>:
// 距离滤波缓冲区
static float distance_buffer[MAX_ULTRASONIC_SENSORS][FILTER_SAMPLES] = {0};
static uint8_t buffer_index[MAX_ULTRASONIC_SENSORS] = {0};

// 获取微秒级时间戳
static uint32_t get_us_timestamp(void) {
 8008e14:	b590      	push	{r4, r7, lr}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
    // 使用SysTick计数器获取微秒级时间戳
    uint32_t ticks = SysTick->VAL;
 8008e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008e48 <get_us_timestamp+0x34>)
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	60fb      	str	r3, [r7, #12]
    uint32_t ticks_per_us = SYSCLK_FREQ / 1000000;
 8008e20:	23a8      	movs	r3, #168	@ 0xa8
 8008e22:	60bb      	str	r3, [r7, #8]
    uint32_t us = (ticks / ticks_per_us) + (HAL_GetTick() * 1000);
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	fbb2 f4f3 	udiv	r4, r2, r3
 8008e2c:	f000 fe48 	bl	8009ac0 <HAL_GetTick>
 8008e30:	4603      	mov	r3, r0
 8008e32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008e36:	fb02 f303 	mul.w	r3, r2, r3
 8008e3a:	4423      	add	r3, r4
 8008e3c:	607b      	str	r3, [r7, #4]
    return us;
 8008e3e:	687b      	ldr	r3, [r7, #4]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd90      	pop	{r4, r7, pc}
 8008e48:	e000e010 	.word	0xe000e010

08008e4c <HAL_GPIO_EXTI_Callback>:
            break;
    }
}

// Echo中断回调
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b090      	sub	sp, #64	@ 0x40
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4603      	mov	r3, r0
 8008e54:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < sensor_count; i++) {
 8008e56:	2300      	movs	r3, #0
 8008e58:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008e5c:	e0ee      	b.n	800903c <HAL_GPIO_EXTI_Callback+0x1f0>
        UltrasonicSensor* s = active_sensors[i];
 8008e5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008e62:	4a7c      	ldr	r2, [pc, #496]	@ (8009054 <HAL_GPIO_EXTI_Callback+0x208>)
 8008e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        
        if (GPIO_Pin == s->echo_pin) {
 8008e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6c:	899b      	ldrh	r3, [r3, #12]
 8008e6e:	88fa      	ldrh	r2, [r7, #6]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	f040 80de 	bne.w	8009032 <HAL_GPIO_EXTI_Callback+0x1e6>
            if (HAL_GPIO_ReadPin(s->echo_port, s->echo_pin)) {
 8008e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7c:	899b      	ldrh	r3, [r3, #12]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	4610      	mov	r0, r2
 8008e82:	f001 f98d 	bl	800a1a0 <HAL_GPIO_ReadPin>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d005      	beq.n	8008e98 <HAL_GPIO_EXTI_Callback+0x4c>
                // 上升沿，记录开始时间（微秒级）
                s->pulse_start = get_us_timestamp();
 8008e8c:	f7ff ffc2 	bl	8008e14 <get_us_timestamp>
 8008e90:	4602      	mov	r2, r0
 8008e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e94:	615a      	str	r2, [r3, #20]
 8008e96:	e0cc      	b.n	8009032 <HAL_GPIO_EXTI_Callback+0x1e6>
            } else {
                // 下降沿，计算时间（微秒级）
                uint32_t end_time = get_us_timestamp();
 8008e98:	f7ff ffbc 	bl	8008e14 <get_us_timestamp>
 8008e9c:	62b8      	str	r0, [r7, #40]	@ 0x28
                uint32_t duration_us = end_time - s->pulse_start;
 8008e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	627b      	str	r3, [r7, #36]	@ 0x24
                
                // 计算距离（厘米）：声速340m/s = 0.034cm/μs
                float raw_distance = (duration_us * 0.034f) / 2.0f;
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eaa:	ee07 3a90 	vmov	s15, r3
 8008eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb2:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8009058 <HAL_GPIO_EXTI_Callback+0x20c>
 8008eb6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008eba:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8008ebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008ec2:	edc7 7a08 	vstr	s15, [r7, #32]
                
                // 检查距离是否在有效范围内
                if (raw_distance >= MIN_VALID_DISTANCE && raw_distance <= MAX_VALID_DISTANCE) {
 8008ec6:	edd7 7a08 	vldr	s15, [r7, #32]
 8008eca:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8008ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed6:	f2c0 8091 	blt.w	8008ffc <HAL_GPIO_EXTI_Callback+0x1b0>
 8008eda:	edd7 7a08 	vldr	s15, [r7, #32]
 8008ede:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800905c <HAL_GPIO_EXTI_Callback+0x210>
 8008ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eea:	f200 8087 	bhi.w	8008ffc <HAL_GPIO_EXTI_Callback+0x1b0>
                    // 更新滤波缓冲区
                    distance_buffer[i][buffer_index[i]] = raw_distance;
 8008eee:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008ef2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008ef6:	495a      	ldr	r1, [pc, #360]	@ (8009060 <HAL_GPIO_EXTI_Callback+0x214>)
 8008ef8:	5ccb      	ldrb	r3, [r1, r3]
 8008efa:	4618      	mov	r0, r3
 8008efc:	4959      	ldr	r1, [pc, #356]	@ (8009064 <HAL_GPIO_EXTI_Callback+0x218>)
 8008efe:	4613      	mov	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	4403      	add	r3, r0
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	440b      	add	r3, r1
 8008f0a:	6a3a      	ldr	r2, [r7, #32]
 8008f0c:	601a      	str	r2, [r3, #0]
                    buffer_index[i] = (buffer_index[i] + 1) % FILTER_SAMPLES;
 8008f0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008f12:	4a53      	ldr	r2, [pc, #332]	@ (8009060 <HAL_GPIO_EXTI_Callback+0x214>)
 8008f14:	5cd3      	ldrb	r3, [r2, r3]
 8008f16:	1c5a      	adds	r2, r3, #1
 8008f18:	4b53      	ldr	r3, [pc, #332]	@ (8009068 <HAL_GPIO_EXTI_Callback+0x21c>)
 8008f1a:	fb83 1302 	smull	r1, r3, r3, r2
 8008f1e:	1059      	asrs	r1, r3, #1
 8008f20:	17d3      	asrs	r3, r2, #31
 8008f22:	1ac9      	subs	r1, r1, r3
 8008f24:	460b      	mov	r3, r1
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	440b      	add	r3, r1
 8008f2a:	1ad1      	subs	r1, r2, r3
 8008f2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008f30:	b2c9      	uxtb	r1, r1
 8008f32:	4a4b      	ldr	r2, [pc, #300]	@ (8009060 <HAL_GPIO_EXTI_Callback+0x214>)
 8008f34:	54d1      	strb	r1, [r2, r3]
                    
                    // 计算中值滤波
                    float temp_buffer[FILTER_SAMPLES];
                    for (int j = 0; j < FILTER_SAMPLES; j++) {
 8008f36:	2300      	movs	r3, #0
 8008f38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f3a:	e013      	b.n	8008f64 <HAL_GPIO_EXTI_Callback+0x118>
                        temp_buffer[j] = distance_buffer[i][j];
 8008f3c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008f40:	4948      	ldr	r1, [pc, #288]	@ (8009064 <HAL_GPIO_EXTI_Callback+0x218>)
 8008f42:	4613      	mov	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f4a:	4413      	add	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	440b      	add	r3, r1
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	3340      	adds	r3, #64	@ 0x40
 8008f58:	443b      	add	r3, r7
 8008f5a:	3b38      	subs	r3, #56	@ 0x38
 8008f5c:	601a      	str	r2, [r3, #0]
                    for (int j = 0; j < FILTER_SAMPLES; j++) {
 8008f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f60:	3301      	adds	r3, #1
 8008f62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f66:	2b04      	cmp	r3, #4
 8008f68:	dde8      	ble.n	8008f3c <HAL_GPIO_EXTI_Callback+0xf0>
                    }
                    
                    // 简单冒泡排序
                    for (int j = 0; j < FILTER_SAMPLES - 1; j++) {
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f6e:	e03e      	b.n	8008fee <HAL_GPIO_EXTI_Callback+0x1a2>
                        for (int k = 0; k < FILTER_SAMPLES - j - 1; k++) {
 8008f70:	2300      	movs	r3, #0
 8008f72:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f74:	e032      	b.n	8008fdc <HAL_GPIO_EXTI_Callback+0x190>
                            if (temp_buffer[k] > temp_buffer[k + 1]) {
 8008f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	3340      	adds	r3, #64	@ 0x40
 8008f7c:	443b      	add	r3, r7
 8008f7e:	3b38      	subs	r3, #56	@ 0x38
 8008f80:	ed93 7a00 	vldr	s14, [r3]
 8008f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f86:	3301      	adds	r3, #1
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	3340      	adds	r3, #64	@ 0x40
 8008f8c:	443b      	add	r3, r7
 8008f8e:	3b38      	subs	r3, #56	@ 0x38
 8008f90:	edd3 7a00 	vldr	s15, [r3]
 8008f94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f9c:	dd1b      	ble.n	8008fd6 <HAL_GPIO_EXTI_Callback+0x18a>
                                float temp = temp_buffer[k];
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	3340      	adds	r3, #64	@ 0x40
 8008fa4:	443b      	add	r3, r7
 8008fa6:	3b38      	subs	r3, #56	@ 0x38
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	61fb      	str	r3, [r7, #28]
                                temp_buffer[k] = temp_buffer[k + 1];
 8008fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fae:	3301      	adds	r3, #1
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	3340      	adds	r3, #64	@ 0x40
 8008fb4:	443b      	add	r3, r7
 8008fb6:	3b38      	subs	r3, #56	@ 0x38
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	3340      	adds	r3, #64	@ 0x40
 8008fc0:	443b      	add	r3, r7
 8008fc2:	3b38      	subs	r3, #56	@ 0x38
 8008fc4:	601a      	str	r2, [r3, #0]
                                temp_buffer[k + 1] = temp;
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc8:	3301      	adds	r3, #1
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	3340      	adds	r3, #64	@ 0x40
 8008fce:	443b      	add	r3, r7
 8008fd0:	3b38      	subs	r3, #56	@ 0x38
 8008fd2:	69fa      	ldr	r2, [r7, #28]
 8008fd4:	601a      	str	r2, [r3, #0]
                        for (int k = 0; k < FILTER_SAMPLES - j - 1; k++) {
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	3301      	adds	r3, #1
 8008fda:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fde:	f1c3 0304 	rsb	r3, r3, #4
 8008fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	dbc6      	blt.n	8008f76 <HAL_GPIO_EXTI_Callback+0x12a>
                    for (int j = 0; j < FILTER_SAMPLES - 1; j++) {
 8008fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fea:	3301      	adds	r3, #1
 8008fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	ddbd      	ble.n	8008f70 <HAL_GPIO_EXTI_Callback+0x124>
                            }
                        }
                    }
                    
                    // 取中值
                    s->distance = temp_buffer[FILTER_SAMPLES / 2];
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff8:	619a      	str	r2, [r3, #24]
                if (raw_distance >= MIN_VALID_DISTANCE && raw_distance <= MAX_VALID_DISTANCE) {
 8008ffa:	e017      	b.n	800902c <HAL_GPIO_EXTI_Callback+0x1e0>
                } else {
                    // 距离无效，保持上一次的有效值
                    // 如果所有值都无效，则设为0
                    if (s->distance < MIN_VALID_DISTANCE || s->distance > MAX_VALID_DISTANCE) {
 8008ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ffe:	edd3 7a06 	vldr	s15, [r3, #24]
 8009002:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8009006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800900a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800900e:	d409      	bmi.n	8009024 <HAL_GPIO_EXTI_Callback+0x1d8>
 8009010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009012:	edd3 7a06 	vldr	s15, [r3, #24]
 8009016:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800905c <HAL_GPIO_EXTI_Callback+0x210>
 800901a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800901e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009022:	dd03      	ble.n	800902c <HAL_GPIO_EXTI_Callback+0x1e0>
                        s->distance = 0.0f;
 8009024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009026:	f04f 0200 	mov.w	r2, #0
 800902a:	619a      	str	r2, [r3, #24]
                    }
                }
                
                s->data_ready = 1;
 800902c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800902e:	2201      	movs	r2, #1
 8009030:	771a      	strb	r2, [r3, #28]
    for (uint8_t i = 0; i < sensor_count; i++) {
 8009032:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009036:	3301      	adds	r3, #1
 8009038:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800903c:	4b0b      	ldr	r3, [pc, #44]	@ (800906c <HAL_GPIO_EXTI_Callback+0x220>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009044:	429a      	cmp	r2, r3
 8009046:	f4ff af0a 	bcc.w	8008e5e <HAL_GPIO_EXTI_Callback+0x12>
            }
        }
    }
}
 800904a:	bf00      	nop
 800904c:	bf00      	nop
 800904e:	3740      	adds	r7, #64	@ 0x40
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	200007cc 	.word	0x200007cc
 8009058:	3d0b4396 	.word	0x3d0b4396
 800905c:	43c80000 	.word	0x43c80000
 8009060:	20000848 	.word	0x20000848
 8009064:	200007e4 	.word	0x200007e4
 8009068:	66666667 	.word	0x66666667
 800906c:	200007e0 	.word	0x200007e0

08009070 <US100_Init>:
#define US100_TIMEOUT_MS 300  // 增加超时时间到300ms

// 静态变量用于存储上次有效的距离值
static float last_valid_distances[MAX_US100_SENSORS] = {0};

void US100_Init(US100Sensor* sensor, UART_HandleTypeDef* uart) {
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
    if (us100_sensor_count >= MAX_US100_SENSORS) return;
 800907a:	4b1c      	ldr	r3, [pc, #112]	@ (80090ec <US100_Init+0x7c>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b04      	cmp	r3, #4
 8009080:	d82d      	bhi.n	80090de <US100_Init+0x6e>
    
    // 保存串口句柄
    sensor->uart = uart;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	601a      	str	r2, [r3, #0]
    
    // 初始化状态
    sensor->state = US100_STATE_IDLE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	711a      	strb	r2, [r3, #4]
    sensor->data_ready = 0;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	749a      	strb	r2, [r3, #18]
    sensor->distance = 0.0f;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	821a      	strh	r2, [r3, #16]
    sensor->rx_index = 0;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	739a      	strb	r2, [r3, #14]
    
    // 添加到活动传感器数组
    active_sensors[us100_sensor_count++] = sensor;
 80090a0:	4b12      	ldr	r3, [pc, #72]	@ (80090ec <US100_Init+0x7c>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	b2d1      	uxtb	r1, r2
 80090a8:	4a10      	ldr	r2, [pc, #64]	@ (80090ec <US100_Init+0x7c>)
 80090aa:	7011      	strb	r1, [r2, #0]
 80090ac:	4619      	mov	r1, r3
 80090ae:	4a10      	ldr	r2, [pc, #64]	@ (80090f0 <US100_Init+0x80>)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    // 确保串口已初始化
    if (HAL_UART_GetState(uart) != HAL_UART_STATE_READY) {
 80090b6:	6838      	ldr	r0, [r7, #0]
 80090b8:	f004 faec 	bl	800d694 <HAL_UART_GetState>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b20      	cmp	r3, #32
 80090c0:	d005      	beq.n	80090ce <US100_Init+0x5e>
        if (HAL_UART_Init(uart) != HAL_OK) {
 80090c2:	6838      	ldr	r0, [r7, #0]
 80090c4:	f003 ff34 	bl	800cf30 <HAL_UART_Init>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d109      	bne.n	80090e2 <US100_Init+0x72>
            return;
        }
    }
    
    // 启动串口接收
    HAL_UART_Receive_IT(uart, &sensor->rx_buffer[0], 1);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	330c      	adds	r3, #12
 80090d2:	2201      	movs	r2, #1
 80090d4:	4619      	mov	r1, r3
 80090d6:	6838      	ldr	r0, [r7, #0]
 80090d8:	f004 f805 	bl	800d0e6 <HAL_UART_Receive_IT>
 80090dc:	e002      	b.n	80090e4 <US100_Init+0x74>
    if (us100_sensor_count >= MAX_US100_SENSORS) return;
 80090de:	bf00      	nop
 80090e0:	e000      	b.n	80090e4 <US100_Init+0x74>
            return;
 80090e2:	bf00      	nop
}
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	20000864 	.word	0x20000864
 80090f0:	20000850 	.word	0x20000850

080090f4 <US100_StartMeasurement>:

void US100_StartMeasurement(US100Sensor* sensor) {
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
    if (sensor->state != US100_STATE_IDLE) {
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	791b      	ldrb	r3, [r3, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00d      	beq.n	8009120 <US100_StartMeasurement+0x2c>
        sensor->state = US100_STATE_IDLE;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	711a      	strb	r2, [r3, #4]
        sensor->rx_index = 0;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	739a      	strb	r2, [r3, #14]
        HAL_UART_Receive_IT(sensor->uart, &sensor->rx_buffer[0], 1);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6818      	ldr	r0, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	330c      	adds	r3, #12
 8009118:	2201      	movs	r2, #1
 800911a:	4619      	mov	r1, r3
 800911c:	f003 ffe3 	bl	800d0e6 <HAL_UART_Receive_IT>
    }
    
    // 开始新的测量
    sensor->state = US100_STATE_SENDING;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	711a      	strb	r2, [r3, #4]
    sensor->timestamp = HAL_GetTick();
 8009126:	f000 fccb 	bl	8009ac0 <HAL_GetTick>
 800912a:	4602      	mov	r2, r0
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	609a      	str	r2, [r3, #8]
    
    // 发送读取距离命令
    uint8_t cmd = US100_CMD_READ_DISTANCE;
 8009130:	2355      	movs	r3, #85	@ 0x55
 8009132:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(sensor->uart, &cmd, 1, 100);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6818      	ldr	r0, [r3, #0]
 8009138:	f107 010f 	add.w	r1, r7, #15
 800913c:	2364      	movs	r3, #100	@ 0x64
 800913e:	2201      	movs	r2, #1
 8009140:	f003 ff46 	bl	800cfd0 <HAL_UART_Transmit>
}
 8009144:	bf00      	nop
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <US100_Update>:

void US100_Update(US100Sensor* sensor) {
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8009154:	f000 fcb4 	bl	8009ac0 <HAL_GetTick>
 8009158:	60f8      	str	r0, [r7, #12]
    
    switch (sensor->state) {
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	791b      	ldrb	r3, [r3, #4]
 800915e:	2b03      	cmp	r3, #3
 8009160:	d029      	beq.n	80091b6 <US100_Update+0x6a>
 8009162:	2b03      	cmp	r3, #3
 8009164:	dc6b      	bgt.n	800923e <US100_Update+0xf2>
 8009166:	2b01      	cmp	r3, #1
 8009168:	d002      	beq.n	8009170 <US100_Update+0x24>
 800916a:	2b02      	cmp	r3, #2
 800916c:	d00d      	beq.n	800918a <US100_Update+0x3e>
                sensor->state = US100_STATE_IDLE;
            }
            break;
            
        default:
            break;
 800916e:	e066      	b.n	800923e <US100_Update+0xf2>
            if ((now - sensor->timestamp) >= 10) {
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	2b09      	cmp	r3, #9
 800917a:	d962      	bls.n	8009242 <US100_Update+0xf6>
                sensor->state = US100_STATE_WAITING;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2202      	movs	r2, #2
 8009180:	711a      	strb	r2, [r3, #4]
                sensor->timestamp = now;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	609a      	str	r2, [r3, #8]
            break;
 8009188:	e05b      	b.n	8009242 <US100_Update+0xf6>
            if ((now - sensor->timestamp) >= US100_TIMEOUT_MS) {
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8009196:	d356      	bcc.n	8009246 <US100_Update+0xfa>
                sensor->state = US100_STATE_IDLE;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	711a      	strb	r2, [r3, #4]
                sensor->rx_index = 0;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	739a      	strb	r2, [r3, #14]
                HAL_UART_Receive_IT(sensor->uart, &sensor->rx_buffer[0], 1);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6818      	ldr	r0, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	330c      	adds	r3, #12
 80091ac:	2201      	movs	r2, #1
 80091ae:	4619      	mov	r1, r3
 80091b0:	f003 ff99 	bl	800d0e6 <HAL_UART_Receive_IT>
            break;
 80091b4:	e047      	b.n	8009246 <US100_Update+0xfa>
            if (sensor->rx_index >= 2) {
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	7b9b      	ldrb	r3, [r3, #14]
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d945      	bls.n	800924a <US100_Update+0xfe>
                if (sensor->rx_buffer[0] == 0xFF && sensor->rx_buffer[1] == 0xFF) {
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	7b1b      	ldrb	r3, [r3, #12]
 80091c2:	2bff      	cmp	r3, #255	@ 0xff
 80091c4:	d112      	bne.n	80091ec <US100_Update+0xa0>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7b5b      	ldrb	r3, [r3, #13]
 80091ca:	2bff      	cmp	r3, #255	@ 0xff
 80091cc:	d10e      	bne.n	80091ec <US100_Update+0xa0>
                    sensor->state = US100_STATE_IDLE;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	711a      	strb	r2, [r3, #4]
                    sensor->rx_index = 0;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	739a      	strb	r2, [r3, #14]
                    HAL_UART_Receive_IT(sensor->uart, &sensor->rx_buffer[0], 1);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	330c      	adds	r3, #12
 80091e2:	2201      	movs	r2, #1
 80091e4:	4619      	mov	r1, r3
 80091e6:	f003 ff7e 	bl	800d0e6 <HAL_UART_Receive_IT>
                    return;
 80091ea:	e02f      	b.n	800924c <US100_Update+0x100>
                uint16_t raw_distance = (sensor->rx_buffer[1] << 8) | sensor->rx_buffer[0];
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	7b5b      	ldrb	r3, [r3, #13]
 80091f0:	b21b      	sxth	r3, r3
 80091f2:	021b      	lsls	r3, r3, #8
 80091f4:	b21a      	sxth	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	7b1b      	ldrb	r3, [r3, #12]
 80091fa:	b21b      	sxth	r3, r3
 80091fc:	4313      	orrs	r3, r2
 80091fe:	b21b      	sxth	r3, r3
 8009200:	817b      	strh	r3, [r7, #10]
                if (raw_distance > 40000) {
 8009202:	897b      	ldrh	r3, [r7, #10]
 8009204:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8009208:	4293      	cmp	r3, r2
 800920a:	d90e      	bls.n	800922a <US100_Update+0xde>
                    sensor->state = US100_STATE_IDLE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	711a      	strb	r2, [r3, #4]
                    sensor->rx_index = 0;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	739a      	strb	r2, [r3, #14]
                    HAL_UART_Receive_IT(sensor->uart, &sensor->rx_buffer[0], 1);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6818      	ldr	r0, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	330c      	adds	r3, #12
 8009220:	2201      	movs	r2, #1
 8009222:	4619      	mov	r1, r3
 8009224:	f003 ff5f 	bl	800d0e6 <HAL_UART_Receive_IT>
                    return;
 8009228:	e010      	b.n	800924c <US100_Update+0x100>
                sensor->distance = raw_distance;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	897a      	ldrh	r2, [r7, #10]
 800922e:	821a      	strh	r2, [r3, #16]
                sensor->data_ready = 1;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	749a      	strb	r2, [r3, #18]
                sensor->state = US100_STATE_IDLE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	711a      	strb	r2, [r3, #4]
            break;
 800923c:	e005      	b.n	800924a <US100_Update+0xfe>
            break;
 800923e:	bf00      	nop
 8009240:	e004      	b.n	800924c <US100_Update+0x100>
            break;
 8009242:	bf00      	nop
 8009244:	e002      	b.n	800924c <US100_Update+0x100>
            break;
 8009246:	bf00      	nop
 8009248:	e000      	b.n	800924c <US100_Update+0x100>
            break;
 800924a:	bf00      	nop
    }
}
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
	...

08009254 <US100_UART_RxCpltCallback>:

void US100_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800925c:	2300      	movs	r3, #0
 800925e:	73fb      	strb	r3, [r7, #15]
 8009260:	e026      	b.n	80092b0 <US100_UART_RxCpltCallback+0x5c>
        US100Sensor* s = active_sensors[i];
 8009262:	7bfb      	ldrb	r3, [r7, #15]
 8009264:	4a17      	ldr	r2, [pc, #92]	@ (80092c4 <US100_UART_RxCpltCallback+0x70>)
 8009266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800926a:	60bb      	str	r3, [r7, #8]
        
        if (huart == s->uart) {
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	429a      	cmp	r2, r3
 8009274:	d119      	bne.n	80092aa <US100_UART_RxCpltCallback+0x56>
            s->rx_index++;
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	7b9b      	ldrb	r3, [r3, #14]
 800927a:	3301      	adds	r3, #1
 800927c:	b2da      	uxtb	r2, r3
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	739a      	strb	r2, [r3, #14]
            
            if (s->rx_index >= 2) {
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	7b9b      	ldrb	r3, [r3, #14]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d903      	bls.n	8009292 <US100_UART_RxCpltCallback+0x3e>
                s->state = US100_STATE_RECEIVING;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2203      	movs	r2, #3
 800928e:	711a      	strb	r2, [r3, #4]
            } else {
                HAL_UART_Receive_IT(huart, &s->rx_buffer[s->rx_index], 1);
            }
            
            break;
 8009290:	e014      	b.n	80092bc <US100_UART_RxCpltCallback+0x68>
                HAL_UART_Receive_IT(huart, &s->rx_buffer[s->rx_index], 1);
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	7b9b      	ldrb	r3, [r3, #14]
 8009296:	3308      	adds	r3, #8
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	4413      	add	r3, r2
 800929c:	3304      	adds	r3, #4
 800929e:	2201      	movs	r2, #1
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f003 ff1f 	bl	800d0e6 <HAL_UART_Receive_IT>
            break;
 80092a8:	e008      	b.n	80092bc <US100_UART_RxCpltCallback+0x68>
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	3301      	adds	r3, #1
 80092ae:	73fb      	strb	r3, [r7, #15]
 80092b0:	4b05      	ldr	r3, [pc, #20]	@ (80092c8 <US100_UART_RxCpltCallback+0x74>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	7bfa      	ldrb	r2, [r7, #15]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d3d3      	bcc.n	8009262 <US100_UART_RxCpltCallback+0xe>
        }
    }
}
 80092ba:	bf00      	nop
 80092bc:	bf00      	nop
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	20000850 	.word	0x20000850
 80092c8:	20000864 	.word	0x20000864

080092cc <US100_GetDistance>:

float US100_GetDistance(US100Sensor* sensor) {
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
    if (sensor->data_ready) {
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	7c9b      	ldrb	r3, [r3, #18]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d009      	beq.n	80092f0 <US100_GetDistance+0x24>
        sensor->data_ready = 0;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	749a      	strb	r2, [r3, #18]
        return sensor->distance;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	8a1b      	ldrh	r3, [r3, #16]
 80092e6:	ee07 3a90 	vmov	s15, r3
 80092ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ee:	e001      	b.n	80092f4 <US100_GetDistance+0x28>
    }
    return -1.0f; // 无效数据
 80092f0:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
}
 80092f4:	eeb0 0a67 	vmov.f32	s0, s15
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
	...

08009304 <US100_GetAllValidDistances>:

void US100_GetAllValidDistances(float* distances) {
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
    // 更新所有传感器的状态
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800930c:	2300      	movs	r3, #0
 800930e:	75fb      	strb	r3, [r7, #23]
 8009310:	e009      	b.n	8009326 <US100_GetAllValidDistances+0x22>
        US100_Update(active_sensors[i]);
 8009312:	7dfb      	ldrb	r3, [r7, #23]
 8009314:	4a4c      	ldr	r2, [pc, #304]	@ (8009448 <US100_GetAllValidDistances+0x144>)
 8009316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800931a:	4618      	mov	r0, r3
 800931c:	f7ff ff16 	bl	800914c <US100_Update>
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 8009320:	7dfb      	ldrb	r3, [r7, #23]
 8009322:	3301      	adds	r3, #1
 8009324:	75fb      	strb	r3, [r7, #23]
 8009326:	4b49      	ldr	r3, [pc, #292]	@ (800944c <US100_GetAllValidDistances+0x148>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	7dfa      	ldrb	r2, [r7, #23]
 800932c:	429a      	cmp	r2, r3
 800932e:	d3f0      	bcc.n	8009312 <US100_GetAllValidDistances+0xe>
    }
    
    // 获取所有传感器的距离值
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 8009330:	2300      	movs	r3, #0
 8009332:	75bb      	strb	r3, [r7, #22]
 8009334:	e022      	b.n	800937c <US100_GetAllValidDistances+0x78>
        float current_distance = US100_GetDistance(active_sensors[i]);
 8009336:	7dbb      	ldrb	r3, [r7, #22]
 8009338:	4a43      	ldr	r2, [pc, #268]	@ (8009448 <US100_GetAllValidDistances+0x144>)
 800933a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff ffc4 	bl	80092cc <US100_GetDistance>
 8009344:	ed87 0a02 	vstr	s0, [r7, #8]
        if (current_distance > 0) {
 8009348:	edd7 7a02 	vldr	s15, [r7, #8]
 800934c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009354:	dd05      	ble.n	8009362 <US100_GetAllValidDistances+0x5e>
            last_valid_distances[i] = current_distance;
 8009356:	7dbb      	ldrb	r3, [r7, #22]
 8009358:	4a3d      	ldr	r2, [pc, #244]	@ (8009450 <US100_GetAllValidDistances+0x14c>)
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	601a      	str	r2, [r3, #0]
        }
        distances[i] = last_valid_distances[i];
 8009362:	7dba      	ldrb	r2, [r7, #22]
 8009364:	7dbb      	ldrb	r3, [r7, #22]
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	6879      	ldr	r1, [r7, #4]
 800936a:	440b      	add	r3, r1
 800936c:	4938      	ldr	r1, [pc, #224]	@ (8009450 <US100_GetAllValidDistances+0x14c>)
 800936e:	0092      	lsls	r2, r2, #2
 8009370:	440a      	add	r2, r1
 8009372:	6812      	ldr	r2, [r2, #0]
 8009374:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 8009376:	7dbb      	ldrb	r3, [r7, #22]
 8009378:	3301      	adds	r3, #1
 800937a:	75bb      	strb	r3, [r7, #22]
 800937c:	4b33      	ldr	r3, [pc, #204]	@ (800944c <US100_GetAllValidDistances+0x148>)
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	7dba      	ldrb	r2, [r7, #22]
 8009382:	429a      	cmp	r2, r3
 8009384:	d3d7      	bcc.n	8009336 <US100_GetAllValidDistances+0x32>
    }
    
    // 检查是否所有传感器都有有效数据
    uint8_t all_valid = 1;
 8009386:	2301      	movs	r3, #1
 8009388:	757b      	strb	r3, [r7, #21]
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800938a:	2300      	movs	r3, #0
 800938c:	753b      	strb	r3, [r7, #20]
 800938e:	e010      	b.n	80093b2 <US100_GetAllValidDistances+0xae>
        if (distances[i] <= 0) {
 8009390:	7d3b      	ldrb	r3, [r7, #20]
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	4413      	add	r3, r2
 8009398:	edd3 7a00 	vldr	s15, [r3]
 800939c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a4:	d802      	bhi.n	80093ac <US100_GetAllValidDistances+0xa8>
            all_valid = 0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	757b      	strb	r3, [r7, #21]
            break;
 80093aa:	e007      	b.n	80093bc <US100_GetAllValidDistances+0xb8>
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 80093ac:	7d3b      	ldrb	r3, [r7, #20]
 80093ae:	3301      	adds	r3, #1
 80093b0:	753b      	strb	r3, [r7, #20]
 80093b2:	4b26      	ldr	r3, [pc, #152]	@ (800944c <US100_GetAllValidDistances+0x148>)
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	7d3a      	ldrb	r2, [r7, #20]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d3e9      	bcc.n	8009390 <US100_GetAllValidDistances+0x8c>
        }
    }
    
    // 如果所有传感器都有有效数据，开始下一次测量
    if (all_valid) {
 80093bc:	7d7b      	ldrb	r3, [r7, #21]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d012      	beq.n	80093e8 <US100_GetAllValidDistances+0xe4>
        for (uint8_t i = 0; i < us100_sensor_count; i++) {
 80093c2:	2300      	movs	r3, #0
 80093c4:	74fb      	strb	r3, [r7, #19]
 80093c6:	e009      	b.n	80093dc <US100_GetAllValidDistances+0xd8>
            US100_StartMeasurement(active_sensors[i]);
 80093c8:	7cfb      	ldrb	r3, [r7, #19]
 80093ca:	4a1f      	ldr	r2, [pc, #124]	@ (8009448 <US100_GetAllValidDistances+0x144>)
 80093cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7ff fe8f 	bl	80090f4 <US100_StartMeasurement>
        for (uint8_t i = 0; i < us100_sensor_count; i++) {
 80093d6:	7cfb      	ldrb	r3, [r7, #19]
 80093d8:	3301      	adds	r3, #1
 80093da:	74fb      	strb	r3, [r7, #19]
 80093dc:	4b1b      	ldr	r3, [pc, #108]	@ (800944c <US100_GetAllValidDistances+0x148>)
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	7cfa      	ldrb	r2, [r7, #19]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d3f0      	bcc.n	80093c8 <US100_GetAllValidDistances+0xc4>
            }
            
            last_measurement_time = current_time;
        }
    }
}
 80093e6:	e02a      	b.n	800943e <US100_GetAllValidDistances+0x13a>
        uint32_t current_time = HAL_GetTick();
 80093e8:	f000 fb6a 	bl	8009ac0 <HAL_GetTick>
 80093ec:	60f8      	str	r0, [r7, #12]
        if (current_time - last_measurement_time > 30) {
 80093ee:	4b19      	ldr	r3, [pc, #100]	@ (8009454 <US100_GetAllValidDistances+0x150>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	2b1e      	cmp	r3, #30
 80093f8:	d921      	bls.n	800943e <US100_GetAllValidDistances+0x13a>
            timeout_count++;
 80093fa:	4b17      	ldr	r3, [pc, #92]	@ (8009458 <US100_GetAllValidDistances+0x154>)
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	3301      	adds	r3, #1
 8009400:	b2da      	uxtb	r2, r3
 8009402:	4b15      	ldr	r3, [pc, #84]	@ (8009458 <US100_GetAllValidDistances+0x154>)
 8009404:	701a      	strb	r2, [r3, #0]
            if (timeout_count >= 3) {
 8009406:	4b14      	ldr	r3, [pc, #80]	@ (8009458 <US100_GetAllValidDistances+0x154>)
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	2b02      	cmp	r3, #2
 800940c:	d914      	bls.n	8009438 <US100_GetAllValidDistances+0x134>
                for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800940e:	2300      	movs	r3, #0
 8009410:	74bb      	strb	r3, [r7, #18]
 8009412:	e009      	b.n	8009428 <US100_GetAllValidDistances+0x124>
                    US100_StartMeasurement(active_sensors[i]);
 8009414:	7cbb      	ldrb	r3, [r7, #18]
 8009416:	4a0c      	ldr	r2, [pc, #48]	@ (8009448 <US100_GetAllValidDistances+0x144>)
 8009418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800941c:	4618      	mov	r0, r3
 800941e:	f7ff fe69 	bl	80090f4 <US100_StartMeasurement>
                for (uint8_t i = 0; i < us100_sensor_count; i++) {
 8009422:	7cbb      	ldrb	r3, [r7, #18]
 8009424:	3301      	adds	r3, #1
 8009426:	74bb      	strb	r3, [r7, #18]
 8009428:	4b08      	ldr	r3, [pc, #32]	@ (800944c <US100_GetAllValidDistances+0x148>)
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	7cba      	ldrb	r2, [r7, #18]
 800942e:	429a      	cmp	r2, r3
 8009430:	d3f0      	bcc.n	8009414 <US100_GetAllValidDistances+0x110>
                timeout_count = 0;
 8009432:	4b09      	ldr	r3, [pc, #36]	@ (8009458 <US100_GetAllValidDistances+0x154>)
 8009434:	2200      	movs	r2, #0
 8009436:	701a      	strb	r2, [r3, #0]
            last_measurement_time = current_time;
 8009438:	4a06      	ldr	r2, [pc, #24]	@ (8009454 <US100_GetAllValidDistances+0x150>)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6013      	str	r3, [r2, #0]
}
 800943e:	bf00      	nop
 8009440:	3718      	adds	r7, #24
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	20000850 	.word	0x20000850
 800944c:	20000864 	.word	0x20000864
 8009450:	20000868 	.word	0x20000868
 8009454:	2000087c 	.word	0x2000087c
 8009458:	20000880 	.word	0x20000880

0800945c <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8009460:	4b11      	ldr	r3, [pc, #68]	@ (80094a8 <MX_UART4_Init+0x4c>)
 8009462:	4a12      	ldr	r2, [pc, #72]	@ (80094ac <MX_UART4_Init+0x50>)
 8009464:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8009466:	4b10      	ldr	r3, [pc, #64]	@ (80094a8 <MX_UART4_Init+0x4c>)
 8009468:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800946c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800946e:	4b0e      	ldr	r3, [pc, #56]	@ (80094a8 <MX_UART4_Init+0x4c>)
 8009470:	2200      	movs	r2, #0
 8009472:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009474:	4b0c      	ldr	r3, [pc, #48]	@ (80094a8 <MX_UART4_Init+0x4c>)
 8009476:	2200      	movs	r2, #0
 8009478:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800947a:	4b0b      	ldr	r3, [pc, #44]	@ (80094a8 <MX_UART4_Init+0x4c>)
 800947c:	2200      	movs	r2, #0
 800947e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009480:	4b09      	ldr	r3, [pc, #36]	@ (80094a8 <MX_UART4_Init+0x4c>)
 8009482:	220c      	movs	r2, #12
 8009484:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009486:	4b08      	ldr	r3, [pc, #32]	@ (80094a8 <MX_UART4_Init+0x4c>)
 8009488:	2200      	movs	r2, #0
 800948a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800948c:	4b06      	ldr	r3, [pc, #24]	@ (80094a8 <MX_UART4_Init+0x4c>)
 800948e:	2200      	movs	r2, #0
 8009490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009492:	4805      	ldr	r0, [pc, #20]	@ (80094a8 <MX_UART4_Init+0x4c>)
 8009494:	f003 fd4c 	bl	800cf30 <HAL_UART_Init>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800949e:	f7fd fed9 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80094a2:	bf00      	nop
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	20000884 	.word	0x20000884
 80094ac:	40004c00 	.word	0x40004c00

080094b0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80094b4:	4b11      	ldr	r3, [pc, #68]	@ (80094fc <MX_UART5_Init+0x4c>)
 80094b6:	4a12      	ldr	r2, [pc, #72]	@ (8009500 <MX_UART5_Init+0x50>)
 80094b8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80094ba:	4b10      	ldr	r3, [pc, #64]	@ (80094fc <MX_UART5_Init+0x4c>)
 80094bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80094c0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80094c2:	4b0e      	ldr	r3, [pc, #56]	@ (80094fc <MX_UART5_Init+0x4c>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80094c8:	4b0c      	ldr	r3, [pc, #48]	@ (80094fc <MX_UART5_Init+0x4c>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80094ce:	4b0b      	ldr	r3, [pc, #44]	@ (80094fc <MX_UART5_Init+0x4c>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80094d4:	4b09      	ldr	r3, [pc, #36]	@ (80094fc <MX_UART5_Init+0x4c>)
 80094d6:	220c      	movs	r2, #12
 80094d8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80094da:	4b08      	ldr	r3, [pc, #32]	@ (80094fc <MX_UART5_Init+0x4c>)
 80094dc:	2200      	movs	r2, #0
 80094de:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80094e0:	4b06      	ldr	r3, [pc, #24]	@ (80094fc <MX_UART5_Init+0x4c>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80094e6:	4805      	ldr	r0, [pc, #20]	@ (80094fc <MX_UART5_Init+0x4c>)
 80094e8:	f003 fd22 	bl	800cf30 <HAL_UART_Init>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80094f2:	f7fd feaf 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80094f6:	bf00      	nop
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	200008cc 	.word	0x200008cc
 8009500:	40005000 	.word	0x40005000

08009504 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009508:	4b11      	ldr	r3, [pc, #68]	@ (8009550 <MX_USART1_UART_Init+0x4c>)
 800950a:	4a12      	ldr	r2, [pc, #72]	@ (8009554 <MX_USART1_UART_Init+0x50>)
 800950c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800950e:	4b10      	ldr	r3, [pc, #64]	@ (8009550 <MX_USART1_UART_Init+0x4c>)
 8009510:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009514:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009516:	4b0e      	ldr	r3, [pc, #56]	@ (8009550 <MX_USART1_UART_Init+0x4c>)
 8009518:	2200      	movs	r2, #0
 800951a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800951c:	4b0c      	ldr	r3, [pc, #48]	@ (8009550 <MX_USART1_UART_Init+0x4c>)
 800951e:	2200      	movs	r2, #0
 8009520:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009522:	4b0b      	ldr	r3, [pc, #44]	@ (8009550 <MX_USART1_UART_Init+0x4c>)
 8009524:	2200      	movs	r2, #0
 8009526:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009528:	4b09      	ldr	r3, [pc, #36]	@ (8009550 <MX_USART1_UART_Init+0x4c>)
 800952a:	220c      	movs	r2, #12
 800952c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800952e:	4b08      	ldr	r3, [pc, #32]	@ (8009550 <MX_USART1_UART_Init+0x4c>)
 8009530:	2200      	movs	r2, #0
 8009532:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009534:	4b06      	ldr	r3, [pc, #24]	@ (8009550 <MX_USART1_UART_Init+0x4c>)
 8009536:	2200      	movs	r2, #0
 8009538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800953a:	4805      	ldr	r0, [pc, #20]	@ (8009550 <MX_USART1_UART_Init+0x4c>)
 800953c:	f003 fcf8 	bl	800cf30 <HAL_UART_Init>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009546:	f7fd fe85 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800954a:	bf00      	nop
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20000914 	.word	0x20000914
 8009554:	40011000 	.word	0x40011000

08009558 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800955c:	4b11      	ldr	r3, [pc, #68]	@ (80095a4 <MX_USART2_UART_Init+0x4c>)
 800955e:	4a12      	ldr	r2, [pc, #72]	@ (80095a8 <MX_USART2_UART_Init+0x50>)
 8009560:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8009562:	4b10      	ldr	r3, [pc, #64]	@ (80095a4 <MX_USART2_UART_Init+0x4c>)
 8009564:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8009568:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800956a:	4b0e      	ldr	r3, [pc, #56]	@ (80095a4 <MX_USART2_UART_Init+0x4c>)
 800956c:	2200      	movs	r2, #0
 800956e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009570:	4b0c      	ldr	r3, [pc, #48]	@ (80095a4 <MX_USART2_UART_Init+0x4c>)
 8009572:	2200      	movs	r2, #0
 8009574:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009576:	4b0b      	ldr	r3, [pc, #44]	@ (80095a4 <MX_USART2_UART_Init+0x4c>)
 8009578:	2200      	movs	r2, #0
 800957a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800957c:	4b09      	ldr	r3, [pc, #36]	@ (80095a4 <MX_USART2_UART_Init+0x4c>)
 800957e:	220c      	movs	r2, #12
 8009580:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009582:	4b08      	ldr	r3, [pc, #32]	@ (80095a4 <MX_USART2_UART_Init+0x4c>)
 8009584:	2200      	movs	r2, #0
 8009586:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009588:	4b06      	ldr	r3, [pc, #24]	@ (80095a4 <MX_USART2_UART_Init+0x4c>)
 800958a:	2200      	movs	r2, #0
 800958c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800958e:	4805      	ldr	r0, [pc, #20]	@ (80095a4 <MX_USART2_UART_Init+0x4c>)
 8009590:	f003 fcce 	bl	800cf30 <HAL_UART_Init>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800959a:	f7fd fe5b 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800959e:	bf00      	nop
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	2000095c 	.word	0x2000095c
 80095a8:	40004400 	.word	0x40004400

080095ac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80095b0:	4b11      	ldr	r3, [pc, #68]	@ (80095f8 <MX_USART3_UART_Init+0x4c>)
 80095b2:	4a12      	ldr	r2, [pc, #72]	@ (80095fc <MX_USART3_UART_Init+0x50>)
 80095b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80095b6:	4b10      	ldr	r3, [pc, #64]	@ (80095f8 <MX_USART3_UART_Init+0x4c>)
 80095b8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80095bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80095be:	4b0e      	ldr	r3, [pc, #56]	@ (80095f8 <MX_USART3_UART_Init+0x4c>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80095c4:	4b0c      	ldr	r3, [pc, #48]	@ (80095f8 <MX_USART3_UART_Init+0x4c>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80095ca:	4b0b      	ldr	r3, [pc, #44]	@ (80095f8 <MX_USART3_UART_Init+0x4c>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80095d0:	4b09      	ldr	r3, [pc, #36]	@ (80095f8 <MX_USART3_UART_Init+0x4c>)
 80095d2:	220c      	movs	r2, #12
 80095d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80095d6:	4b08      	ldr	r3, [pc, #32]	@ (80095f8 <MX_USART3_UART_Init+0x4c>)
 80095d8:	2200      	movs	r2, #0
 80095da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80095dc:	4b06      	ldr	r3, [pc, #24]	@ (80095f8 <MX_USART3_UART_Init+0x4c>)
 80095de:	2200      	movs	r2, #0
 80095e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80095e2:	4805      	ldr	r0, [pc, #20]	@ (80095f8 <MX_USART3_UART_Init+0x4c>)
 80095e4:	f003 fca4 	bl	800cf30 <HAL_UART_Init>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80095ee:	f7fd fe31 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80095f2:	bf00      	nop
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	200009a4 	.word	0x200009a4
 80095fc:	40004800 	.word	0x40004800

08009600 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8009604:	4b11      	ldr	r3, [pc, #68]	@ (800964c <MX_USART6_UART_Init+0x4c>)
 8009606:	4a12      	ldr	r2, [pc, #72]	@ (8009650 <MX_USART6_UART_Init+0x50>)
 8009608:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800960a:	4b10      	ldr	r3, [pc, #64]	@ (800964c <MX_USART6_UART_Init+0x4c>)
 800960c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8009610:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8009612:	4b0e      	ldr	r3, [pc, #56]	@ (800964c <MX_USART6_UART_Init+0x4c>)
 8009614:	2200      	movs	r2, #0
 8009616:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8009618:	4b0c      	ldr	r3, [pc, #48]	@ (800964c <MX_USART6_UART_Init+0x4c>)
 800961a:	2200      	movs	r2, #0
 800961c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800961e:	4b0b      	ldr	r3, [pc, #44]	@ (800964c <MX_USART6_UART_Init+0x4c>)
 8009620:	2200      	movs	r2, #0
 8009622:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8009624:	4b09      	ldr	r3, [pc, #36]	@ (800964c <MX_USART6_UART_Init+0x4c>)
 8009626:	220c      	movs	r2, #12
 8009628:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800962a:	4b08      	ldr	r3, [pc, #32]	@ (800964c <MX_USART6_UART_Init+0x4c>)
 800962c:	2200      	movs	r2, #0
 800962e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009630:	4b06      	ldr	r3, [pc, #24]	@ (800964c <MX_USART6_UART_Init+0x4c>)
 8009632:	2200      	movs	r2, #0
 8009634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8009636:	4805      	ldr	r0, [pc, #20]	@ (800964c <MX_USART6_UART_Init+0x4c>)
 8009638:	f003 fc7a 	bl	800cf30 <HAL_UART_Init>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8009642:	f7fd fe07 	bl	8007254 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8009646:	bf00      	nop
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	200009ec 	.word	0x200009ec
 8009650:	40011400 	.word	0x40011400

08009654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b094      	sub	sp, #80	@ 0x50
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800965c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8009660:	2200      	movs	r2, #0
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	605a      	str	r2, [r3, #4]
 8009666:	609a      	str	r2, [r3, #8]
 8009668:	60da      	str	r2, [r3, #12]
 800966a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4aa0      	ldr	r2, [pc, #640]	@ (80098f4 <HAL_UART_MspInit+0x2a0>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d135      	bne.n	80096e2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8009676:	2300      	movs	r3, #0
 8009678:	63bb      	str	r3, [r7, #56]	@ 0x38
 800967a:	4b9f      	ldr	r3, [pc, #636]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 800967c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800967e:	4a9e      	ldr	r2, [pc, #632]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 8009680:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009684:	6413      	str	r3, [r2, #64]	@ 0x40
 8009686:	4b9c      	ldr	r3, [pc, #624]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 8009688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800968a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800968e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009692:	2300      	movs	r3, #0
 8009694:	637b      	str	r3, [r7, #52]	@ 0x34
 8009696:	4b98      	ldr	r3, [pc, #608]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 8009698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800969a:	4a97      	ldr	r2, [pc, #604]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 800969c:	f043 0304 	orr.w	r3, r3, #4
 80096a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80096a2:	4b95      	ldr	r3, [pc, #596]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 80096a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a6:	f003 0304 	and.w	r3, r3, #4
 80096aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_1_Pin|RX_1_Pin;
 80096ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80096b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096b4:	2302      	movs	r3, #2
 80096b6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096b8:	2300      	movs	r3, #0
 80096ba:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096bc:	2303      	movs	r3, #3
 80096be:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80096c0:	2308      	movs	r3, #8
 80096c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80096c8:	4619      	mov	r1, r3
 80096ca:	488c      	ldr	r0, [pc, #560]	@ (80098fc <HAL_UART_MspInit+0x2a8>)
 80096cc:	f000 fbcc 	bl	8009e68 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80096d0:	2200      	movs	r2, #0
 80096d2:	2100      	movs	r1, #0
 80096d4:	2034      	movs	r0, #52	@ 0x34
 80096d6:	f000 fafe 	bl	8009cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80096da:	2034      	movs	r0, #52	@ 0x34
 80096dc:	f000 fb17 	bl	8009d0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80096e0:	e154      	b.n	800998c <HAL_UART_MspInit+0x338>
  else if(uartHandle->Instance==UART5)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a86      	ldr	r2, [pc, #536]	@ (8009900 <HAL_UART_MspInit+0x2ac>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d153      	bne.n	8009794 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 80096ec:	2300      	movs	r3, #0
 80096ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80096f0:	4b81      	ldr	r3, [pc, #516]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 80096f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f4:	4a80      	ldr	r2, [pc, #512]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 80096f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80096fc:	4b7e      	ldr	r3, [pc, #504]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 80096fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009700:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009704:	633b      	str	r3, [r7, #48]	@ 0x30
 8009706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009708:	2300      	movs	r3, #0
 800970a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800970c:	4b7a      	ldr	r3, [pc, #488]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 800970e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009710:	4a79      	ldr	r2, [pc, #484]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 8009712:	f043 0304 	orr.w	r3, r3, #4
 8009716:	6313      	str	r3, [r2, #48]	@ 0x30
 8009718:	4b77      	ldr	r3, [pc, #476]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 800971a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800971c:	f003 0304 	and.w	r3, r3, #4
 8009720:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009724:	2300      	movs	r3, #0
 8009726:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009728:	4b73      	ldr	r3, [pc, #460]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 800972a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800972c:	4a72      	ldr	r2, [pc, #456]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 800972e:	f043 0308 	orr.w	r3, r3, #8
 8009732:	6313      	str	r3, [r2, #48]	@ 0x30
 8009734:	4b70      	ldr	r3, [pc, #448]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 8009736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009738:	f003 0308 	and.w	r3, r3, #8
 800973c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800973e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009744:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009746:	2302      	movs	r3, #2
 8009748:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800974a:	2300      	movs	r3, #0
 800974c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800974e:	2303      	movs	r3, #3
 8009750:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8009752:	2308      	movs	r3, #8
 8009754:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009756:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800975a:	4619      	mov	r1, r3
 800975c:	4867      	ldr	r0, [pc, #412]	@ (80098fc <HAL_UART_MspInit+0x2a8>)
 800975e:	f000 fb83 	bl	8009e68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009762:	2304      	movs	r3, #4
 8009764:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009766:	2302      	movs	r3, #2
 8009768:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800976a:	2300      	movs	r3, #0
 800976c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800976e:	2303      	movs	r3, #3
 8009770:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8009772:	2308      	movs	r3, #8
 8009774:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009776:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800977a:	4619      	mov	r1, r3
 800977c:	4861      	ldr	r0, [pc, #388]	@ (8009904 <HAL_UART_MspInit+0x2b0>)
 800977e:	f000 fb73 	bl	8009e68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8009782:	2200      	movs	r2, #0
 8009784:	2100      	movs	r1, #0
 8009786:	2035      	movs	r0, #53	@ 0x35
 8009788:	f000 faa5 	bl	8009cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800978c:	2035      	movs	r0, #53	@ 0x35
 800978e:	f000 fabe 	bl	8009d0e <HAL_NVIC_EnableIRQ>
}
 8009792:	e0fb      	b.n	800998c <HAL_UART_MspInit+0x338>
  else if(uartHandle->Instance==USART1)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a5b      	ldr	r2, [pc, #364]	@ (8009908 <HAL_UART_MspInit+0x2b4>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d135      	bne.n	800980a <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 800979e:	2300      	movs	r3, #0
 80097a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80097a2:	4b55      	ldr	r3, [pc, #340]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 80097a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097a6:	4a54      	ldr	r2, [pc, #336]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 80097a8:	f043 0310 	orr.w	r3, r3, #16
 80097ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80097ae:	4b52      	ldr	r3, [pc, #328]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 80097b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097b2:	f003 0310 	and.w	r3, r3, #16
 80097b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80097b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097ba:	2300      	movs	r3, #0
 80097bc:	623b      	str	r3, [r7, #32]
 80097be:	4b4e      	ldr	r3, [pc, #312]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 80097c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097c2:	4a4d      	ldr	r2, [pc, #308]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 80097c4:	f043 0301 	orr.w	r3, r3, #1
 80097c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80097ca:	4b4b      	ldr	r3, [pc, #300]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 80097cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	623b      	str	r3, [r7, #32]
 80097d4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80097d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80097da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097dc:	2302      	movs	r3, #2
 80097de:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097e0:	2300      	movs	r3, #0
 80097e2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097e4:	2303      	movs	r3, #3
 80097e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80097e8:	2307      	movs	r3, #7
 80097ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097ec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80097f0:	4619      	mov	r1, r3
 80097f2:	4846      	ldr	r0, [pc, #280]	@ (800990c <HAL_UART_MspInit+0x2b8>)
 80097f4:	f000 fb38 	bl	8009e68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80097f8:	2200      	movs	r2, #0
 80097fa:	2100      	movs	r1, #0
 80097fc:	2025      	movs	r0, #37	@ 0x25
 80097fe:	f000 fa6a 	bl	8009cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009802:	2025      	movs	r0, #37	@ 0x25
 8009804:	f000 fa83 	bl	8009d0e <HAL_NVIC_EnableIRQ>
}
 8009808:	e0c0      	b.n	800998c <HAL_UART_MspInit+0x338>
  else if(uartHandle->Instance==USART2)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a40      	ldr	r2, [pc, #256]	@ (8009910 <HAL_UART_MspInit+0x2bc>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d134      	bne.n	800987e <HAL_UART_MspInit+0x22a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009814:	2300      	movs	r3, #0
 8009816:	61fb      	str	r3, [r7, #28]
 8009818:	4b37      	ldr	r3, [pc, #220]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 800981a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800981c:	4a36      	ldr	r2, [pc, #216]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 800981e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009822:	6413      	str	r3, [r2, #64]	@ 0x40
 8009824:	4b34      	ldr	r3, [pc, #208]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 8009826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800982c:	61fb      	str	r3, [r7, #28]
 800982e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009830:	2300      	movs	r3, #0
 8009832:	61bb      	str	r3, [r7, #24]
 8009834:	4b30      	ldr	r3, [pc, #192]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 8009836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009838:	4a2f      	ldr	r2, [pc, #188]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 800983a:	f043 0308 	orr.w	r3, r3, #8
 800983e:	6313      	str	r3, [r2, #48]	@ 0x30
 8009840:	4b2d      	ldr	r3, [pc, #180]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 8009842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009844:	f003 0308 	and.w	r3, r3, #8
 8009848:	61bb      	str	r3, [r7, #24]
 800984a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800984c:	2360      	movs	r3, #96	@ 0x60
 800984e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009850:	2302      	movs	r3, #2
 8009852:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009854:	2300      	movs	r3, #0
 8009856:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009858:	2303      	movs	r3, #3
 800985a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800985c:	2307      	movs	r3, #7
 800985e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009860:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8009864:	4619      	mov	r1, r3
 8009866:	4827      	ldr	r0, [pc, #156]	@ (8009904 <HAL_UART_MspInit+0x2b0>)
 8009868:	f000 fafe 	bl	8009e68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800986c:	2200      	movs	r2, #0
 800986e:	2100      	movs	r1, #0
 8009870:	2026      	movs	r0, #38	@ 0x26
 8009872:	f000 fa30 	bl	8009cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009876:	2026      	movs	r0, #38	@ 0x26
 8009878:	f000 fa49 	bl	8009d0e <HAL_NVIC_EnableIRQ>
}
 800987c:	e086      	b.n	800998c <HAL_UART_MspInit+0x338>
  else if(uartHandle->Instance==USART3)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a24      	ldr	r2, [pc, #144]	@ (8009914 <HAL_UART_MspInit+0x2c0>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d147      	bne.n	8009918 <HAL_UART_MspInit+0x2c4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8009888:	2300      	movs	r3, #0
 800988a:	617b      	str	r3, [r7, #20]
 800988c:	4b1a      	ldr	r3, [pc, #104]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 800988e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009890:	4a19      	ldr	r2, [pc, #100]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 8009892:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009896:	6413      	str	r3, [r2, #64]	@ 0x40
 8009898:	4b17      	ldr	r3, [pc, #92]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 800989a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800989c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80098a0:	617b      	str	r3, [r7, #20]
 80098a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80098a4:	2300      	movs	r3, #0
 80098a6:	613b      	str	r3, [r7, #16]
 80098a8:	4b13      	ldr	r3, [pc, #76]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 80098aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ac:	4a12      	ldr	r2, [pc, #72]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 80098ae:	f043 0308 	orr.w	r3, r3, #8
 80098b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80098b4:	4b10      	ldr	r3, [pc, #64]	@ (80098f8 <HAL_UART_MspInit+0x2a4>)
 80098b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098b8:	f003 0308 	and.w	r3, r3, #8
 80098bc:	613b      	str	r3, [r7, #16]
 80098be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80098c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80098c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098c6:	2302      	movs	r3, #2
 80098c8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098ce:	2303      	movs	r3, #3
 80098d0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80098d2:	2307      	movs	r3, #7
 80098d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80098d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80098da:	4619      	mov	r1, r3
 80098dc:	4809      	ldr	r0, [pc, #36]	@ (8009904 <HAL_UART_MspInit+0x2b0>)
 80098de:	f000 fac3 	bl	8009e68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80098e2:	2200      	movs	r2, #0
 80098e4:	2100      	movs	r1, #0
 80098e6:	2027      	movs	r0, #39	@ 0x27
 80098e8:	f000 f9f5 	bl	8009cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80098ec:	2027      	movs	r0, #39	@ 0x27
 80098ee:	f000 fa0e 	bl	8009d0e <HAL_NVIC_EnableIRQ>
}
 80098f2:	e04b      	b.n	800998c <HAL_UART_MspInit+0x338>
 80098f4:	40004c00 	.word	0x40004c00
 80098f8:	40023800 	.word	0x40023800
 80098fc:	40020800 	.word	0x40020800
 8009900:	40005000 	.word	0x40005000
 8009904:	40020c00 	.word	0x40020c00
 8009908:	40011000 	.word	0x40011000
 800990c:	40020000 	.word	0x40020000
 8009910:	40004400 	.word	0x40004400
 8009914:	40004800 	.word	0x40004800
  else if(uartHandle->Instance==USART6)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a1d      	ldr	r2, [pc, #116]	@ (8009994 <HAL_UART_MspInit+0x340>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d134      	bne.n	800998c <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART6_CLK_ENABLE();
 8009922:	2300      	movs	r3, #0
 8009924:	60fb      	str	r3, [r7, #12]
 8009926:	4b1c      	ldr	r3, [pc, #112]	@ (8009998 <HAL_UART_MspInit+0x344>)
 8009928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800992a:	4a1b      	ldr	r2, [pc, #108]	@ (8009998 <HAL_UART_MspInit+0x344>)
 800992c:	f043 0320 	orr.w	r3, r3, #32
 8009930:	6453      	str	r3, [r2, #68]	@ 0x44
 8009932:	4b19      	ldr	r3, [pc, #100]	@ (8009998 <HAL_UART_MspInit+0x344>)
 8009934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009936:	f003 0320 	and.w	r3, r3, #32
 800993a:	60fb      	str	r3, [r7, #12]
 800993c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800993e:	2300      	movs	r3, #0
 8009940:	60bb      	str	r3, [r7, #8]
 8009942:	4b15      	ldr	r3, [pc, #84]	@ (8009998 <HAL_UART_MspInit+0x344>)
 8009944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009946:	4a14      	ldr	r2, [pc, #80]	@ (8009998 <HAL_UART_MspInit+0x344>)
 8009948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800994c:	6313      	str	r3, [r2, #48]	@ 0x30
 800994e:	4b12      	ldr	r3, [pc, #72]	@ (8009998 <HAL_UART_MspInit+0x344>)
 8009950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009956:	60bb      	str	r3, [r7, #8]
 8009958:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800995a:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 800995e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009960:	2302      	movs	r3, #2
 8009962:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009964:	2300      	movs	r3, #0
 8009966:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009968:	2303      	movs	r3, #3
 800996a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800996c:	2308      	movs	r3, #8
 800996e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009970:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8009974:	4619      	mov	r1, r3
 8009976:	4809      	ldr	r0, [pc, #36]	@ (800999c <HAL_UART_MspInit+0x348>)
 8009978:	f000 fa76 	bl	8009e68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800997c:	2200      	movs	r2, #0
 800997e:	2100      	movs	r1, #0
 8009980:	2047      	movs	r0, #71	@ 0x47
 8009982:	f000 f9a8 	bl	8009cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8009986:	2047      	movs	r0, #71	@ 0x47
 8009988:	f000 f9c1 	bl	8009d0e <HAL_NVIC_EnableIRQ>
}
 800998c:	bf00      	nop
 800998e:	3750      	adds	r7, #80	@ 0x50
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	40011400 	.word	0x40011400
 8009998:	40023800 	.word	0x40023800
 800999c:	40021800 	.word	0x40021800

080099a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80099a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80099d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80099a4:	f7fe fc64 	bl	8008270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80099a8:	480c      	ldr	r0, [pc, #48]	@ (80099dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80099aa:	490d      	ldr	r1, [pc, #52]	@ (80099e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80099ac:	4a0d      	ldr	r2, [pc, #52]	@ (80099e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80099ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80099b0:	e002      	b.n	80099b8 <LoopCopyDataInit>

080099b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80099b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80099b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80099b6:	3304      	adds	r3, #4

080099b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80099b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80099ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80099bc:	d3f9      	bcc.n	80099b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80099be:	4a0a      	ldr	r2, [pc, #40]	@ (80099e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80099c0:	4c0a      	ldr	r4, [pc, #40]	@ (80099ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80099c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80099c4:	e001      	b.n	80099ca <LoopFillZerobss>

080099c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80099c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80099c8:	3204      	adds	r2, #4

080099ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80099ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80099cc:	d3fb      	bcc.n	80099c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80099ce:	f005 f9eb 	bl	800eda8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80099d2:	f7fb fee3 	bl	800579c <main>
  bx  lr    
 80099d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80099d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80099dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80099e0:	200002a8 	.word	0x200002a8
  ldr r2, =_sidata
 80099e4:	08012e68 	.word	0x08012e68
  ldr r2, =_sbss
 80099e8:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 80099ec:	20000b84 	.word	0x20000b84

080099f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80099f0:	e7fe      	b.n	80099f0 <ADC_IRQHandler>
	...

080099f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80099f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009a34 <HAL_Init+0x40>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a0d      	ldr	r2, [pc, #52]	@ (8009a34 <HAL_Init+0x40>)
 80099fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009a02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009a04:	4b0b      	ldr	r3, [pc, #44]	@ (8009a34 <HAL_Init+0x40>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a0a      	ldr	r2, [pc, #40]	@ (8009a34 <HAL_Init+0x40>)
 8009a0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009a0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009a10:	4b08      	ldr	r3, [pc, #32]	@ (8009a34 <HAL_Init+0x40>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a07      	ldr	r2, [pc, #28]	@ (8009a34 <HAL_Init+0x40>)
 8009a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009a1c:	2003      	movs	r0, #3
 8009a1e:	f000 f94f 	bl	8009cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009a22:	200f      	movs	r0, #15
 8009a24:	f000 f808 	bl	8009a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009a28:	f7fe fab8 	bl	8007f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	40023c00 	.word	0x40023c00

08009a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009a40:	4b12      	ldr	r3, [pc, #72]	@ (8009a8c <HAL_InitTick+0x54>)
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	4b12      	ldr	r3, [pc, #72]	@ (8009a90 <HAL_InitTick+0x58>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 f967 	bl	8009d2a <HAL_SYSTICK_Config>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e00e      	b.n	8009a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b0f      	cmp	r3, #15
 8009a6a:	d80a      	bhi.n	8009a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	6879      	ldr	r1, [r7, #4]
 8009a70:	f04f 30ff 	mov.w	r0, #4294967295
 8009a74:	f000 f92f 	bl	8009cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009a78:	4a06      	ldr	r2, [pc, #24]	@ (8009a94 <HAL_InitTick+0x5c>)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	e000      	b.n	8009a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	200000d4 	.word	0x200000d4
 8009a90:	200000dc 	.word	0x200000dc
 8009a94:	200000d8 	.word	0x200000d8

08009a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009a9c:	4b06      	ldr	r3, [pc, #24]	@ (8009ab8 <HAL_IncTick+0x20>)
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	4b06      	ldr	r3, [pc, #24]	@ (8009abc <HAL_IncTick+0x24>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	4a04      	ldr	r2, [pc, #16]	@ (8009abc <HAL_IncTick+0x24>)
 8009aaa:	6013      	str	r3, [r2, #0]
}
 8009aac:	bf00      	nop
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	200000dc 	.word	0x200000dc
 8009abc:	20000a34 	.word	0x20000a34

08009ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8009ac4:	4b03      	ldr	r3, [pc, #12]	@ (8009ad4 <HAL_GetTick+0x14>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	20000a34 	.word	0x20000a34

08009ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009ae0:	f7ff ffee 	bl	8009ac0 <HAL_GetTick>
 8009ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af0:	d005      	beq.n	8009afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009af2:	4b0a      	ldr	r3, [pc, #40]	@ (8009b1c <HAL_Delay+0x44>)
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	4413      	add	r3, r2
 8009afc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009afe:	bf00      	nop
 8009b00:	f7ff ffde 	bl	8009ac0 <HAL_GetTick>
 8009b04:	4602      	mov	r2, r0
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d8f7      	bhi.n	8009b00 <HAL_Delay+0x28>
  {
  }
}
 8009b10:	bf00      	nop
 8009b12:	bf00      	nop
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	200000dc 	.word	0x200000dc

08009b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f003 0307 	and.w	r3, r3, #7
 8009b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b30:	4b0c      	ldr	r3, [pc, #48]	@ (8009b64 <__NVIC_SetPriorityGrouping+0x44>)
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009b52:	4a04      	ldr	r2, [pc, #16]	@ (8009b64 <__NVIC_SetPriorityGrouping+0x44>)
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	60d3      	str	r3, [r2, #12]
}
 8009b58:	bf00      	nop
 8009b5a:	3714      	adds	r7, #20
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	e000ed00 	.word	0xe000ed00

08009b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009b6c:	4b04      	ldr	r3, [pc, #16]	@ (8009b80 <__NVIC_GetPriorityGrouping+0x18>)
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	0a1b      	lsrs	r3, r3, #8
 8009b72:	f003 0307 	and.w	r3, r3, #7
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	e000ed00 	.word	0xe000ed00

08009b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	db0b      	blt.n	8009bae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b96:	79fb      	ldrb	r3, [r7, #7]
 8009b98:	f003 021f 	and.w	r2, r3, #31
 8009b9c:	4907      	ldr	r1, [pc, #28]	@ (8009bbc <__NVIC_EnableIRQ+0x38>)
 8009b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ba2:	095b      	lsrs	r3, r3, #5
 8009ba4:	2001      	movs	r0, #1
 8009ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8009baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009bae:	bf00      	nop
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	e000e100 	.word	0xe000e100

08009bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	6039      	str	r1, [r7, #0]
 8009bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	db0a      	blt.n	8009bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	490c      	ldr	r1, [pc, #48]	@ (8009c0c <__NVIC_SetPriority+0x4c>)
 8009bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bde:	0112      	lsls	r2, r2, #4
 8009be0:	b2d2      	uxtb	r2, r2
 8009be2:	440b      	add	r3, r1
 8009be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009be8:	e00a      	b.n	8009c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	4908      	ldr	r1, [pc, #32]	@ (8009c10 <__NVIC_SetPriority+0x50>)
 8009bf0:	79fb      	ldrb	r3, [r7, #7]
 8009bf2:	f003 030f 	and.w	r3, r3, #15
 8009bf6:	3b04      	subs	r3, #4
 8009bf8:	0112      	lsls	r2, r2, #4
 8009bfa:	b2d2      	uxtb	r2, r2
 8009bfc:	440b      	add	r3, r1
 8009bfe:	761a      	strb	r2, [r3, #24]
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	e000e100 	.word	0xe000e100
 8009c10:	e000ed00 	.word	0xe000ed00

08009c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b089      	sub	sp, #36	@ 0x24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f003 0307 	and.w	r3, r3, #7
 8009c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	f1c3 0307 	rsb	r3, r3, #7
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	bf28      	it	cs
 8009c32:	2304      	movcs	r3, #4
 8009c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	3304      	adds	r3, #4
 8009c3a:	2b06      	cmp	r3, #6
 8009c3c:	d902      	bls.n	8009c44 <NVIC_EncodePriority+0x30>
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	3b03      	subs	r3, #3
 8009c42:	e000      	b.n	8009c46 <NVIC_EncodePriority+0x32>
 8009c44:	2300      	movs	r3, #0
 8009c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c48:	f04f 32ff 	mov.w	r2, #4294967295
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c52:	43da      	mvns	r2, r3
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	401a      	ands	r2, r3
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	fa01 f303 	lsl.w	r3, r1, r3
 8009c66:	43d9      	mvns	r1, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c6c:	4313      	orrs	r3, r2
         );
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3724      	adds	r7, #36	@ 0x24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
	...

08009c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3b01      	subs	r3, #1
 8009c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c8c:	d301      	bcc.n	8009c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e00f      	b.n	8009cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009c92:	4a0a      	ldr	r2, [pc, #40]	@ (8009cbc <SysTick_Config+0x40>)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009c9a:	210f      	movs	r1, #15
 8009c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca0:	f7ff ff8e 	bl	8009bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009ca4:	4b05      	ldr	r3, [pc, #20]	@ (8009cbc <SysTick_Config+0x40>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009caa:	4b04      	ldr	r3, [pc, #16]	@ (8009cbc <SysTick_Config+0x40>)
 8009cac:	2207      	movs	r2, #7
 8009cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	e000e010 	.word	0xe000e010

08009cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7ff ff29 	bl	8009b20 <__NVIC_SetPriorityGrouping>
}
 8009cce:	bf00      	nop
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b086      	sub	sp, #24
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	4603      	mov	r3, r0
 8009cde:	60b9      	str	r1, [r7, #8]
 8009ce0:	607a      	str	r2, [r7, #4]
 8009ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009ce8:	f7ff ff3e 	bl	8009b68 <__NVIC_GetPriorityGrouping>
 8009cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	68b9      	ldr	r1, [r7, #8]
 8009cf2:	6978      	ldr	r0, [r7, #20]
 8009cf4:	f7ff ff8e 	bl	8009c14 <NVIC_EncodePriority>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cfe:	4611      	mov	r1, r2
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7ff ff5d 	bl	8009bc0 <__NVIC_SetPriority>
}
 8009d06:	bf00      	nop
 8009d08:	3718      	adds	r7, #24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	4603      	mov	r3, r0
 8009d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7ff ff31 	bl	8009b84 <__NVIC_EnableIRQ>
}
 8009d22:	bf00      	nop
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b082      	sub	sp, #8
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7ff ffa2 	bl	8009c7c <SysTick_Config>
 8009d38:	4603      	mov	r3, r0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009d50:	f7ff feb6 	bl	8009ac0 <HAL_GetTick>
 8009d54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d008      	beq.n	8009d74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2280      	movs	r2, #128	@ 0x80
 8009d66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e052      	b.n	8009e1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f022 0216 	bic.w	r2, r2, #22
 8009d82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	695a      	ldr	r2, [r3, #20]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009d92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d103      	bne.n	8009da4 <HAL_DMA_Abort+0x62>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d007      	beq.n	8009db4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f022 0208 	bic.w	r2, r2, #8
 8009db2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f022 0201 	bic.w	r2, r2, #1
 8009dc2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009dc4:	e013      	b.n	8009dee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009dc6:	f7ff fe7b 	bl	8009ac0 <HAL_GetTick>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	2b05      	cmp	r3, #5
 8009dd2:	d90c      	bls.n	8009dee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2203      	movs	r2, #3
 8009dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8009dea:	2303      	movs	r3, #3
 8009dec:	e015      	b.n	8009e1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1e4      	bne.n	8009dc6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e00:	223f      	movs	r2, #63	@ 0x3f
 8009e02:	409a      	lsls	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d004      	beq.n	8009e40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2280      	movs	r2, #128	@ 0x80
 8009e3a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e00c      	b.n	8009e5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2205      	movs	r2, #5
 8009e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f022 0201 	bic.w	r2, r2, #1
 8009e56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
	...

08009e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b089      	sub	sp, #36	@ 0x24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009e72:	2300      	movs	r3, #0
 8009e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009e76:	2300      	movs	r3, #0
 8009e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009e7e:	2300      	movs	r3, #0
 8009e80:	61fb      	str	r3, [r7, #28]
 8009e82:	e16b      	b.n	800a15c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009e84:	2201      	movs	r2, #1
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	fa02 f303 	lsl.w	r3, r2, r3
 8009e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	697a      	ldr	r2, [r7, #20]
 8009e94:	4013      	ands	r3, r2
 8009e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	f040 815a 	bne.w	800a156 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	f003 0303 	and.w	r3, r3, #3
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d005      	beq.n	8009eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d130      	bne.n	8009f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	2203      	movs	r2, #3
 8009ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eca:	43db      	mvns	r3, r3
 8009ecc:	69ba      	ldr	r2, [r7, #24]
 8009ece:	4013      	ands	r3, r2
 8009ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	68da      	ldr	r2, [r3, #12]
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	fa02 f303 	lsl.w	r3, r2, r3
 8009ede:	69ba      	ldr	r2, [r7, #24]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	69ba      	ldr	r2, [r7, #24]
 8009ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef8:	43db      	mvns	r3, r3
 8009efa:	69ba      	ldr	r2, [r7, #24]
 8009efc:	4013      	ands	r3, r2
 8009efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	091b      	lsrs	r3, r3, #4
 8009f06:	f003 0201 	and.w	r2, r3, #1
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f10:	69ba      	ldr	r2, [r7, #24]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	69ba      	ldr	r2, [r7, #24]
 8009f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	f003 0303 	and.w	r3, r3, #3
 8009f24:	2b03      	cmp	r3, #3
 8009f26:	d017      	beq.n	8009f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	005b      	lsls	r3, r3, #1
 8009f32:	2203      	movs	r2, #3
 8009f34:	fa02 f303 	lsl.w	r3, r2, r3
 8009f38:	43db      	mvns	r3, r3
 8009f3a:	69ba      	ldr	r2, [r7, #24]
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	689a      	ldr	r2, [r3, #8]
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	fa02 f303 	lsl.w	r3, r2, r3
 8009f4c:	69ba      	ldr	r2, [r7, #24]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	69ba      	ldr	r2, [r7, #24]
 8009f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f003 0303 	and.w	r3, r3, #3
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d123      	bne.n	8009fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	08da      	lsrs	r2, r3, #3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3208      	adds	r2, #8
 8009f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	f003 0307 	and.w	r3, r3, #7
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	220f      	movs	r2, #15
 8009f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f80:	43db      	mvns	r3, r3
 8009f82:	69ba      	ldr	r2, [r7, #24]
 8009f84:	4013      	ands	r3, r2
 8009f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	691a      	ldr	r2, [r3, #16]
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	f003 0307 	and.w	r3, r3, #7
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	fa02 f303 	lsl.w	r3, r2, r3
 8009f98:	69ba      	ldr	r2, [r7, #24]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	08da      	lsrs	r2, r3, #3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	3208      	adds	r2, #8
 8009fa6:	69b9      	ldr	r1, [r7, #24]
 8009fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	005b      	lsls	r3, r3, #1
 8009fb6:	2203      	movs	r2, #3
 8009fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fbc:	43db      	mvns	r3, r3
 8009fbe:	69ba      	ldr	r2, [r7, #24]
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	f003 0203 	and.w	r2, r3, #3
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	005b      	lsls	r3, r3, #1
 8009fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd4:	69ba      	ldr	r2, [r7, #24]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 80b4 	beq.w	800a156 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60fb      	str	r3, [r7, #12]
 8009ff2:	4b60      	ldr	r3, [pc, #384]	@ (800a174 <HAL_GPIO_Init+0x30c>)
 8009ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ff6:	4a5f      	ldr	r2, [pc, #380]	@ (800a174 <HAL_GPIO_Init+0x30c>)
 8009ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8009ffe:	4b5d      	ldr	r3, [pc, #372]	@ (800a174 <HAL_GPIO_Init+0x30c>)
 800a000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a006:	60fb      	str	r3, [r7, #12]
 800a008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a00a:	4a5b      	ldr	r2, [pc, #364]	@ (800a178 <HAL_GPIO_Init+0x310>)
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	089b      	lsrs	r3, r3, #2
 800a010:	3302      	adds	r3, #2
 800a012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	f003 0303 	and.w	r3, r3, #3
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	220f      	movs	r2, #15
 800a022:	fa02 f303 	lsl.w	r3, r2, r3
 800a026:	43db      	mvns	r3, r3
 800a028:	69ba      	ldr	r2, [r7, #24]
 800a02a:	4013      	ands	r3, r2
 800a02c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a52      	ldr	r2, [pc, #328]	@ (800a17c <HAL_GPIO_Init+0x314>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d02b      	beq.n	800a08e <HAL_GPIO_Init+0x226>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a51      	ldr	r2, [pc, #324]	@ (800a180 <HAL_GPIO_Init+0x318>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d025      	beq.n	800a08a <HAL_GPIO_Init+0x222>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a50      	ldr	r2, [pc, #320]	@ (800a184 <HAL_GPIO_Init+0x31c>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d01f      	beq.n	800a086 <HAL_GPIO_Init+0x21e>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a4f      	ldr	r2, [pc, #316]	@ (800a188 <HAL_GPIO_Init+0x320>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d019      	beq.n	800a082 <HAL_GPIO_Init+0x21a>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a4e      	ldr	r2, [pc, #312]	@ (800a18c <HAL_GPIO_Init+0x324>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d013      	beq.n	800a07e <HAL_GPIO_Init+0x216>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a4d      	ldr	r2, [pc, #308]	@ (800a190 <HAL_GPIO_Init+0x328>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d00d      	beq.n	800a07a <HAL_GPIO_Init+0x212>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a4c      	ldr	r2, [pc, #304]	@ (800a194 <HAL_GPIO_Init+0x32c>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d007      	beq.n	800a076 <HAL_GPIO_Init+0x20e>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a4b      	ldr	r2, [pc, #300]	@ (800a198 <HAL_GPIO_Init+0x330>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d101      	bne.n	800a072 <HAL_GPIO_Init+0x20a>
 800a06e:	2307      	movs	r3, #7
 800a070:	e00e      	b.n	800a090 <HAL_GPIO_Init+0x228>
 800a072:	2308      	movs	r3, #8
 800a074:	e00c      	b.n	800a090 <HAL_GPIO_Init+0x228>
 800a076:	2306      	movs	r3, #6
 800a078:	e00a      	b.n	800a090 <HAL_GPIO_Init+0x228>
 800a07a:	2305      	movs	r3, #5
 800a07c:	e008      	b.n	800a090 <HAL_GPIO_Init+0x228>
 800a07e:	2304      	movs	r3, #4
 800a080:	e006      	b.n	800a090 <HAL_GPIO_Init+0x228>
 800a082:	2303      	movs	r3, #3
 800a084:	e004      	b.n	800a090 <HAL_GPIO_Init+0x228>
 800a086:	2302      	movs	r3, #2
 800a088:	e002      	b.n	800a090 <HAL_GPIO_Init+0x228>
 800a08a:	2301      	movs	r3, #1
 800a08c:	e000      	b.n	800a090 <HAL_GPIO_Init+0x228>
 800a08e:	2300      	movs	r3, #0
 800a090:	69fa      	ldr	r2, [r7, #28]
 800a092:	f002 0203 	and.w	r2, r2, #3
 800a096:	0092      	lsls	r2, r2, #2
 800a098:	4093      	lsls	r3, r2
 800a09a:	69ba      	ldr	r2, [r7, #24]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a0a0:	4935      	ldr	r1, [pc, #212]	@ (800a178 <HAL_GPIO_Init+0x310>)
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	089b      	lsrs	r3, r3, #2
 800a0a6:	3302      	adds	r3, #2
 800a0a8:	69ba      	ldr	r2, [r7, #24]
 800a0aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a0ae:	4b3b      	ldr	r3, [pc, #236]	@ (800a19c <HAL_GPIO_Init+0x334>)
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	43db      	mvns	r3, r3
 800a0b8:	69ba      	ldr	r2, [r7, #24]
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a0d2:	4a32      	ldr	r2, [pc, #200]	@ (800a19c <HAL_GPIO_Init+0x334>)
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a0d8:	4b30      	ldr	r3, [pc, #192]	@ (800a19c <HAL_GPIO_Init+0x334>)
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	43db      	mvns	r3, r3
 800a0e2:	69ba      	ldr	r2, [r7, #24]
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d003      	beq.n	800a0fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a0f4:	69ba      	ldr	r2, [r7, #24]
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a0fc:	4a27      	ldr	r2, [pc, #156]	@ (800a19c <HAL_GPIO_Init+0x334>)
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a102:	4b26      	ldr	r3, [pc, #152]	@ (800a19c <HAL_GPIO_Init+0x334>)
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	43db      	mvns	r3, r3
 800a10c:	69ba      	ldr	r2, [r7, #24]
 800a10e:	4013      	ands	r3, r2
 800a110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d003      	beq.n	800a126 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a11e:	69ba      	ldr	r2, [r7, #24]
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	4313      	orrs	r3, r2
 800a124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a126:	4a1d      	ldr	r2, [pc, #116]	@ (800a19c <HAL_GPIO_Init+0x334>)
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a12c:	4b1b      	ldr	r3, [pc, #108]	@ (800a19c <HAL_GPIO_Init+0x334>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	43db      	mvns	r3, r3
 800a136:	69ba      	ldr	r2, [r7, #24]
 800a138:	4013      	ands	r3, r2
 800a13a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d003      	beq.n	800a150 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a148:	69ba      	ldr	r2, [r7, #24]
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a150:	4a12      	ldr	r2, [pc, #72]	@ (800a19c <HAL_GPIO_Init+0x334>)
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	3301      	adds	r3, #1
 800a15a:	61fb      	str	r3, [r7, #28]
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	2b0f      	cmp	r3, #15
 800a160:	f67f ae90 	bls.w	8009e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop
 800a168:	3724      	adds	r7, #36	@ 0x24
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	40023800 	.word	0x40023800
 800a178:	40013800 	.word	0x40013800
 800a17c:	40020000 	.word	0x40020000
 800a180:	40020400 	.word	0x40020400
 800a184:	40020800 	.word	0x40020800
 800a188:	40020c00 	.word	0x40020c00
 800a18c:	40021000 	.word	0x40021000
 800a190:	40021400 	.word	0x40021400
 800a194:	40021800 	.word	0x40021800
 800a198:	40021c00 	.word	0x40021c00
 800a19c:	40013c00 	.word	0x40013c00

0800a1a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	691a      	ldr	r2, [r3, #16]
 800a1b0:	887b      	ldrh	r3, [r7, #2]
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	73fb      	strb	r3, [r7, #15]
 800a1bc:	e001      	b.n	800a1c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	807b      	strh	r3, [r7, #2]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a1e0:	787b      	ldrb	r3, [r7, #1]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d003      	beq.n	800a1ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a1e6:	887a      	ldrh	r2, [r7, #2]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a1ec:	e003      	b.n	800a1f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a1ee:	887b      	ldrh	r3, [r7, #2]
 800a1f0:	041a      	lsls	r2, r3, #16
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	619a      	str	r2, [r3, #24]
}
 800a1f6:	bf00      	nop
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
	...

0800a204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	4603      	mov	r3, r0
 800a20c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a20e:	4b08      	ldr	r3, [pc, #32]	@ (800a230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a210:	695a      	ldr	r2, [r3, #20]
 800a212:	88fb      	ldrh	r3, [r7, #6]
 800a214:	4013      	ands	r3, r2
 800a216:	2b00      	cmp	r3, #0
 800a218:	d006      	beq.n	800a228 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a21a:	4a05      	ldr	r2, [pc, #20]	@ (800a230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a21c:	88fb      	ldrh	r3, [r7, #6]
 800a21e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a220:	88fb      	ldrh	r3, [r7, #6]
 800a222:	4618      	mov	r0, r3
 800a224:	f7fe fe12 	bl	8008e4c <HAL_GPIO_EXTI_Callback>
  }
}
 800a228:	bf00      	nop
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	40013c00 	.word	0x40013c00

0800a234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e12b      	b.n	800a49e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d106      	bne.n	800a260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7fb f870 	bl	8005340 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2224      	movs	r2, #36	@ 0x24
 800a264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f022 0201 	bic.w	r2, r2, #1
 800a276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a298:	f001 fda0 	bl	800bddc <HAL_RCC_GetPCLK1Freq>
 800a29c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	4a81      	ldr	r2, [pc, #516]	@ (800a4a8 <HAL_I2C_Init+0x274>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d807      	bhi.n	800a2b8 <HAL_I2C_Init+0x84>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	4a80      	ldr	r2, [pc, #512]	@ (800a4ac <HAL_I2C_Init+0x278>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	bf94      	ite	ls
 800a2b0:	2301      	movls	r3, #1
 800a2b2:	2300      	movhi	r3, #0
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	e006      	b.n	800a2c6 <HAL_I2C_Init+0x92>
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	4a7d      	ldr	r2, [pc, #500]	@ (800a4b0 <HAL_I2C_Init+0x27c>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	bf94      	ite	ls
 800a2c0:	2301      	movls	r3, #1
 800a2c2:	2300      	movhi	r3, #0
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e0e7      	b.n	800a49e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	4a78      	ldr	r2, [pc, #480]	@ (800a4b4 <HAL_I2C_Init+0x280>)
 800a2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2d6:	0c9b      	lsrs	r3, r3, #18
 800a2d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	430a      	orrs	r2, r1
 800a2ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	6a1b      	ldr	r3, [r3, #32]
 800a2f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	4a6a      	ldr	r2, [pc, #424]	@ (800a4a8 <HAL_I2C_Init+0x274>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d802      	bhi.n	800a308 <HAL_I2C_Init+0xd4>
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	3301      	adds	r3, #1
 800a306:	e009      	b.n	800a31c <HAL_I2C_Init+0xe8>
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a30e:	fb02 f303 	mul.w	r3, r2, r3
 800a312:	4a69      	ldr	r2, [pc, #420]	@ (800a4b8 <HAL_I2C_Init+0x284>)
 800a314:	fba2 2303 	umull	r2, r3, r2, r3
 800a318:	099b      	lsrs	r3, r3, #6
 800a31a:	3301      	adds	r3, #1
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	6812      	ldr	r2, [r2, #0]
 800a320:	430b      	orrs	r3, r1
 800a322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a32e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	495c      	ldr	r1, [pc, #368]	@ (800a4a8 <HAL_I2C_Init+0x274>)
 800a338:	428b      	cmp	r3, r1
 800a33a:	d819      	bhi.n	800a370 <HAL_I2C_Init+0x13c>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	1e59      	subs	r1, r3, #1
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	005b      	lsls	r3, r3, #1
 800a346:	fbb1 f3f3 	udiv	r3, r1, r3
 800a34a:	1c59      	adds	r1, r3, #1
 800a34c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a350:	400b      	ands	r3, r1
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <HAL_I2C_Init+0x138>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	1e59      	subs	r1, r3, #1
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	005b      	lsls	r3, r3, #1
 800a360:	fbb1 f3f3 	udiv	r3, r1, r3
 800a364:	3301      	adds	r3, #1
 800a366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a36a:	e051      	b.n	800a410 <HAL_I2C_Init+0x1dc>
 800a36c:	2304      	movs	r3, #4
 800a36e:	e04f      	b.n	800a410 <HAL_I2C_Init+0x1dc>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d111      	bne.n	800a39c <HAL_I2C_Init+0x168>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	1e58      	subs	r0, r3, #1
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6859      	ldr	r1, [r3, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	440b      	add	r3, r1
 800a386:	fbb0 f3f3 	udiv	r3, r0, r3
 800a38a:	3301      	adds	r3, #1
 800a38c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a390:	2b00      	cmp	r3, #0
 800a392:	bf0c      	ite	eq
 800a394:	2301      	moveq	r3, #1
 800a396:	2300      	movne	r3, #0
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	e012      	b.n	800a3c2 <HAL_I2C_Init+0x18e>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	1e58      	subs	r0, r3, #1
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6859      	ldr	r1, [r3, #4]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	440b      	add	r3, r1
 800a3aa:	0099      	lsls	r1, r3, #2
 800a3ac:	440b      	add	r3, r1
 800a3ae:	fbb0 f3f3 	udiv	r3, r0, r3
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	bf0c      	ite	eq
 800a3bc:	2301      	moveq	r3, #1
 800a3be:	2300      	movne	r3, #0
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d001      	beq.n	800a3ca <HAL_I2C_Init+0x196>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e022      	b.n	800a410 <HAL_I2C_Init+0x1dc>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10e      	bne.n	800a3f0 <HAL_I2C_Init+0x1bc>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	1e58      	subs	r0, r3, #1
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6859      	ldr	r1, [r3, #4]
 800a3da:	460b      	mov	r3, r1
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	440b      	add	r3, r1
 800a3e0:	fbb0 f3f3 	udiv	r3, r0, r3
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3ee:	e00f      	b.n	800a410 <HAL_I2C_Init+0x1dc>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	1e58      	subs	r0, r3, #1
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6859      	ldr	r1, [r3, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	440b      	add	r3, r1
 800a3fe:	0099      	lsls	r1, r3, #2
 800a400:	440b      	add	r3, r1
 800a402:	fbb0 f3f3 	udiv	r3, r0, r3
 800a406:	3301      	adds	r3, #1
 800a408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a40c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a410:	6879      	ldr	r1, [r7, #4]
 800a412:	6809      	ldr	r1, [r1, #0]
 800a414:	4313      	orrs	r3, r2
 800a416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	69da      	ldr	r2, [r3, #28]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	431a      	orrs	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a43e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	6911      	ldr	r1, [r2, #16]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	68d2      	ldr	r2, [r2, #12]
 800a44a:	4311      	orrs	r1, r2
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	6812      	ldr	r2, [r2, #0]
 800a450:	430b      	orrs	r3, r1
 800a452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	695a      	ldr	r2, [r3, #20]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	431a      	orrs	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	430a      	orrs	r2, r1
 800a46e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f042 0201 	orr.w	r2, r2, #1
 800a47e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2220      	movs	r2, #32
 800a48a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	000186a0 	.word	0x000186a0
 800a4ac:	001e847f 	.word	0x001e847f
 800a4b0:	003d08ff 	.word	0x003d08ff
 800a4b4:	431bde83 	.word	0x431bde83
 800a4b8:	10624dd3 	.word	0x10624dd3

0800a4bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af02      	add	r7, sp, #8
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	607a      	str	r2, [r7, #4]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	817b      	strh	r3, [r7, #10]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a4d0:	f7ff faf6 	bl	8009ac0 <HAL_GetTick>
 800a4d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b20      	cmp	r3, #32
 800a4e0:	f040 80e0 	bne.w	800a6a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	9300      	str	r3, [sp, #0]
 800a4e8:	2319      	movs	r3, #25
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	4970      	ldr	r1, [pc, #448]	@ (800a6b0 <HAL_I2C_Master_Transmit+0x1f4>)
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f000 fe0e 	bl	800b110 <I2C_WaitOnFlagUntilTimeout>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	e0d3      	b.n	800a6a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a504:	2b01      	cmp	r3, #1
 800a506:	d101      	bne.n	800a50c <HAL_I2C_Master_Transmit+0x50>
 800a508:	2302      	movs	r3, #2
 800a50a:	e0cc      	b.n	800a6a6 <HAL_I2C_Master_Transmit+0x1ea>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0301 	and.w	r3, r3, #1
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d007      	beq.n	800a532 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f042 0201 	orr.w	r2, r2, #1
 800a530:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a540:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2221      	movs	r2, #33	@ 0x21
 800a546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2210      	movs	r2, #16
 800a54e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2200      	movs	r2, #0
 800a556:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	893a      	ldrh	r2, [r7, #8]
 800a562:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a568:	b29a      	uxth	r2, r3
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	4a50      	ldr	r2, [pc, #320]	@ (800a6b4 <HAL_I2C_Master_Transmit+0x1f8>)
 800a572:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a574:	8979      	ldrh	r1, [r7, #10]
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	6a3a      	ldr	r2, [r7, #32]
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f000 fbc8 	bl	800ad10 <I2C_MasterRequestWrite>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	e08d      	b.n	800a6a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a58a:	2300      	movs	r3, #0
 800a58c:	613b      	str	r3, [r7, #16]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	695b      	ldr	r3, [r3, #20]
 800a594:	613b      	str	r3, [r7, #16]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	613b      	str	r3, [r7, #16]
 800a59e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a5a0:	e066      	b.n	800a670 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	6a39      	ldr	r1, [r7, #32]
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 fecc 	bl	800b344 <I2C_WaitOnTXEFlagUntilTimeout>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00d      	beq.n	800a5ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5b6:	2b04      	cmp	r3, #4
 800a5b8:	d107      	bne.n	800a5ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e06b      	b.n	800a6a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d2:	781a      	ldrb	r2, [r3, #0]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5de:	1c5a      	adds	r2, r3, #1
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	695b      	ldr	r3, [r3, #20]
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d11b      	bne.n	800a644 <HAL_I2C_Master_Transmit+0x188>
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a610:	2b00      	cmp	r3, #0
 800a612:	d017      	beq.n	800a644 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a618:	781a      	ldrb	r2, [r3, #0]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a624:	1c5a      	adds	r2, r3, #1
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a62e:	b29b      	uxth	r3, r3
 800a630:	3b01      	subs	r3, #1
 800a632:	b29a      	uxth	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a63c:	3b01      	subs	r3, #1
 800a63e:	b29a      	uxth	r2, r3
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	6a39      	ldr	r1, [r7, #32]
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 fec3 	bl	800b3d4 <I2C_WaitOnBTFFlagUntilTimeout>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00d      	beq.n	800a670 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a658:	2b04      	cmp	r3, #4
 800a65a:	d107      	bne.n	800a66c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a66a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	e01a      	b.n	800a6a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a674:	2b00      	cmp	r3, #0
 800a676:	d194      	bne.n	800a5a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2220      	movs	r2, #32
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	e000      	b.n	800a6a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a6a4:	2302      	movs	r3, #2
  }
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	00100002 	.word	0x00100002
 800a6b4:	ffff0000 	.word	0xffff0000

0800a6b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	4608      	mov	r0, r1
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	817b      	strh	r3, [r7, #10]
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	813b      	strh	r3, [r7, #8]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a6d2:	f7ff f9f5 	bl	8009ac0 <HAL_GetTick>
 800a6d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	2b20      	cmp	r3, #32
 800a6e2:	f040 80d9 	bne.w	800a898 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	2319      	movs	r3, #25
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	496d      	ldr	r1, [pc, #436]	@ (800a8a4 <HAL_I2C_Mem_Write+0x1ec>)
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f000 fd0d 	bl	800b110 <I2C_WaitOnFlagUntilTimeout>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d001      	beq.n	800a700 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	e0cc      	b.n	800a89a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a706:	2b01      	cmp	r3, #1
 800a708:	d101      	bne.n	800a70e <HAL_I2C_Mem_Write+0x56>
 800a70a:	2302      	movs	r3, #2
 800a70c:	e0c5      	b.n	800a89a <HAL_I2C_Mem_Write+0x1e2>
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2201      	movs	r2, #1
 800a712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 0301 	and.w	r3, r3, #1
 800a720:	2b01      	cmp	r3, #1
 800a722:	d007      	beq.n	800a734 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f042 0201 	orr.w	r2, r2, #1
 800a732:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a742:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2221      	movs	r2, #33	@ 0x21
 800a748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2240      	movs	r2, #64	@ 0x40
 800a750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6a3a      	ldr	r2, [r7, #32]
 800a75e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a764:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a76a:	b29a      	uxth	r2, r3
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	4a4d      	ldr	r2, [pc, #308]	@ (800a8a8 <HAL_I2C_Mem_Write+0x1f0>)
 800a774:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a776:	88f8      	ldrh	r0, [r7, #6]
 800a778:	893a      	ldrh	r2, [r7, #8]
 800a77a:	8979      	ldrh	r1, [r7, #10]
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	9301      	str	r3, [sp, #4]
 800a780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	4603      	mov	r3, r0
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f000 fb44 	bl	800ae14 <I2C_RequestMemoryWrite>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d052      	beq.n	800a838 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	e081      	b.n	800a89a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f000 fdd2 	bl	800b344 <I2C_WaitOnTXEFlagUntilTimeout>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00d      	beq.n	800a7c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7aa:	2b04      	cmp	r3, #4
 800a7ac:	d107      	bne.n	800a7be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e06b      	b.n	800a89a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c6:	781a      	ldrb	r2, [r3, #0]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d2:	1c5a      	adds	r2, r3, #1
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	695b      	ldr	r3, [r3, #20]
 800a7f8:	f003 0304 	and.w	r3, r3, #4
 800a7fc:	2b04      	cmp	r3, #4
 800a7fe:	d11b      	bne.n	800a838 <HAL_I2C_Mem_Write+0x180>
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a804:	2b00      	cmp	r3, #0
 800a806:	d017      	beq.n	800a838 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80c:	781a      	ldrb	r2, [r3, #0]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a818:	1c5a      	adds	r2, r3, #1
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a822:	3b01      	subs	r3, #1
 800a824:	b29a      	uxth	r2, r3
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a82e:	b29b      	uxth	r3, r3
 800a830:	3b01      	subs	r3, #1
 800a832:	b29a      	uxth	r2, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1aa      	bne.n	800a796 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a840:	697a      	ldr	r2, [r7, #20]
 800a842:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f000 fdc5 	bl	800b3d4 <I2C_WaitOnBTFFlagUntilTimeout>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00d      	beq.n	800a86c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a854:	2b04      	cmp	r3, #4
 800a856:	d107      	bne.n	800a868 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a866:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e016      	b.n	800a89a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a87a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2220      	movs	r2, #32
 800a880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	e000      	b.n	800a89a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a898:	2302      	movs	r3, #2
  }
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3718      	adds	r7, #24
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	00100002 	.word	0x00100002
 800a8a8:	ffff0000 	.word	0xffff0000

0800a8ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b08c      	sub	sp, #48	@ 0x30
 800a8b0:	af02      	add	r7, sp, #8
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	817b      	strh	r3, [r7, #10]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	813b      	strh	r3, [r7, #8]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a8c6:	f7ff f8fb 	bl	8009ac0 <HAL_GetTick>
 800a8ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	2b20      	cmp	r3, #32
 800a8d6:	f040 8214 	bne.w	800ad02 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	2319      	movs	r3, #25
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	497b      	ldr	r1, [pc, #492]	@ (800aad0 <HAL_I2C_Mem_Read+0x224>)
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f000 fc13 	bl	800b110 <I2C_WaitOnFlagUntilTimeout>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d001      	beq.n	800a8f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	e207      	b.n	800ad04 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d101      	bne.n	800a902 <HAL_I2C_Mem_Read+0x56>
 800a8fe:	2302      	movs	r3, #2
 800a900:	e200      	b.n	800ad04 <HAL_I2C_Mem_Read+0x458>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2201      	movs	r2, #1
 800a906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 0301 	and.w	r3, r3, #1
 800a914:	2b01      	cmp	r3, #1
 800a916:	d007      	beq.n	800a928 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f042 0201 	orr.w	r2, r2, #1
 800a926:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a936:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2222      	movs	r2, #34	@ 0x22
 800a93c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2240      	movs	r2, #64	@ 0x40
 800a944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2200      	movs	r2, #0
 800a94c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a952:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a958:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a95e:	b29a      	uxth	r2, r3
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	4a5b      	ldr	r2, [pc, #364]	@ (800aad4 <HAL_I2C_Mem_Read+0x228>)
 800a968:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a96a:	88f8      	ldrh	r0, [r7, #6]
 800a96c:	893a      	ldrh	r2, [r7, #8]
 800a96e:	8979      	ldrh	r1, [r7, #10]
 800a970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a972:	9301      	str	r3, [sp, #4]
 800a974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	4603      	mov	r3, r0
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f000 fae0 	bl	800af40 <I2C_RequestMemoryRead>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d001      	beq.n	800a98a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e1bc      	b.n	800ad04 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d113      	bne.n	800a9ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a992:	2300      	movs	r3, #0
 800a994:	623b      	str	r3, [r7, #32]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	695b      	ldr	r3, [r3, #20]
 800a99c:	623b      	str	r3, [r7, #32]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	623b      	str	r3, [r7, #32]
 800a9a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9b6:	601a      	str	r2, [r3, #0]
 800a9b8:	e190      	b.n	800acdc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d11b      	bne.n	800a9fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	61fb      	str	r3, [r7, #28]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	695b      	ldr	r3, [r3, #20]
 800a9dc:	61fb      	str	r3, [r7, #28]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	61fb      	str	r3, [r7, #28]
 800a9e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9f6:	601a      	str	r2, [r3, #0]
 800a9f8:	e170      	b.n	800acdc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9fe:	2b02      	cmp	r3, #2
 800aa00:	d11b      	bne.n	800aa3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa22:	2300      	movs	r3, #0
 800aa24:	61bb      	str	r3, [r7, #24]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	61bb      	str	r3, [r7, #24]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	699b      	ldr	r3, [r3, #24]
 800aa34:	61bb      	str	r3, [r7, #24]
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	e150      	b.n	800acdc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	617b      	str	r3, [r7, #20]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	695b      	ldr	r3, [r3, #20]
 800aa44:	617b      	str	r3, [r7, #20]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	617b      	str	r3, [r7, #20]
 800aa4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800aa50:	e144      	b.n	800acdc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa56:	2b03      	cmp	r3, #3
 800aa58:	f200 80f1 	bhi.w	800ac3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d123      	bne.n	800aaac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f000 fcfb 	bl	800b464 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d001      	beq.n	800aa78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e145      	b.n	800ad04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	691a      	ldr	r2, [r3, #16]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa82:	b2d2      	uxtb	r2, r2
 800aa84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa8a:	1c5a      	adds	r2, r3, #1
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa94:	3b01      	subs	r3, #1
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aaaa:	e117      	b.n	800acdc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d14e      	bne.n	800ab52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaba:	2200      	movs	r2, #0
 800aabc:	4906      	ldr	r1, [pc, #24]	@ (800aad8 <HAL_I2C_Mem_Read+0x22c>)
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f000 fb26 	bl	800b110 <I2C_WaitOnFlagUntilTimeout>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d008      	beq.n	800aadc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	e11a      	b.n	800ad04 <HAL_I2C_Mem_Read+0x458>
 800aace:	bf00      	nop
 800aad0:	00100002 	.word	0x00100002
 800aad4:	ffff0000 	.word	0xffff0000
 800aad8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aaea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	691a      	ldr	r2, [r3, #16]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf6:	b2d2      	uxtb	r2, r2
 800aaf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aafe:	1c5a      	adds	r2, r3, #1
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	b29a      	uxth	r2, r3
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	3b01      	subs	r3, #1
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	691a      	ldr	r2, [r3, #16]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab28:	b2d2      	uxtb	r2, r2
 800ab2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab30:	1c5a      	adds	r2, r3, #1
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	b29a      	uxth	r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	b29a      	uxth	r2, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ab50:	e0c4      	b.n	800acdc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ab52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab58:	2200      	movs	r2, #0
 800ab5a:	496c      	ldr	r1, [pc, #432]	@ (800ad0c <HAL_I2C_Mem_Read+0x460>)
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f000 fad7 	bl	800b110 <I2C_WaitOnFlagUntilTimeout>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e0cb      	b.n	800ad04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	691a      	ldr	r2, [r3, #16]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab86:	b2d2      	uxtb	r2, r2
 800ab88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab8e:	1c5a      	adds	r2, r3, #1
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	3b01      	subs	r3, #1
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800abae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb4:	2200      	movs	r2, #0
 800abb6:	4955      	ldr	r1, [pc, #340]	@ (800ad0c <HAL_I2C_Mem_Read+0x460>)
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f000 faa9 	bl	800b110 <I2C_WaitOnFlagUntilTimeout>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d001      	beq.n	800abc8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e09d      	b.n	800ad04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800abd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	691a      	ldr	r2, [r3, #16]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe2:	b2d2      	uxtb	r2, r2
 800abe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abea:	1c5a      	adds	r2, r3, #1
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abf4:	3b01      	subs	r3, #1
 800abf6:	b29a      	uxth	r2, r3
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	3b01      	subs	r3, #1
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	691a      	ldr	r2, [r3, #16]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac14:	b2d2      	uxtb	r2, r2
 800ac16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac1c:	1c5a      	adds	r2, r3, #1
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac26:	3b01      	subs	r3, #1
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	3b01      	subs	r3, #1
 800ac36:	b29a      	uxth	r2, r3
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ac3c:	e04e      	b.n	800acdc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f000 fc0e 	bl	800b464 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e058      	b.n	800ad04 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	691a      	ldr	r2, [r3, #16]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac5c:	b2d2      	uxtb	r2, r2
 800ac5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac64:	1c5a      	adds	r2, r3, #1
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	695b      	ldr	r3, [r3, #20]
 800ac8a:	f003 0304 	and.w	r3, r3, #4
 800ac8e:	2b04      	cmp	r3, #4
 800ac90:	d124      	bne.n	800acdc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac96:	2b03      	cmp	r3, #3
 800ac98:	d107      	bne.n	800acaa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aca8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	691a      	ldr	r2, [r3, #16]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb4:	b2d2      	uxtb	r2, r2
 800acb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acbc:	1c5a      	adds	r2, r3, #1
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acc6:	3b01      	subs	r3, #1
 800acc8:	b29a      	uxth	r2, r3
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	3b01      	subs	r3, #1
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f47f aeb6 	bne.w	800aa52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2220      	movs	r2, #32
 800acea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800acfe:	2300      	movs	r3, #0
 800ad00:	e000      	b.n	800ad04 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800ad02:	2302      	movs	r3, #2
  }
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3728      	adds	r7, #40	@ 0x28
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	00010004 	.word	0x00010004

0800ad10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b088      	sub	sp, #32
 800ad14:	af02      	add	r7, sp, #8
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	607a      	str	r2, [r7, #4]
 800ad1a:	603b      	str	r3, [r7, #0]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	2b08      	cmp	r3, #8
 800ad2a:	d006      	beq.n	800ad3a <I2C_MasterRequestWrite+0x2a>
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d003      	beq.n	800ad3a <I2C_MasterRequestWrite+0x2a>
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ad38:	d108      	bne.n	800ad4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad48:	601a      	str	r2, [r3, #0]
 800ad4a:	e00b      	b.n	800ad64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad50:	2b12      	cmp	r3, #18
 800ad52:	d107      	bne.n	800ad64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f000 f9cd 	bl	800b110 <I2C_WaitOnFlagUntilTimeout>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00d      	beq.n	800ad98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad8a:	d103      	bne.n	800ad94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ad94:	2303      	movs	r3, #3
 800ad96:	e035      	b.n	800ae04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ada0:	d108      	bne.n	800adb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ada2:	897b      	ldrh	r3, [r7, #10]
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	461a      	mov	r2, r3
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800adb0:	611a      	str	r2, [r3, #16]
 800adb2:	e01b      	b.n	800adec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800adb4:	897b      	ldrh	r3, [r7, #10]
 800adb6:	11db      	asrs	r3, r3, #7
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	f003 0306 	and.w	r3, r3, #6
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	f063 030f 	orn	r3, r3, #15
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	490e      	ldr	r1, [pc, #56]	@ (800ae0c <I2C_MasterRequestWrite+0xfc>)
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f000 fa16 	bl	800b204 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d001      	beq.n	800ade2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e010      	b.n	800ae04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ade2:	897b      	ldrh	r3, [r7, #10]
 800ade4:	b2da      	uxtb	r2, r3
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	4907      	ldr	r1, [pc, #28]	@ (800ae10 <I2C_MasterRequestWrite+0x100>)
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f000 fa06 	bl	800b204 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d001      	beq.n	800ae02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	e000      	b.n	800ae04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3718      	adds	r7, #24
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	00010008 	.word	0x00010008
 800ae10:	00010002 	.word	0x00010002

0800ae14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b088      	sub	sp, #32
 800ae18:	af02      	add	r7, sp, #8
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	4608      	mov	r0, r1
 800ae1e:	4611      	mov	r1, r2
 800ae20:	461a      	mov	r2, r3
 800ae22:	4603      	mov	r3, r0
 800ae24:	817b      	strh	r3, [r7, #10]
 800ae26:	460b      	mov	r3, r1
 800ae28:	813b      	strh	r3, [r7, #8]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	6a3b      	ldr	r3, [r7, #32]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f000 f960 	bl	800b110 <I2C_WaitOnFlagUntilTimeout>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00d      	beq.n	800ae72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae64:	d103      	bne.n	800ae6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	e05f      	b.n	800af32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ae72:	897b      	ldrh	r3, [r7, #10]
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	461a      	mov	r2, r3
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ae80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae84:	6a3a      	ldr	r2, [r7, #32]
 800ae86:	492d      	ldr	r1, [pc, #180]	@ (800af3c <I2C_RequestMemoryWrite+0x128>)
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f000 f9bb 	bl	800b204 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d001      	beq.n	800ae98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	e04c      	b.n	800af32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae98:	2300      	movs	r3, #0
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	617b      	str	r3, [r7, #20]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	699b      	ldr	r3, [r3, #24]
 800aeaa:	617b      	str	r3, [r7, #20]
 800aeac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aeae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeb0:	6a39      	ldr	r1, [r7, #32]
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f000 fa46 	bl	800b344 <I2C_WaitOnTXEFlagUntilTimeout>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00d      	beq.n	800aeda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aec2:	2b04      	cmp	r3, #4
 800aec4:	d107      	bne.n	800aed6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aed4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e02b      	b.n	800af32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aeda:	88fb      	ldrh	r3, [r7, #6]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d105      	bne.n	800aeec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aee0:	893b      	ldrh	r3, [r7, #8]
 800aee2:	b2da      	uxtb	r2, r3
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	611a      	str	r2, [r3, #16]
 800aeea:	e021      	b.n	800af30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aeec:	893b      	ldrh	r3, [r7, #8]
 800aeee:	0a1b      	lsrs	r3, r3, #8
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aefa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aefc:	6a39      	ldr	r1, [r7, #32]
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f000 fa20 	bl	800b344 <I2C_WaitOnTXEFlagUntilTimeout>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00d      	beq.n	800af26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af0e:	2b04      	cmp	r3, #4
 800af10:	d107      	bne.n	800af22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	e005      	b.n	800af32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800af26:	893b      	ldrh	r3, [r7, #8]
 800af28:	b2da      	uxtb	r2, r3
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3718      	adds	r7, #24
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	00010002 	.word	0x00010002

0800af40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b088      	sub	sp, #32
 800af44:	af02      	add	r7, sp, #8
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	4608      	mov	r0, r1
 800af4a:	4611      	mov	r1, r2
 800af4c:	461a      	mov	r2, r3
 800af4e:	4603      	mov	r3, r0
 800af50:	817b      	strh	r3, [r7, #10]
 800af52:	460b      	mov	r3, r1
 800af54:	813b      	strh	r3, [r7, #8]
 800af56:	4613      	mov	r3, r2
 800af58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800af68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800af7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	6a3b      	ldr	r3, [r7, #32]
 800af80:	2200      	movs	r2, #0
 800af82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f000 f8c2 	bl	800b110 <I2C_WaitOnFlagUntilTimeout>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00d      	beq.n	800afae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afa0:	d103      	bne.n	800afaa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afa8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800afaa:	2303      	movs	r3, #3
 800afac:	e0aa      	b.n	800b104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800afae:	897b      	ldrh	r3, [r7, #10]
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	461a      	mov	r2, r3
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800afbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800afbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc0:	6a3a      	ldr	r2, [r7, #32]
 800afc2:	4952      	ldr	r1, [pc, #328]	@ (800b10c <I2C_RequestMemoryRead+0x1cc>)
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f000 f91d 	bl	800b204 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d001      	beq.n	800afd4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e097      	b.n	800b104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afd4:	2300      	movs	r3, #0
 800afd6:	617b      	str	r3, [r7, #20]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	617b      	str	r3, [r7, #20]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	617b      	str	r3, [r7, #20]
 800afe8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800afea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afec:	6a39      	ldr	r1, [r7, #32]
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f000 f9a8 	bl	800b344 <I2C_WaitOnTXEFlagUntilTimeout>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00d      	beq.n	800b016 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800affe:	2b04      	cmp	r3, #4
 800b000:	d107      	bne.n	800b012 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b010:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e076      	b.n	800b104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b016:	88fb      	ldrh	r3, [r7, #6]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d105      	bne.n	800b028 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b01c:	893b      	ldrh	r3, [r7, #8]
 800b01e:	b2da      	uxtb	r2, r3
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	611a      	str	r2, [r3, #16]
 800b026:	e021      	b.n	800b06c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b028:	893b      	ldrh	r3, [r7, #8]
 800b02a:	0a1b      	lsrs	r3, r3, #8
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b038:	6a39      	ldr	r1, [r7, #32]
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f000 f982 	bl	800b344 <I2C_WaitOnTXEFlagUntilTimeout>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00d      	beq.n	800b062 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b04a:	2b04      	cmp	r3, #4
 800b04c:	d107      	bne.n	800b05e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b05c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	e050      	b.n	800b104 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b062:	893b      	ldrh	r3, [r7, #8]
 800b064:	b2da      	uxtb	r2, r3
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b06c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b06e:	6a39      	ldr	r1, [r7, #32]
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f000 f967 	bl	800b344 <I2C_WaitOnTXEFlagUntilTimeout>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00d      	beq.n	800b098 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b080:	2b04      	cmp	r3, #4
 800b082:	d107      	bne.n	800b094 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b092:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	e035      	b.n	800b104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b0a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f000 f82b 	bl	800b110 <I2C_WaitOnFlagUntilTimeout>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00d      	beq.n	800b0dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0ce:	d103      	bne.n	800b0d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b0d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b0d8:	2303      	movs	r3, #3
 800b0da:	e013      	b.n	800b104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b0dc:	897b      	ldrh	r3, [r7, #10]
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	f043 0301 	orr.w	r3, r3, #1
 800b0e4:	b2da      	uxtb	r2, r3
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ee:	6a3a      	ldr	r2, [r7, #32]
 800b0f0:	4906      	ldr	r1, [pc, #24]	@ (800b10c <I2C_RequestMemoryRead+0x1cc>)
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f000 f886 	bl	800b204 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	e000      	b.n	800b104 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	00010002 	.word	0x00010002

0800b110 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	603b      	str	r3, [r7, #0]
 800b11c:	4613      	mov	r3, r2
 800b11e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b120:	e048      	b.n	800b1b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b128:	d044      	beq.n	800b1b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b12a:	f7fe fcc9 	bl	8009ac0 <HAL_GetTick>
 800b12e:	4602      	mov	r2, r0
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	1ad3      	subs	r3, r2, r3
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	429a      	cmp	r2, r3
 800b138:	d302      	bcc.n	800b140 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d139      	bne.n	800b1b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	0c1b      	lsrs	r3, r3, #16
 800b144:	b2db      	uxtb	r3, r3
 800b146:	2b01      	cmp	r3, #1
 800b148:	d10d      	bne.n	800b166 <I2C_WaitOnFlagUntilTimeout+0x56>
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	43da      	mvns	r2, r3
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	4013      	ands	r3, r2
 800b156:	b29b      	uxth	r3, r3
 800b158:	2b00      	cmp	r3, #0
 800b15a:	bf0c      	ite	eq
 800b15c:	2301      	moveq	r3, #1
 800b15e:	2300      	movne	r3, #0
 800b160:	b2db      	uxtb	r3, r3
 800b162:	461a      	mov	r2, r3
 800b164:	e00c      	b.n	800b180 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	43da      	mvns	r2, r3
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	4013      	ands	r3, r2
 800b172:	b29b      	uxth	r3, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	bf0c      	ite	eq
 800b178:	2301      	moveq	r3, #1
 800b17a:	2300      	movne	r3, #0
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	461a      	mov	r2, r3
 800b180:	79fb      	ldrb	r3, [r7, #7]
 800b182:	429a      	cmp	r2, r3
 800b184:	d116      	bne.n	800b1b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2220      	movs	r2, #32
 800b190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1a0:	f043 0220 	orr.w	r2, r3, #32
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e023      	b.n	800b1fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	0c1b      	lsrs	r3, r3, #16
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d10d      	bne.n	800b1da <I2C_WaitOnFlagUntilTimeout+0xca>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	695b      	ldr	r3, [r3, #20]
 800b1c4:	43da      	mvns	r2, r3
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	4013      	ands	r3, r2
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	bf0c      	ite	eq
 800b1d0:	2301      	moveq	r3, #1
 800b1d2:	2300      	movne	r3, #0
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	e00c      	b.n	800b1f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	699b      	ldr	r3, [r3, #24]
 800b1e0:	43da      	mvns	r2, r3
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	bf0c      	ite	eq
 800b1ec:	2301      	moveq	r3, #1
 800b1ee:	2300      	movne	r3, #0
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	79fb      	ldrb	r3, [r7, #7]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d093      	beq.n	800b122 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
 800b210:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b212:	e071      	b.n	800b2f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	695b      	ldr	r3, [r3, #20]
 800b21a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b21e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b222:	d123      	bne.n	800b26c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b232:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b23c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2220      	movs	r2, #32
 800b248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b258:	f043 0204 	orr.w	r2, r3, #4
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	e067      	b.n	800b33c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b272:	d041      	beq.n	800b2f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b274:	f7fe fc24 	bl	8009ac0 <HAL_GetTick>
 800b278:	4602      	mov	r2, r0
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	429a      	cmp	r2, r3
 800b282:	d302      	bcc.n	800b28a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d136      	bne.n	800b2f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	0c1b      	lsrs	r3, r3, #16
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	2b01      	cmp	r3, #1
 800b292:	d10c      	bne.n	800b2ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	695b      	ldr	r3, [r3, #20]
 800b29a:	43da      	mvns	r2, r3
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	4013      	ands	r3, r2
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	bf14      	ite	ne
 800b2a6:	2301      	movne	r3, #1
 800b2a8:	2300      	moveq	r3, #0
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	e00b      	b.n	800b2c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	699b      	ldr	r3, [r3, #24]
 800b2b4:	43da      	mvns	r2, r3
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	bf14      	ite	ne
 800b2c0:	2301      	movne	r3, #1
 800b2c2:	2300      	moveq	r3, #0
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d016      	beq.n	800b2f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2220      	movs	r2, #32
 800b2d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2e4:	f043 0220 	orr.w	r2, r3, #32
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e021      	b.n	800b33c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	0c1b      	lsrs	r3, r3, #16
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d10c      	bne.n	800b31c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	695b      	ldr	r3, [r3, #20]
 800b308:	43da      	mvns	r2, r3
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	4013      	ands	r3, r2
 800b30e:	b29b      	uxth	r3, r3
 800b310:	2b00      	cmp	r3, #0
 800b312:	bf14      	ite	ne
 800b314:	2301      	movne	r3, #1
 800b316:	2300      	moveq	r3, #0
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	e00b      	b.n	800b334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	699b      	ldr	r3, [r3, #24]
 800b322:	43da      	mvns	r2, r3
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	4013      	ands	r3, r2
 800b328:	b29b      	uxth	r3, r3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	bf14      	ite	ne
 800b32e:	2301      	movne	r3, #1
 800b330:	2300      	moveq	r3, #0
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b00      	cmp	r3, #0
 800b336:	f47f af6d 	bne.w	800b214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3710      	adds	r7, #16
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b350:	e034      	b.n	800b3bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f000 f8e3 	bl	800b51e <I2C_IsAcknowledgeFailed>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d001      	beq.n	800b362 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	e034      	b.n	800b3cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b368:	d028      	beq.n	800b3bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b36a:	f7fe fba9 	bl	8009ac0 <HAL_GetTick>
 800b36e:	4602      	mov	r2, r0
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	68ba      	ldr	r2, [r7, #8]
 800b376:	429a      	cmp	r2, r3
 800b378:	d302      	bcc.n	800b380 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d11d      	bne.n	800b3bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b38a:	2b80      	cmp	r3, #128	@ 0x80
 800b38c:	d016      	beq.n	800b3bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2220      	movs	r2, #32
 800b398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3a8:	f043 0220 	orr.w	r2, r3, #32
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e007      	b.n	800b3cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3c6:	2b80      	cmp	r3, #128	@ 0x80
 800b3c8:	d1c3      	bne.n	800b352 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b3e0:	e034      	b.n	800b44c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f000 f89b 	bl	800b51e <I2C_IsAcknowledgeFailed>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e034      	b.n	800b45c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f8:	d028      	beq.n	800b44c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3fa:	f7fe fb61 	bl	8009ac0 <HAL_GetTick>
 800b3fe:	4602      	mov	r2, r0
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	68ba      	ldr	r2, [r7, #8]
 800b406:	429a      	cmp	r2, r3
 800b408:	d302      	bcc.n	800b410 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d11d      	bne.n	800b44c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	695b      	ldr	r3, [r3, #20]
 800b416:	f003 0304 	and.w	r3, r3, #4
 800b41a:	2b04      	cmp	r3, #4
 800b41c:	d016      	beq.n	800b44c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2200      	movs	r2, #0
 800b422:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2220      	movs	r2, #32
 800b428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2200      	movs	r2, #0
 800b430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b438:	f043 0220 	orr.w	r2, r3, #32
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	e007      	b.n	800b45c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	f003 0304 	and.w	r3, r3, #4
 800b456:	2b04      	cmp	r3, #4
 800b458:	d1c3      	bne.n	800b3e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b470:	e049      	b.n	800b506 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	695b      	ldr	r3, [r3, #20]
 800b478:	f003 0310 	and.w	r3, r3, #16
 800b47c:	2b10      	cmp	r3, #16
 800b47e:	d119      	bne.n	800b4b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f06f 0210 	mvn.w	r2, #16
 800b488:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2220      	movs	r2, #32
 800b494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e030      	b.n	800b516 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4b4:	f7fe fb04 	bl	8009ac0 <HAL_GetTick>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d302      	bcc.n	800b4ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d11d      	bne.n	800b506 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4d4:	2b40      	cmp	r3, #64	@ 0x40
 800b4d6:	d016      	beq.n	800b506 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2220      	movs	r2, #32
 800b4e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4f2:	f043 0220 	orr.w	r2, r3, #32
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b502:	2301      	movs	r3, #1
 800b504:	e007      	b.n	800b516 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	695b      	ldr	r3, [r3, #20]
 800b50c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b510:	2b40      	cmp	r3, #64	@ 0x40
 800b512:	d1ae      	bne.n	800b472 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b51e:	b480      	push	{r7}
 800b520:	b083      	sub	sp, #12
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	695b      	ldr	r3, [r3, #20]
 800b52c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b534:	d11b      	bne.n	800b56e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b53e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2220      	movs	r2, #32
 800b54a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b55a:	f043 0204 	orr.w	r2, r3, #4
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	e000      	b.n	800b570 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b086      	sub	sp, #24
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d101      	bne.n	800b58e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	e267      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f003 0301 	and.w	r3, r3, #1
 800b596:	2b00      	cmp	r3, #0
 800b598:	d075      	beq.n	800b686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b59a:	4b88      	ldr	r3, [pc, #544]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	f003 030c 	and.w	r3, r3, #12
 800b5a2:	2b04      	cmp	r3, #4
 800b5a4:	d00c      	beq.n	800b5c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b5a6:	4b85      	ldr	r3, [pc, #532]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b5ae:	2b08      	cmp	r3, #8
 800b5b0:	d112      	bne.n	800b5d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b5b2:	4b82      	ldr	r3, [pc, #520]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b5be:	d10b      	bne.n	800b5d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5c0:	4b7e      	ldr	r3, [pc, #504]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d05b      	beq.n	800b684 <HAL_RCC_OscConfig+0x108>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d157      	bne.n	800b684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e242      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5e0:	d106      	bne.n	800b5f0 <HAL_RCC_OscConfig+0x74>
 800b5e2:	4b76      	ldr	r3, [pc, #472]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a75      	ldr	r2, [pc, #468]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b5e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5ec:	6013      	str	r3, [r2, #0]
 800b5ee:	e01d      	b.n	800b62c <HAL_RCC_OscConfig+0xb0>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b5f8:	d10c      	bne.n	800b614 <HAL_RCC_OscConfig+0x98>
 800b5fa:	4b70      	ldr	r3, [pc, #448]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a6f      	ldr	r2, [pc, #444]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b604:	6013      	str	r3, [r2, #0]
 800b606:	4b6d      	ldr	r3, [pc, #436]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a6c      	ldr	r2, [pc, #432]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b60c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b610:	6013      	str	r3, [r2, #0]
 800b612:	e00b      	b.n	800b62c <HAL_RCC_OscConfig+0xb0>
 800b614:	4b69      	ldr	r3, [pc, #420]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a68      	ldr	r2, [pc, #416]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b61a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b61e:	6013      	str	r3, [r2, #0]
 800b620:	4b66      	ldr	r3, [pc, #408]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a65      	ldr	r2, [pc, #404]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b62a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d013      	beq.n	800b65c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b634:	f7fe fa44 	bl	8009ac0 <HAL_GetTick>
 800b638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b63a:	e008      	b.n	800b64e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b63c:	f7fe fa40 	bl	8009ac0 <HAL_GetTick>
 800b640:	4602      	mov	r2, r0
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	2b64      	cmp	r3, #100	@ 0x64
 800b648:	d901      	bls.n	800b64e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b64a:	2303      	movs	r3, #3
 800b64c:	e207      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b64e:	4b5b      	ldr	r3, [pc, #364]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b656:	2b00      	cmp	r3, #0
 800b658:	d0f0      	beq.n	800b63c <HAL_RCC_OscConfig+0xc0>
 800b65a:	e014      	b.n	800b686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b65c:	f7fe fa30 	bl	8009ac0 <HAL_GetTick>
 800b660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b662:	e008      	b.n	800b676 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b664:	f7fe fa2c 	bl	8009ac0 <HAL_GetTick>
 800b668:	4602      	mov	r2, r0
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	2b64      	cmp	r3, #100	@ 0x64
 800b670:	d901      	bls.n	800b676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b672:	2303      	movs	r3, #3
 800b674:	e1f3      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b676:	4b51      	ldr	r3, [pc, #324]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1f0      	bne.n	800b664 <HAL_RCC_OscConfig+0xe8>
 800b682:	e000      	b.n	800b686 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 0302 	and.w	r3, r3, #2
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d063      	beq.n	800b75a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b692:	4b4a      	ldr	r3, [pc, #296]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	f003 030c 	and.w	r3, r3, #12
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00b      	beq.n	800b6b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b69e:	4b47      	ldr	r3, [pc, #284]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b6a6:	2b08      	cmp	r3, #8
 800b6a8:	d11c      	bne.n	800b6e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b6aa:	4b44      	ldr	r3, [pc, #272]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d116      	bne.n	800b6e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b6b6:	4b41      	ldr	r3, [pc, #260]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f003 0302 	and.w	r3, r3, #2
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d005      	beq.n	800b6ce <HAL_RCC_OscConfig+0x152>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d001      	beq.n	800b6ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e1c7      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6ce:	4b3b      	ldr	r3, [pc, #236]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	00db      	lsls	r3, r3, #3
 800b6dc:	4937      	ldr	r1, [pc, #220]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b6e2:	e03a      	b.n	800b75a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d020      	beq.n	800b72e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b6ec:	4b34      	ldr	r3, [pc, #208]	@ (800b7c0 <HAL_RCC_OscConfig+0x244>)
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6f2:	f7fe f9e5 	bl	8009ac0 <HAL_GetTick>
 800b6f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6f8:	e008      	b.n	800b70c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b6fa:	f7fe f9e1 	bl	8009ac0 <HAL_GetTick>
 800b6fe:	4602      	mov	r2, r0
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	2b02      	cmp	r3, #2
 800b706:	d901      	bls.n	800b70c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b708:	2303      	movs	r3, #3
 800b70a:	e1a8      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b70c:	4b2b      	ldr	r3, [pc, #172]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f003 0302 	and.w	r3, r3, #2
 800b714:	2b00      	cmp	r3, #0
 800b716:	d0f0      	beq.n	800b6fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b718:	4b28      	ldr	r3, [pc, #160]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	691b      	ldr	r3, [r3, #16]
 800b724:	00db      	lsls	r3, r3, #3
 800b726:	4925      	ldr	r1, [pc, #148]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b728:	4313      	orrs	r3, r2
 800b72a:	600b      	str	r3, [r1, #0]
 800b72c:	e015      	b.n	800b75a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b72e:	4b24      	ldr	r3, [pc, #144]	@ (800b7c0 <HAL_RCC_OscConfig+0x244>)
 800b730:	2200      	movs	r2, #0
 800b732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b734:	f7fe f9c4 	bl	8009ac0 <HAL_GetTick>
 800b738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b73a:	e008      	b.n	800b74e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b73c:	f7fe f9c0 	bl	8009ac0 <HAL_GetTick>
 800b740:	4602      	mov	r2, r0
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	1ad3      	subs	r3, r2, r3
 800b746:	2b02      	cmp	r3, #2
 800b748:	d901      	bls.n	800b74e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b74a:	2303      	movs	r3, #3
 800b74c:	e187      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b74e:	4b1b      	ldr	r3, [pc, #108]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f003 0302 	and.w	r3, r3, #2
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1f0      	bne.n	800b73c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 0308 	and.w	r3, r3, #8
 800b762:	2b00      	cmp	r3, #0
 800b764:	d036      	beq.n	800b7d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	695b      	ldr	r3, [r3, #20]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d016      	beq.n	800b79c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b76e:	4b15      	ldr	r3, [pc, #84]	@ (800b7c4 <HAL_RCC_OscConfig+0x248>)
 800b770:	2201      	movs	r2, #1
 800b772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b774:	f7fe f9a4 	bl	8009ac0 <HAL_GetTick>
 800b778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b77a:	e008      	b.n	800b78e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b77c:	f7fe f9a0 	bl	8009ac0 <HAL_GetTick>
 800b780:	4602      	mov	r2, r0
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	1ad3      	subs	r3, r2, r3
 800b786:	2b02      	cmp	r3, #2
 800b788:	d901      	bls.n	800b78e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b78a:	2303      	movs	r3, #3
 800b78c:	e167      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b78e:	4b0b      	ldr	r3, [pc, #44]	@ (800b7bc <HAL_RCC_OscConfig+0x240>)
 800b790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b792:	f003 0302 	and.w	r3, r3, #2
 800b796:	2b00      	cmp	r3, #0
 800b798:	d0f0      	beq.n	800b77c <HAL_RCC_OscConfig+0x200>
 800b79a:	e01b      	b.n	800b7d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b79c:	4b09      	ldr	r3, [pc, #36]	@ (800b7c4 <HAL_RCC_OscConfig+0x248>)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b7a2:	f7fe f98d 	bl	8009ac0 <HAL_GetTick>
 800b7a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b7a8:	e00e      	b.n	800b7c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b7aa:	f7fe f989 	bl	8009ac0 <HAL_GetTick>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d907      	bls.n	800b7c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b7b8:	2303      	movs	r3, #3
 800b7ba:	e150      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
 800b7bc:	40023800 	.word	0x40023800
 800b7c0:	42470000 	.word	0x42470000
 800b7c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b7c8:	4b88      	ldr	r3, [pc, #544]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b7ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7cc:	f003 0302 	and.w	r3, r3, #2
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1ea      	bne.n	800b7aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f003 0304 	and.w	r3, r3, #4
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 8097 	beq.w	800b910 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b7e6:	4b81      	ldr	r3, [pc, #516]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b7e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10f      	bne.n	800b812 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	60bb      	str	r3, [r7, #8]
 800b7f6:	4b7d      	ldr	r3, [pc, #500]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b7f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7fa:	4a7c      	ldr	r2, [pc, #496]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b7fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b800:	6413      	str	r3, [r2, #64]	@ 0x40
 800b802:	4b7a      	ldr	r3, [pc, #488]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b80a:	60bb      	str	r3, [r7, #8]
 800b80c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b80e:	2301      	movs	r3, #1
 800b810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b812:	4b77      	ldr	r3, [pc, #476]	@ (800b9f0 <HAL_RCC_OscConfig+0x474>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d118      	bne.n	800b850 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b81e:	4b74      	ldr	r3, [pc, #464]	@ (800b9f0 <HAL_RCC_OscConfig+0x474>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a73      	ldr	r2, [pc, #460]	@ (800b9f0 <HAL_RCC_OscConfig+0x474>)
 800b824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b82a:	f7fe f949 	bl	8009ac0 <HAL_GetTick>
 800b82e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b830:	e008      	b.n	800b844 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b832:	f7fe f945 	bl	8009ac0 <HAL_GetTick>
 800b836:	4602      	mov	r2, r0
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	d901      	bls.n	800b844 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b840:	2303      	movs	r3, #3
 800b842:	e10c      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b844:	4b6a      	ldr	r3, [pc, #424]	@ (800b9f0 <HAL_RCC_OscConfig+0x474>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d0f0      	beq.n	800b832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d106      	bne.n	800b866 <HAL_RCC_OscConfig+0x2ea>
 800b858:	4b64      	ldr	r3, [pc, #400]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b85a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b85c:	4a63      	ldr	r2, [pc, #396]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b85e:	f043 0301 	orr.w	r3, r3, #1
 800b862:	6713      	str	r3, [r2, #112]	@ 0x70
 800b864:	e01c      	b.n	800b8a0 <HAL_RCC_OscConfig+0x324>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	2b05      	cmp	r3, #5
 800b86c:	d10c      	bne.n	800b888 <HAL_RCC_OscConfig+0x30c>
 800b86e:	4b5f      	ldr	r3, [pc, #380]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b872:	4a5e      	ldr	r2, [pc, #376]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b874:	f043 0304 	orr.w	r3, r3, #4
 800b878:	6713      	str	r3, [r2, #112]	@ 0x70
 800b87a:	4b5c      	ldr	r3, [pc, #368]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b87c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b87e:	4a5b      	ldr	r2, [pc, #364]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b880:	f043 0301 	orr.w	r3, r3, #1
 800b884:	6713      	str	r3, [r2, #112]	@ 0x70
 800b886:	e00b      	b.n	800b8a0 <HAL_RCC_OscConfig+0x324>
 800b888:	4b58      	ldr	r3, [pc, #352]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b88a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b88c:	4a57      	ldr	r2, [pc, #348]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b88e:	f023 0301 	bic.w	r3, r3, #1
 800b892:	6713      	str	r3, [r2, #112]	@ 0x70
 800b894:	4b55      	ldr	r3, [pc, #340]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b898:	4a54      	ldr	r2, [pc, #336]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b89a:	f023 0304 	bic.w	r3, r3, #4
 800b89e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d015      	beq.n	800b8d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8a8:	f7fe f90a 	bl	8009ac0 <HAL_GetTick>
 800b8ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8ae:	e00a      	b.n	800b8c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8b0:	f7fe f906 	bl	8009ac0 <HAL_GetTick>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d901      	bls.n	800b8c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b8c2:	2303      	movs	r3, #3
 800b8c4:	e0cb      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b8c6:	4b49      	ldr	r3, [pc, #292]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b8c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8ca:	f003 0302 	and.w	r3, r3, #2
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d0ee      	beq.n	800b8b0 <HAL_RCC_OscConfig+0x334>
 800b8d2:	e014      	b.n	800b8fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b8d4:	f7fe f8f4 	bl	8009ac0 <HAL_GetTick>
 800b8d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b8da:	e00a      	b.n	800b8f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8dc:	f7fe f8f0 	bl	8009ac0 <HAL_GetTick>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d901      	bls.n	800b8f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b8ee:	2303      	movs	r3, #3
 800b8f0:	e0b5      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b8f2:	4b3e      	ldr	r3, [pc, #248]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b8f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8f6:	f003 0302 	and.w	r3, r3, #2
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d1ee      	bne.n	800b8dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b8fe:	7dfb      	ldrb	r3, [r7, #23]
 800b900:	2b01      	cmp	r3, #1
 800b902:	d105      	bne.n	800b910 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b904:	4b39      	ldr	r3, [pc, #228]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b908:	4a38      	ldr	r2, [pc, #224]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b90a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b90e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	699b      	ldr	r3, [r3, #24]
 800b914:	2b00      	cmp	r3, #0
 800b916:	f000 80a1 	beq.w	800ba5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b91a:	4b34      	ldr	r3, [pc, #208]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	f003 030c 	and.w	r3, r3, #12
 800b922:	2b08      	cmp	r3, #8
 800b924:	d05c      	beq.n	800b9e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	699b      	ldr	r3, [r3, #24]
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d141      	bne.n	800b9b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b92e:	4b31      	ldr	r3, [pc, #196]	@ (800b9f4 <HAL_RCC_OscConfig+0x478>)
 800b930:	2200      	movs	r2, #0
 800b932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b934:	f7fe f8c4 	bl	8009ac0 <HAL_GetTick>
 800b938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b93a:	e008      	b.n	800b94e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b93c:	f7fe f8c0 	bl	8009ac0 <HAL_GetTick>
 800b940:	4602      	mov	r2, r0
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	2b02      	cmp	r3, #2
 800b948:	d901      	bls.n	800b94e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b94a:	2303      	movs	r3, #3
 800b94c:	e087      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b94e:	4b27      	ldr	r3, [pc, #156]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1f0      	bne.n	800b93c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	69da      	ldr	r2, [r3, #28]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a1b      	ldr	r3, [r3, #32]
 800b962:	431a      	orrs	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b968:	019b      	lsls	r3, r3, #6
 800b96a:	431a      	orrs	r2, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b970:	085b      	lsrs	r3, r3, #1
 800b972:	3b01      	subs	r3, #1
 800b974:	041b      	lsls	r3, r3, #16
 800b976:	431a      	orrs	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b97c:	061b      	lsls	r3, r3, #24
 800b97e:	491b      	ldr	r1, [pc, #108]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b980:	4313      	orrs	r3, r2
 800b982:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b984:	4b1b      	ldr	r3, [pc, #108]	@ (800b9f4 <HAL_RCC_OscConfig+0x478>)
 800b986:	2201      	movs	r2, #1
 800b988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b98a:	f7fe f899 	bl	8009ac0 <HAL_GetTick>
 800b98e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b990:	e008      	b.n	800b9a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b992:	f7fe f895 	bl	8009ac0 <HAL_GetTick>
 800b996:	4602      	mov	r2, r0
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	2b02      	cmp	r3, #2
 800b99e:	d901      	bls.n	800b9a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	e05c      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9a4:	4b11      	ldr	r3, [pc, #68]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d0f0      	beq.n	800b992 <HAL_RCC_OscConfig+0x416>
 800b9b0:	e054      	b.n	800ba5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b9b2:	4b10      	ldr	r3, [pc, #64]	@ (800b9f4 <HAL_RCC_OscConfig+0x478>)
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b9b8:	f7fe f882 	bl	8009ac0 <HAL_GetTick>
 800b9bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9be:	e008      	b.n	800b9d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9c0:	f7fe f87e 	bl	8009ac0 <HAL_GetTick>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	1ad3      	subs	r3, r2, r3
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d901      	bls.n	800b9d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	e045      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b9d2:	4b06      	ldr	r3, [pc, #24]	@ (800b9ec <HAL_RCC_OscConfig+0x470>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d1f0      	bne.n	800b9c0 <HAL_RCC_OscConfig+0x444>
 800b9de:	e03d      	b.n	800ba5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	699b      	ldr	r3, [r3, #24]
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d107      	bne.n	800b9f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e038      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
 800b9ec:	40023800 	.word	0x40023800
 800b9f0:	40007000 	.word	0x40007000
 800b9f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b9f8:	4b1b      	ldr	r3, [pc, #108]	@ (800ba68 <HAL_RCC_OscConfig+0x4ec>)
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d028      	beq.n	800ba58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d121      	bne.n	800ba58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d11a      	bne.n	800ba58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ba28:	4013      	ands	r3, r2
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ba2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d111      	bne.n	800ba58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba3e:	085b      	lsrs	r3, r3, #1
 800ba40:	3b01      	subs	r3, #1
 800ba42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d107      	bne.n	800ba58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d001      	beq.n	800ba5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e000      	b.n	800ba5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3718      	adds	r7, #24
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	40023800 	.word	0x40023800

0800ba6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d101      	bne.n	800ba80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e0cc      	b.n	800bc1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ba80:	4b68      	ldr	r3, [pc, #416]	@ (800bc24 <HAL_RCC_ClockConfig+0x1b8>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 0307 	and.w	r3, r3, #7
 800ba88:	683a      	ldr	r2, [r7, #0]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d90c      	bls.n	800baa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba8e:	4b65      	ldr	r3, [pc, #404]	@ (800bc24 <HAL_RCC_ClockConfig+0x1b8>)
 800ba90:	683a      	ldr	r2, [r7, #0]
 800ba92:	b2d2      	uxtb	r2, r2
 800ba94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba96:	4b63      	ldr	r3, [pc, #396]	@ (800bc24 <HAL_RCC_ClockConfig+0x1b8>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f003 0307 	and.w	r3, r3, #7
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d001      	beq.n	800baa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800baa4:	2301      	movs	r3, #1
 800baa6:	e0b8      	b.n	800bc1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f003 0302 	and.w	r3, r3, #2
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d020      	beq.n	800baf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 0304 	and.w	r3, r3, #4
 800babc:	2b00      	cmp	r3, #0
 800babe:	d005      	beq.n	800bacc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bac0:	4b59      	ldr	r3, [pc, #356]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	4a58      	ldr	r2, [pc, #352]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bac6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800baca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0308 	and.w	r3, r3, #8
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d005      	beq.n	800bae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bad8:	4b53      	ldr	r3, [pc, #332]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	4a52      	ldr	r2, [pc, #328]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bade:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800bae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bae4:	4b50      	ldr	r3, [pc, #320]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	494d      	ldr	r1, [pc, #308]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800baf2:	4313      	orrs	r3, r2
 800baf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f003 0301 	and.w	r3, r3, #1
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d044      	beq.n	800bb8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d107      	bne.n	800bb1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb0a:	4b47      	ldr	r3, [pc, #284]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d119      	bne.n	800bb4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb16:	2301      	movs	r3, #1
 800bb18:	e07f      	b.n	800bc1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d003      	beq.n	800bb2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bb26:	2b03      	cmp	r3, #3
 800bb28:	d107      	bne.n	800bb3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb2a:	4b3f      	ldr	r3, [pc, #252]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d109      	bne.n	800bb4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	e06f      	b.n	800bc1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb3a:	4b3b      	ldr	r3, [pc, #236]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f003 0302 	and.w	r3, r3, #2
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d101      	bne.n	800bb4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	e067      	b.n	800bc1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bb4a:	4b37      	ldr	r3, [pc, #220]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	f023 0203 	bic.w	r2, r3, #3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	4934      	ldr	r1, [pc, #208]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bb5c:	f7fd ffb0 	bl	8009ac0 <HAL_GetTick>
 800bb60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb62:	e00a      	b.n	800bb7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb64:	f7fd ffac 	bl	8009ac0 <HAL_GetTick>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d901      	bls.n	800bb7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bb76:	2303      	movs	r3, #3
 800bb78:	e04f      	b.n	800bc1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb7a:	4b2b      	ldr	r3, [pc, #172]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	f003 020c 	and.w	r2, r3, #12
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d1eb      	bne.n	800bb64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bb8c:	4b25      	ldr	r3, [pc, #148]	@ (800bc24 <HAL_RCC_ClockConfig+0x1b8>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 0307 	and.w	r3, r3, #7
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d20c      	bcs.n	800bbb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb9a:	4b22      	ldr	r3, [pc, #136]	@ (800bc24 <HAL_RCC_ClockConfig+0x1b8>)
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	b2d2      	uxtb	r2, r2
 800bba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bba2:	4b20      	ldr	r3, [pc, #128]	@ (800bc24 <HAL_RCC_ClockConfig+0x1b8>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f003 0307 	and.w	r3, r3, #7
 800bbaa:	683a      	ldr	r2, [r7, #0]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d001      	beq.n	800bbb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e032      	b.n	800bc1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f003 0304 	and.w	r3, r3, #4
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d008      	beq.n	800bbd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bbc0:	4b19      	ldr	r3, [pc, #100]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	4916      	ldr	r1, [pc, #88]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f003 0308 	and.w	r3, r3, #8
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d009      	beq.n	800bbf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bbde:	4b12      	ldr	r3, [pc, #72]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	00db      	lsls	r3, r3, #3
 800bbec:	490e      	ldr	r1, [pc, #56]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bbf2:	f000 f821 	bl	800bc38 <HAL_RCC_GetSysClockFreq>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	4b0b      	ldr	r3, [pc, #44]	@ (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	091b      	lsrs	r3, r3, #4
 800bbfe:	f003 030f 	and.w	r3, r3, #15
 800bc02:	490a      	ldr	r1, [pc, #40]	@ (800bc2c <HAL_RCC_ClockConfig+0x1c0>)
 800bc04:	5ccb      	ldrb	r3, [r1, r3]
 800bc06:	fa22 f303 	lsr.w	r3, r2, r3
 800bc0a:	4a09      	ldr	r2, [pc, #36]	@ (800bc30 <HAL_RCC_ClockConfig+0x1c4>)
 800bc0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800bc0e:	4b09      	ldr	r3, [pc, #36]	@ (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7fd ff10 	bl	8009a38 <HAL_InitTick>

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3710      	adds	r7, #16
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	40023c00 	.word	0x40023c00
 800bc28:	40023800 	.word	0x40023800
 800bc2c:	08012a44 	.word	0x08012a44
 800bc30:	200000d4 	.word	0x200000d4
 800bc34:	200000d8 	.word	0x200000d8

0800bc38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bc38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc3c:	b090      	sub	sp, #64	@ 0x40
 800bc3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800bc40:	2300      	movs	r3, #0
 800bc42:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800bc44:	2300      	movs	r3, #0
 800bc46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bc50:	4b59      	ldr	r3, [pc, #356]	@ (800bdb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	f003 030c 	and.w	r3, r3, #12
 800bc58:	2b08      	cmp	r3, #8
 800bc5a:	d00d      	beq.n	800bc78 <HAL_RCC_GetSysClockFreq+0x40>
 800bc5c:	2b08      	cmp	r3, #8
 800bc5e:	f200 80a1 	bhi.w	800bda4 <HAL_RCC_GetSysClockFreq+0x16c>
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d002      	beq.n	800bc6c <HAL_RCC_GetSysClockFreq+0x34>
 800bc66:	2b04      	cmp	r3, #4
 800bc68:	d003      	beq.n	800bc72 <HAL_RCC_GetSysClockFreq+0x3a>
 800bc6a:	e09b      	b.n	800bda4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bc6c:	4b53      	ldr	r3, [pc, #332]	@ (800bdbc <HAL_RCC_GetSysClockFreq+0x184>)
 800bc6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bc70:	e09b      	b.n	800bdaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bc72:	4b53      	ldr	r3, [pc, #332]	@ (800bdc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800bc74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bc76:	e098      	b.n	800bdaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bc78:	4b4f      	ldr	r3, [pc, #316]	@ (800bdb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bc82:	4b4d      	ldr	r3, [pc, #308]	@ (800bdb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d028      	beq.n	800bce0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bc8e:	4b4a      	ldr	r3, [pc, #296]	@ (800bdb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	099b      	lsrs	r3, r3, #6
 800bc94:	2200      	movs	r2, #0
 800bc96:	623b      	str	r3, [r7, #32]
 800bc98:	627a      	str	r2, [r7, #36]	@ 0x24
 800bc9a:	6a3b      	ldr	r3, [r7, #32]
 800bc9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800bca0:	2100      	movs	r1, #0
 800bca2:	4b47      	ldr	r3, [pc, #284]	@ (800bdc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800bca4:	fb03 f201 	mul.w	r2, r3, r1
 800bca8:	2300      	movs	r3, #0
 800bcaa:	fb00 f303 	mul.w	r3, r0, r3
 800bcae:	4413      	add	r3, r2
 800bcb0:	4a43      	ldr	r2, [pc, #268]	@ (800bdc0 <HAL_RCC_GetSysClockFreq+0x188>)
 800bcb2:	fba0 1202 	umull	r1, r2, r0, r2
 800bcb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bcb8:	460a      	mov	r2, r1
 800bcba:	62ba      	str	r2, [r7, #40]	@ 0x28
 800bcbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcbe:	4413      	add	r3, r2
 800bcc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bcc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	61bb      	str	r3, [r7, #24]
 800bcc8:	61fa      	str	r2, [r7, #28]
 800bcca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bcce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800bcd2:	f7f5 f829 	bl	8000d28 <__aeabi_uldivmod>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	4613      	mov	r3, r2
 800bcdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcde:	e053      	b.n	800bd88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bce0:	4b35      	ldr	r3, [pc, #212]	@ (800bdb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	099b      	lsrs	r3, r3, #6
 800bce6:	2200      	movs	r2, #0
 800bce8:	613b      	str	r3, [r7, #16]
 800bcea:	617a      	str	r2, [r7, #20]
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800bcf2:	f04f 0b00 	mov.w	fp, #0
 800bcf6:	4652      	mov	r2, sl
 800bcf8:	465b      	mov	r3, fp
 800bcfa:	f04f 0000 	mov.w	r0, #0
 800bcfe:	f04f 0100 	mov.w	r1, #0
 800bd02:	0159      	lsls	r1, r3, #5
 800bd04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bd08:	0150      	lsls	r0, r2, #5
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	ebb2 080a 	subs.w	r8, r2, sl
 800bd12:	eb63 090b 	sbc.w	r9, r3, fp
 800bd16:	f04f 0200 	mov.w	r2, #0
 800bd1a:	f04f 0300 	mov.w	r3, #0
 800bd1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800bd22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800bd26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800bd2a:	ebb2 0408 	subs.w	r4, r2, r8
 800bd2e:	eb63 0509 	sbc.w	r5, r3, r9
 800bd32:	f04f 0200 	mov.w	r2, #0
 800bd36:	f04f 0300 	mov.w	r3, #0
 800bd3a:	00eb      	lsls	r3, r5, #3
 800bd3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bd40:	00e2      	lsls	r2, r4, #3
 800bd42:	4614      	mov	r4, r2
 800bd44:	461d      	mov	r5, r3
 800bd46:	eb14 030a 	adds.w	r3, r4, sl
 800bd4a:	603b      	str	r3, [r7, #0]
 800bd4c:	eb45 030b 	adc.w	r3, r5, fp
 800bd50:	607b      	str	r3, [r7, #4]
 800bd52:	f04f 0200 	mov.w	r2, #0
 800bd56:	f04f 0300 	mov.w	r3, #0
 800bd5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bd5e:	4629      	mov	r1, r5
 800bd60:	028b      	lsls	r3, r1, #10
 800bd62:	4621      	mov	r1, r4
 800bd64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bd68:	4621      	mov	r1, r4
 800bd6a:	028a      	lsls	r2, r1, #10
 800bd6c:	4610      	mov	r0, r2
 800bd6e:	4619      	mov	r1, r3
 800bd70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd72:	2200      	movs	r2, #0
 800bd74:	60bb      	str	r3, [r7, #8]
 800bd76:	60fa      	str	r2, [r7, #12]
 800bd78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd7c:	f7f4 ffd4 	bl	8000d28 <__aeabi_uldivmod>
 800bd80:	4602      	mov	r2, r0
 800bd82:	460b      	mov	r3, r1
 800bd84:	4613      	mov	r3, r2
 800bd86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800bd88:	4b0b      	ldr	r3, [pc, #44]	@ (800bdb8 <HAL_RCC_GetSysClockFreq+0x180>)
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	0c1b      	lsrs	r3, r3, #16
 800bd8e:	f003 0303 	and.w	r3, r3, #3
 800bd92:	3301      	adds	r3, #1
 800bd94:	005b      	lsls	r3, r3, #1
 800bd96:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800bd98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bda0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bda2:	e002      	b.n	800bdaa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bda4:	4b05      	ldr	r3, [pc, #20]	@ (800bdbc <HAL_RCC_GetSysClockFreq+0x184>)
 800bda6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bda8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bdaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3740      	adds	r7, #64	@ 0x40
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bdb6:	bf00      	nop
 800bdb8:	40023800 	.word	0x40023800
 800bdbc:	00f42400 	.word	0x00f42400
 800bdc0:	017d7840 	.word	0x017d7840

0800bdc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bdc8:	4b03      	ldr	r3, [pc, #12]	@ (800bdd8 <HAL_RCC_GetHCLKFreq+0x14>)
 800bdca:	681b      	ldr	r3, [r3, #0]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	200000d4 	.word	0x200000d4

0800bddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bde0:	f7ff fff0 	bl	800bdc4 <HAL_RCC_GetHCLKFreq>
 800bde4:	4602      	mov	r2, r0
 800bde6:	4b05      	ldr	r3, [pc, #20]	@ (800bdfc <HAL_RCC_GetPCLK1Freq+0x20>)
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	0a9b      	lsrs	r3, r3, #10
 800bdec:	f003 0307 	and.w	r3, r3, #7
 800bdf0:	4903      	ldr	r1, [pc, #12]	@ (800be00 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bdf2:	5ccb      	ldrb	r3, [r1, r3]
 800bdf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	40023800 	.word	0x40023800
 800be00:	08012a54 	.word	0x08012a54

0800be04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800be08:	f7ff ffdc 	bl	800bdc4 <HAL_RCC_GetHCLKFreq>
 800be0c:	4602      	mov	r2, r0
 800be0e:	4b05      	ldr	r3, [pc, #20]	@ (800be24 <HAL_RCC_GetPCLK2Freq+0x20>)
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	0b5b      	lsrs	r3, r3, #13
 800be14:	f003 0307 	and.w	r3, r3, #7
 800be18:	4903      	ldr	r1, [pc, #12]	@ (800be28 <HAL_RCC_GetPCLK2Freq+0x24>)
 800be1a:	5ccb      	ldrb	r3, [r1, r3]
 800be1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800be20:	4618      	mov	r0, r3
 800be22:	bd80      	pop	{r7, pc}
 800be24:	40023800 	.word	0x40023800
 800be28:	08012a54 	.word	0x08012a54

0800be2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d101      	bne.n	800be3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	e041      	b.n	800bec2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be44:	b2db      	uxtb	r3, r3
 800be46:	2b00      	cmp	r3, #0
 800be48:	d106      	bne.n	800be58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f7fc feb2 	bl	8008bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2202      	movs	r2, #2
 800be5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	3304      	adds	r3, #4
 800be68:	4619      	mov	r1, r3
 800be6a:	4610      	mov	r0, r2
 800be6c:	f000 fc76 	bl	800c75c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2201      	movs	r2, #1
 800be74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2201      	movs	r2, #1
 800be7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2201      	movs	r2, #1
 800be84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2201      	movs	r2, #1
 800be9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2201      	movs	r2, #1
 800bea4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2201      	movs	r2, #1
 800beac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2201      	movs	r2, #1
 800bebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
	...

0800becc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800becc:	b480      	push	{r7}
 800bece:	b085      	sub	sp, #20
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d001      	beq.n	800bee4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bee0:	2301      	movs	r3, #1
 800bee2:	e046      	b.n	800bf72 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2202      	movs	r2, #2
 800bee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a23      	ldr	r2, [pc, #140]	@ (800bf80 <HAL_TIM_Base_Start+0xb4>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d022      	beq.n	800bf3c <HAL_TIM_Base_Start+0x70>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800befe:	d01d      	beq.n	800bf3c <HAL_TIM_Base_Start+0x70>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a1f      	ldr	r2, [pc, #124]	@ (800bf84 <HAL_TIM_Base_Start+0xb8>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d018      	beq.n	800bf3c <HAL_TIM_Base_Start+0x70>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a1e      	ldr	r2, [pc, #120]	@ (800bf88 <HAL_TIM_Base_Start+0xbc>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d013      	beq.n	800bf3c <HAL_TIM_Base_Start+0x70>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a1c      	ldr	r2, [pc, #112]	@ (800bf8c <HAL_TIM_Base_Start+0xc0>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d00e      	beq.n	800bf3c <HAL_TIM_Base_Start+0x70>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a1b      	ldr	r2, [pc, #108]	@ (800bf90 <HAL_TIM_Base_Start+0xc4>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d009      	beq.n	800bf3c <HAL_TIM_Base_Start+0x70>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a19      	ldr	r2, [pc, #100]	@ (800bf94 <HAL_TIM_Base_Start+0xc8>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d004      	beq.n	800bf3c <HAL_TIM_Base_Start+0x70>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a18      	ldr	r2, [pc, #96]	@ (800bf98 <HAL_TIM_Base_Start+0xcc>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d111      	bne.n	800bf60 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	f003 0307 	and.w	r3, r3, #7
 800bf46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2b06      	cmp	r3, #6
 800bf4c:	d010      	beq.n	800bf70 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f042 0201 	orr.w	r2, r2, #1
 800bf5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf5e:	e007      	b.n	800bf70 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f042 0201 	orr.w	r2, r2, #1
 800bf6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3714      	adds	r7, #20
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	40010000 	.word	0x40010000
 800bf84:	40000400 	.word	0x40000400
 800bf88:	40000800 	.word	0x40000800
 800bf8c:	40000c00 	.word	0x40000c00
 800bf90:	40010400 	.word	0x40010400
 800bf94:	40014000 	.word	0x40014000
 800bf98:	40001800 	.word	0x40001800

0800bf9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d101      	bne.n	800bfae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e041      	b.n	800c032 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d106      	bne.n	800bfc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f839 	bl	800c03a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2202      	movs	r2, #2
 800bfcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	4619      	mov	r1, r3
 800bfda:	4610      	mov	r0, r2
 800bfdc:	f000 fbbe 	bl	800c75c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2201      	movs	r2, #1
 800c004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3708      	adds	r7, #8
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b083      	sub	sp, #12
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c042:	bf00      	nop
 800c044:	370c      	adds	r7, #12
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr
	...

0800c050 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d109      	bne.n	800c074 <HAL_TIM_PWM_Start+0x24>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c066:	b2db      	uxtb	r3, r3
 800c068:	2b01      	cmp	r3, #1
 800c06a:	bf14      	ite	ne
 800c06c:	2301      	movne	r3, #1
 800c06e:	2300      	moveq	r3, #0
 800c070:	b2db      	uxtb	r3, r3
 800c072:	e022      	b.n	800c0ba <HAL_TIM_PWM_Start+0x6a>
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	2b04      	cmp	r3, #4
 800c078:	d109      	bne.n	800c08e <HAL_TIM_PWM_Start+0x3e>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c080:	b2db      	uxtb	r3, r3
 800c082:	2b01      	cmp	r3, #1
 800c084:	bf14      	ite	ne
 800c086:	2301      	movne	r3, #1
 800c088:	2300      	moveq	r3, #0
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	e015      	b.n	800c0ba <HAL_TIM_PWM_Start+0x6a>
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2b08      	cmp	r3, #8
 800c092:	d109      	bne.n	800c0a8 <HAL_TIM_PWM_Start+0x58>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	bf14      	ite	ne
 800c0a0:	2301      	movne	r3, #1
 800c0a2:	2300      	moveq	r3, #0
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	e008      	b.n	800c0ba <HAL_TIM_PWM_Start+0x6a>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	bf14      	ite	ne
 800c0b4:	2301      	movne	r3, #1
 800c0b6:	2300      	moveq	r3, #0
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e07c      	b.n	800c1bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d104      	bne.n	800c0d2 <HAL_TIM_PWM_Start+0x82>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2202      	movs	r2, #2
 800c0cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c0d0:	e013      	b.n	800c0fa <HAL_TIM_PWM_Start+0xaa>
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b04      	cmp	r3, #4
 800c0d6:	d104      	bne.n	800c0e2 <HAL_TIM_PWM_Start+0x92>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2202      	movs	r2, #2
 800c0dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c0e0:	e00b      	b.n	800c0fa <HAL_TIM_PWM_Start+0xaa>
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	2b08      	cmp	r3, #8
 800c0e6:	d104      	bne.n	800c0f2 <HAL_TIM_PWM_Start+0xa2>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2202      	movs	r2, #2
 800c0ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0f0:	e003      	b.n	800c0fa <HAL_TIM_PWM_Start+0xaa>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2202      	movs	r2, #2
 800c0f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2201      	movs	r2, #1
 800c100:	6839      	ldr	r1, [r7, #0]
 800c102:	4618      	mov	r0, r3
 800c104:	f000 fe20 	bl	800cd48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a2d      	ldr	r2, [pc, #180]	@ (800c1c4 <HAL_TIM_PWM_Start+0x174>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d004      	beq.n	800c11c <HAL_TIM_PWM_Start+0xcc>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a2c      	ldr	r2, [pc, #176]	@ (800c1c8 <HAL_TIM_PWM_Start+0x178>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d101      	bne.n	800c120 <HAL_TIM_PWM_Start+0xd0>
 800c11c:	2301      	movs	r3, #1
 800c11e:	e000      	b.n	800c122 <HAL_TIM_PWM_Start+0xd2>
 800c120:	2300      	movs	r3, #0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d007      	beq.n	800c136 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c134:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a22      	ldr	r2, [pc, #136]	@ (800c1c4 <HAL_TIM_PWM_Start+0x174>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d022      	beq.n	800c186 <HAL_TIM_PWM_Start+0x136>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c148:	d01d      	beq.n	800c186 <HAL_TIM_PWM_Start+0x136>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a1f      	ldr	r2, [pc, #124]	@ (800c1cc <HAL_TIM_PWM_Start+0x17c>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d018      	beq.n	800c186 <HAL_TIM_PWM_Start+0x136>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a1d      	ldr	r2, [pc, #116]	@ (800c1d0 <HAL_TIM_PWM_Start+0x180>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d013      	beq.n	800c186 <HAL_TIM_PWM_Start+0x136>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a1c      	ldr	r2, [pc, #112]	@ (800c1d4 <HAL_TIM_PWM_Start+0x184>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d00e      	beq.n	800c186 <HAL_TIM_PWM_Start+0x136>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a16      	ldr	r2, [pc, #88]	@ (800c1c8 <HAL_TIM_PWM_Start+0x178>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d009      	beq.n	800c186 <HAL_TIM_PWM_Start+0x136>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a18      	ldr	r2, [pc, #96]	@ (800c1d8 <HAL_TIM_PWM_Start+0x188>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d004      	beq.n	800c186 <HAL_TIM_PWM_Start+0x136>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a16      	ldr	r2, [pc, #88]	@ (800c1dc <HAL_TIM_PWM_Start+0x18c>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d111      	bne.n	800c1aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	f003 0307 	and.w	r3, r3, #7
 800c190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2b06      	cmp	r3, #6
 800c196:	d010      	beq.n	800c1ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f042 0201 	orr.w	r2, r2, #1
 800c1a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1a8:	e007      	b.n	800c1ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f042 0201 	orr.w	r2, r2, #1
 800c1b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c1ba:	2300      	movs	r3, #0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	40010000 	.word	0x40010000
 800c1c8:	40010400 	.word	0x40010400
 800c1cc:	40000400 	.word	0x40000400
 800c1d0:	40000800 	.word	0x40000800
 800c1d4:	40000c00 	.word	0x40000c00
 800c1d8:	40014000 	.word	0x40014000
 800c1dc:	40001800 	.word	0x40001800

0800c1e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e097      	b.n	800c324 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d106      	bne.n	800c20e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7fc fbcf 	bl	80089ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2202      	movs	r2, #2
 800c212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	6812      	ldr	r2, [r2, #0]
 800c220:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c224:	f023 0307 	bic.w	r3, r3, #7
 800c228:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	3304      	adds	r3, #4
 800c232:	4619      	mov	r1, r3
 800c234:	4610      	mov	r0, r2
 800c236:	f000 fa91 	bl	800c75c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	699b      	ldr	r3, [r3, #24]
 800c248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	6a1b      	ldr	r3, [r3, #32]
 800c250:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	697a      	ldr	r2, [r7, #20]
 800c258:	4313      	orrs	r3, r2
 800c25a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c262:	f023 0303 	bic.w	r3, r3, #3
 800c266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	689a      	ldr	r2, [r3, #8]
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	699b      	ldr	r3, [r3, #24]
 800c270:	021b      	lsls	r3, r3, #8
 800c272:	4313      	orrs	r3, r2
 800c274:	693a      	ldr	r2, [r7, #16]
 800c276:	4313      	orrs	r3, r2
 800c278:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800c280:	f023 030c 	bic.w	r3, r3, #12
 800c284:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c28c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c290:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	68da      	ldr	r2, [r3, #12]
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	69db      	ldr	r3, [r3, #28]
 800c29a:	021b      	lsls	r3, r3, #8
 800c29c:	4313      	orrs	r3, r2
 800c29e:	693a      	ldr	r2, [r7, #16]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	011a      	lsls	r2, r3, #4
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	6a1b      	ldr	r3, [r3, #32]
 800c2ae:	031b      	lsls	r3, r3, #12
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800c2be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800c2c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	685a      	ldr	r2, [r3, #4]
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	695b      	ldr	r3, [r3, #20]
 800c2d0:	011b      	lsls	r3, r3, #4
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	68fa      	ldr	r2, [r7, #12]
 800c2f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2201      	movs	r2, #1
 800c30e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2201      	movs	r2, #1
 800c316:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2201      	movs	r2, #1
 800c31e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c322:	2300      	movs	r3, #0
}
 800c324:	4618      	mov	r0, r3
 800c326:	3718      	adds	r7, #24
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c33c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c344:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c34c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c354:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d110      	bne.n	800c37e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c35c:	7bfb      	ldrb	r3, [r7, #15]
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d102      	bne.n	800c368 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c362:	7b7b      	ldrb	r3, [r7, #13]
 800c364:	2b01      	cmp	r3, #1
 800c366:	d001      	beq.n	800c36c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	e069      	b.n	800c440 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2202      	movs	r2, #2
 800c370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2202      	movs	r2, #2
 800c378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c37c:	e031      	b.n	800c3e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	2b04      	cmp	r3, #4
 800c382:	d110      	bne.n	800c3a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c384:	7bbb      	ldrb	r3, [r7, #14]
 800c386:	2b01      	cmp	r3, #1
 800c388:	d102      	bne.n	800c390 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c38a:	7b3b      	ldrb	r3, [r7, #12]
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d001      	beq.n	800c394 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800c390:	2301      	movs	r3, #1
 800c392:	e055      	b.n	800c440 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2202      	movs	r2, #2
 800c398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2202      	movs	r2, #2
 800c3a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c3a4:	e01d      	b.n	800c3e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c3a6:	7bfb      	ldrb	r3, [r7, #15]
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d108      	bne.n	800c3be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c3ac:	7bbb      	ldrb	r3, [r7, #14]
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d105      	bne.n	800c3be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c3b2:	7b7b      	ldrb	r3, [r7, #13]
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d102      	bne.n	800c3be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c3b8:	7b3b      	ldrb	r3, [r7, #12]
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d001      	beq.n	800c3c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e03e      	b.n	800c440 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2202      	movs	r2, #2
 800c3c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2202      	movs	r2, #2
 800c3ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2202      	movs	r2, #2
 800c3d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2202      	movs	r2, #2
 800c3de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d003      	beq.n	800c3f0 <HAL_TIM_Encoder_Start+0xc4>
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	2b04      	cmp	r3, #4
 800c3ec:	d008      	beq.n	800c400 <HAL_TIM_Encoder_Start+0xd4>
 800c3ee:	e00f      	b.n	800c410 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f000 fca5 	bl	800cd48 <TIM_CCxChannelCmd>
      break;
 800c3fe:	e016      	b.n	800c42e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2201      	movs	r2, #1
 800c406:	2104      	movs	r1, #4
 800c408:	4618      	mov	r0, r3
 800c40a:	f000 fc9d 	bl	800cd48 <TIM_CCxChannelCmd>
      break;
 800c40e:	e00e      	b.n	800c42e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2201      	movs	r2, #1
 800c416:	2100      	movs	r1, #0
 800c418:	4618      	mov	r0, r3
 800c41a:	f000 fc95 	bl	800cd48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2201      	movs	r2, #1
 800c424:	2104      	movs	r1, #4
 800c426:	4618      	mov	r0, r3
 800c428:	f000 fc8e 	bl	800cd48 <TIM_CCxChannelCmd>
      break;
 800c42c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f042 0201 	orr.w	r2, r2, #1
 800c43c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b086      	sub	sp, #24
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c454:	2300      	movs	r3, #0
 800c456:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d101      	bne.n	800c466 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c462:	2302      	movs	r3, #2
 800c464:	e0ae      	b.n	800c5c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2201      	movs	r2, #1
 800c46a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2b0c      	cmp	r3, #12
 800c472:	f200 809f 	bhi.w	800c5b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c476:	a201      	add	r2, pc, #4	@ (adr r2, 800c47c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c47c:	0800c4b1 	.word	0x0800c4b1
 800c480:	0800c5b5 	.word	0x0800c5b5
 800c484:	0800c5b5 	.word	0x0800c5b5
 800c488:	0800c5b5 	.word	0x0800c5b5
 800c48c:	0800c4f1 	.word	0x0800c4f1
 800c490:	0800c5b5 	.word	0x0800c5b5
 800c494:	0800c5b5 	.word	0x0800c5b5
 800c498:	0800c5b5 	.word	0x0800c5b5
 800c49c:	0800c533 	.word	0x0800c533
 800c4a0:	0800c5b5 	.word	0x0800c5b5
 800c4a4:	0800c5b5 	.word	0x0800c5b5
 800c4a8:	0800c5b5 	.word	0x0800c5b5
 800c4ac:	0800c573 	.word	0x0800c573
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68b9      	ldr	r1, [r7, #8]
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f000 f9fc 	bl	800c8b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	699a      	ldr	r2, [r3, #24]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f042 0208 	orr.w	r2, r2, #8
 800c4ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	699a      	ldr	r2, [r3, #24]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f022 0204 	bic.w	r2, r2, #4
 800c4da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	6999      	ldr	r1, [r3, #24]
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	691a      	ldr	r2, [r3, #16]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	430a      	orrs	r2, r1
 800c4ec:	619a      	str	r2, [r3, #24]
      break;
 800c4ee:	e064      	b.n	800c5ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	68b9      	ldr	r1, [r7, #8]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f000 fa4c 	bl	800c994 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	699a      	ldr	r2, [r3, #24]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c50a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	699a      	ldr	r2, [r3, #24]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c51a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	6999      	ldr	r1, [r3, #24]
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	691b      	ldr	r3, [r3, #16]
 800c526:	021a      	lsls	r2, r3, #8
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	430a      	orrs	r2, r1
 800c52e:	619a      	str	r2, [r3, #24]
      break;
 800c530:	e043      	b.n	800c5ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68b9      	ldr	r1, [r7, #8]
 800c538:	4618      	mov	r0, r3
 800c53a:	f000 faa1 	bl	800ca80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	69da      	ldr	r2, [r3, #28]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f042 0208 	orr.w	r2, r2, #8
 800c54c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	69da      	ldr	r2, [r3, #28]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f022 0204 	bic.w	r2, r2, #4
 800c55c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	69d9      	ldr	r1, [r3, #28]
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	691a      	ldr	r2, [r3, #16]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	430a      	orrs	r2, r1
 800c56e:	61da      	str	r2, [r3, #28]
      break;
 800c570:	e023      	b.n	800c5ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	68b9      	ldr	r1, [r7, #8]
 800c578:	4618      	mov	r0, r3
 800c57a:	f000 faf5 	bl	800cb68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	69da      	ldr	r2, [r3, #28]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c58c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	69da      	ldr	r2, [r3, #28]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c59c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	69d9      	ldr	r1, [r3, #28]
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	021a      	lsls	r2, r3, #8
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	430a      	orrs	r2, r1
 800c5b0:	61da      	str	r2, [r3, #28]
      break;
 800c5b2:	e002      	b.n	800c5ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	75fb      	strb	r3, [r7, #23]
      break;
 800c5b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c5c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3718      	adds	r7, #24
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d101      	bne.n	800c5e8 <HAL_TIM_ConfigClockSource+0x1c>
 800c5e4:	2302      	movs	r3, #2
 800c5e6:	e0b4      	b.n	800c752 <HAL_TIM_ConfigClockSource+0x186>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	689b      	ldr	r3, [r3, #8]
 800c5fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c60e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	68ba      	ldr	r2, [r7, #8]
 800c616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c620:	d03e      	beq.n	800c6a0 <HAL_TIM_ConfigClockSource+0xd4>
 800c622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c626:	f200 8087 	bhi.w	800c738 <HAL_TIM_ConfigClockSource+0x16c>
 800c62a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c62e:	f000 8086 	beq.w	800c73e <HAL_TIM_ConfigClockSource+0x172>
 800c632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c636:	d87f      	bhi.n	800c738 <HAL_TIM_ConfigClockSource+0x16c>
 800c638:	2b70      	cmp	r3, #112	@ 0x70
 800c63a:	d01a      	beq.n	800c672 <HAL_TIM_ConfigClockSource+0xa6>
 800c63c:	2b70      	cmp	r3, #112	@ 0x70
 800c63e:	d87b      	bhi.n	800c738 <HAL_TIM_ConfigClockSource+0x16c>
 800c640:	2b60      	cmp	r3, #96	@ 0x60
 800c642:	d050      	beq.n	800c6e6 <HAL_TIM_ConfigClockSource+0x11a>
 800c644:	2b60      	cmp	r3, #96	@ 0x60
 800c646:	d877      	bhi.n	800c738 <HAL_TIM_ConfigClockSource+0x16c>
 800c648:	2b50      	cmp	r3, #80	@ 0x50
 800c64a:	d03c      	beq.n	800c6c6 <HAL_TIM_ConfigClockSource+0xfa>
 800c64c:	2b50      	cmp	r3, #80	@ 0x50
 800c64e:	d873      	bhi.n	800c738 <HAL_TIM_ConfigClockSource+0x16c>
 800c650:	2b40      	cmp	r3, #64	@ 0x40
 800c652:	d058      	beq.n	800c706 <HAL_TIM_ConfigClockSource+0x13a>
 800c654:	2b40      	cmp	r3, #64	@ 0x40
 800c656:	d86f      	bhi.n	800c738 <HAL_TIM_ConfigClockSource+0x16c>
 800c658:	2b30      	cmp	r3, #48	@ 0x30
 800c65a:	d064      	beq.n	800c726 <HAL_TIM_ConfigClockSource+0x15a>
 800c65c:	2b30      	cmp	r3, #48	@ 0x30
 800c65e:	d86b      	bhi.n	800c738 <HAL_TIM_ConfigClockSource+0x16c>
 800c660:	2b20      	cmp	r3, #32
 800c662:	d060      	beq.n	800c726 <HAL_TIM_ConfigClockSource+0x15a>
 800c664:	2b20      	cmp	r3, #32
 800c666:	d867      	bhi.n	800c738 <HAL_TIM_ConfigClockSource+0x16c>
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d05c      	beq.n	800c726 <HAL_TIM_ConfigClockSource+0x15a>
 800c66c:	2b10      	cmp	r3, #16
 800c66e:	d05a      	beq.n	800c726 <HAL_TIM_ConfigClockSource+0x15a>
 800c670:	e062      	b.n	800c738 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c682:	f000 fb41 	bl	800cd08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	689b      	ldr	r3, [r3, #8]
 800c68c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c694:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	609a      	str	r2, [r3, #8]
      break;
 800c69e:	e04f      	b.n	800c740 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c6b0:	f000 fb2a 	bl	800cd08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	689a      	ldr	r2, [r3, #8]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c6c2:	609a      	str	r2, [r3, #8]
      break;
 800c6c4:	e03c      	b.n	800c740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	f000 fa9e 	bl	800cc14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2150      	movs	r1, #80	@ 0x50
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f000 faf7 	bl	800ccd2 <TIM_ITRx_SetConfig>
      break;
 800c6e4:	e02c      	b.n	800c740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	f000 fabd 	bl	800cc72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2160      	movs	r1, #96	@ 0x60
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 fae7 	bl	800ccd2 <TIM_ITRx_SetConfig>
      break;
 800c704:	e01c      	b.n	800c740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c712:	461a      	mov	r2, r3
 800c714:	f000 fa7e 	bl	800cc14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2140      	movs	r1, #64	@ 0x40
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 fad7 	bl	800ccd2 <TIM_ITRx_SetConfig>
      break;
 800c724:	e00c      	b.n	800c740 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4619      	mov	r1, r3
 800c730:	4610      	mov	r0, r2
 800c732:	f000 face 	bl	800ccd2 <TIM_ITRx_SetConfig>
      break;
 800c736:	e003      	b.n	800c740 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	73fb      	strb	r3, [r7, #15]
      break;
 800c73c:	e000      	b.n	800c740 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c73e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2201      	movs	r2, #1
 800c744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c750:	7bfb      	ldrb	r3, [r7, #15]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
	...

0800c75c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4a46      	ldr	r2, [pc, #280]	@ (800c888 <TIM_Base_SetConfig+0x12c>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d013      	beq.n	800c79c <TIM_Base_SetConfig+0x40>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c77a:	d00f      	beq.n	800c79c <TIM_Base_SetConfig+0x40>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4a43      	ldr	r2, [pc, #268]	@ (800c88c <TIM_Base_SetConfig+0x130>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d00b      	beq.n	800c79c <TIM_Base_SetConfig+0x40>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	4a42      	ldr	r2, [pc, #264]	@ (800c890 <TIM_Base_SetConfig+0x134>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d007      	beq.n	800c79c <TIM_Base_SetConfig+0x40>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	4a41      	ldr	r2, [pc, #260]	@ (800c894 <TIM_Base_SetConfig+0x138>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d003      	beq.n	800c79c <TIM_Base_SetConfig+0x40>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4a40      	ldr	r2, [pc, #256]	@ (800c898 <TIM_Base_SetConfig+0x13c>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d108      	bne.n	800c7ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4a35      	ldr	r2, [pc, #212]	@ (800c888 <TIM_Base_SetConfig+0x12c>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d02b      	beq.n	800c80e <TIM_Base_SetConfig+0xb2>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7bc:	d027      	beq.n	800c80e <TIM_Base_SetConfig+0xb2>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4a32      	ldr	r2, [pc, #200]	@ (800c88c <TIM_Base_SetConfig+0x130>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d023      	beq.n	800c80e <TIM_Base_SetConfig+0xb2>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4a31      	ldr	r2, [pc, #196]	@ (800c890 <TIM_Base_SetConfig+0x134>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d01f      	beq.n	800c80e <TIM_Base_SetConfig+0xb2>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4a30      	ldr	r2, [pc, #192]	@ (800c894 <TIM_Base_SetConfig+0x138>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d01b      	beq.n	800c80e <TIM_Base_SetConfig+0xb2>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a2f      	ldr	r2, [pc, #188]	@ (800c898 <TIM_Base_SetConfig+0x13c>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d017      	beq.n	800c80e <TIM_Base_SetConfig+0xb2>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4a2e      	ldr	r2, [pc, #184]	@ (800c89c <TIM_Base_SetConfig+0x140>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d013      	beq.n	800c80e <TIM_Base_SetConfig+0xb2>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a2d      	ldr	r2, [pc, #180]	@ (800c8a0 <TIM_Base_SetConfig+0x144>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d00f      	beq.n	800c80e <TIM_Base_SetConfig+0xb2>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a2c      	ldr	r2, [pc, #176]	@ (800c8a4 <TIM_Base_SetConfig+0x148>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d00b      	beq.n	800c80e <TIM_Base_SetConfig+0xb2>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a2b      	ldr	r2, [pc, #172]	@ (800c8a8 <TIM_Base_SetConfig+0x14c>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d007      	beq.n	800c80e <TIM_Base_SetConfig+0xb2>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a2a      	ldr	r2, [pc, #168]	@ (800c8ac <TIM_Base_SetConfig+0x150>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d003      	beq.n	800c80e <TIM_Base_SetConfig+0xb2>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a29      	ldr	r2, [pc, #164]	@ (800c8b0 <TIM_Base_SetConfig+0x154>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d108      	bne.n	800c820 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	4313      	orrs	r3, r2
 800c81e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	695b      	ldr	r3, [r3, #20]
 800c82a:	4313      	orrs	r3, r2
 800c82c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	68fa      	ldr	r2, [r7, #12]
 800c832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	689a      	ldr	r2, [r3, #8]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	4a10      	ldr	r2, [pc, #64]	@ (800c888 <TIM_Base_SetConfig+0x12c>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d003      	beq.n	800c854 <TIM_Base_SetConfig+0xf8>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	4a12      	ldr	r2, [pc, #72]	@ (800c898 <TIM_Base_SetConfig+0x13c>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d103      	bne.n	800c85c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	691a      	ldr	r2, [r3, #16]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	f003 0301 	and.w	r3, r3, #1
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d105      	bne.n	800c87a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	691b      	ldr	r3, [r3, #16]
 800c872:	f023 0201 	bic.w	r2, r3, #1
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	611a      	str	r2, [r3, #16]
  }
}
 800c87a:	bf00      	nop
 800c87c:	3714      	adds	r7, #20
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop
 800c888:	40010000 	.word	0x40010000
 800c88c:	40000400 	.word	0x40000400
 800c890:	40000800 	.word	0x40000800
 800c894:	40000c00 	.word	0x40000c00
 800c898:	40010400 	.word	0x40010400
 800c89c:	40014000 	.word	0x40014000
 800c8a0:	40014400 	.word	0x40014400
 800c8a4:	40014800 	.word	0x40014800
 800c8a8:	40001800 	.word	0x40001800
 800c8ac:	40001c00 	.word	0x40001c00
 800c8b0:	40002000 	.word	0x40002000

0800c8b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b087      	sub	sp, #28
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6a1b      	ldr	r3, [r3, #32]
 800c8c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6a1b      	ldr	r3, [r3, #32]
 800c8c8:	f023 0201 	bic.w	r2, r3, #1
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	699b      	ldr	r3, [r3, #24]
 800c8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f023 0303 	bic.w	r3, r3, #3
 800c8ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	f023 0302 	bic.w	r3, r3, #2
 800c8fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	689b      	ldr	r3, [r3, #8]
 800c902:	697a      	ldr	r2, [r7, #20]
 800c904:	4313      	orrs	r3, r2
 800c906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	4a20      	ldr	r2, [pc, #128]	@ (800c98c <TIM_OC1_SetConfig+0xd8>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d003      	beq.n	800c918 <TIM_OC1_SetConfig+0x64>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	4a1f      	ldr	r2, [pc, #124]	@ (800c990 <TIM_OC1_SetConfig+0xdc>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d10c      	bne.n	800c932 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	f023 0308 	bic.w	r3, r3, #8
 800c91e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	68db      	ldr	r3, [r3, #12]
 800c924:	697a      	ldr	r2, [r7, #20]
 800c926:	4313      	orrs	r3, r2
 800c928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	f023 0304 	bic.w	r3, r3, #4
 800c930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4a15      	ldr	r2, [pc, #84]	@ (800c98c <TIM_OC1_SetConfig+0xd8>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d003      	beq.n	800c942 <TIM_OC1_SetConfig+0x8e>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	4a14      	ldr	r2, [pc, #80]	@ (800c990 <TIM_OC1_SetConfig+0xdc>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d111      	bne.n	800c966 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	695b      	ldr	r3, [r3, #20]
 800c956:	693a      	ldr	r2, [r7, #16]
 800c958:	4313      	orrs	r3, r2
 800c95a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	699b      	ldr	r3, [r3, #24]
 800c960:	693a      	ldr	r2, [r7, #16]
 800c962:	4313      	orrs	r3, r2
 800c964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	693a      	ldr	r2, [r7, #16]
 800c96a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	68fa      	ldr	r2, [r7, #12]
 800c970:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	621a      	str	r2, [r3, #32]
}
 800c980:	bf00      	nop
 800c982:	371c      	adds	r7, #28
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr
 800c98c:	40010000 	.word	0x40010000
 800c990:	40010400 	.word	0x40010400

0800c994 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c994:	b480      	push	{r7}
 800c996:	b087      	sub	sp, #28
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6a1b      	ldr	r3, [r3, #32]
 800c9a8:	f023 0210 	bic.w	r2, r3, #16
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c9ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	021b      	lsls	r3, r3, #8
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	f023 0320 	bic.w	r3, r3, #32
 800c9de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	011b      	lsls	r3, r3, #4
 800c9e6:	697a      	ldr	r2, [r7, #20]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	4a22      	ldr	r2, [pc, #136]	@ (800ca78 <TIM_OC2_SetConfig+0xe4>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d003      	beq.n	800c9fc <TIM_OC2_SetConfig+0x68>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	4a21      	ldr	r2, [pc, #132]	@ (800ca7c <TIM_OC2_SetConfig+0xe8>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d10d      	bne.n	800ca18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	011b      	lsls	r3, r3, #4
 800ca0a:	697a      	ldr	r2, [r7, #20]
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4a17      	ldr	r2, [pc, #92]	@ (800ca78 <TIM_OC2_SetConfig+0xe4>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d003      	beq.n	800ca28 <TIM_OC2_SetConfig+0x94>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	4a16      	ldr	r2, [pc, #88]	@ (800ca7c <TIM_OC2_SetConfig+0xe8>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d113      	bne.n	800ca50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ca2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ca36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	695b      	ldr	r3, [r3, #20]
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	693a      	ldr	r2, [r7, #16]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	699b      	ldr	r3, [r3, #24]
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	693a      	ldr	r2, [r7, #16]
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	693a      	ldr	r2, [r7, #16]
 800ca54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	685a      	ldr	r2, [r3, #4]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	621a      	str	r2, [r3, #32]
}
 800ca6a:	bf00      	nop
 800ca6c:	371c      	adds	r7, #28
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr
 800ca76:	bf00      	nop
 800ca78:	40010000 	.word	0x40010000
 800ca7c:	40010400 	.word	0x40010400

0800ca80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b087      	sub	sp, #28
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a1b      	ldr	r3, [r3, #32]
 800ca8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	69db      	ldr	r3, [r3, #28]
 800caa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f023 0303 	bic.w	r3, r3, #3
 800cab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	4313      	orrs	r3, r2
 800cac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	021b      	lsls	r3, r3, #8
 800cad0:	697a      	ldr	r2, [r7, #20]
 800cad2:	4313      	orrs	r3, r2
 800cad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a21      	ldr	r2, [pc, #132]	@ (800cb60 <TIM_OC3_SetConfig+0xe0>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d003      	beq.n	800cae6 <TIM_OC3_SetConfig+0x66>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4a20      	ldr	r2, [pc, #128]	@ (800cb64 <TIM_OC3_SetConfig+0xe4>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d10d      	bne.n	800cb02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800caec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	021b      	lsls	r3, r3, #8
 800caf4:	697a      	ldr	r2, [r7, #20]
 800caf6:	4313      	orrs	r3, r2
 800caf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cb00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4a16      	ldr	r2, [pc, #88]	@ (800cb60 <TIM_OC3_SetConfig+0xe0>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d003      	beq.n	800cb12 <TIM_OC3_SetConfig+0x92>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4a15      	ldr	r2, [pc, #84]	@ (800cb64 <TIM_OC3_SetConfig+0xe4>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d113      	bne.n	800cb3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cb18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cb20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	695b      	ldr	r3, [r3, #20]
 800cb26:	011b      	lsls	r3, r3, #4
 800cb28:	693a      	ldr	r2, [r7, #16]
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	699b      	ldr	r3, [r3, #24]
 800cb32:	011b      	lsls	r3, r3, #4
 800cb34:	693a      	ldr	r2, [r7, #16]
 800cb36:	4313      	orrs	r3, r2
 800cb38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	693a      	ldr	r2, [r7, #16]
 800cb3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	68fa      	ldr	r2, [r7, #12]
 800cb44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	685a      	ldr	r2, [r3, #4]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	697a      	ldr	r2, [r7, #20]
 800cb52:	621a      	str	r2, [r3, #32]
}
 800cb54:	bf00      	nop
 800cb56:	371c      	adds	r7, #28
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr
 800cb60:	40010000 	.word	0x40010000
 800cb64:	40010400 	.word	0x40010400

0800cb68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b087      	sub	sp, #28
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a1b      	ldr	r3, [r3, #32]
 800cb76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6a1b      	ldr	r3, [r3, #32]
 800cb7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	69db      	ldr	r3, [r3, #28]
 800cb8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	021b      	lsls	r3, r3, #8
 800cba6:	68fa      	ldr	r2, [r7, #12]
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cbb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	031b      	lsls	r3, r3, #12
 800cbba:	693a      	ldr	r2, [r7, #16]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4a12      	ldr	r2, [pc, #72]	@ (800cc0c <TIM_OC4_SetConfig+0xa4>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d003      	beq.n	800cbd0 <TIM_OC4_SetConfig+0x68>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	4a11      	ldr	r2, [pc, #68]	@ (800cc10 <TIM_OC4_SetConfig+0xa8>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d109      	bne.n	800cbe4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cbd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	695b      	ldr	r3, [r3, #20]
 800cbdc:	019b      	lsls	r3, r3, #6
 800cbde:	697a      	ldr	r2, [r7, #20]
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	697a      	ldr	r2, [r7, #20]
 800cbe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	68fa      	ldr	r2, [r7, #12]
 800cbee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	685a      	ldr	r2, [r3, #4]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	693a      	ldr	r2, [r7, #16]
 800cbfc:	621a      	str	r2, [r3, #32]
}
 800cbfe:	bf00      	nop
 800cc00:	371c      	adds	r7, #28
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr
 800cc0a:	bf00      	nop
 800cc0c:	40010000 	.word	0x40010000
 800cc10:	40010400 	.word	0x40010400

0800cc14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b087      	sub	sp, #28
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6a1b      	ldr	r3, [r3, #32]
 800cc24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	f023 0201 	bic.w	r2, r3, #1
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	699b      	ldr	r3, [r3, #24]
 800cc36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cc3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	011b      	lsls	r3, r3, #4
 800cc44:	693a      	ldr	r2, [r7, #16]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	f023 030a 	bic.w	r3, r3, #10
 800cc50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	693a      	ldr	r2, [r7, #16]
 800cc5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	697a      	ldr	r2, [r7, #20]
 800cc64:	621a      	str	r2, [r3, #32]
}
 800cc66:	bf00      	nop
 800cc68:	371c      	adds	r7, #28
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr

0800cc72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc72:	b480      	push	{r7}
 800cc74:	b087      	sub	sp, #28
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	60f8      	str	r0, [r7, #12]
 800cc7a:	60b9      	str	r1, [r7, #8]
 800cc7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6a1b      	ldr	r3, [r3, #32]
 800cc88:	f023 0210 	bic.w	r2, r3, #16
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cc9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	031b      	lsls	r3, r3, #12
 800cca2:	693a      	ldr	r2, [r7, #16]
 800cca4:	4313      	orrs	r3, r2
 800cca6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ccae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	011b      	lsls	r3, r3, #4
 800ccb4:	697a      	ldr	r2, [r7, #20]
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	693a      	ldr	r2, [r7, #16]
 800ccbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	621a      	str	r2, [r3, #32]
}
 800ccc6:	bf00      	nop
 800ccc8:	371c      	adds	r7, #28
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr

0800ccd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ccd2:	b480      	push	{r7}
 800ccd4:	b085      	sub	sp, #20
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	f043 0307 	orr.w	r3, r3, #7
 800ccf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	68fa      	ldr	r2, [r7, #12]
 800ccfa:	609a      	str	r2, [r3, #8]
}
 800ccfc:	bf00      	nop
 800ccfe:	3714      	adds	r7, #20
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b087      	sub	sp, #28
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	607a      	str	r2, [r7, #4]
 800cd14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cd22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	021a      	lsls	r2, r3, #8
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	431a      	orrs	r2, r3
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	697a      	ldr	r2, [r7, #20]
 800cd32:	4313      	orrs	r3, r2
 800cd34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	697a      	ldr	r2, [r7, #20]
 800cd3a:	609a      	str	r2, [r3, #8]
}
 800cd3c:	bf00      	nop
 800cd3e:	371c      	adds	r7, #28
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr

0800cd48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b087      	sub	sp, #28
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	f003 031f 	and.w	r3, r3, #31
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6a1a      	ldr	r2, [r3, #32]
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	43db      	mvns	r3, r3
 800cd6a:	401a      	ands	r2, r3
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6a1a      	ldr	r2, [r3, #32]
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	f003 031f 	and.w	r3, r3, #31
 800cd7a:	6879      	ldr	r1, [r7, #4]
 800cd7c:	fa01 f303 	lsl.w	r3, r1, r3
 800cd80:	431a      	orrs	r2, r3
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	621a      	str	r2, [r3, #32]
}
 800cd86:	bf00      	nop
 800cd88:	371c      	adds	r7, #28
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
	...

0800cd94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b085      	sub	sp, #20
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d101      	bne.n	800cdac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cda8:	2302      	movs	r3, #2
 800cdaa:	e05a      	b.n	800ce62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2202      	movs	r2, #2
 800cdb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	4313      	orrs	r3, r2
 800cddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a21      	ldr	r2, [pc, #132]	@ (800ce70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d022      	beq.n	800ce36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdf8:	d01d      	beq.n	800ce36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a1d      	ldr	r2, [pc, #116]	@ (800ce74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d018      	beq.n	800ce36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a1b      	ldr	r2, [pc, #108]	@ (800ce78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d013      	beq.n	800ce36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4a1a      	ldr	r2, [pc, #104]	@ (800ce7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d00e      	beq.n	800ce36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a18      	ldr	r2, [pc, #96]	@ (800ce80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d009      	beq.n	800ce36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a17      	ldr	r2, [pc, #92]	@ (800ce84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d004      	beq.n	800ce36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a15      	ldr	r2, [pc, #84]	@ (800ce88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d10c      	bne.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	68ba      	ldr	r2, [r7, #8]
 800ce44:	4313      	orrs	r3, r2
 800ce46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	68ba      	ldr	r2, [r7, #8]
 800ce4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2201      	movs	r2, #1
 800ce54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ce60:	2300      	movs	r3, #0
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3714      	adds	r7, #20
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	40010000 	.word	0x40010000
 800ce74:	40000400 	.word	0x40000400
 800ce78:	40000800 	.word	0x40000800
 800ce7c:	40000c00 	.word	0x40000c00
 800ce80:	40010400 	.word	0x40010400
 800ce84:	40014000 	.word	0x40014000
 800ce88:	40001800 	.word	0x40001800

0800ce8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b085      	sub	sp, #20
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ce96:	2300      	movs	r3, #0
 800ce98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d101      	bne.n	800cea8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cea4:	2302      	movs	r3, #2
 800cea6:	e03d      	b.n	800cf24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	4313      	orrs	r3, r2
 800ceca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	4313      	orrs	r3, r2
 800ced8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4313      	orrs	r3, r2
 800cee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	691b      	ldr	r3, [r3, #16]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	695b      	ldr	r3, [r3, #20]
 800cf00:	4313      	orrs	r3, r2
 800cf02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	69db      	ldr	r3, [r3, #28]
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cf22:	2300      	movs	r3, #0
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3714      	adds	r7, #20
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr

0800cf30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d101      	bne.n	800cf42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e042      	b.n	800cfc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d106      	bne.n	800cf5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f7fc fb7c 	bl	8009654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2224      	movs	r2, #36	@ 0x24
 800cf60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	68da      	ldr	r2, [r3, #12]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cf72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 fddb 	bl	800db30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	691a      	ldr	r2, [r3, #16]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cf88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	695a      	ldr	r2, [r3, #20]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cf98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	68da      	ldr	r2, [r3, #12]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cfa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2220      	movs	r2, #32
 800cfb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2220      	movs	r2, #32
 800cfbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cfc6:	2300      	movs	r3, #0
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b08a      	sub	sp, #40	@ 0x28
 800cfd4:	af02      	add	r7, sp, #8
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	603b      	str	r3, [r7, #0]
 800cfdc:	4613      	mov	r3, r2
 800cfde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	2b20      	cmp	r3, #32
 800cfee:	d175      	bne.n	800d0dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d002      	beq.n	800cffc <HAL_UART_Transmit+0x2c>
 800cff6:	88fb      	ldrh	r3, [r7, #6]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d101      	bne.n	800d000 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cffc:	2301      	movs	r3, #1
 800cffe:	e06e      	b.n	800d0de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2200      	movs	r2, #0
 800d004:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2221      	movs	r2, #33	@ 0x21
 800d00a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d00e:	f7fc fd57 	bl	8009ac0 <HAL_GetTick>
 800d012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	88fa      	ldrh	r2, [r7, #6]
 800d018:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	88fa      	ldrh	r2, [r7, #6]
 800d01e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d028:	d108      	bne.n	800d03c <HAL_UART_Transmit+0x6c>
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	691b      	ldr	r3, [r3, #16]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d104      	bne.n	800d03c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d032:	2300      	movs	r3, #0
 800d034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	61bb      	str	r3, [r7, #24]
 800d03a:	e003      	b.n	800d044 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d040:	2300      	movs	r3, #0
 800d042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d044:	e02e      	b.n	800d0a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	2200      	movs	r2, #0
 800d04e:	2180      	movs	r1, #128	@ 0x80
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f000 fb3d 	bl	800d6d0 <UART_WaitOnFlagUntilTimeout>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d005      	beq.n	800d068 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2220      	movs	r2, #32
 800d060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800d064:	2303      	movs	r3, #3
 800d066:	e03a      	b.n	800d0de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d10b      	bne.n	800d086 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	881b      	ldrh	r3, [r3, #0]
 800d072:	461a      	mov	r2, r3
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d07c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	3302      	adds	r3, #2
 800d082:	61bb      	str	r3, [r7, #24]
 800d084:	e007      	b.n	800d096 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	781a      	ldrb	r2, [r3, #0]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	3301      	adds	r3, #1
 800d094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	3b01      	subs	r3, #1
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d1cb      	bne.n	800d046 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	9300      	str	r3, [sp, #0]
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	2140      	movs	r1, #64	@ 0x40
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f000 fb09 	bl	800d6d0 <UART_WaitOnFlagUntilTimeout>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d005      	beq.n	800d0d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2220      	movs	r2, #32
 800d0c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	e006      	b.n	800d0de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2220      	movs	r2, #32
 800d0d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	e000      	b.n	800d0de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800d0dc:	2302      	movs	r3, #2
  }
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3720      	adds	r7, #32
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b084      	sub	sp, #16
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	60f8      	str	r0, [r7, #12]
 800d0ee:	60b9      	str	r1, [r7, #8]
 800d0f0:	4613      	mov	r3, r2
 800d0f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	2b20      	cmp	r3, #32
 800d0fe:	d112      	bne.n	800d126 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d002      	beq.n	800d10c <HAL_UART_Receive_IT+0x26>
 800d106:	88fb      	ldrh	r3, [r7, #6]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d101      	bne.n	800d110 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d10c:	2301      	movs	r3, #1
 800d10e:	e00b      	b.n	800d128 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2200      	movs	r2, #0
 800d114:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d116:	88fb      	ldrh	r3, [r7, #6]
 800d118:	461a      	mov	r2, r3
 800d11a:	68b9      	ldr	r1, [r7, #8]
 800d11c:	68f8      	ldr	r0, [r7, #12]
 800d11e:	f000 fb30 	bl	800d782 <UART_Start_Receive_IT>
 800d122:	4603      	mov	r3, r0
 800d124:	e000      	b.n	800d128 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d126:	2302      	movs	r3, #2
  }
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3710      	adds	r7, #16
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b0ba      	sub	sp, #232	@ 0xe8
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	695b      	ldr	r3, [r3, #20]
 800d152:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d156:	2300      	movs	r3, #0
 800d158:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d15c:	2300      	movs	r3, #0
 800d15e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d166:	f003 030f 	and.w	r3, r3, #15
 800d16a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d16e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d172:	2b00      	cmp	r3, #0
 800d174:	d10f      	bne.n	800d196 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d17a:	f003 0320 	and.w	r3, r3, #32
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d009      	beq.n	800d196 <HAL_UART_IRQHandler+0x66>
 800d182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d186:	f003 0320 	and.w	r3, r3, #32
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d003      	beq.n	800d196 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 fc10 	bl	800d9b4 <UART_Receive_IT>
      return;
 800d194:	e25b      	b.n	800d64e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	f000 80de 	beq.w	800d35c <HAL_UART_IRQHandler+0x22c>
 800d1a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1a4:	f003 0301 	and.w	r3, r3, #1
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d106      	bne.n	800d1ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d1ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f000 80d1 	beq.w	800d35c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d1ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1be:	f003 0301 	and.w	r3, r3, #1
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00b      	beq.n	800d1de <HAL_UART_IRQHandler+0xae>
 800d1c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d005      	beq.n	800d1de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1d6:	f043 0201 	orr.w	r2, r3, #1
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1e2:	f003 0304 	and.w	r3, r3, #4
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d00b      	beq.n	800d202 <HAL_UART_IRQHandler+0xd2>
 800d1ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1ee:	f003 0301 	and.w	r3, r3, #1
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d005      	beq.n	800d202 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1fa:	f043 0202 	orr.w	r2, r3, #2
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d206:	f003 0302 	and.w	r3, r3, #2
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00b      	beq.n	800d226 <HAL_UART_IRQHandler+0xf6>
 800d20e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d212:	f003 0301 	and.w	r3, r3, #1
 800d216:	2b00      	cmp	r3, #0
 800d218:	d005      	beq.n	800d226 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d21e:	f043 0204 	orr.w	r2, r3, #4
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d22a:	f003 0308 	and.w	r3, r3, #8
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d011      	beq.n	800d256 <HAL_UART_IRQHandler+0x126>
 800d232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d236:	f003 0320 	and.w	r3, r3, #32
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d105      	bne.n	800d24a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d23e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d242:	f003 0301 	and.w	r3, r3, #1
 800d246:	2b00      	cmp	r3, #0
 800d248:	d005      	beq.n	800d256 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d24e:	f043 0208 	orr.w	r2, r3, #8
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	f000 81f2 	beq.w	800d644 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d264:	f003 0320 	and.w	r3, r3, #32
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d008      	beq.n	800d27e <HAL_UART_IRQHandler+0x14e>
 800d26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d270:	f003 0320 	and.w	r3, r3, #32
 800d274:	2b00      	cmp	r3, #0
 800d276:	d002      	beq.n	800d27e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 fb9b 	bl	800d9b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	695b      	ldr	r3, [r3, #20]
 800d284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d288:	2b40      	cmp	r3, #64	@ 0x40
 800d28a:	bf0c      	ite	eq
 800d28c:	2301      	moveq	r3, #1
 800d28e:	2300      	movne	r3, #0
 800d290:	b2db      	uxtb	r3, r3
 800d292:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d29a:	f003 0308 	and.w	r3, r3, #8
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d103      	bne.n	800d2aa <HAL_UART_IRQHandler+0x17a>
 800d2a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d04f      	beq.n	800d34a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 faa3 	bl	800d7f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	695b      	ldr	r3, [r3, #20]
 800d2b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2ba:	2b40      	cmp	r3, #64	@ 0x40
 800d2bc:	d141      	bne.n	800d342 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	3314      	adds	r3, #20
 800d2c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d2cc:	e853 3f00 	ldrex	r3, [r3]
 800d2d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d2d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d2d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	3314      	adds	r3, #20
 800d2e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d2ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d2ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d2f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d2fa:	e841 2300 	strex	r3, r2, [r1]
 800d2fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d1d9      	bne.n	800d2be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d013      	beq.n	800d33a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d316:	4a7e      	ldr	r2, [pc, #504]	@ (800d510 <HAL_UART_IRQHandler+0x3e0>)
 800d318:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d31e:	4618      	mov	r0, r3
 800d320:	f7fc fd7f 	bl	8009e22 <HAL_DMA_Abort_IT>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d016      	beq.n	800d358 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d32e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d334:	4610      	mov	r0, r2
 800d336:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d338:	e00e      	b.n	800d358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 f994 	bl	800d668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d340:	e00a      	b.n	800d358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 f990 	bl	800d668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d348:	e006      	b.n	800d358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 f98c 	bl	800d668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d356:	e175      	b.n	800d644 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d358:	bf00      	nop
    return;
 800d35a:	e173      	b.n	800d644 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d360:	2b01      	cmp	r3, #1
 800d362:	f040 814f 	bne.w	800d604 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d36a:	f003 0310 	and.w	r3, r3, #16
 800d36e:	2b00      	cmp	r3, #0
 800d370:	f000 8148 	beq.w	800d604 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d378:	f003 0310 	and.w	r3, r3, #16
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f000 8141 	beq.w	800d604 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d382:	2300      	movs	r3, #0
 800d384:	60bb      	str	r3, [r7, #8]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	60bb      	str	r3, [r7, #8]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	60bb      	str	r3, [r7, #8]
 800d396:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	695b      	ldr	r3, [r3, #20]
 800d39e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3a2:	2b40      	cmp	r3, #64	@ 0x40
 800d3a4:	f040 80b6 	bne.w	800d514 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d3b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f000 8145 	beq.w	800d648 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d3c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	f080 813e 	bcs.w	800d648 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d3d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3d8:	69db      	ldr	r3, [r3, #28]
 800d3da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3de:	f000 8088 	beq.w	800d4f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	330c      	adds	r3, #12
 800d3e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d3f0:	e853 3f00 	ldrex	r3, [r3]
 800d3f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d3f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d3fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d400:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	330c      	adds	r3, #12
 800d40a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d40e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d412:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d416:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d41a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d41e:	e841 2300 	strex	r3, r2, [r1]
 800d422:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d426:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1d9      	bne.n	800d3e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	3314      	adds	r3, #20
 800d434:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d438:	e853 3f00 	ldrex	r3, [r3]
 800d43c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d43e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d440:	f023 0301 	bic.w	r3, r3, #1
 800d444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	3314      	adds	r3, #20
 800d44e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d452:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d456:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d458:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d45a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d45e:	e841 2300 	strex	r3, r2, [r1]
 800d462:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1e1      	bne.n	800d42e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	3314      	adds	r3, #20
 800d470:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d474:	e853 3f00 	ldrex	r3, [r3]
 800d478:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d47a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d47c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d480:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	3314      	adds	r3, #20
 800d48a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d48e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d490:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d492:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d494:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d496:	e841 2300 	strex	r3, r2, [r1]
 800d49a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d49c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1e3      	bne.n	800d46a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2220      	movs	r2, #32
 800d4a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	330c      	adds	r3, #12
 800d4b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4ba:	e853 3f00 	ldrex	r3, [r3]
 800d4be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d4c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4c2:	f023 0310 	bic.w	r3, r3, #16
 800d4c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	330c      	adds	r3, #12
 800d4d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d4d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d4d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d4da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4dc:	e841 2300 	strex	r3, r2, [r1]
 800d4e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d4e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d1e3      	bne.n	800d4b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fc fc28 	bl	8009d42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2202      	movs	r2, #2
 800d4f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d500:	b29b      	uxth	r3, r3
 800d502:	1ad3      	subs	r3, r2, r3
 800d504:	b29b      	uxth	r3, r3
 800d506:	4619      	mov	r1, r3
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 f8b7 	bl	800d67c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d50e:	e09b      	b.n	800d648 <HAL_UART_IRQHandler+0x518>
 800d510:	0800d8bd 	.word	0x0800d8bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	1ad3      	subs	r3, r2, r3
 800d520:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d528:	b29b      	uxth	r3, r3
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f000 808e 	beq.w	800d64c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d534:	2b00      	cmp	r3, #0
 800d536:	f000 8089 	beq.w	800d64c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	330c      	adds	r3, #12
 800d540:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d544:	e853 3f00 	ldrex	r3, [r3]
 800d548:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d54a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d54c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d550:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	330c      	adds	r3, #12
 800d55a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d55e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d560:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d562:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d564:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d566:	e841 2300 	strex	r3, r2, [r1]
 800d56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d56c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1e3      	bne.n	800d53a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	3314      	adds	r3, #20
 800d578:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57c:	e853 3f00 	ldrex	r3, [r3]
 800d580:	623b      	str	r3, [r7, #32]
   return(result);
 800d582:	6a3b      	ldr	r3, [r7, #32]
 800d584:	f023 0301 	bic.w	r3, r3, #1
 800d588:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	3314      	adds	r3, #20
 800d592:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d596:	633a      	str	r2, [r7, #48]	@ 0x30
 800d598:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d59a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d59c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d59e:	e841 2300 	strex	r3, r2, [r1]
 800d5a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1e3      	bne.n	800d572 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2220      	movs	r2, #32
 800d5ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	330c      	adds	r3, #12
 800d5be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	e853 3f00 	ldrex	r3, [r3]
 800d5c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f023 0310 	bic.w	r3, r3, #16
 800d5ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	330c      	adds	r3, #12
 800d5d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d5dc:	61fa      	str	r2, [r7, #28]
 800d5de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e0:	69b9      	ldr	r1, [r7, #24]
 800d5e2:	69fa      	ldr	r2, [r7, #28]
 800d5e4:	e841 2300 	strex	r3, r2, [r1]
 800d5e8:	617b      	str	r3, [r7, #20]
   return(result);
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1e3      	bne.n	800d5b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2202      	movs	r2, #2
 800d5f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d5f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f000 f83d 	bl	800d67c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d602:	e023      	b.n	800d64c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d009      	beq.n	800d624 <HAL_UART_IRQHandler+0x4f4>
 800d610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d003      	beq.n	800d624 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 f961 	bl	800d8e4 <UART_Transmit_IT>
    return;
 800d622:	e014      	b.n	800d64e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00e      	beq.n	800d64e <HAL_UART_IRQHandler+0x51e>
 800d630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d008      	beq.n	800d64e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 f9a1 	bl	800d984 <UART_EndTransmit_IT>
    return;
 800d642:	e004      	b.n	800d64e <HAL_UART_IRQHandler+0x51e>
    return;
 800d644:	bf00      	nop
 800d646:	e002      	b.n	800d64e <HAL_UART_IRQHandler+0x51e>
      return;
 800d648:	bf00      	nop
 800d64a:	e000      	b.n	800d64e <HAL_UART_IRQHandler+0x51e>
      return;
 800d64c:	bf00      	nop
  }
}
 800d64e:	37e8      	adds	r7, #232	@ 0xe8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d65c:	bf00      	nop
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d670:	bf00      	nop
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	460b      	mov	r3, r1
 800d686:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d688:	bf00      	nop
 800d68a:	370c      	adds	r7, #12
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr

0800d694 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800d694:	b480      	push	{r7}
 800d696:	b085      	sub	sp, #20
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800d69c:	2300      	movs	r3, #0
 800d69e:	60fb      	str	r3, [r7, #12]
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	b2da      	uxtb	r2, r3
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	b2db      	uxtb	r3, r3
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	603b      	str	r3, [r7, #0]
 800d6dc:	4613      	mov	r3, r2
 800d6de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6e0:	e03b      	b.n	800d75a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6e2:	6a3b      	ldr	r3, [r7, #32]
 800d6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6e8:	d037      	beq.n	800d75a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6ea:	f7fc f9e9 	bl	8009ac0 <HAL_GetTick>
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	1ad3      	subs	r3, r2, r3
 800d6f4:	6a3a      	ldr	r2, [r7, #32]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d302      	bcc.n	800d700 <UART_WaitOnFlagUntilTimeout+0x30>
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d700:	2303      	movs	r3, #3
 800d702:	e03a      	b.n	800d77a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	f003 0304 	and.w	r3, r3, #4
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d023      	beq.n	800d75a <UART_WaitOnFlagUntilTimeout+0x8a>
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	2b80      	cmp	r3, #128	@ 0x80
 800d716:	d020      	beq.n	800d75a <UART_WaitOnFlagUntilTimeout+0x8a>
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	2b40      	cmp	r3, #64	@ 0x40
 800d71c:	d01d      	beq.n	800d75a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f003 0308 	and.w	r3, r3, #8
 800d728:	2b08      	cmp	r3, #8
 800d72a:	d116      	bne.n	800d75a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800d72c:	2300      	movs	r3, #0
 800d72e:	617b      	str	r3, [r7, #20]
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	617b      	str	r3, [r7, #20]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	617b      	str	r3, [r7, #20]
 800d740:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f000 f857 	bl	800d7f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2208      	movs	r2, #8
 800d74c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2200      	movs	r2, #0
 800d752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d756:	2301      	movs	r3, #1
 800d758:	e00f      	b.n	800d77a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	4013      	ands	r3, r2
 800d764:	68ba      	ldr	r2, [r7, #8]
 800d766:	429a      	cmp	r2, r3
 800d768:	bf0c      	ite	eq
 800d76a:	2301      	moveq	r3, #1
 800d76c:	2300      	movne	r3, #0
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	461a      	mov	r2, r3
 800d772:	79fb      	ldrb	r3, [r7, #7]
 800d774:	429a      	cmp	r2, r3
 800d776:	d0b4      	beq.n	800d6e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d778:	2300      	movs	r3, #0
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3718      	adds	r7, #24
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}

0800d782 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d782:	b480      	push	{r7}
 800d784:	b085      	sub	sp, #20
 800d786:	af00      	add	r7, sp, #0
 800d788:	60f8      	str	r0, [r7, #12]
 800d78a:	60b9      	str	r1, [r7, #8]
 800d78c:	4613      	mov	r3, r2
 800d78e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	68ba      	ldr	r2, [r7, #8]
 800d794:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	88fa      	ldrh	r2, [r7, #6]
 800d79a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	88fa      	ldrh	r2, [r7, #6]
 800d7a0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2222      	movs	r2, #34	@ 0x22
 800d7ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	691b      	ldr	r3, [r3, #16]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d007      	beq.n	800d7c8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	68da      	ldr	r2, [r3, #12]
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d7c6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	695a      	ldr	r2, [r3, #20]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f042 0201 	orr.w	r2, r2, #1
 800d7d6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	68da      	ldr	r2, [r3, #12]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f042 0220 	orr.w	r2, r2, #32
 800d7e6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3714      	adds	r7, #20
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr

0800d7f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d7f6:	b480      	push	{r7}
 800d7f8:	b095      	sub	sp, #84	@ 0x54
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	330c      	adds	r3, #12
 800d804:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d808:	e853 3f00 	ldrex	r3, [r3]
 800d80c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d810:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d814:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	330c      	adds	r3, #12
 800d81c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d81e:	643a      	str	r2, [r7, #64]	@ 0x40
 800d820:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d822:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d824:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d826:	e841 2300 	strex	r3, r2, [r1]
 800d82a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1e5      	bne.n	800d7fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	3314      	adds	r3, #20
 800d838:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d83a:	6a3b      	ldr	r3, [r7, #32]
 800d83c:	e853 3f00 	ldrex	r3, [r3]
 800d840:	61fb      	str	r3, [r7, #28]
   return(result);
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	f023 0301 	bic.w	r3, r3, #1
 800d848:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	3314      	adds	r3, #20
 800d850:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d854:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d856:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d85a:	e841 2300 	strex	r3, r2, [r1]
 800d85e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1e5      	bne.n	800d832 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d119      	bne.n	800d8a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	330c      	adds	r3, #12
 800d874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	e853 3f00 	ldrex	r3, [r3]
 800d87c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	f023 0310 	bic.w	r3, r3, #16
 800d884:	647b      	str	r3, [r7, #68]	@ 0x44
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	330c      	adds	r3, #12
 800d88c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d88e:	61ba      	str	r2, [r7, #24]
 800d890:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d892:	6979      	ldr	r1, [r7, #20]
 800d894:	69ba      	ldr	r2, [r7, #24]
 800d896:	e841 2300 	strex	r3, r2, [r1]
 800d89a:	613b      	str	r3, [r7, #16]
   return(result);
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1e5      	bne.n	800d86e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2220      	movs	r2, #32
 800d8a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d8b0:	bf00      	nop
 800d8b2:	3754      	adds	r7, #84	@ 0x54
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d8d6:	68f8      	ldr	r0, [r7, #12]
 800d8d8:	f7ff fec6 	bl	800d668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8dc:	bf00      	nop
 800d8de:	3710      	adds	r7, #16
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b085      	sub	sp, #20
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	2b21      	cmp	r3, #33	@ 0x21
 800d8f6:	d13e      	bne.n	800d976 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	689b      	ldr	r3, [r3, #8]
 800d8fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d900:	d114      	bne.n	800d92c <UART_Transmit_IT+0x48>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	691b      	ldr	r3, [r3, #16]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d110      	bne.n	800d92c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6a1b      	ldr	r3, [r3, #32]
 800d90e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	881b      	ldrh	r3, [r3, #0]
 800d914:	461a      	mov	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d91e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6a1b      	ldr	r3, [r3, #32]
 800d924:	1c9a      	adds	r2, r3, #2
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	621a      	str	r2, [r3, #32]
 800d92a:	e008      	b.n	800d93e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6a1b      	ldr	r3, [r3, #32]
 800d930:	1c59      	adds	r1, r3, #1
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	6211      	str	r1, [r2, #32]
 800d936:	781a      	ldrb	r2, [r3, #0]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d942:	b29b      	uxth	r3, r3
 800d944:	3b01      	subs	r3, #1
 800d946:	b29b      	uxth	r3, r3
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	4619      	mov	r1, r3
 800d94c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d10f      	bne.n	800d972 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68da      	ldr	r2, [r3, #12]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d960:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	68da      	ldr	r2, [r3, #12]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d970:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d972:	2300      	movs	r3, #0
 800d974:	e000      	b.n	800d978 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d976:	2302      	movs	r3, #2
  }
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3714      	adds	r7, #20
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68da      	ldr	r2, [r3, #12]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d99a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2220      	movs	r2, #32
 800d9a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f7ff fe55 	bl	800d654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3708      	adds	r7, #8
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b08c      	sub	sp, #48	@ 0x30
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	2b22      	cmp	r3, #34	@ 0x22
 800d9c6:	f040 80ae 	bne.w	800db26 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d9d2:	d117      	bne.n	800da04 <UART_Receive_IT+0x50>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	691b      	ldr	r3, [r3, #16]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d113      	bne.n	800da04 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9f2:	b29a      	uxth	r2, r3
 800d9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9fc:	1c9a      	adds	r2, r3, #2
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	629a      	str	r2, [r3, #40]	@ 0x28
 800da02:	e026      	b.n	800da52 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800da0a:	2300      	movs	r3, #0
 800da0c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da16:	d007      	beq.n	800da28 <UART_Receive_IT+0x74>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d10a      	bne.n	800da36 <UART_Receive_IT+0x82>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	691b      	ldr	r3, [r3, #16]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d106      	bne.n	800da36 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	b2da      	uxtb	r2, r3
 800da30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da32:	701a      	strb	r2, [r3, #0]
 800da34:	e008      	b.n	800da48 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da42:	b2da      	uxtb	r2, r3
 800da44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da46:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da4c:	1c5a      	adds	r2, r3, #1
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800da56:	b29b      	uxth	r3, r3
 800da58:	3b01      	subs	r3, #1
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	687a      	ldr	r2, [r7, #4]
 800da5e:	4619      	mov	r1, r3
 800da60:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800da62:	2b00      	cmp	r3, #0
 800da64:	d15d      	bne.n	800db22 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	68da      	ldr	r2, [r3, #12]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f022 0220 	bic.w	r2, r2, #32
 800da74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	68da      	ldr	r2, [r3, #12]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800da84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	695a      	ldr	r2, [r3, #20]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f022 0201 	bic.w	r2, r2, #1
 800da94:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2220      	movs	r2, #32
 800da9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d135      	bne.n	800db18 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2200      	movs	r2, #0
 800dab0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	330c      	adds	r3, #12
 800dab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	e853 3f00 	ldrex	r3, [r3]
 800dac0:	613b      	str	r3, [r7, #16]
   return(result);
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	f023 0310 	bic.w	r3, r3, #16
 800dac8:	627b      	str	r3, [r7, #36]	@ 0x24
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	330c      	adds	r3, #12
 800dad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dad2:	623a      	str	r2, [r7, #32]
 800dad4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dad6:	69f9      	ldr	r1, [r7, #28]
 800dad8:	6a3a      	ldr	r2, [r7, #32]
 800dada:	e841 2300 	strex	r3, r2, [r1]
 800dade:	61bb      	str	r3, [r7, #24]
   return(result);
 800dae0:	69bb      	ldr	r3, [r7, #24]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d1e5      	bne.n	800dab2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f003 0310 	and.w	r3, r3, #16
 800daf0:	2b10      	cmp	r3, #16
 800daf2:	d10a      	bne.n	800db0a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800daf4:	2300      	movs	r3, #0
 800daf6:	60fb      	str	r3, [r7, #12]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	60fb      	str	r3, [r7, #12]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	60fb      	str	r3, [r7, #12]
 800db08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800db0e:	4619      	mov	r1, r3
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f7ff fdb3 	bl	800d67c <HAL_UARTEx_RxEventCallback>
 800db16:	e002      	b.n	800db1e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f7f7 fcb1 	bl	8005480 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800db1e:	2300      	movs	r3, #0
 800db20:	e002      	b.n	800db28 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	e000      	b.n	800db28 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800db26:	2302      	movs	r3, #2
  }
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3730      	adds	r7, #48	@ 0x30
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800db30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db34:	b0c0      	sub	sp, #256	@ 0x100
 800db36:	af00      	add	r7, sp, #0
 800db38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800db3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	691b      	ldr	r3, [r3, #16]
 800db44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800db48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db4c:	68d9      	ldr	r1, [r3, #12]
 800db4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	ea40 0301 	orr.w	r3, r0, r1
 800db58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800db5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db5e:	689a      	ldr	r2, [r3, #8]
 800db60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db64:	691b      	ldr	r3, [r3, #16]
 800db66:	431a      	orrs	r2, r3
 800db68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db6c:	695b      	ldr	r3, [r3, #20]
 800db6e:	431a      	orrs	r2, r3
 800db70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db74:	69db      	ldr	r3, [r3, #28]
 800db76:	4313      	orrs	r3, r2
 800db78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800db7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800db88:	f021 010c 	bic.w	r1, r1, #12
 800db8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800db96:	430b      	orrs	r3, r1
 800db98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800db9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	695b      	ldr	r3, [r3, #20]
 800dba2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800dba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dbaa:	6999      	ldr	r1, [r3, #24]
 800dbac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	ea40 0301 	orr.w	r3, r0, r1
 800dbb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dbb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	4b8f      	ldr	r3, [pc, #572]	@ (800ddfc <UART_SetConfig+0x2cc>)
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d005      	beq.n	800dbd0 <UART_SetConfig+0xa0>
 800dbc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	4b8d      	ldr	r3, [pc, #564]	@ (800de00 <UART_SetConfig+0x2d0>)
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d104      	bne.n	800dbda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dbd0:	f7fe f918 	bl	800be04 <HAL_RCC_GetPCLK2Freq>
 800dbd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800dbd8:	e003      	b.n	800dbe2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dbda:	f7fe f8ff 	bl	800bddc <HAL_RCC_GetPCLK1Freq>
 800dbde:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dbe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dbe6:	69db      	ldr	r3, [r3, #28]
 800dbe8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dbec:	f040 810c 	bne.w	800de08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dbf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dbfa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800dbfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800dc02:	4622      	mov	r2, r4
 800dc04:	462b      	mov	r3, r5
 800dc06:	1891      	adds	r1, r2, r2
 800dc08:	65b9      	str	r1, [r7, #88]	@ 0x58
 800dc0a:	415b      	adcs	r3, r3
 800dc0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dc0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800dc12:	4621      	mov	r1, r4
 800dc14:	eb12 0801 	adds.w	r8, r2, r1
 800dc18:	4629      	mov	r1, r5
 800dc1a:	eb43 0901 	adc.w	r9, r3, r1
 800dc1e:	f04f 0200 	mov.w	r2, #0
 800dc22:	f04f 0300 	mov.w	r3, #0
 800dc26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dc2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dc2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dc32:	4690      	mov	r8, r2
 800dc34:	4699      	mov	r9, r3
 800dc36:	4623      	mov	r3, r4
 800dc38:	eb18 0303 	adds.w	r3, r8, r3
 800dc3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dc40:	462b      	mov	r3, r5
 800dc42:	eb49 0303 	adc.w	r3, r9, r3
 800dc46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dc4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	2200      	movs	r2, #0
 800dc52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dc56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800dc5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800dc5e:	460b      	mov	r3, r1
 800dc60:	18db      	adds	r3, r3, r3
 800dc62:	653b      	str	r3, [r7, #80]	@ 0x50
 800dc64:	4613      	mov	r3, r2
 800dc66:	eb42 0303 	adc.w	r3, r2, r3
 800dc6a:	657b      	str	r3, [r7, #84]	@ 0x54
 800dc6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800dc70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800dc74:	f7f3 f858 	bl	8000d28 <__aeabi_uldivmod>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	4b61      	ldr	r3, [pc, #388]	@ (800de04 <UART_SetConfig+0x2d4>)
 800dc7e:	fba3 2302 	umull	r2, r3, r3, r2
 800dc82:	095b      	lsrs	r3, r3, #5
 800dc84:	011c      	lsls	r4, r3, #4
 800dc86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dc90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800dc94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800dc98:	4642      	mov	r2, r8
 800dc9a:	464b      	mov	r3, r9
 800dc9c:	1891      	adds	r1, r2, r2
 800dc9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800dca0:	415b      	adcs	r3, r3
 800dca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dca4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800dca8:	4641      	mov	r1, r8
 800dcaa:	eb12 0a01 	adds.w	sl, r2, r1
 800dcae:	4649      	mov	r1, r9
 800dcb0:	eb43 0b01 	adc.w	fp, r3, r1
 800dcb4:	f04f 0200 	mov.w	r2, #0
 800dcb8:	f04f 0300 	mov.w	r3, #0
 800dcbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800dcc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800dcc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dcc8:	4692      	mov	sl, r2
 800dcca:	469b      	mov	fp, r3
 800dccc:	4643      	mov	r3, r8
 800dcce:	eb1a 0303 	adds.w	r3, sl, r3
 800dcd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dcd6:	464b      	mov	r3, r9
 800dcd8:	eb4b 0303 	adc.w	r3, fp, r3
 800dcdc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dcec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800dcf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	18db      	adds	r3, r3, r3
 800dcf8:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	eb42 0303 	adc.w	r3, r2, r3
 800dd00:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800dd06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800dd0a:	f7f3 f80d 	bl	8000d28 <__aeabi_uldivmod>
 800dd0e:	4602      	mov	r2, r0
 800dd10:	460b      	mov	r3, r1
 800dd12:	4611      	mov	r1, r2
 800dd14:	4b3b      	ldr	r3, [pc, #236]	@ (800de04 <UART_SetConfig+0x2d4>)
 800dd16:	fba3 2301 	umull	r2, r3, r3, r1
 800dd1a:	095b      	lsrs	r3, r3, #5
 800dd1c:	2264      	movs	r2, #100	@ 0x64
 800dd1e:	fb02 f303 	mul.w	r3, r2, r3
 800dd22:	1acb      	subs	r3, r1, r3
 800dd24:	00db      	lsls	r3, r3, #3
 800dd26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800dd2a:	4b36      	ldr	r3, [pc, #216]	@ (800de04 <UART_SetConfig+0x2d4>)
 800dd2c:	fba3 2302 	umull	r2, r3, r3, r2
 800dd30:	095b      	lsrs	r3, r3, #5
 800dd32:	005b      	lsls	r3, r3, #1
 800dd34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800dd38:	441c      	add	r4, r3
 800dd3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dd44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800dd48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800dd4c:	4642      	mov	r2, r8
 800dd4e:	464b      	mov	r3, r9
 800dd50:	1891      	adds	r1, r2, r2
 800dd52:	63b9      	str	r1, [r7, #56]	@ 0x38
 800dd54:	415b      	adcs	r3, r3
 800dd56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800dd5c:	4641      	mov	r1, r8
 800dd5e:	1851      	adds	r1, r2, r1
 800dd60:	6339      	str	r1, [r7, #48]	@ 0x30
 800dd62:	4649      	mov	r1, r9
 800dd64:	414b      	adcs	r3, r1
 800dd66:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd68:	f04f 0200 	mov.w	r2, #0
 800dd6c:	f04f 0300 	mov.w	r3, #0
 800dd70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800dd74:	4659      	mov	r1, fp
 800dd76:	00cb      	lsls	r3, r1, #3
 800dd78:	4651      	mov	r1, sl
 800dd7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dd7e:	4651      	mov	r1, sl
 800dd80:	00ca      	lsls	r2, r1, #3
 800dd82:	4610      	mov	r0, r2
 800dd84:	4619      	mov	r1, r3
 800dd86:	4603      	mov	r3, r0
 800dd88:	4642      	mov	r2, r8
 800dd8a:	189b      	adds	r3, r3, r2
 800dd8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dd90:	464b      	mov	r3, r9
 800dd92:	460a      	mov	r2, r1
 800dd94:	eb42 0303 	adc.w	r3, r2, r3
 800dd98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dd9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	2200      	movs	r2, #0
 800dda4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dda8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ddac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	18db      	adds	r3, r3, r3
 800ddb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	eb42 0303 	adc.w	r3, r2, r3
 800ddbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ddbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ddc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ddc6:	f7f2 ffaf 	bl	8000d28 <__aeabi_uldivmod>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	460b      	mov	r3, r1
 800ddce:	4b0d      	ldr	r3, [pc, #52]	@ (800de04 <UART_SetConfig+0x2d4>)
 800ddd0:	fba3 1302 	umull	r1, r3, r3, r2
 800ddd4:	095b      	lsrs	r3, r3, #5
 800ddd6:	2164      	movs	r1, #100	@ 0x64
 800ddd8:	fb01 f303 	mul.w	r3, r1, r3
 800dddc:	1ad3      	subs	r3, r2, r3
 800ddde:	00db      	lsls	r3, r3, #3
 800dde0:	3332      	adds	r3, #50	@ 0x32
 800dde2:	4a08      	ldr	r2, [pc, #32]	@ (800de04 <UART_SetConfig+0x2d4>)
 800dde4:	fba2 2303 	umull	r2, r3, r2, r3
 800dde8:	095b      	lsrs	r3, r3, #5
 800ddea:	f003 0207 	and.w	r2, r3, #7
 800ddee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4422      	add	r2, r4
 800ddf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ddf8:	e106      	b.n	800e008 <UART_SetConfig+0x4d8>
 800ddfa:	bf00      	nop
 800ddfc:	40011000 	.word	0x40011000
 800de00:	40011400 	.word	0x40011400
 800de04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800de08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800de0c:	2200      	movs	r2, #0
 800de0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800de12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800de16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800de1a:	4642      	mov	r2, r8
 800de1c:	464b      	mov	r3, r9
 800de1e:	1891      	adds	r1, r2, r2
 800de20:	6239      	str	r1, [r7, #32]
 800de22:	415b      	adcs	r3, r3
 800de24:	627b      	str	r3, [r7, #36]	@ 0x24
 800de26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800de2a:	4641      	mov	r1, r8
 800de2c:	1854      	adds	r4, r2, r1
 800de2e:	4649      	mov	r1, r9
 800de30:	eb43 0501 	adc.w	r5, r3, r1
 800de34:	f04f 0200 	mov.w	r2, #0
 800de38:	f04f 0300 	mov.w	r3, #0
 800de3c:	00eb      	lsls	r3, r5, #3
 800de3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800de42:	00e2      	lsls	r2, r4, #3
 800de44:	4614      	mov	r4, r2
 800de46:	461d      	mov	r5, r3
 800de48:	4643      	mov	r3, r8
 800de4a:	18e3      	adds	r3, r4, r3
 800de4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800de50:	464b      	mov	r3, r9
 800de52:	eb45 0303 	adc.w	r3, r5, r3
 800de56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800de5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	2200      	movs	r2, #0
 800de62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800de66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800de6a:	f04f 0200 	mov.w	r2, #0
 800de6e:	f04f 0300 	mov.w	r3, #0
 800de72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800de76:	4629      	mov	r1, r5
 800de78:	008b      	lsls	r3, r1, #2
 800de7a:	4621      	mov	r1, r4
 800de7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800de80:	4621      	mov	r1, r4
 800de82:	008a      	lsls	r2, r1, #2
 800de84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800de88:	f7f2 ff4e 	bl	8000d28 <__aeabi_uldivmod>
 800de8c:	4602      	mov	r2, r0
 800de8e:	460b      	mov	r3, r1
 800de90:	4b60      	ldr	r3, [pc, #384]	@ (800e014 <UART_SetConfig+0x4e4>)
 800de92:	fba3 2302 	umull	r2, r3, r3, r2
 800de96:	095b      	lsrs	r3, r3, #5
 800de98:	011c      	lsls	r4, r3, #4
 800de9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800de9e:	2200      	movs	r2, #0
 800dea0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dea4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800dea8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800deac:	4642      	mov	r2, r8
 800deae:	464b      	mov	r3, r9
 800deb0:	1891      	adds	r1, r2, r2
 800deb2:	61b9      	str	r1, [r7, #24]
 800deb4:	415b      	adcs	r3, r3
 800deb6:	61fb      	str	r3, [r7, #28]
 800deb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800debc:	4641      	mov	r1, r8
 800debe:	1851      	adds	r1, r2, r1
 800dec0:	6139      	str	r1, [r7, #16]
 800dec2:	4649      	mov	r1, r9
 800dec4:	414b      	adcs	r3, r1
 800dec6:	617b      	str	r3, [r7, #20]
 800dec8:	f04f 0200 	mov.w	r2, #0
 800decc:	f04f 0300 	mov.w	r3, #0
 800ded0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ded4:	4659      	mov	r1, fp
 800ded6:	00cb      	lsls	r3, r1, #3
 800ded8:	4651      	mov	r1, sl
 800deda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dede:	4651      	mov	r1, sl
 800dee0:	00ca      	lsls	r2, r1, #3
 800dee2:	4610      	mov	r0, r2
 800dee4:	4619      	mov	r1, r3
 800dee6:	4603      	mov	r3, r0
 800dee8:	4642      	mov	r2, r8
 800deea:	189b      	adds	r3, r3, r2
 800deec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800def0:	464b      	mov	r3, r9
 800def2:	460a      	mov	r2, r1
 800def4:	eb42 0303 	adc.w	r3, r2, r3
 800def8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800defc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	2200      	movs	r2, #0
 800df04:	67bb      	str	r3, [r7, #120]	@ 0x78
 800df06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800df08:	f04f 0200 	mov.w	r2, #0
 800df0c:	f04f 0300 	mov.w	r3, #0
 800df10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800df14:	4649      	mov	r1, r9
 800df16:	008b      	lsls	r3, r1, #2
 800df18:	4641      	mov	r1, r8
 800df1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800df1e:	4641      	mov	r1, r8
 800df20:	008a      	lsls	r2, r1, #2
 800df22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800df26:	f7f2 feff 	bl	8000d28 <__aeabi_uldivmod>
 800df2a:	4602      	mov	r2, r0
 800df2c:	460b      	mov	r3, r1
 800df2e:	4611      	mov	r1, r2
 800df30:	4b38      	ldr	r3, [pc, #224]	@ (800e014 <UART_SetConfig+0x4e4>)
 800df32:	fba3 2301 	umull	r2, r3, r3, r1
 800df36:	095b      	lsrs	r3, r3, #5
 800df38:	2264      	movs	r2, #100	@ 0x64
 800df3a:	fb02 f303 	mul.w	r3, r2, r3
 800df3e:	1acb      	subs	r3, r1, r3
 800df40:	011b      	lsls	r3, r3, #4
 800df42:	3332      	adds	r3, #50	@ 0x32
 800df44:	4a33      	ldr	r2, [pc, #204]	@ (800e014 <UART_SetConfig+0x4e4>)
 800df46:	fba2 2303 	umull	r2, r3, r2, r3
 800df4a:	095b      	lsrs	r3, r3, #5
 800df4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800df50:	441c      	add	r4, r3
 800df52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800df56:	2200      	movs	r2, #0
 800df58:	673b      	str	r3, [r7, #112]	@ 0x70
 800df5a:	677a      	str	r2, [r7, #116]	@ 0x74
 800df5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800df60:	4642      	mov	r2, r8
 800df62:	464b      	mov	r3, r9
 800df64:	1891      	adds	r1, r2, r2
 800df66:	60b9      	str	r1, [r7, #8]
 800df68:	415b      	adcs	r3, r3
 800df6a:	60fb      	str	r3, [r7, #12]
 800df6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800df70:	4641      	mov	r1, r8
 800df72:	1851      	adds	r1, r2, r1
 800df74:	6039      	str	r1, [r7, #0]
 800df76:	4649      	mov	r1, r9
 800df78:	414b      	adcs	r3, r1
 800df7a:	607b      	str	r3, [r7, #4]
 800df7c:	f04f 0200 	mov.w	r2, #0
 800df80:	f04f 0300 	mov.w	r3, #0
 800df84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800df88:	4659      	mov	r1, fp
 800df8a:	00cb      	lsls	r3, r1, #3
 800df8c:	4651      	mov	r1, sl
 800df8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800df92:	4651      	mov	r1, sl
 800df94:	00ca      	lsls	r2, r1, #3
 800df96:	4610      	mov	r0, r2
 800df98:	4619      	mov	r1, r3
 800df9a:	4603      	mov	r3, r0
 800df9c:	4642      	mov	r2, r8
 800df9e:	189b      	adds	r3, r3, r2
 800dfa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dfa2:	464b      	mov	r3, r9
 800dfa4:	460a      	mov	r2, r1
 800dfa6:	eb42 0303 	adc.w	r3, r2, r3
 800dfaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dfac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	663b      	str	r3, [r7, #96]	@ 0x60
 800dfb6:	667a      	str	r2, [r7, #100]	@ 0x64
 800dfb8:	f04f 0200 	mov.w	r2, #0
 800dfbc:	f04f 0300 	mov.w	r3, #0
 800dfc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800dfc4:	4649      	mov	r1, r9
 800dfc6:	008b      	lsls	r3, r1, #2
 800dfc8:	4641      	mov	r1, r8
 800dfca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dfce:	4641      	mov	r1, r8
 800dfd0:	008a      	lsls	r2, r1, #2
 800dfd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800dfd6:	f7f2 fea7 	bl	8000d28 <__aeabi_uldivmod>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	460b      	mov	r3, r1
 800dfde:	4b0d      	ldr	r3, [pc, #52]	@ (800e014 <UART_SetConfig+0x4e4>)
 800dfe0:	fba3 1302 	umull	r1, r3, r3, r2
 800dfe4:	095b      	lsrs	r3, r3, #5
 800dfe6:	2164      	movs	r1, #100	@ 0x64
 800dfe8:	fb01 f303 	mul.w	r3, r1, r3
 800dfec:	1ad3      	subs	r3, r2, r3
 800dfee:	011b      	lsls	r3, r3, #4
 800dff0:	3332      	adds	r3, #50	@ 0x32
 800dff2:	4a08      	ldr	r2, [pc, #32]	@ (800e014 <UART_SetConfig+0x4e4>)
 800dff4:	fba2 2303 	umull	r2, r3, r2, r3
 800dff8:	095b      	lsrs	r3, r3, #5
 800dffa:	f003 020f 	and.w	r2, r3, #15
 800dffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4422      	add	r2, r4
 800e006:	609a      	str	r2, [r3, #8]
}
 800e008:	bf00      	nop
 800e00a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800e00e:	46bd      	mov	sp, r7
 800e010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e014:	51eb851f 	.word	0x51eb851f

0800e018 <__cvt>:
 800e018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e01c:	ec57 6b10 	vmov	r6, r7, d0
 800e020:	2f00      	cmp	r7, #0
 800e022:	460c      	mov	r4, r1
 800e024:	4619      	mov	r1, r3
 800e026:	463b      	mov	r3, r7
 800e028:	bfbb      	ittet	lt
 800e02a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e02e:	461f      	movlt	r7, r3
 800e030:	2300      	movge	r3, #0
 800e032:	232d      	movlt	r3, #45	@ 0x2d
 800e034:	700b      	strb	r3, [r1, #0]
 800e036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e038:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e03c:	4691      	mov	r9, r2
 800e03e:	f023 0820 	bic.w	r8, r3, #32
 800e042:	bfbc      	itt	lt
 800e044:	4632      	movlt	r2, r6
 800e046:	4616      	movlt	r6, r2
 800e048:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e04c:	d005      	beq.n	800e05a <__cvt+0x42>
 800e04e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e052:	d100      	bne.n	800e056 <__cvt+0x3e>
 800e054:	3401      	adds	r4, #1
 800e056:	2102      	movs	r1, #2
 800e058:	e000      	b.n	800e05c <__cvt+0x44>
 800e05a:	2103      	movs	r1, #3
 800e05c:	ab03      	add	r3, sp, #12
 800e05e:	9301      	str	r3, [sp, #4]
 800e060:	ab02      	add	r3, sp, #8
 800e062:	9300      	str	r3, [sp, #0]
 800e064:	ec47 6b10 	vmov	d0, r6, r7
 800e068:	4653      	mov	r3, sl
 800e06a:	4622      	mov	r2, r4
 800e06c:	f000 ff4c 	bl	800ef08 <_dtoa_r>
 800e070:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e074:	4605      	mov	r5, r0
 800e076:	d119      	bne.n	800e0ac <__cvt+0x94>
 800e078:	f019 0f01 	tst.w	r9, #1
 800e07c:	d00e      	beq.n	800e09c <__cvt+0x84>
 800e07e:	eb00 0904 	add.w	r9, r0, r4
 800e082:	2200      	movs	r2, #0
 800e084:	2300      	movs	r3, #0
 800e086:	4630      	mov	r0, r6
 800e088:	4639      	mov	r1, r7
 800e08a:	f7f2 fd1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e08e:	b108      	cbz	r0, 800e094 <__cvt+0x7c>
 800e090:	f8cd 900c 	str.w	r9, [sp, #12]
 800e094:	2230      	movs	r2, #48	@ 0x30
 800e096:	9b03      	ldr	r3, [sp, #12]
 800e098:	454b      	cmp	r3, r9
 800e09a:	d31e      	bcc.n	800e0da <__cvt+0xc2>
 800e09c:	9b03      	ldr	r3, [sp, #12]
 800e09e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0a0:	1b5b      	subs	r3, r3, r5
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	6013      	str	r3, [r2, #0]
 800e0a6:	b004      	add	sp, #16
 800e0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e0b0:	eb00 0904 	add.w	r9, r0, r4
 800e0b4:	d1e5      	bne.n	800e082 <__cvt+0x6a>
 800e0b6:	7803      	ldrb	r3, [r0, #0]
 800e0b8:	2b30      	cmp	r3, #48	@ 0x30
 800e0ba:	d10a      	bne.n	800e0d2 <__cvt+0xba>
 800e0bc:	2200      	movs	r2, #0
 800e0be:	2300      	movs	r3, #0
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	4639      	mov	r1, r7
 800e0c4:	f7f2 fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0c8:	b918      	cbnz	r0, 800e0d2 <__cvt+0xba>
 800e0ca:	f1c4 0401 	rsb	r4, r4, #1
 800e0ce:	f8ca 4000 	str.w	r4, [sl]
 800e0d2:	f8da 3000 	ldr.w	r3, [sl]
 800e0d6:	4499      	add	r9, r3
 800e0d8:	e7d3      	b.n	800e082 <__cvt+0x6a>
 800e0da:	1c59      	adds	r1, r3, #1
 800e0dc:	9103      	str	r1, [sp, #12]
 800e0de:	701a      	strb	r2, [r3, #0]
 800e0e0:	e7d9      	b.n	800e096 <__cvt+0x7e>

0800e0e2 <__exponent>:
 800e0e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0e4:	2900      	cmp	r1, #0
 800e0e6:	bfba      	itte	lt
 800e0e8:	4249      	neglt	r1, r1
 800e0ea:	232d      	movlt	r3, #45	@ 0x2d
 800e0ec:	232b      	movge	r3, #43	@ 0x2b
 800e0ee:	2909      	cmp	r1, #9
 800e0f0:	7002      	strb	r2, [r0, #0]
 800e0f2:	7043      	strb	r3, [r0, #1]
 800e0f4:	dd29      	ble.n	800e14a <__exponent+0x68>
 800e0f6:	f10d 0307 	add.w	r3, sp, #7
 800e0fa:	461d      	mov	r5, r3
 800e0fc:	270a      	movs	r7, #10
 800e0fe:	461a      	mov	r2, r3
 800e100:	fbb1 f6f7 	udiv	r6, r1, r7
 800e104:	fb07 1416 	mls	r4, r7, r6, r1
 800e108:	3430      	adds	r4, #48	@ 0x30
 800e10a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e10e:	460c      	mov	r4, r1
 800e110:	2c63      	cmp	r4, #99	@ 0x63
 800e112:	f103 33ff 	add.w	r3, r3, #4294967295
 800e116:	4631      	mov	r1, r6
 800e118:	dcf1      	bgt.n	800e0fe <__exponent+0x1c>
 800e11a:	3130      	adds	r1, #48	@ 0x30
 800e11c:	1e94      	subs	r4, r2, #2
 800e11e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e122:	1c41      	adds	r1, r0, #1
 800e124:	4623      	mov	r3, r4
 800e126:	42ab      	cmp	r3, r5
 800e128:	d30a      	bcc.n	800e140 <__exponent+0x5e>
 800e12a:	f10d 0309 	add.w	r3, sp, #9
 800e12e:	1a9b      	subs	r3, r3, r2
 800e130:	42ac      	cmp	r4, r5
 800e132:	bf88      	it	hi
 800e134:	2300      	movhi	r3, #0
 800e136:	3302      	adds	r3, #2
 800e138:	4403      	add	r3, r0
 800e13a:	1a18      	subs	r0, r3, r0
 800e13c:	b003      	add	sp, #12
 800e13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e140:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e144:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e148:	e7ed      	b.n	800e126 <__exponent+0x44>
 800e14a:	2330      	movs	r3, #48	@ 0x30
 800e14c:	3130      	adds	r1, #48	@ 0x30
 800e14e:	7083      	strb	r3, [r0, #2]
 800e150:	70c1      	strb	r1, [r0, #3]
 800e152:	1d03      	adds	r3, r0, #4
 800e154:	e7f1      	b.n	800e13a <__exponent+0x58>
	...

0800e158 <_printf_float>:
 800e158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e15c:	b08d      	sub	sp, #52	@ 0x34
 800e15e:	460c      	mov	r4, r1
 800e160:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e164:	4616      	mov	r6, r2
 800e166:	461f      	mov	r7, r3
 800e168:	4605      	mov	r5, r0
 800e16a:	f000 fdcd 	bl	800ed08 <_localeconv_r>
 800e16e:	6803      	ldr	r3, [r0, #0]
 800e170:	9304      	str	r3, [sp, #16]
 800e172:	4618      	mov	r0, r3
 800e174:	f7f2 f87c 	bl	8000270 <strlen>
 800e178:	2300      	movs	r3, #0
 800e17a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e17c:	f8d8 3000 	ldr.w	r3, [r8]
 800e180:	9005      	str	r0, [sp, #20]
 800e182:	3307      	adds	r3, #7
 800e184:	f023 0307 	bic.w	r3, r3, #7
 800e188:	f103 0208 	add.w	r2, r3, #8
 800e18c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e190:	f8d4 b000 	ldr.w	fp, [r4]
 800e194:	f8c8 2000 	str.w	r2, [r8]
 800e198:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e19c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e1a0:	9307      	str	r3, [sp, #28]
 800e1a2:	f8cd 8018 	str.w	r8, [sp, #24]
 800e1a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e1aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1ae:	4b9c      	ldr	r3, [pc, #624]	@ (800e420 <_printf_float+0x2c8>)
 800e1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1b4:	f7f2 fcba 	bl	8000b2c <__aeabi_dcmpun>
 800e1b8:	bb70      	cbnz	r0, 800e218 <_printf_float+0xc0>
 800e1ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1be:	4b98      	ldr	r3, [pc, #608]	@ (800e420 <_printf_float+0x2c8>)
 800e1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1c4:	f7f2 fc94 	bl	8000af0 <__aeabi_dcmple>
 800e1c8:	bb30      	cbnz	r0, 800e218 <_printf_float+0xc0>
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	4640      	mov	r0, r8
 800e1d0:	4649      	mov	r1, r9
 800e1d2:	f7f2 fc83 	bl	8000adc <__aeabi_dcmplt>
 800e1d6:	b110      	cbz	r0, 800e1de <_printf_float+0x86>
 800e1d8:	232d      	movs	r3, #45	@ 0x2d
 800e1da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1de:	4a91      	ldr	r2, [pc, #580]	@ (800e424 <_printf_float+0x2cc>)
 800e1e0:	4b91      	ldr	r3, [pc, #580]	@ (800e428 <_printf_float+0x2d0>)
 800e1e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e1e6:	bf8c      	ite	hi
 800e1e8:	4690      	movhi	r8, r2
 800e1ea:	4698      	movls	r8, r3
 800e1ec:	2303      	movs	r3, #3
 800e1ee:	6123      	str	r3, [r4, #16]
 800e1f0:	f02b 0304 	bic.w	r3, fp, #4
 800e1f4:	6023      	str	r3, [r4, #0]
 800e1f6:	f04f 0900 	mov.w	r9, #0
 800e1fa:	9700      	str	r7, [sp, #0]
 800e1fc:	4633      	mov	r3, r6
 800e1fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e200:	4621      	mov	r1, r4
 800e202:	4628      	mov	r0, r5
 800e204:	f000 f9d2 	bl	800e5ac <_printf_common>
 800e208:	3001      	adds	r0, #1
 800e20a:	f040 808d 	bne.w	800e328 <_printf_float+0x1d0>
 800e20e:	f04f 30ff 	mov.w	r0, #4294967295
 800e212:	b00d      	add	sp, #52	@ 0x34
 800e214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e218:	4642      	mov	r2, r8
 800e21a:	464b      	mov	r3, r9
 800e21c:	4640      	mov	r0, r8
 800e21e:	4649      	mov	r1, r9
 800e220:	f7f2 fc84 	bl	8000b2c <__aeabi_dcmpun>
 800e224:	b140      	cbz	r0, 800e238 <_printf_float+0xe0>
 800e226:	464b      	mov	r3, r9
 800e228:	2b00      	cmp	r3, #0
 800e22a:	bfbc      	itt	lt
 800e22c:	232d      	movlt	r3, #45	@ 0x2d
 800e22e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e232:	4a7e      	ldr	r2, [pc, #504]	@ (800e42c <_printf_float+0x2d4>)
 800e234:	4b7e      	ldr	r3, [pc, #504]	@ (800e430 <_printf_float+0x2d8>)
 800e236:	e7d4      	b.n	800e1e2 <_printf_float+0x8a>
 800e238:	6863      	ldr	r3, [r4, #4]
 800e23a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e23e:	9206      	str	r2, [sp, #24]
 800e240:	1c5a      	adds	r2, r3, #1
 800e242:	d13b      	bne.n	800e2bc <_printf_float+0x164>
 800e244:	2306      	movs	r3, #6
 800e246:	6063      	str	r3, [r4, #4]
 800e248:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e24c:	2300      	movs	r3, #0
 800e24e:	6022      	str	r2, [r4, #0]
 800e250:	9303      	str	r3, [sp, #12]
 800e252:	ab0a      	add	r3, sp, #40	@ 0x28
 800e254:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e258:	ab09      	add	r3, sp, #36	@ 0x24
 800e25a:	9300      	str	r3, [sp, #0]
 800e25c:	6861      	ldr	r1, [r4, #4]
 800e25e:	ec49 8b10 	vmov	d0, r8, r9
 800e262:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e266:	4628      	mov	r0, r5
 800e268:	f7ff fed6 	bl	800e018 <__cvt>
 800e26c:	9b06      	ldr	r3, [sp, #24]
 800e26e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e270:	2b47      	cmp	r3, #71	@ 0x47
 800e272:	4680      	mov	r8, r0
 800e274:	d129      	bne.n	800e2ca <_printf_float+0x172>
 800e276:	1cc8      	adds	r0, r1, #3
 800e278:	db02      	blt.n	800e280 <_printf_float+0x128>
 800e27a:	6863      	ldr	r3, [r4, #4]
 800e27c:	4299      	cmp	r1, r3
 800e27e:	dd41      	ble.n	800e304 <_printf_float+0x1ac>
 800e280:	f1aa 0a02 	sub.w	sl, sl, #2
 800e284:	fa5f fa8a 	uxtb.w	sl, sl
 800e288:	3901      	subs	r1, #1
 800e28a:	4652      	mov	r2, sl
 800e28c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e290:	9109      	str	r1, [sp, #36]	@ 0x24
 800e292:	f7ff ff26 	bl	800e0e2 <__exponent>
 800e296:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e298:	1813      	adds	r3, r2, r0
 800e29a:	2a01      	cmp	r2, #1
 800e29c:	4681      	mov	r9, r0
 800e29e:	6123      	str	r3, [r4, #16]
 800e2a0:	dc02      	bgt.n	800e2a8 <_printf_float+0x150>
 800e2a2:	6822      	ldr	r2, [r4, #0]
 800e2a4:	07d2      	lsls	r2, r2, #31
 800e2a6:	d501      	bpl.n	800e2ac <_printf_float+0x154>
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	6123      	str	r3, [r4, #16]
 800e2ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d0a2      	beq.n	800e1fa <_printf_float+0xa2>
 800e2b4:	232d      	movs	r3, #45	@ 0x2d
 800e2b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2ba:	e79e      	b.n	800e1fa <_printf_float+0xa2>
 800e2bc:	9a06      	ldr	r2, [sp, #24]
 800e2be:	2a47      	cmp	r2, #71	@ 0x47
 800e2c0:	d1c2      	bne.n	800e248 <_printf_float+0xf0>
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d1c0      	bne.n	800e248 <_printf_float+0xf0>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e7bd      	b.n	800e246 <_printf_float+0xee>
 800e2ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e2ce:	d9db      	bls.n	800e288 <_printf_float+0x130>
 800e2d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e2d4:	d118      	bne.n	800e308 <_printf_float+0x1b0>
 800e2d6:	2900      	cmp	r1, #0
 800e2d8:	6863      	ldr	r3, [r4, #4]
 800e2da:	dd0b      	ble.n	800e2f4 <_printf_float+0x19c>
 800e2dc:	6121      	str	r1, [r4, #16]
 800e2de:	b913      	cbnz	r3, 800e2e6 <_printf_float+0x18e>
 800e2e0:	6822      	ldr	r2, [r4, #0]
 800e2e2:	07d0      	lsls	r0, r2, #31
 800e2e4:	d502      	bpl.n	800e2ec <_printf_float+0x194>
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	440b      	add	r3, r1
 800e2ea:	6123      	str	r3, [r4, #16]
 800e2ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e2ee:	f04f 0900 	mov.w	r9, #0
 800e2f2:	e7db      	b.n	800e2ac <_printf_float+0x154>
 800e2f4:	b913      	cbnz	r3, 800e2fc <_printf_float+0x1a4>
 800e2f6:	6822      	ldr	r2, [r4, #0]
 800e2f8:	07d2      	lsls	r2, r2, #31
 800e2fa:	d501      	bpl.n	800e300 <_printf_float+0x1a8>
 800e2fc:	3302      	adds	r3, #2
 800e2fe:	e7f4      	b.n	800e2ea <_printf_float+0x192>
 800e300:	2301      	movs	r3, #1
 800e302:	e7f2      	b.n	800e2ea <_printf_float+0x192>
 800e304:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e30a:	4299      	cmp	r1, r3
 800e30c:	db05      	blt.n	800e31a <_printf_float+0x1c2>
 800e30e:	6823      	ldr	r3, [r4, #0]
 800e310:	6121      	str	r1, [r4, #16]
 800e312:	07d8      	lsls	r0, r3, #31
 800e314:	d5ea      	bpl.n	800e2ec <_printf_float+0x194>
 800e316:	1c4b      	adds	r3, r1, #1
 800e318:	e7e7      	b.n	800e2ea <_printf_float+0x192>
 800e31a:	2900      	cmp	r1, #0
 800e31c:	bfd4      	ite	le
 800e31e:	f1c1 0202 	rsble	r2, r1, #2
 800e322:	2201      	movgt	r2, #1
 800e324:	4413      	add	r3, r2
 800e326:	e7e0      	b.n	800e2ea <_printf_float+0x192>
 800e328:	6823      	ldr	r3, [r4, #0]
 800e32a:	055a      	lsls	r2, r3, #21
 800e32c:	d407      	bmi.n	800e33e <_printf_float+0x1e6>
 800e32e:	6923      	ldr	r3, [r4, #16]
 800e330:	4642      	mov	r2, r8
 800e332:	4631      	mov	r1, r6
 800e334:	4628      	mov	r0, r5
 800e336:	47b8      	blx	r7
 800e338:	3001      	adds	r0, #1
 800e33a:	d12b      	bne.n	800e394 <_printf_float+0x23c>
 800e33c:	e767      	b.n	800e20e <_printf_float+0xb6>
 800e33e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e342:	f240 80dd 	bls.w	800e500 <_printf_float+0x3a8>
 800e346:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e34a:	2200      	movs	r2, #0
 800e34c:	2300      	movs	r3, #0
 800e34e:	f7f2 fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800e352:	2800      	cmp	r0, #0
 800e354:	d033      	beq.n	800e3be <_printf_float+0x266>
 800e356:	4a37      	ldr	r2, [pc, #220]	@ (800e434 <_printf_float+0x2dc>)
 800e358:	2301      	movs	r3, #1
 800e35a:	4631      	mov	r1, r6
 800e35c:	4628      	mov	r0, r5
 800e35e:	47b8      	blx	r7
 800e360:	3001      	adds	r0, #1
 800e362:	f43f af54 	beq.w	800e20e <_printf_float+0xb6>
 800e366:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e36a:	4543      	cmp	r3, r8
 800e36c:	db02      	blt.n	800e374 <_printf_float+0x21c>
 800e36e:	6823      	ldr	r3, [r4, #0]
 800e370:	07d8      	lsls	r0, r3, #31
 800e372:	d50f      	bpl.n	800e394 <_printf_float+0x23c>
 800e374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e378:	4631      	mov	r1, r6
 800e37a:	4628      	mov	r0, r5
 800e37c:	47b8      	blx	r7
 800e37e:	3001      	adds	r0, #1
 800e380:	f43f af45 	beq.w	800e20e <_printf_float+0xb6>
 800e384:	f04f 0900 	mov.w	r9, #0
 800e388:	f108 38ff 	add.w	r8, r8, #4294967295
 800e38c:	f104 0a1a 	add.w	sl, r4, #26
 800e390:	45c8      	cmp	r8, r9
 800e392:	dc09      	bgt.n	800e3a8 <_printf_float+0x250>
 800e394:	6823      	ldr	r3, [r4, #0]
 800e396:	079b      	lsls	r3, r3, #30
 800e398:	f100 8103 	bmi.w	800e5a2 <_printf_float+0x44a>
 800e39c:	68e0      	ldr	r0, [r4, #12]
 800e39e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3a0:	4298      	cmp	r0, r3
 800e3a2:	bfb8      	it	lt
 800e3a4:	4618      	movlt	r0, r3
 800e3a6:	e734      	b.n	800e212 <_printf_float+0xba>
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	4652      	mov	r2, sl
 800e3ac:	4631      	mov	r1, r6
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	47b8      	blx	r7
 800e3b2:	3001      	adds	r0, #1
 800e3b4:	f43f af2b 	beq.w	800e20e <_printf_float+0xb6>
 800e3b8:	f109 0901 	add.w	r9, r9, #1
 800e3bc:	e7e8      	b.n	800e390 <_printf_float+0x238>
 800e3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	dc39      	bgt.n	800e438 <_printf_float+0x2e0>
 800e3c4:	4a1b      	ldr	r2, [pc, #108]	@ (800e434 <_printf_float+0x2dc>)
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	4631      	mov	r1, r6
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	47b8      	blx	r7
 800e3ce:	3001      	adds	r0, #1
 800e3d0:	f43f af1d 	beq.w	800e20e <_printf_float+0xb6>
 800e3d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e3d8:	ea59 0303 	orrs.w	r3, r9, r3
 800e3dc:	d102      	bne.n	800e3e4 <_printf_float+0x28c>
 800e3de:	6823      	ldr	r3, [r4, #0]
 800e3e0:	07d9      	lsls	r1, r3, #31
 800e3e2:	d5d7      	bpl.n	800e394 <_printf_float+0x23c>
 800e3e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3e8:	4631      	mov	r1, r6
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	47b8      	blx	r7
 800e3ee:	3001      	adds	r0, #1
 800e3f0:	f43f af0d 	beq.w	800e20e <_printf_float+0xb6>
 800e3f4:	f04f 0a00 	mov.w	sl, #0
 800e3f8:	f104 0b1a 	add.w	fp, r4, #26
 800e3fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3fe:	425b      	negs	r3, r3
 800e400:	4553      	cmp	r3, sl
 800e402:	dc01      	bgt.n	800e408 <_printf_float+0x2b0>
 800e404:	464b      	mov	r3, r9
 800e406:	e793      	b.n	800e330 <_printf_float+0x1d8>
 800e408:	2301      	movs	r3, #1
 800e40a:	465a      	mov	r2, fp
 800e40c:	4631      	mov	r1, r6
 800e40e:	4628      	mov	r0, r5
 800e410:	47b8      	blx	r7
 800e412:	3001      	adds	r0, #1
 800e414:	f43f aefb 	beq.w	800e20e <_printf_float+0xb6>
 800e418:	f10a 0a01 	add.w	sl, sl, #1
 800e41c:	e7ee      	b.n	800e3fc <_printf_float+0x2a4>
 800e41e:	bf00      	nop
 800e420:	7fefffff 	.word	0x7fefffff
 800e424:	08012a60 	.word	0x08012a60
 800e428:	08012a5c 	.word	0x08012a5c
 800e42c:	08012a68 	.word	0x08012a68
 800e430:	08012a64 	.word	0x08012a64
 800e434:	08012a6c 	.word	0x08012a6c
 800e438:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e43a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e43e:	4553      	cmp	r3, sl
 800e440:	bfa8      	it	ge
 800e442:	4653      	movge	r3, sl
 800e444:	2b00      	cmp	r3, #0
 800e446:	4699      	mov	r9, r3
 800e448:	dc36      	bgt.n	800e4b8 <_printf_float+0x360>
 800e44a:	f04f 0b00 	mov.w	fp, #0
 800e44e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e452:	f104 021a 	add.w	r2, r4, #26
 800e456:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e458:	9306      	str	r3, [sp, #24]
 800e45a:	eba3 0309 	sub.w	r3, r3, r9
 800e45e:	455b      	cmp	r3, fp
 800e460:	dc31      	bgt.n	800e4c6 <_printf_float+0x36e>
 800e462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e464:	459a      	cmp	sl, r3
 800e466:	dc3a      	bgt.n	800e4de <_printf_float+0x386>
 800e468:	6823      	ldr	r3, [r4, #0]
 800e46a:	07da      	lsls	r2, r3, #31
 800e46c:	d437      	bmi.n	800e4de <_printf_float+0x386>
 800e46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e470:	ebaa 0903 	sub.w	r9, sl, r3
 800e474:	9b06      	ldr	r3, [sp, #24]
 800e476:	ebaa 0303 	sub.w	r3, sl, r3
 800e47a:	4599      	cmp	r9, r3
 800e47c:	bfa8      	it	ge
 800e47e:	4699      	movge	r9, r3
 800e480:	f1b9 0f00 	cmp.w	r9, #0
 800e484:	dc33      	bgt.n	800e4ee <_printf_float+0x396>
 800e486:	f04f 0800 	mov.w	r8, #0
 800e48a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e48e:	f104 0b1a 	add.w	fp, r4, #26
 800e492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e494:	ebaa 0303 	sub.w	r3, sl, r3
 800e498:	eba3 0309 	sub.w	r3, r3, r9
 800e49c:	4543      	cmp	r3, r8
 800e49e:	f77f af79 	ble.w	800e394 <_printf_float+0x23c>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	465a      	mov	r2, fp
 800e4a6:	4631      	mov	r1, r6
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	47b8      	blx	r7
 800e4ac:	3001      	adds	r0, #1
 800e4ae:	f43f aeae 	beq.w	800e20e <_printf_float+0xb6>
 800e4b2:	f108 0801 	add.w	r8, r8, #1
 800e4b6:	e7ec      	b.n	800e492 <_printf_float+0x33a>
 800e4b8:	4642      	mov	r2, r8
 800e4ba:	4631      	mov	r1, r6
 800e4bc:	4628      	mov	r0, r5
 800e4be:	47b8      	blx	r7
 800e4c0:	3001      	adds	r0, #1
 800e4c2:	d1c2      	bne.n	800e44a <_printf_float+0x2f2>
 800e4c4:	e6a3      	b.n	800e20e <_printf_float+0xb6>
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	4631      	mov	r1, r6
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	9206      	str	r2, [sp, #24]
 800e4ce:	47b8      	blx	r7
 800e4d0:	3001      	adds	r0, #1
 800e4d2:	f43f ae9c 	beq.w	800e20e <_printf_float+0xb6>
 800e4d6:	9a06      	ldr	r2, [sp, #24]
 800e4d8:	f10b 0b01 	add.w	fp, fp, #1
 800e4dc:	e7bb      	b.n	800e456 <_printf_float+0x2fe>
 800e4de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4e2:	4631      	mov	r1, r6
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	47b8      	blx	r7
 800e4e8:	3001      	adds	r0, #1
 800e4ea:	d1c0      	bne.n	800e46e <_printf_float+0x316>
 800e4ec:	e68f      	b.n	800e20e <_printf_float+0xb6>
 800e4ee:	9a06      	ldr	r2, [sp, #24]
 800e4f0:	464b      	mov	r3, r9
 800e4f2:	4442      	add	r2, r8
 800e4f4:	4631      	mov	r1, r6
 800e4f6:	4628      	mov	r0, r5
 800e4f8:	47b8      	blx	r7
 800e4fa:	3001      	adds	r0, #1
 800e4fc:	d1c3      	bne.n	800e486 <_printf_float+0x32e>
 800e4fe:	e686      	b.n	800e20e <_printf_float+0xb6>
 800e500:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e504:	f1ba 0f01 	cmp.w	sl, #1
 800e508:	dc01      	bgt.n	800e50e <_printf_float+0x3b6>
 800e50a:	07db      	lsls	r3, r3, #31
 800e50c:	d536      	bpl.n	800e57c <_printf_float+0x424>
 800e50e:	2301      	movs	r3, #1
 800e510:	4642      	mov	r2, r8
 800e512:	4631      	mov	r1, r6
 800e514:	4628      	mov	r0, r5
 800e516:	47b8      	blx	r7
 800e518:	3001      	adds	r0, #1
 800e51a:	f43f ae78 	beq.w	800e20e <_printf_float+0xb6>
 800e51e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e522:	4631      	mov	r1, r6
 800e524:	4628      	mov	r0, r5
 800e526:	47b8      	blx	r7
 800e528:	3001      	adds	r0, #1
 800e52a:	f43f ae70 	beq.w	800e20e <_printf_float+0xb6>
 800e52e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e532:	2200      	movs	r2, #0
 800e534:	2300      	movs	r3, #0
 800e536:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e53a:	f7f2 fac5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e53e:	b9c0      	cbnz	r0, 800e572 <_printf_float+0x41a>
 800e540:	4653      	mov	r3, sl
 800e542:	f108 0201 	add.w	r2, r8, #1
 800e546:	4631      	mov	r1, r6
 800e548:	4628      	mov	r0, r5
 800e54a:	47b8      	blx	r7
 800e54c:	3001      	adds	r0, #1
 800e54e:	d10c      	bne.n	800e56a <_printf_float+0x412>
 800e550:	e65d      	b.n	800e20e <_printf_float+0xb6>
 800e552:	2301      	movs	r3, #1
 800e554:	465a      	mov	r2, fp
 800e556:	4631      	mov	r1, r6
 800e558:	4628      	mov	r0, r5
 800e55a:	47b8      	blx	r7
 800e55c:	3001      	adds	r0, #1
 800e55e:	f43f ae56 	beq.w	800e20e <_printf_float+0xb6>
 800e562:	f108 0801 	add.w	r8, r8, #1
 800e566:	45d0      	cmp	r8, sl
 800e568:	dbf3      	blt.n	800e552 <_printf_float+0x3fa>
 800e56a:	464b      	mov	r3, r9
 800e56c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e570:	e6df      	b.n	800e332 <_printf_float+0x1da>
 800e572:	f04f 0800 	mov.w	r8, #0
 800e576:	f104 0b1a 	add.w	fp, r4, #26
 800e57a:	e7f4      	b.n	800e566 <_printf_float+0x40e>
 800e57c:	2301      	movs	r3, #1
 800e57e:	4642      	mov	r2, r8
 800e580:	e7e1      	b.n	800e546 <_printf_float+0x3ee>
 800e582:	2301      	movs	r3, #1
 800e584:	464a      	mov	r2, r9
 800e586:	4631      	mov	r1, r6
 800e588:	4628      	mov	r0, r5
 800e58a:	47b8      	blx	r7
 800e58c:	3001      	adds	r0, #1
 800e58e:	f43f ae3e 	beq.w	800e20e <_printf_float+0xb6>
 800e592:	f108 0801 	add.w	r8, r8, #1
 800e596:	68e3      	ldr	r3, [r4, #12]
 800e598:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e59a:	1a5b      	subs	r3, r3, r1
 800e59c:	4543      	cmp	r3, r8
 800e59e:	dcf0      	bgt.n	800e582 <_printf_float+0x42a>
 800e5a0:	e6fc      	b.n	800e39c <_printf_float+0x244>
 800e5a2:	f04f 0800 	mov.w	r8, #0
 800e5a6:	f104 0919 	add.w	r9, r4, #25
 800e5aa:	e7f4      	b.n	800e596 <_printf_float+0x43e>

0800e5ac <_printf_common>:
 800e5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5b0:	4616      	mov	r6, r2
 800e5b2:	4698      	mov	r8, r3
 800e5b4:	688a      	ldr	r2, [r1, #8]
 800e5b6:	690b      	ldr	r3, [r1, #16]
 800e5b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	bfb8      	it	lt
 800e5c0:	4613      	movlt	r3, r2
 800e5c2:	6033      	str	r3, [r6, #0]
 800e5c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e5c8:	4607      	mov	r7, r0
 800e5ca:	460c      	mov	r4, r1
 800e5cc:	b10a      	cbz	r2, 800e5d2 <_printf_common+0x26>
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	6033      	str	r3, [r6, #0]
 800e5d2:	6823      	ldr	r3, [r4, #0]
 800e5d4:	0699      	lsls	r1, r3, #26
 800e5d6:	bf42      	ittt	mi
 800e5d8:	6833      	ldrmi	r3, [r6, #0]
 800e5da:	3302      	addmi	r3, #2
 800e5dc:	6033      	strmi	r3, [r6, #0]
 800e5de:	6825      	ldr	r5, [r4, #0]
 800e5e0:	f015 0506 	ands.w	r5, r5, #6
 800e5e4:	d106      	bne.n	800e5f4 <_printf_common+0x48>
 800e5e6:	f104 0a19 	add.w	sl, r4, #25
 800e5ea:	68e3      	ldr	r3, [r4, #12]
 800e5ec:	6832      	ldr	r2, [r6, #0]
 800e5ee:	1a9b      	subs	r3, r3, r2
 800e5f0:	42ab      	cmp	r3, r5
 800e5f2:	dc26      	bgt.n	800e642 <_printf_common+0x96>
 800e5f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e5f8:	6822      	ldr	r2, [r4, #0]
 800e5fa:	3b00      	subs	r3, #0
 800e5fc:	bf18      	it	ne
 800e5fe:	2301      	movne	r3, #1
 800e600:	0692      	lsls	r2, r2, #26
 800e602:	d42b      	bmi.n	800e65c <_printf_common+0xb0>
 800e604:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e608:	4641      	mov	r1, r8
 800e60a:	4638      	mov	r0, r7
 800e60c:	47c8      	blx	r9
 800e60e:	3001      	adds	r0, #1
 800e610:	d01e      	beq.n	800e650 <_printf_common+0xa4>
 800e612:	6823      	ldr	r3, [r4, #0]
 800e614:	6922      	ldr	r2, [r4, #16]
 800e616:	f003 0306 	and.w	r3, r3, #6
 800e61a:	2b04      	cmp	r3, #4
 800e61c:	bf02      	ittt	eq
 800e61e:	68e5      	ldreq	r5, [r4, #12]
 800e620:	6833      	ldreq	r3, [r6, #0]
 800e622:	1aed      	subeq	r5, r5, r3
 800e624:	68a3      	ldr	r3, [r4, #8]
 800e626:	bf0c      	ite	eq
 800e628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e62c:	2500      	movne	r5, #0
 800e62e:	4293      	cmp	r3, r2
 800e630:	bfc4      	itt	gt
 800e632:	1a9b      	subgt	r3, r3, r2
 800e634:	18ed      	addgt	r5, r5, r3
 800e636:	2600      	movs	r6, #0
 800e638:	341a      	adds	r4, #26
 800e63a:	42b5      	cmp	r5, r6
 800e63c:	d11a      	bne.n	800e674 <_printf_common+0xc8>
 800e63e:	2000      	movs	r0, #0
 800e640:	e008      	b.n	800e654 <_printf_common+0xa8>
 800e642:	2301      	movs	r3, #1
 800e644:	4652      	mov	r2, sl
 800e646:	4641      	mov	r1, r8
 800e648:	4638      	mov	r0, r7
 800e64a:	47c8      	blx	r9
 800e64c:	3001      	adds	r0, #1
 800e64e:	d103      	bne.n	800e658 <_printf_common+0xac>
 800e650:	f04f 30ff 	mov.w	r0, #4294967295
 800e654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e658:	3501      	adds	r5, #1
 800e65a:	e7c6      	b.n	800e5ea <_printf_common+0x3e>
 800e65c:	18e1      	adds	r1, r4, r3
 800e65e:	1c5a      	adds	r2, r3, #1
 800e660:	2030      	movs	r0, #48	@ 0x30
 800e662:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e666:	4422      	add	r2, r4
 800e668:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e66c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e670:	3302      	adds	r3, #2
 800e672:	e7c7      	b.n	800e604 <_printf_common+0x58>
 800e674:	2301      	movs	r3, #1
 800e676:	4622      	mov	r2, r4
 800e678:	4641      	mov	r1, r8
 800e67a:	4638      	mov	r0, r7
 800e67c:	47c8      	blx	r9
 800e67e:	3001      	adds	r0, #1
 800e680:	d0e6      	beq.n	800e650 <_printf_common+0xa4>
 800e682:	3601      	adds	r6, #1
 800e684:	e7d9      	b.n	800e63a <_printf_common+0x8e>
	...

0800e688 <_printf_i>:
 800e688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e68c:	7e0f      	ldrb	r7, [r1, #24]
 800e68e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e690:	2f78      	cmp	r7, #120	@ 0x78
 800e692:	4691      	mov	r9, r2
 800e694:	4680      	mov	r8, r0
 800e696:	460c      	mov	r4, r1
 800e698:	469a      	mov	sl, r3
 800e69a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e69e:	d807      	bhi.n	800e6b0 <_printf_i+0x28>
 800e6a0:	2f62      	cmp	r7, #98	@ 0x62
 800e6a2:	d80a      	bhi.n	800e6ba <_printf_i+0x32>
 800e6a4:	2f00      	cmp	r7, #0
 800e6a6:	f000 80d1 	beq.w	800e84c <_printf_i+0x1c4>
 800e6aa:	2f58      	cmp	r7, #88	@ 0x58
 800e6ac:	f000 80b8 	beq.w	800e820 <_printf_i+0x198>
 800e6b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e6b8:	e03a      	b.n	800e730 <_printf_i+0xa8>
 800e6ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e6be:	2b15      	cmp	r3, #21
 800e6c0:	d8f6      	bhi.n	800e6b0 <_printf_i+0x28>
 800e6c2:	a101      	add	r1, pc, #4	@ (adr r1, 800e6c8 <_printf_i+0x40>)
 800e6c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6c8:	0800e721 	.word	0x0800e721
 800e6cc:	0800e735 	.word	0x0800e735
 800e6d0:	0800e6b1 	.word	0x0800e6b1
 800e6d4:	0800e6b1 	.word	0x0800e6b1
 800e6d8:	0800e6b1 	.word	0x0800e6b1
 800e6dc:	0800e6b1 	.word	0x0800e6b1
 800e6e0:	0800e735 	.word	0x0800e735
 800e6e4:	0800e6b1 	.word	0x0800e6b1
 800e6e8:	0800e6b1 	.word	0x0800e6b1
 800e6ec:	0800e6b1 	.word	0x0800e6b1
 800e6f0:	0800e6b1 	.word	0x0800e6b1
 800e6f4:	0800e833 	.word	0x0800e833
 800e6f8:	0800e75f 	.word	0x0800e75f
 800e6fc:	0800e7ed 	.word	0x0800e7ed
 800e700:	0800e6b1 	.word	0x0800e6b1
 800e704:	0800e6b1 	.word	0x0800e6b1
 800e708:	0800e855 	.word	0x0800e855
 800e70c:	0800e6b1 	.word	0x0800e6b1
 800e710:	0800e75f 	.word	0x0800e75f
 800e714:	0800e6b1 	.word	0x0800e6b1
 800e718:	0800e6b1 	.word	0x0800e6b1
 800e71c:	0800e7f5 	.word	0x0800e7f5
 800e720:	6833      	ldr	r3, [r6, #0]
 800e722:	1d1a      	adds	r2, r3, #4
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	6032      	str	r2, [r6, #0]
 800e728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e72c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e730:	2301      	movs	r3, #1
 800e732:	e09c      	b.n	800e86e <_printf_i+0x1e6>
 800e734:	6833      	ldr	r3, [r6, #0]
 800e736:	6820      	ldr	r0, [r4, #0]
 800e738:	1d19      	adds	r1, r3, #4
 800e73a:	6031      	str	r1, [r6, #0]
 800e73c:	0606      	lsls	r6, r0, #24
 800e73e:	d501      	bpl.n	800e744 <_printf_i+0xbc>
 800e740:	681d      	ldr	r5, [r3, #0]
 800e742:	e003      	b.n	800e74c <_printf_i+0xc4>
 800e744:	0645      	lsls	r5, r0, #25
 800e746:	d5fb      	bpl.n	800e740 <_printf_i+0xb8>
 800e748:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e74c:	2d00      	cmp	r5, #0
 800e74e:	da03      	bge.n	800e758 <_printf_i+0xd0>
 800e750:	232d      	movs	r3, #45	@ 0x2d
 800e752:	426d      	negs	r5, r5
 800e754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e758:	4858      	ldr	r0, [pc, #352]	@ (800e8bc <_printf_i+0x234>)
 800e75a:	230a      	movs	r3, #10
 800e75c:	e011      	b.n	800e782 <_printf_i+0xfa>
 800e75e:	6821      	ldr	r1, [r4, #0]
 800e760:	6833      	ldr	r3, [r6, #0]
 800e762:	0608      	lsls	r0, r1, #24
 800e764:	f853 5b04 	ldr.w	r5, [r3], #4
 800e768:	d402      	bmi.n	800e770 <_printf_i+0xe8>
 800e76a:	0649      	lsls	r1, r1, #25
 800e76c:	bf48      	it	mi
 800e76e:	b2ad      	uxthmi	r5, r5
 800e770:	2f6f      	cmp	r7, #111	@ 0x6f
 800e772:	4852      	ldr	r0, [pc, #328]	@ (800e8bc <_printf_i+0x234>)
 800e774:	6033      	str	r3, [r6, #0]
 800e776:	bf14      	ite	ne
 800e778:	230a      	movne	r3, #10
 800e77a:	2308      	moveq	r3, #8
 800e77c:	2100      	movs	r1, #0
 800e77e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e782:	6866      	ldr	r6, [r4, #4]
 800e784:	60a6      	str	r6, [r4, #8]
 800e786:	2e00      	cmp	r6, #0
 800e788:	db05      	blt.n	800e796 <_printf_i+0x10e>
 800e78a:	6821      	ldr	r1, [r4, #0]
 800e78c:	432e      	orrs	r6, r5
 800e78e:	f021 0104 	bic.w	r1, r1, #4
 800e792:	6021      	str	r1, [r4, #0]
 800e794:	d04b      	beq.n	800e82e <_printf_i+0x1a6>
 800e796:	4616      	mov	r6, r2
 800e798:	fbb5 f1f3 	udiv	r1, r5, r3
 800e79c:	fb03 5711 	mls	r7, r3, r1, r5
 800e7a0:	5dc7      	ldrb	r7, [r0, r7]
 800e7a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e7a6:	462f      	mov	r7, r5
 800e7a8:	42bb      	cmp	r3, r7
 800e7aa:	460d      	mov	r5, r1
 800e7ac:	d9f4      	bls.n	800e798 <_printf_i+0x110>
 800e7ae:	2b08      	cmp	r3, #8
 800e7b0:	d10b      	bne.n	800e7ca <_printf_i+0x142>
 800e7b2:	6823      	ldr	r3, [r4, #0]
 800e7b4:	07df      	lsls	r7, r3, #31
 800e7b6:	d508      	bpl.n	800e7ca <_printf_i+0x142>
 800e7b8:	6923      	ldr	r3, [r4, #16]
 800e7ba:	6861      	ldr	r1, [r4, #4]
 800e7bc:	4299      	cmp	r1, r3
 800e7be:	bfde      	ittt	le
 800e7c0:	2330      	movle	r3, #48	@ 0x30
 800e7c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e7c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e7ca:	1b92      	subs	r2, r2, r6
 800e7cc:	6122      	str	r2, [r4, #16]
 800e7ce:	f8cd a000 	str.w	sl, [sp]
 800e7d2:	464b      	mov	r3, r9
 800e7d4:	aa03      	add	r2, sp, #12
 800e7d6:	4621      	mov	r1, r4
 800e7d8:	4640      	mov	r0, r8
 800e7da:	f7ff fee7 	bl	800e5ac <_printf_common>
 800e7de:	3001      	adds	r0, #1
 800e7e0:	d14a      	bne.n	800e878 <_printf_i+0x1f0>
 800e7e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e6:	b004      	add	sp, #16
 800e7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ec:	6823      	ldr	r3, [r4, #0]
 800e7ee:	f043 0320 	orr.w	r3, r3, #32
 800e7f2:	6023      	str	r3, [r4, #0]
 800e7f4:	4832      	ldr	r0, [pc, #200]	@ (800e8c0 <_printf_i+0x238>)
 800e7f6:	2778      	movs	r7, #120	@ 0x78
 800e7f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e7fc:	6823      	ldr	r3, [r4, #0]
 800e7fe:	6831      	ldr	r1, [r6, #0]
 800e800:	061f      	lsls	r7, r3, #24
 800e802:	f851 5b04 	ldr.w	r5, [r1], #4
 800e806:	d402      	bmi.n	800e80e <_printf_i+0x186>
 800e808:	065f      	lsls	r7, r3, #25
 800e80a:	bf48      	it	mi
 800e80c:	b2ad      	uxthmi	r5, r5
 800e80e:	6031      	str	r1, [r6, #0]
 800e810:	07d9      	lsls	r1, r3, #31
 800e812:	bf44      	itt	mi
 800e814:	f043 0320 	orrmi.w	r3, r3, #32
 800e818:	6023      	strmi	r3, [r4, #0]
 800e81a:	b11d      	cbz	r5, 800e824 <_printf_i+0x19c>
 800e81c:	2310      	movs	r3, #16
 800e81e:	e7ad      	b.n	800e77c <_printf_i+0xf4>
 800e820:	4826      	ldr	r0, [pc, #152]	@ (800e8bc <_printf_i+0x234>)
 800e822:	e7e9      	b.n	800e7f8 <_printf_i+0x170>
 800e824:	6823      	ldr	r3, [r4, #0]
 800e826:	f023 0320 	bic.w	r3, r3, #32
 800e82a:	6023      	str	r3, [r4, #0]
 800e82c:	e7f6      	b.n	800e81c <_printf_i+0x194>
 800e82e:	4616      	mov	r6, r2
 800e830:	e7bd      	b.n	800e7ae <_printf_i+0x126>
 800e832:	6833      	ldr	r3, [r6, #0]
 800e834:	6825      	ldr	r5, [r4, #0]
 800e836:	6961      	ldr	r1, [r4, #20]
 800e838:	1d18      	adds	r0, r3, #4
 800e83a:	6030      	str	r0, [r6, #0]
 800e83c:	062e      	lsls	r6, r5, #24
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	d501      	bpl.n	800e846 <_printf_i+0x1be>
 800e842:	6019      	str	r1, [r3, #0]
 800e844:	e002      	b.n	800e84c <_printf_i+0x1c4>
 800e846:	0668      	lsls	r0, r5, #25
 800e848:	d5fb      	bpl.n	800e842 <_printf_i+0x1ba>
 800e84a:	8019      	strh	r1, [r3, #0]
 800e84c:	2300      	movs	r3, #0
 800e84e:	6123      	str	r3, [r4, #16]
 800e850:	4616      	mov	r6, r2
 800e852:	e7bc      	b.n	800e7ce <_printf_i+0x146>
 800e854:	6833      	ldr	r3, [r6, #0]
 800e856:	1d1a      	adds	r2, r3, #4
 800e858:	6032      	str	r2, [r6, #0]
 800e85a:	681e      	ldr	r6, [r3, #0]
 800e85c:	6862      	ldr	r2, [r4, #4]
 800e85e:	2100      	movs	r1, #0
 800e860:	4630      	mov	r0, r6
 800e862:	f7f1 fcb5 	bl	80001d0 <memchr>
 800e866:	b108      	cbz	r0, 800e86c <_printf_i+0x1e4>
 800e868:	1b80      	subs	r0, r0, r6
 800e86a:	6060      	str	r0, [r4, #4]
 800e86c:	6863      	ldr	r3, [r4, #4]
 800e86e:	6123      	str	r3, [r4, #16]
 800e870:	2300      	movs	r3, #0
 800e872:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e876:	e7aa      	b.n	800e7ce <_printf_i+0x146>
 800e878:	6923      	ldr	r3, [r4, #16]
 800e87a:	4632      	mov	r2, r6
 800e87c:	4649      	mov	r1, r9
 800e87e:	4640      	mov	r0, r8
 800e880:	47d0      	blx	sl
 800e882:	3001      	adds	r0, #1
 800e884:	d0ad      	beq.n	800e7e2 <_printf_i+0x15a>
 800e886:	6823      	ldr	r3, [r4, #0]
 800e888:	079b      	lsls	r3, r3, #30
 800e88a:	d413      	bmi.n	800e8b4 <_printf_i+0x22c>
 800e88c:	68e0      	ldr	r0, [r4, #12]
 800e88e:	9b03      	ldr	r3, [sp, #12]
 800e890:	4298      	cmp	r0, r3
 800e892:	bfb8      	it	lt
 800e894:	4618      	movlt	r0, r3
 800e896:	e7a6      	b.n	800e7e6 <_printf_i+0x15e>
 800e898:	2301      	movs	r3, #1
 800e89a:	4632      	mov	r2, r6
 800e89c:	4649      	mov	r1, r9
 800e89e:	4640      	mov	r0, r8
 800e8a0:	47d0      	blx	sl
 800e8a2:	3001      	adds	r0, #1
 800e8a4:	d09d      	beq.n	800e7e2 <_printf_i+0x15a>
 800e8a6:	3501      	adds	r5, #1
 800e8a8:	68e3      	ldr	r3, [r4, #12]
 800e8aa:	9903      	ldr	r1, [sp, #12]
 800e8ac:	1a5b      	subs	r3, r3, r1
 800e8ae:	42ab      	cmp	r3, r5
 800e8b0:	dcf2      	bgt.n	800e898 <_printf_i+0x210>
 800e8b2:	e7eb      	b.n	800e88c <_printf_i+0x204>
 800e8b4:	2500      	movs	r5, #0
 800e8b6:	f104 0619 	add.w	r6, r4, #25
 800e8ba:	e7f5      	b.n	800e8a8 <_printf_i+0x220>
 800e8bc:	08012a6e 	.word	0x08012a6e
 800e8c0:	08012a7f 	.word	0x08012a7f

0800e8c4 <std>:
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	b510      	push	{r4, lr}
 800e8c8:	4604      	mov	r4, r0
 800e8ca:	e9c0 3300 	strd	r3, r3, [r0]
 800e8ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8d2:	6083      	str	r3, [r0, #8]
 800e8d4:	8181      	strh	r1, [r0, #12]
 800e8d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800e8d8:	81c2      	strh	r2, [r0, #14]
 800e8da:	6183      	str	r3, [r0, #24]
 800e8dc:	4619      	mov	r1, r3
 800e8de:	2208      	movs	r2, #8
 800e8e0:	305c      	adds	r0, #92	@ 0x5c
 800e8e2:	f000 fa09 	bl	800ecf8 <memset>
 800e8e6:	4b0d      	ldr	r3, [pc, #52]	@ (800e91c <std+0x58>)
 800e8e8:	6263      	str	r3, [r4, #36]	@ 0x24
 800e8ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e920 <std+0x5c>)
 800e8ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e8ee:	4b0d      	ldr	r3, [pc, #52]	@ (800e924 <std+0x60>)
 800e8f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800e928 <std+0x64>)
 800e8f4:	6323      	str	r3, [r4, #48]	@ 0x30
 800e8f6:	4b0d      	ldr	r3, [pc, #52]	@ (800e92c <std+0x68>)
 800e8f8:	6224      	str	r4, [r4, #32]
 800e8fa:	429c      	cmp	r4, r3
 800e8fc:	d006      	beq.n	800e90c <std+0x48>
 800e8fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e902:	4294      	cmp	r4, r2
 800e904:	d002      	beq.n	800e90c <std+0x48>
 800e906:	33d0      	adds	r3, #208	@ 0xd0
 800e908:	429c      	cmp	r4, r3
 800e90a:	d105      	bne.n	800e918 <std+0x54>
 800e90c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e914:	f000 ba6c 	b.w	800edf0 <__retarget_lock_init_recursive>
 800e918:	bd10      	pop	{r4, pc}
 800e91a:	bf00      	nop
 800e91c:	0800eb29 	.word	0x0800eb29
 800e920:	0800eb4b 	.word	0x0800eb4b
 800e924:	0800eb83 	.word	0x0800eb83
 800e928:	0800eba7 	.word	0x0800eba7
 800e92c:	20000a38 	.word	0x20000a38

0800e930 <stdio_exit_handler>:
 800e930:	4a02      	ldr	r2, [pc, #8]	@ (800e93c <stdio_exit_handler+0xc>)
 800e932:	4903      	ldr	r1, [pc, #12]	@ (800e940 <stdio_exit_handler+0x10>)
 800e934:	4803      	ldr	r0, [pc, #12]	@ (800e944 <stdio_exit_handler+0x14>)
 800e936:	f000 b869 	b.w	800ea0c <_fwalk_sglue>
 800e93a:	bf00      	nop
 800e93c:	200000e0 	.word	0x200000e0
 800e940:	08010729 	.word	0x08010729
 800e944:	200000f0 	.word	0x200000f0

0800e948 <cleanup_stdio>:
 800e948:	6841      	ldr	r1, [r0, #4]
 800e94a:	4b0c      	ldr	r3, [pc, #48]	@ (800e97c <cleanup_stdio+0x34>)
 800e94c:	4299      	cmp	r1, r3
 800e94e:	b510      	push	{r4, lr}
 800e950:	4604      	mov	r4, r0
 800e952:	d001      	beq.n	800e958 <cleanup_stdio+0x10>
 800e954:	f001 fee8 	bl	8010728 <_fflush_r>
 800e958:	68a1      	ldr	r1, [r4, #8]
 800e95a:	4b09      	ldr	r3, [pc, #36]	@ (800e980 <cleanup_stdio+0x38>)
 800e95c:	4299      	cmp	r1, r3
 800e95e:	d002      	beq.n	800e966 <cleanup_stdio+0x1e>
 800e960:	4620      	mov	r0, r4
 800e962:	f001 fee1 	bl	8010728 <_fflush_r>
 800e966:	68e1      	ldr	r1, [r4, #12]
 800e968:	4b06      	ldr	r3, [pc, #24]	@ (800e984 <cleanup_stdio+0x3c>)
 800e96a:	4299      	cmp	r1, r3
 800e96c:	d004      	beq.n	800e978 <cleanup_stdio+0x30>
 800e96e:	4620      	mov	r0, r4
 800e970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e974:	f001 bed8 	b.w	8010728 <_fflush_r>
 800e978:	bd10      	pop	{r4, pc}
 800e97a:	bf00      	nop
 800e97c:	20000a38 	.word	0x20000a38
 800e980:	20000aa0 	.word	0x20000aa0
 800e984:	20000b08 	.word	0x20000b08

0800e988 <global_stdio_init.part.0>:
 800e988:	b510      	push	{r4, lr}
 800e98a:	4b0b      	ldr	r3, [pc, #44]	@ (800e9b8 <global_stdio_init.part.0+0x30>)
 800e98c:	4c0b      	ldr	r4, [pc, #44]	@ (800e9bc <global_stdio_init.part.0+0x34>)
 800e98e:	4a0c      	ldr	r2, [pc, #48]	@ (800e9c0 <global_stdio_init.part.0+0x38>)
 800e990:	601a      	str	r2, [r3, #0]
 800e992:	4620      	mov	r0, r4
 800e994:	2200      	movs	r2, #0
 800e996:	2104      	movs	r1, #4
 800e998:	f7ff ff94 	bl	800e8c4 <std>
 800e99c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	2109      	movs	r1, #9
 800e9a4:	f7ff ff8e 	bl	800e8c4 <std>
 800e9a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e9ac:	2202      	movs	r2, #2
 800e9ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9b2:	2112      	movs	r1, #18
 800e9b4:	f7ff bf86 	b.w	800e8c4 <std>
 800e9b8:	20000b70 	.word	0x20000b70
 800e9bc:	20000a38 	.word	0x20000a38
 800e9c0:	0800e931 	.word	0x0800e931

0800e9c4 <__sfp_lock_acquire>:
 800e9c4:	4801      	ldr	r0, [pc, #4]	@ (800e9cc <__sfp_lock_acquire+0x8>)
 800e9c6:	f000 ba14 	b.w	800edf2 <__retarget_lock_acquire_recursive>
 800e9ca:	bf00      	nop
 800e9cc:	20000b79 	.word	0x20000b79

0800e9d0 <__sfp_lock_release>:
 800e9d0:	4801      	ldr	r0, [pc, #4]	@ (800e9d8 <__sfp_lock_release+0x8>)
 800e9d2:	f000 ba0f 	b.w	800edf4 <__retarget_lock_release_recursive>
 800e9d6:	bf00      	nop
 800e9d8:	20000b79 	.word	0x20000b79

0800e9dc <__sinit>:
 800e9dc:	b510      	push	{r4, lr}
 800e9de:	4604      	mov	r4, r0
 800e9e0:	f7ff fff0 	bl	800e9c4 <__sfp_lock_acquire>
 800e9e4:	6a23      	ldr	r3, [r4, #32]
 800e9e6:	b11b      	cbz	r3, 800e9f0 <__sinit+0x14>
 800e9e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9ec:	f7ff bff0 	b.w	800e9d0 <__sfp_lock_release>
 800e9f0:	4b04      	ldr	r3, [pc, #16]	@ (800ea04 <__sinit+0x28>)
 800e9f2:	6223      	str	r3, [r4, #32]
 800e9f4:	4b04      	ldr	r3, [pc, #16]	@ (800ea08 <__sinit+0x2c>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d1f5      	bne.n	800e9e8 <__sinit+0xc>
 800e9fc:	f7ff ffc4 	bl	800e988 <global_stdio_init.part.0>
 800ea00:	e7f2      	b.n	800e9e8 <__sinit+0xc>
 800ea02:	bf00      	nop
 800ea04:	0800e949 	.word	0x0800e949
 800ea08:	20000b70 	.word	0x20000b70

0800ea0c <_fwalk_sglue>:
 800ea0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea10:	4607      	mov	r7, r0
 800ea12:	4688      	mov	r8, r1
 800ea14:	4614      	mov	r4, r2
 800ea16:	2600      	movs	r6, #0
 800ea18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea1c:	f1b9 0901 	subs.w	r9, r9, #1
 800ea20:	d505      	bpl.n	800ea2e <_fwalk_sglue+0x22>
 800ea22:	6824      	ldr	r4, [r4, #0]
 800ea24:	2c00      	cmp	r4, #0
 800ea26:	d1f7      	bne.n	800ea18 <_fwalk_sglue+0xc>
 800ea28:	4630      	mov	r0, r6
 800ea2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea2e:	89ab      	ldrh	r3, [r5, #12]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d907      	bls.n	800ea44 <_fwalk_sglue+0x38>
 800ea34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea38:	3301      	adds	r3, #1
 800ea3a:	d003      	beq.n	800ea44 <_fwalk_sglue+0x38>
 800ea3c:	4629      	mov	r1, r5
 800ea3e:	4638      	mov	r0, r7
 800ea40:	47c0      	blx	r8
 800ea42:	4306      	orrs	r6, r0
 800ea44:	3568      	adds	r5, #104	@ 0x68
 800ea46:	e7e9      	b.n	800ea1c <_fwalk_sglue+0x10>

0800ea48 <iprintf>:
 800ea48:	b40f      	push	{r0, r1, r2, r3}
 800ea4a:	b507      	push	{r0, r1, r2, lr}
 800ea4c:	4906      	ldr	r1, [pc, #24]	@ (800ea68 <iprintf+0x20>)
 800ea4e:	ab04      	add	r3, sp, #16
 800ea50:	6808      	ldr	r0, [r1, #0]
 800ea52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea56:	6881      	ldr	r1, [r0, #8]
 800ea58:	9301      	str	r3, [sp, #4]
 800ea5a:	f001 fcc9 	bl	80103f0 <_vfiprintf_r>
 800ea5e:	b003      	add	sp, #12
 800ea60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea64:	b004      	add	sp, #16
 800ea66:	4770      	bx	lr
 800ea68:	200000ec 	.word	0x200000ec

0800ea6c <_puts_r>:
 800ea6c:	6a03      	ldr	r3, [r0, #32]
 800ea6e:	b570      	push	{r4, r5, r6, lr}
 800ea70:	6884      	ldr	r4, [r0, #8]
 800ea72:	4605      	mov	r5, r0
 800ea74:	460e      	mov	r6, r1
 800ea76:	b90b      	cbnz	r3, 800ea7c <_puts_r+0x10>
 800ea78:	f7ff ffb0 	bl	800e9dc <__sinit>
 800ea7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea7e:	07db      	lsls	r3, r3, #31
 800ea80:	d405      	bmi.n	800ea8e <_puts_r+0x22>
 800ea82:	89a3      	ldrh	r3, [r4, #12]
 800ea84:	0598      	lsls	r0, r3, #22
 800ea86:	d402      	bmi.n	800ea8e <_puts_r+0x22>
 800ea88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea8a:	f000 f9b2 	bl	800edf2 <__retarget_lock_acquire_recursive>
 800ea8e:	89a3      	ldrh	r3, [r4, #12]
 800ea90:	0719      	lsls	r1, r3, #28
 800ea92:	d502      	bpl.n	800ea9a <_puts_r+0x2e>
 800ea94:	6923      	ldr	r3, [r4, #16]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d135      	bne.n	800eb06 <_puts_r+0x9a>
 800ea9a:	4621      	mov	r1, r4
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	f000 f8c5 	bl	800ec2c <__swsetup_r>
 800eaa2:	b380      	cbz	r0, 800eb06 <_puts_r+0x9a>
 800eaa4:	f04f 35ff 	mov.w	r5, #4294967295
 800eaa8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eaaa:	07da      	lsls	r2, r3, #31
 800eaac:	d405      	bmi.n	800eaba <_puts_r+0x4e>
 800eaae:	89a3      	ldrh	r3, [r4, #12]
 800eab0:	059b      	lsls	r3, r3, #22
 800eab2:	d402      	bmi.n	800eaba <_puts_r+0x4e>
 800eab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eab6:	f000 f99d 	bl	800edf4 <__retarget_lock_release_recursive>
 800eaba:	4628      	mov	r0, r5
 800eabc:	bd70      	pop	{r4, r5, r6, pc}
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	da04      	bge.n	800eacc <_puts_r+0x60>
 800eac2:	69a2      	ldr	r2, [r4, #24]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	dc17      	bgt.n	800eaf8 <_puts_r+0x8c>
 800eac8:	290a      	cmp	r1, #10
 800eaca:	d015      	beq.n	800eaf8 <_puts_r+0x8c>
 800eacc:	6823      	ldr	r3, [r4, #0]
 800eace:	1c5a      	adds	r2, r3, #1
 800ead0:	6022      	str	r2, [r4, #0]
 800ead2:	7019      	strb	r1, [r3, #0]
 800ead4:	68a3      	ldr	r3, [r4, #8]
 800ead6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eada:	3b01      	subs	r3, #1
 800eadc:	60a3      	str	r3, [r4, #8]
 800eade:	2900      	cmp	r1, #0
 800eae0:	d1ed      	bne.n	800eabe <_puts_r+0x52>
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	da11      	bge.n	800eb0a <_puts_r+0x9e>
 800eae6:	4622      	mov	r2, r4
 800eae8:	210a      	movs	r1, #10
 800eaea:	4628      	mov	r0, r5
 800eaec:	f000 f85f 	bl	800ebae <__swbuf_r>
 800eaf0:	3001      	adds	r0, #1
 800eaf2:	d0d7      	beq.n	800eaa4 <_puts_r+0x38>
 800eaf4:	250a      	movs	r5, #10
 800eaf6:	e7d7      	b.n	800eaa8 <_puts_r+0x3c>
 800eaf8:	4622      	mov	r2, r4
 800eafa:	4628      	mov	r0, r5
 800eafc:	f000 f857 	bl	800ebae <__swbuf_r>
 800eb00:	3001      	adds	r0, #1
 800eb02:	d1e7      	bne.n	800ead4 <_puts_r+0x68>
 800eb04:	e7ce      	b.n	800eaa4 <_puts_r+0x38>
 800eb06:	3e01      	subs	r6, #1
 800eb08:	e7e4      	b.n	800ead4 <_puts_r+0x68>
 800eb0a:	6823      	ldr	r3, [r4, #0]
 800eb0c:	1c5a      	adds	r2, r3, #1
 800eb0e:	6022      	str	r2, [r4, #0]
 800eb10:	220a      	movs	r2, #10
 800eb12:	701a      	strb	r2, [r3, #0]
 800eb14:	e7ee      	b.n	800eaf4 <_puts_r+0x88>
	...

0800eb18 <puts>:
 800eb18:	4b02      	ldr	r3, [pc, #8]	@ (800eb24 <puts+0xc>)
 800eb1a:	4601      	mov	r1, r0
 800eb1c:	6818      	ldr	r0, [r3, #0]
 800eb1e:	f7ff bfa5 	b.w	800ea6c <_puts_r>
 800eb22:	bf00      	nop
 800eb24:	200000ec 	.word	0x200000ec

0800eb28 <__sread>:
 800eb28:	b510      	push	{r4, lr}
 800eb2a:	460c      	mov	r4, r1
 800eb2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb30:	f000 f910 	bl	800ed54 <_read_r>
 800eb34:	2800      	cmp	r0, #0
 800eb36:	bfab      	itete	ge
 800eb38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eb3a:	89a3      	ldrhlt	r3, [r4, #12]
 800eb3c:	181b      	addge	r3, r3, r0
 800eb3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eb42:	bfac      	ite	ge
 800eb44:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eb46:	81a3      	strhlt	r3, [r4, #12]
 800eb48:	bd10      	pop	{r4, pc}

0800eb4a <__swrite>:
 800eb4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4e:	461f      	mov	r7, r3
 800eb50:	898b      	ldrh	r3, [r1, #12]
 800eb52:	05db      	lsls	r3, r3, #23
 800eb54:	4605      	mov	r5, r0
 800eb56:	460c      	mov	r4, r1
 800eb58:	4616      	mov	r6, r2
 800eb5a:	d505      	bpl.n	800eb68 <__swrite+0x1e>
 800eb5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb60:	2302      	movs	r3, #2
 800eb62:	2200      	movs	r2, #0
 800eb64:	f000 f8e4 	bl	800ed30 <_lseek_r>
 800eb68:	89a3      	ldrh	r3, [r4, #12]
 800eb6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb72:	81a3      	strh	r3, [r4, #12]
 800eb74:	4632      	mov	r2, r6
 800eb76:	463b      	mov	r3, r7
 800eb78:	4628      	mov	r0, r5
 800eb7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb7e:	f000 b8fb 	b.w	800ed78 <_write_r>

0800eb82 <__sseek>:
 800eb82:	b510      	push	{r4, lr}
 800eb84:	460c      	mov	r4, r1
 800eb86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb8a:	f000 f8d1 	bl	800ed30 <_lseek_r>
 800eb8e:	1c43      	adds	r3, r0, #1
 800eb90:	89a3      	ldrh	r3, [r4, #12]
 800eb92:	bf15      	itete	ne
 800eb94:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eb96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eb9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eb9e:	81a3      	strheq	r3, [r4, #12]
 800eba0:	bf18      	it	ne
 800eba2:	81a3      	strhne	r3, [r4, #12]
 800eba4:	bd10      	pop	{r4, pc}

0800eba6 <__sclose>:
 800eba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebaa:	f000 b8b1 	b.w	800ed10 <_close_r>

0800ebae <__swbuf_r>:
 800ebae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebb0:	460e      	mov	r6, r1
 800ebb2:	4614      	mov	r4, r2
 800ebb4:	4605      	mov	r5, r0
 800ebb6:	b118      	cbz	r0, 800ebc0 <__swbuf_r+0x12>
 800ebb8:	6a03      	ldr	r3, [r0, #32]
 800ebba:	b90b      	cbnz	r3, 800ebc0 <__swbuf_r+0x12>
 800ebbc:	f7ff ff0e 	bl	800e9dc <__sinit>
 800ebc0:	69a3      	ldr	r3, [r4, #24]
 800ebc2:	60a3      	str	r3, [r4, #8]
 800ebc4:	89a3      	ldrh	r3, [r4, #12]
 800ebc6:	071a      	lsls	r2, r3, #28
 800ebc8:	d501      	bpl.n	800ebce <__swbuf_r+0x20>
 800ebca:	6923      	ldr	r3, [r4, #16]
 800ebcc:	b943      	cbnz	r3, 800ebe0 <__swbuf_r+0x32>
 800ebce:	4621      	mov	r1, r4
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	f000 f82b 	bl	800ec2c <__swsetup_r>
 800ebd6:	b118      	cbz	r0, 800ebe0 <__swbuf_r+0x32>
 800ebd8:	f04f 37ff 	mov.w	r7, #4294967295
 800ebdc:	4638      	mov	r0, r7
 800ebde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebe0:	6823      	ldr	r3, [r4, #0]
 800ebe2:	6922      	ldr	r2, [r4, #16]
 800ebe4:	1a98      	subs	r0, r3, r2
 800ebe6:	6963      	ldr	r3, [r4, #20]
 800ebe8:	b2f6      	uxtb	r6, r6
 800ebea:	4283      	cmp	r3, r0
 800ebec:	4637      	mov	r7, r6
 800ebee:	dc05      	bgt.n	800ebfc <__swbuf_r+0x4e>
 800ebf0:	4621      	mov	r1, r4
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	f001 fd98 	bl	8010728 <_fflush_r>
 800ebf8:	2800      	cmp	r0, #0
 800ebfa:	d1ed      	bne.n	800ebd8 <__swbuf_r+0x2a>
 800ebfc:	68a3      	ldr	r3, [r4, #8]
 800ebfe:	3b01      	subs	r3, #1
 800ec00:	60a3      	str	r3, [r4, #8]
 800ec02:	6823      	ldr	r3, [r4, #0]
 800ec04:	1c5a      	adds	r2, r3, #1
 800ec06:	6022      	str	r2, [r4, #0]
 800ec08:	701e      	strb	r6, [r3, #0]
 800ec0a:	6962      	ldr	r2, [r4, #20]
 800ec0c:	1c43      	adds	r3, r0, #1
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d004      	beq.n	800ec1c <__swbuf_r+0x6e>
 800ec12:	89a3      	ldrh	r3, [r4, #12]
 800ec14:	07db      	lsls	r3, r3, #31
 800ec16:	d5e1      	bpl.n	800ebdc <__swbuf_r+0x2e>
 800ec18:	2e0a      	cmp	r6, #10
 800ec1a:	d1df      	bne.n	800ebdc <__swbuf_r+0x2e>
 800ec1c:	4621      	mov	r1, r4
 800ec1e:	4628      	mov	r0, r5
 800ec20:	f001 fd82 	bl	8010728 <_fflush_r>
 800ec24:	2800      	cmp	r0, #0
 800ec26:	d0d9      	beq.n	800ebdc <__swbuf_r+0x2e>
 800ec28:	e7d6      	b.n	800ebd8 <__swbuf_r+0x2a>
	...

0800ec2c <__swsetup_r>:
 800ec2c:	b538      	push	{r3, r4, r5, lr}
 800ec2e:	4b29      	ldr	r3, [pc, #164]	@ (800ecd4 <__swsetup_r+0xa8>)
 800ec30:	4605      	mov	r5, r0
 800ec32:	6818      	ldr	r0, [r3, #0]
 800ec34:	460c      	mov	r4, r1
 800ec36:	b118      	cbz	r0, 800ec40 <__swsetup_r+0x14>
 800ec38:	6a03      	ldr	r3, [r0, #32]
 800ec3a:	b90b      	cbnz	r3, 800ec40 <__swsetup_r+0x14>
 800ec3c:	f7ff fece 	bl	800e9dc <__sinit>
 800ec40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec44:	0719      	lsls	r1, r3, #28
 800ec46:	d422      	bmi.n	800ec8e <__swsetup_r+0x62>
 800ec48:	06da      	lsls	r2, r3, #27
 800ec4a:	d407      	bmi.n	800ec5c <__swsetup_r+0x30>
 800ec4c:	2209      	movs	r2, #9
 800ec4e:	602a      	str	r2, [r5, #0]
 800ec50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec54:	81a3      	strh	r3, [r4, #12]
 800ec56:	f04f 30ff 	mov.w	r0, #4294967295
 800ec5a:	e033      	b.n	800ecc4 <__swsetup_r+0x98>
 800ec5c:	0758      	lsls	r0, r3, #29
 800ec5e:	d512      	bpl.n	800ec86 <__swsetup_r+0x5a>
 800ec60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec62:	b141      	cbz	r1, 800ec76 <__swsetup_r+0x4a>
 800ec64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec68:	4299      	cmp	r1, r3
 800ec6a:	d002      	beq.n	800ec72 <__swsetup_r+0x46>
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	f000 ff1b 	bl	800faa8 <_free_r>
 800ec72:	2300      	movs	r3, #0
 800ec74:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec76:	89a3      	ldrh	r3, [r4, #12]
 800ec78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ec7c:	81a3      	strh	r3, [r4, #12]
 800ec7e:	2300      	movs	r3, #0
 800ec80:	6063      	str	r3, [r4, #4]
 800ec82:	6923      	ldr	r3, [r4, #16]
 800ec84:	6023      	str	r3, [r4, #0]
 800ec86:	89a3      	ldrh	r3, [r4, #12]
 800ec88:	f043 0308 	orr.w	r3, r3, #8
 800ec8c:	81a3      	strh	r3, [r4, #12]
 800ec8e:	6923      	ldr	r3, [r4, #16]
 800ec90:	b94b      	cbnz	r3, 800eca6 <__swsetup_r+0x7a>
 800ec92:	89a3      	ldrh	r3, [r4, #12]
 800ec94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ec98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec9c:	d003      	beq.n	800eca6 <__swsetup_r+0x7a>
 800ec9e:	4621      	mov	r1, r4
 800eca0:	4628      	mov	r0, r5
 800eca2:	f001 fd8f 	bl	80107c4 <__smakebuf_r>
 800eca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecaa:	f013 0201 	ands.w	r2, r3, #1
 800ecae:	d00a      	beq.n	800ecc6 <__swsetup_r+0x9a>
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	60a2      	str	r2, [r4, #8]
 800ecb4:	6962      	ldr	r2, [r4, #20]
 800ecb6:	4252      	negs	r2, r2
 800ecb8:	61a2      	str	r2, [r4, #24]
 800ecba:	6922      	ldr	r2, [r4, #16]
 800ecbc:	b942      	cbnz	r2, 800ecd0 <__swsetup_r+0xa4>
 800ecbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ecc2:	d1c5      	bne.n	800ec50 <__swsetup_r+0x24>
 800ecc4:	bd38      	pop	{r3, r4, r5, pc}
 800ecc6:	0799      	lsls	r1, r3, #30
 800ecc8:	bf58      	it	pl
 800ecca:	6962      	ldrpl	r2, [r4, #20]
 800eccc:	60a2      	str	r2, [r4, #8]
 800ecce:	e7f4      	b.n	800ecba <__swsetup_r+0x8e>
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	e7f7      	b.n	800ecc4 <__swsetup_r+0x98>
 800ecd4:	200000ec 	.word	0x200000ec

0800ecd8 <memcmp>:
 800ecd8:	b510      	push	{r4, lr}
 800ecda:	3901      	subs	r1, #1
 800ecdc:	4402      	add	r2, r0
 800ecde:	4290      	cmp	r0, r2
 800ece0:	d101      	bne.n	800ece6 <memcmp+0xe>
 800ece2:	2000      	movs	r0, #0
 800ece4:	e005      	b.n	800ecf2 <memcmp+0x1a>
 800ece6:	7803      	ldrb	r3, [r0, #0]
 800ece8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ecec:	42a3      	cmp	r3, r4
 800ecee:	d001      	beq.n	800ecf4 <memcmp+0x1c>
 800ecf0:	1b18      	subs	r0, r3, r4
 800ecf2:	bd10      	pop	{r4, pc}
 800ecf4:	3001      	adds	r0, #1
 800ecf6:	e7f2      	b.n	800ecde <memcmp+0x6>

0800ecf8 <memset>:
 800ecf8:	4402      	add	r2, r0
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d100      	bne.n	800ed02 <memset+0xa>
 800ed00:	4770      	bx	lr
 800ed02:	f803 1b01 	strb.w	r1, [r3], #1
 800ed06:	e7f9      	b.n	800ecfc <memset+0x4>

0800ed08 <_localeconv_r>:
 800ed08:	4800      	ldr	r0, [pc, #0]	@ (800ed0c <_localeconv_r+0x4>)
 800ed0a:	4770      	bx	lr
 800ed0c:	2000022c 	.word	0x2000022c

0800ed10 <_close_r>:
 800ed10:	b538      	push	{r3, r4, r5, lr}
 800ed12:	4d06      	ldr	r5, [pc, #24]	@ (800ed2c <_close_r+0x1c>)
 800ed14:	2300      	movs	r3, #0
 800ed16:	4604      	mov	r4, r0
 800ed18:	4608      	mov	r0, r1
 800ed1a:	602b      	str	r3, [r5, #0]
 800ed1c:	f7f9 fa3e 	bl	800819c <_close>
 800ed20:	1c43      	adds	r3, r0, #1
 800ed22:	d102      	bne.n	800ed2a <_close_r+0x1a>
 800ed24:	682b      	ldr	r3, [r5, #0]
 800ed26:	b103      	cbz	r3, 800ed2a <_close_r+0x1a>
 800ed28:	6023      	str	r3, [r4, #0]
 800ed2a:	bd38      	pop	{r3, r4, r5, pc}
 800ed2c:	20000b74 	.word	0x20000b74

0800ed30 <_lseek_r>:
 800ed30:	b538      	push	{r3, r4, r5, lr}
 800ed32:	4d07      	ldr	r5, [pc, #28]	@ (800ed50 <_lseek_r+0x20>)
 800ed34:	4604      	mov	r4, r0
 800ed36:	4608      	mov	r0, r1
 800ed38:	4611      	mov	r1, r2
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	602a      	str	r2, [r5, #0]
 800ed3e:	461a      	mov	r2, r3
 800ed40:	f7f9 fa53 	bl	80081ea <_lseek>
 800ed44:	1c43      	adds	r3, r0, #1
 800ed46:	d102      	bne.n	800ed4e <_lseek_r+0x1e>
 800ed48:	682b      	ldr	r3, [r5, #0]
 800ed4a:	b103      	cbz	r3, 800ed4e <_lseek_r+0x1e>
 800ed4c:	6023      	str	r3, [r4, #0]
 800ed4e:	bd38      	pop	{r3, r4, r5, pc}
 800ed50:	20000b74 	.word	0x20000b74

0800ed54 <_read_r>:
 800ed54:	b538      	push	{r3, r4, r5, lr}
 800ed56:	4d07      	ldr	r5, [pc, #28]	@ (800ed74 <_read_r+0x20>)
 800ed58:	4604      	mov	r4, r0
 800ed5a:	4608      	mov	r0, r1
 800ed5c:	4611      	mov	r1, r2
 800ed5e:	2200      	movs	r2, #0
 800ed60:	602a      	str	r2, [r5, #0]
 800ed62:	461a      	mov	r2, r3
 800ed64:	f7f9 f9e1 	bl	800812a <_read>
 800ed68:	1c43      	adds	r3, r0, #1
 800ed6a:	d102      	bne.n	800ed72 <_read_r+0x1e>
 800ed6c:	682b      	ldr	r3, [r5, #0]
 800ed6e:	b103      	cbz	r3, 800ed72 <_read_r+0x1e>
 800ed70:	6023      	str	r3, [r4, #0]
 800ed72:	bd38      	pop	{r3, r4, r5, pc}
 800ed74:	20000b74 	.word	0x20000b74

0800ed78 <_write_r>:
 800ed78:	b538      	push	{r3, r4, r5, lr}
 800ed7a:	4d07      	ldr	r5, [pc, #28]	@ (800ed98 <_write_r+0x20>)
 800ed7c:	4604      	mov	r4, r0
 800ed7e:	4608      	mov	r0, r1
 800ed80:	4611      	mov	r1, r2
 800ed82:	2200      	movs	r2, #0
 800ed84:	602a      	str	r2, [r5, #0]
 800ed86:	461a      	mov	r2, r3
 800ed88:	f7f9 f9ec 	bl	8008164 <_write>
 800ed8c:	1c43      	adds	r3, r0, #1
 800ed8e:	d102      	bne.n	800ed96 <_write_r+0x1e>
 800ed90:	682b      	ldr	r3, [r5, #0]
 800ed92:	b103      	cbz	r3, 800ed96 <_write_r+0x1e>
 800ed94:	6023      	str	r3, [r4, #0]
 800ed96:	bd38      	pop	{r3, r4, r5, pc}
 800ed98:	20000b74 	.word	0x20000b74

0800ed9c <__errno>:
 800ed9c:	4b01      	ldr	r3, [pc, #4]	@ (800eda4 <__errno+0x8>)
 800ed9e:	6818      	ldr	r0, [r3, #0]
 800eda0:	4770      	bx	lr
 800eda2:	bf00      	nop
 800eda4:	200000ec 	.word	0x200000ec

0800eda8 <__libc_init_array>:
 800eda8:	b570      	push	{r4, r5, r6, lr}
 800edaa:	4d0d      	ldr	r5, [pc, #52]	@ (800ede0 <__libc_init_array+0x38>)
 800edac:	4c0d      	ldr	r4, [pc, #52]	@ (800ede4 <__libc_init_array+0x3c>)
 800edae:	1b64      	subs	r4, r4, r5
 800edb0:	10a4      	asrs	r4, r4, #2
 800edb2:	2600      	movs	r6, #0
 800edb4:	42a6      	cmp	r6, r4
 800edb6:	d109      	bne.n	800edcc <__libc_init_array+0x24>
 800edb8:	4d0b      	ldr	r5, [pc, #44]	@ (800ede8 <__libc_init_array+0x40>)
 800edba:	4c0c      	ldr	r4, [pc, #48]	@ (800edec <__libc_init_array+0x44>)
 800edbc:	f002 fc7e 	bl	80116bc <_init>
 800edc0:	1b64      	subs	r4, r4, r5
 800edc2:	10a4      	asrs	r4, r4, #2
 800edc4:	2600      	movs	r6, #0
 800edc6:	42a6      	cmp	r6, r4
 800edc8:	d105      	bne.n	800edd6 <__libc_init_array+0x2e>
 800edca:	bd70      	pop	{r4, r5, r6, pc}
 800edcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800edd0:	4798      	blx	r3
 800edd2:	3601      	adds	r6, #1
 800edd4:	e7ee      	b.n	800edb4 <__libc_init_array+0xc>
 800edd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800edda:	4798      	blx	r3
 800eddc:	3601      	adds	r6, #1
 800edde:	e7f2      	b.n	800edc6 <__libc_init_array+0x1e>
 800ede0:	08012e60 	.word	0x08012e60
 800ede4:	08012e60 	.word	0x08012e60
 800ede8:	08012e60 	.word	0x08012e60
 800edec:	08012e64 	.word	0x08012e64

0800edf0 <__retarget_lock_init_recursive>:
 800edf0:	4770      	bx	lr

0800edf2 <__retarget_lock_acquire_recursive>:
 800edf2:	4770      	bx	lr

0800edf4 <__retarget_lock_release_recursive>:
 800edf4:	4770      	bx	lr

0800edf6 <quorem>:
 800edf6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edfa:	6903      	ldr	r3, [r0, #16]
 800edfc:	690c      	ldr	r4, [r1, #16]
 800edfe:	42a3      	cmp	r3, r4
 800ee00:	4607      	mov	r7, r0
 800ee02:	db7e      	blt.n	800ef02 <quorem+0x10c>
 800ee04:	3c01      	subs	r4, #1
 800ee06:	f101 0814 	add.w	r8, r1, #20
 800ee0a:	00a3      	lsls	r3, r4, #2
 800ee0c:	f100 0514 	add.w	r5, r0, #20
 800ee10:	9300      	str	r3, [sp, #0]
 800ee12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee16:	9301      	str	r3, [sp, #4]
 800ee18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ee1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee20:	3301      	adds	r3, #1
 800ee22:	429a      	cmp	r2, r3
 800ee24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ee28:	fbb2 f6f3 	udiv	r6, r2, r3
 800ee2c:	d32e      	bcc.n	800ee8c <quorem+0x96>
 800ee2e:	f04f 0a00 	mov.w	sl, #0
 800ee32:	46c4      	mov	ip, r8
 800ee34:	46ae      	mov	lr, r5
 800ee36:	46d3      	mov	fp, sl
 800ee38:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ee3c:	b298      	uxth	r0, r3
 800ee3e:	fb06 a000 	mla	r0, r6, r0, sl
 800ee42:	0c02      	lsrs	r2, r0, #16
 800ee44:	0c1b      	lsrs	r3, r3, #16
 800ee46:	fb06 2303 	mla	r3, r6, r3, r2
 800ee4a:	f8de 2000 	ldr.w	r2, [lr]
 800ee4e:	b280      	uxth	r0, r0
 800ee50:	b292      	uxth	r2, r2
 800ee52:	1a12      	subs	r2, r2, r0
 800ee54:	445a      	add	r2, fp
 800ee56:	f8de 0000 	ldr.w	r0, [lr]
 800ee5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ee64:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ee68:	b292      	uxth	r2, r2
 800ee6a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ee6e:	45e1      	cmp	r9, ip
 800ee70:	f84e 2b04 	str.w	r2, [lr], #4
 800ee74:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ee78:	d2de      	bcs.n	800ee38 <quorem+0x42>
 800ee7a:	9b00      	ldr	r3, [sp, #0]
 800ee7c:	58eb      	ldr	r3, [r5, r3]
 800ee7e:	b92b      	cbnz	r3, 800ee8c <quorem+0x96>
 800ee80:	9b01      	ldr	r3, [sp, #4]
 800ee82:	3b04      	subs	r3, #4
 800ee84:	429d      	cmp	r5, r3
 800ee86:	461a      	mov	r2, r3
 800ee88:	d32f      	bcc.n	800eeea <quorem+0xf4>
 800ee8a:	613c      	str	r4, [r7, #16]
 800ee8c:	4638      	mov	r0, r7
 800ee8e:	f001 f97d 	bl	801018c <__mcmp>
 800ee92:	2800      	cmp	r0, #0
 800ee94:	db25      	blt.n	800eee2 <quorem+0xec>
 800ee96:	4629      	mov	r1, r5
 800ee98:	2000      	movs	r0, #0
 800ee9a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ee9e:	f8d1 c000 	ldr.w	ip, [r1]
 800eea2:	fa1f fe82 	uxth.w	lr, r2
 800eea6:	fa1f f38c 	uxth.w	r3, ip
 800eeaa:	eba3 030e 	sub.w	r3, r3, lr
 800eeae:	4403      	add	r3, r0
 800eeb0:	0c12      	lsrs	r2, r2, #16
 800eeb2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800eeb6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eec0:	45c1      	cmp	r9, r8
 800eec2:	f841 3b04 	str.w	r3, [r1], #4
 800eec6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800eeca:	d2e6      	bcs.n	800ee9a <quorem+0xa4>
 800eecc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eed0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eed4:	b922      	cbnz	r2, 800eee0 <quorem+0xea>
 800eed6:	3b04      	subs	r3, #4
 800eed8:	429d      	cmp	r5, r3
 800eeda:	461a      	mov	r2, r3
 800eedc:	d30b      	bcc.n	800eef6 <quorem+0x100>
 800eede:	613c      	str	r4, [r7, #16]
 800eee0:	3601      	adds	r6, #1
 800eee2:	4630      	mov	r0, r6
 800eee4:	b003      	add	sp, #12
 800eee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeea:	6812      	ldr	r2, [r2, #0]
 800eeec:	3b04      	subs	r3, #4
 800eeee:	2a00      	cmp	r2, #0
 800eef0:	d1cb      	bne.n	800ee8a <quorem+0x94>
 800eef2:	3c01      	subs	r4, #1
 800eef4:	e7c6      	b.n	800ee84 <quorem+0x8e>
 800eef6:	6812      	ldr	r2, [r2, #0]
 800eef8:	3b04      	subs	r3, #4
 800eefa:	2a00      	cmp	r2, #0
 800eefc:	d1ef      	bne.n	800eede <quorem+0xe8>
 800eefe:	3c01      	subs	r4, #1
 800ef00:	e7ea      	b.n	800eed8 <quorem+0xe2>
 800ef02:	2000      	movs	r0, #0
 800ef04:	e7ee      	b.n	800eee4 <quorem+0xee>
	...

0800ef08 <_dtoa_r>:
 800ef08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef0c:	69c7      	ldr	r7, [r0, #28]
 800ef0e:	b097      	sub	sp, #92	@ 0x5c
 800ef10:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ef14:	ec55 4b10 	vmov	r4, r5, d0
 800ef18:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ef1a:	9107      	str	r1, [sp, #28]
 800ef1c:	4681      	mov	r9, r0
 800ef1e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ef20:	9311      	str	r3, [sp, #68]	@ 0x44
 800ef22:	b97f      	cbnz	r7, 800ef44 <_dtoa_r+0x3c>
 800ef24:	2010      	movs	r0, #16
 800ef26:	f000 fe09 	bl	800fb3c <malloc>
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ef30:	b920      	cbnz	r0, 800ef3c <_dtoa_r+0x34>
 800ef32:	4ba9      	ldr	r3, [pc, #676]	@ (800f1d8 <_dtoa_r+0x2d0>)
 800ef34:	21ef      	movs	r1, #239	@ 0xef
 800ef36:	48a9      	ldr	r0, [pc, #676]	@ (800f1dc <_dtoa_r+0x2d4>)
 800ef38:	f001 fcc0 	bl	80108bc <__assert_func>
 800ef3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ef40:	6007      	str	r7, [r0, #0]
 800ef42:	60c7      	str	r7, [r0, #12]
 800ef44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ef48:	6819      	ldr	r1, [r3, #0]
 800ef4a:	b159      	cbz	r1, 800ef64 <_dtoa_r+0x5c>
 800ef4c:	685a      	ldr	r2, [r3, #4]
 800ef4e:	604a      	str	r2, [r1, #4]
 800ef50:	2301      	movs	r3, #1
 800ef52:	4093      	lsls	r3, r2
 800ef54:	608b      	str	r3, [r1, #8]
 800ef56:	4648      	mov	r0, r9
 800ef58:	f000 fee6 	bl	800fd28 <_Bfree>
 800ef5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ef60:	2200      	movs	r2, #0
 800ef62:	601a      	str	r2, [r3, #0]
 800ef64:	1e2b      	subs	r3, r5, #0
 800ef66:	bfb9      	ittee	lt
 800ef68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ef6c:	9305      	strlt	r3, [sp, #20]
 800ef6e:	2300      	movge	r3, #0
 800ef70:	6033      	strge	r3, [r6, #0]
 800ef72:	9f05      	ldr	r7, [sp, #20]
 800ef74:	4b9a      	ldr	r3, [pc, #616]	@ (800f1e0 <_dtoa_r+0x2d8>)
 800ef76:	bfbc      	itt	lt
 800ef78:	2201      	movlt	r2, #1
 800ef7a:	6032      	strlt	r2, [r6, #0]
 800ef7c:	43bb      	bics	r3, r7
 800ef7e:	d112      	bne.n	800efa6 <_dtoa_r+0x9e>
 800ef80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ef82:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ef86:	6013      	str	r3, [r2, #0]
 800ef88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ef8c:	4323      	orrs	r3, r4
 800ef8e:	f000 855a 	beq.w	800fa46 <_dtoa_r+0xb3e>
 800ef92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ef94:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f1f4 <_dtoa_r+0x2ec>
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	f000 855c 	beq.w	800fa56 <_dtoa_r+0xb4e>
 800ef9e:	f10a 0303 	add.w	r3, sl, #3
 800efa2:	f000 bd56 	b.w	800fa52 <_dtoa_r+0xb4a>
 800efa6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800efaa:	2200      	movs	r2, #0
 800efac:	ec51 0b17 	vmov	r0, r1, d7
 800efb0:	2300      	movs	r3, #0
 800efb2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800efb6:	f7f1 fd87 	bl	8000ac8 <__aeabi_dcmpeq>
 800efba:	4680      	mov	r8, r0
 800efbc:	b158      	cbz	r0, 800efd6 <_dtoa_r+0xce>
 800efbe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800efc0:	2301      	movs	r3, #1
 800efc2:	6013      	str	r3, [r2, #0]
 800efc4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800efc6:	b113      	cbz	r3, 800efce <_dtoa_r+0xc6>
 800efc8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800efca:	4b86      	ldr	r3, [pc, #536]	@ (800f1e4 <_dtoa_r+0x2dc>)
 800efcc:	6013      	str	r3, [r2, #0]
 800efce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800f1f8 <_dtoa_r+0x2f0>
 800efd2:	f000 bd40 	b.w	800fa56 <_dtoa_r+0xb4e>
 800efd6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800efda:	aa14      	add	r2, sp, #80	@ 0x50
 800efdc:	a915      	add	r1, sp, #84	@ 0x54
 800efde:	4648      	mov	r0, r9
 800efe0:	f001 f984 	bl	80102ec <__d2b>
 800efe4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800efe8:	9002      	str	r0, [sp, #8]
 800efea:	2e00      	cmp	r6, #0
 800efec:	d078      	beq.n	800f0e0 <_dtoa_r+0x1d8>
 800efee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eff0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800eff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eff8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800effc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f000:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f004:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f008:	4619      	mov	r1, r3
 800f00a:	2200      	movs	r2, #0
 800f00c:	4b76      	ldr	r3, [pc, #472]	@ (800f1e8 <_dtoa_r+0x2e0>)
 800f00e:	f7f1 f93b 	bl	8000288 <__aeabi_dsub>
 800f012:	a36b      	add	r3, pc, #428	@ (adr r3, 800f1c0 <_dtoa_r+0x2b8>)
 800f014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f018:	f7f1 faee 	bl	80005f8 <__aeabi_dmul>
 800f01c:	a36a      	add	r3, pc, #424	@ (adr r3, 800f1c8 <_dtoa_r+0x2c0>)
 800f01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f022:	f7f1 f933 	bl	800028c <__adddf3>
 800f026:	4604      	mov	r4, r0
 800f028:	4630      	mov	r0, r6
 800f02a:	460d      	mov	r5, r1
 800f02c:	f7f1 fa7a 	bl	8000524 <__aeabi_i2d>
 800f030:	a367      	add	r3, pc, #412	@ (adr r3, 800f1d0 <_dtoa_r+0x2c8>)
 800f032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f036:	f7f1 fadf 	bl	80005f8 <__aeabi_dmul>
 800f03a:	4602      	mov	r2, r0
 800f03c:	460b      	mov	r3, r1
 800f03e:	4620      	mov	r0, r4
 800f040:	4629      	mov	r1, r5
 800f042:	f7f1 f923 	bl	800028c <__adddf3>
 800f046:	4604      	mov	r4, r0
 800f048:	460d      	mov	r5, r1
 800f04a:	f7f1 fd85 	bl	8000b58 <__aeabi_d2iz>
 800f04e:	2200      	movs	r2, #0
 800f050:	4607      	mov	r7, r0
 800f052:	2300      	movs	r3, #0
 800f054:	4620      	mov	r0, r4
 800f056:	4629      	mov	r1, r5
 800f058:	f7f1 fd40 	bl	8000adc <__aeabi_dcmplt>
 800f05c:	b140      	cbz	r0, 800f070 <_dtoa_r+0x168>
 800f05e:	4638      	mov	r0, r7
 800f060:	f7f1 fa60 	bl	8000524 <__aeabi_i2d>
 800f064:	4622      	mov	r2, r4
 800f066:	462b      	mov	r3, r5
 800f068:	f7f1 fd2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f06c:	b900      	cbnz	r0, 800f070 <_dtoa_r+0x168>
 800f06e:	3f01      	subs	r7, #1
 800f070:	2f16      	cmp	r7, #22
 800f072:	d852      	bhi.n	800f11a <_dtoa_r+0x212>
 800f074:	4b5d      	ldr	r3, [pc, #372]	@ (800f1ec <_dtoa_r+0x2e4>)
 800f076:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f082:	f7f1 fd2b 	bl	8000adc <__aeabi_dcmplt>
 800f086:	2800      	cmp	r0, #0
 800f088:	d049      	beq.n	800f11e <_dtoa_r+0x216>
 800f08a:	3f01      	subs	r7, #1
 800f08c:	2300      	movs	r3, #0
 800f08e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f090:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f092:	1b9b      	subs	r3, r3, r6
 800f094:	1e5a      	subs	r2, r3, #1
 800f096:	bf45      	ittet	mi
 800f098:	f1c3 0301 	rsbmi	r3, r3, #1
 800f09c:	9300      	strmi	r3, [sp, #0]
 800f09e:	2300      	movpl	r3, #0
 800f0a0:	2300      	movmi	r3, #0
 800f0a2:	9206      	str	r2, [sp, #24]
 800f0a4:	bf54      	ite	pl
 800f0a6:	9300      	strpl	r3, [sp, #0]
 800f0a8:	9306      	strmi	r3, [sp, #24]
 800f0aa:	2f00      	cmp	r7, #0
 800f0ac:	db39      	blt.n	800f122 <_dtoa_r+0x21a>
 800f0ae:	9b06      	ldr	r3, [sp, #24]
 800f0b0:	970d      	str	r7, [sp, #52]	@ 0x34
 800f0b2:	443b      	add	r3, r7
 800f0b4:	9306      	str	r3, [sp, #24]
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	9308      	str	r3, [sp, #32]
 800f0ba:	9b07      	ldr	r3, [sp, #28]
 800f0bc:	2b09      	cmp	r3, #9
 800f0be:	d863      	bhi.n	800f188 <_dtoa_r+0x280>
 800f0c0:	2b05      	cmp	r3, #5
 800f0c2:	bfc4      	itt	gt
 800f0c4:	3b04      	subgt	r3, #4
 800f0c6:	9307      	strgt	r3, [sp, #28]
 800f0c8:	9b07      	ldr	r3, [sp, #28]
 800f0ca:	f1a3 0302 	sub.w	r3, r3, #2
 800f0ce:	bfcc      	ite	gt
 800f0d0:	2400      	movgt	r4, #0
 800f0d2:	2401      	movle	r4, #1
 800f0d4:	2b03      	cmp	r3, #3
 800f0d6:	d863      	bhi.n	800f1a0 <_dtoa_r+0x298>
 800f0d8:	e8df f003 	tbb	[pc, r3]
 800f0dc:	2b375452 	.word	0x2b375452
 800f0e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f0e4:	441e      	add	r6, r3
 800f0e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f0ea:	2b20      	cmp	r3, #32
 800f0ec:	bfc1      	itttt	gt
 800f0ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f0f2:	409f      	lslgt	r7, r3
 800f0f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f0f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f0fc:	bfd6      	itet	le
 800f0fe:	f1c3 0320 	rsble	r3, r3, #32
 800f102:	ea47 0003 	orrgt.w	r0, r7, r3
 800f106:	fa04 f003 	lslle.w	r0, r4, r3
 800f10a:	f7f1 f9fb 	bl	8000504 <__aeabi_ui2d>
 800f10e:	2201      	movs	r2, #1
 800f110:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f114:	3e01      	subs	r6, #1
 800f116:	9212      	str	r2, [sp, #72]	@ 0x48
 800f118:	e776      	b.n	800f008 <_dtoa_r+0x100>
 800f11a:	2301      	movs	r3, #1
 800f11c:	e7b7      	b.n	800f08e <_dtoa_r+0x186>
 800f11e:	9010      	str	r0, [sp, #64]	@ 0x40
 800f120:	e7b6      	b.n	800f090 <_dtoa_r+0x188>
 800f122:	9b00      	ldr	r3, [sp, #0]
 800f124:	1bdb      	subs	r3, r3, r7
 800f126:	9300      	str	r3, [sp, #0]
 800f128:	427b      	negs	r3, r7
 800f12a:	9308      	str	r3, [sp, #32]
 800f12c:	2300      	movs	r3, #0
 800f12e:	930d      	str	r3, [sp, #52]	@ 0x34
 800f130:	e7c3      	b.n	800f0ba <_dtoa_r+0x1b2>
 800f132:	2301      	movs	r3, #1
 800f134:	9309      	str	r3, [sp, #36]	@ 0x24
 800f136:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f138:	eb07 0b03 	add.w	fp, r7, r3
 800f13c:	f10b 0301 	add.w	r3, fp, #1
 800f140:	2b01      	cmp	r3, #1
 800f142:	9303      	str	r3, [sp, #12]
 800f144:	bfb8      	it	lt
 800f146:	2301      	movlt	r3, #1
 800f148:	e006      	b.n	800f158 <_dtoa_r+0x250>
 800f14a:	2301      	movs	r3, #1
 800f14c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f14e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f150:	2b00      	cmp	r3, #0
 800f152:	dd28      	ble.n	800f1a6 <_dtoa_r+0x29e>
 800f154:	469b      	mov	fp, r3
 800f156:	9303      	str	r3, [sp, #12]
 800f158:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f15c:	2100      	movs	r1, #0
 800f15e:	2204      	movs	r2, #4
 800f160:	f102 0514 	add.w	r5, r2, #20
 800f164:	429d      	cmp	r5, r3
 800f166:	d926      	bls.n	800f1b6 <_dtoa_r+0x2ae>
 800f168:	6041      	str	r1, [r0, #4]
 800f16a:	4648      	mov	r0, r9
 800f16c:	f000 fd9c 	bl	800fca8 <_Balloc>
 800f170:	4682      	mov	sl, r0
 800f172:	2800      	cmp	r0, #0
 800f174:	d142      	bne.n	800f1fc <_dtoa_r+0x2f4>
 800f176:	4b1e      	ldr	r3, [pc, #120]	@ (800f1f0 <_dtoa_r+0x2e8>)
 800f178:	4602      	mov	r2, r0
 800f17a:	f240 11af 	movw	r1, #431	@ 0x1af
 800f17e:	e6da      	b.n	800ef36 <_dtoa_r+0x2e>
 800f180:	2300      	movs	r3, #0
 800f182:	e7e3      	b.n	800f14c <_dtoa_r+0x244>
 800f184:	2300      	movs	r3, #0
 800f186:	e7d5      	b.n	800f134 <_dtoa_r+0x22c>
 800f188:	2401      	movs	r4, #1
 800f18a:	2300      	movs	r3, #0
 800f18c:	9307      	str	r3, [sp, #28]
 800f18e:	9409      	str	r4, [sp, #36]	@ 0x24
 800f190:	f04f 3bff 	mov.w	fp, #4294967295
 800f194:	2200      	movs	r2, #0
 800f196:	f8cd b00c 	str.w	fp, [sp, #12]
 800f19a:	2312      	movs	r3, #18
 800f19c:	920c      	str	r2, [sp, #48]	@ 0x30
 800f19e:	e7db      	b.n	800f158 <_dtoa_r+0x250>
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1a4:	e7f4      	b.n	800f190 <_dtoa_r+0x288>
 800f1a6:	f04f 0b01 	mov.w	fp, #1
 800f1aa:	f8cd b00c 	str.w	fp, [sp, #12]
 800f1ae:	465b      	mov	r3, fp
 800f1b0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f1b4:	e7d0      	b.n	800f158 <_dtoa_r+0x250>
 800f1b6:	3101      	adds	r1, #1
 800f1b8:	0052      	lsls	r2, r2, #1
 800f1ba:	e7d1      	b.n	800f160 <_dtoa_r+0x258>
 800f1bc:	f3af 8000 	nop.w
 800f1c0:	636f4361 	.word	0x636f4361
 800f1c4:	3fd287a7 	.word	0x3fd287a7
 800f1c8:	8b60c8b3 	.word	0x8b60c8b3
 800f1cc:	3fc68a28 	.word	0x3fc68a28
 800f1d0:	509f79fb 	.word	0x509f79fb
 800f1d4:	3fd34413 	.word	0x3fd34413
 800f1d8:	08012a9d 	.word	0x08012a9d
 800f1dc:	08012ab4 	.word	0x08012ab4
 800f1e0:	7ff00000 	.word	0x7ff00000
 800f1e4:	08012a6d 	.word	0x08012a6d
 800f1e8:	3ff80000 	.word	0x3ff80000
 800f1ec:	08012c08 	.word	0x08012c08
 800f1f0:	08012b0c 	.word	0x08012b0c
 800f1f4:	08012a99 	.word	0x08012a99
 800f1f8:	08012a6c 	.word	0x08012a6c
 800f1fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f200:	6018      	str	r0, [r3, #0]
 800f202:	9b03      	ldr	r3, [sp, #12]
 800f204:	2b0e      	cmp	r3, #14
 800f206:	f200 80a1 	bhi.w	800f34c <_dtoa_r+0x444>
 800f20a:	2c00      	cmp	r4, #0
 800f20c:	f000 809e 	beq.w	800f34c <_dtoa_r+0x444>
 800f210:	2f00      	cmp	r7, #0
 800f212:	dd33      	ble.n	800f27c <_dtoa_r+0x374>
 800f214:	4b9c      	ldr	r3, [pc, #624]	@ (800f488 <_dtoa_r+0x580>)
 800f216:	f007 020f 	and.w	r2, r7, #15
 800f21a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f21e:	ed93 7b00 	vldr	d7, [r3]
 800f222:	05f8      	lsls	r0, r7, #23
 800f224:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f228:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f22c:	d516      	bpl.n	800f25c <_dtoa_r+0x354>
 800f22e:	4b97      	ldr	r3, [pc, #604]	@ (800f48c <_dtoa_r+0x584>)
 800f230:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f234:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f238:	f7f1 fb08 	bl	800084c <__aeabi_ddiv>
 800f23c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f240:	f004 040f 	and.w	r4, r4, #15
 800f244:	2603      	movs	r6, #3
 800f246:	4d91      	ldr	r5, [pc, #580]	@ (800f48c <_dtoa_r+0x584>)
 800f248:	b954      	cbnz	r4, 800f260 <_dtoa_r+0x358>
 800f24a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f24e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f252:	f7f1 fafb 	bl	800084c <__aeabi_ddiv>
 800f256:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f25a:	e028      	b.n	800f2ae <_dtoa_r+0x3a6>
 800f25c:	2602      	movs	r6, #2
 800f25e:	e7f2      	b.n	800f246 <_dtoa_r+0x33e>
 800f260:	07e1      	lsls	r1, r4, #31
 800f262:	d508      	bpl.n	800f276 <_dtoa_r+0x36e>
 800f264:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f268:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f26c:	f7f1 f9c4 	bl	80005f8 <__aeabi_dmul>
 800f270:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f274:	3601      	adds	r6, #1
 800f276:	1064      	asrs	r4, r4, #1
 800f278:	3508      	adds	r5, #8
 800f27a:	e7e5      	b.n	800f248 <_dtoa_r+0x340>
 800f27c:	f000 80af 	beq.w	800f3de <_dtoa_r+0x4d6>
 800f280:	427c      	negs	r4, r7
 800f282:	4b81      	ldr	r3, [pc, #516]	@ (800f488 <_dtoa_r+0x580>)
 800f284:	4d81      	ldr	r5, [pc, #516]	@ (800f48c <_dtoa_r+0x584>)
 800f286:	f004 020f 	and.w	r2, r4, #15
 800f28a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f292:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f296:	f7f1 f9af 	bl	80005f8 <__aeabi_dmul>
 800f29a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f29e:	1124      	asrs	r4, r4, #4
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	2602      	movs	r6, #2
 800f2a4:	2c00      	cmp	r4, #0
 800f2a6:	f040 808f 	bne.w	800f3c8 <_dtoa_r+0x4c0>
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d1d3      	bne.n	800f256 <_dtoa_r+0x34e>
 800f2ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f2b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	f000 8094 	beq.w	800f3e2 <_dtoa_r+0x4da>
 800f2ba:	4b75      	ldr	r3, [pc, #468]	@ (800f490 <_dtoa_r+0x588>)
 800f2bc:	2200      	movs	r2, #0
 800f2be:	4620      	mov	r0, r4
 800f2c0:	4629      	mov	r1, r5
 800f2c2:	f7f1 fc0b 	bl	8000adc <__aeabi_dcmplt>
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	f000 808b 	beq.w	800f3e2 <_dtoa_r+0x4da>
 800f2cc:	9b03      	ldr	r3, [sp, #12]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	f000 8087 	beq.w	800f3e2 <_dtoa_r+0x4da>
 800f2d4:	f1bb 0f00 	cmp.w	fp, #0
 800f2d8:	dd34      	ble.n	800f344 <_dtoa_r+0x43c>
 800f2da:	4620      	mov	r0, r4
 800f2dc:	4b6d      	ldr	r3, [pc, #436]	@ (800f494 <_dtoa_r+0x58c>)
 800f2de:	2200      	movs	r2, #0
 800f2e0:	4629      	mov	r1, r5
 800f2e2:	f7f1 f989 	bl	80005f8 <__aeabi_dmul>
 800f2e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f2ea:	f107 38ff 	add.w	r8, r7, #4294967295
 800f2ee:	3601      	adds	r6, #1
 800f2f0:	465c      	mov	r4, fp
 800f2f2:	4630      	mov	r0, r6
 800f2f4:	f7f1 f916 	bl	8000524 <__aeabi_i2d>
 800f2f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2fc:	f7f1 f97c 	bl	80005f8 <__aeabi_dmul>
 800f300:	4b65      	ldr	r3, [pc, #404]	@ (800f498 <_dtoa_r+0x590>)
 800f302:	2200      	movs	r2, #0
 800f304:	f7f0 ffc2 	bl	800028c <__adddf3>
 800f308:	4605      	mov	r5, r0
 800f30a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f30e:	2c00      	cmp	r4, #0
 800f310:	d16a      	bne.n	800f3e8 <_dtoa_r+0x4e0>
 800f312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f316:	4b61      	ldr	r3, [pc, #388]	@ (800f49c <_dtoa_r+0x594>)
 800f318:	2200      	movs	r2, #0
 800f31a:	f7f0 ffb5 	bl	8000288 <__aeabi_dsub>
 800f31e:	4602      	mov	r2, r0
 800f320:	460b      	mov	r3, r1
 800f322:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f326:	462a      	mov	r2, r5
 800f328:	4633      	mov	r3, r6
 800f32a:	f7f1 fbf5 	bl	8000b18 <__aeabi_dcmpgt>
 800f32e:	2800      	cmp	r0, #0
 800f330:	f040 8298 	bne.w	800f864 <_dtoa_r+0x95c>
 800f334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f338:	462a      	mov	r2, r5
 800f33a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f33e:	f7f1 fbcd 	bl	8000adc <__aeabi_dcmplt>
 800f342:	bb38      	cbnz	r0, 800f394 <_dtoa_r+0x48c>
 800f344:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f348:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f34c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f34e:	2b00      	cmp	r3, #0
 800f350:	f2c0 8157 	blt.w	800f602 <_dtoa_r+0x6fa>
 800f354:	2f0e      	cmp	r7, #14
 800f356:	f300 8154 	bgt.w	800f602 <_dtoa_r+0x6fa>
 800f35a:	4b4b      	ldr	r3, [pc, #300]	@ (800f488 <_dtoa_r+0x580>)
 800f35c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f360:	ed93 7b00 	vldr	d7, [r3]
 800f364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f366:	2b00      	cmp	r3, #0
 800f368:	ed8d 7b00 	vstr	d7, [sp]
 800f36c:	f280 80e5 	bge.w	800f53a <_dtoa_r+0x632>
 800f370:	9b03      	ldr	r3, [sp, #12]
 800f372:	2b00      	cmp	r3, #0
 800f374:	f300 80e1 	bgt.w	800f53a <_dtoa_r+0x632>
 800f378:	d10c      	bne.n	800f394 <_dtoa_r+0x48c>
 800f37a:	4b48      	ldr	r3, [pc, #288]	@ (800f49c <_dtoa_r+0x594>)
 800f37c:	2200      	movs	r2, #0
 800f37e:	ec51 0b17 	vmov	r0, r1, d7
 800f382:	f7f1 f939 	bl	80005f8 <__aeabi_dmul>
 800f386:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f38a:	f7f1 fbbb 	bl	8000b04 <__aeabi_dcmpge>
 800f38e:	2800      	cmp	r0, #0
 800f390:	f000 8266 	beq.w	800f860 <_dtoa_r+0x958>
 800f394:	2400      	movs	r4, #0
 800f396:	4625      	mov	r5, r4
 800f398:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f39a:	4656      	mov	r6, sl
 800f39c:	ea6f 0803 	mvn.w	r8, r3
 800f3a0:	2700      	movs	r7, #0
 800f3a2:	4621      	mov	r1, r4
 800f3a4:	4648      	mov	r0, r9
 800f3a6:	f000 fcbf 	bl	800fd28 <_Bfree>
 800f3aa:	2d00      	cmp	r5, #0
 800f3ac:	f000 80bd 	beq.w	800f52a <_dtoa_r+0x622>
 800f3b0:	b12f      	cbz	r7, 800f3be <_dtoa_r+0x4b6>
 800f3b2:	42af      	cmp	r7, r5
 800f3b4:	d003      	beq.n	800f3be <_dtoa_r+0x4b6>
 800f3b6:	4639      	mov	r1, r7
 800f3b8:	4648      	mov	r0, r9
 800f3ba:	f000 fcb5 	bl	800fd28 <_Bfree>
 800f3be:	4629      	mov	r1, r5
 800f3c0:	4648      	mov	r0, r9
 800f3c2:	f000 fcb1 	bl	800fd28 <_Bfree>
 800f3c6:	e0b0      	b.n	800f52a <_dtoa_r+0x622>
 800f3c8:	07e2      	lsls	r2, r4, #31
 800f3ca:	d505      	bpl.n	800f3d8 <_dtoa_r+0x4d0>
 800f3cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f3d0:	f7f1 f912 	bl	80005f8 <__aeabi_dmul>
 800f3d4:	3601      	adds	r6, #1
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	1064      	asrs	r4, r4, #1
 800f3da:	3508      	adds	r5, #8
 800f3dc:	e762      	b.n	800f2a4 <_dtoa_r+0x39c>
 800f3de:	2602      	movs	r6, #2
 800f3e0:	e765      	b.n	800f2ae <_dtoa_r+0x3a6>
 800f3e2:	9c03      	ldr	r4, [sp, #12]
 800f3e4:	46b8      	mov	r8, r7
 800f3e6:	e784      	b.n	800f2f2 <_dtoa_r+0x3ea>
 800f3e8:	4b27      	ldr	r3, [pc, #156]	@ (800f488 <_dtoa_r+0x580>)
 800f3ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f3ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f3f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f3f4:	4454      	add	r4, sl
 800f3f6:	2900      	cmp	r1, #0
 800f3f8:	d054      	beq.n	800f4a4 <_dtoa_r+0x59c>
 800f3fa:	4929      	ldr	r1, [pc, #164]	@ (800f4a0 <_dtoa_r+0x598>)
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	f7f1 fa25 	bl	800084c <__aeabi_ddiv>
 800f402:	4633      	mov	r3, r6
 800f404:	462a      	mov	r2, r5
 800f406:	f7f0 ff3f 	bl	8000288 <__aeabi_dsub>
 800f40a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f40e:	4656      	mov	r6, sl
 800f410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f414:	f7f1 fba0 	bl	8000b58 <__aeabi_d2iz>
 800f418:	4605      	mov	r5, r0
 800f41a:	f7f1 f883 	bl	8000524 <__aeabi_i2d>
 800f41e:	4602      	mov	r2, r0
 800f420:	460b      	mov	r3, r1
 800f422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f426:	f7f0 ff2f 	bl	8000288 <__aeabi_dsub>
 800f42a:	3530      	adds	r5, #48	@ 0x30
 800f42c:	4602      	mov	r2, r0
 800f42e:	460b      	mov	r3, r1
 800f430:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f434:	f806 5b01 	strb.w	r5, [r6], #1
 800f438:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f43c:	f7f1 fb4e 	bl	8000adc <__aeabi_dcmplt>
 800f440:	2800      	cmp	r0, #0
 800f442:	d172      	bne.n	800f52a <_dtoa_r+0x622>
 800f444:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f448:	4911      	ldr	r1, [pc, #68]	@ (800f490 <_dtoa_r+0x588>)
 800f44a:	2000      	movs	r0, #0
 800f44c:	f7f0 ff1c 	bl	8000288 <__aeabi_dsub>
 800f450:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f454:	f7f1 fb42 	bl	8000adc <__aeabi_dcmplt>
 800f458:	2800      	cmp	r0, #0
 800f45a:	f040 80b4 	bne.w	800f5c6 <_dtoa_r+0x6be>
 800f45e:	42a6      	cmp	r6, r4
 800f460:	f43f af70 	beq.w	800f344 <_dtoa_r+0x43c>
 800f464:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f468:	4b0a      	ldr	r3, [pc, #40]	@ (800f494 <_dtoa_r+0x58c>)
 800f46a:	2200      	movs	r2, #0
 800f46c:	f7f1 f8c4 	bl	80005f8 <__aeabi_dmul>
 800f470:	4b08      	ldr	r3, [pc, #32]	@ (800f494 <_dtoa_r+0x58c>)
 800f472:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f476:	2200      	movs	r2, #0
 800f478:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f47c:	f7f1 f8bc 	bl	80005f8 <__aeabi_dmul>
 800f480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f484:	e7c4      	b.n	800f410 <_dtoa_r+0x508>
 800f486:	bf00      	nop
 800f488:	08012c08 	.word	0x08012c08
 800f48c:	08012be0 	.word	0x08012be0
 800f490:	3ff00000 	.word	0x3ff00000
 800f494:	40240000 	.word	0x40240000
 800f498:	401c0000 	.word	0x401c0000
 800f49c:	40140000 	.word	0x40140000
 800f4a0:	3fe00000 	.word	0x3fe00000
 800f4a4:	4631      	mov	r1, r6
 800f4a6:	4628      	mov	r0, r5
 800f4a8:	f7f1 f8a6 	bl	80005f8 <__aeabi_dmul>
 800f4ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f4b0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f4b2:	4656      	mov	r6, sl
 800f4b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f4b8:	f7f1 fb4e 	bl	8000b58 <__aeabi_d2iz>
 800f4bc:	4605      	mov	r5, r0
 800f4be:	f7f1 f831 	bl	8000524 <__aeabi_i2d>
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	460b      	mov	r3, r1
 800f4c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f4ca:	f7f0 fedd 	bl	8000288 <__aeabi_dsub>
 800f4ce:	3530      	adds	r5, #48	@ 0x30
 800f4d0:	f806 5b01 	strb.w	r5, [r6], #1
 800f4d4:	4602      	mov	r2, r0
 800f4d6:	460b      	mov	r3, r1
 800f4d8:	42a6      	cmp	r6, r4
 800f4da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f4de:	f04f 0200 	mov.w	r2, #0
 800f4e2:	d124      	bne.n	800f52e <_dtoa_r+0x626>
 800f4e4:	4baf      	ldr	r3, [pc, #700]	@ (800f7a4 <_dtoa_r+0x89c>)
 800f4e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f4ea:	f7f0 fecf 	bl	800028c <__adddf3>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f4f6:	f7f1 fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	d163      	bne.n	800f5c6 <_dtoa_r+0x6be>
 800f4fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f502:	49a8      	ldr	r1, [pc, #672]	@ (800f7a4 <_dtoa_r+0x89c>)
 800f504:	2000      	movs	r0, #0
 800f506:	f7f0 febf 	bl	8000288 <__aeabi_dsub>
 800f50a:	4602      	mov	r2, r0
 800f50c:	460b      	mov	r3, r1
 800f50e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f512:	f7f1 fae3 	bl	8000adc <__aeabi_dcmplt>
 800f516:	2800      	cmp	r0, #0
 800f518:	f43f af14 	beq.w	800f344 <_dtoa_r+0x43c>
 800f51c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f51e:	1e73      	subs	r3, r6, #1
 800f520:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f522:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f526:	2b30      	cmp	r3, #48	@ 0x30
 800f528:	d0f8      	beq.n	800f51c <_dtoa_r+0x614>
 800f52a:	4647      	mov	r7, r8
 800f52c:	e03b      	b.n	800f5a6 <_dtoa_r+0x69e>
 800f52e:	4b9e      	ldr	r3, [pc, #632]	@ (800f7a8 <_dtoa_r+0x8a0>)
 800f530:	f7f1 f862 	bl	80005f8 <__aeabi_dmul>
 800f534:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f538:	e7bc      	b.n	800f4b4 <_dtoa_r+0x5ac>
 800f53a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f53e:	4656      	mov	r6, sl
 800f540:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f544:	4620      	mov	r0, r4
 800f546:	4629      	mov	r1, r5
 800f548:	f7f1 f980 	bl	800084c <__aeabi_ddiv>
 800f54c:	f7f1 fb04 	bl	8000b58 <__aeabi_d2iz>
 800f550:	4680      	mov	r8, r0
 800f552:	f7f0 ffe7 	bl	8000524 <__aeabi_i2d>
 800f556:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f55a:	f7f1 f84d 	bl	80005f8 <__aeabi_dmul>
 800f55e:	4602      	mov	r2, r0
 800f560:	460b      	mov	r3, r1
 800f562:	4620      	mov	r0, r4
 800f564:	4629      	mov	r1, r5
 800f566:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f56a:	f7f0 fe8d 	bl	8000288 <__aeabi_dsub>
 800f56e:	f806 4b01 	strb.w	r4, [r6], #1
 800f572:	9d03      	ldr	r5, [sp, #12]
 800f574:	eba6 040a 	sub.w	r4, r6, sl
 800f578:	42a5      	cmp	r5, r4
 800f57a:	4602      	mov	r2, r0
 800f57c:	460b      	mov	r3, r1
 800f57e:	d133      	bne.n	800f5e8 <_dtoa_r+0x6e0>
 800f580:	f7f0 fe84 	bl	800028c <__adddf3>
 800f584:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f588:	4604      	mov	r4, r0
 800f58a:	460d      	mov	r5, r1
 800f58c:	f7f1 fac4 	bl	8000b18 <__aeabi_dcmpgt>
 800f590:	b9c0      	cbnz	r0, 800f5c4 <_dtoa_r+0x6bc>
 800f592:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f596:	4620      	mov	r0, r4
 800f598:	4629      	mov	r1, r5
 800f59a:	f7f1 fa95 	bl	8000ac8 <__aeabi_dcmpeq>
 800f59e:	b110      	cbz	r0, 800f5a6 <_dtoa_r+0x69e>
 800f5a0:	f018 0f01 	tst.w	r8, #1
 800f5a4:	d10e      	bne.n	800f5c4 <_dtoa_r+0x6bc>
 800f5a6:	9902      	ldr	r1, [sp, #8]
 800f5a8:	4648      	mov	r0, r9
 800f5aa:	f000 fbbd 	bl	800fd28 <_Bfree>
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	7033      	strb	r3, [r6, #0]
 800f5b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f5b4:	3701      	adds	r7, #1
 800f5b6:	601f      	str	r7, [r3, #0]
 800f5b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	f000 824b 	beq.w	800fa56 <_dtoa_r+0xb4e>
 800f5c0:	601e      	str	r6, [r3, #0]
 800f5c2:	e248      	b.n	800fa56 <_dtoa_r+0xb4e>
 800f5c4:	46b8      	mov	r8, r7
 800f5c6:	4633      	mov	r3, r6
 800f5c8:	461e      	mov	r6, r3
 800f5ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f5ce:	2a39      	cmp	r2, #57	@ 0x39
 800f5d0:	d106      	bne.n	800f5e0 <_dtoa_r+0x6d8>
 800f5d2:	459a      	cmp	sl, r3
 800f5d4:	d1f8      	bne.n	800f5c8 <_dtoa_r+0x6c0>
 800f5d6:	2230      	movs	r2, #48	@ 0x30
 800f5d8:	f108 0801 	add.w	r8, r8, #1
 800f5dc:	f88a 2000 	strb.w	r2, [sl]
 800f5e0:	781a      	ldrb	r2, [r3, #0]
 800f5e2:	3201      	adds	r2, #1
 800f5e4:	701a      	strb	r2, [r3, #0]
 800f5e6:	e7a0      	b.n	800f52a <_dtoa_r+0x622>
 800f5e8:	4b6f      	ldr	r3, [pc, #444]	@ (800f7a8 <_dtoa_r+0x8a0>)
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f7f1 f804 	bl	80005f8 <__aeabi_dmul>
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	4604      	mov	r4, r0
 800f5f6:	460d      	mov	r5, r1
 800f5f8:	f7f1 fa66 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	d09f      	beq.n	800f540 <_dtoa_r+0x638>
 800f600:	e7d1      	b.n	800f5a6 <_dtoa_r+0x69e>
 800f602:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f604:	2a00      	cmp	r2, #0
 800f606:	f000 80ea 	beq.w	800f7de <_dtoa_r+0x8d6>
 800f60a:	9a07      	ldr	r2, [sp, #28]
 800f60c:	2a01      	cmp	r2, #1
 800f60e:	f300 80cd 	bgt.w	800f7ac <_dtoa_r+0x8a4>
 800f612:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f614:	2a00      	cmp	r2, #0
 800f616:	f000 80c1 	beq.w	800f79c <_dtoa_r+0x894>
 800f61a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f61e:	9c08      	ldr	r4, [sp, #32]
 800f620:	9e00      	ldr	r6, [sp, #0]
 800f622:	9a00      	ldr	r2, [sp, #0]
 800f624:	441a      	add	r2, r3
 800f626:	9200      	str	r2, [sp, #0]
 800f628:	9a06      	ldr	r2, [sp, #24]
 800f62a:	2101      	movs	r1, #1
 800f62c:	441a      	add	r2, r3
 800f62e:	4648      	mov	r0, r9
 800f630:	9206      	str	r2, [sp, #24]
 800f632:	f000 fc2d 	bl	800fe90 <__i2b>
 800f636:	4605      	mov	r5, r0
 800f638:	b166      	cbz	r6, 800f654 <_dtoa_r+0x74c>
 800f63a:	9b06      	ldr	r3, [sp, #24]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	dd09      	ble.n	800f654 <_dtoa_r+0x74c>
 800f640:	42b3      	cmp	r3, r6
 800f642:	9a00      	ldr	r2, [sp, #0]
 800f644:	bfa8      	it	ge
 800f646:	4633      	movge	r3, r6
 800f648:	1ad2      	subs	r2, r2, r3
 800f64a:	9200      	str	r2, [sp, #0]
 800f64c:	9a06      	ldr	r2, [sp, #24]
 800f64e:	1af6      	subs	r6, r6, r3
 800f650:	1ad3      	subs	r3, r2, r3
 800f652:	9306      	str	r3, [sp, #24]
 800f654:	9b08      	ldr	r3, [sp, #32]
 800f656:	b30b      	cbz	r3, 800f69c <_dtoa_r+0x794>
 800f658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f000 80c6 	beq.w	800f7ec <_dtoa_r+0x8e4>
 800f660:	2c00      	cmp	r4, #0
 800f662:	f000 80c0 	beq.w	800f7e6 <_dtoa_r+0x8de>
 800f666:	4629      	mov	r1, r5
 800f668:	4622      	mov	r2, r4
 800f66a:	4648      	mov	r0, r9
 800f66c:	f000 fcc8 	bl	8010000 <__pow5mult>
 800f670:	9a02      	ldr	r2, [sp, #8]
 800f672:	4601      	mov	r1, r0
 800f674:	4605      	mov	r5, r0
 800f676:	4648      	mov	r0, r9
 800f678:	f000 fc20 	bl	800febc <__multiply>
 800f67c:	9902      	ldr	r1, [sp, #8]
 800f67e:	4680      	mov	r8, r0
 800f680:	4648      	mov	r0, r9
 800f682:	f000 fb51 	bl	800fd28 <_Bfree>
 800f686:	9b08      	ldr	r3, [sp, #32]
 800f688:	1b1b      	subs	r3, r3, r4
 800f68a:	9308      	str	r3, [sp, #32]
 800f68c:	f000 80b1 	beq.w	800f7f2 <_dtoa_r+0x8ea>
 800f690:	9a08      	ldr	r2, [sp, #32]
 800f692:	4641      	mov	r1, r8
 800f694:	4648      	mov	r0, r9
 800f696:	f000 fcb3 	bl	8010000 <__pow5mult>
 800f69a:	9002      	str	r0, [sp, #8]
 800f69c:	2101      	movs	r1, #1
 800f69e:	4648      	mov	r0, r9
 800f6a0:	f000 fbf6 	bl	800fe90 <__i2b>
 800f6a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	f000 81d8 	beq.w	800fa5e <_dtoa_r+0xb56>
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	4601      	mov	r1, r0
 800f6b2:	4648      	mov	r0, r9
 800f6b4:	f000 fca4 	bl	8010000 <__pow5mult>
 800f6b8:	9b07      	ldr	r3, [sp, #28]
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	4604      	mov	r4, r0
 800f6be:	f300 809f 	bgt.w	800f800 <_dtoa_r+0x8f8>
 800f6c2:	9b04      	ldr	r3, [sp, #16]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	f040 8097 	bne.w	800f7f8 <_dtoa_r+0x8f0>
 800f6ca:	9b05      	ldr	r3, [sp, #20]
 800f6cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f040 8093 	bne.w	800f7fc <_dtoa_r+0x8f4>
 800f6d6:	9b05      	ldr	r3, [sp, #20]
 800f6d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f6dc:	0d1b      	lsrs	r3, r3, #20
 800f6de:	051b      	lsls	r3, r3, #20
 800f6e0:	b133      	cbz	r3, 800f6f0 <_dtoa_r+0x7e8>
 800f6e2:	9b00      	ldr	r3, [sp, #0]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	9300      	str	r3, [sp, #0]
 800f6e8:	9b06      	ldr	r3, [sp, #24]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	9306      	str	r3, [sp, #24]
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	9308      	str	r3, [sp, #32]
 800f6f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	f000 81b8 	beq.w	800fa6a <_dtoa_r+0xb62>
 800f6fa:	6923      	ldr	r3, [r4, #16]
 800f6fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f700:	6918      	ldr	r0, [r3, #16]
 800f702:	f000 fb79 	bl	800fdf8 <__hi0bits>
 800f706:	f1c0 0020 	rsb	r0, r0, #32
 800f70a:	9b06      	ldr	r3, [sp, #24]
 800f70c:	4418      	add	r0, r3
 800f70e:	f010 001f 	ands.w	r0, r0, #31
 800f712:	f000 8082 	beq.w	800f81a <_dtoa_r+0x912>
 800f716:	f1c0 0320 	rsb	r3, r0, #32
 800f71a:	2b04      	cmp	r3, #4
 800f71c:	dd73      	ble.n	800f806 <_dtoa_r+0x8fe>
 800f71e:	9b00      	ldr	r3, [sp, #0]
 800f720:	f1c0 001c 	rsb	r0, r0, #28
 800f724:	4403      	add	r3, r0
 800f726:	9300      	str	r3, [sp, #0]
 800f728:	9b06      	ldr	r3, [sp, #24]
 800f72a:	4403      	add	r3, r0
 800f72c:	4406      	add	r6, r0
 800f72e:	9306      	str	r3, [sp, #24]
 800f730:	9b00      	ldr	r3, [sp, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	dd05      	ble.n	800f742 <_dtoa_r+0x83a>
 800f736:	9902      	ldr	r1, [sp, #8]
 800f738:	461a      	mov	r2, r3
 800f73a:	4648      	mov	r0, r9
 800f73c:	f000 fcba 	bl	80100b4 <__lshift>
 800f740:	9002      	str	r0, [sp, #8]
 800f742:	9b06      	ldr	r3, [sp, #24]
 800f744:	2b00      	cmp	r3, #0
 800f746:	dd05      	ble.n	800f754 <_dtoa_r+0x84c>
 800f748:	4621      	mov	r1, r4
 800f74a:	461a      	mov	r2, r3
 800f74c:	4648      	mov	r0, r9
 800f74e:	f000 fcb1 	bl	80100b4 <__lshift>
 800f752:	4604      	mov	r4, r0
 800f754:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f756:	2b00      	cmp	r3, #0
 800f758:	d061      	beq.n	800f81e <_dtoa_r+0x916>
 800f75a:	9802      	ldr	r0, [sp, #8]
 800f75c:	4621      	mov	r1, r4
 800f75e:	f000 fd15 	bl	801018c <__mcmp>
 800f762:	2800      	cmp	r0, #0
 800f764:	da5b      	bge.n	800f81e <_dtoa_r+0x916>
 800f766:	2300      	movs	r3, #0
 800f768:	9902      	ldr	r1, [sp, #8]
 800f76a:	220a      	movs	r2, #10
 800f76c:	4648      	mov	r0, r9
 800f76e:	f000 fafd 	bl	800fd6c <__multadd>
 800f772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f774:	9002      	str	r0, [sp, #8]
 800f776:	f107 38ff 	add.w	r8, r7, #4294967295
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	f000 8177 	beq.w	800fa6e <_dtoa_r+0xb66>
 800f780:	4629      	mov	r1, r5
 800f782:	2300      	movs	r3, #0
 800f784:	220a      	movs	r2, #10
 800f786:	4648      	mov	r0, r9
 800f788:	f000 faf0 	bl	800fd6c <__multadd>
 800f78c:	f1bb 0f00 	cmp.w	fp, #0
 800f790:	4605      	mov	r5, r0
 800f792:	dc6f      	bgt.n	800f874 <_dtoa_r+0x96c>
 800f794:	9b07      	ldr	r3, [sp, #28]
 800f796:	2b02      	cmp	r3, #2
 800f798:	dc49      	bgt.n	800f82e <_dtoa_r+0x926>
 800f79a:	e06b      	b.n	800f874 <_dtoa_r+0x96c>
 800f79c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f79e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f7a2:	e73c      	b.n	800f61e <_dtoa_r+0x716>
 800f7a4:	3fe00000 	.word	0x3fe00000
 800f7a8:	40240000 	.word	0x40240000
 800f7ac:	9b03      	ldr	r3, [sp, #12]
 800f7ae:	1e5c      	subs	r4, r3, #1
 800f7b0:	9b08      	ldr	r3, [sp, #32]
 800f7b2:	42a3      	cmp	r3, r4
 800f7b4:	db09      	blt.n	800f7ca <_dtoa_r+0x8c2>
 800f7b6:	1b1c      	subs	r4, r3, r4
 800f7b8:	9b03      	ldr	r3, [sp, #12]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	f6bf af30 	bge.w	800f620 <_dtoa_r+0x718>
 800f7c0:	9b00      	ldr	r3, [sp, #0]
 800f7c2:	9a03      	ldr	r2, [sp, #12]
 800f7c4:	1a9e      	subs	r6, r3, r2
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	e72b      	b.n	800f622 <_dtoa_r+0x71a>
 800f7ca:	9b08      	ldr	r3, [sp, #32]
 800f7cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f7ce:	9408      	str	r4, [sp, #32]
 800f7d0:	1ae3      	subs	r3, r4, r3
 800f7d2:	441a      	add	r2, r3
 800f7d4:	9e00      	ldr	r6, [sp, #0]
 800f7d6:	9b03      	ldr	r3, [sp, #12]
 800f7d8:	920d      	str	r2, [sp, #52]	@ 0x34
 800f7da:	2400      	movs	r4, #0
 800f7dc:	e721      	b.n	800f622 <_dtoa_r+0x71a>
 800f7de:	9c08      	ldr	r4, [sp, #32]
 800f7e0:	9e00      	ldr	r6, [sp, #0]
 800f7e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f7e4:	e728      	b.n	800f638 <_dtoa_r+0x730>
 800f7e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f7ea:	e751      	b.n	800f690 <_dtoa_r+0x788>
 800f7ec:	9a08      	ldr	r2, [sp, #32]
 800f7ee:	9902      	ldr	r1, [sp, #8]
 800f7f0:	e750      	b.n	800f694 <_dtoa_r+0x78c>
 800f7f2:	f8cd 8008 	str.w	r8, [sp, #8]
 800f7f6:	e751      	b.n	800f69c <_dtoa_r+0x794>
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	e779      	b.n	800f6f0 <_dtoa_r+0x7e8>
 800f7fc:	9b04      	ldr	r3, [sp, #16]
 800f7fe:	e777      	b.n	800f6f0 <_dtoa_r+0x7e8>
 800f800:	2300      	movs	r3, #0
 800f802:	9308      	str	r3, [sp, #32]
 800f804:	e779      	b.n	800f6fa <_dtoa_r+0x7f2>
 800f806:	d093      	beq.n	800f730 <_dtoa_r+0x828>
 800f808:	9a00      	ldr	r2, [sp, #0]
 800f80a:	331c      	adds	r3, #28
 800f80c:	441a      	add	r2, r3
 800f80e:	9200      	str	r2, [sp, #0]
 800f810:	9a06      	ldr	r2, [sp, #24]
 800f812:	441a      	add	r2, r3
 800f814:	441e      	add	r6, r3
 800f816:	9206      	str	r2, [sp, #24]
 800f818:	e78a      	b.n	800f730 <_dtoa_r+0x828>
 800f81a:	4603      	mov	r3, r0
 800f81c:	e7f4      	b.n	800f808 <_dtoa_r+0x900>
 800f81e:	9b03      	ldr	r3, [sp, #12]
 800f820:	2b00      	cmp	r3, #0
 800f822:	46b8      	mov	r8, r7
 800f824:	dc20      	bgt.n	800f868 <_dtoa_r+0x960>
 800f826:	469b      	mov	fp, r3
 800f828:	9b07      	ldr	r3, [sp, #28]
 800f82a:	2b02      	cmp	r3, #2
 800f82c:	dd1e      	ble.n	800f86c <_dtoa_r+0x964>
 800f82e:	f1bb 0f00 	cmp.w	fp, #0
 800f832:	f47f adb1 	bne.w	800f398 <_dtoa_r+0x490>
 800f836:	4621      	mov	r1, r4
 800f838:	465b      	mov	r3, fp
 800f83a:	2205      	movs	r2, #5
 800f83c:	4648      	mov	r0, r9
 800f83e:	f000 fa95 	bl	800fd6c <__multadd>
 800f842:	4601      	mov	r1, r0
 800f844:	4604      	mov	r4, r0
 800f846:	9802      	ldr	r0, [sp, #8]
 800f848:	f000 fca0 	bl	801018c <__mcmp>
 800f84c:	2800      	cmp	r0, #0
 800f84e:	f77f ada3 	ble.w	800f398 <_dtoa_r+0x490>
 800f852:	4656      	mov	r6, sl
 800f854:	2331      	movs	r3, #49	@ 0x31
 800f856:	f806 3b01 	strb.w	r3, [r6], #1
 800f85a:	f108 0801 	add.w	r8, r8, #1
 800f85e:	e59f      	b.n	800f3a0 <_dtoa_r+0x498>
 800f860:	9c03      	ldr	r4, [sp, #12]
 800f862:	46b8      	mov	r8, r7
 800f864:	4625      	mov	r5, r4
 800f866:	e7f4      	b.n	800f852 <_dtoa_r+0x94a>
 800f868:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f86c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f86e:	2b00      	cmp	r3, #0
 800f870:	f000 8101 	beq.w	800fa76 <_dtoa_r+0xb6e>
 800f874:	2e00      	cmp	r6, #0
 800f876:	dd05      	ble.n	800f884 <_dtoa_r+0x97c>
 800f878:	4629      	mov	r1, r5
 800f87a:	4632      	mov	r2, r6
 800f87c:	4648      	mov	r0, r9
 800f87e:	f000 fc19 	bl	80100b4 <__lshift>
 800f882:	4605      	mov	r5, r0
 800f884:	9b08      	ldr	r3, [sp, #32]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d05c      	beq.n	800f944 <_dtoa_r+0xa3c>
 800f88a:	6869      	ldr	r1, [r5, #4]
 800f88c:	4648      	mov	r0, r9
 800f88e:	f000 fa0b 	bl	800fca8 <_Balloc>
 800f892:	4606      	mov	r6, r0
 800f894:	b928      	cbnz	r0, 800f8a2 <_dtoa_r+0x99a>
 800f896:	4b82      	ldr	r3, [pc, #520]	@ (800faa0 <_dtoa_r+0xb98>)
 800f898:	4602      	mov	r2, r0
 800f89a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f89e:	f7ff bb4a 	b.w	800ef36 <_dtoa_r+0x2e>
 800f8a2:	692a      	ldr	r2, [r5, #16]
 800f8a4:	3202      	adds	r2, #2
 800f8a6:	0092      	lsls	r2, r2, #2
 800f8a8:	f105 010c 	add.w	r1, r5, #12
 800f8ac:	300c      	adds	r0, #12
 800f8ae:	f000 fff7 	bl	80108a0 <memcpy>
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	4631      	mov	r1, r6
 800f8b6:	4648      	mov	r0, r9
 800f8b8:	f000 fbfc 	bl	80100b4 <__lshift>
 800f8bc:	f10a 0301 	add.w	r3, sl, #1
 800f8c0:	9300      	str	r3, [sp, #0]
 800f8c2:	eb0a 030b 	add.w	r3, sl, fp
 800f8c6:	9308      	str	r3, [sp, #32]
 800f8c8:	9b04      	ldr	r3, [sp, #16]
 800f8ca:	f003 0301 	and.w	r3, r3, #1
 800f8ce:	462f      	mov	r7, r5
 800f8d0:	9306      	str	r3, [sp, #24]
 800f8d2:	4605      	mov	r5, r0
 800f8d4:	9b00      	ldr	r3, [sp, #0]
 800f8d6:	9802      	ldr	r0, [sp, #8]
 800f8d8:	4621      	mov	r1, r4
 800f8da:	f103 3bff 	add.w	fp, r3, #4294967295
 800f8de:	f7ff fa8a 	bl	800edf6 <quorem>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	3330      	adds	r3, #48	@ 0x30
 800f8e6:	9003      	str	r0, [sp, #12]
 800f8e8:	4639      	mov	r1, r7
 800f8ea:	9802      	ldr	r0, [sp, #8]
 800f8ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8ee:	f000 fc4d 	bl	801018c <__mcmp>
 800f8f2:	462a      	mov	r2, r5
 800f8f4:	9004      	str	r0, [sp, #16]
 800f8f6:	4621      	mov	r1, r4
 800f8f8:	4648      	mov	r0, r9
 800f8fa:	f000 fc63 	bl	80101c4 <__mdiff>
 800f8fe:	68c2      	ldr	r2, [r0, #12]
 800f900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f902:	4606      	mov	r6, r0
 800f904:	bb02      	cbnz	r2, 800f948 <_dtoa_r+0xa40>
 800f906:	4601      	mov	r1, r0
 800f908:	9802      	ldr	r0, [sp, #8]
 800f90a:	f000 fc3f 	bl	801018c <__mcmp>
 800f90e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f910:	4602      	mov	r2, r0
 800f912:	4631      	mov	r1, r6
 800f914:	4648      	mov	r0, r9
 800f916:	920c      	str	r2, [sp, #48]	@ 0x30
 800f918:	9309      	str	r3, [sp, #36]	@ 0x24
 800f91a:	f000 fa05 	bl	800fd28 <_Bfree>
 800f91e:	9b07      	ldr	r3, [sp, #28]
 800f920:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f922:	9e00      	ldr	r6, [sp, #0]
 800f924:	ea42 0103 	orr.w	r1, r2, r3
 800f928:	9b06      	ldr	r3, [sp, #24]
 800f92a:	4319      	orrs	r1, r3
 800f92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f92e:	d10d      	bne.n	800f94c <_dtoa_r+0xa44>
 800f930:	2b39      	cmp	r3, #57	@ 0x39
 800f932:	d027      	beq.n	800f984 <_dtoa_r+0xa7c>
 800f934:	9a04      	ldr	r2, [sp, #16]
 800f936:	2a00      	cmp	r2, #0
 800f938:	dd01      	ble.n	800f93e <_dtoa_r+0xa36>
 800f93a:	9b03      	ldr	r3, [sp, #12]
 800f93c:	3331      	adds	r3, #49	@ 0x31
 800f93e:	f88b 3000 	strb.w	r3, [fp]
 800f942:	e52e      	b.n	800f3a2 <_dtoa_r+0x49a>
 800f944:	4628      	mov	r0, r5
 800f946:	e7b9      	b.n	800f8bc <_dtoa_r+0x9b4>
 800f948:	2201      	movs	r2, #1
 800f94a:	e7e2      	b.n	800f912 <_dtoa_r+0xa0a>
 800f94c:	9904      	ldr	r1, [sp, #16]
 800f94e:	2900      	cmp	r1, #0
 800f950:	db04      	blt.n	800f95c <_dtoa_r+0xa54>
 800f952:	9807      	ldr	r0, [sp, #28]
 800f954:	4301      	orrs	r1, r0
 800f956:	9806      	ldr	r0, [sp, #24]
 800f958:	4301      	orrs	r1, r0
 800f95a:	d120      	bne.n	800f99e <_dtoa_r+0xa96>
 800f95c:	2a00      	cmp	r2, #0
 800f95e:	ddee      	ble.n	800f93e <_dtoa_r+0xa36>
 800f960:	9902      	ldr	r1, [sp, #8]
 800f962:	9300      	str	r3, [sp, #0]
 800f964:	2201      	movs	r2, #1
 800f966:	4648      	mov	r0, r9
 800f968:	f000 fba4 	bl	80100b4 <__lshift>
 800f96c:	4621      	mov	r1, r4
 800f96e:	9002      	str	r0, [sp, #8]
 800f970:	f000 fc0c 	bl	801018c <__mcmp>
 800f974:	2800      	cmp	r0, #0
 800f976:	9b00      	ldr	r3, [sp, #0]
 800f978:	dc02      	bgt.n	800f980 <_dtoa_r+0xa78>
 800f97a:	d1e0      	bne.n	800f93e <_dtoa_r+0xa36>
 800f97c:	07da      	lsls	r2, r3, #31
 800f97e:	d5de      	bpl.n	800f93e <_dtoa_r+0xa36>
 800f980:	2b39      	cmp	r3, #57	@ 0x39
 800f982:	d1da      	bne.n	800f93a <_dtoa_r+0xa32>
 800f984:	2339      	movs	r3, #57	@ 0x39
 800f986:	f88b 3000 	strb.w	r3, [fp]
 800f98a:	4633      	mov	r3, r6
 800f98c:	461e      	mov	r6, r3
 800f98e:	3b01      	subs	r3, #1
 800f990:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f994:	2a39      	cmp	r2, #57	@ 0x39
 800f996:	d04e      	beq.n	800fa36 <_dtoa_r+0xb2e>
 800f998:	3201      	adds	r2, #1
 800f99a:	701a      	strb	r2, [r3, #0]
 800f99c:	e501      	b.n	800f3a2 <_dtoa_r+0x49a>
 800f99e:	2a00      	cmp	r2, #0
 800f9a0:	dd03      	ble.n	800f9aa <_dtoa_r+0xaa2>
 800f9a2:	2b39      	cmp	r3, #57	@ 0x39
 800f9a4:	d0ee      	beq.n	800f984 <_dtoa_r+0xa7c>
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	e7c9      	b.n	800f93e <_dtoa_r+0xa36>
 800f9aa:	9a00      	ldr	r2, [sp, #0]
 800f9ac:	9908      	ldr	r1, [sp, #32]
 800f9ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f9b2:	428a      	cmp	r2, r1
 800f9b4:	d028      	beq.n	800fa08 <_dtoa_r+0xb00>
 800f9b6:	9902      	ldr	r1, [sp, #8]
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	220a      	movs	r2, #10
 800f9bc:	4648      	mov	r0, r9
 800f9be:	f000 f9d5 	bl	800fd6c <__multadd>
 800f9c2:	42af      	cmp	r7, r5
 800f9c4:	9002      	str	r0, [sp, #8]
 800f9c6:	f04f 0300 	mov.w	r3, #0
 800f9ca:	f04f 020a 	mov.w	r2, #10
 800f9ce:	4639      	mov	r1, r7
 800f9d0:	4648      	mov	r0, r9
 800f9d2:	d107      	bne.n	800f9e4 <_dtoa_r+0xadc>
 800f9d4:	f000 f9ca 	bl	800fd6c <__multadd>
 800f9d8:	4607      	mov	r7, r0
 800f9da:	4605      	mov	r5, r0
 800f9dc:	9b00      	ldr	r3, [sp, #0]
 800f9de:	3301      	adds	r3, #1
 800f9e0:	9300      	str	r3, [sp, #0]
 800f9e2:	e777      	b.n	800f8d4 <_dtoa_r+0x9cc>
 800f9e4:	f000 f9c2 	bl	800fd6c <__multadd>
 800f9e8:	4629      	mov	r1, r5
 800f9ea:	4607      	mov	r7, r0
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	220a      	movs	r2, #10
 800f9f0:	4648      	mov	r0, r9
 800f9f2:	f000 f9bb 	bl	800fd6c <__multadd>
 800f9f6:	4605      	mov	r5, r0
 800f9f8:	e7f0      	b.n	800f9dc <_dtoa_r+0xad4>
 800f9fa:	f1bb 0f00 	cmp.w	fp, #0
 800f9fe:	bfcc      	ite	gt
 800fa00:	465e      	movgt	r6, fp
 800fa02:	2601      	movle	r6, #1
 800fa04:	4456      	add	r6, sl
 800fa06:	2700      	movs	r7, #0
 800fa08:	9902      	ldr	r1, [sp, #8]
 800fa0a:	9300      	str	r3, [sp, #0]
 800fa0c:	2201      	movs	r2, #1
 800fa0e:	4648      	mov	r0, r9
 800fa10:	f000 fb50 	bl	80100b4 <__lshift>
 800fa14:	4621      	mov	r1, r4
 800fa16:	9002      	str	r0, [sp, #8]
 800fa18:	f000 fbb8 	bl	801018c <__mcmp>
 800fa1c:	2800      	cmp	r0, #0
 800fa1e:	dcb4      	bgt.n	800f98a <_dtoa_r+0xa82>
 800fa20:	d102      	bne.n	800fa28 <_dtoa_r+0xb20>
 800fa22:	9b00      	ldr	r3, [sp, #0]
 800fa24:	07db      	lsls	r3, r3, #31
 800fa26:	d4b0      	bmi.n	800f98a <_dtoa_r+0xa82>
 800fa28:	4633      	mov	r3, r6
 800fa2a:	461e      	mov	r6, r3
 800fa2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa30:	2a30      	cmp	r2, #48	@ 0x30
 800fa32:	d0fa      	beq.n	800fa2a <_dtoa_r+0xb22>
 800fa34:	e4b5      	b.n	800f3a2 <_dtoa_r+0x49a>
 800fa36:	459a      	cmp	sl, r3
 800fa38:	d1a8      	bne.n	800f98c <_dtoa_r+0xa84>
 800fa3a:	2331      	movs	r3, #49	@ 0x31
 800fa3c:	f108 0801 	add.w	r8, r8, #1
 800fa40:	f88a 3000 	strb.w	r3, [sl]
 800fa44:	e4ad      	b.n	800f3a2 <_dtoa_r+0x49a>
 800fa46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fa48:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800faa4 <_dtoa_r+0xb9c>
 800fa4c:	b11b      	cbz	r3, 800fa56 <_dtoa_r+0xb4e>
 800fa4e:	f10a 0308 	add.w	r3, sl, #8
 800fa52:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fa54:	6013      	str	r3, [r2, #0]
 800fa56:	4650      	mov	r0, sl
 800fa58:	b017      	add	sp, #92	@ 0x5c
 800fa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa5e:	9b07      	ldr	r3, [sp, #28]
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	f77f ae2e 	ble.w	800f6c2 <_dtoa_r+0x7ba>
 800fa66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa68:	9308      	str	r3, [sp, #32]
 800fa6a:	2001      	movs	r0, #1
 800fa6c:	e64d      	b.n	800f70a <_dtoa_r+0x802>
 800fa6e:	f1bb 0f00 	cmp.w	fp, #0
 800fa72:	f77f aed9 	ble.w	800f828 <_dtoa_r+0x920>
 800fa76:	4656      	mov	r6, sl
 800fa78:	9802      	ldr	r0, [sp, #8]
 800fa7a:	4621      	mov	r1, r4
 800fa7c:	f7ff f9bb 	bl	800edf6 <quorem>
 800fa80:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800fa84:	f806 3b01 	strb.w	r3, [r6], #1
 800fa88:	eba6 020a 	sub.w	r2, r6, sl
 800fa8c:	4593      	cmp	fp, r2
 800fa8e:	ddb4      	ble.n	800f9fa <_dtoa_r+0xaf2>
 800fa90:	9902      	ldr	r1, [sp, #8]
 800fa92:	2300      	movs	r3, #0
 800fa94:	220a      	movs	r2, #10
 800fa96:	4648      	mov	r0, r9
 800fa98:	f000 f968 	bl	800fd6c <__multadd>
 800fa9c:	9002      	str	r0, [sp, #8]
 800fa9e:	e7eb      	b.n	800fa78 <_dtoa_r+0xb70>
 800faa0:	08012b0c 	.word	0x08012b0c
 800faa4:	08012a90 	.word	0x08012a90

0800faa8 <_free_r>:
 800faa8:	b538      	push	{r3, r4, r5, lr}
 800faaa:	4605      	mov	r5, r0
 800faac:	2900      	cmp	r1, #0
 800faae:	d041      	beq.n	800fb34 <_free_r+0x8c>
 800fab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fab4:	1f0c      	subs	r4, r1, #4
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	bfb8      	it	lt
 800faba:	18e4      	addlt	r4, r4, r3
 800fabc:	f000 f8e8 	bl	800fc90 <__malloc_lock>
 800fac0:	4a1d      	ldr	r2, [pc, #116]	@ (800fb38 <_free_r+0x90>)
 800fac2:	6813      	ldr	r3, [r2, #0]
 800fac4:	b933      	cbnz	r3, 800fad4 <_free_r+0x2c>
 800fac6:	6063      	str	r3, [r4, #4]
 800fac8:	6014      	str	r4, [r2, #0]
 800faca:	4628      	mov	r0, r5
 800facc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fad0:	f000 b8e4 	b.w	800fc9c <__malloc_unlock>
 800fad4:	42a3      	cmp	r3, r4
 800fad6:	d908      	bls.n	800faea <_free_r+0x42>
 800fad8:	6820      	ldr	r0, [r4, #0]
 800fada:	1821      	adds	r1, r4, r0
 800fadc:	428b      	cmp	r3, r1
 800fade:	bf01      	itttt	eq
 800fae0:	6819      	ldreq	r1, [r3, #0]
 800fae2:	685b      	ldreq	r3, [r3, #4]
 800fae4:	1809      	addeq	r1, r1, r0
 800fae6:	6021      	streq	r1, [r4, #0]
 800fae8:	e7ed      	b.n	800fac6 <_free_r+0x1e>
 800faea:	461a      	mov	r2, r3
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	b10b      	cbz	r3, 800faf4 <_free_r+0x4c>
 800faf0:	42a3      	cmp	r3, r4
 800faf2:	d9fa      	bls.n	800faea <_free_r+0x42>
 800faf4:	6811      	ldr	r1, [r2, #0]
 800faf6:	1850      	adds	r0, r2, r1
 800faf8:	42a0      	cmp	r0, r4
 800fafa:	d10b      	bne.n	800fb14 <_free_r+0x6c>
 800fafc:	6820      	ldr	r0, [r4, #0]
 800fafe:	4401      	add	r1, r0
 800fb00:	1850      	adds	r0, r2, r1
 800fb02:	4283      	cmp	r3, r0
 800fb04:	6011      	str	r1, [r2, #0]
 800fb06:	d1e0      	bne.n	800faca <_free_r+0x22>
 800fb08:	6818      	ldr	r0, [r3, #0]
 800fb0a:	685b      	ldr	r3, [r3, #4]
 800fb0c:	6053      	str	r3, [r2, #4]
 800fb0e:	4408      	add	r0, r1
 800fb10:	6010      	str	r0, [r2, #0]
 800fb12:	e7da      	b.n	800faca <_free_r+0x22>
 800fb14:	d902      	bls.n	800fb1c <_free_r+0x74>
 800fb16:	230c      	movs	r3, #12
 800fb18:	602b      	str	r3, [r5, #0]
 800fb1a:	e7d6      	b.n	800faca <_free_r+0x22>
 800fb1c:	6820      	ldr	r0, [r4, #0]
 800fb1e:	1821      	adds	r1, r4, r0
 800fb20:	428b      	cmp	r3, r1
 800fb22:	bf04      	itt	eq
 800fb24:	6819      	ldreq	r1, [r3, #0]
 800fb26:	685b      	ldreq	r3, [r3, #4]
 800fb28:	6063      	str	r3, [r4, #4]
 800fb2a:	bf04      	itt	eq
 800fb2c:	1809      	addeq	r1, r1, r0
 800fb2e:	6021      	streq	r1, [r4, #0]
 800fb30:	6054      	str	r4, [r2, #4]
 800fb32:	e7ca      	b.n	800faca <_free_r+0x22>
 800fb34:	bd38      	pop	{r3, r4, r5, pc}
 800fb36:	bf00      	nop
 800fb38:	20000b80 	.word	0x20000b80

0800fb3c <malloc>:
 800fb3c:	4b02      	ldr	r3, [pc, #8]	@ (800fb48 <malloc+0xc>)
 800fb3e:	4601      	mov	r1, r0
 800fb40:	6818      	ldr	r0, [r3, #0]
 800fb42:	f000 b825 	b.w	800fb90 <_malloc_r>
 800fb46:	bf00      	nop
 800fb48:	200000ec 	.word	0x200000ec

0800fb4c <sbrk_aligned>:
 800fb4c:	b570      	push	{r4, r5, r6, lr}
 800fb4e:	4e0f      	ldr	r6, [pc, #60]	@ (800fb8c <sbrk_aligned+0x40>)
 800fb50:	460c      	mov	r4, r1
 800fb52:	6831      	ldr	r1, [r6, #0]
 800fb54:	4605      	mov	r5, r0
 800fb56:	b911      	cbnz	r1, 800fb5e <sbrk_aligned+0x12>
 800fb58:	f000 fe92 	bl	8010880 <_sbrk_r>
 800fb5c:	6030      	str	r0, [r6, #0]
 800fb5e:	4621      	mov	r1, r4
 800fb60:	4628      	mov	r0, r5
 800fb62:	f000 fe8d 	bl	8010880 <_sbrk_r>
 800fb66:	1c43      	adds	r3, r0, #1
 800fb68:	d103      	bne.n	800fb72 <sbrk_aligned+0x26>
 800fb6a:	f04f 34ff 	mov.w	r4, #4294967295
 800fb6e:	4620      	mov	r0, r4
 800fb70:	bd70      	pop	{r4, r5, r6, pc}
 800fb72:	1cc4      	adds	r4, r0, #3
 800fb74:	f024 0403 	bic.w	r4, r4, #3
 800fb78:	42a0      	cmp	r0, r4
 800fb7a:	d0f8      	beq.n	800fb6e <sbrk_aligned+0x22>
 800fb7c:	1a21      	subs	r1, r4, r0
 800fb7e:	4628      	mov	r0, r5
 800fb80:	f000 fe7e 	bl	8010880 <_sbrk_r>
 800fb84:	3001      	adds	r0, #1
 800fb86:	d1f2      	bne.n	800fb6e <sbrk_aligned+0x22>
 800fb88:	e7ef      	b.n	800fb6a <sbrk_aligned+0x1e>
 800fb8a:	bf00      	nop
 800fb8c:	20000b7c 	.word	0x20000b7c

0800fb90 <_malloc_r>:
 800fb90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb94:	1ccd      	adds	r5, r1, #3
 800fb96:	f025 0503 	bic.w	r5, r5, #3
 800fb9a:	3508      	adds	r5, #8
 800fb9c:	2d0c      	cmp	r5, #12
 800fb9e:	bf38      	it	cc
 800fba0:	250c      	movcc	r5, #12
 800fba2:	2d00      	cmp	r5, #0
 800fba4:	4606      	mov	r6, r0
 800fba6:	db01      	blt.n	800fbac <_malloc_r+0x1c>
 800fba8:	42a9      	cmp	r1, r5
 800fbaa:	d904      	bls.n	800fbb6 <_malloc_r+0x26>
 800fbac:	230c      	movs	r3, #12
 800fbae:	6033      	str	r3, [r6, #0]
 800fbb0:	2000      	movs	r0, #0
 800fbb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fc8c <_malloc_r+0xfc>
 800fbba:	f000 f869 	bl	800fc90 <__malloc_lock>
 800fbbe:	f8d8 3000 	ldr.w	r3, [r8]
 800fbc2:	461c      	mov	r4, r3
 800fbc4:	bb44      	cbnz	r4, 800fc18 <_malloc_r+0x88>
 800fbc6:	4629      	mov	r1, r5
 800fbc8:	4630      	mov	r0, r6
 800fbca:	f7ff ffbf 	bl	800fb4c <sbrk_aligned>
 800fbce:	1c43      	adds	r3, r0, #1
 800fbd0:	4604      	mov	r4, r0
 800fbd2:	d158      	bne.n	800fc86 <_malloc_r+0xf6>
 800fbd4:	f8d8 4000 	ldr.w	r4, [r8]
 800fbd8:	4627      	mov	r7, r4
 800fbda:	2f00      	cmp	r7, #0
 800fbdc:	d143      	bne.n	800fc66 <_malloc_r+0xd6>
 800fbde:	2c00      	cmp	r4, #0
 800fbe0:	d04b      	beq.n	800fc7a <_malloc_r+0xea>
 800fbe2:	6823      	ldr	r3, [r4, #0]
 800fbe4:	4639      	mov	r1, r7
 800fbe6:	4630      	mov	r0, r6
 800fbe8:	eb04 0903 	add.w	r9, r4, r3
 800fbec:	f000 fe48 	bl	8010880 <_sbrk_r>
 800fbf0:	4581      	cmp	r9, r0
 800fbf2:	d142      	bne.n	800fc7a <_malloc_r+0xea>
 800fbf4:	6821      	ldr	r1, [r4, #0]
 800fbf6:	1a6d      	subs	r5, r5, r1
 800fbf8:	4629      	mov	r1, r5
 800fbfa:	4630      	mov	r0, r6
 800fbfc:	f7ff ffa6 	bl	800fb4c <sbrk_aligned>
 800fc00:	3001      	adds	r0, #1
 800fc02:	d03a      	beq.n	800fc7a <_malloc_r+0xea>
 800fc04:	6823      	ldr	r3, [r4, #0]
 800fc06:	442b      	add	r3, r5
 800fc08:	6023      	str	r3, [r4, #0]
 800fc0a:	f8d8 3000 	ldr.w	r3, [r8]
 800fc0e:	685a      	ldr	r2, [r3, #4]
 800fc10:	bb62      	cbnz	r2, 800fc6c <_malloc_r+0xdc>
 800fc12:	f8c8 7000 	str.w	r7, [r8]
 800fc16:	e00f      	b.n	800fc38 <_malloc_r+0xa8>
 800fc18:	6822      	ldr	r2, [r4, #0]
 800fc1a:	1b52      	subs	r2, r2, r5
 800fc1c:	d420      	bmi.n	800fc60 <_malloc_r+0xd0>
 800fc1e:	2a0b      	cmp	r2, #11
 800fc20:	d917      	bls.n	800fc52 <_malloc_r+0xc2>
 800fc22:	1961      	adds	r1, r4, r5
 800fc24:	42a3      	cmp	r3, r4
 800fc26:	6025      	str	r5, [r4, #0]
 800fc28:	bf18      	it	ne
 800fc2a:	6059      	strne	r1, [r3, #4]
 800fc2c:	6863      	ldr	r3, [r4, #4]
 800fc2e:	bf08      	it	eq
 800fc30:	f8c8 1000 	streq.w	r1, [r8]
 800fc34:	5162      	str	r2, [r4, r5]
 800fc36:	604b      	str	r3, [r1, #4]
 800fc38:	4630      	mov	r0, r6
 800fc3a:	f000 f82f 	bl	800fc9c <__malloc_unlock>
 800fc3e:	f104 000b 	add.w	r0, r4, #11
 800fc42:	1d23      	adds	r3, r4, #4
 800fc44:	f020 0007 	bic.w	r0, r0, #7
 800fc48:	1ac2      	subs	r2, r0, r3
 800fc4a:	bf1c      	itt	ne
 800fc4c:	1a1b      	subne	r3, r3, r0
 800fc4e:	50a3      	strne	r3, [r4, r2]
 800fc50:	e7af      	b.n	800fbb2 <_malloc_r+0x22>
 800fc52:	6862      	ldr	r2, [r4, #4]
 800fc54:	42a3      	cmp	r3, r4
 800fc56:	bf0c      	ite	eq
 800fc58:	f8c8 2000 	streq.w	r2, [r8]
 800fc5c:	605a      	strne	r2, [r3, #4]
 800fc5e:	e7eb      	b.n	800fc38 <_malloc_r+0xa8>
 800fc60:	4623      	mov	r3, r4
 800fc62:	6864      	ldr	r4, [r4, #4]
 800fc64:	e7ae      	b.n	800fbc4 <_malloc_r+0x34>
 800fc66:	463c      	mov	r4, r7
 800fc68:	687f      	ldr	r7, [r7, #4]
 800fc6a:	e7b6      	b.n	800fbda <_malloc_r+0x4a>
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	42a3      	cmp	r3, r4
 800fc72:	d1fb      	bne.n	800fc6c <_malloc_r+0xdc>
 800fc74:	2300      	movs	r3, #0
 800fc76:	6053      	str	r3, [r2, #4]
 800fc78:	e7de      	b.n	800fc38 <_malloc_r+0xa8>
 800fc7a:	230c      	movs	r3, #12
 800fc7c:	6033      	str	r3, [r6, #0]
 800fc7e:	4630      	mov	r0, r6
 800fc80:	f000 f80c 	bl	800fc9c <__malloc_unlock>
 800fc84:	e794      	b.n	800fbb0 <_malloc_r+0x20>
 800fc86:	6005      	str	r5, [r0, #0]
 800fc88:	e7d6      	b.n	800fc38 <_malloc_r+0xa8>
 800fc8a:	bf00      	nop
 800fc8c:	20000b80 	.word	0x20000b80

0800fc90 <__malloc_lock>:
 800fc90:	4801      	ldr	r0, [pc, #4]	@ (800fc98 <__malloc_lock+0x8>)
 800fc92:	f7ff b8ae 	b.w	800edf2 <__retarget_lock_acquire_recursive>
 800fc96:	bf00      	nop
 800fc98:	20000b78 	.word	0x20000b78

0800fc9c <__malloc_unlock>:
 800fc9c:	4801      	ldr	r0, [pc, #4]	@ (800fca4 <__malloc_unlock+0x8>)
 800fc9e:	f7ff b8a9 	b.w	800edf4 <__retarget_lock_release_recursive>
 800fca2:	bf00      	nop
 800fca4:	20000b78 	.word	0x20000b78

0800fca8 <_Balloc>:
 800fca8:	b570      	push	{r4, r5, r6, lr}
 800fcaa:	69c6      	ldr	r6, [r0, #28]
 800fcac:	4604      	mov	r4, r0
 800fcae:	460d      	mov	r5, r1
 800fcb0:	b976      	cbnz	r6, 800fcd0 <_Balloc+0x28>
 800fcb2:	2010      	movs	r0, #16
 800fcb4:	f7ff ff42 	bl	800fb3c <malloc>
 800fcb8:	4602      	mov	r2, r0
 800fcba:	61e0      	str	r0, [r4, #28]
 800fcbc:	b920      	cbnz	r0, 800fcc8 <_Balloc+0x20>
 800fcbe:	4b18      	ldr	r3, [pc, #96]	@ (800fd20 <_Balloc+0x78>)
 800fcc0:	4818      	ldr	r0, [pc, #96]	@ (800fd24 <_Balloc+0x7c>)
 800fcc2:	216b      	movs	r1, #107	@ 0x6b
 800fcc4:	f000 fdfa 	bl	80108bc <__assert_func>
 800fcc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fccc:	6006      	str	r6, [r0, #0]
 800fcce:	60c6      	str	r6, [r0, #12]
 800fcd0:	69e6      	ldr	r6, [r4, #28]
 800fcd2:	68f3      	ldr	r3, [r6, #12]
 800fcd4:	b183      	cbz	r3, 800fcf8 <_Balloc+0x50>
 800fcd6:	69e3      	ldr	r3, [r4, #28]
 800fcd8:	68db      	ldr	r3, [r3, #12]
 800fcda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fcde:	b9b8      	cbnz	r0, 800fd10 <_Balloc+0x68>
 800fce0:	2101      	movs	r1, #1
 800fce2:	fa01 f605 	lsl.w	r6, r1, r5
 800fce6:	1d72      	adds	r2, r6, #5
 800fce8:	0092      	lsls	r2, r2, #2
 800fcea:	4620      	mov	r0, r4
 800fcec:	f000 fe04 	bl	80108f8 <_calloc_r>
 800fcf0:	b160      	cbz	r0, 800fd0c <_Balloc+0x64>
 800fcf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fcf6:	e00e      	b.n	800fd16 <_Balloc+0x6e>
 800fcf8:	2221      	movs	r2, #33	@ 0x21
 800fcfa:	2104      	movs	r1, #4
 800fcfc:	4620      	mov	r0, r4
 800fcfe:	f000 fdfb 	bl	80108f8 <_calloc_r>
 800fd02:	69e3      	ldr	r3, [r4, #28]
 800fd04:	60f0      	str	r0, [r6, #12]
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d1e4      	bne.n	800fcd6 <_Balloc+0x2e>
 800fd0c:	2000      	movs	r0, #0
 800fd0e:	bd70      	pop	{r4, r5, r6, pc}
 800fd10:	6802      	ldr	r2, [r0, #0]
 800fd12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd16:	2300      	movs	r3, #0
 800fd18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd1c:	e7f7      	b.n	800fd0e <_Balloc+0x66>
 800fd1e:	bf00      	nop
 800fd20:	08012a9d 	.word	0x08012a9d
 800fd24:	08012b1d 	.word	0x08012b1d

0800fd28 <_Bfree>:
 800fd28:	b570      	push	{r4, r5, r6, lr}
 800fd2a:	69c6      	ldr	r6, [r0, #28]
 800fd2c:	4605      	mov	r5, r0
 800fd2e:	460c      	mov	r4, r1
 800fd30:	b976      	cbnz	r6, 800fd50 <_Bfree+0x28>
 800fd32:	2010      	movs	r0, #16
 800fd34:	f7ff ff02 	bl	800fb3c <malloc>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	61e8      	str	r0, [r5, #28]
 800fd3c:	b920      	cbnz	r0, 800fd48 <_Bfree+0x20>
 800fd3e:	4b09      	ldr	r3, [pc, #36]	@ (800fd64 <_Bfree+0x3c>)
 800fd40:	4809      	ldr	r0, [pc, #36]	@ (800fd68 <_Bfree+0x40>)
 800fd42:	218f      	movs	r1, #143	@ 0x8f
 800fd44:	f000 fdba 	bl	80108bc <__assert_func>
 800fd48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd4c:	6006      	str	r6, [r0, #0]
 800fd4e:	60c6      	str	r6, [r0, #12]
 800fd50:	b13c      	cbz	r4, 800fd62 <_Bfree+0x3a>
 800fd52:	69eb      	ldr	r3, [r5, #28]
 800fd54:	6862      	ldr	r2, [r4, #4]
 800fd56:	68db      	ldr	r3, [r3, #12]
 800fd58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd5c:	6021      	str	r1, [r4, #0]
 800fd5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fd62:	bd70      	pop	{r4, r5, r6, pc}
 800fd64:	08012a9d 	.word	0x08012a9d
 800fd68:	08012b1d 	.word	0x08012b1d

0800fd6c <__multadd>:
 800fd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd70:	690d      	ldr	r5, [r1, #16]
 800fd72:	4607      	mov	r7, r0
 800fd74:	460c      	mov	r4, r1
 800fd76:	461e      	mov	r6, r3
 800fd78:	f101 0c14 	add.w	ip, r1, #20
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	f8dc 3000 	ldr.w	r3, [ip]
 800fd82:	b299      	uxth	r1, r3
 800fd84:	fb02 6101 	mla	r1, r2, r1, r6
 800fd88:	0c1e      	lsrs	r6, r3, #16
 800fd8a:	0c0b      	lsrs	r3, r1, #16
 800fd8c:	fb02 3306 	mla	r3, r2, r6, r3
 800fd90:	b289      	uxth	r1, r1
 800fd92:	3001      	adds	r0, #1
 800fd94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fd98:	4285      	cmp	r5, r0
 800fd9a:	f84c 1b04 	str.w	r1, [ip], #4
 800fd9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fda2:	dcec      	bgt.n	800fd7e <__multadd+0x12>
 800fda4:	b30e      	cbz	r6, 800fdea <__multadd+0x7e>
 800fda6:	68a3      	ldr	r3, [r4, #8]
 800fda8:	42ab      	cmp	r3, r5
 800fdaa:	dc19      	bgt.n	800fde0 <__multadd+0x74>
 800fdac:	6861      	ldr	r1, [r4, #4]
 800fdae:	4638      	mov	r0, r7
 800fdb0:	3101      	adds	r1, #1
 800fdb2:	f7ff ff79 	bl	800fca8 <_Balloc>
 800fdb6:	4680      	mov	r8, r0
 800fdb8:	b928      	cbnz	r0, 800fdc6 <__multadd+0x5a>
 800fdba:	4602      	mov	r2, r0
 800fdbc:	4b0c      	ldr	r3, [pc, #48]	@ (800fdf0 <__multadd+0x84>)
 800fdbe:	480d      	ldr	r0, [pc, #52]	@ (800fdf4 <__multadd+0x88>)
 800fdc0:	21ba      	movs	r1, #186	@ 0xba
 800fdc2:	f000 fd7b 	bl	80108bc <__assert_func>
 800fdc6:	6922      	ldr	r2, [r4, #16]
 800fdc8:	3202      	adds	r2, #2
 800fdca:	f104 010c 	add.w	r1, r4, #12
 800fdce:	0092      	lsls	r2, r2, #2
 800fdd0:	300c      	adds	r0, #12
 800fdd2:	f000 fd65 	bl	80108a0 <memcpy>
 800fdd6:	4621      	mov	r1, r4
 800fdd8:	4638      	mov	r0, r7
 800fdda:	f7ff ffa5 	bl	800fd28 <_Bfree>
 800fdde:	4644      	mov	r4, r8
 800fde0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fde4:	3501      	adds	r5, #1
 800fde6:	615e      	str	r6, [r3, #20]
 800fde8:	6125      	str	r5, [r4, #16]
 800fdea:	4620      	mov	r0, r4
 800fdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdf0:	08012b0c 	.word	0x08012b0c
 800fdf4:	08012b1d 	.word	0x08012b1d

0800fdf8 <__hi0bits>:
 800fdf8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	bf36      	itet	cc
 800fe00:	0403      	lslcc	r3, r0, #16
 800fe02:	2000      	movcs	r0, #0
 800fe04:	2010      	movcc	r0, #16
 800fe06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fe0a:	bf3c      	itt	cc
 800fe0c:	021b      	lslcc	r3, r3, #8
 800fe0e:	3008      	addcc	r0, #8
 800fe10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe14:	bf3c      	itt	cc
 800fe16:	011b      	lslcc	r3, r3, #4
 800fe18:	3004      	addcc	r0, #4
 800fe1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe1e:	bf3c      	itt	cc
 800fe20:	009b      	lslcc	r3, r3, #2
 800fe22:	3002      	addcc	r0, #2
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	db05      	blt.n	800fe34 <__hi0bits+0x3c>
 800fe28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fe2c:	f100 0001 	add.w	r0, r0, #1
 800fe30:	bf08      	it	eq
 800fe32:	2020      	moveq	r0, #32
 800fe34:	4770      	bx	lr

0800fe36 <__lo0bits>:
 800fe36:	6803      	ldr	r3, [r0, #0]
 800fe38:	4602      	mov	r2, r0
 800fe3a:	f013 0007 	ands.w	r0, r3, #7
 800fe3e:	d00b      	beq.n	800fe58 <__lo0bits+0x22>
 800fe40:	07d9      	lsls	r1, r3, #31
 800fe42:	d421      	bmi.n	800fe88 <__lo0bits+0x52>
 800fe44:	0798      	lsls	r0, r3, #30
 800fe46:	bf49      	itett	mi
 800fe48:	085b      	lsrmi	r3, r3, #1
 800fe4a:	089b      	lsrpl	r3, r3, #2
 800fe4c:	2001      	movmi	r0, #1
 800fe4e:	6013      	strmi	r3, [r2, #0]
 800fe50:	bf5c      	itt	pl
 800fe52:	6013      	strpl	r3, [r2, #0]
 800fe54:	2002      	movpl	r0, #2
 800fe56:	4770      	bx	lr
 800fe58:	b299      	uxth	r1, r3
 800fe5a:	b909      	cbnz	r1, 800fe60 <__lo0bits+0x2a>
 800fe5c:	0c1b      	lsrs	r3, r3, #16
 800fe5e:	2010      	movs	r0, #16
 800fe60:	b2d9      	uxtb	r1, r3
 800fe62:	b909      	cbnz	r1, 800fe68 <__lo0bits+0x32>
 800fe64:	3008      	adds	r0, #8
 800fe66:	0a1b      	lsrs	r3, r3, #8
 800fe68:	0719      	lsls	r1, r3, #28
 800fe6a:	bf04      	itt	eq
 800fe6c:	091b      	lsreq	r3, r3, #4
 800fe6e:	3004      	addeq	r0, #4
 800fe70:	0799      	lsls	r1, r3, #30
 800fe72:	bf04      	itt	eq
 800fe74:	089b      	lsreq	r3, r3, #2
 800fe76:	3002      	addeq	r0, #2
 800fe78:	07d9      	lsls	r1, r3, #31
 800fe7a:	d403      	bmi.n	800fe84 <__lo0bits+0x4e>
 800fe7c:	085b      	lsrs	r3, r3, #1
 800fe7e:	f100 0001 	add.w	r0, r0, #1
 800fe82:	d003      	beq.n	800fe8c <__lo0bits+0x56>
 800fe84:	6013      	str	r3, [r2, #0]
 800fe86:	4770      	bx	lr
 800fe88:	2000      	movs	r0, #0
 800fe8a:	4770      	bx	lr
 800fe8c:	2020      	movs	r0, #32
 800fe8e:	4770      	bx	lr

0800fe90 <__i2b>:
 800fe90:	b510      	push	{r4, lr}
 800fe92:	460c      	mov	r4, r1
 800fe94:	2101      	movs	r1, #1
 800fe96:	f7ff ff07 	bl	800fca8 <_Balloc>
 800fe9a:	4602      	mov	r2, r0
 800fe9c:	b928      	cbnz	r0, 800feaa <__i2b+0x1a>
 800fe9e:	4b05      	ldr	r3, [pc, #20]	@ (800feb4 <__i2b+0x24>)
 800fea0:	4805      	ldr	r0, [pc, #20]	@ (800feb8 <__i2b+0x28>)
 800fea2:	f240 1145 	movw	r1, #325	@ 0x145
 800fea6:	f000 fd09 	bl	80108bc <__assert_func>
 800feaa:	2301      	movs	r3, #1
 800feac:	6144      	str	r4, [r0, #20]
 800feae:	6103      	str	r3, [r0, #16]
 800feb0:	bd10      	pop	{r4, pc}
 800feb2:	bf00      	nop
 800feb4:	08012b0c 	.word	0x08012b0c
 800feb8:	08012b1d 	.word	0x08012b1d

0800febc <__multiply>:
 800febc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec0:	4617      	mov	r7, r2
 800fec2:	690a      	ldr	r2, [r1, #16]
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	429a      	cmp	r2, r3
 800fec8:	bfa8      	it	ge
 800feca:	463b      	movge	r3, r7
 800fecc:	4689      	mov	r9, r1
 800fece:	bfa4      	itt	ge
 800fed0:	460f      	movge	r7, r1
 800fed2:	4699      	movge	r9, r3
 800fed4:	693d      	ldr	r5, [r7, #16]
 800fed6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	6879      	ldr	r1, [r7, #4]
 800fede:	eb05 060a 	add.w	r6, r5, sl
 800fee2:	42b3      	cmp	r3, r6
 800fee4:	b085      	sub	sp, #20
 800fee6:	bfb8      	it	lt
 800fee8:	3101      	addlt	r1, #1
 800feea:	f7ff fedd 	bl	800fca8 <_Balloc>
 800feee:	b930      	cbnz	r0, 800fefe <__multiply+0x42>
 800fef0:	4602      	mov	r2, r0
 800fef2:	4b41      	ldr	r3, [pc, #260]	@ (800fff8 <__multiply+0x13c>)
 800fef4:	4841      	ldr	r0, [pc, #260]	@ (800fffc <__multiply+0x140>)
 800fef6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fefa:	f000 fcdf 	bl	80108bc <__assert_func>
 800fefe:	f100 0414 	add.w	r4, r0, #20
 800ff02:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ff06:	4623      	mov	r3, r4
 800ff08:	2200      	movs	r2, #0
 800ff0a:	4573      	cmp	r3, lr
 800ff0c:	d320      	bcc.n	800ff50 <__multiply+0x94>
 800ff0e:	f107 0814 	add.w	r8, r7, #20
 800ff12:	f109 0114 	add.w	r1, r9, #20
 800ff16:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ff1a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ff1e:	9302      	str	r3, [sp, #8]
 800ff20:	1beb      	subs	r3, r5, r7
 800ff22:	3b15      	subs	r3, #21
 800ff24:	f023 0303 	bic.w	r3, r3, #3
 800ff28:	3304      	adds	r3, #4
 800ff2a:	3715      	adds	r7, #21
 800ff2c:	42bd      	cmp	r5, r7
 800ff2e:	bf38      	it	cc
 800ff30:	2304      	movcc	r3, #4
 800ff32:	9301      	str	r3, [sp, #4]
 800ff34:	9b02      	ldr	r3, [sp, #8]
 800ff36:	9103      	str	r1, [sp, #12]
 800ff38:	428b      	cmp	r3, r1
 800ff3a:	d80c      	bhi.n	800ff56 <__multiply+0x9a>
 800ff3c:	2e00      	cmp	r6, #0
 800ff3e:	dd03      	ble.n	800ff48 <__multiply+0x8c>
 800ff40:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d055      	beq.n	800fff4 <__multiply+0x138>
 800ff48:	6106      	str	r6, [r0, #16]
 800ff4a:	b005      	add	sp, #20
 800ff4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff50:	f843 2b04 	str.w	r2, [r3], #4
 800ff54:	e7d9      	b.n	800ff0a <__multiply+0x4e>
 800ff56:	f8b1 a000 	ldrh.w	sl, [r1]
 800ff5a:	f1ba 0f00 	cmp.w	sl, #0
 800ff5e:	d01f      	beq.n	800ffa0 <__multiply+0xe4>
 800ff60:	46c4      	mov	ip, r8
 800ff62:	46a1      	mov	r9, r4
 800ff64:	2700      	movs	r7, #0
 800ff66:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ff6a:	f8d9 3000 	ldr.w	r3, [r9]
 800ff6e:	fa1f fb82 	uxth.w	fp, r2
 800ff72:	b29b      	uxth	r3, r3
 800ff74:	fb0a 330b 	mla	r3, sl, fp, r3
 800ff78:	443b      	add	r3, r7
 800ff7a:	f8d9 7000 	ldr.w	r7, [r9]
 800ff7e:	0c12      	lsrs	r2, r2, #16
 800ff80:	0c3f      	lsrs	r7, r7, #16
 800ff82:	fb0a 7202 	mla	r2, sl, r2, r7
 800ff86:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff90:	4565      	cmp	r5, ip
 800ff92:	f849 3b04 	str.w	r3, [r9], #4
 800ff96:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ff9a:	d8e4      	bhi.n	800ff66 <__multiply+0xaa>
 800ff9c:	9b01      	ldr	r3, [sp, #4]
 800ff9e:	50e7      	str	r7, [r4, r3]
 800ffa0:	9b03      	ldr	r3, [sp, #12]
 800ffa2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ffa6:	3104      	adds	r1, #4
 800ffa8:	f1b9 0f00 	cmp.w	r9, #0
 800ffac:	d020      	beq.n	800fff0 <__multiply+0x134>
 800ffae:	6823      	ldr	r3, [r4, #0]
 800ffb0:	4647      	mov	r7, r8
 800ffb2:	46a4      	mov	ip, r4
 800ffb4:	f04f 0a00 	mov.w	sl, #0
 800ffb8:	f8b7 b000 	ldrh.w	fp, [r7]
 800ffbc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ffc0:	fb09 220b 	mla	r2, r9, fp, r2
 800ffc4:	4452      	add	r2, sl
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ffcc:	f84c 3b04 	str.w	r3, [ip], #4
 800ffd0:	f857 3b04 	ldr.w	r3, [r7], #4
 800ffd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ffd8:	f8bc 3000 	ldrh.w	r3, [ip]
 800ffdc:	fb09 330a 	mla	r3, r9, sl, r3
 800ffe0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ffe4:	42bd      	cmp	r5, r7
 800ffe6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ffea:	d8e5      	bhi.n	800ffb8 <__multiply+0xfc>
 800ffec:	9a01      	ldr	r2, [sp, #4]
 800ffee:	50a3      	str	r3, [r4, r2]
 800fff0:	3404      	adds	r4, #4
 800fff2:	e79f      	b.n	800ff34 <__multiply+0x78>
 800fff4:	3e01      	subs	r6, #1
 800fff6:	e7a1      	b.n	800ff3c <__multiply+0x80>
 800fff8:	08012b0c 	.word	0x08012b0c
 800fffc:	08012b1d 	.word	0x08012b1d

08010000 <__pow5mult>:
 8010000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010004:	4615      	mov	r5, r2
 8010006:	f012 0203 	ands.w	r2, r2, #3
 801000a:	4607      	mov	r7, r0
 801000c:	460e      	mov	r6, r1
 801000e:	d007      	beq.n	8010020 <__pow5mult+0x20>
 8010010:	4c25      	ldr	r4, [pc, #148]	@ (80100a8 <__pow5mult+0xa8>)
 8010012:	3a01      	subs	r2, #1
 8010014:	2300      	movs	r3, #0
 8010016:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801001a:	f7ff fea7 	bl	800fd6c <__multadd>
 801001e:	4606      	mov	r6, r0
 8010020:	10ad      	asrs	r5, r5, #2
 8010022:	d03d      	beq.n	80100a0 <__pow5mult+0xa0>
 8010024:	69fc      	ldr	r4, [r7, #28]
 8010026:	b97c      	cbnz	r4, 8010048 <__pow5mult+0x48>
 8010028:	2010      	movs	r0, #16
 801002a:	f7ff fd87 	bl	800fb3c <malloc>
 801002e:	4602      	mov	r2, r0
 8010030:	61f8      	str	r0, [r7, #28]
 8010032:	b928      	cbnz	r0, 8010040 <__pow5mult+0x40>
 8010034:	4b1d      	ldr	r3, [pc, #116]	@ (80100ac <__pow5mult+0xac>)
 8010036:	481e      	ldr	r0, [pc, #120]	@ (80100b0 <__pow5mult+0xb0>)
 8010038:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801003c:	f000 fc3e 	bl	80108bc <__assert_func>
 8010040:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010044:	6004      	str	r4, [r0, #0]
 8010046:	60c4      	str	r4, [r0, #12]
 8010048:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801004c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010050:	b94c      	cbnz	r4, 8010066 <__pow5mult+0x66>
 8010052:	f240 2171 	movw	r1, #625	@ 0x271
 8010056:	4638      	mov	r0, r7
 8010058:	f7ff ff1a 	bl	800fe90 <__i2b>
 801005c:	2300      	movs	r3, #0
 801005e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010062:	4604      	mov	r4, r0
 8010064:	6003      	str	r3, [r0, #0]
 8010066:	f04f 0900 	mov.w	r9, #0
 801006a:	07eb      	lsls	r3, r5, #31
 801006c:	d50a      	bpl.n	8010084 <__pow5mult+0x84>
 801006e:	4631      	mov	r1, r6
 8010070:	4622      	mov	r2, r4
 8010072:	4638      	mov	r0, r7
 8010074:	f7ff ff22 	bl	800febc <__multiply>
 8010078:	4631      	mov	r1, r6
 801007a:	4680      	mov	r8, r0
 801007c:	4638      	mov	r0, r7
 801007e:	f7ff fe53 	bl	800fd28 <_Bfree>
 8010082:	4646      	mov	r6, r8
 8010084:	106d      	asrs	r5, r5, #1
 8010086:	d00b      	beq.n	80100a0 <__pow5mult+0xa0>
 8010088:	6820      	ldr	r0, [r4, #0]
 801008a:	b938      	cbnz	r0, 801009c <__pow5mult+0x9c>
 801008c:	4622      	mov	r2, r4
 801008e:	4621      	mov	r1, r4
 8010090:	4638      	mov	r0, r7
 8010092:	f7ff ff13 	bl	800febc <__multiply>
 8010096:	6020      	str	r0, [r4, #0]
 8010098:	f8c0 9000 	str.w	r9, [r0]
 801009c:	4604      	mov	r4, r0
 801009e:	e7e4      	b.n	801006a <__pow5mult+0x6a>
 80100a0:	4630      	mov	r0, r6
 80100a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100a6:	bf00      	nop
 80100a8:	08012bd0 	.word	0x08012bd0
 80100ac:	08012a9d 	.word	0x08012a9d
 80100b0:	08012b1d 	.word	0x08012b1d

080100b4 <__lshift>:
 80100b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100b8:	460c      	mov	r4, r1
 80100ba:	6849      	ldr	r1, [r1, #4]
 80100bc:	6923      	ldr	r3, [r4, #16]
 80100be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80100c2:	68a3      	ldr	r3, [r4, #8]
 80100c4:	4607      	mov	r7, r0
 80100c6:	4691      	mov	r9, r2
 80100c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80100cc:	f108 0601 	add.w	r6, r8, #1
 80100d0:	42b3      	cmp	r3, r6
 80100d2:	db0b      	blt.n	80100ec <__lshift+0x38>
 80100d4:	4638      	mov	r0, r7
 80100d6:	f7ff fde7 	bl	800fca8 <_Balloc>
 80100da:	4605      	mov	r5, r0
 80100dc:	b948      	cbnz	r0, 80100f2 <__lshift+0x3e>
 80100de:	4602      	mov	r2, r0
 80100e0:	4b28      	ldr	r3, [pc, #160]	@ (8010184 <__lshift+0xd0>)
 80100e2:	4829      	ldr	r0, [pc, #164]	@ (8010188 <__lshift+0xd4>)
 80100e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80100e8:	f000 fbe8 	bl	80108bc <__assert_func>
 80100ec:	3101      	adds	r1, #1
 80100ee:	005b      	lsls	r3, r3, #1
 80100f0:	e7ee      	b.n	80100d0 <__lshift+0x1c>
 80100f2:	2300      	movs	r3, #0
 80100f4:	f100 0114 	add.w	r1, r0, #20
 80100f8:	f100 0210 	add.w	r2, r0, #16
 80100fc:	4618      	mov	r0, r3
 80100fe:	4553      	cmp	r3, sl
 8010100:	db33      	blt.n	801016a <__lshift+0xb6>
 8010102:	6920      	ldr	r0, [r4, #16]
 8010104:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010108:	f104 0314 	add.w	r3, r4, #20
 801010c:	f019 091f 	ands.w	r9, r9, #31
 8010110:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010114:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010118:	d02b      	beq.n	8010172 <__lshift+0xbe>
 801011a:	f1c9 0e20 	rsb	lr, r9, #32
 801011e:	468a      	mov	sl, r1
 8010120:	2200      	movs	r2, #0
 8010122:	6818      	ldr	r0, [r3, #0]
 8010124:	fa00 f009 	lsl.w	r0, r0, r9
 8010128:	4310      	orrs	r0, r2
 801012a:	f84a 0b04 	str.w	r0, [sl], #4
 801012e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010132:	459c      	cmp	ip, r3
 8010134:	fa22 f20e 	lsr.w	r2, r2, lr
 8010138:	d8f3      	bhi.n	8010122 <__lshift+0x6e>
 801013a:	ebac 0304 	sub.w	r3, ip, r4
 801013e:	3b15      	subs	r3, #21
 8010140:	f023 0303 	bic.w	r3, r3, #3
 8010144:	3304      	adds	r3, #4
 8010146:	f104 0015 	add.w	r0, r4, #21
 801014a:	4560      	cmp	r0, ip
 801014c:	bf88      	it	hi
 801014e:	2304      	movhi	r3, #4
 8010150:	50ca      	str	r2, [r1, r3]
 8010152:	b10a      	cbz	r2, 8010158 <__lshift+0xa4>
 8010154:	f108 0602 	add.w	r6, r8, #2
 8010158:	3e01      	subs	r6, #1
 801015a:	4638      	mov	r0, r7
 801015c:	612e      	str	r6, [r5, #16]
 801015e:	4621      	mov	r1, r4
 8010160:	f7ff fde2 	bl	800fd28 <_Bfree>
 8010164:	4628      	mov	r0, r5
 8010166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801016a:	f842 0f04 	str.w	r0, [r2, #4]!
 801016e:	3301      	adds	r3, #1
 8010170:	e7c5      	b.n	80100fe <__lshift+0x4a>
 8010172:	3904      	subs	r1, #4
 8010174:	f853 2b04 	ldr.w	r2, [r3], #4
 8010178:	f841 2f04 	str.w	r2, [r1, #4]!
 801017c:	459c      	cmp	ip, r3
 801017e:	d8f9      	bhi.n	8010174 <__lshift+0xc0>
 8010180:	e7ea      	b.n	8010158 <__lshift+0xa4>
 8010182:	bf00      	nop
 8010184:	08012b0c 	.word	0x08012b0c
 8010188:	08012b1d 	.word	0x08012b1d

0801018c <__mcmp>:
 801018c:	690a      	ldr	r2, [r1, #16]
 801018e:	4603      	mov	r3, r0
 8010190:	6900      	ldr	r0, [r0, #16]
 8010192:	1a80      	subs	r0, r0, r2
 8010194:	b530      	push	{r4, r5, lr}
 8010196:	d10e      	bne.n	80101b6 <__mcmp+0x2a>
 8010198:	3314      	adds	r3, #20
 801019a:	3114      	adds	r1, #20
 801019c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80101a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80101a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80101a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80101ac:	4295      	cmp	r5, r2
 80101ae:	d003      	beq.n	80101b8 <__mcmp+0x2c>
 80101b0:	d205      	bcs.n	80101be <__mcmp+0x32>
 80101b2:	f04f 30ff 	mov.w	r0, #4294967295
 80101b6:	bd30      	pop	{r4, r5, pc}
 80101b8:	42a3      	cmp	r3, r4
 80101ba:	d3f3      	bcc.n	80101a4 <__mcmp+0x18>
 80101bc:	e7fb      	b.n	80101b6 <__mcmp+0x2a>
 80101be:	2001      	movs	r0, #1
 80101c0:	e7f9      	b.n	80101b6 <__mcmp+0x2a>
	...

080101c4 <__mdiff>:
 80101c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101c8:	4689      	mov	r9, r1
 80101ca:	4606      	mov	r6, r0
 80101cc:	4611      	mov	r1, r2
 80101ce:	4648      	mov	r0, r9
 80101d0:	4614      	mov	r4, r2
 80101d2:	f7ff ffdb 	bl	801018c <__mcmp>
 80101d6:	1e05      	subs	r5, r0, #0
 80101d8:	d112      	bne.n	8010200 <__mdiff+0x3c>
 80101da:	4629      	mov	r1, r5
 80101dc:	4630      	mov	r0, r6
 80101de:	f7ff fd63 	bl	800fca8 <_Balloc>
 80101e2:	4602      	mov	r2, r0
 80101e4:	b928      	cbnz	r0, 80101f2 <__mdiff+0x2e>
 80101e6:	4b3f      	ldr	r3, [pc, #252]	@ (80102e4 <__mdiff+0x120>)
 80101e8:	f240 2137 	movw	r1, #567	@ 0x237
 80101ec:	483e      	ldr	r0, [pc, #248]	@ (80102e8 <__mdiff+0x124>)
 80101ee:	f000 fb65 	bl	80108bc <__assert_func>
 80101f2:	2301      	movs	r3, #1
 80101f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80101f8:	4610      	mov	r0, r2
 80101fa:	b003      	add	sp, #12
 80101fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010200:	bfbc      	itt	lt
 8010202:	464b      	movlt	r3, r9
 8010204:	46a1      	movlt	r9, r4
 8010206:	4630      	mov	r0, r6
 8010208:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801020c:	bfba      	itte	lt
 801020e:	461c      	movlt	r4, r3
 8010210:	2501      	movlt	r5, #1
 8010212:	2500      	movge	r5, #0
 8010214:	f7ff fd48 	bl	800fca8 <_Balloc>
 8010218:	4602      	mov	r2, r0
 801021a:	b918      	cbnz	r0, 8010224 <__mdiff+0x60>
 801021c:	4b31      	ldr	r3, [pc, #196]	@ (80102e4 <__mdiff+0x120>)
 801021e:	f240 2145 	movw	r1, #581	@ 0x245
 8010222:	e7e3      	b.n	80101ec <__mdiff+0x28>
 8010224:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010228:	6926      	ldr	r6, [r4, #16]
 801022a:	60c5      	str	r5, [r0, #12]
 801022c:	f109 0310 	add.w	r3, r9, #16
 8010230:	f109 0514 	add.w	r5, r9, #20
 8010234:	f104 0e14 	add.w	lr, r4, #20
 8010238:	f100 0b14 	add.w	fp, r0, #20
 801023c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010240:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010244:	9301      	str	r3, [sp, #4]
 8010246:	46d9      	mov	r9, fp
 8010248:	f04f 0c00 	mov.w	ip, #0
 801024c:	9b01      	ldr	r3, [sp, #4]
 801024e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010252:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010256:	9301      	str	r3, [sp, #4]
 8010258:	fa1f f38a 	uxth.w	r3, sl
 801025c:	4619      	mov	r1, r3
 801025e:	b283      	uxth	r3, r0
 8010260:	1acb      	subs	r3, r1, r3
 8010262:	0c00      	lsrs	r0, r0, #16
 8010264:	4463      	add	r3, ip
 8010266:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801026a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801026e:	b29b      	uxth	r3, r3
 8010270:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010274:	4576      	cmp	r6, lr
 8010276:	f849 3b04 	str.w	r3, [r9], #4
 801027a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801027e:	d8e5      	bhi.n	801024c <__mdiff+0x88>
 8010280:	1b33      	subs	r3, r6, r4
 8010282:	3b15      	subs	r3, #21
 8010284:	f023 0303 	bic.w	r3, r3, #3
 8010288:	3415      	adds	r4, #21
 801028a:	3304      	adds	r3, #4
 801028c:	42a6      	cmp	r6, r4
 801028e:	bf38      	it	cc
 8010290:	2304      	movcc	r3, #4
 8010292:	441d      	add	r5, r3
 8010294:	445b      	add	r3, fp
 8010296:	461e      	mov	r6, r3
 8010298:	462c      	mov	r4, r5
 801029a:	4544      	cmp	r4, r8
 801029c:	d30e      	bcc.n	80102bc <__mdiff+0xf8>
 801029e:	f108 0103 	add.w	r1, r8, #3
 80102a2:	1b49      	subs	r1, r1, r5
 80102a4:	f021 0103 	bic.w	r1, r1, #3
 80102a8:	3d03      	subs	r5, #3
 80102aa:	45a8      	cmp	r8, r5
 80102ac:	bf38      	it	cc
 80102ae:	2100      	movcc	r1, #0
 80102b0:	440b      	add	r3, r1
 80102b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80102b6:	b191      	cbz	r1, 80102de <__mdiff+0x11a>
 80102b8:	6117      	str	r7, [r2, #16]
 80102ba:	e79d      	b.n	80101f8 <__mdiff+0x34>
 80102bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80102c0:	46e6      	mov	lr, ip
 80102c2:	0c08      	lsrs	r0, r1, #16
 80102c4:	fa1c fc81 	uxtah	ip, ip, r1
 80102c8:	4471      	add	r1, lr
 80102ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80102ce:	b289      	uxth	r1, r1
 80102d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80102d4:	f846 1b04 	str.w	r1, [r6], #4
 80102d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80102dc:	e7dd      	b.n	801029a <__mdiff+0xd6>
 80102de:	3f01      	subs	r7, #1
 80102e0:	e7e7      	b.n	80102b2 <__mdiff+0xee>
 80102e2:	bf00      	nop
 80102e4:	08012b0c 	.word	0x08012b0c
 80102e8:	08012b1d 	.word	0x08012b1d

080102ec <__d2b>:
 80102ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80102f0:	460f      	mov	r7, r1
 80102f2:	2101      	movs	r1, #1
 80102f4:	ec59 8b10 	vmov	r8, r9, d0
 80102f8:	4616      	mov	r6, r2
 80102fa:	f7ff fcd5 	bl	800fca8 <_Balloc>
 80102fe:	4604      	mov	r4, r0
 8010300:	b930      	cbnz	r0, 8010310 <__d2b+0x24>
 8010302:	4602      	mov	r2, r0
 8010304:	4b23      	ldr	r3, [pc, #140]	@ (8010394 <__d2b+0xa8>)
 8010306:	4824      	ldr	r0, [pc, #144]	@ (8010398 <__d2b+0xac>)
 8010308:	f240 310f 	movw	r1, #783	@ 0x30f
 801030c:	f000 fad6 	bl	80108bc <__assert_func>
 8010310:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010314:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010318:	b10d      	cbz	r5, 801031e <__d2b+0x32>
 801031a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801031e:	9301      	str	r3, [sp, #4]
 8010320:	f1b8 0300 	subs.w	r3, r8, #0
 8010324:	d023      	beq.n	801036e <__d2b+0x82>
 8010326:	4668      	mov	r0, sp
 8010328:	9300      	str	r3, [sp, #0]
 801032a:	f7ff fd84 	bl	800fe36 <__lo0bits>
 801032e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010332:	b1d0      	cbz	r0, 801036a <__d2b+0x7e>
 8010334:	f1c0 0320 	rsb	r3, r0, #32
 8010338:	fa02 f303 	lsl.w	r3, r2, r3
 801033c:	430b      	orrs	r3, r1
 801033e:	40c2      	lsrs	r2, r0
 8010340:	6163      	str	r3, [r4, #20]
 8010342:	9201      	str	r2, [sp, #4]
 8010344:	9b01      	ldr	r3, [sp, #4]
 8010346:	61a3      	str	r3, [r4, #24]
 8010348:	2b00      	cmp	r3, #0
 801034a:	bf0c      	ite	eq
 801034c:	2201      	moveq	r2, #1
 801034e:	2202      	movne	r2, #2
 8010350:	6122      	str	r2, [r4, #16]
 8010352:	b1a5      	cbz	r5, 801037e <__d2b+0x92>
 8010354:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010358:	4405      	add	r5, r0
 801035a:	603d      	str	r5, [r7, #0]
 801035c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010360:	6030      	str	r0, [r6, #0]
 8010362:	4620      	mov	r0, r4
 8010364:	b003      	add	sp, #12
 8010366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801036a:	6161      	str	r1, [r4, #20]
 801036c:	e7ea      	b.n	8010344 <__d2b+0x58>
 801036e:	a801      	add	r0, sp, #4
 8010370:	f7ff fd61 	bl	800fe36 <__lo0bits>
 8010374:	9b01      	ldr	r3, [sp, #4]
 8010376:	6163      	str	r3, [r4, #20]
 8010378:	3020      	adds	r0, #32
 801037a:	2201      	movs	r2, #1
 801037c:	e7e8      	b.n	8010350 <__d2b+0x64>
 801037e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010382:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010386:	6038      	str	r0, [r7, #0]
 8010388:	6918      	ldr	r0, [r3, #16]
 801038a:	f7ff fd35 	bl	800fdf8 <__hi0bits>
 801038e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010392:	e7e5      	b.n	8010360 <__d2b+0x74>
 8010394:	08012b0c 	.word	0x08012b0c
 8010398:	08012b1d 	.word	0x08012b1d

0801039c <__sfputc_r>:
 801039c:	6893      	ldr	r3, [r2, #8]
 801039e:	3b01      	subs	r3, #1
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	b410      	push	{r4}
 80103a4:	6093      	str	r3, [r2, #8]
 80103a6:	da08      	bge.n	80103ba <__sfputc_r+0x1e>
 80103a8:	6994      	ldr	r4, [r2, #24]
 80103aa:	42a3      	cmp	r3, r4
 80103ac:	db01      	blt.n	80103b2 <__sfputc_r+0x16>
 80103ae:	290a      	cmp	r1, #10
 80103b0:	d103      	bne.n	80103ba <__sfputc_r+0x1e>
 80103b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103b6:	f7fe bbfa 	b.w	800ebae <__swbuf_r>
 80103ba:	6813      	ldr	r3, [r2, #0]
 80103bc:	1c58      	adds	r0, r3, #1
 80103be:	6010      	str	r0, [r2, #0]
 80103c0:	7019      	strb	r1, [r3, #0]
 80103c2:	4608      	mov	r0, r1
 80103c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103c8:	4770      	bx	lr

080103ca <__sfputs_r>:
 80103ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103cc:	4606      	mov	r6, r0
 80103ce:	460f      	mov	r7, r1
 80103d0:	4614      	mov	r4, r2
 80103d2:	18d5      	adds	r5, r2, r3
 80103d4:	42ac      	cmp	r4, r5
 80103d6:	d101      	bne.n	80103dc <__sfputs_r+0x12>
 80103d8:	2000      	movs	r0, #0
 80103da:	e007      	b.n	80103ec <__sfputs_r+0x22>
 80103dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103e0:	463a      	mov	r2, r7
 80103e2:	4630      	mov	r0, r6
 80103e4:	f7ff ffda 	bl	801039c <__sfputc_r>
 80103e8:	1c43      	adds	r3, r0, #1
 80103ea:	d1f3      	bne.n	80103d4 <__sfputs_r+0xa>
 80103ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080103f0 <_vfiprintf_r>:
 80103f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103f4:	460d      	mov	r5, r1
 80103f6:	b09d      	sub	sp, #116	@ 0x74
 80103f8:	4614      	mov	r4, r2
 80103fa:	4698      	mov	r8, r3
 80103fc:	4606      	mov	r6, r0
 80103fe:	b118      	cbz	r0, 8010408 <_vfiprintf_r+0x18>
 8010400:	6a03      	ldr	r3, [r0, #32]
 8010402:	b90b      	cbnz	r3, 8010408 <_vfiprintf_r+0x18>
 8010404:	f7fe faea 	bl	800e9dc <__sinit>
 8010408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801040a:	07d9      	lsls	r1, r3, #31
 801040c:	d405      	bmi.n	801041a <_vfiprintf_r+0x2a>
 801040e:	89ab      	ldrh	r3, [r5, #12]
 8010410:	059a      	lsls	r2, r3, #22
 8010412:	d402      	bmi.n	801041a <_vfiprintf_r+0x2a>
 8010414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010416:	f7fe fcec 	bl	800edf2 <__retarget_lock_acquire_recursive>
 801041a:	89ab      	ldrh	r3, [r5, #12]
 801041c:	071b      	lsls	r3, r3, #28
 801041e:	d501      	bpl.n	8010424 <_vfiprintf_r+0x34>
 8010420:	692b      	ldr	r3, [r5, #16]
 8010422:	b99b      	cbnz	r3, 801044c <_vfiprintf_r+0x5c>
 8010424:	4629      	mov	r1, r5
 8010426:	4630      	mov	r0, r6
 8010428:	f7fe fc00 	bl	800ec2c <__swsetup_r>
 801042c:	b170      	cbz	r0, 801044c <_vfiprintf_r+0x5c>
 801042e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010430:	07dc      	lsls	r4, r3, #31
 8010432:	d504      	bpl.n	801043e <_vfiprintf_r+0x4e>
 8010434:	f04f 30ff 	mov.w	r0, #4294967295
 8010438:	b01d      	add	sp, #116	@ 0x74
 801043a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801043e:	89ab      	ldrh	r3, [r5, #12]
 8010440:	0598      	lsls	r0, r3, #22
 8010442:	d4f7      	bmi.n	8010434 <_vfiprintf_r+0x44>
 8010444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010446:	f7fe fcd5 	bl	800edf4 <__retarget_lock_release_recursive>
 801044a:	e7f3      	b.n	8010434 <_vfiprintf_r+0x44>
 801044c:	2300      	movs	r3, #0
 801044e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010450:	2320      	movs	r3, #32
 8010452:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010456:	f8cd 800c 	str.w	r8, [sp, #12]
 801045a:	2330      	movs	r3, #48	@ 0x30
 801045c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801060c <_vfiprintf_r+0x21c>
 8010460:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010464:	f04f 0901 	mov.w	r9, #1
 8010468:	4623      	mov	r3, r4
 801046a:	469a      	mov	sl, r3
 801046c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010470:	b10a      	cbz	r2, 8010476 <_vfiprintf_r+0x86>
 8010472:	2a25      	cmp	r2, #37	@ 0x25
 8010474:	d1f9      	bne.n	801046a <_vfiprintf_r+0x7a>
 8010476:	ebba 0b04 	subs.w	fp, sl, r4
 801047a:	d00b      	beq.n	8010494 <_vfiprintf_r+0xa4>
 801047c:	465b      	mov	r3, fp
 801047e:	4622      	mov	r2, r4
 8010480:	4629      	mov	r1, r5
 8010482:	4630      	mov	r0, r6
 8010484:	f7ff ffa1 	bl	80103ca <__sfputs_r>
 8010488:	3001      	adds	r0, #1
 801048a:	f000 80a7 	beq.w	80105dc <_vfiprintf_r+0x1ec>
 801048e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010490:	445a      	add	r2, fp
 8010492:	9209      	str	r2, [sp, #36]	@ 0x24
 8010494:	f89a 3000 	ldrb.w	r3, [sl]
 8010498:	2b00      	cmp	r3, #0
 801049a:	f000 809f 	beq.w	80105dc <_vfiprintf_r+0x1ec>
 801049e:	2300      	movs	r3, #0
 80104a0:	f04f 32ff 	mov.w	r2, #4294967295
 80104a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104a8:	f10a 0a01 	add.w	sl, sl, #1
 80104ac:	9304      	str	r3, [sp, #16]
 80104ae:	9307      	str	r3, [sp, #28]
 80104b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80104b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80104b6:	4654      	mov	r4, sl
 80104b8:	2205      	movs	r2, #5
 80104ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104be:	4853      	ldr	r0, [pc, #332]	@ (801060c <_vfiprintf_r+0x21c>)
 80104c0:	f7ef fe86 	bl	80001d0 <memchr>
 80104c4:	9a04      	ldr	r2, [sp, #16]
 80104c6:	b9d8      	cbnz	r0, 8010500 <_vfiprintf_r+0x110>
 80104c8:	06d1      	lsls	r1, r2, #27
 80104ca:	bf44      	itt	mi
 80104cc:	2320      	movmi	r3, #32
 80104ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104d2:	0713      	lsls	r3, r2, #28
 80104d4:	bf44      	itt	mi
 80104d6:	232b      	movmi	r3, #43	@ 0x2b
 80104d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104dc:	f89a 3000 	ldrb.w	r3, [sl]
 80104e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80104e2:	d015      	beq.n	8010510 <_vfiprintf_r+0x120>
 80104e4:	9a07      	ldr	r2, [sp, #28]
 80104e6:	4654      	mov	r4, sl
 80104e8:	2000      	movs	r0, #0
 80104ea:	f04f 0c0a 	mov.w	ip, #10
 80104ee:	4621      	mov	r1, r4
 80104f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104f4:	3b30      	subs	r3, #48	@ 0x30
 80104f6:	2b09      	cmp	r3, #9
 80104f8:	d94b      	bls.n	8010592 <_vfiprintf_r+0x1a2>
 80104fa:	b1b0      	cbz	r0, 801052a <_vfiprintf_r+0x13a>
 80104fc:	9207      	str	r2, [sp, #28]
 80104fe:	e014      	b.n	801052a <_vfiprintf_r+0x13a>
 8010500:	eba0 0308 	sub.w	r3, r0, r8
 8010504:	fa09 f303 	lsl.w	r3, r9, r3
 8010508:	4313      	orrs	r3, r2
 801050a:	9304      	str	r3, [sp, #16]
 801050c:	46a2      	mov	sl, r4
 801050e:	e7d2      	b.n	80104b6 <_vfiprintf_r+0xc6>
 8010510:	9b03      	ldr	r3, [sp, #12]
 8010512:	1d19      	adds	r1, r3, #4
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	9103      	str	r1, [sp, #12]
 8010518:	2b00      	cmp	r3, #0
 801051a:	bfbb      	ittet	lt
 801051c:	425b      	neglt	r3, r3
 801051e:	f042 0202 	orrlt.w	r2, r2, #2
 8010522:	9307      	strge	r3, [sp, #28]
 8010524:	9307      	strlt	r3, [sp, #28]
 8010526:	bfb8      	it	lt
 8010528:	9204      	strlt	r2, [sp, #16]
 801052a:	7823      	ldrb	r3, [r4, #0]
 801052c:	2b2e      	cmp	r3, #46	@ 0x2e
 801052e:	d10a      	bne.n	8010546 <_vfiprintf_r+0x156>
 8010530:	7863      	ldrb	r3, [r4, #1]
 8010532:	2b2a      	cmp	r3, #42	@ 0x2a
 8010534:	d132      	bne.n	801059c <_vfiprintf_r+0x1ac>
 8010536:	9b03      	ldr	r3, [sp, #12]
 8010538:	1d1a      	adds	r2, r3, #4
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	9203      	str	r2, [sp, #12]
 801053e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010542:	3402      	adds	r4, #2
 8010544:	9305      	str	r3, [sp, #20]
 8010546:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801061c <_vfiprintf_r+0x22c>
 801054a:	7821      	ldrb	r1, [r4, #0]
 801054c:	2203      	movs	r2, #3
 801054e:	4650      	mov	r0, sl
 8010550:	f7ef fe3e 	bl	80001d0 <memchr>
 8010554:	b138      	cbz	r0, 8010566 <_vfiprintf_r+0x176>
 8010556:	9b04      	ldr	r3, [sp, #16]
 8010558:	eba0 000a 	sub.w	r0, r0, sl
 801055c:	2240      	movs	r2, #64	@ 0x40
 801055e:	4082      	lsls	r2, r0
 8010560:	4313      	orrs	r3, r2
 8010562:	3401      	adds	r4, #1
 8010564:	9304      	str	r3, [sp, #16]
 8010566:	f814 1b01 	ldrb.w	r1, [r4], #1
 801056a:	4829      	ldr	r0, [pc, #164]	@ (8010610 <_vfiprintf_r+0x220>)
 801056c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010570:	2206      	movs	r2, #6
 8010572:	f7ef fe2d 	bl	80001d0 <memchr>
 8010576:	2800      	cmp	r0, #0
 8010578:	d03f      	beq.n	80105fa <_vfiprintf_r+0x20a>
 801057a:	4b26      	ldr	r3, [pc, #152]	@ (8010614 <_vfiprintf_r+0x224>)
 801057c:	bb1b      	cbnz	r3, 80105c6 <_vfiprintf_r+0x1d6>
 801057e:	9b03      	ldr	r3, [sp, #12]
 8010580:	3307      	adds	r3, #7
 8010582:	f023 0307 	bic.w	r3, r3, #7
 8010586:	3308      	adds	r3, #8
 8010588:	9303      	str	r3, [sp, #12]
 801058a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801058c:	443b      	add	r3, r7
 801058e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010590:	e76a      	b.n	8010468 <_vfiprintf_r+0x78>
 8010592:	fb0c 3202 	mla	r2, ip, r2, r3
 8010596:	460c      	mov	r4, r1
 8010598:	2001      	movs	r0, #1
 801059a:	e7a8      	b.n	80104ee <_vfiprintf_r+0xfe>
 801059c:	2300      	movs	r3, #0
 801059e:	3401      	adds	r4, #1
 80105a0:	9305      	str	r3, [sp, #20]
 80105a2:	4619      	mov	r1, r3
 80105a4:	f04f 0c0a 	mov.w	ip, #10
 80105a8:	4620      	mov	r0, r4
 80105aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105ae:	3a30      	subs	r2, #48	@ 0x30
 80105b0:	2a09      	cmp	r2, #9
 80105b2:	d903      	bls.n	80105bc <_vfiprintf_r+0x1cc>
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d0c6      	beq.n	8010546 <_vfiprintf_r+0x156>
 80105b8:	9105      	str	r1, [sp, #20]
 80105ba:	e7c4      	b.n	8010546 <_vfiprintf_r+0x156>
 80105bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80105c0:	4604      	mov	r4, r0
 80105c2:	2301      	movs	r3, #1
 80105c4:	e7f0      	b.n	80105a8 <_vfiprintf_r+0x1b8>
 80105c6:	ab03      	add	r3, sp, #12
 80105c8:	9300      	str	r3, [sp, #0]
 80105ca:	462a      	mov	r2, r5
 80105cc:	4b12      	ldr	r3, [pc, #72]	@ (8010618 <_vfiprintf_r+0x228>)
 80105ce:	a904      	add	r1, sp, #16
 80105d0:	4630      	mov	r0, r6
 80105d2:	f7fd fdc1 	bl	800e158 <_printf_float>
 80105d6:	4607      	mov	r7, r0
 80105d8:	1c78      	adds	r0, r7, #1
 80105da:	d1d6      	bne.n	801058a <_vfiprintf_r+0x19a>
 80105dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105de:	07d9      	lsls	r1, r3, #31
 80105e0:	d405      	bmi.n	80105ee <_vfiprintf_r+0x1fe>
 80105e2:	89ab      	ldrh	r3, [r5, #12]
 80105e4:	059a      	lsls	r2, r3, #22
 80105e6:	d402      	bmi.n	80105ee <_vfiprintf_r+0x1fe>
 80105e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105ea:	f7fe fc03 	bl	800edf4 <__retarget_lock_release_recursive>
 80105ee:	89ab      	ldrh	r3, [r5, #12]
 80105f0:	065b      	lsls	r3, r3, #25
 80105f2:	f53f af1f 	bmi.w	8010434 <_vfiprintf_r+0x44>
 80105f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80105f8:	e71e      	b.n	8010438 <_vfiprintf_r+0x48>
 80105fa:	ab03      	add	r3, sp, #12
 80105fc:	9300      	str	r3, [sp, #0]
 80105fe:	462a      	mov	r2, r5
 8010600:	4b05      	ldr	r3, [pc, #20]	@ (8010618 <_vfiprintf_r+0x228>)
 8010602:	a904      	add	r1, sp, #16
 8010604:	4630      	mov	r0, r6
 8010606:	f7fe f83f 	bl	800e688 <_printf_i>
 801060a:	e7e4      	b.n	80105d6 <_vfiprintf_r+0x1e6>
 801060c:	08012b76 	.word	0x08012b76
 8010610:	08012b80 	.word	0x08012b80
 8010614:	0800e159 	.word	0x0800e159
 8010618:	080103cb 	.word	0x080103cb
 801061c:	08012b7c 	.word	0x08012b7c

08010620 <__sflush_r>:
 8010620:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010628:	0716      	lsls	r6, r2, #28
 801062a:	4605      	mov	r5, r0
 801062c:	460c      	mov	r4, r1
 801062e:	d454      	bmi.n	80106da <__sflush_r+0xba>
 8010630:	684b      	ldr	r3, [r1, #4]
 8010632:	2b00      	cmp	r3, #0
 8010634:	dc02      	bgt.n	801063c <__sflush_r+0x1c>
 8010636:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010638:	2b00      	cmp	r3, #0
 801063a:	dd48      	ble.n	80106ce <__sflush_r+0xae>
 801063c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801063e:	2e00      	cmp	r6, #0
 8010640:	d045      	beq.n	80106ce <__sflush_r+0xae>
 8010642:	2300      	movs	r3, #0
 8010644:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010648:	682f      	ldr	r7, [r5, #0]
 801064a:	6a21      	ldr	r1, [r4, #32]
 801064c:	602b      	str	r3, [r5, #0]
 801064e:	d030      	beq.n	80106b2 <__sflush_r+0x92>
 8010650:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010652:	89a3      	ldrh	r3, [r4, #12]
 8010654:	0759      	lsls	r1, r3, #29
 8010656:	d505      	bpl.n	8010664 <__sflush_r+0x44>
 8010658:	6863      	ldr	r3, [r4, #4]
 801065a:	1ad2      	subs	r2, r2, r3
 801065c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801065e:	b10b      	cbz	r3, 8010664 <__sflush_r+0x44>
 8010660:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010662:	1ad2      	subs	r2, r2, r3
 8010664:	2300      	movs	r3, #0
 8010666:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010668:	6a21      	ldr	r1, [r4, #32]
 801066a:	4628      	mov	r0, r5
 801066c:	47b0      	blx	r6
 801066e:	1c43      	adds	r3, r0, #1
 8010670:	89a3      	ldrh	r3, [r4, #12]
 8010672:	d106      	bne.n	8010682 <__sflush_r+0x62>
 8010674:	6829      	ldr	r1, [r5, #0]
 8010676:	291d      	cmp	r1, #29
 8010678:	d82b      	bhi.n	80106d2 <__sflush_r+0xb2>
 801067a:	4a2a      	ldr	r2, [pc, #168]	@ (8010724 <__sflush_r+0x104>)
 801067c:	40ca      	lsrs	r2, r1
 801067e:	07d6      	lsls	r6, r2, #31
 8010680:	d527      	bpl.n	80106d2 <__sflush_r+0xb2>
 8010682:	2200      	movs	r2, #0
 8010684:	6062      	str	r2, [r4, #4]
 8010686:	04d9      	lsls	r1, r3, #19
 8010688:	6922      	ldr	r2, [r4, #16]
 801068a:	6022      	str	r2, [r4, #0]
 801068c:	d504      	bpl.n	8010698 <__sflush_r+0x78>
 801068e:	1c42      	adds	r2, r0, #1
 8010690:	d101      	bne.n	8010696 <__sflush_r+0x76>
 8010692:	682b      	ldr	r3, [r5, #0]
 8010694:	b903      	cbnz	r3, 8010698 <__sflush_r+0x78>
 8010696:	6560      	str	r0, [r4, #84]	@ 0x54
 8010698:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801069a:	602f      	str	r7, [r5, #0]
 801069c:	b1b9      	cbz	r1, 80106ce <__sflush_r+0xae>
 801069e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80106a2:	4299      	cmp	r1, r3
 80106a4:	d002      	beq.n	80106ac <__sflush_r+0x8c>
 80106a6:	4628      	mov	r0, r5
 80106a8:	f7ff f9fe 	bl	800faa8 <_free_r>
 80106ac:	2300      	movs	r3, #0
 80106ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80106b0:	e00d      	b.n	80106ce <__sflush_r+0xae>
 80106b2:	2301      	movs	r3, #1
 80106b4:	4628      	mov	r0, r5
 80106b6:	47b0      	blx	r6
 80106b8:	4602      	mov	r2, r0
 80106ba:	1c50      	adds	r0, r2, #1
 80106bc:	d1c9      	bne.n	8010652 <__sflush_r+0x32>
 80106be:	682b      	ldr	r3, [r5, #0]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d0c6      	beq.n	8010652 <__sflush_r+0x32>
 80106c4:	2b1d      	cmp	r3, #29
 80106c6:	d001      	beq.n	80106cc <__sflush_r+0xac>
 80106c8:	2b16      	cmp	r3, #22
 80106ca:	d11e      	bne.n	801070a <__sflush_r+0xea>
 80106cc:	602f      	str	r7, [r5, #0]
 80106ce:	2000      	movs	r0, #0
 80106d0:	e022      	b.n	8010718 <__sflush_r+0xf8>
 80106d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106d6:	b21b      	sxth	r3, r3
 80106d8:	e01b      	b.n	8010712 <__sflush_r+0xf2>
 80106da:	690f      	ldr	r7, [r1, #16]
 80106dc:	2f00      	cmp	r7, #0
 80106de:	d0f6      	beq.n	80106ce <__sflush_r+0xae>
 80106e0:	0793      	lsls	r3, r2, #30
 80106e2:	680e      	ldr	r6, [r1, #0]
 80106e4:	bf08      	it	eq
 80106e6:	694b      	ldreq	r3, [r1, #20]
 80106e8:	600f      	str	r7, [r1, #0]
 80106ea:	bf18      	it	ne
 80106ec:	2300      	movne	r3, #0
 80106ee:	eba6 0807 	sub.w	r8, r6, r7
 80106f2:	608b      	str	r3, [r1, #8]
 80106f4:	f1b8 0f00 	cmp.w	r8, #0
 80106f8:	dde9      	ble.n	80106ce <__sflush_r+0xae>
 80106fa:	6a21      	ldr	r1, [r4, #32]
 80106fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80106fe:	4643      	mov	r3, r8
 8010700:	463a      	mov	r2, r7
 8010702:	4628      	mov	r0, r5
 8010704:	47b0      	blx	r6
 8010706:	2800      	cmp	r0, #0
 8010708:	dc08      	bgt.n	801071c <__sflush_r+0xfc>
 801070a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801070e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010712:	81a3      	strh	r3, [r4, #12]
 8010714:	f04f 30ff 	mov.w	r0, #4294967295
 8010718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801071c:	4407      	add	r7, r0
 801071e:	eba8 0800 	sub.w	r8, r8, r0
 8010722:	e7e7      	b.n	80106f4 <__sflush_r+0xd4>
 8010724:	20400001 	.word	0x20400001

08010728 <_fflush_r>:
 8010728:	b538      	push	{r3, r4, r5, lr}
 801072a:	690b      	ldr	r3, [r1, #16]
 801072c:	4605      	mov	r5, r0
 801072e:	460c      	mov	r4, r1
 8010730:	b913      	cbnz	r3, 8010738 <_fflush_r+0x10>
 8010732:	2500      	movs	r5, #0
 8010734:	4628      	mov	r0, r5
 8010736:	bd38      	pop	{r3, r4, r5, pc}
 8010738:	b118      	cbz	r0, 8010742 <_fflush_r+0x1a>
 801073a:	6a03      	ldr	r3, [r0, #32]
 801073c:	b90b      	cbnz	r3, 8010742 <_fflush_r+0x1a>
 801073e:	f7fe f94d 	bl	800e9dc <__sinit>
 8010742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d0f3      	beq.n	8010732 <_fflush_r+0xa>
 801074a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801074c:	07d0      	lsls	r0, r2, #31
 801074e:	d404      	bmi.n	801075a <_fflush_r+0x32>
 8010750:	0599      	lsls	r1, r3, #22
 8010752:	d402      	bmi.n	801075a <_fflush_r+0x32>
 8010754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010756:	f7fe fb4c 	bl	800edf2 <__retarget_lock_acquire_recursive>
 801075a:	4628      	mov	r0, r5
 801075c:	4621      	mov	r1, r4
 801075e:	f7ff ff5f 	bl	8010620 <__sflush_r>
 8010762:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010764:	07da      	lsls	r2, r3, #31
 8010766:	4605      	mov	r5, r0
 8010768:	d4e4      	bmi.n	8010734 <_fflush_r+0xc>
 801076a:	89a3      	ldrh	r3, [r4, #12]
 801076c:	059b      	lsls	r3, r3, #22
 801076e:	d4e1      	bmi.n	8010734 <_fflush_r+0xc>
 8010770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010772:	f7fe fb3f 	bl	800edf4 <__retarget_lock_release_recursive>
 8010776:	e7dd      	b.n	8010734 <_fflush_r+0xc>

08010778 <__swhatbuf_r>:
 8010778:	b570      	push	{r4, r5, r6, lr}
 801077a:	460c      	mov	r4, r1
 801077c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010780:	2900      	cmp	r1, #0
 8010782:	b096      	sub	sp, #88	@ 0x58
 8010784:	4615      	mov	r5, r2
 8010786:	461e      	mov	r6, r3
 8010788:	da0d      	bge.n	80107a6 <__swhatbuf_r+0x2e>
 801078a:	89a3      	ldrh	r3, [r4, #12]
 801078c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010790:	f04f 0100 	mov.w	r1, #0
 8010794:	bf14      	ite	ne
 8010796:	2340      	movne	r3, #64	@ 0x40
 8010798:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801079c:	2000      	movs	r0, #0
 801079e:	6031      	str	r1, [r6, #0]
 80107a0:	602b      	str	r3, [r5, #0]
 80107a2:	b016      	add	sp, #88	@ 0x58
 80107a4:	bd70      	pop	{r4, r5, r6, pc}
 80107a6:	466a      	mov	r2, sp
 80107a8:	f000 f848 	bl	801083c <_fstat_r>
 80107ac:	2800      	cmp	r0, #0
 80107ae:	dbec      	blt.n	801078a <__swhatbuf_r+0x12>
 80107b0:	9901      	ldr	r1, [sp, #4]
 80107b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80107b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80107ba:	4259      	negs	r1, r3
 80107bc:	4159      	adcs	r1, r3
 80107be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80107c2:	e7eb      	b.n	801079c <__swhatbuf_r+0x24>

080107c4 <__smakebuf_r>:
 80107c4:	898b      	ldrh	r3, [r1, #12]
 80107c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107c8:	079d      	lsls	r5, r3, #30
 80107ca:	4606      	mov	r6, r0
 80107cc:	460c      	mov	r4, r1
 80107ce:	d507      	bpl.n	80107e0 <__smakebuf_r+0x1c>
 80107d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80107d4:	6023      	str	r3, [r4, #0]
 80107d6:	6123      	str	r3, [r4, #16]
 80107d8:	2301      	movs	r3, #1
 80107da:	6163      	str	r3, [r4, #20]
 80107dc:	b003      	add	sp, #12
 80107de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107e0:	ab01      	add	r3, sp, #4
 80107e2:	466a      	mov	r2, sp
 80107e4:	f7ff ffc8 	bl	8010778 <__swhatbuf_r>
 80107e8:	9f00      	ldr	r7, [sp, #0]
 80107ea:	4605      	mov	r5, r0
 80107ec:	4639      	mov	r1, r7
 80107ee:	4630      	mov	r0, r6
 80107f0:	f7ff f9ce 	bl	800fb90 <_malloc_r>
 80107f4:	b948      	cbnz	r0, 801080a <__smakebuf_r+0x46>
 80107f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107fa:	059a      	lsls	r2, r3, #22
 80107fc:	d4ee      	bmi.n	80107dc <__smakebuf_r+0x18>
 80107fe:	f023 0303 	bic.w	r3, r3, #3
 8010802:	f043 0302 	orr.w	r3, r3, #2
 8010806:	81a3      	strh	r3, [r4, #12]
 8010808:	e7e2      	b.n	80107d0 <__smakebuf_r+0xc>
 801080a:	89a3      	ldrh	r3, [r4, #12]
 801080c:	6020      	str	r0, [r4, #0]
 801080e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010812:	81a3      	strh	r3, [r4, #12]
 8010814:	9b01      	ldr	r3, [sp, #4]
 8010816:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801081a:	b15b      	cbz	r3, 8010834 <__smakebuf_r+0x70>
 801081c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010820:	4630      	mov	r0, r6
 8010822:	f000 f81d 	bl	8010860 <_isatty_r>
 8010826:	b128      	cbz	r0, 8010834 <__smakebuf_r+0x70>
 8010828:	89a3      	ldrh	r3, [r4, #12]
 801082a:	f023 0303 	bic.w	r3, r3, #3
 801082e:	f043 0301 	orr.w	r3, r3, #1
 8010832:	81a3      	strh	r3, [r4, #12]
 8010834:	89a3      	ldrh	r3, [r4, #12]
 8010836:	431d      	orrs	r5, r3
 8010838:	81a5      	strh	r5, [r4, #12]
 801083a:	e7cf      	b.n	80107dc <__smakebuf_r+0x18>

0801083c <_fstat_r>:
 801083c:	b538      	push	{r3, r4, r5, lr}
 801083e:	4d07      	ldr	r5, [pc, #28]	@ (801085c <_fstat_r+0x20>)
 8010840:	2300      	movs	r3, #0
 8010842:	4604      	mov	r4, r0
 8010844:	4608      	mov	r0, r1
 8010846:	4611      	mov	r1, r2
 8010848:	602b      	str	r3, [r5, #0]
 801084a:	f7f7 fcb3 	bl	80081b4 <_fstat>
 801084e:	1c43      	adds	r3, r0, #1
 8010850:	d102      	bne.n	8010858 <_fstat_r+0x1c>
 8010852:	682b      	ldr	r3, [r5, #0]
 8010854:	b103      	cbz	r3, 8010858 <_fstat_r+0x1c>
 8010856:	6023      	str	r3, [r4, #0]
 8010858:	bd38      	pop	{r3, r4, r5, pc}
 801085a:	bf00      	nop
 801085c:	20000b74 	.word	0x20000b74

08010860 <_isatty_r>:
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	4d06      	ldr	r5, [pc, #24]	@ (801087c <_isatty_r+0x1c>)
 8010864:	2300      	movs	r3, #0
 8010866:	4604      	mov	r4, r0
 8010868:	4608      	mov	r0, r1
 801086a:	602b      	str	r3, [r5, #0]
 801086c:	f7f7 fcb2 	bl	80081d4 <_isatty>
 8010870:	1c43      	adds	r3, r0, #1
 8010872:	d102      	bne.n	801087a <_isatty_r+0x1a>
 8010874:	682b      	ldr	r3, [r5, #0]
 8010876:	b103      	cbz	r3, 801087a <_isatty_r+0x1a>
 8010878:	6023      	str	r3, [r4, #0]
 801087a:	bd38      	pop	{r3, r4, r5, pc}
 801087c:	20000b74 	.word	0x20000b74

08010880 <_sbrk_r>:
 8010880:	b538      	push	{r3, r4, r5, lr}
 8010882:	4d06      	ldr	r5, [pc, #24]	@ (801089c <_sbrk_r+0x1c>)
 8010884:	2300      	movs	r3, #0
 8010886:	4604      	mov	r4, r0
 8010888:	4608      	mov	r0, r1
 801088a:	602b      	str	r3, [r5, #0]
 801088c:	f7f7 fcba 	bl	8008204 <_sbrk>
 8010890:	1c43      	adds	r3, r0, #1
 8010892:	d102      	bne.n	801089a <_sbrk_r+0x1a>
 8010894:	682b      	ldr	r3, [r5, #0]
 8010896:	b103      	cbz	r3, 801089a <_sbrk_r+0x1a>
 8010898:	6023      	str	r3, [r4, #0]
 801089a:	bd38      	pop	{r3, r4, r5, pc}
 801089c:	20000b74 	.word	0x20000b74

080108a0 <memcpy>:
 80108a0:	440a      	add	r2, r1
 80108a2:	4291      	cmp	r1, r2
 80108a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80108a8:	d100      	bne.n	80108ac <memcpy+0xc>
 80108aa:	4770      	bx	lr
 80108ac:	b510      	push	{r4, lr}
 80108ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108b6:	4291      	cmp	r1, r2
 80108b8:	d1f9      	bne.n	80108ae <memcpy+0xe>
 80108ba:	bd10      	pop	{r4, pc}

080108bc <__assert_func>:
 80108bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108be:	4614      	mov	r4, r2
 80108c0:	461a      	mov	r2, r3
 80108c2:	4b09      	ldr	r3, [pc, #36]	@ (80108e8 <__assert_func+0x2c>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4605      	mov	r5, r0
 80108c8:	68d8      	ldr	r0, [r3, #12]
 80108ca:	b14c      	cbz	r4, 80108e0 <__assert_func+0x24>
 80108cc:	4b07      	ldr	r3, [pc, #28]	@ (80108ec <__assert_func+0x30>)
 80108ce:	9100      	str	r1, [sp, #0]
 80108d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80108d4:	4906      	ldr	r1, [pc, #24]	@ (80108f0 <__assert_func+0x34>)
 80108d6:	462b      	mov	r3, r5
 80108d8:	f000 f842 	bl	8010960 <fiprintf>
 80108dc:	f000 f852 	bl	8010984 <abort>
 80108e0:	4b04      	ldr	r3, [pc, #16]	@ (80108f4 <__assert_func+0x38>)
 80108e2:	461c      	mov	r4, r3
 80108e4:	e7f3      	b.n	80108ce <__assert_func+0x12>
 80108e6:	bf00      	nop
 80108e8:	200000ec 	.word	0x200000ec
 80108ec:	08012b91 	.word	0x08012b91
 80108f0:	08012b9e 	.word	0x08012b9e
 80108f4:	08012bcc 	.word	0x08012bcc

080108f8 <_calloc_r>:
 80108f8:	b570      	push	{r4, r5, r6, lr}
 80108fa:	fba1 5402 	umull	r5, r4, r1, r2
 80108fe:	b934      	cbnz	r4, 801090e <_calloc_r+0x16>
 8010900:	4629      	mov	r1, r5
 8010902:	f7ff f945 	bl	800fb90 <_malloc_r>
 8010906:	4606      	mov	r6, r0
 8010908:	b928      	cbnz	r0, 8010916 <_calloc_r+0x1e>
 801090a:	4630      	mov	r0, r6
 801090c:	bd70      	pop	{r4, r5, r6, pc}
 801090e:	220c      	movs	r2, #12
 8010910:	6002      	str	r2, [r0, #0]
 8010912:	2600      	movs	r6, #0
 8010914:	e7f9      	b.n	801090a <_calloc_r+0x12>
 8010916:	462a      	mov	r2, r5
 8010918:	4621      	mov	r1, r4
 801091a:	f7fe f9ed 	bl	800ecf8 <memset>
 801091e:	e7f4      	b.n	801090a <_calloc_r+0x12>

08010920 <__ascii_mbtowc>:
 8010920:	b082      	sub	sp, #8
 8010922:	b901      	cbnz	r1, 8010926 <__ascii_mbtowc+0x6>
 8010924:	a901      	add	r1, sp, #4
 8010926:	b142      	cbz	r2, 801093a <__ascii_mbtowc+0x1a>
 8010928:	b14b      	cbz	r3, 801093e <__ascii_mbtowc+0x1e>
 801092a:	7813      	ldrb	r3, [r2, #0]
 801092c:	600b      	str	r3, [r1, #0]
 801092e:	7812      	ldrb	r2, [r2, #0]
 8010930:	1e10      	subs	r0, r2, #0
 8010932:	bf18      	it	ne
 8010934:	2001      	movne	r0, #1
 8010936:	b002      	add	sp, #8
 8010938:	4770      	bx	lr
 801093a:	4610      	mov	r0, r2
 801093c:	e7fb      	b.n	8010936 <__ascii_mbtowc+0x16>
 801093e:	f06f 0001 	mvn.w	r0, #1
 8010942:	e7f8      	b.n	8010936 <__ascii_mbtowc+0x16>

08010944 <__ascii_wctomb>:
 8010944:	4603      	mov	r3, r0
 8010946:	4608      	mov	r0, r1
 8010948:	b141      	cbz	r1, 801095c <__ascii_wctomb+0x18>
 801094a:	2aff      	cmp	r2, #255	@ 0xff
 801094c:	d904      	bls.n	8010958 <__ascii_wctomb+0x14>
 801094e:	228a      	movs	r2, #138	@ 0x8a
 8010950:	601a      	str	r2, [r3, #0]
 8010952:	f04f 30ff 	mov.w	r0, #4294967295
 8010956:	4770      	bx	lr
 8010958:	700a      	strb	r2, [r1, #0]
 801095a:	2001      	movs	r0, #1
 801095c:	4770      	bx	lr
	...

08010960 <fiprintf>:
 8010960:	b40e      	push	{r1, r2, r3}
 8010962:	b503      	push	{r0, r1, lr}
 8010964:	4601      	mov	r1, r0
 8010966:	ab03      	add	r3, sp, #12
 8010968:	4805      	ldr	r0, [pc, #20]	@ (8010980 <fiprintf+0x20>)
 801096a:	f853 2b04 	ldr.w	r2, [r3], #4
 801096e:	6800      	ldr	r0, [r0, #0]
 8010970:	9301      	str	r3, [sp, #4]
 8010972:	f7ff fd3d 	bl	80103f0 <_vfiprintf_r>
 8010976:	b002      	add	sp, #8
 8010978:	f85d eb04 	ldr.w	lr, [sp], #4
 801097c:	b003      	add	sp, #12
 801097e:	4770      	bx	lr
 8010980:	200000ec 	.word	0x200000ec

08010984 <abort>:
 8010984:	b508      	push	{r3, lr}
 8010986:	2006      	movs	r0, #6
 8010988:	f000 f82c 	bl	80109e4 <raise>
 801098c:	2001      	movs	r0, #1
 801098e:	f7f7 fbc1 	bl	8008114 <_exit>

08010992 <_raise_r>:
 8010992:	291f      	cmp	r1, #31
 8010994:	b538      	push	{r3, r4, r5, lr}
 8010996:	4605      	mov	r5, r0
 8010998:	460c      	mov	r4, r1
 801099a:	d904      	bls.n	80109a6 <_raise_r+0x14>
 801099c:	2316      	movs	r3, #22
 801099e:	6003      	str	r3, [r0, #0]
 80109a0:	f04f 30ff 	mov.w	r0, #4294967295
 80109a4:	bd38      	pop	{r3, r4, r5, pc}
 80109a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80109a8:	b112      	cbz	r2, 80109b0 <_raise_r+0x1e>
 80109aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80109ae:	b94b      	cbnz	r3, 80109c4 <_raise_r+0x32>
 80109b0:	4628      	mov	r0, r5
 80109b2:	f000 f831 	bl	8010a18 <_getpid_r>
 80109b6:	4622      	mov	r2, r4
 80109b8:	4601      	mov	r1, r0
 80109ba:	4628      	mov	r0, r5
 80109bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109c0:	f000 b818 	b.w	80109f4 <_kill_r>
 80109c4:	2b01      	cmp	r3, #1
 80109c6:	d00a      	beq.n	80109de <_raise_r+0x4c>
 80109c8:	1c59      	adds	r1, r3, #1
 80109ca:	d103      	bne.n	80109d4 <_raise_r+0x42>
 80109cc:	2316      	movs	r3, #22
 80109ce:	6003      	str	r3, [r0, #0]
 80109d0:	2001      	movs	r0, #1
 80109d2:	e7e7      	b.n	80109a4 <_raise_r+0x12>
 80109d4:	2100      	movs	r1, #0
 80109d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80109da:	4620      	mov	r0, r4
 80109dc:	4798      	blx	r3
 80109de:	2000      	movs	r0, #0
 80109e0:	e7e0      	b.n	80109a4 <_raise_r+0x12>
	...

080109e4 <raise>:
 80109e4:	4b02      	ldr	r3, [pc, #8]	@ (80109f0 <raise+0xc>)
 80109e6:	4601      	mov	r1, r0
 80109e8:	6818      	ldr	r0, [r3, #0]
 80109ea:	f7ff bfd2 	b.w	8010992 <_raise_r>
 80109ee:	bf00      	nop
 80109f0:	200000ec 	.word	0x200000ec

080109f4 <_kill_r>:
 80109f4:	b538      	push	{r3, r4, r5, lr}
 80109f6:	4d07      	ldr	r5, [pc, #28]	@ (8010a14 <_kill_r+0x20>)
 80109f8:	2300      	movs	r3, #0
 80109fa:	4604      	mov	r4, r0
 80109fc:	4608      	mov	r0, r1
 80109fe:	4611      	mov	r1, r2
 8010a00:	602b      	str	r3, [r5, #0]
 8010a02:	f7f7 fb77 	bl	80080f4 <_kill>
 8010a06:	1c43      	adds	r3, r0, #1
 8010a08:	d102      	bne.n	8010a10 <_kill_r+0x1c>
 8010a0a:	682b      	ldr	r3, [r5, #0]
 8010a0c:	b103      	cbz	r3, 8010a10 <_kill_r+0x1c>
 8010a0e:	6023      	str	r3, [r4, #0]
 8010a10:	bd38      	pop	{r3, r4, r5, pc}
 8010a12:	bf00      	nop
 8010a14:	20000b74 	.word	0x20000b74

08010a18 <_getpid_r>:
 8010a18:	f7f7 bb64 	b.w	80080e4 <_getpid>

08010a1c <asin>:
 8010a1c:	b538      	push	{r3, r4, r5, lr}
 8010a1e:	ed2d 8b02 	vpush	{d8}
 8010a22:	ec55 4b10 	vmov	r4, r5, d0
 8010a26:	f000 f90f 	bl	8010c48 <__ieee754_asin>
 8010a2a:	4622      	mov	r2, r4
 8010a2c:	462b      	mov	r3, r5
 8010a2e:	4620      	mov	r0, r4
 8010a30:	4629      	mov	r1, r5
 8010a32:	eeb0 8a40 	vmov.f32	s16, s0
 8010a36:	eef0 8a60 	vmov.f32	s17, s1
 8010a3a:	f7f0 f877 	bl	8000b2c <__aeabi_dcmpun>
 8010a3e:	b9a8      	cbnz	r0, 8010a6c <asin+0x50>
 8010a40:	ec45 4b10 	vmov	d0, r4, r5
 8010a44:	f000 f820 	bl	8010a88 <fabs>
 8010a48:	4b0c      	ldr	r3, [pc, #48]	@ (8010a7c <asin+0x60>)
 8010a4a:	ec51 0b10 	vmov	r0, r1, d0
 8010a4e:	2200      	movs	r2, #0
 8010a50:	f7f0 f862 	bl	8000b18 <__aeabi_dcmpgt>
 8010a54:	b150      	cbz	r0, 8010a6c <asin+0x50>
 8010a56:	f7fe f9a1 	bl	800ed9c <__errno>
 8010a5a:	ecbd 8b02 	vpop	{d8}
 8010a5e:	2321      	movs	r3, #33	@ 0x21
 8010a60:	6003      	str	r3, [r0, #0]
 8010a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a66:	4806      	ldr	r0, [pc, #24]	@ (8010a80 <asin+0x64>)
 8010a68:	f000 b816 	b.w	8010a98 <nan>
 8010a6c:	eeb0 0a48 	vmov.f32	s0, s16
 8010a70:	eef0 0a68 	vmov.f32	s1, s17
 8010a74:	ecbd 8b02 	vpop	{d8}
 8010a78:	bd38      	pop	{r3, r4, r5, pc}
 8010a7a:	bf00      	nop
 8010a7c:	3ff00000 	.word	0x3ff00000
 8010a80:	08012bcc 	.word	0x08012bcc

08010a84 <atan2>:
 8010a84:	f000 bae4 	b.w	8011050 <__ieee754_atan2>

08010a88 <fabs>:
 8010a88:	ec51 0b10 	vmov	r0, r1, d0
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010a92:	ec43 2b10 	vmov	d0, r2, r3
 8010a96:	4770      	bx	lr

08010a98 <nan>:
 8010a98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010aa0 <nan+0x8>
 8010a9c:	4770      	bx	lr
 8010a9e:	bf00      	nop
 8010aa0:	00000000 	.word	0x00000000
 8010aa4:	7ff80000 	.word	0x7ff80000

08010aa8 <fmax>:
 8010aa8:	b508      	push	{r3, lr}
 8010aaa:	ed2d 8b04 	vpush	{d8-d9}
 8010aae:	eeb0 8a40 	vmov.f32	s16, s0
 8010ab2:	eef0 8a60 	vmov.f32	s17, s1
 8010ab6:	eeb0 9a41 	vmov.f32	s18, s2
 8010aba:	eef0 9a61 	vmov.f32	s19, s3
 8010abe:	f000 f847 	bl	8010b50 <__fpclassifyd>
 8010ac2:	b950      	cbnz	r0, 8010ada <fmax+0x32>
 8010ac4:	eeb0 8a49 	vmov.f32	s16, s18
 8010ac8:	eef0 8a69 	vmov.f32	s17, s19
 8010acc:	eeb0 0a48 	vmov.f32	s0, s16
 8010ad0:	eef0 0a68 	vmov.f32	s1, s17
 8010ad4:	ecbd 8b04 	vpop	{d8-d9}
 8010ad8:	bd08      	pop	{r3, pc}
 8010ada:	eeb0 0a49 	vmov.f32	s0, s18
 8010ade:	eef0 0a69 	vmov.f32	s1, s19
 8010ae2:	f000 f835 	bl	8010b50 <__fpclassifyd>
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	d0f0      	beq.n	8010acc <fmax+0x24>
 8010aea:	ec53 2b19 	vmov	r2, r3, d9
 8010aee:	ec51 0b18 	vmov	r0, r1, d8
 8010af2:	f7f0 f811 	bl	8000b18 <__aeabi_dcmpgt>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	d0e4      	beq.n	8010ac4 <fmax+0x1c>
 8010afa:	e7e7      	b.n	8010acc <fmax+0x24>

08010afc <fmin>:
 8010afc:	b508      	push	{r3, lr}
 8010afe:	ed2d 8b04 	vpush	{d8-d9}
 8010b02:	eeb0 8a40 	vmov.f32	s16, s0
 8010b06:	eef0 8a60 	vmov.f32	s17, s1
 8010b0a:	eeb0 9a41 	vmov.f32	s18, s2
 8010b0e:	eef0 9a61 	vmov.f32	s19, s3
 8010b12:	f000 f81d 	bl	8010b50 <__fpclassifyd>
 8010b16:	b950      	cbnz	r0, 8010b2e <fmin+0x32>
 8010b18:	eeb0 8a49 	vmov.f32	s16, s18
 8010b1c:	eef0 8a69 	vmov.f32	s17, s19
 8010b20:	eeb0 0a48 	vmov.f32	s0, s16
 8010b24:	eef0 0a68 	vmov.f32	s1, s17
 8010b28:	ecbd 8b04 	vpop	{d8-d9}
 8010b2c:	bd08      	pop	{r3, pc}
 8010b2e:	eeb0 0a49 	vmov.f32	s0, s18
 8010b32:	eef0 0a69 	vmov.f32	s1, s19
 8010b36:	f000 f80b 	bl	8010b50 <__fpclassifyd>
 8010b3a:	2800      	cmp	r0, #0
 8010b3c:	d0f0      	beq.n	8010b20 <fmin+0x24>
 8010b3e:	ec53 2b19 	vmov	r2, r3, d9
 8010b42:	ec51 0b18 	vmov	r0, r1, d8
 8010b46:	f7ef ffc9 	bl	8000adc <__aeabi_dcmplt>
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	d0e4      	beq.n	8010b18 <fmin+0x1c>
 8010b4e:	e7e7      	b.n	8010b20 <fmin+0x24>

08010b50 <__fpclassifyd>:
 8010b50:	ec51 0b10 	vmov	r0, r1, d0
 8010b54:	460b      	mov	r3, r1
 8010b56:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8010b5a:	b510      	push	{r4, lr}
 8010b5c:	d104      	bne.n	8010b68 <__fpclassifyd+0x18>
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	bf0c      	ite	eq
 8010b62:	2002      	moveq	r0, #2
 8010b64:	2003      	movne	r0, #3
 8010b66:	bd10      	pop	{r4, pc}
 8010b68:	4a09      	ldr	r2, [pc, #36]	@ (8010b90 <__fpclassifyd+0x40>)
 8010b6a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8010b6e:	4294      	cmp	r4, r2
 8010b70:	d908      	bls.n	8010b84 <__fpclassifyd+0x34>
 8010b72:	4a08      	ldr	r2, [pc, #32]	@ (8010b94 <__fpclassifyd+0x44>)
 8010b74:	4213      	tst	r3, r2
 8010b76:	d007      	beq.n	8010b88 <__fpclassifyd+0x38>
 8010b78:	4291      	cmp	r1, r2
 8010b7a:	d107      	bne.n	8010b8c <__fpclassifyd+0x3c>
 8010b7c:	fab0 f080 	clz	r0, r0
 8010b80:	0940      	lsrs	r0, r0, #5
 8010b82:	e7f0      	b.n	8010b66 <__fpclassifyd+0x16>
 8010b84:	2004      	movs	r0, #4
 8010b86:	e7ee      	b.n	8010b66 <__fpclassifyd+0x16>
 8010b88:	2003      	movs	r0, #3
 8010b8a:	e7ec      	b.n	8010b66 <__fpclassifyd+0x16>
 8010b8c:	2000      	movs	r0, #0
 8010b8e:	e7ea      	b.n	8010b66 <__fpclassifyd+0x16>
 8010b90:	7fdfffff 	.word	0x7fdfffff
 8010b94:	7ff00000 	.word	0x7ff00000

08010b98 <fmaxf>:
 8010b98:	b508      	push	{r3, lr}
 8010b9a:	ed2d 8b02 	vpush	{d8}
 8010b9e:	eeb0 8a40 	vmov.f32	s16, s0
 8010ba2:	eef0 8a60 	vmov.f32	s17, s1
 8010ba6:	f000 f831 	bl	8010c0c <__fpclassifyf>
 8010baa:	b930      	cbnz	r0, 8010bba <fmaxf+0x22>
 8010bac:	eeb0 8a68 	vmov.f32	s16, s17
 8010bb0:	eeb0 0a48 	vmov.f32	s0, s16
 8010bb4:	ecbd 8b02 	vpop	{d8}
 8010bb8:	bd08      	pop	{r3, pc}
 8010bba:	eeb0 0a68 	vmov.f32	s0, s17
 8010bbe:	f000 f825 	bl	8010c0c <__fpclassifyf>
 8010bc2:	2800      	cmp	r0, #0
 8010bc4:	d0f4      	beq.n	8010bb0 <fmaxf+0x18>
 8010bc6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bce:	dded      	ble.n	8010bac <fmaxf+0x14>
 8010bd0:	e7ee      	b.n	8010bb0 <fmaxf+0x18>

08010bd2 <fminf>:
 8010bd2:	b508      	push	{r3, lr}
 8010bd4:	ed2d 8b02 	vpush	{d8}
 8010bd8:	eeb0 8a40 	vmov.f32	s16, s0
 8010bdc:	eef0 8a60 	vmov.f32	s17, s1
 8010be0:	f000 f814 	bl	8010c0c <__fpclassifyf>
 8010be4:	b930      	cbnz	r0, 8010bf4 <fminf+0x22>
 8010be6:	eeb0 8a68 	vmov.f32	s16, s17
 8010bea:	eeb0 0a48 	vmov.f32	s0, s16
 8010bee:	ecbd 8b02 	vpop	{d8}
 8010bf2:	bd08      	pop	{r3, pc}
 8010bf4:	eeb0 0a68 	vmov.f32	s0, s17
 8010bf8:	f000 f808 	bl	8010c0c <__fpclassifyf>
 8010bfc:	2800      	cmp	r0, #0
 8010bfe:	d0f4      	beq.n	8010bea <fminf+0x18>
 8010c00:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c08:	d5ed      	bpl.n	8010be6 <fminf+0x14>
 8010c0a:	e7ee      	b.n	8010bea <fminf+0x18>

08010c0c <__fpclassifyf>:
 8010c0c:	ee10 3a10 	vmov	r3, s0
 8010c10:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010c14:	d00d      	beq.n	8010c32 <__fpclassifyf+0x26>
 8010c16:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8010c1a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8010c1e:	d30a      	bcc.n	8010c36 <__fpclassifyf+0x2a>
 8010c20:	4b07      	ldr	r3, [pc, #28]	@ (8010c40 <__fpclassifyf+0x34>)
 8010c22:	1e42      	subs	r2, r0, #1
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d908      	bls.n	8010c3a <__fpclassifyf+0x2e>
 8010c28:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8010c2c:	4258      	negs	r0, r3
 8010c2e:	4158      	adcs	r0, r3
 8010c30:	4770      	bx	lr
 8010c32:	2002      	movs	r0, #2
 8010c34:	4770      	bx	lr
 8010c36:	2004      	movs	r0, #4
 8010c38:	4770      	bx	lr
 8010c3a:	2003      	movs	r0, #3
 8010c3c:	4770      	bx	lr
 8010c3e:	bf00      	nop
 8010c40:	007ffffe 	.word	0x007ffffe
 8010c44:	00000000 	.word	0x00000000

08010c48 <__ieee754_asin>:
 8010c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c4c:	ec55 4b10 	vmov	r4, r5, d0
 8010c50:	4bc7      	ldr	r3, [pc, #796]	@ (8010f70 <__ieee754_asin+0x328>)
 8010c52:	b087      	sub	sp, #28
 8010c54:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8010c58:	429e      	cmp	r6, r3
 8010c5a:	9501      	str	r5, [sp, #4]
 8010c5c:	d92d      	bls.n	8010cba <__ieee754_asin+0x72>
 8010c5e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8010c62:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8010c66:	4326      	orrs	r6, r4
 8010c68:	d116      	bne.n	8010c98 <__ieee754_asin+0x50>
 8010c6a:	a3a7      	add	r3, pc, #668	@ (adr r3, 8010f08 <__ieee754_asin+0x2c0>)
 8010c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c70:	4620      	mov	r0, r4
 8010c72:	4629      	mov	r1, r5
 8010c74:	f7ef fcc0 	bl	80005f8 <__aeabi_dmul>
 8010c78:	a3a5      	add	r3, pc, #660	@ (adr r3, 8010f10 <__ieee754_asin+0x2c8>)
 8010c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7e:	4606      	mov	r6, r0
 8010c80:	460f      	mov	r7, r1
 8010c82:	4620      	mov	r0, r4
 8010c84:	4629      	mov	r1, r5
 8010c86:	f7ef fcb7 	bl	80005f8 <__aeabi_dmul>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	4630      	mov	r0, r6
 8010c90:	4639      	mov	r1, r7
 8010c92:	f7ef fafb 	bl	800028c <__adddf3>
 8010c96:	e009      	b.n	8010cac <__ieee754_asin+0x64>
 8010c98:	4622      	mov	r2, r4
 8010c9a:	462b      	mov	r3, r5
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	4629      	mov	r1, r5
 8010ca0:	f7ef faf2 	bl	8000288 <__aeabi_dsub>
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	f7ef fdd0 	bl	800084c <__aeabi_ddiv>
 8010cac:	4604      	mov	r4, r0
 8010cae:	460d      	mov	r5, r1
 8010cb0:	ec45 4b10 	vmov	d0, r4, r5
 8010cb4:	b007      	add	sp, #28
 8010cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cba:	4bae      	ldr	r3, [pc, #696]	@ (8010f74 <__ieee754_asin+0x32c>)
 8010cbc:	429e      	cmp	r6, r3
 8010cbe:	d810      	bhi.n	8010ce2 <__ieee754_asin+0x9a>
 8010cc0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8010cc4:	f080 80ad 	bcs.w	8010e22 <__ieee754_asin+0x1da>
 8010cc8:	a393      	add	r3, pc, #588	@ (adr r3, 8010f18 <__ieee754_asin+0x2d0>)
 8010cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cce:	4620      	mov	r0, r4
 8010cd0:	4629      	mov	r1, r5
 8010cd2:	f7ef fadb 	bl	800028c <__adddf3>
 8010cd6:	4ba8      	ldr	r3, [pc, #672]	@ (8010f78 <__ieee754_asin+0x330>)
 8010cd8:	2200      	movs	r2, #0
 8010cda:	f7ef ff1d 	bl	8000b18 <__aeabi_dcmpgt>
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	d1e6      	bne.n	8010cb0 <__ieee754_asin+0x68>
 8010ce2:	ec45 4b10 	vmov	d0, r4, r5
 8010ce6:	f7ff fecf 	bl	8010a88 <fabs>
 8010cea:	49a3      	ldr	r1, [pc, #652]	@ (8010f78 <__ieee754_asin+0x330>)
 8010cec:	ec53 2b10 	vmov	r2, r3, d0
 8010cf0:	2000      	movs	r0, #0
 8010cf2:	f7ef fac9 	bl	8000288 <__aeabi_dsub>
 8010cf6:	4ba1      	ldr	r3, [pc, #644]	@ (8010f7c <__ieee754_asin+0x334>)
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	f7ef fc7d 	bl	80005f8 <__aeabi_dmul>
 8010cfe:	a388      	add	r3, pc, #544	@ (adr r3, 8010f20 <__ieee754_asin+0x2d8>)
 8010d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d04:	4604      	mov	r4, r0
 8010d06:	460d      	mov	r5, r1
 8010d08:	f7ef fc76 	bl	80005f8 <__aeabi_dmul>
 8010d0c:	a386      	add	r3, pc, #536	@ (adr r3, 8010f28 <__ieee754_asin+0x2e0>)
 8010d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d12:	f7ef fabb 	bl	800028c <__adddf3>
 8010d16:	4622      	mov	r2, r4
 8010d18:	462b      	mov	r3, r5
 8010d1a:	f7ef fc6d 	bl	80005f8 <__aeabi_dmul>
 8010d1e:	a384      	add	r3, pc, #528	@ (adr r3, 8010f30 <__ieee754_asin+0x2e8>)
 8010d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d24:	f7ef fab0 	bl	8000288 <__aeabi_dsub>
 8010d28:	4622      	mov	r2, r4
 8010d2a:	462b      	mov	r3, r5
 8010d2c:	f7ef fc64 	bl	80005f8 <__aeabi_dmul>
 8010d30:	a381      	add	r3, pc, #516	@ (adr r3, 8010f38 <__ieee754_asin+0x2f0>)
 8010d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d36:	f7ef faa9 	bl	800028c <__adddf3>
 8010d3a:	4622      	mov	r2, r4
 8010d3c:	462b      	mov	r3, r5
 8010d3e:	f7ef fc5b 	bl	80005f8 <__aeabi_dmul>
 8010d42:	a37f      	add	r3, pc, #508	@ (adr r3, 8010f40 <__ieee754_asin+0x2f8>)
 8010d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d48:	f7ef fa9e 	bl	8000288 <__aeabi_dsub>
 8010d4c:	4622      	mov	r2, r4
 8010d4e:	462b      	mov	r3, r5
 8010d50:	f7ef fc52 	bl	80005f8 <__aeabi_dmul>
 8010d54:	a37c      	add	r3, pc, #496	@ (adr r3, 8010f48 <__ieee754_asin+0x300>)
 8010d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d5a:	f7ef fa97 	bl	800028c <__adddf3>
 8010d5e:	4622      	mov	r2, r4
 8010d60:	462b      	mov	r3, r5
 8010d62:	f7ef fc49 	bl	80005f8 <__aeabi_dmul>
 8010d66:	a37a      	add	r3, pc, #488	@ (adr r3, 8010f50 <__ieee754_asin+0x308>)
 8010d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d70:	4620      	mov	r0, r4
 8010d72:	4629      	mov	r1, r5
 8010d74:	f7ef fc40 	bl	80005f8 <__aeabi_dmul>
 8010d78:	a377      	add	r3, pc, #476	@ (adr r3, 8010f58 <__ieee754_asin+0x310>)
 8010d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d7e:	f7ef fa83 	bl	8000288 <__aeabi_dsub>
 8010d82:	4622      	mov	r2, r4
 8010d84:	462b      	mov	r3, r5
 8010d86:	f7ef fc37 	bl	80005f8 <__aeabi_dmul>
 8010d8a:	a375      	add	r3, pc, #468	@ (adr r3, 8010f60 <__ieee754_asin+0x318>)
 8010d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d90:	f7ef fa7c 	bl	800028c <__adddf3>
 8010d94:	4622      	mov	r2, r4
 8010d96:	462b      	mov	r3, r5
 8010d98:	f7ef fc2e 	bl	80005f8 <__aeabi_dmul>
 8010d9c:	a372      	add	r3, pc, #456	@ (adr r3, 8010f68 <__ieee754_asin+0x320>)
 8010d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da2:	f7ef fa71 	bl	8000288 <__aeabi_dsub>
 8010da6:	4622      	mov	r2, r4
 8010da8:	462b      	mov	r3, r5
 8010daa:	f7ef fc25 	bl	80005f8 <__aeabi_dmul>
 8010dae:	4b72      	ldr	r3, [pc, #456]	@ (8010f78 <__ieee754_asin+0x330>)
 8010db0:	2200      	movs	r2, #0
 8010db2:	f7ef fa6b 	bl	800028c <__adddf3>
 8010db6:	ec45 4b10 	vmov	d0, r4, r5
 8010dba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010dbe:	f000 fba7 	bl	8011510 <__ieee754_sqrt>
 8010dc2:	4b6f      	ldr	r3, [pc, #444]	@ (8010f80 <__ieee754_asin+0x338>)
 8010dc4:	429e      	cmp	r6, r3
 8010dc6:	ec5b ab10 	vmov	sl, fp, d0
 8010dca:	f240 80db 	bls.w	8010f84 <__ieee754_asin+0x33c>
 8010dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010dd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010dd6:	f7ef fd39 	bl	800084c <__aeabi_ddiv>
 8010dda:	4652      	mov	r2, sl
 8010ddc:	465b      	mov	r3, fp
 8010dde:	f7ef fc0b 	bl	80005f8 <__aeabi_dmul>
 8010de2:	4652      	mov	r2, sl
 8010de4:	465b      	mov	r3, fp
 8010de6:	f7ef fa51 	bl	800028c <__adddf3>
 8010dea:	4602      	mov	r2, r0
 8010dec:	460b      	mov	r3, r1
 8010dee:	f7ef fa4d 	bl	800028c <__adddf3>
 8010df2:	a347      	add	r3, pc, #284	@ (adr r3, 8010f10 <__ieee754_asin+0x2c8>)
 8010df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df8:	f7ef fa46 	bl	8000288 <__aeabi_dsub>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	460b      	mov	r3, r1
 8010e00:	a141      	add	r1, pc, #260	@ (adr r1, 8010f08 <__ieee754_asin+0x2c0>)
 8010e02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e06:	f7ef fa3f 	bl	8000288 <__aeabi_dsub>
 8010e0a:	9b01      	ldr	r3, [sp, #4]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	bfdc      	itt	le
 8010e10:	4602      	movle	r2, r0
 8010e12:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8010e16:	4604      	mov	r4, r0
 8010e18:	460d      	mov	r5, r1
 8010e1a:	bfdc      	itt	le
 8010e1c:	4614      	movle	r4, r2
 8010e1e:	461d      	movle	r5, r3
 8010e20:	e746      	b.n	8010cb0 <__ieee754_asin+0x68>
 8010e22:	4622      	mov	r2, r4
 8010e24:	462b      	mov	r3, r5
 8010e26:	4620      	mov	r0, r4
 8010e28:	4629      	mov	r1, r5
 8010e2a:	f7ef fbe5 	bl	80005f8 <__aeabi_dmul>
 8010e2e:	a33c      	add	r3, pc, #240	@ (adr r3, 8010f20 <__ieee754_asin+0x2d8>)
 8010e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e34:	4606      	mov	r6, r0
 8010e36:	460f      	mov	r7, r1
 8010e38:	f7ef fbde 	bl	80005f8 <__aeabi_dmul>
 8010e3c:	a33a      	add	r3, pc, #232	@ (adr r3, 8010f28 <__ieee754_asin+0x2e0>)
 8010e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e42:	f7ef fa23 	bl	800028c <__adddf3>
 8010e46:	4632      	mov	r2, r6
 8010e48:	463b      	mov	r3, r7
 8010e4a:	f7ef fbd5 	bl	80005f8 <__aeabi_dmul>
 8010e4e:	a338      	add	r3, pc, #224	@ (adr r3, 8010f30 <__ieee754_asin+0x2e8>)
 8010e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e54:	f7ef fa18 	bl	8000288 <__aeabi_dsub>
 8010e58:	4632      	mov	r2, r6
 8010e5a:	463b      	mov	r3, r7
 8010e5c:	f7ef fbcc 	bl	80005f8 <__aeabi_dmul>
 8010e60:	a335      	add	r3, pc, #212	@ (adr r3, 8010f38 <__ieee754_asin+0x2f0>)
 8010e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e66:	f7ef fa11 	bl	800028c <__adddf3>
 8010e6a:	4632      	mov	r2, r6
 8010e6c:	463b      	mov	r3, r7
 8010e6e:	f7ef fbc3 	bl	80005f8 <__aeabi_dmul>
 8010e72:	a333      	add	r3, pc, #204	@ (adr r3, 8010f40 <__ieee754_asin+0x2f8>)
 8010e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e78:	f7ef fa06 	bl	8000288 <__aeabi_dsub>
 8010e7c:	4632      	mov	r2, r6
 8010e7e:	463b      	mov	r3, r7
 8010e80:	f7ef fbba 	bl	80005f8 <__aeabi_dmul>
 8010e84:	a330      	add	r3, pc, #192	@ (adr r3, 8010f48 <__ieee754_asin+0x300>)
 8010e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8a:	f7ef f9ff 	bl	800028c <__adddf3>
 8010e8e:	4632      	mov	r2, r6
 8010e90:	463b      	mov	r3, r7
 8010e92:	f7ef fbb1 	bl	80005f8 <__aeabi_dmul>
 8010e96:	a32e      	add	r3, pc, #184	@ (adr r3, 8010f50 <__ieee754_asin+0x308>)
 8010e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e9c:	4680      	mov	r8, r0
 8010e9e:	4689      	mov	r9, r1
 8010ea0:	4630      	mov	r0, r6
 8010ea2:	4639      	mov	r1, r7
 8010ea4:	f7ef fba8 	bl	80005f8 <__aeabi_dmul>
 8010ea8:	a32b      	add	r3, pc, #172	@ (adr r3, 8010f58 <__ieee754_asin+0x310>)
 8010eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eae:	f7ef f9eb 	bl	8000288 <__aeabi_dsub>
 8010eb2:	4632      	mov	r2, r6
 8010eb4:	463b      	mov	r3, r7
 8010eb6:	f7ef fb9f 	bl	80005f8 <__aeabi_dmul>
 8010eba:	a329      	add	r3, pc, #164	@ (adr r3, 8010f60 <__ieee754_asin+0x318>)
 8010ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec0:	f7ef f9e4 	bl	800028c <__adddf3>
 8010ec4:	4632      	mov	r2, r6
 8010ec6:	463b      	mov	r3, r7
 8010ec8:	f7ef fb96 	bl	80005f8 <__aeabi_dmul>
 8010ecc:	a326      	add	r3, pc, #152	@ (adr r3, 8010f68 <__ieee754_asin+0x320>)
 8010ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed2:	f7ef f9d9 	bl	8000288 <__aeabi_dsub>
 8010ed6:	4632      	mov	r2, r6
 8010ed8:	463b      	mov	r3, r7
 8010eda:	f7ef fb8d 	bl	80005f8 <__aeabi_dmul>
 8010ede:	4b26      	ldr	r3, [pc, #152]	@ (8010f78 <__ieee754_asin+0x330>)
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	f7ef f9d3 	bl	800028c <__adddf3>
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	460b      	mov	r3, r1
 8010eea:	4640      	mov	r0, r8
 8010eec:	4649      	mov	r1, r9
 8010eee:	f7ef fcad 	bl	800084c <__aeabi_ddiv>
 8010ef2:	4622      	mov	r2, r4
 8010ef4:	462b      	mov	r3, r5
 8010ef6:	f7ef fb7f 	bl	80005f8 <__aeabi_dmul>
 8010efa:	4602      	mov	r2, r0
 8010efc:	460b      	mov	r3, r1
 8010efe:	4620      	mov	r0, r4
 8010f00:	4629      	mov	r1, r5
 8010f02:	e6c6      	b.n	8010c92 <__ieee754_asin+0x4a>
 8010f04:	f3af 8000 	nop.w
 8010f08:	54442d18 	.word	0x54442d18
 8010f0c:	3ff921fb 	.word	0x3ff921fb
 8010f10:	33145c07 	.word	0x33145c07
 8010f14:	3c91a626 	.word	0x3c91a626
 8010f18:	8800759c 	.word	0x8800759c
 8010f1c:	7e37e43c 	.word	0x7e37e43c
 8010f20:	0dfdf709 	.word	0x0dfdf709
 8010f24:	3f023de1 	.word	0x3f023de1
 8010f28:	7501b288 	.word	0x7501b288
 8010f2c:	3f49efe0 	.word	0x3f49efe0
 8010f30:	b5688f3b 	.word	0xb5688f3b
 8010f34:	3fa48228 	.word	0x3fa48228
 8010f38:	0e884455 	.word	0x0e884455
 8010f3c:	3fc9c155 	.word	0x3fc9c155
 8010f40:	03eb6f7d 	.word	0x03eb6f7d
 8010f44:	3fd4d612 	.word	0x3fd4d612
 8010f48:	55555555 	.word	0x55555555
 8010f4c:	3fc55555 	.word	0x3fc55555
 8010f50:	b12e9282 	.word	0xb12e9282
 8010f54:	3fb3b8c5 	.word	0x3fb3b8c5
 8010f58:	1b8d0159 	.word	0x1b8d0159
 8010f5c:	3fe6066c 	.word	0x3fe6066c
 8010f60:	9c598ac8 	.word	0x9c598ac8
 8010f64:	40002ae5 	.word	0x40002ae5
 8010f68:	1c8a2d4b 	.word	0x1c8a2d4b
 8010f6c:	40033a27 	.word	0x40033a27
 8010f70:	3fefffff 	.word	0x3fefffff
 8010f74:	3fdfffff 	.word	0x3fdfffff
 8010f78:	3ff00000 	.word	0x3ff00000
 8010f7c:	3fe00000 	.word	0x3fe00000
 8010f80:	3fef3332 	.word	0x3fef3332
 8010f84:	4652      	mov	r2, sl
 8010f86:	465b      	mov	r3, fp
 8010f88:	4650      	mov	r0, sl
 8010f8a:	4659      	mov	r1, fp
 8010f8c:	f7ef f97e 	bl	800028c <__adddf3>
 8010f90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f94:	4606      	mov	r6, r0
 8010f96:	460f      	mov	r7, r1
 8010f98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f9c:	f7ef fc56 	bl	800084c <__aeabi_ddiv>
 8010fa0:	4602      	mov	r2, r0
 8010fa2:	460b      	mov	r3, r1
 8010fa4:	4630      	mov	r0, r6
 8010fa6:	4639      	mov	r1, r7
 8010fa8:	f7ef fb26 	bl	80005f8 <__aeabi_dmul>
 8010fac:	f04f 0800 	mov.w	r8, #0
 8010fb0:	4606      	mov	r6, r0
 8010fb2:	460f      	mov	r7, r1
 8010fb4:	4642      	mov	r2, r8
 8010fb6:	465b      	mov	r3, fp
 8010fb8:	4640      	mov	r0, r8
 8010fba:	4659      	mov	r1, fp
 8010fbc:	f7ef fb1c 	bl	80005f8 <__aeabi_dmul>
 8010fc0:	4602      	mov	r2, r0
 8010fc2:	460b      	mov	r3, r1
 8010fc4:	4620      	mov	r0, r4
 8010fc6:	4629      	mov	r1, r5
 8010fc8:	f7ef f95e 	bl	8000288 <__aeabi_dsub>
 8010fcc:	4642      	mov	r2, r8
 8010fce:	4604      	mov	r4, r0
 8010fd0:	460d      	mov	r5, r1
 8010fd2:	465b      	mov	r3, fp
 8010fd4:	4650      	mov	r0, sl
 8010fd6:	4659      	mov	r1, fp
 8010fd8:	f7ef f958 	bl	800028c <__adddf3>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	460b      	mov	r3, r1
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	4629      	mov	r1, r5
 8010fe4:	f7ef fc32 	bl	800084c <__aeabi_ddiv>
 8010fe8:	4602      	mov	r2, r0
 8010fea:	460b      	mov	r3, r1
 8010fec:	f7ef f94e 	bl	800028c <__adddf3>
 8010ff0:	4602      	mov	r2, r0
 8010ff2:	460b      	mov	r3, r1
 8010ff4:	a112      	add	r1, pc, #72	@ (adr r1, 8011040 <__ieee754_asin+0x3f8>)
 8010ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ffa:	f7ef f945 	bl	8000288 <__aeabi_dsub>
 8010ffe:	4602      	mov	r2, r0
 8011000:	460b      	mov	r3, r1
 8011002:	4630      	mov	r0, r6
 8011004:	4639      	mov	r1, r7
 8011006:	f7ef f93f 	bl	8000288 <__aeabi_dsub>
 801100a:	4642      	mov	r2, r8
 801100c:	4604      	mov	r4, r0
 801100e:	460d      	mov	r5, r1
 8011010:	465b      	mov	r3, fp
 8011012:	4640      	mov	r0, r8
 8011014:	4659      	mov	r1, fp
 8011016:	f7ef f939 	bl	800028c <__adddf3>
 801101a:	4602      	mov	r2, r0
 801101c:	460b      	mov	r3, r1
 801101e:	a10a      	add	r1, pc, #40	@ (adr r1, 8011048 <__ieee754_asin+0x400>)
 8011020:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011024:	f7ef f930 	bl	8000288 <__aeabi_dsub>
 8011028:	4602      	mov	r2, r0
 801102a:	460b      	mov	r3, r1
 801102c:	4620      	mov	r0, r4
 801102e:	4629      	mov	r1, r5
 8011030:	f7ef f92a 	bl	8000288 <__aeabi_dsub>
 8011034:	4602      	mov	r2, r0
 8011036:	460b      	mov	r3, r1
 8011038:	a103      	add	r1, pc, #12	@ (adr r1, 8011048 <__ieee754_asin+0x400>)
 801103a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801103e:	e6e2      	b.n	8010e06 <__ieee754_asin+0x1be>
 8011040:	33145c07 	.word	0x33145c07
 8011044:	3c91a626 	.word	0x3c91a626
 8011048:	54442d18 	.word	0x54442d18
 801104c:	3fe921fb 	.word	0x3fe921fb

08011050 <__ieee754_atan2>:
 8011050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011054:	ec57 6b11 	vmov	r6, r7, d1
 8011058:	4273      	negs	r3, r6
 801105a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80111d8 <__ieee754_atan2+0x188>
 801105e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8011062:	4333      	orrs	r3, r6
 8011064:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011068:	4543      	cmp	r3, r8
 801106a:	ec51 0b10 	vmov	r0, r1, d0
 801106e:	4635      	mov	r5, r6
 8011070:	d809      	bhi.n	8011086 <__ieee754_atan2+0x36>
 8011072:	4244      	negs	r4, r0
 8011074:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011078:	4304      	orrs	r4, r0
 801107a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801107e:	4544      	cmp	r4, r8
 8011080:	468e      	mov	lr, r1
 8011082:	4681      	mov	r9, r0
 8011084:	d907      	bls.n	8011096 <__ieee754_atan2+0x46>
 8011086:	4632      	mov	r2, r6
 8011088:	463b      	mov	r3, r7
 801108a:	f7ef f8ff 	bl	800028c <__adddf3>
 801108e:	ec41 0b10 	vmov	d0, r0, r1
 8011092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011096:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801109a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801109e:	4334      	orrs	r4, r6
 80110a0:	d103      	bne.n	80110aa <__ieee754_atan2+0x5a>
 80110a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110a6:	f000 b89b 	b.w	80111e0 <atan>
 80110aa:	17bc      	asrs	r4, r7, #30
 80110ac:	f004 0402 	and.w	r4, r4, #2
 80110b0:	ea53 0909 	orrs.w	r9, r3, r9
 80110b4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80110b8:	d107      	bne.n	80110ca <__ieee754_atan2+0x7a>
 80110ba:	2c02      	cmp	r4, #2
 80110bc:	d05f      	beq.n	801117e <__ieee754_atan2+0x12e>
 80110be:	2c03      	cmp	r4, #3
 80110c0:	d1e5      	bne.n	801108e <__ieee754_atan2+0x3e>
 80110c2:	a143      	add	r1, pc, #268	@ (adr r1, 80111d0 <__ieee754_atan2+0x180>)
 80110c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110c8:	e7e1      	b.n	801108e <__ieee754_atan2+0x3e>
 80110ca:	4315      	orrs	r5, r2
 80110cc:	d106      	bne.n	80110dc <__ieee754_atan2+0x8c>
 80110ce:	f1be 0f00 	cmp.w	lr, #0
 80110d2:	db5f      	blt.n	8011194 <__ieee754_atan2+0x144>
 80110d4:	a136      	add	r1, pc, #216	@ (adr r1, 80111b0 <__ieee754_atan2+0x160>)
 80110d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110da:	e7d8      	b.n	801108e <__ieee754_atan2+0x3e>
 80110dc:	4542      	cmp	r2, r8
 80110de:	d10f      	bne.n	8011100 <__ieee754_atan2+0xb0>
 80110e0:	4293      	cmp	r3, r2
 80110e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80110e6:	d107      	bne.n	80110f8 <__ieee754_atan2+0xa8>
 80110e8:	2c02      	cmp	r4, #2
 80110ea:	d84c      	bhi.n	8011186 <__ieee754_atan2+0x136>
 80110ec:	4b36      	ldr	r3, [pc, #216]	@ (80111c8 <__ieee754_atan2+0x178>)
 80110ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80110f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80110f6:	e7ca      	b.n	801108e <__ieee754_atan2+0x3e>
 80110f8:	2c02      	cmp	r4, #2
 80110fa:	d848      	bhi.n	801118e <__ieee754_atan2+0x13e>
 80110fc:	4b33      	ldr	r3, [pc, #204]	@ (80111cc <__ieee754_atan2+0x17c>)
 80110fe:	e7f6      	b.n	80110ee <__ieee754_atan2+0x9e>
 8011100:	4543      	cmp	r3, r8
 8011102:	d0e4      	beq.n	80110ce <__ieee754_atan2+0x7e>
 8011104:	1a9b      	subs	r3, r3, r2
 8011106:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801110a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801110e:	da1e      	bge.n	801114e <__ieee754_atan2+0xfe>
 8011110:	2f00      	cmp	r7, #0
 8011112:	da01      	bge.n	8011118 <__ieee754_atan2+0xc8>
 8011114:	323c      	adds	r2, #60	@ 0x3c
 8011116:	db1e      	blt.n	8011156 <__ieee754_atan2+0x106>
 8011118:	4632      	mov	r2, r6
 801111a:	463b      	mov	r3, r7
 801111c:	f7ef fb96 	bl	800084c <__aeabi_ddiv>
 8011120:	ec41 0b10 	vmov	d0, r0, r1
 8011124:	f7ff fcb0 	bl	8010a88 <fabs>
 8011128:	f000 f85a 	bl	80111e0 <atan>
 801112c:	ec51 0b10 	vmov	r0, r1, d0
 8011130:	2c01      	cmp	r4, #1
 8011132:	d013      	beq.n	801115c <__ieee754_atan2+0x10c>
 8011134:	2c02      	cmp	r4, #2
 8011136:	d015      	beq.n	8011164 <__ieee754_atan2+0x114>
 8011138:	2c00      	cmp	r4, #0
 801113a:	d0a8      	beq.n	801108e <__ieee754_atan2+0x3e>
 801113c:	a318      	add	r3, pc, #96	@ (adr r3, 80111a0 <__ieee754_atan2+0x150>)
 801113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011142:	f7ef f8a1 	bl	8000288 <__aeabi_dsub>
 8011146:	a318      	add	r3, pc, #96	@ (adr r3, 80111a8 <__ieee754_atan2+0x158>)
 8011148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114c:	e014      	b.n	8011178 <__ieee754_atan2+0x128>
 801114e:	a118      	add	r1, pc, #96	@ (adr r1, 80111b0 <__ieee754_atan2+0x160>)
 8011150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011154:	e7ec      	b.n	8011130 <__ieee754_atan2+0xe0>
 8011156:	2000      	movs	r0, #0
 8011158:	2100      	movs	r1, #0
 801115a:	e7e9      	b.n	8011130 <__ieee754_atan2+0xe0>
 801115c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011160:	4619      	mov	r1, r3
 8011162:	e794      	b.n	801108e <__ieee754_atan2+0x3e>
 8011164:	a30e      	add	r3, pc, #56	@ (adr r3, 80111a0 <__ieee754_atan2+0x150>)
 8011166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801116a:	f7ef f88d 	bl	8000288 <__aeabi_dsub>
 801116e:	4602      	mov	r2, r0
 8011170:	460b      	mov	r3, r1
 8011172:	a10d      	add	r1, pc, #52	@ (adr r1, 80111a8 <__ieee754_atan2+0x158>)
 8011174:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011178:	f7ef f886 	bl	8000288 <__aeabi_dsub>
 801117c:	e787      	b.n	801108e <__ieee754_atan2+0x3e>
 801117e:	a10a      	add	r1, pc, #40	@ (adr r1, 80111a8 <__ieee754_atan2+0x158>)
 8011180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011184:	e783      	b.n	801108e <__ieee754_atan2+0x3e>
 8011186:	a10c      	add	r1, pc, #48	@ (adr r1, 80111b8 <__ieee754_atan2+0x168>)
 8011188:	e9d1 0100 	ldrd	r0, r1, [r1]
 801118c:	e77f      	b.n	801108e <__ieee754_atan2+0x3e>
 801118e:	2000      	movs	r0, #0
 8011190:	2100      	movs	r1, #0
 8011192:	e77c      	b.n	801108e <__ieee754_atan2+0x3e>
 8011194:	a10a      	add	r1, pc, #40	@ (adr r1, 80111c0 <__ieee754_atan2+0x170>)
 8011196:	e9d1 0100 	ldrd	r0, r1, [r1]
 801119a:	e778      	b.n	801108e <__ieee754_atan2+0x3e>
 801119c:	f3af 8000 	nop.w
 80111a0:	33145c07 	.word	0x33145c07
 80111a4:	3ca1a626 	.word	0x3ca1a626
 80111a8:	54442d18 	.word	0x54442d18
 80111ac:	400921fb 	.word	0x400921fb
 80111b0:	54442d18 	.word	0x54442d18
 80111b4:	3ff921fb 	.word	0x3ff921fb
 80111b8:	54442d18 	.word	0x54442d18
 80111bc:	3fe921fb 	.word	0x3fe921fb
 80111c0:	54442d18 	.word	0x54442d18
 80111c4:	bff921fb 	.word	0xbff921fb
 80111c8:	08012df0 	.word	0x08012df0
 80111cc:	08012dd8 	.word	0x08012dd8
 80111d0:	54442d18 	.word	0x54442d18
 80111d4:	c00921fb 	.word	0xc00921fb
 80111d8:	7ff00000 	.word	0x7ff00000
 80111dc:	00000000 	.word	0x00000000

080111e0 <atan>:
 80111e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111e4:	ec55 4b10 	vmov	r4, r5, d0
 80111e8:	4bbf      	ldr	r3, [pc, #764]	@ (80114e8 <atan+0x308>)
 80111ea:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80111ee:	429e      	cmp	r6, r3
 80111f0:	46ab      	mov	fp, r5
 80111f2:	d918      	bls.n	8011226 <atan+0x46>
 80111f4:	4bbd      	ldr	r3, [pc, #756]	@ (80114ec <atan+0x30c>)
 80111f6:	429e      	cmp	r6, r3
 80111f8:	d801      	bhi.n	80111fe <atan+0x1e>
 80111fa:	d109      	bne.n	8011210 <atan+0x30>
 80111fc:	b144      	cbz	r4, 8011210 <atan+0x30>
 80111fe:	4622      	mov	r2, r4
 8011200:	462b      	mov	r3, r5
 8011202:	4620      	mov	r0, r4
 8011204:	4629      	mov	r1, r5
 8011206:	f7ef f841 	bl	800028c <__adddf3>
 801120a:	4604      	mov	r4, r0
 801120c:	460d      	mov	r5, r1
 801120e:	e006      	b.n	801121e <atan+0x3e>
 8011210:	f1bb 0f00 	cmp.w	fp, #0
 8011214:	f340 812b 	ble.w	801146e <atan+0x28e>
 8011218:	a597      	add	r5, pc, #604	@ (adr r5, 8011478 <atan+0x298>)
 801121a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801121e:	ec45 4b10 	vmov	d0, r4, r5
 8011222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011226:	4bb2      	ldr	r3, [pc, #712]	@ (80114f0 <atan+0x310>)
 8011228:	429e      	cmp	r6, r3
 801122a:	d813      	bhi.n	8011254 <atan+0x74>
 801122c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8011230:	429e      	cmp	r6, r3
 8011232:	d80c      	bhi.n	801124e <atan+0x6e>
 8011234:	a392      	add	r3, pc, #584	@ (adr r3, 8011480 <atan+0x2a0>)
 8011236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123a:	4620      	mov	r0, r4
 801123c:	4629      	mov	r1, r5
 801123e:	f7ef f825 	bl	800028c <__adddf3>
 8011242:	4bac      	ldr	r3, [pc, #688]	@ (80114f4 <atan+0x314>)
 8011244:	2200      	movs	r2, #0
 8011246:	f7ef fc67 	bl	8000b18 <__aeabi_dcmpgt>
 801124a:	2800      	cmp	r0, #0
 801124c:	d1e7      	bne.n	801121e <atan+0x3e>
 801124e:	f04f 3aff 	mov.w	sl, #4294967295
 8011252:	e029      	b.n	80112a8 <atan+0xc8>
 8011254:	f7ff fc18 	bl	8010a88 <fabs>
 8011258:	4ba7      	ldr	r3, [pc, #668]	@ (80114f8 <atan+0x318>)
 801125a:	429e      	cmp	r6, r3
 801125c:	ec55 4b10 	vmov	r4, r5, d0
 8011260:	f200 80bc 	bhi.w	80113dc <atan+0x1fc>
 8011264:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8011268:	429e      	cmp	r6, r3
 801126a:	f200 809e 	bhi.w	80113aa <atan+0x1ca>
 801126e:	4622      	mov	r2, r4
 8011270:	462b      	mov	r3, r5
 8011272:	4620      	mov	r0, r4
 8011274:	4629      	mov	r1, r5
 8011276:	f7ef f809 	bl	800028c <__adddf3>
 801127a:	4b9e      	ldr	r3, [pc, #632]	@ (80114f4 <atan+0x314>)
 801127c:	2200      	movs	r2, #0
 801127e:	f7ef f803 	bl	8000288 <__aeabi_dsub>
 8011282:	2200      	movs	r2, #0
 8011284:	4606      	mov	r6, r0
 8011286:	460f      	mov	r7, r1
 8011288:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801128c:	4620      	mov	r0, r4
 801128e:	4629      	mov	r1, r5
 8011290:	f7ee fffc 	bl	800028c <__adddf3>
 8011294:	4602      	mov	r2, r0
 8011296:	460b      	mov	r3, r1
 8011298:	4630      	mov	r0, r6
 801129a:	4639      	mov	r1, r7
 801129c:	f7ef fad6 	bl	800084c <__aeabi_ddiv>
 80112a0:	f04f 0a00 	mov.w	sl, #0
 80112a4:	4604      	mov	r4, r0
 80112a6:	460d      	mov	r5, r1
 80112a8:	4622      	mov	r2, r4
 80112aa:	462b      	mov	r3, r5
 80112ac:	4620      	mov	r0, r4
 80112ae:	4629      	mov	r1, r5
 80112b0:	f7ef f9a2 	bl	80005f8 <__aeabi_dmul>
 80112b4:	4602      	mov	r2, r0
 80112b6:	460b      	mov	r3, r1
 80112b8:	4680      	mov	r8, r0
 80112ba:	4689      	mov	r9, r1
 80112bc:	f7ef f99c 	bl	80005f8 <__aeabi_dmul>
 80112c0:	a371      	add	r3, pc, #452	@ (adr r3, 8011488 <atan+0x2a8>)
 80112c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c6:	4606      	mov	r6, r0
 80112c8:	460f      	mov	r7, r1
 80112ca:	f7ef f995 	bl	80005f8 <__aeabi_dmul>
 80112ce:	a370      	add	r3, pc, #448	@ (adr r3, 8011490 <atan+0x2b0>)
 80112d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d4:	f7ee ffda 	bl	800028c <__adddf3>
 80112d8:	4632      	mov	r2, r6
 80112da:	463b      	mov	r3, r7
 80112dc:	f7ef f98c 	bl	80005f8 <__aeabi_dmul>
 80112e0:	a36d      	add	r3, pc, #436	@ (adr r3, 8011498 <atan+0x2b8>)
 80112e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e6:	f7ee ffd1 	bl	800028c <__adddf3>
 80112ea:	4632      	mov	r2, r6
 80112ec:	463b      	mov	r3, r7
 80112ee:	f7ef f983 	bl	80005f8 <__aeabi_dmul>
 80112f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80114a0 <atan+0x2c0>)
 80112f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f8:	f7ee ffc8 	bl	800028c <__adddf3>
 80112fc:	4632      	mov	r2, r6
 80112fe:	463b      	mov	r3, r7
 8011300:	f7ef f97a 	bl	80005f8 <__aeabi_dmul>
 8011304:	a368      	add	r3, pc, #416	@ (adr r3, 80114a8 <atan+0x2c8>)
 8011306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130a:	f7ee ffbf 	bl	800028c <__adddf3>
 801130e:	4632      	mov	r2, r6
 8011310:	463b      	mov	r3, r7
 8011312:	f7ef f971 	bl	80005f8 <__aeabi_dmul>
 8011316:	a366      	add	r3, pc, #408	@ (adr r3, 80114b0 <atan+0x2d0>)
 8011318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801131c:	f7ee ffb6 	bl	800028c <__adddf3>
 8011320:	4642      	mov	r2, r8
 8011322:	464b      	mov	r3, r9
 8011324:	f7ef f968 	bl	80005f8 <__aeabi_dmul>
 8011328:	a363      	add	r3, pc, #396	@ (adr r3, 80114b8 <atan+0x2d8>)
 801132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801132e:	4680      	mov	r8, r0
 8011330:	4689      	mov	r9, r1
 8011332:	4630      	mov	r0, r6
 8011334:	4639      	mov	r1, r7
 8011336:	f7ef f95f 	bl	80005f8 <__aeabi_dmul>
 801133a:	a361      	add	r3, pc, #388	@ (adr r3, 80114c0 <atan+0x2e0>)
 801133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011340:	f7ee ffa2 	bl	8000288 <__aeabi_dsub>
 8011344:	4632      	mov	r2, r6
 8011346:	463b      	mov	r3, r7
 8011348:	f7ef f956 	bl	80005f8 <__aeabi_dmul>
 801134c:	a35e      	add	r3, pc, #376	@ (adr r3, 80114c8 <atan+0x2e8>)
 801134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011352:	f7ee ff99 	bl	8000288 <__aeabi_dsub>
 8011356:	4632      	mov	r2, r6
 8011358:	463b      	mov	r3, r7
 801135a:	f7ef f94d 	bl	80005f8 <__aeabi_dmul>
 801135e:	a35c      	add	r3, pc, #368	@ (adr r3, 80114d0 <atan+0x2f0>)
 8011360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011364:	f7ee ff90 	bl	8000288 <__aeabi_dsub>
 8011368:	4632      	mov	r2, r6
 801136a:	463b      	mov	r3, r7
 801136c:	f7ef f944 	bl	80005f8 <__aeabi_dmul>
 8011370:	a359      	add	r3, pc, #356	@ (adr r3, 80114d8 <atan+0x2f8>)
 8011372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011376:	f7ee ff87 	bl	8000288 <__aeabi_dsub>
 801137a:	4632      	mov	r2, r6
 801137c:	463b      	mov	r3, r7
 801137e:	f7ef f93b 	bl	80005f8 <__aeabi_dmul>
 8011382:	4602      	mov	r2, r0
 8011384:	460b      	mov	r3, r1
 8011386:	4640      	mov	r0, r8
 8011388:	4649      	mov	r1, r9
 801138a:	f7ee ff7f 	bl	800028c <__adddf3>
 801138e:	4622      	mov	r2, r4
 8011390:	462b      	mov	r3, r5
 8011392:	f7ef f931 	bl	80005f8 <__aeabi_dmul>
 8011396:	f1ba 3fff 	cmp.w	sl, #4294967295
 801139a:	4602      	mov	r2, r0
 801139c:	460b      	mov	r3, r1
 801139e:	d148      	bne.n	8011432 <atan+0x252>
 80113a0:	4620      	mov	r0, r4
 80113a2:	4629      	mov	r1, r5
 80113a4:	f7ee ff70 	bl	8000288 <__aeabi_dsub>
 80113a8:	e72f      	b.n	801120a <atan+0x2a>
 80113aa:	4b52      	ldr	r3, [pc, #328]	@ (80114f4 <atan+0x314>)
 80113ac:	2200      	movs	r2, #0
 80113ae:	4620      	mov	r0, r4
 80113b0:	4629      	mov	r1, r5
 80113b2:	f7ee ff69 	bl	8000288 <__aeabi_dsub>
 80113b6:	4b4f      	ldr	r3, [pc, #316]	@ (80114f4 <atan+0x314>)
 80113b8:	4606      	mov	r6, r0
 80113ba:	460f      	mov	r7, r1
 80113bc:	2200      	movs	r2, #0
 80113be:	4620      	mov	r0, r4
 80113c0:	4629      	mov	r1, r5
 80113c2:	f7ee ff63 	bl	800028c <__adddf3>
 80113c6:	4602      	mov	r2, r0
 80113c8:	460b      	mov	r3, r1
 80113ca:	4630      	mov	r0, r6
 80113cc:	4639      	mov	r1, r7
 80113ce:	f7ef fa3d 	bl	800084c <__aeabi_ddiv>
 80113d2:	f04f 0a01 	mov.w	sl, #1
 80113d6:	4604      	mov	r4, r0
 80113d8:	460d      	mov	r5, r1
 80113da:	e765      	b.n	80112a8 <atan+0xc8>
 80113dc:	4b47      	ldr	r3, [pc, #284]	@ (80114fc <atan+0x31c>)
 80113de:	429e      	cmp	r6, r3
 80113e0:	d21c      	bcs.n	801141c <atan+0x23c>
 80113e2:	4b47      	ldr	r3, [pc, #284]	@ (8011500 <atan+0x320>)
 80113e4:	2200      	movs	r2, #0
 80113e6:	4620      	mov	r0, r4
 80113e8:	4629      	mov	r1, r5
 80113ea:	f7ee ff4d 	bl	8000288 <__aeabi_dsub>
 80113ee:	4b44      	ldr	r3, [pc, #272]	@ (8011500 <atan+0x320>)
 80113f0:	4606      	mov	r6, r0
 80113f2:	460f      	mov	r7, r1
 80113f4:	2200      	movs	r2, #0
 80113f6:	4620      	mov	r0, r4
 80113f8:	4629      	mov	r1, r5
 80113fa:	f7ef f8fd 	bl	80005f8 <__aeabi_dmul>
 80113fe:	4b3d      	ldr	r3, [pc, #244]	@ (80114f4 <atan+0x314>)
 8011400:	2200      	movs	r2, #0
 8011402:	f7ee ff43 	bl	800028c <__adddf3>
 8011406:	4602      	mov	r2, r0
 8011408:	460b      	mov	r3, r1
 801140a:	4630      	mov	r0, r6
 801140c:	4639      	mov	r1, r7
 801140e:	f7ef fa1d 	bl	800084c <__aeabi_ddiv>
 8011412:	f04f 0a02 	mov.w	sl, #2
 8011416:	4604      	mov	r4, r0
 8011418:	460d      	mov	r5, r1
 801141a:	e745      	b.n	80112a8 <atan+0xc8>
 801141c:	4622      	mov	r2, r4
 801141e:	462b      	mov	r3, r5
 8011420:	4938      	ldr	r1, [pc, #224]	@ (8011504 <atan+0x324>)
 8011422:	2000      	movs	r0, #0
 8011424:	f7ef fa12 	bl	800084c <__aeabi_ddiv>
 8011428:	f04f 0a03 	mov.w	sl, #3
 801142c:	4604      	mov	r4, r0
 801142e:	460d      	mov	r5, r1
 8011430:	e73a      	b.n	80112a8 <atan+0xc8>
 8011432:	4b35      	ldr	r3, [pc, #212]	@ (8011508 <atan+0x328>)
 8011434:	4e35      	ldr	r6, [pc, #212]	@ (801150c <atan+0x32c>)
 8011436:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801143e:	f7ee ff23 	bl	8000288 <__aeabi_dsub>
 8011442:	4622      	mov	r2, r4
 8011444:	462b      	mov	r3, r5
 8011446:	f7ee ff1f 	bl	8000288 <__aeabi_dsub>
 801144a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801144e:	4602      	mov	r2, r0
 8011450:	460b      	mov	r3, r1
 8011452:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011456:	f7ee ff17 	bl	8000288 <__aeabi_dsub>
 801145a:	f1bb 0f00 	cmp.w	fp, #0
 801145e:	4604      	mov	r4, r0
 8011460:	460d      	mov	r5, r1
 8011462:	f6bf aedc 	bge.w	801121e <atan+0x3e>
 8011466:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801146a:	461d      	mov	r5, r3
 801146c:	e6d7      	b.n	801121e <atan+0x3e>
 801146e:	a51c      	add	r5, pc, #112	@ (adr r5, 80114e0 <atan+0x300>)
 8011470:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011474:	e6d3      	b.n	801121e <atan+0x3e>
 8011476:	bf00      	nop
 8011478:	54442d18 	.word	0x54442d18
 801147c:	3ff921fb 	.word	0x3ff921fb
 8011480:	8800759c 	.word	0x8800759c
 8011484:	7e37e43c 	.word	0x7e37e43c
 8011488:	e322da11 	.word	0xe322da11
 801148c:	3f90ad3a 	.word	0x3f90ad3a
 8011490:	24760deb 	.word	0x24760deb
 8011494:	3fa97b4b 	.word	0x3fa97b4b
 8011498:	a0d03d51 	.word	0xa0d03d51
 801149c:	3fb10d66 	.word	0x3fb10d66
 80114a0:	c54c206e 	.word	0xc54c206e
 80114a4:	3fb745cd 	.word	0x3fb745cd
 80114a8:	920083ff 	.word	0x920083ff
 80114ac:	3fc24924 	.word	0x3fc24924
 80114b0:	5555550d 	.word	0x5555550d
 80114b4:	3fd55555 	.word	0x3fd55555
 80114b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80114bc:	bfa2b444 	.word	0xbfa2b444
 80114c0:	52defd9a 	.word	0x52defd9a
 80114c4:	3fadde2d 	.word	0x3fadde2d
 80114c8:	af749a6d 	.word	0xaf749a6d
 80114cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80114d0:	fe231671 	.word	0xfe231671
 80114d4:	3fbc71c6 	.word	0x3fbc71c6
 80114d8:	9998ebc4 	.word	0x9998ebc4
 80114dc:	3fc99999 	.word	0x3fc99999
 80114e0:	54442d18 	.word	0x54442d18
 80114e4:	bff921fb 	.word	0xbff921fb
 80114e8:	440fffff 	.word	0x440fffff
 80114ec:	7ff00000 	.word	0x7ff00000
 80114f0:	3fdbffff 	.word	0x3fdbffff
 80114f4:	3ff00000 	.word	0x3ff00000
 80114f8:	3ff2ffff 	.word	0x3ff2ffff
 80114fc:	40038000 	.word	0x40038000
 8011500:	3ff80000 	.word	0x3ff80000
 8011504:	bff00000 	.word	0xbff00000
 8011508:	08012e08 	.word	0x08012e08
 801150c:	08012e28 	.word	0x08012e28

08011510 <__ieee754_sqrt>:
 8011510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011514:	4a66      	ldr	r2, [pc, #408]	@ (80116b0 <__ieee754_sqrt+0x1a0>)
 8011516:	ec55 4b10 	vmov	r4, r5, d0
 801151a:	43aa      	bics	r2, r5
 801151c:	462b      	mov	r3, r5
 801151e:	4621      	mov	r1, r4
 8011520:	d110      	bne.n	8011544 <__ieee754_sqrt+0x34>
 8011522:	4622      	mov	r2, r4
 8011524:	4620      	mov	r0, r4
 8011526:	4629      	mov	r1, r5
 8011528:	f7ef f866 	bl	80005f8 <__aeabi_dmul>
 801152c:	4602      	mov	r2, r0
 801152e:	460b      	mov	r3, r1
 8011530:	4620      	mov	r0, r4
 8011532:	4629      	mov	r1, r5
 8011534:	f7ee feaa 	bl	800028c <__adddf3>
 8011538:	4604      	mov	r4, r0
 801153a:	460d      	mov	r5, r1
 801153c:	ec45 4b10 	vmov	d0, r4, r5
 8011540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011544:	2d00      	cmp	r5, #0
 8011546:	dc0e      	bgt.n	8011566 <__ieee754_sqrt+0x56>
 8011548:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801154c:	4322      	orrs	r2, r4
 801154e:	d0f5      	beq.n	801153c <__ieee754_sqrt+0x2c>
 8011550:	b19d      	cbz	r5, 801157a <__ieee754_sqrt+0x6a>
 8011552:	4622      	mov	r2, r4
 8011554:	4620      	mov	r0, r4
 8011556:	4629      	mov	r1, r5
 8011558:	f7ee fe96 	bl	8000288 <__aeabi_dsub>
 801155c:	4602      	mov	r2, r0
 801155e:	460b      	mov	r3, r1
 8011560:	f7ef f974 	bl	800084c <__aeabi_ddiv>
 8011564:	e7e8      	b.n	8011538 <__ieee754_sqrt+0x28>
 8011566:	152a      	asrs	r2, r5, #20
 8011568:	d115      	bne.n	8011596 <__ieee754_sqrt+0x86>
 801156a:	2000      	movs	r0, #0
 801156c:	e009      	b.n	8011582 <__ieee754_sqrt+0x72>
 801156e:	0acb      	lsrs	r3, r1, #11
 8011570:	3a15      	subs	r2, #21
 8011572:	0549      	lsls	r1, r1, #21
 8011574:	2b00      	cmp	r3, #0
 8011576:	d0fa      	beq.n	801156e <__ieee754_sqrt+0x5e>
 8011578:	e7f7      	b.n	801156a <__ieee754_sqrt+0x5a>
 801157a:	462a      	mov	r2, r5
 801157c:	e7fa      	b.n	8011574 <__ieee754_sqrt+0x64>
 801157e:	005b      	lsls	r3, r3, #1
 8011580:	3001      	adds	r0, #1
 8011582:	02dc      	lsls	r4, r3, #11
 8011584:	d5fb      	bpl.n	801157e <__ieee754_sqrt+0x6e>
 8011586:	1e44      	subs	r4, r0, #1
 8011588:	1b12      	subs	r2, r2, r4
 801158a:	f1c0 0420 	rsb	r4, r0, #32
 801158e:	fa21 f404 	lsr.w	r4, r1, r4
 8011592:	4323      	orrs	r3, r4
 8011594:	4081      	lsls	r1, r0
 8011596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801159a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801159e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80115a2:	07d2      	lsls	r2, r2, #31
 80115a4:	bf5c      	itt	pl
 80115a6:	005b      	lslpl	r3, r3, #1
 80115a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80115ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80115b0:	bf58      	it	pl
 80115b2:	0049      	lslpl	r1, r1, #1
 80115b4:	2600      	movs	r6, #0
 80115b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80115ba:	107f      	asrs	r7, r7, #1
 80115bc:	0049      	lsls	r1, r1, #1
 80115be:	2016      	movs	r0, #22
 80115c0:	4632      	mov	r2, r6
 80115c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80115c6:	1915      	adds	r5, r2, r4
 80115c8:	429d      	cmp	r5, r3
 80115ca:	bfde      	ittt	le
 80115cc:	192a      	addle	r2, r5, r4
 80115ce:	1b5b      	suble	r3, r3, r5
 80115d0:	1936      	addle	r6, r6, r4
 80115d2:	0fcd      	lsrs	r5, r1, #31
 80115d4:	3801      	subs	r0, #1
 80115d6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80115da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80115de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80115e2:	d1f0      	bne.n	80115c6 <__ieee754_sqrt+0xb6>
 80115e4:	4605      	mov	r5, r0
 80115e6:	2420      	movs	r4, #32
 80115e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80115ec:	4293      	cmp	r3, r2
 80115ee:	eb0c 0e00 	add.w	lr, ip, r0
 80115f2:	dc02      	bgt.n	80115fa <__ieee754_sqrt+0xea>
 80115f4:	d113      	bne.n	801161e <__ieee754_sqrt+0x10e>
 80115f6:	458e      	cmp	lr, r1
 80115f8:	d811      	bhi.n	801161e <__ieee754_sqrt+0x10e>
 80115fa:	f1be 0f00 	cmp.w	lr, #0
 80115fe:	eb0e 000c 	add.w	r0, lr, ip
 8011602:	da3f      	bge.n	8011684 <__ieee754_sqrt+0x174>
 8011604:	2800      	cmp	r0, #0
 8011606:	db3d      	blt.n	8011684 <__ieee754_sqrt+0x174>
 8011608:	f102 0801 	add.w	r8, r2, #1
 801160c:	1a9b      	subs	r3, r3, r2
 801160e:	458e      	cmp	lr, r1
 8011610:	bf88      	it	hi
 8011612:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011616:	eba1 010e 	sub.w	r1, r1, lr
 801161a:	4465      	add	r5, ip
 801161c:	4642      	mov	r2, r8
 801161e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8011622:	3c01      	subs	r4, #1
 8011624:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011628:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801162c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011630:	d1dc      	bne.n	80115ec <__ieee754_sqrt+0xdc>
 8011632:	4319      	orrs	r1, r3
 8011634:	d01b      	beq.n	801166e <__ieee754_sqrt+0x15e>
 8011636:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80116b4 <__ieee754_sqrt+0x1a4>
 801163a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80116b8 <__ieee754_sqrt+0x1a8>
 801163e:	e9da 0100 	ldrd	r0, r1, [sl]
 8011642:	e9db 2300 	ldrd	r2, r3, [fp]
 8011646:	f7ee fe1f 	bl	8000288 <__aeabi_dsub>
 801164a:	e9da 8900 	ldrd	r8, r9, [sl]
 801164e:	4602      	mov	r2, r0
 8011650:	460b      	mov	r3, r1
 8011652:	4640      	mov	r0, r8
 8011654:	4649      	mov	r1, r9
 8011656:	f7ef fa4b 	bl	8000af0 <__aeabi_dcmple>
 801165a:	b140      	cbz	r0, 801166e <__ieee754_sqrt+0x15e>
 801165c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8011660:	e9da 0100 	ldrd	r0, r1, [sl]
 8011664:	e9db 2300 	ldrd	r2, r3, [fp]
 8011668:	d10e      	bne.n	8011688 <__ieee754_sqrt+0x178>
 801166a:	3601      	adds	r6, #1
 801166c:	4625      	mov	r5, r4
 801166e:	1073      	asrs	r3, r6, #1
 8011670:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8011674:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8011678:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 801167c:	086b      	lsrs	r3, r5, #1
 801167e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8011682:	e759      	b.n	8011538 <__ieee754_sqrt+0x28>
 8011684:	4690      	mov	r8, r2
 8011686:	e7c1      	b.n	801160c <__ieee754_sqrt+0xfc>
 8011688:	f7ee fe00 	bl	800028c <__adddf3>
 801168c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011690:	4602      	mov	r2, r0
 8011692:	460b      	mov	r3, r1
 8011694:	4640      	mov	r0, r8
 8011696:	4649      	mov	r1, r9
 8011698:	f7ef fa20 	bl	8000adc <__aeabi_dcmplt>
 801169c:	b120      	cbz	r0, 80116a8 <__ieee754_sqrt+0x198>
 801169e:	1cab      	adds	r3, r5, #2
 80116a0:	bf08      	it	eq
 80116a2:	3601      	addeq	r6, #1
 80116a4:	3502      	adds	r5, #2
 80116a6:	e7e2      	b.n	801166e <__ieee754_sqrt+0x15e>
 80116a8:	1c6b      	adds	r3, r5, #1
 80116aa:	f023 0501 	bic.w	r5, r3, #1
 80116ae:	e7de      	b.n	801166e <__ieee754_sqrt+0x15e>
 80116b0:	7ff00000 	.word	0x7ff00000
 80116b4:	08012e50 	.word	0x08012e50
 80116b8:	08012e48 	.word	0x08012e48

080116bc <_init>:
 80116bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116be:	bf00      	nop
 80116c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116c2:	bc08      	pop	{r3}
 80116c4:	469e      	mov	lr, r3
 80116c6:	4770      	bx	lr

080116c8 <_fini>:
 80116c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ca:	bf00      	nop
 80116cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116ce:	bc08      	pop	{r3}
 80116d0:	469e      	mov	lr, r3
 80116d2:	4770      	bx	lr
