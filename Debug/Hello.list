
Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001798  08014bf0  08014bf0  00015bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016388  08016388  000182ac  2**0
                  CONTENTS
  4 .ARM          00000008  08016388  08016388  00017388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016390  08016390  000182ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016390  08016390  00017390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016394  08016394  00017394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  08016398  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000182ac  2**0
                  CONTENTS
 10 .bss          00000930  200002ac  200002ac  000182ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bdc  20000bdc  000182ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000182ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d2c  00000000  00000000  000182dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003999  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c0  00000000  00000000  000349a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001135  00000000  00000000  00035f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f76  00000000  00000000  0003709d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dceb  00000000  00000000  0005d013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d78ac  00000000  00000000  0007acfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001525aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f38  00000000  00000000  001525f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00159528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002ac 	.word	0x200002ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014bd4 	.word	0x08014bd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b0 	.word	0x200002b0
 80001cc:	08014bd4 	.word	0x08014bd4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9d3 	b.w	8001050 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b988 	b.w	8001050 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	468e      	mov	lr, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	4688      	mov	r8, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4617      	mov	r7, r2
 8000d6c:	d962      	bls.n	8000e34 <__udivmoddi4+0xdc>
 8000d6e:	fab2 f682 	clz	r6, r2
 8000d72:	b14e      	cbz	r6, 8000d88 <__udivmoddi4+0x30>
 8000d74:	f1c6 0320 	rsb	r3, r6, #32
 8000d78:	fa01 f806 	lsl.w	r8, r1, r6
 8000d7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d80:	40b7      	lsls	r7, r6
 8000d82:	ea43 0808 	orr.w	r8, r3, r8
 8000d86:	40b4      	lsls	r4, r6
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	fa1f fc87 	uxth.w	ip, r7
 8000d90:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d94:	0c23      	lsrs	r3, r4, #16
 8000d96:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9e:	fb01 f20c 	mul.w	r2, r1, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dac:	f080 80ea 	bcs.w	8000f84 <__udivmoddi4+0x22c>
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f240 80e7 	bls.w	8000f84 <__udivmoddi4+0x22c>
 8000db6:	3902      	subs	r1, #2
 8000db8:	443b      	add	r3, r7
 8000dba:	1a9a      	subs	r2, r3, r2
 8000dbc:	b2a3      	uxth	r3, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dca:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dce:	459c      	cmp	ip, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x8e>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd8:	f080 80d6 	bcs.w	8000f88 <__udivmoddi4+0x230>
 8000ddc:	459c      	cmp	ip, r3
 8000dde:	f240 80d3 	bls.w	8000f88 <__udivmoddi4+0x230>
 8000de2:	443b      	add	r3, r7
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dea:	eba3 030c 	sub.w	r3, r3, ip
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40f3      	lsrs	r3, r6
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xb6>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb0>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x14c>
 8000e16:	4573      	cmp	r3, lr
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xc8>
 8000e1a:	4282      	cmp	r2, r0
 8000e1c:	f200 8105 	bhi.w	800102a <__udivmoddi4+0x2d2>
 8000e20:	1a84      	subs	r4, r0, r2
 8000e22:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	4690      	mov	r8, r2
 8000e2a:	2d00      	cmp	r5, #0
 8000e2c:	d0e5      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e2e:	e9c5 4800 	strd	r4, r8, [r5]
 8000e32:	e7e2      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f000 8090 	beq.w	8000f5a <__udivmoddi4+0x202>
 8000e3a:	fab2 f682 	clz	r6, r2
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	f040 80a4 	bne.w	8000f8c <__udivmoddi4+0x234>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	0c03      	lsrs	r3, r0, #16
 8000e48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4c:	b280      	uxth	r0, r0
 8000e4e:	b2bc      	uxth	r4, r7
 8000e50:	2101      	movs	r1, #1
 8000e52:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e56:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x11e>
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x11c>
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	f200 80e0 	bhi.w	8001034 <__udivmoddi4+0x2dc>
 8000e74:	46c4      	mov	ip, r8
 8000e76:	1a9b      	subs	r3, r3, r2
 8000e78:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e7c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e80:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e84:	fb02 f404 	mul.w	r4, r2, r4
 8000e88:	429c      	cmp	r4, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x144>
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x142>
 8000e94:	429c      	cmp	r4, r3
 8000e96:	f200 80ca 	bhi.w	800102e <__udivmoddi4+0x2d6>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	1b1b      	subs	r3, r3, r4
 8000e9e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x98>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb4:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ebc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ec0:	4323      	orrs	r3, r4
 8000ec2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec6:	fa1f fc87 	uxth.w	ip, r7
 8000eca:	fbbe f0f9 	udiv	r0, lr, r9
 8000ece:	0c1c      	lsrs	r4, r3, #16
 8000ed0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000edc:	45a6      	cmp	lr, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d909      	bls.n	8000ef8 <__udivmoddi4+0x1a0>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eea:	f080 809c 	bcs.w	8001026 <__udivmoddi4+0x2ce>
 8000eee:	45a6      	cmp	lr, r4
 8000ef0:	f240 8099 	bls.w	8001026 <__udivmoddi4+0x2ce>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	eba4 040e 	sub.w	r4, r4, lr
 8000efc:	fa1f fe83 	uxth.w	lr, r3
 8000f00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f04:	fb09 4413 	mls	r4, r9, r3, r4
 8000f08:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f0c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f10:	45a4      	cmp	ip, r4
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1ce>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f1a:	f080 8082 	bcs.w	8001022 <__udivmoddi4+0x2ca>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d97f      	bls.n	8001022 <__udivmoddi4+0x2ca>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f2a:	eba4 040c 	sub.w	r4, r4, ip
 8000f2e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f32:	4564      	cmp	r4, ip
 8000f34:	4673      	mov	r3, lr
 8000f36:	46e1      	mov	r9, ip
 8000f38:	d362      	bcc.n	8001000 <__udivmoddi4+0x2a8>
 8000f3a:	d05f      	beq.n	8000ffc <__udivmoddi4+0x2a4>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x1fe>
 8000f3e:	ebb8 0203 	subs.w	r2, r8, r3
 8000f42:	eb64 0409 	sbc.w	r4, r4, r9
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4e:	431e      	orrs	r6, r3
 8000f50:	40cc      	lsrs	r4, r1
 8000f52:	e9c5 6400 	strd	r6, r4, [r5]
 8000f56:	2100      	movs	r1, #0
 8000f58:	e74f      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000f5a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5e:	0c01      	lsrs	r1, r0, #16
 8000f60:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f64:	b280      	uxth	r0, r0
 8000f66:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	463c      	mov	r4, r7
 8000f70:	46b8      	mov	r8, r7
 8000f72:	46be      	mov	lr, r7
 8000f74:	2620      	movs	r6, #32
 8000f76:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f7a:	eba2 0208 	sub.w	r2, r2, r8
 8000f7e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f82:	e766      	b.n	8000e52 <__udivmoddi4+0xfa>
 8000f84:	4601      	mov	r1, r0
 8000f86:	e718      	b.n	8000dba <__udivmoddi4+0x62>
 8000f88:	4610      	mov	r0, r2
 8000f8a:	e72c      	b.n	8000de6 <__udivmoddi4+0x8e>
 8000f8c:	f1c6 0220 	rsb	r2, r6, #32
 8000f90:	fa2e f302 	lsr.w	r3, lr, r2
 8000f94:	40b7      	lsls	r7, r6
 8000f96:	40b1      	lsls	r1, r6
 8000f98:	fa20 f202 	lsr.w	r2, r0, r2
 8000f9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa6:	b2bc      	uxth	r4, r7
 8000fa8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fac:	0c11      	lsrs	r1, r2, #16
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb08 f904 	mul.w	r9, r8, r4
 8000fb6:	40b0      	lsls	r0, r6
 8000fb8:	4589      	cmp	r9, r1
 8000fba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fbe:	b280      	uxth	r0, r0
 8000fc0:	d93e      	bls.n	8001040 <__udivmoddi4+0x2e8>
 8000fc2:	1879      	adds	r1, r7, r1
 8000fc4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc8:	d201      	bcs.n	8000fce <__udivmoddi4+0x276>
 8000fca:	4589      	cmp	r9, r1
 8000fcc:	d81f      	bhi.n	800100e <__udivmoddi4+0x2b6>
 8000fce:	eba1 0109 	sub.w	r1, r1, r9
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fb09 f804 	mul.w	r8, r9, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe4:	4542      	cmp	r2, r8
 8000fe6:	d229      	bcs.n	800103c <__udivmoddi4+0x2e4>
 8000fe8:	18ba      	adds	r2, r7, r2
 8000fea:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fee:	d2c4      	bcs.n	8000f7a <__udivmoddi4+0x222>
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d2c2      	bcs.n	8000f7a <__udivmoddi4+0x222>
 8000ff4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff8:	443a      	add	r2, r7
 8000ffa:	e7be      	b.n	8000f7a <__udivmoddi4+0x222>
 8000ffc:	45f0      	cmp	r8, lr
 8000ffe:	d29d      	bcs.n	8000f3c <__udivmoddi4+0x1e4>
 8001000:	ebbe 0302 	subs.w	r3, lr, r2
 8001004:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001008:	3801      	subs	r0, #1
 800100a:	46e1      	mov	r9, ip
 800100c:	e796      	b.n	8000f3c <__udivmoddi4+0x1e4>
 800100e:	eba7 0909 	sub.w	r9, r7, r9
 8001012:	4449      	add	r1, r9
 8001014:	f1a8 0c02 	sub.w	ip, r8, #2
 8001018:	fbb1 f9fe 	udiv	r9, r1, lr
 800101c:	fb09 f804 	mul.w	r8, r9, r4
 8001020:	e7db      	b.n	8000fda <__udivmoddi4+0x282>
 8001022:	4673      	mov	r3, lr
 8001024:	e77f      	b.n	8000f26 <__udivmoddi4+0x1ce>
 8001026:	4650      	mov	r0, sl
 8001028:	e766      	b.n	8000ef8 <__udivmoddi4+0x1a0>
 800102a:	4608      	mov	r0, r1
 800102c:	e6fd      	b.n	8000e2a <__udivmoddi4+0xd2>
 800102e:	443b      	add	r3, r7
 8001030:	3a02      	subs	r2, #2
 8001032:	e733      	b.n	8000e9c <__udivmoddi4+0x144>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	443b      	add	r3, r7
 800103a:	e71c      	b.n	8000e76 <__udivmoddi4+0x11e>
 800103c:	4649      	mov	r1, r9
 800103e:	e79c      	b.n	8000f7a <__udivmoddi4+0x222>
 8001040:	eba1 0109 	sub.w	r1, r1, r9
 8001044:	46c4      	mov	ip, r8
 8001046:	fbb1 f9fe 	udiv	r9, r1, lr
 800104a:	fb09 f804 	mul.w	r8, r9, r4
 800104e:	e7c4      	b.n	8000fda <__udivmoddi4+0x282>

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af04      	add	r7, sp, #16
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 800105e:	4b32      	ldr	r3, [pc, #200]	@ (8001128 <set_int_enable+0xd4>)
 8001060:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001064:	2b00      	cmp	r3, #0
 8001066:	d025      	beq.n	80010b4 <set_int_enable+0x60>
        if (enable)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 800106e:	2302      	movs	r3, #2
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e001      	b.n	8001078 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001078:	4b2b      	ldr	r3, [pc, #172]	@ (8001128 <set_int_enable+0xd4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	b299      	uxth	r1, r3
 8001082:	4b29      	ldr	r3, [pc, #164]	@ (8001128 <set_int_enable+0xd4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	7bdb      	ldrb	r3, [r3, #15]
 8001088:	461a      	mov	r2, r3
 800108a:	2305      	movs	r3, #5
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f107 030f 	add.w	r3, r7, #15
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	4824      	ldr	r0, [pc, #144]	@ (800112c <set_int_enable+0xd8>)
 800109c:	f00c fd96 	bl	800dbcc <HAL_I2C_Mem_Write>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <set_int_enable+0x58>
            return -1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e039      	b.n	8001120 <set_int_enable+0xcc>
        st.chip_cfg.int_enable = tmp;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <set_int_enable+0xd4>)
 80010b0:	745a      	strb	r2, [r3, #17]
 80010b2:	e034      	b.n	800111e <set_int_enable+0xca>
    } else {
        if (!st.chip_cfg.sensors)
 80010b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <set_int_enable+0xd4>)
 80010b6:	7a9b      	ldrb	r3, [r3, #10]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <set_int_enable+0x6e>
            return -1;
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	e02e      	b.n	8001120 <set_int_enable+0xcc>
        if (enable && st.chip_cfg.int_enable)
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <set_int_enable+0x80>
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <set_int_enable+0xd4>)
 80010ca:	7c5b      	ldrb	r3, [r3, #17]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <set_int_enable+0x80>
            return 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e025      	b.n	8001120 <set_int_enable+0xcc>
        if (enable)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <set_int_enable+0x8c>
            tmp = BIT_DATA_RDY_EN;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e001      	b.n	80010e4 <set_int_enable+0x90>
        else
            tmp = 0x00;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80010e4:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <set_int_enable+0xd4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	b299      	uxth	r1, r3
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <set_int_enable+0xd4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	7bdb      	ldrb	r3, [r3, #15]
 80010f4:	461a      	mov	r2, r3
 80010f6:	2305      	movs	r3, #5
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	2301      	movs	r3, #1
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	f107 030f 	add.w	r3, r7, #15
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	4809      	ldr	r0, [pc, #36]	@ (800112c <set_int_enable+0xd8>)
 8001108:	f00c fd60 	bl	800dbcc <HAL_I2C_Mem_Write>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <set_int_enable+0xc4>
            return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e003      	b.n	8001120 <set_int_enable+0xcc>
        st.chip_cfg.int_enable = tmp;
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	4b03      	ldr	r3, [pc, #12]	@ (8001128 <set_int_enable+0xd4>)
 800111c:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000000 	.word	0x20000000
 800112c:	2000032c 	.word	0x2000032c

08001130 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af04      	add	r7, sp, #16
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = 0x80;//BIT_RESET;
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 800113a:	4b95      	ldr	r3, [pc, #596]	@ (8001390 <mpu_init+0x260>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	b299      	uxth	r1, r3
 8001144:	4b92      	ldr	r3, [pc, #584]	@ (8001390 <mpu_init+0x260>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	7c9b      	ldrb	r3, [r3, #18]
 800114a:	461a      	mov	r2, r3
 800114c:	2305      	movs	r3, #5
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	2301      	movs	r3, #1
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	463b      	mov	r3, r7
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	488e      	ldr	r0, [pc, #568]	@ (8001394 <mpu_init+0x264>)
 800115c:	f00c fd36 	bl	800dbcc <HAL_I2C_Mem_Write>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <mpu_init+0x3c>
        return -1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e10c      	b.n	8001386 <mpu_init+0x256>
    delay_ms(100);
 800116c:	2064      	movs	r0, #100	@ 0x64
 800116e:	f00b ff6d 	bl	800d04c <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8001172:	2300      	movs	r3, #0
 8001174:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 8001176:	4b86      	ldr	r3, [pc, #536]	@ (8001390 <mpu_init+0x260>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b299      	uxth	r1, r3
 8001180:	4b83      	ldr	r3, [pc, #524]	@ (8001390 <mpu_init+0x260>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	7c9b      	ldrb	r3, [r3, #18]
 8001186:	461a      	mov	r2, r3
 8001188:	2305      	movs	r3, #5
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2301      	movs	r3, #1
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	463b      	mov	r3, r7
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	487f      	ldr	r0, [pc, #508]	@ (8001394 <mpu_init+0x264>)
 8001198:	f00c fd18 	bl	800dbcc <HAL_I2C_Mem_Write>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <mpu_init+0x78>
        return -1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	e0ee      	b.n	8001386 <mpu_init+0x256>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 80011a8:	4b79      	ldr	r3, [pc, #484]	@ (8001390 <mpu_init+0x260>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	b299      	uxth	r1, r3
 80011b2:	4b77      	ldr	r3, [pc, #476]	@ (8001390 <mpu_init+0x260>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	7d9b      	ldrb	r3, [r3, #22]
 80011b8:	461a      	mov	r2, r3
 80011ba:	2305      	movs	r3, #5
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	2306      	movs	r3, #6
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	463b      	mov	r3, r7
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	4872      	ldr	r0, [pc, #456]	@ (8001394 <mpu_init+0x264>)
 80011ca:	f00c fdf9 	bl	800ddc0 <HAL_I2C_Mem_Read>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <mpu_init+0xaa>
        return -1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	e0d5      	b.n	8001386 <mpu_init+0x256>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 80011da:	797b      	ldrb	r3, [r7, #5]
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 80011fa:	787b      	ldrb	r3, [r7, #1]
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8001204:	4313      	orrs	r3, r2
 8001206:	b25b      	sxtb	r3, r3
 8001208:	71fb      	strb	r3, [r7, #7]

    if (rev) {
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d015      	beq.n	800123c <mpu_init+0x10c>
        /* Congrats, these parts are better. */
        if (rev == 1)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d103      	bne.n	800121e <mpu_init+0xee>
            st.chip_cfg.accel_half = 1;
 8001216:	4b5e      	ldr	r3, [pc, #376]	@ (8001390 <mpu_init+0x260>)
 8001218:	2201      	movs	r2, #1
 800121a:	74da      	strb	r2, [r3, #19]
 800121c:	e041      	b.n	80012a2 <mpu_init+0x172>
        else if (rev == 2)
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d103      	bne.n	800122c <mpu_init+0xfc>
            st.chip_cfg.accel_half = 0;
 8001224:	4b5a      	ldr	r3, [pc, #360]	@ (8001390 <mpu_init+0x260>)
 8001226:	2200      	movs	r2, #0
 8001228:	74da      	strb	r2, [r3, #19]
 800122a:	e03a      	b.n	80012a2 <mpu_init+0x172>
        else {
            log_e("Unsupported software product rev %d.\n",rev);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4619      	mov	r1, r3
 8001230:	4859      	ldr	r0, [pc, #356]	@ (8001398 <mpu_init+0x268>)
 8001232:	f010 ff49 	bl	80120c8 <iprintf>
            return -1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e0a4      	b.n	8001386 <mpu_init+0x256>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, &(data[0])))
 800123c:	4b54      	ldr	r3, [pc, #336]	@ (8001390 <mpu_init+0x260>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	b299      	uxth	r1, r3
 8001246:	4b52      	ldr	r3, [pc, #328]	@ (8001390 <mpu_init+0x260>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	78db      	ldrb	r3, [r3, #3]
 800124c:	461a      	mov	r2, r3
 800124e:	2305      	movs	r3, #5
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	2301      	movs	r3, #1
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	463b      	mov	r3, r7
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	484d      	ldr	r0, [pc, #308]	@ (8001394 <mpu_init+0x264>)
 800125e:	f00c fdaf 	bl	800ddc0 <HAL_I2C_Mem_Read>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <mpu_init+0x13e>
            return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	e08b      	b.n	8001386 <mpu_init+0x256>
        rev = data[0] & 0x0F;
 800126e:	783b      	ldrb	r3, [r7, #0]
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	71fb      	strb	r3, [r7, #7]
        if (!rev) {
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <mpu_init+0x158>
            log_e("Product ID read as 0 indicates device is either incompatible or an MPU3050.\r\n");
 800127c:	4847      	ldr	r0, [pc, #284]	@ (800139c <mpu_init+0x26c>)
 800127e:	f010 ff8b 	bl	8012198 <puts>
            return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e07e      	b.n	8001386 <mpu_init+0x256>
        } else if (rev == 4) {
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b04      	cmp	r3, #4
 800128c:	d106      	bne.n	800129c <mpu_init+0x16c>
            log_i("Half sensitivity part found.\r\n");
 800128e:	4844      	ldr	r0, [pc, #272]	@ (80013a0 <mpu_init+0x270>)
 8001290:	f010 ff82 	bl	8012198 <puts>
            st.chip_cfg.accel_half = 1;
 8001294:	4b3e      	ldr	r3, [pc, #248]	@ (8001390 <mpu_init+0x260>)
 8001296:	2201      	movs	r2, #1
 8001298:	74da      	strb	r2, [r3, #19]
 800129a:	e002      	b.n	80012a2 <mpu_init+0x172>
        } else
            st.chip_cfg.accel_half = 0;
 800129c:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <mpu_init+0x260>)
 800129e:	2200      	movs	r2, #0
 80012a0:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 80012a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <mpu_init+0x260>)
 80012a4:	22ff      	movs	r2, #255	@ 0xff
 80012a6:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 80012a8:	4b39      	ldr	r3, [pc, #228]	@ (8001390 <mpu_init+0x260>)
 80012aa:	22ff      	movs	r2, #255	@ 0xff
 80012ac:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 80012ae:	4b38      	ldr	r3, [pc, #224]	@ (8001390 <mpu_init+0x260>)
 80012b0:	22ff      	movs	r2, #255	@ 0xff
 80012b2:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 80012b4:	4b36      	ldr	r3, [pc, #216]	@ (8001390 <mpu_init+0x260>)
 80012b6:	22ff      	movs	r2, #255	@ 0xff
 80012b8:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 80012ba:	4b35      	ldr	r3, [pc, #212]	@ (8001390 <mpu_init+0x260>)
 80012bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012c0:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 80012c2:	4b33      	ldr	r3, [pc, #204]	@ (8001390 <mpu_init+0x260>)
 80012c4:	22ff      	movs	r2, #255	@ 0xff
 80012c6:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 80012c8:	4b31      	ldr	r3, [pc, #196]	@ (8001390 <mpu_init+0x260>)
 80012ca:	22ff      	movs	r2, #255	@ 0xff
 80012cc:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80012ce:	4b30      	ldr	r3, [pc, #192]	@ (8001390 <mpu_init+0x260>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 80012d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001390 <mpu_init+0x260>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    st.chip_cfg.latched_int = 0;
 80012dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001390 <mpu_init+0x260>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    st.chip_cfg.int_motion_only = 0;
 80012e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <mpu_init+0x260>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 80012ea:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <mpu_init+0x260>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80012f0:	220c      	movs	r2, #12
 80012f2:	2100      	movs	r1, #0
 80012f4:	482b      	ldr	r0, [pc, #172]	@ (80013a4 <mpu_init+0x274>)
 80012f6:	f011 f83f 	bl	8012378 <memset>
    st.chip_cfg.dmp_on = 0;
 80012fa:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <mpu_init+0x260>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    st.chip_cfg.dmp_loaded = 0;
 8001302:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <mpu_init+0x260>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <mpu_init+0x260>)
 800130c:	2200      	movs	r2, #0
 800130e:	84da      	strh	r2, [r3, #38]	@ 0x26

    if (mpu_set_gyro_fsr(2000))
 8001310:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001314:	f000 fa76 	bl	8001804 <mpu_set_gyro_fsr>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <mpu_init+0x1f4>
        return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e030      	b.n	8001386 <mpu_init+0x256>
    if (mpu_set_accel_fsr(2))
 8001324:	2002      	movs	r0, #2
 8001326:	f000 fb07 	bl	8001938 <mpu_set_accel_fsr>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <mpu_init+0x206>
        return -1;
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	e027      	b.n	8001386 <mpu_init+0x256>
    if (mpu_set_lpf(42))
 8001336:	202a      	movs	r0, #42	@ 0x2a
 8001338:	f000 fbae 	bl	8001a98 <mpu_set_lpf>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <mpu_init+0x218>
        return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e01e      	b.n	8001386 <mpu_init+0x256>
    if (mpu_set_sample_rate(50))
 8001348:	2032      	movs	r0, #50	@ 0x32
 800134a:	f000 fc19 	bl	8001b80 <mpu_set_sample_rate>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <mpu_init+0x22a>
        return -1;
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	e015      	b.n	8001386 <mpu_init+0x256>
    if (mpu_configure_fifo(0))
 800135a:	2000      	movs	r0, #0
 800135c:	f000 fd0a 	bl	8001d74 <mpu_configure_fifo>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <mpu_init+0x23c>
        return -1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e00c      	b.n	8001386 <mpu_init+0x256>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 800136c:	2000      	movs	r0, #0
 800136e:	f000 fe89 	bl	8002084 <mpu_set_bypass>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <mpu_init+0x24e>
        return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	e003      	b.n	8001386 <mpu_init+0x256>
#endif

    mpu_set_sensors(0);
 800137e:	2000      	movs	r0, #0
 8001380:	f000 fd4a 	bl	8001e18 <mpu_set_sensors>
    return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000000 	.word	0x20000000
 8001394:	2000032c 	.word	0x2000032c
 8001398:	08014bf0 	.word	0x08014bf0
 800139c:	08014c18 	.word	0x08014c18
 80013a0:	08014c68 	.word	0x08014c68
 80013a4:	20000016 	.word	0x20000016

080013a8 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af04      	add	r7, sp, #16
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b28      	cmp	r3, #40	@ 0x28
 80013b6:	d902      	bls.n	80013be <mpu_lp_accel_mode+0x16>
        return -1;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	e07d      	b.n	80014ba <mpu_lp_accel_mode+0x112>

    if (!rate) {
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d125      	bne.n	8001410 <mpu_lp_accel_mode+0x68>
        mpu_set_int_latched(0);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f000 ff5b 	bl	8002280 <mpu_set_int_latched>
        tmp[0] = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 80013ce:	2307      	movs	r3, #7
 80013d0:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80013d2:	4b3c      	ldr	r3, [pc, #240]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	b299      	uxth	r1, r3
 80013dc:	4b39      	ldr	r3, [pc, #228]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	7c9b      	ldrb	r3, [r3, #18]
 80013e2:	461a      	mov	r2, r3
 80013e4:	2305      	movs	r3, #5
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	2302      	movs	r3, #2
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	4834      	ldr	r0, [pc, #208]	@ (80014c8 <mpu_lp_accel_mode+0x120>)
 80013f6:	f00c fbe9 	bl	800dbcc <HAL_I2C_Mem_Write>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <mpu_lp_accel_mode+0x5e>
            return -1;
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	e059      	b.n	80014ba <mpu_lp_accel_mode+0x112>
        st.chip_cfg.lp_accel_mode = 0;
 8001406:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 8001408:	2200      	movs	r2, #0
 800140a:	751a      	strb	r2, [r3, #20]
        return 0;
 800140c:	2300      	movs	r3, #0
 800140e:	e054      	b.n	80014ba <mpu_lp_accel_mode+0x112>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8001410:	2001      	movs	r0, #1
 8001412:	f000 ff35 	bl	8002280 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8001416:	2320      	movs	r3, #32
 8001418:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d105      	bne.n	800142c <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_1_25HZ;
 8001420:	2300      	movs	r3, #0
 8001422:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001424:	2005      	movs	r0, #5
 8001426:	f000 fb37 	bl	8001a98 <mpu_set_lpf>
 800142a:	e016      	b.n	800145a <mpu_lp_accel_mode+0xb2>
    } else if (rate <= 5) {
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d805      	bhi.n	800143e <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_5HZ;
 8001432:	2301      	movs	r3, #1
 8001434:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001436:	2005      	movs	r0, #5
 8001438:	f000 fb2e 	bl	8001a98 <mpu_set_lpf>
 800143c:	e00d      	b.n	800145a <mpu_lp_accel_mode+0xb2>
    } else if (rate <= 20) {
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b14      	cmp	r3, #20
 8001442:	d805      	bhi.n	8001450 <mpu_lp_accel_mode+0xa8>
        tmp[1] = INV_LPA_20HZ;
 8001444:	2302      	movs	r3, #2
 8001446:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 8001448:	200a      	movs	r0, #10
 800144a:	f000 fb25 	bl	8001a98 <mpu_set_lpf>
 800144e:	e004      	b.n	800145a <mpu_lp_accel_mode+0xb2>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8001450:	2303      	movs	r3, #3
 8001452:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8001454:	2014      	movs	r0, #20
 8001456:	f000 fb1f 	bl	8001a98 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 800145a:	7b7b      	ldrb	r3, [r7, #13]
 800145c:	b25b      	sxtb	r3, r3
 800145e:	019b      	lsls	r3, r3, #6
 8001460:	b25b      	sxtb	r3, r3
 8001462:	f043 0307 	orr.w	r3, r3, #7
 8001466:	b25b      	sxtb	r3, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	b299      	uxth	r1, r3
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7c9b      	ldrb	r3, [r3, #18]
 800147c:	461a      	mov	r2, r3
 800147e:	2305      	movs	r3, #5
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	2302      	movs	r3, #2
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	480e      	ldr	r0, [pc, #56]	@ (80014c8 <mpu_lp_accel_mode+0x120>)
 8001490:	f00c fb9c 	bl	800dbcc <HAL_I2C_Mem_Write>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <mpu_lp_accel_mode+0xf8>
        return -1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e00c      	b.n	80014ba <mpu_lp_accel_mode+0x112>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80014a2:	2208      	movs	r2, #8
 80014a4:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 fc5e 	bl	8001d74 <mpu_configure_fifo>

    return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000
 80014c8:	2000032c 	.word	0x2000032c

080014cc <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af04      	add	r7, sp, #16
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80014d2:	4b9e      	ldr	r3, [pc, #632]	@ (800174c <mpu_reset_fifo+0x280>)
 80014d4:	7a9b      	ldrb	r3, [r3, #10]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <mpu_reset_fifo+0x14>
        return -1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	e153      	b.n	8001788 <mpu_reset_fifo+0x2bc>

    data = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80014e4:	4b99      	ldr	r3, [pc, #612]	@ (800174c <mpu_reset_fifo+0x280>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	b299      	uxth	r1, r3
 80014ee:	4b97      	ldr	r3, [pc, #604]	@ (800174c <mpu_reset_fifo+0x280>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	7bdb      	ldrb	r3, [r3, #15]
 80014f4:	461a      	mov	r2, r3
 80014f6:	2305      	movs	r3, #5
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	2301      	movs	r3, #1
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2301      	movs	r3, #1
 8001504:	4892      	ldr	r0, [pc, #584]	@ (8001750 <mpu_reset_fifo+0x284>)
 8001506:	f00c fb61 	bl	800dbcc <HAL_I2C_Mem_Write>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <mpu_reset_fifo+0x4a>
        return -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	e138      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001516:	4b8d      	ldr	r3, [pc, #564]	@ (800174c <mpu_reset_fifo+0x280>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	b299      	uxth	r1, r3
 8001520:	4b8a      	ldr	r3, [pc, #552]	@ (800174c <mpu_reset_fifo+0x280>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	795b      	ldrb	r3, [r3, #5]
 8001526:	461a      	mov	r2, r3
 8001528:	2305      	movs	r3, #5
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	2301      	movs	r3, #1
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	4886      	ldr	r0, [pc, #536]	@ (8001750 <mpu_reset_fifo+0x284>)
 8001538:	f00c fb48 	bl	800dbcc <HAL_I2C_Mem_Write>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <mpu_reset_fifo+0x7c>
        return -1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e11f      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001548:	4b80      	ldr	r3, [pc, #512]	@ (800174c <mpu_reset_fifo+0x280>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b299      	uxth	r1, r3
 8001552:	4b7e      	ldr	r3, [pc, #504]	@ (800174c <mpu_reset_fifo+0x280>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	791b      	ldrb	r3, [r3, #4]
 8001558:	461a      	mov	r2, r3
 800155a:	2305      	movs	r3, #5
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	2301      	movs	r3, #1
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2301      	movs	r3, #1
 8001568:	4879      	ldr	r0, [pc, #484]	@ (8001750 <mpu_reset_fifo+0x284>)
 800156a:	f00c fb2f 	bl	800dbcc <HAL_I2C_Mem_Write>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <mpu_reset_fifo+0xae>
        return -1;
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	e106      	b.n	8001788 <mpu_reset_fifo+0x2bc>

    if (st.chip_cfg.dmp_on) {
 800157a:	4b74      	ldr	r3, [pc, #464]	@ (800174c <mpu_reset_fifo+0x280>)
 800157c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001580:	2b00      	cmp	r3, #0
 8001582:	d07e      	beq.n	8001682 <mpu_reset_fifo+0x1b6>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8001584:	230c      	movs	r3, #12
 8001586:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001588:	4b70      	ldr	r3, [pc, #448]	@ (800174c <mpu_reset_fifo+0x280>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	b299      	uxth	r1, r3
 8001592:	4b6e      	ldr	r3, [pc, #440]	@ (800174c <mpu_reset_fifo+0x280>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	791b      	ldrb	r3, [r3, #4]
 8001598:	461a      	mov	r2, r3
 800159a:	2305      	movs	r3, #5
 800159c:	9302      	str	r3, [sp, #8]
 800159e:	2301      	movs	r3, #1
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2301      	movs	r3, #1
 80015a8:	4869      	ldr	r0, [pc, #420]	@ (8001750 <mpu_reset_fifo+0x284>)
 80015aa:	f00c fb0f 	bl	800dbcc <HAL_I2C_Mem_Write>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <mpu_reset_fifo+0xee>
            return -1;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	e0e6      	b.n	8001788 <mpu_reset_fifo+0x2bc>
       
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80015ba:	23c0      	movs	r3, #192	@ 0xc0
 80015bc:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80015be:	4b63      	ldr	r3, [pc, #396]	@ (800174c <mpu_reset_fifo+0x280>)
 80015c0:	7a9b      	ldrb	r3, [r3, #10]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <mpu_reset_fifo+0x108>
            data |= BIT_AUX_IF_EN;
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f043 0320 	orr.w	r3, r3, #32
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80015d4:	4b5d      	ldr	r3, [pc, #372]	@ (800174c <mpu_reset_fifo+0x280>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	b299      	uxth	r1, r3
 80015de:	4b5b      	ldr	r3, [pc, #364]	@ (800174c <mpu_reset_fifo+0x280>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	791b      	ldrb	r3, [r3, #4]
 80015e4:	461a      	mov	r2, r3
 80015e6:	2305      	movs	r3, #5
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2301      	movs	r3, #1
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2301      	movs	r3, #1
 80015f4:	4856      	ldr	r0, [pc, #344]	@ (8001750 <mpu_reset_fifo+0x284>)
 80015f6:	f00c fae9 	bl	800dbcc <HAL_I2C_Mem_Write>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <mpu_reset_fifo+0x13a>
            return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
 8001604:	e0c0      	b.n	8001788 <mpu_reset_fifo+0x2bc>
        if (st.chip_cfg.int_enable)
 8001606:	4b51      	ldr	r3, [pc, #324]	@ (800174c <mpu_reset_fifo+0x280>)
 8001608:	7c5b      	ldrb	r3, [r3, #17]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <mpu_reset_fifo+0x148>
            data = BIT_DMP_INT_EN;
 800160e:	2302      	movs	r3, #2
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	e001      	b.n	8001618 <mpu_reset_fifo+0x14c>
        else
            data = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001618:	4b4c      	ldr	r3, [pc, #304]	@ (800174c <mpu_reset_fifo+0x280>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	b299      	uxth	r1, r3
 8001622:	4b4a      	ldr	r3, [pc, #296]	@ (800174c <mpu_reset_fifo+0x280>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	7bdb      	ldrb	r3, [r3, #15]
 8001628:	461a      	mov	r2, r3
 800162a:	2305      	movs	r3, #5
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	2301      	movs	r3, #1
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2301      	movs	r3, #1
 8001638:	4845      	ldr	r0, [pc, #276]	@ (8001750 <mpu_reset_fifo+0x284>)
 800163a:	f00c fac7 	bl	800dbcc <HAL_I2C_Mem_Write>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <mpu_reset_fifo+0x17e>
            return -1;
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	e09e      	b.n	8001788 <mpu_reset_fifo+0x2bc>
        data = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800164e:	4b3f      	ldr	r3, [pc, #252]	@ (800174c <mpu_reset_fifo+0x280>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	b299      	uxth	r1, r3
 8001658:	4b3c      	ldr	r3, [pc, #240]	@ (800174c <mpu_reset_fifo+0x280>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	795b      	ldrb	r3, [r3, #5]
 800165e:	461a      	mov	r2, r3
 8001660:	2305      	movs	r3, #5
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	2301      	movs	r3, #1
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	1dfb      	adds	r3, r7, #7
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2301      	movs	r3, #1
 800166e:	4838      	ldr	r0, [pc, #224]	@ (8001750 <mpu_reset_fifo+0x284>)
 8001670:	f00c faac 	bl	800dbcc <HAL_I2C_Mem_Write>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8085 	beq.w	8001786 <mpu_reset_fifo+0x2ba>
            return -1;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	e082      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    } else {
        data = BIT_FIFO_RST;
 8001682:	2304      	movs	r3, #4
 8001684:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001686:	4b31      	ldr	r3, [pc, #196]	@ (800174c <mpu_reset_fifo+0x280>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	b299      	uxth	r1, r3
 8001690:	4b2e      	ldr	r3, [pc, #184]	@ (800174c <mpu_reset_fifo+0x280>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	791b      	ldrb	r3, [r3, #4]
 8001696:	461a      	mov	r2, r3
 8001698:	2305      	movs	r3, #5
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2301      	movs	r3, #1
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	482a      	ldr	r0, [pc, #168]	@ (8001750 <mpu_reset_fifo+0x284>)
 80016a8:	f00c fa90 	bl	800dbcc <HAL_I2C_Mem_Write>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <mpu_reset_fifo+0x1ec>
            return -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e067      	b.n	8001788 <mpu_reset_fifo+0x2bc>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80016b8:	4b24      	ldr	r3, [pc, #144]	@ (800174c <mpu_reset_fifo+0x280>)
 80016ba:	7c9b      	ldrb	r3, [r3, #18]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d105      	bne.n	80016cc <mpu_reset_fifo+0x200>
 80016c0:	4b22      	ldr	r3, [pc, #136]	@ (800174c <mpu_reset_fifo+0x280>)
 80016c2:	7a9b      	ldrb	r3, [r3, #10]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <mpu_reset_fifo+0x206>
            data = BIT_FIFO_EN;
 80016cc:	2340      	movs	r3, #64	@ 0x40
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	e001      	b.n	80016d6 <mpu_reset_fifo+0x20a>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 80016d2:	2360      	movs	r3, #96	@ 0x60
 80016d4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80016d6:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <mpu_reset_fifo+0x280>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	b299      	uxth	r1, r3
 80016e0:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <mpu_reset_fifo+0x280>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	791b      	ldrb	r3, [r3, #4]
 80016e6:	461a      	mov	r2, r3
 80016e8:	2305      	movs	r3, #5
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	2301      	movs	r3, #1
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	1dfb      	adds	r3, r7, #7
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	4816      	ldr	r0, [pc, #88]	@ (8001750 <mpu_reset_fifo+0x284>)
 80016f8:	f00c fa68 	bl	800dbcc <HAL_I2C_Mem_Write>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <mpu_reset_fifo+0x23c>
            return -1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e03f      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    
        if (st.chip_cfg.int_enable)
 8001708:	4b10      	ldr	r3, [pc, #64]	@ (800174c <mpu_reset_fifo+0x280>)
 800170a:	7c5b      	ldrb	r3, [r3, #17]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <mpu_reset_fifo+0x24a>
            data = BIT_DATA_RDY_EN;
 8001710:	2301      	movs	r3, #1
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	e001      	b.n	800171a <mpu_reset_fifo+0x24e>
        else
            data = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <mpu_reset_fifo+0x280>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	b299      	uxth	r1, r3
 8001724:	4b09      	ldr	r3, [pc, #36]	@ (800174c <mpu_reset_fifo+0x280>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	7bdb      	ldrb	r3, [r3, #15]
 800172a:	461a      	mov	r2, r3
 800172c:	2305      	movs	r3, #5
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	2301      	movs	r3, #1
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	1dfb      	adds	r3, r7, #7
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	4805      	ldr	r0, [pc, #20]	@ (8001750 <mpu_reset_fifo+0x284>)
 800173c:	f00c fa46 	bl	800dbcc <HAL_I2C_Mem_Write>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <mpu_reset_fifo+0x288>
            return -1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	e01d      	b.n	8001788 <mpu_reset_fifo+0x2bc>
 800174c:	20000000 	.word	0x20000000
 8001750:	2000032c 	.word	0x2000032c
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <mpu_reset_fifo+0x2c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	b299      	uxth	r1, r3
 800175e:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <mpu_reset_fifo+0x2c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	795b      	ldrb	r3, [r3, #5]
 8001764:	461a      	mov	r2, r3
 8001766:	2305      	movs	r3, #5
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	2301      	movs	r3, #1
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <mpu_reset_fifo+0x2c8>)
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	4808      	ldr	r0, [pc, #32]	@ (8001798 <mpu_reset_fifo+0x2cc>)
 8001776:	f00c fa29 	bl	800dbcc <HAL_I2C_Mem_Write>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <mpu_reset_fifo+0x2ba>
            return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	e000      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    }
    return 0;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000000 	.word	0x20000000
 8001794:	20000010 	.word	0x20000010
 8001798:	2000032c 	.word	0x2000032c

0800179c <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 80017a4:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <mpu_get_gyro_fsr+0x64>)
 80017a6:	7a1b      	ldrb	r3, [r3, #8]
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d81e      	bhi.n	80017ea <mpu_get_gyro_fsr+0x4e>
 80017ac:	a201      	add	r2, pc, #4	@ (adr r2, 80017b4 <mpu_get_gyro_fsr+0x18>)
 80017ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b2:	bf00      	nop
 80017b4:	080017c5 	.word	0x080017c5
 80017b8:	080017cd 	.word	0x080017cd
 80017bc:	080017d7 	.word	0x080017d7
 80017c0:	080017e1 	.word	0x080017e1
    case INV_FSR_250DPS:
        fsr[0] = 250;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	22fa      	movs	r2, #250	@ 0xfa
 80017c8:	801a      	strh	r2, [r3, #0]
        break;
 80017ca:	e012      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80017d2:	801a      	strh	r2, [r3, #0]
        break;
 80017d4:	e00d      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017dc:	801a      	strh	r2, [r3, #0]
        break;
 80017de:	e008      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80017e6:	801a      	strh	r2, [r3, #0]
        break;
 80017e8:	e003      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	801a      	strh	r2, [r3, #0]
        break;
 80017f0:	bf00      	nop
    }
    return 0;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	20000000 	.word	0x20000000

08001804 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af04      	add	r7, sp, #16
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800180e:	4b2b      	ldr	r3, [pc, #172]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 8001810:	7a9b      	ldrb	r3, [r3, #10]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <mpu_set_gyro_fsr+0x18>
        return -1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e04a      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>

    switch (fsr) {
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001822:	d017      	beq.n	8001854 <mpu_set_gyro_fsr+0x50>
 8001824:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001828:	dc17      	bgt.n	800185a <mpu_set_gyro_fsr+0x56>
 800182a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800182e:	d00e      	beq.n	800184e <mpu_set_gyro_fsr+0x4a>
 8001830:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001834:	dc11      	bgt.n	800185a <mpu_set_gyro_fsr+0x56>
 8001836:	2bfa      	cmp	r3, #250	@ 0xfa
 8001838:	d003      	beq.n	8001842 <mpu_set_gyro_fsr+0x3e>
 800183a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800183e:	d003      	beq.n	8001848 <mpu_set_gyro_fsr+0x44>
 8001840:	e00b      	b.n	800185a <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
        break;
 8001846:	e00b      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8001848:	2308      	movs	r3, #8
 800184a:	73fb      	strb	r3, [r7, #15]
        break;
 800184c:	e008      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 800184e:	2310      	movs	r3, #16
 8001850:	73fb      	strb	r3, [r7, #15]
        break;
 8001852:	e005      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8001854:	2318      	movs	r3, #24
 8001856:	73fb      	strb	r3, [r7, #15]
        break;
 8001858:	e002      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e028      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 8001862:	7a1a      	ldrb	r2, [r3, #8]
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	429a      	cmp	r2, r3
 800186c:	d101      	bne.n	8001872 <mpu_set_gyro_fsr+0x6e>
        return 0;
 800186e:	2300      	movs	r3, #0
 8001870:	e01f      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8001872:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	b299      	uxth	r1, r3
 800187c:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	799b      	ldrb	r3, [r3, #6]
 8001882:	461a      	mov	r2, r3
 8001884:	2305      	movs	r3, #5
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2301      	movs	r3, #1
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	f107 030f 	add.w	r3, r7, #15
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	480a      	ldr	r0, [pc, #40]	@ (80018c0 <mpu_set_gyro_fsr+0xbc>)
 8001896:	f00c f999 	bl	800dbcc <HAL_I2C_Mem_Write>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <mpu_set_gyro_fsr+0xa2>
        return -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	e005      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>
    st.chip_cfg.gyro_fsr = data >> 3;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 80018ae:	721a      	strb	r2, [r3, #8]
    return 0;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000000 	.word	0x20000000
 80018c0:	2000032c 	.word	0x2000032c

080018c4 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <mpu_get_accel_fsr+0x70>)
 80018ce:	7a5b      	ldrb	r3, [r3, #9]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d81b      	bhi.n	800190c <mpu_get_accel_fsr+0x48>
 80018d4:	a201      	add	r2, pc, #4	@ (adr r2, 80018dc <mpu_get_accel_fsr+0x18>)
 80018d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018da:	bf00      	nop
 80018dc:	080018ed 	.word	0x080018ed
 80018e0:	080018f5 	.word	0x080018f5
 80018e4:	080018fd 	.word	0x080018fd
 80018e8:	08001905 	.word	0x08001905
    case INV_FSR_2G:
        fsr[0] = 2;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	701a      	strb	r2, [r3, #0]
        break;
 80018f2:	e00e      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2204      	movs	r2, #4
 80018f8:	701a      	strb	r2, [r3, #0]
        break;
 80018fa:	e00a      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2208      	movs	r2, #8
 8001900:	701a      	strb	r2, [r3, #0]
        break;
 8001902:	e006      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2210      	movs	r2, #16
 8001908:	701a      	strb	r2, [r3, #0]
        break;
 800190a:	e002      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	e00a      	b.n	8001928 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <mpu_get_accel_fsr+0x70>)
 8001914:	7cdb      	ldrb	r3, [r3, #19]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	b2da      	uxtb	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	701a      	strb	r2, [r3, #0]
    return 0;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	20000000 	.word	0x20000000

08001938 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af04      	add	r7, sp, #16
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001942:	4b34      	ldr	r3, [pc, #208]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 8001944:	7a9b      	ldrb	r3, [r3, #10]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <mpu_set_accel_fsr+0x18>
        return -1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e05d      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>

    switch (fsr) {
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	3b02      	subs	r3, #2
 8001954:	2b0e      	cmp	r3, #14
 8001956:	d82d      	bhi.n	80019b4 <mpu_set_accel_fsr+0x7c>
 8001958:	a201      	add	r2, pc, #4	@ (adr r2, 8001960 <mpu_set_accel_fsr+0x28>)
 800195a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195e:	bf00      	nop
 8001960:	0800199d 	.word	0x0800199d
 8001964:	080019b5 	.word	0x080019b5
 8001968:	080019a3 	.word	0x080019a3
 800196c:	080019b5 	.word	0x080019b5
 8001970:	080019b5 	.word	0x080019b5
 8001974:	080019b5 	.word	0x080019b5
 8001978:	080019a9 	.word	0x080019a9
 800197c:	080019b5 	.word	0x080019b5
 8001980:	080019b5 	.word	0x080019b5
 8001984:	080019b5 	.word	0x080019b5
 8001988:	080019b5 	.word	0x080019b5
 800198c:	080019b5 	.word	0x080019b5
 8001990:	080019b5 	.word	0x080019b5
 8001994:	080019b5 	.word	0x080019b5
 8001998:	080019af 	.word	0x080019af
    case 2:
        data = INV_FSR_2G << 3;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
        break;
 80019a0:	e00b      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 80019a2:	2308      	movs	r3, #8
 80019a4:	73fb      	strb	r3, [r7, #15]
        break;
 80019a6:	e008      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 80019a8:	2310      	movs	r3, #16
 80019aa:	73fb      	strb	r3, [r7, #15]
        break;
 80019ac:	e005      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 80019ae:	2318      	movs	r3, #24
 80019b0:	73fb      	strb	r3, [r7, #15]
        break;
 80019b2:	e002      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
 80019b8:	e028      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 80019ba:	4b16      	ldr	r3, [pc, #88]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 80019bc:	7a5a      	ldrb	r2, [r3, #9]
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	08db      	lsrs	r3, r3, #3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d101      	bne.n	80019cc <mpu_set_accel_fsr+0x94>
        return 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	e01f      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	b299      	uxth	r1, r3
 80019d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	79db      	ldrb	r3, [r3, #7]
 80019dc:	461a      	mov	r2, r3
 80019de:	2305      	movs	r3, #5
 80019e0:	9302      	str	r3, [sp, #8]
 80019e2:	2301      	movs	r3, #1
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	f107 030f 	add.w	r3, r7, #15
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2301      	movs	r3, #1
 80019ee:	480a      	ldr	r0, [pc, #40]	@ (8001a18 <mpu_set_accel_fsr+0xe0>)
 80019f0:	f00c f8ec 	bl	800dbcc <HAL_I2C_Mem_Write>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <mpu_set_accel_fsr+0xc8>
        return -1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	e005      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>
    st.chip_cfg.accel_fsr = data >> 3;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	08db      	lsrs	r3, r3, #3
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 8001a08:	725a      	strb	r2, [r3, #9]
    return 0;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000000 	.word	0x20000000
 8001a18:	2000032c 	.word	0x2000032c

08001a1c <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 8001a24:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <mpu_get_lpf+0x78>)
 8001a26:	7adb      	ldrb	r3, [r3, #11]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	2b05      	cmp	r3, #5
 8001a2c:	d826      	bhi.n	8001a7c <mpu_get_lpf+0x60>
 8001a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <mpu_get_lpf+0x18>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a4d 	.word	0x08001a4d
 8001a38:	08001a55 	.word	0x08001a55
 8001a3c:	08001a5d 	.word	0x08001a5d
 8001a40:	08001a65 	.word	0x08001a65
 8001a44:	08001a6d 	.word	0x08001a6d
 8001a48:	08001a75 	.word	0x08001a75
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	22bc      	movs	r2, #188	@ 0xbc
 8001a50:	801a      	strh	r2, [r3, #0]
        break;
 8001a52:	e017      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2262      	movs	r2, #98	@ 0x62
 8001a58:	801a      	strh	r2, [r3, #0]
        break;
 8001a5a:	e013      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	222a      	movs	r2, #42	@ 0x2a
 8001a60:	801a      	strh	r2, [r3, #0]
        break;
 8001a62:	e00f      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2214      	movs	r2, #20
 8001a68:	801a      	strh	r2, [r3, #0]
        break;
 8001a6a:	e00b      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	220a      	movs	r2, #10
 8001a70:	801a      	strh	r2, [r3, #0]
        break;
 8001a72:	e007      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2205      	movs	r2, #5
 8001a78:	801a      	strh	r2, [r3, #0]
        break;
 8001a7a:	e003      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	801a      	strh	r2, [r3, #0]
        break;
 8001a82:	bf00      	nop
    }
    return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000000 	.word	0x20000000

08001a98 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af04      	add	r7, sp, #16
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001aa2:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001aa4:	7a9b      	ldrb	r3, [r3, #10]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <mpu_set_lpf+0x18>
        return -1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e044      	b.n	8001b3a <mpu_set_lpf+0xa2>

    if (lpf >= 188)
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	2bbb      	cmp	r3, #187	@ 0xbb
 8001ab4:	d902      	bls.n	8001abc <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	e019      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	2b61      	cmp	r3, #97	@ 0x61
 8001ac0:	d902      	bls.n	8001ac8 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	e013      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	2b29      	cmp	r3, #41	@ 0x29
 8001acc:	d902      	bls.n	8001ad4 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	e00d      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	2b13      	cmp	r3, #19
 8001ad8:	d902      	bls.n	8001ae0 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8001ada:	2304      	movs	r3, #4
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e007      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	2b09      	cmp	r3, #9
 8001ae4:	d902      	bls.n	8001aec <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 8001ae6:	2305      	movs	r3, #5
 8001ae8:	73fb      	strb	r3, [r7, #15]
 8001aea:	e001      	b.n	8001af0 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8001aec:	2306      	movs	r3, #6
 8001aee:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8001af0:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001af2:	7ada      	ldrb	r2, [r3, #11]
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d101      	bne.n	8001afe <mpu_set_lpf+0x66>
        return 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e01d      	b.n	8001b3a <mpu_set_lpf+0xa2>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001afe:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	b299      	uxth	r1, r3
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	789b      	ldrb	r3, [r3, #2]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2305      	movs	r3, #5
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	2301      	movs	r3, #1
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	f107 030f 	add.w	r3, r7, #15
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	4809      	ldr	r0, [pc, #36]	@ (8001b48 <mpu_set_lpf+0xb0>)
 8001b22:	f00c f853 	bl	800dbcc <HAL_I2C_Mem_Write>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <mpu_set_lpf+0x9a>
        return -1;
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b30:	e003      	b.n	8001b3a <mpu_set_lpf+0xa2>
    st.chip_cfg.lpf = data;
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001b36:	72da      	strb	r2, [r3, #11]
    return 0;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000
 8001b48:	2000032c 	.word	0x2000032c

08001b4c <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 8001b54:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <mpu_get_sample_rate+0x30>)
 8001b56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <mpu_get_sample_rate+0x18>
        return -1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e004      	b.n	8001b6e <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <mpu_get_sample_rate+0x30>)
 8001b66:	89da      	ldrh	r2, [r3, #14]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	801a      	strh	r2, [r3, #0]
    return 0;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000000 	.word	0x20000000

08001b80 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af04      	add	r7, sp, #16
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001b8a:	4b34      	ldr	r3, [pc, #208]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001b8c:	7a9b      	ldrb	r3, [r3, #10]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d102      	bne.n	8001b98 <mpu_set_sample_rate+0x18>
        return -1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e05c      	b.n	8001c52 <mpu_set_sample_rate+0xd2>

    if (st.chip_cfg.dmp_on)
 8001b98:	4b30      	ldr	r3, [pc, #192]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001b9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <mpu_set_sample_rate+0x28>
        return -1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	e054      	b.n	8001c52 <mpu_set_sample_rate+0xd2>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001baa:	7d1b      	ldrb	r3, [r3, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00f      	beq.n	8001bd0 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <mpu_set_sample_rate+0x4a>
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	2b28      	cmp	r3, #40	@ 0x28
 8001bba:	d806      	bhi.n	8001bca <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fbf1 	bl	80013a8 <mpu_lp_accel_mode>
                return 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e043      	b.n	8001c52 <mpu_set_sample_rate+0xd2>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff fbec 	bl	80013a8 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d802      	bhi.n	8001bdc <mpu_set_sample_rate+0x5c>
            rate = 4;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	80fb      	strh	r3, [r7, #6]
 8001bda:	e006      	b.n	8001bea <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001be2:	d902      	bls.n	8001bea <mpu_set_sample_rate+0x6a>
            rate = 1000;
 8001be4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be8:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bf0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8001bfc:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	b299      	uxth	r1, r3
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	785b      	ldrb	r3, [r3, #1]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2305      	movs	r3, #5
 8001c10:	9302      	str	r3, [sp, #8]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	f107 030f 	add.w	r3, r7, #15
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	4810      	ldr	r0, [pc, #64]	@ (8001c60 <mpu_set_sample_rate+0xe0>)
 8001c20:	f00b ffd4 	bl	800dbcc <HAL_I2C_Mem_Write>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <mpu_set_sample_rate+0xb0>
            return -1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e010      	b.n	8001c52 <mpu_set_sample_rate+0xd2>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	3301      	adds	r3, #1
 8001c34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c38:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001c40:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001c44:	89db      	ldrh	r3, [r3, #14]
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff24 	bl	8001a98 <mpu_set_lpf>
        return 0;
 8001c50:	2300      	movs	r3, #0
    }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	2000032c 	.word	0x2000032c

08001c64 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <mpu_get_gyro_sens+0x5c>)
 8001c6e:	7a1b      	ldrb	r3, [r3, #8]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d81b      	bhi.n	8001cac <mpu_get_gyro_sens+0x48>
 8001c74:	a201      	add	r2, pc, #4	@ (adr r2, 8001c7c <mpu_get_gyro_sens+0x18>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001c95 	.word	0x08001c95
 8001c84:	08001c9d 	.word	0x08001c9d
 8001c88:	08001ca5 	.word	0x08001ca5
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <mpu_get_gyro_sens+0x60>)
 8001c90:	601a      	str	r2, [r3, #0]
        break;
 8001c92:	e00e      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <mpu_get_gyro_sens+0x64>)
 8001c98:	601a      	str	r2, [r3, #0]
        break;
 8001c9a:	e00a      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <mpu_get_gyro_sens+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
        break;
 8001ca2:	e006      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <mpu_get_gyro_sens+0x6c>)
 8001ca8:	601a      	str	r2, [r3, #0]
        break;
 8001caa:	e002      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	e000      	b.n	8001cb4 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	43030000 	.word	0x43030000
 8001cc8:	42830000 	.word	0x42830000
 8001ccc:	42033333 	.word	0x42033333
 8001cd0:	41833333 	.word	0x41833333

08001cd4 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d4c <mpu_get_accel_sens+0x78>)
 8001cde:	7a5b      	ldrb	r3, [r3, #9]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d81f      	bhi.n	8001d24 <mpu_get_accel_sens+0x50>
 8001ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cec <mpu_get_accel_sens+0x18>)
 8001ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cea:	bf00      	nop
 8001cec:	08001cfd 	.word	0x08001cfd
 8001cf0:	08001d07 	.word	0x08001d07
 8001cf4:	08001d11 	.word	0x08001d11
 8001cf8:	08001d1b 	.word	0x08001d1b
    case INV_FSR_2G:
        sens[0] = 16384;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d02:	801a      	strh	r2, [r3, #0]
        break;
 8001d04:	e011      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f641 729c 	movw	r2, #8092	@ 0x1f9c
 8001d0c:	801a      	strh	r2, [r3, #0]
        break;
 8001d0e:	e00c      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d16:	801a      	strh	r2, [r3, #0]
        break;
 8001d18:	e007      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d20:	801a      	strh	r2, [r3, #0]
        break;
 8001d22:	e002      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    default:
        return -1;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	e00a      	b.n	8001d40 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8001d2a:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <mpu_get_accel_sens+0x78>)
 8001d2c:	7cdb      	ldrb	r3, [r3, #19]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	085b      	lsrs	r3, r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	801a      	strh	r2, [r3, #0]
    return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	20000000 	.word	0x20000000

08001d50 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8001d58:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <mpu_get_fifo_config+0x20>)
 8001d5a:	7c1a      	ldrb	r2, [r3, #16]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	701a      	strb	r2, [r3, #0]
    return 0;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000000 	.word	0x20000000

08001d74 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 8001d8a:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001d8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <mpu_configure_fifo+0x24>
        return 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e038      	b.n	8001e0a <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 8001d98:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001d9a:	7a9b      	ldrb	r3, [r3, #10]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <mpu_configure_fifo+0x32>
            return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
 8001da4:	e031      	b.n	8001e0a <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 8001da6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001da8:	7c1b      	ldrb	r3, [r3, #16]
 8001daa:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dae:	7a9a      	ldrb	r2, [r3, #10]
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4013      	ands	r3, r2
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001db8:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8001dba:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dbc:	7c1b      	ldrb	r3, [r3, #16]
 8001dbe:	79fa      	ldrb	r2, [r7, #7]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d003      	beq.n	8001dcc <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	e001      	b.n	8001dd0 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d103      	bne.n	8001dde <mpu_configure_fifo+0x6a>
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dd8:	7d1b      	ldrb	r3, [r3, #20]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <mpu_configure_fifo+0x72>
            set_int_enable(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f7ff f938 	bl	8001054 <set_int_enable>
 8001de4:	e002      	b.n	8001dec <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff f934 	bl	8001054 <set_int_enable>
        if (sensors) {
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00a      	beq.n	8001e08 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8001df2:	f7ff fb6b 	bl	80014cc <mpu_reset_fifo>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8001dfc:	4a05      	ldr	r2, [pc, #20]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	7413      	strb	r3, [r2, #16]
                return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	e000      	b.n	8001e0a <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8001e08:	68fb      	ldr	r3, [r7, #12]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000

08001e18 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af04      	add	r7, sp, #16
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e007      	b.n	8001e42 <mpu_set_sensors+0x2a>
    else if (sensors)
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <mpu_set_sensors+0x26>
        data = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e001      	b.n	8001e42 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8001e3e:	2340      	movs	r3, #64	@ 0x40
 8001e40:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001e42:	4b40      	ldr	r3, [pc, #256]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	b299      	uxth	r1, r3
 8001e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	7c9b      	ldrb	r3, [r3, #18]
 8001e52:	461a      	mov	r2, r3
 8001e54:	2305      	movs	r3, #5
 8001e56:	9302      	str	r3, [sp, #8]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	f107 030f 	add.w	r3, r7, #15
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	2301      	movs	r3, #1
 8001e64:	4838      	ldr	r0, [pc, #224]	@ (8001f48 <mpu_set_sensors+0x130>)
 8001e66:	f00b feb1 	bl	800dbcc <HAL_I2C_Mem_Write>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
 8001e70:	4b34      	ldr	r3, [pc, #208]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	729a      	strb	r2, [r3, #10]
        return -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e05f      	b.n	8001f3c <mpu_set_sensors+0x124>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b2f      	ldr	r3, [pc, #188]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e86:	731a      	strb	r2, [r3, #12]

    data = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d104      	bne.n	8001ea0 <mpu_set_sensors+0x88>
        data |= BIT_STBY_XG;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d104      	bne.n	8001eb4 <mpu_set_sensors+0x9c>
        data |= BIT_STBY_YG;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d104      	bne.n	8001ec8 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_ZG;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d104      	bne.n	8001edc <mpu_set_sensors+0xc4>
        data |= BIT_STBY_XYZA;
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001edc:	4b19      	ldr	r3, [pc, #100]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	b299      	uxth	r1, r3
 8001ee6:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	7cdb      	ldrb	r3, [r3, #19]
 8001eec:	461a      	mov	r2, r3
 8001eee:	2305      	movs	r3, #5
 8001ef0:	9302      	str	r3, [sp, #8]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	f107 030f 	add.w	r3, r7, #15
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2301      	movs	r3, #1
 8001efe:	4812      	ldr	r0, [pc, #72]	@ (8001f48 <mpu_set_sensors+0x130>)
 8001f00:	f00b fe64 	bl	800dbcc <HAL_I2C_Mem_Write>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <mpu_set_sensors+0xfe>
        st.chip_cfg.sensors = 0;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	729a      	strb	r2, [r3, #10]
        return -1;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295
 8001f14:	e012      	b.n	8001f3c <mpu_set_sensors+0x124>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <mpu_set_sensors+0x110>
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d002      	beq.n	8001f28 <mpu_set_sensors+0x110>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f000 f9ac 	bl	8002280 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8001f28:	4a06      	ldr	r2, [pc, #24]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8001f2e:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8001f34:	2032      	movs	r0, #50	@ 0x32
 8001f36:	f00b f889 	bl	800d04c <HAL_Delay>
    return 0;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000000 	.word	0x20000000
 8001f48:	2000032c 	.word	0x2000032c

08001f4c <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	@ 0x28
 8001f50:	af04      	add	r7, sp, #16
 8001f52:	4603      	mov	r3, r0
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8001f5a:	4b48      	ldr	r3, [pc, #288]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <mpu_read_fifo_stream+0x1e>
        return -1;
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295
 8001f68:	e083      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    if (!st.chip_cfg.sensors)
 8001f6a:	4b44      	ldr	r3, [pc, #272]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f6c:	7a9b      	ldrb	r3, [r3, #10]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <mpu_read_fifo_stream+0x2c>
        return -1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	e07c      	b.n	8002072 <mpu_read_fifo_stream+0x126>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8001f78:	4b40      	ldr	r3, [pc, #256]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	b299      	uxth	r1, r3
 8001f82:	4b3e      	ldr	r3, [pc, #248]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	7a9b      	ldrb	r3, [r3, #10]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2305      	movs	r3, #5
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	2302      	movs	r3, #2
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2301      	movs	r3, #1
 8001f9a:	4839      	ldr	r0, [pc, #228]	@ (8002080 <mpu_read_fifo_stream+0x134>)
 8001f9c:	f00b ff10 	bl	800ddc0 <HAL_I2C_Mem_Read>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <mpu_read_fifo_stream+0x60>
        return -1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	e062      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8001fac:	7d3b      	ldrb	r3, [r7, #20]
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	b21a      	sxth	r2, r3
 8001fb4:	7d7b      	ldrb	r3, [r7, #21]
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8001fbe:	8afa      	ldrh	r2, [r7, #22]
 8001fc0:	89fb      	ldrh	r3, [r7, #14]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d205      	bcs.n	8001fd2 <mpu_read_fifo_stream+0x86>
        more[0] = 0;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
        return -1;
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd0:	e04f      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	885b      	ldrh	r3, [r3, #2]
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	8afa      	ldrh	r2, [r7, #22]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d923      	bls.n	800202a <mpu_read_fifo_stream+0xde>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8001fe2:	4b26      	ldr	r3, [pc, #152]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	b299      	uxth	r1, r3
 8001fec:	4b23      	ldr	r3, [pc, #140]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	7c5b      	ldrb	r3, [r3, #17]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2305      	movs	r3, #5
 8001ff6:	9302      	str	r3, [sp, #8]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2301      	movs	r3, #1
 8002004:	481e      	ldr	r0, [pc, #120]	@ (8002080 <mpu_read_fifo_stream+0x134>)
 8002006:	f00b fedb 	bl	800ddc0 <HAL_I2C_Mem_Read>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <mpu_read_fifo_stream+0xca>
            return -1;
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	e02d      	b.n	8002072 <mpu_read_fifo_stream+0x126>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8002016:	7d3b      	ldrb	r3, [r7, #20]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	d004      	beq.n	800202a <mpu_read_fifo_stream+0xde>
            mpu_reset_fifo();
 8002020:	f7ff fa54 	bl	80014cc <mpu_reset_fifo>
            return -2;
 8002024:	f06f 0301 	mvn.w	r3, #1
 8002028:	e023      	b.n	8002072 <mpu_read_fifo_stream+0x126>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <mpu_read_fifo_stream+0x130>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	b299      	uxth	r1, r3
 8002034:	4b11      	ldr	r3, [pc, #68]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	7adb      	ldrb	r3, [r3, #11]
 800203a:	461a      	mov	r2, r3
 800203c:	2305      	movs	r3, #5
 800203e:	9302      	str	r3, [sp, #8]
 8002040:	89fb      	ldrh	r3, [r7, #14]
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2301      	movs	r3, #1
 800204a:	480d      	ldr	r0, [pc, #52]	@ (8002080 <mpu_read_fifo_stream+0x134>)
 800204c:	f00b feb8 	bl	800ddc0 <HAL_I2C_Mem_Read>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <mpu_read_fifo_stream+0x110>
        return -1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	e00a      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    more[0] = fifo_count / length - 1;
 800205c:	8afa      	ldrh	r2, [r7, #22]
 800205e:	89fb      	ldrh	r3, [r7, #14]
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	b29b      	uxth	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b2da      	uxtb	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	701a      	strb	r2, [r3, #0]
    return 0;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000000 	.word	0x20000000
 8002080:	2000032c 	.word	0x2000032c

08002084 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af04      	add	r7, sp, #16
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800208e:	4b7a      	ldr	r3, [pc, #488]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002090:	7c9b      	ldrb	r3, [r3, #18]
 8002092:	79fa      	ldrb	r2, [r7, #7]
 8002094:	429a      	cmp	r2, r3
 8002096:	d101      	bne.n	800209c <mpu_set_bypass+0x18>
        return 0;
 8002098:	2300      	movs	r3, #0
 800209a:	e0e8      	b.n	800226e <mpu_set_bypass+0x1ea>

    if (bypass_on) {
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d06b      	beq.n	800217a <mpu_set_bypass+0xf6>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80020a2:	4b75      	ldr	r3, [pc, #468]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	b299      	uxth	r1, r3
 80020ac:	4b72      	ldr	r3, [pc, #456]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	791b      	ldrb	r3, [r3, #4]
 80020b2:	461a      	mov	r2, r3
 80020b4:	2305      	movs	r3, #5
 80020b6:	9302      	str	r3, [sp, #8]
 80020b8:	2301      	movs	r3, #1
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	f107 030f 	add.w	r3, r7, #15
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2301      	movs	r3, #1
 80020c4:	486d      	ldr	r0, [pc, #436]	@ (800227c <mpu_set_bypass+0x1f8>)
 80020c6:	f00b fe7b 	bl	800ddc0 <HAL_I2C_Mem_Read>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <mpu_set_bypass+0x52>
            return -1;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
 80020d4:	e0cb      	b.n	800226e <mpu_set_bypass+0x1ea>
        tmp &= ~BIT_AUX_IF_EN;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	f023 0320 	bic.w	r3, r3, #32
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80020e0:	4b65      	ldr	r3, [pc, #404]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	b299      	uxth	r1, r3
 80020ea:	4b63      	ldr	r3, [pc, #396]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	791b      	ldrb	r3, [r3, #4]
 80020f0:	461a      	mov	r2, r3
 80020f2:	2305      	movs	r3, #5
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	2301      	movs	r3, #1
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	f107 030f 	add.w	r3, r7, #15
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2301      	movs	r3, #1
 8002102:	485e      	ldr	r0, [pc, #376]	@ (800227c <mpu_set_bypass+0x1f8>)
 8002104:	f00b fd62 	bl	800dbcc <HAL_I2C_Mem_Write>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <mpu_set_bypass+0x90>
            return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
 8002112:	e0ac      	b.n	800226e <mpu_set_bypass+0x1ea>
        delay_ms(3);
 8002114:	2003      	movs	r0, #3
 8002116:	f00a ff99 	bl	800d04c <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 800211a:	2302      	movs	r3, #2
 800211c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800211e:	4b56      	ldr	r3, [pc, #344]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002120:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <mpu_set_bypass+0xae>
            tmp |= BIT_ACTL;
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800212e:	b2db      	uxtb	r3, r3
 8002130:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002132:	4b51      	ldr	r3, [pc, #324]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002134:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <mpu_set_bypass+0xc2>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002142:	b2db      	uxtb	r3, r3
 8002144:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002146:	4b4c      	ldr	r3, [pc, #304]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	b299      	uxth	r1, r3
 8002150:	4b49      	ldr	r3, [pc, #292]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	7d1b      	ldrb	r3, [r3, #20]
 8002156:	461a      	mov	r2, r3
 8002158:	2305      	movs	r3, #5
 800215a:	9302      	str	r3, [sp, #8]
 800215c:	2301      	movs	r3, #1
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	f107 030f 	add.w	r3, r7, #15
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2301      	movs	r3, #1
 8002168:	4844      	ldr	r0, [pc, #272]	@ (800227c <mpu_set_bypass+0x1f8>)
 800216a:	f00b fd2f 	bl	800dbcc <HAL_I2C_Mem_Write>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d078      	beq.n	8002266 <mpu_set_bypass+0x1e2>
            return -1;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	e079      	b.n	800226e <mpu_set_bypass+0x1ea>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800217a:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <mpu_set_bypass+0x1f4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	b299      	uxth	r1, r3
 8002184:	4b3c      	ldr	r3, [pc, #240]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	791b      	ldrb	r3, [r3, #4]
 800218a:	461a      	mov	r2, r3
 800218c:	2305      	movs	r3, #5
 800218e:	9302      	str	r3, [sp, #8]
 8002190:	2301      	movs	r3, #1
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	f107 030f 	add.w	r3, r7, #15
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2301      	movs	r3, #1
 800219c:	4837      	ldr	r0, [pc, #220]	@ (800227c <mpu_set_bypass+0x1f8>)
 800219e:	f00b fe0f 	bl	800ddc0 <HAL_I2C_Mem_Read>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <mpu_set_bypass+0x12a>
            return -1;
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ac:	e05f      	b.n	800226e <mpu_set_bypass+0x1ea>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80021ae:	4b32      	ldr	r3, [pc, #200]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80021b0:	7a9b      	ldrb	r3, [r3, #10]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <mpu_set_bypass+0x142>
            tmp |= BIT_AUX_IF_EN;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	f043 0320 	orr.w	r3, r3, #32
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	e004      	b.n	80021d0 <mpu_set_bypass+0x14c>
        else
            tmp &= ~BIT_AUX_IF_EN;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	f023 0320 	bic.w	r3, r3, #32
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80021d0:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	b299      	uxth	r1, r3
 80021da:	4b27      	ldr	r3, [pc, #156]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	791b      	ldrb	r3, [r3, #4]
 80021e0:	461a      	mov	r2, r3
 80021e2:	2305      	movs	r3, #5
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	2301      	movs	r3, #1
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	f107 030f 	add.w	r3, r7, #15
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2301      	movs	r3, #1
 80021f2:	4822      	ldr	r0, [pc, #136]	@ (800227c <mpu_set_bypass+0x1f8>)
 80021f4:	f00b fcea 	bl	800dbcc <HAL_I2C_Mem_Write>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <mpu_set_bypass+0x180>
            return -1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	e034      	b.n	800226e <mpu_set_bypass+0x1ea>
        delay_ms(3);
 8002204:	2003      	movs	r0, #3
 8002206:	f00a ff21 	bl	800d04c <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 800220a:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <mpu_set_bypass+0x1f4>)
 800220c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <mpu_set_bypass+0x196>
            tmp = BIT_ACTL;
 8002214:	2380      	movs	r3, #128	@ 0x80
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e001      	b.n	800221e <mpu_set_bypass+0x19a>
        else
            tmp = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002220:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <mpu_set_bypass+0x1ae>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800222e:	b2db      	uxtb	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	b299      	uxth	r1, r3
 800223c:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <mpu_set_bypass+0x1f4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	7d1b      	ldrb	r3, [r3, #20]
 8002242:	461a      	mov	r2, r3
 8002244:	2305      	movs	r3, #5
 8002246:	9302      	str	r3, [sp, #8]
 8002248:	2301      	movs	r3, #1
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	f107 030f 	add.w	r3, r7, #15
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2301      	movs	r3, #1
 8002254:	4809      	ldr	r0, [pc, #36]	@ (800227c <mpu_set_bypass+0x1f8>)
 8002256:	f00b fcb9 	bl	800dbcc <HAL_I2C_Mem_Write>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <mpu_set_bypass+0x1e2>
            return -1;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295
 8002264:	e003      	b.n	800226e <mpu_set_bypass+0x1ea>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8002266:	4a04      	ldr	r2, [pc, #16]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	7493      	strb	r3, [r2, #18]
    return 0;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000000 	.word	0x20000000
 800227c:	2000032c 	.word	0x2000032c

08002280 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af04      	add	r7, sp, #16
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800228a:	4b23      	ldr	r3, [pc, #140]	@ (8002318 <mpu_set_int_latched+0x98>)
 800228c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002290:	79fa      	ldrb	r2, [r7, #7]
 8002292:	429a      	cmp	r2, r3
 8002294:	d101      	bne.n	800229a <mpu_set_int_latched+0x1a>
        return 0;
 8002296:	2300      	movs	r3, #0
 8002298:	e039      	b.n	800230e <mpu_set_int_latched+0x8e>

    if (enable)
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80022a0:	2330      	movs	r3, #48	@ 0x30
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e001      	b.n	80022aa <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 80022aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022ac:	7c9b      	ldrb	r3, [r3, #18]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 80022bc:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022be:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d004      	beq.n	80022d0 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	b299      	uxth	r1, r3
 80022da:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	7d1b      	ldrb	r3, [r3, #20]
 80022e0:	461a      	mov	r2, r3
 80022e2:	2305      	movs	r3, #5
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	2301      	movs	r3, #1
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	f107 030f 	add.w	r3, r7, #15
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2301      	movs	r3, #1
 80022f2:	480a      	ldr	r0, [pc, #40]	@ (800231c <mpu_set_int_latched+0x9c>)
 80022f4:	f00b fc6a 	bl	800dbcc <HAL_I2C_Mem_Write>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <mpu_set_int_latched+0x84>
        return -1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	e004      	b.n	800230e <mpu_set_int_latched+0x8e>
    st.chip_cfg.latched_int = enable;
 8002304:	4a04      	ldr	r2, [pc, #16]	@ (8002318 <mpu_set_int_latched+0x98>)
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
    return 0;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000
 800231c:	2000032c 	.word	0x2000032c

08002320 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	@ 0x28
 8002324:	af04      	add	r7, sp, #16
 8002326:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8002328:	4b45      	ldr	r3, [pc, #276]	@ (8002440 <get_accel_prod_shift+0x120>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	b299      	uxth	r1, r3
 8002332:	2305      	movs	r3, #5
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	2304      	movs	r3, #4
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	f107 0310 	add.w	r3, r7, #16
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2301      	movs	r3, #1
 8002342:	220d      	movs	r2, #13
 8002344:	483f      	ldr	r0, [pc, #252]	@ (8002444 <get_accel_prod_shift+0x124>)
 8002346:	f00b fd3b 	bl	800ddc0 <HAL_I2C_Mem_Read>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <get_accel_prod_shift+0x34>
        return 0x07;
 8002350:	2307      	movs	r3, #7
 8002352:	e071      	b.n	8002438 <get_accel_prod_shift+0x118>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 8002354:	7c3b      	ldrb	r3, [r7, #16]
 8002356:	10db      	asrs	r3, r3, #3
 8002358:	b25b      	sxtb	r3, r3
 800235a:	f003 031c 	and.w	r3, r3, #28
 800235e:	b25a      	sxtb	r2, r3
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	111b      	asrs	r3, r3, #4
 8002364:	b25b      	sxtb	r3, r3
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	b25b      	sxtb	r3, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	b25b      	sxtb	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 8002374:	7c7b      	ldrb	r3, [r7, #17]
 8002376:	10db      	asrs	r3, r3, #3
 8002378:	b25b      	sxtb	r3, r3
 800237a:	f003 031c 	and.w	r3, r3, #28
 800237e:	b25a      	sxtb	r2, r3
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	109b      	asrs	r3, r3, #2
 8002384:	b25b      	sxtb	r3, r3
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	b25b      	sxtb	r3, r3
 800238c:	4313      	orrs	r3, r2
 800238e:	b25b      	sxtb	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 8002394:	7cbb      	ldrb	r3, [r7, #18]
 8002396:	10db      	asrs	r3, r3, #3
 8002398:	b25b      	sxtb	r3, r3
 800239a:	f003 031c 	and.w	r3, r3, #28
 800239e:	b25a      	sxtb	r2, r3
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	b25b      	sxtb	r3, r3
 80023aa:	4313      	orrs	r3, r2
 80023ac:	b25b      	sxtb	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 80023b2:	2300      	movs	r3, #0
 80023b4:	75fb      	strb	r3, [r7, #23]
 80023b6:	e03b      	b.n	8002430 <get_accel_prod_shift+0x110>
        if (!shift_code[ii]) {
 80023b8:	7dfb      	ldrb	r3, [r7, #23]
 80023ba:	3318      	adds	r3, #24
 80023bc:	443b      	add	r3, r7
 80023be:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <get_accel_prod_shift+0xb6>
            st_shift[ii] = 0.f;
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
            continue;
 80023d4:	e029      	b.n	800242a <get_accel_prod_shift+0x10a>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	4a1a      	ldr	r2, [pc, #104]	@ (8002448 <get_accel_prod_shift+0x128>)
 80023e0:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 80023e2:	e00f      	b.n	8002404 <get_accel_prod_shift+0xe4>
            st_shift[ii] *= 1.034f;
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800244c <get_accel_prod_shift+0x12c>
 80023fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002400:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 8002404:	7dfb      	ldrb	r3, [r7, #23]
 8002406:	f103 0218 	add.w	r2, r3, #24
 800240a:	443a      	add	r2, r7
 800240c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8002410:	3a01      	subs	r2, #1
 8002412:	b2d1      	uxtb	r1, r2
 8002414:	f103 0218 	add.w	r2, r3, #24
 8002418:	443a      	add	r2, r7
 800241a:	f802 1c0c 	strb.w	r1, [r2, #-12]
 800241e:	3318      	adds	r3, #24
 8002420:	443b      	add	r3, r7
 8002422:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1dc      	bne.n	80023e4 <get_accel_prod_shift+0xc4>
    for (ii = 0; ii < 3; ii++) {
 800242a:	7dfb      	ldrb	r3, [r7, #23]
 800242c:	3301      	adds	r3, #1
 800242e:	75fb      	strb	r3, [r7, #23]
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d9c0      	bls.n	80023b8 <get_accel_prod_shift+0x98>
    }
    return 0;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000000 	.word	0x20000000
 8002444:	2000032c 	.word	0x2000032c
 8002448:	3eae147b 	.word	0x3eae147b
 800244c:	3f845a1d 	.word	0x3f845a1d

08002450 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	@ 0x28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff5c 	bl	8002320 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
 800246c:	e063      	b.n	8002536 <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	440b      	add	r3, r1
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	bfb8      	it	lt
 8002488:	425b      	neglt	r3, r3
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002492:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8002548 <accel_self_test+0xf8>
 8002496:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800249a:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	3328      	adds	r3, #40	@ 0x28
 80024a4:	443b      	add	r3, r7
 80024a6:	3b1c      	subs	r3, #28
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	d023      	beq.n	80024fe <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	3328      	adds	r3, #40	@ 0x28
 80024bc:	443b      	add	r3, r7
 80024be:	3b1c      	subs	r3, #28
 80024c0:	ed93 7a00 	vldr	s14, [r3]
 80024c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80024c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024d4:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 80024d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80024dc:	eef0 7ae7 	vabs.f32	s15, s15
 80024e0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800254c <accel_self_test+0xfc>
 80024e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ec:	dd20      	ble.n	8002530 <accel_self_test+0xe0>
                result |= 1 << jj;
 80024ee:	2201      	movs	r2, #1
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	6a3a      	ldr	r2, [r7, #32]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	e018      	b.n	8002530 <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 80024fe:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002550 <accel_self_test+0x100>
 8002502:	edd7 7a07 	vldr	s15, [r7, #28]
 8002506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250e:	d408      	bmi.n	8002522 <accel_self_test+0xd2>
            (st_shift_cust > test.max_g))
 8002510:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002554 <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 8002514:	edd7 7a07 	vldr	s15, [r7, #28]
 8002518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002520:	dd06      	ble.n	8002530 <accel_self_test+0xe0>
            result |= 1 << jj;
 8002522:	2201      	movs	r2, #1
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	6a3a      	ldr	r2, [r7, #32]
 800252c:	4313      	orrs	r3, r2
 800252e:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	3301      	adds	r3, #1
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	2b02      	cmp	r3, #2
 800253a:	dd98      	ble.n	800246e <accel_self_test+0x1e>
    }

    return result;
 800253c:	6a3b      	ldr	r3, [r7, #32]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3728      	adds	r7, #40	@ 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	47800000 	.word	0x47800000
 800254c:	3e0f5c29 	.word	0x3e0f5c29
 8002550:	3e99999a 	.word	0x3e99999a
 8002554:	3f733333 	.word	0x3f733333

08002558 <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08c      	sub	sp, #48	@ 0x30
 800255c:	af04      	add	r7, sp, #16
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 8002566:	4b59      	ldr	r3, [pc, #356]	@ (80026cc <gyro_self_test+0x174>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	b299      	uxth	r1, r3
 8002570:	2305      	movs	r3, #5
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	2303      	movs	r3, #3
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2301      	movs	r3, #1
 8002580:	220d      	movs	r2, #13
 8002582:	4853      	ldr	r0, [pc, #332]	@ (80026d0 <gyro_self_test+0x178>)
 8002584:	f00b fc1c 	bl	800ddc0 <HAL_I2C_Mem_Read>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <gyro_self_test+0x3a>
        return 0x07;
 800258e:	2307      	movs	r3, #7
 8002590:	e097      	b.n	80026c2 <gyro_self_test+0x16a>

    tmp[0] &= 0x1F;
 8002592:	7a3b      	ldrb	r3, [r7, #8]
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	b2db      	uxtb	r3, r3
 800259a:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 800259c:	7a7b      	ldrb	r3, [r7, #9]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 80025a6:	7abb      	ldrb	r3, [r7, #10]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	e080      	b.n	80026b8 <gyro_self_test+0x160>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	6839      	ldr	r1, [r7, #0]
 80025c6:	440b      	add	r3, r1
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bfb8      	it	lt
 80025d0:	425b      	neglt	r3, r3
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025da:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80026d4 <gyro_self_test+0x17c>
 80025de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e2:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 80025e6:	f107 0208 	add.w	r2, r7, #8
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4413      	add	r3, r2
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d045      	beq.n	8002680 <gyro_self_test+0x128>
            st_shift = 3275.f / test.gyro_sens;
 80025f4:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80026d8 <gyro_self_test+0x180>
 80025f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025fc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80026dc <gyro_self_test+0x184>
 8002600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002604:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8002608:	e007      	b.n	800261a <gyro_self_test+0xc2>
                st_shift *= 1.046f;
 800260a:	edd7 7a05 	vldr	s15, [r7, #20]
 800260e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80026e0 <gyro_self_test+0x188>
 8002612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002616:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 800261a:	f107 0208 	add.w	r2, r7, #8
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	4413      	add	r3, r2
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	3b01      	subs	r3, #1
 8002626:	b2d9      	uxtb	r1, r3
 8002628:	f107 0208 	add.w	r2, r7, #8
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	460a      	mov	r2, r1
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	f107 0208 	add.w	r2, r7, #8
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	4413      	add	r3, r2
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e3      	bne.n	800260a <gyro_self_test+0xb2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 8002642:	edd7 6a04 	vldr	s13, [r7, #16]
 8002646:	ed97 7a05 	vldr	s14, [r7, #20]
 800264a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002652:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002656:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 800265a:	edd7 7a03 	vldr	s15, [r7, #12]
 800265e:	eef0 7ae7 	vabs.f32	s15, s15
 8002662:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80026e4 <gyro_self_test+0x18c>
 8002666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	dd20      	ble.n	80026b2 <gyro_self_test+0x15a>
                result |= 1 << jj;
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	e018      	b.n	80026b2 <gyro_self_test+0x15a>
        } else if ((st_shift_cust < test.min_dps) ||
 8002680:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002684:	edd7 7a04 	vldr	s15, [r7, #16]
 8002688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	d408      	bmi.n	80026a4 <gyro_self_test+0x14c>
            (st_shift_cust > test.max_dps))
 8002692:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80026e8 <gyro_self_test+0x190>
        } else if ((st_shift_cust < test.min_dps) ||
 8002696:	edd7 7a04 	vldr	s15, [r7, #16]
 800269a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a2:	dd06      	ble.n	80026b2 <gyro_self_test+0x15a>
            result |= 1 << jj;
 80026a4:	2201      	movs	r2, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	f77f af7b 	ble.w	80025b6 <gyro_self_test+0x5e>
    }
    return result;
 80026c0:	69bb      	ldr	r3, [r7, #24]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000000 	.word	0x20000000
 80026d0:	2000032c 	.word	0x2000032c
 80026d4:	47800000 	.word	0x47800000
 80026d8:	00000083 	.word	0x00000083
 80026dc:	454cb000 	.word	0x454cb000
 80026e0:	3f85e354 	.word	0x3f85e354
 80026e4:	3e0f5c29 	.word	0x3e0f5c29
 80026e8:	42d20000 	.word	0x42d20000

080026ec <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 80026ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f0:	b0bc      	sub	sp, #240	@ 0xf0
 80026f2:	af04      	add	r7, sp, #16
 80026f4:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 80026f8:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80026fc:	4613      	mov	r3, r2
 80026fe:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 8002702:	2301      	movs	r3, #1
 8002704:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    data[1] = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 800270e:	4b9c      	ldr	r3, [pc, #624]	@ (8002980 <get_st_biases+0x294>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	b299      	uxth	r1, r3
 8002718:	4b99      	ldr	r3, [pc, #612]	@ (8002980 <get_st_biases+0x294>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	7c9b      	ldrb	r3, [r3, #18]
 800271e:	461a      	mov	r2, r3
 8002720:	2305      	movs	r3, #5
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	2302      	movs	r3, #2
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2301      	movs	r3, #1
 8002730:	4894      	ldr	r0, [pc, #592]	@ (8002984 <get_st_biases+0x298>)
 8002732:	f00b fa4b 	bl	800dbcc <HAL_I2C_Mem_Write>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <get_st_biases+0x56>
        return -1;
 800273c:	f04f 33ff 	mov.w	r3, #4294967295
 8002740:	e3dc      	b.n	8002efc <get_st_biases+0x810>
    delay_ms(200);
 8002742:	20c8      	movs	r0, #200	@ 0xc8
 8002744:	f00a fc82 	bl	800d04c <HAL_Delay>
    data[0] = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 800274e:	4b8c      	ldr	r3, [pc, #560]	@ (8002980 <get_st_biases+0x294>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	b299      	uxth	r1, r3
 8002758:	4b89      	ldr	r3, [pc, #548]	@ (8002980 <get_st_biases+0x294>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	7bdb      	ldrb	r3, [r3, #15]
 800275e:	461a      	mov	r2, r3
 8002760:	2305      	movs	r3, #5
 8002762:	9302      	str	r3, [sp, #8]
 8002764:	2301      	movs	r3, #1
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2301      	movs	r3, #1
 8002770:	4884      	ldr	r0, [pc, #528]	@ (8002984 <get_st_biases+0x298>)
 8002772:	f00b fa2b 	bl	800dbcc <HAL_I2C_Mem_Write>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <get_st_biases+0x96>
        return -1;
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
 8002780:	e3bc      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002782:	4b7f      	ldr	r3, [pc, #508]	@ (8002980 <get_st_biases+0x294>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	b299      	uxth	r1, r3
 800278c:	4b7c      	ldr	r3, [pc, #496]	@ (8002980 <get_st_biases+0x294>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	795b      	ldrb	r3, [r3, #5]
 8002792:	461a      	mov	r2, r3
 8002794:	2305      	movs	r3, #5
 8002796:	9302      	str	r3, [sp, #8]
 8002798:	2301      	movs	r3, #1
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2301      	movs	r3, #1
 80027a4:	4877      	ldr	r0, [pc, #476]	@ (8002984 <get_st_biases+0x298>)
 80027a6:	f00b fa11 	bl	800dbcc <HAL_I2C_Mem_Write>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <get_st_biases+0xca>
        return -1;
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
 80027b4:	e3a2      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80027b6:	4b72      	ldr	r3, [pc, #456]	@ (8002980 <get_st_biases+0x294>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	b299      	uxth	r1, r3
 80027c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002980 <get_st_biases+0x294>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	7c9b      	ldrb	r3, [r3, #18]
 80027c6:	461a      	mov	r2, r3
 80027c8:	2305      	movs	r3, #5
 80027ca:	9302      	str	r3, [sp, #8]
 80027cc:	2301      	movs	r3, #1
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2301      	movs	r3, #1
 80027d8:	486a      	ldr	r0, [pc, #424]	@ (8002984 <get_st_biases+0x298>)
 80027da:	f00b f9f7 	bl	800dbcc <HAL_I2C_Mem_Write>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <get_st_biases+0xfe>
        return -1;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	e388      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80027ea:	4b65      	ldr	r3, [pc, #404]	@ (8002980 <get_st_biases+0x294>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	b299      	uxth	r1, r3
 80027f4:	4b62      	ldr	r3, [pc, #392]	@ (8002980 <get_st_biases+0x294>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	7ddb      	ldrb	r3, [r3, #23]
 80027fa:	461a      	mov	r2, r3
 80027fc:	2305      	movs	r3, #5
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	2301      	movs	r3, #1
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	485d      	ldr	r0, [pc, #372]	@ (8002984 <get_st_biases+0x298>)
 800280e:	f00b f9dd 	bl	800dbcc <HAL_I2C_Mem_Write>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <get_st_biases+0x132>
        return -1;
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
 800281c:	e36e      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800281e:	4b58      	ldr	r3, [pc, #352]	@ (8002980 <get_st_biases+0x294>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	b299      	uxth	r1, r3
 8002828:	4b55      	ldr	r3, [pc, #340]	@ (8002980 <get_st_biases+0x294>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	791b      	ldrb	r3, [r3, #4]
 800282e:	461a      	mov	r2, r3
 8002830:	2305      	movs	r3, #5
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	2301      	movs	r3, #1
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2301      	movs	r3, #1
 8002840:	4850      	ldr	r0, [pc, #320]	@ (8002984 <get_st_biases+0x298>)
 8002842:	f00b f9c3 	bl	800dbcc <HAL_I2C_Mem_Write>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <get_st_biases+0x166>
        return -1;
 800284c:	f04f 33ff 	mov.w	r3, #4294967295
 8002850:	e354      	b.n	8002efc <get_st_biases+0x810>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 8002852:	230c      	movs	r3, #12
 8002854:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8002858:	4b49      	ldr	r3, [pc, #292]	@ (8002980 <get_st_biases+0x294>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	b299      	uxth	r1, r3
 8002862:	4b47      	ldr	r3, [pc, #284]	@ (8002980 <get_st_biases+0x294>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	791b      	ldrb	r3, [r3, #4]
 8002868:	461a      	mov	r2, r3
 800286a:	2305      	movs	r3, #5
 800286c:	9302      	str	r3, [sp, #8]
 800286e:	2301      	movs	r3, #1
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2301      	movs	r3, #1
 800287a:	4842      	ldr	r0, [pc, #264]	@ (8002984 <get_st_biases+0x298>)
 800287c:	f00b f9a6 	bl	800dbcc <HAL_I2C_Mem_Write>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <get_st_biases+0x1a0>
        return -1;
 8002886:	f04f 33ff 	mov.w	r3, #4294967295
 800288a:	e337      	b.n	8002efc <get_st_biases+0x810>
    delay_ms(15);
 800288c:	200f      	movs	r0, #15
 800288e:	f00a fbdd 	bl	800d04c <HAL_Delay>
    data[0] = st.test->reg_lpf;
 8002892:	4b3b      	ldr	r3, [pc, #236]	@ (8002980 <get_st_biases+0x294>)
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	7a5b      	ldrb	r3, [r3, #9]
 8002898:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 800289c:	4b38      	ldr	r3, [pc, #224]	@ (8002980 <get_st_biases+0x294>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	b299      	uxth	r1, r3
 80028a6:	4b36      	ldr	r3, [pc, #216]	@ (8002980 <get_st_biases+0x294>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	789b      	ldrb	r3, [r3, #2]
 80028ac:	461a      	mov	r2, r3
 80028ae:	2305      	movs	r3, #5
 80028b0:	9302      	str	r3, [sp, #8]
 80028b2:	2301      	movs	r3, #1
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2301      	movs	r3, #1
 80028be:	4831      	ldr	r0, [pc, #196]	@ (8002984 <get_st_biases+0x298>)
 80028c0:	f00b f984 	bl	800dbcc <HAL_I2C_Mem_Write>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <get_st_biases+0x1e4>
        return -1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	e315      	b.n	8002efc <get_st_biases+0x810>
    data[0] = st.test->reg_rate_div;
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <get_st_biases+0x294>)
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	7a1b      	ldrb	r3, [r3, #8]
 80028d6:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 80028da:	4b29      	ldr	r3, [pc, #164]	@ (8002980 <get_st_biases+0x294>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	b299      	uxth	r1, r3
 80028e4:	4b26      	ldr	r3, [pc, #152]	@ (8002980 <get_st_biases+0x294>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	785b      	ldrb	r3, [r3, #1]
 80028ea:	461a      	mov	r2, r3
 80028ec:	2305      	movs	r3, #5
 80028ee:	9302      	str	r3, [sp, #8]
 80028f0:	2301      	movs	r3, #1
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2301      	movs	r3, #1
 80028fc:	4821      	ldr	r0, [pc, #132]	@ (8002984 <get_st_biases+0x298>)
 80028fe:	f00b f965 	bl	800dbcc <HAL_I2C_Mem_Write>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <get_st_biases+0x222>
        return -1;
 8002908:	f04f 33ff 	mov.w	r3, #4294967295
 800290c:	e2f6      	b.n	8002efc <get_st_biases+0x810>
    if (hw_test)
 800290e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <get_st_biases+0x23c>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 8002916:	4b1a      	ldr	r3, [pc, #104]	@ (8002980 <get_st_biases+0x294>)
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	7a9b      	ldrb	r3, [r3, #10]
 800291c:	f063 031f 	orn	r3, r3, #31
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 8002926:	e004      	b.n	8002932 <get_st_biases+0x246>
    else
        data[0] = st.test->reg_gyro_fsr;
 8002928:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <get_st_biases+0x294>)
 800292a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292c:	7a9b      	ldrb	r3, [r3, #10]
 800292e:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 8002932:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <get_st_biases+0x294>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	b299      	uxth	r1, r3
 800293c:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <get_st_biases+0x294>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	799b      	ldrb	r3, [r3, #6]
 8002942:	461a      	mov	r2, r3
 8002944:	2305      	movs	r3, #5
 8002946:	9302      	str	r3, [sp, #8]
 8002948:	2301      	movs	r3, #1
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2301      	movs	r3, #1
 8002954:	480b      	ldr	r0, [pc, #44]	@ (8002984 <get_st_biases+0x298>)
 8002956:	f00b f939 	bl	800dbcc <HAL_I2C_Mem_Write>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <get_st_biases+0x27a>
        return -1;
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	e2ca      	b.n	8002efc <get_st_biases+0x810>

    if (hw_test)
 8002966:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00c      	beq.n	8002988 <get_st_biases+0x29c>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 800296e:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <get_st_biases+0x294>)
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	7adb      	ldrb	r3, [r3, #11]
 8002974:	f063 031f 	orn	r3, r3, #31
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 800297e:	e006      	b.n	800298e <get_st_biases+0x2a2>
 8002980:	20000000 	.word	0x20000000
 8002984:	2000032c 	.word	0x2000032c
    else
        data[0] = test.reg_accel_fsr;
 8002988:	2318      	movs	r3, #24
 800298a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 800298e:	4b73      	ldr	r3, [pc, #460]	@ (8002b5c <get_st_biases+0x470>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	b299      	uxth	r1, r3
 8002998:	4b70      	ldr	r3, [pc, #448]	@ (8002b5c <get_st_biases+0x470>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	79db      	ldrb	r3, [r3, #7]
 800299e:	461a      	mov	r2, r3
 80029a0:	2305      	movs	r3, #5
 80029a2:	9302      	str	r3, [sp, #8]
 80029a4:	2301      	movs	r3, #1
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2301      	movs	r3, #1
 80029b0:	486b      	ldr	r0, [pc, #428]	@ (8002b60 <get_st_biases+0x474>)
 80029b2:	f00b f90b 	bl	800dbcc <HAL_I2C_Mem_Write>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <get_st_biases+0x2d6>
        return -1;
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295
 80029c0:	e29c      	b.n	8002efc <get_st_biases+0x810>
    if (hw_test)
 80029c2:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <get_st_biases+0x2e4>
        delay_ms(200);
 80029ca:	20c8      	movs	r0, #200	@ 0xc8
 80029cc:	f00a fb3e 	bl	800d04c <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 80029d0:	2340      	movs	r3, #64	@ 0x40
 80029d2:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80029d6:	4b61      	ldr	r3, [pc, #388]	@ (8002b5c <get_st_biases+0x470>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	b299      	uxth	r1, r3
 80029e0:	4b5e      	ldr	r3, [pc, #376]	@ (8002b5c <get_st_biases+0x470>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	791b      	ldrb	r3, [r3, #4]
 80029e6:	461a      	mov	r2, r3
 80029e8:	2305      	movs	r3, #5
 80029ea:	9302      	str	r3, [sp, #8]
 80029ec:	2301      	movs	r3, #1
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2301      	movs	r3, #1
 80029f8:	4859      	ldr	r0, [pc, #356]	@ (8002b60 <get_st_biases+0x474>)
 80029fa:	f00b f8e7 	bl	800dbcc <HAL_I2C_Mem_Write>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <get_st_biases+0x31e>
        return -1;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
 8002a08:	e278      	b.n	8002efc <get_st_biases+0x810>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 8002a0a:	2378      	movs	r3, #120	@ 0x78
 8002a0c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002a10:	4b52      	ldr	r3, [pc, #328]	@ (8002b5c <get_st_biases+0x470>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	b299      	uxth	r1, r3
 8002a1a:	4b50      	ldr	r3, [pc, #320]	@ (8002b5c <get_st_biases+0x470>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	795b      	ldrb	r3, [r3, #5]
 8002a20:	461a      	mov	r2, r3
 8002a22:	2305      	movs	r3, #5
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	2301      	movs	r3, #1
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	2301      	movs	r3, #1
 8002a32:	484b      	ldr	r0, [pc, #300]	@ (8002b60 <get_st_biases+0x474>)
 8002a34:	f00b f8ca 	bl	800dbcc <HAL_I2C_Mem_Write>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <get_st_biases+0x358>
        return -1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	e25b      	b.n	8002efc <get_st_biases+0x810>
    delay_ms(test.wait_ms);
 8002a44:	2332      	movs	r3, #50	@ 0x32
 8002a46:	4618      	mov	r0, r3
 8002a48:	f00a fb00 	bl	800d04c <HAL_Delay>
    data[0] = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002a52:	4b42      	ldr	r3, [pc, #264]	@ (8002b5c <get_st_biases+0x470>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	b299      	uxth	r1, r3
 8002a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b5c <get_st_biases+0x470>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	795b      	ldrb	r3, [r3, #5]
 8002a62:	461a      	mov	r2, r3
 8002a64:	2305      	movs	r3, #5
 8002a66:	9302      	str	r3, [sp, #8]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2301      	movs	r3, #1
 8002a74:	483a      	ldr	r0, [pc, #232]	@ (8002b60 <get_st_biases+0x474>)
 8002a76:	f00b f8a9 	bl	800dbcc <HAL_I2C_Mem_Write>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <get_st_biases+0x39a>
        return -1;
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	e23a      	b.n	8002efc <get_st_biases+0x810>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 8002a86:	4b35      	ldr	r3, [pc, #212]	@ (8002b5c <get_st_biases+0x470>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	b299      	uxth	r1, r3
 8002a90:	4b32      	ldr	r3, [pc, #200]	@ (8002b5c <get_st_biases+0x470>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	7a9b      	ldrb	r3, [r3, #10]
 8002a96:	461a      	mov	r2, r3
 8002a98:	2305      	movs	r3, #5
 8002a9a:	9302      	str	r3, [sp, #8]
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	482d      	ldr	r0, [pc, #180]	@ (8002b60 <get_st_biases+0x474>)
 8002aaa:	f00b f989 	bl	800ddc0 <HAL_I2C_Mem_Read>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <get_st_biases+0x3ce>
        return -1;
 8002ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab8:	e220      	b.n	8002efc <get_st_biases+0x810>

    fifo_count = (data[0] << 8) | data[1];
 8002aba:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002abe:	b21b      	sxth	r3, r3
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	b21a      	sxth	r2, r3
 8002ac4:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b21b      	sxth	r3, r3
 8002ace:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 8002ad2:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 8002ad6:	4b23      	ldr	r3, [pc, #140]	@ (8002b64 <get_st_biases+0x478>)
 8002ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8002adc:	08db      	lsrs	r3, r3, #3
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 8002ae4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ae8:	f103 0108 	add.w	r1, r3, #8
 8002aec:	2300      	movs	r3, #0
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002af4:	1d1a      	adds	r2, r3, #4
 8002af6:	680b      	ldr	r3, [r1, #0]
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b00:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 8002b02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b06:	f103 0108 	add.w	r1, r3, #8
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	600b      	str	r3, [r1, #0]
 8002b0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b12:	1d1a      	adds	r2, r3, #4
 8002b14:	680b      	ldr	r3, [r1, #0]
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b1e:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 8002b20:	2300      	movs	r3, #0
 8002b22:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002b26:	e0b0      	b.n	8002c8a <get_st_biases+0x59e>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <get_st_biases+0x470>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	b299      	uxth	r1, r3
 8002b32:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <get_st_biases+0x470>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	7adb      	ldrb	r3, [r3, #11]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2305      	movs	r3, #5
 8002b3c:	9302      	str	r3, [sp, #8]
 8002b3e:	230c      	movs	r3, #12
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2301      	movs	r3, #1
 8002b4a:	4805      	ldr	r0, [pc, #20]	@ (8002b60 <get_st_biases+0x474>)
 8002b4c:	f00b f938 	bl	800ddc0 <HAL_I2C_Mem_Read>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <get_st_biases+0x47c>
            return -1;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5a:	e1cf      	b.n	8002efc <get_st_biases+0x810>
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	2000032c 	.word	0x2000032c
 8002b64:	aaaaaaab 	.word	0xaaaaaaab
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8002b68:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002b6c:	b21b      	sxth	r3, r3
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	b21a      	sxth	r2, r3
 8002b72:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002b76:	b21b      	sxth	r3, r3
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 8002b80:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	b21a      	sxth	r2, r3
 8002b8a:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8002b8e:	b21b      	sxth	r3, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b21b      	sxth	r3, r3
 8002b94:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 8002b98:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8002b9c:	b21b      	sxth	r3, r3
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	b21a      	sxth	r2, r3
 8002ba2:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
        accel[0] += (long)accel_cur[0];
 8002bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8002bba:	441a      	add	r2, r3
 8002bbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bc0:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 8002bc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	6819      	ldr	r1, [r3, #0]
 8002bca:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bd4:	1d1a      	adds	r2, r3, #4
 8002bd6:	180b      	adds	r3, r1, r0
 8002bd8:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 8002bda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bde:	3308      	adds	r3, #8
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 8002be6:	4618      	mov	r0, r3
 8002be8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bec:	f103 0208 	add.w	r2, r3, #8
 8002bf0:	180b      	adds	r3, r1, r0
 8002bf2:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 8002bf4:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	b21a      	sxth	r2, r3
 8002bfe:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002c02:	b21b      	sxth	r3, r3
 8002c04:	4313      	orrs	r3, r2
 8002c06:	b21b      	sxth	r3, r3
 8002c08:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 8002c0c:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8002c10:	b21b      	sxth	r3, r3
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	b21a      	sxth	r2, r3
 8002c16:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 8002c1a:	b21b      	sxth	r3, r3
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 8002c24:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8002c28:	b21b      	sxth	r3, r3
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	b21a      	sxth	r2, r3
 8002c2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8002c32:	b21b      	sxth	r3, r3
 8002c34:	4313      	orrs	r3, r2
 8002c36:	b21b      	sxth	r3, r3
 8002c38:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
        gyro[0] += (long)gyro_cur[0];
 8002c3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8002c46:	441a      	add	r2, r3
 8002c48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c4c:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 8002c4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c52:	3304      	adds	r3, #4
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c60:	1d1a      	adds	r2, r3, #4
 8002c62:	180b      	adds	r3, r1, r0
 8002c64:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 8002c66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c78:	f103 0208 	add.w	r2, r3, #8
 8002c7c:	180b      	adds	r3, r1, r0
 8002c7e:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 8002c80:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002c84:	3301      	adds	r3, #1
 8002c86:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002c8a:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 8002c8e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002c92:	429a      	cmp	r2, r3
 8002c94:	f4ff af48 	bcc.w	8002b28 <get_st_biases+0x43c>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 8002c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	17da      	asrs	r2, r3, #31
 8002ca0:	461c      	mov	r4, r3
 8002ca2:	4615      	mov	r5, r2
 8002ca4:	1423      	asrs	r3, r4, #16
 8002ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002caa:	0423      	lsls	r3, r4, #16
 8002cac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002cb0:	2283      	movs	r2, #131	@ 0x83
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8002cb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cbc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002cc0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002cc4:	f7fd ffe0 	bl	8000c88 <__aeabi_ldivmod>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cde:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002ce2:	f7fd ffd1 	bl	8000c88 <__aeabi_ldivmod>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cee:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 8002cf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	17da      	asrs	r2, r3, #31
 8002cfa:	4698      	mov	r8, r3
 8002cfc:	4691      	mov	r9, r2
 8002cfe:	ea4f 4328 	mov.w	r3, r8, asr #16
 8002d02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d06:	ea4f 4308 	mov.w	r3, r8, lsl #16
 8002d0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d0e:	2283      	movs	r2, #131	@ 0x83
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d1a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002d1e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002d22:	f7fd ffb1 	bl	8000c88 <__aeabi_ldivmod>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002d32:	2200      	movs	r2, #0
 8002d34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d38:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002d3c:	f7fd ffa4 	bl	8000c88 <__aeabi_ldivmod>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d4c:	1d1a      	adds	r2, r3, #4
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 8002d52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d56:	3308      	adds	r3, #8
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	17da      	asrs	r2, r3, #31
 8002d5c:	469a      	mov	sl, r3
 8002d5e:	4693      	mov	fp, r2
 8002d60:	ea4f 432a 	mov.w	r3, sl, asr #16
 8002d64:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d66:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8002d6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d6c:	2283      	movs	r2, #131	@ 0x83
 8002d6e:	2300      	movs	r3, #0
 8002d70:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002d72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d74:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002d78:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002d7c:	f7fd ff84 	bl	8000c88 <__aeabi_ldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d90:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d92:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002d96:	f7fd ff77 	bl	8000c88 <__aeabi_ldivmod>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002da6:	f103 0208 	add.w	r2, r3, #8
 8002daa:	4603      	mov	r3, r0
 8002dac:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 8002dae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	17da      	asrs	r2, r3, #31
 8002db6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002db8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002dba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	141b      	asrs	r3, r3, #16
 8002dc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dce:	2300      	movs	r3, #0
 8002dd0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dd8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002ddc:	f7fd ff54 	bl	8000c88 <__aeabi_ldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4610      	mov	r0, r2
 8002de6:	4619      	mov	r1, r3
 8002de8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002dec:	2200      	movs	r2, #0
 8002dee:	643b      	str	r3, [r7, #64]	@ 0x40
 8002df0:	647a      	str	r2, [r7, #68]	@ 0x44
 8002df2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002df6:	f7fd ff47 	bl	8000c88 <__aeabi_ldivmod>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e02:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 8002e04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e08:	3304      	adds	r3, #4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	17da      	asrs	r2, r3, #31
 8002e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e12:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002e16:	460b      	mov	r3, r1
 8002e18:	141b      	asrs	r3, r3, #16
 8002e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	041b      	lsls	r3, r3, #16
 8002e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e26:	2300      	movs	r3, #0
 8002e28:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e30:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002e34:	f7fd ff28 	bl	8000c88 <__aeabi_ldivmod>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002e44:	2200      	movs	r2, #0
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e4e:	f7fd ff1b 	bl	8000c88 <__aeabi_ldivmod>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e5e:	3304      	adds	r3, #4
 8002e60:	4602      	mov	r2, r0
 8002e62:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 8002e64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e68:	3308      	adds	r3, #8
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	17da      	asrs	r2, r3, #31
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	61fa      	str	r2, [r7, #28]
 8002e72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002e76:	460b      	mov	r3, r1
 8002e78:	141b      	asrs	r3, r3, #16
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	041b      	lsls	r3, r3, #16
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e86:	2300      	movs	r3, #0
 8002e88:	60ba      	str	r2, [r7, #8]
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e94:	f7fd fef8 	bl	8000c88 <__aeabi_ldivmod>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eae:	f7fd feeb 	bl	8000c88 <__aeabi_ldivmod>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 8002ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ec8:	3308      	adds	r3, #8
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	dd0a      	ble.n	8002ee6 <get_st_biases+0x7fa>
        accel[2] -= 65536L;
 8002ed0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002edc:	3308      	adds	r3, #8
 8002ede:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e009      	b.n	8002efa <get_st_biases+0x80e>
    else
        accel[2] += 65536L;
 8002ee6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002eea:	3308      	adds	r3, #8
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8002ef8:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	37e0      	adds	r7, #224	@ 0xe0
 8002f00:	46bd      	mov	sp, r7
 8002f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f06:	bf00      	nop

08002f08 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08e      	sub	sp, #56	@ 0x38
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 8002f12:	2302      	movs	r3, #2
 8002f14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 8002f18:	4b64      	ldr	r3, [pc, #400]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8002f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f000 fa18 	bl	8003358 <mpu_set_dmp_state>
        dmp_was_on = 1;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002f2e:	e002      	b.n	8002f36 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 8002f36:	f107 030c 	add.w	r3, r7, #12
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fc2e 	bl	800179c <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 8002f40:	f107 030f 	add.w	r3, r7, #15
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe fcbd 	bl	80018c4 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 8002f4a:	f107 0308 	add.w	r3, r7, #8
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fd64 	bl	8001a1c <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 8002f54:	f107 030a 	add.w	r3, r7, #10
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fdf7 	bl	8001b4c <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 8002f5e:	4b53      	ldr	r3, [pc, #332]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8002f60:	7a9b      	ldrb	r3, [r3, #10]
 8002f62:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 8002f66:	f107 030e 	add.w	r3, r7, #14
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fef0 	bl	8001d50 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f74:	e00a      	b.n	8002f8c <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 8002f76:	2200      	movs	r2, #0
 8002f78:	6839      	ldr	r1, [r7, #0]
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fbb6 	bl	80026ec <get_st_biases>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 8002f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f88:	3301      	adds	r3, #1
 8002f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f92:	429a      	cmp	r2, r3
 8002f94:	dbef      	blt.n	8002f76 <mpu_run_self_test+0x6e>
 8002f96:	e000      	b.n	8002f9a <mpu_run_self_test+0x92>
            break;
 8002f98:	bf00      	nop
    if (ii == tries) {
 8002f9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d102      	bne.n	8002faa <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8002fa8:	e045      	b.n	8003036 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fae:	e00d      	b.n	8002fcc <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 8002fb0:	f107 0110 	add.w	r1, r7, #16
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	2201      	movs	r2, #1
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fb96 	bl	80026ec <get_st_biases>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc8:	3301      	adds	r3, #1
 8002fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fcc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	dbec      	blt.n	8002fb0 <mpu_run_self_test+0xa8>
 8002fd6:	e000      	b.n	8002fda <mpu_run_self_test+0xd2>
            break;
 8002fd8:	bf00      	nop
    if (ii == tries) {
 8002fda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002fde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d102      	bne.n	8002fea <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8002fe8:	e025      	b.n	8003036 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 8002fea:	f107 0310 	add.w	r3, r7, #16
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6838      	ldr	r0, [r7, #0]
 8002ff2:	f7ff fa2d 	bl	8002450 <accel_self_test>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff faa8 	bl	8002558 <gyro_self_test>
 8003008:	4603      	mov	r3, r0
 800300a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    result = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!gyro_result)
 8003012:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <mpu_run_self_test+0x11a>
        result |= 0x01;
 800301a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!accel_result)
 8003022:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <mpu_run_self_test+0x12c>
        result |= 0x02;
 800302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	633b      	str	r3, [r7, #48]	@ 0x30
 8003032:	e000      	b.n	8003036 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 8003034:	bf00      	nop
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 8003036:	4b1d      	ldr	r3, [pc, #116]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003038:	22ff      	movs	r2, #255	@ 0xff
 800303a:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800303c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ac <mpu_run_self_test+0x1a4>)
 800303e:	22ff      	movs	r2, #255	@ 0xff
 8003040:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8003042:	4b1a      	ldr	r3, [pc, #104]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003044:	22ff      	movs	r2, #255	@ 0xff
 8003046:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8003048:	4b18      	ldr	r3, [pc, #96]	@ (80030ac <mpu_run_self_test+0x1a4>)
 800304a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800304e:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 8003050:	4b16      	ldr	r3, [pc, #88]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003052:	22ff      	movs	r2, #255	@ 0xff
 8003054:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 8003056:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003058:	22ff      	movs	r2, #255	@ 0xff
 800305a:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800305c:	4b13      	ldr	r3, [pc, #76]	@ (80030ac <mpu_run_self_test+0x1a4>)
 800305e:	2201      	movs	r2, #1
 8003060:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 8003062:	89bb      	ldrh	r3, [r7, #12]
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe fbcd 	bl	8001804 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe fc63 	bl	8001938 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 8003072:	893b      	ldrh	r3, [r7, #8]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe fd0f 	bl	8001a98 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 800307a:	897b      	ldrh	r3, [r7, #10]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fd7f 	bl	8001b80 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 8003082:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fec6 	bl	8001e18 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 800308c:	7bbb      	ldrb	r3, [r7, #14]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe fe70 	bl	8001d74 <mpu_configure_fifo>

    if (dmp_was_on)
 8003094:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <mpu_run_self_test+0x19a>
        mpu_set_dmp_state(1);
 800309c:	2001      	movs	r0, #1
 800309e:	f000 f95b 	bl	8003358 <mpu_set_dmp_state>

    return result;
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3738      	adds	r7, #56	@ 0x38
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000000 	.word	0x20000000

080030b0 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af04      	add	r7, sp, #16
 80030b6:	4603      	mov	r3, r0
 80030b8:	603a      	str	r2, [r7, #0]
 80030ba:	80fb      	strh	r3, [r7, #6]
 80030bc:	460b      	mov	r3, r1
 80030be:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <mpu_write_mem+0x1c>
        return -1;
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	e04e      	b.n	800316a <mpu_write_mem+0xba>
    if (!st.chip_cfg.sensors)
 80030cc:	4b29      	ldr	r3, [pc, #164]	@ (8003174 <mpu_write_mem+0xc4>)
 80030ce:	7a9b      	ldrb	r3, [r3, #10]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <mpu_write_mem+0x2a>
        return -1;
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295
 80030d8:	e047      	b.n	800316a <mpu_write_mem+0xba>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	b29b      	uxth	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80030ea:	7b7b      	ldrb	r3, [r7, #13]
 80030ec:	461a      	mov	r2, r3
 80030ee:	88bb      	ldrh	r3, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	4a20      	ldr	r2, [pc, #128]	@ (8003174 <mpu_write_mem+0xc4>)
 80030f4:	6852      	ldr	r2, [r2, #4]
 80030f6:	8952      	ldrh	r2, [r2, #10]
 80030f8:	4293      	cmp	r3, r2
 80030fa:	dd02      	ble.n	8003102 <mpu_write_mem+0x52>
        return -1;
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003100:	e033      	b.n	800316a <mpu_write_mem+0xba>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8003102:	4b1c      	ldr	r3, [pc, #112]	@ (8003174 <mpu_write_mem+0xc4>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	b299      	uxth	r1, r3
 800310c:	4b19      	ldr	r3, [pc, #100]	@ (8003174 <mpu_write_mem+0xc4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	7e1b      	ldrb	r3, [r3, #24]
 8003112:	461a      	mov	r2, r3
 8003114:	2305      	movs	r3, #5
 8003116:	9302      	str	r3, [sp, #8]
 8003118:	2302      	movs	r3, #2
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	f107 030c 	add.w	r3, r7, #12
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	2301      	movs	r3, #1
 8003124:	4814      	ldr	r0, [pc, #80]	@ (8003178 <mpu_write_mem+0xc8>)
 8003126:	f00a fd51 	bl	800dbcc <HAL_I2C_Mem_Write>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <mpu_write_mem+0x86>
        return -1;
 8003130:	f04f 33ff 	mov.w	r3, #4294967295
 8003134:	e019      	b.n	800316a <mpu_write_mem+0xba>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8003136:	4b0f      	ldr	r3, [pc, #60]	@ (8003174 <mpu_write_mem+0xc4>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	b299      	uxth	r1, r3
 8003140:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <mpu_write_mem+0xc4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	7d5b      	ldrb	r3, [r3, #21]
 8003146:	461a      	mov	r2, r3
 8003148:	2305      	movs	r3, #5
 800314a:	9302      	str	r3, [sp, #8]
 800314c:	88bb      	ldrh	r3, [r7, #4]
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2301      	movs	r3, #1
 8003156:	4808      	ldr	r0, [pc, #32]	@ (8003178 <mpu_write_mem+0xc8>)
 8003158:	f00a fd38 	bl	800dbcc <HAL_I2C_Mem_Write>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <mpu_write_mem+0xb8>
        return -1;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295
 8003166:	e000      	b.n	800316a <mpu_write_mem+0xba>
    return 0;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000000 	.word	0x20000000
 8003178:	2000032c 	.word	0x2000032c

0800317c <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af04      	add	r7, sp, #16
 8003182:	4603      	mov	r3, r0
 8003184:	603a      	str	r2, [r7, #0]
 8003186:	80fb      	strh	r3, [r7, #6]
 8003188:	460b      	mov	r3, r1
 800318a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d102      	bne.n	8003198 <mpu_read_mem+0x1c>
        return -1;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	e04e      	b.n	8003236 <mpu_read_mem+0xba>
    if (!st.chip_cfg.sensors)
 8003198:	4b29      	ldr	r3, [pc, #164]	@ (8003240 <mpu_read_mem+0xc4>)
 800319a:	7a9b      	ldrb	r3, [r3, #10]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <mpu_read_mem+0x2a>
        return -1;
 80031a0:	f04f 33ff 	mov.w	r3, #4294967295
 80031a4:	e047      	b.n	8003236 <mpu_read_mem+0xba>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80031b6:	7b7b      	ldrb	r3, [r7, #13]
 80031b8:	461a      	mov	r2, r3
 80031ba:	88bb      	ldrh	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	4a20      	ldr	r2, [pc, #128]	@ (8003240 <mpu_read_mem+0xc4>)
 80031c0:	6852      	ldr	r2, [r2, #4]
 80031c2:	8952      	ldrh	r2, [r2, #10]
 80031c4:	4293      	cmp	r3, r2
 80031c6:	dd02      	ble.n	80031ce <mpu_read_mem+0x52>
        return -1;
 80031c8:	f04f 33ff 	mov.w	r3, #4294967295
 80031cc:	e033      	b.n	8003236 <mpu_read_mem+0xba>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80031ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003240 <mpu_read_mem+0xc4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	b299      	uxth	r1, r3
 80031d8:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <mpu_read_mem+0xc4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	7e1b      	ldrb	r3, [r3, #24]
 80031de:	461a      	mov	r2, r3
 80031e0:	2305      	movs	r3, #5
 80031e2:	9302      	str	r3, [sp, #8]
 80031e4:	2302      	movs	r3, #2
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	2301      	movs	r3, #1
 80031f0:	4814      	ldr	r0, [pc, #80]	@ (8003244 <mpu_read_mem+0xc8>)
 80031f2:	f00a fceb 	bl	800dbcc <HAL_I2C_Mem_Write>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <mpu_read_mem+0x86>
        return -1;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003200:	e019      	b.n	8003236 <mpu_read_mem+0xba>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8003202:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <mpu_read_mem+0xc4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	b299      	uxth	r1, r3
 800320c:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <mpu_read_mem+0xc4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	7d5b      	ldrb	r3, [r3, #21]
 8003212:	461a      	mov	r2, r3
 8003214:	2305      	movs	r3, #5
 8003216:	9302      	str	r3, [sp, #8]
 8003218:	88bb      	ldrh	r3, [r7, #4]
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2301      	movs	r3, #1
 8003222:	4808      	ldr	r0, [pc, #32]	@ (8003244 <mpu_read_mem+0xc8>)
 8003224:	f00a fdcc 	bl	800ddc0 <HAL_I2C_Mem_Read>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <mpu_read_mem+0xb8>
        return -1;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	e000      	b.n	8003236 <mpu_read_mem+0xba>
    return 0;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000000 	.word	0x20000000
 8003244:	2000032c 	.word	0x2000032c

08003248 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	@ 0x38
 800324c:	af04      	add	r7, sp, #16
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	4611      	mov	r1, r2
 8003252:	461a      	mov	r2, r3
 8003254:	4603      	mov	r3, r0
 8003256:	81fb      	strh	r3, [r7, #14]
 8003258:	460b      	mov	r3, r1
 800325a:	81bb      	strh	r3, [r7, #12]
 800325c:	4613      	mov	r3, r2
 800325e:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8003260:	4b3b      	ldr	r3, [pc, #236]	@ (8003350 <mpu_load_firmware+0x108>)
 8003262:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	e06b      	b.n	8003348 <mpu_load_firmware+0x100>

    if (!firmware)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <mpu_load_firmware+0x34>
        return -1;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295
 800327a:	e065      	b.n	8003348 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 800327c:	2300      	movs	r3, #0
 800327e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003280:	e034      	b.n	80032ec <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8003282:	89fa      	ldrh	r2, [r7, #14]
 8003284:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b10      	cmp	r3, #16
 800328a:	bfa8      	it	ge
 800328c:	2310      	movge	r3, #16
 800328e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8003290:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	441a      	add	r2, r3
 8003296:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8003298:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ff08 	bl	80030b0 <mpu_write_mem>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <mpu_load_firmware+0x64>
            return -1;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
 80032aa:	e04d      	b.n	8003348 <mpu_load_firmware+0x100>
        if (mpu_read_mem(ii, this_write, cur))
 80032ac:	f107 0214 	add.w	r2, r7, #20
 80032b0:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80032b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff61 	bl	800317c <mpu_read_mem>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <mpu_load_firmware+0x7e>
            return -1;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	e040      	b.n	8003348 <mpu_load_firmware+0x100>
        if (memcmp(firmware+ii, cur, this_write))
 80032c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4413      	add	r3, r2
 80032cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032ce:	f107 0114 	add.w	r1, r7, #20
 80032d2:	4618      	mov	r0, r3
 80032d4:	f00f f840 	bl	8012358 <memcmp>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <mpu_load_firmware+0x9c>
            return -2;
 80032de:	f06f 0301 	mvn.w	r3, #1
 80032e2:	e031      	b.n	8003348 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 80032e4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80032e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032e8:	4413      	add	r3, r2
 80032ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80032ec:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80032ee:	89fb      	ldrh	r3, [r7, #14]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d3c6      	bcc.n	8003282 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 80032f4:	89bb      	ldrh	r3, [r7, #12]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 80032fe:	89bb      	ldrh	r3, [r7, #12]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8003304:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <mpu_load_firmware+0x108>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	b299      	uxth	r1, r3
 800330e:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <mpu_load_firmware+0x108>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	7e9b      	ldrb	r3, [r3, #26]
 8003314:	461a      	mov	r2, r3
 8003316:	2305      	movs	r3, #5
 8003318:	9302      	str	r3, [sp, #8]
 800331a:	2302      	movs	r3, #2
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	f107 0310 	add.w	r3, r7, #16
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2301      	movs	r3, #1
 8003326:	480b      	ldr	r0, [pc, #44]	@ (8003354 <mpu_load_firmware+0x10c>)
 8003328:	f00a fc50 	bl	800dbcc <HAL_I2C_Mem_Write>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <mpu_load_firmware+0xf0>
        return -1;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295
 8003336:	e007      	b.n	8003348 <mpu_load_firmware+0x100>

    st.chip_cfg.dmp_loaded = 1;
 8003338:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <mpu_load_firmware+0x108>)
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8003340:	4a03      	ldr	r2, [pc, #12]	@ (8003350 <mpu_load_firmware+0x108>)
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	84d3      	strh	r3, [r2, #38]	@ 0x26
    return 0;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3728      	adds	r7, #40	@ 0x28
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000000 	.word	0x20000000
 8003354:	2000032c 	.word	0x2000032c

08003358 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af04      	add	r7, sp, #16
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8003362:	4b2e      	ldr	r3, [pc, #184]	@ (800341c <mpu_set_dmp_state+0xc4>)
 8003364:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003368:	79fa      	ldrb	r2, [r7, #7]
 800336a:	429a      	cmp	r2, r3
 800336c:	d101      	bne.n	8003372 <mpu_set_dmp_state+0x1a>
        return 0;
 800336e:	2300      	movs	r3, #0
 8003370:	e050      	b.n	8003414 <mpu_set_dmp_state+0xbc>

    if (enable) {
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d02f      	beq.n	80033d8 <mpu_set_dmp_state+0x80>
        if (!st.chip_cfg.dmp_loaded)
 8003378:	4b28      	ldr	r3, [pc, #160]	@ (800341c <mpu_set_dmp_state+0xc4>)
 800337a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <mpu_set_dmp_state+0x30>
            return -1;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295
 8003386:	e045      	b.n	8003414 <mpu_set_dmp_state+0xbc>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8003388:	2000      	movs	r0, #0
 800338a:	f7fd fe63 	bl	8001054 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 800338e:	2000      	movs	r0, #0
 8003390:	f7fe fe78 	bl	8002084 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8003394:	4b21      	ldr	r3, [pc, #132]	@ (800341c <mpu_set_dmp_state+0xc4>)
 8003396:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe fbf1 	bl	8001b80 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80033a2:	4b1e      	ldr	r3, [pc, #120]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	b299      	uxth	r1, r3
 80033ac:	2305      	movs	r3, #5
 80033ae:	9302      	str	r3, [sp, #8]
 80033b0:	2301      	movs	r3, #1
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	f107 030f 	add.w	r3, r7, #15
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2301      	movs	r3, #1
 80033bc:	2223      	movs	r2, #35	@ 0x23
 80033be:	4818      	ldr	r0, [pc, #96]	@ (8003420 <mpu_set_dmp_state+0xc8>)
 80033c0:	f00a fc04 	bl	800dbcc <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 1;
 80033c4:	4b15      	ldr	r3, [pc, #84]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 80033cc:	2001      	movs	r0, #1
 80033ce:	f7fd fe41 	bl	8001054 <set_int_enable>
        mpu_reset_fifo();
 80033d2:	f7fe f87b 	bl	80014cc <mpu_reset_fifo>
 80033d6:	e01c      	b.n	8003412 <mpu_set_dmp_state+0xba>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 80033d8:	2000      	movs	r0, #0
 80033da:	f7fd fe3b 	bl	8001054 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 80033de:	4b0f      	ldr	r3, [pc, #60]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033e0:	7c1b      	ldrb	r3, [r3, #16]
 80033e2:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80033e4:	4b0d      	ldr	r3, [pc, #52]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	b299      	uxth	r1, r3
 80033ee:	2305      	movs	r3, #5
 80033f0:	9302      	str	r3, [sp, #8]
 80033f2:	2301      	movs	r3, #1
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	f107 030f 	add.w	r3, r7, #15
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2301      	movs	r3, #1
 80033fe:	2223      	movs	r2, #35	@ 0x23
 8003400:	4807      	ldr	r0, [pc, #28]	@ (8003420 <mpu_set_dmp_state+0xc8>)
 8003402:	f00a fbe3 	bl	800dbcc <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 0;
 8003406:	4b05      	ldr	r3, [pc, #20]	@ (800341c <mpu_set_dmp_state+0xc4>)
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        mpu_reset_fifo();
 800340e:	f7fe f85d 	bl	80014cc <mpu_reset_fifo>
    }
    return 0;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20000000 	.word	0x20000000
 8003420:	2000032c 	.word	0x2000032c

08003424 <myget_ms>:

    st.chip_cfg.int_motion_only = 0;
    return 0;
}
void myget_ms(unsigned long *time)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 800343c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003440:	23c8      	movs	r3, #200	@ 0xc8
 8003442:	4904      	ldr	r1, [pc, #16]	@ (8003454 <dmp_load_motion_driver_firmware+0x1c>)
 8003444:	f640 30f6 	movw	r0, #3062	@ 0xbf6
 8003448:	f7ff fefe 	bl	8003248 <mpu_load_firmware>
 800344c:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 800344e:	4618      	mov	r0, r3
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	08014d88 	.word	0x08014d88

08003458 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8003462:	4a6e      	ldr	r2, [pc, #440]	@ (800361c <dmp_set_orientation+0x1c4>)
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	4611      	mov	r1, r2
 800346c:	8019      	strh	r1, [r3, #0]
 800346e:	3302      	adds	r3, #2
 8003470:	0c12      	lsrs	r2, r2, #16
 8003472:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8003474:	4a6a      	ldr	r2, [pc, #424]	@ (8003620 <dmp_set_orientation+0x1c8>)
 8003476:	f107 0310 	add.w	r3, r7, #16
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	4611      	mov	r1, r2
 800347e:	8019      	strh	r1, [r3, #0]
 8003480:	3302      	adds	r3, #2
 8003482:	0c12      	lsrs	r2, r2, #16
 8003484:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8003486:	4a67      	ldr	r2, [pc, #412]	@ (8003624 <dmp_set_orientation+0x1cc>)
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	4611      	mov	r1, r2
 8003490:	8019      	strh	r1, [r3, #0]
 8003492:	3302      	adds	r3, #2
 8003494:	0c12      	lsrs	r2, r2, #16
 8003496:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8003498:	4a63      	ldr	r2, [pc, #396]	@ (8003628 <dmp_set_orientation+0x1d0>)
 800349a:	f107 0308 	add.w	r3, r7, #8
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	4611      	mov	r1, r2
 80034a2:	8019      	strh	r1, [r3, #0]
 80034a4:	3302      	adds	r3, #2
 80034a6:	0c12      	lsrs	r2, r2, #16
 80034a8:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	3320      	adds	r3, #32
 80034b2:	443b      	add	r3, r7
 80034b4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034b8:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	08db      	lsrs	r3, r3, #3
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	3320      	adds	r3, #32
 80034c6:	443b      	add	r3, r7
 80034c8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034cc:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	099b      	lsrs	r3, r3, #6
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	3320      	adds	r3, #32
 80034da:	443b      	add	r3, r7
 80034dc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034e0:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	3320      	adds	r3, #32
 80034ea:	443b      	add	r3, r7
 80034ec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80034f0:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	08db      	lsrs	r3, r3, #3
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	3320      	adds	r3, #32
 80034fe:	443b      	add	r3, r7
 8003500:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003504:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	099b      	lsrs	r3, r3, #6
 800350a:	b29b      	uxth	r3, r3
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	3320      	adds	r3, #32
 8003512:	443b      	add	r3, r7
 8003514:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003518:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 800351a:	f107 031c 	add.w	r3, r7, #28
 800351e:	461a      	mov	r2, r3
 8003520:	2103      	movs	r1, #3
 8003522:	f240 4026 	movw	r0, #1062	@ 0x426
 8003526:	f7ff fdc3 	bl	80030b0 <mpu_write_mem>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <dmp_set_orientation+0xde>
        return -1;
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
 8003534:	e06e      	b.n	8003614 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8003536:	f107 0318 	add.w	r3, r7, #24
 800353a:	461a      	mov	r2, r3
 800353c:	2103      	movs	r1, #3
 800353e:	f240 402a 	movw	r0, #1066	@ 0x42a
 8003542:	f7ff fdb5 	bl	80030b0 <mpu_write_mem>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <dmp_set_orientation+0xfa>
        return -1;
 800354c:	f04f 33ff 	mov.w	r3, #4294967295
 8003550:	e060      	b.n	8003614 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8003552:	f107 031c 	add.w	r3, r7, #28
 8003556:	f107 020c 	add.w	r2, r7, #12
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	4611      	mov	r1, r2
 800355e:	8019      	strh	r1, [r3, #0]
 8003560:	3302      	adds	r3, #2
 8003562:	0c12      	lsrs	r2, r2, #16
 8003564:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8003566:	f107 0318 	add.w	r3, r7, #24
 800356a:	f107 0208 	add.w	r2, r7, #8
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	4611      	mov	r1, r2
 8003572:	8019      	strh	r1, [r3, #0]
 8003574:	3302      	adds	r3, #2
 8003576:	0c12      	lsrs	r2, r2, #16
 8003578:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 8003584:	7f3b      	ldrb	r3, [r7, #28]
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 800358e:	7e3b      	ldrb	r3, [r7, #24]
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	b2db      	uxtb	r3, r3
 8003596:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 80035a2:	7f7b      	ldrb	r3, [r7, #29]
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 80035ac:	7e7b      	ldrb	r3, [r7, #25]
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 80035c0:	7fbb      	ldrb	r3, [r7, #30]
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 80035ca:	7ebb      	ldrb	r3, [r7, #26]
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 80035d4:	f107 031c 	add.w	r3, r7, #28
 80035d8:	461a      	mov	r2, r3
 80035da:	2103      	movs	r1, #3
 80035dc:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 80035e0:	f7ff fd66 	bl	80030b0 <mpu_write_mem>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <dmp_set_orientation+0x198>
        return -1;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	e011      	b.n	8003614 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 80035f0:	f107 0318 	add.w	r3, r7, #24
 80035f4:	461a      	mov	r2, r3
 80035f6:	2103      	movs	r1, #3
 80035f8:	f240 4031 	movw	r0, #1073	@ 0x431
 80035fc:	f7ff fd58 	bl	80030b0 <mpu_write_mem>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <dmp_set_orientation+0x1b4>
        return -1;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	e003      	b.n	8003614 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 800360c:	4a07      	ldr	r2, [pc, #28]	@ (800362c <dmp_set_orientation+0x1d4>)
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	8113      	strh	r3, [r2, #8]
    return 0;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	08014c88 	.word	0x08014c88
 8003620:	08014c8c 	.word	0x08014c8c
 8003624:	08014c90 	.word	0x08014c90
 8003628:	08014c94 	.word	0x08014c94
 800362c:	200002c8 	.word	0x200002c8

08003630 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 8003630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003634:	b08c      	sub	sp, #48	@ 0x30
 8003636:	af00      	add	r7, sp, #0
 8003638:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 800363a:	4b80      	ldr	r3, [pc, #512]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 800363c:	891b      	ldrh	r3, [r3, #8]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (dmp.orient & 4)
 800364c:	4b7b      	ldr	r3, [pc, #492]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 800364e:	891b      	ldrh	r3, [r3, #8]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	425b      	negs	r3, r3
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800365e:	4b77      	ldr	r3, [pc, #476]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 8003660:	891b      	ldrh	r3, [r3, #8]
 8003662:	08db      	lsrs	r3, r3, #3
 8003664:	b29b      	uxth	r3, r3
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (dmp.orient & 0x20)
 8003674:	4b71      	ldr	r3, [pc, #452]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 8003676:	891b      	ldrh	r3, [r3, #8]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 8003680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003682:	425b      	negs	r3, r3
 8003684:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8003686:	4b6d      	ldr	r3, [pc, #436]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 8003688:	891b      	ldrh	r3, [r3, #8]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	b29b      	uxth	r3, r3
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	4413      	add	r3, r2
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dmp.orient & 0x100)
 800369c:	4b67      	ldr	r3, [pc, #412]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 800369e:	891b      	ldrh	r3, [r3, #8]
 80036a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 80036a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036aa:	425b      	negs	r3, r3
 80036ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	17da      	asrs	r2, r3, #31
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	617a      	str	r2, [r7, #20]
 80036b6:	4b62      	ldr	r3, [pc, #392]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 80036b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036bc:	460a      	mov	r2, r1
 80036be:	fb03 f202 	mul.w	r2, r3, r2
 80036c2:	2300      	movs	r3, #0
 80036c4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80036c8:	4601      	mov	r1, r0
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	4a5b      	ldr	r2, [pc, #364]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 80036d2:	6939      	ldr	r1, [r7, #16]
 80036d4:	fba1 ab02 	umull	sl, fp, r1, r2
 80036d8:	445b      	add	r3, fp
 80036da:	469b      	mov	fp, r3
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	ea4f 729a 	mov.w	r2, sl, lsr #30
 80036e8:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 80036ec:	ea4f 73ab 	mov.w	r3, fp, asr #30
 80036f0:	4613      	mov	r3, r2
 80036f2:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 80036f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f6:	17da      	asrs	r2, r3, #31
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	60fa      	str	r2, [r7, #12]
 80036fc:	4b50      	ldr	r3, [pc, #320]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 80036fe:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003702:	465a      	mov	r2, fp
 8003704:	fb03 f202 	mul.w	r2, r3, r2
 8003708:	2300      	movs	r3, #0
 800370a:	4651      	mov	r1, sl
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	4413      	add	r3, r2
 8003712:	4a4b      	ldr	r2, [pc, #300]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 8003714:	4651      	mov	r1, sl
 8003716:	fba1 8902 	umull	r8, r9, r1, r2
 800371a:	444b      	add	r3, r9
 800371c:	4699      	mov	r9, r3
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800372a:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800372e:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003732:	4613      	mov	r3, r2
 8003734:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8003736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003738:	17da      	asrs	r2, r3, #31
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	4b40      	ldr	r3, [pc, #256]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 8003740:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003744:	464a      	mov	r2, r9
 8003746:	fb03 f202 	mul.w	r2, r3, r2
 800374a:	2300      	movs	r3, #0
 800374c:	4641      	mov	r1, r8
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	4413      	add	r3, r2
 8003754:	4a3a      	ldr	r2, [pc, #232]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 8003756:	4641      	mov	r1, r8
 8003758:	fba1 4502 	umull	r4, r5, r1, r2
 800375c:	442b      	add	r3, r5
 800375e:	461d      	mov	r5, r3
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	0fa2      	lsrs	r2, r4, #30
 800376a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800376e:	17ab      	asrs	r3, r5, #30
 8003770:	4613      	mov	r3, r2
 8003772:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	161b      	asrs	r3, r3, #24
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	141b      	asrs	r3, r3, #16
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	121b      	asrs	r3, r3, #8
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	b2db      	uxtb	r3, r3
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 800379a:	f107 0320 	add.w	r3, r7, #32
 800379e:	461a      	mov	r2, r3
 80037a0:	2104      	movs	r1, #4
 80037a2:	f44f 7074 	mov.w	r0, #976	@ 0x3d0
 80037a6:	f7ff fc83 	bl	80030b0 <mpu_write_mem>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <dmp_set_gyro_bias+0x186>
        return -1;
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
 80037b4:	e03c      	b.n	8003830 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 80037b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b8:	161b      	asrs	r3, r3, #24
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 80037c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c2:	141b      	asrs	r3, r3, #16
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 80037ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037cc:	121b      	asrs	r3, r3, #8
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 80037dc:	f107 0320 	add.w	r3, r7, #32
 80037e0:	461a      	mov	r2, r3
 80037e2:	2104      	movs	r1, #4
 80037e4:	f44f 7075 	mov.w	r0, #980	@ 0x3d4
 80037e8:	f7ff fc62 	bl	80030b0 <mpu_write_mem>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <dmp_set_gyro_bias+0x1c8>
        return -1;
 80037f2:	f04f 33ff 	mov.w	r3, #4294967295
 80037f6:	e01b      	b.n	8003830 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 80037f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fa:	161b      	asrs	r3, r3, #24
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 8003802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003804:	141b      	asrs	r3, r3, #16
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 800380c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380e:	121b      	asrs	r3, r3, #8
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 8003816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 800381e:	f107 0320 	add.w	r3, r7, #32
 8003822:	461a      	mov	r2, r3
 8003824:	2104      	movs	r1, #4
 8003826:	f44f 7076 	mov.w	r0, #984	@ 0x3d8
 800382a:	f7ff fc41 	bl	80030b0 <mpu_write_mem>
 800382e:	4603      	mov	r3, r0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3730      	adds	r7, #48	@ 0x30
 8003834:	46bd      	mov	sp, r7
 8003836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383a:	bf00      	nop
 800383c:	200002c8 	.word	0x200002c8
 8003840:	02cae309 	.word	0x02cae309

08003844 <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 8003844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003848:	b094      	sub	sp, #80	@ 0x50
 800384a:	af00      	add	r7, sp, #0
 800384c:	6278      	str	r0, [r7, #36]	@ 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 800384e:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fa3e 	bl	8001cd4 <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 8003858:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800385a:	b29b      	uxth	r3, r3
 800385c:	2200      	movs	r2, #0
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	61fa      	str	r2, [r7, #28]
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	69f9      	ldr	r1, [r7, #28]
 800386c:	03cb      	lsls	r3, r1, #15
 800386e:	69b9      	ldr	r1, [r7, #24]
 8003870:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 8003874:	69b9      	ldr	r1, [r7, #24]
 8003876:	03ca      	lsls	r2, r1, #15
 8003878:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    //__no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 800387c:	4b71      	ldr	r3, [pc, #452]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 800387e:	891b      	ldrh	r3, [r3, #8]
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003888:	4413      	add	r3, r2
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (dmp.orient & 4)
 800388e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 8003890:	891b      	ldrh	r3, [r3, #8]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 800389a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800389c:	425b      	negs	r3, r3
 800389e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 80038a0:	4b68      	ldr	r3, [pc, #416]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038a2:	891b      	ldrh	r3, [r3, #8]
 80038a4:	08db      	lsrs	r3, r3, #3
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b0:	4413      	add	r3, r2
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (dmp.orient & 0x20)
 80038b6:	4b63      	ldr	r3, [pc, #396]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038b8:	891b      	ldrh	r3, [r3, #8]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 80038c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c4:	425b      	negs	r3, r3
 80038c6:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 80038c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038ca:	891b      	ldrh	r3, [r3, #8]
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d8:	4413      	add	r3, r2
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	647b      	str	r3, [r7, #68]	@ 0x44
    if (dmp.orient & 0x100)
 80038de:	4b59      	ldr	r3, [pc, #356]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038e0:	891b      	ldrh	r3, [r3, #8]
 80038e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 80038ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ec:	425b      	negs	r3, r3
 80038ee:	647b      	str	r3, [r7, #68]	@ 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 80038f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038f2:	17da      	asrs	r2, r3, #31
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	617a      	str	r2, [r7, #20]
 80038f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038fe:	460a      	mov	r2, r1
 8003900:	fb02 f203 	mul.w	r2, r2, r3
 8003904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003906:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800390a:	4601      	mov	r1, r0
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003914:	6939      	ldr	r1, [r7, #16]
 8003916:	fba2 ab01 	umull	sl, fp, r2, r1
 800391a:	445b      	add	r3, fp
 800391c:	469b      	mov	fp, r3
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800392a:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 800392e:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8003932:	4613      	mov	r3, r2
 8003934:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 8003936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003938:	17da      	asrs	r2, r3, #31
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	60fa      	str	r2, [r7, #12]
 800393e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003940:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003944:	465a      	mov	r2, fp
 8003946:	fb02 f203 	mul.w	r2, r2, r3
 800394a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800394c:	4651      	mov	r1, sl
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003956:	4651      	mov	r1, sl
 8003958:	fba2 8901 	umull	r8, r9, r2, r1
 800395c:	444b      	add	r3, r9
 800395e:	4699      	mov	r9, r3
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800396c:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8003970:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003974:	4613      	mov	r3, r2
 8003976:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 8003978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800397a:	17da      	asrs	r2, r3, #31
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003982:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003986:	464a      	mov	r2, r9
 8003988:	fb02 f203 	mul.w	r2, r2, r3
 800398c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800398e:	4641      	mov	r1, r8
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003998:	4641      	mov	r1, r8
 800399a:	fba2 4501 	umull	r4, r5, r2, r1
 800399e:	442b      	add	r3, r5
 80039a0:	461d      	mov	r5, r3
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	0fa2      	lsrs	r2, r4, #30
 80039ac:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80039b0:	17ab      	asrs	r3, r5, #30
 80039b2:	4613      	mov	r3, r2
 80039b4:	647b      	str	r3, [r7, #68]	@ 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 80039b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b8:	161b      	asrs	r3, r3, #24
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 80039c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039c2:	141b      	asrs	r3, r3, #16
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 80039ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039cc:	121b      	asrs	r3, r3, #8
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 80039d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 80039dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039de:	161b      	asrs	r3, r3, #24
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 80039e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e8:	141b      	asrs	r3, r3, #16
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 80039f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f2:	121b      	asrs	r3, r3, #8
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 80039fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 8003a02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a04:	161b      	asrs	r3, r3, #24
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 8003a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a0e:	141b      	asrs	r3, r3, #16
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 8003a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a18:	121b      	asrs	r3, r3, #8
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 8003a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 8003a28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	210c      	movs	r1, #12
 8003a30:	f44f 7025 	mov.w	r0, #660	@ 0x294
 8003a34:	f7ff fb3c 	bl	80030b0 <mpu_write_mem>
 8003a38:	4603      	mov	r3, r0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3750      	adds	r7, #80	@ 0x50
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a44:	200002c8 	.word	0x200002c8

08003a48 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8003a52:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad0 <dmp_set_fifo_rate+0x88>)
 8003a54:	f107 0310 	add.w	r3, r7, #16
 8003a58:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2bc8      	cmp	r3, #200	@ 0xc8
 8003a62:	d902      	bls.n	8003a6a <dmp_set_fifo_rate+0x22>
        return -1;
 8003a64:	f04f 33ff 	mov.w	r3, #4294967295
 8003a68:	e02e      	b.n	8003ac8 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	22c8      	movs	r2, #200	@ 0xc8
 8003a6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8003a78:	8bfb      	ldrh	r3, [r7, #30]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8003a82:	8bfb      	ldrh	r3, [r7, #30]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8003a88:	f107 0308 	add.w	r3, r7, #8
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2102      	movs	r1, #2
 8003a90:	f240 2016 	movw	r0, #534	@ 0x216
 8003a94:	f7ff fb0c 	bl	80030b0 <mpu_write_mem>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <dmp_set_fifo_rate+0x5c>
        return -1;
 8003a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa2:	e011      	b.n	8003ac8 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	210c      	movs	r1, #12
 8003aac:	f640 20c1 	movw	r0, #2753	@ 0xac1
 8003ab0:	f7ff fafe 	bl	80030b0 <mpu_write_mem>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <dmp_set_fifo_rate+0x78>
        return -1;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	e003      	b.n	8003ac8 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8003ac0:	4a04      	ldr	r2, [pc, #16]	@ (8003ad4 <dmp_set_fifo_rate+0x8c>)
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	8193      	strh	r3, [r2, #12]
    return 0;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	08014c98 	.word	0x08014c98
 8003ad4:	200002c8 	.word	0x200002c8

08003ad8 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	460a      	mov	r2, r1
 8003ae2:	71fb      	strb	r3, [r7, #7]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <dmp_set_tap_thresh+0x22>
 8003af2:	88bb      	ldrh	r3, [r7, #4]
 8003af4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003af8:	d902      	bls.n	8003b00 <dmp_set_tap_thresh+0x28>
        return -1;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
 8003afe:	e10b      	b.n	8003d18 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8003b00:	88bb      	ldrh	r3, [r7, #4]
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b0a:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8003d20 <dmp_set_tap_thresh+0x248>
 8003b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b12:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 8003b16:	f107 030b 	add.w	r3, r7, #11
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fd fed2 	bl	80018c4 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8003b20:	7afb      	ldrb	r3, [r7, #11]
 8003b22:	3b02      	subs	r3, #2
 8003b24:	2b0e      	cmp	r3, #14
 8003b26:	d87d      	bhi.n	8003c24 <dmp_set_tap_thresh+0x14c>
 8003b28:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <dmp_set_tap_thresh+0x58>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b6d 	.word	0x08003b6d
 8003b34:	08003c25 	.word	0x08003c25
 8003b38:	08003b9b 	.word	0x08003b9b
 8003b3c:	08003c25 	.word	0x08003c25
 8003b40:	08003c25 	.word	0x08003c25
 8003b44:	08003c25 	.word	0x08003c25
 8003b48:	08003bc9 	.word	0x08003bc9
 8003b4c:	08003c25 	.word	0x08003c25
 8003b50:	08003c25 	.word	0x08003c25
 8003b54:	08003c25 	.word	0x08003c25
 8003b58:	08003c25 	.word	0x08003c25
 8003b5c:	08003c25 	.word	0x08003c25
 8003b60:	08003c25 	.word	0x08003c25
 8003b64:	08003c25 	.word	0x08003c25
 8003b68:	08003bf7 	.word	0x08003bf7
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8003b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b70:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8003d24 <dmp_set_tap_thresh+0x24c>
 8003b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b7c:	ee17 3a90 	vmov	r3, s15
 8003b80:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8003b82:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b86:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003d28 <dmp_set_tap_thresh+0x250>
 8003b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b92:	ee17 3a90 	vmov	r3, s15
 8003b96:	82bb      	strh	r3, [r7, #20]
        break;
 8003b98:	e047      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8003b9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b9e:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8003d2c <dmp_set_tap_thresh+0x254>
 8003ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003baa:	ee17 3a90 	vmov	r3, s15
 8003bae:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8003bb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bb4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8003d30 <dmp_set_tap_thresh+0x258>
 8003bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc0:	ee17 3a90 	vmov	r3, s15
 8003bc4:	82bb      	strh	r3, [r7, #20]
        break;
 8003bc6:	e030      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8003bc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bcc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003d34 <dmp_set_tap_thresh+0x25c>
 8003bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd8:	ee17 3a90 	vmov	r3, s15
 8003bdc:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8003bde:	edd7 7a04 	vldr	s15, [r7, #16]
 8003be2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003d38 <dmp_set_tap_thresh+0x260>
 8003be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bee:	ee17 3a90 	vmov	r3, s15
 8003bf2:	82bb      	strh	r3, [r7, #20]
        break;
 8003bf4:	e019      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8003bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bfa:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8003d3c <dmp_set_tap_thresh+0x264>
 8003bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c06:	ee17 3a90 	vmov	r3, s15
 8003c0a:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8003c0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c10:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003d40 <dmp_set_tap_thresh+0x268>
 8003c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c1c:	ee17 3a90 	vmov	r3, s15
 8003c20:	82bb      	strh	r3, [r7, #20]
        break;
 8003c22:	e002      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	e076      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8003c2a:	8afb      	ldrh	r3, [r7, #22]
 8003c2c:	0a1b      	lsrs	r3, r3, #8
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8003c34:	8afb      	ldrh	r3, [r7, #22]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8003c3a:	8abb      	ldrh	r3, [r7, #20]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8003c44:	8abb      	ldrh	r3, [r7, #20]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01c      	beq.n	8003c8e <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8003c54:	f107 030c 	add.w	r3, r7, #12
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	f44f 70ea 	mov.w	r0, #468	@ 0x1d4
 8003c60:	f7ff fa26 	bl	80030b0 <mpu_write_mem>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <dmp_set_tap_thresh+0x198>
            return -1;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	e053      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8003c70:	f107 030c 	add.w	r3, r7, #12
 8003c74:	3302      	adds	r3, #2
 8003c76:	461a      	mov	r2, r3
 8003c78:	2102      	movs	r1, #2
 8003c7a:	f44f 7092 	mov.w	r0, #292	@ 0x124
 8003c7e:	f7ff fa17 	bl	80030b0 <mpu_write_mem>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <dmp_set_tap_thresh+0x1b6>
            return -1;
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	e044      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01c      	beq.n	8003cd2 <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8003c98:	f107 030c 	add.w	r3, r7, #12
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	f44f 70ec 	mov.w	r0, #472	@ 0x1d8
 8003ca4:	f7ff fa04 	bl	80030b0 <mpu_write_mem>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <dmp_set_tap_thresh+0x1dc>
            return -1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb2:	e031      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8003cb4:	f107 030c 	add.w	r3, r7, #12
 8003cb8:	3302      	adds	r3, #2
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	f44f 7094 	mov.w	r0, #296	@ 0x128
 8003cc2:	f7ff f9f5 	bl	80030b0 <mpu_write_mem>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <dmp_set_tap_thresh+0x1fa>
            return -1;
 8003ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd0:	e022      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01c      	beq.n	8003d16 <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8003cdc:	f107 030c 	add.w	r3, r7, #12
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	f44f 70ee 	mov.w	r0, #476	@ 0x1dc
 8003ce8:	f7ff f9e2 	bl	80030b0 <mpu_write_mem>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <dmp_set_tap_thresh+0x220>
            return -1;
 8003cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf6:	e00f      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8003cf8:	f107 030c 	add.w	r3, r7, #12
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2102      	movs	r1, #2
 8003d02:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003d06:	f7ff f9d3 	bl	80030b0 <mpu_write_mem>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <dmp_set_tap_thresh+0x23e>
            return -1;
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
 8003d14:	e000      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	43480000 	.word	0x43480000
 8003d24:	46800000 	.word	0x46800000
 8003d28:	46400000 	.word	0x46400000
 8003d2c:	46000000 	.word	0x46000000
 8003d30:	45c00000 	.word	0x45c00000
 8003d34:	45800000 	.word	0x45800000
 8003d38:	45400000 	.word	0x45400000
 8003d3c:	45000000 	.word	0x45000000
 8003d40:	44c00000 	.word	0x44c00000

08003d44 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d004      	beq.n	8003d66 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d004      	beq.n	8003d7a <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	f043 030c 	orr.w	r3, r3, #12
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	f043 0303 	orr.w	r3, r3, #3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8003d8e:	f107 030f 	add.w	r3, r7, #15
 8003d92:	461a      	mov	r2, r3
 8003d94:	2101      	movs	r1, #1
 8003d96:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 8003d9a:	f7ff f989 	bl	80030b0 <mpu_write_mem>
 8003d9e:	4603      	mov	r3, r0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <dmp_set_tap_count+0x16>
        min_taps = 1;
 8003db8:	2301      	movs	r3, #1
 8003dba:	71fb      	strb	r3, [r7, #7]
 8003dbc:	e004      	b.n	8003dc8 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d901      	bls.n	8003dc8 <dmp_set_tap_count+0x20>
        min_taps = 4;
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8003dd0:	f107 030f 	add.w	r3, r7, #15
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	f240 104f 	movw	r0, #335	@ 0x14f
 8003ddc:	f7ff f968 	bl	80030b0 <mpu_write_mem>
 8003de0:	4603      	mov	r3, r0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	4a0c      	ldr	r2, [pc, #48]	@ (8003e2c <dmp_set_tap_time+0x40>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003e02:	89fb      	ldrh	r3, [r7, #14]
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003e0c:	89fb      	ldrh	r3, [r7, #14]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8003e12:	f107 030c 	add.w	r3, r7, #12
 8003e16:	461a      	mov	r2, r3
 8003e18:	2102      	movs	r1, #2
 8003e1a:	f44f 70ef 	mov.w	r0, #478	@ 0x1de
 8003e1e:	f7ff f947 	bl	80030b0 <mpu_write_mem>
 8003e22:	4603      	mov	r3, r0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	cccccccd 	.word	0xcccccccd

08003e30 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8003e70 <dmp_set_tap_time_multi+0x40>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003e46:	89fb      	ldrh	r3, [r7, #14]
 8003e48:	0a1b      	lsrs	r3, r3, #8
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 8003e56:	f107 030c 	add.w	r3, r7, #12
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	f44f 70ed 	mov.w	r0, #474	@ 0x1da
 8003e62:	f7ff f925 	bl	80030b0 <mpu_write_mem>
 8003e66:	4603      	mov	r3, r0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	cccccccd 	.word	0xcccccccd

08003e74 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a13      	ldr	r2, [pc, #76]	@ (8003ed0 <dmp_set_shake_reject_thresh+0x5c>)
 8003e84:	fb82 1203 	smull	r1, r2, r2, r3
 8003e88:	1192      	asrs	r2, r2, #6
 8003e8a:	17db      	asrs	r3, r3, #31
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	887a      	ldrh	r2, [r7, #2]
 8003e90:	fb02 f303 	mul.w	r3, r2, r3
 8003e94:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	161b      	asrs	r3, r3, #24
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	141b      	asrs	r3, r3, #16
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	121b      	asrs	r3, r3, #8
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8003eb4:	f107 0308 	add.w	r3, r7, #8
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2104      	movs	r1, #4
 8003ebc:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 8003ec0:	f7ff f8f6 	bl	80030b0 <mpu_write_mem>
 8003ec4:	4603      	mov	r3, r0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	10624dd3 	.word	0x10624dd3

08003ed4 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8003f14 <dmp_set_shake_reject_time+0x40>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	0a1b      	lsrs	r3, r3, #8
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 8003efa:	f107 030c 	add.w	r3, r7, #12
 8003efe:	461a      	mov	r2, r3
 8003f00:	2102      	movs	r1, #2
 8003f02:	f44f 70ad 	mov.w	r0, #346	@ 0x15a
 8003f06:	f7ff f8d3 	bl	80030b0 <mpu_write_mem>
 8003f0a:	4603      	mov	r3, r0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	cccccccd 	.word	0xcccccccd

08003f18 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	4a0c      	ldr	r2, [pc, #48]	@ (8003f58 <dmp_set_shake_reject_timeout+0x40>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	089b      	lsrs	r3, r3, #2
 8003f2c:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	0a1b      	lsrs	r3, r3, #8
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 8003f3e:	f107 030c 	add.w	r3, r7, #12
 8003f42:	461a      	mov	r2, r3
 8003f44:	2102      	movs	r1, #2
 8003f46:	f44f 70ac 	mov.w	r0, #344	@ 0x158
 8003f4a:	f7ff f8b1 	bl	80030b0 <mpu_write_mem>
 8003f4e:	4603      	mov	r3, r0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	cccccccd 	.word	0xcccccccd

08003f5c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8003f66:	2302      	movs	r3, #2
 8003f68:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 8003f6a:	23ca      	movs	r3, #202	@ 0xca
 8003f6c:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8003f6e:	23e3      	movs	r3, #227	@ 0xe3
 8003f70:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8003f72:	2309      	movs	r3, #9
 8003f74:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 8003f76:	f107 030c 	add.w	r3, r7, #12
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	2104      	movs	r1, #4
 8003f7e:	2068      	movs	r0, #104	@ 0x68
 8003f80:	f7ff f896 	bl	80030b0 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 8003f84:	23a3      	movs	r3, #163	@ 0xa3
 8003f86:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d006      	beq.n	8003fa0 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 8003f92:	23c0      	movs	r3, #192	@ 0xc0
 8003f94:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 8003f96:	23c8      	movs	r3, #200	@ 0xc8
 8003f98:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 8003f9a:	23c2      	movs	r3, #194	@ 0xc2
 8003f9c:	73fb      	strb	r3, [r7, #15]
 8003f9e:	e005      	b.n	8003fac <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 8003fa0:	23a3      	movs	r3, #163	@ 0xa3
 8003fa2:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 8003fa4:	23a3      	movs	r3, #163	@ 0xa3
 8003fa6:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 8003fa8:	23a3      	movs	r3, #163	@ 0xa3
 8003faa:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d006      	beq.n	8003fc4 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 8003fb6:	23c4      	movs	r3, #196	@ 0xc4
 8003fb8:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 8003fba:	23cc      	movs	r3, #204	@ 0xcc
 8003fbc:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 8003fbe:	23c6      	movs	r3, #198	@ 0xc6
 8003fc0:	74bb      	strb	r3, [r7, #18]
 8003fc2:	e005      	b.n	8003fd0 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8003fc4:	23a3      	movs	r3, #163	@ 0xa3
 8003fc6:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 8003fc8:	23a3      	movs	r3, #163	@ 0xa3
 8003fca:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8003fcc:	23a3      	movs	r3, #163	@ 0xa3
 8003fce:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 8003fd0:	23a3      	movs	r3, #163	@ 0xa3
 8003fd2:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8003fd4:	23a3      	movs	r3, #163	@ 0xa3
 8003fd6:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 8003fd8:	23a3      	movs	r3, #163	@ 0xa3
 8003fda:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8003fdc:	f107 030c 	add.w	r3, r7, #12
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	210a      	movs	r1, #10
 8003fe4:	f640 20a7 	movw	r0, #2727	@ 0xaa7
 8003fe8:	f7ff f862 	bl	80030b0 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	733b      	strb	r3, [r7, #12]
 8003ffa:	e001      	b.n	8004000 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8003ffc:	23d8      	movs	r3, #216	@ 0xd8
 8003ffe:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8004000:	f107 030c 	add.w	r3, r7, #12
 8004004:	461a      	mov	r2, r3
 8004006:	2101      	movs	r1, #1
 8004008:	f640 20b6 	movw	r0, #2742	@ 0xab6
 800400c:	f7ff f850 	bl	80030b0 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800401a:	2001      	movs	r0, #1
 800401c:	f000 f8c6 	bl	80041ac <dmp_enable_gyro_cal>
 8004020:	e002      	b.n	8004028 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 8004022:	2000      	movs	r0, #0
 8004024:	f000 f8c2 	bl	80041ac <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01d      	beq.n	800406e <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 800403c:	23b2      	movs	r3, #178	@ 0xb2
 800403e:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8004040:	238b      	movs	r3, #139	@ 0x8b
 8004042:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8004044:	23b6      	movs	r3, #182	@ 0xb6
 8004046:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8004048:	239b      	movs	r3, #155	@ 0x9b
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e007      	b.n	800405e <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 800404e:	23b0      	movs	r3, #176	@ 0xb0
 8004050:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 8004052:	2380      	movs	r3, #128	@ 0x80
 8004054:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 8004056:	23b4      	movs	r3, #180	@ 0xb4
 8004058:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 800405a:	2390      	movs	r3, #144	@ 0x90
 800405c:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800405e:	f107 030c 	add.w	r3, r7, #12
 8004062:	461a      	mov	r2, r3
 8004064:	2104      	movs	r1, #4
 8004066:	f640 20a2 	movw	r0, #2722	@ 0xaa2
 800406a:	f7ff f821 	bl	80030b0 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d025      	beq.n	80040c4 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8004078:	23f8      	movs	r3, #248	@ 0xf8
 800407a:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800407c:	f107 030c 	add.w	r3, r7, #12
 8004080:	461a      	mov	r2, r3
 8004082:	2101      	movs	r1, #1
 8004084:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 8004088:	f7ff f812 	bl	80030b0 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800408c:	21fa      	movs	r1, #250	@ 0xfa
 800408e:	2007      	movs	r0, #7
 8004090:	f7ff fd22 	bl	8003ad8 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8004094:	2007      	movs	r0, #7
 8004096:	f7ff fe55 	bl	8003d44 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800409a:	2001      	movs	r0, #1
 800409c:	f7ff fe84 	bl	8003da8 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 80040a0:	2064      	movs	r0, #100	@ 0x64
 80040a2:	f7ff fea3 	bl	8003dec <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 80040a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80040aa:	f7ff fec1 	bl	8003e30 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 80040ae:	21c8      	movs	r1, #200	@ 0xc8
 80040b0:	483c      	ldr	r0, [pc, #240]	@ (80041a4 <dmp_enable_feature+0x248>)
 80040b2:	f7ff fedf 	bl	8003e74 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 80040b6:	2028      	movs	r0, #40	@ 0x28
 80040b8:	f7ff ff0c 	bl	8003ed4 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 80040bc:	200a      	movs	r0, #10
 80040be:	f7ff ff2b 	bl	8003f18 <dmp_set_shake_reject_timeout>
 80040c2:	e009      	b.n	80040d8 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 80040c4:	23d8      	movs	r3, #216	@ 0xd8
 80040c6:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80040c8:	f107 030c 	add.w	r3, r7, #12
 80040cc:	461a      	mov	r2, r3
 80040ce:	2101      	movs	r1, #1
 80040d0:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 80040d4:	f7fe ffec 	bl	80030b0 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 80040d8:	88fb      	ldrh	r3, [r7, #6]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 80040e2:	23d9      	movs	r3, #217	@ 0xd9
 80040e4:	733b      	strb	r3, [r7, #12]
 80040e6:	e001      	b.n	80040ec <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 80040e8:	23d8      	movs	r3, #216	@ 0xd8
 80040ea:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 80040ec:	f107 030c 	add.w	r3, r7, #12
 80040f0:	461a      	mov	r2, r3
 80040f2:	2101      	movs	r1, #1
 80040f4:	f240 703d 	movw	r0, #1853	@ 0x73d
 80040f8:	f7fe ffda 	bl	80030b0 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 8004106:	2001      	movs	r0, #1
 8004108:	f000 f880 	bl	800420c <dmp_enable_lp_quat>
 800410c:	e002      	b.n	8004114 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 800410e:	2000      	movs	r0, #0
 8004110:	f000 f87c 	bl	800420c <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 800411e:	2001      	movs	r0, #1
 8004120:	f000 f89b 	bl	800425a <dmp_enable_6x_lp_quat>
 8004124:	e002      	b.n	800412c <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 8004126:	2000      	movs	r0, #0
 8004128:	f000 f897 	bl	800425a <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	f043 0308 	orr.w	r3, r3, #8
 8004132:	b29a      	uxth	r2, r3
 8004134:	4b1c      	ldr	r3, [pc, #112]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004136:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8004138:	f7fd f9c8 	bl	80014cc <mpu_reset_fifo>

    dmp.packet_length = 0;
 800413c:	4b1a      	ldr	r3, [pc, #104]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800413e:	2200      	movs	r2, #0
 8004140:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8004142:	88fb      	ldrh	r3, [r7, #6]
 8004144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 800414c:	4b16      	ldr	r3, [pc, #88]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800414e:	7b9b      	ldrb	r3, [r3, #14]
 8004150:	3306      	adds	r3, #6
 8004152:	b2da      	uxtb	r2, r3
 8004154:	4b14      	ldr	r3, [pc, #80]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004156:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8004162:	4b11      	ldr	r3, [pc, #68]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004164:	7b9b      	ldrb	r3, [r3, #14]
 8004166:	3306      	adds	r3, #6
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4b0f      	ldr	r3, [pc, #60]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800416c:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	f003 0314 	and.w	r3, r3, #20
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8004178:	4b0b      	ldr	r3, [pc, #44]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800417a:	7b9b      	ldrb	r3, [r3, #14]
 800417c:	3310      	adds	r3, #16
 800417e:	b2da      	uxtb	r2, r3
 8004180:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004182:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 800418e:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004190:	7b9b      	ldrb	r3, [r3, #14]
 8004192:	3304      	adds	r3, #4
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4b04      	ldr	r3, [pc, #16]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004198:	739a      	strb	r2, [r3, #14]

    return 0;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	02cae309 	.word	0x02cae309
 80041a8:	200002c8 	.word	0x200002c8

080041ac <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00f      	beq.n	80041dc <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 80041bc:	4a11      	ldr	r2, [pc, #68]	@ (8004204 <dmp_enable_gyro_cal+0x58>)
 80041be:	f107 0314 	add.w	r3, r7, #20
 80041c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80041c4:	c303      	stmia	r3!, {r0, r1}
 80041c6:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80041c8:	f107 0314 	add.w	r3, r7, #20
 80041cc:	461a      	mov	r2, r3
 80041ce:	2109      	movs	r1, #9
 80041d0:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 80041d4:	f7fe ff6c 	bl	80030b0 <mpu_write_mem>
 80041d8:	4603      	mov	r3, r0
 80041da:	e00e      	b.n	80041fa <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80041dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004208 <dmp_enable_gyro_cal+0x5c>)
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80041e4:	c303      	stmia	r3!, {r0, r1}
 80041e6:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80041e8:	f107 0308 	add.w	r3, r7, #8
 80041ec:	461a      	mov	r2, r3
 80041ee:	2109      	movs	r1, #9
 80041f0:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 80041f4:	f7fe ff5c 	bl	80030b0 <mpu_write_mem>
 80041f8:	4603      	mov	r3, r0
    }
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	08014ca4 	.word	0x08014ca4
 8004208:	08014cb0 	.word	0x08014cb0

0800420c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 800421c:	23c0      	movs	r3, #192	@ 0xc0
 800421e:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8004220:	23c2      	movs	r3, #194	@ 0xc2
 8004222:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8004224:	23c4      	movs	r3, #196	@ 0xc4
 8004226:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8004228:	23c6      	movs	r3, #198	@ 0xc6
 800422a:	73fb      	strb	r3, [r7, #15]
 800422c:	e006      	b.n	800423c <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 800422e:	f107 030c 	add.w	r3, r7, #12
 8004232:	2204      	movs	r2, #4
 8004234:	218b      	movs	r1, #139	@ 0x8b
 8004236:	4618      	mov	r0, r3
 8004238:	f00e f89e 	bl	8012378 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	461a      	mov	r2, r3
 8004242:	2104      	movs	r1, #4
 8004244:	f640 2098 	movw	r0, #2712	@ 0xa98
 8004248:	f7fe ff32 	bl	80030b0 <mpu_write_mem>

    return mpu_reset_fifo();
 800424c:	f7fd f93e 	bl	80014cc <mpu_reset_fifo>
 8004250:	4603      	mov	r3, r0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	4603      	mov	r3, r0
 8004262:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 800426a:	2320      	movs	r3, #32
 800426c:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 800426e:	2328      	movs	r3, #40	@ 0x28
 8004270:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8004272:	2330      	movs	r3, #48	@ 0x30
 8004274:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 8004276:	2338      	movs	r3, #56	@ 0x38
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	e006      	b.n	800428a <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 800427c:	f107 030c 	add.w	r3, r7, #12
 8004280:	2204      	movs	r2, #4
 8004282:	21a3      	movs	r1, #163	@ 0xa3
 8004284:	4618      	mov	r0, r3
 8004286:	f00e f877 	bl	8012378 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 800428a:	f107 030c 	add.w	r3, r7, #12
 800428e:	461a      	mov	r2, r3
 8004290:	2104      	movs	r1, #4
 8004292:	f640 209e 	movw	r0, #2718	@ 0xa9e
 8004296:	f7fe ff0b 	bl	80030b0 <mpu_write_mem>

    return mpu_reset_fifo();
 800429a:	f7fd f917 	bl	80014cc <mpu_reset_fifo>
 800429e:	4603      	mov	r3, r0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3303      	adds	r3, #3
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042ba:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3303      	adds	r3, #3
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042c6:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3301      	adds	r3, #1
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d012      	beq.n	80042fc <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 80042d6:	7bbb      	ldrb	r3, [r7, #14]
 80042d8:	08db      	lsrs	r3, r3, #3
 80042da:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 80042dc:	7bbb      	ldrb	r3, [r7, #14]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	3301      	adds	r3, #1
 80042e6:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 80042e8:	4b10      	ldr	r3, [pc, #64]	@ (800432c <decode_gesture+0x84>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 80042f0:	4b0e      	ldr	r3, [pc, #56]	@ (800432c <decode_gesture+0x84>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	7b39      	ldrb	r1, [r7, #12]
 80042f6:	7b7a      	ldrb	r2, [r7, #13]
 80042f8:	4610      	mov	r0, r2
 80042fa:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3301      	adds	r3, #1
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 800430a:	4b08      	ldr	r3, [pc, #32]	@ (800432c <decode_gesture+0x84>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d006      	beq.n	8004320 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8004312:	4b06      	ldr	r3, [pc, #24]	@ (800432c <decode_gesture+0x84>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	7bfa      	ldrb	r2, [r7, #15]
 8004318:	0992      	lsrs	r2, r2, #6
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	4610      	mov	r0, r2
 800431e:	4798      	blx	r3
    }

    return 0;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	200002c8 	.word	0x200002c8

08004330 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b092      	sub	sp, #72	@ 0x48
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    sensors[0] = 0;
 8004344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004346:	2200      	movs	r2, #0
 8004348:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800434a:	4bb1      	ldr	r3, [pc, #708]	@ (8004610 <dmp_read_fifo+0x2e0>)
 800434c:	7b9b      	ldrb	r3, [r3, #14]
 800434e:	4618      	mov	r0, r3
 8004350:	f107 0320 	add.w	r3, r7, #32
 8004354:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004356:	4619      	mov	r1, r3
 8004358:	f7fd fdf8 	bl	8001f4c <mpu_read_fifo_stream>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <dmp_read_fifo+0x38>
        return -1;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
 8004366:	e14e      	b.n	8004606 <dmp_read_fifo+0x2d6>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8004368:	4ba9      	ldr	r3, [pc, #676]	@ (8004610 <dmp_read_fifo+0x2e0>)
 800436a:	895b      	ldrh	r3, [r3, #10]
 800436c:	f003 0314 	and.w	r3, r3, #20
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 808a 	beq.w	800448a <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004376:	f897 3020 	ldrb.w	r3, [r7, #32]
 800437a:	061a      	lsls	r2, r3, #24
 800437c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004380:	041b      	lsls	r3, r3, #16
 8004382:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8004384:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004388:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800438a:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800438c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004390:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004396:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800439a:	061a      	lsls	r2, r3, #24
 800439c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80043a0:	041b      	lsls	r3, r3, #16
 80043a2:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80043a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80043a8:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80043aa:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80043ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043b0:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80043b6:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80043b8:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80043be:	061a      	lsls	r2, r3, #24
 80043c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80043c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80043cc:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043ce:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80043d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043d4:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80043da:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043dc:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80043de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80043e2:	061a      	lsls	r2, r3, #24
 80043e4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80043e8:	041b      	lsls	r3, r3, #16
 80043ea:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80043ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80043f0:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80043f2:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80043f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80043f8:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80043fe:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004400:	601a      	str	r2, [r3, #0]
        ii += 16;
 8004402:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004406:	3310      	adds	r3, #16
 8004408:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	141b      	asrs	r3, r3, #16
 8004412:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3304      	adds	r3, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	141b      	asrs	r3, r3, #16
 800441c:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3308      	adds	r3, #8
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	141b      	asrs	r3, r3, #16
 8004426:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	330c      	adds	r3, #12
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	141b      	asrs	r3, r3, #16
 8004430:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	fb03 f202 	mul.w	r2, r3, r2
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	6979      	ldr	r1, [r7, #20]
 800443e:	fb01 f303 	mul.w	r3, r1, r3
 8004442:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	69b9      	ldr	r1, [r7, #24]
 8004448:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800444c:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	69f9      	ldr	r1, [r7, #28]
 8004452:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004456:	4413      	add	r3, r2
 8004458:	643b      	str	r3, [r7, #64]	@ 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 800445a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800445c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004460:	db03      	blt.n	800446a <dmp_read_fifo+0x13a>
 8004462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004464:	f1b3 5f88 	cmp.w	r3, #285212672	@ 0x11000000
 8004468:	dd07      	ble.n	800447a <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 800446a:	f7fd f82f 	bl	80014cc <mpu_reset_fifo>
            sensors[0] = 0;
 800446e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004470:	2200      	movs	r2, #0
 8004472:	801a      	strh	r2, [r3, #0]
            return -1;
 8004474:	f04f 33ff 	mov.w	r3, #4294967295
 8004478:	e0c5      	b.n	8004606 <dmp_read_fifo+0x2d6>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 800447a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800447c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004484:	b21a      	sxth	r2, r3
 8004486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004488:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800448a:	4b61      	ldr	r3, [pc, #388]	@ (8004610 <dmp_read_fifo+0x2e0>)
 800448c:	895b      	ldrh	r3, [r3, #10]
 800448e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d04f      	beq.n	8004536 <dmp_read_fifo+0x206>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004496:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800449a:	3348      	adds	r3, #72	@ 0x48
 800449c:	443b      	add	r3, r7
 800449e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044a2:	b21b      	sxth	r3, r3
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	b21a      	sxth	r2, r3
 80044a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044ac:	3301      	adds	r3, #1
 80044ae:	3348      	adds	r3, #72	@ 0x48
 80044b0:	443b      	add	r3, r7
 80044b2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044b6:	b21b      	sxth	r3, r3
 80044b8:	4313      	orrs	r3, r2
 80044ba:	b21a      	sxth	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80044c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044c4:	3302      	adds	r3, #2
 80044c6:	3348      	adds	r3, #72	@ 0x48
 80044c8:	443b      	add	r3, r7
 80044ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044ce:	b21b      	sxth	r3, r3
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	b219      	sxth	r1, r3
 80044d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044d8:	3303      	adds	r3, #3
 80044da:	3348      	adds	r3, #72	@ 0x48
 80044dc:	443b      	add	r3, r7
 80044de:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044e2:	b21a      	sxth	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	3302      	adds	r3, #2
 80044e8:	430a      	orrs	r2, r1
 80044ea:	b212      	sxth	r2, r2
 80044ec:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80044ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044f2:	3304      	adds	r3, #4
 80044f4:	3348      	adds	r3, #72	@ 0x48
 80044f6:	443b      	add	r3, r7
 80044f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044fc:	b21b      	sxth	r3, r3
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	b219      	sxth	r1, r3
 8004502:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004506:	3305      	adds	r3, #5
 8004508:	3348      	adds	r3, #72	@ 0x48
 800450a:	443b      	add	r3, r7
 800450c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004510:	b21a      	sxth	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3304      	adds	r3, #4
 8004516:	430a      	orrs	r2, r1
 8004518:	b212      	sxth	r2, r2
 800451a:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800451c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004520:	3306      	adds	r3, #6
 8004522:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8004526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800452c:	f043 0308 	orr.w	r3, r3, #8
 8004530:	b21a      	sxth	r2, r3
 8004532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004534:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004536:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <dmp_read_fifo+0x2e0>)
 8004538:	895b      	ldrh	r3, [r3, #10]
 800453a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800453e:	2b00      	cmp	r3, #0
 8004540:	d04f      	beq.n	80045e2 <dmp_read_fifo+0x2b2>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004542:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004546:	3348      	adds	r3, #72	@ 0x48
 8004548:	443b      	add	r3, r7
 800454a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800454e:	b21b      	sxth	r3, r3
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	b21a      	sxth	r2, r3
 8004554:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004558:	3301      	adds	r3, #1
 800455a:	3348      	adds	r3, #72	@ 0x48
 800455c:	443b      	add	r3, r7
 800455e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004562:	b21b      	sxth	r3, r3
 8004564:	4313      	orrs	r3, r2
 8004566:	b21a      	sxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800456c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004570:	3302      	adds	r3, #2
 8004572:	3348      	adds	r3, #72	@ 0x48
 8004574:	443b      	add	r3, r7
 8004576:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800457a:	b21b      	sxth	r3, r3
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	b219      	sxth	r1, r3
 8004580:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004584:	3303      	adds	r3, #3
 8004586:	3348      	adds	r3, #72	@ 0x48
 8004588:	443b      	add	r3, r7
 800458a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800458e:	b21a      	sxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3302      	adds	r3, #2
 8004594:	430a      	orrs	r2, r1
 8004596:	b212      	sxth	r2, r2
 8004598:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800459a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800459e:	3304      	adds	r3, #4
 80045a0:	3348      	adds	r3, #72	@ 0x48
 80045a2:	443b      	add	r3, r7
 80045a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045a8:	b21b      	sxth	r3, r3
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	b219      	sxth	r1, r3
 80045ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045b2:	3305      	adds	r3, #5
 80045b4:	3348      	adds	r3, #72	@ 0x48
 80045b6:	443b      	add	r3, r7
 80045b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045bc:	b21a      	sxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3304      	adds	r3, #4
 80045c2:	430a      	orrs	r2, r1
 80045c4:	b212      	sxth	r2, r2
 80045c6:	801a      	strh	r2, [r3, #0]
        ii += 6;
 80045c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045cc:	3306      	adds	r3, #6
 80045ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_GYRO;
 80045d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045d8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80045dc:	b21a      	sxth	r2, r3
 80045de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045e0:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80045e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <dmp_read_fifo+0x2e0>)
 80045e4:	895b      	ldrh	r3, [r3, #10]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <dmp_read_fifo+0x2ce>
        decode_gesture(fifo_data + ii);
 80045ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045f2:	f107 0220 	add.w	r2, r7, #32
 80045f6:	4413      	add	r3, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fe55 	bl	80042a8 <decode_gesture>

    myget_ms(timestamp);
 80045fe:	6838      	ldr	r0, [r7, #0]
 8004600:	f7fe ff10 	bl	8003424 <myget_ms>
    return 0;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3748      	adds	r7, #72	@ 0x48
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	200002c8 	.word	0x200002c8

08004614 <run_self_test>:
#define DEFAULT_MPU_HZ (100)

#define q30 1073741824.0f

static int run_self_test(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	@ 0x28
 8004618:	af00      	add	r7, sp, #0
    int result;
    long gyro[3], accel[3];

    result = mpu_run_self_test(gyro, accel);
 800461a:	f107 020c 	add.w	r2, r7, #12
 800461e:	f107 0318 	add.w	r3, r7, #24
 8004622:	4611      	mov	r1, r2
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe fc6f 	bl	8002f08 <mpu_run_self_test>
 800462a:	6278      	str	r0, [r7, #36]	@ 0x24
    if (result == 0x3) {
 800462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462e:	2b03      	cmp	r3, #3
 8004630:	d150      	bne.n	80046d4 <run_self_test+0xc0>
        /* Test passed. We can trust the gyro data here, so let's push it down
         * to the DMP.
         */
        float sens;
        unsigned short accel_sens;
        mpu_get_gyro_sens(&sens);
 8004632:	f107 0308 	add.w	r3, r7, #8
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fb14 	bl	8001c64 <mpu_get_gyro_sens>
        gyro[0] = (long)(gyro[0] * sens);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004646:	edd7 7a02 	vldr	s15, [r7, #8]
 800464a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004652:	ee17 3a90 	vmov	r3, s15
 8004656:	61bb      	str	r3, [r7, #24]
        gyro[1] = (long)(gyro[1] * sens);
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004662:	edd7 7a02 	vldr	s15, [r7, #8]
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800466e:	ee17 3a90 	vmov	r3, s15
 8004672:	61fb      	str	r3, [r7, #28]
        gyro[2] = (long)(gyro[2] * sens);
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800467e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800468a:	ee17 3a90 	vmov	r3, s15
 800468e:	623b      	str	r3, [r7, #32]
        dmp_set_gyro_bias(gyro);
 8004690:	f107 0318 	add.w	r3, r7, #24
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe ffcb 	bl	8003630 <dmp_set_gyro_bias>
        mpu_get_accel_sens(&accel_sens);
 800469a:	1dbb      	adds	r3, r7, #6
 800469c:	4618      	mov	r0, r3
 800469e:	f7fd fb19 	bl	8001cd4 <mpu_get_accel_sens>
        accel[0] *= accel_sens;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	88fa      	ldrh	r2, [r7, #6]
 80046a6:	fb02 f303 	mul.w	r3, r2, r3
 80046aa:	60fb      	str	r3, [r7, #12]
        accel[1] *= accel_sens;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	88fa      	ldrh	r2, [r7, #6]
 80046b0:	fb02 f303 	mul.w	r3, r2, r3
 80046b4:	613b      	str	r3, [r7, #16]
        accel[2] *= accel_sens;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	88fa      	ldrh	r2, [r7, #6]
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	617b      	str	r3, [r7, #20]
        dmp_set_accel_bias(accel);
 80046c0:	f107 030c 	add.w	r3, r7, #12
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff f8bd 	bl	8003844 <dmp_set_accel_bias>
		printf("setting bias succesfully ......\r\n");
 80046ca:	4805      	ldr	r0, [pc, #20]	@ (80046e0 <run_self_test+0xcc>)
 80046cc:	f00d fd64 	bl	8012198 <puts>
    }else
		{
			return -1;
		}
		return 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e001      	b.n	80046d8 <run_self_test+0xc4>
			return -1;
 80046d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3728      	adds	r7, #40	@ 0x28
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	08014cd4 	.word	0x08014cd4

080046e4 <inv_row_2_scale>:

static signed char gyro_orientation[9] = {-1, 0, 0,
                                           0,-1, 0,
                                           0, 0, 1};
static  unsigned short inv_row_2_scale(const signed char *row)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f993 3000 	ldrsb.w	r3, [r3]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	dd02      	ble.n	80046fc <inv_row_2_scale+0x18>
        b = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	81fb      	strh	r3, [r7, #14]
 80046fa:	e02d      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f993 3000 	ldrsb.w	r3, [r3]
 8004702:	2b00      	cmp	r3, #0
 8004704:	da02      	bge.n	800470c <inv_row_2_scale+0x28>
        b = 4;
 8004706:	2304      	movs	r3, #4
 8004708:	81fb      	strh	r3, [r7, #14]
 800470a:	e025      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3301      	adds	r3, #1
 8004710:	f993 3000 	ldrsb.w	r3, [r3]
 8004714:	2b00      	cmp	r3, #0
 8004716:	dd02      	ble.n	800471e <inv_row_2_scale+0x3a>
        b = 1;
 8004718:	2301      	movs	r3, #1
 800471a:	81fb      	strh	r3, [r7, #14]
 800471c:	e01c      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3301      	adds	r3, #1
 8004722:	f993 3000 	ldrsb.w	r3, [r3]
 8004726:	2b00      	cmp	r3, #0
 8004728:	da02      	bge.n	8004730 <inv_row_2_scale+0x4c>
        b = 5;
 800472a:	2305      	movs	r3, #5
 800472c:	81fb      	strh	r3, [r7, #14]
 800472e:	e013      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3302      	adds	r3, #2
 8004734:	f993 3000 	ldrsb.w	r3, [r3]
 8004738:	2b00      	cmp	r3, #0
 800473a:	dd02      	ble.n	8004742 <inv_row_2_scale+0x5e>
        b = 2;
 800473c:	2302      	movs	r3, #2
 800473e:	81fb      	strh	r3, [r7, #14]
 8004740:	e00a      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3302      	adds	r3, #2
 8004746:	f993 3000 	ldrsb.w	r3, [r3]
 800474a:	2b00      	cmp	r3, #0
 800474c:	da02      	bge.n	8004754 <inv_row_2_scale+0x70>
        b = 6;
 800474e:	2306      	movs	r3, #6
 8004750:	81fb      	strh	r3, [r7, #14]
 8004752:	e001      	b.n	8004758 <inv_row_2_scale+0x74>
    else
        b = 7;      // error
 8004754:	2307      	movs	r3, #7
 8004756:	81fb      	strh	r3, [r7, #14]
    return b;
 8004758:	89fb      	ldrh	r3, [r7, #14]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <inv_orientation_matrix_to_scalar>:


static  unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b084      	sub	sp, #16
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
    unsigned short scalar;
    scalar = inv_row_2_scale(mtx);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ffb8 	bl	80046e4 <inv_row_2_scale>
 8004774:	4603      	mov	r3, r0
 8004776:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3303      	adds	r3, #3
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff ffb1 	bl	80046e4 <inv_row_2_scale>
 8004782:	4603      	mov	r3, r0
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	b21a      	sxth	r2, r3
 8004788:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800478c:	4313      	orrs	r3, r2
 800478e:	b21b      	sxth	r3, r3
 8004790:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3306      	adds	r3, #6
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff ffa4 	bl	80046e4 <inv_row_2_scale>
 800479c:	4603      	mov	r3, r0
 800479e:	019b      	lsls	r3, r3, #6
 80047a0:	b21a      	sxth	r2, r3
 80047a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	b21b      	sxth	r3, r3
 80047aa:	81fb      	strh	r3, [r7, #14]


    return scalar;
 80047ac:	89fb      	ldrh	r3, [r7, #14]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <MPU6050_DMP_Init>:

int MPU6050_DMP_Init(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
	int result;
	//struct int_param_s int_param;
	result = mpu_init();
 80047be:	f7fc fcb7 	bl	8001130 <mpu_init>
 80047c2:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <MPU6050_DMP_Init+0x18>
	{
		 return -1;
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
 80047ce:	e05d      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 80047d0:	2078      	movs	r0, #120	@ 0x78
 80047d2:	f7fd fb21 	bl	8001e18 <mpu_set_sensors>
 80047d6:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <MPU6050_DMP_Init+0x2c>
	{
		 return -2;
 80047de:	f06f 0301 	mvn.w	r3, #1
 80047e2:	e053      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 80047e4:	2078      	movs	r0, #120	@ 0x78
 80047e6:	f7fd fac5 	bl	8001d74 <mpu_configure_fifo>
 80047ea:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <MPU6050_DMP_Init+0x40>
	{
		 return -3;
 80047f2:	f06f 0302 	mvn.w	r3, #2
 80047f6:	e049      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_set_sample_rate(DEFAULT_MPU_HZ);
 80047f8:	2064      	movs	r0, #100	@ 0x64
 80047fa:	f7fd f9c1 	bl	8001b80 <mpu_set_sample_rate>
 80047fe:	6078      	str	r0, [r7, #4]
	if(result != 0)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <MPU6050_DMP_Init+0x54>
	{
		 return -4;
 8004806:	f06f 0303 	mvn.w	r3, #3
 800480a:	e03f      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	
	result = dmp_load_motion_driver_firmware();
 800480c:	f7fe fe14 	bl	8003438 <dmp_load_motion_driver_firmware>
 8004810:	6078      	str	r0, [r7, #4]
	if(result != 0)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <MPU6050_DMP_Init+0x66>
	{
		 return -5;
 8004818:	f06f 0304 	mvn.w	r3, #4
 800481c:	e036      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation));
 800481e:	481d      	ldr	r0, [pc, #116]	@ (8004894 <MPU6050_DMP_Init+0xdc>)
 8004820:	f7ff ffa1 	bl	8004766 <inv_orientation_matrix_to_scalar>
 8004824:	4603      	mov	r3, r0
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fe16 	bl	8003458 <dmp_set_orientation>
 800482c:	6078      	str	r0, [r7, #4]
	if(result != 0)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <MPU6050_DMP_Init+0x82>
	{
		 return -6;
 8004834:	f06f 0305 	mvn.w	r3, #5
 8004838:	e028      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 800483a:	f240 1073 	movw	r0, #371	@ 0x173
 800483e:	f7ff fb8d 	bl	8003f5c <dmp_enable_feature>
 8004842:	6078      	str	r0, [r7, #4]
	        DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
	        DMP_FEATURE_GYRO_CAL);
	if(result != 0)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <MPU6050_DMP_Init+0x98>
	{
		 return -7;
 800484a:	f06f 0306 	mvn.w	r3, #6
 800484e:	e01d      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = dmp_set_fifo_rate(DEFAULT_MPU_HZ);
 8004850:	2064      	movs	r0, #100	@ 0x64
 8004852:	f7ff f8f9 	bl	8003a48 <dmp_set_fifo_rate>
 8004856:	6078      	str	r0, [r7, #4]
	if(result != 0)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <MPU6050_DMP_Init+0xac>
	{
		 return -8;
 800485e:	f06f 0307 	mvn.w	r3, #7
 8004862:	e013      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = run_self_test();
 8004864:	f7ff fed6 	bl	8004614 <run_self_test>
 8004868:	6078      	str	r0, [r7, #4]
	if(result != 0)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <MPU6050_DMP_Init+0xbe>
	{
		 return -9;
 8004870:	f06f 0308 	mvn.w	r3, #8
 8004874:	e00a      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_set_dmp_state(1);
 8004876:	2001      	movs	r0, #1
 8004878:	f7fe fd6e 	bl	8003358 <mpu_set_dmp_state>
 800487c:	6078      	str	r0, [r7, #4]
	if(result != 0)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <MPU6050_DMP_Init+0xd2>
	{
		 return -10;
 8004884:	f06f 0309 	mvn.w	r3, #9
 8004888:	e000      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	return 0;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	2000002c 	.word	0x2000002c

08004898 <MPU6050_DMP_Get_Data>:

int MPU6050_DMP_Get_Data(float *Pitch,float *Roll,float *Yaw)
{
 8004898:	b5b0      	push	{r4, r5, r7, lr}
 800489a:	b094      	sub	sp, #80	@ 0x50
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
	float q0 = 0.0f;
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	647b      	str	r3, [r7, #68]	@ 0x44
	float q1 = 0.0f;
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	643b      	str	r3, [r7, #64]	@ 0x40
	float q2 = 0.0f;
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float q3 = 0.0f;
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	short accel[3]; 
	long quat[4];
  	unsigned long timestamp;
	short sensors;
	unsigned char more;
	if(dmp_read_fifo(gyro,accel,quat,&timestamp,&sensors,&more))
 80048bc:	f107 0414 	add.w	r4, r7, #20
 80048c0:	f107 0218 	add.w	r2, r7, #24
 80048c4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80048c8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80048cc:	f107 0311 	add.w	r3, r7, #17
 80048d0:	9301      	str	r3, [sp, #4]
 80048d2:	f107 0312 	add.w	r3, r7, #18
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	4623      	mov	r3, r4
 80048da:	f7ff fd29 	bl	8004330 <dmp_read_fifo>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <MPU6050_DMP_Get_Data+0x52>
	{
		return -1;
 80048e4:	f04f 33ff 	mov.w	r3, #4294967295
 80048e8:	e0bd      	b.n	8004a66 <MPU6050_DMP_Get_Data+0x1ce>
	}
	if(sensors & INV_WXYZ_QUAT)
 80048ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80b5 	beq.w	8004a64 <MPU6050_DMP_Get_Data+0x1cc>
	{
		q0=quat[0] / q30;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	ee07 3a90 	vmov	s15, r3
 8004900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004904:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8004a80 <MPU6050_DMP_Get_Data+0x1e8>
 8004908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800490c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		q1=quat[1] / q30;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800491a:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8004a80 <MPU6050_DMP_Get_Data+0x1e8>
 800491e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004922:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q2=quat[2] / q30;
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	ee07 3a90 	vmov	s15, r3
 800492c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004930:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8004a80 <MPU6050_DMP_Get_Data+0x1e8>
 8004934:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004938:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q3=quat[3] / q30;
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004946:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8004a80 <MPU6050_DMP_Get_Data+0x1e8>
 800494a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800494e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		
		*Pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3; 	
 8004952:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004956:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800495a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800495e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004966:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800496a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800496e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800497a:	ee17 0a90 	vmov	r0, s15
 800497e:	f7fb fde3 	bl	8000548 <__aeabi_f2d>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	ec43 2b10 	vmov	d0, r2, r3
 800498a:	f00f fad1 	bl	8013f30 <asin>
 800498e:	ec51 0b10 	vmov	r0, r1, d0
 8004992:	a337      	add	r3, pc, #220	@ (adr r3, 8004a70 <MPU6050_DMP_Get_Data+0x1d8>)
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f7fb fe2e 	bl	80005f8 <__aeabi_dmul>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	f7fc f920 	bl	8000be8 <__aeabi_d2f>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	601a      	str	r2, [r3, #0]
		// *Roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; // roll
		*Roll = gyro[2]/16.4;
 80049ae:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fb fdb6 	bl	8000524 <__aeabi_i2d>
 80049b8:	a32f      	add	r3, pc, #188	@ (adr r3, 8004a78 <MPU6050_DMP_Get_Data+0x1e0>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f7fb ff45 	bl	800084c <__aeabi_ddiv>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4610      	mov	r0, r2
 80049c8:	4619      	mov	r1, r3
 80049ca:	f7fc f90d 	bl	8000be8 <__aeabi_d2f>
 80049ce:	4602      	mov	r2, r0
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	601a      	str	r2, [r3, #0]
		*Yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;	//yaw
 80049d4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80049d8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80049dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049e0:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80049e4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80049e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80049f4:	ee17 0a90 	vmov	r0, s15
 80049f8:	f7fb fda6 	bl	8000548 <__aeabi_f2d>
 80049fc:	4604      	mov	r4, r0
 80049fe:	460d      	mov	r5, r1
 8004a00:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004a04:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004a08:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004a0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a14:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004a18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a20:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004a24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a2c:	ee17 0a90 	vmov	r0, s15
 8004a30:	f7fb fd8a 	bl	8000548 <__aeabi_f2d>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	ec43 2b11 	vmov	d1, r2, r3
 8004a3c:	ec45 4b10 	vmov	d0, r4, r5
 8004a40:	f00f faaa 	bl	8013f98 <atan2>
 8004a44:	ec51 0b10 	vmov	r0, r1, d0
 8004a48:	a309      	add	r3, pc, #36	@ (adr r3, 8004a70 <MPU6050_DMP_Get_Data+0x1d8>)
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	f7fb fdd3 	bl	80005f8 <__aeabi_dmul>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f7fc f8c5 	bl	8000be8 <__aeabi_d2f>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	601a      	str	r2, [r3, #0]
	}
	return 0;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3748      	adds	r7, #72	@ 0x48
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	66666666 	.word	0x66666666
 8004a74:	404ca666 	.word	0x404ca666
 8004a78:	66666666 	.word	0x66666666
 8004a7c:	40306666 	.word	0x40306666
 8004a80:	4e800000 	.word	0x4e800000

08004a84 <OLED_I2C_Init>:
// #define OLED_W_SCL(x) HAL_GPIO_WritePin(GPIOB, SCL_Pin, (GPIO_PinState)(x))
// #define OLED_W_SDA(x) HAL_GPIO_WritePin(GPIOB, SDA_Pin, (GPIO_PinState)(x))

/*引脚初始化*/
void OLED_I2C_Init(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
	// 使用硬件I2C1，不需要手动初始化GPIO
	// 在CubeMX中已经配置好了I2C1
}
 8004a88:	bf00      	nop
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <OLED_WriteCommand>:
 * @brief  OLED写命令
 * @param  Command 要写入的命令
 * @retval 无
 */
void OLED_WriteCommand(uint8_t Command)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {0x00, Command}; // 0x00表示写命令
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	733b      	strb	r3, [r7, #12]
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, buf, 2, 100);
 8004aa6:	f107 020c 	add.w	r2, r7, #12
 8004aaa:	2364      	movs	r3, #100	@ 0x64
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	2302      	movs	r3, #2
 8004ab0:	2178      	movs	r1, #120	@ 0x78
 8004ab2:	4803      	ldr	r0, [pc, #12]	@ (8004ac0 <OLED_WriteCommand+0x2c>)
 8004ab4:	f008 ff8c 	bl	800d9d0 <HAL_I2C_Master_Transmit>
}
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	200002d8 	.word	0x200002d8

08004ac4 <OLED_WriteData>:
 * @brief  OLED写数据
 * @param  Data 要写入的数据
 * @retval 无
 */
void OLED_WriteData(uint8_t Data)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {0x40, Data}; // 0x40表示写数据
 8004ace:	2340      	movs	r3, #64	@ 0x40
 8004ad0:	733b      	strb	r3, [r7, #12]
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, buf, 2, 100);
 8004ad6:	f107 020c 	add.w	r2, r7, #12
 8004ada:	2364      	movs	r3, #100	@ 0x64
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	2302      	movs	r3, #2
 8004ae0:	2178      	movs	r1, #120	@ 0x78
 8004ae2:	4803      	ldr	r0, [pc, #12]	@ (8004af0 <OLED_WriteData+0x2c>)
 8004ae4:	f008 ff74 	bl	800d9d0 <HAL_I2C_Master_Transmit>
}
 8004ae8:	bf00      	nop
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	200002d8 	.word	0x200002d8

08004af4 <OLED_SetCursor>:
 * @param  Y 以左上为原点，向下方向的坐标，范围：0~7
 * @param  X 以左上为原点，向右方向的坐标，范围：0~127
 * @retval 无
 */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	460a      	mov	r2, r1
 8004afe:	71fb      	strb	r3, [r7, #7]
 8004b00:	4613      	mov	r3, r2
 8004b02:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);				 //设置Y位置
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff ffc1 	bl	8004a94 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4)); //设置X位置4位
 8004b12:	79bb      	ldrb	r3, [r7, #6]
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	f043 0310 	orr.w	r3, r3, #16
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff ffb8 	bl	8004a94 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));		 //设置X位置4位
 8004b24:	79bb      	ldrb	r3, [r7, #6]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff ffb1 	bl	8004a94 <OLED_WriteCommand>
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <OLED_Clear>:
 * @brief  OLED清屏
 * @param  无
 * @retval 无
 */
void OLED_Clear(void)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8004b40:	2300      	movs	r3, #0
 8004b42:	71bb      	strb	r3, [r7, #6]
 8004b44:	e014      	b.n	8004b70 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 8004b46:	79bb      	ldrb	r3, [r7, #6]
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff ffd2 	bl	8004af4 <OLED_SetCursor>
		for (i = 0; i < 128; i++)
 8004b50:	2300      	movs	r3, #0
 8004b52:	71fb      	strb	r3, [r7, #7]
 8004b54:	e005      	b.n	8004b62 <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 8004b56:	2000      	movs	r0, #0
 8004b58:	f7ff ffb4 	bl	8004ac4 <OLED_WriteData>
		for (i = 0; i < 128; i++)
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	71fb      	strb	r3, [r7, #7]
 8004b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	daf5      	bge.n	8004b56 <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 8004b6a:	79bb      	ldrb	r3, [r7, #6]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	71bb      	strb	r3, [r7, #6]
 8004b70:	79bb      	ldrb	r3, [r7, #6]
 8004b72:	2b07      	cmp	r3, #7
 8004b74:	d9e7      	bls.n	8004b46 <OLED_Clear+0xc>
		}
	}
}
 8004b76:	bf00      	nop
 8004b78:	bf00      	nop
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <OLED_Clear_Part>:
 * @param  start 列开始位，范围：1~16
 * @param  end 列开始位，范围：1~16
 * @retval 无
 */
void OLED_Clear_Part(uint8_t Line, uint8_t start, uint8_t end)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	71fb      	strb	r3, [r7, #7]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	71bb      	strb	r3, [r7, #6]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	717b      	strb	r3, [r7, #5]
	uint8_t i, Column;
	for (Column = start; Column <= end; Column++)
 8004b92:	79bb      	ldrb	r3, [r7, #6]
 8004b94:	73bb      	strb	r3, [r7, #14]
 8004b96:	e036      	b.n	8004c06 <OLED_Clear_Part+0x86>
	{
		OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8); //设置光标位置在上半部
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	7bbb      	ldrb	r3, [r7, #14]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f7ff ffa0 	bl	8004af4 <OLED_SetCursor>
		for (i = 0; i < 8; i++)
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	73fb      	strb	r3, [r7, #15]
 8004bb8:	e005      	b.n	8004bc6 <OLED_Clear_Part+0x46>
		{
			OLED_WriteData(0x00); //显示上半部分内
 8004bba:	2000      	movs	r0, #0
 8004bbc:	f7ff ff82 	bl	8004ac4 <OLED_WriteData>
		for (i = 0; i < 8; i++)
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b07      	cmp	r3, #7
 8004bca:	d9f6      	bls.n	8004bba <OLED_Clear_Part+0x3a>
		}
		OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8); //设置光标位置在下半部
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	7bbb      	ldrb	r3, [r7, #14]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	4619      	mov	r1, r3
 8004be2:	4610      	mov	r0, r2
 8004be4:	f7ff ff86 	bl	8004af4 <OLED_SetCursor>
		for (i = 0; i < 8; i++)
 8004be8:	2300      	movs	r3, #0
 8004bea:	73fb      	strb	r3, [r7, #15]
 8004bec:	e005      	b.n	8004bfa <OLED_Clear_Part+0x7a>
		{
			OLED_WriteData(0x00); //显示下半部分内
 8004bee:	2000      	movs	r0, #0
 8004bf0:	f7ff ff68 	bl	8004ac4 <OLED_WriteData>
		for (i = 0; i < 8; i++)
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	2b07      	cmp	r3, #7
 8004bfe:	d9f6      	bls.n	8004bee <OLED_Clear_Part+0x6e>
	for (Column = start; Column <= end; Column++)
 8004c00:	7bbb      	ldrb	r3, [r7, #14]
 8004c02:	3301      	adds	r3, #1
 8004c04:	73bb      	strb	r3, [r7, #14]
 8004c06:	7bba      	ldrb	r2, [r7, #14]
 8004c08:	797b      	ldrb	r3, [r7, #5]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d9c4      	bls.n	8004b98 <OLED_Clear_Part+0x18>
		}
	}
}
 8004c0e:	bf00      	nop
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <OLED_ShowChar>:
 * @param  Column 列位，范围：1~16
 * @param  Char 要显示的一个字，范围：ASCII见字符
 * @retval 无
 */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
 8004c22:	460b      	mov	r3, r1
 8004c24:	71bb      	strb	r3, [r7, #6]
 8004c26:	4613      	mov	r3, r2
 8004c28:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8); //设置光标位置在上半部
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	79bb      	ldrb	r3, [r7, #6]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f7ff ff57 	bl	8004af4 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8004c46:	2300      	movs	r3, #0
 8004c48:	73fb      	strb	r3, [r7, #15]
 8004c4a:	e00e      	b.n	8004c6a <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]); //显示上半部分内
 8004c4c:	797b      	ldrb	r3, [r7, #5]
 8004c4e:	f1a3 0220 	sub.w	r2, r3, #32
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	491b      	ldr	r1, [pc, #108]	@ (8004cc4 <OLED_ShowChar+0xac>)
 8004c56:	0112      	lsls	r2, r2, #4
 8004c58:	440a      	add	r2, r1
 8004c5a:	4413      	add	r3, r2
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff ff30 	bl	8004ac4 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	3301      	adds	r3, #1
 8004c68:	73fb      	strb	r3, [r7, #15]
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b07      	cmp	r3, #7
 8004c6e:	d9ed      	bls.n	8004c4c <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8); //设置光标位置在下半部
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	79bb      	ldrb	r3, [r7, #6]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f7ff ff34 	bl	8004af4 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	73fb      	strb	r3, [r7, #15]
 8004c90:	e00f      	b.n	8004cb2 <OLED_ShowChar+0x9a>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]); //显示下半部分内
 8004c92:	797b      	ldrb	r3, [r7, #5]
 8004c94:	f1a3 0220 	sub.w	r2, r3, #32
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	4909      	ldr	r1, [pc, #36]	@ (8004cc4 <OLED_ShowChar+0xac>)
 8004c9e:	0112      	lsls	r2, r2, #4
 8004ca0:	440a      	add	r2, r1
 8004ca2:	4413      	add	r3, r2
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff ff0c 	bl	8004ac4 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	73fb      	strb	r3, [r7, #15]
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	2b07      	cmp	r3, #7
 8004cb6:	d9ec      	bls.n	8004c92 <OLED_ShowChar+0x7a>
	}
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	08015980 	.word	0x08015980

08004cc8 <OLED_ShowString>:
 * @param  Column 起始列位置，范围：1~16
 * @param  String 要显示的字符串，范围：ASCII见字符
 * @retval 无
 */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	603a      	str	r2, [r7, #0]
 8004cd2:	71fb      	strb	r3, [r7, #7]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	73fb      	strb	r3, [r7, #15]
 8004cdc:	e00e      	b.n	8004cfc <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 8004cde:	79ba      	ldrb	r2, [r7, #6]
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	b2d9      	uxtb	r1, r3
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	4413      	add	r3, r2
 8004cec:	781a      	ldrb	r2, [r3, #0]
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff ff91 	bl	8004c18 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	4413      	add	r3, r2
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1ea      	bne.n	8004cde <OLED_ShowString+0x16>
	}
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <OLED_Pow>:
/**
 * @brief  OLED次方函数
 * @retval 返回值等于X的Y次方
 */
uint32_t OLED_Pow(uint32_t X, uint32_t Y)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
	uint32_t Result = 1;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8004d20:	e004      	b.n	8004d2c <OLED_Pow+0x1a>
	{
		Result *= X;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	fb02 f303 	mul.w	r3, r2, r3
 8004d2a:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	1e5a      	subs	r2, r3, #1
 8004d30:	603a      	str	r2, [r7, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f5      	bne.n	8004d22 <OLED_Pow+0x10>
	}
	return Result;
 8004d36:	68fb      	ldr	r3, [r7, #12]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <OLED_ShowNum>:
 * @param  Number 要显示的数字，范围：0~4294967295
 * @param  Length 要显示数字的长度，范围：1~10
 * @retval 无
 */
void OLED_ShowNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 8004d44:	b590      	push	{r4, r7, lr}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	603a      	str	r2, [r7, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4603      	mov	r3, r0
 8004d50:	71fb      	strb	r3, [r7, #7]
 8004d52:	460b      	mov	r3, r1
 8004d54:	71bb      	strb	r3, [r7, #6]
 8004d56:	4613      	mov	r3, r2
 8004d58:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < Length; i++)
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	73fb      	strb	r3, [r7, #15]
 8004d5e:	e023      	b.n	8004da8 <OLED_ShowNum+0x64>
	{
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(10, Length - i - 1) % 10 + '0');
 8004d60:	79ba      	ldrb	r2, [r7, #6]
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	4413      	add	r3, r2
 8004d66:	b2dc      	uxtb	r4, r3
 8004d68:	797a      	ldrb	r2, [r7, #5]
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	4619      	mov	r1, r3
 8004d72:	200a      	movs	r0, #10
 8004d74:	f7ff ffcd 	bl	8004d12 <OLED_Pow>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d80:	4b0e      	ldr	r3, [pc, #56]	@ (8004dbc <OLED_ShowNum+0x78>)
 8004d82:	fba3 2301 	umull	r2, r3, r3, r1
 8004d86:	08da      	lsrs	r2, r3, #3
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	1aca      	subs	r2, r1, r3
 8004d92:	b2d3      	uxtb	r3, r2
 8004d94:	3330      	adds	r3, #48	@ 0x30
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff ff3b 	bl	8004c18 <OLED_ShowChar>
	for (i = 0; i < Length; i++)
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	3301      	adds	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
 8004da8:	7bfa      	ldrb	r2, [r7, #15]
 8004daa:	797b      	ldrb	r3, [r7, #5]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d3d7      	bcc.n	8004d60 <OLED_ShowNum+0x1c>
	}
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd90      	pop	{r4, r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	cccccccd 	.word	0xcccccccd

08004dc0 <OLED_Init>:
 * @brief  OLED初始化
 * @param  无
 * @retval 无
 */
void OLED_Init(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
	// 增加上电延时
	HAL_Delay(100);  // 使用HAL_Delay替代for循环延时
 8004dc4:	2064      	movs	r0, #100	@ 0x64
 8004dc6:	f008 f941 	bl	800d04c <HAL_Delay>

	// 初始化I2C
	OLED_I2C_Init();
 8004dca:	f7ff fe5b 	bl	8004a84 <OLED_I2C_Init>

	// 等待OLED稳定
	HAL_Delay(100);
 8004dce:	2064      	movs	r0, #100	@ 0x64
 8004dd0:	f008 f93c 	bl	800d04c <HAL_Delay>

	OLED_WriteCommand(0xAE); //关闭显示
 8004dd4:	20ae      	movs	r0, #174	@ 0xae
 8004dd6:	f7ff fe5d 	bl	8004a94 <OLED_WriteCommand>

	OLED_WriteCommand(0xD5); //设置显示时钟分比/震荡器频率
 8004dda:	20d5      	movs	r0, #213	@ 0xd5
 8004ddc:	f7ff fe5a 	bl	8004a94 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 8004de0:	2080      	movs	r0, #128	@ 0x80
 8004de2:	f7ff fe57 	bl	8004a94 <OLED_WriteCommand>

	OLED_WriteCommand(0xA8); //设置多路复用
 8004de6:	20a8      	movs	r0, #168	@ 0xa8
 8004de8:	f7ff fe54 	bl	8004a94 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 8004dec:	203f      	movs	r0, #63	@ 0x3f
 8004dee:	f7ff fe51 	bl	8004a94 <OLED_WriteCommand>

	OLED_WriteCommand(0xD3); //设置显示偏移
 8004df2:	20d3      	movs	r0, #211	@ 0xd3
 8004df4:	f7ff fe4e 	bl	8004a94 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 8004df8:	2000      	movs	r0, #0
 8004dfa:	f7ff fe4b 	bl	8004a94 <OLED_WriteCommand>

	OLED_WriteCommand(0x40); //设置显示开始
 8004dfe:	2040      	movs	r0, #64	@ 0x40
 8004e00:	f7ff fe48 	bl	8004a94 <OLED_WriteCommand>

	OLED_WriteCommand(0xA1); //设置左右方向0xA1正常 0xA0左右反置
 8004e04:	20a1      	movs	r0, #161	@ 0xa1
 8004e06:	f7ff fe45 	bl	8004a94 <OLED_WriteCommand>

	OLED_WriteCommand(0xC8); //设置上下方向0xC8正常 0xC0上下反置
 8004e0a:	20c8      	movs	r0, #200	@ 0xc8
 8004e0c:	f7ff fe42 	bl	8004a94 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA); //设置COM引脚件配
 8004e10:	20da      	movs	r0, #218	@ 0xda
 8004e12:	f7ff fe3f 	bl	8004a94 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8004e16:	2012      	movs	r0, #18
 8004e18:	f7ff fe3c 	bl	8004a94 <OLED_WriteCommand>

	OLED_WriteCommand(0x81); //设置对比度控
 8004e1c:	2081      	movs	r0, #129	@ 0x81
 8004e1e:	f7ff fe39 	bl	8004a94 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 8004e22:	20cf      	movs	r0, #207	@ 0xcf
 8004e24:	f7ff fe36 	bl	8004a94 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9); //设置预充电周
 8004e28:	20d9      	movs	r0, #217	@ 0xd9
 8004e2a:	f7ff fe33 	bl	8004a94 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8004e2e:	20f1      	movs	r0, #241	@ 0xf1
 8004e30:	f7ff fe30 	bl	8004a94 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB); //设置VCOMH取消选择级别
 8004e34:	20db      	movs	r0, #219	@ 0xdb
 8004e36:	f7ff fe2d 	bl	8004a94 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8004e3a:	2030      	movs	r0, #48	@ 0x30
 8004e3c:	f7ff fe2a 	bl	8004a94 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4); //设置整个显示打开/关闭
 8004e40:	20a4      	movs	r0, #164	@ 0xa4
 8004e42:	f7ff fe27 	bl	8004a94 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6); //设置正常/倒转显示
 8004e46:	20a6      	movs	r0, #166	@ 0xa6
 8004e48:	f7ff fe24 	bl	8004a94 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D); //设置充电
 8004e4c:	208d      	movs	r0, #141	@ 0x8d
 8004e4e:	f7ff fe21 	bl	8004a94 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8004e52:	2014      	movs	r0, #20
 8004e54:	f7ff fe1e 	bl	8004a94 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF); //开显示
 8004e58:	20af      	movs	r0, #175	@ 0xaf
 8004e5a:	f7ff fe1b 	bl	8004a94 <OLED_WriteCommand>

	OLED_Clear(); // OLED清屏
 8004e5e:	f7ff fe6c 	bl	8004b3a <OLED_Clear>
	
	// 等待显示稳定
	HAL_Delay(100);
 8004e62:	2064      	movs	r0, #100	@ 0x64
 8004e64:	f008 f8f2 	bl	800d04c <HAL_Delay>
}
 8004e68:	bf00      	nop
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <Servo_Init>:
// 定时器时钟频率（APB2=84MHz，TIMx使用84MHz）
#define TIMER_CLK_FREQ 168000000  // 单位：Hz

void Servo_Init(Servo* servo, TIM_HandleTypeDef* timer, uint32_t channel,
                GPIO_TypeDef* gpio_port, uint16_t gpio_pin) 
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
    servo->timer = timer;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	601a      	str	r2, [r3, #0]
    servo->channel = channel;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	605a      	str	r2, [r3, #4]
    servo->gpio_port = gpio_port;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	609a      	str	r2, [r3, #8]
    servo->gpio_pin = gpio_pin;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8c3a      	ldrh	r2, [r7, #32]
 8004e90:	819a      	strh	r2, [r3, #12]
    servo->pulse_width = SERVO_MIN_PULSE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004e98:	611a      	str	r2, [r3, #16]

    // 配置PWM周期
    uint32_t period_cycles = (TIMER_CLK_FREQ / 1000000) * SERVO_PWM_PERIOD / 
                            (timer->Init.Prescaler + 1);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	3301      	adds	r3, #1
    uint32_t period_cycles = (TIMER_CLK_FREQ / 1000000) * SERVO_PWM_PERIOD / 
 8004ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed8 <Servo_Init+0x6c>)
 8004ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea6:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_AUTORELOAD(timer, period_cycles - 1);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	3a01      	subs	r2, #1
 8004eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	1e5a      	subs	r2, r3, #1
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	60da      	str	r2, [r3, #12]

    // 启动PWM
    HAL_TIM_PWM_Start(timer, channel);
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	68b8      	ldr	r0, [r7, #8]
 8004ebe:	f00a fb51 	bl	800f564 <HAL_TIM_PWM_Start>
    Servo_SetPulse(servo, servo->pulse_width);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 f843 	bl	8004f54 <Servo_SetPulse>
}
 8004ece:	bf00      	nop
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	00334500 	.word	0x00334500

08004edc <Servo_SetAngle>:

void Servo_SetAngle(Servo* servo, float angle) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	ed87 0a00 	vstr	s0, [r7]
    // 角度限幅
    angle = (angle < 0) ? 0 : (angle > 180) ? 180 : angle;
 8004ee8:	edd7 7a00 	vldr	s15, [r7]
 8004eec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef4:	d502      	bpl.n	8004efc <Servo_SetAngle+0x20>
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	e00b      	b.n	8004f14 <Servo_SetAngle+0x38>
 8004efc:	edd7 7a00 	vldr	s15, [r7]
 8004f00:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004f48 <Servo_SetAngle+0x6c>
 8004f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0c:	dd01      	ble.n	8004f12 <Servo_SetAngle+0x36>
 8004f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f4c <Servo_SetAngle+0x70>)
 8004f10:	e000      	b.n	8004f14 <Servo_SetAngle+0x38>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	603b      	str	r3, [r7, #0]
    
    // 计算脉宽
    uint32_t pulse = SERVO_MIN_PULSE + 
                    (uint32_t)((SERVO_MAX_PULSE - SERVO_MIN_PULSE) * angle / 180.0f);
 8004f16:	edd7 7a00 	vldr	s15, [r7]
 8004f1a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004f50 <Servo_SetAngle+0x74>
 8004f1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004f22:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004f48 <Servo_SetAngle+0x6c>
 8004f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f2e:	ee17 3a90 	vmov	r3, s15
    uint32_t pulse = SERVO_MIN_PULSE + 
 8004f32:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004f36:	60fb      	str	r3, [r7, #12]
    
    Servo_SetPulse(servo, pulse);
 8004f38:	68f9      	ldr	r1, [r7, #12]
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f80a 	bl	8004f54 <Servo_SetPulse>
}
 8004f40:	bf00      	nop
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	43340000 	.word	0x43340000
 8004f4c:	43340000 	.word	0x43340000
 8004f50:	44fa0000 	.word	0x44fa0000

08004f54 <Servo_SetPulse>:

void Servo_SetPulse(Servo* servo, uint32_t pulse_us) {
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
    // 计算比较寄存器值
    uint32_t pulse_cycles = (TIMER_CLK_FREQ / 1000000) * pulse_us / 
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	22a8      	movs	r2, #168	@ 0xa8
 8004f62:	fb03 f202 	mul.w	r2, r3, r2
                           (servo->timer->Init.Prescaler + 1);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	3301      	adds	r3, #1
    uint32_t pulse_cycles = (TIMER_CLK_FREQ / 1000000) * pulse_us / 
 8004f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f72:	60fb      	str	r3, [r7, #12]
    
    // 设置比较值
    switch(servo->channel) {
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <Servo_SetPulse+0x2e>
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d006      	beq.n	8004f8e <Servo_SetPulse+0x3a>
 8004f80:	e00b      	b.n	8004f9a <Servo_SetPulse+0x46>
        case TIM_CHANNEL_1:
            __HAL_TIM_SET_COMPARE(servo->timer, TIM_CHANNEL_1, pulse_cycles);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8004f8c:	e005      	b.n	8004f9a <Servo_SetPulse+0x46>
        case TIM_CHANNEL_2:
            __HAL_TIM_SET_COMPARE(servo->timer, TIM_CHANNEL_2, pulse_cycles);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8004f98:	bf00      	nop
        // 添加其他通道...
    }
    servo->pulse_width = pulse_us;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	611a      	str	r2, [r3, #16]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08e      	sub	sp, #56	@ 0x38
 8004fb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	605a      	str	r2, [r3, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
 8004fbe:	60da      	str	r2, [r3, #12]
 8004fc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	623b      	str	r3, [r7, #32]
 8004fc6:	4bb2      	ldr	r3, [pc, #712]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fca:	4ab1      	ldr	r2, [pc, #708]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8004fcc:	f043 0310 	orr.w	r3, r3, #16
 8004fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fd2:	4baf      	ldr	r3, [pc, #700]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	623b      	str	r3, [r7, #32]
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	4bab      	ldr	r3, [pc, #684]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe6:	4aaa      	ldr	r2, [pc, #680]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8004fe8:	f043 0304 	orr.w	r3, r3, #4
 8004fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fee:	4ba8      	ldr	r3, [pc, #672]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	61fb      	str	r3, [r7, #28]
 8004ff8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	4ba4      	ldr	r3, [pc, #656]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005002:	4aa3      	ldr	r2, [pc, #652]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8005004:	f043 0320 	orr.w	r3, r3, #32
 8005008:	6313      	str	r3, [r2, #48]	@ 0x30
 800500a:	4ba1      	ldr	r3, [pc, #644]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	61bb      	str	r3, [r7, #24]
 8005014:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	4b9d      	ldr	r3, [pc, #628]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 800501c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501e:	4a9c      	ldr	r2, [pc, #624]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8005020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005024:	6313      	str	r3, [r2, #48]	@ 0x30
 8005026:	4b9a      	ldr	r3, [pc, #616]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005032:	2300      	movs	r3, #0
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	4b96      	ldr	r3, [pc, #600]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8005038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503a:	4a95      	ldr	r2, [pc, #596]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	6313      	str	r3, [r2, #48]	@ 0x30
 8005042:	4b93      	ldr	r3, [pc, #588]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	4b8f      	ldr	r3, [pc, #572]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8005054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005056:	4a8e      	ldr	r2, [pc, #568]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8005058:	f043 0302 	orr.w	r3, r3, #2
 800505c:	6313      	str	r3, [r2, #48]	@ 0x30
 800505e:	4b8c      	ldr	r3, [pc, #560]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8005060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	60bb      	str	r3, [r7, #8]
 800506e:	4b88      	ldr	r3, [pc, #544]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005072:	4a87      	ldr	r2, [pc, #540]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8005074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005078:	6313      	str	r3, [r2, #48]	@ 0x30
 800507a:	4b85      	ldr	r3, [pc, #532]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005082:	60bb      	str	r3, [r7, #8]
 8005084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	607b      	str	r3, [r7, #4]
 800508a:	4b81      	ldr	r3, [pc, #516]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508e:	4a80      	ldr	r2, [pc, #512]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8005090:	f043 0308 	orr.w	r3, r3, #8
 8005094:	6313      	str	r3, [r2, #48]	@ 0x30
 8005096:	4b7e      	ldr	r3, [pc, #504]	@ (8005290 <MX_GPIO_Init+0x2e4>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	607b      	str	r3, [r7, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80050a2:	2200      	movs	r2, #0
 80050a4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80050a8:	487a      	ldr	r0, [pc, #488]	@ (8005294 <MX_GPIO_Init+0x2e8>)
 80050aa:	f008 fb33 	bl	800d714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M4_IN1_Pin|M4_IN2_Pin|M3_IN1_Pin, GPIO_PIN_RESET);
 80050ae:	2200      	movs	r2, #0
 80050b0:	212a      	movs	r1, #42	@ 0x2a
 80050b2:	4879      	ldr	r0, [pc, #484]	@ (8005298 <MX_GPIO_Init+0x2ec>)
 80050b4:	f008 fb2e 	bl	800d714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_IN2_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80050b8:	2200      	movs	r2, #0
 80050ba:	f24f 0102 	movw	r1, #61442	@ 0xf002
 80050be:	4877      	ldr	r0, [pc, #476]	@ (800529c <MX_GPIO_Init+0x2f0>)
 80050c0:	f008 fb28 	bl	800d714 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, M1_IN1_Pin|GPIO_PIN_1|M2_IN1_Pin|Trig_2_Pin, GPIO_PIN_RESET);
 80050c4:	2200      	movs	r2, #0
 80050c6:	f248 010b 	movw	r1, #32779	@ 0x800b
 80050ca:	4875      	ldr	r0, [pc, #468]	@ (80052a0 <MX_GPIO_Init+0x2f4>)
 80050cc:	f008 fb22 	bl	800d714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M1_IN2_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12
 80050d0:	2200      	movs	r2, #0
 80050d2:	f24d 5180 	movw	r1, #54656	@ 0xd580
 80050d6:	4873      	ldr	r0, [pc, #460]	@ (80052a4 <MX_GPIO_Init+0x2f8>)
 80050d8:	f008 fb1c 	bl	800d714 <HAL_GPIO_WritePin>
                          |Trig_4_Pin|Trig_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_RESET);
 80050dc:	2200      	movs	r2, #0
 80050de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050e2:	4871      	ldr	r0, [pc, #452]	@ (80052a8 <MX_GPIO_Init+0x2fc>)
 80050e4:	f008 fb16 	bl	800d714 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE13
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_13
 80050e8:	f242 031f 	movw	r3, #8223	@ 0x201f
 80050ec:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ee:	2303      	movs	r3, #3
 80050f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f2:	2300      	movs	r3, #0
 80050f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050fa:	4619      	mov	r1, r3
 80050fc:	4869      	ldr	r0, [pc, #420]	@ (80052a4 <MX_GPIO_Init+0x2f8>)
 80050fe:	f008 f96d 	bl	800d3dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC2 PC4
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8005102:	f242 1315 	movw	r3, #8469	@ 0x2115
 8005106:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005108:	2303      	movs	r3, #3
 800510a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510c:	2300      	movs	r3, #0
 800510e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005110:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005114:	4619      	mov	r1, r3
 8005116:	4860      	ldr	r0, [pc, #384]	@ (8005298 <MX_GPIO_Init+0x2ec>)
 8005118:	f008 f960 	bl	800d3dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF7 PF8
                           PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800511c:	f64f 13bf 	movw	r3, #63935	@ 0xf9bf
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005122:	2303      	movs	r3, #3
 8005124:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005126:	2300      	movs	r3, #0
 8005128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800512a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800512e:	4619      	mov	r1, r3
 8005130:	4858      	ldr	r0, [pc, #352]	@ (8005294 <MX_GPIO_Init+0x2e8>)
 8005132:	f008 f953 	bl	800d3dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005136:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800513c:	2301      	movs	r3, #1
 800513e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005144:	2300      	movs	r3, #0
 8005146:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800514c:	4619      	mov	r1, r3
 800514e:	4851      	ldr	r0, [pc, #324]	@ (8005294 <MX_GPIO_Init+0x2e8>)
 8005150:	f008 f944 	bl	800d3dc <HAL_GPIO_Init>

  /*Configure GPIO pins : M4_IN1_Pin M4_IN2_Pin M3_IN1_Pin */
  GPIO_InitStruct.Pin = M4_IN1_Pin|M4_IN2_Pin|M3_IN1_Pin;
 8005154:	232a      	movs	r3, #42	@ 0x2a
 8005156:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005158:	2301      	movs	r3, #1
 800515a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515c:	2300      	movs	r3, #0
 800515e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005160:	2300      	movs	r3, #0
 8005162:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005168:	4619      	mov	r1, r3
 800516a:	484b      	ldr	r0, [pc, #300]	@ (8005298 <MX_GPIO_Init+0x2ec>)
 800516c:	f008 f936 	bl	800d3dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8005170:	f649 0310 	movw	r3, #38928	@ 0x9810
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005176:	2303      	movs	r3, #3
 8005178:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517a:	2300      	movs	r3, #0
 800517c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800517e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005182:	4619      	mov	r1, r3
 8005184:	4849      	ldr	r0, [pc, #292]	@ (80052ac <MX_GPIO_Init+0x300>)
 8005186:	f008 f929 	bl	800d3dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB4
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_4
 800518a:	f240 7335 	movw	r3, #1845	@ 0x735
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005190:	2303      	movs	r3, #3
 8005192:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005194:	2300      	movs	r3, #0
 8005196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800519c:	4619      	mov	r1, r3
 800519e:	483f      	ldr	r0, [pc, #252]	@ (800529c <MX_GPIO_Init+0x2f0>)
 80051a0:	f008 f91c 	bl	800d3dc <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_IN2_Pin PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = M3_IN2_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80051a4:	f24f 0302 	movw	r3, #61442	@ 0xf002
 80051a8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051aa:	2301      	movs	r3, #1
 80051ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b2:	2300      	movs	r3, #0
 80051b4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051ba:	4619      	mov	r1, r3
 80051bc:	4837      	ldr	r0, [pc, #220]	@ (800529c <MX_GPIO_Init+0x2f0>)
 80051be:	f008 f90d 	bl	800d3dc <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin PG1 M2_IN1_Pin Trig_2_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|GPIO_PIN_1|M2_IN1_Pin|Trig_2_Pin;
 80051c2:	f248 030b 	movw	r3, #32779	@ 0x800b
 80051c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051c8:	2301      	movs	r3, #1
 80051ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d0:	2300      	movs	r3, #0
 80051d2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80051d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051d8:	4619      	mov	r1, r3
 80051da:	4831      	ldr	r0, [pc, #196]	@ (80052a0 <MX_GPIO_Init+0x2f4>)
 80051dc:	f008 f8fe 	bl	800d3dc <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN2_Pin PE8 PE10 PE12
                           Trig_4_Pin Trig_3_Pin */
  GPIO_InitStruct.Pin = M1_IN2_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12
 80051e0:	f24d 5380 	movw	r3, #54656	@ 0xd580
 80051e4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |Trig_4_Pin|Trig_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051e6:	2301      	movs	r3, #1
 80051e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ee:	2300      	movs	r3, #0
 80051f0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051f6:	4619      	mov	r1, r3
 80051f8:	482a      	ldr	r0, [pc, #168]	@ (80052a4 <MX_GPIO_Init+0x2f8>)
 80051fa:	f008 f8ef 	bl	800d3dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_3_Pin */
  GPIO_InitStruct.Pin = Echo_3_Pin;
 80051fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005202:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005204:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8005208:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520a:	2300      	movs	r3, #0
 800520c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Echo_3_GPIO_Port, &GPIO_InitStruct);
 800520e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005212:	4619      	mov	r1, r3
 8005214:	4821      	ldr	r0, [pc, #132]	@ (800529c <MX_GPIO_Init+0x2f0>)
 8005216:	f008 f8e1 	bl	800d3dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD0
                           PD1 PD3 PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_0
 800521a:	f644 439b 	movw	r3, #19611	@ 0x4c9b
 800521e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005220:	2303      	movs	r3, #3
 8005222:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005224:	2300      	movs	r3, #0
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800522c:	4619      	mov	r1, r3
 800522e:	481e      	ldr	r0, [pc, #120]	@ (80052a8 <MX_GPIO_Init+0x2fc>)
 8005230:	f008 f8d4 	bl	800d3dc <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IN2_Pin */
  GPIO_InitStruct.Pin = M2_IN2_Pin;
 8005234:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005238:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800523a:	2301      	movs	r3, #1
 800523c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523e:	2300      	movs	r3, #0
 8005240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005242:	2300      	movs	r3, #0
 8005244:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(M2_IN2_GPIO_Port, &GPIO_InitStruct);
 8005246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800524a:	4619      	mov	r1, r3
 800524c:	4816      	ldr	r0, [pc, #88]	@ (80052a8 <MX_GPIO_Init+0x2fc>)
 800524e:	f008 f8c5 	bl	800d3dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG4 PG5 PG6
                           PG7 PG8 PG10 PG11
                           PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8005252:	f641 53f4 	movw	r3, #7668	@ 0x1df4
 8005256:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005258:	2303      	movs	r3, #3
 800525a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525c:	2300      	movs	r3, #0
 800525e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005260:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005264:	4619      	mov	r1, r3
 8005266:	480e      	ldr	r0, [pc, #56]	@ (80052a0 <MX_GPIO_Init+0x2f4>)
 8005268:	f008 f8b8 	bl	800d3dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_2_Pin */
  GPIO_InitStruct.Pin = Echo_2_Pin;
 800526c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005272:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8005276:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005278:	2300      	movs	r3, #0
 800527a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Echo_2_GPIO_Port, &GPIO_InitStruct);
 800527c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005280:	4619      	mov	r1, r3
 8005282:	4807      	ldr	r0, [pc, #28]	@ (80052a0 <MX_GPIO_Init+0x2f4>)
 8005284:	f008 f8aa 	bl	800d3dc <HAL_GPIO_Init>

}
 8005288:	bf00      	nop
 800528a:	3738      	adds	r7, #56	@ 0x38
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40023800 	.word	0x40023800
 8005294:	40021400 	.word	0x40021400
 8005298:	40020800 	.word	0x40020800
 800529c:	40020400 	.word	0x40020400
 80052a0:	40021800 	.word	0x40021800
 80052a4:	40021000 	.word	0x40021000
 80052a8:	40020c00 	.word	0x40020c00
 80052ac:	40020000 	.word	0x40020000

080052b0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80052b4:	4b12      	ldr	r3, [pc, #72]	@ (8005300 <MX_I2C1_Init+0x50>)
 80052b6:	4a13      	ldr	r2, [pc, #76]	@ (8005304 <MX_I2C1_Init+0x54>)
 80052b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80052ba:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <MX_I2C1_Init+0x50>)
 80052bc:	4a12      	ldr	r2, [pc, #72]	@ (8005308 <MX_I2C1_Init+0x58>)
 80052be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80052c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005300 <MX_I2C1_Init+0x50>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80052c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005300 <MX_I2C1_Init+0x50>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005300 <MX_I2C1_Init+0x50>)
 80052ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80052d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005300 <MX_I2C1_Init+0x50>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80052da:	4b09      	ldr	r3, [pc, #36]	@ (8005300 <MX_I2C1_Init+0x50>)
 80052dc:	2200      	movs	r2, #0
 80052de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052e0:	4b07      	ldr	r3, [pc, #28]	@ (8005300 <MX_I2C1_Init+0x50>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80052e6:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <MX_I2C1_Init+0x50>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052ec:	4804      	ldr	r0, [pc, #16]	@ (8005300 <MX_I2C1_Init+0x50>)
 80052ee:	f008 fa2b 	bl	800d748 <HAL_I2C_Init>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80052f8:	f002 fce4 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80052fc:	bf00      	nop
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	200002d8 	.word	0x200002d8
 8005304:	40005400 	.word	0x40005400
 8005308:	00061a80 	.word	0x00061a80

0800530c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005310:	4b12      	ldr	r3, [pc, #72]	@ (800535c <MX_I2C3_Init+0x50>)
 8005312:	4a13      	ldr	r2, [pc, #76]	@ (8005360 <MX_I2C3_Init+0x54>)
 8005314:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005316:	4b11      	ldr	r3, [pc, #68]	@ (800535c <MX_I2C3_Init+0x50>)
 8005318:	4a12      	ldr	r2, [pc, #72]	@ (8005364 <MX_I2C3_Init+0x58>)
 800531a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800531c:	4b0f      	ldr	r3, [pc, #60]	@ (800535c <MX_I2C3_Init+0x50>)
 800531e:	2200      	movs	r2, #0
 8005320:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005322:	4b0e      	ldr	r3, [pc, #56]	@ (800535c <MX_I2C3_Init+0x50>)
 8005324:	2200      	movs	r2, #0
 8005326:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005328:	4b0c      	ldr	r3, [pc, #48]	@ (800535c <MX_I2C3_Init+0x50>)
 800532a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800532e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005330:	4b0a      	ldr	r3, [pc, #40]	@ (800535c <MX_I2C3_Init+0x50>)
 8005332:	2200      	movs	r2, #0
 8005334:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005336:	4b09      	ldr	r3, [pc, #36]	@ (800535c <MX_I2C3_Init+0x50>)
 8005338:	2200      	movs	r2, #0
 800533a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800533c:	4b07      	ldr	r3, [pc, #28]	@ (800535c <MX_I2C3_Init+0x50>)
 800533e:	2200      	movs	r2, #0
 8005340:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005342:	4b06      	ldr	r3, [pc, #24]	@ (800535c <MX_I2C3_Init+0x50>)
 8005344:	2200      	movs	r2, #0
 8005346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005348:	4804      	ldr	r0, [pc, #16]	@ (800535c <MX_I2C3_Init+0x50>)
 800534a:	f008 f9fd 	bl	800d748 <HAL_I2C_Init>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005354:	f002 fcb6 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005358:	bf00      	nop
 800535a:	bd80      	pop	{r7, pc}
 800535c:	2000032c 	.word	0x2000032c
 8005360:	40005c00 	.word	0x40005c00
 8005364:	000186a0 	.word	0x000186a0

08005368 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08c      	sub	sp, #48	@ 0x30
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005370:	f107 031c 	add.w	r3, r7, #28
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	609a      	str	r2, [r3, #8]
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a42      	ldr	r2, [pc, #264]	@ (8005490 <HAL_I2C_MspInit+0x128>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d12c      	bne.n	80053e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800538a:	2300      	movs	r3, #0
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	4b41      	ldr	r3, [pc, #260]	@ (8005494 <HAL_I2C_MspInit+0x12c>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005392:	4a40      	ldr	r2, [pc, #256]	@ (8005494 <HAL_I2C_MspInit+0x12c>)
 8005394:	f043 0302 	orr.w	r3, r3, #2
 8005398:	6313      	str	r3, [r2, #48]	@ 0x30
 800539a:	4b3e      	ldr	r3, [pc, #248]	@ (8005494 <HAL_I2C_MspInit+0x12c>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	61bb      	str	r3, [r7, #24]
 80053a4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053a6:	23c0      	movs	r3, #192	@ 0xc0
 80053a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053aa:	2312      	movs	r3, #18
 80053ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b2:	2303      	movs	r3, #3
 80053b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80053b6:	2304      	movs	r3, #4
 80053b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053ba:	f107 031c 	add.w	r3, r7, #28
 80053be:	4619      	mov	r1, r3
 80053c0:	4835      	ldr	r0, [pc, #212]	@ (8005498 <HAL_I2C_MspInit+0x130>)
 80053c2:	f008 f80b 	bl	800d3dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	4b32      	ldr	r3, [pc, #200]	@ (8005494 <HAL_I2C_MspInit+0x12c>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ce:	4a31      	ldr	r2, [pc, #196]	@ (8005494 <HAL_I2C_MspInit+0x12c>)
 80053d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80053d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005494 <HAL_I2C_MspInit+0x12c>)
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80053e2:	e050      	b.n	8005486 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a2c      	ldr	r2, [pc, #176]	@ (800549c <HAL_I2C_MspInit+0x134>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d14b      	bne.n	8005486 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053ee:	2300      	movs	r3, #0
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	4b28      	ldr	r3, [pc, #160]	@ (8005494 <HAL_I2C_MspInit+0x12c>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f6:	4a27      	ldr	r2, [pc, #156]	@ (8005494 <HAL_I2C_MspInit+0x12c>)
 80053f8:	f043 0304 	orr.w	r3, r3, #4
 80053fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80053fe:	4b25      	ldr	r3, [pc, #148]	@ (8005494 <HAL_I2C_MspInit+0x12c>)
 8005400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	613b      	str	r3, [r7, #16]
 8005408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	4b21      	ldr	r3, [pc, #132]	@ (8005494 <HAL_I2C_MspInit+0x12c>)
 8005410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005412:	4a20      	ldr	r2, [pc, #128]	@ (8005494 <HAL_I2C_MspInit+0x12c>)
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	6313      	str	r3, [r2, #48]	@ 0x30
 800541a:	4b1e      	ldr	r3, [pc, #120]	@ (8005494 <HAL_I2C_MspInit+0x12c>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005426:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800542a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800542c:	2312      	movs	r3, #18
 800542e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005430:	2300      	movs	r3, #0
 8005432:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005434:	2303      	movs	r3, #3
 8005436:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005438:	2304      	movs	r3, #4
 800543a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800543c:	f107 031c 	add.w	r3, r7, #28
 8005440:	4619      	mov	r1, r3
 8005442:	4817      	ldr	r0, [pc, #92]	@ (80054a0 <HAL_I2C_MspInit+0x138>)
 8005444:	f007 ffca 	bl	800d3dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800544c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800544e:	2312      	movs	r3, #18
 8005450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005452:	2300      	movs	r3, #0
 8005454:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005456:	2303      	movs	r3, #3
 8005458:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800545a:	2304      	movs	r3, #4
 800545c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800545e:	f107 031c 	add.w	r3, r7, #28
 8005462:	4619      	mov	r1, r3
 8005464:	480f      	ldr	r0, [pc, #60]	@ (80054a4 <HAL_I2C_MspInit+0x13c>)
 8005466:	f007 ffb9 	bl	800d3dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	4b09      	ldr	r3, [pc, #36]	@ (8005494 <HAL_I2C_MspInit+0x12c>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005472:	4a08      	ldr	r2, [pc, #32]	@ (8005494 <HAL_I2C_MspInit+0x12c>)
 8005474:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005478:	6413      	str	r3, [r2, #64]	@ 0x40
 800547a:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <HAL_I2C_MspInit+0x12c>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005482:	60bb      	str	r3, [r7, #8]
 8005484:	68bb      	ldr	r3, [r7, #8]
}
 8005486:	bf00      	nop
 8005488:	3730      	adds	r7, #48	@ 0x30
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40005400 	.word	0x40005400
 8005494:	40023800 	.word	0x40023800
 8005498:	40020400 	.word	0x40020400
 800549c:	40005c00 	.word	0x40005c00
 80054a0:	40020800 	.word	0x40020800
 80054a4:	40020000 	.word	0x40020000

080054a8 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define CLAMP(value, min, max) ((value) < (min) ? (min) : ((value) > (max) ? (max) : (value)))

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
    // 检查是否是UART5（US100传感器使用的串口）
    if (huart == &huart1) {
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a1e      	ldr	r2, [pc, #120]	@ (800552c <HAL_UART_RxCpltCallback+0x84>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d11b      	bne.n	80054f0 <HAL_UART_RxCpltCallback+0x48>
    ledState = !ledState;
 80054b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005530 <HAL_UART_RxCpltCallback+0x88>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bf0c      	ite	eq
 80054c0:	2301      	moveq	r3, #1
 80054c2:	2300      	movne	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	4b19      	ldr	r3, [pc, #100]	@ (8005530 <HAL_UART_RxCpltCallback+0x88>)
 80054ca:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, ledState ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80054cc:	4b18      	ldr	r3, [pc, #96]	@ (8005530 <HAL_UART_RxCpltCallback+0x88>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80054e0:	4814      	ldr	r0, [pc, #80]	@ (8005534 <HAL_UART_RxCpltCallback+0x8c>)
 80054e2:	f008 f917 	bl	800d714 <HAL_GPIO_WritePin>
    // 继续接收下一个字节
    HAL_UART_Receive_IT(&huart1, aRxBuffer, 1);
 80054e6:	2201      	movs	r2, #1
 80054e8:	4913      	ldr	r1, [pc, #76]	@ (8005538 <HAL_UART_RxCpltCallback+0x90>)
 80054ea:	4810      	ldr	r0, [pc, #64]	@ (800552c <HAL_UART_RxCpltCallback+0x84>)
 80054ec:	f00b f885 	bl	80105fa <HAL_UART_Receive_IT>
    }
    if (huart == &huart5||huart == &huart2||huart == &huart3||huart == &huart4) {
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a12      	ldr	r2, [pc, #72]	@ (800553c <HAL_UART_RxCpltCallback+0x94>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00b      	beq.n	8005510 <HAL_UART_RxCpltCallback+0x68>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a11      	ldr	r2, [pc, #68]	@ (8005540 <HAL_UART_RxCpltCallback+0x98>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d007      	beq.n	8005510 <HAL_UART_RxCpltCallback+0x68>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a10      	ldr	r2, [pc, #64]	@ (8005544 <HAL_UART_RxCpltCallback+0x9c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d003      	beq.n	8005510 <HAL_UART_RxCpltCallback+0x68>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a0f      	ldr	r2, [pc, #60]	@ (8005548 <HAL_UART_RxCpltCallback+0xa0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d108      	bne.n	8005522 <HAL_UART_RxCpltCallback+0x7a>
      US100_UART_RxCpltCallback(huart);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f007 f8fd 	bl	800c710 <US100_UART_RxCpltCallback>
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);  // 收到'a'后关闭LED
 8005516:	2201      	movs	r2, #1
 8005518:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800551c:	4805      	ldr	r0, [pc, #20]	@ (8005534 <HAL_UART_RxCpltCallback+0x8c>)
 800551e:	f008 f8f9 	bl	800d714 <HAL_GPIO_WritePin>
    // {
    //   US100_UART_RxCpltCallback(huart,4);
    //   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
    // }
    
}
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	2000096c 	.word	0x2000096c
 8005530:	20000380 	.word	0x20000380
 8005534:	40021400 	.word	0x40021400
 8005538:	20000038 	.word	0x20000038
 800553c:	20000924 	.word	0x20000924
 8005540:	200009b4 	.word	0x200009b4
 8005544:	200009fc 	.word	0x200009fc
 8005548:	200008dc 	.word	0x200008dc

0800554c <smooth_speed_transition>:

#define MAX_SPEED_STEP 5  // 每次最大速度变化量
uint8_t smooth_speed_transition(uint8_t current, uint8_t target) {
 800554c:	b5b0      	push	{r4, r5, r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	460a      	mov	r2, r1
 8005556:	71fb      	strb	r3, [r7, #7]
 8005558:	4613      	mov	r3, r2
 800555a:	71bb      	strb	r3, [r7, #6]
    if(target > current) {
 800555c:	79ba      	ldrb	r2, [r7, #6]
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	429a      	cmp	r2, r3
 8005562:	d91b      	bls.n	800559c <smooth_speed_transition+0x50>
        return fmin(current + MAX_SPEED_STEP, target);
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	3305      	adds	r3, #5
 8005568:	4618      	mov	r0, r3
 800556a:	f7fa ffdb 	bl	8000524 <__aeabi_i2d>
 800556e:	4604      	mov	r4, r0
 8005570:	460d      	mov	r5, r1
 8005572:	79bb      	ldrb	r3, [r7, #6]
 8005574:	4618      	mov	r0, r3
 8005576:	f7fa ffc5 	bl	8000504 <__aeabi_ui2d>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	ec43 2b11 	vmov	d1, r2, r3
 8005582:	ec45 4b10 	vmov	d0, r4, r5
 8005586:	f00e fd45 	bl	8014014 <fmin>
 800558a:	ec53 2b10 	vmov	r2, r3, d0
 800558e:	4610      	mov	r0, r2
 8005590:	4619      	mov	r1, r3
 8005592:	f7fb fb09 	bl	8000ba8 <__aeabi_d2uiz>
 8005596:	4603      	mov	r3, r0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	e020      	b.n	80055de <smooth_speed_transition+0x92>
    } else if(target < current) {
 800559c:	79ba      	ldrb	r2, [r7, #6]
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d21b      	bcs.n	80055dc <smooth_speed_transition+0x90>
        return fmax(current - MAX_SPEED_STEP, target);
 80055a4:	79fb      	ldrb	r3, [r7, #7]
 80055a6:	3b05      	subs	r3, #5
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fa ffbb 	bl	8000524 <__aeabi_i2d>
 80055ae:	4604      	mov	r4, r0
 80055b0:	460d      	mov	r5, r1
 80055b2:	79bb      	ldrb	r3, [r7, #6]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fa ffa5 	bl	8000504 <__aeabi_ui2d>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	ec43 2b11 	vmov	d1, r2, r3
 80055c2:	ec45 4b10 	vmov	d0, r4, r5
 80055c6:	f00e fcfb 	bl	8013fc0 <fmax>
 80055ca:	ec53 2b10 	vmov	r2, r3, d0
 80055ce:	4610      	mov	r0, r2
 80055d0:	4619      	mov	r1, r3
 80055d2:	f7fb fae9 	bl	8000ba8 <__aeabi_d2uiz>
 80055d6:	4603      	mov	r3, r0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	e000      	b.n	80055de <smooth_speed_transition+0x92>
    }
    return current;
 80055dc:	79fb      	ldrb	r3, [r7, #7]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080055e8 <PID_ResetAll>:

void PID_ResetAll(void) {
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  PID_Reset(&pid_yaw);
 80055ec:	4806      	ldr	r0, [pc, #24]	@ (8005608 <PID_ResetAll+0x20>)
 80055ee:	f005 ff6f 	bl	800b4d0 <PID_Reset>
  PID_Reset(&pid_rear);
 80055f2:	4806      	ldr	r0, [pc, #24]	@ (800560c <PID_ResetAll+0x24>)
 80055f4:	f005 ff6c 	bl	800b4d0 <PID_Reset>
  PID_Reset(&pid_front);
 80055f8:	4805      	ldr	r0, [pc, #20]	@ (8005610 <PID_ResetAll+0x28>)
 80055fa:	f005 ff69 	bl	800b4d0 <PID_Reset>
  PID_Reset(&pid_position);
 80055fe:	4805      	ldr	r0, [pc, #20]	@ (8005614 <PID_ResetAll+0x2c>)
 8005600:	f005 ff66 	bl	800b4d0 <PID_Reset>
}
 8005604:	bf00      	nop
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000068 	.word	0x20000068
 800560c:	20000098 	.word	0x20000098
 8005610:	20000080 	.word	0x20000080
 8005614:	200000b0 	.word	0x200000b0

08005618 <Rotate_90_Degrees>:


void Rotate_90_Degrees(Motor_ID id1, Motor_ID id2, Motor_ID id3, Motor_ID id4, bool clockwise) {
 8005618:	b5b0      	push	{r4, r5, r7, lr}
 800561a:	b08e      	sub	sp, #56	@ 0x38
 800561c:	af00      	add	r7, sp, #0
 800561e:	4604      	mov	r4, r0
 8005620:	4608      	mov	r0, r1
 8005622:	4611      	mov	r1, r2
 8005624:	461a      	mov	r2, r3
 8005626:	4623      	mov	r3, r4
 8005628:	71fb      	strb	r3, [r7, #7]
 800562a:	4603      	mov	r3, r0
 800562c:	71bb      	strb	r3, [r7, #6]
 800562e:	460b      	mov	r3, r1
 8005630:	717b      	strb	r3, [r7, #5]
 8005632:	4613      	mov	r3, r2
 8005634:	713b      	strb	r3, [r7, #4]
  float ROTATION_SPEED;  // 旋转速度
  static const float ROTATION_SPEED_max = 30.0f;
  static const float ANGLE_TOLERANCE = 6.9f;  // 角度容差
  // MPU6050_DMP_Get_Data(&pitchstart , &rollopen , &yaw);
  float const start_yaw = target_yaw;  // 记录起始角度
 8005636:	4bbc      	ldr	r3, [pc, #752]	@ (8005928 <Rotate_90_Degrees+0x310>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	62bb      	str	r3, [r7, #40]	@ 0x28
  float target_angle = start_yaw + (clockwise ? -90.0f : 90.0f);  // 计算目标角度
 800563c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <Rotate_90_Degrees+0x32>
 8005644:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 800592c <Rotate_90_Degrees+0x314>
 8005648:	e001      	b.n	800564e <Rotate_90_Degrees+0x36>
 800564a:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8005930 <Rotate_90_Degrees+0x318>
 800564e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005656:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
  unsigned int num = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  // 标准化目标角度到-180到180度范围
  if (target_angle > 180.0f) {
 800565e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005662:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8005934 <Rotate_90_Degrees+0x31c>
 8005666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800566a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566e:	dd08      	ble.n	8005682 <Rotate_90_Degrees+0x6a>
      target_angle -= 360.0f;
 8005670:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005674:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8005938 <Rotate_90_Degrees+0x320>
 8005678:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800567c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8005680:	e010      	b.n	80056a4 <Rotate_90_Degrees+0x8c>
  } else if (target_angle < -180.0f) {
 8005682:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005686:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 800593c <Rotate_90_Degrees+0x324>
 800568a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800568e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005692:	d507      	bpl.n	80056a4 <Rotate_90_Degrees+0x8c>
      target_angle += 360.0f;
 8005694:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005698:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8005938 <Rotate_90_Degrees+0x320>
 800569c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056a0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
  }
  
  // 设置目标偏航角
  target_yaw = target_angle;
 80056a4:	4aa0      	ldr	r2, [pc, #640]	@ (8005928 <Rotate_90_Degrees+0x310>)
 80056a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a8:	6013      	str	r3, [r2, #0]
  // PID_Reset(&pid_rear);
  // PID_Reset(&pid_position);

  
  // 开始旋转
  uint32_t start_time = HAL_GetTick();
 80056aa:	f007 fcc3 	bl	800d034 <HAL_GetTick>
 80056ae:	6278      	str	r0, [r7, #36]	@ 0x24
  while (num <= 20) {
 80056b0:	e132      	b.n	8005918 <Rotate_90_Degrees+0x300>
      // 检查是否超时（5秒）
      if (HAL_GetTick() - start_time > 5000) {
 80056b2:	f007 fcbf 	bl	800d034 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d901      	bls.n	80056c8 <Rotate_90_Degrees+0xb0>
          break;
 80056c4:	bf00      	nop
          num++;
      }
      HAL_Delay(10);
  }

}
 80056c6:	e12b      	b.n	8005920 <Rotate_90_Degrees+0x308>
      if (MPU6050_DMP_Get_Data(&pitch, &roll, &current_yaw) != 0) {
 80056c8:	f107 0208 	add.w	r2, r7, #8
 80056cc:	f107 010c 	add.w	r1, r7, #12
 80056d0:	f107 0310 	add.w	r3, r7, #16
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff f8df 	bl	8004898 <MPU6050_DMP_Get_Data>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f040 811a 	bne.w	8005916 <Rotate_90_Degrees+0x2fe>
      OLED_ShowChar(3,5,current_yaw >= 0 ? '+' : '-'); 
 80056e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80056e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ee:	db01      	blt.n	80056f4 <Rotate_90_Degrees+0xdc>
 80056f0:	232b      	movs	r3, #43	@ 0x2b
 80056f2:	e000      	b.n	80056f6 <Rotate_90_Degrees+0xde>
 80056f4:	232d      	movs	r3, #45	@ 0x2d
 80056f6:	461a      	mov	r2, r3
 80056f8:	2105      	movs	r1, #5
 80056fa:	2003      	movs	r0, #3
 80056fc:	f7ff fa8c 	bl	8004c18 <OLED_ShowChar>
      OLED_ShowChar(3,13,target_yaw >= 0 ? '+' : '-'); 
 8005700:	4b89      	ldr	r3, [pc, #548]	@ (8005928 <Rotate_90_Degrees+0x310>)
 8005702:	edd3 7a00 	vldr	s15, [r3]
 8005706:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800570a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570e:	db01      	blt.n	8005714 <Rotate_90_Degrees+0xfc>
 8005710:	232b      	movs	r3, #43	@ 0x2b
 8005712:	e000      	b.n	8005716 <Rotate_90_Degrees+0xfe>
 8005714:	232d      	movs	r3, #45	@ 0x2d
 8005716:	461a      	mov	r2, r3
 8005718:	210d      	movs	r1, #13
 800571a:	2003      	movs	r0, #3
 800571c:	f7ff fa7c 	bl	8004c18 <OLED_ShowChar>
      OLED_ShowNum(3,14,fabsf(target_yaw),3);
 8005720:	4b81      	ldr	r3, [pc, #516]	@ (8005928 <Rotate_90_Degrees+0x310>)
 8005722:	edd3 7a00 	vldr	s15, [r3]
 8005726:	eef0 7ae7 	vabs.f32	s15, s15
 800572a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800572e:	2303      	movs	r3, #3
 8005730:	ee17 2a90 	vmov	r2, s15
 8005734:	210e      	movs	r1, #14
 8005736:	2003      	movs	r0, #3
 8005738:	f7ff fb04 	bl	8004d44 <OLED_ShowNum>
      OLED_ShowNum(3,6,fabsf(current_yaw),3);
 800573c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005740:	eef0 7ae7 	vabs.f32	s15, s15
 8005744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005748:	2303      	movs	r3, #3
 800574a:	ee17 2a90 	vmov	r2, s15
 800574e:	2106      	movs	r1, #6
 8005750:	2003      	movs	r0, #3
 8005752:	f7ff faf7 	bl	8004d44 <OLED_ShowNum>
      OLED_ShowChar(4,5,roll >= 0 ? '+' : '-');
 8005756:	edd7 7a03 	vldr	s15, [r7, #12]
 800575a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800575e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005762:	db01      	blt.n	8005768 <Rotate_90_Degrees+0x150>
 8005764:	232b      	movs	r3, #43	@ 0x2b
 8005766:	e000      	b.n	800576a <Rotate_90_Degrees+0x152>
 8005768:	232d      	movs	r3, #45	@ 0x2d
 800576a:	461a      	mov	r2, r3
 800576c:	2105      	movs	r1, #5
 800576e:	2004      	movs	r0, #4
 8005770:	f7ff fa52 	bl	8004c18 <OLED_ShowChar>
      OLED_ShowNum(4, 6, fabsf(roll) , 3);
 8005774:	edd7 7a03 	vldr	s15, [r7, #12]
 8005778:	eef0 7ae7 	vabs.f32	s15, s15
 800577c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005780:	2303      	movs	r3, #3
 8005782:	ee17 2a90 	vmov	r2, s15
 8005786:	2106      	movs	r1, #6
 8005788:	2004      	movs	r0, #4
 800578a:	f7ff fadb 	bl	8004d44 <OLED_ShowNum>
      float angle_error = target_angle - current_yaw;
 800578e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005792:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8005796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800579a:	edc7 7a08 	vstr	s15, [r7, #32]
      uint32_t current_time = HAL_GetTick();
 800579e:	f007 fc49 	bl	800d034 <HAL_GetTick>
 80057a2:	61f8      	str	r0, [r7, #28]
      float dt = (current_time - last_pid_time) / 1000.0f;  // 转换为秒
 80057a4:	4b66      	ldr	r3, [pc, #408]	@ (8005940 <Rotate_90_Degrees+0x328>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69fa      	ldr	r2, [r7, #28]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	ee07 3a90 	vmov	s15, r3
 80057b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057b4:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8005944 <Rotate_90_Degrees+0x32c>
 80057b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057bc:	edc7 7a06 	vstr	s15, [r7, #24]
      last_pid_time = current_time;
 80057c0:	4a5f      	ldr	r2, [pc, #380]	@ (8005940 <Rotate_90_Degrees+0x328>)
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	6013      	str	r3, [r2, #0]
      float voltage = PID_Calculate(&pid_yaw, angle_error, dt);
 80057c6:	edd7 0a06 	vldr	s1, [r7, #24]
 80057ca:	ed97 0a08 	vldr	s0, [r7, #32]
 80057ce:	485e      	ldr	r0, [pc, #376]	@ (8005948 <Rotate_90_Degrees+0x330>)
 80057d0:	f005 fe02 	bl	800b3d8 <PID_Calculate>
 80057d4:	ed87 0a05 	vstr	s0, [r7, #20]
      if (fabsf(voltage) > 10.0f) {
 80057d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80057dc:	eef0 7ae7 	vabs.f32	s15, s15
 80057e0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80057e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ec:	dd41      	ble.n	8005872 <Rotate_90_Degrees+0x25a>
          if (voltage >= 0) {
 80057ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80057f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057fa:	db1a      	blt.n	8005832 <Rotate_90_Degrees+0x21a>
              ROTATION_SPEED = fmin(voltage, ROTATION_SPEED_max);
 80057fc:	6978      	ldr	r0, [r7, #20]
 80057fe:	f7fa fea3 	bl	8000548 <__aeabi_f2d>
 8005802:	4604      	mov	r4, r0
 8005804:	460d      	mov	r5, r1
 8005806:	4b51      	ldr	r3, [pc, #324]	@ (800594c <Rotate_90_Degrees+0x334>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f7fa fe9c 	bl	8000548 <__aeabi_f2d>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	ec43 2b11 	vmov	d1, r2, r3
 8005818:	ec45 4b10 	vmov	d0, r4, r5
 800581c:	f00e fbfa 	bl	8014014 <fmin>
 8005820:	ec53 2b10 	vmov	r2, r3, d0
 8005824:	4610      	mov	r0, r2
 8005826:	4619      	mov	r1, r3
 8005828:	f7fb f9de 	bl	8000be8 <__aeabi_d2f>
 800582c:	4603      	mov	r3, r0
 800582e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005830:	e02a      	b.n	8005888 <Rotate_90_Degrees+0x270>
              ROTATION_SPEED = fmax(voltage, -ROTATION_SPEED_max);
 8005832:	6978      	ldr	r0, [r7, #20]
 8005834:	f7fa fe88 	bl	8000548 <__aeabi_f2d>
 8005838:	4604      	mov	r4, r0
 800583a:	460d      	mov	r5, r1
 800583c:	4b43      	ldr	r3, [pc, #268]	@ (800594c <Rotate_90_Degrees+0x334>)
 800583e:	edd3 7a00 	vldr	s15, [r3]
 8005842:	eef1 7a67 	vneg.f32	s15, s15
 8005846:	ee17 3a90 	vmov	r3, s15
 800584a:	4618      	mov	r0, r3
 800584c:	f7fa fe7c 	bl	8000548 <__aeabi_f2d>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	ec43 2b11 	vmov	d1, r2, r3
 8005858:	ec45 4b10 	vmov	d0, r4, r5
 800585c:	f00e fbb0 	bl	8013fc0 <fmax>
 8005860:	ec53 2b10 	vmov	r2, r3, d0
 8005864:	4610      	mov	r0, r2
 8005866:	4619      	mov	r1, r3
 8005868:	f7fb f9be 	bl	8000be8 <__aeabi_d2f>
 800586c:	4603      	mov	r3, r0
 800586e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005870:	e00a      	b.n	8005888 <Rotate_90_Degrees+0x270>
          ROTATION_SPEED = (voltage >= 0) ? 10.0f : -10.0f;
 8005872:	edd7 7a05 	vldr	s15, [r7, #20]
 8005876:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800587a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587e:	db01      	blt.n	8005884 <Rotate_90_Degrees+0x26c>
 8005880:	4b33      	ldr	r3, [pc, #204]	@ (8005950 <Rotate_90_Degrees+0x338>)
 8005882:	e000      	b.n	8005886 <Rotate_90_Degrees+0x26e>
 8005884:	4b33      	ldr	r3, [pc, #204]	@ (8005954 <Rotate_90_Degrees+0x33c>)
 8005886:	637b      	str	r3, [r7, #52]	@ 0x34
      Motor_SetSpeed(id1, ROTATION_SPEED);  // 左前
 8005888:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800588c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005890:	ee17 3a90 	vmov	r3, s15
 8005894:	b21a      	sxth	r2, r3
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	4611      	mov	r1, r2
 800589a:	4618      	mov	r0, r3
 800589c:	f002 fa94 	bl	8007dc8 <Motor_SetSpeed>
      Motor_SetSpeed(id2, ROTATION_SPEED);  // 右后
 80058a0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80058a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058a8:	ee17 3a90 	vmov	r3, s15
 80058ac:	b21a      	sxth	r2, r3
 80058ae:	79bb      	ldrb	r3, [r7, #6]
 80058b0:	4611      	mov	r1, r2
 80058b2:	4618      	mov	r0, r3
 80058b4:	f002 fa88 	bl	8007dc8 <Motor_SetSpeed>
      Motor_SetSpeed(id3, -ROTATION_SPEED);   // 左后
 80058b8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80058bc:	eef1 7a67 	vneg.f32	s15, s15
 80058c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058c4:	ee17 3a90 	vmov	r3, s15
 80058c8:	b21a      	sxth	r2, r3
 80058ca:	797b      	ldrb	r3, [r7, #5]
 80058cc:	4611      	mov	r1, r2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f002 fa7a 	bl	8007dc8 <Motor_SetSpeed>
      Motor_SetSpeed(id4, -ROTATION_SPEED);   // 右前
 80058d4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80058d8:	eef1 7a67 	vneg.f32	s15, s15
 80058dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058e0:	ee17 3a90 	vmov	r3, s15
 80058e4:	b21a      	sxth	r2, r3
 80058e6:	793b      	ldrb	r3, [r7, #4]
 80058e8:	4611      	mov	r1, r2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f002 fa6c 	bl	8007dc8 <Motor_SetSpeed>
      if (fabsf(angle_error) <= ANGLE_TOLERANCE){
 80058f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80058f4:	eeb0 7ae7 	vabs.f32	s14, s15
 80058f8:	4b17      	ldr	r3, [pc, #92]	@ (8005958 <Rotate_90_Degrees+0x340>)
 80058fa:	edd3 7a00 	vldr	s15, [r3]
 80058fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005906:	d802      	bhi.n	800590e <Rotate_90_Degrees+0x2f6>
          num++;
 8005908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800590a:	3301      	adds	r3, #1
 800590c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_Delay(10);
 800590e:	200a      	movs	r0, #10
 8005910:	f007 fb9c 	bl	800d04c <HAL_Delay>
 8005914:	e000      	b.n	8005918 <Rotate_90_Degrees+0x300>
          continue;  // 如果获取数据失败，继续尝试
 8005916:	bf00      	nop
  while (num <= 20) {
 8005918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591a:	2b14      	cmp	r3, #20
 800591c:	f67f aec9 	bls.w	80056b2 <Rotate_90_Degrees+0x9a>
}
 8005920:	bf00      	nop
 8005922:	3738      	adds	r7, #56	@ 0x38
 8005924:	46bd      	mov	sp, r7
 8005926:	bdb0      	pop	{r4, r5, r7, pc}
 8005928:	200005e4 	.word	0x200005e4
 800592c:	c2b40000 	.word	0xc2b40000
 8005930:	42b40000 	.word	0x42b40000
 8005934:	43340000 	.word	0x43340000
 8005938:	43b40000 	.word	0x43b40000
 800593c:	c3340000 	.word	0xc3340000
 8005940:	2000059c 	.word	0x2000059c
 8005944:	447a0000 	.word	0x447a0000
 8005948:	20000068 	.word	0x20000068
 800594c:	08015f70 	.word	0x08015f70
 8005950:	41200000 	.word	0x41200000
 8005954:	c1200000 	.word	0xc1200000
 8005958:	08015f74 	.word	0x08015f74

0800595c <Servo_open_red_left>:

void Servo_open_red_left()
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
    // 使用正确的舵机变量名和角度
    Servo_SetAngle(&servo1, 115);
 8005960:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8005998 <Servo_open_red_left+0x3c>
 8005964:	480d      	ldr	r0, [pc, #52]	@ (800599c <Servo_open_red_left+0x40>)
 8005966:	f7ff fab9 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo2, 35);
 800596a:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80059a0 <Servo_open_red_left+0x44>
 800596e:	480d      	ldr	r0, [pc, #52]	@ (80059a4 <Servo_open_red_left+0x48>)
 8005970:	f7ff fab4 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo3, 123);
 8005974:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80059a8 <Servo_open_red_left+0x4c>
 8005978:	480c      	ldr	r0, [pc, #48]	@ (80059ac <Servo_open_red_left+0x50>)
 800597a:	f7ff faaf 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo4, 48);
 800597e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80059b0 <Servo_open_red_left+0x54>
 8005982:	480c      	ldr	r0, [pc, #48]	@ (80059b4 <Servo_open_red_left+0x58>)
 8005984:	f7ff faaa 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo5, 15);
 8005988:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 800598c:	480a      	ldr	r0, [pc, #40]	@ (80059b8 <Servo_open_red_left+0x5c>)
 800598e:	f7ff faa5 	bl	8004edc <Servo_SetAngle>
}
 8005992:	bf00      	nop
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	42e60000 	.word	0x42e60000
 800599c:	20000428 	.word	0x20000428
 80059a0:	420c0000 	.word	0x420c0000
 80059a4:	2000043c 	.word	0x2000043c
 80059a8:	42f60000 	.word	0x42f60000
 80059ac:	20000450 	.word	0x20000450
 80059b0:	42400000 	.word	0x42400000
 80059b4:	20000464 	.word	0x20000464
 80059b8:	20000478 	.word	0x20000478

080059bc <Servo_open_red_right>:

void Servo_open_red_right()
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
    // 使用正确的舵机变量名和角度
    Servo_SetAngle(&servo1, 35);
 80059c0:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80059f8 <Servo_open_red_right+0x3c>
 80059c4:	480d      	ldr	r0, [pc, #52]	@ (80059fc <Servo_open_red_right+0x40>)
 80059c6:	f7ff fa89 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo2, 122);
 80059ca:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8005a00 <Servo_open_red_right+0x44>
 80059ce:	480d      	ldr	r0, [pc, #52]	@ (8005a04 <Servo_open_red_right+0x48>)
 80059d0:	f7ff fa84 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo3, 38);
 80059d4:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8005a08 <Servo_open_red_right+0x4c>
 80059d8:	480c      	ldr	r0, [pc, #48]	@ (8005a0c <Servo_open_red_right+0x50>)
 80059da:	f7ff fa7f 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo4, 138);
 80059de:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8005a10 <Servo_open_red_right+0x54>
 80059e2:	480c      	ldr	r0, [pc, #48]	@ (8005a14 <Servo_open_red_right+0x58>)
 80059e4:	f7ff fa7a 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo5, 15);
 80059e8:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 80059ec:	480a      	ldr	r0, [pc, #40]	@ (8005a18 <Servo_open_red_right+0x5c>)
 80059ee:	f7ff fa75 	bl	8004edc <Servo_SetAngle>
}
 80059f2:	bf00      	nop
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	420c0000 	.word	0x420c0000
 80059fc:	20000428 	.word	0x20000428
 8005a00:	42f40000 	.word	0x42f40000
 8005a04:	2000043c 	.word	0x2000043c
 8005a08:	42180000 	.word	0x42180000
 8005a0c:	20000450 	.word	0x20000450
 8005a10:	430a0000 	.word	0x430a0000
 8005a14:	20000464 	.word	0x20000464
 8005a18:	20000478 	.word	0x20000478

08005a1c <Servo_open_green_left>:

void Servo_open_green_left()
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
    // 使用正确的舵机变量名和角度
    Servo_SetAngle(&servo1, 35);
 8005a20:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8005a58 <Servo_open_green_left+0x3c>
 8005a24:	480d      	ldr	r0, [pc, #52]	@ (8005a5c <Servo_open_green_left+0x40>)
 8005a26:	f7ff fa59 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo2, 35);
 8005a2a:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8005a58 <Servo_open_green_left+0x3c>
 8005a2e:	480c      	ldr	r0, [pc, #48]	@ (8005a60 <Servo_open_green_left+0x44>)
 8005a30:	f7ff fa54 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo3, 123);
 8005a34:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8005a64 <Servo_open_green_left+0x48>
 8005a38:	480b      	ldr	r0, [pc, #44]	@ (8005a68 <Servo_open_green_left+0x4c>)
 8005a3a:	f7ff fa4f 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo4, 48);
 8005a3e:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8005a6c <Servo_open_green_left+0x50>
 8005a42:	480b      	ldr	r0, [pc, #44]	@ (8005a70 <Servo_open_green_left+0x54>)
 8005a44:	f7ff fa4a 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo5, 15);
 8005a48:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8005a4c:	4809      	ldr	r0, [pc, #36]	@ (8005a74 <Servo_open_green_left+0x58>)
 8005a4e:	f7ff fa45 	bl	8004edc <Servo_SetAngle>
}
 8005a52:	bf00      	nop
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	420c0000 	.word	0x420c0000
 8005a5c:	20000428 	.word	0x20000428
 8005a60:	2000043c 	.word	0x2000043c
 8005a64:	42f60000 	.word	0x42f60000
 8005a68:	20000450 	.word	0x20000450
 8005a6c:	42400000 	.word	0x42400000
 8005a70:	20000464 	.word	0x20000464
 8005a74:	20000478 	.word	0x20000478

08005a78 <Servo_open_green_right>:

void Servo_open_green_right()
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
    // 使用正确的舵机变量名和角度
    Servo_SetAngle(&servo1, 35);
 8005a7c:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8005ab4 <Servo_open_green_right+0x3c>
 8005a80:	480d      	ldr	r0, [pc, #52]	@ (8005ab8 <Servo_open_green_right+0x40>)
 8005a82:	f7ff fa2b 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo2, 35);
 8005a86:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8005ab4 <Servo_open_green_right+0x3c>
 8005a8a:	480c      	ldr	r0, [pc, #48]	@ (8005abc <Servo_open_green_right+0x44>)
 8005a8c:	f7ff fa26 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo3, 38);
 8005a90:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8005ac0 <Servo_open_green_right+0x48>
 8005a94:	480b      	ldr	r0, [pc, #44]	@ (8005ac4 <Servo_open_green_right+0x4c>)
 8005a96:	f7ff fa21 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo4, 138);
 8005a9a:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8005ac8 <Servo_open_green_right+0x50>
 8005a9e:	480b      	ldr	r0, [pc, #44]	@ (8005acc <Servo_open_green_right+0x54>)
 8005aa0:	f7ff fa1c 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo5, 15);
 8005aa4:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8005aa8:	4809      	ldr	r0, [pc, #36]	@ (8005ad0 <Servo_open_green_right+0x58>)
 8005aaa:	f7ff fa17 	bl	8004edc <Servo_SetAngle>
}
 8005aae:	bf00      	nop
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	420c0000 	.word	0x420c0000
 8005ab8:	20000428 	.word	0x20000428
 8005abc:	2000043c 	.word	0x2000043c
 8005ac0:	42180000 	.word	0x42180000
 8005ac4:	20000450 	.word	0x20000450
 8005ac8:	430a0000 	.word	0x430a0000
 8005acc:	20000464 	.word	0x20000464
 8005ad0:	20000478 	.word	0x20000478

08005ad4 <Servo_close>:

void Servo_close()
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
    // 使用正确的舵机变量名和角度
    Servo_SetAngle(&servo5, 105);
 8005ad8:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8005b10 <Servo_close+0x3c>
 8005adc:	480d      	ldr	r0, [pc, #52]	@ (8005b14 <Servo_close+0x40>)
 8005ade:	f7ff f9fd 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo1, 40);
 8005ae2:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8005b18 <Servo_close+0x44>
 8005ae6:	480d      	ldr	r0, [pc, #52]	@ (8005b1c <Servo_close+0x48>)
 8005ae8:	f7ff f9f8 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo2, 35);
 8005aec:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8005b20 <Servo_close+0x4c>
 8005af0:	480c      	ldr	r0, [pc, #48]	@ (8005b24 <Servo_close+0x50>)
 8005af2:	f7ff f9f3 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo3, 38);
 8005af6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8005b28 <Servo_close+0x54>
 8005afa:	480c      	ldr	r0, [pc, #48]	@ (8005b2c <Servo_close+0x58>)
 8005afc:	f7ff f9ee 	bl	8004edc <Servo_SetAngle>
    Servo_SetAngle(&servo4, 48);
 8005b00:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8005b30 <Servo_close+0x5c>
 8005b04:	480b      	ldr	r0, [pc, #44]	@ (8005b34 <Servo_close+0x60>)
 8005b06:	f7ff f9e9 	bl	8004edc <Servo_SetAngle>
}
 8005b0a:	bf00      	nop
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	42d20000 	.word	0x42d20000
 8005b14:	20000478 	.word	0x20000478
 8005b18:	42200000 	.word	0x42200000
 8005b1c:	20000428 	.word	0x20000428
 8005b20:	420c0000 	.word	0x420c0000
 8005b24:	2000043c 	.word	0x2000043c
 8005b28:	42180000 	.word	0x42180000
 8005b2c:	20000450 	.word	0x20000450
 8005b30:	42400000 	.word	0x42400000
 8005b34:	20000464 	.word	0x20000464

08005b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b38:	b590      	push	{r4, r7, lr}
 8005b3a:	b0d1      	sub	sp, #324	@ 0x144
 8005b3c:	af04      	add	r7, sp, #16
  HAL_Init();
 8005b3e:	f007 fa13 	bl	800cf68 <HAL_Init>
  SystemClock_Config();
 8005b42:	f002 f855 	bl	8007bf0 <SystemClock_Config>

  MX_GPIO_Init();
 8005b46:	f7ff fa31 	bl	8004fac <MX_GPIO_Init>
  MX_I2C1_Init();
 8005b4a:	f7ff fbb1 	bl	80052b0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8005b4e:	f7ff fbdd 	bl	800530c <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8005b52:	f006 ff99 	bl	800ca88 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8005b56:	f005 fe2f 	bl	800b7b8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8005b5a:	f005 fed9 	bl	800b910 <MX_TIM3_Init>
  MX_TIM4_Init();
 8005b5e:	f005 ff2b 	bl	800b9b8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8005b62:	f005 ff7d 	bl	800ba60 <MX_TIM5_Init>
  MX_TIM8_Init();
 8005b66:	f006 f849 	bl	800bbfc <MX_TIM8_Init>
  MX_TIM9_Init();
 8005b6a:	f006 f8f5 	bl	800bd58 <MX_TIM9_Init>
  MX_TIM10_Init();
 8005b6e:	f006 f961 	bl	800be34 <MX_TIM10_Init>
  MX_TIM2_Init();
 8005b72:	f005 fe79 	bl	800b868 <MX_TIM2_Init>
  MX_UART4_Init();
 8005b76:	f006 ff33 	bl	800c9e0 <MX_UART4_Init>
  MX_UART5_Init();
 8005b7a:	f006 ff5b 	bl	800ca34 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8005b7e:	f006 ffad 	bl	800cadc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005b82:	f006 ffd5 	bl	800cb30 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8005b86:	f006 fffd 	bl	800cb84 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8005b8a:	f006 f801 	bl	800bb90 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8005b8e:	f7ff f917 	bl	8004dc0 <OLED_Init>

  HAL_UART_Receive_IT(&huart1, aRxBuffer, 1); 
 8005b92:	2201      	movs	r2, #1
 8005b94:	49b1      	ldr	r1, [pc, #708]	@ (8005e5c <main+0x324>)
 8005b96:	48b2      	ldr	r0, [pc, #712]	@ (8005e60 <main+0x328>)
 8005b98:	f00a fd2f 	bl	80105fa <HAL_UART_Receive_IT>
  
  HAL_TIM_Base_Start(&htim6);
 8005b9c:	48b1      	ldr	r0, [pc, #708]	@ (8005e64 <main+0x32c>)
 8005b9e:	f009 fc1f 	bl	800f3e0 <HAL_TIM_Base_Start>
  Reset_Timer();  // 重置计时器
 8005ba2:	f002 fa81 	bl	80080a8 <Reset_Timer>

  // 初始化MPU6050 DMP
  int mpu_result;
  int retry_count = 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  uint32_t timeout_start = HAL_GetTick();
 8005bac:	f007 fa42 	bl	800d034 <HAL_GetTick>
 8005bb0:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c

  do {
      mpu_result = MPU6050_DMP_Init();
 8005bb4:	f7fe fe00 	bl	80047b8 <MPU6050_DMP_Init>
 8005bb8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
      if (mpu_result != 0) {
 8005bbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d02f      	beq.n	8005c24 <main+0xec>
          retry_count++;
 8005bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005bc8:	3301      	adds	r3, #1
 8005bca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
          if (retry_count % 10 == 0) {
 8005bce:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8005bd2:	4ba5      	ldr	r3, [pc, #660]	@ (8005e68 <main+0x330>)
 8005bd4:	fb83 2301 	smull	r2, r3, r3, r1
 8005bd8:	109a      	asrs	r2, r3, #2
 8005bda:	17cb      	asrs	r3, r1, #31
 8005bdc:	1ad2      	subs	r2, r2, r3
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	1aca      	subs	r2, r1, r3
 8005be8:	2a00      	cmp	r2, #0
 8005bea:	d10b      	bne.n	8005c04 <main+0xcc>
              OLED_ShowString(1,1,"INITING...");
 8005bec:	4a9f      	ldr	r2, [pc, #636]	@ (8005e6c <main+0x334>)
 8005bee:	2101      	movs	r1, #1
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f7ff f869 	bl	8004cc8 <OLED_ShowString>
              OLED_ShowNum(1,11,retry_count,2);
 8005bf6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	210b      	movs	r1, #11
 8005bfe:	2001      	movs	r0, #1
 8005c00:	f7ff f8a0 	bl	8004d44 <OLED_ShowNum>
          }
          // 添加超时检查
          if (HAL_GetTick() - timeout_start > 5000) { // 5秒超时
 8005c04:	f007 fa16 	bl	800d034 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d905      	bls.n	8005c24 <main+0xec>
              OLED_ShowString(1,1,"MPU INIT FAIL");
 8005c18:	4a95      	ldr	r2, [pc, #596]	@ (8005e70 <main+0x338>)
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	f7ff f853 	bl	8004cc8 <OLED_ShowString>
              break;
 8005c22:	e003      	b.n	8005c2c <main+0xf4>
          }
      }
  } while (mpu_result != 0);
 8005c24:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1c3      	bne.n	8005bb4 <main+0x7c>

  OLED_Clear();
 8005c2c:	f7fe ff85 	bl	8004b3a <OLED_Clear>
  OLED_ShowString(1,1,"SUCCESS");
 8005c30:	4a90      	ldr	r2, [pc, #576]	@ (8005e74 <main+0x33c>)
 8005c32:	2101      	movs	r1, #1
 8005c34:	2001      	movs	r0, #1
 8005c36:	f7ff f847 	bl	8004cc8 <OLED_ShowString>
  // 显示初始化耗时
  uint32_t init_time = HAL_GetTick() - timeout_start;
 8005c3a:	f007 f9fb 	bl	800d034 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  OLED_ShowNum(2,1,init_time,4);
 8005c4a:	2304      	movs	r3, #4
 8005c4c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005c50:	2101      	movs	r1, #1
 8005c52:	2002      	movs	r0, #2
 8005c54:	f7ff f876 	bl	8004d44 <OLED_ShowNum>
  OLED_ShowString(2,5,"ms");
 8005c58:	4a87      	ldr	r2, [pc, #540]	@ (8005e78 <main+0x340>)
 8005c5a:	2105      	movs	r1, #5
 8005c5c:	2002      	movs	r0, #2
 8005c5e:	f7ff f833 	bl	8004cc8 <OLED_ShowString>

  // 初始化US100传感器顺时针1234
  US100_Init(&us100_sensor2, &huart5);
 8005c62:	4986      	ldr	r1, [pc, #536]	@ (8005e7c <main+0x344>)
 8005c64:	4886      	ldr	r0, [pc, #536]	@ (8005e80 <main+0x348>)
 8005c66:	f006 fc4f 	bl	800c508 <US100_Init>
  US100_Init(&us100_sensor1, &huart4);
 8005c6a:	4986      	ldr	r1, [pc, #536]	@ (8005e84 <main+0x34c>)
 8005c6c:	4886      	ldr	r0, [pc, #536]	@ (8005e88 <main+0x350>)
 8005c6e:	f006 fc4b 	bl	800c508 <US100_Init>
  US100_Init(&us100_sensor4, &huart3);
 8005c72:	4986      	ldr	r1, [pc, #536]	@ (8005e8c <main+0x354>)
 8005c74:	4886      	ldr	r0, [pc, #536]	@ (8005e90 <main+0x358>)
 8005c76:	f006 fc47 	bl	800c508 <US100_Init>
  US100_Init(&us100_sensor3, &huart2);
 8005c7a:	4986      	ldr	r1, [pc, #536]	@ (8005e94 <main+0x35c>)
 8005c7c:	4886      	ldr	r0, [pc, #536]	@ (8005e98 <main+0x360>)
 8005c7e:	f006 fc43 	bl	800c508 <US100_Init>
  
  // 开始第一次测量
  US100_StartMeasurement(&us100_sensor1);
 8005c82:	4881      	ldr	r0, [pc, #516]	@ (8005e88 <main+0x350>)
 8005c84:	f006 fc96 	bl	800c5b4 <US100_StartMeasurement>
  US100_StartMeasurement(&us100_sensor2);
 8005c88:	487d      	ldr	r0, [pc, #500]	@ (8005e80 <main+0x348>)
 8005c8a:	f006 fc93 	bl	800c5b4 <US100_StartMeasurement>
  US100_StartMeasurement(&us100_sensor3);
 8005c8e:	4882      	ldr	r0, [pc, #520]	@ (8005e98 <main+0x360>)
 8005c90:	f006 fc90 	bl	800c5b4 <US100_StartMeasurement>
  US100_StartMeasurement(&us100_sensor4);
 8005c94:	487e      	ldr	r0, [pc, #504]	@ (8005e90 <main+0x358>)
 8005c96:	f006 fc8d 	bl	800c5b4 <US100_StartMeasurement>

  Motor_Init(MOTOR_1,
 8005c9a:	4b80      	ldr	r3, [pc, #512]	@ (8005e9c <main+0x364>)
 8005c9c:	9303      	str	r3, [sp, #12]
 8005c9e:	2380      	movs	r3, #128	@ 0x80
 8005ca0:	9302      	str	r3, [sp, #8]
 8005ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ea0 <main+0x368>)
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	4b7e      	ldr	r3, [pc, #504]	@ (8005ea4 <main+0x36c>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	497e      	ldr	r1, [pc, #504]	@ (8005ea8 <main+0x370>)
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	f002 f80d 	bl	8007cd0 <Motor_Init>
            &htim5, TIM_CHANNEL_1,
            M1_IN1_GPIO_Port, M1_IN1_Pin,
            M1_IN2_GPIO_Port, M1_IN2_Pin,
            &htim1);

  Motor_Init(MOTOR_2,
 8005cb6:	4b7d      	ldr	r3, [pc, #500]	@ (8005eac <main+0x374>)
 8005cb8:	9303      	str	r3, [sp, #12]
 8005cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cbe:	9302      	str	r3, [sp, #8]
 8005cc0:	4b7b      	ldr	r3, [pc, #492]	@ (8005eb0 <main+0x378>)
 8005cc2:	9301      	str	r3, [sp, #4]
 8005cc4:	2308      	movs	r3, #8
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	4b76      	ldr	r3, [pc, #472]	@ (8005ea4 <main+0x36c>)
 8005cca:	2204      	movs	r2, #4
 8005ccc:	4976      	ldr	r1, [pc, #472]	@ (8005ea8 <main+0x370>)
 8005cce:	2001      	movs	r0, #1
 8005cd0:	f001 fffe 	bl	8007cd0 <Motor_Init>
            &htim5, TIM_CHANNEL_2,
            M2_IN1_GPIO_Port, M2_IN1_Pin,
            M2_IN2_GPIO_Port, M2_IN2_Pin,
            &htim4);

  Motor_Init(MOTOR_3,
 8005cd4:	4b77      	ldr	r3, [pc, #476]	@ (8005eb4 <main+0x37c>)
 8005cd6:	9303      	str	r3, [sp, #12]
 8005cd8:	2302      	movs	r3, #2
 8005cda:	9302      	str	r3, [sp, #8]
 8005cdc:	4b76      	ldr	r3, [pc, #472]	@ (8005eb8 <main+0x380>)
 8005cde:	9301      	str	r3, [sp, #4]
 8005ce0:	2320      	movs	r3, #32
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	4b75      	ldr	r3, [pc, #468]	@ (8005ebc <main+0x384>)
 8005ce6:	2208      	movs	r2, #8
 8005ce8:	496f      	ldr	r1, [pc, #444]	@ (8005ea8 <main+0x370>)
 8005cea:	2002      	movs	r0, #2
 8005cec:	f001 fff0 	bl	8007cd0 <Motor_Init>
            &htim5, TIM_CHANNEL_3,
            M3_IN1_GPIO_Port, M3_IN1_Pin,
            M3_IN2_GPIO_Port, M3_IN2_Pin,
            &htim3);

  Motor_Init(MOTOR_4,
 8005cf0:	4b73      	ldr	r3, [pc, #460]	@ (8005ec0 <main+0x388>)
 8005cf2:	9303      	str	r3, [sp, #12]
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	9302      	str	r3, [sp, #8]
 8005cf8:	4b70      	ldr	r3, [pc, #448]	@ (8005ebc <main+0x384>)
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	4b6e      	ldr	r3, [pc, #440]	@ (8005ebc <main+0x384>)
 8005d02:	220c      	movs	r2, #12
 8005d04:	4968      	ldr	r1, [pc, #416]	@ (8005ea8 <main+0x370>)
 8005d06:	2003      	movs	r0, #3
 8005d08:	f001 ffe2 	bl	8007cd0 <Motor_Init>
            &htim5, TIM_CHANNEL_4,
            M4_IN1_GPIO_Port, M4_IN1_Pin,
            M4_IN2_GPIO_Port, M4_IN2_Pin,
            &htim2);

  Servo_Init(&servo1, &htim8, TIM_CHANNEL_1, Servo_1_GPIO_Port, Servo_1_Pin);
 8005d0c:	2340      	movs	r3, #64	@ 0x40
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	4b6a      	ldr	r3, [pc, #424]	@ (8005ebc <main+0x384>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	496b      	ldr	r1, [pc, #428]	@ (8005ec4 <main+0x38c>)
 8005d16:	486c      	ldr	r0, [pc, #432]	@ (8005ec8 <main+0x390>)
 8005d18:	f7ff f8a8 	bl	8004e6c <Servo_Init>
  Servo_Init(&servo2, &htim8, TIM_CHANNEL_2, Servo_2_GPIO_Port, Servo_2_Pin);
 8005d1c:	2380      	movs	r3, #128	@ 0x80
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	4b66      	ldr	r3, [pc, #408]	@ (8005ebc <main+0x384>)
 8005d22:	2204      	movs	r2, #4
 8005d24:	4967      	ldr	r1, [pc, #412]	@ (8005ec4 <main+0x38c>)
 8005d26:	4869      	ldr	r0, [pc, #420]	@ (8005ecc <main+0x394>)
 8005d28:	f7ff f8a0 	bl	8004e6c <Servo_Init>
  Servo_Init(&servo3, &htim9, TIM_CHANNEL_1, Servo_3_GPIO_Port, Servo_3_Pin);
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	4b5b      	ldr	r3, [pc, #364]	@ (8005ea0 <main+0x368>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	4966      	ldr	r1, [pc, #408]	@ (8005ed0 <main+0x398>)
 8005d36:	4867      	ldr	r0, [pc, #412]	@ (8005ed4 <main+0x39c>)
 8005d38:	f7ff f898 	bl	8004e6c <Servo_Init>
  Servo_Init(&servo4, &htim9, TIM_CHANNEL_2, Servo_4_GPIO_Port, Servo_4_Pin);
 8005d3c:	2340      	movs	r3, #64	@ 0x40
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	4b57      	ldr	r3, [pc, #348]	@ (8005ea0 <main+0x368>)
 8005d42:	2204      	movs	r2, #4
 8005d44:	4962      	ldr	r1, [pc, #392]	@ (8005ed0 <main+0x398>)
 8005d46:	4864      	ldr	r0, [pc, #400]	@ (8005ed8 <main+0x3a0>)
 8005d48:	f7ff f890 	bl	8004e6c <Servo_Init>
  Servo_Init(&servo5, &htim10, TIM_CHANNEL_1, Servo_5_GPIO_Port, Servo_5_Pin);
 8005d4c:	2340      	movs	r3, #64	@ 0x40
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	4b62      	ldr	r3, [pc, #392]	@ (8005edc <main+0x3a4>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	4962      	ldr	r1, [pc, #392]	@ (8005ee0 <main+0x3a8>)
 8005d56:	4863      	ldr	r0, [pc, #396]	@ (8005ee4 <main+0x3ac>)
 8005d58:	f7ff f888 	bl	8004e6c <Servo_Init>

  Servo_close();
 8005d5c:	f7ff feba 	bl	8005ad4 <Servo_close>

  prev_time = HAL_GetTick();
 8005d60:	f007 f968 	bl	800d034 <HAL_GetTick>
 8005d64:	4603      	mov	r3, r0
 8005d66:	4a60      	ldr	r2, [pc, #384]	@ (8005ee8 <main+0x3b0>)
 8005d68:	6013      	str	r3, [r2, #0]

  /*------------------------------------MPU6050 DMP执行部分-------------------------------------*/
    OLED_ShowString(3,1,"yaw:");
 8005d6a:	4a60      	ldr	r2, [pc, #384]	@ (8005eec <main+0x3b4>)
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	2003      	movs	r0, #3
 8005d70:	f7fe ffaa 	bl	8004cc8 <OLED_ShowString>
    OLED_ShowString(3,9,"TAR:");
 8005d74:	4a5e      	ldr	r2, [pc, #376]	@ (8005ef0 <main+0x3b8>)
 8005d76:	2109      	movs	r1, #9
 8005d78:	2003      	movs	r0, #3
 8005d7a:	f7fe ffa5 	bl	8004cc8 <OLED_ShowString>

  // 设置目标偏航角为当前偏航角
  target_yaw = yaw;
 8005d7e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ef4 <main+0x3bc>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a5d      	ldr	r2, [pc, #372]	@ (8005ef8 <main+0x3c0>)
 8005d84:	6013      	str	r3, [r2, #0]
  
  // 重置PID控制器，避免积分项累积
  PID_Reset(&pid_yaw);
 8005d86:	485d      	ldr	r0, [pc, #372]	@ (8005efc <main+0x3c4>)
 8005d88:	f005 fba2 	bl	800b4d0 <PID_Reset>
  PID_Reset(&pid_encoder);
 8005d8c:	485c      	ldr	r0, [pc, #368]	@ (8005f00 <main+0x3c8>)
 8005d8e:	f005 fb9f 	bl	800b4d0 <PID_Reset>
  OLED_Clear_Part(1,1,5);
 8005d92:	2205      	movs	r2, #5
 8005d94:	2101      	movs	r1, #1
 8005d96:	2001      	movs	r0, #1
 8005d98:	f7fe fef2 	bl	8004b80 <OLED_Clear_Part>

  /* USER CODE END 2 */
  start_start = HAL_GetTick();
 8005d9c:	f007 f94a 	bl	800d034 <HAL_GetTick>
 8005da0:	4603      	mov	r3, r0
 8005da2:	4a58      	ldr	r2, [pc, #352]	@ (8005f04 <main+0x3cc>)
 8005da4:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uint32_t current_time = HAL_GetTick();
 8005da6:	f007 f945 	bl	800d034 <HAL_GetTick>
 8005daa:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    /*------------------------------------------------------------------------舵机执行部分--------------------------------------------------------------------*/
    path = 3;//very important
 8005dae:	4b56      	ldr	r3, [pc, #344]	@ (8005f08 <main+0x3d0>)
 8005db0:	2203      	movs	r2, #3
 8005db2:	601a      	str	r2, [r3, #0]
    static uint8_t last_data = 0;
     static uint32_t last_time = 0;
     static uint32_t servo_delay_start = 0;
     static bool waiting_for_delay = false;
     static uint8_t pending_servo_action = 0;  // 0:无动作, 1:红左, 2:红右, 3:绿左, 4:绿右, 5:关闭
     char opendata = aRxBuffer[0];
 8005db4:	4b29      	ldr	r3, [pc, #164]	@ (8005e5c <main+0x324>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
     OLED_ShowNum(4,13,opendata,3);
 8005dbc:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	210d      	movs	r1, #13
 8005dc4:	2004      	movs	r0, #4
 8005dc6:	f7fe ffbd 	bl	8004d44 <OLED_ShowNum>

     bool can_change_state = (current_time - last_time >= 500);
 8005dca:	4b50      	ldr	r3, [pc, #320]	@ (8005f0c <main+0x3d4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	bf8c      	ite	hi
 8005ddc:	2301      	movhi	r3, #1
 8005dde:	2300      	movls	r3, #0
 8005de0:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

     if(last_data != opendata && can_change_state) {
 8005de4:	4b4a      	ldr	r3, [pc, #296]	@ (8005f10 <main+0x3d8>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8005dec:	429a      	cmp	r2, r3
 8005dee:	f000 80db 	beq.w	8005fa8 <main+0x470>
 8005df2:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 80d6 	beq.w	8005fa8 <main+0x470>
         if(opendata == 'r') {
 8005dfc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8005e00:	2b72      	cmp	r3, #114	@ 0x72
 8005e02:	f040 808d 	bne.w	8005f20 <main+0x3e8>
             if(path == 3 || path == 7 || path == 11) {
 8005e06:	4b40      	ldr	r3, [pc, #256]	@ (8005f08 <main+0x3d0>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d007      	beq.n	8005e1e <main+0x2e6>
 8005e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f08 <main+0x3d0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b07      	cmp	r3, #7
 8005e14:	d003      	beq.n	8005e1e <main+0x2e6>
 8005e16:	4b3c      	ldr	r3, [pc, #240]	@ (8005f08 <main+0x3d0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b0b      	cmp	r3, #11
 8005e1c:	d10a      	bne.n	8005e34 <main+0x2fc>
                 servo_delay_start = current_time;
 8005e1e:	4a3d      	ldr	r2, [pc, #244]	@ (8005f14 <main+0x3dc>)
 8005e20:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005e24:	6013      	str	r3, [r2, #0]
                 waiting_for_delay = true;
 8005e26:	4b3c      	ldr	r3, [pc, #240]	@ (8005f18 <main+0x3e0>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	701a      	strb	r2, [r3, #0]
                 pending_servo_action = 1;  // 红左
 8005e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8005f1c <main+0x3e4>)
 8005e2e:	2201      	movs	r2, #1
 8005e30:	701a      	strb	r2, [r3, #0]
 8005e32:	e0b1      	b.n	8005f98 <main+0x460>
             } else if(path == 5 || path == 9) {
 8005e34:	4b34      	ldr	r3, [pc, #208]	@ (8005f08 <main+0x3d0>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b05      	cmp	r3, #5
 8005e3a:	d004      	beq.n	8005e46 <main+0x30e>
 8005e3c:	4b32      	ldr	r3, [pc, #200]	@ (8005f08 <main+0x3d0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b09      	cmp	r3, #9
 8005e42:	f040 80a9 	bne.w	8005f98 <main+0x460>
                 servo_delay_start = current_time;
 8005e46:	4a33      	ldr	r2, [pc, #204]	@ (8005f14 <main+0x3dc>)
 8005e48:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005e4c:	6013      	str	r3, [r2, #0]
                 waiting_for_delay = true;
 8005e4e:	4b32      	ldr	r3, [pc, #200]	@ (8005f18 <main+0x3e0>)
 8005e50:	2201      	movs	r2, #1
 8005e52:	701a      	strb	r2, [r3, #0]
                 pending_servo_action = 2;  // 红右
 8005e54:	4b31      	ldr	r3, [pc, #196]	@ (8005f1c <main+0x3e4>)
 8005e56:	2202      	movs	r2, #2
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	e09d      	b.n	8005f98 <main+0x460>
 8005e5c:	20000038 	.word	0x20000038
 8005e60:	2000096c 	.word	0x2000096c
 8005e64:	20000788 	.word	0x20000788
 8005e68:	66666667 	.word	0x66666667
 8005e6c:	08014cf8 	.word	0x08014cf8
 8005e70:	08014d04 	.word	0x08014d04
 8005e74:	08014d14 	.word	0x08014d14
 8005e78:	08014d1c 	.word	0x08014d1c
 8005e7c:	20000924 	.word	0x20000924
 8005e80:	200004c8 	.word	0x200004c8
 8005e84:	200008dc 	.word	0x200008dc
 8005e88:	2000048c 	.word	0x2000048c
 8005e8c:	200009fc 	.word	0x200009fc
 8005e90:	20000540 	.word	0x20000540
 8005e94:	200009b4 	.word	0x200009b4
 8005e98:	20000504 	.word	0x20000504
 8005e9c:	20000620 	.word	0x20000620
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	40021800 	.word	0x40021800
 8005ea8:	20000740 	.word	0x20000740
 8005eac:	200006f8 	.word	0x200006f8
 8005eb0:	40020c00 	.word	0x40020c00
 8005eb4:	200006b0 	.word	0x200006b0
 8005eb8:	40020400 	.word	0x40020400
 8005ebc:	40020800 	.word	0x40020800
 8005ec0:	20000668 	.word	0x20000668
 8005ec4:	200007d0 	.word	0x200007d0
 8005ec8:	20000428 	.word	0x20000428
 8005ecc:	2000043c 	.word	0x2000043c
 8005ed0:	20000818 	.word	0x20000818
 8005ed4:	20000450 	.word	0x20000450
 8005ed8:	20000464 	.word	0x20000464
 8005edc:	40021400 	.word	0x40021400
 8005ee0:	20000860 	.word	0x20000860
 8005ee4:	20000478 	.word	0x20000478
 8005ee8:	20000414 	.word	0x20000414
 8005eec:	08014d20 	.word	0x08014d20
 8005ef0:	08014d28 	.word	0x08014d28
 8005ef4:	200005e8 	.word	0x200005e8
 8005ef8:	200005e4 	.word	0x200005e4
 8005efc:	20000068 	.word	0x20000068
 8005f00:	20000050 	.word	0x20000050
 8005f04:	2000057c 	.word	0x2000057c
 8005f08:	2000041c 	.word	0x2000041c
 8005f0c:	200005a0 	.word	0x200005a0
 8005f10:	200005a4 	.word	0x200005a4
 8005f14:	200005a8 	.word	0x200005a8
 8005f18:	200005ac 	.word	0x200005ac
 8005f1c:	200005ad 	.word	0x200005ad
             }
         } else if(opendata == 'g') {
 8005f20:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8005f24:	2b67      	cmp	r3, #103	@ 0x67
 8005f26:	d129      	bne.n	8005f7c <main+0x444>
             if(path == 3 || path == 7 || path == 11) {
 8005f28:	4bac      	ldr	r3, [pc, #688]	@ (80061dc <main+0x6a4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d007      	beq.n	8005f40 <main+0x408>
 8005f30:	4baa      	ldr	r3, [pc, #680]	@ (80061dc <main+0x6a4>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b07      	cmp	r3, #7
 8005f36:	d003      	beq.n	8005f40 <main+0x408>
 8005f38:	4ba8      	ldr	r3, [pc, #672]	@ (80061dc <main+0x6a4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b0b      	cmp	r3, #11
 8005f3e:	d10a      	bne.n	8005f56 <main+0x41e>
                 servo_delay_start = current_time;
 8005f40:	4aa7      	ldr	r2, [pc, #668]	@ (80061e0 <main+0x6a8>)
 8005f42:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005f46:	6013      	str	r3, [r2, #0]
                 waiting_for_delay = true;
 8005f48:	4ba6      	ldr	r3, [pc, #664]	@ (80061e4 <main+0x6ac>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	701a      	strb	r2, [r3, #0]
                 pending_servo_action = 3;  // 绿左
 8005f4e:	4ba6      	ldr	r3, [pc, #664]	@ (80061e8 <main+0x6b0>)
 8005f50:	2203      	movs	r2, #3
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	e020      	b.n	8005f98 <main+0x460>
             } else if(path == 5 || path == 9) {
 8005f56:	4ba1      	ldr	r3, [pc, #644]	@ (80061dc <main+0x6a4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b05      	cmp	r3, #5
 8005f5c:	d003      	beq.n	8005f66 <main+0x42e>
 8005f5e:	4b9f      	ldr	r3, [pc, #636]	@ (80061dc <main+0x6a4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b09      	cmp	r3, #9
 8005f64:	d118      	bne.n	8005f98 <main+0x460>
                 servo_delay_start = current_time;
 8005f66:	4a9e      	ldr	r2, [pc, #632]	@ (80061e0 <main+0x6a8>)
 8005f68:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005f6c:	6013      	str	r3, [r2, #0]
                 waiting_for_delay = true;
 8005f6e:	4b9d      	ldr	r3, [pc, #628]	@ (80061e4 <main+0x6ac>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	701a      	strb	r2, [r3, #0]
                 pending_servo_action = 4;  // 绿右
 8005f74:	4b9c      	ldr	r3, [pc, #624]	@ (80061e8 <main+0x6b0>)
 8005f76:	2204      	movs	r2, #4
 8005f78:	701a      	strb	r2, [r3, #0]
 8005f7a:	e00d      	b.n	8005f98 <main+0x460>
             }  
         } else if(opendata == 'n') 
 8005f7c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8005f80:	2b6e      	cmp	r3, #110	@ 0x6e
 8005f82:	d109      	bne.n	8005f98 <main+0x460>
         {
             servo_delay_start = current_time;
 8005f84:	4a96      	ldr	r2, [pc, #600]	@ (80061e0 <main+0x6a8>)
 8005f86:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005f8a:	6013      	str	r3, [r2, #0]
             waiting_for_delay = true;
 8005f8c:	4b95      	ldr	r3, [pc, #596]	@ (80061e4 <main+0x6ac>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	701a      	strb	r2, [r3, #0]
             pending_servo_action = 5;  // 关闭
 8005f92:	4b95      	ldr	r3, [pc, #596]	@ (80061e8 <main+0x6b0>)
 8005f94:	2205      	movs	r2, #5
 8005f96:	701a      	strb	r2, [r3, #0]
         }

         last_data = opendata;
 8005f98:	4a94      	ldr	r2, [pc, #592]	@ (80061ec <main+0x6b4>)
 8005f9a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8005f9e:	7013      	strb	r3, [r2, #0]
         last_time = current_time;
 8005fa0:	4a93      	ldr	r2, [pc, #588]	@ (80061f0 <main+0x6b8>)
 8005fa2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005fa6:	6013      	str	r3, [r2, #0]
     }

     // 处理舵机延迟和动作
     if(waiting_for_delay) {
 8005fa8:	4b8e      	ldr	r3, [pc, #568]	@ (80061e4 <main+0x6ac>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d058      	beq.n	8006062 <main+0x52a>
         uint32_t delay_time;
         switch(pending_servo_action) {
 8005fb0:	4b8d      	ldr	r3, [pc, #564]	@ (80061e8 <main+0x6b0>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d820      	bhi.n	8005ffc <main+0x4c4>
 8005fba:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc0 <main+0x488>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08005fd5 	.word	0x08005fd5
 8005fc4:	08005fdd 	.word	0x08005fdd
 8005fc8:	08005fe5 	.word	0x08005fe5
 8005fcc:	08005fed 	.word	0x08005fed
 8005fd0:	08005ff5 	.word	0x08005ff5
             case 1: delay_time = 0; break;  // 红左
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005fda:	e012      	b.n	8006002 <main+0x4ca>
             case 2: delay_time = 0; break;  // 红右
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005fe2:	e00e      	b.n	8006002 <main+0x4ca>
             case 3: delay_time = 0; break;  // 绿左
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005fea:	e00a      	b.n	8006002 <main+0x4ca>
             case 4: delay_time = 0; break;  // 绿右
 8005fec:	2300      	movs	r3, #0
 8005fee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005ff2:	e006      	b.n	8006002 <main+0x4ca>
             case 5: delay_time = 0; break;  // 关闭
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005ffa:	e002      	b.n	8006002 <main+0x4ca>
             default: delay_time = 0;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
         }

         if(current_time - servo_delay_start >= delay_time) {
 8006002:	4b77      	ldr	r3, [pc, #476]	@ (80061e0 <main+0x6a8>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006010:	429a      	cmp	r2, r3
 8006012:	d826      	bhi.n	8006062 <main+0x52a>
             switch(pending_servo_action) {
 8006014:	4b74      	ldr	r3, [pc, #464]	@ (80061e8 <main+0x6b0>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	3b01      	subs	r3, #1
 800601a:	2b04      	cmp	r3, #4
 800601c:	d81b      	bhi.n	8006056 <main+0x51e>
 800601e:	a201      	add	r2, pc, #4	@ (adr r2, 8006024 <main+0x4ec>)
 8006020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006024:	08006039 	.word	0x08006039
 8006028:	0800603f 	.word	0x0800603f
 800602c:	08006045 	.word	0x08006045
 8006030:	0800604b 	.word	0x0800604b
 8006034:	08006051 	.word	0x08006051
                 case 1: Servo_open_red_left(); break;
 8006038:	f7ff fc90 	bl	800595c <Servo_open_red_left>
 800603c:	e00b      	b.n	8006056 <main+0x51e>
                 case 2: Servo_open_red_right(); break;
 800603e:	f7ff fcbd 	bl	80059bc <Servo_open_red_right>
 8006042:	e008      	b.n	8006056 <main+0x51e>
                 case 3: Servo_open_green_left(); break;
 8006044:	f7ff fcea 	bl	8005a1c <Servo_open_green_left>
 8006048:	e005      	b.n	8006056 <main+0x51e>
                 case 4: Servo_open_green_right(); break;
 800604a:	f7ff fd15 	bl	8005a78 <Servo_open_green_right>
 800604e:	e002      	b.n	8006056 <main+0x51e>
                 case 5: Servo_close(); break;
 8006050:	f7ff fd40 	bl	8005ad4 <Servo_close>
 8006054:	bf00      	nop
             }
             waiting_for_delay = false;
 8006056:	4b63      	ldr	r3, [pc, #396]	@ (80061e4 <main+0x6ac>)
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
             pending_servo_action = 0;
 800605c:	4b62      	ldr	r3, [pc, #392]	@ (80061e8 <main+0x6b0>)
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
         }
     }

    /*----------------------------------------------------------------------------US100传感器执行部分-------------------------------------------------------------*/
    US100_GetAllValidDistances(distances);
 8006062:	4864      	ldr	r0, [pc, #400]	@ (80061f4 <main+0x6bc>)
 8006064:	f006 fbea 	bl	800c83c <US100_GetAllValidDistances>

    if (current_time - oled_prev_time >= 100) {  // 每100ms更新一次显示
 8006068:	4b63      	ldr	r3, [pc, #396]	@ (80061f8 <main+0x6c0>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b63      	cmp	r3, #99	@ 0x63
 8006074:	d949      	bls.n	800610a <main+0x5d2>
        // 显示原始距离和滤波后的距离
        OLED_ShowString(1, 1, "Flt:");
 8006076:	4a61      	ldr	r2, [pc, #388]	@ (80061fc <main+0x6c4>)
 8006078:	2101      	movs	r1, #1
 800607a:	2001      	movs	r0, #1
 800607c:	f7fe fe24 	bl	8004cc8 <OLED_ShowString>
        OLED_ShowString(1, 9, "Flt:");
 8006080:	4a5e      	ldr	r2, [pc, #376]	@ (80061fc <main+0x6c4>)
 8006082:	2109      	movs	r1, #9
 8006084:	2001      	movs	r0, #1
 8006086:	f7fe fe1f 	bl	8004cc8 <OLED_ShowString>
        OLED_ShowString(2, 1, "Flt:");
 800608a:	4a5c      	ldr	r2, [pc, #368]	@ (80061fc <main+0x6c4>)
 800608c:	2101      	movs	r1, #1
 800608e:	2002      	movs	r0, #2
 8006090:	f7fe fe1a 	bl	8004cc8 <OLED_ShowString>
        OLED_ShowString(2, 9, "Flt:");
 8006094:	4a59      	ldr	r2, [pc, #356]	@ (80061fc <main+0x6c4>)
 8006096:	2109      	movs	r1, #9
 8006098:	2002      	movs	r0, #2
 800609a:	f7fe fe15 	bl	8004cc8 <OLED_ShowString>
        
        // 显示第一个传感器的原始值和滤波值
        OLED_ShowNum(1, 5, distances[0], 4);
 800609e:	4b55      	ldr	r3, [pc, #340]	@ (80061f4 <main+0x6bc>)
 80060a0:	edd3 7a00 	vldr	s15, [r3]
 80060a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060a8:	2304      	movs	r3, #4
 80060aa:	ee17 2a90 	vmov	r2, s15
 80060ae:	2105      	movs	r1, #5
 80060b0:	2001      	movs	r0, #1
 80060b2:	f7fe fe47 	bl	8004d44 <OLED_ShowNum>
        OLED_ShowNum(1, 13, fabs(distances[1]), 4);
 80060b6:	4b4f      	ldr	r3, [pc, #316]	@ (80061f4 <main+0x6bc>)
 80060b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80060bc:	eef0 7ae7 	vabs.f32	s15, s15
 80060c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060c4:	2304      	movs	r3, #4
 80060c6:	ee17 2a90 	vmov	r2, s15
 80060ca:	210d      	movs	r1, #13
 80060cc:	2001      	movs	r0, #1
 80060ce:	f7fe fe39 	bl	8004d44 <OLED_ShowNum>
        
        // 显示第二个传感器的原始值和滤波值
        OLED_ShowNum(2, 5, distances[2], 4);
 80060d2:	4b48      	ldr	r3, [pc, #288]	@ (80061f4 <main+0x6bc>)
 80060d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80060d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060dc:	2304      	movs	r3, #4
 80060de:	ee17 2a90 	vmov	r2, s15
 80060e2:	2105      	movs	r1, #5
 80060e4:	2002      	movs	r0, #2
 80060e6:	f7fe fe2d 	bl	8004d44 <OLED_ShowNum>
        OLED_ShowNum(2, 13, distances[3], 4);
 80060ea:	4b42      	ldr	r3, [pc, #264]	@ (80061f4 <main+0x6bc>)
 80060ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80060f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060f4:	2304      	movs	r3, #4
 80060f6:	ee17 2a90 	vmov	r2, s15
 80060fa:	210d      	movs	r1, #13
 80060fc:	2002      	movs	r0, #2
 80060fe:	f7fe fe21 	bl	8004d44 <OLED_ShowNum>
        
        oled_prev_time = current_time;
 8006102:	4a3d      	ldr	r2, [pc, #244]	@ (80061f8 <main+0x6c0>)
 8006104:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006108:	6013      	str	r3, [r2, #0]
    }

    if(delay_flag) 
 800610a:	4b3d      	ldr	r3, [pc, #244]	@ (8006200 <main+0x6c8>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d006      	beq.n	8006120 <main+0x5e8>
    {
      HAL_Delay(500);
 8006112:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006116:	f006 ff99 	bl	800d04c <HAL_Delay>
      delay_flag=false;
 800611a:	4b39      	ldr	r3, [pc, #228]	@ (8006200 <main+0x6c8>)
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]
    }
    /*---------------------------------------------------------------电机执行部分---------------------------------------------------------------------------------*/

    OLED_ShowChar(3,5,yaw >= 0 ? '+' : '-');
 8006120:	4b38      	ldr	r3, [pc, #224]	@ (8006204 <main+0x6cc>)
 8006122:	edd3 7a00 	vldr	s15, [r3]
 8006126:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800612a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612e:	db01      	blt.n	8006134 <main+0x5fc>
 8006130:	232b      	movs	r3, #43	@ 0x2b
 8006132:	e000      	b.n	8006136 <main+0x5fe>
 8006134:	232d      	movs	r3, #45	@ 0x2d
 8006136:	461a      	mov	r2, r3
 8006138:	2105      	movs	r1, #5
 800613a:	2003      	movs	r0, #3
 800613c:	f7fe fd6c 	bl	8004c18 <OLED_ShowChar>
    OLED_ShowNum(3,6,fabsf(yaw),3);
 8006140:	4b30      	ldr	r3, [pc, #192]	@ (8006204 <main+0x6cc>)
 8006142:	edd3 7a00 	vldr	s15, [r3]
 8006146:	eef0 7ae7 	vabs.f32	s15, s15
 800614a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800614e:	2303      	movs	r3, #3
 8006150:	ee17 2a90 	vmov	r2, s15
 8006154:	2106      	movs	r1, #6
 8006156:	2003      	movs	r0, #3
 8006158:	f7fe fdf4 	bl	8004d44 <OLED_ShowNum>
    OLED_ShowChar(3,13,target_yaw >= 0 ? '+' : '-'); 
 800615c:	4b2a      	ldr	r3, [pc, #168]	@ (8006208 <main+0x6d0>)
 800615e:	edd3 7a00 	vldr	s15, [r3]
 8006162:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616a:	db01      	blt.n	8006170 <main+0x638>
 800616c:	232b      	movs	r3, #43	@ 0x2b
 800616e:	e000      	b.n	8006172 <main+0x63a>
 8006170:	232d      	movs	r3, #45	@ 0x2d
 8006172:	461a      	mov	r2, r3
 8006174:	210d      	movs	r1, #13
 8006176:	2003      	movs	r0, #3
 8006178:	f7fe fd4e 	bl	8004c18 <OLED_ShowChar>
    OLED_ShowNum(3,14,fabsf(target_yaw),3);
 800617c:	4b22      	ldr	r3, [pc, #136]	@ (8006208 <main+0x6d0>)
 800617e:	edd3 7a00 	vldr	s15, [r3]
 8006182:	eef0 7ae7 	vabs.f32	s15, s15
 8006186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800618a:	2303      	movs	r3, #3
 800618c:	ee17 2a90 	vmov	r2, s15
 8006190:	210e      	movs	r1, #14
 8006192:	2003      	movs	r0, #3
 8006194:	f7fe fdd6 	bl	8004d44 <OLED_ShowNum>

     switch (path) {
 8006198:	4b10      	ldr	r3, [pc, #64]	@ (80061dc <main+0x6a4>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b0c      	cmp	r3, #12
 800619e:	f63f ae02 	bhi.w	8005da6 <main+0x26e>
 80061a2:	a201      	add	r2, pc, #4	@ (adr r2, 80061a8 <main+0x670>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	0800620d 	.word	0x0800620d
 80061ac:	08006531 	.word	0x08006531
 80061b0:	08006791 	.word	0x08006791
 80061b4:	08006943 	.word	0x08006943
 80061b8:	08006b45 	.word	0x08006b45
 80061bc:	08006cb7 	.word	0x08006cb7
 80061c0:	08006f25 	.word	0x08006f25
 80061c4:	0800709f 	.word	0x0800709f
 80061c8:	0800731d 	.word	0x0800731d
 80061cc:	080074dd 	.word	0x080074dd
 80061d0:	08007703 	.word	0x08007703
 80061d4:	080078cb 	.word	0x080078cb
 80061d8:	08007b3d 	.word	0x08007b3d
 80061dc:	2000041c 	.word	0x2000041c
 80061e0:	200005a8 	.word	0x200005a8
 80061e4:	200005ac 	.word	0x200005ac
 80061e8:	200005ad 	.word	0x200005ad
 80061ec:	200005a4 	.word	0x200005a4
 80061f0:	200005a0 	.word	0x200005a0
 80061f4:	2000003c 	.word	0x2000003c
 80061f8:	20000418 	.word	0x20000418
 80061fc:	08014d30 	.word	0x08014d30
 8006200:	2000004d 	.word	0x2000004d
 8006204:	200005e8 	.word	0x200005e8
 8006208:	200005e4 	.word	0x200005e4
       case 0: {
         // 参数定义
         const float TARGET_DISTANCE = 156.0f;   // 调试，这个变量用于检测最终的目标距离
 800620c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006210:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006214:	4abc      	ldr	r2, [pc, #752]	@ (8006508 <main+0x9d0>)
 8006216:	601a      	str	r2, [r3, #0]
         const float DECEL_RANGE = 600.0f;      // 调试，这个变量用于设置减速区间范围
 8006218:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800621c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006220:	4aba      	ldr	r2, [pc, #744]	@ (800650c <main+0x9d4>)
 8006222:	601a      	str	r2, [r3, #0]
         const uint16_t ADJUST_DISTANCE = 250;  // 调试，这个变量用于在距离最终目标距离较近时的取消调校
 8006224:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006228:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 800622c:	22fa      	movs	r2, #250	@ 0xfa
 800622e:	801a      	strh	r2, [r3, #0]
         const uint8_t MIN_SPEED = 13;          // 调试，这个变量用于设置接近目标时的速度最小速度（靠近时）
 8006230:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006234:	f2a3 1317 	subw	r3, r3, #279	@ 0x117
 8006238:	220d      	movs	r2, #13
 800623a:	701a      	strb	r2, [r3, #0]
         const uint8_t MAX_SPEED = 60;          // 调试，这个变量用于设置离目标较远时的速度
 800623c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006240:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006244:	223c      	movs	r2, #60	@ 0x3c
 8006246:	701a      	strb	r2, [r3, #0]
         const uint16_t DELAY_ADJUST = 8000;    // 调试，这个变量用于路径转换后的校准延时时间，需要确保进入垄
 8006248:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800624c:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8006250:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8006254:	801a      	strh	r2, [r3, #0]
         float current_distance = distances[1]; // 前面的超声波
 8006256:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800625a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800625e:	4aac      	ldr	r2, [pc, #688]	@ (8006510 <main+0x9d8>)
 8006260:	6852      	ldr	r2, [r2, #4]
 8006262:	601a      	str	r2, [r3, #0]
         if(time_enterpath_case0 == 0) {
 8006264:	4bab      	ldr	r3, [pc, #684]	@ (8006514 <main+0x9dc>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d104      	bne.n	8006276 <main+0x73e>
             time_enterpath_case0 = HAL_GetTick();
 800626c:	f006 fee2 	bl	800d034 <HAL_GetTick>
 8006270:	4603      	mov	r3, r0
 8006272:	4aa8      	ldr	r2, [pc, #672]	@ (8006514 <main+0x9dc>)
 8006274:	6013      	str	r3, [r2, #0]
         }
    
         // 速度计算逻辑
         uint8_t motor_speed = 0;  // 默认最大速度
 8006276:	2300      	movs	r3, #0
 8006278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        //  motor_speed = MAX_SPEED;
        if (current_distance <= TARGET_DISTANCE && current_distance != 0 && (HAL_GetTick() - time_enterpath_case0 >= 8000)) {
 800627c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006280:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8006284:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006288:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800628c:	ed92 7a00 	vldr	s14, [r2]
 8006290:	edd3 7a00 	vldr	s15, [r3]
 8006294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800629c:	d83a      	bhi.n	8006314 <main+0x7dc>
 800629e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80062a6:	edd3 7a00 	vldr	s15, [r3]
 80062aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80062ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b2:	d02f      	beq.n	8006314 <main+0x7dc>
 80062b4:	f006 febe 	bl	800d034 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	4b96      	ldr	r3, [pc, #600]	@ (8006514 <main+0x9dc>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80062c4:	d326      	bcc.n	8006314 <main+0x7dc>
             motor_speed = MIN_SPEED;
 80062c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062ca:	f2a3 1317 	subw	r3, r3, #279	@ 0x117
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            Motor_SetSpeed(MOTOR_1,0);
 80062d4:	2100      	movs	r1, #0
 80062d6:	2000      	movs	r0, #0
 80062d8:	f001 fd76 	bl	8007dc8 <Motor_SetSpeed>
            Motor_SetSpeed(MOTOR_2,0);
 80062dc:	2100      	movs	r1, #0
 80062de:	2001      	movs	r0, #1
 80062e0:	f001 fd72 	bl	8007dc8 <Motor_SetSpeed>
            Motor_SetSpeed(MOTOR_3,0);
 80062e4:	2100      	movs	r1, #0
 80062e6:	2002      	movs	r0, #2
 80062e8:	f001 fd6e 	bl	8007dc8 <Motor_SetSpeed>
            Motor_SetSpeed(MOTOR_4,0);
 80062ec:	2100      	movs	r1, #0
 80062ee:	2003      	movs	r0, #3
 80062f0:	f001 fd6a 	bl	8007dc8 <Motor_SetSpeed>
             Rotate_90_Degrees(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, true);
 80062f4:	2301      	movs	r3, #1
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	2303      	movs	r3, #3
 80062fa:	2202      	movs	r2, #2
 80062fc:	2101      	movs	r1, #1
 80062fe:	2000      	movs	r0, #0
 8006300:	f7ff f98a 	bl	8005618 <Rotate_90_Degrees>
             path += 1;
 8006304:	4b84      	ldr	r3, [pc, #528]	@ (8006518 <main+0x9e0>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3301      	adds	r3, #1
 800630a:	4a83      	ldr	r2, [pc, #524]	@ (8006518 <main+0x9e0>)
 800630c:	6013      	str	r3, [r2, #0]
             PID_ResetAll(); // 重置所有PID控制器
 800630e:	f7ff f96b 	bl	80055e8 <PID_ResetAll>
 8006312:	e098      	b.n	8006446 <main+0x90e>
            //  break;
         }
        else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE) /* && mean[1] <= (TARGET_DISTANCE + DECEL_RANGE) */) {
 8006314:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006318:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800631c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006320:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006324:	ed92 7a00 	vldr	s14, [r2]
 8006328:	edd3 7a00 	vldr	s15, [r3]
 800632c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006330:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006334:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006338:	ed93 7a00 	vldr	s14, [r3]
 800633c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006344:	d878      	bhi.n	8006438 <main+0x900>
               // 区域2：减速区间（70~170mm）
               // 距离越近速度越慢，线性变化：170mm->60, 70mm->10
               float distance_from_target = current_distance - TARGET_DISTANCE;
 8006346:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800634a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800634e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006352:	f5a2 7190 	sub.w	r1, r2, #288	@ 0x120
 8006356:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800635a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800635e:	ed91 7a00 	vldr	s14, [r1]
 8006362:	edd2 7a00 	vldr	s15, [r2]
 8006366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800636a:	edc3 7a00 	vstr	s15, [r3]
               float ratio = (distance_from_target / DECEL_RANGE) * 1.45;
 800636e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006372:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8006376:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800637a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800637e:	ed92 7a00 	vldr	s14, [r2]
 8006382:	edd3 7a00 	vldr	s15, [r3]
 8006386:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800638a:	ee16 0a90 	vmov	r0, s13
 800638e:	f7fa f8db 	bl	8000548 <__aeabi_f2d>
 8006392:	a35b      	add	r3, pc, #364	@ (adr r3, 8006500 <main+0x9c8>)
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f7fa f92e 	bl	80005f8 <__aeabi_dmul>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 80063a4:	f5a1 7494 	sub.w	r4, r1, #296	@ 0x128
 80063a8:	4610      	mov	r0, r2
 80063aa:	4619      	mov	r1, r3
 80063ac:	f7fa fc1c 	bl	8000be8 <__aeabi_d2f>
 80063b0:	4603      	mov	r3, r0
 80063b2:	6023      	str	r3, [r4, #0]
               motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 80063b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063b8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80063bc:	781a      	ldrb	r2, [r3, #0]
 80063be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063c2:	f2a3 1317 	subw	r3, r3, #279	@ 0x117
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80063da:	edd3 7a00 	vldr	s15, [r3]
 80063de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80063ea:	793b      	ldrb	r3, [r7, #4]
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063f2:	f2a3 1317 	subw	r3, r3, #279	@ 0x117
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	4413      	add	r3, r2
 80063fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
               motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 80063fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006402:	f2a3 1317 	subw	r3, r3, #279	@ 0x117
 8006406:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d30b      	bcc.n	8006428 <main+0x8f0>
 8006410:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006414:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006418:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	4293      	cmp	r3, r2
 8006420:	bf28      	it	cs
 8006422:	4613      	movcs	r3, r2
 8006424:	b2db      	uxtb	r3, r3
 8006426:	e004      	b.n	8006432 <main+0x8fa>
 8006428:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800642c:	f2a3 1317 	subw	r3, r3, #279	@ 0x117
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 8006436:	e006      	b.n	8006446 <main+0x90e>
           }
         else {
             // 区域1：全速区间（>170mm）
             motor_speed = MAX_SPEED;
 8006438:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800643c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
         }
    
         // 执行带平滑过渡的电机控制
         static uint8_t last_speed = 0;
         motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8006446:	4b35      	ldr	r3, [pc, #212]	@ (800651c <main+0x9e4>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 800644e:	4611      	mov	r1, r2
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff f87b 	bl	800554c <smooth_speed_transition>
 8006456:	4603      	mov	r3, r0
 8006458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
         last_speed = motor_speed;
 800645c:	4a2f      	ldr	r2, [pc, #188]	@ (800651c <main+0x9e4>)
 800645e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006462:	7013      	strb	r3, [r2, #0]

        // OLED_ShowNum(3,14,fabsf(motor_speed),3);
        Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8006464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006468:	b21b      	sxth	r3, r3
 800646a:	4a2d      	ldr	r2, [pc, #180]	@ (8006520 <main+0x9e8>)
 800646c:	9202      	str	r2, [sp, #8]
 800646e:	4a2d      	ldr	r2, [pc, #180]	@ (8006524 <main+0x9ec>)
 8006470:	9201      	str	r2, [sp, #4]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	2303      	movs	r3, #3
 8006476:	2202      	movs	r2, #2
 8006478:	2101      	movs	r1, #1
 800647a:	2000      	movs	r0, #0
 800647c:	f001 fe24 	bl	80080c8 <Motor_Straight>
        
         // 使用左侧电机调整
         if(HAL_GetTick() - time_enterpath_case0 >= DELAY_ADJUST && current_distance >= ADJUST_DISTANCE ){
 8006480:	f006 fdd8 	bl	800d034 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	4b23      	ldr	r3, [pc, #140]	@ (8006514 <main+0x9dc>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	1ad2      	subs	r2, r2, r3
 800648c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006490:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d320      	bcc.n	80064dc <main+0x9a4>
 800649a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800649e:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	ee07 3a90 	vmov	s15, r3
 80064a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064b0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80064b4:	ed93 7a00 	vldr	s14, [r3]
 80064b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c0:	db0c      	blt.n	80064dc <main+0x9a4>
             Adjust_Left_Motors_By_Distance(MOTOR_1, MOTOR_3, MOTOR_2, MOTOR_4, raw_distances[0], 50.0f);
 80064c2:	4b19      	ldr	r3, [pc, #100]	@ (8006528 <main+0x9f0>)
 80064c4:	edd3 7a00 	vldr	s15, [r3]
 80064c8:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800652c <main+0x9f4>
 80064cc:	eeb0 0a67 	vmov.f32	s0, s15
 80064d0:	2303      	movs	r3, #3
 80064d2:	2201      	movs	r2, #1
 80064d4:	2102      	movs	r1, #2
 80064d6:	2000      	movs	r0, #0
 80064d8:	f002 f808 	bl	80084ec <Adjust_Left_Motors_By_Distance>
         }
         OLED_ShowNum(4, 1, path, 2);
 80064dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006518 <main+0x9e0>)
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	2302      	movs	r3, #2
 80064e2:	2101      	movs	r1, #1
 80064e4:	2004      	movs	r0, #4
 80064e6:	f7fe fc2d 	bl	8004d44 <OLED_ShowNum>
         OLED_ShowNum(4, 4, motor_speed, 2);
 80064ea:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 80064ee:	2302      	movs	r3, #2
 80064f0:	2104      	movs	r1, #4
 80064f2:	2004      	movs	r0, #4
 80064f4:	f7fe fc26 	bl	8004d44 <OLED_ShowNum>
         break;
 80064f8:	f001 bb6b 	b.w	8007bd2 <main+0x209a>
 80064fc:	f3af 8000 	nop.w
 8006500:	33333333 	.word	0x33333333
 8006504:	3ff73333 	.word	0x3ff73333
 8006508:	431c0000 	.word	0x431c0000
 800650c:	44160000 	.word	0x44160000
 8006510:	2000003c 	.word	0x2000003c
 8006514:	20000580 	.word	0x20000580
 8006518:	2000041c 	.word	0x2000041c
 800651c:	200005ae 	.word	0x200005ae
 8006520:	200005e4 	.word	0x200005e4
 8006524:	200005e8 	.word	0x200005e8
 8006528:	200000cc 	.word	0x200000cc
 800652c:	42480000 	.word	0x42480000
       
       }
       case 1: {
         // 参数定义
         const float TARGET_DISTANCE = 156.0f;   // 调试，这个变量用于检测最终的目标距离
 8006530:	4bb9      	ldr	r3, [pc, #740]	@ (8006818 <main+0xce0>)
 8006532:	63fb      	str	r3, [r7, #60]	@ 0x3c
         const float DECEL_RANGE = 600.0f;      // 调试，这个变量用于设置减速区间范围
 8006534:	4bb9      	ldr	r3, [pc, #740]	@ (800681c <main+0xce4>)
 8006536:	63bb      	str	r3, [r7, #56]	@ 0x38
         const uint16_t ADJUST_DISTANCE = 250;  // 调试，这个变量用于在距离最终目标距离较近时的取消调校
 8006538:	23fa      	movs	r3, #250	@ 0xfa
 800653a:	86fb      	strh	r3, [r7, #54]	@ 0x36
         const uint8_t MIN_SPEED = 16;          // 调试，这个变量用于设置接近目标时的速度最小速度（靠近时）
 800653c:	2310      	movs	r3, #16
 800653e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
         const uint8_t MAX_SPEED = 60;          // 调试，这个变量用于设置离目标较远时的速度
 8006542:	233c      	movs	r3, #60	@ 0x3c
 8006544:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
         const uint16_t DELAY_ADJUST = 2700;    // 调试，这个变量用于路径转换后的校准延时时间，需要确保进入垄
 8006548:	f640 238c 	movw	r3, #2700	@ 0xa8c
 800654c:	867b      	strh	r3, [r7, #50]	@ 0x32
    
         float current_distance = distances[1];
 800654e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006552:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006556:	4ab2      	ldr	r2, [pc, #712]	@ (8006820 <main+0xce8>)
 8006558:	6852      	ldr	r2, [r2, #4]
 800655a:	601a      	str	r2, [r3, #0]
         if(time_enterpath_case1 == 0) {
 800655c:	4bb1      	ldr	r3, [pc, #708]	@ (8006824 <main+0xcec>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d104      	bne.n	800656e <main+0xa36>
             time_enterpath_case1 = HAL_GetTick();
 8006564:	f006 fd66 	bl	800d034 <HAL_GetTick>
 8006568:	4603      	mov	r3, r0
 800656a:	4aae      	ldr	r2, [pc, #696]	@ (8006824 <main+0xcec>)
 800656c:	6013      	str	r3, [r2, #0]
         }
    
         // 速度计算逻辑
         uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 800656e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    
         // 添加延迟判定
         static uint32_t reach_target_time = 0;
         if (reach_target_time == 0) {
 8006576:	4bac      	ldr	r3, [pc, #688]	@ (8006828 <main+0xcf0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <main+0xa50>
             reach_target_time = HAL_GetTick();
 800657e:	f006 fd59 	bl	800d034 <HAL_GetTick>
 8006582:	4603      	mov	r3, r0
 8006584:	4aa8      	ldr	r2, [pc, #672]	@ (8006828 <main+0xcf0>)
 8006586:	6013      	str	r3, [r2, #0]
         }
    
        if (current_distance <= TARGET_DISTANCE) {
 8006588:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800658c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006590:	ed93 7a00 	vldr	s14, [r3]
 8006594:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8006598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800659c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a0:	d82f      	bhi.n	8006602 <main+0xaca>
             // 区域3：到达目标距离（≤130mm）
             motor_speed = MIN_SPEED;
 80065a2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80065a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
             
             // 执行路径切换逻辑
             if(current_distance <= TARGET_DISTANCE && (HAL_GetTick() - reach_target_time >= 3000)) {
 80065aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065b2:	ed93 7a00 	vldr	s14, [r3]
 80065b6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80065ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c2:	f200 8092 	bhi.w	80066ea <main+0xbb2>
 80065c6:	f006 fd35 	bl	800d034 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	4b96      	ldr	r3, [pc, #600]	@ (8006828 <main+0xcf0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80065d6:	4293      	cmp	r3, r2
 80065d8:	f240 8087 	bls.w	80066ea <main+0xbb2>
                Rotate_90_Degrees(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, false );
 80065dc:	2300      	movs	r3, #0
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	2303      	movs	r3, #3
 80065e2:	2202      	movs	r2, #2
 80065e4:	2101      	movs	r1, #1
 80065e6:	2000      	movs	r0, #0
 80065e8:	f7ff f816 	bl	8005618 <Rotate_90_Degrees>
                 path += 1;
 80065ec:	4b8f      	ldr	r3, [pc, #572]	@ (800682c <main+0xcf4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3301      	adds	r3, #1
 80065f2:	4a8e      	ldr	r2, [pc, #568]	@ (800682c <main+0xcf4>)
 80065f4:	6013      	str	r3, [r2, #0]
                 PID_ResetAll(); // 重置所有PID控制器
 80065f6:	f7fe fff7 	bl	80055e8 <PID_ResetAll>
                 reach_target_time = 0; // 重置时间戳
 80065fa:	4b8b      	ldr	r3, [pc, #556]	@ (8006828 <main+0xcf0>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	e073      	b.n	80066ea <main+0xbb2>
             }
         }
         else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8006602:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8006606:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800660a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800660e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006612:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006616:	ed93 7a00 	vldr	s14, [r3]
 800661a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800661e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006622:	d85e      	bhi.n	80066e2 <main+0xbaa>
             // 区域2：减速区间（130~830mm）
             float distance_from_target = current_distance - TARGET_DISTANCE;
 8006624:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006630:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8006634:	ed92 7a00 	vldr	s14, [r2]
 8006638:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800663c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006640:	edc3 7a00 	vstr	s15, [r3]
             float ratio = (distance_from_target / DECEL_RANGE) *1.45;
 8006644:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664c:	ed93 7a00 	vldr	s14, [r3]
 8006650:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8006654:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006658:	ee16 0a90 	vmov	r0, s13
 800665c:	f7f9 ff74 	bl	8000548 <__aeabi_f2d>
 8006660:	a36b      	add	r3, pc, #428	@ (adr r3, 8006810 <main+0xcd8>)
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	f7f9 ffc7 	bl	80005f8 <__aeabi_dmul>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8006672:	f5a1 7486 	sub.w	r4, r1, #268	@ 0x10c
 8006676:	4610      	mov	r0, r2
 8006678:	4619      	mov	r1, r3
 800667a:	f7fa fab5 	bl	8000be8 <__aeabi_d2f>
 800667e:	4603      	mov	r3, r0
 8006680:	6023      	str	r3, [r4, #0]
             motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 8006682:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8006686:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	ee07 3a90 	vmov	s15, r3
 8006690:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006694:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006698:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800669c:	edd3 7a00 	vldr	s15, [r3]
 80066a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80066ac:	793b      	ldrb	r3, [r7, #4]
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80066b4:	4413      	add	r3, r2
 80066b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
             motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 80066ba:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 80066be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d308      	bcc.n	80066d8 <main+0xba0>
 80066c6:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 80066ca:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80066ce:	4293      	cmp	r3, r2
 80066d0:	bf28      	it	cs
 80066d2:	4613      	movcs	r3, r2
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	e001      	b.n	80066dc <main+0xba4>
 80066d8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80066dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80066e0:	e003      	b.n	80066ea <main+0xbb2>
         }
         else {
             // 区域1：全速区间（>830mm）
             motor_speed = MAX_SPEED;
 80066e2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80066e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
         }
    
         // 执行带平滑过渡的电机控制
         static uint8_t last_speed = 0;
         motor_speed = smooth_speed_transition(last_speed, motor_speed);
 80066ea:	4b51      	ldr	r3, [pc, #324]	@ (8006830 <main+0xcf8>)
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 80066f2:	4611      	mov	r1, r2
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fe ff29 	bl	800554c <smooth_speed_transition>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
         last_speed = motor_speed;
 8006700:	4a4b      	ldr	r2, [pc, #300]	@ (8006830 <main+0xcf8>)
 8006702:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006706:	7013      	strb	r3, [r2, #0]
    
         Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8006708:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800670c:	b21b      	sxth	r3, r3
 800670e:	4a49      	ldr	r2, [pc, #292]	@ (8006834 <main+0xcfc>)
 8006710:	9202      	str	r2, [sp, #8]
 8006712:	4a49      	ldr	r2, [pc, #292]	@ (8006838 <main+0xd00>)
 8006714:	9201      	str	r2, [sp, #4]
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	2303      	movs	r3, #3
 800671a:	2202      	movs	r2, #2
 800671c:	2101      	movs	r1, #1
 800671e:	2000      	movs	r0, #0
 8006720:	f001 fcd2 	bl	80080c8 <Motor_Straight>
        
         if(HAL_GetTick() - time_enterpath_case1 >= DELAY_ADJUST && current_distance >= ADJUST_DISTANCE ){
 8006724:	f006 fc86 	bl	800d034 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	4b3e      	ldr	r3, [pc, #248]	@ (8006824 <main+0xcec>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	1ad2      	subs	r2, r2, r3
 8006730:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006732:	429a      	cmp	r2, r3
 8006734:	d31c      	bcc.n	8006770 <main+0xc38>
 8006736:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006738:	ee07 3a90 	vmov	s15, r3
 800673c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006740:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006744:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006748:	ed93 7a00 	vldr	s14, [r3]
 800674c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006754:	db0c      	blt.n	8006770 <main+0xc38>
             Adjust_Left_Motors_By_Distance(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, raw_distances[0], 82.0f);
 8006756:	4b39      	ldr	r3, [pc, #228]	@ (800683c <main+0xd04>)
 8006758:	edd3 7a00 	vldr	s15, [r3]
 800675c:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8006840 <main+0xd08>
 8006760:	eeb0 0a67 	vmov.f32	s0, s15
 8006764:	2302      	movs	r3, #2
 8006766:	2201      	movs	r2, #1
 8006768:	2103      	movs	r1, #3
 800676a:	2000      	movs	r0, #0
 800676c:	f001 febe 	bl	80084ec <Adjust_Left_Motors_By_Distance>
         }
    
         OLED_ShowNum(4, 4, motor_speed, 2);
 8006770:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8006774:	2302      	movs	r3, #2
 8006776:	2104      	movs	r1, #4
 8006778:	2004      	movs	r0, #4
 800677a:	f7fe fae3 	bl	8004d44 <OLED_ShowNum>
         OLED_ShowNum(4, 1, path, 2);
 800677e:	4b2b      	ldr	r3, [pc, #172]	@ (800682c <main+0xcf4>)
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	2302      	movs	r3, #2
 8006784:	2101      	movs	r1, #1
 8006786:	2004      	movs	r0, #4
 8006788:	f7fe fadc 	bl	8004d44 <OLED_ShowNum>
         break;
 800678c:	f001 ba21 	b.w	8007bd2 <main+0x209a>
       }
       case 2: {
         const uint32_t DELAY_ENTER = 200; //调试
 8006790:	23c8      	movs	r3, #200	@ 0xc8
 8006792:	64bb      	str	r3, [r7, #72]	@ 0x48

         if (path_change!=2)
 8006794:	4b2b      	ldr	r3, [pc, #172]	@ (8006844 <main+0xd0c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b02      	cmp	r3, #2
 800679a:	f000 80b2 	beq.w	8006902 <main+0xdca>
         {
           if ((distances[0]>=150 && path_change==0)||(distances[0]<=150 && path_change==1))
 800679e:	4b20      	ldr	r3, [pc, #128]	@ (8006820 <main+0xce8>)
 80067a0:	edd3 7a00 	vldr	s15, [r3]
 80067a4:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006848 <main+0xd10>
 80067a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b0:	db03      	blt.n	80067ba <main+0xc82>
 80067b2:	4b24      	ldr	r3, [pc, #144]	@ (8006844 <main+0xd0c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00d      	beq.n	80067d6 <main+0xc9e>
 80067ba:	4b19      	ldr	r3, [pc, #100]	@ (8006820 <main+0xce8>)
 80067bc:	edd3 7a00 	vldr	s15, [r3]
 80067c0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8006848 <main+0xd10>
 80067c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067cc:	d840      	bhi.n	8006850 <main+0xd18>
 80067ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006844 <main+0xd0c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d13c      	bne.n	8006850 <main+0xd18>
           {
             Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -33, &yaw, &target_yaw);
 80067d6:	4b17      	ldr	r3, [pc, #92]	@ (8006834 <main+0xcfc>)
 80067d8:	9302      	str	r3, [sp, #8]
 80067da:	4b17      	ldr	r3, [pc, #92]	@ (8006838 <main+0xd00>)
 80067dc:	9301      	str	r3, [sp, #4]
 80067de:	f06f 0320 	mvn.w	r3, #32
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	2303      	movs	r3, #3
 80067e6:	2202      	movs	r2, #2
 80067e8:	2101      	movs	r1, #1
 80067ea:	2000      	movs	r0, #0
 80067ec:	f001 fc6c 	bl	80080c8 <Motor_Straight>
             // 使用右侧电机调整
             Adjust_Right_Motors_By_Distance(MOTOR_2, MOTOR_4, MOTOR_1, MOTOR_3, raw_distances[2], 50.0f);
 80067f0:	4b12      	ldr	r3, [pc, #72]	@ (800683c <main+0xd04>)
 80067f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80067f6:	eddf 0a15 	vldr	s1, [pc, #84]	@ 800684c <main+0xd14>
 80067fa:	eeb0 0a67 	vmov.f32	s0, s15
 80067fe:	2302      	movs	r3, #2
 8006800:	2200      	movs	r2, #0
 8006802:	2103      	movs	r1, #3
 8006804:	2001      	movs	r0, #1
 8006806:	f002 fe25 	bl	8009454 <Adjust_Right_Motors_By_Distance>
 800680a:	e091      	b.n	8006930 <main+0xdf8>
 800680c:	f3af 8000 	nop.w
 8006810:	33333333 	.word	0x33333333
 8006814:	3ff73333 	.word	0x3ff73333
 8006818:	431c0000 	.word	0x431c0000
 800681c:	44160000 	.word	0x44160000
 8006820:	2000003c 	.word	0x2000003c
 8006824:	20000584 	.word	0x20000584
 8006828:	200005b0 	.word	0x200005b0
 800682c:	2000041c 	.word	0x2000041c
 8006830:	200005b4 	.word	0x200005b4
 8006834:	200005e4 	.word	0x200005e4
 8006838:	200005e8 	.word	0x200005e8
 800683c:	200000cc 	.word	0x200000cc
 8006840:	42a40000 	.word	0x42a40000
 8006844:	20000420 	.word	0x20000420
 8006848:	43160000 	.word	0x43160000
 800684c:	42480000 	.word	0x42480000
           }else if (distances[0]<=180 && path_change==0)
 8006850:	4bad      	ldr	r3, [pc, #692]	@ (8006b08 <main+0xfd0>)
 8006852:	edd3 7a00 	vldr	s15, [r3]
 8006856:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8006b0c <main+0xfd4>
 800685a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800685e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006862:	d821      	bhi.n	80068a8 <main+0xd70>
 8006864:	4baa      	ldr	r3, [pc, #680]	@ (8006b10 <main+0xfd8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d11d      	bne.n	80068a8 <main+0xd70>
           {
             if(flag){
 800686c:	4ba9      	ldr	r3, [pc, #676]	@ (8006b14 <main+0xfdc>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d007      	beq.n	8006884 <main+0xd4c>
               time_start = HAL_GetTick();
 8006874:	f006 fbde 	bl	800d034 <HAL_GetTick>
 8006878:	4603      	mov	r3, r0
 800687a:	4aa7      	ldr	r2, [pc, #668]	@ (8006b18 <main+0xfe0>)
 800687c:	6013      	str	r3, [r2, #0]
               flag = false;
 800687e:	4ba5      	ldr	r3, [pc, #660]	@ (8006b14 <main+0xfdc>)
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
             }
             uint32_t time = HAL_GetTick();
 8006884:	f006 fbd6 	bl	800d034 <HAL_GetTick>
 8006888:	6478      	str	r0, [r7, #68]	@ 0x44
             if(time - time_start >=100){
 800688a:	4ba3      	ldr	r3, [pc, #652]	@ (8006b18 <main+0xfe0>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b63      	cmp	r3, #99	@ 0x63
 8006894:	d94b      	bls.n	800692e <main+0xdf6>
               path_change+=1;
 8006896:	4b9e      	ldr	r3, [pc, #632]	@ (8006b10 <main+0xfd8>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3301      	adds	r3, #1
 800689c:	4a9c      	ldr	r2, [pc, #624]	@ (8006b10 <main+0xfd8>)
 800689e:	6013      	str	r3, [r2, #0]
               flag = true;
 80068a0:	4b9c      	ldr	r3, [pc, #624]	@ (8006b14 <main+0xfdc>)
 80068a2:	2201      	movs	r2, #1
 80068a4:	701a      	strb	r2, [r3, #0]
           {
 80068a6:	e042      	b.n	800692e <main+0xdf6>
             }
           }else if (distances[0]>=180 && path_change==1)
 80068a8:	4b97      	ldr	r3, [pc, #604]	@ (8006b08 <main+0xfd0>)
 80068aa:	edd3 7a00 	vldr	s15, [r3]
 80068ae:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8006b0c <main+0xfd4>
 80068b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ba:	db39      	blt.n	8006930 <main+0xdf8>
 80068bc:	4b94      	ldr	r3, [pc, #592]	@ (8006b10 <main+0xfd8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d135      	bne.n	8006930 <main+0xdf8>
           {
             if(flag){
 80068c4:	4b93      	ldr	r3, [pc, #588]	@ (8006b14 <main+0xfdc>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d007      	beq.n	80068dc <main+0xda4>
               time_start = HAL_GetTick();
 80068cc:	f006 fbb2 	bl	800d034 <HAL_GetTick>
 80068d0:	4603      	mov	r3, r0
 80068d2:	4a91      	ldr	r2, [pc, #580]	@ (8006b18 <main+0xfe0>)
 80068d4:	6013      	str	r3, [r2, #0]
               flag = false;
 80068d6:	4b8f      	ldr	r3, [pc, #572]	@ (8006b14 <main+0xfdc>)
 80068d8:	2200      	movs	r2, #0
 80068da:	701a      	strb	r2, [r3, #0]
             }
             uint32_t time = HAL_GetTick();
 80068dc:	f006 fbaa 	bl	800d034 <HAL_GetTick>
 80068e0:	6438      	str	r0, [r7, #64]	@ 0x40
             if(time - time_start >= DELAY_ENTER ){
 80068e2:	4b8d      	ldr	r3, [pc, #564]	@ (8006b18 <main+0xfe0>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d81f      	bhi.n	8006930 <main+0xdf8>
               path_change+=1;
 80068f0:	4b87      	ldr	r3, [pc, #540]	@ (8006b10 <main+0xfd8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3301      	adds	r3, #1
 80068f6:	4a86      	ldr	r2, [pc, #536]	@ (8006b10 <main+0xfd8>)
 80068f8:	6013      	str	r3, [r2, #0]
               flag = true;
 80068fa:	4b86      	ldr	r3, [pc, #536]	@ (8006b14 <main+0xfdc>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	e016      	b.n	8006930 <main+0xdf8>
             }
           }
         }else{
           // 直接执行旋转和路径切换
           Rotate_90_Degrees(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, true );
 8006902:	2301      	movs	r3, #1
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	2303      	movs	r3, #3
 8006908:	2202      	movs	r2, #2
 800690a:	2101      	movs	r1, #1
 800690c:	2000      	movs	r0, #0
 800690e:	f7fe fe83 	bl	8005618 <Rotate_90_Degrees>
           path_change = 0;
 8006912:	4b7f      	ldr	r3, [pc, #508]	@ (8006b10 <main+0xfd8>)
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
           flag = true;
 8006918:	4b7e      	ldr	r3, [pc, #504]	@ (8006b14 <main+0xfdc>)
 800691a:	2201      	movs	r2, #1
 800691c:	701a      	strb	r2, [r3, #0]
           path +=1;
 800691e:	4b7f      	ldr	r3, [pc, #508]	@ (8006b1c <main+0xfe4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3301      	adds	r3, #1
 8006924:	4a7d      	ldr	r2, [pc, #500]	@ (8006b1c <main+0xfe4>)
 8006926:	6013      	str	r3, [r2, #0]
           PID_ResetAll();
 8006928:	f7fe fe5e 	bl	80055e8 <PID_ResetAll>
 800692c:	e000      	b.n	8006930 <main+0xdf8>
           {
 800692e:	bf00      	nop
         }
         OLED_ShowNum(4, 1, path, 2);
 8006930:	4b7a      	ldr	r3, [pc, #488]	@ (8006b1c <main+0xfe4>)
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	2302      	movs	r3, #2
 8006936:	2101      	movs	r1, #1
 8006938:	2004      	movs	r0, #4
 800693a:	f7fe fa03 	bl	8004d44 <OLED_ShowNum>
         break;
 800693e:	f001 b948 	b.w	8007bd2 <main+0x209a>
       }

       case 3: {
         // 参数定义
         const float TARGET_DISTANCE = 156.0f;   // 调试，这个变量用于检测最终的目标距离
 8006942:	4b77      	ldr	r3, [pc, #476]	@ (8006b20 <main+0xfe8>)
 8006944:	667b      	str	r3, [r7, #100]	@ 0x64
         const float DECEL_RANGE = 600.0f;      // 调试，这个变量用于设置减速区间范围
 8006946:	4b77      	ldr	r3, [pc, #476]	@ (8006b24 <main+0xfec>)
 8006948:	663b      	str	r3, [r7, #96]	@ 0x60
         const uint16_t ADJUST_DISTANCE = 250;  // 调试，这个变量用于在距离最终目标距离较近时的取消调校
 800694a:	23fa      	movs	r3, #250	@ 0xfa
 800694c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
         const uint8_t MIN_SPEED = 21;          // 调试，这个变量用于设置接近目标时的速度最小速度（靠近时）
 8006950:	2315      	movs	r3, #21
 8006952:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
         const uint8_t MAX_SPEED = 60;          // 调试，这个变量用于设置离目标较远时的速度
 8006956:	233c      	movs	r3, #60	@ 0x3c
 8006958:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
         const uint16_t DELAY_ADJUST = 2700;    // 调试，这个变量用于路径转换后的校准延时时间，需要确保进入垄
 800695c:	f640 238c 	movw	r3, #2700	@ 0xa8c
 8006960:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    
         float current_distance = distances[3];
 8006964:	4b68      	ldr	r3, [pc, #416]	@ (8006b08 <main+0xfd0>)
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	657b      	str	r3, [r7, #84]	@ 0x54
         if(time_enterpath_case3 == 0) {
 800696a:	4b6f      	ldr	r3, [pc, #444]	@ (8006b28 <main+0xff0>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d104      	bne.n	800697c <main+0xe44>
             time_enterpath_case3 = HAL_GetTick();
 8006972:	f006 fb5f 	bl	800d034 <HAL_GetTick>
 8006976:	4603      	mov	r3, r0
 8006978:	4a6b      	ldr	r2, [pc, #428]	@ (8006b28 <main+0xff0>)
 800697a:	6013      	str	r3, [r2, #0]
         }
    
         // 速度计算逻辑
         uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 800697c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8006980:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
    
         // 添加延迟判定
         static uint32_t reach_target_time = 0;
         if (reach_target_time == 0) {
 8006984:	4b69      	ldr	r3, [pc, #420]	@ (8006b2c <main+0xff4>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d104      	bne.n	8006996 <main+0xe5e>
             reach_target_time = HAL_GetTick();
 800698c:	f006 fb52 	bl	800d034 <HAL_GetTick>
 8006990:	4603      	mov	r3, r0
 8006992:	4a66      	ldr	r2, [pc, #408]	@ (8006b2c <main+0xff4>)
 8006994:	6013      	str	r3, [r2, #0]
        //          path += 1;
        //          PID_ResetAll(); // 重置所有PID控制器
        //          reach_target_time = 0; // 重置时间戳
        //      }
        //  }
        /*  else  */if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8006996:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800699a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800699e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069a2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80069a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ae:	d84a      	bhi.n	8006a46 <main+0xf0e>
             // 区域2：减速区间（130~830mm）
             float distance_from_target = current_distance - TARGET_DISTANCE;
 80069b0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80069b4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80069b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069bc:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
             float ratio = (distance_from_target / DECEL_RANGE)*1.45;
 80069c0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80069c4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80069c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80069cc:	ee16 0a90 	vmov	r0, s13
 80069d0:	f7f9 fdba 	bl	8000548 <__aeabi_f2d>
 80069d4:	a34a      	add	r3, pc, #296	@ (adr r3, 8006b00 <main+0xfc8>)
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	f7f9 fe0d 	bl	80005f8 <__aeabi_dmul>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4610      	mov	r0, r2
 80069e4:	4619      	mov	r1, r3
 80069e6:	f7fa f8ff 	bl	8000be8 <__aeabi_d2f>
 80069ea:	4603      	mov	r3, r0
 80069ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
             motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 80069ee:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80069f2:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	ee07 3a90 	vmov	s15, r3
 80069fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a00:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8006a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a0c:	edc7 7a01 	vstr	s15, [r7, #4]
 8006a10:	793b      	ldrb	r3, [r7, #4]
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8006a18:	4413      	add	r3, r2
 8006a1a:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
             motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8006a1e:	f897 2125 	ldrb.w	r2, [r7, #293]	@ 0x125
 8006a22:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d308      	bcc.n	8006a3c <main+0xf04>
 8006a2a:	f897 2125 	ldrb.w	r2, [r7, #293]	@ 0x125
 8006a2e:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8006a32:	4293      	cmp	r3, r2
 8006a34:	bf28      	it	cs
 8006a36:	4613      	movcs	r3, r2
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	e001      	b.n	8006a40 <main+0xf08>
 8006a3c:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8006a40:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
 8006a44:	e003      	b.n	8006a4e <main+0xf16>
         }
         else {
             // 区域1：全速区间（>830mm）
             motor_speed = MAX_SPEED;
 8006a46:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8006a4a:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
         }
    
         // 执行带平滑过渡的电机控制
         static uint8_t last_speed = 0;
         motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8006a4e:	4b38      	ldr	r3, [pc, #224]	@ (8006b30 <main+0xff8>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	f897 2125 	ldrb.w	r2, [r7, #293]	@ 0x125
 8006a56:	4611      	mov	r1, r2
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fe fd77 	bl	800554c <smooth_speed_transition>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
         last_speed = motor_speed;
 8006a64:	4a32      	ldr	r2, [pc, #200]	@ (8006b30 <main+0xff8>)
 8006a66:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 8006a6a:	7013      	strb	r3, [r2, #0]
    
         Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -motor_speed, &yaw, &target_yaw);
 8006a6c:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	425b      	negs	r3, r3
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	b21b      	sxth	r3, r3
 8006a78:	4a2e      	ldr	r2, [pc, #184]	@ (8006b34 <main+0xffc>)
 8006a7a:	9202      	str	r2, [sp, #8]
 8006a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8006b38 <main+0x1000>)
 8006a7e:	9201      	str	r2, [sp, #4]
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	2303      	movs	r3, #3
 8006a84:	2202      	movs	r2, #2
 8006a86:	2101      	movs	r1, #1
 8006a88:	2000      	movs	r0, #0
 8006a8a:	f001 fb1d 	bl	80080c8 <Motor_Straight>
        
         if(HAL_GetTick() - time_enterpath_case3 >= DELAY_ADJUST && current_distance >= ADJUST_DISTANCE ){
 8006a8e:	f006 fad1 	bl	800d034 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	4b24      	ldr	r3, [pc, #144]	@ (8006b28 <main+0xff0>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	1ad2      	subs	r2, r2, r3
 8006a9a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d31e      	bcc.n	8006ae0 <main+0xfa8>
 8006aa2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aae:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8006ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aba:	db11      	blt.n	8006ae0 <main+0xfa8>
             Adjust_Motors_By_Side_Distances(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, raw_distances[0], raw_distances[2], 82.0f);
 8006abc:	4b1f      	ldr	r3, [pc, #124]	@ (8006b3c <main+0x1004>)
 8006abe:	edd3 7a00 	vldr	s15, [r3]
 8006ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8006b3c <main+0x1004>)
 8006ac4:	ed93 7a02 	vldr	s14, [r3, #8]
 8006ac8:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 8006b40 <main+0x1008>
 8006acc:	eef0 0a47 	vmov.f32	s1, s14
 8006ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	2103      	movs	r1, #3
 8006ada:	2000      	movs	r0, #0
 8006adc:	f003 fc6e 	bl	800a3bc <Adjust_Motors_By_Side_Distances>
         }
    
         OLED_ShowNum(4, 4, motor_speed, 2);
 8006ae0:	f897 2125 	ldrb.w	r2, [r7, #293]	@ 0x125
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	2104      	movs	r1, #4
 8006ae8:	2004      	movs	r0, #4
 8006aea:	f7fe f92b 	bl	8004d44 <OLED_ShowNum>
         OLED_ShowNum(4, 1, path, 2);
 8006aee:	4b0b      	ldr	r3, [pc, #44]	@ (8006b1c <main+0xfe4>)
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	2302      	movs	r3, #2
 8006af4:	2101      	movs	r1, #1
 8006af6:	2004      	movs	r0, #4
 8006af8:	f7fe f924 	bl	8004d44 <OLED_ShowNum>
         break;
 8006afc:	f001 b869 	b.w	8007bd2 <main+0x209a>
 8006b00:	33333333 	.word	0x33333333
 8006b04:	3ff73333 	.word	0x3ff73333
 8006b08:	2000003c 	.word	0x2000003c
 8006b0c:	43340000 	.word	0x43340000
 8006b10:	20000420 	.word	0x20000420
 8006b14:	2000004c 	.word	0x2000004c
 8006b18:	20000424 	.word	0x20000424
 8006b1c:	2000041c 	.word	0x2000041c
 8006b20:	431c0000 	.word	0x431c0000
 8006b24:	44160000 	.word	0x44160000
 8006b28:	20000588 	.word	0x20000588
 8006b2c:	200005b8 	.word	0x200005b8
 8006b30:	200005bc 	.word	0x200005bc
 8006b34:	200005e4 	.word	0x200005e4
 8006b38:	200005e8 	.word	0x200005e8
 8006b3c:	200000cc 	.word	0x200000cc
 8006b40:	42a40000 	.word	0x42a40000
       }

       case 4: {
         const uint32_t DELAY_ENTER = 280; //调试
 8006b44:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8006b48:	673b      	str	r3, [r7, #112]	@ 0x70

         if (path_change!=2)
 8006b4a:	4bb9      	ldr	r3, [pc, #740]	@ (8006e30 <main+0x12f8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	f000 8091 	beq.w	8006c76 <main+0x113e>
         {
           if ((distances[2]>=150 && path_change==0)||(distances[2]<=150 && path_change==1))
 8006b54:	4bb7      	ldr	r3, [pc, #732]	@ (8006e34 <main+0x12fc>)
 8006b56:	edd3 7a02 	vldr	s15, [r3, #8]
 8006b5a:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 8006e38 <main+0x1300>
 8006b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b66:	db03      	blt.n	8006b70 <main+0x1038>
 8006b68:	4bb1      	ldr	r3, [pc, #708]	@ (8006e30 <main+0x12f8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00d      	beq.n	8006b8c <main+0x1054>
 8006b70:	4bb0      	ldr	r3, [pc, #704]	@ (8006e34 <main+0x12fc>)
 8006b72:	edd3 7a02 	vldr	s15, [r3, #8]
 8006b76:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8006e38 <main+0x1300>
 8006b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b82:	d81e      	bhi.n	8006bc2 <main+0x108a>
 8006b84:	4baa      	ldr	r3, [pc, #680]	@ (8006e30 <main+0x12f8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d11a      	bne.n	8006bc2 <main+0x108a>
           {
             Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8006b8c:	4bab      	ldr	r3, [pc, #684]	@ (8006e3c <main+0x1304>)
 8006b8e:	9302      	str	r3, [sp, #8]
 8006b90:	4bab      	ldr	r3, [pc, #684]	@ (8006e40 <main+0x1308>)
 8006b92:	9301      	str	r3, [sp, #4]
 8006b94:	f06f 031d 	mvn.w	r3, #29
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	f001 fa91 	bl	80080c8 <Motor_Straight>
             // 使用左侧电机调整
             Adjust_Left_Motors_By_Distance(MOTOR_1, MOTOR_3, MOTOR_2, MOTOR_4, raw_distances[0], 50.0f);
 8006ba6:	4ba7      	ldr	r3, [pc, #668]	@ (8006e44 <main+0x130c>)
 8006ba8:	edd3 7a00 	vldr	s15, [r3]
 8006bac:	eddf 0aa6 	vldr	s1, [pc, #664]	@ 8006e48 <main+0x1310>
 8006bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	2102      	movs	r1, #2
 8006bba:	2000      	movs	r0, #0
 8006bbc:	f001 fc96 	bl	80084ec <Adjust_Left_Motors_By_Distance>
 8006bc0:	e070      	b.n	8006ca4 <main+0x116c>
           }else if (distances[2]<=170 && path_change==0)
 8006bc2:	4b9c      	ldr	r3, [pc, #624]	@ (8006e34 <main+0x12fc>)
 8006bc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8006bc8:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8006e4c <main+0x1314>
 8006bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd4:	d822      	bhi.n	8006c1c <main+0x10e4>
 8006bd6:	4b96      	ldr	r3, [pc, #600]	@ (8006e30 <main+0x12f8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d11e      	bne.n	8006c1c <main+0x10e4>
           {
             if(flag){
 8006bde:	4b9c      	ldr	r3, [pc, #624]	@ (8006e50 <main+0x1318>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d007      	beq.n	8006bf6 <main+0x10be>
               time_start = HAL_GetTick();
 8006be6:	f006 fa25 	bl	800d034 <HAL_GetTick>
 8006bea:	4603      	mov	r3, r0
 8006bec:	4a99      	ldr	r2, [pc, #612]	@ (8006e54 <main+0x131c>)
 8006bee:	6013      	str	r3, [r2, #0]
               flag = false;
 8006bf0:	4b97      	ldr	r3, [pc, #604]	@ (8006e50 <main+0x1318>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	701a      	strb	r2, [r3, #0]
             }
             uint32_t time = HAL_GetTick();
 8006bf6:	f006 fa1d 	bl	800d034 <HAL_GetTick>
 8006bfa:	66f8      	str	r0, [r7, #108]	@ 0x6c
             if(time - time_start >=500){
 8006bfc:	4b95      	ldr	r3, [pc, #596]	@ (8006e54 <main+0x131c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006c08:	d34b      	bcc.n	8006ca2 <main+0x116a>
               path_change+=1;
 8006c0a:	4b89      	ldr	r3, [pc, #548]	@ (8006e30 <main+0x12f8>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	4a87      	ldr	r2, [pc, #540]	@ (8006e30 <main+0x12f8>)
 8006c12:	6013      	str	r3, [r2, #0]
               flag = true;
 8006c14:	4b8e      	ldr	r3, [pc, #568]	@ (8006e50 <main+0x1318>)
 8006c16:	2201      	movs	r2, #1
 8006c18:	701a      	strb	r2, [r3, #0]
           {
 8006c1a:	e042      	b.n	8006ca2 <main+0x116a>
             }
           }else if (distances[2]>=180 && path_change==1)
 8006c1c:	4b85      	ldr	r3, [pc, #532]	@ (8006e34 <main+0x12fc>)
 8006c1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006c22:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8006e58 <main+0x1320>
 8006c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c2e:	db39      	blt.n	8006ca4 <main+0x116c>
 8006c30:	4b7f      	ldr	r3, [pc, #508]	@ (8006e30 <main+0x12f8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d135      	bne.n	8006ca4 <main+0x116c>
           {
             if(flag){
 8006c38:	4b85      	ldr	r3, [pc, #532]	@ (8006e50 <main+0x1318>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <main+0x1118>
               time_start = HAL_GetTick();
 8006c40:	f006 f9f8 	bl	800d034 <HAL_GetTick>
 8006c44:	4603      	mov	r3, r0
 8006c46:	4a83      	ldr	r2, [pc, #524]	@ (8006e54 <main+0x131c>)
 8006c48:	6013      	str	r3, [r2, #0]
               flag = false;
 8006c4a:	4b81      	ldr	r3, [pc, #516]	@ (8006e50 <main+0x1318>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	701a      	strb	r2, [r3, #0]
             }
             uint32_t time = HAL_GetTick();
 8006c50:	f006 f9f0 	bl	800d034 <HAL_GetTick>
 8006c54:	66b8      	str	r0, [r7, #104]	@ 0x68
             if(time - time_start >= DELAY_ENTER ){
 8006c56:	4b7f      	ldr	r3, [pc, #508]	@ (8006e54 <main+0x131c>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d81f      	bhi.n	8006ca4 <main+0x116c>
               path_change+=1;
 8006c64:	4b72      	ldr	r3, [pc, #456]	@ (8006e30 <main+0x12f8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	4a71      	ldr	r2, [pc, #452]	@ (8006e30 <main+0x12f8>)
 8006c6c:	6013      	str	r3, [r2, #0]
               flag = true;
 8006c6e:	4b78      	ldr	r3, [pc, #480]	@ (8006e50 <main+0x1318>)
 8006c70:	2201      	movs	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	e016      	b.n	8006ca4 <main+0x116c>
             }
           }
         }else{
           // 直接执行旋转和路径切换
           Rotate_90_Degrees(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, true );
 8006c76:	2301      	movs	r3, #1
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	2101      	movs	r1, #1
 8006c80:	2000      	movs	r0, #0
 8006c82:	f7fe fcc9 	bl	8005618 <Rotate_90_Degrees>
           path_change = 0;
 8006c86:	4b6a      	ldr	r3, [pc, #424]	@ (8006e30 <main+0x12f8>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
           flag = true;
 8006c8c:	4b70      	ldr	r3, [pc, #448]	@ (8006e50 <main+0x1318>)
 8006c8e:	2201      	movs	r2, #1
 8006c90:	701a      	strb	r2, [r3, #0]
           path +=1;
 8006c92:	4b72      	ldr	r3, [pc, #456]	@ (8006e5c <main+0x1324>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3301      	adds	r3, #1
 8006c98:	4a70      	ldr	r2, [pc, #448]	@ (8006e5c <main+0x1324>)
 8006c9a:	6013      	str	r3, [r2, #0]
           PID_ResetAll();
 8006c9c:	f7fe fca4 	bl	80055e8 <PID_ResetAll>
 8006ca0:	e000      	b.n	8006ca4 <main+0x116c>
           {
 8006ca2:	bf00      	nop
         }
         OLED_ShowNum(4, 1, path, 2);
 8006ca4:	4b6d      	ldr	r3, [pc, #436]	@ (8006e5c <main+0x1324>)
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	2302      	movs	r3, #2
 8006caa:	2101      	movs	r1, #1
 8006cac:	2004      	movs	r0, #4
 8006cae:	f7fe f849 	bl	8004d44 <OLED_ShowNum>
         break;
 8006cb2:	f000 bf8e 	b.w	8007bd2 <main+0x209a>
       }

       case 5: {
         // 参数定义
         const float TARGET_DISTANCE = 156.0f;   // 调试，这个变量用于检测最终的目标距离
 8006cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8006e60 <main+0x1328>)
 8006cb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
         const float DECEL_RANGE = 600.0f;      // 调试，这个变量用于设置减速区间范围
 8006cbc:	4b69      	ldr	r3, [pc, #420]	@ (8006e64 <main+0x132c>)
 8006cbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
         const uint16_t ADJUST_DISTANCE = 250;  // 调试，这个变量用于在距离最终目标距离较近时的取消调校
 8006cc2:	23fa      	movs	r3, #250	@ 0xfa
 8006cc4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
         const uint8_t MIN_SPEED = 21;          // 调试，这个变量用于设置接近目标时的速度最小速度（靠近时）
 8006cc8:	2315      	movs	r3, #21
 8006cca:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
         const uint8_t MAX_SPEED = 60;          // 调试，这个变量用于设置离目标较远时的速度
 8006cce:	233c      	movs	r3, #60	@ 0x3c
 8006cd0:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
         const uint16_t DELAY_ADJUST = 2700;    // 调试，这个变量用于路径转换后的校准延时时间，需要确保进入垄
 8006cd4:	f640 238c 	movw	r3, #2700	@ 0xa8c
 8006cd8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    
         float current_distance = distances[1];
 8006cdc:	4b55      	ldr	r3, [pc, #340]	@ (8006e34 <main+0x12fc>)
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	67fb      	str	r3, [r7, #124]	@ 0x7c
         if(time_enterpath_case5 == 0) {
 8006ce2:	4b61      	ldr	r3, [pc, #388]	@ (8006e68 <main+0x1330>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <main+0x11bc>
             time_enterpath_case5 = HAL_GetTick();
 8006cea:	f006 f9a3 	bl	800d034 <HAL_GetTick>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	4a5d      	ldr	r2, [pc, #372]	@ (8006e68 <main+0x1330>)
 8006cf2:	6013      	str	r3, [r2, #0]
         }
    
         // 速度计算逻辑
         uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 8006cf4:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8006cf8:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
    
         // 添加延迟判定
         static uint32_t reach_target_time = 0;
         if (reach_target_time == 0) {
 8006cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8006e6c <main+0x1334>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d104      	bne.n	8006d0e <main+0x11d6>
             reach_target_time = HAL_GetTick();
 8006d04:	f006 f996 	bl	800d034 <HAL_GetTick>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	4a58      	ldr	r2, [pc, #352]	@ (8006e6c <main+0x1334>)
 8006d0c:	6013      	str	r3, [r2, #0]
         }
    
         if (current_distance <= TARGET_DISTANCE) {
 8006d0e:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8006d12:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8006d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d1e:	d82a      	bhi.n	8006d76 <main+0x123e>
             // 区域3：到达目标距离（≤130mm）
             motor_speed = MIN_SPEED;
 8006d20:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8006d24:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
             
             // 执行路径切换逻辑
             if(current_distance <= TARGET_DISTANCE && (HAL_GetTick() - reach_target_time >= 1000)) {
 8006d28:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8006d2c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8006d30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d38:	f200 809e 	bhi.w	8006e78 <main+0x1340>
 8006d3c:	f006 f97a 	bl	800d034 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	4b4a      	ldr	r3, [pc, #296]	@ (8006e6c <main+0x1334>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d4c:	f0c0 8094 	bcc.w	8006e78 <main+0x1340>
                Rotate_90_Degrees(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, false );
 8006d50:	2300      	movs	r3, #0
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	2303      	movs	r3, #3
 8006d56:	2202      	movs	r2, #2
 8006d58:	2101      	movs	r1, #1
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	f7fe fc5c 	bl	8005618 <Rotate_90_Degrees>
                 path += 1;
 8006d60:	4b3e      	ldr	r3, [pc, #248]	@ (8006e5c <main+0x1324>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3301      	adds	r3, #1
 8006d66:	4a3d      	ldr	r2, [pc, #244]	@ (8006e5c <main+0x1324>)
 8006d68:	6013      	str	r3, [r2, #0]
                 PID_ResetAll(); // 重置所有PID控制器
 8006d6a:	f7fe fc3d 	bl	80055e8 <PID_ResetAll>
                 reach_target_time = 0; // 重置时间戳
 8006d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8006e6c <main+0x1334>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	e080      	b.n	8006e78 <main+0x1340>
             }
         }
         else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8006d76:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8006d7a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8006d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d82:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8006d86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d8e:	d86f      	bhi.n	8006e70 <main+0x1338>
             // 区域2：减速区间（130~830mm）
             float distance_from_target = current_distance - TARGET_DISTANCE;
 8006d90:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8006d94:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8006d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d9c:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
             float ratio = (distance_from_target / DECEL_RANGE)*1.45;
 8006da0:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8006da4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8006da8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006dac:	ee16 0a90 	vmov	r0, s13
 8006db0:	f7f9 fbca 	bl	8000548 <__aeabi_f2d>
 8006db4:	a31c      	add	r3, pc, #112	@ (adr r3, 8006e28 <main+0x12f0>)
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	f7f9 fc1d 	bl	80005f8 <__aeabi_dmul>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	f7f9 ff0f 	bl	8000be8 <__aeabi_d2f>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	677b      	str	r3, [r7, #116]	@ 0x74
             motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 8006dce:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 8006dd2:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	ee07 3a90 	vmov	s15, r3
 8006ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006de0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8006de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dec:	edc7 7a01 	vstr	s15, [r7, #4]
 8006df0:	793b      	ldrb	r3, [r7, #4]
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8006df8:	4413      	add	r3, r2
 8006dfa:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
             motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8006dfe:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 8006e02:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d308      	bcc.n	8006e1c <main+0x12e4>
 8006e0a:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 8006e0e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8006e12:	4293      	cmp	r3, r2
 8006e14:	bf28      	it	cs
 8006e16:	4613      	movcs	r3, r2
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	e001      	b.n	8006e20 <main+0x12e8>
 8006e1c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8006e20:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
 8006e24:	e028      	b.n	8006e78 <main+0x1340>
 8006e26:	bf00      	nop
 8006e28:	33333333 	.word	0x33333333
 8006e2c:	3ff73333 	.word	0x3ff73333
 8006e30:	20000420 	.word	0x20000420
 8006e34:	2000003c 	.word	0x2000003c
 8006e38:	43160000 	.word	0x43160000
 8006e3c:	200005e4 	.word	0x200005e4
 8006e40:	200005e8 	.word	0x200005e8
 8006e44:	200000cc 	.word	0x200000cc
 8006e48:	42480000 	.word	0x42480000
 8006e4c:	432a0000 	.word	0x432a0000
 8006e50:	2000004c 	.word	0x2000004c
 8006e54:	20000424 	.word	0x20000424
 8006e58:	43340000 	.word	0x43340000
 8006e5c:	2000041c 	.word	0x2000041c
 8006e60:	431c0000 	.word	0x431c0000
 8006e64:	44160000 	.word	0x44160000
 8006e68:	2000058c 	.word	0x2000058c
 8006e6c:	200005c0 	.word	0x200005c0
         }
         else {
             // 区域1：全速区间（>830mm）
             motor_speed = MAX_SPEED;
 8006e70:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8006e74:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
         }
    
         // 执行带平滑过渡的电机控制
         static uint8_t last_speed = 0;
         motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8006e78:	4bba      	ldr	r3, [pc, #744]	@ (8007164 <main+0x162c>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 8006e80:	4611      	mov	r1, r2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe fb62 	bl	800554c <smooth_speed_transition>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
         last_speed = motor_speed;
 8006e8e:	4ab5      	ldr	r2, [pc, #724]	@ (8007164 <main+0x162c>)
 8006e90:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 8006e94:	7013      	strb	r3, [r2, #0]
    
         Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8006e96:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 8006e9a:	b21b      	sxth	r3, r3
 8006e9c:	4ab2      	ldr	r2, [pc, #712]	@ (8007168 <main+0x1630>)
 8006e9e:	9202      	str	r2, [sp, #8]
 8006ea0:	4ab2      	ldr	r2, [pc, #712]	@ (800716c <main+0x1634>)
 8006ea2:	9201      	str	r2, [sp, #4]
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	2101      	movs	r1, #1
 8006eac:	2000      	movs	r0, #0
 8006eae:	f001 f90b 	bl	80080c8 <Motor_Straight>

         if(HAL_GetTick() - time_enterpath_case5 >= DELAY_ADJUST && current_distance >= ADJUST_DISTANCE ){
 8006eb2:	f006 f8bf 	bl	800d034 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	4bad      	ldr	r3, [pc, #692]	@ (8007170 <main+0x1638>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	1ad2      	subs	r2, r2, r3
 8006ebe:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d31e      	bcc.n	8006f04 <main+0x13cc>
 8006ec6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ed2:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8006ed6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ede:	db11      	blt.n	8006f04 <main+0x13cc>
             Adjust_Motors_By_Side_Distances(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, raw_distances[0], raw_distances[2], 82.0f);
 8006ee0:	4ba4      	ldr	r3, [pc, #656]	@ (8007174 <main+0x163c>)
 8006ee2:	edd3 7a00 	vldr	s15, [r3]
 8006ee6:	4ba3      	ldr	r3, [pc, #652]	@ (8007174 <main+0x163c>)
 8006ee8:	ed93 7a02 	vldr	s14, [r3, #8]
 8006eec:	ed9f 1aa2 	vldr	s2, [pc, #648]	@ 8007178 <main+0x1640>
 8006ef0:	eef0 0a47 	vmov.f32	s1, s14
 8006ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ef8:	2302      	movs	r3, #2
 8006efa:	2201      	movs	r2, #1
 8006efc:	2103      	movs	r1, #3
 8006efe:	2000      	movs	r0, #0
 8006f00:	f003 fa5c 	bl	800a3bc <Adjust_Motors_By_Side_Distances>
         }
    
         OLED_ShowNum(4, 4, motor_speed, 2);
 8006f04:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 8006f08:	2302      	movs	r3, #2
 8006f0a:	2104      	movs	r1, #4
 8006f0c:	2004      	movs	r0, #4
 8006f0e:	f7fd ff19 	bl	8004d44 <OLED_ShowNum>
         OLED_ShowNum(4, 1, path, 2);
 8006f12:	4b9a      	ldr	r3, [pc, #616]	@ (800717c <main+0x1644>)
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	2302      	movs	r3, #2
 8006f18:	2101      	movs	r1, #1
 8006f1a:	2004      	movs	r0, #4
 8006f1c:	f7fd ff12 	bl	8004d44 <OLED_ShowNum>
         break;
 8006f20:	f000 be57 	b.w	8007bd2 <main+0x209a>
       }

       case 6: {
         const uint32_t DELAY_ENTER = 200; //调试
 8006f24:	23c8      	movs	r3, #200	@ 0xc8
 8006f26:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

         if (path_change!=2)
 8006f2a:	4b95      	ldr	r3, [pc, #596]	@ (8007180 <main+0x1648>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	f000 8095 	beq.w	800705e <main+0x1526>
         {
           if ((distances[0]>=150 && path_change==0)||(distances[0]<=150 && path_change==1))
 8006f34:	4b93      	ldr	r3, [pc, #588]	@ (8007184 <main+0x164c>)
 8006f36:	edd3 7a00 	vldr	s15, [r3]
 8006f3a:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8007188 <main+0x1650>
 8006f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f46:	db03      	blt.n	8006f50 <main+0x1418>
 8006f48:	4b8d      	ldr	r3, [pc, #564]	@ (8007180 <main+0x1648>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00d      	beq.n	8006f6c <main+0x1434>
 8006f50:	4b8c      	ldr	r3, [pc, #560]	@ (8007184 <main+0x164c>)
 8006f52:	edd3 7a00 	vldr	s15, [r3]
 8006f56:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8007188 <main+0x1650>
 8006f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f62:	d81e      	bhi.n	8006fa2 <main+0x146a>
 8006f64:	4b86      	ldr	r3, [pc, #536]	@ (8007180 <main+0x1648>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d11a      	bne.n	8006fa2 <main+0x146a>
           {
             Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8006f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8007168 <main+0x1630>)
 8006f6e:	9302      	str	r3, [sp, #8]
 8006f70:	4b7e      	ldr	r3, [pc, #504]	@ (800716c <main+0x1634>)
 8006f72:	9301      	str	r3, [sp, #4]
 8006f74:	f06f 031d 	mvn.w	r3, #29
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	2101      	movs	r1, #1
 8006f80:	2000      	movs	r0, #0
 8006f82:	f001 f8a1 	bl	80080c8 <Motor_Straight>
             // 使用右侧电机调整
             Adjust_Right_Motors_By_Distance(MOTOR_2, MOTOR_4, MOTOR_1, MOTOR_3, raw_distances[2], 50.0f);
 8006f86:	4b7b      	ldr	r3, [pc, #492]	@ (8007174 <main+0x163c>)
 8006f88:	edd3 7a02 	vldr	s15, [r3, #8]
 8006f8c:	eddf 0a7f 	vldr	s1, [pc, #508]	@ 800718c <main+0x1654>
 8006f90:	eeb0 0a67 	vmov.f32	s0, s15
 8006f94:	2302      	movs	r3, #2
 8006f96:	2200      	movs	r2, #0
 8006f98:	2103      	movs	r1, #3
 8006f9a:	2001      	movs	r0, #1
 8006f9c:	f002 fa5a 	bl	8009454 <Adjust_Right_Motors_By_Distance>
 8006fa0:	e074      	b.n	800708c <main+0x1554>
           }else if (distances[0]<=190 && path_change==0)
 8006fa2:	4b78      	ldr	r3, [pc, #480]	@ (8007184 <main+0x164c>)
 8006fa4:	edd3 7a00 	vldr	s15, [r3]
 8006fa8:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8007190 <main+0x1658>
 8006fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb4:	d823      	bhi.n	8006ffe <main+0x14c6>
 8006fb6:	4b72      	ldr	r3, [pc, #456]	@ (8007180 <main+0x1648>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d11f      	bne.n	8006ffe <main+0x14c6>
           {
             if(flag){
 8006fbe:	4b75      	ldr	r3, [pc, #468]	@ (8007194 <main+0x165c>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d007      	beq.n	8006fd6 <main+0x149e>
               time_start = HAL_GetTick();
 8006fc6:	f006 f835 	bl	800d034 <HAL_GetTick>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4a72      	ldr	r2, [pc, #456]	@ (8007198 <main+0x1660>)
 8006fce:	6013      	str	r3, [r2, #0]
               flag = false;
 8006fd0:	4b70      	ldr	r3, [pc, #448]	@ (8007194 <main+0x165c>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	701a      	strb	r2, [r3, #0]
             }
             uint32_t time = HAL_GetTick();
 8006fd6:	f006 f82d 	bl	800d034 <HAL_GetTick>
 8006fda:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
             if(time - time_start >=100){
 8006fde:	4b6e      	ldr	r3, [pc, #440]	@ (8007198 <main+0x1660>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b63      	cmp	r3, #99	@ 0x63
 8006fea:	d94e      	bls.n	800708a <main+0x1552>
               path_change+=1;
 8006fec:	4b64      	ldr	r3, [pc, #400]	@ (8007180 <main+0x1648>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	4a63      	ldr	r2, [pc, #396]	@ (8007180 <main+0x1648>)
 8006ff4:	6013      	str	r3, [r2, #0]
               flag = true;
 8006ff6:	4b67      	ldr	r3, [pc, #412]	@ (8007194 <main+0x165c>)
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	701a      	strb	r2, [r3, #0]
           {
 8006ffc:	e045      	b.n	800708a <main+0x1552>
             }
           }else if (distances[0]>=180 && path_change==1)
 8006ffe:	4b61      	ldr	r3, [pc, #388]	@ (8007184 <main+0x164c>)
 8007000:	edd3 7a00 	vldr	s15, [r3]
 8007004:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800719c <main+0x1664>
 8007008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800700c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007010:	db3c      	blt.n	800708c <main+0x1554>
 8007012:	4b5b      	ldr	r3, [pc, #364]	@ (8007180 <main+0x1648>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d138      	bne.n	800708c <main+0x1554>
           {
             if(flag){
 800701a:	4b5e      	ldr	r3, [pc, #376]	@ (8007194 <main+0x165c>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d007      	beq.n	8007032 <main+0x14fa>
               time_start = HAL_GetTick();
 8007022:	f006 f807 	bl	800d034 <HAL_GetTick>
 8007026:	4603      	mov	r3, r0
 8007028:	4a5b      	ldr	r2, [pc, #364]	@ (8007198 <main+0x1660>)
 800702a:	6013      	str	r3, [r2, #0]
               flag = false;
 800702c:	4b59      	ldr	r3, [pc, #356]	@ (8007194 <main+0x165c>)
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]
             }
             uint32_t time = HAL_GetTick();
 8007032:	f005 ffff 	bl	800d034 <HAL_GetTick>
 8007036:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
             if(time - time_start >= DELAY_ENTER ){
 800703a:	4b57      	ldr	r3, [pc, #348]	@ (8007198 <main+0x1660>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007048:	429a      	cmp	r2, r3
 800704a:	d81f      	bhi.n	800708c <main+0x1554>
               path_change+=1;
 800704c:	4b4c      	ldr	r3, [pc, #304]	@ (8007180 <main+0x1648>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3301      	adds	r3, #1
 8007052:	4a4b      	ldr	r2, [pc, #300]	@ (8007180 <main+0x1648>)
 8007054:	6013      	str	r3, [r2, #0]
               flag = true;
 8007056:	4b4f      	ldr	r3, [pc, #316]	@ (8007194 <main+0x165c>)
 8007058:	2201      	movs	r2, #1
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	e016      	b.n	800708c <main+0x1554>
             }
           }
         }else{
           // 直接执行旋转和路径切换
           Rotate_90_Degrees(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, true );
 800705e:	2301      	movs	r3, #1
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	2303      	movs	r3, #3
 8007064:	2202      	movs	r2, #2
 8007066:	2101      	movs	r1, #1
 8007068:	2000      	movs	r0, #0
 800706a:	f7fe fad5 	bl	8005618 <Rotate_90_Degrees>
           path_change = 0;
 800706e:	4b44      	ldr	r3, [pc, #272]	@ (8007180 <main+0x1648>)
 8007070:	2200      	movs	r2, #0
 8007072:	601a      	str	r2, [r3, #0]
           flag = true;
 8007074:	4b47      	ldr	r3, [pc, #284]	@ (8007194 <main+0x165c>)
 8007076:	2201      	movs	r2, #1
 8007078:	701a      	strb	r2, [r3, #0]
           path +=1;
 800707a:	4b40      	ldr	r3, [pc, #256]	@ (800717c <main+0x1644>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3301      	adds	r3, #1
 8007080:	4a3e      	ldr	r2, [pc, #248]	@ (800717c <main+0x1644>)
 8007082:	6013      	str	r3, [r2, #0]
           PID_ResetAll();
 8007084:	f7fe fab0 	bl	80055e8 <PID_ResetAll>
 8007088:	e000      	b.n	800708c <main+0x1554>
           {
 800708a:	bf00      	nop
         }
         OLED_ShowNum(4, 1, path, 2);
 800708c:	4b3b      	ldr	r3, [pc, #236]	@ (800717c <main+0x1644>)
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	2302      	movs	r3, #2
 8007092:	2101      	movs	r1, #1
 8007094:	2004      	movs	r0, #4
 8007096:	f7fd fe55 	bl	8004d44 <OLED_ShowNum>
         break;
 800709a:	f000 bd9a 	b.w	8007bd2 <main+0x209a>
       }

       case 7: {
         // 参数定义
         const float TARGET_DISTANCE = 156.0f;   // 调试，这个变量用于检测最终的目标距离
 800709e:	4b40      	ldr	r3, [pc, #256]	@ (80071a0 <main+0x1668>)
 80070a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
         const float DECEL_RANGE = 600.0f;      // 调试，这个变量用于设置减速区间范围
 80070a4:	4b3f      	ldr	r3, [pc, #252]	@ (80071a4 <main+0x166c>)
 80070a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
         const uint16_t ADJUST_DISTANCE = 250;  // 调试，这个变量用于在距离最终目标距离较近时的取消调校
 80070aa:	23fa      	movs	r3, #250	@ 0xfa
 80070ac:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
         const uint8_t MIN_SPEED = 21;          // 调试，这个变量用于设置接近目标时的速度最小速度（靠近时）
 80070b0:	2315      	movs	r3, #21
 80070b2:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
         const uint8_t MAX_SPEED = 60;          // 调试，这个变量用于设置离目标较远时的速度
 80070b6:	233c      	movs	r3, #60	@ 0x3c
 80070b8:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
         const uint16_t DELAY_ADJUST = 2700;    // 调试，这个变量用于路径转换后的校准延时时间，需要确保进入垄
 80070bc:	f640 238c 	movw	r3, #2700	@ 0xa8c
 80070c0:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    
         float current_distance = distances[3];
 80070c4:	4b2f      	ldr	r3, [pc, #188]	@ (8007184 <main+0x164c>)
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
         if(time_enterpath_case7 == 0) {
 80070cc:	4b36      	ldr	r3, [pc, #216]	@ (80071a8 <main+0x1670>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d104      	bne.n	80070de <main+0x15a6>
             time_enterpath_case7 = HAL_GetTick();
 80070d4:	f005 ffae 	bl	800d034 <HAL_GetTick>
 80070d8:	4603      	mov	r3, r0
 80070da:	4a33      	ldr	r2, [pc, #204]	@ (80071a8 <main+0x1670>)
 80070dc:	6013      	str	r3, [r2, #0]
         }
    
         // 速度计算逻辑
         uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 80070de:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80070e2:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
    
         // 添加延迟判定
         static uint32_t reach_target_time = 0;
         if (reach_target_time == 0) {
 80070e6:	4b31      	ldr	r3, [pc, #196]	@ (80071ac <main+0x1674>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d104      	bne.n	80070f8 <main+0x15c0>
             reach_target_time = HAL_GetTick();
 80070ee:	f005 ffa1 	bl	800d034 <HAL_GetTick>
 80070f2:	4603      	mov	r3, r0
 80070f4:	4a2d      	ldr	r2, [pc, #180]	@ (80071ac <main+0x1674>)
 80070f6:	6013      	str	r3, [r2, #0]
         }
    
         if (current_distance <= TARGET_DISTANCE) {
 80070f8:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80070fc:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8007100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007108:	d852      	bhi.n	80071b0 <main+0x1678>
             // 区域3：到达目标距离（≤130mm）
             motor_speed = MIN_SPEED;
 800710a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800710e:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
             
             // 执行路径切换逻辑
             if(current_distance <= TARGET_DISTANCE && (HAL_GetTick() - reach_target_time >= 3000)) {
 8007112:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8007116:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800711a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800711e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007122:	f200 80a2 	bhi.w	800726a <main+0x1732>
 8007126:	f005 ff85 	bl	800d034 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	4b1f      	ldr	r3, [pc, #124]	@ (80071ac <main+0x1674>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8007136:	4293      	cmp	r3, r2
 8007138:	f240 8097 	bls.w	800726a <main+0x1732>
                Rotate_90_Degrees(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, false );
 800713c:	2300      	movs	r3, #0
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	2303      	movs	r3, #3
 8007142:	2202      	movs	r2, #2
 8007144:	2101      	movs	r1, #1
 8007146:	2000      	movs	r0, #0
 8007148:	f7fe fa66 	bl	8005618 <Rotate_90_Degrees>
                 path += 1;
 800714c:	4b0b      	ldr	r3, [pc, #44]	@ (800717c <main+0x1644>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3301      	adds	r3, #1
 8007152:	4a0a      	ldr	r2, [pc, #40]	@ (800717c <main+0x1644>)
 8007154:	6013      	str	r3, [r2, #0]
                 PID_ResetAll(); // 重置所有PID控制器
 8007156:	f7fe fa47 	bl	80055e8 <PID_ResetAll>
                 reach_target_time = 0; // 重置时间戳
 800715a:	4b14      	ldr	r3, [pc, #80]	@ (80071ac <main+0x1674>)
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	e083      	b.n	800726a <main+0x1732>
 8007162:	bf00      	nop
 8007164:	200005c4 	.word	0x200005c4
 8007168:	200005e4 	.word	0x200005e4
 800716c:	200005e8 	.word	0x200005e8
 8007170:	2000058c 	.word	0x2000058c
 8007174:	200000cc 	.word	0x200000cc
 8007178:	42a40000 	.word	0x42a40000
 800717c:	2000041c 	.word	0x2000041c
 8007180:	20000420 	.word	0x20000420
 8007184:	2000003c 	.word	0x2000003c
 8007188:	43160000 	.word	0x43160000
 800718c:	42480000 	.word	0x42480000
 8007190:	433e0000 	.word	0x433e0000
 8007194:	2000004c 	.word	0x2000004c
 8007198:	20000424 	.word	0x20000424
 800719c:	43340000 	.word	0x43340000
 80071a0:	431c0000 	.word	0x431c0000
 80071a4:	44160000 	.word	0x44160000
 80071a8:	20000590 	.word	0x20000590
 80071ac:	200005c8 	.word	0x200005c8
             }
         }
         else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 80071b0:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80071b4:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80071b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071bc:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80071c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c8:	d84b      	bhi.n	8007262 <main+0x172a>
             // 区域2：减速区间（130~830mm）
             float distance_from_target = current_distance - TARGET_DISTANCE;
 80071ca:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80071ce:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80071d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071d6:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
             float ratio = (distance_from_target / DECEL_RANGE)*1.45;
 80071da:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 80071de:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80071e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80071e6:	ee16 0a90 	vmov	r0, s13
 80071ea:	f7f9 f9ad 	bl	8000548 <__aeabi_f2d>
 80071ee:	a3b9      	add	r3, pc, #740	@ (adr r3, 80074d4 <main+0x199c>)
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	f7f9 fa00 	bl	80005f8 <__aeabi_dmul>
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	4610      	mov	r0, r2
 80071fe:	4619      	mov	r1, r3
 8007200:	f7f9 fcf2 	bl	8000be8 <__aeabi_d2f>
 8007204:	4603      	mov	r3, r0
 8007206:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
             motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 800720a:	f897 20ac 	ldrb.w	r2, [r7, #172]	@ 0xac
 800720e:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	ee07 3a90 	vmov	s15, r3
 8007218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800721c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8007220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007228:	edc7 7a01 	vstr	s15, [r7, #4]
 800722c:	793b      	ldrb	r3, [r7, #4]
 800722e:	b2da      	uxtb	r2, r3
 8007230:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8007234:	4413      	add	r3, r2
 8007236:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
             motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 800723a:	f897 2123 	ldrb.w	r2, [r7, #291]	@ 0x123
 800723e:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8007242:	429a      	cmp	r2, r3
 8007244:	d308      	bcc.n	8007258 <main+0x1720>
 8007246:	f897 2123 	ldrb.w	r2, [r7, #291]	@ 0x123
 800724a:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 800724e:	4293      	cmp	r3, r2
 8007250:	bf28      	it	cs
 8007252:	4613      	movcs	r3, r2
 8007254:	b2db      	uxtb	r3, r3
 8007256:	e001      	b.n	800725c <main+0x1724>
 8007258:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 800725c:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
 8007260:	e003      	b.n	800726a <main+0x1732>
         }
         else {
             // 区域1：全速区间（>830mm）
             motor_speed = MAX_SPEED;
 8007262:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8007266:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
         }
    
         // 执行带平滑过渡的电机控制
         static uint8_t last_speed = 0;
         motor_speed = smooth_speed_transition(last_speed, motor_speed);
 800726a:	4b8b      	ldr	r3, [pc, #556]	@ (8007498 <main+0x1960>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	f897 2123 	ldrb.w	r2, [r7, #291]	@ 0x123
 8007272:	4611      	mov	r1, r2
 8007274:	4618      	mov	r0, r3
 8007276:	f7fe f969 	bl	800554c <smooth_speed_transition>
 800727a:	4603      	mov	r3, r0
 800727c:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
         last_speed = motor_speed;
 8007280:	4a85      	ldr	r2, [pc, #532]	@ (8007498 <main+0x1960>)
 8007282:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8007286:	7013      	strb	r3, [r2, #0]
    
         Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -motor_speed, &yaw, &target_yaw);
 8007288:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 800728c:	b29b      	uxth	r3, r3
 800728e:	425b      	negs	r3, r3
 8007290:	b29b      	uxth	r3, r3
 8007292:	b21b      	sxth	r3, r3
 8007294:	4a81      	ldr	r2, [pc, #516]	@ (800749c <main+0x1964>)
 8007296:	9202      	str	r2, [sp, #8]
 8007298:	4a81      	ldr	r2, [pc, #516]	@ (80074a0 <main+0x1968>)
 800729a:	9201      	str	r2, [sp, #4]
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	2303      	movs	r3, #3
 80072a0:	2202      	movs	r2, #2
 80072a2:	2101      	movs	r1, #1
 80072a4:	2000      	movs	r0, #0
 80072a6:	f000 ff0f 	bl	80080c8 <Motor_Straight>
        
         if(HAL_GetTick() - time_enterpath_case7 >= DELAY_ADJUST && current_distance >= ADJUST_DISTANCE ){
 80072aa:	f005 fec3 	bl	800d034 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	4b7c      	ldr	r3, [pc, #496]	@ (80074a4 <main+0x196c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	1ad2      	subs	r2, r2, r3
 80072b6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d31e      	bcc.n	80072fc <main+0x17c4>
 80072be:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072ca:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80072ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80072d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d6:	db11      	blt.n	80072fc <main+0x17c4>
             Adjust_Motors_By_Side_Distances(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, raw_distances[0], raw_distances[2], 82.0f);
 80072d8:	4b73      	ldr	r3, [pc, #460]	@ (80074a8 <main+0x1970>)
 80072da:	edd3 7a00 	vldr	s15, [r3]
 80072de:	4b72      	ldr	r3, [pc, #456]	@ (80074a8 <main+0x1970>)
 80072e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80072e4:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 80074ac <main+0x1974>
 80072e8:	eef0 0a47 	vmov.f32	s1, s14
 80072ec:	eeb0 0a67 	vmov.f32	s0, s15
 80072f0:	2302      	movs	r3, #2
 80072f2:	2201      	movs	r2, #1
 80072f4:	2103      	movs	r1, #3
 80072f6:	2000      	movs	r0, #0
 80072f8:	f003 f860 	bl	800a3bc <Adjust_Motors_By_Side_Distances>
         }
    
         OLED_ShowNum(4, 4, motor_speed, 2);
 80072fc:	f897 2123 	ldrb.w	r2, [r7, #291]	@ 0x123
 8007300:	2302      	movs	r3, #2
 8007302:	2104      	movs	r1, #4
 8007304:	2004      	movs	r0, #4
 8007306:	f7fd fd1d 	bl	8004d44 <OLED_ShowNum>
         OLED_ShowNum(4, 1, path, 2);
 800730a:	4b69      	ldr	r3, [pc, #420]	@ (80074b0 <main+0x1978>)
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	2302      	movs	r3, #2
 8007310:	2101      	movs	r1, #1
 8007312:	2004      	movs	r0, #4
 8007314:	f7fd fd16 	bl	8004d44 <OLED_ShowNum>
         break;
 8007318:	f000 bc5b 	b.w	8007bd2 <main+0x209a>
       }

       case 8: {
         const uint32_t DELAY_ENTER = 280; //调试
 800731c:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8007320:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

         if (path_change!=2)
 8007324:	4b63      	ldr	r3, [pc, #396]	@ (80074b4 <main+0x197c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b02      	cmp	r3, #2
 800732a:	f000 8096 	beq.w	800745a <main+0x1922>
         {
           if ((distances[2]>=150 && path_change==0)||(distances[2]<=150 && path_change==1))
 800732e:	4b62      	ldr	r3, [pc, #392]	@ (80074b8 <main+0x1980>)
 8007330:	edd3 7a02 	vldr	s15, [r3, #8]
 8007334:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80074bc <main+0x1984>
 8007338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800733c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007340:	db03      	blt.n	800734a <main+0x1812>
 8007342:	4b5c      	ldr	r3, [pc, #368]	@ (80074b4 <main+0x197c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00d      	beq.n	8007366 <main+0x182e>
 800734a:	4b5b      	ldr	r3, [pc, #364]	@ (80074b8 <main+0x1980>)
 800734c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007350:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80074bc <main+0x1984>
 8007354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735c:	d81e      	bhi.n	800739c <main+0x1864>
 800735e:	4b55      	ldr	r3, [pc, #340]	@ (80074b4 <main+0x197c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d11a      	bne.n	800739c <main+0x1864>
           {
             Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8007366:	4b4d      	ldr	r3, [pc, #308]	@ (800749c <main+0x1964>)
 8007368:	9302      	str	r3, [sp, #8]
 800736a:	4b4d      	ldr	r3, [pc, #308]	@ (80074a0 <main+0x1968>)
 800736c:	9301      	str	r3, [sp, #4]
 800736e:	f06f 031d 	mvn.w	r3, #29
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	2303      	movs	r3, #3
 8007376:	2202      	movs	r2, #2
 8007378:	2101      	movs	r1, #1
 800737a:	2000      	movs	r0, #0
 800737c:	f000 fea4 	bl	80080c8 <Motor_Straight>
             // 使用左侧电机调整
             Adjust_Left_Motors_By_Distance(MOTOR_1, MOTOR_3, MOTOR_2, MOTOR_4, raw_distances[0], 50.0f);
 8007380:	4b49      	ldr	r3, [pc, #292]	@ (80074a8 <main+0x1970>)
 8007382:	edd3 7a00 	vldr	s15, [r3]
 8007386:	eddf 0a4e 	vldr	s1, [pc, #312]	@ 80074c0 <main+0x1988>
 800738a:	eeb0 0a67 	vmov.f32	s0, s15
 800738e:	2303      	movs	r3, #3
 8007390:	2201      	movs	r2, #1
 8007392:	2102      	movs	r1, #2
 8007394:	2000      	movs	r0, #0
 8007396:	f001 f8a9 	bl	80084ec <Adjust_Left_Motors_By_Distance>
 800739a:	e075      	b.n	8007488 <main+0x1950>
           }else if (distances[2]<=170 && path_change==0)
 800739c:	4b46      	ldr	r3, [pc, #280]	@ (80074b8 <main+0x1980>)
 800739e:	edd3 7a02 	vldr	s15, [r3, #8]
 80073a2:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80074c4 <main+0x198c>
 80073a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ae:	d824      	bhi.n	80073fa <main+0x18c2>
 80073b0:	4b40      	ldr	r3, [pc, #256]	@ (80074b4 <main+0x197c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d120      	bne.n	80073fa <main+0x18c2>
           {
             if(flag){
 80073b8:	4b43      	ldr	r3, [pc, #268]	@ (80074c8 <main+0x1990>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d007      	beq.n	80073d0 <main+0x1898>
               time_start = HAL_GetTick();
 80073c0:	f005 fe38 	bl	800d034 <HAL_GetTick>
 80073c4:	4603      	mov	r3, r0
 80073c6:	4a41      	ldr	r2, [pc, #260]	@ (80074cc <main+0x1994>)
 80073c8:	6013      	str	r3, [r2, #0]
               flag = false;
 80073ca:	4b3f      	ldr	r3, [pc, #252]	@ (80074c8 <main+0x1990>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	701a      	strb	r2, [r3, #0]
             }
             uint32_t time = HAL_GetTick();
 80073d0:	f005 fe30 	bl	800d034 <HAL_GetTick>
 80073d4:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
             if(time - time_start >=500){
 80073d8:	4b3c      	ldr	r3, [pc, #240]	@ (80074cc <main+0x1994>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80073e6:	d34e      	bcc.n	8007486 <main+0x194e>
               path_change+=1;
 80073e8:	4b32      	ldr	r3, [pc, #200]	@ (80074b4 <main+0x197c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3301      	adds	r3, #1
 80073ee:	4a31      	ldr	r2, [pc, #196]	@ (80074b4 <main+0x197c>)
 80073f0:	6013      	str	r3, [r2, #0]
               flag = true;
 80073f2:	4b35      	ldr	r3, [pc, #212]	@ (80074c8 <main+0x1990>)
 80073f4:	2201      	movs	r2, #1
 80073f6:	701a      	strb	r2, [r3, #0]
           {
 80073f8:	e045      	b.n	8007486 <main+0x194e>
             }
           }else if (distances[2]>=180 && path_change==1)
 80073fa:	4b2f      	ldr	r3, [pc, #188]	@ (80074b8 <main+0x1980>)
 80073fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8007400:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80074d0 <main+0x1998>
 8007404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740c:	db3c      	blt.n	8007488 <main+0x1950>
 800740e:	4b29      	ldr	r3, [pc, #164]	@ (80074b4 <main+0x197c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d138      	bne.n	8007488 <main+0x1950>
           {
             if(flag){
 8007416:	4b2c      	ldr	r3, [pc, #176]	@ (80074c8 <main+0x1990>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d007      	beq.n	800742e <main+0x18f6>
               time_start = HAL_GetTick();
 800741e:	f005 fe09 	bl	800d034 <HAL_GetTick>
 8007422:	4603      	mov	r3, r0
 8007424:	4a29      	ldr	r2, [pc, #164]	@ (80074cc <main+0x1994>)
 8007426:	6013      	str	r3, [r2, #0]
               flag = false;
 8007428:	4b27      	ldr	r3, [pc, #156]	@ (80074c8 <main+0x1990>)
 800742a:	2200      	movs	r2, #0
 800742c:	701a      	strb	r2, [r3, #0]
             }
             uint32_t time = HAL_GetTick();
 800742e:	f005 fe01 	bl	800d034 <HAL_GetTick>
 8007432:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
             if(time - time_start >= DELAY_ENTER ){
 8007436:	4b25      	ldr	r3, [pc, #148]	@ (80074cc <main+0x1994>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007444:	429a      	cmp	r2, r3
 8007446:	d81f      	bhi.n	8007488 <main+0x1950>
               path_change+=1;
 8007448:	4b1a      	ldr	r3, [pc, #104]	@ (80074b4 <main+0x197c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3301      	adds	r3, #1
 800744e:	4a19      	ldr	r2, [pc, #100]	@ (80074b4 <main+0x197c>)
 8007450:	6013      	str	r3, [r2, #0]
               flag = true;
 8007452:	4b1d      	ldr	r3, [pc, #116]	@ (80074c8 <main+0x1990>)
 8007454:	2201      	movs	r2, #1
 8007456:	701a      	strb	r2, [r3, #0]
 8007458:	e016      	b.n	8007488 <main+0x1950>
             }
           }
         }else{
           // 直接执行旋转和路径切换
           Rotate_90_Degrees(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, true );
 800745a:	2301      	movs	r3, #1
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	2303      	movs	r3, #3
 8007460:	2202      	movs	r2, #2
 8007462:	2101      	movs	r1, #1
 8007464:	2000      	movs	r0, #0
 8007466:	f7fe f8d7 	bl	8005618 <Rotate_90_Degrees>
           path_change = 0;
 800746a:	4b12      	ldr	r3, [pc, #72]	@ (80074b4 <main+0x197c>)
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]
           flag = true;
 8007470:	4b15      	ldr	r3, [pc, #84]	@ (80074c8 <main+0x1990>)
 8007472:	2201      	movs	r2, #1
 8007474:	701a      	strb	r2, [r3, #0]
           path +=1;
 8007476:	4b0e      	ldr	r3, [pc, #56]	@ (80074b0 <main+0x1978>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3301      	adds	r3, #1
 800747c:	4a0c      	ldr	r2, [pc, #48]	@ (80074b0 <main+0x1978>)
 800747e:	6013      	str	r3, [r2, #0]
           PID_ResetAll();
 8007480:	f7fe f8b2 	bl	80055e8 <PID_ResetAll>
 8007484:	e000      	b.n	8007488 <main+0x1950>
           {
 8007486:	bf00      	nop
         }
         OLED_ShowNum(4, 1, path, 2);
 8007488:	4b09      	ldr	r3, [pc, #36]	@ (80074b0 <main+0x1978>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	2302      	movs	r3, #2
 800748e:	2101      	movs	r1, #1
 8007490:	2004      	movs	r0, #4
 8007492:	f7fd fc57 	bl	8004d44 <OLED_ShowNum>
         break;
 8007496:	e39c      	b.n	8007bd2 <main+0x209a>
 8007498:	200005cc 	.word	0x200005cc
 800749c:	200005e4 	.word	0x200005e4
 80074a0:	200005e8 	.word	0x200005e8
 80074a4:	20000590 	.word	0x20000590
 80074a8:	200000cc 	.word	0x200000cc
 80074ac:	42a40000 	.word	0x42a40000
 80074b0:	2000041c 	.word	0x2000041c
 80074b4:	20000420 	.word	0x20000420
 80074b8:	2000003c 	.word	0x2000003c
 80074bc:	43160000 	.word	0x43160000
 80074c0:	42480000 	.word	0x42480000
 80074c4:	432a0000 	.word	0x432a0000
 80074c8:	2000004c 	.word	0x2000004c
 80074cc:	20000424 	.word	0x20000424
 80074d0:	43340000 	.word	0x43340000
 80074d4:	33333333 	.word	0x33333333
 80074d8:	3ff73333 	.word	0x3ff73333
       }

       case 9: {
         // 参数定义
         const float TARGET_DISTANCE = 156.0f;   // 调试，这个变量用于检测最终的目标距离
 80074dc:	4bc2      	ldr	r3, [pc, #776]	@ (80077e8 <main+0x1cb0>)
 80074de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
         const float DECEL_RANGE = 600.0f;      // 调试，这个变量用于设置减速区间范围
 80074e2:	4bc2      	ldr	r3, [pc, #776]	@ (80077ec <main+0x1cb4>)
 80074e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
         const uint16_t ADJUST_DISTANCE = 250;  // 调试，这个变量用于在距离最终目标距离较近时的取消调校
 80074e8:	23fa      	movs	r3, #250	@ 0xfa
 80074ea:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
         const uint8_t MIN_SPEED = 21;          // 调试，这个变量用于设置接近目标时的速度最小速度（靠近时）
 80074ee:	2315      	movs	r3, #21
 80074f0:	f887 30d5 	strb.w	r3, [r7, #213]	@ 0xd5
         const uint8_t MAX_SPEED = 60;          // 调试，这个变量用于设置离目标较远时的速度
 80074f4:	233c      	movs	r3, #60	@ 0x3c
 80074f6:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
         const uint16_t DELAY_ADJUST = 2700;    // 调试，这个变量用于路径转换后的校准延时时间，需要确保进入垄
 80074fa:	f640 238c 	movw	r3, #2700	@ 0xa8c
 80074fe:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
    
         float current_distance = distances[1];
 8007502:	4bbb      	ldr	r3, [pc, #748]	@ (80077f0 <main+0x1cb8>)
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         if(time_enterpath_case9 == 0) {
 800750a:	4bba      	ldr	r3, [pc, #744]	@ (80077f4 <main+0x1cbc>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d104      	bne.n	800751c <main+0x19e4>
             time_enterpath_case9 = HAL_GetTick();
 8007512:	f005 fd8f 	bl	800d034 <HAL_GetTick>
 8007516:	4603      	mov	r3, r0
 8007518:	4ab6      	ldr	r2, [pc, #728]	@ (80077f4 <main+0x1cbc>)
 800751a:	6013      	str	r3, [r2, #0]
         }
    
         // 速度计算逻辑
         uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 800751c:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8007520:	f887 3122 	strb.w	r3, [r7, #290]	@ 0x122
    
         // 添加延迟判定
         static uint32_t reach_target_time = 0;
         if (reach_target_time == 0) {
 8007524:	4bb4      	ldr	r3, [pc, #720]	@ (80077f8 <main+0x1cc0>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d104      	bne.n	8007536 <main+0x19fe>
             reach_target_time = HAL_GetTick();
 800752c:	f005 fd82 	bl	800d034 <HAL_GetTick>
 8007530:	4603      	mov	r3, r0
 8007532:	4ab1      	ldr	r2, [pc, #708]	@ (80077f8 <main+0x1cc0>)
 8007534:	6013      	str	r3, [r2, #0]
         }
    
         if (current_distance <= TARGET_DISTANCE) {
 8007536:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 800753a:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 800753e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007546:	d829      	bhi.n	800759c <main+0x1a64>
             // 区域3：到达目标距离（≤130mm）
             motor_speed = MIN_SPEED;
 8007548:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 800754c:	f887 3122 	strb.w	r3, [r7, #290]	@ 0x122
             
             // 执行路径切换逻辑
             if(current_distance <= TARGET_DISTANCE && (HAL_GetTick() - reach_target_time >= 3000)) {
 8007550:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8007554:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8007558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800755c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007560:	d879      	bhi.n	8007656 <main+0x1b1e>
 8007562:	f005 fd67 	bl	800d034 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	4ba3      	ldr	r3, [pc, #652]	@ (80077f8 <main+0x1cc0>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8007572:	4293      	cmp	r3, r2
 8007574:	d96f      	bls.n	8007656 <main+0x1b1e>
                Rotate_90_Degrees(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, false );
 8007576:	2300      	movs	r3, #0
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	2303      	movs	r3, #3
 800757c:	2202      	movs	r2, #2
 800757e:	2101      	movs	r1, #1
 8007580:	2000      	movs	r0, #0
 8007582:	f7fe f849 	bl	8005618 <Rotate_90_Degrees>
                 path += 1;
 8007586:	4b9d      	ldr	r3, [pc, #628]	@ (80077fc <main+0x1cc4>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3301      	adds	r3, #1
 800758c:	4a9b      	ldr	r2, [pc, #620]	@ (80077fc <main+0x1cc4>)
 800758e:	6013      	str	r3, [r2, #0]
                 PID_ResetAll(); // 重置所有PID控制器
 8007590:	f7fe f82a 	bl	80055e8 <PID_ResetAll>
                 reach_target_time = 0; // 重置时间戳
 8007594:	4b98      	ldr	r3, [pc, #608]	@ (80077f8 <main+0x1cc0>)
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	e05c      	b.n	8007656 <main+0x1b1e>
             }
         }
         else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 800759c:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80075a0:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 80075a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075a8:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 80075ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b4:	d84b      	bhi.n	800764e <main+0x1b16>
             // 区域2：减速区间（130~830mm）
             float distance_from_target = current_distance - TARGET_DISTANCE;
 80075b6:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 80075ba:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 80075be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075c2:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8
             float ratio = (distance_from_target / DECEL_RANGE)*1.45;
 80075c6:	ed97 7a32 	vldr	s14, [r7, #200]	@ 0xc8
 80075ca:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 80075ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80075d2:	ee16 0a90 	vmov	r0, s13
 80075d6:	f7f8 ffb7 	bl	8000548 <__aeabi_f2d>
 80075da:	a381      	add	r3, pc, #516	@ (adr r3, 80077e0 <main+0x1ca8>)
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	f7f9 f80a 	bl	80005f8 <__aeabi_dmul>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	4610      	mov	r0, r2
 80075ea:	4619      	mov	r1, r3
 80075ec:	f7f9 fafc 	bl	8000be8 <__aeabi_d2f>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
             motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 80075f6:	f897 20d4 	ldrb.w	r2, [r7, #212]	@ 0xd4
 80075fa:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	ee07 3a90 	vmov	s15, r3
 8007604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007608:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 800760c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007614:	edc7 7a01 	vstr	s15, [r7, #4]
 8007618:	793b      	ldrb	r3, [r7, #4]
 800761a:	b2da      	uxtb	r2, r3
 800761c:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 8007620:	4413      	add	r3, r2
 8007622:	f887 3122 	strb.w	r3, [r7, #290]	@ 0x122
             motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8007626:	f897 2122 	ldrb.w	r2, [r7, #290]	@ 0x122
 800762a:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 800762e:	429a      	cmp	r2, r3
 8007630:	d308      	bcc.n	8007644 <main+0x1b0c>
 8007632:	f897 2122 	ldrb.w	r2, [r7, #290]	@ 0x122
 8007636:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 800763a:	4293      	cmp	r3, r2
 800763c:	bf28      	it	cs
 800763e:	4613      	movcs	r3, r2
 8007640:	b2db      	uxtb	r3, r3
 8007642:	e001      	b.n	8007648 <main+0x1b10>
 8007644:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 8007648:	f887 3122 	strb.w	r3, [r7, #290]	@ 0x122
 800764c:	e003      	b.n	8007656 <main+0x1b1e>
         }
         else {
             // 区域1：全速区间（>830mm）
             motor_speed = MAX_SPEED;
 800764e:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8007652:	f887 3122 	strb.w	r3, [r7, #290]	@ 0x122
         }
    
         // 执行带平滑过渡的电机控制
         static uint8_t last_speed = 0;
         motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8007656:	4b6a      	ldr	r3, [pc, #424]	@ (8007800 <main+0x1cc8>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	f897 2122 	ldrb.w	r2, [r7, #290]	@ 0x122
 800765e:	4611      	mov	r1, r2
 8007660:	4618      	mov	r0, r3
 8007662:	f7fd ff73 	bl	800554c <smooth_speed_transition>
 8007666:	4603      	mov	r3, r0
 8007668:	f887 3122 	strb.w	r3, [r7, #290]	@ 0x122
         last_speed = motor_speed;
 800766c:	4a64      	ldr	r2, [pc, #400]	@ (8007800 <main+0x1cc8>)
 800766e:	f897 3122 	ldrb.w	r3, [r7, #290]	@ 0x122
 8007672:	7013      	strb	r3, [r2, #0]
    
         Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8007674:	f897 3122 	ldrb.w	r3, [r7, #290]	@ 0x122
 8007678:	b21b      	sxth	r3, r3
 800767a:	4a62      	ldr	r2, [pc, #392]	@ (8007804 <main+0x1ccc>)
 800767c:	9202      	str	r2, [sp, #8]
 800767e:	4a62      	ldr	r2, [pc, #392]	@ (8007808 <main+0x1cd0>)
 8007680:	9201      	str	r2, [sp, #4]
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	2303      	movs	r3, #3
 8007686:	2202      	movs	r2, #2
 8007688:	2101      	movs	r1, #1
 800768a:	2000      	movs	r0, #0
 800768c:	f000 fd1c 	bl	80080c8 <Motor_Straight>
        
         if(HAL_GetTick() - time_enterpath_case9 >= DELAY_ADJUST && current_distance >= ADJUST_DISTANCE + 100 ){
 8007690:	f005 fcd0 	bl	800d034 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	4b57      	ldr	r3, [pc, #348]	@ (80077f4 <main+0x1cbc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	1ad2      	subs	r2, r2, r3
 800769c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d31f      	bcc.n	80076e4 <main+0x1bac>
 80076a4:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 80076a8:	3364      	adds	r3, #100	@ 0x64
 80076aa:	ee07 3a90 	vmov	s15, r3
 80076ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076b2:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 80076b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076be:	db11      	blt.n	80076e4 <main+0x1bac>
             Adjust_Motors_By_Side_Distances(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, raw_distances[0], raw_distances[2], 82.0f);
 80076c0:	4b52      	ldr	r3, [pc, #328]	@ (800780c <main+0x1cd4>)
 80076c2:	edd3 7a00 	vldr	s15, [r3]
 80076c6:	4b51      	ldr	r3, [pc, #324]	@ (800780c <main+0x1cd4>)
 80076c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80076cc:	ed9f 1a50 	vldr	s2, [pc, #320]	@ 8007810 <main+0x1cd8>
 80076d0:	eef0 0a47 	vmov.f32	s1, s14
 80076d4:	eeb0 0a67 	vmov.f32	s0, s15
 80076d8:	2302      	movs	r3, #2
 80076da:	2201      	movs	r2, #1
 80076dc:	2103      	movs	r1, #3
 80076de:	2000      	movs	r0, #0
 80076e0:	f002 fe6c 	bl	800a3bc <Adjust_Motors_By_Side_Distances>
         }
    
         OLED_ShowNum(4, 4, motor_speed, 2);
 80076e4:	f897 2122 	ldrb.w	r2, [r7, #290]	@ 0x122
 80076e8:	2302      	movs	r3, #2
 80076ea:	2104      	movs	r1, #4
 80076ec:	2004      	movs	r0, #4
 80076ee:	f7fd fb29 	bl	8004d44 <OLED_ShowNum>
         OLED_ShowNum(4, 1, path, 2);
 80076f2:	4b42      	ldr	r3, [pc, #264]	@ (80077fc <main+0x1cc4>)
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	2302      	movs	r3, #2
 80076f8:	2101      	movs	r1, #1
 80076fa:	2004      	movs	r0, #4
 80076fc:	f7fd fb22 	bl	8004d44 <OLED_ShowNum>
         break;
 8007700:	e267      	b.n	8007bd2 <main+0x209a>
       }

       case 10: {
         const uint32_t DELAY_ENTER = 220; //调试
 8007702:	23dc      	movs	r3, #220	@ 0xdc
 8007704:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

         if (path_change!=2)
 8007708:	4b42      	ldr	r3, [pc, #264]	@ (8007814 <main+0x1cdc>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b02      	cmp	r3, #2
 800770e:	f000 80bd 	beq.w	800788c <main+0x1d54>
         {
           if ((distances[0]>=150 && path_change==0)||(distances[0]<=150 && path_change==1))
 8007712:	4b37      	ldr	r3, [pc, #220]	@ (80077f0 <main+0x1cb8>)
 8007714:	edd3 7a00 	vldr	s15, [r3]
 8007718:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8007818 <main+0x1ce0>
 800771c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007724:	db03      	blt.n	800772e <main+0x1bf6>
 8007726:	4b3b      	ldr	r3, [pc, #236]	@ (8007814 <main+0x1cdc>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00d      	beq.n	800774a <main+0x1c12>
 800772e:	4b30      	ldr	r3, [pc, #192]	@ (80077f0 <main+0x1cb8>)
 8007730:	edd3 7a00 	vldr	s15, [r3]
 8007734:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8007818 <main+0x1ce0>
 8007738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800773c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007740:	d81e      	bhi.n	8007780 <main+0x1c48>
 8007742:	4b34      	ldr	r3, [pc, #208]	@ (8007814 <main+0x1cdc>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d11a      	bne.n	8007780 <main+0x1c48>
           {
             Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 800774a:	4b2e      	ldr	r3, [pc, #184]	@ (8007804 <main+0x1ccc>)
 800774c:	9302      	str	r3, [sp, #8]
 800774e:	4b2e      	ldr	r3, [pc, #184]	@ (8007808 <main+0x1cd0>)
 8007750:	9301      	str	r3, [sp, #4]
 8007752:	f06f 031d 	mvn.w	r3, #29
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	2303      	movs	r3, #3
 800775a:	2202      	movs	r2, #2
 800775c:	2101      	movs	r1, #1
 800775e:	2000      	movs	r0, #0
 8007760:	f000 fcb2 	bl	80080c8 <Motor_Straight>
             // 使用右侧电机调整
             Adjust_Right_Motors_By_Distance(MOTOR_2, MOTOR_4, MOTOR_1, MOTOR_3, raw_distances[2], 50.0f);
 8007764:	4b29      	ldr	r3, [pc, #164]	@ (800780c <main+0x1cd4>)
 8007766:	edd3 7a02 	vldr	s15, [r3, #8]
 800776a:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800781c <main+0x1ce4>
 800776e:	eeb0 0a67 	vmov.f32	s0, s15
 8007772:	2302      	movs	r3, #2
 8007774:	2200      	movs	r2, #0
 8007776:	2103      	movs	r1, #3
 8007778:	2001      	movs	r0, #1
 800777a:	f001 fe6b 	bl	8009454 <Adjust_Right_Motors_By_Distance>
 800777e:	e09c      	b.n	80078ba <main+0x1d82>
           }else if (distances[0]<=190 && path_change==0)
 8007780:	4b1b      	ldr	r3, [pc, #108]	@ (80077f0 <main+0x1cb8>)
 8007782:	edd3 7a00 	vldr	s15, [r3]
 8007786:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007820 <main+0x1ce8>
 800778a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800778e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007792:	d84b      	bhi.n	800782c <main+0x1cf4>
 8007794:	4b1f      	ldr	r3, [pc, #124]	@ (8007814 <main+0x1cdc>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d147      	bne.n	800782c <main+0x1cf4>
           {
             if(flag){
 800779c:	4b21      	ldr	r3, [pc, #132]	@ (8007824 <main+0x1cec>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d007      	beq.n	80077b4 <main+0x1c7c>
               time_start = HAL_GetTick();
 80077a4:	f005 fc46 	bl	800d034 <HAL_GetTick>
 80077a8:	4603      	mov	r3, r0
 80077aa:	4a1f      	ldr	r2, [pc, #124]	@ (8007828 <main+0x1cf0>)
 80077ac:	6013      	str	r3, [r2, #0]
               flag = false;
 80077ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007824 <main+0x1cec>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	701a      	strb	r2, [r3, #0]
             }
             uint32_t time = HAL_GetTick();
 80077b4:	f005 fc3e 	bl	800d034 <HAL_GetTick>
 80077b8:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
             if(time - time_start >=100){
 80077bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007828 <main+0x1cf0>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	2b63      	cmp	r3, #99	@ 0x63
 80077c8:	d976      	bls.n	80078b8 <main+0x1d80>
               path_change+=1;
 80077ca:	4b12      	ldr	r3, [pc, #72]	@ (8007814 <main+0x1cdc>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3301      	adds	r3, #1
 80077d0:	4a10      	ldr	r2, [pc, #64]	@ (8007814 <main+0x1cdc>)
 80077d2:	6013      	str	r3, [r2, #0]
               flag = true;
 80077d4:	4b13      	ldr	r3, [pc, #76]	@ (8007824 <main+0x1cec>)
 80077d6:	2201      	movs	r2, #1
 80077d8:	701a      	strb	r2, [r3, #0]
           {
 80077da:	e06d      	b.n	80078b8 <main+0x1d80>
 80077dc:	f3af 8000 	nop.w
 80077e0:	33333333 	.word	0x33333333
 80077e4:	3ff73333 	.word	0x3ff73333
 80077e8:	431c0000 	.word	0x431c0000
 80077ec:	44160000 	.word	0x44160000
 80077f0:	2000003c 	.word	0x2000003c
 80077f4:	20000594 	.word	0x20000594
 80077f8:	200005d0 	.word	0x200005d0
 80077fc:	2000041c 	.word	0x2000041c
 8007800:	200005d4 	.word	0x200005d4
 8007804:	200005e4 	.word	0x200005e4
 8007808:	200005e8 	.word	0x200005e8
 800780c:	200000cc 	.word	0x200000cc
 8007810:	42a40000 	.word	0x42a40000
 8007814:	20000420 	.word	0x20000420
 8007818:	43160000 	.word	0x43160000
 800781c:	42480000 	.word	0x42480000
 8007820:	433e0000 	.word	0x433e0000
 8007824:	2000004c 	.word	0x2000004c
 8007828:	20000424 	.word	0x20000424
             }
           }else if (distances[0]>=180 && path_change==1)
 800782c:	4bb4      	ldr	r3, [pc, #720]	@ (8007b00 <main+0x1fc8>)
 800782e:	edd3 7a00 	vldr	s15, [r3]
 8007832:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8007b04 <main+0x1fcc>
 8007836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800783a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800783e:	db3c      	blt.n	80078ba <main+0x1d82>
 8007840:	4bb1      	ldr	r3, [pc, #708]	@ (8007b08 <main+0x1fd0>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d138      	bne.n	80078ba <main+0x1d82>
           {
             if(flag){
 8007848:	4bb0      	ldr	r3, [pc, #704]	@ (8007b0c <main+0x1fd4>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d007      	beq.n	8007860 <main+0x1d28>
               time_start = HAL_GetTick();
 8007850:	f005 fbf0 	bl	800d034 <HAL_GetTick>
 8007854:	4603      	mov	r3, r0
 8007856:	4aae      	ldr	r2, [pc, #696]	@ (8007b10 <main+0x1fd8>)
 8007858:	6013      	str	r3, [r2, #0]
               flag = false;
 800785a:	4bac      	ldr	r3, [pc, #688]	@ (8007b0c <main+0x1fd4>)
 800785c:	2200      	movs	r2, #0
 800785e:	701a      	strb	r2, [r3, #0]
             }
             uint32_t time = HAL_GetTick();
 8007860:	f005 fbe8 	bl	800d034 <HAL_GetTick>
 8007864:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
             if(time - time_start >= DELAY_ENTER){
 8007868:	4ba9      	ldr	r3, [pc, #676]	@ (8007b10 <main+0x1fd8>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8007876:	429a      	cmp	r2, r3
 8007878:	d81f      	bhi.n	80078ba <main+0x1d82>
               path_change+=1;
 800787a:	4ba3      	ldr	r3, [pc, #652]	@ (8007b08 <main+0x1fd0>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3301      	adds	r3, #1
 8007880:	4aa1      	ldr	r2, [pc, #644]	@ (8007b08 <main+0x1fd0>)
 8007882:	6013      	str	r3, [r2, #0]
               flag = true;
 8007884:	4ba1      	ldr	r3, [pc, #644]	@ (8007b0c <main+0x1fd4>)
 8007886:	2201      	movs	r2, #1
 8007888:	701a      	strb	r2, [r3, #0]
 800788a:	e016      	b.n	80078ba <main+0x1d82>
             }
           }
         }else{
           // 直接执行旋转和路径切换
           Rotate_90_Degrees(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, true );
 800788c:	2301      	movs	r3, #1
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	2303      	movs	r3, #3
 8007892:	2202      	movs	r2, #2
 8007894:	2101      	movs	r1, #1
 8007896:	2000      	movs	r0, #0
 8007898:	f7fd febe 	bl	8005618 <Rotate_90_Degrees>
           path_change = 0;
 800789c:	4b9a      	ldr	r3, [pc, #616]	@ (8007b08 <main+0x1fd0>)
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]
           flag = true;
 80078a2:	4b9a      	ldr	r3, [pc, #616]	@ (8007b0c <main+0x1fd4>)
 80078a4:	2201      	movs	r2, #1
 80078a6:	701a      	strb	r2, [r3, #0]
           path +=1;
 80078a8:	4b9a      	ldr	r3, [pc, #616]	@ (8007b14 <main+0x1fdc>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3301      	adds	r3, #1
 80078ae:	4a99      	ldr	r2, [pc, #612]	@ (8007b14 <main+0x1fdc>)
 80078b0:	6013      	str	r3, [r2, #0]
           PID_ResetAll();
 80078b2:	f7fd fe99 	bl	80055e8 <PID_ResetAll>
 80078b6:	e000      	b.n	80078ba <main+0x1d82>
           {
 80078b8:	bf00      	nop
         }
         OLED_ShowNum(4, 1, path, 2);
 80078ba:	4b96      	ldr	r3, [pc, #600]	@ (8007b14 <main+0x1fdc>)
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	2302      	movs	r3, #2
 80078c0:	2101      	movs	r1, #1
 80078c2:	2004      	movs	r0, #4
 80078c4:	f7fd fa3e 	bl	8004d44 <OLED_ShowNum>
         break;
 80078c8:	e183      	b.n	8007bd2 <main+0x209a>
       }

       case 11: {
         // 参数定义
         const float TARGET_DISTANCE = 120.0f;   // 调试，这个变量用于检测最终的目标距离
 80078ca:	4b93      	ldr	r3, [pc, #588]	@ (8007b18 <main+0x1fe0>)
 80078cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
         const float DECEL_RANGE = 600.0f;      // 调试，这个变量用于设置减速区间范围
 80078d0:	4b92      	ldr	r3, [pc, #584]	@ (8007b1c <main+0x1fe4>)
 80078d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
         const uint16_t ADJUST_DISTANCE = 250;  // 调试，这个变量用于在距离最终目标距离较近时的取消调校
 80078d6:	23fa      	movs	r3, #250	@ 0xfa
 80078d8:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
         const uint8_t MIN_SPEED = 21;          // 调试，这个变量用于设置接近目标时的速度最小速度（靠近时）
 80078dc:	2315      	movs	r3, #21
 80078de:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
         const uint8_t MAX_SPEED = 60;          // 调试，这个变量用于设置离目标较远时的速度
 80078e2:	233c      	movs	r3, #60	@ 0x3c
 80078e4:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
         const uint16_t DELAY_ADJUST = 2700;    // 调试，这个变量用于路径转换后的校准延时时间，需要确保进入垄
 80078e8:	f640 238c 	movw	r3, #2700	@ 0xa8c
 80078ec:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
    
         float current_distance = distances[3];
 80078f0:	4b83      	ldr	r3, [pc, #524]	@ (8007b00 <main+0x1fc8>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
         if(time_enterpath_case11 == 0) {
 80078f8:	4b89      	ldr	r3, [pc, #548]	@ (8007b20 <main+0x1fe8>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d104      	bne.n	800790a <main+0x1dd2>
             time_enterpath_case11 = HAL_GetTick();
 8007900:	f005 fb98 	bl	800d034 <HAL_GetTick>
 8007904:	4603      	mov	r3, r0
 8007906:	4a86      	ldr	r2, [pc, #536]	@ (8007b20 <main+0x1fe8>)
 8007908:	6013      	str	r3, [r2, #0]
         }
    
         // 速度计算逻辑
         uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 800790a:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 800790e:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121
    
         // 添加延迟判定
         static uint32_t reach_target_time = 0;
         if (reach_target_time == 0) {
 8007912:	4b84      	ldr	r3, [pc, #528]	@ (8007b24 <main+0x1fec>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d104      	bne.n	8007924 <main+0x1dec>
             reach_target_time = HAL_GetTick();
 800791a:	f005 fb8b 	bl	800d034 <HAL_GetTick>
 800791e:	4603      	mov	r3, r0
 8007920:	4a80      	ldr	r2, [pc, #512]	@ (8007b24 <main+0x1fec>)
 8007922:	6013      	str	r3, [r2, #0]
         }
    
         if (current_distance <= TARGET_DISTANCE) {
 8007924:	ed97 7a3d 	vldr	s14, [r7, #244]	@ 0xf4
 8007928:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 800792c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007934:	d829      	bhi.n	800798a <main+0x1e52>
             // 区域3：到达目标距离（≤130mm）
             motor_speed = MIN_SPEED;
 8007936:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 800793a:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121
             
             // 执行路径切换逻辑
             if(current_distance <= TARGET_DISTANCE && (HAL_GetTick() - reach_target_time >= 3000)) {
 800793e:	ed97 7a3d 	vldr	s14, [r7, #244]	@ 0xf4
 8007942:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8007946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800794a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794e:	d879      	bhi.n	8007a44 <main+0x1f0c>
 8007950:	f005 fb70 	bl	800d034 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	4b73      	ldr	r3, [pc, #460]	@ (8007b24 <main+0x1fec>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8007960:	4293      	cmp	r3, r2
 8007962:	d96f      	bls.n	8007a44 <main+0x1f0c>
                Rotate_90_Degrees(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, false );
 8007964:	2300      	movs	r3, #0
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	2303      	movs	r3, #3
 800796a:	2202      	movs	r2, #2
 800796c:	2101      	movs	r1, #1
 800796e:	2000      	movs	r0, #0
 8007970:	f7fd fe52 	bl	8005618 <Rotate_90_Degrees>
                 path += 1;
 8007974:	4b67      	ldr	r3, [pc, #412]	@ (8007b14 <main+0x1fdc>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3301      	adds	r3, #1
 800797a:	4a66      	ldr	r2, [pc, #408]	@ (8007b14 <main+0x1fdc>)
 800797c:	6013      	str	r3, [r2, #0]
                 PID_ResetAll(); // 重置所有PID控制器
 800797e:	f7fd fe33 	bl	80055e8 <PID_ResetAll>
                 reach_target_time = 0; // 重置时间戳
 8007982:	4b68      	ldr	r3, [pc, #416]	@ (8007b24 <main+0x1fec>)
 8007984:	2200      	movs	r2, #0
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	e05c      	b.n	8007a44 <main+0x1f0c>
             }
         }
         else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 800798a:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 800798e:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8007992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007996:	ed97 7a3d 	vldr	s14, [r7, #244]	@ 0xf4
 800799a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800799e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a2:	d84b      	bhi.n	8007a3c <main+0x1f04>
             // 区域2：减速区间（130~830mm）
             float distance_from_target = current_distance - TARGET_DISTANCE;
 80079a4:	ed97 7a3d 	vldr	s14, [r7, #244]	@ 0xf4
 80079a8:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 80079ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079b0:	edc7 7a3c 	vstr	s15, [r7, #240]	@ 0xf0
             float ratio = (distance_from_target / DECEL_RANGE)*1.45;
 80079b4:	ed97 7a3c 	vldr	s14, [r7, #240]	@ 0xf0
 80079b8:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 80079bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80079c0:	ee16 0a90 	vmov	r0, s13
 80079c4:	f7f8 fdc0 	bl	8000548 <__aeabi_f2d>
 80079c8:	a34b      	add	r3, pc, #300	@ (adr r3, 8007af8 <main+0x1fc0>)
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f7f8 fe13 	bl	80005f8 <__aeabi_dmul>
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	4610      	mov	r0, r2
 80079d8:	4619      	mov	r1, r3
 80079da:	f7f9 f905 	bl	8000be8 <__aeabi_d2f>
 80079de:	4603      	mov	r3, r0
 80079e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
             motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 80079e4:	f897 20fc 	ldrb.w	r2, [r7, #252]	@ 0xfc
 80079e8:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079f6:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 80079fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a02:	edc7 7a01 	vstr	s15, [r7, #4]
 8007a06:	793b      	ldrb	r3, [r7, #4]
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8007a0e:	4413      	add	r3, r2
 8007a10:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121
             motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8007a14:	f897 2121 	ldrb.w	r2, [r7, #289]	@ 0x121
 8007a18:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d308      	bcc.n	8007a32 <main+0x1efa>
 8007a20:	f897 2121 	ldrb.w	r2, [r7, #289]	@ 0x121
 8007a24:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	bf28      	it	cs
 8007a2c:	4613      	movcs	r3, r2
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	e001      	b.n	8007a36 <main+0x1efe>
 8007a32:	f897 30fd 	ldrb.w	r3, [r7, #253]	@ 0xfd
 8007a36:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121
 8007a3a:	e003      	b.n	8007a44 <main+0x1f0c>
         }
         else {
             // 区域1：全速区间（>830mm）
             motor_speed = MAX_SPEED;
 8007a3c:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8007a40:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121
         }
    
         // 执行带平滑过渡的电机控制
         static uint8_t last_speed = 0;
         motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8007a44:	4b38      	ldr	r3, [pc, #224]	@ (8007b28 <main+0x1ff0>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	f897 2121 	ldrb.w	r2, [r7, #289]	@ 0x121
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fd fd7c 	bl	800554c <smooth_speed_transition>
 8007a54:	4603      	mov	r3, r0
 8007a56:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121
         last_speed = motor_speed;
 8007a5a:	4a33      	ldr	r2, [pc, #204]	@ (8007b28 <main+0x1ff0>)
 8007a5c:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 8007a60:	7013      	strb	r3, [r2, #0]
    
         Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -motor_speed, &yaw, &target_yaw);
 8007a62:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	425b      	negs	r3, r3
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	b21b      	sxth	r3, r3
 8007a6e:	4a2f      	ldr	r2, [pc, #188]	@ (8007b2c <main+0x1ff4>)
 8007a70:	9202      	str	r2, [sp, #8]
 8007a72:	4a2f      	ldr	r2, [pc, #188]	@ (8007b30 <main+0x1ff8>)
 8007a74:	9201      	str	r2, [sp, #4]
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	2303      	movs	r3, #3
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	2000      	movs	r0, #0
 8007a80:	f000 fb22 	bl	80080c8 <Motor_Straight>
        
         if(HAL_GetTick() - time_enterpath_case11 >= DELAY_ADJUST && current_distance >= ADJUST_DISTANCE ){
 8007a84:	f005 fad6 	bl	800d034 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	4b25      	ldr	r3, [pc, #148]	@ (8007b20 <main+0x1fe8>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	1ad2      	subs	r2, r2, r3
 8007a90:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	@ 0xfa
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d31e      	bcc.n	8007ad6 <main+0x1f9e>
 8007a98:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8007a9c:	ee07 3a90 	vmov	s15, r3
 8007aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007aa4:	ed97 7a3d 	vldr	s14, [r7, #244]	@ 0xf4
 8007aa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab0:	db11      	blt.n	8007ad6 <main+0x1f9e>
             Adjust_Motors_By_Side_Distances(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, raw_distances[0], raw_distances[2], 82.0f);
 8007ab2:	4b20      	ldr	r3, [pc, #128]	@ (8007b34 <main+0x1ffc>)
 8007ab4:	edd3 7a00 	vldr	s15, [r3]
 8007ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8007b34 <main+0x1ffc>)
 8007aba:	ed93 7a02 	vldr	s14, [r3, #8]
 8007abe:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 8007b38 <main+0x2000>
 8007ac2:	eef0 0a47 	vmov.f32	s1, s14
 8007ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8007aca:	2302      	movs	r3, #2
 8007acc:	2201      	movs	r2, #1
 8007ace:	2103      	movs	r1, #3
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	f002 fc73 	bl	800a3bc <Adjust_Motors_By_Side_Distances>
         }
    
         OLED_ShowNum(4, 4, motor_speed, 2);
 8007ad6:	f897 2121 	ldrb.w	r2, [r7, #289]	@ 0x121
 8007ada:	2302      	movs	r3, #2
 8007adc:	2104      	movs	r1, #4
 8007ade:	2004      	movs	r0, #4
 8007ae0:	f7fd f930 	bl	8004d44 <OLED_ShowNum>
         OLED_ShowNum(4, 1, path, 2);
 8007ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8007b14 <main+0x1fdc>)
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	2302      	movs	r3, #2
 8007aea:	2101      	movs	r1, #1
 8007aec:	2004      	movs	r0, #4
 8007aee:	f7fd f929 	bl	8004d44 <OLED_ShowNum>
         break;
 8007af2:	e06e      	b.n	8007bd2 <main+0x209a>
 8007af4:	f3af 8000 	nop.w
 8007af8:	33333333 	.word	0x33333333
 8007afc:	3ff73333 	.word	0x3ff73333
 8007b00:	2000003c 	.word	0x2000003c
 8007b04:	43340000 	.word	0x43340000
 8007b08:	20000420 	.word	0x20000420
 8007b0c:	2000004c 	.word	0x2000004c
 8007b10:	20000424 	.word	0x20000424
 8007b14:	2000041c 	.word	0x2000041c
 8007b18:	42f00000 	.word	0x42f00000
 8007b1c:	44160000 	.word	0x44160000
 8007b20:	20000598 	.word	0x20000598
 8007b24:	200005d8 	.word	0x200005d8
 8007b28:	200005dc 	.word	0x200005dc
 8007b2c:	200005e4 	.word	0x200005e4
 8007b30:	200005e8 	.word	0x200005e8
 8007b34:	200000cc 	.word	0x200000cc
 8007b38:	42a40000 	.word	0x42a40000
       }

       case 12: {
         static uint32_t start_backward_time = 0;
         
         if (start_backward_time == 0) {
 8007b3c:	4b26      	ldr	r3, [pc, #152]	@ (8007bd8 <main+0x20a0>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d104      	bne.n	8007b4e <main+0x2016>
             start_backward_time = HAL_GetTick();
 8007b44:	f005 fa76 	bl	800d034 <HAL_GetTick>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	4a23      	ldr	r2, [pc, #140]	@ (8007bd8 <main+0x20a0>)
 8007b4c:	6013      	str	r3, [r2, #0]
         }
         
         uint32_t current_time = HAL_GetTick();
 8007b4e:	f005 fa71 	bl	800d034 <HAL_GetTick>
 8007b52:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
         if (current_time - start_backward_time < 3800) {  // 5秒内后退
 8007b56:	4b20      	ldr	r3, [pc, #128]	@ (8007bd8 <main+0x20a0>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	f640 62d7 	movw	r2, #3799	@ 0xed7
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d81a      	bhi.n	8007b9e <main+0x2066>
             Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8007b68:	4b1c      	ldr	r3, [pc, #112]	@ (8007bdc <main+0x20a4>)
 8007b6a:	9302      	str	r3, [sp, #8]
 8007b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8007be0 <main+0x20a8>)
 8007b6e:	9301      	str	r3, [sp, #4]
 8007b70:	f06f 031d 	mvn.w	r3, #29
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	2303      	movs	r3, #3
 8007b78:	2202      	movs	r2, #2
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	f000 faa3 	bl	80080c8 <Motor_Straight>
             // 使用左侧电机调整
             Adjust_Left_Motors_By_Distance(MOTOR_1, MOTOR_3, MOTOR_2, MOTOR_4, raw_distances[0], 50.0f);
 8007b82:	4b18      	ldr	r3, [pc, #96]	@ (8007be4 <main+0x20ac>)
 8007b84:	edd3 7a00 	vldr	s15, [r3]
 8007b88:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8007be8 <main+0x20b0>
 8007b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8007b90:	2303      	movs	r3, #3
 8007b92:	2201      	movs	r2, #1
 8007b94:	2102      	movs	r1, #2
 8007b96:	2000      	movs	r0, #0
 8007b98:	f000 fca8 	bl	80084ec <Adjust_Left_Motors_By_Distance>
 8007b9c:	e00f      	b.n	8007bbe <main+0x2086>
         } else {
             // 5秒后停车
             Motor_SetSpeed(MOTOR_1, 0);
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f000 f911 	bl	8007dc8 <Motor_SetSpeed>
             Motor_SetSpeed(MOTOR_2, 0);
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	2001      	movs	r0, #1
 8007baa:	f000 f90d 	bl	8007dc8 <Motor_SetSpeed>
             Motor_SetSpeed(MOTOR_3, 0);
 8007bae:	2100      	movs	r1, #0
 8007bb0:	2002      	movs	r0, #2
 8007bb2:	f000 f909 	bl	8007dc8 <Motor_SetSpeed>
             Motor_SetSpeed(MOTOR_4, 0);
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	2003      	movs	r0, #3
 8007bba:	f000 f905 	bl	8007dc8 <Motor_SetSpeed>
         }
         
         OLED_ShowNum(4, 1, path, 2);
 8007bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8007bec <main+0x20b4>)
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	2004      	movs	r0, #4
 8007bc8:	f7fd f8bc 	bl	8004d44 <OLED_ShowNum>
         break;
 8007bcc:	bf00      	nop
 8007bce:	f7fe b8ea 	b.w	8005da6 <main+0x26e>
  {
 8007bd2:	f7fe b8e8 	b.w	8005da6 <main+0x26e>
 8007bd6:	bf00      	nop
 8007bd8:	200005e0 	.word	0x200005e0
 8007bdc:	200005e4 	.word	0x200005e4
 8007be0:	200005e8 	.word	0x200005e8
 8007be4:	200000cc 	.word	0x200000cc
 8007be8:	42480000 	.word	0x42480000
 8007bec:	2000041c 	.word	0x2000041c

08007bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b094      	sub	sp, #80	@ 0x50
 8007bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007bf6:	f107 0320 	add.w	r3, r7, #32
 8007bfa:	2230      	movs	r2, #48	@ 0x30
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f00a fbba 	bl	8012378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007c04:	f107 030c 	add.w	r3, r7, #12
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	605a      	str	r2, [r3, #4]
 8007c0e:	609a      	str	r2, [r3, #8]
 8007c10:	60da      	str	r2, [r3, #12]
 8007c12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c14:	2300      	movs	r3, #0
 8007c16:	60bb      	str	r3, [r7, #8]
 8007c18:	4b28      	ldr	r3, [pc, #160]	@ (8007cbc <SystemClock_Config+0xcc>)
 8007c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c1c:	4a27      	ldr	r2, [pc, #156]	@ (8007cbc <SystemClock_Config+0xcc>)
 8007c1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c22:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c24:	4b25      	ldr	r3, [pc, #148]	@ (8007cbc <SystemClock_Config+0xcc>)
 8007c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c2c:	60bb      	str	r3, [r7, #8]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c30:	2300      	movs	r3, #0
 8007c32:	607b      	str	r3, [r7, #4]
 8007c34:	4b22      	ldr	r3, [pc, #136]	@ (8007cc0 <SystemClock_Config+0xd0>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a21      	ldr	r2, [pc, #132]	@ (8007cc0 <SystemClock_Config+0xd0>)
 8007c3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c3e:	6013      	str	r3, [r2, #0]
 8007c40:	4b1f      	ldr	r3, [pc, #124]	@ (8007cc0 <SystemClock_Config+0xd0>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c48:	607b      	str	r3, [r7, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007c50:	2301      	movs	r3, #1
 8007c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007c54:	2310      	movs	r3, #16
 8007c56:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007c60:	2308      	movs	r3, #8
 8007c62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007c64:	23a8      	movs	r3, #168	@ 0xa8
 8007c66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007c68:	2302      	movs	r3, #2
 8007c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007c6c:	2304      	movs	r3, #4
 8007c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007c70:	f107 0320 	add.w	r3, r7, #32
 8007c74:	4618      	mov	r0, r3
 8007c76:	f006 ff0b 	bl	800ea90 <HAL_RCC_OscConfig>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007c80:	f000 f820 	bl	8007cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007c84:	230f      	movs	r3, #15
 8007c86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007c90:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8007c94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007c96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007c9c:	f107 030c 	add.w	r3, r7, #12
 8007ca0:	2105      	movs	r1, #5
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f007 f96c 	bl	800ef80 <HAL_RCC_ClockConfig>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007cae:	f000 f809 	bl	8007cc4 <Error_Handler>
  }
}
 8007cb2:	bf00      	nop
 8007cb4:	3750      	adds	r7, #80	@ 0x50
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	40023800 	.word	0x40023800
 8007cc0:	40007000 	.word	0x40007000

08007cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007cc8:	b672      	cpsid	i
}
 8007cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8007ccc:	bf00      	nop
 8007cce:	e7fd      	b.n	8007ccc <Error_Handler+0x8>

08007cd0 <Motor_Init>:
void Motor_Init(Motor_ID id,
                TIM_HandleTypeDef* pwm_tim, uint32_t pwm_ch,
                GPIO_TypeDef* in1_port, uint16_t in1_pin,
                GPIO_TypeDef* in2_port, uint16_t in2_pin,
                TIM_HandleTypeDef* encoder_tim)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	607a      	str	r2, [r7, #4]
 8007cda:	603b      	str	r3, [r7, #0]
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]
    motors[id].pwm_tim = pwm_tim;
 8007ce0:	7bfa      	ldrb	r2, [r7, #15]
 8007ce2:	4938      	ldr	r1, [pc, #224]	@ (8007dc4 <Motor_Init+0xf4>)
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	440b      	add	r3, r1
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	601a      	str	r2, [r3, #0]
    motors[id].pwm_channel = pwm_ch;
 8007cf2:	7bfa      	ldrb	r2, [r7, #15]
 8007cf4:	4933      	ldr	r1, [pc, #204]	@ (8007dc4 <Motor_Init+0xf4>)
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	440b      	add	r3, r1
 8007d00:	3304      	adds	r3, #4
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	601a      	str	r2, [r3, #0]

    motors[id].in1_port = in1_port;
 8007d06:	7bfa      	ldrb	r2, [r7, #15]
 8007d08:	492e      	ldr	r1, [pc, #184]	@ (8007dc4 <Motor_Init+0xf4>)
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	440b      	add	r3, r1
 8007d14:	3308      	adds	r3, #8
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	601a      	str	r2, [r3, #0]
    motors[id].in1_pin = in1_pin;
 8007d1a:	7bfa      	ldrb	r2, [r7, #15]
 8007d1c:	4929      	ldr	r1, [pc, #164]	@ (8007dc4 <Motor_Init+0xf4>)
 8007d1e:	4613      	mov	r3, r2
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	4413      	add	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	440b      	add	r3, r1
 8007d28:	330c      	adds	r3, #12
 8007d2a:	8b3a      	ldrh	r2, [r7, #24]
 8007d2c:	801a      	strh	r2, [r3, #0]
    motors[id].in2_port = in2_port;
 8007d2e:	7bfa      	ldrb	r2, [r7, #15]
 8007d30:	4924      	ldr	r1, [pc, #144]	@ (8007dc4 <Motor_Init+0xf4>)
 8007d32:	4613      	mov	r3, r2
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	4413      	add	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	440b      	add	r3, r1
 8007d3c:	3310      	adds	r3, #16
 8007d3e:	69fa      	ldr	r2, [r7, #28]
 8007d40:	601a      	str	r2, [r3, #0]
    motors[id].in2_pin = in2_pin;
 8007d42:	7bfa      	ldrb	r2, [r7, #15]
 8007d44:	491f      	ldr	r1, [pc, #124]	@ (8007dc4 <Motor_Init+0xf4>)
 8007d46:	4613      	mov	r3, r2
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	440b      	add	r3, r1
 8007d50:	3314      	adds	r3, #20
 8007d52:	8c3a      	ldrh	r2, [r7, #32]
 8007d54:	801a      	strh	r2, [r3, #0]

    motors[id].encoder_tim = encoder_tim;
 8007d56:	7bfa      	ldrb	r2, [r7, #15]
 8007d58:	491a      	ldr	r1, [pc, #104]	@ (8007dc4 <Motor_Init+0xf4>)
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	4413      	add	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	440b      	add	r3, r1
 8007d64:	3318      	adds	r3, #24
 8007d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d68:	601a      	str	r2, [r3, #0]
    motors[id].encoder_offset = 0;
 8007d6a:	7bfa      	ldrb	r2, [r7, #15]
 8007d6c:	4915      	ldr	r1, [pc, #84]	@ (8007dc4 <Motor_Init+0xf4>)
 8007d6e:	4613      	mov	r3, r2
 8007d70:	00db      	lsls	r3, r3, #3
 8007d72:	4413      	add	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	440b      	add	r3, r1
 8007d78:	331c      	adds	r3, #28
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
    motors[id].encoder_total = 0;
 8007d7e:	7bfa      	ldrb	r2, [r7, #15]
 8007d80:	4910      	ldr	r1, [pc, #64]	@ (8007dc4 <Motor_Init+0xf4>)
 8007d82:	4613      	mov	r3, r2
 8007d84:	00db      	lsls	r3, r3, #3
 8007d86:	4413      	add	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	3320      	adds	r3, #32
 8007d8e:	2200      	movs	r2, #0
 8007d90:	601a      	str	r2, [r3, #0]

    HAL_TIM_PWM_Start(pwm_tim, pwm_ch);
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	68b8      	ldr	r0, [r7, #8]
 8007d96:	f007 fbe5 	bl	800f564 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(encoder_tim, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8007d9a:	2104      	movs	r1, #4
 8007d9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d9e:	f007 fd4f 	bl	800f840 <HAL_TIM_Encoder_Start>
    motors[id].encoder_offset = (int32_t)__HAL_TIM_GET_COUNTER(encoder_tim);
 8007da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da8:	7bfa      	ldrb	r2, [r7, #15]
 8007daa:	4618      	mov	r0, r3
 8007dac:	4905      	ldr	r1, [pc, #20]	@ (8007dc4 <Motor_Init+0xf4>)
 8007dae:	4613      	mov	r3, r2
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	440b      	add	r3, r1
 8007db8:	331c      	adds	r3, #28
 8007dba:	6018      	str	r0, [r3, #0]
}
 8007dbc:	bf00      	nop
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20000384 	.word	0x20000384

08007dc8 <Motor_SetSpeed>:

void Motor_SetSpeed(Motor_ID id, int16_t speed)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	460a      	mov	r2, r1
 8007dd2:	71fb      	strb	r3, [r7, #7]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	80bb      	strh	r3, [r7, #4]
    speed = (speed > 100) ? 100 : (speed < -100) ? -100 : speed;
 8007dd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007ddc:	2b64      	cmp	r3, #100	@ 0x64
 8007dde:	dc08      	bgt.n	8007df2 <Motor_SetSpeed+0x2a>
 8007de0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007de4:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8007de8:	4293      	cmp	r3, r2
 8007dea:	bfb8      	it	lt
 8007dec:	4613      	movlt	r3, r2
 8007dee:	b21b      	sxth	r3, r3
 8007df0:	e000      	b.n	8007df4 <Motor_SetSpeed+0x2c>
 8007df2:	2364      	movs	r3, #100	@ 0x64
 8007df4:	80bb      	strh	r3, [r7, #4]

    if(speed > 0) {
 8007df6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	dd2c      	ble.n	8007e58 <Motor_SetSpeed+0x90>
        HAL_GPIO_WritePin(motors[id].in1_port, motors[id].in1_pin, GPIO_PIN_SET);
 8007dfe:	79fa      	ldrb	r2, [r7, #7]
 8007e00:	4978      	ldr	r1, [pc, #480]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007e02:	4613      	mov	r3, r2
 8007e04:	00db      	lsls	r3, r3, #3
 8007e06:	4413      	add	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	440b      	add	r3, r1
 8007e0c:	3308      	adds	r3, #8
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	79fa      	ldrb	r2, [r7, #7]
 8007e12:	4974      	ldr	r1, [pc, #464]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007e14:	4613      	mov	r3, r2
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	440b      	add	r3, r1
 8007e1e:	330c      	adds	r3, #12
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	2201      	movs	r2, #1
 8007e24:	4619      	mov	r1, r3
 8007e26:	f005 fc75 	bl	800d714 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motors[id].in2_port, motors[id].in2_pin, GPIO_PIN_RESET);
 8007e2a:	79fa      	ldrb	r2, [r7, #7]
 8007e2c:	496d      	ldr	r1, [pc, #436]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007e2e:	4613      	mov	r3, r2
 8007e30:	00db      	lsls	r3, r3, #3
 8007e32:	4413      	add	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	440b      	add	r3, r1
 8007e38:	3310      	adds	r3, #16
 8007e3a:	6818      	ldr	r0, [r3, #0]
 8007e3c:	79fa      	ldrb	r2, [r7, #7]
 8007e3e:	4969      	ldr	r1, [pc, #420]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007e40:	4613      	mov	r3, r2
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	4413      	add	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	440b      	add	r3, r1
 8007e4a:	3314      	adds	r3, #20
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	4619      	mov	r1, r3
 8007e52:	f005 fc5f 	bl	800d714 <HAL_GPIO_WritePin>
 8007e56:	e064      	b.n	8007f22 <Motor_SetSpeed+0x15a>
    } else if (speed<0) {
 8007e58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	da30      	bge.n	8007ec2 <Motor_SetSpeed+0xfa>
        HAL_GPIO_WritePin(motors[id].in1_port, motors[id].in1_pin, GPIO_PIN_RESET);
 8007e60:	79fa      	ldrb	r2, [r7, #7]
 8007e62:	4960      	ldr	r1, [pc, #384]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007e64:	4613      	mov	r3, r2
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	440b      	add	r3, r1
 8007e6e:	3308      	adds	r3, #8
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	79fa      	ldrb	r2, [r7, #7]
 8007e74:	495b      	ldr	r1, [pc, #364]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007e76:	4613      	mov	r3, r2
 8007e78:	00db      	lsls	r3, r3, #3
 8007e7a:	4413      	add	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	440b      	add	r3, r1
 8007e80:	330c      	adds	r3, #12
 8007e82:	881b      	ldrh	r3, [r3, #0]
 8007e84:	2200      	movs	r2, #0
 8007e86:	4619      	mov	r1, r3
 8007e88:	f005 fc44 	bl	800d714 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motors[id].in2_port, motors[id].in2_pin, GPIO_PIN_SET);
 8007e8c:	79fa      	ldrb	r2, [r7, #7]
 8007e8e:	4955      	ldr	r1, [pc, #340]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007e90:	4613      	mov	r3, r2
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	4413      	add	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	3310      	adds	r3, #16
 8007e9c:	6818      	ldr	r0, [r3, #0]
 8007e9e:	79fa      	ldrb	r2, [r7, #7]
 8007ea0:	4950      	ldr	r1, [pc, #320]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	00db      	lsls	r3, r3, #3
 8007ea6:	4413      	add	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	440b      	add	r3, r1
 8007eac:	3314      	adds	r3, #20
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	f005 fc2e 	bl	800d714 <HAL_GPIO_WritePin>
        speed = -speed;
 8007eb8:	88bb      	ldrh	r3, [r7, #4]
 8007eba:	425b      	negs	r3, r3
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	80bb      	strh	r3, [r7, #4]
 8007ec0:	e02f      	b.n	8007f22 <Motor_SetSpeed+0x15a>
    }else if(speed ==0){
 8007ec2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d12b      	bne.n	8007f22 <Motor_SetSpeed+0x15a>
        HAL_GPIO_WritePin(motors[id].in1_port, motors[id].in1_pin, GPIO_PIN_SET);
 8007eca:	79fa      	ldrb	r2, [r7, #7]
 8007ecc:	4945      	ldr	r1, [pc, #276]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007ece:	4613      	mov	r3, r2
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	4413      	add	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	440b      	add	r3, r1
 8007ed8:	3308      	adds	r3, #8
 8007eda:	6818      	ldr	r0, [r3, #0]
 8007edc:	79fa      	ldrb	r2, [r7, #7]
 8007ede:	4941      	ldr	r1, [pc, #260]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	440b      	add	r3, r1
 8007eea:	330c      	adds	r3, #12
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	f005 fc0f 	bl	800d714 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motors[id].in2_port, motors[id].in2_pin, GPIO_PIN_SET);
 8007ef6:	79fa      	ldrb	r2, [r7, #7]
 8007ef8:	493a      	ldr	r1, [pc, #232]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007efa:	4613      	mov	r3, r2
 8007efc:	00db      	lsls	r3, r3, #3
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	440b      	add	r3, r1
 8007f04:	3310      	adds	r3, #16
 8007f06:	6818      	ldr	r0, [r3, #0]
 8007f08:	79fa      	ldrb	r2, [r7, #7]
 8007f0a:	4936      	ldr	r1, [pc, #216]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	4413      	add	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	440b      	add	r3, r1
 8007f16:	3314      	adds	r3, #20
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	f005 fbf9 	bl	800d714 <HAL_GPIO_WritePin>
    }

    uint32_t duty = (speed * 9999) / 100;
 8007f22:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007f26:	f242 720f 	movw	r2, #9999	@ 0x270f
 8007f2a:	fb02 f303 	mul.w	r3, r2, r3
 8007f2e:	4a2e      	ldr	r2, [pc, #184]	@ (8007fe8 <Motor_SetSpeed+0x220>)
 8007f30:	fb82 1203 	smull	r1, r2, r2, r3
 8007f34:	1152      	asrs	r2, r2, #5
 8007f36:	17db      	asrs	r3, r3, #31
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 8007f3c:	79fa      	ldrb	r2, [r7, #7]
 8007f3e:	4929      	ldr	r1, [pc, #164]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007f40:	4613      	mov	r3, r2
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	4413      	add	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	440b      	add	r3, r1
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10b      	bne.n	8007f6a <Motor_SetSpeed+0x1a2>
 8007f52:	79fa      	ldrb	r2, [r7, #7]
 8007f54:	4923      	ldr	r1, [pc, #140]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007f56:	4613      	mov	r3, r2
 8007f58:	00db      	lsls	r3, r3, #3
 8007f5a:	4413      	add	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	440b      	add	r3, r1
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8007f68:	e038      	b.n	8007fdc <Motor_SetSpeed+0x214>
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 8007f6a:	79fa      	ldrb	r2, [r7, #7]
 8007f6c:	491d      	ldr	r1, [pc, #116]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007f6e:	4613      	mov	r3, r2
 8007f70:	00db      	lsls	r3, r3, #3
 8007f72:	4413      	add	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	440b      	add	r3, r1
 8007f78:	3304      	adds	r3, #4
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b04      	cmp	r3, #4
 8007f7e:	d10b      	bne.n	8007f98 <Motor_SetSpeed+0x1d0>
 8007f80:	79fa      	ldrb	r2, [r7, #7]
 8007f82:	4918      	ldr	r1, [pc, #96]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007f84:	4613      	mov	r3, r2
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	4413      	add	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	440b      	add	r3, r1
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007f96:	e021      	b.n	8007fdc <Motor_SetSpeed+0x214>
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 8007f98:	79fa      	ldrb	r2, [r7, #7]
 8007f9a:	4912      	ldr	r1, [pc, #72]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b08      	cmp	r3, #8
 8007fac:	d10b      	bne.n	8007fc6 <Motor_SetSpeed+0x1fe>
 8007fae:	79fa      	ldrb	r2, [r7, #7]
 8007fb0:	490c      	ldr	r1, [pc, #48]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	440b      	add	r3, r1
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8007fc4:	e00a      	b.n	8007fdc <Motor_SetSpeed+0x214>
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 8007fc6:	79fa      	ldrb	r2, [r7, #7]
 8007fc8:	4906      	ldr	r1, [pc, #24]	@ (8007fe4 <Motor_SetSpeed+0x21c>)
 8007fca:	4613      	mov	r3, r2
 8007fcc:	00db      	lsls	r3, r3, #3
 8007fce:	4413      	add	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	440b      	add	r3, r1
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8007fdc:	bf00      	nop
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	20000384 	.word	0x20000384
 8007fe8:	51eb851f 	.word	0x51eb851f

08007fec <Motor_GetEncoder>:

int32_t Motor_GetEncoder(Motor_ID id)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	71fb      	strb	r3, [r7, #7]
    int32_t current_cnt = (int32_t)__HAL_TIM_GET_COUNTER(motors[id].encoder_tim);
 8007ff6:	79fa      	ldrb	r2, [r7, #7]
 8007ff8:	492a      	ldr	r1, [pc, #168]	@ (80080a4 <Motor_GetEncoder+0xb8>)
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	440b      	add	r3, r1
 8008004:	3318      	adds	r3, #24
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800800c:	60bb      	str	r3, [r7, #8]
    int32_t diff = current_cnt - motors[id].encoder_offset;
 800800e:	79fa      	ldrb	r2, [r7, #7]
 8008010:	4924      	ldr	r1, [pc, #144]	@ (80080a4 <Motor_GetEncoder+0xb8>)
 8008012:	4613      	mov	r3, r2
 8008014:	00db      	lsls	r3, r3, #3
 8008016:	4413      	add	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	440b      	add	r3, r1
 800801c:	331c      	adds	r3, #28
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	60fb      	str	r3, [r7, #12]
    
    if (diff > 32767) diff -= 65536;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800802c:	db04      	blt.n	8008038 <Motor_GetEncoder+0x4c>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8008034:	60fb      	str	r3, [r7, #12]
 8008036:	e007      	b.n	8008048 <Motor_GetEncoder+0x5c>
    else if (diff < -32768) diff += 65536;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800803e:	da03      	bge.n	8008048 <Motor_GetEncoder+0x5c>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8008046:	60fb      	str	r3, [r7, #12]
    
    motors[id].encoder_total += diff;
 8008048:	79fa      	ldrb	r2, [r7, #7]
 800804a:	4916      	ldr	r1, [pc, #88]	@ (80080a4 <Motor_GetEncoder+0xb8>)
 800804c:	4613      	mov	r3, r2
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	4413      	add	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	440b      	add	r3, r1
 8008056:	3320      	adds	r3, #32
 8008058:	6819      	ldr	r1, [r3, #0]
 800805a:	79fa      	ldrb	r2, [r7, #7]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4419      	add	r1, r3
 8008060:	4810      	ldr	r0, [pc, #64]	@ (80080a4 <Motor_GetEncoder+0xb8>)
 8008062:	4613      	mov	r3, r2
 8008064:	00db      	lsls	r3, r3, #3
 8008066:	4413      	add	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4403      	add	r3, r0
 800806c:	3320      	adds	r3, #32
 800806e:	6019      	str	r1, [r3, #0]
    motors[id].encoder_offset = current_cnt;
 8008070:	79fa      	ldrb	r2, [r7, #7]
 8008072:	490c      	ldr	r1, [pc, #48]	@ (80080a4 <Motor_GetEncoder+0xb8>)
 8008074:	4613      	mov	r3, r2
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	331c      	adds	r3, #28
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	601a      	str	r2, [r3, #0]
    
    return motors[id].encoder_total;
 8008084:	79fa      	ldrb	r2, [r7, #7]
 8008086:	4907      	ldr	r1, [pc, #28]	@ (80080a4 <Motor_GetEncoder+0xb8>)
 8008088:	4613      	mov	r3, r2
 800808a:	00db      	lsls	r3, r3, #3
 800808c:	4413      	add	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	440b      	add	r3, r1
 8008092:	3320      	adds	r3, #32
 8008094:	681b      	ldr	r3, [r3, #0]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	20000384 	.word	0x20000384

080080a8 <Reset_Timer>:
    prev_counter = current_counter;
    return diff ; 
}

void Reset_Timer(void)
{
 80080a8:	b480      	push	{r7}
 80080aa:	af00      	add	r7, sp, #0
    prev_counter = __HAL_TIM_GET_COUNTER(&htim6);
 80080ac:	4b04      	ldr	r3, [pc, #16]	@ (80080c0 <Reset_Timer+0x18>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b2:	4a04      	ldr	r2, [pc, #16]	@ (80080c4 <Reset_Timer+0x1c>)
 80080b4:	6013      	str	r3, [r2, #0]
}
 80080b6:	bf00      	nop
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	20000788 	.word	0x20000788
 80080c4:	200005ec 	.word	0x200005ec

080080c8 <Motor_Straight>:
    Motor_SetSpeed(id2, motor_speed2);
    Motor_SetSpeed(id3, motor_speed3);
    Motor_SetSpeed(id4, motor_speed4);
}

void Motor_Straight(Motor_ID id1, Motor_ID id2, Motor_ID id3, Motor_ID id4, int16_t speed, float* yaw, float* target_yaw) {
 80080c8:	b590      	push	{r4, r7, lr}
 80080ca:	b09f      	sub	sp, #124	@ 0x7c
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4604      	mov	r4, r0
 80080d0:	4608      	mov	r0, r1
 80080d2:	4611      	mov	r1, r2
 80080d4:	461a      	mov	r2, r3
 80080d6:	4623      	mov	r3, r4
 80080d8:	71fb      	strb	r3, [r7, #7]
 80080da:	4603      	mov	r3, r0
 80080dc:	71bb      	strb	r3, [r7, #6]
 80080de:	460b      	mov	r3, r1
 80080e0:	717b      	strb	r3, [r7, #5]
 80080e2:	4613      	mov	r3, r2
 80080e4:	713b      	strb	r3, [r7, #4]
    // 使用 HAL_GetTick 计算时间差
    static uint32_t prev_tick = 0;
    uint32_t current_tick = HAL_GetTick();
 80080e6:	f004 ffa5 	bl	800d034 <HAL_GetTick>
 80080ea:	66b8      	str	r0, [r7, #104]	@ 0x68
    float dt = (current_tick - prev_tick) / 1000.0f;  // 转换为秒
 80080ec:	4b7d      	ldr	r3, [pc, #500]	@ (80082e4 <Motor_Straight+0x21c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	ee07 3a90 	vmov	s15, r3
 80080f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80080fc:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 80082e8 <Motor_Straight+0x220>
 8008100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008104:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    prev_tick = current_tick;
 8008108:	4a76      	ldr	r2, [pc, #472]	@ (80082e4 <Motor_Straight+0x21c>)
 800810a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800810c:	6013      	str	r3, [r2, #0]
        
    // 添加时间差保护
    if (dt <= 0.001f) {
 800810e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8008112:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80082ec <Motor_Straight+0x224>
 8008116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800811a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800811e:	d801      	bhi.n	8008124 <Motor_Straight+0x5c>
        dt = 0.001f;  // 最小时间差为1ms
 8008120:	4b73      	ldr	r3, [pc, #460]	@ (80082f0 <Motor_Straight+0x228>)
 8008122:	677b      	str	r3, [r7, #116]	@ 0x74

    // 静态变量存储上一次的编码器值
    static int32_t prev_enc1 = 0, prev_enc2 = 0, prev_enc3 = 0, prev_enc4 = 0;

    // 获取当前编码器值
    int32_t enc1 = Motor_GetEncoder(id1);
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	4618      	mov	r0, r3
 8008128:	f7ff ff60 	bl	8007fec <Motor_GetEncoder>
 800812c:	6678      	str	r0, [r7, #100]	@ 0x64
    int32_t enc2 = -Motor_GetEncoder(id2);
 800812e:	79bb      	ldrb	r3, [r7, #6]
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff ff5b 	bl	8007fec <Motor_GetEncoder>
 8008136:	4603      	mov	r3, r0
 8008138:	425b      	negs	r3, r3
 800813a:	663b      	str	r3, [r7, #96]	@ 0x60
    int32_t enc3 = Motor_GetEncoder(id3);
 800813c:	797b      	ldrb	r3, [r7, #5]
 800813e:	4618      	mov	r0, r3
 8008140:	f7ff ff54 	bl	8007fec <Motor_GetEncoder>
 8008144:	65f8      	str	r0, [r7, #92]	@ 0x5c
    int32_t enc4 = -Motor_GetEncoder(id4);
 8008146:	793b      	ldrb	r3, [r7, #4]
 8008148:	4618      	mov	r0, r3
 800814a:	f7ff ff4f 	bl	8007fec <Motor_GetEncoder>
 800814e:	4603      	mov	r3, r0
 8008150:	425b      	negs	r3, r3
 8008152:	65bb      	str	r3, [r7, #88]	@ 0x58

    // 计算编码器速度（单位时间内的变化量）
    float speed1 = (enc1 - prev_enc1) / dt;
 8008154:	4b67      	ldr	r3, [pc, #412]	@ (80082f4 <Motor_Straight+0x22c>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	ee07 3a90 	vmov	s15, r3
 8008160:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008164:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8008168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800816c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float speed2 = (enc2 - prev_enc2) / dt;
 8008170:	4b61      	ldr	r3, [pc, #388]	@ (80082f8 <Motor_Straight+0x230>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	ee07 3a90 	vmov	s15, r3
 800817c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008180:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8008184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008188:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    float speed3 = (enc3 - prev_enc3) / dt;
 800818c:	4b5b      	ldr	r3, [pc, #364]	@ (80082fc <Motor_Straight+0x234>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	ee07 3a90 	vmov	s15, r3
 8008198:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800819c:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80081a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081a4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float speed4 = (enc4 - prev_enc4) / dt;
 80081a8:	4b55      	ldr	r3, [pc, #340]	@ (8008300 <Motor_Straight+0x238>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	ee07 3a90 	vmov	s15, r3
 80081b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80081b8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80081bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081c0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    // OLED_ShowNum(2,2,(int16_t)fabsf(speed3),4);  // 左后数字
    // OLED_ShowChar(2,9,speed4 >= 0 ? '+' : '-');  // 右前符号
    // OLED_ShowNum(2,10,(int16_t)fabsf(speed4),4);  // 右前数字

    // 更新上一次的编码器值
    prev_enc1 = enc1;
 80081c4:	4a4b      	ldr	r2, [pc, #300]	@ (80082f4 <Motor_Straight+0x22c>)
 80081c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081c8:	6013      	str	r3, [r2, #0]
    prev_enc2 = enc2;
 80081ca:	4a4b      	ldr	r2, [pc, #300]	@ (80082f8 <Motor_Straight+0x230>)
 80081cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081ce:	6013      	str	r3, [r2, #0]
    prev_enc3 = enc3;
 80081d0:	4a4a      	ldr	r2, [pc, #296]	@ (80082fc <Motor_Straight+0x234>)
 80081d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081d4:	6013      	str	r3, [r2, #0]
    prev_enc4 = enc4;
 80081d6:	4a4a      	ldr	r2, [pc, #296]	@ (8008300 <Motor_Straight+0x238>)
 80081d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081da:	6013      	str	r3, [r2, #0]

    // 获取当前偏航角
    float pitch, roll, current_yaw;
    if (MPU6050_DMP_Get_Data(&pitch, &roll, &current_yaw) != 0) {
 80081dc:	f107 020c 	add.w	r2, r7, #12
 80081e0:	f107 0110 	add.w	r1, r7, #16
 80081e4:	f107 0314 	add.w	r3, r7, #20
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fc fb55 	bl	8004898 <MPU6050_DMP_Get_Data>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f040 816a 	bne.w	80084ca <Motor_Straight+0x402>
        // Motor_SetSpeed(id2, 0);
        // Motor_SetSpeed(id3, 0);
        // Motor_SetSpeed(id4, 0);
        return;
    }
    *yaw = current_yaw;
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081fc:	601a      	str	r2, [r3, #0]

    // 计算偏航角误差
    float yaw_error = *target_yaw - *yaw;
 80081fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008202:	ed93 7a00 	vldr	s14, [r3]
 8008206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800820a:	edd3 7a00 	vldr	s15, [r3]
 800820e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008212:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    if (yaw_error > 180) yaw_error -= 360;
 8008216:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800821a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8008304 <Motor_Straight+0x23c>
 800821e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008226:	dd08      	ble.n	800823a <Motor_Straight+0x172>
 8008228:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800822c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8008308 <Motor_Straight+0x240>
 8008230:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008234:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 8008238:	e010      	b.n	800825c <Motor_Straight+0x194>
    else if (yaw_error < -180) yaw_error += 360;
 800823a:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800823e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800830c <Motor_Straight+0x244>
 8008242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800824a:	d507      	bpl.n	800825c <Motor_Straight+0x194>
 800824c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8008250:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8008308 <Motor_Straight+0x240>
 8008254:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008258:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

    // 计算速度误差
    float left_speed_error = speed1 - speed3;  // 左侧轮子速度同步
 800825c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8008260:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8008264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008268:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float right_speed_error = speed2 - speed4;  // 右侧轮子速度同步
 800826c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8008270:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8008274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008278:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float position_speed_error = (left_speed_error + right_speed_error) / 2;  // 左右两侧速度同步
 800827c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8008280:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8008284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008288:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800828c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008290:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // 速度分配 - 修正后的分配方式
    float base_speed = speed;
 8008294:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	@ 0x88
 8008298:	ee07 3a90 	vmov	s15, r3
 800829c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082a0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    
    // 限制PID输出的最大值，防止过度修正
    float max_pid_output = base_speed * 0.3f;
 80082a4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80082a8:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008310 <Motor_Straight+0x248>
 80082ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80082b0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    
    // 计算偏航角PID输出
    float yaw_pid_output = 0.0f;
 80082b4:	f04f 0300 	mov.w	r3, #0
 80082b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (fabs(yaw_error) > 0.5f) {
 80082ba:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80082be:	eef0 7ae7 	vabs.f32	s15, s15
 80082c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80082c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ce:	dd23      	ble.n	8008318 <Motor_Straight+0x250>
        yaw_pid_output = PID_Calculate(&pid_yaw, yaw_error, dt);
 80082d0:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 80082d4:	ed97 0a1c 	vldr	s0, [r7, #112]	@ 0x70
 80082d8:	480e      	ldr	r0, [pc, #56]	@ (8008314 <Motor_Straight+0x24c>)
 80082da:	f003 f87d 	bl	800b3d8 <PID_Calculate>
 80082de:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
 80082e2:	e01c      	b.n	800831e <Motor_Straight+0x256>
 80082e4:	200005f0 	.word	0x200005f0
 80082e8:	447a0000 	.word	0x447a0000
 80082ec:	3a83126f 	.word	0x3a83126f
 80082f0:	3a83126f 	.word	0x3a83126f
 80082f4:	200005f4 	.word	0x200005f4
 80082f8:	200005f8 	.word	0x200005f8
 80082fc:	200005fc 	.word	0x200005fc
 8008300:	20000600 	.word	0x20000600
 8008304:	43340000 	.word	0x43340000
 8008308:	43b40000 	.word	0x43b40000
 800830c:	c3340000 	.word	0xc3340000
 8008310:	3e99999a 	.word	0x3e99999a
 8008314:	20000068 	.word	0x20000068
        // yaw_pid_output = fmaxf(fminf(yaw_pid_output, max_pid_output*1), -max_pid_output*1);
    } else {
        // 误差小于1度时，重置PID控制器
        PID_Reset(&pid_yaw);
 8008318:	486e      	ldr	r0, [pc, #440]	@ (80084d4 <Motor_Straight+0x40c>)
 800831a:	f003 f8d9 	bl	800b4d0 <PID_Reset>
    }
    
    // 计算左右轮组的速度PID输出
    float left_pid_output = PID_Calculate(&pid_front, left_speed_error, dt);
 800831e:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8008322:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8008326:	486c      	ldr	r0, [pc, #432]	@ (80084d8 <Motor_Straight+0x410>)
 8008328:	f003 f856 	bl	800b3d8 <PID_Calculate>
 800832c:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
    float right_pid_output = PID_Calculate(&pid_rear, right_speed_error, dt);
 8008330:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8008334:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8008338:	4868      	ldr	r0, [pc, #416]	@ (80084dc <Motor_Straight+0x414>)
 800833a:	f003 f84d 	bl	800b3d8 <PID_Calculate>
 800833e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
    float position_pid_output = PID_Calculate(&pid_position, position_speed_error + yaw_pid_output, dt);
 8008342:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8008346:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800834a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800834e:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8008352:	eeb0 0a67 	vmov.f32	s0, s15
 8008356:	4862      	ldr	r0, [pc, #392]	@ (80084e0 <Motor_Straight+0x418>)
 8008358:	f003 f83e 	bl	800b3d8 <PID_Calculate>
 800835c:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    // left_pid_output = fmaxf(fminf(left_pid_output, max_pid_output*1), -max_pid_output*1);
    // right_pid_output = fmaxf(fminf(right_pid_output, max_pid_output*1), -max_pid_output*1);
    // position_pid_output = fmaxf(fminf(position_pid_output, max_pid_output*1), -max_pid_output*1);
    
    // 左侧轮子 - 正转
    float motor_speed1 = -(base_speed - left_pid_output - position_pid_output - yaw_pid_output);  // 左前
 8008360:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8008364:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8008368:	ee37 7a67 	vsub.f32	s14, s14, s15
 800836c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8008370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008374:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8008378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800837c:	eef1 7a67 	vneg.f32	s15, s15
 8008380:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float motor_speed3 = (base_speed + left_pid_output - position_pid_output - yaw_pid_output);   // 左后
 8008384:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8008388:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800838c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008390:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8008394:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008398:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800839c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083a0:	edc7 7a08 	vstr	s15, [r7, #32]
    
    // 右侧轮子 - 反转
    float motor_speed2 = (base_speed - right_pid_output + position_pid_output + yaw_pid_output);  // 右后
 80083a4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80083a8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80083ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80083b0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80083b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083b8:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80083bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083c0:	edc7 7a07 	vstr	s15, [r7, #28]
    float motor_speed4 = -(base_speed + right_pid_output + position_pid_output + yaw_pid_output); // 右前
 80083c4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80083c8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80083cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083d0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80083d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083d8:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80083dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083e0:	eef1 7a67 	vneg.f32	s15, s15
 80083e4:	edc7 7a06 	vstr	s15, [r7, #24]

    // 限幅
    motor_speed1 = fmaxf(fminf(motor_speed1, 100.0f), -100.0f);
 80083e8:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 80084e4 <Motor_Straight+0x41c>
 80083ec:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80083f0:	f00b fe7b 	bl	80140ea <fminf>
 80083f4:	eef0 7a40 	vmov.f32	s15, s0
 80083f8:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 80084e8 <Motor_Straight+0x420>
 80083fc:	eeb0 0a67 	vmov.f32	s0, s15
 8008400:	f00b fe56 	bl	80140b0 <fmaxf>
 8008404:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    motor_speed2 = fmaxf(fminf(motor_speed2, 100.0f), -100.0f);
 8008408:	eddf 0a36 	vldr	s1, [pc, #216]	@ 80084e4 <Motor_Straight+0x41c>
 800840c:	ed97 0a07 	vldr	s0, [r7, #28]
 8008410:	f00b fe6b 	bl	80140ea <fminf>
 8008414:	eef0 7a40 	vmov.f32	s15, s0
 8008418:	eddf 0a33 	vldr	s1, [pc, #204]	@ 80084e8 <Motor_Straight+0x420>
 800841c:	eeb0 0a67 	vmov.f32	s0, s15
 8008420:	f00b fe46 	bl	80140b0 <fmaxf>
 8008424:	ed87 0a07 	vstr	s0, [r7, #28]
    motor_speed3 = fmaxf(fminf(motor_speed3, 100.0f), -100.0f);
 8008428:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 80084e4 <Motor_Straight+0x41c>
 800842c:	ed97 0a08 	vldr	s0, [r7, #32]
 8008430:	f00b fe5b 	bl	80140ea <fminf>
 8008434:	eef0 7a40 	vmov.f32	s15, s0
 8008438:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 80084e8 <Motor_Straight+0x420>
 800843c:	eeb0 0a67 	vmov.f32	s0, s15
 8008440:	f00b fe36 	bl	80140b0 <fmaxf>
 8008444:	ed87 0a08 	vstr	s0, [r7, #32]
    motor_speed4 = fmaxf(fminf(motor_speed4, 100.0f), -100.0f);
 8008448:	eddf 0a26 	vldr	s1, [pc, #152]	@ 80084e4 <Motor_Straight+0x41c>
 800844c:	ed97 0a06 	vldr	s0, [r7, #24]
 8008450:	f00b fe4b 	bl	80140ea <fminf>
 8008454:	eef0 7a40 	vmov.f32	s15, s0
 8008458:	eddf 0a23 	vldr	s1, [pc, #140]	@ 80084e8 <Motor_Straight+0x420>
 800845c:	eeb0 0a67 	vmov.f32	s0, s15
 8008460:	f00b fe26 	bl	80140b0 <fmaxf>
 8008464:	ed87 0a06 	vstr	s0, [r7, #24]

    // 设置电机速度
    Motor_SetSpeed(id1, motor_speed1);
 8008468:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800846c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008470:	ee17 3a90 	vmov	r3, s15
 8008474:	b21a      	sxth	r2, r3
 8008476:	79fb      	ldrb	r3, [r7, #7]
 8008478:	4611      	mov	r1, r2
 800847a:	4618      	mov	r0, r3
 800847c:	f7ff fca4 	bl	8007dc8 <Motor_SetSpeed>
    Motor_SetSpeed(id2, motor_speed2);
 8008480:	edd7 7a07 	vldr	s15, [r7, #28]
 8008484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008488:	ee17 3a90 	vmov	r3, s15
 800848c:	b21a      	sxth	r2, r3
 800848e:	79bb      	ldrb	r3, [r7, #6]
 8008490:	4611      	mov	r1, r2
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff fc98 	bl	8007dc8 <Motor_SetSpeed>
    Motor_SetSpeed(id3, motor_speed3);
 8008498:	edd7 7a08 	vldr	s15, [r7, #32]
 800849c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084a0:	ee17 3a90 	vmov	r3, s15
 80084a4:	b21a      	sxth	r2, r3
 80084a6:	797b      	ldrb	r3, [r7, #5]
 80084a8:	4611      	mov	r1, r2
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7ff fc8c 	bl	8007dc8 <Motor_SetSpeed>
    Motor_SetSpeed(id4, motor_speed4);
 80084b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80084b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084b8:	ee17 3a90 	vmov	r3, s15
 80084bc:	b21a      	sxth	r2, r3
 80084be:	793b      	ldrb	r3, [r7, #4]
 80084c0:	4611      	mov	r1, r2
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff fc80 	bl	8007dc8 <Motor_SetSpeed>
 80084c8:	e000      	b.n	80084cc <Motor_Straight+0x404>
        return;
 80084ca:	bf00      	nop
}
 80084cc:	377c      	adds	r7, #124	@ 0x7c
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd90      	pop	{r4, r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20000068 	.word	0x20000068
 80084d8:	20000080 	.word	0x20000080
 80084dc:	20000098 	.word	0x20000098
 80084e0:	200000b0 	.word	0x200000b0
 80084e4:	42c80000 	.word	0x42c80000
 80084e8:	c2c80000 	.word	0xc2c80000

080084ec <Adjust_Left_Motors_By_Distance>:
}

#define magnification 0.9
#define magnification_close 0.8

void Adjust_Left_Motors_By_Distance(Motor_ID id1, Motor_ID id3, Motor_ID id2, Motor_ID id4, float raw_distance, float threshold) {
 80084ec:	b590      	push	{r4, r7, lr}
 80084ee:	b091      	sub	sp, #68	@ 0x44
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4604      	mov	r4, r0
 80084f4:	4608      	mov	r0, r1
 80084f6:	4611      	mov	r1, r2
 80084f8:	461a      	mov	r2, r3
 80084fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80084fe:	edc7 0a01 	vstr	s1, [r7, #4]
 8008502:	4623      	mov	r3, r4
 8008504:	73fb      	strb	r3, [r7, #15]
 8008506:	4603      	mov	r3, r0
 8008508:	73bb      	strb	r3, [r7, #14]
 800850a:	460b      	mov	r3, r1
 800850c:	737b      	strb	r3, [r7, #13]
 800850e:	4613      	mov	r3, r2
 8008510:	733b      	strb	r3, [r7, #12]
    static uint32_t adjust_start_time = 0;
    static uint32_t last_adjustment_time = 0;  // 添加上次调整时间记录
    const uint32_t COOLDOWN_PERIOD = 500;    // 冷却时间0.5秒
 8008512:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8008516:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const uint32_t ADJUST_DURATION = 300;      // 调整持续时间300ms
 8008518:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800851c:	63bb      	str	r3, [r7, #56]	@ 0x38
    const float SPEED_ADJUST_RATIO = 0.1f;     // 速度调整比例10%
 800851e:	4b9a      	ldr	r3, [pc, #616]	@ (8008788 <Adjust_Left_Motors_By_Distance+0x29c>)
 8008520:	637b      	str	r3, [r7, #52]	@ 0x34
    
    // 检查是否在冷却期内
    if (HAL_GetTick() - last_adjustment_time < COOLDOWN_PERIOD) {
 8008522:	f004 fd87 	bl	800d034 <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	4b98      	ldr	r3, [pc, #608]	@ (800878c <Adjust_Left_Motors_By_Distance+0x2a0>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008530:	429a      	cmp	r2, r3
 8008532:	f200 8789 	bhi.w	8009448 <Adjust_Left_Motors_By_Distance+0xf5c>
        return;
    }
    
    // 获取当前电机速度
    uint32_t current_speed1 = __HAL_TIM_GET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel);
 8008536:	7bfa      	ldrb	r2, [r7, #15]
 8008538:	4995      	ldr	r1, [pc, #596]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 800853a:	4613      	mov	r3, r2
 800853c:	00db      	lsls	r3, r3, #3
 800853e:	4413      	add	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	440b      	add	r3, r1
 8008544:	3304      	adds	r3, #4
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <Adjust_Left_Motors_By_Distance+0x76>
 800854c:	7bfa      	ldrb	r2, [r7, #15]
 800854e:	4990      	ldr	r1, [pc, #576]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 8008550:	4613      	mov	r3, r2
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008560:	e035      	b.n	80085ce <Adjust_Left_Motors_By_Distance+0xe2>
 8008562:	7bfa      	ldrb	r2, [r7, #15]
 8008564:	498a      	ldr	r1, [pc, #552]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 8008566:	4613      	mov	r3, r2
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	4413      	add	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	440b      	add	r3, r1
 8008570:	3304      	adds	r3, #4
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b04      	cmp	r3, #4
 8008576:	d10a      	bne.n	800858e <Adjust_Left_Motors_By_Distance+0xa2>
 8008578:	7bfa      	ldrb	r2, [r7, #15]
 800857a:	4985      	ldr	r1, [pc, #532]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 800857c:	4613      	mov	r3, r2
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	440b      	add	r3, r1
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800858c:	e01f      	b.n	80085ce <Adjust_Left_Motors_By_Distance+0xe2>
 800858e:	7bfa      	ldrb	r2, [r7, #15]
 8008590:	497f      	ldr	r1, [pc, #508]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 8008592:	4613      	mov	r3, r2
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	3304      	adds	r3, #4
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b08      	cmp	r3, #8
 80085a2:	d10a      	bne.n	80085ba <Adjust_Left_Motors_By_Distance+0xce>
 80085a4:	7bfa      	ldrb	r2, [r7, #15]
 80085a6:	497a      	ldr	r1, [pc, #488]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 80085a8:	4613      	mov	r3, r2
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	440b      	add	r3, r1
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b8:	e009      	b.n	80085ce <Adjust_Left_Motors_By_Distance+0xe2>
 80085ba:	7bfa      	ldrb	r2, [r7, #15]
 80085bc:	4974      	ldr	r1, [pc, #464]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 80085be:	4613      	mov	r3, r2
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ce:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t current_speed2 = __HAL_TIM_GET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel);
 80085d0:	7b7a      	ldrb	r2, [r7, #13]
 80085d2:	496f      	ldr	r1, [pc, #444]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 80085d4:	4613      	mov	r3, r2
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	4413      	add	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	440b      	add	r3, r1
 80085de:	3304      	adds	r3, #4
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10a      	bne.n	80085fc <Adjust_Left_Motors_By_Distance+0x110>
 80085e6:	7b7a      	ldrb	r2, [r7, #13]
 80085e8:	4969      	ldr	r1, [pc, #420]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 80085ea:	4613      	mov	r3, r2
 80085ec:	00db      	lsls	r3, r3, #3
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	440b      	add	r3, r1
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085fa:	e035      	b.n	8008668 <Adjust_Left_Motors_By_Distance+0x17c>
 80085fc:	7b7a      	ldrb	r2, [r7, #13]
 80085fe:	4964      	ldr	r1, [pc, #400]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 8008600:	4613      	mov	r3, r2
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	4413      	add	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	440b      	add	r3, r1
 800860a:	3304      	adds	r3, #4
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b04      	cmp	r3, #4
 8008610:	d10a      	bne.n	8008628 <Adjust_Left_Motors_By_Distance+0x13c>
 8008612:	7b7a      	ldrb	r2, [r7, #13]
 8008614:	495e      	ldr	r1, [pc, #376]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 8008616:	4613      	mov	r3, r2
 8008618:	00db      	lsls	r3, r3, #3
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	440b      	add	r3, r1
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008626:	e01f      	b.n	8008668 <Adjust_Left_Motors_By_Distance+0x17c>
 8008628:	7b7a      	ldrb	r2, [r7, #13]
 800862a:	4959      	ldr	r1, [pc, #356]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 800862c:	4613      	mov	r3, r2
 800862e:	00db      	lsls	r3, r3, #3
 8008630:	4413      	add	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	440b      	add	r3, r1
 8008636:	3304      	adds	r3, #4
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b08      	cmp	r3, #8
 800863c:	d10a      	bne.n	8008654 <Adjust_Left_Motors_By_Distance+0x168>
 800863e:	7b7a      	ldrb	r2, [r7, #13]
 8008640:	4953      	ldr	r1, [pc, #332]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 8008642:	4613      	mov	r3, r2
 8008644:	00db      	lsls	r3, r3, #3
 8008646:	4413      	add	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	440b      	add	r3, r1
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008652:	e009      	b.n	8008668 <Adjust_Left_Motors_By_Distance+0x17c>
 8008654:	7b7a      	ldrb	r2, [r7, #13]
 8008656:	494e      	ldr	r1, [pc, #312]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 8008658:	4613      	mov	r3, r2
 800865a:	00db      	lsls	r3, r3, #3
 800865c:	4413      	add	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	440b      	add	r3, r1
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008668:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t current_speed3 = __HAL_TIM_GET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel);
 800866a:	7bba      	ldrb	r2, [r7, #14]
 800866c:	4948      	ldr	r1, [pc, #288]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 800866e:	4613      	mov	r3, r2
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	4413      	add	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	440b      	add	r3, r1
 8008678:	3304      	adds	r3, #4
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10a      	bne.n	8008696 <Adjust_Left_Motors_By_Distance+0x1aa>
 8008680:	7bba      	ldrb	r2, [r7, #14]
 8008682:	4943      	ldr	r1, [pc, #268]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 8008684:	4613      	mov	r3, r2
 8008686:	00db      	lsls	r3, r3, #3
 8008688:	4413      	add	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	440b      	add	r3, r1
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008694:	e035      	b.n	8008702 <Adjust_Left_Motors_By_Distance+0x216>
 8008696:	7bba      	ldrb	r2, [r7, #14]
 8008698:	493d      	ldr	r1, [pc, #244]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 800869a:	4613      	mov	r3, r2
 800869c:	00db      	lsls	r3, r3, #3
 800869e:	4413      	add	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	440b      	add	r3, r1
 80086a4:	3304      	adds	r3, #4
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b04      	cmp	r3, #4
 80086aa:	d10a      	bne.n	80086c2 <Adjust_Left_Motors_By_Distance+0x1d6>
 80086ac:	7bba      	ldrb	r2, [r7, #14]
 80086ae:	4938      	ldr	r1, [pc, #224]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 80086b0:	4613      	mov	r3, r2
 80086b2:	00db      	lsls	r3, r3, #3
 80086b4:	4413      	add	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	440b      	add	r3, r1
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c0:	e01f      	b.n	8008702 <Adjust_Left_Motors_By_Distance+0x216>
 80086c2:	7bba      	ldrb	r2, [r7, #14]
 80086c4:	4932      	ldr	r1, [pc, #200]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 80086c6:	4613      	mov	r3, r2
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	4413      	add	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	440b      	add	r3, r1
 80086d0:	3304      	adds	r3, #4
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b08      	cmp	r3, #8
 80086d6:	d10a      	bne.n	80086ee <Adjust_Left_Motors_By_Distance+0x202>
 80086d8:	7bba      	ldrb	r2, [r7, #14]
 80086da:	492d      	ldr	r1, [pc, #180]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 80086dc:	4613      	mov	r3, r2
 80086de:	00db      	lsls	r3, r3, #3
 80086e0:	4413      	add	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	440b      	add	r3, r1
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ec:	e009      	b.n	8008702 <Adjust_Left_Motors_By_Distance+0x216>
 80086ee:	7bba      	ldrb	r2, [r7, #14]
 80086f0:	4927      	ldr	r1, [pc, #156]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 80086f2:	4613      	mov	r3, r2
 80086f4:	00db      	lsls	r3, r3, #3
 80086f6:	4413      	add	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	440b      	add	r3, r1
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008702:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t current_speed4 = __HAL_TIM_GET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel);
 8008704:	7b3a      	ldrb	r2, [r7, #12]
 8008706:	4922      	ldr	r1, [pc, #136]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 8008708:	4613      	mov	r3, r2
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	440b      	add	r3, r1
 8008712:	3304      	adds	r3, #4
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10a      	bne.n	8008730 <Adjust_Left_Motors_By_Distance+0x244>
 800871a:	7b3a      	ldrb	r2, [r7, #12]
 800871c:	491c      	ldr	r1, [pc, #112]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 800871e:	4613      	mov	r3, r2
 8008720:	00db      	lsls	r3, r3, #3
 8008722:	4413      	add	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	440b      	add	r3, r1
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800872e:	e03b      	b.n	80087a8 <Adjust_Left_Motors_By_Distance+0x2bc>
 8008730:	7b3a      	ldrb	r2, [r7, #12]
 8008732:	4917      	ldr	r1, [pc, #92]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 8008734:	4613      	mov	r3, r2
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	4413      	add	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	440b      	add	r3, r1
 800873e:	3304      	adds	r3, #4
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b04      	cmp	r3, #4
 8008744:	d10a      	bne.n	800875c <Adjust_Left_Motors_By_Distance+0x270>
 8008746:	7b3a      	ldrb	r2, [r7, #12]
 8008748:	4911      	ldr	r1, [pc, #68]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 800874a:	4613      	mov	r3, r2
 800874c:	00db      	lsls	r3, r3, #3
 800874e:	4413      	add	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	440b      	add	r3, r1
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800875a:	e025      	b.n	80087a8 <Adjust_Left_Motors_By_Distance+0x2bc>
 800875c:	7b3a      	ldrb	r2, [r7, #12]
 800875e:	490c      	ldr	r1, [pc, #48]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 8008760:	4613      	mov	r3, r2
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	4413      	add	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	440b      	add	r3, r1
 800876a:	3304      	adds	r3, #4
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b08      	cmp	r3, #8
 8008770:	d110      	bne.n	8008794 <Adjust_Left_Motors_By_Distance+0x2a8>
 8008772:	7b3a      	ldrb	r2, [r7, #12]
 8008774:	4906      	ldr	r1, [pc, #24]	@ (8008790 <Adjust_Left_Motors_By_Distance+0x2a4>)
 8008776:	4613      	mov	r3, r2
 8008778:	00db      	lsls	r3, r3, #3
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	440b      	add	r3, r1
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008786:	e00f      	b.n	80087a8 <Adjust_Left_Motors_By_Distance+0x2bc>
 8008788:	3dcccccd 	.word	0x3dcccccd
 800878c:	20000604 	.word	0x20000604
 8008790:	20000384 	.word	0x20000384
 8008794:	7b3a      	ldrb	r2, [r7, #12]
 8008796:	49a8      	ldr	r1, [pc, #672]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 8008798:	4613      	mov	r3, r2
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	4413      	add	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	440b      	add	r3, r1
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a8:	627b      	str	r3, [r7, #36]	@ 0x24
    
    // 计算速度调整量
    uint32_t speed_adjust1 = current_speed1 * SPEED_ADJUST_RATIO;
 80087aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ac:	ee07 3a90 	vmov	s15, r3
 80087b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80087b4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80087b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087c0:	ee17 3a90 	vmov	r3, s15
 80087c4:	623b      	str	r3, [r7, #32]
    uint32_t speed_adjust2 = current_speed2 * SPEED_ADJUST_RATIO;
 80087c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c8:	ee07 3a90 	vmov	s15, r3
 80087cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80087d0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80087d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087dc:	ee17 3a90 	vmov	r3, s15
 80087e0:	61fb      	str	r3, [r7, #28]
    uint32_t speed_adjust3 = current_speed3 * SPEED_ADJUST_RATIO;
 80087e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e4:	ee07 3a90 	vmov	s15, r3
 80087e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80087ec:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80087f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087f8:	ee17 3a90 	vmov	r3, s15
 80087fc:	61bb      	str	r3, [r7, #24]
    uint32_t speed_adjust4 = current_speed4 * SPEED_ADJUST_RATIO;
 80087fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008800:	ee07 3a90 	vmov	s15, r3
 8008804:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008808:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800880c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008814:	ee17 3a90 	vmov	r3, s15
 8008818:	617b      	str	r3, [r7, #20]
    
    // 如果已经开始调整，检查是否达到调整时间
    if (adjust_start_time != 0) {
 800881a:	4b88      	ldr	r3, [pc, #544]	@ (8008a3c <Adjust_Left_Motors_By_Distance+0x550>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 830f 	beq.w	8008e42 <Adjust_Left_Motors_By_Distance+0x956>
        if (HAL_GetTick() - adjust_start_time >= ADJUST_DURATION) {
 8008824:	f004 fc06 	bl	800d034 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	4b84      	ldr	r3, [pc, #528]	@ (8008a3c <Adjust_Left_Motors_By_Distance+0x550>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008832:	429a      	cmp	r2, r3
 8008834:	d809      	bhi.n	800884a <Adjust_Left_Motors_By_Distance+0x35e>
            // 调整时间结束，重置计时器并进入冷却期
            adjust_start_time = 0;
 8008836:	4b81      	ldr	r3, [pc, #516]	@ (8008a3c <Adjust_Left_Motors_By_Distance+0x550>)
 8008838:	2200      	movs	r2, #0
 800883a:	601a      	str	r2, [r3, #0]
            last_adjustment_time = HAL_GetTick();
 800883c:	f004 fbfa 	bl	800d034 <HAL_GetTick>
 8008840:	4603      	mov	r3, r0
 8008842:	4a7f      	ldr	r2, [pc, #508]	@ (8008a40 <Adjust_Left_Motors_By_Distance+0x554>)
 8008844:	6013      	str	r3, [r2, #0]
            return;
 8008846:	f000 be00 	b.w	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
        }
        // 在调整时间内继续执行调整
        if (raw_distance >= 22 && raw_distance <= 48) {
 800884a:	edd7 7a02 	vldr	s15, [r7, #8]
 800884e:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8008852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800885a:	f2c0 8174 	blt.w	8008b46 <Adjust_Left_Motors_By_Distance+0x65a>
 800885e:	edd7 7a02 	vldr	s15, [r7, #8]
 8008862:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8008a44 <Adjust_Left_Motors_By_Distance+0x558>
 8008866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800886a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800886e:	f200 816a 	bhi.w	8008b46 <Adjust_Left_Motors_By_Distance+0x65a>
            // 向右调整，左侧轮子加速
            __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 + speed_adjust1);  // 左前加速
 8008872:	7bfa      	ldrb	r2, [r7, #15]
 8008874:	4970      	ldr	r1, [pc, #448]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 8008876:	4613      	mov	r3, r2
 8008878:	00db      	lsls	r3, r3, #3
 800887a:	4413      	add	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	440b      	add	r3, r1
 8008880:	3304      	adds	r3, #4
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10d      	bne.n	80088a4 <Adjust_Left_Motors_By_Distance+0x3b8>
 8008888:	7bfa      	ldrb	r2, [r7, #15]
 800888a:	496b      	ldr	r1, [pc, #428]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 800888c:	4613      	mov	r3, r2
 800888e:	00db      	lsls	r3, r3, #3
 8008890:	4413      	add	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	440b      	add	r3, r1
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800889c:	6a3a      	ldr	r2, [r7, #32]
 800889e:	440a      	add	r2, r1
 80088a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80088a2:	e03e      	b.n	8008922 <Adjust_Left_Motors_By_Distance+0x436>
 80088a4:	7bfa      	ldrb	r2, [r7, #15]
 80088a6:	4964      	ldr	r1, [pc, #400]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 80088a8:	4613      	mov	r3, r2
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	440b      	add	r3, r1
 80088b2:	3304      	adds	r3, #4
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d10d      	bne.n	80088d6 <Adjust_Left_Motors_By_Distance+0x3ea>
 80088ba:	7bfa      	ldrb	r2, [r7, #15]
 80088bc:	495e      	ldr	r1, [pc, #376]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 80088be:	4613      	mov	r3, r2
 80088c0:	00db      	lsls	r3, r3, #3
 80088c2:	4413      	add	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	440b      	add	r3, r1
 80088d2:	6393      	str	r3, [r2, #56]	@ 0x38
 80088d4:	e025      	b.n	8008922 <Adjust_Left_Motors_By_Distance+0x436>
 80088d6:	7bfa      	ldrb	r2, [r7, #15]
 80088d8:	4957      	ldr	r1, [pc, #348]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 80088da:	4613      	mov	r3, r2
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	4413      	add	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	440b      	add	r3, r1
 80088e4:	3304      	adds	r3, #4
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	d10d      	bne.n	8008908 <Adjust_Left_Motors_By_Distance+0x41c>
 80088ec:	7bfa      	ldrb	r2, [r7, #15]
 80088ee:	4952      	ldr	r1, [pc, #328]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 80088f0:	4613      	mov	r3, r2
 80088f2:	00db      	lsls	r3, r3, #3
 80088f4:	4413      	add	r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	440b      	add	r3, r1
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	440b      	add	r3, r1
 8008904:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008906:	e00c      	b.n	8008922 <Adjust_Left_Motors_By_Distance+0x436>
 8008908:	7bfa      	ldrb	r2, [r7, #15]
 800890a:	494b      	ldr	r1, [pc, #300]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 800890c:	4613      	mov	r3, r2
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	4413      	add	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	440b      	add	r3, r1
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	440b      	add	r3, r1
 8008920:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjust3);  // 左后减速
 8008922:	7bba      	ldrb	r2, [r7, #14]
 8008924:	4944      	ldr	r1, [pc, #272]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 8008926:	4613      	mov	r3, r2
 8008928:	00db      	lsls	r3, r3, #3
 800892a:	4413      	add	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	440b      	add	r3, r1
 8008930:	3304      	adds	r3, #4
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10d      	bne.n	8008954 <Adjust_Left_Motors_By_Distance+0x468>
 8008938:	7bba      	ldrb	r2, [r7, #14]
 800893a:	493f      	ldr	r1, [pc, #252]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 800893c:	4613      	mov	r3, r2
 800893e:	00db      	lsls	r3, r3, #3
 8008940:	4413      	add	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	440b      	add	r3, r1
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	1a8a      	subs	r2, r1, r2
 8008950:	635a      	str	r2, [r3, #52]	@ 0x34
 8008952:	e03e      	b.n	80089d2 <Adjust_Left_Motors_By_Distance+0x4e6>
 8008954:	7bba      	ldrb	r2, [r7, #14]
 8008956:	4938      	ldr	r1, [pc, #224]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 8008958:	4613      	mov	r3, r2
 800895a:	00db      	lsls	r3, r3, #3
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	3304      	adds	r3, #4
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b04      	cmp	r3, #4
 8008968:	d10d      	bne.n	8008986 <Adjust_Left_Motors_By_Distance+0x49a>
 800896a:	7bba      	ldrb	r2, [r7, #14]
 800896c:	4932      	ldr	r1, [pc, #200]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 800896e:	4613      	mov	r3, r2
 8008970:	00db      	lsls	r3, r3, #3
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	440b      	add	r3, r1
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	1acb      	subs	r3, r1, r3
 8008982:	6393      	str	r3, [r2, #56]	@ 0x38
 8008984:	e025      	b.n	80089d2 <Adjust_Left_Motors_By_Distance+0x4e6>
 8008986:	7bba      	ldrb	r2, [r7, #14]
 8008988:	492b      	ldr	r1, [pc, #172]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 800898a:	4613      	mov	r3, r2
 800898c:	00db      	lsls	r3, r3, #3
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	440b      	add	r3, r1
 8008994:	3304      	adds	r3, #4
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b08      	cmp	r3, #8
 800899a:	d10d      	bne.n	80089b8 <Adjust_Left_Motors_By_Distance+0x4cc>
 800899c:	7bba      	ldrb	r2, [r7, #14]
 800899e:	4926      	ldr	r1, [pc, #152]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 80089a0:	4613      	mov	r3, r2
 80089a2:	00db      	lsls	r3, r3, #3
 80089a4:	4413      	add	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	440b      	add	r3, r1
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	1acb      	subs	r3, r1, r3
 80089b4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80089b6:	e00c      	b.n	80089d2 <Adjust_Left_Motors_By_Distance+0x4e6>
 80089b8:	7bba      	ldrb	r2, [r7, #14]
 80089ba:	491f      	ldr	r1, [pc, #124]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 80089bc:	4613      	mov	r3, r2
 80089be:	00db      	lsls	r3, r3, #3
 80089c0:	4413      	add	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	440b      	add	r3, r1
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	1acb      	subs	r3, r1, r3
 80089d0:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 + speed_adjust2);  // 右后加速
 80089d2:	7b7a      	ldrb	r2, [r7, #13]
 80089d4:	4918      	ldr	r1, [pc, #96]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 80089d6:	4613      	mov	r3, r2
 80089d8:	00db      	lsls	r3, r3, #3
 80089da:	4413      	add	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	440b      	add	r3, r1
 80089e0:	3304      	adds	r3, #4
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10d      	bne.n	8008a04 <Adjust_Left_Motors_By_Distance+0x518>
 80089e8:	7b7a      	ldrb	r2, [r7, #13]
 80089ea:	4913      	ldr	r1, [pc, #76]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 80089ec:	4613      	mov	r3, r2
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	4413      	add	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	440b      	add	r3, r1
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089fc:	69fa      	ldr	r2, [r7, #28]
 80089fe:	440a      	add	r2, r1
 8008a00:	635a      	str	r2, [r3, #52]	@ 0x34
 8008a02:	e047      	b.n	8008a94 <Adjust_Left_Motors_By_Distance+0x5a8>
 8008a04:	7b7a      	ldrb	r2, [r7, #13]
 8008a06:	490c      	ldr	r1, [pc, #48]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 8008a08:	4613      	mov	r3, r2
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	4413      	add	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	440b      	add	r3, r1
 8008a12:	3304      	adds	r3, #4
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	d116      	bne.n	8008a48 <Adjust_Left_Motors_By_Distance+0x55c>
 8008a1a:	7b7a      	ldrb	r2, [r7, #13]
 8008a1c:	4906      	ldr	r1, [pc, #24]	@ (8008a38 <Adjust_Left_Motors_By_Distance+0x54c>)
 8008a1e:	4613      	mov	r3, r2
 8008a20:	00db      	lsls	r3, r3, #3
 8008a22:	4413      	add	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	440b      	add	r3, r1
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	440b      	add	r3, r1
 8008a32:	6393      	str	r3, [r2, #56]	@ 0x38
 8008a34:	e02e      	b.n	8008a94 <Adjust_Left_Motors_By_Distance+0x5a8>
 8008a36:	bf00      	nop
 8008a38:	20000384 	.word	0x20000384
 8008a3c:	20000608 	.word	0x20000608
 8008a40:	20000604 	.word	0x20000604
 8008a44:	42400000 	.word	0x42400000
 8008a48:	7b7a      	ldrb	r2, [r7, #13]
 8008a4a:	499b      	ldr	r1, [pc, #620]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	4413      	add	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	440b      	add	r3, r1
 8008a56:	3304      	adds	r3, #4
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b08      	cmp	r3, #8
 8008a5c:	d10d      	bne.n	8008a7a <Adjust_Left_Motors_By_Distance+0x58e>
 8008a5e:	7b7a      	ldrb	r2, [r7, #13]
 8008a60:	4995      	ldr	r1, [pc, #596]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008a62:	4613      	mov	r3, r2
 8008a64:	00db      	lsls	r3, r3, #3
 8008a66:	4413      	add	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	440b      	add	r3, r1
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	440b      	add	r3, r1
 8008a76:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008a78:	e00c      	b.n	8008a94 <Adjust_Left_Motors_By_Distance+0x5a8>
 8008a7a:	7b7a      	ldrb	r2, [r7, #13]
 8008a7c:	498e      	ldr	r1, [pc, #568]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008a7e:	4613      	mov	r3, r2
 8008a80:	00db      	lsls	r3, r3, #3
 8008a82:	4413      	add	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	440b      	add	r3, r1
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	440b      	add	r3, r1
 8008a92:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjust4);  // 右前减速
 8008a94:	7b3a      	ldrb	r2, [r7, #12]
 8008a96:	4988      	ldr	r1, [pc, #544]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008a98:	4613      	mov	r3, r2
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	4413      	add	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10d      	bne.n	8008ac6 <Adjust_Left_Motors_By_Distance+0x5da>
 8008aaa:	7b3a      	ldrb	r2, [r7, #12]
 8008aac:	4982      	ldr	r1, [pc, #520]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008aae:	4613      	mov	r3, r2
 8008ab0:	00db      	lsls	r3, r3, #3
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	440b      	add	r3, r1
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	1a8a      	subs	r2, r1, r2
 8008ac2:	635a      	str	r2, [r3, #52]	@ 0x34
 8008ac4:	e1bc      	b.n	8008e40 <Adjust_Left_Motors_By_Distance+0x954>
 8008ac6:	7b3a      	ldrb	r2, [r7, #12]
 8008ac8:	497b      	ldr	r1, [pc, #492]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008aca:	4613      	mov	r3, r2
 8008acc:	00db      	lsls	r3, r3, #3
 8008ace:	4413      	add	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	440b      	add	r3, r1
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d10d      	bne.n	8008af8 <Adjust_Left_Motors_By_Distance+0x60c>
 8008adc:	7b3a      	ldrb	r2, [r7, #12]
 8008ade:	4976      	ldr	r1, [pc, #472]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	00db      	lsls	r3, r3, #3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	440b      	add	r3, r1
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	1acb      	subs	r3, r1, r3
 8008af4:	6393      	str	r3, [r2, #56]	@ 0x38
 8008af6:	e1a3      	b.n	8008e40 <Adjust_Left_Motors_By_Distance+0x954>
 8008af8:	7b3a      	ldrb	r2, [r7, #12]
 8008afa:	496f      	ldr	r1, [pc, #444]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008afc:	4613      	mov	r3, r2
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	4413      	add	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	440b      	add	r3, r1
 8008b06:	3304      	adds	r3, #4
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b08      	cmp	r3, #8
 8008b0c:	d10d      	bne.n	8008b2a <Adjust_Left_Motors_By_Distance+0x63e>
 8008b0e:	7b3a      	ldrb	r2, [r7, #12]
 8008b10:	4969      	ldr	r1, [pc, #420]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008b12:	4613      	mov	r3, r2
 8008b14:	00db      	lsls	r3, r3, #3
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	440b      	add	r3, r1
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	1acb      	subs	r3, r1, r3
 8008b26:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008b28:	e18a      	b.n	8008e40 <Adjust_Left_Motors_By_Distance+0x954>
 8008b2a:	7b3a      	ldrb	r2, [r7, #12]
 8008b2c:	4962      	ldr	r1, [pc, #392]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008b2e:	4613      	mov	r3, r2
 8008b30:	00db      	lsls	r3, r3, #3
 8008b32:	4413      	add	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	440b      	add	r3, r1
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	1acb      	subs	r3, r1, r3
 8008b42:	6413      	str	r3, [r2, #64]	@ 0x40
 8008b44:	e17c      	b.n	8008e40 <Adjust_Left_Motors_By_Distance+0x954>
        } else if (raw_distance >= 126 && raw_distance <= 156) {
 8008b46:	edd7 7a02 	vldr	s15, [r7, #8]
 8008b4a:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8008cbc <Adjust_Left_Motors_By_Distance+0x7d0>
 8008b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b56:	da01      	bge.n	8008b5c <Adjust_Left_Motors_By_Distance+0x670>
            __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 - speed_adjust1);  // 左前减速
            __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 + speed_adjust3);  // 左后加速
            __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 - speed_adjust2);  // 右后减速
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjust4);  // 右前加速
        }
        return;
 8008b58:	f000 bc77 	b.w	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
        } else if (raw_distance >= 126 && raw_distance <= 156) {
 8008b5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8008b60:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8008cc0 <Adjust_Left_Motors_By_Distance+0x7d4>
 8008b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b6c:	d901      	bls.n	8008b72 <Adjust_Left_Motors_By_Distance+0x686>
        return;
 8008b6e:	f000 bc6c 	b.w	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
            __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 - speed_adjust1);  // 左前减速
 8008b72:	7bfa      	ldrb	r2, [r7, #15]
 8008b74:	4950      	ldr	r1, [pc, #320]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008b76:	4613      	mov	r3, r2
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	440b      	add	r3, r1
 8008b80:	3304      	adds	r3, #4
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10d      	bne.n	8008ba4 <Adjust_Left_Motors_By_Distance+0x6b8>
 8008b88:	7bfa      	ldrb	r2, [r7, #15]
 8008b8a:	494b      	ldr	r1, [pc, #300]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	4413      	add	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	440b      	add	r3, r1
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008b9c:	6a3a      	ldr	r2, [r7, #32]
 8008b9e:	1a8a      	subs	r2, r1, r2
 8008ba0:	635a      	str	r2, [r3, #52]	@ 0x34
 8008ba2:	e03e      	b.n	8008c22 <Adjust_Left_Motors_By_Distance+0x736>
 8008ba4:	7bfa      	ldrb	r2, [r7, #15]
 8008ba6:	4944      	ldr	r1, [pc, #272]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008ba8:	4613      	mov	r3, r2
 8008baa:	00db      	lsls	r3, r3, #3
 8008bac:	4413      	add	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	440b      	add	r3, r1
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d10d      	bne.n	8008bd6 <Adjust_Left_Motors_By_Distance+0x6ea>
 8008bba:	7bfa      	ldrb	r2, [r7, #15]
 8008bbc:	493e      	ldr	r1, [pc, #248]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	00db      	lsls	r3, r3, #3
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	440b      	add	r3, r1
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	1acb      	subs	r3, r1, r3
 8008bd2:	6393      	str	r3, [r2, #56]	@ 0x38
 8008bd4:	e025      	b.n	8008c22 <Adjust_Left_Motors_By_Distance+0x736>
 8008bd6:	7bfa      	ldrb	r2, [r7, #15]
 8008bd8:	4937      	ldr	r1, [pc, #220]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008bda:	4613      	mov	r3, r2
 8008bdc:	00db      	lsls	r3, r3, #3
 8008bde:	4413      	add	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	440b      	add	r3, r1
 8008be4:	3304      	adds	r3, #4
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b08      	cmp	r3, #8
 8008bea:	d10d      	bne.n	8008c08 <Adjust_Left_Motors_By_Distance+0x71c>
 8008bec:	7bfa      	ldrb	r2, [r7, #15]
 8008bee:	4932      	ldr	r1, [pc, #200]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	4413      	add	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	440b      	add	r3, r1
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	1acb      	subs	r3, r1, r3
 8008c04:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008c06:	e00c      	b.n	8008c22 <Adjust_Left_Motors_By_Distance+0x736>
 8008c08:	7bfa      	ldrb	r2, [r7, #15]
 8008c0a:	492b      	ldr	r1, [pc, #172]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	00db      	lsls	r3, r3, #3
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	1acb      	subs	r3, r1, r3
 8008c20:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 + speed_adjust3);  // 左后加速
 8008c22:	7bba      	ldrb	r2, [r7, #14]
 8008c24:	4924      	ldr	r1, [pc, #144]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008c26:	4613      	mov	r3, r2
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	440b      	add	r3, r1
 8008c30:	3304      	adds	r3, #4
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10d      	bne.n	8008c54 <Adjust_Left_Motors_By_Distance+0x768>
 8008c38:	7bba      	ldrb	r2, [r7, #14]
 8008c3a:	491f      	ldr	r1, [pc, #124]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	4413      	add	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	440b      	add	r3, r1
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	440a      	add	r2, r1
 8008c50:	635a      	str	r2, [r3, #52]	@ 0x34
 8008c52:	e044      	b.n	8008cde <Adjust_Left_Motors_By_Distance+0x7f2>
 8008c54:	7bba      	ldrb	r2, [r7, #14]
 8008c56:	4918      	ldr	r1, [pc, #96]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008c58:	4613      	mov	r3, r2
 8008c5a:	00db      	lsls	r3, r3, #3
 8008c5c:	4413      	add	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	440b      	add	r3, r1
 8008c62:	3304      	adds	r3, #4
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d10d      	bne.n	8008c86 <Adjust_Left_Motors_By_Distance+0x79a>
 8008c6a:	7bba      	ldrb	r2, [r7, #14]
 8008c6c:	4912      	ldr	r1, [pc, #72]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008c6e:	4613      	mov	r3, r2
 8008c70:	00db      	lsls	r3, r3, #3
 8008c72:	4413      	add	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	440b      	add	r3, r1
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	440b      	add	r3, r1
 8008c82:	6393      	str	r3, [r2, #56]	@ 0x38
 8008c84:	e02b      	b.n	8008cde <Adjust_Left_Motors_By_Distance+0x7f2>
 8008c86:	7bba      	ldrb	r2, [r7, #14]
 8008c88:	490b      	ldr	r1, [pc, #44]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	00db      	lsls	r3, r3, #3
 8008c8e:	4413      	add	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	440b      	add	r3, r1
 8008c94:	3304      	adds	r3, #4
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b08      	cmp	r3, #8
 8008c9a:	d113      	bne.n	8008cc4 <Adjust_Left_Motors_By_Distance+0x7d8>
 8008c9c:	7bba      	ldrb	r2, [r7, #14]
 8008c9e:	4906      	ldr	r1, [pc, #24]	@ (8008cb8 <Adjust_Left_Motors_By_Distance+0x7cc>)
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	00db      	lsls	r3, r3, #3
 8008ca4:	4413      	add	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	440b      	add	r3, r1
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	440b      	add	r3, r1
 8008cb4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008cb6:	e012      	b.n	8008cde <Adjust_Left_Motors_By_Distance+0x7f2>
 8008cb8:	20000384 	.word	0x20000384
 8008cbc:	42fc0000 	.word	0x42fc0000
 8008cc0:	431c0000 	.word	0x431c0000
 8008cc4:	7bba      	ldrb	r2, [r7, #14]
 8008cc6:	49a4      	ldr	r1, [pc, #656]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008cc8:	4613      	mov	r3, r2
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	4413      	add	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	440b      	add	r3, r1
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	440b      	add	r3, r1
 8008cdc:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 - speed_adjust2);  // 右后减速
 8008cde:	7b7a      	ldrb	r2, [r7, #13]
 8008ce0:	499d      	ldr	r1, [pc, #628]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	4413      	add	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	440b      	add	r3, r1
 8008cec:	3304      	adds	r3, #4
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10d      	bne.n	8008d10 <Adjust_Left_Motors_By_Distance+0x824>
 8008cf4:	7b7a      	ldrb	r2, [r7, #13]
 8008cf6:	4998      	ldr	r1, [pc, #608]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	00db      	lsls	r3, r3, #3
 8008cfc:	4413      	add	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	440b      	add	r3, r1
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d08:	69fa      	ldr	r2, [r7, #28]
 8008d0a:	1a8a      	subs	r2, r1, r2
 8008d0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8008d0e:	e03e      	b.n	8008d8e <Adjust_Left_Motors_By_Distance+0x8a2>
 8008d10:	7b7a      	ldrb	r2, [r7, #13]
 8008d12:	4991      	ldr	r1, [pc, #580]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008d14:	4613      	mov	r3, r2
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	4413      	add	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	440b      	add	r3, r1
 8008d1e:	3304      	adds	r3, #4
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	d10d      	bne.n	8008d42 <Adjust_Left_Motors_By_Distance+0x856>
 8008d26:	7b7a      	ldrb	r2, [r7, #13]
 8008d28:	498b      	ldr	r1, [pc, #556]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	00db      	lsls	r3, r3, #3
 8008d2e:	4413      	add	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	440b      	add	r3, r1
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	1acb      	subs	r3, r1, r3
 8008d3e:	6393      	str	r3, [r2, #56]	@ 0x38
 8008d40:	e025      	b.n	8008d8e <Adjust_Left_Motors_By_Distance+0x8a2>
 8008d42:	7b7a      	ldrb	r2, [r7, #13]
 8008d44:	4984      	ldr	r1, [pc, #528]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008d46:	4613      	mov	r3, r2
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	4413      	add	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	440b      	add	r3, r1
 8008d50:	3304      	adds	r3, #4
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2b08      	cmp	r3, #8
 8008d56:	d10d      	bne.n	8008d74 <Adjust_Left_Motors_By_Distance+0x888>
 8008d58:	7b7a      	ldrb	r2, [r7, #13]
 8008d5a:	497f      	ldr	r1, [pc, #508]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	440b      	add	r3, r1
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	1acb      	subs	r3, r1, r3
 8008d70:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008d72:	e00c      	b.n	8008d8e <Adjust_Left_Motors_By_Distance+0x8a2>
 8008d74:	7b7a      	ldrb	r2, [r7, #13]
 8008d76:	4978      	ldr	r1, [pc, #480]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008d78:	4613      	mov	r3, r2
 8008d7a:	00db      	lsls	r3, r3, #3
 8008d7c:	4413      	add	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	1acb      	subs	r3, r1, r3
 8008d8c:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjust4);  // 右前加速
 8008d8e:	7b3a      	ldrb	r2, [r7, #12]
 8008d90:	4971      	ldr	r1, [pc, #452]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008d92:	4613      	mov	r3, r2
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	4413      	add	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	440b      	add	r3, r1
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10d      	bne.n	8008dc0 <Adjust_Left_Motors_By_Distance+0x8d4>
 8008da4:	7b3a      	ldrb	r2, [r7, #12]
 8008da6:	496c      	ldr	r1, [pc, #432]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008da8:	4613      	mov	r3, r2
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	4413      	add	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	440b      	add	r3, r1
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	440a      	add	r2, r1
 8008dbc:	635a      	str	r2, [r3, #52]	@ 0x34
        return;
 8008dbe:	e344      	b.n	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjust4);  // 右前加速
 8008dc0:	7b3a      	ldrb	r2, [r7, #12]
 8008dc2:	4965      	ldr	r1, [pc, #404]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	4413      	add	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	440b      	add	r3, r1
 8008dce:	3304      	adds	r3, #4
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b04      	cmp	r3, #4
 8008dd4:	d10d      	bne.n	8008df2 <Adjust_Left_Motors_By_Distance+0x906>
 8008dd6:	7b3a      	ldrb	r2, [r7, #12]
 8008dd8:	495f      	ldr	r1, [pc, #380]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008dda:	4613      	mov	r3, r2
 8008ddc:	00db      	lsls	r3, r3, #3
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	440b      	add	r3, r1
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	440b      	add	r3, r1
 8008dee:	6393      	str	r3, [r2, #56]	@ 0x38
        return;
 8008df0:	e32b      	b.n	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjust4);  // 右前加速
 8008df2:	7b3a      	ldrb	r2, [r7, #12]
 8008df4:	4958      	ldr	r1, [pc, #352]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008df6:	4613      	mov	r3, r2
 8008df8:	00db      	lsls	r3, r3, #3
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	440b      	add	r3, r1
 8008e00:	3304      	adds	r3, #4
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d10d      	bne.n	8008e24 <Adjust_Left_Motors_By_Distance+0x938>
 8008e08:	7b3a      	ldrb	r2, [r7, #12]
 8008e0a:	4953      	ldr	r1, [pc, #332]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	00db      	lsls	r3, r3, #3
 8008e10:	4413      	add	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	440b      	add	r3, r1
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	440b      	add	r3, r1
 8008e20:	63d3      	str	r3, [r2, #60]	@ 0x3c
        return;
 8008e22:	e312      	b.n	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjust4);  // 右前加速
 8008e24:	7b3a      	ldrb	r2, [r7, #12]
 8008e26:	494c      	ldr	r1, [pc, #304]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008e28:	4613      	mov	r3, r2
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	440b      	add	r3, r1
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	440b      	add	r3, r1
 8008e3c:	6413      	str	r3, [r2, #64]	@ 0x40
        return;
 8008e3e:	e304      	b.n	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
 8008e40:	e303      	b.n	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
    }
    
    // 检测是否超出阈值，如果是则开始调整
    if (raw_distance >= 22 && raw_distance <= 48) {
 8008e42:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e46:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8008e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e52:	f2c0 8177 	blt.w	8009144 <Adjust_Left_Motors_By_Distance+0xc58>
 8008e56:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e5a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8008f5c <Adjust_Left_Motors_By_Distance+0xa70>
 8008e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e66:	f200 816d 	bhi.w	8009144 <Adjust_Left_Motors_By_Distance+0xc58>
        adjust_start_time = HAL_GetTick();
 8008e6a:	f004 f8e3 	bl	800d034 <HAL_GetTick>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	4a3b      	ldr	r2, [pc, #236]	@ (8008f60 <Adjust_Left_Motors_By_Distance+0xa74>)
 8008e72:	6013      	str	r3, [r2, #0]
        // 向右调整，左侧轮子加速
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 + speed_adjust1);  // 左前加速
 8008e74:	7bfa      	ldrb	r2, [r7, #15]
 8008e76:	4938      	ldr	r1, [pc, #224]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008e78:	4613      	mov	r3, r2
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	4413      	add	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	440b      	add	r3, r1
 8008e82:	3304      	adds	r3, #4
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10d      	bne.n	8008ea6 <Adjust_Left_Motors_By_Distance+0x9ba>
 8008e8a:	7bfa      	ldrb	r2, [r7, #15]
 8008e8c:	4932      	ldr	r1, [pc, #200]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008e8e:	4613      	mov	r3, r2
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	440b      	add	r3, r1
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e9e:	6a3a      	ldr	r2, [r7, #32]
 8008ea0:	440a      	add	r2, r1
 8008ea2:	635a      	str	r2, [r3, #52]	@ 0x34
 8008ea4:	e03e      	b.n	8008f24 <Adjust_Left_Motors_By_Distance+0xa38>
 8008ea6:	7bfa      	ldrb	r2, [r7, #15]
 8008ea8:	492b      	ldr	r1, [pc, #172]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008eaa:	4613      	mov	r3, r2
 8008eac:	00db      	lsls	r3, r3, #3
 8008eae:	4413      	add	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	440b      	add	r3, r1
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	d10d      	bne.n	8008ed8 <Adjust_Left_Motors_By_Distance+0x9ec>
 8008ebc:	7bfa      	ldrb	r2, [r7, #15]
 8008ebe:	4926      	ldr	r1, [pc, #152]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	00db      	lsls	r3, r3, #3
 8008ec4:	4413      	add	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	440b      	add	r3, r1
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	440b      	add	r3, r1
 8008ed4:	6393      	str	r3, [r2, #56]	@ 0x38
 8008ed6:	e025      	b.n	8008f24 <Adjust_Left_Motors_By_Distance+0xa38>
 8008ed8:	7bfa      	ldrb	r2, [r7, #15]
 8008eda:	491f      	ldr	r1, [pc, #124]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008edc:	4613      	mov	r3, r2
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	4413      	add	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	440b      	add	r3, r1
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b08      	cmp	r3, #8
 8008eec:	d10d      	bne.n	8008f0a <Adjust_Left_Motors_By_Distance+0xa1e>
 8008eee:	7bfa      	ldrb	r2, [r7, #15]
 8008ef0:	4919      	ldr	r1, [pc, #100]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	00db      	lsls	r3, r3, #3
 8008ef6:	4413      	add	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	440b      	add	r3, r1
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	440b      	add	r3, r1
 8008f06:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008f08:	e00c      	b.n	8008f24 <Adjust_Left_Motors_By_Distance+0xa38>
 8008f0a:	7bfa      	ldrb	r2, [r7, #15]
 8008f0c:	4912      	ldr	r1, [pc, #72]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008f0e:	4613      	mov	r3, r2
 8008f10:	00db      	lsls	r3, r3, #3
 8008f12:	4413      	add	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	440b      	add	r3, r1
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	440b      	add	r3, r1
 8008f22:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjust3);  // 左后减速
 8008f24:	7bba      	ldrb	r2, [r7, #14]
 8008f26:	490c      	ldr	r1, [pc, #48]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008f28:	4613      	mov	r3, r2
 8008f2a:	00db      	lsls	r3, r3, #3
 8008f2c:	4413      	add	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	440b      	add	r3, r1
 8008f32:	3304      	adds	r3, #4
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d114      	bne.n	8008f64 <Adjust_Left_Motors_By_Distance+0xa78>
 8008f3a:	7bba      	ldrb	r2, [r7, #14]
 8008f3c:	4906      	ldr	r1, [pc, #24]	@ (8008f58 <Adjust_Left_Motors_By_Distance+0xa6c>)
 8008f3e:	4613      	mov	r3, r2
 8008f40:	00db      	lsls	r3, r3, #3
 8008f42:	4413      	add	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	440b      	add	r3, r1
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	1a8a      	subs	r2, r1, r2
 8008f52:	635a      	str	r2, [r3, #52]	@ 0x34
 8008f54:	e045      	b.n	8008fe2 <Adjust_Left_Motors_By_Distance+0xaf6>
 8008f56:	bf00      	nop
 8008f58:	20000384 	.word	0x20000384
 8008f5c:	42400000 	.word	0x42400000
 8008f60:	20000608 	.word	0x20000608
 8008f64:	7bba      	ldrb	r2, [r7, #14]
 8008f66:	49a9      	ldr	r1, [pc, #676]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 8008f68:	4613      	mov	r3, r2
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	4413      	add	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	440b      	add	r3, r1
 8008f72:	3304      	adds	r3, #4
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d10d      	bne.n	8008f96 <Adjust_Left_Motors_By_Distance+0xaaa>
 8008f7a:	7bba      	ldrb	r2, [r7, #14]
 8008f7c:	49a3      	ldr	r1, [pc, #652]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 8008f7e:	4613      	mov	r3, r2
 8008f80:	00db      	lsls	r3, r3, #3
 8008f82:	4413      	add	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	440b      	add	r3, r1
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	1acb      	subs	r3, r1, r3
 8008f92:	6393      	str	r3, [r2, #56]	@ 0x38
 8008f94:	e025      	b.n	8008fe2 <Adjust_Left_Motors_By_Distance+0xaf6>
 8008f96:	7bba      	ldrb	r2, [r7, #14]
 8008f98:	499c      	ldr	r1, [pc, #624]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	4413      	add	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	440b      	add	r3, r1
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b08      	cmp	r3, #8
 8008faa:	d10d      	bne.n	8008fc8 <Adjust_Left_Motors_By_Distance+0xadc>
 8008fac:	7bba      	ldrb	r2, [r7, #14]
 8008fae:	4997      	ldr	r1, [pc, #604]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	440b      	add	r3, r1
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	1acb      	subs	r3, r1, r3
 8008fc4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008fc6:	e00c      	b.n	8008fe2 <Adjust_Left_Motors_By_Distance+0xaf6>
 8008fc8:	7bba      	ldrb	r2, [r7, #14]
 8008fca:	4990      	ldr	r1, [pc, #576]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 8008fcc:	4613      	mov	r3, r2
 8008fce:	00db      	lsls	r3, r3, #3
 8008fd0:	4413      	add	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	440b      	add	r3, r1
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	1acb      	subs	r3, r1, r3
 8008fe0:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 + speed_adjust2);  // 右后加速
 8008fe2:	7b7a      	ldrb	r2, [r7, #13]
 8008fe4:	4989      	ldr	r1, [pc, #548]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	00db      	lsls	r3, r3, #3
 8008fea:	4413      	add	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	440b      	add	r3, r1
 8008ff0:	3304      	adds	r3, #4
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10d      	bne.n	8009014 <Adjust_Left_Motors_By_Distance+0xb28>
 8008ff8:	7b7a      	ldrb	r2, [r7, #13]
 8008ffa:	4984      	ldr	r1, [pc, #528]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	00db      	lsls	r3, r3, #3
 8009000:	4413      	add	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	440b      	add	r3, r1
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800900c:	69fa      	ldr	r2, [r7, #28]
 800900e:	440a      	add	r2, r1
 8009010:	635a      	str	r2, [r3, #52]	@ 0x34
 8009012:	e03e      	b.n	8009092 <Adjust_Left_Motors_By_Distance+0xba6>
 8009014:	7b7a      	ldrb	r2, [r7, #13]
 8009016:	497d      	ldr	r1, [pc, #500]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 8009018:	4613      	mov	r3, r2
 800901a:	00db      	lsls	r3, r3, #3
 800901c:	4413      	add	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	440b      	add	r3, r1
 8009022:	3304      	adds	r3, #4
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b04      	cmp	r3, #4
 8009028:	d10d      	bne.n	8009046 <Adjust_Left_Motors_By_Distance+0xb5a>
 800902a:	7b7a      	ldrb	r2, [r7, #13]
 800902c:	4977      	ldr	r1, [pc, #476]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 800902e:	4613      	mov	r3, r2
 8009030:	00db      	lsls	r3, r3, #3
 8009032:	4413      	add	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	440b      	add	r3, r1
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	440b      	add	r3, r1
 8009042:	6393      	str	r3, [r2, #56]	@ 0x38
 8009044:	e025      	b.n	8009092 <Adjust_Left_Motors_By_Distance+0xba6>
 8009046:	7b7a      	ldrb	r2, [r7, #13]
 8009048:	4970      	ldr	r1, [pc, #448]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 800904a:	4613      	mov	r3, r2
 800904c:	00db      	lsls	r3, r3, #3
 800904e:	4413      	add	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	440b      	add	r3, r1
 8009054:	3304      	adds	r3, #4
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b08      	cmp	r3, #8
 800905a:	d10d      	bne.n	8009078 <Adjust_Left_Motors_By_Distance+0xb8c>
 800905c:	7b7a      	ldrb	r2, [r7, #13]
 800905e:	496b      	ldr	r1, [pc, #428]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 8009060:	4613      	mov	r3, r2
 8009062:	00db      	lsls	r3, r3, #3
 8009064:	4413      	add	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	440b      	add	r3, r1
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	440b      	add	r3, r1
 8009074:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8009076:	e00c      	b.n	8009092 <Adjust_Left_Motors_By_Distance+0xba6>
 8009078:	7b7a      	ldrb	r2, [r7, #13]
 800907a:	4964      	ldr	r1, [pc, #400]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 800907c:	4613      	mov	r3, r2
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	4413      	add	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	440b      	add	r3, r1
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	440b      	add	r3, r1
 8009090:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjust4);  // 右前减速
 8009092:	7b3a      	ldrb	r2, [r7, #12]
 8009094:	495d      	ldr	r1, [pc, #372]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 8009096:	4613      	mov	r3, r2
 8009098:	00db      	lsls	r3, r3, #3
 800909a:	4413      	add	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	440b      	add	r3, r1
 80090a0:	3304      	adds	r3, #4
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10d      	bne.n	80090c4 <Adjust_Left_Motors_By_Distance+0xbd8>
 80090a8:	7b3a      	ldrb	r2, [r7, #12]
 80090aa:	4958      	ldr	r1, [pc, #352]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 80090ac:	4613      	mov	r3, r2
 80090ae:	00db      	lsls	r3, r3, #3
 80090b0:	4413      	add	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	440b      	add	r3, r1
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	1a8a      	subs	r2, r1, r2
 80090c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80090c2:	e1c2      	b.n	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
 80090c4:	7b3a      	ldrb	r2, [r7, #12]
 80090c6:	4951      	ldr	r1, [pc, #324]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 80090c8:	4613      	mov	r3, r2
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	4413      	add	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	440b      	add	r3, r1
 80090d2:	3304      	adds	r3, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b04      	cmp	r3, #4
 80090d8:	d10d      	bne.n	80090f6 <Adjust_Left_Motors_By_Distance+0xc0a>
 80090da:	7b3a      	ldrb	r2, [r7, #12]
 80090dc:	494b      	ldr	r1, [pc, #300]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 80090de:	4613      	mov	r3, r2
 80090e0:	00db      	lsls	r3, r3, #3
 80090e2:	4413      	add	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	440b      	add	r3, r1
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	1acb      	subs	r3, r1, r3
 80090f2:	6393      	str	r3, [r2, #56]	@ 0x38
 80090f4:	e1a9      	b.n	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
 80090f6:	7b3a      	ldrb	r2, [r7, #12]
 80090f8:	4944      	ldr	r1, [pc, #272]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 80090fa:	4613      	mov	r3, r2
 80090fc:	00db      	lsls	r3, r3, #3
 80090fe:	4413      	add	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	440b      	add	r3, r1
 8009104:	3304      	adds	r3, #4
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b08      	cmp	r3, #8
 800910a:	d10d      	bne.n	8009128 <Adjust_Left_Motors_By_Distance+0xc3c>
 800910c:	7b3a      	ldrb	r2, [r7, #12]
 800910e:	493f      	ldr	r1, [pc, #252]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 8009110:	4613      	mov	r3, r2
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	4413      	add	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	440b      	add	r3, r1
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	1acb      	subs	r3, r1, r3
 8009124:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8009126:	e190      	b.n	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
 8009128:	7b3a      	ldrb	r2, [r7, #12]
 800912a:	4938      	ldr	r1, [pc, #224]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 800912c:	4613      	mov	r3, r2
 800912e:	00db      	lsls	r3, r3, #3
 8009130:	4413      	add	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	440b      	add	r3, r1
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	1acb      	subs	r3, r1, r3
 8009140:	6413      	str	r3, [r2, #64]	@ 0x40
 8009142:	e182      	b.n	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
    } else if (raw_distance >= 126 && raw_distance <= 156) {
 8009144:	edd7 7a02 	vldr	s15, [r7, #8]
 8009148:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009210 <Adjust_Left_Motors_By_Distance+0xd24>
 800914c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009154:	f2c0 8179 	blt.w	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
 8009158:	edd7 7a02 	vldr	s15, [r7, #8]
 800915c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8009214 <Adjust_Left_Motors_By_Distance+0xd28>
 8009160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009168:	f200 816f 	bhi.w	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
        adjust_start_time = HAL_GetTick();
 800916c:	f003 ff62 	bl	800d034 <HAL_GetTick>
 8009170:	4603      	mov	r3, r0
 8009172:	4a29      	ldr	r2, [pc, #164]	@ (8009218 <Adjust_Left_Motors_By_Distance+0xd2c>)
 8009174:	6013      	str	r3, [r2, #0]
        // 向左调整，右侧轮子加速
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 - speed_adjust1);  // 左前减速
 8009176:	7bfa      	ldrb	r2, [r7, #15]
 8009178:	4924      	ldr	r1, [pc, #144]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 800917a:	4613      	mov	r3, r2
 800917c:	00db      	lsls	r3, r3, #3
 800917e:	4413      	add	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	440b      	add	r3, r1
 8009184:	3304      	adds	r3, #4
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10d      	bne.n	80091a8 <Adjust_Left_Motors_By_Distance+0xcbc>
 800918c:	7bfa      	ldrb	r2, [r7, #15]
 800918e:	491f      	ldr	r1, [pc, #124]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 8009190:	4613      	mov	r3, r2
 8009192:	00db      	lsls	r3, r3, #3
 8009194:	4413      	add	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	440b      	add	r3, r1
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80091a0:	6a3a      	ldr	r2, [r7, #32]
 80091a2:	1a8a      	subs	r2, r1, r2
 80091a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80091a6:	e046      	b.n	8009236 <Adjust_Left_Motors_By_Distance+0xd4a>
 80091a8:	7bfa      	ldrb	r2, [r7, #15]
 80091aa:	4918      	ldr	r1, [pc, #96]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 80091ac:	4613      	mov	r3, r2
 80091ae:	00db      	lsls	r3, r3, #3
 80091b0:	4413      	add	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	440b      	add	r3, r1
 80091b6:	3304      	adds	r3, #4
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b04      	cmp	r3, #4
 80091bc:	d10d      	bne.n	80091da <Adjust_Left_Motors_By_Distance+0xcee>
 80091be:	7bfa      	ldrb	r2, [r7, #15]
 80091c0:	4912      	ldr	r1, [pc, #72]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 80091c2:	4613      	mov	r3, r2
 80091c4:	00db      	lsls	r3, r3, #3
 80091c6:	4413      	add	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	440b      	add	r3, r1
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	1acb      	subs	r3, r1, r3
 80091d6:	6393      	str	r3, [r2, #56]	@ 0x38
 80091d8:	e02d      	b.n	8009236 <Adjust_Left_Motors_By_Distance+0xd4a>
 80091da:	7bfa      	ldrb	r2, [r7, #15]
 80091dc:	490b      	ldr	r1, [pc, #44]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 80091de:	4613      	mov	r3, r2
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	4413      	add	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	440b      	add	r3, r1
 80091e8:	3304      	adds	r3, #4
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b08      	cmp	r3, #8
 80091ee:	d115      	bne.n	800921c <Adjust_Left_Motors_By_Distance+0xd30>
 80091f0:	7bfa      	ldrb	r2, [r7, #15]
 80091f2:	4906      	ldr	r1, [pc, #24]	@ (800920c <Adjust_Left_Motors_By_Distance+0xd20>)
 80091f4:	4613      	mov	r3, r2
 80091f6:	00db      	lsls	r3, r3, #3
 80091f8:	4413      	add	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	440b      	add	r3, r1
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	1acb      	subs	r3, r1, r3
 8009208:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800920a:	e014      	b.n	8009236 <Adjust_Left_Motors_By_Distance+0xd4a>
 800920c:	20000384 	.word	0x20000384
 8009210:	42fc0000 	.word	0x42fc0000
 8009214:	431c0000 	.word	0x431c0000
 8009218:	20000608 	.word	0x20000608
 800921c:	7bfa      	ldrb	r2, [r7, #15]
 800921e:	498c      	ldr	r1, [pc, #560]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 8009220:	4613      	mov	r3, r2
 8009222:	00db      	lsls	r3, r3, #3
 8009224:	4413      	add	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	440b      	add	r3, r1
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	1acb      	subs	r3, r1, r3
 8009234:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 + speed_adjust3);  // 左后加速
 8009236:	7bba      	ldrb	r2, [r7, #14]
 8009238:	4985      	ldr	r1, [pc, #532]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 800923a:	4613      	mov	r3, r2
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	4413      	add	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	440b      	add	r3, r1
 8009244:	3304      	adds	r3, #4
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10d      	bne.n	8009268 <Adjust_Left_Motors_By_Distance+0xd7c>
 800924c:	7bba      	ldrb	r2, [r7, #14]
 800924e:	4980      	ldr	r1, [pc, #512]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 8009250:	4613      	mov	r3, r2
 8009252:	00db      	lsls	r3, r3, #3
 8009254:	4413      	add	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	440b      	add	r3, r1
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009260:	69ba      	ldr	r2, [r7, #24]
 8009262:	440a      	add	r2, r1
 8009264:	635a      	str	r2, [r3, #52]	@ 0x34
 8009266:	e03e      	b.n	80092e6 <Adjust_Left_Motors_By_Distance+0xdfa>
 8009268:	7bba      	ldrb	r2, [r7, #14]
 800926a:	4979      	ldr	r1, [pc, #484]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 800926c:	4613      	mov	r3, r2
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	4413      	add	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	440b      	add	r3, r1
 8009276:	3304      	adds	r3, #4
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b04      	cmp	r3, #4
 800927c:	d10d      	bne.n	800929a <Adjust_Left_Motors_By_Distance+0xdae>
 800927e:	7bba      	ldrb	r2, [r7, #14]
 8009280:	4973      	ldr	r1, [pc, #460]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 8009282:	4613      	mov	r3, r2
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	4413      	add	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	440b      	add	r3, r1
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	440b      	add	r3, r1
 8009296:	6393      	str	r3, [r2, #56]	@ 0x38
 8009298:	e025      	b.n	80092e6 <Adjust_Left_Motors_By_Distance+0xdfa>
 800929a:	7bba      	ldrb	r2, [r7, #14]
 800929c:	496c      	ldr	r1, [pc, #432]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 800929e:	4613      	mov	r3, r2
 80092a0:	00db      	lsls	r3, r3, #3
 80092a2:	4413      	add	r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	440b      	add	r3, r1
 80092a8:	3304      	adds	r3, #4
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b08      	cmp	r3, #8
 80092ae:	d10d      	bne.n	80092cc <Adjust_Left_Motors_By_Distance+0xde0>
 80092b0:	7bba      	ldrb	r2, [r7, #14]
 80092b2:	4967      	ldr	r1, [pc, #412]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 80092b4:	4613      	mov	r3, r2
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	4413      	add	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	440b      	add	r3, r1
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	440b      	add	r3, r1
 80092c8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80092ca:	e00c      	b.n	80092e6 <Adjust_Left_Motors_By_Distance+0xdfa>
 80092cc:	7bba      	ldrb	r2, [r7, #14]
 80092ce:	4960      	ldr	r1, [pc, #384]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 80092d0:	4613      	mov	r3, r2
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	440b      	add	r3, r1
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	440b      	add	r3, r1
 80092e4:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 - speed_adjust2);  // 右后减速
 80092e6:	7b7a      	ldrb	r2, [r7, #13]
 80092e8:	4959      	ldr	r1, [pc, #356]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 80092ea:	4613      	mov	r3, r2
 80092ec:	00db      	lsls	r3, r3, #3
 80092ee:	4413      	add	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	440b      	add	r3, r1
 80092f4:	3304      	adds	r3, #4
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10d      	bne.n	8009318 <Adjust_Left_Motors_By_Distance+0xe2c>
 80092fc:	7b7a      	ldrb	r2, [r7, #13]
 80092fe:	4954      	ldr	r1, [pc, #336]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 8009300:	4613      	mov	r3, r2
 8009302:	00db      	lsls	r3, r3, #3
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	440b      	add	r3, r1
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009310:	69fa      	ldr	r2, [r7, #28]
 8009312:	1a8a      	subs	r2, r1, r2
 8009314:	635a      	str	r2, [r3, #52]	@ 0x34
 8009316:	e03e      	b.n	8009396 <Adjust_Left_Motors_By_Distance+0xeaa>
 8009318:	7b7a      	ldrb	r2, [r7, #13]
 800931a:	494d      	ldr	r1, [pc, #308]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 800931c:	4613      	mov	r3, r2
 800931e:	00db      	lsls	r3, r3, #3
 8009320:	4413      	add	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	440b      	add	r3, r1
 8009326:	3304      	adds	r3, #4
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b04      	cmp	r3, #4
 800932c:	d10d      	bne.n	800934a <Adjust_Left_Motors_By_Distance+0xe5e>
 800932e:	7b7a      	ldrb	r2, [r7, #13]
 8009330:	4947      	ldr	r1, [pc, #284]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 8009332:	4613      	mov	r3, r2
 8009334:	00db      	lsls	r3, r3, #3
 8009336:	4413      	add	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	440b      	add	r3, r1
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	1acb      	subs	r3, r1, r3
 8009346:	6393      	str	r3, [r2, #56]	@ 0x38
 8009348:	e025      	b.n	8009396 <Adjust_Left_Motors_By_Distance+0xeaa>
 800934a:	7b7a      	ldrb	r2, [r7, #13]
 800934c:	4940      	ldr	r1, [pc, #256]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 800934e:	4613      	mov	r3, r2
 8009350:	00db      	lsls	r3, r3, #3
 8009352:	4413      	add	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	440b      	add	r3, r1
 8009358:	3304      	adds	r3, #4
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b08      	cmp	r3, #8
 800935e:	d10d      	bne.n	800937c <Adjust_Left_Motors_By_Distance+0xe90>
 8009360:	7b7a      	ldrb	r2, [r7, #13]
 8009362:	493b      	ldr	r1, [pc, #236]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 8009364:	4613      	mov	r3, r2
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	4413      	add	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	440b      	add	r3, r1
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	1acb      	subs	r3, r1, r3
 8009378:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800937a:	e00c      	b.n	8009396 <Adjust_Left_Motors_By_Distance+0xeaa>
 800937c:	7b7a      	ldrb	r2, [r7, #13]
 800937e:	4934      	ldr	r1, [pc, #208]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 8009380:	4613      	mov	r3, r2
 8009382:	00db      	lsls	r3, r3, #3
 8009384:	4413      	add	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	440b      	add	r3, r1
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	1acb      	subs	r3, r1, r3
 8009394:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjust4);  // 右前加速
 8009396:	7b3a      	ldrb	r2, [r7, #12]
 8009398:	492d      	ldr	r1, [pc, #180]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 800939a:	4613      	mov	r3, r2
 800939c:	00db      	lsls	r3, r3, #3
 800939e:	4413      	add	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	440b      	add	r3, r1
 80093a4:	3304      	adds	r3, #4
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10d      	bne.n	80093c8 <Adjust_Left_Motors_By_Distance+0xedc>
 80093ac:	7b3a      	ldrb	r2, [r7, #12]
 80093ae:	4928      	ldr	r1, [pc, #160]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 80093b0:	4613      	mov	r3, r2
 80093b2:	00db      	lsls	r3, r3, #3
 80093b4:	4413      	add	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	440b      	add	r3, r1
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	440a      	add	r2, r1
 80093c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80093c6:	e040      	b.n	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
 80093c8:	7b3a      	ldrb	r2, [r7, #12]
 80093ca:	4921      	ldr	r1, [pc, #132]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 80093cc:	4613      	mov	r3, r2
 80093ce:	00db      	lsls	r3, r3, #3
 80093d0:	4413      	add	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	440b      	add	r3, r1
 80093d6:	3304      	adds	r3, #4
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b04      	cmp	r3, #4
 80093dc:	d10d      	bne.n	80093fa <Adjust_Left_Motors_By_Distance+0xf0e>
 80093de:	7b3a      	ldrb	r2, [r7, #12]
 80093e0:	491b      	ldr	r1, [pc, #108]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 80093e2:	4613      	mov	r3, r2
 80093e4:	00db      	lsls	r3, r3, #3
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	440b      	add	r3, r1
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	440b      	add	r3, r1
 80093f6:	6393      	str	r3, [r2, #56]	@ 0x38
 80093f8:	e027      	b.n	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
 80093fa:	7b3a      	ldrb	r2, [r7, #12]
 80093fc:	4914      	ldr	r1, [pc, #80]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 80093fe:	4613      	mov	r3, r2
 8009400:	00db      	lsls	r3, r3, #3
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	440b      	add	r3, r1
 8009408:	3304      	adds	r3, #4
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b08      	cmp	r3, #8
 800940e:	d10d      	bne.n	800942c <Adjust_Left_Motors_By_Distance+0xf40>
 8009410:	7b3a      	ldrb	r2, [r7, #12]
 8009412:	490f      	ldr	r1, [pc, #60]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 8009414:	4613      	mov	r3, r2
 8009416:	00db      	lsls	r3, r3, #3
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	440b      	add	r3, r1
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	440b      	add	r3, r1
 8009428:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800942a:	e00e      	b.n	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
 800942c:	7b3a      	ldrb	r2, [r7, #12]
 800942e:	4908      	ldr	r1, [pc, #32]	@ (8009450 <Adjust_Left_Motors_By_Distance+0xf64>)
 8009430:	4613      	mov	r3, r2
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	4413      	add	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	440b      	add	r3, r1
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	440b      	add	r3, r1
 8009444:	6413      	str	r3, [r2, #64]	@ 0x40
 8009446:	e000      	b.n	800944a <Adjust_Left_Motors_By_Distance+0xf5e>
        return;
 8009448:	bf00      	nop
    }
}
 800944a:	3744      	adds	r7, #68	@ 0x44
 800944c:	46bd      	mov	sp, r7
 800944e:	bd90      	pop	{r4, r7, pc}
 8009450:	20000384 	.word	0x20000384

08009454 <Adjust_Right_Motors_By_Distance>:

void Adjust_Right_Motors_By_Distance(Motor_ID id2, Motor_ID id4, Motor_ID id1, Motor_ID id3, float raw_distance, float threshold) {
 8009454:	b590      	push	{r4, r7, lr}
 8009456:	b091      	sub	sp, #68	@ 0x44
 8009458:	af00      	add	r7, sp, #0
 800945a:	4604      	mov	r4, r0
 800945c:	4608      	mov	r0, r1
 800945e:	4611      	mov	r1, r2
 8009460:	461a      	mov	r2, r3
 8009462:	ed87 0a02 	vstr	s0, [r7, #8]
 8009466:	edc7 0a01 	vstr	s1, [r7, #4]
 800946a:	4623      	mov	r3, r4
 800946c:	73fb      	strb	r3, [r7, #15]
 800946e:	4603      	mov	r3, r0
 8009470:	73bb      	strb	r3, [r7, #14]
 8009472:	460b      	mov	r3, r1
 8009474:	737b      	strb	r3, [r7, #13]
 8009476:	4613      	mov	r3, r2
 8009478:	733b      	strb	r3, [r7, #12]
    static uint32_t adjust_start_time = 0;
    static uint32_t last_adjustment_time = 0;  // 添加上次调整时间记录
    const uint32_t COOLDOWN_PERIOD = 500;    // 冷却时间0.5秒
 800947a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800947e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const uint32_t ADJUST_DURATION = 300;      // 调整持续时间300ms
 8009480:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8009484:	63bb      	str	r3, [r7, #56]	@ 0x38
    const float SPEED_ADJUST_RATIO = 0.1f;     // 速度调整比例10%
 8009486:	4b9a      	ldr	r3, [pc, #616]	@ (80096f0 <Adjust_Right_Motors_By_Distance+0x29c>)
 8009488:	637b      	str	r3, [r7, #52]	@ 0x34
    
    // 检查是否在冷却期内
    if (HAL_GetTick() - last_adjustment_time < COOLDOWN_PERIOD) {
 800948a:	f003 fdd3 	bl	800d034 <HAL_GetTick>
 800948e:	4602      	mov	r2, r0
 8009490:	4b98      	ldr	r3, [pc, #608]	@ (80096f4 <Adjust_Right_Motors_By_Distance+0x2a0>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009498:	429a      	cmp	r2, r3
 800949a:	f200 8789 	bhi.w	800a3b0 <Adjust_Right_Motors_By_Distance+0xf5c>
        return;
    }
    
    // 获取当前电机速度
    uint32_t current_speed1 = __HAL_TIM_GET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel);
 800949e:	7b7a      	ldrb	r2, [r7, #13]
 80094a0:	4995      	ldr	r1, [pc, #596]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 80094a2:	4613      	mov	r3, r2
 80094a4:	00db      	lsls	r3, r3, #3
 80094a6:	4413      	add	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	440b      	add	r3, r1
 80094ac:	3304      	adds	r3, #4
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10a      	bne.n	80094ca <Adjust_Right_Motors_By_Distance+0x76>
 80094b4:	7b7a      	ldrb	r2, [r7, #13]
 80094b6:	4990      	ldr	r1, [pc, #576]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 80094b8:	4613      	mov	r3, r2
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	4413      	add	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	440b      	add	r3, r1
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094c8:	e035      	b.n	8009536 <Adjust_Right_Motors_By_Distance+0xe2>
 80094ca:	7b7a      	ldrb	r2, [r7, #13]
 80094cc:	498a      	ldr	r1, [pc, #552]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 80094ce:	4613      	mov	r3, r2
 80094d0:	00db      	lsls	r3, r3, #3
 80094d2:	4413      	add	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	440b      	add	r3, r1
 80094d8:	3304      	adds	r3, #4
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b04      	cmp	r3, #4
 80094de:	d10a      	bne.n	80094f6 <Adjust_Right_Motors_By_Distance+0xa2>
 80094e0:	7b7a      	ldrb	r2, [r7, #13]
 80094e2:	4985      	ldr	r1, [pc, #532]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 80094e4:	4613      	mov	r3, r2
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	4413      	add	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	440b      	add	r3, r1
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f4:	e01f      	b.n	8009536 <Adjust_Right_Motors_By_Distance+0xe2>
 80094f6:	7b7a      	ldrb	r2, [r7, #13]
 80094f8:	497f      	ldr	r1, [pc, #508]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 80094fa:	4613      	mov	r3, r2
 80094fc:	00db      	lsls	r3, r3, #3
 80094fe:	4413      	add	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	440b      	add	r3, r1
 8009504:	3304      	adds	r3, #4
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b08      	cmp	r3, #8
 800950a:	d10a      	bne.n	8009522 <Adjust_Right_Motors_By_Distance+0xce>
 800950c:	7b7a      	ldrb	r2, [r7, #13]
 800950e:	497a      	ldr	r1, [pc, #488]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 8009510:	4613      	mov	r3, r2
 8009512:	00db      	lsls	r3, r3, #3
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	440b      	add	r3, r1
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009520:	e009      	b.n	8009536 <Adjust_Right_Motors_By_Distance+0xe2>
 8009522:	7b7a      	ldrb	r2, [r7, #13]
 8009524:	4974      	ldr	r1, [pc, #464]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 8009526:	4613      	mov	r3, r2
 8009528:	00db      	lsls	r3, r3, #3
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	440b      	add	r3, r1
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009536:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t current_speed2 = __HAL_TIM_GET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel);
 8009538:	7bfa      	ldrb	r2, [r7, #15]
 800953a:	496f      	ldr	r1, [pc, #444]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 800953c:	4613      	mov	r3, r2
 800953e:	00db      	lsls	r3, r3, #3
 8009540:	4413      	add	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	440b      	add	r3, r1
 8009546:	3304      	adds	r3, #4
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10a      	bne.n	8009564 <Adjust_Right_Motors_By_Distance+0x110>
 800954e:	7bfa      	ldrb	r2, [r7, #15]
 8009550:	4969      	ldr	r1, [pc, #420]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 8009552:	4613      	mov	r3, r2
 8009554:	00db      	lsls	r3, r3, #3
 8009556:	4413      	add	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	440b      	add	r3, r1
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009562:	e035      	b.n	80095d0 <Adjust_Right_Motors_By_Distance+0x17c>
 8009564:	7bfa      	ldrb	r2, [r7, #15]
 8009566:	4964      	ldr	r1, [pc, #400]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 8009568:	4613      	mov	r3, r2
 800956a:	00db      	lsls	r3, r3, #3
 800956c:	4413      	add	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	440b      	add	r3, r1
 8009572:	3304      	adds	r3, #4
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2b04      	cmp	r3, #4
 8009578:	d10a      	bne.n	8009590 <Adjust_Right_Motors_By_Distance+0x13c>
 800957a:	7bfa      	ldrb	r2, [r7, #15]
 800957c:	495e      	ldr	r1, [pc, #376]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 800957e:	4613      	mov	r3, r2
 8009580:	00db      	lsls	r3, r3, #3
 8009582:	4413      	add	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	440b      	add	r3, r1
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800958e:	e01f      	b.n	80095d0 <Adjust_Right_Motors_By_Distance+0x17c>
 8009590:	7bfa      	ldrb	r2, [r7, #15]
 8009592:	4959      	ldr	r1, [pc, #356]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 8009594:	4613      	mov	r3, r2
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	4413      	add	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	440b      	add	r3, r1
 800959e:	3304      	adds	r3, #4
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b08      	cmp	r3, #8
 80095a4:	d10a      	bne.n	80095bc <Adjust_Right_Motors_By_Distance+0x168>
 80095a6:	7bfa      	ldrb	r2, [r7, #15]
 80095a8:	4953      	ldr	r1, [pc, #332]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 80095aa:	4613      	mov	r3, r2
 80095ac:	00db      	lsls	r3, r3, #3
 80095ae:	4413      	add	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	440b      	add	r3, r1
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095ba:	e009      	b.n	80095d0 <Adjust_Right_Motors_By_Distance+0x17c>
 80095bc:	7bfa      	ldrb	r2, [r7, #15]
 80095be:	494e      	ldr	r1, [pc, #312]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 80095c0:	4613      	mov	r3, r2
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	4413      	add	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	440b      	add	r3, r1
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t current_speed3 = __HAL_TIM_GET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel);
 80095d2:	7b3a      	ldrb	r2, [r7, #12]
 80095d4:	4948      	ldr	r1, [pc, #288]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 80095d6:	4613      	mov	r3, r2
 80095d8:	00db      	lsls	r3, r3, #3
 80095da:	4413      	add	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	440b      	add	r3, r1
 80095e0:	3304      	adds	r3, #4
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <Adjust_Right_Motors_By_Distance+0x1aa>
 80095e8:	7b3a      	ldrb	r2, [r7, #12]
 80095ea:	4943      	ldr	r1, [pc, #268]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 80095ec:	4613      	mov	r3, r2
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	4413      	add	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	440b      	add	r3, r1
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095fc:	e035      	b.n	800966a <Adjust_Right_Motors_By_Distance+0x216>
 80095fe:	7b3a      	ldrb	r2, [r7, #12]
 8009600:	493d      	ldr	r1, [pc, #244]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 8009602:	4613      	mov	r3, r2
 8009604:	00db      	lsls	r3, r3, #3
 8009606:	4413      	add	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	440b      	add	r3, r1
 800960c:	3304      	adds	r3, #4
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b04      	cmp	r3, #4
 8009612:	d10a      	bne.n	800962a <Adjust_Right_Motors_By_Distance+0x1d6>
 8009614:	7b3a      	ldrb	r2, [r7, #12]
 8009616:	4938      	ldr	r1, [pc, #224]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 8009618:	4613      	mov	r3, r2
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	4413      	add	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	440b      	add	r3, r1
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009628:	e01f      	b.n	800966a <Adjust_Right_Motors_By_Distance+0x216>
 800962a:	7b3a      	ldrb	r2, [r7, #12]
 800962c:	4932      	ldr	r1, [pc, #200]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 800962e:	4613      	mov	r3, r2
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	4413      	add	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	440b      	add	r3, r1
 8009638:	3304      	adds	r3, #4
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b08      	cmp	r3, #8
 800963e:	d10a      	bne.n	8009656 <Adjust_Right_Motors_By_Distance+0x202>
 8009640:	7b3a      	ldrb	r2, [r7, #12]
 8009642:	492d      	ldr	r1, [pc, #180]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 8009644:	4613      	mov	r3, r2
 8009646:	00db      	lsls	r3, r3, #3
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	440b      	add	r3, r1
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009654:	e009      	b.n	800966a <Adjust_Right_Motors_By_Distance+0x216>
 8009656:	7b3a      	ldrb	r2, [r7, #12]
 8009658:	4927      	ldr	r1, [pc, #156]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 800965a:	4613      	mov	r3, r2
 800965c:	00db      	lsls	r3, r3, #3
 800965e:	4413      	add	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	440b      	add	r3, r1
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t current_speed4 = __HAL_TIM_GET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel);
 800966c:	7bba      	ldrb	r2, [r7, #14]
 800966e:	4922      	ldr	r1, [pc, #136]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 8009670:	4613      	mov	r3, r2
 8009672:	00db      	lsls	r3, r3, #3
 8009674:	4413      	add	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	440b      	add	r3, r1
 800967a:	3304      	adds	r3, #4
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10a      	bne.n	8009698 <Adjust_Right_Motors_By_Distance+0x244>
 8009682:	7bba      	ldrb	r2, [r7, #14]
 8009684:	491c      	ldr	r1, [pc, #112]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 8009686:	4613      	mov	r3, r2
 8009688:	00db      	lsls	r3, r3, #3
 800968a:	4413      	add	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	440b      	add	r3, r1
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009696:	e03b      	b.n	8009710 <Adjust_Right_Motors_By_Distance+0x2bc>
 8009698:	7bba      	ldrb	r2, [r7, #14]
 800969a:	4917      	ldr	r1, [pc, #92]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 800969c:	4613      	mov	r3, r2
 800969e:	00db      	lsls	r3, r3, #3
 80096a0:	4413      	add	r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	440b      	add	r3, r1
 80096a6:	3304      	adds	r3, #4
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b04      	cmp	r3, #4
 80096ac:	d10a      	bne.n	80096c4 <Adjust_Right_Motors_By_Distance+0x270>
 80096ae:	7bba      	ldrb	r2, [r7, #14]
 80096b0:	4911      	ldr	r1, [pc, #68]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 80096b2:	4613      	mov	r3, r2
 80096b4:	00db      	lsls	r3, r3, #3
 80096b6:	4413      	add	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	440b      	add	r3, r1
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c2:	e025      	b.n	8009710 <Adjust_Right_Motors_By_Distance+0x2bc>
 80096c4:	7bba      	ldrb	r2, [r7, #14]
 80096c6:	490c      	ldr	r1, [pc, #48]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 80096c8:	4613      	mov	r3, r2
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	4413      	add	r3, r2
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	440b      	add	r3, r1
 80096d2:	3304      	adds	r3, #4
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b08      	cmp	r3, #8
 80096d8:	d110      	bne.n	80096fc <Adjust_Right_Motors_By_Distance+0x2a8>
 80096da:	7bba      	ldrb	r2, [r7, #14]
 80096dc:	4906      	ldr	r1, [pc, #24]	@ (80096f8 <Adjust_Right_Motors_By_Distance+0x2a4>)
 80096de:	4613      	mov	r3, r2
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	4413      	add	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	440b      	add	r3, r1
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ee:	e00f      	b.n	8009710 <Adjust_Right_Motors_By_Distance+0x2bc>
 80096f0:	3dcccccd 	.word	0x3dcccccd
 80096f4:	2000060c 	.word	0x2000060c
 80096f8:	20000384 	.word	0x20000384
 80096fc:	7bba      	ldrb	r2, [r7, #14]
 80096fe:	49a8      	ldr	r1, [pc, #672]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 8009700:	4613      	mov	r3, r2
 8009702:	00db      	lsls	r3, r3, #3
 8009704:	4413      	add	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	440b      	add	r3, r1
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009710:	627b      	str	r3, [r7, #36]	@ 0x24
    
    // 计算速度调整量
    uint32_t speed_adjust1 = current_speed1 * SPEED_ADJUST_RATIO;
 8009712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009714:	ee07 3a90 	vmov	s15, r3
 8009718:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800971c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8009720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009728:	ee17 3a90 	vmov	r3, s15
 800972c:	623b      	str	r3, [r7, #32]
    uint32_t speed_adjust2 = current_speed2 * SPEED_ADJUST_RATIO;
 800972e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009730:	ee07 3a90 	vmov	s15, r3
 8009734:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009738:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800973c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009744:	ee17 3a90 	vmov	r3, s15
 8009748:	61fb      	str	r3, [r7, #28]
    uint32_t speed_adjust3 = current_speed3 * SPEED_ADJUST_RATIO;
 800974a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974c:	ee07 3a90 	vmov	s15, r3
 8009750:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009754:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8009758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800975c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009760:	ee17 3a90 	vmov	r3, s15
 8009764:	61bb      	str	r3, [r7, #24]
    uint32_t speed_adjust4 = current_speed4 * SPEED_ADJUST_RATIO;
 8009766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009768:	ee07 3a90 	vmov	s15, r3
 800976c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009770:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8009774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800977c:	ee17 3a90 	vmov	r3, s15
 8009780:	617b      	str	r3, [r7, #20]
    
    // 如果已经开始调整，检查是否达到调整时间
    if (adjust_start_time != 0) {
 8009782:	4b88      	ldr	r3, [pc, #544]	@ (80099a4 <Adjust_Right_Motors_By_Distance+0x550>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 830f 	beq.w	8009daa <Adjust_Right_Motors_By_Distance+0x956>
        if (HAL_GetTick() - adjust_start_time >= ADJUST_DURATION) {
 800978c:	f003 fc52 	bl	800d034 <HAL_GetTick>
 8009790:	4602      	mov	r2, r0
 8009792:	4b84      	ldr	r3, [pc, #528]	@ (80099a4 <Adjust_Right_Motors_By_Distance+0x550>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800979a:	429a      	cmp	r2, r3
 800979c:	d809      	bhi.n	80097b2 <Adjust_Right_Motors_By_Distance+0x35e>
            // 调整时间结束，重置计时器并进入冷却期
            adjust_start_time = 0;
 800979e:	4b81      	ldr	r3, [pc, #516]	@ (80099a4 <Adjust_Right_Motors_By_Distance+0x550>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	601a      	str	r2, [r3, #0]
            last_adjustment_time = HAL_GetTick();
 80097a4:	f003 fc46 	bl	800d034 <HAL_GetTick>
 80097a8:	4603      	mov	r3, r0
 80097aa:	4a7f      	ldr	r2, [pc, #508]	@ (80099a8 <Adjust_Right_Motors_By_Distance+0x554>)
 80097ac:	6013      	str	r3, [r2, #0]
            return;
 80097ae:	f000 be00 	b.w	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
        }
        // 在调整时间内继续执行调整
        if (raw_distance >= 22 && raw_distance <= 52) {
 80097b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80097b6:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 80097ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c2:	f2c0 8174 	blt.w	8009aae <Adjust_Right_Motors_By_Distance+0x65a>
 80097c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80097ca:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 80099ac <Adjust_Right_Motors_By_Distance+0x558>
 80097ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d6:	f200 816a 	bhi.w	8009aae <Adjust_Right_Motors_By_Distance+0x65a>
            // 向左调整，右侧轮子加速
            __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 - speed_adjust1);  // 左前减速
 80097da:	7b7a      	ldrb	r2, [r7, #13]
 80097dc:	4970      	ldr	r1, [pc, #448]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 80097de:	4613      	mov	r3, r2
 80097e0:	00db      	lsls	r3, r3, #3
 80097e2:	4413      	add	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	440b      	add	r3, r1
 80097e8:	3304      	adds	r3, #4
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10d      	bne.n	800980c <Adjust_Right_Motors_By_Distance+0x3b8>
 80097f0:	7b7a      	ldrb	r2, [r7, #13]
 80097f2:	496b      	ldr	r1, [pc, #428]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 80097f4:	4613      	mov	r3, r2
 80097f6:	00db      	lsls	r3, r3, #3
 80097f8:	4413      	add	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	440b      	add	r3, r1
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009804:	6a3a      	ldr	r2, [r7, #32]
 8009806:	1a8a      	subs	r2, r1, r2
 8009808:	635a      	str	r2, [r3, #52]	@ 0x34
 800980a:	e03e      	b.n	800988a <Adjust_Right_Motors_By_Distance+0x436>
 800980c:	7b7a      	ldrb	r2, [r7, #13]
 800980e:	4964      	ldr	r1, [pc, #400]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 8009810:	4613      	mov	r3, r2
 8009812:	00db      	lsls	r3, r3, #3
 8009814:	4413      	add	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	440b      	add	r3, r1
 800981a:	3304      	adds	r3, #4
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b04      	cmp	r3, #4
 8009820:	d10d      	bne.n	800983e <Adjust_Right_Motors_By_Distance+0x3ea>
 8009822:	7b7a      	ldrb	r2, [r7, #13]
 8009824:	495e      	ldr	r1, [pc, #376]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 8009826:	4613      	mov	r3, r2
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	4413      	add	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	440b      	add	r3, r1
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	1acb      	subs	r3, r1, r3
 800983a:	6393      	str	r3, [r2, #56]	@ 0x38
 800983c:	e025      	b.n	800988a <Adjust_Right_Motors_By_Distance+0x436>
 800983e:	7b7a      	ldrb	r2, [r7, #13]
 8009840:	4957      	ldr	r1, [pc, #348]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 8009842:	4613      	mov	r3, r2
 8009844:	00db      	lsls	r3, r3, #3
 8009846:	4413      	add	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	440b      	add	r3, r1
 800984c:	3304      	adds	r3, #4
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b08      	cmp	r3, #8
 8009852:	d10d      	bne.n	8009870 <Adjust_Right_Motors_By_Distance+0x41c>
 8009854:	7b7a      	ldrb	r2, [r7, #13]
 8009856:	4952      	ldr	r1, [pc, #328]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 8009858:	4613      	mov	r3, r2
 800985a:	00db      	lsls	r3, r3, #3
 800985c:	4413      	add	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	440b      	add	r3, r1
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009868:	6a3b      	ldr	r3, [r7, #32]
 800986a:	1acb      	subs	r3, r1, r3
 800986c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800986e:	e00c      	b.n	800988a <Adjust_Right_Motors_By_Distance+0x436>
 8009870:	7b7a      	ldrb	r2, [r7, #13]
 8009872:	494b      	ldr	r1, [pc, #300]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 8009874:	4613      	mov	r3, r2
 8009876:	00db      	lsls	r3, r3, #3
 8009878:	4413      	add	r3, r2
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	440b      	add	r3, r1
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	1acb      	subs	r3, r1, r3
 8009888:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 + speed_adjust3);  // 左后加速
 800988a:	7b3a      	ldrb	r2, [r7, #12]
 800988c:	4944      	ldr	r1, [pc, #272]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 800988e:	4613      	mov	r3, r2
 8009890:	00db      	lsls	r3, r3, #3
 8009892:	4413      	add	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	440b      	add	r3, r1
 8009898:	3304      	adds	r3, #4
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10d      	bne.n	80098bc <Adjust_Right_Motors_By_Distance+0x468>
 80098a0:	7b3a      	ldrb	r2, [r7, #12]
 80098a2:	493f      	ldr	r1, [pc, #252]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 80098a4:	4613      	mov	r3, r2
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	440b      	add	r3, r1
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098b4:	69ba      	ldr	r2, [r7, #24]
 80098b6:	440a      	add	r2, r1
 80098b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80098ba:	e03e      	b.n	800993a <Adjust_Right_Motors_By_Distance+0x4e6>
 80098bc:	7b3a      	ldrb	r2, [r7, #12]
 80098be:	4938      	ldr	r1, [pc, #224]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 80098c0:	4613      	mov	r3, r2
 80098c2:	00db      	lsls	r3, r3, #3
 80098c4:	4413      	add	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	440b      	add	r3, r1
 80098ca:	3304      	adds	r3, #4
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b04      	cmp	r3, #4
 80098d0:	d10d      	bne.n	80098ee <Adjust_Right_Motors_By_Distance+0x49a>
 80098d2:	7b3a      	ldrb	r2, [r7, #12]
 80098d4:	4932      	ldr	r1, [pc, #200]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 80098d6:	4613      	mov	r3, r2
 80098d8:	00db      	lsls	r3, r3, #3
 80098da:	4413      	add	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	440b      	add	r3, r1
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	440b      	add	r3, r1
 80098ea:	6393      	str	r3, [r2, #56]	@ 0x38
 80098ec:	e025      	b.n	800993a <Adjust_Right_Motors_By_Distance+0x4e6>
 80098ee:	7b3a      	ldrb	r2, [r7, #12]
 80098f0:	492b      	ldr	r1, [pc, #172]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 80098f2:	4613      	mov	r3, r2
 80098f4:	00db      	lsls	r3, r3, #3
 80098f6:	4413      	add	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	440b      	add	r3, r1
 80098fc:	3304      	adds	r3, #4
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b08      	cmp	r3, #8
 8009902:	d10d      	bne.n	8009920 <Adjust_Right_Motors_By_Distance+0x4cc>
 8009904:	7b3a      	ldrb	r2, [r7, #12]
 8009906:	4926      	ldr	r1, [pc, #152]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 8009908:	4613      	mov	r3, r2
 800990a:	00db      	lsls	r3, r3, #3
 800990c:	4413      	add	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	440b      	add	r3, r1
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	440b      	add	r3, r1
 800991c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800991e:	e00c      	b.n	800993a <Adjust_Right_Motors_By_Distance+0x4e6>
 8009920:	7b3a      	ldrb	r2, [r7, #12]
 8009922:	491f      	ldr	r1, [pc, #124]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 8009924:	4613      	mov	r3, r2
 8009926:	00db      	lsls	r3, r3, #3
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	440b      	add	r3, r1
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	440b      	add	r3, r1
 8009938:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 - speed_adjust2);  // 右后减速
 800993a:	7bfa      	ldrb	r2, [r7, #15]
 800993c:	4918      	ldr	r1, [pc, #96]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 800993e:	4613      	mov	r3, r2
 8009940:	00db      	lsls	r3, r3, #3
 8009942:	4413      	add	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	440b      	add	r3, r1
 8009948:	3304      	adds	r3, #4
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10d      	bne.n	800996c <Adjust_Right_Motors_By_Distance+0x518>
 8009950:	7bfa      	ldrb	r2, [r7, #15]
 8009952:	4913      	ldr	r1, [pc, #76]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 8009954:	4613      	mov	r3, r2
 8009956:	00db      	lsls	r3, r3, #3
 8009958:	4413      	add	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	440b      	add	r3, r1
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009964:	69fa      	ldr	r2, [r7, #28]
 8009966:	1a8a      	subs	r2, r1, r2
 8009968:	635a      	str	r2, [r3, #52]	@ 0x34
 800996a:	e047      	b.n	80099fc <Adjust_Right_Motors_By_Distance+0x5a8>
 800996c:	7bfa      	ldrb	r2, [r7, #15]
 800996e:	490c      	ldr	r1, [pc, #48]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 8009970:	4613      	mov	r3, r2
 8009972:	00db      	lsls	r3, r3, #3
 8009974:	4413      	add	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	440b      	add	r3, r1
 800997a:	3304      	adds	r3, #4
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b04      	cmp	r3, #4
 8009980:	d116      	bne.n	80099b0 <Adjust_Right_Motors_By_Distance+0x55c>
 8009982:	7bfa      	ldrb	r2, [r7, #15]
 8009984:	4906      	ldr	r1, [pc, #24]	@ (80099a0 <Adjust_Right_Motors_By_Distance+0x54c>)
 8009986:	4613      	mov	r3, r2
 8009988:	00db      	lsls	r3, r3, #3
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	440b      	add	r3, r1
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	1acb      	subs	r3, r1, r3
 800999a:	6393      	str	r3, [r2, #56]	@ 0x38
 800999c:	e02e      	b.n	80099fc <Adjust_Right_Motors_By_Distance+0x5a8>
 800999e:	bf00      	nop
 80099a0:	20000384 	.word	0x20000384
 80099a4:	20000610 	.word	0x20000610
 80099a8:	2000060c 	.word	0x2000060c
 80099ac:	42500000 	.word	0x42500000
 80099b0:	7bfa      	ldrb	r2, [r7, #15]
 80099b2:	499b      	ldr	r1, [pc, #620]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 80099b4:	4613      	mov	r3, r2
 80099b6:	00db      	lsls	r3, r3, #3
 80099b8:	4413      	add	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	440b      	add	r3, r1
 80099be:	3304      	adds	r3, #4
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b08      	cmp	r3, #8
 80099c4:	d10d      	bne.n	80099e2 <Adjust_Right_Motors_By_Distance+0x58e>
 80099c6:	7bfa      	ldrb	r2, [r7, #15]
 80099c8:	4995      	ldr	r1, [pc, #596]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 80099ca:	4613      	mov	r3, r2
 80099cc:	00db      	lsls	r3, r3, #3
 80099ce:	4413      	add	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	440b      	add	r3, r1
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	1acb      	subs	r3, r1, r3
 80099de:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80099e0:	e00c      	b.n	80099fc <Adjust_Right_Motors_By_Distance+0x5a8>
 80099e2:	7bfa      	ldrb	r2, [r7, #15]
 80099e4:	498e      	ldr	r1, [pc, #568]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 80099e6:	4613      	mov	r3, r2
 80099e8:	00db      	lsls	r3, r3, #3
 80099ea:	4413      	add	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	440b      	add	r3, r1
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	1acb      	subs	r3, r1, r3
 80099fa:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjust4);  // 右前加速
 80099fc:	7bba      	ldrb	r2, [r7, #14]
 80099fe:	4988      	ldr	r1, [pc, #544]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009a00:	4613      	mov	r3, r2
 8009a02:	00db      	lsls	r3, r3, #3
 8009a04:	4413      	add	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	440b      	add	r3, r1
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10d      	bne.n	8009a2e <Adjust_Right_Motors_By_Distance+0x5da>
 8009a12:	7bba      	ldrb	r2, [r7, #14]
 8009a14:	4982      	ldr	r1, [pc, #520]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009a16:	4613      	mov	r3, r2
 8009a18:	00db      	lsls	r3, r3, #3
 8009a1a:	4413      	add	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	440b      	add	r3, r1
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	440a      	add	r2, r1
 8009a2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8009a2c:	e1bc      	b.n	8009da8 <Adjust_Right_Motors_By_Distance+0x954>
 8009a2e:	7bba      	ldrb	r2, [r7, #14]
 8009a30:	497b      	ldr	r1, [pc, #492]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009a32:	4613      	mov	r3, r2
 8009a34:	00db      	lsls	r3, r3, #3
 8009a36:	4413      	add	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	440b      	add	r3, r1
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b04      	cmp	r3, #4
 8009a42:	d10d      	bne.n	8009a60 <Adjust_Right_Motors_By_Distance+0x60c>
 8009a44:	7bba      	ldrb	r2, [r7, #14]
 8009a46:	4976      	ldr	r1, [pc, #472]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009a48:	4613      	mov	r3, r2
 8009a4a:	00db      	lsls	r3, r3, #3
 8009a4c:	4413      	add	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	440b      	add	r3, r1
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	440b      	add	r3, r1
 8009a5c:	6393      	str	r3, [r2, #56]	@ 0x38
 8009a5e:	e1a3      	b.n	8009da8 <Adjust_Right_Motors_By_Distance+0x954>
 8009a60:	7bba      	ldrb	r2, [r7, #14]
 8009a62:	496f      	ldr	r1, [pc, #444]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009a64:	4613      	mov	r3, r2
 8009a66:	00db      	lsls	r3, r3, #3
 8009a68:	4413      	add	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	440b      	add	r3, r1
 8009a6e:	3304      	adds	r3, #4
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b08      	cmp	r3, #8
 8009a74:	d10d      	bne.n	8009a92 <Adjust_Right_Motors_By_Distance+0x63e>
 8009a76:	7bba      	ldrb	r2, [r7, #14]
 8009a78:	4969      	ldr	r1, [pc, #420]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	00db      	lsls	r3, r3, #3
 8009a7e:	4413      	add	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	440b      	add	r3, r1
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	440b      	add	r3, r1
 8009a8e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8009a90:	e18a      	b.n	8009da8 <Adjust_Right_Motors_By_Distance+0x954>
 8009a92:	7bba      	ldrb	r2, [r7, #14]
 8009a94:	4962      	ldr	r1, [pc, #392]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009a96:	4613      	mov	r3, r2
 8009a98:	00db      	lsls	r3, r3, #3
 8009a9a:	4413      	add	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	440b      	add	r3, r1
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	440b      	add	r3, r1
 8009aaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8009aac:	e17c      	b.n	8009da8 <Adjust_Right_Motors_By_Distance+0x954>
        } else if (raw_distance >= 126 && raw_distance <= 156) {
 8009aae:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ab2:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8009c24 <Adjust_Right_Motors_By_Distance+0x7d0>
 8009ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009abe:	da01      	bge.n	8009ac4 <Adjust_Right_Motors_By_Distance+0x670>
            __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 + speed_adjust1);  // 左前加速
            __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjust3);  // 左后减速
            __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 + speed_adjust2);  // 右后加速
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjust4);  // 右前减速
        }
        return;
 8009ac0:	f000 bc77 	b.w	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
        } else if (raw_distance >= 126 && raw_distance <= 156) {
 8009ac4:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ac8:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8009c28 <Adjust_Right_Motors_By_Distance+0x7d4>
 8009acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad4:	d901      	bls.n	8009ada <Adjust_Right_Motors_By_Distance+0x686>
        return;
 8009ad6:	f000 bc6c 	b.w	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
            __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 + speed_adjust1);  // 左前加速
 8009ada:	7b7a      	ldrb	r2, [r7, #13]
 8009adc:	4950      	ldr	r1, [pc, #320]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009ade:	4613      	mov	r3, r2
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	440b      	add	r3, r1
 8009ae8:	3304      	adds	r3, #4
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10d      	bne.n	8009b0c <Adjust_Right_Motors_By_Distance+0x6b8>
 8009af0:	7b7a      	ldrb	r2, [r7, #13]
 8009af2:	494b      	ldr	r1, [pc, #300]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009af4:	4613      	mov	r3, r2
 8009af6:	00db      	lsls	r3, r3, #3
 8009af8:	4413      	add	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	440b      	add	r3, r1
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b04:	6a3a      	ldr	r2, [r7, #32]
 8009b06:	440a      	add	r2, r1
 8009b08:	635a      	str	r2, [r3, #52]	@ 0x34
 8009b0a:	e03e      	b.n	8009b8a <Adjust_Right_Motors_By_Distance+0x736>
 8009b0c:	7b7a      	ldrb	r2, [r7, #13]
 8009b0e:	4944      	ldr	r1, [pc, #272]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009b10:	4613      	mov	r3, r2
 8009b12:	00db      	lsls	r3, r3, #3
 8009b14:	4413      	add	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	440b      	add	r3, r1
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d10d      	bne.n	8009b3e <Adjust_Right_Motors_By_Distance+0x6ea>
 8009b22:	7b7a      	ldrb	r2, [r7, #13]
 8009b24:	493e      	ldr	r1, [pc, #248]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009b26:	4613      	mov	r3, r2
 8009b28:	00db      	lsls	r3, r3, #3
 8009b2a:	4413      	add	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	440b      	add	r3, r1
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b36:	6a3b      	ldr	r3, [r7, #32]
 8009b38:	440b      	add	r3, r1
 8009b3a:	6393      	str	r3, [r2, #56]	@ 0x38
 8009b3c:	e025      	b.n	8009b8a <Adjust_Right_Motors_By_Distance+0x736>
 8009b3e:	7b7a      	ldrb	r2, [r7, #13]
 8009b40:	4937      	ldr	r1, [pc, #220]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009b42:	4613      	mov	r3, r2
 8009b44:	00db      	lsls	r3, r3, #3
 8009b46:	4413      	add	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	440b      	add	r3, r1
 8009b4c:	3304      	adds	r3, #4
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b08      	cmp	r3, #8
 8009b52:	d10d      	bne.n	8009b70 <Adjust_Right_Motors_By_Distance+0x71c>
 8009b54:	7b7a      	ldrb	r2, [r7, #13]
 8009b56:	4932      	ldr	r1, [pc, #200]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009b58:	4613      	mov	r3, r2
 8009b5a:	00db      	lsls	r3, r3, #3
 8009b5c:	4413      	add	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	440b      	add	r3, r1
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b68:	6a3b      	ldr	r3, [r7, #32]
 8009b6a:	440b      	add	r3, r1
 8009b6c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8009b6e:	e00c      	b.n	8009b8a <Adjust_Right_Motors_By_Distance+0x736>
 8009b70:	7b7a      	ldrb	r2, [r7, #13]
 8009b72:	492b      	ldr	r1, [pc, #172]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009b74:	4613      	mov	r3, r2
 8009b76:	00db      	lsls	r3, r3, #3
 8009b78:	4413      	add	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	440b      	add	r3, r1
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b84:	6a3b      	ldr	r3, [r7, #32]
 8009b86:	440b      	add	r3, r1
 8009b88:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjust3);  // 左后减速
 8009b8a:	7b3a      	ldrb	r2, [r7, #12]
 8009b8c:	4924      	ldr	r1, [pc, #144]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009b8e:	4613      	mov	r3, r2
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	4413      	add	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	440b      	add	r3, r1
 8009b98:	3304      	adds	r3, #4
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10d      	bne.n	8009bbc <Adjust_Right_Motors_By_Distance+0x768>
 8009ba0:	7b3a      	ldrb	r2, [r7, #12]
 8009ba2:	491f      	ldr	r1, [pc, #124]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	00db      	lsls	r3, r3, #3
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	440b      	add	r3, r1
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bb4:	69ba      	ldr	r2, [r7, #24]
 8009bb6:	1a8a      	subs	r2, r1, r2
 8009bb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8009bba:	e044      	b.n	8009c46 <Adjust_Right_Motors_By_Distance+0x7f2>
 8009bbc:	7b3a      	ldrb	r2, [r7, #12]
 8009bbe:	4918      	ldr	r1, [pc, #96]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	4413      	add	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	440b      	add	r3, r1
 8009bca:	3304      	adds	r3, #4
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2b04      	cmp	r3, #4
 8009bd0:	d10d      	bne.n	8009bee <Adjust_Right_Motors_By_Distance+0x79a>
 8009bd2:	7b3a      	ldrb	r2, [r7, #12]
 8009bd4:	4912      	ldr	r1, [pc, #72]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	00db      	lsls	r3, r3, #3
 8009bda:	4413      	add	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	440b      	add	r3, r1
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	1acb      	subs	r3, r1, r3
 8009bea:	6393      	str	r3, [r2, #56]	@ 0x38
 8009bec:	e02b      	b.n	8009c46 <Adjust_Right_Motors_By_Distance+0x7f2>
 8009bee:	7b3a      	ldrb	r2, [r7, #12]
 8009bf0:	490b      	ldr	r1, [pc, #44]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	00db      	lsls	r3, r3, #3
 8009bf6:	4413      	add	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	440b      	add	r3, r1
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b08      	cmp	r3, #8
 8009c02:	d113      	bne.n	8009c2c <Adjust_Right_Motors_By_Distance+0x7d8>
 8009c04:	7b3a      	ldrb	r2, [r7, #12]
 8009c06:	4906      	ldr	r1, [pc, #24]	@ (8009c20 <Adjust_Right_Motors_By_Distance+0x7cc>)
 8009c08:	4613      	mov	r3, r2
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	4413      	add	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	440b      	add	r3, r1
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	1acb      	subs	r3, r1, r3
 8009c1c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8009c1e:	e012      	b.n	8009c46 <Adjust_Right_Motors_By_Distance+0x7f2>
 8009c20:	20000384 	.word	0x20000384
 8009c24:	42fc0000 	.word	0x42fc0000
 8009c28:	431c0000 	.word	0x431c0000
 8009c2c:	7b3a      	ldrb	r2, [r7, #12]
 8009c2e:	49a4      	ldr	r1, [pc, #656]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009c30:	4613      	mov	r3, r2
 8009c32:	00db      	lsls	r3, r3, #3
 8009c34:	4413      	add	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	440b      	add	r3, r1
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	1acb      	subs	r3, r1, r3
 8009c44:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 + speed_adjust2);  // 右后加速
 8009c46:	7bfa      	ldrb	r2, [r7, #15]
 8009c48:	499d      	ldr	r1, [pc, #628]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	00db      	lsls	r3, r3, #3
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	440b      	add	r3, r1
 8009c54:	3304      	adds	r3, #4
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10d      	bne.n	8009c78 <Adjust_Right_Motors_By_Distance+0x824>
 8009c5c:	7bfa      	ldrb	r2, [r7, #15]
 8009c5e:	4998      	ldr	r1, [pc, #608]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009c60:	4613      	mov	r3, r2
 8009c62:	00db      	lsls	r3, r3, #3
 8009c64:	4413      	add	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	440b      	add	r3, r1
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c70:	69fa      	ldr	r2, [r7, #28]
 8009c72:	440a      	add	r2, r1
 8009c74:	635a      	str	r2, [r3, #52]	@ 0x34
 8009c76:	e03e      	b.n	8009cf6 <Adjust_Right_Motors_By_Distance+0x8a2>
 8009c78:	7bfa      	ldrb	r2, [r7, #15]
 8009c7a:	4991      	ldr	r1, [pc, #580]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	00db      	lsls	r3, r3, #3
 8009c80:	4413      	add	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	440b      	add	r3, r1
 8009c86:	3304      	adds	r3, #4
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	d10d      	bne.n	8009caa <Adjust_Right_Motors_By_Distance+0x856>
 8009c8e:	7bfa      	ldrb	r2, [r7, #15]
 8009c90:	498b      	ldr	r1, [pc, #556]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009c92:	4613      	mov	r3, r2
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	4413      	add	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	440b      	add	r3, r1
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	440b      	add	r3, r1
 8009ca6:	6393      	str	r3, [r2, #56]	@ 0x38
 8009ca8:	e025      	b.n	8009cf6 <Adjust_Right_Motors_By_Distance+0x8a2>
 8009caa:	7bfa      	ldrb	r2, [r7, #15]
 8009cac:	4984      	ldr	r1, [pc, #528]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009cae:	4613      	mov	r3, r2
 8009cb0:	00db      	lsls	r3, r3, #3
 8009cb2:	4413      	add	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	440b      	add	r3, r1
 8009cb8:	3304      	adds	r3, #4
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b08      	cmp	r3, #8
 8009cbe:	d10d      	bne.n	8009cdc <Adjust_Right_Motors_By_Distance+0x888>
 8009cc0:	7bfa      	ldrb	r2, [r7, #15]
 8009cc2:	497f      	ldr	r1, [pc, #508]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	00db      	lsls	r3, r3, #3
 8009cc8:	4413      	add	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	440b      	add	r3, r1
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	440b      	add	r3, r1
 8009cd8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8009cda:	e00c      	b.n	8009cf6 <Adjust_Right_Motors_By_Distance+0x8a2>
 8009cdc:	7bfa      	ldrb	r2, [r7, #15]
 8009cde:	4978      	ldr	r1, [pc, #480]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	00db      	lsls	r3, r3, #3
 8009ce4:	4413      	add	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	440b      	add	r3, r1
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	440b      	add	r3, r1
 8009cf4:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjust4);  // 右前减速
 8009cf6:	7bba      	ldrb	r2, [r7, #14]
 8009cf8:	4971      	ldr	r1, [pc, #452]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	00db      	lsls	r3, r3, #3
 8009cfe:	4413      	add	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	440b      	add	r3, r1
 8009d04:	3304      	adds	r3, #4
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10d      	bne.n	8009d28 <Adjust_Right_Motors_By_Distance+0x8d4>
 8009d0c:	7bba      	ldrb	r2, [r7, #14]
 8009d0e:	496c      	ldr	r1, [pc, #432]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009d10:	4613      	mov	r3, r2
 8009d12:	00db      	lsls	r3, r3, #3
 8009d14:	4413      	add	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	440b      	add	r3, r1
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	1a8a      	subs	r2, r1, r2
 8009d24:	635a      	str	r2, [r3, #52]	@ 0x34
        return;
 8009d26:	e344      	b.n	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjust4);  // 右前减速
 8009d28:	7bba      	ldrb	r2, [r7, #14]
 8009d2a:	4965      	ldr	r1, [pc, #404]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	00db      	lsls	r3, r3, #3
 8009d30:	4413      	add	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	440b      	add	r3, r1
 8009d36:	3304      	adds	r3, #4
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b04      	cmp	r3, #4
 8009d3c:	d10d      	bne.n	8009d5a <Adjust_Right_Motors_By_Distance+0x906>
 8009d3e:	7bba      	ldrb	r2, [r7, #14]
 8009d40:	495f      	ldr	r1, [pc, #380]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009d42:	4613      	mov	r3, r2
 8009d44:	00db      	lsls	r3, r3, #3
 8009d46:	4413      	add	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	440b      	add	r3, r1
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	1acb      	subs	r3, r1, r3
 8009d56:	6393      	str	r3, [r2, #56]	@ 0x38
        return;
 8009d58:	e32b      	b.n	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjust4);  // 右前减速
 8009d5a:	7bba      	ldrb	r2, [r7, #14]
 8009d5c:	4958      	ldr	r1, [pc, #352]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009d5e:	4613      	mov	r3, r2
 8009d60:	00db      	lsls	r3, r3, #3
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	440b      	add	r3, r1
 8009d68:	3304      	adds	r3, #4
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b08      	cmp	r3, #8
 8009d6e:	d10d      	bne.n	8009d8c <Adjust_Right_Motors_By_Distance+0x938>
 8009d70:	7bba      	ldrb	r2, [r7, #14]
 8009d72:	4953      	ldr	r1, [pc, #332]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009d74:	4613      	mov	r3, r2
 8009d76:	00db      	lsls	r3, r3, #3
 8009d78:	4413      	add	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	440b      	add	r3, r1
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	1acb      	subs	r3, r1, r3
 8009d88:	63d3      	str	r3, [r2, #60]	@ 0x3c
        return;
 8009d8a:	e312      	b.n	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjust4);  // 右前减速
 8009d8c:	7bba      	ldrb	r2, [r7, #14]
 8009d8e:	494c      	ldr	r1, [pc, #304]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009d90:	4613      	mov	r3, r2
 8009d92:	00db      	lsls	r3, r3, #3
 8009d94:	4413      	add	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	440b      	add	r3, r1
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	1acb      	subs	r3, r1, r3
 8009da4:	6413      	str	r3, [r2, #64]	@ 0x40
        return;
 8009da6:	e304      	b.n	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
 8009da8:	e303      	b.n	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
    }
    
    // 检测是否超出阈值，如果是则开始调整
    if (raw_distance >= 22 && raw_distance <= 52) {
 8009daa:	edd7 7a02 	vldr	s15, [r7, #8]
 8009dae:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8009db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dba:	f2c0 8177 	blt.w	800a0ac <Adjust_Right_Motors_By_Distance+0xc58>
 8009dbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8009dc2:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8009ec4 <Adjust_Right_Motors_By_Distance+0xa70>
 8009dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dce:	f200 816d 	bhi.w	800a0ac <Adjust_Right_Motors_By_Distance+0xc58>
        adjust_start_time = HAL_GetTick();
 8009dd2:	f003 f92f 	bl	800d034 <HAL_GetTick>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4a3b      	ldr	r2, [pc, #236]	@ (8009ec8 <Adjust_Right_Motors_By_Distance+0xa74>)
 8009dda:	6013      	str	r3, [r2, #0]
        // 向左调整，右侧轮子加速
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 - speed_adjust1);  // 左前减速
 8009ddc:	7b7a      	ldrb	r2, [r7, #13]
 8009dde:	4938      	ldr	r1, [pc, #224]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009de0:	4613      	mov	r3, r2
 8009de2:	00db      	lsls	r3, r3, #3
 8009de4:	4413      	add	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	440b      	add	r3, r1
 8009dea:	3304      	adds	r3, #4
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10d      	bne.n	8009e0e <Adjust_Right_Motors_By_Distance+0x9ba>
 8009df2:	7b7a      	ldrb	r2, [r7, #13]
 8009df4:	4932      	ldr	r1, [pc, #200]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009df6:	4613      	mov	r3, r2
 8009df8:	00db      	lsls	r3, r3, #3
 8009dfa:	4413      	add	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	440b      	add	r3, r1
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e06:	6a3a      	ldr	r2, [r7, #32]
 8009e08:	1a8a      	subs	r2, r1, r2
 8009e0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8009e0c:	e03e      	b.n	8009e8c <Adjust_Right_Motors_By_Distance+0xa38>
 8009e0e:	7b7a      	ldrb	r2, [r7, #13]
 8009e10:	492b      	ldr	r1, [pc, #172]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009e12:	4613      	mov	r3, r2
 8009e14:	00db      	lsls	r3, r3, #3
 8009e16:	4413      	add	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	440b      	add	r3, r1
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d10d      	bne.n	8009e40 <Adjust_Right_Motors_By_Distance+0x9ec>
 8009e24:	7b7a      	ldrb	r2, [r7, #13]
 8009e26:	4926      	ldr	r1, [pc, #152]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009e28:	4613      	mov	r3, r2
 8009e2a:	00db      	lsls	r3, r3, #3
 8009e2c:	4413      	add	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	440b      	add	r3, r1
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	1acb      	subs	r3, r1, r3
 8009e3c:	6393      	str	r3, [r2, #56]	@ 0x38
 8009e3e:	e025      	b.n	8009e8c <Adjust_Right_Motors_By_Distance+0xa38>
 8009e40:	7b7a      	ldrb	r2, [r7, #13]
 8009e42:	491f      	ldr	r1, [pc, #124]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009e44:	4613      	mov	r3, r2
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	4413      	add	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	440b      	add	r3, r1
 8009e4e:	3304      	adds	r3, #4
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b08      	cmp	r3, #8
 8009e54:	d10d      	bne.n	8009e72 <Adjust_Right_Motors_By_Distance+0xa1e>
 8009e56:	7b7a      	ldrb	r2, [r7, #13]
 8009e58:	4919      	ldr	r1, [pc, #100]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	00db      	lsls	r3, r3, #3
 8009e5e:	4413      	add	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	440b      	add	r3, r1
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	1acb      	subs	r3, r1, r3
 8009e6e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8009e70:	e00c      	b.n	8009e8c <Adjust_Right_Motors_By_Distance+0xa38>
 8009e72:	7b7a      	ldrb	r2, [r7, #13]
 8009e74:	4912      	ldr	r1, [pc, #72]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009e76:	4613      	mov	r3, r2
 8009e78:	00db      	lsls	r3, r3, #3
 8009e7a:	4413      	add	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	440b      	add	r3, r1
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	1acb      	subs	r3, r1, r3
 8009e8a:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 + speed_adjust3);  // 左后加速
 8009e8c:	7b3a      	ldrb	r2, [r7, #12]
 8009e8e:	490c      	ldr	r1, [pc, #48]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009e90:	4613      	mov	r3, r2
 8009e92:	00db      	lsls	r3, r3, #3
 8009e94:	4413      	add	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	440b      	add	r3, r1
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d114      	bne.n	8009ecc <Adjust_Right_Motors_By_Distance+0xa78>
 8009ea2:	7b3a      	ldrb	r2, [r7, #12]
 8009ea4:	4906      	ldr	r1, [pc, #24]	@ (8009ec0 <Adjust_Right_Motors_By_Distance+0xa6c>)
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	00db      	lsls	r3, r3, #3
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	440b      	add	r3, r1
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	440a      	add	r2, r1
 8009eba:	635a      	str	r2, [r3, #52]	@ 0x34
 8009ebc:	e045      	b.n	8009f4a <Adjust_Right_Motors_By_Distance+0xaf6>
 8009ebe:	bf00      	nop
 8009ec0:	20000384 	.word	0x20000384
 8009ec4:	42500000 	.word	0x42500000
 8009ec8:	20000610 	.word	0x20000610
 8009ecc:	7b3a      	ldrb	r2, [r7, #12]
 8009ece:	49a9      	ldr	r1, [pc, #676]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	00db      	lsls	r3, r3, #3
 8009ed4:	4413      	add	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	440b      	add	r3, r1
 8009eda:	3304      	adds	r3, #4
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b04      	cmp	r3, #4
 8009ee0:	d10d      	bne.n	8009efe <Adjust_Right_Motors_By_Distance+0xaaa>
 8009ee2:	7b3a      	ldrb	r2, [r7, #12]
 8009ee4:	49a3      	ldr	r1, [pc, #652]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	00db      	lsls	r3, r3, #3
 8009eea:	4413      	add	r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	440b      	add	r3, r1
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	440b      	add	r3, r1
 8009efa:	6393      	str	r3, [r2, #56]	@ 0x38
 8009efc:	e025      	b.n	8009f4a <Adjust_Right_Motors_By_Distance+0xaf6>
 8009efe:	7b3a      	ldrb	r2, [r7, #12]
 8009f00:	499c      	ldr	r1, [pc, #624]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 8009f02:	4613      	mov	r3, r2
 8009f04:	00db      	lsls	r3, r3, #3
 8009f06:	4413      	add	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	440b      	add	r3, r1
 8009f0c:	3304      	adds	r3, #4
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b08      	cmp	r3, #8
 8009f12:	d10d      	bne.n	8009f30 <Adjust_Right_Motors_By_Distance+0xadc>
 8009f14:	7b3a      	ldrb	r2, [r7, #12]
 8009f16:	4997      	ldr	r1, [pc, #604]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 8009f18:	4613      	mov	r3, r2
 8009f1a:	00db      	lsls	r3, r3, #3
 8009f1c:	4413      	add	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	440b      	add	r3, r1
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	440b      	add	r3, r1
 8009f2c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8009f2e:	e00c      	b.n	8009f4a <Adjust_Right_Motors_By_Distance+0xaf6>
 8009f30:	7b3a      	ldrb	r2, [r7, #12]
 8009f32:	4990      	ldr	r1, [pc, #576]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 8009f34:	4613      	mov	r3, r2
 8009f36:	00db      	lsls	r3, r3, #3
 8009f38:	4413      	add	r3, r2
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	440b      	add	r3, r1
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	440b      	add	r3, r1
 8009f48:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 - speed_adjust2);  // 右后减速
 8009f4a:	7bfa      	ldrb	r2, [r7, #15]
 8009f4c:	4989      	ldr	r1, [pc, #548]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 8009f4e:	4613      	mov	r3, r2
 8009f50:	00db      	lsls	r3, r3, #3
 8009f52:	4413      	add	r3, r2
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	440b      	add	r3, r1
 8009f58:	3304      	adds	r3, #4
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d10d      	bne.n	8009f7c <Adjust_Right_Motors_By_Distance+0xb28>
 8009f60:	7bfa      	ldrb	r2, [r7, #15]
 8009f62:	4984      	ldr	r1, [pc, #528]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 8009f64:	4613      	mov	r3, r2
 8009f66:	00db      	lsls	r3, r3, #3
 8009f68:	4413      	add	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	440b      	add	r3, r1
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f74:	69fa      	ldr	r2, [r7, #28]
 8009f76:	1a8a      	subs	r2, r1, r2
 8009f78:	635a      	str	r2, [r3, #52]	@ 0x34
 8009f7a:	e03e      	b.n	8009ffa <Adjust_Right_Motors_By_Distance+0xba6>
 8009f7c:	7bfa      	ldrb	r2, [r7, #15]
 8009f7e:	497d      	ldr	r1, [pc, #500]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 8009f80:	4613      	mov	r3, r2
 8009f82:	00db      	lsls	r3, r3, #3
 8009f84:	4413      	add	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	440b      	add	r3, r1
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	d10d      	bne.n	8009fae <Adjust_Right_Motors_By_Distance+0xb5a>
 8009f92:	7bfa      	ldrb	r2, [r7, #15]
 8009f94:	4977      	ldr	r1, [pc, #476]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 8009f96:	4613      	mov	r3, r2
 8009f98:	00db      	lsls	r3, r3, #3
 8009f9a:	4413      	add	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	440b      	add	r3, r1
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	1acb      	subs	r3, r1, r3
 8009faa:	6393      	str	r3, [r2, #56]	@ 0x38
 8009fac:	e025      	b.n	8009ffa <Adjust_Right_Motors_By_Distance+0xba6>
 8009fae:	7bfa      	ldrb	r2, [r7, #15]
 8009fb0:	4970      	ldr	r1, [pc, #448]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	00db      	lsls	r3, r3, #3
 8009fb6:	4413      	add	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	440b      	add	r3, r1
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b08      	cmp	r3, #8
 8009fc2:	d10d      	bne.n	8009fe0 <Adjust_Right_Motors_By_Distance+0xb8c>
 8009fc4:	7bfa      	ldrb	r2, [r7, #15]
 8009fc6:	496b      	ldr	r1, [pc, #428]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 8009fc8:	4613      	mov	r3, r2
 8009fca:	00db      	lsls	r3, r3, #3
 8009fcc:	4413      	add	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	440b      	add	r3, r1
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	1acb      	subs	r3, r1, r3
 8009fdc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8009fde:	e00c      	b.n	8009ffa <Adjust_Right_Motors_By_Distance+0xba6>
 8009fe0:	7bfa      	ldrb	r2, [r7, #15]
 8009fe2:	4964      	ldr	r1, [pc, #400]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	00db      	lsls	r3, r3, #3
 8009fe8:	4413      	add	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	440b      	add	r3, r1
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	1acb      	subs	r3, r1, r3
 8009ff8:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjust4);  // 右前加速
 8009ffa:	7bba      	ldrb	r2, [r7, #14]
 8009ffc:	495d      	ldr	r1, [pc, #372]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 8009ffe:	4613      	mov	r3, r2
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	4413      	add	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	440b      	add	r3, r1
 800a008:	3304      	adds	r3, #4
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10d      	bne.n	800a02c <Adjust_Right_Motors_By_Distance+0xbd8>
 800a010:	7bba      	ldrb	r2, [r7, #14]
 800a012:	4958      	ldr	r1, [pc, #352]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 800a014:	4613      	mov	r3, r2
 800a016:	00db      	lsls	r3, r3, #3
 800a018:	4413      	add	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	440b      	add	r3, r1
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	440a      	add	r2, r1
 800a028:	635a      	str	r2, [r3, #52]	@ 0x34
 800a02a:	e1c2      	b.n	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
 800a02c:	7bba      	ldrb	r2, [r7, #14]
 800a02e:	4951      	ldr	r1, [pc, #324]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 800a030:	4613      	mov	r3, r2
 800a032:	00db      	lsls	r3, r3, #3
 800a034:	4413      	add	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	440b      	add	r3, r1
 800a03a:	3304      	adds	r3, #4
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2b04      	cmp	r3, #4
 800a040:	d10d      	bne.n	800a05e <Adjust_Right_Motors_By_Distance+0xc0a>
 800a042:	7bba      	ldrb	r2, [r7, #14]
 800a044:	494b      	ldr	r1, [pc, #300]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 800a046:	4613      	mov	r3, r2
 800a048:	00db      	lsls	r3, r3, #3
 800a04a:	4413      	add	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	440b      	add	r3, r1
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	440b      	add	r3, r1
 800a05a:	6393      	str	r3, [r2, #56]	@ 0x38
 800a05c:	e1a9      	b.n	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
 800a05e:	7bba      	ldrb	r2, [r7, #14]
 800a060:	4944      	ldr	r1, [pc, #272]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 800a062:	4613      	mov	r3, r2
 800a064:	00db      	lsls	r3, r3, #3
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	440b      	add	r3, r1
 800a06c:	3304      	adds	r3, #4
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b08      	cmp	r3, #8
 800a072:	d10d      	bne.n	800a090 <Adjust_Right_Motors_By_Distance+0xc3c>
 800a074:	7bba      	ldrb	r2, [r7, #14]
 800a076:	493f      	ldr	r1, [pc, #252]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 800a078:	4613      	mov	r3, r2
 800a07a:	00db      	lsls	r3, r3, #3
 800a07c:	4413      	add	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	440b      	add	r3, r1
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	440b      	add	r3, r1
 800a08c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800a08e:	e190      	b.n	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
 800a090:	7bba      	ldrb	r2, [r7, #14]
 800a092:	4938      	ldr	r1, [pc, #224]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 800a094:	4613      	mov	r3, r2
 800a096:	00db      	lsls	r3, r3, #3
 800a098:	4413      	add	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	440b      	add	r3, r1
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	440b      	add	r3, r1
 800a0a8:	6413      	str	r3, [r2, #64]	@ 0x40
 800a0aa:	e182      	b.n	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
    } else if (raw_distance >= 126 && raw_distance <= 156) {
 800a0ac:	edd7 7a02 	vldr	s15, [r7, #8]
 800a0b0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800a178 <Adjust_Right_Motors_By_Distance+0xd24>
 800a0b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0bc:	f2c0 8179 	blt.w	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
 800a0c0:	edd7 7a02 	vldr	s15, [r7, #8]
 800a0c4:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800a17c <Adjust_Right_Motors_By_Distance+0xd28>
 800a0c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0d0:	f200 816f 	bhi.w	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
        adjust_start_time = HAL_GetTick();
 800a0d4:	f002 ffae 	bl	800d034 <HAL_GetTick>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	4a29      	ldr	r2, [pc, #164]	@ (800a180 <Adjust_Right_Motors_By_Distance+0xd2c>)
 800a0dc:	6013      	str	r3, [r2, #0]
        // 向右调整，左侧轮子加速
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 + speed_adjust1);  // 左前加速
 800a0de:	7b7a      	ldrb	r2, [r7, #13]
 800a0e0:	4924      	ldr	r1, [pc, #144]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	00db      	lsls	r3, r3, #3
 800a0e6:	4413      	add	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	440b      	add	r3, r1
 800a0ec:	3304      	adds	r3, #4
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10d      	bne.n	800a110 <Adjust_Right_Motors_By_Distance+0xcbc>
 800a0f4:	7b7a      	ldrb	r2, [r7, #13]
 800a0f6:	491f      	ldr	r1, [pc, #124]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	4413      	add	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	440b      	add	r3, r1
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a108:	6a3a      	ldr	r2, [r7, #32]
 800a10a:	440a      	add	r2, r1
 800a10c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a10e:	e046      	b.n	800a19e <Adjust_Right_Motors_By_Distance+0xd4a>
 800a110:	7b7a      	ldrb	r2, [r7, #13]
 800a112:	4918      	ldr	r1, [pc, #96]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 800a114:	4613      	mov	r3, r2
 800a116:	00db      	lsls	r3, r3, #3
 800a118:	4413      	add	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	440b      	add	r3, r1
 800a11e:	3304      	adds	r3, #4
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	2b04      	cmp	r3, #4
 800a124:	d10d      	bne.n	800a142 <Adjust_Right_Motors_By_Distance+0xcee>
 800a126:	7b7a      	ldrb	r2, [r7, #13]
 800a128:	4912      	ldr	r1, [pc, #72]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 800a12a:	4613      	mov	r3, r2
 800a12c:	00db      	lsls	r3, r3, #3
 800a12e:	4413      	add	r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	440b      	add	r3, r1
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	440b      	add	r3, r1
 800a13e:	6393      	str	r3, [r2, #56]	@ 0x38
 800a140:	e02d      	b.n	800a19e <Adjust_Right_Motors_By_Distance+0xd4a>
 800a142:	7b7a      	ldrb	r2, [r7, #13]
 800a144:	490b      	ldr	r1, [pc, #44]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 800a146:	4613      	mov	r3, r2
 800a148:	00db      	lsls	r3, r3, #3
 800a14a:	4413      	add	r3, r2
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	440b      	add	r3, r1
 800a150:	3304      	adds	r3, #4
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b08      	cmp	r3, #8
 800a156:	d115      	bne.n	800a184 <Adjust_Right_Motors_By_Distance+0xd30>
 800a158:	7b7a      	ldrb	r2, [r7, #13]
 800a15a:	4906      	ldr	r1, [pc, #24]	@ (800a174 <Adjust_Right_Motors_By_Distance+0xd20>)
 800a15c:	4613      	mov	r3, r2
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	4413      	add	r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	440b      	add	r3, r1
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a16c:	6a3b      	ldr	r3, [r7, #32]
 800a16e:	440b      	add	r3, r1
 800a170:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800a172:	e014      	b.n	800a19e <Adjust_Right_Motors_By_Distance+0xd4a>
 800a174:	20000384 	.word	0x20000384
 800a178:	42fc0000 	.word	0x42fc0000
 800a17c:	431c0000 	.word	0x431c0000
 800a180:	20000610 	.word	0x20000610
 800a184:	7b7a      	ldrb	r2, [r7, #13]
 800a186:	498c      	ldr	r1, [pc, #560]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a188:	4613      	mov	r3, r2
 800a18a:	00db      	lsls	r3, r3, #3
 800a18c:	4413      	add	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	440b      	add	r3, r1
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	440b      	add	r3, r1
 800a19c:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjust3);  // 左后减速
 800a19e:	7b3a      	ldrb	r2, [r7, #12]
 800a1a0:	4985      	ldr	r1, [pc, #532]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	00db      	lsls	r3, r3, #3
 800a1a6:	4413      	add	r3, r2
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	440b      	add	r3, r1
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10d      	bne.n	800a1d0 <Adjust_Right_Motors_By_Distance+0xd7c>
 800a1b4:	7b3a      	ldrb	r2, [r7, #12]
 800a1b6:	4980      	ldr	r1, [pc, #512]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	00db      	lsls	r3, r3, #3
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	440b      	add	r3, r1
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	1a8a      	subs	r2, r1, r2
 800a1cc:	635a      	str	r2, [r3, #52]	@ 0x34
 800a1ce:	e03e      	b.n	800a24e <Adjust_Right_Motors_By_Distance+0xdfa>
 800a1d0:	7b3a      	ldrb	r2, [r7, #12]
 800a1d2:	4979      	ldr	r1, [pc, #484]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	4413      	add	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	440b      	add	r3, r1
 800a1de:	3304      	adds	r3, #4
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b04      	cmp	r3, #4
 800a1e4:	d10d      	bne.n	800a202 <Adjust_Right_Motors_By_Distance+0xdae>
 800a1e6:	7b3a      	ldrb	r2, [r7, #12]
 800a1e8:	4973      	ldr	r1, [pc, #460]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	00db      	lsls	r3, r3, #3
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	1acb      	subs	r3, r1, r3
 800a1fe:	6393      	str	r3, [r2, #56]	@ 0x38
 800a200:	e025      	b.n	800a24e <Adjust_Right_Motors_By_Distance+0xdfa>
 800a202:	7b3a      	ldrb	r2, [r7, #12]
 800a204:	496c      	ldr	r1, [pc, #432]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a206:	4613      	mov	r3, r2
 800a208:	00db      	lsls	r3, r3, #3
 800a20a:	4413      	add	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	440b      	add	r3, r1
 800a210:	3304      	adds	r3, #4
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b08      	cmp	r3, #8
 800a216:	d10d      	bne.n	800a234 <Adjust_Right_Motors_By_Distance+0xde0>
 800a218:	7b3a      	ldrb	r2, [r7, #12]
 800a21a:	4967      	ldr	r1, [pc, #412]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a21c:	4613      	mov	r3, r2
 800a21e:	00db      	lsls	r3, r3, #3
 800a220:	4413      	add	r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	440b      	add	r3, r1
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	1acb      	subs	r3, r1, r3
 800a230:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800a232:	e00c      	b.n	800a24e <Adjust_Right_Motors_By_Distance+0xdfa>
 800a234:	7b3a      	ldrb	r2, [r7, #12]
 800a236:	4960      	ldr	r1, [pc, #384]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a238:	4613      	mov	r3, r2
 800a23a:	00db      	lsls	r3, r3, #3
 800a23c:	4413      	add	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	440b      	add	r3, r1
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	1acb      	subs	r3, r1, r3
 800a24c:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 + speed_adjust2);  // 右后加速
 800a24e:	7bfa      	ldrb	r2, [r7, #15]
 800a250:	4959      	ldr	r1, [pc, #356]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a252:	4613      	mov	r3, r2
 800a254:	00db      	lsls	r3, r3, #3
 800a256:	4413      	add	r3, r2
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	440b      	add	r3, r1
 800a25c:	3304      	adds	r3, #4
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10d      	bne.n	800a280 <Adjust_Right_Motors_By_Distance+0xe2c>
 800a264:	7bfa      	ldrb	r2, [r7, #15]
 800a266:	4954      	ldr	r1, [pc, #336]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a268:	4613      	mov	r3, r2
 800a26a:	00db      	lsls	r3, r3, #3
 800a26c:	4413      	add	r3, r2
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	440b      	add	r3, r1
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a278:	69fa      	ldr	r2, [r7, #28]
 800a27a:	440a      	add	r2, r1
 800a27c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a27e:	e03e      	b.n	800a2fe <Adjust_Right_Motors_By_Distance+0xeaa>
 800a280:	7bfa      	ldrb	r2, [r7, #15]
 800a282:	494d      	ldr	r1, [pc, #308]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a284:	4613      	mov	r3, r2
 800a286:	00db      	lsls	r3, r3, #3
 800a288:	4413      	add	r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	440b      	add	r3, r1
 800a28e:	3304      	adds	r3, #4
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b04      	cmp	r3, #4
 800a294:	d10d      	bne.n	800a2b2 <Adjust_Right_Motors_By_Distance+0xe5e>
 800a296:	7bfa      	ldrb	r2, [r7, #15]
 800a298:	4947      	ldr	r1, [pc, #284]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a29a:	4613      	mov	r3, r2
 800a29c:	00db      	lsls	r3, r3, #3
 800a29e:	4413      	add	r3, r2
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	440b      	add	r3, r1
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	440b      	add	r3, r1
 800a2ae:	6393      	str	r3, [r2, #56]	@ 0x38
 800a2b0:	e025      	b.n	800a2fe <Adjust_Right_Motors_By_Distance+0xeaa>
 800a2b2:	7bfa      	ldrb	r2, [r7, #15]
 800a2b4:	4940      	ldr	r1, [pc, #256]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	00db      	lsls	r3, r3, #3
 800a2ba:	4413      	add	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	440b      	add	r3, r1
 800a2c0:	3304      	adds	r3, #4
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b08      	cmp	r3, #8
 800a2c6:	d10d      	bne.n	800a2e4 <Adjust_Right_Motors_By_Distance+0xe90>
 800a2c8:	7bfa      	ldrb	r2, [r7, #15]
 800a2ca:	493b      	ldr	r1, [pc, #236]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	00db      	lsls	r3, r3, #3
 800a2d0:	4413      	add	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	440b      	add	r3, r1
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	440b      	add	r3, r1
 800a2e0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800a2e2:	e00c      	b.n	800a2fe <Adjust_Right_Motors_By_Distance+0xeaa>
 800a2e4:	7bfa      	ldrb	r2, [r7, #15]
 800a2e6:	4934      	ldr	r1, [pc, #208]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	00db      	lsls	r3, r3, #3
 800a2ec:	4413      	add	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	440b      	add	r3, r1
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	440b      	add	r3, r1
 800a2fc:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjust4);  // 右前减速
 800a2fe:	7bba      	ldrb	r2, [r7, #14]
 800a300:	492d      	ldr	r1, [pc, #180]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a302:	4613      	mov	r3, r2
 800a304:	00db      	lsls	r3, r3, #3
 800a306:	4413      	add	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	440b      	add	r3, r1
 800a30c:	3304      	adds	r3, #4
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10d      	bne.n	800a330 <Adjust_Right_Motors_By_Distance+0xedc>
 800a314:	7bba      	ldrb	r2, [r7, #14]
 800a316:	4928      	ldr	r1, [pc, #160]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a318:	4613      	mov	r3, r2
 800a31a:	00db      	lsls	r3, r3, #3
 800a31c:	4413      	add	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	440b      	add	r3, r1
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	1a8a      	subs	r2, r1, r2
 800a32c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a32e:	e040      	b.n	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
 800a330:	7bba      	ldrb	r2, [r7, #14]
 800a332:	4921      	ldr	r1, [pc, #132]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a334:	4613      	mov	r3, r2
 800a336:	00db      	lsls	r3, r3, #3
 800a338:	4413      	add	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	440b      	add	r3, r1
 800a33e:	3304      	adds	r3, #4
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b04      	cmp	r3, #4
 800a344:	d10d      	bne.n	800a362 <Adjust_Right_Motors_By_Distance+0xf0e>
 800a346:	7bba      	ldrb	r2, [r7, #14]
 800a348:	491b      	ldr	r1, [pc, #108]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a34a:	4613      	mov	r3, r2
 800a34c:	00db      	lsls	r3, r3, #3
 800a34e:	4413      	add	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	440b      	add	r3, r1
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	1acb      	subs	r3, r1, r3
 800a35e:	6393      	str	r3, [r2, #56]	@ 0x38
 800a360:	e027      	b.n	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
 800a362:	7bba      	ldrb	r2, [r7, #14]
 800a364:	4914      	ldr	r1, [pc, #80]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a366:	4613      	mov	r3, r2
 800a368:	00db      	lsls	r3, r3, #3
 800a36a:	4413      	add	r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	440b      	add	r3, r1
 800a370:	3304      	adds	r3, #4
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2b08      	cmp	r3, #8
 800a376:	d10d      	bne.n	800a394 <Adjust_Right_Motors_By_Distance+0xf40>
 800a378:	7bba      	ldrb	r2, [r7, #14]
 800a37a:	490f      	ldr	r1, [pc, #60]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a37c:	4613      	mov	r3, r2
 800a37e:	00db      	lsls	r3, r3, #3
 800a380:	4413      	add	r3, r2
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	440b      	add	r3, r1
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	1acb      	subs	r3, r1, r3
 800a390:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800a392:	e00e      	b.n	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
 800a394:	7bba      	ldrb	r2, [r7, #14]
 800a396:	4908      	ldr	r1, [pc, #32]	@ (800a3b8 <Adjust_Right_Motors_By_Distance+0xf64>)
 800a398:	4613      	mov	r3, r2
 800a39a:	00db      	lsls	r3, r3, #3
 800a39c:	4413      	add	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	440b      	add	r3, r1
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	1acb      	subs	r3, r1, r3
 800a3ac:	6413      	str	r3, [r2, #64]	@ 0x40
 800a3ae:	e000      	b.n	800a3b2 <Adjust_Right_Motors_By_Distance+0xf5e>
        return;
 800a3b0:	bf00      	nop
    }
}
 800a3b2:	3744      	adds	r7, #68	@ 0x44
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd90      	pop	{r4, r7, pc}
 800a3b8:	20000384 	.word	0x20000384

0800a3bc <Adjust_Motors_By_Side_Distances>:
//         // 短暂延时，避免过于频繁的更新
//         HAL_Delay(10);
//     }
// }

void Adjust_Motors_By_Side_Distances(Motor_ID id1, Motor_ID id3, Motor_ID id2, Motor_ID id4, float left_distance, float right_distance, float threshold) {
 800a3bc:	b590      	push	{r4, r7, lr}
 800a3be:	b091      	sub	sp, #68	@ 0x44
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	4608      	mov	r0, r1
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	ed87 0a02 	vstr	s0, [r7, #8]
 800a3ce:	edc7 0a01 	vstr	s1, [r7, #4]
 800a3d2:	ed87 1a00 	vstr	s2, [r7]
 800a3d6:	4623      	mov	r3, r4
 800a3d8:	73fb      	strb	r3, [r7, #15]
 800a3da:	4603      	mov	r3, r0
 800a3dc:	73bb      	strb	r3, [r7, #14]
 800a3de:	460b      	mov	r3, r1
 800a3e0:	737b      	strb	r3, [r7, #13]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	733b      	strb	r3, [r7, #12]
    static uint32_t adjust_start_time = 0;
    static uint32_t last_adjustment_time = 0;  // 添加上次调整时间记录
    const uint32_t COOLDOWN_PERIOD = 500;    // 冷却时间0.6秒
 800a3e6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800a3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const uint32_t ADJUST_DURATION = 230;      // 调整持续时间230ms
 800a3ec:	23e6      	movs	r3, #230	@ 0xe6
 800a3ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    const float SPEED_ADJUST_RATIO = 0.1f;     // 速度调整比例10%
 800a3f0:	4b9a      	ldr	r3, [pc, #616]	@ (800a65c <Adjust_Motors_By_Side_Distances+0x2a0>)
 800a3f2:	637b      	str	r3, [r7, #52]	@ 0x34
    
    // 检查是否在冷却期内
    if (HAL_GetTick() - last_adjustment_time < COOLDOWN_PERIOD) {
 800a3f4:	f002 fe1e 	bl	800d034 <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	4b99      	ldr	r3, [pc, #612]	@ (800a660 <Adjust_Motors_By_Side_Distances+0x2a4>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a402:	429a      	cmp	r2, r3
 800a404:	f200 87e1 	bhi.w	800b3ca <Adjust_Motors_By_Side_Distances+0x100e>
        return;
    }
    
    // 获取当前电机速度
    uint32_t current_speed1 = __HAL_TIM_GET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel);
 800a408:	7bfa      	ldrb	r2, [r7, #15]
 800a40a:	4996      	ldr	r1, [pc, #600]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a40c:	4613      	mov	r3, r2
 800a40e:	00db      	lsls	r3, r3, #3
 800a410:	4413      	add	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	440b      	add	r3, r1
 800a416:	3304      	adds	r3, #4
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10a      	bne.n	800a434 <Adjust_Motors_By_Side_Distances+0x78>
 800a41e:	7bfa      	ldrb	r2, [r7, #15]
 800a420:	4990      	ldr	r1, [pc, #576]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a422:	4613      	mov	r3, r2
 800a424:	00db      	lsls	r3, r3, #3
 800a426:	4413      	add	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	440b      	add	r3, r1
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a432:	e035      	b.n	800a4a0 <Adjust_Motors_By_Side_Distances+0xe4>
 800a434:	7bfa      	ldrb	r2, [r7, #15]
 800a436:	498b      	ldr	r1, [pc, #556]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a438:	4613      	mov	r3, r2
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	4413      	add	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	440b      	add	r3, r1
 800a442:	3304      	adds	r3, #4
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b04      	cmp	r3, #4
 800a448:	d10a      	bne.n	800a460 <Adjust_Motors_By_Side_Distances+0xa4>
 800a44a:	7bfa      	ldrb	r2, [r7, #15]
 800a44c:	4985      	ldr	r1, [pc, #532]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a44e:	4613      	mov	r3, r2
 800a450:	00db      	lsls	r3, r3, #3
 800a452:	4413      	add	r3, r2
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	440b      	add	r3, r1
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a45e:	e01f      	b.n	800a4a0 <Adjust_Motors_By_Side_Distances+0xe4>
 800a460:	7bfa      	ldrb	r2, [r7, #15]
 800a462:	4980      	ldr	r1, [pc, #512]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a464:	4613      	mov	r3, r2
 800a466:	00db      	lsls	r3, r3, #3
 800a468:	4413      	add	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	440b      	add	r3, r1
 800a46e:	3304      	adds	r3, #4
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b08      	cmp	r3, #8
 800a474:	d10a      	bne.n	800a48c <Adjust_Motors_By_Side_Distances+0xd0>
 800a476:	7bfa      	ldrb	r2, [r7, #15]
 800a478:	497a      	ldr	r1, [pc, #488]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a47a:	4613      	mov	r3, r2
 800a47c:	00db      	lsls	r3, r3, #3
 800a47e:	4413      	add	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	440b      	add	r3, r1
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a48a:	e009      	b.n	800a4a0 <Adjust_Motors_By_Side_Distances+0xe4>
 800a48c:	7bfa      	ldrb	r2, [r7, #15]
 800a48e:	4975      	ldr	r1, [pc, #468]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a490:	4613      	mov	r3, r2
 800a492:	00db      	lsls	r3, r3, #3
 800a494:	4413      	add	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	440b      	add	r3, r1
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4a0:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t current_speed2 = __HAL_TIM_GET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel);
 800a4a2:	7b7a      	ldrb	r2, [r7, #13]
 800a4a4:	496f      	ldr	r1, [pc, #444]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	4413      	add	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	440b      	add	r3, r1
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10a      	bne.n	800a4ce <Adjust_Motors_By_Side_Distances+0x112>
 800a4b8:	7b7a      	ldrb	r2, [r7, #13]
 800a4ba:	496a      	ldr	r1, [pc, #424]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a4bc:	4613      	mov	r3, r2
 800a4be:	00db      	lsls	r3, r3, #3
 800a4c0:	4413      	add	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	440b      	add	r3, r1
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4cc:	e035      	b.n	800a53a <Adjust_Motors_By_Side_Distances+0x17e>
 800a4ce:	7b7a      	ldrb	r2, [r7, #13]
 800a4d0:	4964      	ldr	r1, [pc, #400]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	4413      	add	r3, r2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	440b      	add	r3, r1
 800a4dc:	3304      	adds	r3, #4
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b04      	cmp	r3, #4
 800a4e2:	d10a      	bne.n	800a4fa <Adjust_Motors_By_Side_Distances+0x13e>
 800a4e4:	7b7a      	ldrb	r2, [r7, #13]
 800a4e6:	495f      	ldr	r1, [pc, #380]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	00db      	lsls	r3, r3, #3
 800a4ec:	4413      	add	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	440b      	add	r3, r1
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f8:	e01f      	b.n	800a53a <Adjust_Motors_By_Side_Distances+0x17e>
 800a4fa:	7b7a      	ldrb	r2, [r7, #13]
 800a4fc:	4959      	ldr	r1, [pc, #356]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a4fe:	4613      	mov	r3, r2
 800a500:	00db      	lsls	r3, r3, #3
 800a502:	4413      	add	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	440b      	add	r3, r1
 800a508:	3304      	adds	r3, #4
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2b08      	cmp	r3, #8
 800a50e:	d10a      	bne.n	800a526 <Adjust_Motors_By_Side_Distances+0x16a>
 800a510:	7b7a      	ldrb	r2, [r7, #13]
 800a512:	4954      	ldr	r1, [pc, #336]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a514:	4613      	mov	r3, r2
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	4413      	add	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	440b      	add	r3, r1
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a524:	e009      	b.n	800a53a <Adjust_Motors_By_Side_Distances+0x17e>
 800a526:	7b7a      	ldrb	r2, [r7, #13]
 800a528:	494e      	ldr	r1, [pc, #312]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a52a:	4613      	mov	r3, r2
 800a52c:	00db      	lsls	r3, r3, #3
 800a52e:	4413      	add	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	440b      	add	r3, r1
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a53a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t current_speed3 = __HAL_TIM_GET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel);
 800a53c:	7bba      	ldrb	r2, [r7, #14]
 800a53e:	4949      	ldr	r1, [pc, #292]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a540:	4613      	mov	r3, r2
 800a542:	00db      	lsls	r3, r3, #3
 800a544:	4413      	add	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	440b      	add	r3, r1
 800a54a:	3304      	adds	r3, #4
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10a      	bne.n	800a568 <Adjust_Motors_By_Side_Distances+0x1ac>
 800a552:	7bba      	ldrb	r2, [r7, #14]
 800a554:	4943      	ldr	r1, [pc, #268]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a556:	4613      	mov	r3, r2
 800a558:	00db      	lsls	r3, r3, #3
 800a55a:	4413      	add	r3, r2
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	440b      	add	r3, r1
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a566:	e035      	b.n	800a5d4 <Adjust_Motors_By_Side_Distances+0x218>
 800a568:	7bba      	ldrb	r2, [r7, #14]
 800a56a:	493e      	ldr	r1, [pc, #248]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a56c:	4613      	mov	r3, r2
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	4413      	add	r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	440b      	add	r3, r1
 800a576:	3304      	adds	r3, #4
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b04      	cmp	r3, #4
 800a57c:	d10a      	bne.n	800a594 <Adjust_Motors_By_Side_Distances+0x1d8>
 800a57e:	7bba      	ldrb	r2, [r7, #14]
 800a580:	4938      	ldr	r1, [pc, #224]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a582:	4613      	mov	r3, r2
 800a584:	00db      	lsls	r3, r3, #3
 800a586:	4413      	add	r3, r2
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	440b      	add	r3, r1
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a592:	e01f      	b.n	800a5d4 <Adjust_Motors_By_Side_Distances+0x218>
 800a594:	7bba      	ldrb	r2, [r7, #14]
 800a596:	4933      	ldr	r1, [pc, #204]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a598:	4613      	mov	r3, r2
 800a59a:	00db      	lsls	r3, r3, #3
 800a59c:	4413      	add	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	440b      	add	r3, r1
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b08      	cmp	r3, #8
 800a5a8:	d10a      	bne.n	800a5c0 <Adjust_Motors_By_Side_Distances+0x204>
 800a5aa:	7bba      	ldrb	r2, [r7, #14]
 800a5ac:	492d      	ldr	r1, [pc, #180]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	00db      	lsls	r3, r3, #3
 800a5b2:	4413      	add	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	440b      	add	r3, r1
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5be:	e009      	b.n	800a5d4 <Adjust_Motors_By_Side_Distances+0x218>
 800a5c0:	7bba      	ldrb	r2, [r7, #14]
 800a5c2:	4928      	ldr	r1, [pc, #160]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	00db      	lsls	r3, r3, #3
 800a5c8:	4413      	add	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	440b      	add	r3, r1
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t current_speed4 = __HAL_TIM_GET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel);
 800a5d6:	7b3a      	ldrb	r2, [r7, #12]
 800a5d8:	4922      	ldr	r1, [pc, #136]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a5da:	4613      	mov	r3, r2
 800a5dc:	00db      	lsls	r3, r3, #3
 800a5de:	4413      	add	r3, r2
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	440b      	add	r3, r1
 800a5e4:	3304      	adds	r3, #4
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10a      	bne.n	800a602 <Adjust_Motors_By_Side_Distances+0x246>
 800a5ec:	7b3a      	ldrb	r2, [r7, #12]
 800a5ee:	491d      	ldr	r1, [pc, #116]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	00db      	lsls	r3, r3, #3
 800a5f4:	4413      	add	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	440b      	add	r3, r1
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a600:	e03c      	b.n	800a67c <Adjust_Motors_By_Side_Distances+0x2c0>
 800a602:	7b3a      	ldrb	r2, [r7, #12]
 800a604:	4917      	ldr	r1, [pc, #92]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a606:	4613      	mov	r3, r2
 800a608:	00db      	lsls	r3, r3, #3
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	440b      	add	r3, r1
 800a610:	3304      	adds	r3, #4
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b04      	cmp	r3, #4
 800a616:	d10a      	bne.n	800a62e <Adjust_Motors_By_Side_Distances+0x272>
 800a618:	7b3a      	ldrb	r2, [r7, #12]
 800a61a:	4912      	ldr	r1, [pc, #72]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a61c:	4613      	mov	r3, r2
 800a61e:	00db      	lsls	r3, r3, #3
 800a620:	4413      	add	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	440b      	add	r3, r1
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a62c:	e026      	b.n	800a67c <Adjust_Motors_By_Side_Distances+0x2c0>
 800a62e:	7b3a      	ldrb	r2, [r7, #12]
 800a630:	490c      	ldr	r1, [pc, #48]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a632:	4613      	mov	r3, r2
 800a634:	00db      	lsls	r3, r3, #3
 800a636:	4413      	add	r3, r2
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	440b      	add	r3, r1
 800a63c:	3304      	adds	r3, #4
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b08      	cmp	r3, #8
 800a642:	d111      	bne.n	800a668 <Adjust_Motors_By_Side_Distances+0x2ac>
 800a644:	7b3a      	ldrb	r2, [r7, #12]
 800a646:	4907      	ldr	r1, [pc, #28]	@ (800a664 <Adjust_Motors_By_Side_Distances+0x2a8>)
 800a648:	4613      	mov	r3, r2
 800a64a:	00db      	lsls	r3, r3, #3
 800a64c:	4413      	add	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	440b      	add	r3, r1
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a658:	e010      	b.n	800a67c <Adjust_Motors_By_Side_Distances+0x2c0>
 800a65a:	bf00      	nop
 800a65c:	3dcccccd 	.word	0x3dcccccd
 800a660:	20000614 	.word	0x20000614
 800a664:	20000384 	.word	0x20000384
 800a668:	7b3a      	ldrb	r2, [r7, #12]
 800a66a:	49b1      	ldr	r1, [pc, #708]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a66c:	4613      	mov	r3, r2
 800a66e:	00db      	lsls	r3, r3, #3
 800a670:	4413      	add	r3, r2
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	440b      	add	r3, r1
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a67c:	627b      	str	r3, [r7, #36]	@ 0x24
    
    // 计算速度调整量
    uint32_t speed_adjust1 = current_speed1 * SPEED_ADJUST_RATIO;
 800a67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a680:	ee07 3a90 	vmov	s15, r3
 800a684:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a688:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a68c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a694:	ee17 3a90 	vmov	r3, s15
 800a698:	623b      	str	r3, [r7, #32]
    uint32_t speed_adjust2 = current_speed2 * SPEED_ADJUST_RATIO;
 800a69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a69c:	ee07 3a90 	vmov	s15, r3
 800a6a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a6a4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a6a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6b0:	ee17 3a90 	vmov	r3, s15
 800a6b4:	61fb      	str	r3, [r7, #28]
    uint32_t speed_adjust3 = current_speed3 * SPEED_ADJUST_RATIO;
 800a6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b8:	ee07 3a90 	vmov	s15, r3
 800a6bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a6c0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a6c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6cc:	ee17 3a90 	vmov	r3, s15
 800a6d0:	61bb      	str	r3, [r7, #24]
    uint32_t speed_adjust4 = current_speed4 * SPEED_ADJUST_RATIO;
 800a6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d4:	ee07 3a90 	vmov	s15, r3
 800a6d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a6dc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a6e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6e8:	ee17 3a90 	vmov	r3, s15
 800a6ec:	617b      	str	r3, [r7, #20]
    
    // 如果已经开始调整，检查是否达到调整时间
    if (adjust_start_time != 0) {
 800a6ee:	4b91      	ldr	r3, [pc, #580]	@ (800a934 <Adjust_Motors_By_Side_Distances+0x578>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f000 8339 	beq.w	800ad6a <Adjust_Motors_By_Side_Distances+0x9ae>
        if (HAL_GetTick() - adjust_start_time >= ADJUST_DURATION) {
 800a6f8:	f002 fc9c 	bl	800d034 <HAL_GetTick>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	4b8d      	ldr	r3, [pc, #564]	@ (800a934 <Adjust_Motors_By_Side_Distances+0x578>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a706:	429a      	cmp	r2, r3
 800a708:	d809      	bhi.n	800a71e <Adjust_Motors_By_Side_Distances+0x362>
            // 调整时间结束，重置计时器并进入冷却期
            adjust_start_time = 0;
 800a70a:	4b8a      	ldr	r3, [pc, #552]	@ (800a934 <Adjust_Motors_By_Side_Distances+0x578>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]
            last_adjustment_time = HAL_GetTick();
 800a710:	f002 fc90 	bl	800d034 <HAL_GetTick>
 800a714:	4603      	mov	r3, r0
 800a716:	4a88      	ldr	r2, [pc, #544]	@ (800a938 <Adjust_Motors_By_Side_Distances+0x57c>)
 800a718:	6013      	str	r3, [r2, #0]
            return;
 800a71a:	f000 be57 	b.w	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
        }
        // 在调整时间内继续执行调整
        if ((left_distance >= 22 && left_distance <= 42) || (right_distance >= 121 && right_distance <= 142)) {
 800a71e:	edd7 7a02 	vldr	s15, [r7, #8]
 800a722:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 800a726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a72e:	db08      	blt.n	800a742 <Adjust_Motors_By_Side_Distances+0x386>
 800a730:	edd7 7a02 	vldr	s15, [r7, #8]
 800a734:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800a93c <Adjust_Motors_By_Side_Distances+0x580>
 800a738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a740:	d913      	bls.n	800a76a <Adjust_Motors_By_Side_Distances+0x3ae>
 800a742:	edd7 7a01 	vldr	s15, [r7, #4]
 800a746:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 800a940 <Adjust_Motors_By_Side_Distances+0x584>
 800a74a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a752:	f2c0 8178 	blt.w	800aa46 <Adjust_Motors_By_Side_Distances+0x68a>
 800a756:	edd7 7a01 	vldr	s15, [r7, #4]
 800a75a:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800a944 <Adjust_Motors_By_Side_Distances+0x588>
 800a75e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a766:	f200 816e 	bhi.w	800aa46 <Adjust_Motors_By_Side_Distances+0x68a>
            // 左侧近或右侧远，向右平移
            __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 + speed_adjust1);  // 左前加速
 800a76a:	7bfa      	ldrb	r2, [r7, #15]
 800a76c:	4970      	ldr	r1, [pc, #448]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a76e:	4613      	mov	r3, r2
 800a770:	00db      	lsls	r3, r3, #3
 800a772:	4413      	add	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	440b      	add	r3, r1
 800a778:	3304      	adds	r3, #4
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10d      	bne.n	800a79c <Adjust_Motors_By_Side_Distances+0x3e0>
 800a780:	7bfa      	ldrb	r2, [r7, #15]
 800a782:	496b      	ldr	r1, [pc, #428]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a784:	4613      	mov	r3, r2
 800a786:	00db      	lsls	r3, r3, #3
 800a788:	4413      	add	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	440b      	add	r3, r1
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a794:	6a3a      	ldr	r2, [r7, #32]
 800a796:	440a      	add	r2, r1
 800a798:	635a      	str	r2, [r3, #52]	@ 0x34
 800a79a:	e03e      	b.n	800a81a <Adjust_Motors_By_Side_Distances+0x45e>
 800a79c:	7bfa      	ldrb	r2, [r7, #15]
 800a79e:	4964      	ldr	r1, [pc, #400]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	00db      	lsls	r3, r3, #3
 800a7a4:	4413      	add	r3, r2
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	440b      	add	r3, r1
 800a7aa:	3304      	adds	r3, #4
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b04      	cmp	r3, #4
 800a7b0:	d10d      	bne.n	800a7ce <Adjust_Motors_By_Side_Distances+0x412>
 800a7b2:	7bfa      	ldrb	r2, [r7, #15]
 800a7b4:	495e      	ldr	r1, [pc, #376]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	00db      	lsls	r3, r3, #3
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	440b      	add	r3, r1
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a7c6:	6a3b      	ldr	r3, [r7, #32]
 800a7c8:	440b      	add	r3, r1
 800a7ca:	6393      	str	r3, [r2, #56]	@ 0x38
 800a7cc:	e025      	b.n	800a81a <Adjust_Motors_By_Side_Distances+0x45e>
 800a7ce:	7bfa      	ldrb	r2, [r7, #15]
 800a7d0:	4957      	ldr	r1, [pc, #348]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	4413      	add	r3, r2
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	440b      	add	r3, r1
 800a7dc:	3304      	adds	r3, #4
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b08      	cmp	r3, #8
 800a7e2:	d10d      	bne.n	800a800 <Adjust_Motors_By_Side_Distances+0x444>
 800a7e4:	7bfa      	ldrb	r2, [r7, #15]
 800a7e6:	4952      	ldr	r1, [pc, #328]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	00db      	lsls	r3, r3, #3
 800a7ec:	4413      	add	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	440b      	add	r3, r1
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a7f8:	6a3b      	ldr	r3, [r7, #32]
 800a7fa:	440b      	add	r3, r1
 800a7fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800a7fe:	e00c      	b.n	800a81a <Adjust_Motors_By_Side_Distances+0x45e>
 800a800:	7bfa      	ldrb	r2, [r7, #15]
 800a802:	494b      	ldr	r1, [pc, #300]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a804:	4613      	mov	r3, r2
 800a806:	00db      	lsls	r3, r3, #3
 800a808:	4413      	add	r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	440b      	add	r3, r1
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a814:	6a3b      	ldr	r3, [r7, #32]
 800a816:	440b      	add	r3, r1
 800a818:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjust3);  // 左后减速
 800a81a:	7bba      	ldrb	r2, [r7, #14]
 800a81c:	4944      	ldr	r1, [pc, #272]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a81e:	4613      	mov	r3, r2
 800a820:	00db      	lsls	r3, r3, #3
 800a822:	4413      	add	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	440b      	add	r3, r1
 800a828:	3304      	adds	r3, #4
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10d      	bne.n	800a84c <Adjust_Motors_By_Side_Distances+0x490>
 800a830:	7bba      	ldrb	r2, [r7, #14]
 800a832:	493f      	ldr	r1, [pc, #252]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a834:	4613      	mov	r3, r2
 800a836:	00db      	lsls	r3, r3, #3
 800a838:	4413      	add	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	440b      	add	r3, r1
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a844:	69ba      	ldr	r2, [r7, #24]
 800a846:	1a8a      	subs	r2, r1, r2
 800a848:	635a      	str	r2, [r3, #52]	@ 0x34
 800a84a:	e03e      	b.n	800a8ca <Adjust_Motors_By_Side_Distances+0x50e>
 800a84c:	7bba      	ldrb	r2, [r7, #14]
 800a84e:	4938      	ldr	r1, [pc, #224]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a850:	4613      	mov	r3, r2
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	4413      	add	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	440b      	add	r3, r1
 800a85a:	3304      	adds	r3, #4
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2b04      	cmp	r3, #4
 800a860:	d10d      	bne.n	800a87e <Adjust_Motors_By_Side_Distances+0x4c2>
 800a862:	7bba      	ldrb	r2, [r7, #14]
 800a864:	4932      	ldr	r1, [pc, #200]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a866:	4613      	mov	r3, r2
 800a868:	00db      	lsls	r3, r3, #3
 800a86a:	4413      	add	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	440b      	add	r3, r1
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	1acb      	subs	r3, r1, r3
 800a87a:	6393      	str	r3, [r2, #56]	@ 0x38
 800a87c:	e025      	b.n	800a8ca <Adjust_Motors_By_Side_Distances+0x50e>
 800a87e:	7bba      	ldrb	r2, [r7, #14]
 800a880:	492b      	ldr	r1, [pc, #172]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a882:	4613      	mov	r3, r2
 800a884:	00db      	lsls	r3, r3, #3
 800a886:	4413      	add	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	440b      	add	r3, r1
 800a88c:	3304      	adds	r3, #4
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2b08      	cmp	r3, #8
 800a892:	d10d      	bne.n	800a8b0 <Adjust_Motors_By_Side_Distances+0x4f4>
 800a894:	7bba      	ldrb	r2, [r7, #14]
 800a896:	4926      	ldr	r1, [pc, #152]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a898:	4613      	mov	r3, r2
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	4413      	add	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	440b      	add	r3, r1
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	1acb      	subs	r3, r1, r3
 800a8ac:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800a8ae:	e00c      	b.n	800a8ca <Adjust_Motors_By_Side_Distances+0x50e>
 800a8b0:	7bba      	ldrb	r2, [r7, #14]
 800a8b2:	491f      	ldr	r1, [pc, #124]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	4413      	add	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	440b      	add	r3, r1
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	1acb      	subs	r3, r1, r3
 800a8c8:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 + speed_adjust2);  // 右后加速
 800a8ca:	7b7a      	ldrb	r2, [r7, #13]
 800a8cc:	4918      	ldr	r1, [pc, #96]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	00db      	lsls	r3, r3, #3
 800a8d2:	4413      	add	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	440b      	add	r3, r1
 800a8d8:	3304      	adds	r3, #4
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10d      	bne.n	800a8fc <Adjust_Motors_By_Side_Distances+0x540>
 800a8e0:	7b7a      	ldrb	r2, [r7, #13]
 800a8e2:	4913      	ldr	r1, [pc, #76]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	00db      	lsls	r3, r3, #3
 800a8e8:	4413      	add	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	440b      	add	r3, r1
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8f4:	69fa      	ldr	r2, [r7, #28]
 800a8f6:	440a      	add	r2, r1
 800a8f8:	635a      	str	r2, [r3, #52]	@ 0x34
 800a8fa:	e04b      	b.n	800a994 <Adjust_Motors_By_Side_Distances+0x5d8>
 800a8fc:	7b7a      	ldrb	r2, [r7, #13]
 800a8fe:	490c      	ldr	r1, [pc, #48]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a900:	4613      	mov	r3, r2
 800a902:	00db      	lsls	r3, r3, #3
 800a904:	4413      	add	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	440b      	add	r3, r1
 800a90a:	3304      	adds	r3, #4
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b04      	cmp	r3, #4
 800a910:	d11a      	bne.n	800a948 <Adjust_Motors_By_Side_Distances+0x58c>
 800a912:	7b7a      	ldrb	r2, [r7, #13]
 800a914:	4906      	ldr	r1, [pc, #24]	@ (800a930 <Adjust_Motors_By_Side_Distances+0x574>)
 800a916:	4613      	mov	r3, r2
 800a918:	00db      	lsls	r3, r3, #3
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	440b      	add	r3, r1
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	440b      	add	r3, r1
 800a92a:	6393      	str	r3, [r2, #56]	@ 0x38
 800a92c:	e032      	b.n	800a994 <Adjust_Motors_By_Side_Distances+0x5d8>
 800a92e:	bf00      	nop
 800a930:	20000384 	.word	0x20000384
 800a934:	20000618 	.word	0x20000618
 800a938:	20000614 	.word	0x20000614
 800a93c:	42280000 	.word	0x42280000
 800a940:	42f20000 	.word	0x42f20000
 800a944:	430e0000 	.word	0x430e0000
 800a948:	7b7a      	ldrb	r2, [r7, #13]
 800a94a:	49a4      	ldr	r1, [pc, #656]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800a94c:	4613      	mov	r3, r2
 800a94e:	00db      	lsls	r3, r3, #3
 800a950:	4413      	add	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	440b      	add	r3, r1
 800a956:	3304      	adds	r3, #4
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b08      	cmp	r3, #8
 800a95c:	d10d      	bne.n	800a97a <Adjust_Motors_By_Side_Distances+0x5be>
 800a95e:	7b7a      	ldrb	r2, [r7, #13]
 800a960:	499e      	ldr	r1, [pc, #632]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800a962:	4613      	mov	r3, r2
 800a964:	00db      	lsls	r3, r3, #3
 800a966:	4413      	add	r3, r2
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	440b      	add	r3, r1
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	440b      	add	r3, r1
 800a976:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800a978:	e00c      	b.n	800a994 <Adjust_Motors_By_Side_Distances+0x5d8>
 800a97a:	7b7a      	ldrb	r2, [r7, #13]
 800a97c:	4997      	ldr	r1, [pc, #604]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800a97e:	4613      	mov	r3, r2
 800a980:	00db      	lsls	r3, r3, #3
 800a982:	4413      	add	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	440b      	add	r3, r1
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	440b      	add	r3, r1
 800a992:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjust4);  // 右前减速
 800a994:	7b3a      	ldrb	r2, [r7, #12]
 800a996:	4991      	ldr	r1, [pc, #580]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800a998:	4613      	mov	r3, r2
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	4413      	add	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	440b      	add	r3, r1
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d10d      	bne.n	800a9c6 <Adjust_Motors_By_Side_Distances+0x60a>
 800a9aa:	7b3a      	ldrb	r2, [r7, #12]
 800a9ac:	498b      	ldr	r1, [pc, #556]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	00db      	lsls	r3, r3, #3
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	440b      	add	r3, r1
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	1a8a      	subs	r2, r1, r2
 800a9c2:	635a      	str	r2, [r3, #52]	@ 0x34
 800a9c4:	e1d0      	b.n	800ad68 <Adjust_Motors_By_Side_Distances+0x9ac>
 800a9c6:	7b3a      	ldrb	r2, [r7, #12]
 800a9c8:	4984      	ldr	r1, [pc, #528]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	00db      	lsls	r3, r3, #3
 800a9ce:	4413      	add	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	440b      	add	r3, r1
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b04      	cmp	r3, #4
 800a9da:	d10d      	bne.n	800a9f8 <Adjust_Motors_By_Side_Distances+0x63c>
 800a9dc:	7b3a      	ldrb	r2, [r7, #12]
 800a9de:	497f      	ldr	r1, [pc, #508]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	00db      	lsls	r3, r3, #3
 800a9e4:	4413      	add	r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	440b      	add	r3, r1
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	1acb      	subs	r3, r1, r3
 800a9f4:	6393      	str	r3, [r2, #56]	@ 0x38
 800a9f6:	e1b7      	b.n	800ad68 <Adjust_Motors_By_Side_Distances+0x9ac>
 800a9f8:	7b3a      	ldrb	r2, [r7, #12]
 800a9fa:	4978      	ldr	r1, [pc, #480]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	00db      	lsls	r3, r3, #3
 800aa00:	4413      	add	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	440b      	add	r3, r1
 800aa06:	3304      	adds	r3, #4
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b08      	cmp	r3, #8
 800aa0c:	d10d      	bne.n	800aa2a <Adjust_Motors_By_Side_Distances+0x66e>
 800aa0e:	7b3a      	ldrb	r2, [r7, #12]
 800aa10:	4972      	ldr	r1, [pc, #456]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800aa12:	4613      	mov	r3, r2
 800aa14:	00db      	lsls	r3, r3, #3
 800aa16:	4413      	add	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	440b      	add	r3, r1
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	1acb      	subs	r3, r1, r3
 800aa26:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800aa28:	e19e      	b.n	800ad68 <Adjust_Motors_By_Side_Distances+0x9ac>
 800aa2a:	7b3a      	ldrb	r2, [r7, #12]
 800aa2c:	496b      	ldr	r1, [pc, #428]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800aa2e:	4613      	mov	r3, r2
 800aa30:	00db      	lsls	r3, r3, #3
 800aa32:	4413      	add	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	440b      	add	r3, r1
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	1acb      	subs	r3, r1, r3
 800aa42:	6413      	str	r3, [r2, #64]	@ 0x40
 800aa44:	e190      	b.n	800ad68 <Adjust_Motors_By_Side_Distances+0x9ac>
        } else if ((right_distance >= 22 && right_distance <= 42) || (left_distance >= 121 && left_distance <= 142)) {
 800aa46:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa4a:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 800aa4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa56:	db08      	blt.n	800aa6a <Adjust_Motors_By_Side_Distances+0x6ae>
 800aa58:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa5c:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 800abe0 <Adjust_Motors_By_Side_Distances+0x824>
 800aa60:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa68:	d915      	bls.n	800aa96 <Adjust_Motors_By_Side_Distances+0x6da>
 800aa6a:	edd7 7a02 	vldr	s15, [r7, #8]
 800aa6e:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800abe4 <Adjust_Motors_By_Side_Distances+0x828>
 800aa72:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa7a:	da01      	bge.n	800aa80 <Adjust_Motors_By_Side_Distances+0x6c4>
            __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 - speed_adjust1);  // 左前减速
            __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 + speed_adjust3);  // 左后加速
            __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 - speed_adjust2);  // 右后减速
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjust4);  // 右前加速
        }
        return;
 800aa7c:	f000 bca6 	b.w	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
        } else if ((right_distance >= 22 && right_distance <= 42) || (left_distance >= 121 && left_distance <= 142)) {
 800aa80:	edd7 7a02 	vldr	s15, [r7, #8]
 800aa84:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800abe8 <Adjust_Motors_By_Side_Distances+0x82c>
 800aa88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa90:	d901      	bls.n	800aa96 <Adjust_Motors_By_Side_Distances+0x6da>
        return;
 800aa92:	f000 bc9b 	b.w	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
            __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 - speed_adjust1);  // 左前减速
 800aa96:	7bfa      	ldrb	r2, [r7, #15]
 800aa98:	4950      	ldr	r1, [pc, #320]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	00db      	lsls	r3, r3, #3
 800aa9e:	4413      	add	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	440b      	add	r3, r1
 800aaa4:	3304      	adds	r3, #4
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d10d      	bne.n	800aac8 <Adjust_Motors_By_Side_Distances+0x70c>
 800aaac:	7bfa      	ldrb	r2, [r7, #15]
 800aaae:	494b      	ldr	r1, [pc, #300]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800aab0:	4613      	mov	r3, r2
 800aab2:	00db      	lsls	r3, r3, #3
 800aab4:	4413      	add	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	440b      	add	r3, r1
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aac0:	6a3a      	ldr	r2, [r7, #32]
 800aac2:	1a8a      	subs	r2, r1, r2
 800aac4:	635a      	str	r2, [r3, #52]	@ 0x34
 800aac6:	e03e      	b.n	800ab46 <Adjust_Motors_By_Side_Distances+0x78a>
 800aac8:	7bfa      	ldrb	r2, [r7, #15]
 800aaca:	4944      	ldr	r1, [pc, #272]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800aacc:	4613      	mov	r3, r2
 800aace:	00db      	lsls	r3, r3, #3
 800aad0:	4413      	add	r3, r2
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	440b      	add	r3, r1
 800aad6:	3304      	adds	r3, #4
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b04      	cmp	r3, #4
 800aadc:	d10d      	bne.n	800aafa <Adjust_Motors_By_Side_Distances+0x73e>
 800aade:	7bfa      	ldrb	r2, [r7, #15]
 800aae0:	493e      	ldr	r1, [pc, #248]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800aae2:	4613      	mov	r3, r2
 800aae4:	00db      	lsls	r3, r3, #3
 800aae6:	4413      	add	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	440b      	add	r3, r1
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aaf2:	6a3b      	ldr	r3, [r7, #32]
 800aaf4:	1acb      	subs	r3, r1, r3
 800aaf6:	6393      	str	r3, [r2, #56]	@ 0x38
 800aaf8:	e025      	b.n	800ab46 <Adjust_Motors_By_Side_Distances+0x78a>
 800aafa:	7bfa      	ldrb	r2, [r7, #15]
 800aafc:	4937      	ldr	r1, [pc, #220]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800aafe:	4613      	mov	r3, r2
 800ab00:	00db      	lsls	r3, r3, #3
 800ab02:	4413      	add	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	440b      	add	r3, r1
 800ab08:	3304      	adds	r3, #4
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b08      	cmp	r3, #8
 800ab0e:	d10d      	bne.n	800ab2c <Adjust_Motors_By_Side_Distances+0x770>
 800ab10:	7bfa      	ldrb	r2, [r7, #15]
 800ab12:	4932      	ldr	r1, [pc, #200]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800ab14:	4613      	mov	r3, r2
 800ab16:	00db      	lsls	r3, r3, #3
 800ab18:	4413      	add	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	440b      	add	r3, r1
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab24:	6a3b      	ldr	r3, [r7, #32]
 800ab26:	1acb      	subs	r3, r1, r3
 800ab28:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800ab2a:	e00c      	b.n	800ab46 <Adjust_Motors_By_Side_Distances+0x78a>
 800ab2c:	7bfa      	ldrb	r2, [r7, #15]
 800ab2e:	492b      	ldr	r1, [pc, #172]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800ab30:	4613      	mov	r3, r2
 800ab32:	00db      	lsls	r3, r3, #3
 800ab34:	4413      	add	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	440b      	add	r3, r1
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	1acb      	subs	r3, r1, r3
 800ab44:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 + speed_adjust3);  // 左后加速
 800ab46:	7bba      	ldrb	r2, [r7, #14]
 800ab48:	4924      	ldr	r1, [pc, #144]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	00db      	lsls	r3, r3, #3
 800ab4e:	4413      	add	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	440b      	add	r3, r1
 800ab54:	3304      	adds	r3, #4
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10d      	bne.n	800ab78 <Adjust_Motors_By_Side_Distances+0x7bc>
 800ab5c:	7bba      	ldrb	r2, [r7, #14]
 800ab5e:	491f      	ldr	r1, [pc, #124]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800ab60:	4613      	mov	r3, r2
 800ab62:	00db      	lsls	r3, r3, #3
 800ab64:	4413      	add	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	440b      	add	r3, r1
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab70:	69ba      	ldr	r2, [r7, #24]
 800ab72:	440a      	add	r2, r1
 800ab74:	635a      	str	r2, [r3, #52]	@ 0x34
 800ab76:	e046      	b.n	800ac06 <Adjust_Motors_By_Side_Distances+0x84a>
 800ab78:	7bba      	ldrb	r2, [r7, #14]
 800ab7a:	4918      	ldr	r1, [pc, #96]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	4413      	add	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	440b      	add	r3, r1
 800ab86:	3304      	adds	r3, #4
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b04      	cmp	r3, #4
 800ab8c:	d10d      	bne.n	800abaa <Adjust_Motors_By_Side_Distances+0x7ee>
 800ab8e:	7bba      	ldrb	r2, [r7, #14]
 800ab90:	4912      	ldr	r1, [pc, #72]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800ab92:	4613      	mov	r3, r2
 800ab94:	00db      	lsls	r3, r3, #3
 800ab96:	4413      	add	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	440b      	add	r3, r1
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	440b      	add	r3, r1
 800aba6:	6393      	str	r3, [r2, #56]	@ 0x38
 800aba8:	e02d      	b.n	800ac06 <Adjust_Motors_By_Side_Distances+0x84a>
 800abaa:	7bba      	ldrb	r2, [r7, #14]
 800abac:	490b      	ldr	r1, [pc, #44]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800abae:	4613      	mov	r3, r2
 800abb0:	00db      	lsls	r3, r3, #3
 800abb2:	4413      	add	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	440b      	add	r3, r1
 800abb8:	3304      	adds	r3, #4
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b08      	cmp	r3, #8
 800abbe:	d115      	bne.n	800abec <Adjust_Motors_By_Side_Distances+0x830>
 800abc0:	7bba      	ldrb	r2, [r7, #14]
 800abc2:	4906      	ldr	r1, [pc, #24]	@ (800abdc <Adjust_Motors_By_Side_Distances+0x820>)
 800abc4:	4613      	mov	r3, r2
 800abc6:	00db      	lsls	r3, r3, #3
 800abc8:	4413      	add	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	440b      	add	r3, r1
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	440b      	add	r3, r1
 800abd8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800abda:	e014      	b.n	800ac06 <Adjust_Motors_By_Side_Distances+0x84a>
 800abdc:	20000384 	.word	0x20000384
 800abe0:	42280000 	.word	0x42280000
 800abe4:	42f20000 	.word	0x42f20000
 800abe8:	430e0000 	.word	0x430e0000
 800abec:	7bba      	ldrb	r2, [r7, #14]
 800abee:	499a      	ldr	r1, [pc, #616]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800abf0:	4613      	mov	r3, r2
 800abf2:	00db      	lsls	r3, r3, #3
 800abf4:	4413      	add	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	440b      	add	r3, r1
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	440b      	add	r3, r1
 800ac04:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 - speed_adjust2);  // 右后减速
 800ac06:	7b7a      	ldrb	r2, [r7, #13]
 800ac08:	4993      	ldr	r1, [pc, #588]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	00db      	lsls	r3, r3, #3
 800ac0e:	4413      	add	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	440b      	add	r3, r1
 800ac14:	3304      	adds	r3, #4
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10d      	bne.n	800ac38 <Adjust_Motors_By_Side_Distances+0x87c>
 800ac1c:	7b7a      	ldrb	r2, [r7, #13]
 800ac1e:	498e      	ldr	r1, [pc, #568]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800ac20:	4613      	mov	r3, r2
 800ac22:	00db      	lsls	r3, r3, #3
 800ac24:	4413      	add	r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	440b      	add	r3, r1
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac30:	69fa      	ldr	r2, [r7, #28]
 800ac32:	1a8a      	subs	r2, r1, r2
 800ac34:	635a      	str	r2, [r3, #52]	@ 0x34
 800ac36:	e03e      	b.n	800acb6 <Adjust_Motors_By_Side_Distances+0x8fa>
 800ac38:	7b7a      	ldrb	r2, [r7, #13]
 800ac3a:	4987      	ldr	r1, [pc, #540]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	00db      	lsls	r3, r3, #3
 800ac40:	4413      	add	r3, r2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	440b      	add	r3, r1
 800ac46:	3304      	adds	r3, #4
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2b04      	cmp	r3, #4
 800ac4c:	d10d      	bne.n	800ac6a <Adjust_Motors_By_Side_Distances+0x8ae>
 800ac4e:	7b7a      	ldrb	r2, [r7, #13]
 800ac50:	4981      	ldr	r1, [pc, #516]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800ac52:	4613      	mov	r3, r2
 800ac54:	00db      	lsls	r3, r3, #3
 800ac56:	4413      	add	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	440b      	add	r3, r1
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	1acb      	subs	r3, r1, r3
 800ac66:	6393      	str	r3, [r2, #56]	@ 0x38
 800ac68:	e025      	b.n	800acb6 <Adjust_Motors_By_Side_Distances+0x8fa>
 800ac6a:	7b7a      	ldrb	r2, [r7, #13]
 800ac6c:	497a      	ldr	r1, [pc, #488]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800ac6e:	4613      	mov	r3, r2
 800ac70:	00db      	lsls	r3, r3, #3
 800ac72:	4413      	add	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	440b      	add	r3, r1
 800ac78:	3304      	adds	r3, #4
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b08      	cmp	r3, #8
 800ac7e:	d10d      	bne.n	800ac9c <Adjust_Motors_By_Side_Distances+0x8e0>
 800ac80:	7b7a      	ldrb	r2, [r7, #13]
 800ac82:	4975      	ldr	r1, [pc, #468]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800ac84:	4613      	mov	r3, r2
 800ac86:	00db      	lsls	r3, r3, #3
 800ac88:	4413      	add	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	440b      	add	r3, r1
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	1acb      	subs	r3, r1, r3
 800ac98:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800ac9a:	e00c      	b.n	800acb6 <Adjust_Motors_By_Side_Distances+0x8fa>
 800ac9c:	7b7a      	ldrb	r2, [r7, #13]
 800ac9e:	496e      	ldr	r1, [pc, #440]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800aca0:	4613      	mov	r3, r2
 800aca2:	00db      	lsls	r3, r3, #3
 800aca4:	4413      	add	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	440b      	add	r3, r1
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	1acb      	subs	r3, r1, r3
 800acb4:	6413      	str	r3, [r2, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjust4);  // 右前加速
 800acb6:	7b3a      	ldrb	r2, [r7, #12]
 800acb8:	4967      	ldr	r1, [pc, #412]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800acba:	4613      	mov	r3, r2
 800acbc:	00db      	lsls	r3, r3, #3
 800acbe:	4413      	add	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	440b      	add	r3, r1
 800acc4:	3304      	adds	r3, #4
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10d      	bne.n	800ace8 <Adjust_Motors_By_Side_Distances+0x92c>
 800accc:	7b3a      	ldrb	r2, [r7, #12]
 800acce:	4962      	ldr	r1, [pc, #392]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800acd0:	4613      	mov	r3, r2
 800acd2:	00db      	lsls	r3, r3, #3
 800acd4:	4413      	add	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	440b      	add	r3, r1
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ace0:	697a      	ldr	r2, [r7, #20]
 800ace2:	440a      	add	r2, r1
 800ace4:	635a      	str	r2, [r3, #52]	@ 0x34
        return;
 800ace6:	e371      	b.n	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjust4);  // 右前加速
 800ace8:	7b3a      	ldrb	r2, [r7, #12]
 800acea:	495b      	ldr	r1, [pc, #364]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800acec:	4613      	mov	r3, r2
 800acee:	00db      	lsls	r3, r3, #3
 800acf0:	4413      	add	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	440b      	add	r3, r1
 800acf6:	3304      	adds	r3, #4
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2b04      	cmp	r3, #4
 800acfc:	d10d      	bne.n	800ad1a <Adjust_Motors_By_Side_Distances+0x95e>
 800acfe:	7b3a      	ldrb	r2, [r7, #12]
 800ad00:	4955      	ldr	r1, [pc, #340]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800ad02:	4613      	mov	r3, r2
 800ad04:	00db      	lsls	r3, r3, #3
 800ad06:	4413      	add	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	440b      	add	r3, r1
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	440b      	add	r3, r1
 800ad16:	6393      	str	r3, [r2, #56]	@ 0x38
        return;
 800ad18:	e358      	b.n	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjust4);  // 右前加速
 800ad1a:	7b3a      	ldrb	r2, [r7, #12]
 800ad1c:	494e      	ldr	r1, [pc, #312]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800ad1e:	4613      	mov	r3, r2
 800ad20:	00db      	lsls	r3, r3, #3
 800ad22:	4413      	add	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	440b      	add	r3, r1
 800ad28:	3304      	adds	r3, #4
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b08      	cmp	r3, #8
 800ad2e:	d10d      	bne.n	800ad4c <Adjust_Motors_By_Side_Distances+0x990>
 800ad30:	7b3a      	ldrb	r2, [r7, #12]
 800ad32:	4949      	ldr	r1, [pc, #292]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800ad34:	4613      	mov	r3, r2
 800ad36:	00db      	lsls	r3, r3, #3
 800ad38:	4413      	add	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	440b      	add	r3, r1
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	440b      	add	r3, r1
 800ad48:	63d3      	str	r3, [r2, #60]	@ 0x3c
        return;
 800ad4a:	e33f      	b.n	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
            __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjust4);  // 右前加速
 800ad4c:	7b3a      	ldrb	r2, [r7, #12]
 800ad4e:	4942      	ldr	r1, [pc, #264]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800ad50:	4613      	mov	r3, r2
 800ad52:	00db      	lsls	r3, r3, #3
 800ad54:	4413      	add	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	440b      	add	r3, r1
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	440b      	add	r3, r1
 800ad64:	6413      	str	r3, [r2, #64]	@ 0x40
        return;
 800ad66:	e331      	b.n	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
 800ad68:	e330      	b.n	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
    }
    
    // 检测是否超出阈值，如果是则开始调整
    if ((left_distance >= 22 && left_distance <= 52) || (right_distance >= 132 && right_distance <= 150)) {
 800ad6a:	edd7 7a02 	vldr	s15, [r7, #8]
 800ad6e:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 800ad72:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7a:	db08      	blt.n	800ad8e <Adjust_Motors_By_Side_Distances+0x9d2>
 800ad7c:	edd7 7a02 	vldr	s15, [r7, #8]
 800ad80:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ae5c <Adjust_Motors_By_Side_Distances+0xaa0>
 800ad84:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad8c:	d913      	bls.n	800adb6 <Adjust_Motors_By_Side_Distances+0x9fa>
 800ad8e:	edd7 7a01 	vldr	s15, [r7, #4]
 800ad92:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800ae60 <Adjust_Motors_By_Side_Distances+0xaa4>
 800ad96:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9e:	f2c0 8183 	blt.w	800b0a8 <Adjust_Motors_By_Side_Distances+0xcec>
 800ada2:	edd7 7a01 	vldr	s15, [r7, #4]
 800ada6:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800ae64 <Adjust_Motors_By_Side_Distances+0xaa8>
 800adaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adb2:	f200 8179 	bhi.w	800b0a8 <Adjust_Motors_By_Side_Distances+0xcec>
        adjust_start_time = HAL_GetTick();
 800adb6:	f002 f93d 	bl	800d034 <HAL_GetTick>
 800adba:	4603      	mov	r3, r0
 800adbc:	4a2a      	ldr	r2, [pc, #168]	@ (800ae68 <Adjust_Motors_By_Side_Distances+0xaac>)
 800adbe:	6013      	str	r3, [r2, #0]
        // 左侧近或右侧远，向右平移
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 + speed_adjust1);  // 左前加速
 800adc0:	7bfa      	ldrb	r2, [r7, #15]
 800adc2:	4925      	ldr	r1, [pc, #148]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800adc4:	4613      	mov	r3, r2
 800adc6:	00db      	lsls	r3, r3, #3
 800adc8:	4413      	add	r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	440b      	add	r3, r1
 800adce:	3304      	adds	r3, #4
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10d      	bne.n	800adf2 <Adjust_Motors_By_Side_Distances+0xa36>
 800add6:	7bfa      	ldrb	r2, [r7, #15]
 800add8:	491f      	ldr	r1, [pc, #124]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800adda:	4613      	mov	r3, r2
 800addc:	00db      	lsls	r3, r3, #3
 800adde:	4413      	add	r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	440b      	add	r3, r1
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800adea:	6a3a      	ldr	r2, [r7, #32]
 800adec:	440a      	add	r2, r1
 800adee:	635a      	str	r2, [r3, #52]	@ 0x34
 800adf0:	e049      	b.n	800ae86 <Adjust_Motors_By_Side_Distances+0xaca>
 800adf2:	7bfa      	ldrb	r2, [r7, #15]
 800adf4:	4918      	ldr	r1, [pc, #96]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800adf6:	4613      	mov	r3, r2
 800adf8:	00db      	lsls	r3, r3, #3
 800adfa:	4413      	add	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	440b      	add	r3, r1
 800ae00:	3304      	adds	r3, #4
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2b04      	cmp	r3, #4
 800ae06:	d10d      	bne.n	800ae24 <Adjust_Motors_By_Side_Distances+0xa68>
 800ae08:	7bfa      	ldrb	r2, [r7, #15]
 800ae0a:	4913      	ldr	r1, [pc, #76]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	4413      	add	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	440b      	add	r3, r1
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae1c:	6a3b      	ldr	r3, [r7, #32]
 800ae1e:	440b      	add	r3, r1
 800ae20:	6393      	str	r3, [r2, #56]	@ 0x38
 800ae22:	e030      	b.n	800ae86 <Adjust_Motors_By_Side_Distances+0xaca>
 800ae24:	7bfa      	ldrb	r2, [r7, #15]
 800ae26:	490c      	ldr	r1, [pc, #48]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800ae28:	4613      	mov	r3, r2
 800ae2a:	00db      	lsls	r3, r3, #3
 800ae2c:	4413      	add	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	440b      	add	r3, r1
 800ae32:	3304      	adds	r3, #4
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b08      	cmp	r3, #8
 800ae38:	d118      	bne.n	800ae6c <Adjust_Motors_By_Side_Distances+0xab0>
 800ae3a:	7bfa      	ldrb	r2, [r7, #15]
 800ae3c:	4906      	ldr	r1, [pc, #24]	@ (800ae58 <Adjust_Motors_By_Side_Distances+0xa9c>)
 800ae3e:	4613      	mov	r3, r2
 800ae40:	00db      	lsls	r3, r3, #3
 800ae42:	4413      	add	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	440b      	add	r3, r1
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae4e:	6a3b      	ldr	r3, [r7, #32]
 800ae50:	440b      	add	r3, r1
 800ae52:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800ae54:	e017      	b.n	800ae86 <Adjust_Motors_By_Side_Distances+0xaca>
 800ae56:	bf00      	nop
 800ae58:	20000384 	.word	0x20000384
 800ae5c:	42500000 	.word	0x42500000
 800ae60:	43040000 	.word	0x43040000
 800ae64:	43160000 	.word	0x43160000
 800ae68:	20000618 	.word	0x20000618
 800ae6c:	7bfa      	ldrb	r2, [r7, #15]
 800ae6e:	498a      	ldr	r1, [pc, #552]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800ae70:	4613      	mov	r3, r2
 800ae72:	00db      	lsls	r3, r3, #3
 800ae74:	4413      	add	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	440b      	add	r3, r1
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae80:	6a3b      	ldr	r3, [r7, #32]
 800ae82:	440b      	add	r3, r1
 800ae84:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjust3);  // 左后减速
 800ae86:	7bba      	ldrb	r2, [r7, #14]
 800ae88:	4983      	ldr	r1, [pc, #524]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	00db      	lsls	r3, r3, #3
 800ae8e:	4413      	add	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	440b      	add	r3, r1
 800ae94:	3304      	adds	r3, #4
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10d      	bne.n	800aeb8 <Adjust_Motors_By_Side_Distances+0xafc>
 800ae9c:	7bba      	ldrb	r2, [r7, #14]
 800ae9e:	497e      	ldr	r1, [pc, #504]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800aea0:	4613      	mov	r3, r2
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	4413      	add	r3, r2
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	440b      	add	r3, r1
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aeb0:	69ba      	ldr	r2, [r7, #24]
 800aeb2:	1a8a      	subs	r2, r1, r2
 800aeb4:	635a      	str	r2, [r3, #52]	@ 0x34
 800aeb6:	e03e      	b.n	800af36 <Adjust_Motors_By_Side_Distances+0xb7a>
 800aeb8:	7bba      	ldrb	r2, [r7, #14]
 800aeba:	4977      	ldr	r1, [pc, #476]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800aebc:	4613      	mov	r3, r2
 800aebe:	00db      	lsls	r3, r3, #3
 800aec0:	4413      	add	r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	440b      	add	r3, r1
 800aec6:	3304      	adds	r3, #4
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b04      	cmp	r3, #4
 800aecc:	d10d      	bne.n	800aeea <Adjust_Motors_By_Side_Distances+0xb2e>
 800aece:	7bba      	ldrb	r2, [r7, #14]
 800aed0:	4971      	ldr	r1, [pc, #452]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800aed2:	4613      	mov	r3, r2
 800aed4:	00db      	lsls	r3, r3, #3
 800aed6:	4413      	add	r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	440b      	add	r3, r1
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	1acb      	subs	r3, r1, r3
 800aee6:	6393      	str	r3, [r2, #56]	@ 0x38
 800aee8:	e025      	b.n	800af36 <Adjust_Motors_By_Side_Distances+0xb7a>
 800aeea:	7bba      	ldrb	r2, [r7, #14]
 800aeec:	496a      	ldr	r1, [pc, #424]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800aeee:	4613      	mov	r3, r2
 800aef0:	00db      	lsls	r3, r3, #3
 800aef2:	4413      	add	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	440b      	add	r3, r1
 800aef8:	3304      	adds	r3, #4
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b08      	cmp	r3, #8
 800aefe:	d10d      	bne.n	800af1c <Adjust_Motors_By_Side_Distances+0xb60>
 800af00:	7bba      	ldrb	r2, [r7, #14]
 800af02:	4965      	ldr	r1, [pc, #404]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800af04:	4613      	mov	r3, r2
 800af06:	00db      	lsls	r3, r3, #3
 800af08:	4413      	add	r3, r2
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	440b      	add	r3, r1
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	1acb      	subs	r3, r1, r3
 800af18:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800af1a:	e00c      	b.n	800af36 <Adjust_Motors_By_Side_Distances+0xb7a>
 800af1c:	7bba      	ldrb	r2, [r7, #14]
 800af1e:	495e      	ldr	r1, [pc, #376]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800af20:	4613      	mov	r3, r2
 800af22:	00db      	lsls	r3, r3, #3
 800af24:	4413      	add	r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	440b      	add	r3, r1
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	1acb      	subs	r3, r1, r3
 800af34:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 + speed_adjust2);  // 右后加速
 800af36:	7b7a      	ldrb	r2, [r7, #13]
 800af38:	4957      	ldr	r1, [pc, #348]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800af3a:	4613      	mov	r3, r2
 800af3c:	00db      	lsls	r3, r3, #3
 800af3e:	4413      	add	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	440b      	add	r3, r1
 800af44:	3304      	adds	r3, #4
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10d      	bne.n	800af68 <Adjust_Motors_By_Side_Distances+0xbac>
 800af4c:	7b7a      	ldrb	r2, [r7, #13]
 800af4e:	4952      	ldr	r1, [pc, #328]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800af50:	4613      	mov	r3, r2
 800af52:	00db      	lsls	r3, r3, #3
 800af54:	4413      	add	r3, r2
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	440b      	add	r3, r1
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af60:	69fa      	ldr	r2, [r7, #28]
 800af62:	440a      	add	r2, r1
 800af64:	635a      	str	r2, [r3, #52]	@ 0x34
 800af66:	e03e      	b.n	800afe6 <Adjust_Motors_By_Side_Distances+0xc2a>
 800af68:	7b7a      	ldrb	r2, [r7, #13]
 800af6a:	494b      	ldr	r1, [pc, #300]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800af6c:	4613      	mov	r3, r2
 800af6e:	00db      	lsls	r3, r3, #3
 800af70:	4413      	add	r3, r2
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	440b      	add	r3, r1
 800af76:	3304      	adds	r3, #4
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b04      	cmp	r3, #4
 800af7c:	d10d      	bne.n	800af9a <Adjust_Motors_By_Side_Distances+0xbde>
 800af7e:	7b7a      	ldrb	r2, [r7, #13]
 800af80:	4945      	ldr	r1, [pc, #276]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800af82:	4613      	mov	r3, r2
 800af84:	00db      	lsls	r3, r3, #3
 800af86:	4413      	add	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	440b      	add	r3, r1
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	440b      	add	r3, r1
 800af96:	6393      	str	r3, [r2, #56]	@ 0x38
 800af98:	e025      	b.n	800afe6 <Adjust_Motors_By_Side_Distances+0xc2a>
 800af9a:	7b7a      	ldrb	r2, [r7, #13]
 800af9c:	493e      	ldr	r1, [pc, #248]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800af9e:	4613      	mov	r3, r2
 800afa0:	00db      	lsls	r3, r3, #3
 800afa2:	4413      	add	r3, r2
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	440b      	add	r3, r1
 800afa8:	3304      	adds	r3, #4
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2b08      	cmp	r3, #8
 800afae:	d10d      	bne.n	800afcc <Adjust_Motors_By_Side_Distances+0xc10>
 800afb0:	7b7a      	ldrb	r2, [r7, #13]
 800afb2:	4939      	ldr	r1, [pc, #228]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800afb4:	4613      	mov	r3, r2
 800afb6:	00db      	lsls	r3, r3, #3
 800afb8:	4413      	add	r3, r2
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	440b      	add	r3, r1
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	440b      	add	r3, r1
 800afc8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800afca:	e00c      	b.n	800afe6 <Adjust_Motors_By_Side_Distances+0xc2a>
 800afcc:	7b7a      	ldrb	r2, [r7, #13]
 800afce:	4932      	ldr	r1, [pc, #200]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800afd0:	4613      	mov	r3, r2
 800afd2:	00db      	lsls	r3, r3, #3
 800afd4:	4413      	add	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	440b      	add	r3, r1
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	440b      	add	r3, r1
 800afe4:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjust4);  // 右前减速
 800afe6:	7b3a      	ldrb	r2, [r7, #12]
 800afe8:	492b      	ldr	r1, [pc, #172]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800afea:	4613      	mov	r3, r2
 800afec:	00db      	lsls	r3, r3, #3
 800afee:	4413      	add	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	440b      	add	r3, r1
 800aff4:	3304      	adds	r3, #4
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10d      	bne.n	800b018 <Adjust_Motors_By_Side_Distances+0xc5c>
 800affc:	7b3a      	ldrb	r2, [r7, #12]
 800affe:	4926      	ldr	r1, [pc, #152]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800b000:	4613      	mov	r3, r2
 800b002:	00db      	lsls	r3, r3, #3
 800b004:	4413      	add	r3, r2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	440b      	add	r3, r1
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b010:	697a      	ldr	r2, [r7, #20]
 800b012:	1a8a      	subs	r2, r1, r2
 800b014:	635a      	str	r2, [r3, #52]	@ 0x34
 800b016:	e1d9      	b.n	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
 800b018:	7b3a      	ldrb	r2, [r7, #12]
 800b01a:	491f      	ldr	r1, [pc, #124]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800b01c:	4613      	mov	r3, r2
 800b01e:	00db      	lsls	r3, r3, #3
 800b020:	4413      	add	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	440b      	add	r3, r1
 800b026:	3304      	adds	r3, #4
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2b04      	cmp	r3, #4
 800b02c:	d10d      	bne.n	800b04a <Adjust_Motors_By_Side_Distances+0xc8e>
 800b02e:	7b3a      	ldrb	r2, [r7, #12]
 800b030:	4919      	ldr	r1, [pc, #100]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800b032:	4613      	mov	r3, r2
 800b034:	00db      	lsls	r3, r3, #3
 800b036:	4413      	add	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	440b      	add	r3, r1
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	1acb      	subs	r3, r1, r3
 800b046:	6393      	str	r3, [r2, #56]	@ 0x38
 800b048:	e1c0      	b.n	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
 800b04a:	7b3a      	ldrb	r2, [r7, #12]
 800b04c:	4912      	ldr	r1, [pc, #72]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800b04e:	4613      	mov	r3, r2
 800b050:	00db      	lsls	r3, r3, #3
 800b052:	4413      	add	r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	440b      	add	r3, r1
 800b058:	3304      	adds	r3, #4
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b08      	cmp	r3, #8
 800b05e:	d10d      	bne.n	800b07c <Adjust_Motors_By_Side_Distances+0xcc0>
 800b060:	7b3a      	ldrb	r2, [r7, #12]
 800b062:	490d      	ldr	r1, [pc, #52]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800b064:	4613      	mov	r3, r2
 800b066:	00db      	lsls	r3, r3, #3
 800b068:	4413      	add	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	440b      	add	r3, r1
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	1acb      	subs	r3, r1, r3
 800b078:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800b07a:	e1a7      	b.n	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
 800b07c:	7b3a      	ldrb	r2, [r7, #12]
 800b07e:	4906      	ldr	r1, [pc, #24]	@ (800b098 <Adjust_Motors_By_Side_Distances+0xcdc>)
 800b080:	4613      	mov	r3, r2
 800b082:	00db      	lsls	r3, r3, #3
 800b084:	4413      	add	r3, r2
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	440b      	add	r3, r1
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	1acb      	subs	r3, r1, r3
 800b094:	6413      	str	r3, [r2, #64]	@ 0x40
 800b096:	e199      	b.n	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
 800b098:	20000384 	.word	0x20000384
 800b09c:	42500000 	.word	0x42500000
 800b0a0:	43040000 	.word	0x43040000
 800b0a4:	43160000 	.word	0x43160000
    } else if ((right_distance >= 22 && right_distance <= 52) || (left_distance >= 132 && left_distance <= 150)) {
 800b0a8:	edd7 7a01 	vldr	s15, [r7, #4]
 800b0ac:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 800b0b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b8:	db08      	blt.n	800b0cc <Adjust_Motors_By_Side_Distances+0xd10>
 800b0ba:	edd7 7a01 	vldr	s15, [r7, #4]
 800b0be:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 800b09c <Adjust_Motors_By_Side_Distances+0xce0>
 800b0c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ca:	d913      	bls.n	800b0f4 <Adjust_Motors_By_Side_Distances+0xd38>
 800b0cc:	edd7 7a02 	vldr	s15, [r7, #8]
 800b0d0:	ed1f 7a0d 	vldr	s14, [pc, #-52]	@ 800b0a0 <Adjust_Motors_By_Side_Distances+0xce4>
 800b0d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0dc:	f2c0 8176 	blt.w	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
 800b0e0:	edd7 7a02 	vldr	s15, [r7, #8]
 800b0e4:	ed1f 7a11 	vldr	s14, [pc, #-68]	@ 800b0a4 <Adjust_Motors_By_Side_Distances+0xce8>
 800b0e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f0:	f200 816c 	bhi.w	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
        adjust_start_time = HAL_GetTick();
 800b0f4:	f001 ff9e 	bl	800d034 <HAL_GetTick>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	4a9e      	ldr	r2, [pc, #632]	@ (800b374 <Adjust_Motors_By_Side_Distances+0xfb8>)
 800b0fc:	6013      	str	r3, [r2, #0]
        // 右侧近或左侧远，向左平移
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 - speed_adjust1);  // 左前减速
 800b0fe:	7bfa      	ldrb	r2, [r7, #15]
 800b100:	499d      	ldr	r1, [pc, #628]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b102:	4613      	mov	r3, r2
 800b104:	00db      	lsls	r3, r3, #3
 800b106:	4413      	add	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	440b      	add	r3, r1
 800b10c:	3304      	adds	r3, #4
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10d      	bne.n	800b130 <Adjust_Motors_By_Side_Distances+0xd74>
 800b114:	7bfa      	ldrb	r2, [r7, #15]
 800b116:	4998      	ldr	r1, [pc, #608]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b118:	4613      	mov	r3, r2
 800b11a:	00db      	lsls	r3, r3, #3
 800b11c:	4413      	add	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	440b      	add	r3, r1
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b128:	6a3a      	ldr	r2, [r7, #32]
 800b12a:	1a8a      	subs	r2, r1, r2
 800b12c:	635a      	str	r2, [r3, #52]	@ 0x34
 800b12e:	e03e      	b.n	800b1ae <Adjust_Motors_By_Side_Distances+0xdf2>
 800b130:	7bfa      	ldrb	r2, [r7, #15]
 800b132:	4991      	ldr	r1, [pc, #580]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b134:	4613      	mov	r3, r2
 800b136:	00db      	lsls	r3, r3, #3
 800b138:	4413      	add	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	440b      	add	r3, r1
 800b13e:	3304      	adds	r3, #4
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b04      	cmp	r3, #4
 800b144:	d10d      	bne.n	800b162 <Adjust_Motors_By_Side_Distances+0xda6>
 800b146:	7bfa      	ldrb	r2, [r7, #15]
 800b148:	498b      	ldr	r1, [pc, #556]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b14a:	4613      	mov	r3, r2
 800b14c:	00db      	lsls	r3, r3, #3
 800b14e:	4413      	add	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	440b      	add	r3, r1
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b15a:	6a3b      	ldr	r3, [r7, #32]
 800b15c:	1acb      	subs	r3, r1, r3
 800b15e:	6393      	str	r3, [r2, #56]	@ 0x38
 800b160:	e025      	b.n	800b1ae <Adjust_Motors_By_Side_Distances+0xdf2>
 800b162:	7bfa      	ldrb	r2, [r7, #15]
 800b164:	4984      	ldr	r1, [pc, #528]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b166:	4613      	mov	r3, r2
 800b168:	00db      	lsls	r3, r3, #3
 800b16a:	4413      	add	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	440b      	add	r3, r1
 800b170:	3304      	adds	r3, #4
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2b08      	cmp	r3, #8
 800b176:	d10d      	bne.n	800b194 <Adjust_Motors_By_Side_Distances+0xdd8>
 800b178:	7bfa      	ldrb	r2, [r7, #15]
 800b17a:	497f      	ldr	r1, [pc, #508]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b17c:	4613      	mov	r3, r2
 800b17e:	00db      	lsls	r3, r3, #3
 800b180:	4413      	add	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	440b      	add	r3, r1
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b18c:	6a3b      	ldr	r3, [r7, #32]
 800b18e:	1acb      	subs	r3, r1, r3
 800b190:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800b192:	e00c      	b.n	800b1ae <Adjust_Motors_By_Side_Distances+0xdf2>
 800b194:	7bfa      	ldrb	r2, [r7, #15]
 800b196:	4978      	ldr	r1, [pc, #480]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b198:	4613      	mov	r3, r2
 800b19a:	00db      	lsls	r3, r3, #3
 800b19c:	4413      	add	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	440b      	add	r3, r1
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	1acb      	subs	r3, r1, r3
 800b1ac:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 + speed_adjust3);  // 左后加速
 800b1ae:	7bba      	ldrb	r2, [r7, #14]
 800b1b0:	4971      	ldr	r1, [pc, #452]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	00db      	lsls	r3, r3, #3
 800b1b6:	4413      	add	r3, r2
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	440b      	add	r3, r1
 800b1bc:	3304      	adds	r3, #4
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10d      	bne.n	800b1e0 <Adjust_Motors_By_Side_Distances+0xe24>
 800b1c4:	7bba      	ldrb	r2, [r7, #14]
 800b1c6:	496c      	ldr	r1, [pc, #432]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	00db      	lsls	r3, r3, #3
 800b1cc:	4413      	add	r3, r2
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	440b      	add	r3, r1
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b1d8:	69ba      	ldr	r2, [r7, #24]
 800b1da:	440a      	add	r2, r1
 800b1dc:	635a      	str	r2, [r3, #52]	@ 0x34
 800b1de:	e03e      	b.n	800b25e <Adjust_Motors_By_Side_Distances+0xea2>
 800b1e0:	7bba      	ldrb	r2, [r7, #14]
 800b1e2:	4965      	ldr	r1, [pc, #404]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	00db      	lsls	r3, r3, #3
 800b1e8:	4413      	add	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	440b      	add	r3, r1
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2b04      	cmp	r3, #4
 800b1f4:	d10d      	bne.n	800b212 <Adjust_Motors_By_Side_Distances+0xe56>
 800b1f6:	7bba      	ldrb	r2, [r7, #14]
 800b1f8:	495f      	ldr	r1, [pc, #380]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	00db      	lsls	r3, r3, #3
 800b1fe:	4413      	add	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	440b      	add	r3, r1
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	440b      	add	r3, r1
 800b20e:	6393      	str	r3, [r2, #56]	@ 0x38
 800b210:	e025      	b.n	800b25e <Adjust_Motors_By_Side_Distances+0xea2>
 800b212:	7bba      	ldrb	r2, [r7, #14]
 800b214:	4958      	ldr	r1, [pc, #352]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b216:	4613      	mov	r3, r2
 800b218:	00db      	lsls	r3, r3, #3
 800b21a:	4413      	add	r3, r2
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	440b      	add	r3, r1
 800b220:	3304      	adds	r3, #4
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b08      	cmp	r3, #8
 800b226:	d10d      	bne.n	800b244 <Adjust_Motors_By_Side_Distances+0xe88>
 800b228:	7bba      	ldrb	r2, [r7, #14]
 800b22a:	4953      	ldr	r1, [pc, #332]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b22c:	4613      	mov	r3, r2
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	4413      	add	r3, r2
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	440b      	add	r3, r1
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	440b      	add	r3, r1
 800b240:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800b242:	e00c      	b.n	800b25e <Adjust_Motors_By_Side_Distances+0xea2>
 800b244:	7bba      	ldrb	r2, [r7, #14]
 800b246:	494c      	ldr	r1, [pc, #304]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b248:	4613      	mov	r3, r2
 800b24a:	00db      	lsls	r3, r3, #3
 800b24c:	4413      	add	r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	440b      	add	r3, r1
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	440b      	add	r3, r1
 800b25c:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 - speed_adjust2);  // 右后减速
 800b25e:	7b7a      	ldrb	r2, [r7, #13]
 800b260:	4945      	ldr	r1, [pc, #276]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b262:	4613      	mov	r3, r2
 800b264:	00db      	lsls	r3, r3, #3
 800b266:	4413      	add	r3, r2
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	440b      	add	r3, r1
 800b26c:	3304      	adds	r3, #4
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10d      	bne.n	800b290 <Adjust_Motors_By_Side_Distances+0xed4>
 800b274:	7b7a      	ldrb	r2, [r7, #13]
 800b276:	4940      	ldr	r1, [pc, #256]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b278:	4613      	mov	r3, r2
 800b27a:	00db      	lsls	r3, r3, #3
 800b27c:	4413      	add	r3, r2
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	440b      	add	r3, r1
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b288:	69fa      	ldr	r2, [r7, #28]
 800b28a:	1a8a      	subs	r2, r1, r2
 800b28c:	635a      	str	r2, [r3, #52]	@ 0x34
 800b28e:	e03e      	b.n	800b30e <Adjust_Motors_By_Side_Distances+0xf52>
 800b290:	7b7a      	ldrb	r2, [r7, #13]
 800b292:	4939      	ldr	r1, [pc, #228]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b294:	4613      	mov	r3, r2
 800b296:	00db      	lsls	r3, r3, #3
 800b298:	4413      	add	r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	440b      	add	r3, r1
 800b29e:	3304      	adds	r3, #4
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b04      	cmp	r3, #4
 800b2a4:	d10d      	bne.n	800b2c2 <Adjust_Motors_By_Side_Distances+0xf06>
 800b2a6:	7b7a      	ldrb	r2, [r7, #13]
 800b2a8:	4933      	ldr	r1, [pc, #204]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	00db      	lsls	r3, r3, #3
 800b2ae:	4413      	add	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	440b      	add	r3, r1
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	1acb      	subs	r3, r1, r3
 800b2be:	6393      	str	r3, [r2, #56]	@ 0x38
 800b2c0:	e025      	b.n	800b30e <Adjust_Motors_By_Side_Distances+0xf52>
 800b2c2:	7b7a      	ldrb	r2, [r7, #13]
 800b2c4:	492c      	ldr	r1, [pc, #176]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	00db      	lsls	r3, r3, #3
 800b2ca:	4413      	add	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	440b      	add	r3, r1
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b08      	cmp	r3, #8
 800b2d6:	d10d      	bne.n	800b2f4 <Adjust_Motors_By_Side_Distances+0xf38>
 800b2d8:	7b7a      	ldrb	r2, [r7, #13]
 800b2da:	4927      	ldr	r1, [pc, #156]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b2dc:	4613      	mov	r3, r2
 800b2de:	00db      	lsls	r3, r3, #3
 800b2e0:	4413      	add	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	440b      	add	r3, r1
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	1acb      	subs	r3, r1, r3
 800b2f0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800b2f2:	e00c      	b.n	800b30e <Adjust_Motors_By_Side_Distances+0xf52>
 800b2f4:	7b7a      	ldrb	r2, [r7, #13]
 800b2f6:	4920      	ldr	r1, [pc, #128]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	00db      	lsls	r3, r3, #3
 800b2fc:	4413      	add	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	440b      	add	r3, r1
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	1acb      	subs	r3, r1, r3
 800b30c:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjust4);  // 右前加速
 800b30e:	7b3a      	ldrb	r2, [r7, #12]
 800b310:	4919      	ldr	r1, [pc, #100]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b312:	4613      	mov	r3, r2
 800b314:	00db      	lsls	r3, r3, #3
 800b316:	4413      	add	r3, r2
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	440b      	add	r3, r1
 800b31c:	3304      	adds	r3, #4
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10d      	bne.n	800b340 <Adjust_Motors_By_Side_Distances+0xf84>
 800b324:	7b3a      	ldrb	r2, [r7, #12]
 800b326:	4914      	ldr	r1, [pc, #80]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b328:	4613      	mov	r3, r2
 800b32a:	00db      	lsls	r3, r3, #3
 800b32c:	4413      	add	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	440b      	add	r3, r1
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	440a      	add	r2, r1
 800b33c:	635a      	str	r2, [r3, #52]	@ 0x34
 800b33e:	e045      	b.n	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
 800b340:	7b3a      	ldrb	r2, [r7, #12]
 800b342:	490d      	ldr	r1, [pc, #52]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b344:	4613      	mov	r3, r2
 800b346:	00db      	lsls	r3, r3, #3
 800b348:	4413      	add	r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	440b      	add	r3, r1
 800b34e:	3304      	adds	r3, #4
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b04      	cmp	r3, #4
 800b354:	d112      	bne.n	800b37c <Adjust_Motors_By_Side_Distances+0xfc0>
 800b356:	7b3a      	ldrb	r2, [r7, #12]
 800b358:	4907      	ldr	r1, [pc, #28]	@ (800b378 <Adjust_Motors_By_Side_Distances+0xfbc>)
 800b35a:	4613      	mov	r3, r2
 800b35c:	00db      	lsls	r3, r3, #3
 800b35e:	4413      	add	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	440b      	add	r3, r1
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	440b      	add	r3, r1
 800b36e:	6393      	str	r3, [r2, #56]	@ 0x38
 800b370:	e02c      	b.n	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
 800b372:	bf00      	nop
 800b374:	20000618 	.word	0x20000618
 800b378:	20000384 	.word	0x20000384
 800b37c:	7b3a      	ldrb	r2, [r7, #12]
 800b37e:	4915      	ldr	r1, [pc, #84]	@ (800b3d4 <Adjust_Motors_By_Side_Distances+0x1018>)
 800b380:	4613      	mov	r3, r2
 800b382:	00db      	lsls	r3, r3, #3
 800b384:	4413      	add	r3, r2
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	440b      	add	r3, r1
 800b38a:	3304      	adds	r3, #4
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b08      	cmp	r3, #8
 800b390:	d10d      	bne.n	800b3ae <Adjust_Motors_By_Side_Distances+0xff2>
 800b392:	7b3a      	ldrb	r2, [r7, #12]
 800b394:	490f      	ldr	r1, [pc, #60]	@ (800b3d4 <Adjust_Motors_By_Side_Distances+0x1018>)
 800b396:	4613      	mov	r3, r2
 800b398:	00db      	lsls	r3, r3, #3
 800b39a:	4413      	add	r3, r2
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	440b      	add	r3, r1
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	440b      	add	r3, r1
 800b3aa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800b3ac:	e00e      	b.n	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
 800b3ae:	7b3a      	ldrb	r2, [r7, #12]
 800b3b0:	4908      	ldr	r1, [pc, #32]	@ (800b3d4 <Adjust_Motors_By_Side_Distances+0x1018>)
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	00db      	lsls	r3, r3, #3
 800b3b6:	4413      	add	r3, r2
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	440b      	add	r3, r1
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	440b      	add	r3, r1
 800b3c6:	6413      	str	r3, [r2, #64]	@ 0x40
 800b3c8:	e000      	b.n	800b3cc <Adjust_Motors_By_Side_Distances+0x1010>
        return;
 800b3ca:	bf00      	nop
    }
}
 800b3cc:	3744      	adds	r7, #68	@ 0x44
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd90      	pop	{r4, r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	20000384 	.word	0x20000384

0800b3d8 <PID_Calculate>:
    .prev_error = 0.0f,
    .max_integral = 50.0f
};

/* Exported functions --------------------------------------------------------*/
float PID_Calculate(PIDController* pid, float error, float dt) {
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b088      	sub	sp, #32
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	ed87 0a02 	vstr	s0, [r7, #8]
 800b3e4:	edc7 0a01 	vstr	s1, [r7, #4]
    // 添加时间差保护
    if (dt <= 0.001f) {
 800b3e8:	edd7 7a01 	vldr	s15, [r7, #4]
 800b3ec:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800b4c8 <PID_Calculate+0xf0>
 800b3f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f8:	d801      	bhi.n	800b3fe <PID_Calculate+0x26>
        dt = 0.001f;  // 最小时间差为1ms
 800b3fa:	4b34      	ldr	r3, [pc, #208]	@ (800b4cc <PID_Calculate+0xf4>)
 800b3fc:	607b      	str	r3, [r7, #4]
    }

    float proportional = pid->Kp * error;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	edd3 7a00 	vldr	s15, [r3]
 800b404:	ed97 7a02 	vldr	s14, [r7, #8]
 800b408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b40c:	edc7 7a07 	vstr	s15, [r7, #28]

    pid->integral += error * dt;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	ed93 7a03 	vldr	s14, [r3, #12]
 800b416:	edd7 6a02 	vldr	s13, [r7, #8]
 800b41a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b41e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b422:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	edc3 7a03 	vstr	s15, [r3, #12]
    pid->integral = fmaxf(fminf(pid->integral, pid->max_integral), -pid->max_integral);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	edd3 7a03 	vldr	s15, [r3, #12]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	ed93 7a05 	vldr	s14, [r3, #20]
 800b438:	eef0 0a47 	vmov.f32	s1, s14
 800b43c:	eeb0 0a67 	vmov.f32	s0, s15
 800b440:	f008 fe53 	bl	80140ea <fminf>
 800b444:	eeb0 7a40 	vmov.f32	s14, s0
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	edd3 7a05 	vldr	s15, [r3, #20]
 800b44e:	eef1 7a67 	vneg.f32	s15, s15
 800b452:	eef0 0a67 	vmov.f32	s1, s15
 800b456:	eeb0 0a47 	vmov.f32	s0, s14
 800b45a:	f008 fe29 	bl	80140b0 <fmaxf>
 800b45e:	eef0 7a40 	vmov.f32	s15, s0
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	edc3 7a03 	vstr	s15, [r3, #12]

    float derivative = pid->Kd * (error - pid->prev_error) / dt;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	ed93 7a02 	vldr	s14, [r3, #8]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	edd3 7a04 	vldr	s15, [r3, #16]
 800b474:	edd7 6a02 	vldr	s13, [r7, #8]
 800b478:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b47c:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b480:	ed97 7a01 	vldr	s14, [r7, #4]
 800b484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b488:	edc7 7a06 	vstr	s15, [r7, #24]

    float output = proportional + (pid->Ki * pid->integral) + derivative;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	ed93 7a01 	vldr	s14, [r3, #4]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	edd3 7a03 	vldr	s15, [r3, #12]
 800b498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b49c:	edd7 7a07 	vldr	s15, [r7, #28]
 800b4a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4a4:	ed97 7a06 	vldr	s14, [r7, #24]
 800b4a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4ac:	edc7 7a05 	vstr	s15, [r7, #20]

    pid->prev_error = error;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	611a      	str	r2, [r3, #16]

    return output;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	ee07 3a90 	vmov	s15, r3
}
 800b4bc:	eeb0 0a67 	vmov.f32	s0, s15
 800b4c0:	3720      	adds	r7, #32
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	3a83126f 	.word	0x3a83126f
 800b4cc:	3a83126f 	.word	0x3a83126f

0800b4d0 <PID_Reset>:

void PID_Reset(PIDController* pid) {
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
    pid->integral = 0.0f;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f04f 0200 	mov.w	r2, #0
 800b4de:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0.0f;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f04f 0200 	mov.w	r2, #0
 800b4e6:	611a      	str	r2, [r3, #16]
} 
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	607b      	str	r3, [r7, #4]
 800b4fe:	4b10      	ldr	r3, [pc, #64]	@ (800b540 <HAL_MspInit+0x4c>)
 800b500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b502:	4a0f      	ldr	r2, [pc, #60]	@ (800b540 <HAL_MspInit+0x4c>)
 800b504:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b508:	6453      	str	r3, [r2, #68]	@ 0x44
 800b50a:	4b0d      	ldr	r3, [pc, #52]	@ (800b540 <HAL_MspInit+0x4c>)
 800b50c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b50e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b512:	607b      	str	r3, [r7, #4]
 800b514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b516:	2300      	movs	r3, #0
 800b518:	603b      	str	r3, [r7, #0]
 800b51a:	4b09      	ldr	r3, [pc, #36]	@ (800b540 <HAL_MspInit+0x4c>)
 800b51c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b51e:	4a08      	ldr	r2, [pc, #32]	@ (800b540 <HAL_MspInit+0x4c>)
 800b520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b524:	6413      	str	r3, [r2, #64]	@ 0x40
 800b526:	4b06      	ldr	r3, [pc, #24]	@ (800b540 <HAL_MspInit+0x4c>)
 800b528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b52a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b52e:	603b      	str	r3, [r7, #0]
 800b530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b532:	bf00      	nop
 800b534:	370c      	adds	r7, #12
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	40023800 	.word	0x40023800

0800b544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b544:	b480      	push	{r7}
 800b546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800b548:	bf00      	nop
 800b54a:	e7fd      	b.n	800b548 <NMI_Handler+0x4>

0800b54c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b54c:	b480      	push	{r7}
 800b54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b550:	bf00      	nop
 800b552:	e7fd      	b.n	800b550 <HardFault_Handler+0x4>

0800b554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b554:	b480      	push	{r7}
 800b556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b558:	bf00      	nop
 800b55a:	e7fd      	b.n	800b558 <MemManage_Handler+0x4>

0800b55c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b55c:	b480      	push	{r7}
 800b55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b560:	bf00      	nop
 800b562:	e7fd      	b.n	800b560 <BusFault_Handler+0x4>

0800b564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b564:	b480      	push	{r7}
 800b566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b568:	bf00      	nop
 800b56a:	e7fd      	b.n	800b568 <UsageFault_Handler+0x4>

0800b56c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b56c:	b480      	push	{r7}
 800b56e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b570:	bf00      	nop
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr

0800b57a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b57a:	b480      	push	{r7}
 800b57c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b57e:	bf00      	nop
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b588:	b480      	push	{r7}
 800b58a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b58c:	bf00      	nop
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b59a:	f001 fd37 	bl	800d00c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b59e:	bf00      	nop
 800b5a0:	bd80      	pop	{r7, pc}
	...

0800b5a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b5a8:	4802      	ldr	r0, [pc, #8]	@ (800b5b4 <USART1_IRQHandler+0x10>)
 800b5aa:	f005 f84b 	bl	8010644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b5ae:	bf00      	nop
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	2000096c 	.word	0x2000096c

0800b5b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800b5bc:	4802      	ldr	r0, [pc, #8]	@ (800b5c8 <USART2_IRQHandler+0x10>)
 800b5be:	f005 f841 	bl	8010644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800b5c2:	bf00      	nop
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	200009b4 	.word	0x200009b4

0800b5cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800b5d0:	4802      	ldr	r0, [pc, #8]	@ (800b5dc <USART3_IRQHandler+0x10>)
 800b5d2:	f005 f837 	bl	8010644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800b5d6:	bf00      	nop
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	200009fc 	.word	0x200009fc

0800b5e0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b5e4:	4802      	ldr	r0, [pc, #8]	@ (800b5f0 <UART4_IRQHandler+0x10>)
 800b5e6:	f005 f82d 	bl	8010644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b5ea:	bf00      	nop
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	200008dc 	.word	0x200008dc

0800b5f4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800b5f8:	4802      	ldr	r0, [pc, #8]	@ (800b604 <UART5_IRQHandler+0x10>)
 800b5fa:	f005 f823 	bl	8010644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800b5fe:	bf00      	nop
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	20000924 	.word	0x20000924

0800b608 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b608:	b480      	push	{r7}
 800b60a:	af00      	add	r7, sp, #0
  return 1;
 800b60c:	2301      	movs	r3, #1
}
 800b60e:	4618      	mov	r0, r3
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <_kill>:

int _kill(int pid, int sig)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b622:	f006 ff0b 	bl	801243c <__errno>
 800b626:	4603      	mov	r3, r0
 800b628:	2216      	movs	r2, #22
 800b62a:	601a      	str	r2, [r3, #0]
  return -1;
 800b62c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b630:	4618      	mov	r0, r3
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <_exit>:

void _exit (int status)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b640:	f04f 31ff 	mov.w	r1, #4294967295
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7ff ffe7 	bl	800b618 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b64a:	bf00      	nop
 800b64c:	e7fd      	b.n	800b64a <_exit+0x12>

0800b64e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b086      	sub	sp, #24
 800b652:	af00      	add	r7, sp, #0
 800b654:	60f8      	str	r0, [r7, #12]
 800b656:	60b9      	str	r1, [r7, #8]
 800b658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b65a:	2300      	movs	r3, #0
 800b65c:	617b      	str	r3, [r7, #20]
 800b65e:	e00a      	b.n	800b676 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b660:	f3af 8000 	nop.w
 800b664:	4601      	mov	r1, r0
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	1c5a      	adds	r2, r3, #1
 800b66a:	60ba      	str	r2, [r7, #8]
 800b66c:	b2ca      	uxtb	r2, r1
 800b66e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	3301      	adds	r3, #1
 800b674:	617b      	str	r3, [r7, #20]
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	dbf0      	blt.n	800b660 <_read+0x12>
  }

  return len;
 800b67e:	687b      	ldr	r3, [r7, #4]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3718      	adds	r7, #24
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b694:	2300      	movs	r3, #0
 800b696:	617b      	str	r3, [r7, #20]
 800b698:	e009      	b.n	800b6ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	1c5a      	adds	r2, r3, #1
 800b69e:	60ba      	str	r2, [r7, #8]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	617b      	str	r3, [r7, #20]
 800b6ae:	697a      	ldr	r2, [r7, #20]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	dbf1      	blt.n	800b69a <_write+0x12>
  }
  return len;
 800b6b6:	687b      	ldr	r3, [r7, #4]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <_close>:

int _close(int file)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b6c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b6e8:	605a      	str	r2, [r3, #4]
  return 0;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <_isatty>:

int _isatty(int file)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b700:	2301      	movs	r3, #1
}
 800b702:	4618      	mov	r0, r3
 800b704:	370c      	adds	r7, #12
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b70e:	b480      	push	{r7}
 800b710:	b085      	sub	sp, #20
 800b712:	af00      	add	r7, sp, #0
 800b714:	60f8      	str	r0, [r7, #12]
 800b716:	60b9      	str	r1, [r7, #8]
 800b718:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3714      	adds	r7, #20
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b730:	4a14      	ldr	r2, [pc, #80]	@ (800b784 <_sbrk+0x5c>)
 800b732:	4b15      	ldr	r3, [pc, #84]	@ (800b788 <_sbrk+0x60>)
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b73c:	4b13      	ldr	r3, [pc, #76]	@ (800b78c <_sbrk+0x64>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d102      	bne.n	800b74a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b744:	4b11      	ldr	r3, [pc, #68]	@ (800b78c <_sbrk+0x64>)
 800b746:	4a12      	ldr	r2, [pc, #72]	@ (800b790 <_sbrk+0x68>)
 800b748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b74a:	4b10      	ldr	r3, [pc, #64]	@ (800b78c <_sbrk+0x64>)
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4413      	add	r3, r2
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	429a      	cmp	r2, r3
 800b756:	d207      	bcs.n	800b768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b758:	f006 fe70 	bl	801243c <__errno>
 800b75c:	4603      	mov	r3, r0
 800b75e:	220c      	movs	r2, #12
 800b760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b762:	f04f 33ff 	mov.w	r3, #4294967295
 800b766:	e009      	b.n	800b77c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b768:	4b08      	ldr	r3, [pc, #32]	@ (800b78c <_sbrk+0x64>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b76e:	4b07      	ldr	r3, [pc, #28]	@ (800b78c <_sbrk+0x64>)
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4413      	add	r3, r2
 800b776:	4a05      	ldr	r2, [pc, #20]	@ (800b78c <_sbrk+0x64>)
 800b778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b77a:	68fb      	ldr	r3, [r7, #12]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	20020000 	.word	0x20020000
 800b788:	00000400 	.word	0x00000400
 800b78c:	2000061c 	.word	0x2000061c
 800b790:	20000be0 	.word	0x20000be0

0800b794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b794:	b480      	push	{r7}
 800b796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b798:	4b06      	ldr	r3, [pc, #24]	@ (800b7b4 <SystemInit+0x20>)
 800b79a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b79e:	4a05      	ldr	r2, [pc, #20]	@ (800b7b4 <SystemInit+0x20>)
 800b7a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b7a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b7a8:	bf00      	nop
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	e000ed00 	.word	0xe000ed00

0800b7b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b08c      	sub	sp, #48	@ 0x30
 800b7bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800b7be:	f107 030c 	add.w	r3, r7, #12
 800b7c2:	2224      	movs	r2, #36	@ 0x24
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f006 fdd6 	bl	8012378 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b7cc:	1d3b      	adds	r3, r7, #4
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	601a      	str	r2, [r3, #0]
 800b7d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800b7d4:	4b22      	ldr	r3, [pc, #136]	@ (800b860 <MX_TIM1_Init+0xa8>)
 800b7d6:	4a23      	ldr	r2, [pc, #140]	@ (800b864 <MX_TIM1_Init+0xac>)
 800b7d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800b7da:	4b21      	ldr	r3, [pc, #132]	@ (800b860 <MX_TIM1_Init+0xa8>)
 800b7dc:	2200      	movs	r2, #0
 800b7de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b7e0:	4b1f      	ldr	r3, [pc, #124]	@ (800b860 <MX_TIM1_Init+0xa8>)
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800b7e6:	4b1e      	ldr	r3, [pc, #120]	@ (800b860 <MX_TIM1_Init+0xa8>)
 800b7e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b7ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b7ee:	4b1c      	ldr	r3, [pc, #112]	@ (800b860 <MX_TIM1_Init+0xa8>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800b7f4:	4b1a      	ldr	r3, [pc, #104]	@ (800b860 <MX_TIM1_Init+0xa8>)
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b7fa:	4b19      	ldr	r3, [pc, #100]	@ (800b860 <MX_TIM1_Init+0xa8>)
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800b800:	2301      	movs	r3, #1
 800b802:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800b804:	2300      	movs	r3, #0
 800b806:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800b808:	2301      	movs	r3, #1
 800b80a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800b80c:	2300      	movs	r3, #0
 800b80e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800b810:	230f      	movs	r3, #15
 800b812:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800b814:	2300      	movs	r3, #0
 800b816:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800b818:	2301      	movs	r3, #1
 800b81a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800b81c:	2300      	movs	r3, #0
 800b81e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800b820:	230f      	movs	r3, #15
 800b822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800b824:	f107 030c 	add.w	r3, r7, #12
 800b828:	4619      	mov	r1, r3
 800b82a:	480d      	ldr	r0, [pc, #52]	@ (800b860 <MX_TIM1_Init+0xa8>)
 800b82c:	f003 ff62 	bl	800f6f4 <HAL_TIM_Encoder_Init>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800b836:	f7fc fa45 	bl	8007cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b83a:	2300      	movs	r3, #0
 800b83c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b83e:	2300      	movs	r3, #0
 800b840:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b842:	1d3b      	adds	r3, r7, #4
 800b844:	4619      	mov	r1, r3
 800b846:	4806      	ldr	r0, [pc, #24]	@ (800b860 <MX_TIM1_Init+0xa8>)
 800b848:	f004 fd2e 	bl	80102a8 <HAL_TIMEx_MasterConfigSynchronization>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d001      	beq.n	800b856 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800b852:	f7fc fa37 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800b856:	bf00      	nop
 800b858:	3730      	adds	r7, #48	@ 0x30
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	20000620 	.word	0x20000620
 800b864:	40010000 	.word	0x40010000

0800b868 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b08c      	sub	sp, #48	@ 0x30
 800b86c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800b86e:	f107 030c 	add.w	r3, r7, #12
 800b872:	2224      	movs	r2, #36	@ 0x24
 800b874:	2100      	movs	r1, #0
 800b876:	4618      	mov	r0, r3
 800b878:	f006 fd7e 	bl	8012378 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b87c:	1d3b      	adds	r3, r7, #4
 800b87e:	2200      	movs	r2, #0
 800b880:	601a      	str	r2, [r3, #0]
 800b882:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b884:	4b21      	ldr	r3, [pc, #132]	@ (800b90c <MX_TIM2_Init+0xa4>)
 800b886:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b88a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b88c:	4b1f      	ldr	r3, [pc, #124]	@ (800b90c <MX_TIM2_Init+0xa4>)
 800b88e:	2200      	movs	r2, #0
 800b890:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b892:	4b1e      	ldr	r3, [pc, #120]	@ (800b90c <MX_TIM2_Init+0xa4>)
 800b894:	2200      	movs	r2, #0
 800b896:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800b898:	4b1c      	ldr	r3, [pc, #112]	@ (800b90c <MX_TIM2_Init+0xa4>)
 800b89a:	f04f 32ff 	mov.w	r2, #4294967295
 800b89e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b8a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b90c <MX_TIM2_Init+0xa4>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b8a6:	4b19      	ldr	r3, [pc, #100]	@ (800b90c <MX_TIM2_Init+0xa4>)
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800b8bc:	230f      	movs	r3, #15
 800b8be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800b8cc:	230f      	movs	r3, #15
 800b8ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800b8d0:	f107 030c 	add.w	r3, r7, #12
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	480d      	ldr	r0, [pc, #52]	@ (800b90c <MX_TIM2_Init+0xa4>)
 800b8d8:	f003 ff0c 	bl	800f6f4 <HAL_TIM_Encoder_Init>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800b8e2:	f7fc f9ef 	bl	8007cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b8ee:	1d3b      	adds	r3, r7, #4
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	4806      	ldr	r0, [pc, #24]	@ (800b90c <MX_TIM2_Init+0xa4>)
 800b8f4:	f004 fcd8 	bl	80102a8 <HAL_TIMEx_MasterConfigSynchronization>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d001      	beq.n	800b902 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800b8fe:	f7fc f9e1 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800b902:	bf00      	nop
 800b904:	3730      	adds	r7, #48	@ 0x30
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	20000668 	.word	0x20000668

0800b910 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b08c      	sub	sp, #48	@ 0x30
 800b914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800b916:	f107 030c 	add.w	r3, r7, #12
 800b91a:	2224      	movs	r2, #36	@ 0x24
 800b91c:	2100      	movs	r1, #0
 800b91e:	4618      	mov	r0, r3
 800b920:	f006 fd2a 	bl	8012378 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b924:	1d3b      	adds	r3, r7, #4
 800b926:	2200      	movs	r2, #0
 800b928:	601a      	str	r2, [r3, #0]
 800b92a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b92c:	4b20      	ldr	r3, [pc, #128]	@ (800b9b0 <MX_TIM3_Init+0xa0>)
 800b92e:	4a21      	ldr	r2, [pc, #132]	@ (800b9b4 <MX_TIM3_Init+0xa4>)
 800b930:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800b932:	4b1f      	ldr	r3, [pc, #124]	@ (800b9b0 <MX_TIM3_Init+0xa0>)
 800b934:	2200      	movs	r2, #0
 800b936:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b938:	4b1d      	ldr	r3, [pc, #116]	@ (800b9b0 <MX_TIM3_Init+0xa0>)
 800b93a:	2200      	movs	r2, #0
 800b93c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800b93e:	4b1c      	ldr	r3, [pc, #112]	@ (800b9b0 <MX_TIM3_Init+0xa0>)
 800b940:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b944:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b946:	4b1a      	ldr	r3, [pc, #104]	@ (800b9b0 <MX_TIM3_Init+0xa0>)
 800b948:	2200      	movs	r2, #0
 800b94a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b94c:	4b18      	ldr	r3, [pc, #96]	@ (800b9b0 <MX_TIM3_Init+0xa0>)
 800b94e:	2200      	movs	r2, #0
 800b950:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800b952:	2301      	movs	r3, #1
 800b954:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800b956:	2300      	movs	r3, #0
 800b958:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800b95a:	2301      	movs	r3, #1
 800b95c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800b95e:	2300      	movs	r3, #0
 800b960:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800b962:	230f      	movs	r3, #15
 800b964:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800b966:	2300      	movs	r3, #0
 800b968:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800b96a:	2301      	movs	r3, #1
 800b96c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800b96e:	2300      	movs	r3, #0
 800b970:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800b972:	230f      	movs	r3, #15
 800b974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800b976:	f107 030c 	add.w	r3, r7, #12
 800b97a:	4619      	mov	r1, r3
 800b97c:	480c      	ldr	r0, [pc, #48]	@ (800b9b0 <MX_TIM3_Init+0xa0>)
 800b97e:	f003 feb9 	bl	800f6f4 <HAL_TIM_Encoder_Init>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d001      	beq.n	800b98c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800b988:	f7fc f99c 	bl	8007cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b98c:	2300      	movs	r3, #0
 800b98e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b990:	2300      	movs	r3, #0
 800b992:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b994:	1d3b      	adds	r3, r7, #4
 800b996:	4619      	mov	r1, r3
 800b998:	4805      	ldr	r0, [pc, #20]	@ (800b9b0 <MX_TIM3_Init+0xa0>)
 800b99a:	f004 fc85 	bl	80102a8 <HAL_TIMEx_MasterConfigSynchronization>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800b9a4:	f7fc f98e 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800b9a8:	bf00      	nop
 800b9aa:	3730      	adds	r7, #48	@ 0x30
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	200006b0 	.word	0x200006b0
 800b9b4:	40000400 	.word	0x40000400

0800b9b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b08c      	sub	sp, #48	@ 0x30
 800b9bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800b9be:	f107 030c 	add.w	r3, r7, #12
 800b9c2:	2224      	movs	r2, #36	@ 0x24
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f006 fcd6 	bl	8012378 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b9cc:	1d3b      	adds	r3, r7, #4
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	601a      	str	r2, [r3, #0]
 800b9d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b9d4:	4b20      	ldr	r3, [pc, #128]	@ (800ba58 <MX_TIM4_Init+0xa0>)
 800b9d6:	4a21      	ldr	r2, [pc, #132]	@ (800ba5c <MX_TIM4_Init+0xa4>)
 800b9d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800b9da:	4b1f      	ldr	r3, [pc, #124]	@ (800ba58 <MX_TIM4_Init+0xa0>)
 800b9dc:	2200      	movs	r2, #0
 800b9de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b9e0:	4b1d      	ldr	r3, [pc, #116]	@ (800ba58 <MX_TIM4_Init+0xa0>)
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800b9e6:	4b1c      	ldr	r3, [pc, #112]	@ (800ba58 <MX_TIM4_Init+0xa0>)
 800b9e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b9ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b9ee:	4b1a      	ldr	r3, [pc, #104]	@ (800ba58 <MX_TIM4_Init+0xa0>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b9f4:	4b18      	ldr	r3, [pc, #96]	@ (800ba58 <MX_TIM4_Init+0xa0>)
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ba02:	2301      	movs	r3, #1
 800ba04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ba06:	2300      	movs	r3, #0
 800ba08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800ba0a:	230f      	movs	r3, #15
 800ba0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ba12:	2301      	movs	r3, #1
 800ba14:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ba16:	2300      	movs	r3, #0
 800ba18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800ba1e:	f107 030c 	add.w	r3, r7, #12
 800ba22:	4619      	mov	r1, r3
 800ba24:	480c      	ldr	r0, [pc, #48]	@ (800ba58 <MX_TIM4_Init+0xa0>)
 800ba26:	f003 fe65 	bl	800f6f4 <HAL_TIM_Encoder_Init>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800ba30:	f7fc f948 	bl	8007cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ba34:	2300      	movs	r3, #0
 800ba36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800ba3c:	1d3b      	adds	r3, r7, #4
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4805      	ldr	r0, [pc, #20]	@ (800ba58 <MX_TIM4_Init+0xa0>)
 800ba42:	f004 fc31 	bl	80102a8 <HAL_TIMEx_MasterConfigSynchronization>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d001      	beq.n	800ba50 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800ba4c:	f7fc f93a 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800ba50:	bf00      	nop
 800ba52:	3730      	adds	r7, #48	@ 0x30
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	200006f8 	.word	0x200006f8
 800ba5c:	40000800 	.word	0x40000800

0800ba60 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b08e      	sub	sp, #56	@ 0x38
 800ba64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ba66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]
 800ba6e:	605a      	str	r2, [r3, #4]
 800ba70:	609a      	str	r2, [r3, #8]
 800ba72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ba74:	f107 0320 	add.w	r3, r7, #32
 800ba78:	2200      	movs	r2, #0
 800ba7a:	601a      	str	r2, [r3, #0]
 800ba7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ba7e:	1d3b      	adds	r3, r7, #4
 800ba80:	2200      	movs	r2, #0
 800ba82:	601a      	str	r2, [r3, #0]
 800ba84:	605a      	str	r2, [r3, #4]
 800ba86:	609a      	str	r2, [r3, #8]
 800ba88:	60da      	str	r2, [r3, #12]
 800ba8a:	611a      	str	r2, [r3, #16]
 800ba8c:	615a      	str	r2, [r3, #20]
 800ba8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800ba90:	4b3d      	ldr	r3, [pc, #244]	@ (800bb88 <MX_TIM5_Init+0x128>)
 800ba92:	4a3e      	ldr	r2, [pc, #248]	@ (800bb8c <MX_TIM5_Init+0x12c>)
 800ba94:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 800ba96:	4b3c      	ldr	r3, [pc, #240]	@ (800bb88 <MX_TIM5_Init+0x128>)
 800ba98:	2253      	movs	r2, #83	@ 0x53
 800ba9a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ba9c:	4b3a      	ldr	r3, [pc, #232]	@ (800bb88 <MX_TIM5_Init+0x128>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 800baa2:	4b39      	ldr	r3, [pc, #228]	@ (800bb88 <MX_TIM5_Init+0x128>)
 800baa4:	f242 720f 	movw	r2, #9999	@ 0x270f
 800baa8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800baaa:	4b37      	ldr	r3, [pc, #220]	@ (800bb88 <MX_TIM5_Init+0x128>)
 800baac:	2200      	movs	r2, #0
 800baae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bab0:	4b35      	ldr	r3, [pc, #212]	@ (800bb88 <MX_TIM5_Init+0x128>)
 800bab2:	2200      	movs	r2, #0
 800bab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800bab6:	4834      	ldr	r0, [pc, #208]	@ (800bb88 <MX_TIM5_Init+0x128>)
 800bab8:	f003 fc42 	bl	800f340 <HAL_TIM_Base_Init>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d001      	beq.n	800bac6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800bac2:	f7fc f8ff 	bl	8007cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bac6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800baca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800bacc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800bad0:	4619      	mov	r1, r3
 800bad2:	482d      	ldr	r0, [pc, #180]	@ (800bb88 <MX_TIM5_Init+0x128>)
 800bad4:	f004 f804 	bl	800fae0 <HAL_TIM_ConfigClockSource>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d001      	beq.n	800bae2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800bade:	f7fc f8f1 	bl	8007cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800bae2:	4829      	ldr	r0, [pc, #164]	@ (800bb88 <MX_TIM5_Init+0x128>)
 800bae4:	f003 fce4 	bl	800f4b0 <HAL_TIM_PWM_Init>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d001      	beq.n	800baf2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800baee:	f7fc f8e9 	bl	8007cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800baf2:	2300      	movs	r3, #0
 800baf4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800baf6:	2300      	movs	r3, #0
 800baf8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800bafa:	f107 0320 	add.w	r3, r7, #32
 800bafe:	4619      	mov	r1, r3
 800bb00:	4821      	ldr	r0, [pc, #132]	@ (800bb88 <MX_TIM5_Init+0x128>)
 800bb02:	f004 fbd1 	bl	80102a8 <HAL_TIMEx_MasterConfigSynchronization>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d001      	beq.n	800bb10 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800bb0c:	f7fc f8da 	bl	8007cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bb10:	2360      	movs	r3, #96	@ 0x60
 800bb12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800bb14:	2300      	movs	r3, #0
 800bb16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800bb20:	1d3b      	adds	r3, r7, #4
 800bb22:	2200      	movs	r2, #0
 800bb24:	4619      	mov	r1, r3
 800bb26:	4818      	ldr	r0, [pc, #96]	@ (800bb88 <MX_TIM5_Init+0x128>)
 800bb28:	f003 ff18 	bl	800f95c <HAL_TIM_PWM_ConfigChannel>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d001      	beq.n	800bb36 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800bb32:	f7fc f8c7 	bl	8007cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800bb36:	1d3b      	adds	r3, r7, #4
 800bb38:	2204      	movs	r2, #4
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	4812      	ldr	r0, [pc, #72]	@ (800bb88 <MX_TIM5_Init+0x128>)
 800bb3e:	f003 ff0d 	bl	800f95c <HAL_TIM_PWM_ConfigChannel>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d001      	beq.n	800bb4c <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 800bb48:	f7fc f8bc 	bl	8007cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800bb4c:	1d3b      	adds	r3, r7, #4
 800bb4e:	2208      	movs	r2, #8
 800bb50:	4619      	mov	r1, r3
 800bb52:	480d      	ldr	r0, [pc, #52]	@ (800bb88 <MX_TIM5_Init+0x128>)
 800bb54:	f003 ff02 	bl	800f95c <HAL_TIM_PWM_ConfigChannel>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 800bb5e:	f7fc f8b1 	bl	8007cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800bb62:	1d3b      	adds	r3, r7, #4
 800bb64:	220c      	movs	r2, #12
 800bb66:	4619      	mov	r1, r3
 800bb68:	4807      	ldr	r0, [pc, #28]	@ (800bb88 <MX_TIM5_Init+0x128>)
 800bb6a:	f003 fef7 	bl	800f95c <HAL_TIM_PWM_ConfigChannel>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <MX_TIM5_Init+0x118>
  {
    Error_Handler();
 800bb74:	f7fc f8a6 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800bb78:	4803      	ldr	r0, [pc, #12]	@ (800bb88 <MX_TIM5_Init+0x128>)
 800bb7a:	f000 fb2b 	bl	800c1d4 <HAL_TIM_MspPostInit>

}
 800bb7e:	bf00      	nop
 800bb80:	3738      	adds	r7, #56	@ 0x38
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	20000740 	.word	0x20000740
 800bb8c:	40000c00 	.word	0x40000c00

0800bb90 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bb96:	463b      	mov	r3, r7
 800bb98:	2200      	movs	r2, #0
 800bb9a:	601a      	str	r2, [r3, #0]
 800bb9c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800bb9e:	4b15      	ldr	r3, [pc, #84]	@ (800bbf4 <MX_TIM6_Init+0x64>)
 800bba0:	4a15      	ldr	r2, [pc, #84]	@ (800bbf8 <MX_TIM6_Init+0x68>)
 800bba2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 800bba4:	4b13      	ldr	r3, [pc, #76]	@ (800bbf4 <MX_TIM6_Init+0x64>)
 800bba6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800bbaa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bbac:	4b11      	ldr	r3, [pc, #68]	@ (800bbf4 <MX_TIM6_Init+0x64>)
 800bbae:	2200      	movs	r2, #0
 800bbb0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800bbb2:	4b10      	ldr	r3, [pc, #64]	@ (800bbf4 <MX_TIM6_Init+0x64>)
 800bbb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bbb8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bbba:	4b0e      	ldr	r3, [pc, #56]	@ (800bbf4 <MX_TIM6_Init+0x64>)
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800bbc0:	480c      	ldr	r0, [pc, #48]	@ (800bbf4 <MX_TIM6_Init+0x64>)
 800bbc2:	f003 fbbd 	bl	800f340 <HAL_TIM_Base_Init>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d001      	beq.n	800bbd0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800bbcc:	f7fc f87a 	bl	8007cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800bbd8:	463b      	mov	r3, r7
 800bbda:	4619      	mov	r1, r3
 800bbdc:	4805      	ldr	r0, [pc, #20]	@ (800bbf4 <MX_TIM6_Init+0x64>)
 800bbde:	f004 fb63 	bl	80102a8 <HAL_TIMEx_MasterConfigSynchronization>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d001      	beq.n	800bbec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800bbe8:	f7fc f86c 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800bbec:	bf00      	nop
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	20000788 	.word	0x20000788
 800bbf8:	40001000 	.word	0x40001000

0800bbfc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b096      	sub	sp, #88	@ 0x58
 800bc00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bc02:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800bc06:	2200      	movs	r2, #0
 800bc08:	601a      	str	r2, [r3, #0]
 800bc0a:	605a      	str	r2, [r3, #4]
 800bc0c:	609a      	str	r2, [r3, #8]
 800bc0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bc10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bc14:	2200      	movs	r2, #0
 800bc16:	601a      	str	r2, [r3, #0]
 800bc18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bc1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc1e:	2200      	movs	r2, #0
 800bc20:	601a      	str	r2, [r3, #0]
 800bc22:	605a      	str	r2, [r3, #4]
 800bc24:	609a      	str	r2, [r3, #8]
 800bc26:	60da      	str	r2, [r3, #12]
 800bc28:	611a      	str	r2, [r3, #16]
 800bc2a:	615a      	str	r2, [r3, #20]
 800bc2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800bc2e:	1d3b      	adds	r3, r7, #4
 800bc30:	2220      	movs	r2, #32
 800bc32:	2100      	movs	r1, #0
 800bc34:	4618      	mov	r0, r3
 800bc36:	f006 fb9f 	bl	8012378 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800bc3a:	4b45      	ldr	r3, [pc, #276]	@ (800bd50 <MX_TIM8_Init+0x154>)
 800bc3c:	4a45      	ldr	r2, [pc, #276]	@ (800bd54 <MX_TIM8_Init+0x158>)
 800bc3e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800bc40:	4b43      	ldr	r3, [pc, #268]	@ (800bd50 <MX_TIM8_Init+0x154>)
 800bc42:	22a7      	movs	r2, #167	@ 0xa7
 800bc44:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bc46:	4b42      	ldr	r3, [pc, #264]	@ (800bd50 <MX_TIM8_Init+0x154>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000-1;
 800bc4c:	4b40      	ldr	r3, [pc, #256]	@ (800bd50 <MX_TIM8_Init+0x154>)
 800bc4e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800bc52:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bc54:	4b3e      	ldr	r3, [pc, #248]	@ (800bd50 <MX_TIM8_Init+0x154>)
 800bc56:	2200      	movs	r2, #0
 800bc58:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800bc5a:	4b3d      	ldr	r3, [pc, #244]	@ (800bd50 <MX_TIM8_Init+0x154>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bc60:	4b3b      	ldr	r3, [pc, #236]	@ (800bd50 <MX_TIM8_Init+0x154>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800bc66:	483a      	ldr	r0, [pc, #232]	@ (800bd50 <MX_TIM8_Init+0x154>)
 800bc68:	f003 fb6a 	bl	800f340 <HAL_TIM_Base_Init>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d001      	beq.n	800bc76 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800bc72:	f7fc f827 	bl	8007cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bc76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800bc7c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800bc80:	4619      	mov	r1, r3
 800bc82:	4833      	ldr	r0, [pc, #204]	@ (800bd50 <MX_TIM8_Init+0x154>)
 800bc84:	f003 ff2c 	bl	800fae0 <HAL_TIM_ConfigClockSource>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800bc8e:	f7fc f819 	bl	8007cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800bc92:	482f      	ldr	r0, [pc, #188]	@ (800bd50 <MX_TIM8_Init+0x154>)
 800bc94:	f003 fc0c 	bl	800f4b0 <HAL_TIM_PWM_Init>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d001      	beq.n	800bca2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800bc9e:	f7fc f811 	bl	8007cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bca2:	2300      	movs	r3, #0
 800bca4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bca6:	2300      	movs	r3, #0
 800bca8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800bcaa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800bcae:	4619      	mov	r1, r3
 800bcb0:	4827      	ldr	r0, [pc, #156]	@ (800bd50 <MX_TIM8_Init+0x154>)
 800bcb2:	f004 faf9 	bl	80102a8 <HAL_TIMEx_MasterConfigSynchronization>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800bcbc:	f7fc f802 	bl	8007cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bcc0:	2360      	movs	r3, #96	@ 0x60
 800bcc2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1000;
 800bcc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bcc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bcca:	2300      	movs	r3, #0
 800bccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800bcde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bce2:	2200      	movs	r2, #0
 800bce4:	4619      	mov	r1, r3
 800bce6:	481a      	ldr	r0, [pc, #104]	@ (800bd50 <MX_TIM8_Init+0x154>)
 800bce8:	f003 fe38 	bl	800f95c <HAL_TIM_PWM_ConfigChannel>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d001      	beq.n	800bcf6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800bcf2:	f7fb ffe7 	bl	8007cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800bcf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bcfa:	2204      	movs	r2, #4
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	4814      	ldr	r0, [pc, #80]	@ (800bd50 <MX_TIM8_Init+0x154>)
 800bd00:	f003 fe2c 	bl	800f95c <HAL_TIM_PWM_ConfigChannel>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d001      	beq.n	800bd0e <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 800bd0a:	f7fb ffdb 	bl	8007cc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800bd12:	2300      	movs	r3, #0
 800bd14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800bd16:	2300      	movs	r3, #0
 800bd18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800bd22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bd26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800bd2c:	1d3b      	adds	r3, r7, #4
 800bd2e:	4619      	mov	r1, r3
 800bd30:	4807      	ldr	r0, [pc, #28]	@ (800bd50 <MX_TIM8_Init+0x154>)
 800bd32:	f004 fb35 	bl	80103a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d001      	beq.n	800bd40 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 800bd3c:	f7fb ffc2 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800bd40:	4803      	ldr	r0, [pc, #12]	@ (800bd50 <MX_TIM8_Init+0x154>)
 800bd42:	f000 fa47 	bl	800c1d4 <HAL_TIM_MspPostInit>

}
 800bd46:	bf00      	nop
 800bd48:	3758      	adds	r7, #88	@ 0x58
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	200007d0 	.word	0x200007d0
 800bd54:	40010400 	.word	0x40010400

0800bd58 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b08c      	sub	sp, #48	@ 0x30
 800bd5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bd5e:	f107 0320 	add.w	r3, r7, #32
 800bd62:	2200      	movs	r2, #0
 800bd64:	601a      	str	r2, [r3, #0]
 800bd66:	605a      	str	r2, [r3, #4]
 800bd68:	609a      	str	r2, [r3, #8]
 800bd6a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bd6c:	1d3b      	adds	r3, r7, #4
 800bd6e:	2200      	movs	r2, #0
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	605a      	str	r2, [r3, #4]
 800bd74:	609a      	str	r2, [r3, #8]
 800bd76:	60da      	str	r2, [r3, #12]
 800bd78:	611a      	str	r2, [r3, #16]
 800bd7a:	615a      	str	r2, [r3, #20]
 800bd7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800bd7e:	4b2b      	ldr	r3, [pc, #172]	@ (800be2c <MX_TIM9_Init+0xd4>)
 800bd80:	4a2b      	ldr	r2, [pc, #172]	@ (800be30 <MX_TIM9_Init+0xd8>)
 800bd82:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 800bd84:	4b29      	ldr	r3, [pc, #164]	@ (800be2c <MX_TIM9_Init+0xd4>)
 800bd86:	22a7      	movs	r2, #167	@ 0xa7
 800bd88:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bd8a:	4b28      	ldr	r3, [pc, #160]	@ (800be2c <MX_TIM9_Init+0xd4>)
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 800bd90:	4b26      	ldr	r3, [pc, #152]	@ (800be2c <MX_TIM9_Init+0xd4>)
 800bd92:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800bd96:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bd98:	4b24      	ldr	r3, [pc, #144]	@ (800be2c <MX_TIM9_Init+0xd4>)
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bd9e:	4b23      	ldr	r3, [pc, #140]	@ (800be2c <MX_TIM9_Init+0xd4>)
 800bda0:	2200      	movs	r2, #0
 800bda2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800bda4:	4821      	ldr	r0, [pc, #132]	@ (800be2c <MX_TIM9_Init+0xd4>)
 800bda6:	f003 facb 	bl	800f340 <HAL_TIM_Base_Init>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d001      	beq.n	800bdb4 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800bdb0:	f7fb ff88 	bl	8007cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bdb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bdb8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800bdba:	f107 0320 	add.w	r3, r7, #32
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	481a      	ldr	r0, [pc, #104]	@ (800be2c <MX_TIM9_Init+0xd4>)
 800bdc2:	f003 fe8d 	bl	800fae0 <HAL_TIM_ConfigClockSource>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d001      	beq.n	800bdd0 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800bdcc:	f7fb ff7a 	bl	8007cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800bdd0:	4816      	ldr	r0, [pc, #88]	@ (800be2c <MX_TIM9_Init+0xd4>)
 800bdd2:	f003 fb6d 	bl	800f4b0 <HAL_TIM_PWM_Init>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d001      	beq.n	800bde0 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800bddc:	f7fb ff72 	bl	8007cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bde0:	2360      	movs	r3, #96	@ 0x60
 800bde2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800bde4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bde8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bdea:	2300      	movs	r3, #0
 800bdec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800bdf2:	1d3b      	adds	r3, r7, #4
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	480c      	ldr	r0, [pc, #48]	@ (800be2c <MX_TIM9_Init+0xd4>)
 800bdfa:	f003 fdaf 	bl	800f95c <HAL_TIM_PWM_ConfigChannel>
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d001      	beq.n	800be08 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 800be04:	f7fb ff5e 	bl	8007cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800be08:	1d3b      	adds	r3, r7, #4
 800be0a:	2204      	movs	r2, #4
 800be0c:	4619      	mov	r1, r3
 800be0e:	4807      	ldr	r0, [pc, #28]	@ (800be2c <MX_TIM9_Init+0xd4>)
 800be10:	f003 fda4 	bl	800f95c <HAL_TIM_PWM_ConfigChannel>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d001      	beq.n	800be1e <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 800be1a:	f7fb ff53 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800be1e:	4803      	ldr	r0, [pc, #12]	@ (800be2c <MX_TIM9_Init+0xd4>)
 800be20:	f000 f9d8 	bl	800c1d4 <HAL_TIM_MspPostInit>

}
 800be24:	bf00      	nop
 800be26:	3730      	adds	r7, #48	@ 0x30
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	20000818 	.word	0x20000818
 800be30:	40014000 	.word	0x40014000

0800be34 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b088      	sub	sp, #32
 800be38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800be3a:	1d3b      	adds	r3, r7, #4
 800be3c:	2200      	movs	r2, #0
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	605a      	str	r2, [r3, #4]
 800be42:	609a      	str	r2, [r3, #8]
 800be44:	60da      	str	r2, [r3, #12]
 800be46:	611a      	str	r2, [r3, #16]
 800be48:	615a      	str	r2, [r3, #20]
 800be4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800be4c:	4b1e      	ldr	r3, [pc, #120]	@ (800bec8 <MX_TIM10_Init+0x94>)
 800be4e:	4a1f      	ldr	r2, [pc, #124]	@ (800becc <MX_TIM10_Init+0x98>)
 800be50:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 800be52:	4b1d      	ldr	r3, [pc, #116]	@ (800bec8 <MX_TIM10_Init+0x94>)
 800be54:	22a7      	movs	r2, #167	@ 0xa7
 800be56:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800be58:	4b1b      	ldr	r3, [pc, #108]	@ (800bec8 <MX_TIM10_Init+0x94>)
 800be5a:	2200      	movs	r2, #0
 800be5c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 20000-1;
 800be5e:	4b1a      	ldr	r3, [pc, #104]	@ (800bec8 <MX_TIM10_Init+0x94>)
 800be60:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800be64:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800be66:	4b18      	ldr	r3, [pc, #96]	@ (800bec8 <MX_TIM10_Init+0x94>)
 800be68:	2200      	movs	r2, #0
 800be6a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800be6c:	4b16      	ldr	r3, [pc, #88]	@ (800bec8 <MX_TIM10_Init+0x94>)
 800be6e:	2200      	movs	r2, #0
 800be70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800be72:	4815      	ldr	r0, [pc, #84]	@ (800bec8 <MX_TIM10_Init+0x94>)
 800be74:	f003 fa64 	bl	800f340 <HAL_TIM_Base_Init>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800be7e:	f7fb ff21 	bl	8007cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800be82:	4811      	ldr	r0, [pc, #68]	@ (800bec8 <MX_TIM10_Init+0x94>)
 800be84:	f003 fb14 	bl	800f4b0 <HAL_TIM_PWM_Init>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800be8e:	f7fb ff19 	bl	8007cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800be92:	2360      	movs	r3, #96	@ 0x60
 800be94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800be96:	2300      	movs	r3, #0
 800be98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800be9a:	2300      	movs	r3, #0
 800be9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800be9e:	2300      	movs	r3, #0
 800bea0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800bea2:	1d3b      	adds	r3, r7, #4
 800bea4:	2200      	movs	r2, #0
 800bea6:	4619      	mov	r1, r3
 800bea8:	4807      	ldr	r0, [pc, #28]	@ (800bec8 <MX_TIM10_Init+0x94>)
 800beaa:	f003 fd57 	bl	800f95c <HAL_TIM_PWM_ConfigChannel>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d001      	beq.n	800beb8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800beb4:	f7fb ff06 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800beb8:	4803      	ldr	r0, [pc, #12]	@ (800bec8 <MX_TIM10_Init+0x94>)
 800beba:	f000 f98b 	bl	800c1d4 <HAL_TIM_MspPostInit>

}
 800bebe:	bf00      	nop
 800bec0:	3720      	adds	r7, #32
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	20000860 	.word	0x20000860
 800becc:	40014400 	.word	0x40014400

0800bed0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b090      	sub	sp, #64	@ 0x40
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bed8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bedc:	2200      	movs	r2, #0
 800bede:	601a      	str	r2, [r3, #0]
 800bee0:	605a      	str	r2, [r3, #4]
 800bee2:	609a      	str	r2, [r3, #8]
 800bee4:	60da      	str	r2, [r3, #12]
 800bee6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a74      	ldr	r2, [pc, #464]	@ (800c0c0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d12d      	bne.n	800bf4e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800bef2:	2300      	movs	r3, #0
 800bef4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bef6:	4b73      	ldr	r3, [pc, #460]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800befa:	4a72      	ldr	r2, [pc, #456]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800befc:	f043 0301 	orr.w	r3, r3, #1
 800bf00:	6453      	str	r3, [r2, #68]	@ 0x44
 800bf02:	4b70      	ldr	r3, [pc, #448]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bf04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf06:	f003 0301 	and.w	r3, r3, #1
 800bf0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800bf0e:	2300      	movs	r3, #0
 800bf10:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf12:	4b6c      	ldr	r3, [pc, #432]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bf14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf16:	4a6b      	ldr	r2, [pc, #428]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bf18:	f043 0310 	orr.w	r3, r3, #16
 800bf1c:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf1e:	4b69      	ldr	r3, [pc, #420]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bf20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf22:	f003 0310 	and.w	r3, r3, #16
 800bf26:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M1_E1_Pin|M1_E2_Pin;
 800bf2a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800bf2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf30:	2302      	movs	r3, #2
 800bf32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf34:	2300      	movs	r3, #0
 800bf36:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bf40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bf44:	4619      	mov	r1, r3
 800bf46:	4860      	ldr	r0, [pc, #384]	@ (800c0c8 <HAL_TIM_Encoder_MspInit+0x1f8>)
 800bf48:	f001 fa48 	bl	800d3dc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800bf4c:	e0b3      	b.n	800c0b6 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM2)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf56:	d14a      	bne.n	800bfee <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800bf58:	2300      	movs	r3, #0
 800bf5a:	623b      	str	r3, [r7, #32]
 800bf5c:	4b59      	ldr	r3, [pc, #356]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bf5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf60:	4a58      	ldr	r2, [pc, #352]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bf62:	f043 0301 	orr.w	r3, r3, #1
 800bf66:	6413      	str	r3, [r2, #64]	@ 0x40
 800bf68:	4b56      	ldr	r3, [pc, #344]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bf6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf6c:	f003 0301 	and.w	r3, r3, #1
 800bf70:	623b      	str	r3, [r7, #32]
 800bf72:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf74:	2300      	movs	r3, #0
 800bf76:	61fb      	str	r3, [r7, #28]
 800bf78:	4b52      	ldr	r3, [pc, #328]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bf7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf7c:	4a51      	ldr	r2, [pc, #324]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bf7e:	f043 0301 	orr.w	r3, r3, #1
 800bf82:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf84:	4b4f      	ldr	r3, [pc, #316]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bf86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf88:	f003 0301 	and.w	r3, r3, #1
 800bf8c:	61fb      	str	r3, [r7, #28]
 800bf8e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf90:	2300      	movs	r3, #0
 800bf92:	61bb      	str	r3, [r7, #24]
 800bf94:	4b4b      	ldr	r3, [pc, #300]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bf96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf98:	4a4a      	ldr	r2, [pc, #296]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bf9a:	f043 0302 	orr.w	r3, r3, #2
 800bf9e:	6313      	str	r3, [r2, #48]	@ 0x30
 800bfa0:	4b48      	ldr	r3, [pc, #288]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bfa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfa4:	f003 0302 	and.w	r3, r3, #2
 800bfa8:	61bb      	str	r3, [r7, #24]
 800bfaa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M4_E1_Pin;
 800bfac:	2320      	movs	r3, #32
 800bfae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M4_E1_GPIO_Port, &GPIO_InitStruct);
 800bfc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	4841      	ldr	r0, [pc, #260]	@ (800c0cc <HAL_TIM_Encoder_MspInit+0x1fc>)
 800bfc8:	f001 fa08 	bl	800d3dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M4_E2_Pin;
 800bfcc:	2308      	movs	r3, #8
 800bfce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfd0:	2302      	movs	r3, #2
 800bfd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M4_E2_GPIO_Port, &GPIO_InitStruct);
 800bfe0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	483a      	ldr	r0, [pc, #232]	@ (800c0d0 <HAL_TIM_Encoder_MspInit+0x200>)
 800bfe8:	f001 f9f8 	bl	800d3dc <HAL_GPIO_Init>
}
 800bfec:	e063      	b.n	800c0b6 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM3)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a38      	ldr	r2, [pc, #224]	@ (800c0d4 <HAL_TIM_Encoder_MspInit+0x204>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d12c      	bne.n	800c052 <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800bff8:	2300      	movs	r3, #0
 800bffa:	617b      	str	r3, [r7, #20]
 800bffc:	4b31      	ldr	r3, [pc, #196]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c000:	4a30      	ldr	r2, [pc, #192]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800c002:	f043 0302 	orr.w	r3, r3, #2
 800c006:	6413      	str	r3, [r2, #64]	@ 0x40
 800c008:	4b2e      	ldr	r3, [pc, #184]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800c00a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c00c:	f003 0302 	and.w	r3, r3, #2
 800c010:	617b      	str	r3, [r7, #20]
 800c012:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c014:	2300      	movs	r3, #0
 800c016:	613b      	str	r3, [r7, #16]
 800c018:	4b2a      	ldr	r3, [pc, #168]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800c01a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c01c:	4a29      	ldr	r2, [pc, #164]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800c01e:	f043 0301 	orr.w	r3, r3, #1
 800c022:	6313      	str	r3, [r2, #48]	@ 0x30
 800c024:	4b27      	ldr	r3, [pc, #156]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800c026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c028:	f003 0301 	and.w	r3, r3, #1
 800c02c:	613b      	str	r3, [r7, #16]
 800c02e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_E1_Pin|M3_E2_Pin;
 800c030:	23c0      	movs	r3, #192	@ 0xc0
 800c032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c034:	2302      	movs	r3, #2
 800c036:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c038:	2300      	movs	r3, #0
 800c03a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c03c:	2300      	movs	r3, #0
 800c03e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c040:	2302      	movs	r3, #2
 800c042:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c048:	4619      	mov	r1, r3
 800c04a:	4820      	ldr	r0, [pc, #128]	@ (800c0cc <HAL_TIM_Encoder_MspInit+0x1fc>)
 800c04c:	f001 f9c6 	bl	800d3dc <HAL_GPIO_Init>
}
 800c050:	e031      	b.n	800c0b6 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM4)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a20      	ldr	r2, [pc, #128]	@ (800c0d8 <HAL_TIM_Encoder_MspInit+0x208>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d12c      	bne.n	800c0b6 <HAL_TIM_Encoder_MspInit+0x1e6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800c05c:	2300      	movs	r3, #0
 800c05e:	60fb      	str	r3, [r7, #12]
 800c060:	4b18      	ldr	r3, [pc, #96]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800c062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c064:	4a17      	ldr	r2, [pc, #92]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800c066:	f043 0304 	orr.w	r3, r3, #4
 800c06a:	6413      	str	r3, [r2, #64]	@ 0x40
 800c06c:	4b15      	ldr	r3, [pc, #84]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800c06e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c070:	f003 0304 	and.w	r3, r3, #4
 800c074:	60fb      	str	r3, [r7, #12]
 800c076:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c078:	2300      	movs	r3, #0
 800c07a:	60bb      	str	r3, [r7, #8]
 800c07c:	4b11      	ldr	r3, [pc, #68]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800c07e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c080:	4a10      	ldr	r2, [pc, #64]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800c082:	f043 0308 	orr.w	r3, r3, #8
 800c086:	6313      	str	r3, [r2, #48]	@ 0x30
 800c088:	4b0e      	ldr	r3, [pc, #56]	@ (800c0c4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800c08a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c08c:	f003 0308 	and.w	r3, r3, #8
 800c090:	60bb      	str	r3, [r7, #8]
 800c092:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M2_E1_Pin|M2_E2_Pin;
 800c094:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800c098:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c09a:	2302      	movs	r3, #2
 800c09c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800c0a6:	2302      	movs	r3, #2
 800c0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c0aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	480a      	ldr	r0, [pc, #40]	@ (800c0dc <HAL_TIM_Encoder_MspInit+0x20c>)
 800c0b2:	f001 f993 	bl	800d3dc <HAL_GPIO_Init>
}
 800c0b6:	bf00      	nop
 800c0b8:	3740      	adds	r7, #64	@ 0x40
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	40010000 	.word	0x40010000
 800c0c4:	40023800 	.word	0x40023800
 800c0c8:	40021000 	.word	0x40021000
 800c0cc:	40020000 	.word	0x40020000
 800c0d0:	40020400 	.word	0x40020400
 800c0d4:	40000400 	.word	0x40000400
 800c0d8:	40000800 	.word	0x40000800
 800c0dc:	40020c00 	.word	0x40020c00

0800c0e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b089      	sub	sp, #36	@ 0x24
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a33      	ldr	r2, [pc, #204]	@ (800c1bc <HAL_TIM_Base_MspInit+0xdc>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d10e      	bne.n	800c110 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	61fb      	str	r3, [r7, #28]
 800c0f6:	4b32      	ldr	r3, [pc, #200]	@ (800c1c0 <HAL_TIM_Base_MspInit+0xe0>)
 800c0f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0fa:	4a31      	ldr	r2, [pc, #196]	@ (800c1c0 <HAL_TIM_Base_MspInit+0xe0>)
 800c0fc:	f043 0308 	orr.w	r3, r3, #8
 800c100:	6413      	str	r3, [r2, #64]	@ 0x40
 800c102:	4b2f      	ldr	r3, [pc, #188]	@ (800c1c0 <HAL_TIM_Base_MspInit+0xe0>)
 800c104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c106:	f003 0308 	and.w	r3, r3, #8
 800c10a:	61fb      	str	r3, [r7, #28]
 800c10c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800c10e:	e04e      	b.n	800c1ae <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM6)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a2b      	ldr	r2, [pc, #172]	@ (800c1c4 <HAL_TIM_Base_MspInit+0xe4>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d10e      	bne.n	800c138 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800c11a:	2300      	movs	r3, #0
 800c11c:	61bb      	str	r3, [r7, #24]
 800c11e:	4b28      	ldr	r3, [pc, #160]	@ (800c1c0 <HAL_TIM_Base_MspInit+0xe0>)
 800c120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c122:	4a27      	ldr	r2, [pc, #156]	@ (800c1c0 <HAL_TIM_Base_MspInit+0xe0>)
 800c124:	f043 0310 	orr.w	r3, r3, #16
 800c128:	6413      	str	r3, [r2, #64]	@ 0x40
 800c12a:	4b25      	ldr	r3, [pc, #148]	@ (800c1c0 <HAL_TIM_Base_MspInit+0xe0>)
 800c12c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c12e:	f003 0310 	and.w	r3, r3, #16
 800c132:	61bb      	str	r3, [r7, #24]
 800c134:	69bb      	ldr	r3, [r7, #24]
}
 800c136:	e03a      	b.n	800c1ae <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM8)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a22      	ldr	r2, [pc, #136]	@ (800c1c8 <HAL_TIM_Base_MspInit+0xe8>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d10e      	bne.n	800c160 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800c142:	2300      	movs	r3, #0
 800c144:	617b      	str	r3, [r7, #20]
 800c146:	4b1e      	ldr	r3, [pc, #120]	@ (800c1c0 <HAL_TIM_Base_MspInit+0xe0>)
 800c148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c14a:	4a1d      	ldr	r2, [pc, #116]	@ (800c1c0 <HAL_TIM_Base_MspInit+0xe0>)
 800c14c:	f043 0302 	orr.w	r3, r3, #2
 800c150:	6453      	str	r3, [r2, #68]	@ 0x44
 800c152:	4b1b      	ldr	r3, [pc, #108]	@ (800c1c0 <HAL_TIM_Base_MspInit+0xe0>)
 800c154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c156:	f003 0302 	and.w	r3, r3, #2
 800c15a:	617b      	str	r3, [r7, #20]
 800c15c:	697b      	ldr	r3, [r7, #20]
}
 800c15e:	e026      	b.n	800c1ae <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM9)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a19      	ldr	r2, [pc, #100]	@ (800c1cc <HAL_TIM_Base_MspInit+0xec>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d10e      	bne.n	800c188 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800c16a:	2300      	movs	r3, #0
 800c16c:	613b      	str	r3, [r7, #16]
 800c16e:	4b14      	ldr	r3, [pc, #80]	@ (800c1c0 <HAL_TIM_Base_MspInit+0xe0>)
 800c170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c172:	4a13      	ldr	r2, [pc, #76]	@ (800c1c0 <HAL_TIM_Base_MspInit+0xe0>)
 800c174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c178:	6453      	str	r3, [r2, #68]	@ 0x44
 800c17a:	4b11      	ldr	r3, [pc, #68]	@ (800c1c0 <HAL_TIM_Base_MspInit+0xe0>)
 800c17c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c17e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c182:	613b      	str	r3, [r7, #16]
 800c184:	693b      	ldr	r3, [r7, #16]
}
 800c186:	e012      	b.n	800c1ae <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM10)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a10      	ldr	r2, [pc, #64]	@ (800c1d0 <HAL_TIM_Base_MspInit+0xf0>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d10d      	bne.n	800c1ae <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800c192:	2300      	movs	r3, #0
 800c194:	60fb      	str	r3, [r7, #12]
 800c196:	4b0a      	ldr	r3, [pc, #40]	@ (800c1c0 <HAL_TIM_Base_MspInit+0xe0>)
 800c198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c19a:	4a09      	ldr	r2, [pc, #36]	@ (800c1c0 <HAL_TIM_Base_MspInit+0xe0>)
 800c19c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c1a0:	6453      	str	r3, [r2, #68]	@ 0x44
 800c1a2:	4b07      	ldr	r3, [pc, #28]	@ (800c1c0 <HAL_TIM_Base_MspInit+0xe0>)
 800c1a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1aa:	60fb      	str	r3, [r7, #12]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
}
 800c1ae:	bf00      	nop
 800c1b0:	3724      	adds	r7, #36	@ 0x24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop
 800c1bc:	40000c00 	.word	0x40000c00
 800c1c0:	40023800 	.word	0x40023800
 800c1c4:	40001000 	.word	0x40001000
 800c1c8:	40010400 	.word	0x40010400
 800c1cc:	40014000 	.word	0x40014000
 800c1d0:	40014400 	.word	0x40014400

0800c1d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b08c      	sub	sp, #48	@ 0x30
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c1dc:	f107 031c 	add.w	r3, r7, #28
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	605a      	str	r2, [r3, #4]
 800c1e6:	609a      	str	r2, [r3, #8]
 800c1e8:	60da      	str	r2, [r3, #12]
 800c1ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a48      	ldr	r2, [pc, #288]	@ (800c314 <HAL_TIM_MspPostInit+0x140>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d11e      	bne.n	800c234 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	61bb      	str	r3, [r7, #24]
 800c1fa:	4b47      	ldr	r3, [pc, #284]	@ (800c318 <HAL_TIM_MspPostInit+0x144>)
 800c1fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1fe:	4a46      	ldr	r2, [pc, #280]	@ (800c318 <HAL_TIM_MspPostInit+0x144>)
 800c200:	f043 0301 	orr.w	r3, r3, #1
 800c204:	6313      	str	r3, [r2, #48]	@ 0x30
 800c206:	4b44      	ldr	r3, [pc, #272]	@ (800c318 <HAL_TIM_MspPostInit+0x144>)
 800c208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c20a:	f003 0301 	and.w	r3, r3, #1
 800c20e:	61bb      	str	r3, [r7, #24]
 800c210:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin|M4_PWM_Pin;
 800c212:	230f      	movs	r3, #15
 800c214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c216:	2302      	movs	r3, #2
 800c218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c21a:	2300      	movs	r3, #0
 800c21c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c21e:	2300      	movs	r3, #0
 800c220:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800c222:	2302      	movs	r3, #2
 800c224:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c226:	f107 031c 	add.w	r3, r7, #28
 800c22a:	4619      	mov	r1, r3
 800c22c:	483b      	ldr	r0, [pc, #236]	@ (800c31c <HAL_TIM_MspPostInit+0x148>)
 800c22e:	f001 f8d5 	bl	800d3dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800c232:	e06a      	b.n	800c30a <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM8)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a39      	ldr	r2, [pc, #228]	@ (800c320 <HAL_TIM_MspPostInit+0x14c>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d11e      	bne.n	800c27c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c23e:	2300      	movs	r3, #0
 800c240:	617b      	str	r3, [r7, #20]
 800c242:	4b35      	ldr	r3, [pc, #212]	@ (800c318 <HAL_TIM_MspPostInit+0x144>)
 800c244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c246:	4a34      	ldr	r2, [pc, #208]	@ (800c318 <HAL_TIM_MspPostInit+0x144>)
 800c248:	f043 0304 	orr.w	r3, r3, #4
 800c24c:	6313      	str	r3, [r2, #48]	@ 0x30
 800c24e:	4b32      	ldr	r3, [pc, #200]	@ (800c318 <HAL_TIM_MspPostInit+0x144>)
 800c250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c252:	f003 0304 	and.w	r3, r3, #4
 800c256:	617b      	str	r3, [r7, #20]
 800c258:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Servo_1_Pin|Servo_2_Pin;
 800c25a:	23c0      	movs	r3, #192	@ 0xc0
 800c25c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c25e:	2302      	movs	r3, #2
 800c260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c262:	2300      	movs	r3, #0
 800c264:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c266:	2300      	movs	r3, #0
 800c268:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800c26a:	2303      	movs	r3, #3
 800c26c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c26e:	f107 031c 	add.w	r3, r7, #28
 800c272:	4619      	mov	r1, r3
 800c274:	482b      	ldr	r0, [pc, #172]	@ (800c324 <HAL_TIM_MspPostInit+0x150>)
 800c276:	f001 f8b1 	bl	800d3dc <HAL_GPIO_Init>
}
 800c27a:	e046      	b.n	800c30a <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM9)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a29      	ldr	r2, [pc, #164]	@ (800c328 <HAL_TIM_MspPostInit+0x154>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d11e      	bne.n	800c2c4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c286:	2300      	movs	r3, #0
 800c288:	613b      	str	r3, [r7, #16]
 800c28a:	4b23      	ldr	r3, [pc, #140]	@ (800c318 <HAL_TIM_MspPostInit+0x144>)
 800c28c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c28e:	4a22      	ldr	r2, [pc, #136]	@ (800c318 <HAL_TIM_MspPostInit+0x144>)
 800c290:	f043 0310 	orr.w	r3, r3, #16
 800c294:	6313      	str	r3, [r2, #48]	@ 0x30
 800c296:	4b20      	ldr	r3, [pc, #128]	@ (800c318 <HAL_TIM_MspPostInit+0x144>)
 800c298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c29a:	f003 0310 	and.w	r3, r3, #16
 800c29e:	613b      	str	r3, [r7, #16]
 800c2a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo_3_Pin|Servo_4_Pin;
 800c2a2:	2360      	movs	r3, #96	@ 0x60
 800c2a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2a6:	2302      	movs	r3, #2
 800c2a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c2b6:	f107 031c 	add.w	r3, r7, #28
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	481b      	ldr	r0, [pc, #108]	@ (800c32c <HAL_TIM_MspPostInit+0x158>)
 800c2be:	f001 f88d 	bl	800d3dc <HAL_GPIO_Init>
}
 800c2c2:	e022      	b.n	800c30a <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM10)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a19      	ldr	r2, [pc, #100]	@ (800c330 <HAL_TIM_MspPostInit+0x15c>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d11d      	bne.n	800c30a <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	60fb      	str	r3, [r7, #12]
 800c2d2:	4b11      	ldr	r3, [pc, #68]	@ (800c318 <HAL_TIM_MspPostInit+0x144>)
 800c2d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2d6:	4a10      	ldr	r2, [pc, #64]	@ (800c318 <HAL_TIM_MspPostInit+0x144>)
 800c2d8:	f043 0320 	orr.w	r3, r3, #32
 800c2dc:	6313      	str	r3, [r2, #48]	@ 0x30
 800c2de:	4b0e      	ldr	r3, [pc, #56]	@ (800c318 <HAL_TIM_MspPostInit+0x144>)
 800c2e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2e2:	f003 0320 	and.w	r3, r3, #32
 800c2e6:	60fb      	str	r3, [r7, #12]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_5_Pin;
 800c2ea:	2340      	movs	r3, #64	@ 0x40
 800c2ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2ee:	2302      	movs	r3, #2
 800c2f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800c2fa:	2303      	movs	r3, #3
 800c2fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Servo_5_GPIO_Port, &GPIO_InitStruct);
 800c2fe:	f107 031c 	add.w	r3, r7, #28
 800c302:	4619      	mov	r1, r3
 800c304:	480b      	ldr	r0, [pc, #44]	@ (800c334 <HAL_TIM_MspPostInit+0x160>)
 800c306:	f001 f869 	bl	800d3dc <HAL_GPIO_Init>
}
 800c30a:	bf00      	nop
 800c30c:	3730      	adds	r7, #48	@ 0x30
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	40000c00 	.word	0x40000c00
 800c318:	40023800 	.word	0x40023800
 800c31c:	40020000 	.word	0x40020000
 800c320:	40010400 	.word	0x40010400
 800c324:	40020800 	.word	0x40020800
 800c328:	40014000 	.word	0x40014000
 800c32c:	40021000 	.word	0x40021000
 800c330:	40014400 	.word	0x40014400
 800c334:	40021400 	.word	0x40021400

0800c338 <KalmanFilter_Init>:

// 静态变量用于存储上次有效的距离值
float last_valid_distances[MAX_US100_SENSORS] = {0};

// 卡尔曼滤波器实现
void KalmanFilter_Init(KalmanFilter* kf, float Q, float R, float dt) {
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	ed87 0a02 	vstr	s0, [r7, #8]
 800c344:	edc7 0a01 	vstr	s1, [r7, #4]
 800c348:	ed87 1a00 	vstr	s2, [r7]
    kf->x = 0.0f;      // 初始状态估计值
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f04f 0200 	mov.w	r2, #0
 800c352:	601a      	str	r2, [r3, #0]
    kf->P = 1.0f;      // 初始估计误差协方差
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c35a:	605a      	str	r2, [r3, #4]
    kf->Q = Q;         // 过程噪声协方差
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	609a      	str	r2, [r3, #8]
    kf->R = R;         // 测量噪声协方差
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	60da      	str	r2, [r3, #12]
    kf->dt = dt;       // 时间步长
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	683a      	ldr	r2, [r7, #0]
 800c36c:	615a      	str	r2, [r3, #20]
}
 800c36e:	bf00      	nop
 800c370:	3714      	adds	r7, #20
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <KalmanFilter_Update>:

float KalmanFilter_Update(KalmanFilter* kf, float measurement) {
 800c37a:	b480      	push	{r7}
 800c37c:	b085      	sub	sp, #20
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	ed87 0a00 	vstr	s0, [r7]
    // 预测步骤
    float x_pred = kf->x;                    // 状态预测
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	60fb      	str	r3, [r7, #12]
    float P_pred = kf->P + kf->Q * kf->dt;   // 误差协方差预测
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	ed93 7a01 	vldr	s14, [r3, #4]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	edd3 6a02 	vldr	s13, [r3, #8]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	edd3 7a05 	vldr	s15, [r3, #20]
 800c39e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c3a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3a6:	edc7 7a02 	vstr	s15, [r7, #8]

    // 更新步骤
    kf->K = P_pred / (P_pred + kf->R);       // 计算卡尔曼增益
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	ed93 7a03 	vldr	s14, [r3, #12]
 800c3b0:	edd7 7a02 	vldr	s15, [r7, #8]
 800c3b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c3b8:	edd7 6a02 	vldr	s13, [r7, #8]
 800c3bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->x = x_pred + kf->K * (measurement - x_pred);  // 更新状态估计
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	ed93 7a04 	vldr	s14, [r3, #16]
 800c3cc:	edd7 6a00 	vldr	s13, [r7]
 800c3d0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c3d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3dc:	edd7 7a03 	vldr	s15, [r7, #12]
 800c3e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	edc3 7a00 	vstr	s15, [r3]
    kf->P = (1.0f - kf->K) * P_pred;         // 更新误差协方差
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	edd3 7a04 	vldr	s15, [r3, #16]
 800c3f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c3f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c3f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c3fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	edc3 7a01 	vstr	s15, [r3, #4]

    return kf->x;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	ee07 3a90 	vmov	s15, r3
}
 800c40e:	eeb0 0a67 	vmov.f32	s0, s15
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <SlidingWindowFilter_Init>:

// 滑动窗口滤波器实现
void SlidingWindowFilter_Init(SlidingWindowFilter* swf, int size) {
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
    swf->size = size;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	683a      	ldr	r2, [r7, #0]
 800c42a:	605a      	str	r2, [r3, #4]
    swf->index = 0;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	609a      	str	r2, [r3, #8]
    swf->sum = 0.0f;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f04f 0200 	mov.w	r2, #0
 800c438:	60da      	str	r2, [r3, #12]
    swf->buffer = (float*)malloc(size * sizeof(float));
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	4618      	mov	r0, r3
 800c440:	f005 f874 	bl	801152c <malloc>
 800c444:	4603      	mov	r3, r0
 800c446:	461a      	mov	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	601a      	str	r2, [r3, #0]
    if (swf->buffer != NULL) {
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d007      	beq.n	800c464 <SlidingWindowFilter_Init+0x48>
        memset(swf->buffer, 0, size * sizeof(float));
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6818      	ldr	r0, [r3, #0]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	461a      	mov	r2, r3
 800c45e:	2100      	movs	r1, #0
 800c460:	f005 ff8a 	bl	8012378 <memset>
    }
}
 800c464:	bf00      	nop
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <SlidingWindowFilter_Update>:

float SlidingWindowFilter_Update(SlidingWindowFilter* swf, float new_value) {
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	ed87 0a00 	vstr	s0, [r7]
    if (swf->buffer == NULL) return new_value;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d102      	bne.n	800c486 <SlidingWindowFilter_Update+0x1a>
 800c480:	edd7 7a00 	vldr	s15, [r7]
 800c484:	e038      	b.n	800c4f8 <SlidingWindowFilter_Update+0x8c>

    // 减去最旧的值
    swf->sum -= swf->buffer[swf->index];
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	ed93 7a03 	vldr	s14, [r3, #12]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	4413      	add	r3, r2
 800c498:	edd3 7a00 	vldr	s15, [r3]
 800c49c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	edc3 7a03 	vstr	s15, [r3, #12]
    
    // 添加新值
    swf->buffer[swf->index] = new_value;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4413      	add	r3, r2
 800c4b2:	683a      	ldr	r2, [r7, #0]
 800c4b4:	601a      	str	r2, [r3, #0]
    swf->sum += new_value;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	ed93 7a03 	vldr	s14, [r3, #12]
 800c4bc:	edd7 7a00 	vldr	s15, [r7]
 800c4c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	edc3 7a03 	vstr	s15, [r3, #12]
    
    // 更新索引
    swf->index = (swf->index + 1) % swf->size;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	689b      	ldr	r3, [r3, #8]
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	6852      	ldr	r2, [r2, #4]
 800c4d4:	fb93 f1f2 	sdiv	r1, r3, r2
 800c4d8:	fb01 f202 	mul.w	r2, r1, r2
 800c4dc:	1a9a      	subs	r2, r3, r2
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	609a      	str	r2, [r3, #8]
    
    // 返回平均值
    return swf->sum / swf->size;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	edd3 6a03 	vldr	s13, [r3, #12]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	ee07 3a90 	vmov	s15, r3
 800c4f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c4f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 800c4f8:	eeb0 0a67 	vmov.f32	s0, s15
 800c4fc:	370c      	adds	r7, #12
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
	...

0800c508 <US100_Init>:
        swf->sum = 0.0f;
        swf->index = 0;
    }
}

void US100_Init(US100Sensor* sensor, UART_HandleTypeDef* uart) {
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
    if (us100_sensor_count >= MAX_US100_SENSORS) return;
 800c512:	4b24      	ldr	r3, [pc, #144]	@ (800c5a4 <US100_Init+0x9c>)
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	2b04      	cmp	r3, #4
 800c518:	d83e      	bhi.n	800c598 <US100_Init+0x90>
    
    // 保存串口句柄
    sensor->uart = uart;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	683a      	ldr	r2, [r7, #0]
 800c51e:	601a      	str	r2, [r3, #0]
    
    // 初始化状态
    sensor->state = US100_STATE_IDLE;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	711a      	strb	r2, [r3, #4]
    sensor->data_ready = 0;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	749a      	strb	r2, [r3, #18]
    sensor->distance = 0.0f;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	821a      	strh	r2, [r3, #16]
    sensor->rx_index = 0;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2200      	movs	r2, #0
 800c536:	739a      	strb	r2, [r3, #14]
    
    // 初始化卡尔曼滤波器
    KalmanFilter_Init(&sensor->kalman, 0.999f, 0.001f, 0.001f);  // Q=0.1, R=0.1, dt=0.001
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3314      	adds	r3, #20
 800c53c:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 800c5a8 <US100_Init+0xa0>
 800c540:	eddf 0a19 	vldr	s1, [pc, #100]	@ 800c5a8 <US100_Init+0xa0>
 800c544:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800c5ac <US100_Init+0xa4>
 800c548:	4618      	mov	r0, r3
 800c54a:	f7ff fef5 	bl	800c338 <KalmanFilter_Init>
    
    // 初始化滑动窗口滤波器
    SlidingWindowFilter_Init(&sensor->sliding, 3);  // 5点滑动窗口
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	332c      	adds	r3, #44	@ 0x2c
 800c552:	2103      	movs	r1, #3
 800c554:	4618      	mov	r0, r3
 800c556:	f7ff ff61 	bl	800c41c <SlidingWindowFilter_Init>
    
    // 添加到活动传感器数组
    active_sensors[us100_sensor_count++] = sensor;
 800c55a:	4b12      	ldr	r3, [pc, #72]	@ (800c5a4 <US100_Init+0x9c>)
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	1c5a      	adds	r2, r3, #1
 800c560:	b2d1      	uxtb	r1, r2
 800c562:	4a10      	ldr	r2, [pc, #64]	@ (800c5a4 <US100_Init+0x9c>)
 800c564:	7011      	strb	r1, [r2, #0]
 800c566:	4619      	mov	r1, r3
 800c568:	4a11      	ldr	r2, [pc, #68]	@ (800c5b0 <US100_Init+0xa8>)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    // 确保串口已初始化
    if (HAL_UART_GetState(uart) != HAL_UART_STATE_READY) {
 800c570:	6838      	ldr	r0, [r7, #0]
 800c572:	f004 fb19 	bl	8010ba8 <HAL_UART_GetState>
 800c576:	4603      	mov	r3, r0
 800c578:	2b20      	cmp	r3, #32
 800c57a:	d005      	beq.n	800c588 <US100_Init+0x80>
        if (HAL_UART_Init(uart) != HAL_OK) {
 800c57c:	6838      	ldr	r0, [r7, #0]
 800c57e:	f003 ff61 	bl	8010444 <HAL_UART_Init>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d109      	bne.n	800c59c <US100_Init+0x94>
            return;
        }
    }
    
    // 启动串口接收，一次性接收2个字节
    HAL_UART_Receive_IT(uart, sensor->rx_buffer, 2);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	330c      	adds	r3, #12
 800c58c:	2202      	movs	r2, #2
 800c58e:	4619      	mov	r1, r3
 800c590:	6838      	ldr	r0, [r7, #0]
 800c592:	f004 f832 	bl	80105fa <HAL_UART_Receive_IT>
 800c596:	e002      	b.n	800c59e <US100_Init+0x96>
    if (us100_sensor_count >= MAX_US100_SENSORS) return;
 800c598:	bf00      	nop
 800c59a:	e000      	b.n	800c59e <US100_Init+0x96>
            return;
 800c59c:	bf00      	nop
}
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	200008bc 	.word	0x200008bc
 800c5a8:	3a83126f 	.word	0x3a83126f
 800c5ac:	3f7fbe77 	.word	0x3f7fbe77
 800c5b0:	200008a8 	.word	0x200008a8

0800c5b4 <US100_StartMeasurement>:

void US100_StartMeasurement(US100Sensor* sensor) {
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
    if (sensor->state != US100_STATE_IDLE) {
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	791b      	ldrb	r3, [r3, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00d      	beq.n	800c5e0 <US100_StartMeasurement+0x2c>
        sensor->state = US100_STATE_IDLE;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	711a      	strb	r2, [r3, #4]
        sensor->rx_index = 0;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	739a      	strb	r2, [r3, #14]
        HAL_UART_Receive_IT(sensor->uart, sensor->rx_buffer, 2);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6818      	ldr	r0, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	330c      	adds	r3, #12
 800c5d8:	2202      	movs	r2, #2
 800c5da:	4619      	mov	r1, r3
 800c5dc:	f004 f80d 	bl	80105fa <HAL_UART_Receive_IT>
    }
    
    // 开始新的测量
    sensor->state = US100_STATE_SENDING;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	711a      	strb	r2, [r3, #4]
    sensor->timestamp = HAL_GetTick();
 800c5e6:	f000 fd25 	bl	800d034 <HAL_GetTick>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	609a      	str	r2, [r3, #8]
    
    // 发送读取距离命令
    uint8_t cmd = US100_CMD_READ_DISTANCE;
 800c5f0:	2355      	movs	r3, #85	@ 0x55
 800c5f2:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(sensor->uart, &cmd, 1, 100);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6818      	ldr	r0, [r3, #0]
 800c5f8:	f107 010f 	add.w	r1, r7, #15
 800c5fc:	2364      	movs	r3, #100	@ 0x64
 800c5fe:	2201      	movs	r2, #1
 800c600:	f003 ff70 	bl	80104e4 <HAL_UART_Transmit>
}
 800c604:	bf00      	nop
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <US100_Update>:

void US100_Update(US100Sensor* sensor) {
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 800c614:	f000 fd0e 	bl	800d034 <HAL_GetTick>
 800c618:	60f8      	str	r0, [r7, #12]
    
    switch (sensor->state) {
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	791b      	ldrb	r3, [r3, #4]
 800c61e:	2b03      	cmp	r3, #3
 800c620:	d028      	beq.n	800c674 <US100_Update+0x68>
 800c622:	2b03      	cmp	r3, #3
 800c624:	dc6a      	bgt.n	800c6fc <US100_Update+0xf0>
 800c626:	2b01      	cmp	r3, #1
 800c628:	d002      	beq.n	800c630 <US100_Update+0x24>
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d00d      	beq.n	800c64a <US100_Update+0x3e>
                sensor->state = US100_STATE_IDLE;
            }
            break;
            
        default:
            break;
 800c62e:	e065      	b.n	800c6fc <US100_Update+0xf0>
            if ((now - sensor->timestamp) >= 10) {
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	1ad3      	subs	r3, r2, r3
 800c638:	2b09      	cmp	r3, #9
 800c63a:	d961      	bls.n	800c700 <US100_Update+0xf4>
                sensor->state = US100_STATE_WAITING;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2202      	movs	r2, #2
 800c640:	711a      	strb	r2, [r3, #4]
                sensor->timestamp = now;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	609a      	str	r2, [r3, #8]
            break;
 800c648:	e05a      	b.n	800c700 <US100_Update+0xf4>
            if ((now - sensor->timestamp) >= US100_TIMEOUT_MS) {
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	68fa      	ldr	r2, [r7, #12]
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	2b63      	cmp	r3, #99	@ 0x63
 800c654:	d956      	bls.n	800c704 <US100_Update+0xf8>
                sensor->state = US100_STATE_IDLE;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2200      	movs	r2, #0
 800c65a:	711a      	strb	r2, [r3, #4]
                sensor->rx_index = 0;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	739a      	strb	r2, [r3, #14]
                HAL_UART_Receive_IT(sensor->uart, &sensor->rx_buffer[0], 1);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6818      	ldr	r0, [r3, #0]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	330c      	adds	r3, #12
 800c66a:	2201      	movs	r2, #1
 800c66c:	4619      	mov	r1, r3
 800c66e:	f003 ffc4 	bl	80105fa <HAL_UART_Receive_IT>
            break;
 800c672:	e047      	b.n	800c704 <US100_Update+0xf8>
            if (sensor->rx_index >= 2) {
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	7b9b      	ldrb	r3, [r3, #14]
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d945      	bls.n	800c708 <US100_Update+0xfc>
                if (sensor->rx_buffer[0] == 0xFF && sensor->rx_buffer[1] == 0xFF) {
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	7b1b      	ldrb	r3, [r3, #12]
 800c680:	2bff      	cmp	r3, #255	@ 0xff
 800c682:	d112      	bne.n	800c6aa <US100_Update+0x9e>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	7b5b      	ldrb	r3, [r3, #13]
 800c688:	2bff      	cmp	r3, #255	@ 0xff
 800c68a:	d10e      	bne.n	800c6aa <US100_Update+0x9e>
                    sensor->state = US100_STATE_IDLE;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	711a      	strb	r2, [r3, #4]
                    sensor->rx_index = 0;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	739a      	strb	r2, [r3, #14]
                    HAL_UART_Receive_IT(sensor->uart, &sensor->rx_buffer[0], 1);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6818      	ldr	r0, [r3, #0]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	330c      	adds	r3, #12
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	f003 ffa9 	bl	80105fa <HAL_UART_Receive_IT>
                    return;
 800c6a8:	e02f      	b.n	800c70a <US100_Update+0xfe>
                uint16_t raw_distance = (sensor->rx_buffer[1] << 8) | sensor->rx_buffer[0];
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	7b5b      	ldrb	r3, [r3, #13]
 800c6ae:	b21b      	sxth	r3, r3
 800c6b0:	021b      	lsls	r3, r3, #8
 800c6b2:	b21a      	sxth	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	7b1b      	ldrb	r3, [r3, #12]
 800c6b8:	b21b      	sxth	r3, r3
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	b21b      	sxth	r3, r3
 800c6be:	817b      	strh	r3, [r7, #10]
                if (raw_distance > 12000) {
 800c6c0:	897b      	ldrh	r3, [r7, #10]
 800c6c2:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d90e      	bls.n	800c6e8 <US100_Update+0xdc>
                    sensor->state = US100_STATE_IDLE;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	711a      	strb	r2, [r3, #4]
                    sensor->rx_index = 0;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	739a      	strb	r2, [r3, #14]
                    HAL_UART_Receive_IT(sensor->uart, &sensor->rx_buffer[0], 1);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6818      	ldr	r0, [r3, #0]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	330c      	adds	r3, #12
 800c6de:	2201      	movs	r2, #1
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	f003 ff8a 	bl	80105fa <HAL_UART_Receive_IT>
                    return;
 800c6e6:	e010      	b.n	800c70a <US100_Update+0xfe>
                sensor->distance = raw_distance;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	897a      	ldrh	r2, [r7, #10]
 800c6ec:	821a      	strh	r2, [r3, #16]
                sensor->data_ready = 1;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	749a      	strb	r2, [r3, #18]
                sensor->state = US100_STATE_IDLE;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	711a      	strb	r2, [r3, #4]
            break;
 800c6fa:	e005      	b.n	800c708 <US100_Update+0xfc>
            break;
 800c6fc:	bf00      	nop
 800c6fe:	e004      	b.n	800c70a <US100_Update+0xfe>
            break;
 800c700:	bf00      	nop
 800c702:	e002      	b.n	800c70a <US100_Update+0xfe>
            break;
 800c704:	bf00      	nop
 800c706:	e000      	b.n	800c70a <US100_Update+0xfe>
            break;
 800c708:	bf00      	nop
    }
}
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <US100_UART_RxCpltCallback>:
//         // 重新启动接收，准备下一次测量
//         HAL_UART_Receive_IT(huart, s->rx_buffer, 2);
//     }

// }
void US100_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800c710:	b580      	push	{r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c718:	2300      	movs	r3, #0
 800c71a:	75fb      	strb	r3, [r7, #23]
 800c71c:	e04e      	b.n	800c7bc <US100_UART_RxCpltCallback+0xac>
        US100Sensor* s = active_sensors[i];
 800c71e:	7dfb      	ldrb	r3, [r7, #23]
 800c720:	4a2b      	ldr	r2, [pc, #172]	@ (800c7d0 <US100_UART_RxCpltCallback+0xc0>)
 800c722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c726:	613b      	str	r3, [r7, #16]
        
        if (huart == s->uart) {
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d141      	bne.n	800c7b6 <US100_UART_RxCpltCallback+0xa6>
                // 尝试两种字节顺序
                uint16_t distance1 = (s->rx_buffer[1] << 8) | s->rx_buffer[0];  // 原始顺序
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	7b5b      	ldrb	r3, [r3, #13]
 800c736:	b21b      	sxth	r3, r3
 800c738:	021b      	lsls	r3, r3, #8
 800c73a:	b21a      	sxth	r2, r3
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	7b1b      	ldrb	r3, [r3, #12]
 800c740:	b21b      	sxth	r3, r3
 800c742:	4313      	orrs	r3, r2
 800c744:	b21b      	sxth	r3, r3
 800c746:	81fb      	strh	r3, [r7, #14]
                uint16_t distance2 = (s->rx_buffer[0] << 8) | s->rx_buffer[1];  // 颠倒顺序
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	7b1b      	ldrb	r3, [r3, #12]
 800c74c:	b21b      	sxth	r3, r3
 800c74e:	021b      	lsls	r3, r3, #8
 800c750:	b21a      	sxth	r2, r3
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	7b5b      	ldrb	r3, [r3, #13]
 800c756:	b21b      	sxth	r3, r3
 800c758:	4313      	orrs	r3, r2
 800c75a:	b21b      	sxth	r3, r3
 800c75c:	81bb      	strh	r3, [r7, #12]
                
                if (distance1 >= 20 && distance1 <= 4500) {
 800c75e:	89fb      	ldrh	r3, [r7, #14]
 800c760:	2b13      	cmp	r3, #19
 800c762:	d90b      	bls.n	800c77c <US100_UART_RxCpltCallback+0x6c>
 800c764:	89fb      	ldrh	r3, [r7, #14]
 800c766:	f241 1294 	movw	r2, #4500	@ 0x1194
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d806      	bhi.n	800c77c <US100_UART_RxCpltCallback+0x6c>
                    s->distance = distance1;
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	89fa      	ldrh	r2, [r7, #14]
 800c772:	821a      	strh	r2, [r3, #16]
                    s->data_ready = 1;
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	2201      	movs	r2, #1
 800c778:	749a      	strb	r2, [r3, #18]
 800c77a:	e011      	b.n	800c7a0 <US100_UART_RxCpltCallback+0x90>
                } else if (distance2 >= 20 && distance2 <= 4500) {
 800c77c:	89bb      	ldrh	r3, [r7, #12]
 800c77e:	2b13      	cmp	r3, #19
 800c780:	d90b      	bls.n	800c79a <US100_UART_RxCpltCallback+0x8a>
 800c782:	89bb      	ldrh	r3, [r7, #12]
 800c784:	f241 1294 	movw	r2, #4500	@ 0x1194
 800c788:	4293      	cmp	r3, r2
 800c78a:	d806      	bhi.n	800c79a <US100_UART_RxCpltCallback+0x8a>
                    s->distance = distance2;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	89ba      	ldrh	r2, [r7, #12]
 800c790:	821a      	strh	r2, [r3, #16]
                    s->data_ready = 1;
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	2201      	movs	r2, #1
 800c796:	749a      	strb	r2, [r3, #18]
 800c798:	e002      	b.n	800c7a0 <US100_UART_RxCpltCallback+0x90>
                } else {
                    s->data_ready = 0;  // 如果两种顺序都不在有效范围内，则标记为无效
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	2200      	movs	r2, #0
 800c79e:	749a      	strb	r2, [r3, #18]
                }
                
                s->state = US100_STATE_RECEIVING;
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	2203      	movs	r2, #3
 800c7a4:	711a      	strb	r2, [r3, #4]
                            // 重新启动接收，准备下一次测量
            HAL_UART_Receive_IT(huart, s->rx_buffer, 2);
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	330c      	adds	r3, #12
 800c7aa:	2202      	movs	r2, #2
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f003 ff23 	bl	80105fa <HAL_UART_Receive_IT>
            break;
 800c7b4:	e008      	b.n	800c7c8 <US100_UART_RxCpltCallback+0xb8>
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c7b6:	7dfb      	ldrb	r3, [r7, #23]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	75fb      	strb	r3, [r7, #23]
 800c7bc:	4b05      	ldr	r3, [pc, #20]	@ (800c7d4 <US100_UART_RxCpltCallback+0xc4>)
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	7dfa      	ldrb	r2, [r7, #23]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d3ab      	bcc.n	800c71e <US100_UART_RxCpltCallback+0xe>
        }
    }
}
 800c7c6:	bf00      	nop
 800c7c8:	bf00      	nop
 800c7ca:	3718      	adds	r7, #24
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	200008a8 	.word	0x200008a8
 800c7d4:	200008bc 	.word	0x200008bc

0800c7d8 <US100_GetDistance>:

float US100_GetDistance(US100Sensor* sensor) {
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b086      	sub	sp, #24
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
    if (sensor->data_ready) {
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	7c9b      	ldrb	r3, [r3, #18]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d01e      	beq.n	800c826 <US100_GetDistance+0x4e>
        sensor->data_ready = 0;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	749a      	strb	r2, [r3, #18]
        float raw_distance = sensor->distance;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	8a1b      	ldrh	r3, [r3, #16]
 800c7f2:	ee07 3a90 	vmov	s15, r3
 800c7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7fa:	edc7 7a05 	vstr	s15, [r7, #20]
        
        // 应用卡尔曼滤波
        float kalman_filtered = KalmanFilter_Update(&sensor->kalman, raw_distance);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	3314      	adds	r3, #20
 800c802:	ed97 0a05 	vldr	s0, [r7, #20]
 800c806:	4618      	mov	r0, r3
 800c808:	f7ff fdb7 	bl	800c37a <KalmanFilter_Update>
 800c80c:	ed87 0a04 	vstr	s0, [r7, #16]
        
        // 应用滑动窗口滤波
        float final_filtered = SlidingWindowFilter_Update(&sensor->sliding, kalman_filtered);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	332c      	adds	r3, #44	@ 0x2c
 800c814:	ed97 0a04 	vldr	s0, [r7, #16]
 800c818:	4618      	mov	r0, r3
 800c81a:	f7ff fe27 	bl	800c46c <SlidingWindowFilter_Update>
 800c81e:	ed87 0a03 	vstr	s0, [r7, #12]
        
        return final_filtered;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	e000      	b.n	800c828 <US100_GetDistance+0x50>
    }
    return -1.0f; // 无效数据
 800c826:	4b04      	ldr	r3, [pc, #16]	@ (800c838 <US100_GetDistance+0x60>)
}
 800c828:	ee07 3a90 	vmov	s15, r3
 800c82c:	eeb0 0a67 	vmov.f32	s0, s15
 800c830:	3718      	adds	r7, #24
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	bf800000 	.word	0xbf800000

0800c83c <US100_GetAllValidDistances>:

void US100_GetAllValidDistances(float* distances) {
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
    // 更新所有传感器的状态
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c844:	2300      	movs	r3, #0
 800c846:	75fb      	strb	r3, [r7, #23]
 800c848:	e009      	b.n	800c85e <US100_GetAllValidDistances+0x22>
        US100_Update(active_sensors[i]);
 800c84a:	7dfb      	ldrb	r3, [r7, #23]
 800c84c:	4a5c      	ldr	r2, [pc, #368]	@ (800c9c0 <US100_GetAllValidDistances+0x184>)
 800c84e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c852:	4618      	mov	r0, r3
 800c854:	f7ff feda 	bl	800c60c <US100_Update>
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c858:	7dfb      	ldrb	r3, [r7, #23]
 800c85a:	3301      	adds	r3, #1
 800c85c:	75fb      	strb	r3, [r7, #23]
 800c85e:	4b59      	ldr	r3, [pc, #356]	@ (800c9c4 <US100_GetAllValidDistances+0x188>)
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	7dfa      	ldrb	r2, [r7, #23]
 800c864:	429a      	cmp	r2, r3
 800c866:	d3f0      	bcc.n	800c84a <US100_GetAllValidDistances+0xe>
    }
    
    // 获取所有传感器的距离值
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c868:	2300      	movs	r3, #0
 800c86a:	75bb      	strb	r3, [r7, #22]
 800c86c:	e043      	b.n	800c8f6 <US100_GetAllValidDistances+0xba>
        float current_distance = US100_GetDistance(active_sensors[i]);
 800c86e:	7dbb      	ldrb	r3, [r7, #22]
 800c870:	4a53      	ldr	r2, [pc, #332]	@ (800c9c0 <US100_GetAllValidDistances+0x184>)
 800c872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c876:	4618      	mov	r0, r3
 800c878:	f7ff ffae 	bl	800c7d8 <US100_GetDistance>
 800c87c:	ed87 0a02 	vstr	s0, [r7, #8]
        if (current_distance > 0) {
 800c880:	edd7 7a02 	vldr	s15, [r7, #8]
 800c884:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c88c:	dd26      	ble.n	800c8dc <US100_GetAllValidDistances+0xa0>
            raw_distances[i] = active_sensors[i]->distance;
 800c88e:	7dbb      	ldrb	r3, [r7, #22]
 800c890:	4a4b      	ldr	r2, [pc, #300]	@ (800c9c0 <US100_GetAllValidDistances+0x184>)
 800c892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c896:	8a1a      	ldrh	r2, [r3, #16]
 800c898:	7dbb      	ldrb	r3, [r7, #22]
 800c89a:	ee07 2a90 	vmov	s15, r2
 800c89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a2:	4a49      	ldr	r2, [pc, #292]	@ (800c9c8 <US100_GetAllValidDistances+0x18c>)
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	4413      	add	r3, r2
 800c8a8:	edc3 7a00 	vstr	s15, [r3]
            // 使用0.6的原始距离和0.4的滤波距离
            last_valid_distances[i] = 0.61f * raw_distances[i] + 0.39f * current_distance;
 800c8ac:	7dbb      	ldrb	r3, [r7, #22]
 800c8ae:	4a46      	ldr	r2, [pc, #280]	@ (800c9c8 <US100_GetAllValidDistances+0x18c>)
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	4413      	add	r3, r2
 800c8b4:	edd3 7a00 	vldr	s15, [r3]
 800c8b8:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800c9cc <US100_GetAllValidDistances+0x190>
 800c8bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c8c0:	edd7 7a02 	vldr	s15, [r7, #8]
 800c8c4:	eddf 6a42 	vldr	s13, [pc, #264]	@ 800c9d0 <US100_GetAllValidDistances+0x194>
 800c8c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c8cc:	7dbb      	ldrb	r3, [r7, #22]
 800c8ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8d2:	4a40      	ldr	r2, [pc, #256]	@ (800c9d4 <US100_GetAllValidDistances+0x198>)
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	4413      	add	r3, r2
 800c8d8:	edc3 7a00 	vstr	s15, [r3]
        }
        distances[i] = last_valid_distances[i];
 800c8dc:	7dba      	ldrb	r2, [r7, #22]
 800c8de:	7dbb      	ldrb	r3, [r7, #22]
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	6879      	ldr	r1, [r7, #4]
 800c8e4:	440b      	add	r3, r1
 800c8e6:	493b      	ldr	r1, [pc, #236]	@ (800c9d4 <US100_GetAllValidDistances+0x198>)
 800c8e8:	0092      	lsls	r2, r2, #2
 800c8ea:	440a      	add	r2, r1
 800c8ec:	6812      	ldr	r2, [r2, #0]
 800c8ee:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c8f0:	7dbb      	ldrb	r3, [r7, #22]
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	75bb      	strb	r3, [r7, #22]
 800c8f6:	4b33      	ldr	r3, [pc, #204]	@ (800c9c4 <US100_GetAllValidDistances+0x188>)
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	7dba      	ldrb	r2, [r7, #22]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d3b6      	bcc.n	800c86e <US100_GetAllValidDistances+0x32>
    }
    
    // 检查是否所有传感器都有有效数据
    uint8_t all_valid = 1;
 800c900:	2301      	movs	r3, #1
 800c902:	757b      	strb	r3, [r7, #21]
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c904:	2300      	movs	r3, #0
 800c906:	753b      	strb	r3, [r7, #20]
 800c908:	e010      	b.n	800c92c <US100_GetAllValidDistances+0xf0>
        if (distances[i] <= 0) {
 800c90a:	7d3b      	ldrb	r3, [r7, #20]
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	4413      	add	r3, r2
 800c912:	edd3 7a00 	vldr	s15, [r3]
 800c916:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c91e:	d802      	bhi.n	800c926 <US100_GetAllValidDistances+0xea>
            all_valid = 0;
 800c920:	2300      	movs	r3, #0
 800c922:	757b      	strb	r3, [r7, #21]
            break;
 800c924:	e007      	b.n	800c936 <US100_GetAllValidDistances+0xfa>
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c926:	7d3b      	ldrb	r3, [r7, #20]
 800c928:	3301      	adds	r3, #1
 800c92a:	753b      	strb	r3, [r7, #20]
 800c92c:	4b25      	ldr	r3, [pc, #148]	@ (800c9c4 <US100_GetAllValidDistances+0x188>)
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	7d3a      	ldrb	r2, [r7, #20]
 800c932:	429a      	cmp	r2, r3
 800c934:	d3e9      	bcc.n	800c90a <US100_GetAllValidDistances+0xce>
        }
    }
    
    // 如果所有传感器都有有效数据，开始下一次测量
    if (all_valid) {
 800c936:	7d7b      	ldrb	r3, [r7, #21]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d012      	beq.n	800c962 <US100_GetAllValidDistances+0x126>
        for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c93c:	2300      	movs	r3, #0
 800c93e:	74fb      	strb	r3, [r7, #19]
 800c940:	e009      	b.n	800c956 <US100_GetAllValidDistances+0x11a>
            US100_StartMeasurement(active_sensors[i]);
 800c942:	7cfb      	ldrb	r3, [r7, #19]
 800c944:	4a1e      	ldr	r2, [pc, #120]	@ (800c9c0 <US100_GetAllValidDistances+0x184>)
 800c946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7ff fe32 	bl	800c5b4 <US100_StartMeasurement>
        for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c950:	7cfb      	ldrb	r3, [r7, #19]
 800c952:	3301      	adds	r3, #1
 800c954:	74fb      	strb	r3, [r7, #19]
 800c956:	4b1b      	ldr	r3, [pc, #108]	@ (800c9c4 <US100_GetAllValidDistances+0x188>)
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	7cfa      	ldrb	r2, [r7, #19]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d3f0      	bcc.n	800c942 <US100_GetAllValidDistances+0x106>
            }
            
            last_measurement_time = current_time;
        }
    }
}
 800c960:	e02a      	b.n	800c9b8 <US100_GetAllValidDistances+0x17c>
        uint32_t current_time = HAL_GetTick();
 800c962:	f000 fb67 	bl	800d034 <HAL_GetTick>
 800c966:	60f8      	str	r0, [r7, #12]
        if (current_time - last_measurement_time > 10) {
 800c968:	4b1b      	ldr	r3, [pc, #108]	@ (800c9d8 <US100_GetAllValidDistances+0x19c>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	1ad3      	subs	r3, r2, r3
 800c970:	2b0a      	cmp	r3, #10
 800c972:	d921      	bls.n	800c9b8 <US100_GetAllValidDistances+0x17c>
            timeout_count++;
 800c974:	4b19      	ldr	r3, [pc, #100]	@ (800c9dc <US100_GetAllValidDistances+0x1a0>)
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	3301      	adds	r3, #1
 800c97a:	b2da      	uxtb	r2, r3
 800c97c:	4b17      	ldr	r3, [pc, #92]	@ (800c9dc <US100_GetAllValidDistances+0x1a0>)
 800c97e:	701a      	strb	r2, [r3, #0]
            if (timeout_count >= 3) {
 800c980:	4b16      	ldr	r3, [pc, #88]	@ (800c9dc <US100_GetAllValidDistances+0x1a0>)
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	2b02      	cmp	r3, #2
 800c986:	d914      	bls.n	800c9b2 <US100_GetAllValidDistances+0x176>
                for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c988:	2300      	movs	r3, #0
 800c98a:	74bb      	strb	r3, [r7, #18]
 800c98c:	e009      	b.n	800c9a2 <US100_GetAllValidDistances+0x166>
                    US100_StartMeasurement(active_sensors[i]);
 800c98e:	7cbb      	ldrb	r3, [r7, #18]
 800c990:	4a0b      	ldr	r2, [pc, #44]	@ (800c9c0 <US100_GetAllValidDistances+0x184>)
 800c992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c996:	4618      	mov	r0, r3
 800c998:	f7ff fe0c 	bl	800c5b4 <US100_StartMeasurement>
                for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c99c:	7cbb      	ldrb	r3, [r7, #18]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	74bb      	strb	r3, [r7, #18]
 800c9a2:	4b08      	ldr	r3, [pc, #32]	@ (800c9c4 <US100_GetAllValidDistances+0x188>)
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	7cba      	ldrb	r2, [r7, #18]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d3f0      	bcc.n	800c98e <US100_GetAllValidDistances+0x152>
                timeout_count = 0;
 800c9ac:	4b0b      	ldr	r3, [pc, #44]	@ (800c9dc <US100_GetAllValidDistances+0x1a0>)
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	701a      	strb	r2, [r3, #0]
            last_measurement_time = current_time;
 800c9b2:	4a09      	ldr	r2, [pc, #36]	@ (800c9d8 <US100_GetAllValidDistances+0x19c>)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6013      	str	r3, [r2, #0]
}
 800c9b8:	bf00      	nop
 800c9ba:	3718      	adds	r7, #24
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	200008a8 	.word	0x200008a8
 800c9c4:	200008bc 	.word	0x200008bc
 800c9c8:	200000cc 	.word	0x200000cc
 800c9cc:	3f1c28f6 	.word	0x3f1c28f6
 800c9d0:	3ec7ae14 	.word	0x3ec7ae14
 800c9d4:	200008c0 	.word	0x200008c0
 800c9d8:	200008d4 	.word	0x200008d4
 800c9dc:	200008d8 	.word	0x200008d8

0800c9e0 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800c9e4:	4b11      	ldr	r3, [pc, #68]	@ (800ca2c <MX_UART4_Init+0x4c>)
 800c9e6:	4a12      	ldr	r2, [pc, #72]	@ (800ca30 <MX_UART4_Init+0x50>)
 800c9e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800c9ea:	4b10      	ldr	r3, [pc, #64]	@ (800ca2c <MX_UART4_Init+0x4c>)
 800c9ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800c9f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800c9f2:	4b0e      	ldr	r3, [pc, #56]	@ (800ca2c <MX_UART4_Init+0x4c>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800c9f8:	4b0c      	ldr	r3, [pc, #48]	@ (800ca2c <MX_UART4_Init+0x4c>)
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800c9fe:	4b0b      	ldr	r3, [pc, #44]	@ (800ca2c <MX_UART4_Init+0x4c>)
 800ca00:	2200      	movs	r2, #0
 800ca02:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800ca04:	4b09      	ldr	r3, [pc, #36]	@ (800ca2c <MX_UART4_Init+0x4c>)
 800ca06:	220c      	movs	r2, #12
 800ca08:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ca0a:	4b08      	ldr	r3, [pc, #32]	@ (800ca2c <MX_UART4_Init+0x4c>)
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800ca10:	4b06      	ldr	r3, [pc, #24]	@ (800ca2c <MX_UART4_Init+0x4c>)
 800ca12:	2200      	movs	r2, #0
 800ca14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800ca16:	4805      	ldr	r0, [pc, #20]	@ (800ca2c <MX_UART4_Init+0x4c>)
 800ca18:	f003 fd14 	bl	8010444 <HAL_UART_Init>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d001      	beq.n	800ca26 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800ca22:	f7fb f94f 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800ca26:	bf00      	nop
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	200008dc 	.word	0x200008dc
 800ca30:	40004c00 	.word	0x40004c00

0800ca34 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800ca38:	4b11      	ldr	r3, [pc, #68]	@ (800ca80 <MX_UART5_Init+0x4c>)
 800ca3a:	4a12      	ldr	r2, [pc, #72]	@ (800ca84 <MX_UART5_Init+0x50>)
 800ca3c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800ca3e:	4b10      	ldr	r3, [pc, #64]	@ (800ca80 <MX_UART5_Init+0x4c>)
 800ca40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800ca44:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800ca46:	4b0e      	ldr	r3, [pc, #56]	@ (800ca80 <MX_UART5_Init+0x4c>)
 800ca48:	2200      	movs	r2, #0
 800ca4a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800ca4c:	4b0c      	ldr	r3, [pc, #48]	@ (800ca80 <MX_UART5_Init+0x4c>)
 800ca4e:	2200      	movs	r2, #0
 800ca50:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800ca52:	4b0b      	ldr	r3, [pc, #44]	@ (800ca80 <MX_UART5_Init+0x4c>)
 800ca54:	2200      	movs	r2, #0
 800ca56:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800ca58:	4b09      	ldr	r3, [pc, #36]	@ (800ca80 <MX_UART5_Init+0x4c>)
 800ca5a:	220c      	movs	r2, #12
 800ca5c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ca5e:	4b08      	ldr	r3, [pc, #32]	@ (800ca80 <MX_UART5_Init+0x4c>)
 800ca60:	2200      	movs	r2, #0
 800ca62:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800ca64:	4b06      	ldr	r3, [pc, #24]	@ (800ca80 <MX_UART5_Init+0x4c>)
 800ca66:	2200      	movs	r2, #0
 800ca68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800ca6a:	4805      	ldr	r0, [pc, #20]	@ (800ca80 <MX_UART5_Init+0x4c>)
 800ca6c:	f003 fcea 	bl	8010444 <HAL_UART_Init>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d001      	beq.n	800ca7a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800ca76:	f7fb f925 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800ca7a:	bf00      	nop
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	20000924 	.word	0x20000924
 800ca84:	40005000 	.word	0x40005000

0800ca88 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ca8c:	4b11      	ldr	r3, [pc, #68]	@ (800cad4 <MX_USART1_UART_Init+0x4c>)
 800ca8e:	4a12      	ldr	r2, [pc, #72]	@ (800cad8 <MX_USART1_UART_Init+0x50>)
 800ca90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800ca92:	4b10      	ldr	r3, [pc, #64]	@ (800cad4 <MX_USART1_UART_Init+0x4c>)
 800ca94:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800ca98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ca9a:	4b0e      	ldr	r3, [pc, #56]	@ (800cad4 <MX_USART1_UART_Init+0x4c>)
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800caa0:	4b0c      	ldr	r3, [pc, #48]	@ (800cad4 <MX_USART1_UART_Init+0x4c>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800caa6:	4b0b      	ldr	r3, [pc, #44]	@ (800cad4 <MX_USART1_UART_Init+0x4c>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800caac:	4b09      	ldr	r3, [pc, #36]	@ (800cad4 <MX_USART1_UART_Init+0x4c>)
 800caae:	220c      	movs	r2, #12
 800cab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cab2:	4b08      	ldr	r3, [pc, #32]	@ (800cad4 <MX_USART1_UART_Init+0x4c>)
 800cab4:	2200      	movs	r2, #0
 800cab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800cab8:	4b06      	ldr	r3, [pc, #24]	@ (800cad4 <MX_USART1_UART_Init+0x4c>)
 800caba:	2200      	movs	r2, #0
 800cabc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800cabe:	4805      	ldr	r0, [pc, #20]	@ (800cad4 <MX_USART1_UART_Init+0x4c>)
 800cac0:	f003 fcc0 	bl	8010444 <HAL_UART_Init>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d001      	beq.n	800cace <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800caca:	f7fb f8fb 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800cace:	bf00      	nop
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	2000096c 	.word	0x2000096c
 800cad8:	40011000 	.word	0x40011000

0800cadc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800cae0:	4b11      	ldr	r3, [pc, #68]	@ (800cb28 <MX_USART2_UART_Init+0x4c>)
 800cae2:	4a12      	ldr	r2, [pc, #72]	@ (800cb2c <MX_USART2_UART_Init+0x50>)
 800cae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800cae6:	4b10      	ldr	r3, [pc, #64]	@ (800cb28 <MX_USART2_UART_Init+0x4c>)
 800cae8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800caec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800caee:	4b0e      	ldr	r3, [pc, #56]	@ (800cb28 <MX_USART2_UART_Init+0x4c>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800caf4:	4b0c      	ldr	r3, [pc, #48]	@ (800cb28 <MX_USART2_UART_Init+0x4c>)
 800caf6:	2200      	movs	r2, #0
 800caf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800cafa:	4b0b      	ldr	r3, [pc, #44]	@ (800cb28 <MX_USART2_UART_Init+0x4c>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800cb00:	4b09      	ldr	r3, [pc, #36]	@ (800cb28 <MX_USART2_UART_Init+0x4c>)
 800cb02:	220c      	movs	r2, #12
 800cb04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cb06:	4b08      	ldr	r3, [pc, #32]	@ (800cb28 <MX_USART2_UART_Init+0x4c>)
 800cb08:	2200      	movs	r2, #0
 800cb0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800cb0c:	4b06      	ldr	r3, [pc, #24]	@ (800cb28 <MX_USART2_UART_Init+0x4c>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800cb12:	4805      	ldr	r0, [pc, #20]	@ (800cb28 <MX_USART2_UART_Init+0x4c>)
 800cb14:	f003 fc96 	bl	8010444 <HAL_UART_Init>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d001      	beq.n	800cb22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800cb1e:	f7fb f8d1 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800cb22:	bf00      	nop
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	200009b4 	.word	0x200009b4
 800cb2c:	40004400 	.word	0x40004400

0800cb30 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800cb34:	4b11      	ldr	r3, [pc, #68]	@ (800cb7c <MX_USART3_UART_Init+0x4c>)
 800cb36:	4a12      	ldr	r2, [pc, #72]	@ (800cb80 <MX_USART3_UART_Init+0x50>)
 800cb38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800cb3a:	4b10      	ldr	r3, [pc, #64]	@ (800cb7c <MX_USART3_UART_Init+0x4c>)
 800cb3c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800cb40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800cb42:	4b0e      	ldr	r3, [pc, #56]	@ (800cb7c <MX_USART3_UART_Init+0x4c>)
 800cb44:	2200      	movs	r2, #0
 800cb46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800cb48:	4b0c      	ldr	r3, [pc, #48]	@ (800cb7c <MX_USART3_UART_Init+0x4c>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800cb4e:	4b0b      	ldr	r3, [pc, #44]	@ (800cb7c <MX_USART3_UART_Init+0x4c>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800cb54:	4b09      	ldr	r3, [pc, #36]	@ (800cb7c <MX_USART3_UART_Init+0x4c>)
 800cb56:	220c      	movs	r2, #12
 800cb58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cb5a:	4b08      	ldr	r3, [pc, #32]	@ (800cb7c <MX_USART3_UART_Init+0x4c>)
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800cb60:	4b06      	ldr	r3, [pc, #24]	@ (800cb7c <MX_USART3_UART_Init+0x4c>)
 800cb62:	2200      	movs	r2, #0
 800cb64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800cb66:	4805      	ldr	r0, [pc, #20]	@ (800cb7c <MX_USART3_UART_Init+0x4c>)
 800cb68:	f003 fc6c 	bl	8010444 <HAL_UART_Init>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d001      	beq.n	800cb76 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800cb72:	f7fb f8a7 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800cb76:	bf00      	nop
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	200009fc 	.word	0x200009fc
 800cb80:	40004800 	.word	0x40004800

0800cb84 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800cb88:	4b11      	ldr	r3, [pc, #68]	@ (800cbd0 <MX_USART6_UART_Init+0x4c>)
 800cb8a:	4a12      	ldr	r2, [pc, #72]	@ (800cbd4 <MX_USART6_UART_Init+0x50>)
 800cb8c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800cb8e:	4b10      	ldr	r3, [pc, #64]	@ (800cbd0 <MX_USART6_UART_Init+0x4c>)
 800cb90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800cb94:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800cb96:	4b0e      	ldr	r3, [pc, #56]	@ (800cbd0 <MX_USART6_UART_Init+0x4c>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800cb9c:	4b0c      	ldr	r3, [pc, #48]	@ (800cbd0 <MX_USART6_UART_Init+0x4c>)
 800cb9e:	2200      	movs	r2, #0
 800cba0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800cba2:	4b0b      	ldr	r3, [pc, #44]	@ (800cbd0 <MX_USART6_UART_Init+0x4c>)
 800cba4:	2200      	movs	r2, #0
 800cba6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800cba8:	4b09      	ldr	r3, [pc, #36]	@ (800cbd0 <MX_USART6_UART_Init+0x4c>)
 800cbaa:	220c      	movs	r2, #12
 800cbac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cbae:	4b08      	ldr	r3, [pc, #32]	@ (800cbd0 <MX_USART6_UART_Init+0x4c>)
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800cbb4:	4b06      	ldr	r3, [pc, #24]	@ (800cbd0 <MX_USART6_UART_Init+0x4c>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800cbba:	4805      	ldr	r0, [pc, #20]	@ (800cbd0 <MX_USART6_UART_Init+0x4c>)
 800cbbc:	f003 fc42 	bl	8010444 <HAL_UART_Init>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d001      	beq.n	800cbca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800cbc6:	f7fb f87d 	bl	8007cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800cbca:	bf00      	nop
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	20000a44 	.word	0x20000a44
 800cbd4:	40011400 	.word	0x40011400

0800cbd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b094      	sub	sp, #80	@ 0x50
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cbe0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	601a      	str	r2, [r3, #0]
 800cbe8:	605a      	str	r2, [r3, #4]
 800cbea:	609a      	str	r2, [r3, #8]
 800cbec:	60da      	str	r2, [r3, #12]
 800cbee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4aa0      	ldr	r2, [pc, #640]	@ (800ce78 <HAL_UART_MspInit+0x2a0>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d135      	bne.n	800cc66 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbfe:	4b9f      	ldr	r3, [pc, #636]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cc00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc02:	4a9e      	ldr	r2, [pc, #632]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cc04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cc08:	6413      	str	r3, [r2, #64]	@ 0x40
 800cc0a:	4b9c      	ldr	r3, [pc, #624]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cc0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cc12:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc16:	2300      	movs	r3, #0
 800cc18:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc1a:	4b98      	ldr	r3, [pc, #608]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cc1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc1e:	4a97      	ldr	r2, [pc, #604]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cc20:	f043 0304 	orr.w	r3, r3, #4
 800cc24:	6313      	str	r3, [r2, #48]	@ 0x30
 800cc26:	4b95      	ldr	r3, [pc, #596]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cc28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc2a:	f003 0304 	and.w	r3, r3, #4
 800cc2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_1_Pin|RX_1_Pin;
 800cc32:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800cc36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc38:	2302      	movs	r3, #2
 800cc3a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc40:	2303      	movs	r3, #3
 800cc42:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800cc44:	2308      	movs	r3, #8
 800cc46:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc48:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	488c      	ldr	r0, [pc, #560]	@ (800ce80 <HAL_UART_MspInit+0x2a8>)
 800cc50:	f000 fbc4 	bl	800d3dc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 800cc54:	2200      	movs	r2, #0
 800cc56:	2102      	movs	r1, #2
 800cc58:	2034      	movs	r0, #52	@ 0x34
 800cc5a:	f000 faf6 	bl	800d24a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800cc5e:	2034      	movs	r0, #52	@ 0x34
 800cc60:	f000 fb0f 	bl	800d282 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800cc64:	e14c      	b.n	800cf00 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART5)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a86      	ldr	r2, [pc, #536]	@ (800ce84 <HAL_UART_MspInit+0x2ac>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d153      	bne.n	800cd18 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 800cc70:	2300      	movs	r3, #0
 800cc72:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc74:	4b81      	ldr	r3, [pc, #516]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cc76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc78:	4a80      	ldr	r2, [pc, #512]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cc7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc7e:	6413      	str	r3, [r2, #64]	@ 0x40
 800cc80:	4b7e      	ldr	r3, [pc, #504]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cc82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cc88:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc90:	4b7a      	ldr	r3, [pc, #488]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cc92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc94:	4a79      	ldr	r2, [pc, #484]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cc96:	f043 0304 	orr.w	r3, r3, #4
 800cc9a:	6313      	str	r3, [r2, #48]	@ 0x30
 800cc9c:	4b77      	ldr	r3, [pc, #476]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cc9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cca0:	f003 0304 	and.w	r3, r3, #4
 800cca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cca8:	2300      	movs	r3, #0
 800ccaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ccac:	4b73      	ldr	r3, [pc, #460]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800ccae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccb0:	4a72      	ldr	r2, [pc, #456]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800ccb2:	f043 0308 	orr.w	r3, r3, #8
 800ccb6:	6313      	str	r3, [r2, #48]	@ 0x30
 800ccb8:	4b70      	ldr	r3, [pc, #448]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800ccba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccbc:	f003 0308 	and.w	r3, r3, #8
 800ccc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ccc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800ccc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ccc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccca:	2302      	movs	r3, #2
 800cccc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800ccd6:	2308      	movs	r3, #8
 800ccd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ccda:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ccde:	4619      	mov	r1, r3
 800cce0:	4867      	ldr	r0, [pc, #412]	@ (800ce80 <HAL_UART_MspInit+0x2a8>)
 800cce2:	f000 fb7b 	bl	800d3dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cce6:	2304      	movs	r3, #4
 800cce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccea:	2302      	movs	r3, #2
 800ccec:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800ccf6:	2308      	movs	r3, #8
 800ccf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ccfa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ccfe:	4619      	mov	r1, r3
 800cd00:	4861      	ldr	r0, [pc, #388]	@ (800ce88 <HAL_UART_MspInit+0x2b0>)
 800cd02:	f000 fb6b 	bl	800d3dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 4, 0);
 800cd06:	2200      	movs	r2, #0
 800cd08:	2104      	movs	r1, #4
 800cd0a:	2035      	movs	r0, #53	@ 0x35
 800cd0c:	f000 fa9d 	bl	800d24a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800cd10:	2035      	movs	r0, #53	@ 0x35
 800cd12:	f000 fab6 	bl	800d282 <HAL_NVIC_EnableIRQ>
}
 800cd16:	e0f3      	b.n	800cf00 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART1)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a5b      	ldr	r2, [pc, #364]	@ (800ce8c <HAL_UART_MspInit+0x2b4>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d135      	bne.n	800cd8e <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 800cd22:	2300      	movs	r3, #0
 800cd24:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd26:	4b55      	ldr	r3, [pc, #340]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cd28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd2a:	4a54      	ldr	r2, [pc, #336]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cd2c:	f043 0310 	orr.w	r3, r3, #16
 800cd30:	6453      	str	r3, [r2, #68]	@ 0x44
 800cd32:	4b52      	ldr	r3, [pc, #328]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cd34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd36:	f003 0310 	and.w	r3, r3, #16
 800cd3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd3e:	2300      	movs	r3, #0
 800cd40:	623b      	str	r3, [r7, #32]
 800cd42:	4b4e      	ldr	r3, [pc, #312]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cd44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd46:	4a4d      	ldr	r2, [pc, #308]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cd48:	f043 0301 	orr.w	r3, r3, #1
 800cd4c:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd4e:	4b4b      	ldr	r3, [pc, #300]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cd50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd52:	f003 0301 	and.w	r3, r3, #1
 800cd56:	623b      	str	r3, [r7, #32]
 800cd58:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800cd5a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800cd5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd60:	2302      	movs	r3, #2
 800cd62:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd64:	2300      	movs	r3, #0
 800cd66:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd68:	2303      	movs	r3, #3
 800cd6a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cd6c:	2307      	movs	r3, #7
 800cd6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd70:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cd74:	4619      	mov	r1, r3
 800cd76:	4846      	ldr	r0, [pc, #280]	@ (800ce90 <HAL_UART_MspInit+0x2b8>)
 800cd78:	f000 fb30 	bl	800d3dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	2105      	movs	r1, #5
 800cd80:	2025      	movs	r0, #37	@ 0x25
 800cd82:	f000 fa62 	bl	800d24a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800cd86:	2025      	movs	r0, #37	@ 0x25
 800cd88:	f000 fa7b 	bl	800d282 <HAL_NVIC_EnableIRQ>
}
 800cd8c:	e0b8      	b.n	800cf00 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a40      	ldr	r2, [pc, #256]	@ (800ce94 <HAL_UART_MspInit+0x2bc>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d134      	bne.n	800ce02 <HAL_UART_MspInit+0x22a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800cd98:	2300      	movs	r3, #0
 800cd9a:	61fb      	str	r3, [r7, #28]
 800cd9c:	4b37      	ldr	r3, [pc, #220]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cd9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cda0:	4a36      	ldr	r2, [pc, #216]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cda2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cda6:	6413      	str	r3, [r2, #64]	@ 0x40
 800cda8:	4b34      	ldr	r3, [pc, #208]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cdaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdb0:	61fb      	str	r3, [r7, #28]
 800cdb2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	61bb      	str	r3, [r7, #24]
 800cdb8:	4b30      	ldr	r3, [pc, #192]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cdba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdbc:	4a2f      	ldr	r2, [pc, #188]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cdbe:	f043 0308 	orr.w	r3, r3, #8
 800cdc2:	6313      	str	r3, [r2, #48]	@ 0x30
 800cdc4:	4b2d      	ldr	r3, [pc, #180]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800cdc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdc8:	f003 0308 	and.w	r3, r3, #8
 800cdcc:	61bb      	str	r3, [r7, #24]
 800cdce:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800cdd0:	2360      	movs	r3, #96	@ 0x60
 800cdd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cddc:	2303      	movs	r3, #3
 800cdde:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800cde0:	2307      	movs	r3, #7
 800cde2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cde4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cde8:	4619      	mov	r1, r3
 800cdea:	4827      	ldr	r0, [pc, #156]	@ (800ce88 <HAL_UART_MspInit+0x2b0>)
 800cdec:	f000 faf6 	bl	800d3dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	2103      	movs	r1, #3
 800cdf4:	2026      	movs	r0, #38	@ 0x26
 800cdf6:	f000 fa28 	bl	800d24a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800cdfa:	2026      	movs	r0, #38	@ 0x26
 800cdfc:	f000 fa41 	bl	800d282 <HAL_NVIC_EnableIRQ>
}
 800ce00:	e07e      	b.n	800cf00 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART3)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4a24      	ldr	r2, [pc, #144]	@ (800ce98 <HAL_UART_MspInit+0x2c0>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d147      	bne.n	800ce9c <HAL_UART_MspInit+0x2c4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	617b      	str	r3, [r7, #20]
 800ce10:	4b1a      	ldr	r3, [pc, #104]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800ce12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce14:	4a19      	ldr	r2, [pc, #100]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800ce16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ce1a:	6413      	str	r3, [r2, #64]	@ 0x40
 800ce1c:	4b17      	ldr	r3, [pc, #92]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800ce1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ce24:	617b      	str	r3, [r7, #20]
 800ce26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ce28:	2300      	movs	r3, #0
 800ce2a:	613b      	str	r3, [r7, #16]
 800ce2c:	4b13      	ldr	r3, [pc, #76]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800ce2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce30:	4a12      	ldr	r2, [pc, #72]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800ce32:	f043 0308 	orr.w	r3, r3, #8
 800ce36:	6313      	str	r3, [r2, #48]	@ 0x30
 800ce38:	4b10      	ldr	r3, [pc, #64]	@ (800ce7c <HAL_UART_MspInit+0x2a4>)
 800ce3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce3c:	f003 0308 	and.w	r3, r3, #8
 800ce40:	613b      	str	r3, [r7, #16]
 800ce42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ce44:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ce48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce4a:	2302      	movs	r3, #2
 800ce4c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce52:	2303      	movs	r3, #3
 800ce54:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ce56:	2307      	movs	r3, #7
 800ce58:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ce5a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ce5e:	4619      	mov	r1, r3
 800ce60:	4809      	ldr	r0, [pc, #36]	@ (800ce88 <HAL_UART_MspInit+0x2b0>)
 800ce62:	f000 fabb 	bl	800d3dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800ce66:	2200      	movs	r2, #0
 800ce68:	2101      	movs	r1, #1
 800ce6a:	2027      	movs	r0, #39	@ 0x27
 800ce6c:	f000 f9ed 	bl	800d24a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ce70:	2027      	movs	r0, #39	@ 0x27
 800ce72:	f000 fa06 	bl	800d282 <HAL_NVIC_EnableIRQ>
}
 800ce76:	e043      	b.n	800cf00 <HAL_UART_MspInit+0x328>
 800ce78:	40004c00 	.word	0x40004c00
 800ce7c:	40023800 	.word	0x40023800
 800ce80:	40020800 	.word	0x40020800
 800ce84:	40005000 	.word	0x40005000
 800ce88:	40020c00 	.word	0x40020c00
 800ce8c:	40011000 	.word	0x40011000
 800ce90:	40020000 	.word	0x40020000
 800ce94:	40004400 	.word	0x40004400
 800ce98:	40004800 	.word	0x40004800
  else if(uartHandle->Instance==USART6)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a19      	ldr	r2, [pc, #100]	@ (800cf08 <HAL_UART_MspInit+0x330>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d12c      	bne.n	800cf00 <HAL_UART_MspInit+0x328>
    __HAL_RCC_USART6_CLK_ENABLE();
 800cea6:	2300      	movs	r3, #0
 800cea8:	60fb      	str	r3, [r7, #12]
 800ceaa:	4b18      	ldr	r3, [pc, #96]	@ (800cf0c <HAL_UART_MspInit+0x334>)
 800ceac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceae:	4a17      	ldr	r2, [pc, #92]	@ (800cf0c <HAL_UART_MspInit+0x334>)
 800ceb0:	f043 0320 	orr.w	r3, r3, #32
 800ceb4:	6453      	str	r3, [r2, #68]	@ 0x44
 800ceb6:	4b15      	ldr	r3, [pc, #84]	@ (800cf0c <HAL_UART_MspInit+0x334>)
 800ceb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceba:	f003 0320 	and.w	r3, r3, #32
 800cebe:	60fb      	str	r3, [r7, #12]
 800cec0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800cec2:	2300      	movs	r3, #0
 800cec4:	60bb      	str	r3, [r7, #8]
 800cec6:	4b11      	ldr	r3, [pc, #68]	@ (800cf0c <HAL_UART_MspInit+0x334>)
 800cec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ceca:	4a10      	ldr	r2, [pc, #64]	@ (800cf0c <HAL_UART_MspInit+0x334>)
 800cecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ced0:	6313      	str	r3, [r2, #48]	@ 0x30
 800ced2:	4b0e      	ldr	r3, [pc, #56]	@ (800cf0c <HAL_UART_MspInit+0x334>)
 800ced4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ced6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ceda:	60bb      	str	r3, [r7, #8]
 800cedc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800cede:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 800cee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cee4:	2302      	movs	r3, #2
 800cee6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cee8:	2300      	movs	r3, #0
 800ceea:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ceec:	2303      	movs	r3, #3
 800ceee:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800cef0:	2308      	movs	r3, #8
 800cef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cef4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cef8:	4619      	mov	r1, r3
 800cefa:	4805      	ldr	r0, [pc, #20]	@ (800cf10 <HAL_UART_MspInit+0x338>)
 800cefc:	f000 fa6e 	bl	800d3dc <HAL_GPIO_Init>
}
 800cf00:	bf00      	nop
 800cf02:	3750      	adds	r7, #80	@ 0x50
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	40011400 	.word	0x40011400
 800cf0c:	40023800 	.word	0x40023800
 800cf10:	40021800 	.word	0x40021800

0800cf14 <Reset_Handler>:
 800cf14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800cf4c <LoopFillZerobss+0xe>
 800cf18:	f7fe fc3c 	bl	800b794 <SystemInit>
 800cf1c:	480c      	ldr	r0, [pc, #48]	@ (800cf50 <LoopFillZerobss+0x12>)
 800cf1e:	490d      	ldr	r1, [pc, #52]	@ (800cf54 <LoopFillZerobss+0x16>)
 800cf20:	4a0d      	ldr	r2, [pc, #52]	@ (800cf58 <LoopFillZerobss+0x1a>)
 800cf22:	2300      	movs	r3, #0
 800cf24:	e002      	b.n	800cf2c <LoopCopyDataInit>

0800cf26 <CopyDataInit>:
 800cf26:	58d4      	ldr	r4, [r2, r3]
 800cf28:	50c4      	str	r4, [r0, r3]
 800cf2a:	3304      	adds	r3, #4

0800cf2c <LoopCopyDataInit>:
 800cf2c:	18c4      	adds	r4, r0, r3
 800cf2e:	428c      	cmp	r4, r1
 800cf30:	d3f9      	bcc.n	800cf26 <CopyDataInit>
 800cf32:	4a0a      	ldr	r2, [pc, #40]	@ (800cf5c <LoopFillZerobss+0x1e>)
 800cf34:	4c0a      	ldr	r4, [pc, #40]	@ (800cf60 <LoopFillZerobss+0x22>)
 800cf36:	2300      	movs	r3, #0
 800cf38:	e001      	b.n	800cf3e <LoopFillZerobss>

0800cf3a <FillZerobss>:
 800cf3a:	6013      	str	r3, [r2, #0]
 800cf3c:	3204      	adds	r2, #4

0800cf3e <LoopFillZerobss>:
 800cf3e:	42a2      	cmp	r2, r4
 800cf40:	d3fb      	bcc.n	800cf3a <FillZerobss>
 800cf42:	f005 fa81 	bl	8012448 <__libc_init_array>
 800cf46:	f7f8 fdf7 	bl	8005b38 <main>
 800cf4a:	4770      	bx	lr
 800cf4c:	20020000 	.word	0x20020000
 800cf50:	20000000 	.word	0x20000000
 800cf54:	200002ac 	.word	0x200002ac
 800cf58:	08016398 	.word	0x08016398
 800cf5c:	200002ac 	.word	0x200002ac
 800cf60:	20000bdc 	.word	0x20000bdc

0800cf64 <ADC_IRQHandler>:
 800cf64:	e7fe      	b.n	800cf64 <ADC_IRQHandler>
	...

0800cf68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cf6c:	4b0e      	ldr	r3, [pc, #56]	@ (800cfa8 <HAL_Init+0x40>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a0d      	ldr	r2, [pc, #52]	@ (800cfa8 <HAL_Init+0x40>)
 800cf72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cf76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800cf78:	4b0b      	ldr	r3, [pc, #44]	@ (800cfa8 <HAL_Init+0x40>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a0a      	ldr	r2, [pc, #40]	@ (800cfa8 <HAL_Init+0x40>)
 800cf7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cf82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800cf84:	4b08      	ldr	r3, [pc, #32]	@ (800cfa8 <HAL_Init+0x40>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a07      	ldr	r2, [pc, #28]	@ (800cfa8 <HAL_Init+0x40>)
 800cf8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cf8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cf90:	2003      	movs	r0, #3
 800cf92:	f000 f94f 	bl	800d234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800cf96:	200f      	movs	r0, #15
 800cf98:	f000 f808 	bl	800cfac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800cf9c:	f7fe faaa 	bl	800b4f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	40023c00 	.word	0x40023c00

0800cfac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800cfb4:	4b12      	ldr	r3, [pc, #72]	@ (800d000 <HAL_InitTick+0x54>)
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	4b12      	ldr	r3, [pc, #72]	@ (800d004 <HAL_InitTick+0x58>)
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cfc2:	fbb3 f3f1 	udiv	r3, r3, r1
 800cfc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f000 f967 	bl	800d29e <HAL_SYSTICK_Config>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d001      	beq.n	800cfda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e00e      	b.n	800cff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2b0f      	cmp	r3, #15
 800cfde:	d80a      	bhi.n	800cff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	6879      	ldr	r1, [r7, #4]
 800cfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe8:	f000 f92f 	bl	800d24a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800cfec:	4a06      	ldr	r2, [pc, #24]	@ (800d008 <HAL_InitTick+0x5c>)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800cff2:	2300      	movs	r3, #0
 800cff4:	e000      	b.n	800cff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800cff6:	2301      	movs	r3, #1
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	200000c8 	.word	0x200000c8
 800d004:	200000e0 	.word	0x200000e0
 800d008:	200000dc 	.word	0x200000dc

0800d00c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d00c:	b480      	push	{r7}
 800d00e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d010:	4b06      	ldr	r3, [pc, #24]	@ (800d02c <HAL_IncTick+0x20>)
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	461a      	mov	r2, r3
 800d016:	4b06      	ldr	r3, [pc, #24]	@ (800d030 <HAL_IncTick+0x24>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4413      	add	r3, r2
 800d01c:	4a04      	ldr	r2, [pc, #16]	@ (800d030 <HAL_IncTick+0x24>)
 800d01e:	6013      	str	r3, [r2, #0]
}
 800d020:	bf00      	nop
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	200000e0 	.word	0x200000e0
 800d030:	20000a8c 	.word	0x20000a8c

0800d034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d034:	b480      	push	{r7}
 800d036:	af00      	add	r7, sp, #0
  return uwTick;
 800d038:	4b03      	ldr	r3, [pc, #12]	@ (800d048 <HAL_GetTick+0x14>)
 800d03a:	681b      	ldr	r3, [r3, #0]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	20000a8c 	.word	0x20000a8c

0800d04c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d054:	f7ff ffee 	bl	800d034 <HAL_GetTick>
 800d058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d064:	d005      	beq.n	800d072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d066:	4b0a      	ldr	r3, [pc, #40]	@ (800d090 <HAL_Delay+0x44>)
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	461a      	mov	r2, r3
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	4413      	add	r3, r2
 800d070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800d072:	bf00      	nop
 800d074:	f7ff ffde 	bl	800d034 <HAL_GetTick>
 800d078:	4602      	mov	r2, r0
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	1ad3      	subs	r3, r2, r3
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	429a      	cmp	r2, r3
 800d082:	d8f7      	bhi.n	800d074 <HAL_Delay+0x28>
  {
  }
}
 800d084:	bf00      	nop
 800d086:	bf00      	nop
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	200000e0 	.word	0x200000e0

0800d094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d094:	b480      	push	{r7}
 800d096:	b085      	sub	sp, #20
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f003 0307 	and.w	r3, r3, #7
 800d0a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800d0d8 <__NVIC_SetPriorityGrouping+0x44>)
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800d0b0:	4013      	ands	r3, r2
 800d0b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d0bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800d0c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d0c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d0c6:	4a04      	ldr	r2, [pc, #16]	@ (800d0d8 <__NVIC_SetPriorityGrouping+0x44>)
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	60d3      	str	r3, [r2, #12]
}
 800d0cc:	bf00      	nop
 800d0ce:	3714      	adds	r7, #20
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr
 800d0d8:	e000ed00 	.word	0xe000ed00

0800d0dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d0e0:	4b04      	ldr	r3, [pc, #16]	@ (800d0f4 <__NVIC_GetPriorityGrouping+0x18>)
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	0a1b      	lsrs	r3, r3, #8
 800d0e6:	f003 0307 	and.w	r3, r3, #7
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr
 800d0f4:	e000ed00 	.word	0xe000ed00

0800d0f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	4603      	mov	r3, r0
 800d100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d106:	2b00      	cmp	r3, #0
 800d108:	db0b      	blt.n	800d122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d10a:	79fb      	ldrb	r3, [r7, #7]
 800d10c:	f003 021f 	and.w	r2, r3, #31
 800d110:	4907      	ldr	r1, [pc, #28]	@ (800d130 <__NVIC_EnableIRQ+0x38>)
 800d112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d116:	095b      	lsrs	r3, r3, #5
 800d118:	2001      	movs	r0, #1
 800d11a:	fa00 f202 	lsl.w	r2, r0, r2
 800d11e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800d122:	bf00      	nop
 800d124:	370c      	adds	r7, #12
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	e000e100 	.word	0xe000e100

0800d134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	4603      	mov	r3, r0
 800d13c:	6039      	str	r1, [r7, #0]
 800d13e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d144:	2b00      	cmp	r3, #0
 800d146:	db0a      	blt.n	800d15e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	490c      	ldr	r1, [pc, #48]	@ (800d180 <__NVIC_SetPriority+0x4c>)
 800d14e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d152:	0112      	lsls	r2, r2, #4
 800d154:	b2d2      	uxtb	r2, r2
 800d156:	440b      	add	r3, r1
 800d158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d15c:	e00a      	b.n	800d174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	b2da      	uxtb	r2, r3
 800d162:	4908      	ldr	r1, [pc, #32]	@ (800d184 <__NVIC_SetPriority+0x50>)
 800d164:	79fb      	ldrb	r3, [r7, #7]
 800d166:	f003 030f 	and.w	r3, r3, #15
 800d16a:	3b04      	subs	r3, #4
 800d16c:	0112      	lsls	r2, r2, #4
 800d16e:	b2d2      	uxtb	r2, r2
 800d170:	440b      	add	r3, r1
 800d172:	761a      	strb	r2, [r3, #24]
}
 800d174:	bf00      	nop
 800d176:	370c      	adds	r7, #12
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr
 800d180:	e000e100 	.word	0xe000e100
 800d184:	e000ed00 	.word	0xe000ed00

0800d188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d188:	b480      	push	{r7}
 800d18a:	b089      	sub	sp, #36	@ 0x24
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	60b9      	str	r1, [r7, #8]
 800d192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f003 0307 	and.w	r3, r3, #7
 800d19a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	f1c3 0307 	rsb	r3, r3, #7
 800d1a2:	2b04      	cmp	r3, #4
 800d1a4:	bf28      	it	cs
 800d1a6:	2304      	movcs	r3, #4
 800d1a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d1aa:	69fb      	ldr	r3, [r7, #28]
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	2b06      	cmp	r3, #6
 800d1b0:	d902      	bls.n	800d1b8 <NVIC_EncodePriority+0x30>
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	3b03      	subs	r3, #3
 800d1b6:	e000      	b.n	800d1ba <NVIC_EncodePriority+0x32>
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d1c0:	69bb      	ldr	r3, [r7, #24]
 800d1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d1c6:	43da      	mvns	r2, r3
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	401a      	ands	r2, r3
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d1d0:	f04f 31ff 	mov.w	r1, #4294967295
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	fa01 f303 	lsl.w	r3, r1, r3
 800d1da:	43d9      	mvns	r1, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d1e0:	4313      	orrs	r3, r2
         );
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3724      	adds	r7, #36	@ 0x24
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr
	...

0800d1f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	3b01      	subs	r3, #1
 800d1fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d200:	d301      	bcc.n	800d206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d202:	2301      	movs	r3, #1
 800d204:	e00f      	b.n	800d226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d206:	4a0a      	ldr	r2, [pc, #40]	@ (800d230 <SysTick_Config+0x40>)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	3b01      	subs	r3, #1
 800d20c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d20e:	210f      	movs	r1, #15
 800d210:	f04f 30ff 	mov.w	r0, #4294967295
 800d214:	f7ff ff8e 	bl	800d134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d218:	4b05      	ldr	r3, [pc, #20]	@ (800d230 <SysTick_Config+0x40>)
 800d21a:	2200      	movs	r2, #0
 800d21c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d21e:	4b04      	ldr	r3, [pc, #16]	@ (800d230 <SysTick_Config+0x40>)
 800d220:	2207      	movs	r2, #7
 800d222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d224:	2300      	movs	r3, #0
}
 800d226:	4618      	mov	r0, r3
 800d228:	3708      	adds	r7, #8
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	e000e010 	.word	0xe000e010

0800d234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f7ff ff29 	bl	800d094 <__NVIC_SetPriorityGrouping>
}
 800d242:	bf00      	nop
 800d244:	3708      	adds	r7, #8
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b086      	sub	sp, #24
 800d24e:	af00      	add	r7, sp, #0
 800d250:	4603      	mov	r3, r0
 800d252:	60b9      	str	r1, [r7, #8]
 800d254:	607a      	str	r2, [r7, #4]
 800d256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d258:	2300      	movs	r3, #0
 800d25a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d25c:	f7ff ff3e 	bl	800d0dc <__NVIC_GetPriorityGrouping>
 800d260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	68b9      	ldr	r1, [r7, #8]
 800d266:	6978      	ldr	r0, [r7, #20]
 800d268:	f7ff ff8e 	bl	800d188 <NVIC_EncodePriority>
 800d26c:	4602      	mov	r2, r0
 800d26e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d272:	4611      	mov	r1, r2
 800d274:	4618      	mov	r0, r3
 800d276:	f7ff ff5d 	bl	800d134 <__NVIC_SetPriority>
}
 800d27a:	bf00      	nop
 800d27c:	3718      	adds	r7, #24
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b082      	sub	sp, #8
 800d286:	af00      	add	r7, sp, #0
 800d288:	4603      	mov	r3, r0
 800d28a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d28c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d290:	4618      	mov	r0, r3
 800d292:	f7ff ff31 	bl	800d0f8 <__NVIC_EnableIRQ>
}
 800d296:	bf00      	nop
 800d298:	3708      	adds	r7, #8
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b082      	sub	sp, #8
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f7ff ffa2 	bl	800d1f0 <SysTick_Config>
 800d2ac:	4603      	mov	r3, r0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b084      	sub	sp, #16
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800d2c4:	f7ff feb6 	bl	800d034 <HAL_GetTick>
 800d2c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	2b02      	cmp	r3, #2
 800d2d4:	d008      	beq.n	800d2e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2280      	movs	r2, #128	@ 0x80
 800d2da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e052      	b.n	800d38e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	681a      	ldr	r2, [r3, #0]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f022 0216 	bic.w	r2, r2, #22
 800d2f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	695a      	ldr	r2, [r3, #20]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d306:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d103      	bne.n	800d318 <HAL_DMA_Abort+0x62>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d314:	2b00      	cmp	r3, #0
 800d316:	d007      	beq.n	800d328 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	681a      	ldr	r2, [r3, #0]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f022 0208 	bic.w	r2, r2, #8
 800d326:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f022 0201 	bic.w	r2, r2, #1
 800d336:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d338:	e013      	b.n	800d362 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d33a:	f7ff fe7b 	bl	800d034 <HAL_GetTick>
 800d33e:	4602      	mov	r2, r0
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	2b05      	cmp	r3, #5
 800d346:	d90c      	bls.n	800d362 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2220      	movs	r2, #32
 800d34c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2203      	movs	r2, #3
 800d352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2200      	movs	r2, #0
 800d35a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800d35e:	2303      	movs	r3, #3
 800d360:	e015      	b.n	800d38e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f003 0301 	and.w	r3, r3, #1
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d1e4      	bne.n	800d33a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d374:	223f      	movs	r2, #63	@ 0x3f
 800d376:	409a      	lsls	r2, r3
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800d38c:	2300      	movs	r3, #0
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3710      	adds	r7, #16
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}

0800d396 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d396:	b480      	push	{r7}
 800d398:	b083      	sub	sp, #12
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	2b02      	cmp	r3, #2
 800d3a8:	d004      	beq.n	800d3b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2280      	movs	r2, #128	@ 0x80
 800d3ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e00c      	b.n	800d3ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2205      	movs	r2, #5
 800d3b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f022 0201 	bic.w	r2, r2, #1
 800d3ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d3cc:	2300      	movs	r3, #0
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	370c      	adds	r7, #12
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr
	...

0800d3dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b089      	sub	sp, #36	@ 0x24
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	61fb      	str	r3, [r7, #28]
 800d3f6:	e16b      	b.n	800d6d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d400:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	697a      	ldr	r2, [r7, #20]
 800d408:	4013      	ands	r3, r2
 800d40a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d40c:	693a      	ldr	r2, [r7, #16]
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	429a      	cmp	r2, r3
 800d412:	f040 815a 	bne.w	800d6ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	685b      	ldr	r3, [r3, #4]
 800d41a:	f003 0303 	and.w	r3, r3, #3
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d005      	beq.n	800d42e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d42a:	2b02      	cmp	r3, #2
 800d42c:	d130      	bne.n	800d490 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	005b      	lsls	r3, r3, #1
 800d438:	2203      	movs	r2, #3
 800d43a:	fa02 f303 	lsl.w	r3, r2, r3
 800d43e:	43db      	mvns	r3, r3
 800d440:	69ba      	ldr	r2, [r7, #24]
 800d442:	4013      	ands	r3, r2
 800d444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	68da      	ldr	r2, [r3, #12]
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	005b      	lsls	r3, r3, #1
 800d44e:	fa02 f303 	lsl.w	r3, r2, r3
 800d452:	69ba      	ldr	r2, [r7, #24]
 800d454:	4313      	orrs	r3, r2
 800d456:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	69ba      	ldr	r2, [r7, #24]
 800d45c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d464:	2201      	movs	r2, #1
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	fa02 f303 	lsl.w	r3, r2, r3
 800d46c:	43db      	mvns	r3, r3
 800d46e:	69ba      	ldr	r2, [r7, #24]
 800d470:	4013      	ands	r3, r2
 800d472:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	091b      	lsrs	r3, r3, #4
 800d47a:	f003 0201 	and.w	r2, r3, #1
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	fa02 f303 	lsl.w	r3, r2, r3
 800d484:	69ba      	ldr	r2, [r7, #24]
 800d486:	4313      	orrs	r3, r2
 800d488:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	69ba      	ldr	r2, [r7, #24]
 800d48e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	f003 0303 	and.w	r3, r3, #3
 800d498:	2b03      	cmp	r3, #3
 800d49a:	d017      	beq.n	800d4cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	2203      	movs	r2, #3
 800d4a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4ac:	43db      	mvns	r3, r3
 800d4ae:	69ba      	ldr	r2, [r7, #24]
 800d4b0:	4013      	ands	r3, r2
 800d4b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	689a      	ldr	r2, [r3, #8]
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	005b      	lsls	r3, r3, #1
 800d4bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d4c0:	69ba      	ldr	r2, [r7, #24]
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	69ba      	ldr	r2, [r7, #24]
 800d4ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	f003 0303 	and.w	r3, r3, #3
 800d4d4:	2b02      	cmp	r3, #2
 800d4d6:	d123      	bne.n	800d520 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	08da      	lsrs	r2, r3, #3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	3208      	adds	r2, #8
 800d4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	f003 0307 	and.w	r3, r3, #7
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	220f      	movs	r2, #15
 800d4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4f4:	43db      	mvns	r3, r3
 800d4f6:	69ba      	ldr	r2, [r7, #24]
 800d4f8:	4013      	ands	r3, r2
 800d4fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	691a      	ldr	r2, [r3, #16]
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	f003 0307 	and.w	r3, r3, #7
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	fa02 f303 	lsl.w	r3, r2, r3
 800d50c:	69ba      	ldr	r2, [r7, #24]
 800d50e:	4313      	orrs	r3, r2
 800d510:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	08da      	lsrs	r2, r3, #3
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	3208      	adds	r2, #8
 800d51a:	69b9      	ldr	r1, [r7, #24]
 800d51c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	005b      	lsls	r3, r3, #1
 800d52a:	2203      	movs	r2, #3
 800d52c:	fa02 f303 	lsl.w	r3, r2, r3
 800d530:	43db      	mvns	r3, r3
 800d532:	69ba      	ldr	r2, [r7, #24]
 800d534:	4013      	ands	r3, r2
 800d536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	f003 0203 	and.w	r2, r3, #3
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	005b      	lsls	r3, r3, #1
 800d544:	fa02 f303 	lsl.w	r3, r2, r3
 800d548:	69ba      	ldr	r2, [r7, #24]
 800d54a:	4313      	orrs	r3, r2
 800d54c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	69ba      	ldr	r2, [r7, #24]
 800d552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	f000 80b4 	beq.w	800d6ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d562:	2300      	movs	r3, #0
 800d564:	60fb      	str	r3, [r7, #12]
 800d566:	4b60      	ldr	r3, [pc, #384]	@ (800d6e8 <HAL_GPIO_Init+0x30c>)
 800d568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d56a:	4a5f      	ldr	r2, [pc, #380]	@ (800d6e8 <HAL_GPIO_Init+0x30c>)
 800d56c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d570:	6453      	str	r3, [r2, #68]	@ 0x44
 800d572:	4b5d      	ldr	r3, [pc, #372]	@ (800d6e8 <HAL_GPIO_Init+0x30c>)
 800d574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d57a:	60fb      	str	r3, [r7, #12]
 800d57c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d57e:	4a5b      	ldr	r2, [pc, #364]	@ (800d6ec <HAL_GPIO_Init+0x310>)
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	089b      	lsrs	r3, r3, #2
 800d584:	3302      	adds	r3, #2
 800d586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d58a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	f003 0303 	and.w	r3, r3, #3
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	220f      	movs	r2, #15
 800d596:	fa02 f303 	lsl.w	r3, r2, r3
 800d59a:	43db      	mvns	r3, r3
 800d59c:	69ba      	ldr	r2, [r7, #24]
 800d59e:	4013      	ands	r3, r2
 800d5a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	4a52      	ldr	r2, [pc, #328]	@ (800d6f0 <HAL_GPIO_Init+0x314>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d02b      	beq.n	800d602 <HAL_GPIO_Init+0x226>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	4a51      	ldr	r2, [pc, #324]	@ (800d6f4 <HAL_GPIO_Init+0x318>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d025      	beq.n	800d5fe <HAL_GPIO_Init+0x222>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	4a50      	ldr	r2, [pc, #320]	@ (800d6f8 <HAL_GPIO_Init+0x31c>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d01f      	beq.n	800d5fa <HAL_GPIO_Init+0x21e>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4a4f      	ldr	r2, [pc, #316]	@ (800d6fc <HAL_GPIO_Init+0x320>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d019      	beq.n	800d5f6 <HAL_GPIO_Init+0x21a>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	4a4e      	ldr	r2, [pc, #312]	@ (800d700 <HAL_GPIO_Init+0x324>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d013      	beq.n	800d5f2 <HAL_GPIO_Init+0x216>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4a4d      	ldr	r2, [pc, #308]	@ (800d704 <HAL_GPIO_Init+0x328>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d00d      	beq.n	800d5ee <HAL_GPIO_Init+0x212>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	4a4c      	ldr	r2, [pc, #304]	@ (800d708 <HAL_GPIO_Init+0x32c>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d007      	beq.n	800d5ea <HAL_GPIO_Init+0x20e>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	4a4b      	ldr	r2, [pc, #300]	@ (800d70c <HAL_GPIO_Init+0x330>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d101      	bne.n	800d5e6 <HAL_GPIO_Init+0x20a>
 800d5e2:	2307      	movs	r3, #7
 800d5e4:	e00e      	b.n	800d604 <HAL_GPIO_Init+0x228>
 800d5e6:	2308      	movs	r3, #8
 800d5e8:	e00c      	b.n	800d604 <HAL_GPIO_Init+0x228>
 800d5ea:	2306      	movs	r3, #6
 800d5ec:	e00a      	b.n	800d604 <HAL_GPIO_Init+0x228>
 800d5ee:	2305      	movs	r3, #5
 800d5f0:	e008      	b.n	800d604 <HAL_GPIO_Init+0x228>
 800d5f2:	2304      	movs	r3, #4
 800d5f4:	e006      	b.n	800d604 <HAL_GPIO_Init+0x228>
 800d5f6:	2303      	movs	r3, #3
 800d5f8:	e004      	b.n	800d604 <HAL_GPIO_Init+0x228>
 800d5fa:	2302      	movs	r3, #2
 800d5fc:	e002      	b.n	800d604 <HAL_GPIO_Init+0x228>
 800d5fe:	2301      	movs	r3, #1
 800d600:	e000      	b.n	800d604 <HAL_GPIO_Init+0x228>
 800d602:	2300      	movs	r3, #0
 800d604:	69fa      	ldr	r2, [r7, #28]
 800d606:	f002 0203 	and.w	r2, r2, #3
 800d60a:	0092      	lsls	r2, r2, #2
 800d60c:	4093      	lsls	r3, r2
 800d60e:	69ba      	ldr	r2, [r7, #24]
 800d610:	4313      	orrs	r3, r2
 800d612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d614:	4935      	ldr	r1, [pc, #212]	@ (800d6ec <HAL_GPIO_Init+0x310>)
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	089b      	lsrs	r3, r3, #2
 800d61a:	3302      	adds	r3, #2
 800d61c:	69ba      	ldr	r2, [r7, #24]
 800d61e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d622:	4b3b      	ldr	r3, [pc, #236]	@ (800d710 <HAL_GPIO_Init+0x334>)
 800d624:	689b      	ldr	r3, [r3, #8]
 800d626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	43db      	mvns	r3, r3
 800d62c:	69ba      	ldr	r2, [r7, #24]
 800d62e:	4013      	ands	r3, r2
 800d630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d003      	beq.n	800d646 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800d63e:	69ba      	ldr	r2, [r7, #24]
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	4313      	orrs	r3, r2
 800d644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d646:	4a32      	ldr	r2, [pc, #200]	@ (800d710 <HAL_GPIO_Init+0x334>)
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d64c:	4b30      	ldr	r3, [pc, #192]	@ (800d710 <HAL_GPIO_Init+0x334>)
 800d64e:	68db      	ldr	r3, [r3, #12]
 800d650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	43db      	mvns	r3, r3
 800d656:	69ba      	ldr	r2, [r7, #24]
 800d658:	4013      	ands	r3, r2
 800d65a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d664:	2b00      	cmp	r3, #0
 800d666:	d003      	beq.n	800d670 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800d668:	69ba      	ldr	r2, [r7, #24]
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	4313      	orrs	r3, r2
 800d66e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d670:	4a27      	ldr	r2, [pc, #156]	@ (800d710 <HAL_GPIO_Init+0x334>)
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800d676:	4b26      	ldr	r3, [pc, #152]	@ (800d710 <HAL_GPIO_Init+0x334>)
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	43db      	mvns	r3, r3
 800d680:	69ba      	ldr	r2, [r7, #24]
 800d682:	4013      	ands	r3, r2
 800d684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d003      	beq.n	800d69a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800d692:	69ba      	ldr	r2, [r7, #24]
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	4313      	orrs	r3, r2
 800d698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d69a:	4a1d      	ldr	r2, [pc, #116]	@ (800d710 <HAL_GPIO_Init+0x334>)
 800d69c:	69bb      	ldr	r3, [r7, #24]
 800d69e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d6a0:	4b1b      	ldr	r3, [pc, #108]	@ (800d710 <HAL_GPIO_Init+0x334>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	43db      	mvns	r3, r3
 800d6aa:	69ba      	ldr	r2, [r7, #24]
 800d6ac:	4013      	ands	r3, r2
 800d6ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d003      	beq.n	800d6c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800d6bc:	69ba      	ldr	r2, [r7, #24]
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d6c4:	4a12      	ldr	r2, [pc, #72]	@ (800d710 <HAL_GPIO_Init+0x334>)
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d6ca:	69fb      	ldr	r3, [r7, #28]
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	61fb      	str	r3, [r7, #28]
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	2b0f      	cmp	r3, #15
 800d6d4:	f67f ae90 	bls.w	800d3f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d6d8:	bf00      	nop
 800d6da:	bf00      	nop
 800d6dc:	3724      	adds	r7, #36	@ 0x24
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr
 800d6e6:	bf00      	nop
 800d6e8:	40023800 	.word	0x40023800
 800d6ec:	40013800 	.word	0x40013800
 800d6f0:	40020000 	.word	0x40020000
 800d6f4:	40020400 	.word	0x40020400
 800d6f8:	40020800 	.word	0x40020800
 800d6fc:	40020c00 	.word	0x40020c00
 800d700:	40021000 	.word	0x40021000
 800d704:	40021400 	.word	0x40021400
 800d708:	40021800 	.word	0x40021800
 800d70c:	40021c00 	.word	0x40021c00
 800d710:	40013c00 	.word	0x40013c00

0800d714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	460b      	mov	r3, r1
 800d71e:	807b      	strh	r3, [r7, #2]
 800d720:	4613      	mov	r3, r2
 800d722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d724:	787b      	ldrb	r3, [r7, #1]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d003      	beq.n	800d732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d72a:	887a      	ldrh	r2, [r7, #2]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d730:	e003      	b.n	800d73a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d732:	887b      	ldrh	r3, [r7, #2]
 800d734:	041a      	lsls	r2, r3, #16
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	619a      	str	r2, [r3, #24]
}
 800d73a:	bf00      	nop
 800d73c:	370c      	adds	r7, #12
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr
	...

0800d748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b084      	sub	sp, #16
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d101      	bne.n	800d75a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d756:	2301      	movs	r3, #1
 800d758:	e12b      	b.n	800d9b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d760:	b2db      	uxtb	r3, r3
 800d762:	2b00      	cmp	r3, #0
 800d764:	d106      	bne.n	800d774 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7f7 fdfa 	bl	8005368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2224      	movs	r2, #36	@ 0x24
 800d778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f022 0201 	bic.w	r2, r2, #1
 800d78a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d79a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d7aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d7ac:	f001 fda0 	bl	800f2f0 <HAL_RCC_GetPCLK1Freq>
 800d7b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	4a81      	ldr	r2, [pc, #516]	@ (800d9bc <HAL_I2C_Init+0x274>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d807      	bhi.n	800d7cc <HAL_I2C_Init+0x84>
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	4a80      	ldr	r2, [pc, #512]	@ (800d9c0 <HAL_I2C_Init+0x278>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	bf94      	ite	ls
 800d7c4:	2301      	movls	r3, #1
 800d7c6:	2300      	movhi	r3, #0
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	e006      	b.n	800d7da <HAL_I2C_Init+0x92>
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	4a7d      	ldr	r2, [pc, #500]	@ (800d9c4 <HAL_I2C_Init+0x27c>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	bf94      	ite	ls
 800d7d4:	2301      	movls	r3, #1
 800d7d6:	2300      	movhi	r3, #0
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d001      	beq.n	800d7e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	e0e7      	b.n	800d9b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	4a78      	ldr	r2, [pc, #480]	@ (800d9c8 <HAL_I2C_Init+0x280>)
 800d7e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d7ea:	0c9b      	lsrs	r3, r3, #18
 800d7ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	430a      	orrs	r2, r1
 800d800:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	6a1b      	ldr	r3, [r3, #32]
 800d808:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	4a6a      	ldr	r2, [pc, #424]	@ (800d9bc <HAL_I2C_Init+0x274>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d802      	bhi.n	800d81c <HAL_I2C_Init+0xd4>
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	3301      	adds	r3, #1
 800d81a:	e009      	b.n	800d830 <HAL_I2C_Init+0xe8>
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d822:	fb02 f303 	mul.w	r3, r2, r3
 800d826:	4a69      	ldr	r2, [pc, #420]	@ (800d9cc <HAL_I2C_Init+0x284>)
 800d828:	fba2 2303 	umull	r2, r3, r2, r3
 800d82c:	099b      	lsrs	r3, r3, #6
 800d82e:	3301      	adds	r3, #1
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	6812      	ldr	r2, [r2, #0]
 800d834:	430b      	orrs	r3, r1
 800d836:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	69db      	ldr	r3, [r3, #28]
 800d83e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800d842:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	495c      	ldr	r1, [pc, #368]	@ (800d9bc <HAL_I2C_Init+0x274>)
 800d84c:	428b      	cmp	r3, r1
 800d84e:	d819      	bhi.n	800d884 <HAL_I2C_Init+0x13c>
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	1e59      	subs	r1, r3, #1
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	005b      	lsls	r3, r3, #1
 800d85a:	fbb1 f3f3 	udiv	r3, r1, r3
 800d85e:	1c59      	adds	r1, r3, #1
 800d860:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d864:	400b      	ands	r3, r1
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00a      	beq.n	800d880 <HAL_I2C_Init+0x138>
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	1e59      	subs	r1, r3, #1
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	005b      	lsls	r3, r3, #1
 800d874:	fbb1 f3f3 	udiv	r3, r1, r3
 800d878:	3301      	adds	r3, #1
 800d87a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d87e:	e051      	b.n	800d924 <HAL_I2C_Init+0x1dc>
 800d880:	2304      	movs	r3, #4
 800d882:	e04f      	b.n	800d924 <HAL_I2C_Init+0x1dc>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d111      	bne.n	800d8b0 <HAL_I2C_Init+0x168>
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	1e58      	subs	r0, r3, #1
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6859      	ldr	r1, [r3, #4]
 800d894:	460b      	mov	r3, r1
 800d896:	005b      	lsls	r3, r3, #1
 800d898:	440b      	add	r3, r1
 800d89a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d89e:	3301      	adds	r3, #1
 800d8a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	bf0c      	ite	eq
 800d8a8:	2301      	moveq	r3, #1
 800d8aa:	2300      	movne	r3, #0
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	e012      	b.n	800d8d6 <HAL_I2C_Init+0x18e>
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	1e58      	subs	r0, r3, #1
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6859      	ldr	r1, [r3, #4]
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	009b      	lsls	r3, r3, #2
 800d8bc:	440b      	add	r3, r1
 800d8be:	0099      	lsls	r1, r3, #2
 800d8c0:	440b      	add	r3, r1
 800d8c2:	fbb0 f3f3 	udiv	r3, r0, r3
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	bf0c      	ite	eq
 800d8d0:	2301      	moveq	r3, #1
 800d8d2:	2300      	movne	r3, #0
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d001      	beq.n	800d8de <HAL_I2C_Init+0x196>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e022      	b.n	800d924 <HAL_I2C_Init+0x1dc>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d10e      	bne.n	800d904 <HAL_I2C_Init+0x1bc>
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	1e58      	subs	r0, r3, #1
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6859      	ldr	r1, [r3, #4]
 800d8ee:	460b      	mov	r3, r1
 800d8f0:	005b      	lsls	r3, r3, #1
 800d8f2:	440b      	add	r3, r1
 800d8f4:	fbb0 f3f3 	udiv	r3, r0, r3
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d8fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d902:	e00f      	b.n	800d924 <HAL_I2C_Init+0x1dc>
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	1e58      	subs	r0, r3, #1
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6859      	ldr	r1, [r3, #4]
 800d90c:	460b      	mov	r3, r1
 800d90e:	009b      	lsls	r3, r3, #2
 800d910:	440b      	add	r3, r1
 800d912:	0099      	lsls	r1, r3, #2
 800d914:	440b      	add	r3, r1
 800d916:	fbb0 f3f3 	udiv	r3, r0, r3
 800d91a:	3301      	adds	r3, #1
 800d91c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d920:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d924:	6879      	ldr	r1, [r7, #4]
 800d926:	6809      	ldr	r1, [r1, #0]
 800d928:	4313      	orrs	r3, r2
 800d92a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	69da      	ldr	r2, [r3, #28]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6a1b      	ldr	r3, [r3, #32]
 800d93e:	431a      	orrs	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	430a      	orrs	r2, r1
 800d946:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800d952:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	6911      	ldr	r1, [r2, #16]
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	68d2      	ldr	r2, [r2, #12]
 800d95e:	4311      	orrs	r1, r2
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	6812      	ldr	r2, [r2, #0]
 800d964:	430b      	orrs	r3, r1
 800d966:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	695a      	ldr	r2, [r3, #20]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	699b      	ldr	r3, [r3, #24]
 800d97a:	431a      	orrs	r2, r3
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	430a      	orrs	r2, r1
 800d982:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	681a      	ldr	r2, [r3, #0]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f042 0201 	orr.w	r2, r2, #1
 800d992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2200      	movs	r2, #0
 800d998:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2220      	movs	r2, #32
 800d99e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d9b0:	2300      	movs	r3, #0
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3710      	adds	r7, #16
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	000186a0 	.word	0x000186a0
 800d9c0:	001e847f 	.word	0x001e847f
 800d9c4:	003d08ff 	.word	0x003d08ff
 800d9c8:	431bde83 	.word	0x431bde83
 800d9cc:	10624dd3 	.word	0x10624dd3

0800d9d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b088      	sub	sp, #32
 800d9d4:	af02      	add	r7, sp, #8
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	607a      	str	r2, [r7, #4]
 800d9da:	461a      	mov	r2, r3
 800d9dc:	460b      	mov	r3, r1
 800d9de:	817b      	strh	r3, [r7, #10]
 800d9e0:	4613      	mov	r3, r2
 800d9e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d9e4:	f7ff fb26 	bl	800d034 <HAL_GetTick>
 800d9e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	2b20      	cmp	r3, #32
 800d9f4:	f040 80e0 	bne.w	800dbb8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	9300      	str	r3, [sp, #0]
 800d9fc:	2319      	movs	r3, #25
 800d9fe:	2201      	movs	r2, #1
 800da00:	4970      	ldr	r1, [pc, #448]	@ (800dbc4 <HAL_I2C_Master_Transmit+0x1f4>)
 800da02:	68f8      	ldr	r0, [r7, #12]
 800da04:	f000 fe0e 	bl	800e624 <I2C_WaitOnFlagUntilTimeout>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d001      	beq.n	800da12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800da0e:	2302      	movs	r3, #2
 800da10:	e0d3      	b.n	800dbba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d101      	bne.n	800da20 <HAL_I2C_Master_Transmit+0x50>
 800da1c:	2302      	movs	r3, #2
 800da1e:	e0cc      	b.n	800dbba <HAL_I2C_Master_Transmit+0x1ea>
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2201      	movs	r2, #1
 800da24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f003 0301 	and.w	r3, r3, #1
 800da32:	2b01      	cmp	r3, #1
 800da34:	d007      	beq.n	800da46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f042 0201 	orr.w	r2, r2, #1
 800da44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800da54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2221      	movs	r2, #33	@ 0x21
 800da5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2210      	movs	r2, #16
 800da62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2200      	movs	r2, #0
 800da6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	893a      	ldrh	r2, [r7, #8]
 800da76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da7c:	b29a      	uxth	r2, r3
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	4a50      	ldr	r2, [pc, #320]	@ (800dbc8 <HAL_I2C_Master_Transmit+0x1f8>)
 800da86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800da88:	8979      	ldrh	r1, [r7, #10]
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	6a3a      	ldr	r2, [r7, #32]
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	f000 fbc8 	bl	800e224 <I2C_MasterRequestWrite>
 800da94:	4603      	mov	r3, r0
 800da96:	2b00      	cmp	r3, #0
 800da98:	d001      	beq.n	800da9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800da9a:	2301      	movs	r3, #1
 800da9c:	e08d      	b.n	800dbba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da9e:	2300      	movs	r3, #0
 800daa0:	613b      	str	r3, [r7, #16]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	695b      	ldr	r3, [r3, #20]
 800daa8:	613b      	str	r3, [r7, #16]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	699b      	ldr	r3, [r3, #24]
 800dab0:	613b      	str	r3, [r7, #16]
 800dab2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800dab4:	e066      	b.n	800db84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dab6:	697a      	ldr	r2, [r7, #20]
 800dab8:	6a39      	ldr	r1, [r7, #32]
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f000 fecc 	bl	800e858 <I2C_WaitOnTXEFlagUntilTimeout>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00d      	beq.n	800dae2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daca:	2b04      	cmp	r3, #4
 800dacc:	d107      	bne.n	800dade <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dadc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800dade:	2301      	movs	r3, #1
 800dae0:	e06b      	b.n	800dbba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dae6:	781a      	ldrb	r2, [r3, #0]
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daf2:	1c5a      	adds	r2, r3, #1
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	3b01      	subs	r3, #1
 800db00:	b29a      	uxth	r2, r3
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db0a:	3b01      	subs	r3, #1
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	695b      	ldr	r3, [r3, #20]
 800db18:	f003 0304 	and.w	r3, r3, #4
 800db1c:	2b04      	cmp	r3, #4
 800db1e:	d11b      	bne.n	800db58 <HAL_I2C_Master_Transmit+0x188>
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db24:	2b00      	cmp	r3, #0
 800db26:	d017      	beq.n	800db58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db2c:	781a      	ldrb	r2, [r3, #0]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db38:	1c5a      	adds	r2, r3, #1
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db42:	b29b      	uxth	r3, r3
 800db44:	3b01      	subs	r3, #1
 800db46:	b29a      	uxth	r2, r3
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db50:	3b01      	subs	r3, #1
 800db52:	b29a      	uxth	r2, r3
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800db58:	697a      	ldr	r2, [r7, #20]
 800db5a:	6a39      	ldr	r1, [r7, #32]
 800db5c:	68f8      	ldr	r0, [r7, #12]
 800db5e:	f000 fec3 	bl	800e8e8 <I2C_WaitOnBTFFlagUntilTimeout>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d00d      	beq.n	800db84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db6c:	2b04      	cmp	r3, #4
 800db6e:	d107      	bne.n	800db80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800db7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800db80:	2301      	movs	r3, #1
 800db82:	e01a      	b.n	800dbba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d194      	bne.n	800dab6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800db9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2220      	movs	r2, #32
 800dba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2200      	movs	r2, #0
 800dba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	e000      	b.n	800dbba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800dbb8:	2302      	movs	r3, #2
  }
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3718      	adds	r7, #24
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	00100002 	.word	0x00100002
 800dbc8:	ffff0000 	.word	0xffff0000

0800dbcc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b088      	sub	sp, #32
 800dbd0:	af02      	add	r7, sp, #8
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	4608      	mov	r0, r1
 800dbd6:	4611      	mov	r1, r2
 800dbd8:	461a      	mov	r2, r3
 800dbda:	4603      	mov	r3, r0
 800dbdc:	817b      	strh	r3, [r7, #10]
 800dbde:	460b      	mov	r3, r1
 800dbe0:	813b      	strh	r3, [r7, #8]
 800dbe2:	4613      	mov	r3, r2
 800dbe4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dbe6:	f7ff fa25 	bl	800d034 <HAL_GetTick>
 800dbea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	2b20      	cmp	r3, #32
 800dbf6:	f040 80d9 	bne.w	800ddac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	9300      	str	r3, [sp, #0]
 800dbfe:	2319      	movs	r3, #25
 800dc00:	2201      	movs	r2, #1
 800dc02:	496d      	ldr	r1, [pc, #436]	@ (800ddb8 <HAL_I2C_Mem_Write+0x1ec>)
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f000 fd0d 	bl	800e624 <I2C_WaitOnFlagUntilTimeout>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d001      	beq.n	800dc14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800dc10:	2302      	movs	r3, #2
 800dc12:	e0cc      	b.n	800ddae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d101      	bne.n	800dc22 <HAL_I2C_Mem_Write+0x56>
 800dc1e:	2302      	movs	r3, #2
 800dc20:	e0c5      	b.n	800ddae <HAL_I2C_Mem_Write+0x1e2>
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2201      	movs	r2, #1
 800dc26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f003 0301 	and.w	r3, r3, #1
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d007      	beq.n	800dc48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f042 0201 	orr.w	r2, r2, #1
 800dc46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dc56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2221      	movs	r2, #33	@ 0x21
 800dc5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2240      	movs	r2, #64	@ 0x40
 800dc64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	6a3a      	ldr	r2, [r7, #32]
 800dc72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dc78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc7e:	b29a      	uxth	r2, r3
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	4a4d      	ldr	r2, [pc, #308]	@ (800ddbc <HAL_I2C_Mem_Write+0x1f0>)
 800dc88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dc8a:	88f8      	ldrh	r0, [r7, #6]
 800dc8c:	893a      	ldrh	r2, [r7, #8]
 800dc8e:	8979      	ldrh	r1, [r7, #10]
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	9301      	str	r3, [sp, #4]
 800dc94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	4603      	mov	r3, r0
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f000 fb44 	bl	800e328 <I2C_RequestMemoryWrite>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d052      	beq.n	800dd4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e081      	b.n	800ddae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dcaa:	697a      	ldr	r2, [r7, #20]
 800dcac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dcae:	68f8      	ldr	r0, [r7, #12]
 800dcb0:	f000 fdd2 	bl	800e858 <I2C_WaitOnTXEFlagUntilTimeout>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d00d      	beq.n	800dcd6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcbe:	2b04      	cmp	r3, #4
 800dcc0:	d107      	bne.n	800dcd2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dcd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e06b      	b.n	800ddae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcda:	781a      	ldrb	r2, [r3, #0]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dce6:	1c5a      	adds	r2, r3, #1
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcf0:	3b01      	subs	r3, #1
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	b29a      	uxth	r2, r3
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	695b      	ldr	r3, [r3, #20]
 800dd0c:	f003 0304 	and.w	r3, r3, #4
 800dd10:	2b04      	cmp	r3, #4
 800dd12:	d11b      	bne.n	800dd4c <HAL_I2C_Mem_Write+0x180>
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d017      	beq.n	800dd4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd20:	781a      	ldrb	r2, [r3, #0]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd2c:	1c5a      	adds	r2, r3, #1
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd36:	3b01      	subs	r3, #1
 800dd38:	b29a      	uxth	r2, r3
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd42:	b29b      	uxth	r3, r3
 800dd44:	3b01      	subs	r3, #1
 800dd46:	b29a      	uxth	r2, r3
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d1aa      	bne.n	800dcaa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dd54:	697a      	ldr	r2, [r7, #20]
 800dd56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f000 fdc5 	bl	800e8e8 <I2C_WaitOnBTFFlagUntilTimeout>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d00d      	beq.n	800dd80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd68:	2b04      	cmp	r3, #4
 800dd6a:	d107      	bne.n	800dd7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	681a      	ldr	r2, [r3, #0]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dd7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	e016      	b.n	800ddae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dd8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2220      	movs	r2, #32
 800dd94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2200      	movs	r2, #0
 800dda4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	e000      	b.n	800ddae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ddac:	2302      	movs	r3, #2
  }
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3718      	adds	r7, #24
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	00100002 	.word	0x00100002
 800ddbc:	ffff0000 	.word	0xffff0000

0800ddc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b08c      	sub	sp, #48	@ 0x30
 800ddc4:	af02      	add	r7, sp, #8
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	4608      	mov	r0, r1
 800ddca:	4611      	mov	r1, r2
 800ddcc:	461a      	mov	r2, r3
 800ddce:	4603      	mov	r3, r0
 800ddd0:	817b      	strh	r3, [r7, #10]
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	813b      	strh	r3, [r7, #8]
 800ddd6:	4613      	mov	r3, r2
 800ddd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ddda:	f7ff f92b 	bl	800d034 <HAL_GetTick>
 800ddde:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	2b20      	cmp	r3, #32
 800ddea:	f040 8214 	bne.w	800e216 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ddee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	2319      	movs	r3, #25
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	497b      	ldr	r1, [pc, #492]	@ (800dfe4 <HAL_I2C_Mem_Read+0x224>)
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f000 fc13 	bl	800e624 <I2C_WaitOnFlagUntilTimeout>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2b00      	cmp	r3, #0
 800de02:	d001      	beq.n	800de08 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800de04:	2302      	movs	r3, #2
 800de06:	e207      	b.n	800e218 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d101      	bne.n	800de16 <HAL_I2C_Mem_Read+0x56>
 800de12:	2302      	movs	r3, #2
 800de14:	e200      	b.n	800e218 <HAL_I2C_Mem_Read+0x458>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2201      	movs	r2, #1
 800de1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f003 0301 	and.w	r3, r3, #1
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d007      	beq.n	800de3c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f042 0201 	orr.w	r2, r2, #1
 800de3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	681a      	ldr	r2, [r3, #0]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800de4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2222      	movs	r2, #34	@ 0x22
 800de50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2240      	movs	r2, #64	@ 0x40
 800de58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2200      	movs	r2, #0
 800de60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800de6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de72:	b29a      	uxth	r2, r3
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	4a5b      	ldr	r2, [pc, #364]	@ (800dfe8 <HAL_I2C_Mem_Read+0x228>)
 800de7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800de7e:	88f8      	ldrh	r0, [r7, #6]
 800de80:	893a      	ldrh	r2, [r7, #8]
 800de82:	8979      	ldrh	r1, [r7, #10]
 800de84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de86:	9301      	str	r3, [sp, #4]
 800de88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de8a:	9300      	str	r3, [sp, #0]
 800de8c:	4603      	mov	r3, r0
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f000 fae0 	bl	800e454 <I2C_RequestMemoryRead>
 800de94:	4603      	mov	r3, r0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d001      	beq.n	800de9e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800de9a:	2301      	movs	r3, #1
 800de9c:	e1bc      	b.n	800e218 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d113      	bne.n	800dece <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dea6:	2300      	movs	r3, #0
 800dea8:	623b      	str	r3, [r7, #32]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	695b      	ldr	r3, [r3, #20]
 800deb0:	623b      	str	r3, [r7, #32]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	699b      	ldr	r3, [r3, #24]
 800deb8:	623b      	str	r3, [r7, #32]
 800deba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800deca:	601a      	str	r2, [r3, #0]
 800decc:	e190      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d11b      	bne.n	800df0e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dee4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dee6:	2300      	movs	r3, #0
 800dee8:	61fb      	str	r3, [r7, #28]
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	695b      	ldr	r3, [r3, #20]
 800def0:	61fb      	str	r3, [r7, #28]
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	699b      	ldr	r3, [r3, #24]
 800def8:	61fb      	str	r3, [r7, #28]
 800defa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	681a      	ldr	r2, [r3, #0]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800df0a:	601a      	str	r2, [r3, #0]
 800df0c:	e170      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df12:	2b02      	cmp	r3, #2
 800df14:	d11b      	bne.n	800df4e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800df24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800df34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800df36:	2300      	movs	r3, #0
 800df38:	61bb      	str	r3, [r7, #24]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	695b      	ldr	r3, [r3, #20]
 800df40:	61bb      	str	r3, [r7, #24]
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	699b      	ldr	r3, [r3, #24]
 800df48:	61bb      	str	r3, [r7, #24]
 800df4a:	69bb      	ldr	r3, [r7, #24]
 800df4c:	e150      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800df4e:	2300      	movs	r3, #0
 800df50:	617b      	str	r3, [r7, #20]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	695b      	ldr	r3, [r3, #20]
 800df58:	617b      	str	r3, [r7, #20]
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	699b      	ldr	r3, [r3, #24]
 800df60:	617b      	str	r3, [r7, #20]
 800df62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800df64:	e144      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df6a:	2b03      	cmp	r3, #3
 800df6c:	f200 80f1 	bhi.w	800e152 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df74:	2b01      	cmp	r3, #1
 800df76:	d123      	bne.n	800dfc0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800df78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800df7c:	68f8      	ldr	r0, [r7, #12]
 800df7e:	f000 fcfb 	bl	800e978 <I2C_WaitOnRXNEFlagUntilTimeout>
 800df82:	4603      	mov	r3, r0
 800df84:	2b00      	cmp	r3, #0
 800df86:	d001      	beq.n	800df8c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800df88:	2301      	movs	r3, #1
 800df8a:	e145      	b.n	800e218 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	691a      	ldr	r2, [r3, #16]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df96:	b2d2      	uxtb	r2, r2
 800df98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df9e:	1c5a      	adds	r2, r3, #1
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	b29a      	uxth	r2, r3
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	3b01      	subs	r3, #1
 800dfb8:	b29a      	uxth	r2, r3
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dfbe:	e117      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	d14e      	bne.n	800e066 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfca:	9300      	str	r3, [sp, #0]
 800dfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfce:	2200      	movs	r2, #0
 800dfd0:	4906      	ldr	r1, [pc, #24]	@ (800dfec <HAL_I2C_Mem_Read+0x22c>)
 800dfd2:	68f8      	ldr	r0, [r7, #12]
 800dfd4:	f000 fb26 	bl	800e624 <I2C_WaitOnFlagUntilTimeout>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d008      	beq.n	800dff0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e11a      	b.n	800e218 <HAL_I2C_Mem_Read+0x458>
 800dfe2:	bf00      	nop
 800dfe4:	00100002 	.word	0x00100002
 800dfe8:	ffff0000 	.word	0xffff0000
 800dfec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	681a      	ldr	r2, [r3, #0]
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dffe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	691a      	ldr	r2, [r3, #16]
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e00a:	b2d2      	uxtb	r2, r2
 800e00c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e012:	1c5a      	adds	r2, r3, #1
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e01c:	3b01      	subs	r3, #1
 800e01e:	b29a      	uxth	r2, r3
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e028:	b29b      	uxth	r3, r3
 800e02a:	3b01      	subs	r3, #1
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	691a      	ldr	r2, [r3, #16]
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e03c:	b2d2      	uxtb	r2, r2
 800e03e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e044:	1c5a      	adds	r2, r3, #1
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e04e:	3b01      	subs	r3, #1
 800e050:	b29a      	uxth	r2, r3
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	3b01      	subs	r3, #1
 800e05e:	b29a      	uxth	r2, r3
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e064:	e0c4      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e068:	9300      	str	r3, [sp, #0]
 800e06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e06c:	2200      	movs	r2, #0
 800e06e:	496c      	ldr	r1, [pc, #432]	@ (800e220 <HAL_I2C_Mem_Read+0x460>)
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	f000 fad7 	bl	800e624 <I2C_WaitOnFlagUntilTimeout>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d001      	beq.n	800e080 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800e07c:	2301      	movs	r3, #1
 800e07e:	e0cb      	b.n	800e218 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e08e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	691a      	ldr	r2, [r3, #16]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e09a:	b2d2      	uxtb	r2, r2
 800e09c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0a2:	1c5a      	adds	r2, r3, #1
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0ac:	3b01      	subs	r3, #1
 800e0ae:	b29a      	uxth	r2, r3
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	3b01      	subs	r3, #1
 800e0bc:	b29a      	uxth	r2, r3
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	4955      	ldr	r1, [pc, #340]	@ (800e220 <HAL_I2C_Mem_Read+0x460>)
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f000 faa9 	bl	800e624 <I2C_WaitOnFlagUntilTimeout>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d001      	beq.n	800e0dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	e09d      	b.n	800e218 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e0ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	691a      	ldr	r2, [r3, #16]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0f6:	b2d2      	uxtb	r2, r2
 800e0f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0fe:	1c5a      	adds	r2, r3, #1
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e108:	3b01      	subs	r3, #1
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e114:	b29b      	uxth	r3, r3
 800e116:	3b01      	subs	r3, #1
 800e118:	b29a      	uxth	r2, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	691a      	ldr	r2, [r3, #16]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e128:	b2d2      	uxtb	r2, r2
 800e12a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e130:	1c5a      	adds	r2, r3, #1
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e13a:	3b01      	subs	r3, #1
 800e13c:	b29a      	uxth	r2, r3
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e146:	b29b      	uxth	r3, r3
 800e148:	3b01      	subs	r3, #1
 800e14a:	b29a      	uxth	r2, r3
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e150:	e04e      	b.n	800e1f0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e154:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e156:	68f8      	ldr	r0, [r7, #12]
 800e158:	f000 fc0e 	bl	800e978 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e15c:	4603      	mov	r3, r0
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d001      	beq.n	800e166 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800e162:	2301      	movs	r3, #1
 800e164:	e058      	b.n	800e218 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	691a      	ldr	r2, [r3, #16]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e170:	b2d2      	uxtb	r2, r2
 800e172:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e178:	1c5a      	adds	r2, r3, #1
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e182:	3b01      	subs	r3, #1
 800e184:	b29a      	uxth	r2, r3
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e18e:	b29b      	uxth	r3, r3
 800e190:	3b01      	subs	r3, #1
 800e192:	b29a      	uxth	r2, r3
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	695b      	ldr	r3, [r3, #20]
 800e19e:	f003 0304 	and.w	r3, r3, #4
 800e1a2:	2b04      	cmp	r3, #4
 800e1a4:	d124      	bne.n	800e1f0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1aa:	2b03      	cmp	r3, #3
 800e1ac:	d107      	bne.n	800e1be <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e1bc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	691a      	ldr	r2, [r3, #16]
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1c8:	b2d2      	uxtb	r2, r2
 800e1ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1d0:	1c5a      	adds	r2, r3, #1
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1da:	3b01      	subs	r3, #1
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	3b01      	subs	r3, #1
 800e1ea:	b29a      	uxth	r2, r3
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f47f aeb6 	bne.w	800df66 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2220      	movs	r2, #32
 800e1fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2200      	movs	r2, #0
 800e206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2200      	movs	r2, #0
 800e20e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800e212:	2300      	movs	r3, #0
 800e214:	e000      	b.n	800e218 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800e216:	2302      	movs	r3, #2
  }
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3728      	adds	r7, #40	@ 0x28
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	00010004 	.word	0x00010004

0800e224 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b088      	sub	sp, #32
 800e228:	af02      	add	r7, sp, #8
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	607a      	str	r2, [r7, #4]
 800e22e:	603b      	str	r3, [r7, #0]
 800e230:	460b      	mov	r3, r1
 800e232:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e238:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	2b08      	cmp	r3, #8
 800e23e:	d006      	beq.n	800e24e <I2C_MasterRequestWrite+0x2a>
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	2b01      	cmp	r3, #1
 800e244:	d003      	beq.n	800e24e <I2C_MasterRequestWrite+0x2a>
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e24c:	d108      	bne.n	800e260 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e25c:	601a      	str	r2, [r3, #0]
 800e25e:	e00b      	b.n	800e278 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e264:	2b12      	cmp	r3, #18
 800e266:	d107      	bne.n	800e278 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e276:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	9300      	str	r3, [sp, #0]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f000 f9cd 	bl	800e624 <I2C_WaitOnFlagUntilTimeout>
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d00d      	beq.n	800e2ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e29a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e29e:	d103      	bne.n	800e2a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e2a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e2a8:	2303      	movs	r3, #3
 800e2aa:	e035      	b.n	800e318 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	691b      	ldr	r3, [r3, #16]
 800e2b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e2b4:	d108      	bne.n	800e2c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e2b6:	897b      	ldrh	r3, [r7, #10]
 800e2b8:	b2db      	uxtb	r3, r3
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e2c4:	611a      	str	r2, [r3, #16]
 800e2c6:	e01b      	b.n	800e300 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e2c8:	897b      	ldrh	r3, [r7, #10]
 800e2ca:	11db      	asrs	r3, r3, #7
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	f003 0306 	and.w	r3, r3, #6
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	f063 030f 	orn	r3, r3, #15
 800e2d8:	b2da      	uxtb	r2, r3
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	687a      	ldr	r2, [r7, #4]
 800e2e4:	490e      	ldr	r1, [pc, #56]	@ (800e320 <I2C_MasterRequestWrite+0xfc>)
 800e2e6:	68f8      	ldr	r0, [r7, #12]
 800e2e8:	f000 fa16 	bl	800e718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d001      	beq.n	800e2f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	e010      	b.n	800e318 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e2f6:	897b      	ldrh	r3, [r7, #10]
 800e2f8:	b2da      	uxtb	r2, r3
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	4907      	ldr	r1, [pc, #28]	@ (800e324 <I2C_MasterRequestWrite+0x100>)
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f000 fa06 	bl	800e718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d001      	beq.n	800e316 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e312:	2301      	movs	r3, #1
 800e314:	e000      	b.n	800e318 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e316:	2300      	movs	r3, #0
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3718      	adds	r7, #24
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	00010008 	.word	0x00010008
 800e324:	00010002 	.word	0x00010002

0800e328 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b088      	sub	sp, #32
 800e32c:	af02      	add	r7, sp, #8
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	4608      	mov	r0, r1
 800e332:	4611      	mov	r1, r2
 800e334:	461a      	mov	r2, r3
 800e336:	4603      	mov	r3, r0
 800e338:	817b      	strh	r3, [r7, #10]
 800e33a:	460b      	mov	r3, r1
 800e33c:	813b      	strh	r3, [r7, #8]
 800e33e:	4613      	mov	r3, r2
 800e340:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e350:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e354:	9300      	str	r3, [sp, #0]
 800e356:	6a3b      	ldr	r3, [r7, #32]
 800e358:	2200      	movs	r2, #0
 800e35a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e35e:	68f8      	ldr	r0, [r7, #12]
 800e360:	f000 f960 	bl	800e624 <I2C_WaitOnFlagUntilTimeout>
 800e364:	4603      	mov	r3, r0
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00d      	beq.n	800e386 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e378:	d103      	bne.n	800e382 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e380:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e382:	2303      	movs	r3, #3
 800e384:	e05f      	b.n	800e446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e386:	897b      	ldrh	r3, [r7, #10]
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	461a      	mov	r2, r3
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e394:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e398:	6a3a      	ldr	r2, [r7, #32]
 800e39a:	492d      	ldr	r1, [pc, #180]	@ (800e450 <I2C_RequestMemoryWrite+0x128>)
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f000 f9bb 	bl	800e718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d001      	beq.n	800e3ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	e04c      	b.n	800e446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	617b      	str	r3, [r7, #20]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	695b      	ldr	r3, [r3, #20]
 800e3b6:	617b      	str	r3, [r7, #20]
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	699b      	ldr	r3, [r3, #24]
 800e3be:	617b      	str	r3, [r7, #20]
 800e3c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e3c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3c4:	6a39      	ldr	r1, [r7, #32]
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	f000 fa46 	bl	800e858 <I2C_WaitOnTXEFlagUntilTimeout>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d00d      	beq.n	800e3ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3d6:	2b04      	cmp	r3, #4
 800e3d8:	d107      	bne.n	800e3ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	681a      	ldr	r2, [r3, #0]
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e3e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	e02b      	b.n	800e446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e3ee:	88fb      	ldrh	r3, [r7, #6]
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d105      	bne.n	800e400 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e3f4:	893b      	ldrh	r3, [r7, #8]
 800e3f6:	b2da      	uxtb	r2, r3
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	611a      	str	r2, [r3, #16]
 800e3fe:	e021      	b.n	800e444 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e400:	893b      	ldrh	r3, [r7, #8]
 800e402:	0a1b      	lsrs	r3, r3, #8
 800e404:	b29b      	uxth	r3, r3
 800e406:	b2da      	uxtb	r2, r3
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e40e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e410:	6a39      	ldr	r1, [r7, #32]
 800e412:	68f8      	ldr	r0, [r7, #12]
 800e414:	f000 fa20 	bl	800e858 <I2C_WaitOnTXEFlagUntilTimeout>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d00d      	beq.n	800e43a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e422:	2b04      	cmp	r3, #4
 800e424:	d107      	bne.n	800e436 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e434:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e436:	2301      	movs	r3, #1
 800e438:	e005      	b.n	800e446 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e43a:	893b      	ldrh	r3, [r7, #8]
 800e43c:	b2da      	uxtb	r2, r3
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e444:	2300      	movs	r3, #0
}
 800e446:	4618      	mov	r0, r3
 800e448:	3718      	adds	r7, #24
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	00010002 	.word	0x00010002

0800e454 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b088      	sub	sp, #32
 800e458:	af02      	add	r7, sp, #8
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	4608      	mov	r0, r1
 800e45e:	4611      	mov	r1, r2
 800e460:	461a      	mov	r2, r3
 800e462:	4603      	mov	r3, r0
 800e464:	817b      	strh	r3, [r7, #10]
 800e466:	460b      	mov	r3, r1
 800e468:	813b      	strh	r3, [r7, #8]
 800e46a:	4613      	mov	r3, r2
 800e46c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e47c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	681a      	ldr	r2, [r3, #0]
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e48c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e490:	9300      	str	r3, [sp, #0]
 800e492:	6a3b      	ldr	r3, [r7, #32]
 800e494:	2200      	movs	r2, #0
 800e496:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e49a:	68f8      	ldr	r0, [r7, #12]
 800e49c:	f000 f8c2 	bl	800e624 <I2C_WaitOnFlagUntilTimeout>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00d      	beq.n	800e4c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e4b4:	d103      	bne.n	800e4be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e4bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e4be:	2303      	movs	r3, #3
 800e4c0:	e0aa      	b.n	800e618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e4c2:	897b      	ldrh	r3, [r7, #10]
 800e4c4:	b2db      	uxtb	r3, r3
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e4d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d4:	6a3a      	ldr	r2, [r7, #32]
 800e4d6:	4952      	ldr	r1, [pc, #328]	@ (800e620 <I2C_RequestMemoryRead+0x1cc>)
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f000 f91d 	bl	800e718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d001      	beq.n	800e4e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e097      	b.n	800e618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	617b      	str	r3, [r7, #20]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	695b      	ldr	r3, [r3, #20]
 800e4f2:	617b      	str	r3, [r7, #20]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	699b      	ldr	r3, [r3, #24]
 800e4fa:	617b      	str	r3, [r7, #20]
 800e4fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e4fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e500:	6a39      	ldr	r1, [r7, #32]
 800e502:	68f8      	ldr	r0, [r7, #12]
 800e504:	f000 f9a8 	bl	800e858 <I2C_WaitOnTXEFlagUntilTimeout>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d00d      	beq.n	800e52a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e512:	2b04      	cmp	r3, #4
 800e514:	d107      	bne.n	800e526 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e524:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e526:	2301      	movs	r3, #1
 800e528:	e076      	b.n	800e618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e52a:	88fb      	ldrh	r3, [r7, #6]
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d105      	bne.n	800e53c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e530:	893b      	ldrh	r3, [r7, #8]
 800e532:	b2da      	uxtb	r2, r3
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	611a      	str	r2, [r3, #16]
 800e53a:	e021      	b.n	800e580 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e53c:	893b      	ldrh	r3, [r7, #8]
 800e53e:	0a1b      	lsrs	r3, r3, #8
 800e540:	b29b      	uxth	r3, r3
 800e542:	b2da      	uxtb	r2, r3
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e54a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e54c:	6a39      	ldr	r1, [r7, #32]
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f000 f982 	bl	800e858 <I2C_WaitOnTXEFlagUntilTimeout>
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00d      	beq.n	800e576 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e55e:	2b04      	cmp	r3, #4
 800e560:	d107      	bne.n	800e572 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e570:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e572:	2301      	movs	r3, #1
 800e574:	e050      	b.n	800e618 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e576:	893b      	ldrh	r3, [r7, #8]
 800e578:	b2da      	uxtb	r2, r3
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e582:	6a39      	ldr	r1, [r7, #32]
 800e584:	68f8      	ldr	r0, [r7, #12]
 800e586:	f000 f967 	bl	800e858 <I2C_WaitOnTXEFlagUntilTimeout>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d00d      	beq.n	800e5ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e594:	2b04      	cmp	r3, #4
 800e596:	d107      	bne.n	800e5a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e5a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	e035      	b.n	800e618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e5ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5be:	9300      	str	r3, [sp, #0]
 800e5c0:	6a3b      	ldr	r3, [r7, #32]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e5c8:	68f8      	ldr	r0, [r7, #12]
 800e5ca:	f000 f82b 	bl	800e624 <I2C_WaitOnFlagUntilTimeout>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d00d      	beq.n	800e5f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e5de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5e2:	d103      	bne.n	800e5ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e5ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e5ec:	2303      	movs	r3, #3
 800e5ee:	e013      	b.n	800e618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e5f0:	897b      	ldrh	r3, [r7, #10]
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	f043 0301 	orr.w	r3, r3, #1
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e602:	6a3a      	ldr	r2, [r7, #32]
 800e604:	4906      	ldr	r1, [pc, #24]	@ (800e620 <I2C_RequestMemoryRead+0x1cc>)
 800e606:	68f8      	ldr	r0, [r7, #12]
 800e608:	f000 f886 	bl	800e718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e60c:	4603      	mov	r3, r0
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d001      	beq.n	800e616 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e612:	2301      	movs	r3, #1
 800e614:	e000      	b.n	800e618 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e616:	2300      	movs	r3, #0
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3718      	adds	r7, #24
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	00010002 	.word	0x00010002

0800e624 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	60f8      	str	r0, [r7, #12]
 800e62c:	60b9      	str	r1, [r7, #8]
 800e62e:	603b      	str	r3, [r7, #0]
 800e630:	4613      	mov	r3, r2
 800e632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e634:	e048      	b.n	800e6c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e63c:	d044      	beq.n	800e6c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e63e:	f7fe fcf9 	bl	800d034 <HAL_GetTick>
 800e642:	4602      	mov	r2, r0
 800e644:	69bb      	ldr	r3, [r7, #24]
 800e646:	1ad3      	subs	r3, r2, r3
 800e648:	683a      	ldr	r2, [r7, #0]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d302      	bcc.n	800e654 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d139      	bne.n	800e6c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	0c1b      	lsrs	r3, r3, #16
 800e658:	b2db      	uxtb	r3, r3
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d10d      	bne.n	800e67a <I2C_WaitOnFlagUntilTimeout+0x56>
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	695b      	ldr	r3, [r3, #20]
 800e664:	43da      	mvns	r2, r3
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	4013      	ands	r3, r2
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	bf0c      	ite	eq
 800e670:	2301      	moveq	r3, #1
 800e672:	2300      	movne	r3, #0
 800e674:	b2db      	uxtb	r3, r3
 800e676:	461a      	mov	r2, r3
 800e678:	e00c      	b.n	800e694 <I2C_WaitOnFlagUntilTimeout+0x70>
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	699b      	ldr	r3, [r3, #24]
 800e680:	43da      	mvns	r2, r3
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	4013      	ands	r3, r2
 800e686:	b29b      	uxth	r3, r3
 800e688:	2b00      	cmp	r3, #0
 800e68a:	bf0c      	ite	eq
 800e68c:	2301      	moveq	r3, #1
 800e68e:	2300      	movne	r3, #0
 800e690:	b2db      	uxtb	r3, r3
 800e692:	461a      	mov	r2, r3
 800e694:	79fb      	ldrb	r3, [r7, #7]
 800e696:	429a      	cmp	r2, r3
 800e698:	d116      	bne.n	800e6c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2200      	movs	r2, #0
 800e69e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2220      	movs	r2, #32
 800e6a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6b4:	f043 0220 	orr.w	r2, r3, #32
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	e023      	b.n	800e710 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	0c1b      	lsrs	r3, r3, #16
 800e6cc:	b2db      	uxtb	r3, r3
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	d10d      	bne.n	800e6ee <I2C_WaitOnFlagUntilTimeout+0xca>
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	695b      	ldr	r3, [r3, #20]
 800e6d8:	43da      	mvns	r2, r3
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	4013      	ands	r3, r2
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	bf0c      	ite	eq
 800e6e4:	2301      	moveq	r3, #1
 800e6e6:	2300      	movne	r3, #0
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	e00c      	b.n	800e708 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	699b      	ldr	r3, [r3, #24]
 800e6f4:	43da      	mvns	r2, r3
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	4013      	ands	r3, r2
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	bf0c      	ite	eq
 800e700:	2301      	moveq	r3, #1
 800e702:	2300      	movne	r3, #0
 800e704:	b2db      	uxtb	r3, r3
 800e706:	461a      	mov	r2, r3
 800e708:	79fb      	ldrb	r3, [r7, #7]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d093      	beq.n	800e636 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	4618      	mov	r0, r3
 800e712:	3710      	adds	r7, #16
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b084      	sub	sp, #16
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	607a      	str	r2, [r7, #4]
 800e724:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e726:	e071      	b.n	800e80c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	695b      	ldr	r3, [r3, #20]
 800e72e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e736:	d123      	bne.n	800e780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e746:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e750:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2200      	movs	r2, #0
 800e756:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2220      	movs	r2, #32
 800e75c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2200      	movs	r2, #0
 800e764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e76c:	f043 0204 	orr.w	r2, r3, #4
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2200      	movs	r2, #0
 800e778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e77c:	2301      	movs	r3, #1
 800e77e:	e067      	b.n	800e850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e786:	d041      	beq.n	800e80c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e788:	f7fe fc54 	bl	800d034 <HAL_GetTick>
 800e78c:	4602      	mov	r2, r0
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	1ad3      	subs	r3, r2, r3
 800e792:	687a      	ldr	r2, [r7, #4]
 800e794:	429a      	cmp	r2, r3
 800e796:	d302      	bcc.n	800e79e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d136      	bne.n	800e80c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	0c1b      	lsrs	r3, r3, #16
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d10c      	bne.n	800e7c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	695b      	ldr	r3, [r3, #20]
 800e7ae:	43da      	mvns	r2, r3
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	4013      	ands	r3, r2
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	bf14      	ite	ne
 800e7ba:	2301      	movne	r3, #1
 800e7bc:	2300      	moveq	r3, #0
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	e00b      	b.n	800e7da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	699b      	ldr	r3, [r3, #24]
 800e7c8:	43da      	mvns	r2, r3
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	4013      	ands	r3, r2
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	bf14      	ite	ne
 800e7d4:	2301      	movne	r3, #1
 800e7d6:	2300      	moveq	r3, #0
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d016      	beq.n	800e80c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2220      	movs	r2, #32
 800e7e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7f8:	f043 0220 	orr.w	r2, r3, #32
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2200      	movs	r2, #0
 800e804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e808:	2301      	movs	r3, #1
 800e80a:	e021      	b.n	800e850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	0c1b      	lsrs	r3, r3, #16
 800e810:	b2db      	uxtb	r3, r3
 800e812:	2b01      	cmp	r3, #1
 800e814:	d10c      	bne.n	800e830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	695b      	ldr	r3, [r3, #20]
 800e81c:	43da      	mvns	r2, r3
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	4013      	ands	r3, r2
 800e822:	b29b      	uxth	r3, r3
 800e824:	2b00      	cmp	r3, #0
 800e826:	bf14      	ite	ne
 800e828:	2301      	movne	r3, #1
 800e82a:	2300      	moveq	r3, #0
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	e00b      	b.n	800e848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	699b      	ldr	r3, [r3, #24]
 800e836:	43da      	mvns	r2, r3
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	4013      	ands	r3, r2
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	2b00      	cmp	r3, #0
 800e840:	bf14      	ite	ne
 800e842:	2301      	movne	r3, #1
 800e844:	2300      	moveq	r3, #0
 800e846:	b2db      	uxtb	r3, r3
 800e848:	2b00      	cmp	r3, #0
 800e84a:	f47f af6d 	bne.w	800e728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800e84e:	2300      	movs	r3, #0
}
 800e850:	4618      	mov	r0, r3
 800e852:	3710      	adds	r7, #16
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b084      	sub	sp, #16
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	60f8      	str	r0, [r7, #12]
 800e860:	60b9      	str	r1, [r7, #8]
 800e862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e864:	e034      	b.n	800e8d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e866:	68f8      	ldr	r0, [r7, #12]
 800e868:	f000 f8e3 	bl	800ea32 <I2C_IsAcknowledgeFailed>
 800e86c:	4603      	mov	r3, r0
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d001      	beq.n	800e876 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e872:	2301      	movs	r3, #1
 800e874:	e034      	b.n	800e8e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e87c:	d028      	beq.n	800e8d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e87e:	f7fe fbd9 	bl	800d034 <HAL_GetTick>
 800e882:	4602      	mov	r2, r0
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	1ad3      	subs	r3, r2, r3
 800e888:	68ba      	ldr	r2, [r7, #8]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d302      	bcc.n	800e894 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d11d      	bne.n	800e8d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	695b      	ldr	r3, [r3, #20]
 800e89a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e89e:	2b80      	cmp	r3, #128	@ 0x80
 800e8a0:	d016      	beq.n	800e8d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2220      	movs	r2, #32
 800e8ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8bc:	f043 0220 	orr.w	r2, r3, #32
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	e007      	b.n	800e8e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	695b      	ldr	r3, [r3, #20]
 800e8d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8da:	2b80      	cmp	r3, #128	@ 0x80
 800e8dc:	d1c3      	bne.n	800e866 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e8de:	2300      	movs	r3, #0
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3710      	adds	r7, #16
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e8f4:	e034      	b.n	800e960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f000 f89b 	bl	800ea32 <I2C_IsAcknowledgeFailed>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d001      	beq.n	800e906 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e902:	2301      	movs	r3, #1
 800e904:	e034      	b.n	800e970 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e90c:	d028      	beq.n	800e960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e90e:	f7fe fb91 	bl	800d034 <HAL_GetTick>
 800e912:	4602      	mov	r2, r0
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	1ad3      	subs	r3, r2, r3
 800e918:	68ba      	ldr	r2, [r7, #8]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d302      	bcc.n	800e924 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d11d      	bne.n	800e960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	695b      	ldr	r3, [r3, #20]
 800e92a:	f003 0304 	and.w	r3, r3, #4
 800e92e:	2b04      	cmp	r3, #4
 800e930:	d016      	beq.n	800e960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2200      	movs	r2, #0
 800e936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2220      	movs	r2, #32
 800e93c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	2200      	movs	r2, #0
 800e944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e94c:	f043 0220 	orr.w	r2, r3, #32
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2200      	movs	r2, #0
 800e958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e95c:	2301      	movs	r3, #1
 800e95e:	e007      	b.n	800e970 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	695b      	ldr	r3, [r3, #20]
 800e966:	f003 0304 	and.w	r3, r3, #4
 800e96a:	2b04      	cmp	r3, #4
 800e96c:	d1c3      	bne.n	800e8f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e96e:	2300      	movs	r3, #0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e984:	e049      	b.n	800ea1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	695b      	ldr	r3, [r3, #20]
 800e98c:	f003 0310 	and.w	r3, r3, #16
 800e990:	2b10      	cmp	r3, #16
 800e992:	d119      	bne.n	800e9c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f06f 0210 	mvn.w	r2, #16
 800e99c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2220      	movs	r2, #32
 800e9a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	e030      	b.n	800ea2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9c8:	f7fe fb34 	bl	800d034 <HAL_GetTick>
 800e9cc:	4602      	mov	r2, r0
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	1ad3      	subs	r3, r2, r3
 800e9d2:	68ba      	ldr	r2, [r7, #8]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d302      	bcc.n	800e9de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d11d      	bne.n	800ea1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	695b      	ldr	r3, [r3, #20]
 800e9e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9e8:	2b40      	cmp	r3, #64	@ 0x40
 800e9ea:	d016      	beq.n	800ea1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2220      	movs	r2, #32
 800e9f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea06:	f043 0220 	orr.w	r2, r3, #32
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	2200      	movs	r2, #0
 800ea12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ea16:	2301      	movs	r3, #1
 800ea18:	e007      	b.n	800ea2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	695b      	ldr	r3, [r3, #20]
 800ea20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea24:	2b40      	cmp	r3, #64	@ 0x40
 800ea26:	d1ae      	bne.n	800e986 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ea28:	2300      	movs	r3, #0
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3710      	adds	r7, #16
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ea32:	b480      	push	{r7}
 800ea34:	b083      	sub	sp, #12
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	695b      	ldr	r3, [r3, #20]
 800ea40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ea44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ea48:	d11b      	bne.n	800ea82 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ea52:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2200      	movs	r2, #0
 800ea58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2220      	movs	r2, #32
 800ea5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2200      	movs	r2, #0
 800ea66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea6e:	f043 0204 	orr.w	r2, r3, #4
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	e000      	b.n	800ea84 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ea82:	2300      	movs	r3, #0
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	370c      	adds	r7, #12
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8e:	4770      	bx	lr

0800ea90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b086      	sub	sp, #24
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d101      	bne.n	800eaa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	e267      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f003 0301 	and.w	r3, r3, #1
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d075      	beq.n	800eb9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800eaae:	4b88      	ldr	r3, [pc, #544]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eab0:	689b      	ldr	r3, [r3, #8]
 800eab2:	f003 030c 	and.w	r3, r3, #12
 800eab6:	2b04      	cmp	r3, #4
 800eab8:	d00c      	beq.n	800ead4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800eaba:	4b85      	ldr	r3, [pc, #532]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800eac2:	2b08      	cmp	r3, #8
 800eac4:	d112      	bne.n	800eaec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800eac6:	4b82      	ldr	r3, [pc, #520]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eace:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ead2:	d10b      	bne.n	800eaec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ead4:	4b7e      	ldr	r3, [pc, #504]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d05b      	beq.n	800eb98 <HAL_RCC_OscConfig+0x108>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d157      	bne.n	800eb98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800eae8:	2301      	movs	r3, #1
 800eaea:	e242      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eaf4:	d106      	bne.n	800eb04 <HAL_RCC_OscConfig+0x74>
 800eaf6:	4b76      	ldr	r3, [pc, #472]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a75      	ldr	r2, [pc, #468]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eafc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eb00:	6013      	str	r3, [r2, #0]
 800eb02:	e01d      	b.n	800eb40 <HAL_RCC_OscConfig+0xb0>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800eb0c:	d10c      	bne.n	800eb28 <HAL_RCC_OscConfig+0x98>
 800eb0e:	4b70      	ldr	r3, [pc, #448]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	4a6f      	ldr	r2, [pc, #444]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eb14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800eb18:	6013      	str	r3, [r2, #0]
 800eb1a:	4b6d      	ldr	r3, [pc, #436]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	4a6c      	ldr	r2, [pc, #432]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eb20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eb24:	6013      	str	r3, [r2, #0]
 800eb26:	e00b      	b.n	800eb40 <HAL_RCC_OscConfig+0xb0>
 800eb28:	4b69      	ldr	r3, [pc, #420]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	4a68      	ldr	r2, [pc, #416]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eb2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eb32:	6013      	str	r3, [r2, #0]
 800eb34:	4b66      	ldr	r3, [pc, #408]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a65      	ldr	r2, [pc, #404]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eb3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eb3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d013      	beq.n	800eb70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb48:	f7fe fa74 	bl	800d034 <HAL_GetTick>
 800eb4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eb4e:	e008      	b.n	800eb62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eb50:	f7fe fa70 	bl	800d034 <HAL_GetTick>
 800eb54:	4602      	mov	r2, r0
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	1ad3      	subs	r3, r2, r3
 800eb5a:	2b64      	cmp	r3, #100	@ 0x64
 800eb5c:	d901      	bls.n	800eb62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800eb5e:	2303      	movs	r3, #3
 800eb60:	e207      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eb62:	4b5b      	ldr	r3, [pc, #364]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d0f0      	beq.n	800eb50 <HAL_RCC_OscConfig+0xc0>
 800eb6e:	e014      	b.n	800eb9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb70:	f7fe fa60 	bl	800d034 <HAL_GetTick>
 800eb74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eb76:	e008      	b.n	800eb8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eb78:	f7fe fa5c 	bl	800d034 <HAL_GetTick>
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	1ad3      	subs	r3, r2, r3
 800eb82:	2b64      	cmp	r3, #100	@ 0x64
 800eb84:	d901      	bls.n	800eb8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800eb86:	2303      	movs	r3, #3
 800eb88:	e1f3      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eb8a:	4b51      	ldr	r3, [pc, #324]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d1f0      	bne.n	800eb78 <HAL_RCC_OscConfig+0xe8>
 800eb96:	e000      	b.n	800eb9a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eb98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	f003 0302 	and.w	r3, r3, #2
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d063      	beq.n	800ec6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800eba6:	4b4a      	ldr	r3, [pc, #296]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eba8:	689b      	ldr	r3, [r3, #8]
 800ebaa:	f003 030c 	and.w	r3, r3, #12
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d00b      	beq.n	800ebca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ebb2:	4b47      	ldr	r3, [pc, #284]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800ebb4:	689b      	ldr	r3, [r3, #8]
 800ebb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ebba:	2b08      	cmp	r3, #8
 800ebbc:	d11c      	bne.n	800ebf8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ebbe:	4b44      	ldr	r3, [pc, #272]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d116      	bne.n	800ebf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ebca:	4b41      	ldr	r3, [pc, #260]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	f003 0302 	and.w	r3, r3, #2
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d005      	beq.n	800ebe2 <HAL_RCC_OscConfig+0x152>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	2b01      	cmp	r3, #1
 800ebdc:	d001      	beq.n	800ebe2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	e1c7      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ebe2:	4b3b      	ldr	r3, [pc, #236]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	691b      	ldr	r3, [r3, #16]
 800ebee:	00db      	lsls	r3, r3, #3
 800ebf0:	4937      	ldr	r1, [pc, #220]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ebf6:	e03a      	b.n	800ec6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	68db      	ldr	r3, [r3, #12]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d020      	beq.n	800ec42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ec00:	4b34      	ldr	r3, [pc, #208]	@ (800ecd4 <HAL_RCC_OscConfig+0x244>)
 800ec02:	2201      	movs	r2, #1
 800ec04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec06:	f7fe fa15 	bl	800d034 <HAL_GetTick>
 800ec0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ec0c:	e008      	b.n	800ec20 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ec0e:	f7fe fa11 	bl	800d034 <HAL_GetTick>
 800ec12:	4602      	mov	r2, r0
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	1ad3      	subs	r3, r2, r3
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	d901      	bls.n	800ec20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ec1c:	2303      	movs	r3, #3
 800ec1e:	e1a8      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ec20:	4b2b      	ldr	r3, [pc, #172]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f003 0302 	and.w	r3, r3, #2
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d0f0      	beq.n	800ec0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec2c:	4b28      	ldr	r3, [pc, #160]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	691b      	ldr	r3, [r3, #16]
 800ec38:	00db      	lsls	r3, r3, #3
 800ec3a:	4925      	ldr	r1, [pc, #148]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800ec3c:	4313      	orrs	r3, r2
 800ec3e:	600b      	str	r3, [r1, #0]
 800ec40:	e015      	b.n	800ec6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ec42:	4b24      	ldr	r3, [pc, #144]	@ (800ecd4 <HAL_RCC_OscConfig+0x244>)
 800ec44:	2200      	movs	r2, #0
 800ec46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec48:	f7fe f9f4 	bl	800d034 <HAL_GetTick>
 800ec4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ec4e:	e008      	b.n	800ec62 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ec50:	f7fe f9f0 	bl	800d034 <HAL_GetTick>
 800ec54:	4602      	mov	r2, r0
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	1ad3      	subs	r3, r2, r3
 800ec5a:	2b02      	cmp	r3, #2
 800ec5c:	d901      	bls.n	800ec62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ec5e:	2303      	movs	r3, #3
 800ec60:	e187      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ec62:	4b1b      	ldr	r3, [pc, #108]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f003 0302 	and.w	r3, r3, #2
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d1f0      	bne.n	800ec50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f003 0308 	and.w	r3, r3, #8
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d036      	beq.n	800ece8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	695b      	ldr	r3, [r3, #20]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d016      	beq.n	800ecb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ec82:	4b15      	ldr	r3, [pc, #84]	@ (800ecd8 <HAL_RCC_OscConfig+0x248>)
 800ec84:	2201      	movs	r2, #1
 800ec86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec88:	f7fe f9d4 	bl	800d034 <HAL_GetTick>
 800ec8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ec8e:	e008      	b.n	800eca2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ec90:	f7fe f9d0 	bl	800d034 <HAL_GetTick>
 800ec94:	4602      	mov	r2, r0
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	2b02      	cmp	r3, #2
 800ec9c:	d901      	bls.n	800eca2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ec9e:	2303      	movs	r3, #3
 800eca0:	e167      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eca2:	4b0b      	ldr	r3, [pc, #44]	@ (800ecd0 <HAL_RCC_OscConfig+0x240>)
 800eca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eca6:	f003 0302 	and.w	r3, r3, #2
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d0f0      	beq.n	800ec90 <HAL_RCC_OscConfig+0x200>
 800ecae:	e01b      	b.n	800ece8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ecb0:	4b09      	ldr	r3, [pc, #36]	@ (800ecd8 <HAL_RCC_OscConfig+0x248>)
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ecb6:	f7fe f9bd 	bl	800d034 <HAL_GetTick>
 800ecba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ecbc:	e00e      	b.n	800ecdc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ecbe:	f7fe f9b9 	bl	800d034 <HAL_GetTick>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	1ad3      	subs	r3, r2, r3
 800ecc8:	2b02      	cmp	r3, #2
 800ecca:	d907      	bls.n	800ecdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800eccc:	2303      	movs	r3, #3
 800ecce:	e150      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
 800ecd0:	40023800 	.word	0x40023800
 800ecd4:	42470000 	.word	0x42470000
 800ecd8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ecdc:	4b88      	ldr	r3, [pc, #544]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ecde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ece0:	f003 0302 	and.w	r3, r3, #2
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d1ea      	bne.n	800ecbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f003 0304 	and.w	r3, r3, #4
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	f000 8097 	beq.w	800ee24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ecfa:	4b81      	ldr	r3, [pc, #516]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ecfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d10f      	bne.n	800ed26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ed06:	2300      	movs	r3, #0
 800ed08:	60bb      	str	r3, [r7, #8]
 800ed0a:	4b7d      	ldr	r3, [pc, #500]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ed0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed0e:	4a7c      	ldr	r2, [pc, #496]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ed10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ed14:	6413      	str	r3, [r2, #64]	@ 0x40
 800ed16:	4b7a      	ldr	r3, [pc, #488]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ed18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ed1e:	60bb      	str	r3, [r7, #8]
 800ed20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ed22:	2301      	movs	r3, #1
 800ed24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ed26:	4b77      	ldr	r3, [pc, #476]	@ (800ef04 <HAL_RCC_OscConfig+0x474>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d118      	bne.n	800ed64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ed32:	4b74      	ldr	r3, [pc, #464]	@ (800ef04 <HAL_RCC_OscConfig+0x474>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	4a73      	ldr	r2, [pc, #460]	@ (800ef04 <HAL_RCC_OscConfig+0x474>)
 800ed38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ed3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ed3e:	f7fe f979 	bl	800d034 <HAL_GetTick>
 800ed42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ed44:	e008      	b.n	800ed58 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ed46:	f7fe f975 	bl	800d034 <HAL_GetTick>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	2b02      	cmp	r3, #2
 800ed52:	d901      	bls.n	800ed58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ed54:	2303      	movs	r3, #3
 800ed56:	e10c      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ed58:	4b6a      	ldr	r3, [pc, #424]	@ (800ef04 <HAL_RCC_OscConfig+0x474>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d0f0      	beq.n	800ed46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	689b      	ldr	r3, [r3, #8]
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	d106      	bne.n	800ed7a <HAL_RCC_OscConfig+0x2ea>
 800ed6c:	4b64      	ldr	r3, [pc, #400]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ed6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed70:	4a63      	ldr	r2, [pc, #396]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ed72:	f043 0301 	orr.w	r3, r3, #1
 800ed76:	6713      	str	r3, [r2, #112]	@ 0x70
 800ed78:	e01c      	b.n	800edb4 <HAL_RCC_OscConfig+0x324>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	689b      	ldr	r3, [r3, #8]
 800ed7e:	2b05      	cmp	r3, #5
 800ed80:	d10c      	bne.n	800ed9c <HAL_RCC_OscConfig+0x30c>
 800ed82:	4b5f      	ldr	r3, [pc, #380]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ed84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed86:	4a5e      	ldr	r2, [pc, #376]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ed88:	f043 0304 	orr.w	r3, r3, #4
 800ed8c:	6713      	str	r3, [r2, #112]	@ 0x70
 800ed8e:	4b5c      	ldr	r3, [pc, #368]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ed90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed92:	4a5b      	ldr	r2, [pc, #364]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ed94:	f043 0301 	orr.w	r3, r3, #1
 800ed98:	6713      	str	r3, [r2, #112]	@ 0x70
 800ed9a:	e00b      	b.n	800edb4 <HAL_RCC_OscConfig+0x324>
 800ed9c:	4b58      	ldr	r3, [pc, #352]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ed9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eda0:	4a57      	ldr	r2, [pc, #348]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800eda2:	f023 0301 	bic.w	r3, r3, #1
 800eda6:	6713      	str	r3, [r2, #112]	@ 0x70
 800eda8:	4b55      	ldr	r3, [pc, #340]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800edaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800edac:	4a54      	ldr	r2, [pc, #336]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800edae:	f023 0304 	bic.w	r3, r3, #4
 800edb2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	689b      	ldr	r3, [r3, #8]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d015      	beq.n	800ede8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800edbc:	f7fe f93a 	bl	800d034 <HAL_GetTick>
 800edc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800edc2:	e00a      	b.n	800edda <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800edc4:	f7fe f936 	bl	800d034 <HAL_GetTick>
 800edc8:	4602      	mov	r2, r0
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	1ad3      	subs	r3, r2, r3
 800edce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d901      	bls.n	800edda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800edd6:	2303      	movs	r3, #3
 800edd8:	e0cb      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800edda:	4b49      	ldr	r3, [pc, #292]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800eddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800edde:	f003 0302 	and.w	r3, r3, #2
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d0ee      	beq.n	800edc4 <HAL_RCC_OscConfig+0x334>
 800ede6:	e014      	b.n	800ee12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ede8:	f7fe f924 	bl	800d034 <HAL_GetTick>
 800edec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800edee:	e00a      	b.n	800ee06 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800edf0:	f7fe f920 	bl	800d034 <HAL_GetTick>
 800edf4:	4602      	mov	r2, r0
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	1ad3      	subs	r3, r2, r3
 800edfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d901      	bls.n	800ee06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ee02:	2303      	movs	r3, #3
 800ee04:	e0b5      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ee06:	4b3e      	ldr	r3, [pc, #248]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ee08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee0a:	f003 0302 	and.w	r3, r3, #2
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d1ee      	bne.n	800edf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ee12:	7dfb      	ldrb	r3, [r7, #23]
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d105      	bne.n	800ee24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ee18:	4b39      	ldr	r3, [pc, #228]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ee1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee1c:	4a38      	ldr	r2, [pc, #224]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ee1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ee22:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	699b      	ldr	r3, [r3, #24]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	f000 80a1 	beq.w	800ef70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ee2e:	4b34      	ldr	r3, [pc, #208]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ee30:	689b      	ldr	r3, [r3, #8]
 800ee32:	f003 030c 	and.w	r3, r3, #12
 800ee36:	2b08      	cmp	r3, #8
 800ee38:	d05c      	beq.n	800eef4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	699b      	ldr	r3, [r3, #24]
 800ee3e:	2b02      	cmp	r3, #2
 800ee40:	d141      	bne.n	800eec6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ee42:	4b31      	ldr	r3, [pc, #196]	@ (800ef08 <HAL_RCC_OscConfig+0x478>)
 800ee44:	2200      	movs	r2, #0
 800ee46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee48:	f7fe f8f4 	bl	800d034 <HAL_GetTick>
 800ee4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ee4e:	e008      	b.n	800ee62 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ee50:	f7fe f8f0 	bl	800d034 <HAL_GetTick>
 800ee54:	4602      	mov	r2, r0
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	2b02      	cmp	r3, #2
 800ee5c:	d901      	bls.n	800ee62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ee5e:	2303      	movs	r3, #3
 800ee60:	e087      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ee62:	4b27      	ldr	r3, [pc, #156]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d1f0      	bne.n	800ee50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	69da      	ldr	r2, [r3, #28]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6a1b      	ldr	r3, [r3, #32]
 800ee76:	431a      	orrs	r2, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee7c:	019b      	lsls	r3, r3, #6
 800ee7e:	431a      	orrs	r2, r3
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee84:	085b      	lsrs	r3, r3, #1
 800ee86:	3b01      	subs	r3, #1
 800ee88:	041b      	lsls	r3, r3, #16
 800ee8a:	431a      	orrs	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee90:	061b      	lsls	r3, r3, #24
 800ee92:	491b      	ldr	r1, [pc, #108]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800ee94:	4313      	orrs	r3, r2
 800ee96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ee98:	4b1b      	ldr	r3, [pc, #108]	@ (800ef08 <HAL_RCC_OscConfig+0x478>)
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee9e:	f7fe f8c9 	bl	800d034 <HAL_GetTick>
 800eea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eea4:	e008      	b.n	800eeb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eea6:	f7fe f8c5 	bl	800d034 <HAL_GetTick>
 800eeaa:	4602      	mov	r2, r0
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	2b02      	cmp	r3, #2
 800eeb2:	d901      	bls.n	800eeb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800eeb4:	2303      	movs	r3, #3
 800eeb6:	e05c      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eeb8:	4b11      	ldr	r3, [pc, #68]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d0f0      	beq.n	800eea6 <HAL_RCC_OscConfig+0x416>
 800eec4:	e054      	b.n	800ef70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eec6:	4b10      	ldr	r3, [pc, #64]	@ (800ef08 <HAL_RCC_OscConfig+0x478>)
 800eec8:	2200      	movs	r2, #0
 800eeca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eecc:	f7fe f8b2 	bl	800d034 <HAL_GetTick>
 800eed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eed2:	e008      	b.n	800eee6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eed4:	f7fe f8ae 	bl	800d034 <HAL_GetTick>
 800eed8:	4602      	mov	r2, r0
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	1ad3      	subs	r3, r2, r3
 800eede:	2b02      	cmp	r3, #2
 800eee0:	d901      	bls.n	800eee6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800eee2:	2303      	movs	r3, #3
 800eee4:	e045      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eee6:	4b06      	ldr	r3, [pc, #24]	@ (800ef00 <HAL_RCC_OscConfig+0x470>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d1f0      	bne.n	800eed4 <HAL_RCC_OscConfig+0x444>
 800eef2:	e03d      	b.n	800ef70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	699b      	ldr	r3, [r3, #24]
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d107      	bne.n	800ef0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800eefc:	2301      	movs	r3, #1
 800eefe:	e038      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
 800ef00:	40023800 	.word	0x40023800
 800ef04:	40007000 	.word	0x40007000
 800ef08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ef0c:	4b1b      	ldr	r3, [pc, #108]	@ (800ef7c <HAL_RCC_OscConfig+0x4ec>)
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	699b      	ldr	r3, [r3, #24]
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d028      	beq.n	800ef6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d121      	bne.n	800ef6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d11a      	bne.n	800ef6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ef36:	68fa      	ldr	r2, [r7, #12]
 800ef38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ef3c:	4013      	ands	r3, r2
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ef42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d111      	bne.n	800ef6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef52:	085b      	lsrs	r3, r3, #1
 800ef54:	3b01      	subs	r3, #1
 800ef56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d107      	bne.n	800ef6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d001      	beq.n	800ef70 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	e000      	b.n	800ef72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ef70:	2300      	movs	r3, #0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3718      	adds	r7, #24
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	40023800 	.word	0x40023800

0800ef80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d101      	bne.n	800ef94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ef90:	2301      	movs	r3, #1
 800ef92:	e0cc      	b.n	800f12e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ef94:	4b68      	ldr	r3, [pc, #416]	@ (800f138 <HAL_RCC_ClockConfig+0x1b8>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f003 0307 	and.w	r3, r3, #7
 800ef9c:	683a      	ldr	r2, [r7, #0]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d90c      	bls.n	800efbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800efa2:	4b65      	ldr	r3, [pc, #404]	@ (800f138 <HAL_RCC_ClockConfig+0x1b8>)
 800efa4:	683a      	ldr	r2, [r7, #0]
 800efa6:	b2d2      	uxtb	r2, r2
 800efa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800efaa:	4b63      	ldr	r3, [pc, #396]	@ (800f138 <HAL_RCC_ClockConfig+0x1b8>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f003 0307 	and.w	r3, r3, #7
 800efb2:	683a      	ldr	r2, [r7, #0]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d001      	beq.n	800efbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800efb8:	2301      	movs	r3, #1
 800efba:	e0b8      	b.n	800f12e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f003 0302 	and.w	r3, r3, #2
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d020      	beq.n	800f00a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f003 0304 	and.w	r3, r3, #4
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d005      	beq.n	800efe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800efd4:	4b59      	ldr	r3, [pc, #356]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	4a58      	ldr	r2, [pc, #352]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800efda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800efde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f003 0308 	and.w	r3, r3, #8
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d005      	beq.n	800eff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800efec:	4b53      	ldr	r3, [pc, #332]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800efee:	689b      	ldr	r3, [r3, #8]
 800eff0:	4a52      	ldr	r2, [pc, #328]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800eff2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800eff6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eff8:	4b50      	ldr	r3, [pc, #320]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800effa:	689b      	ldr	r3, [r3, #8]
 800effc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	689b      	ldr	r3, [r3, #8]
 800f004:	494d      	ldr	r1, [pc, #308]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800f006:	4313      	orrs	r3, r2
 800f008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f003 0301 	and.w	r3, r3, #1
 800f012:	2b00      	cmp	r3, #0
 800f014:	d044      	beq.n	800f0a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	d107      	bne.n	800f02e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f01e:	4b47      	ldr	r3, [pc, #284]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f026:	2b00      	cmp	r3, #0
 800f028:	d119      	bne.n	800f05e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f02a:	2301      	movs	r3, #1
 800f02c:	e07f      	b.n	800f12e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	2b02      	cmp	r3, #2
 800f034:	d003      	beq.n	800f03e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f03a:	2b03      	cmp	r3, #3
 800f03c:	d107      	bne.n	800f04e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f03e:	4b3f      	ldr	r3, [pc, #252]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f046:	2b00      	cmp	r3, #0
 800f048:	d109      	bne.n	800f05e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f04a:	2301      	movs	r3, #1
 800f04c:	e06f      	b.n	800f12e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f04e:	4b3b      	ldr	r3, [pc, #236]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	f003 0302 	and.w	r3, r3, #2
 800f056:	2b00      	cmp	r3, #0
 800f058:	d101      	bne.n	800f05e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f05a:	2301      	movs	r3, #1
 800f05c:	e067      	b.n	800f12e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f05e:	4b37      	ldr	r3, [pc, #220]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800f060:	689b      	ldr	r3, [r3, #8]
 800f062:	f023 0203 	bic.w	r2, r3, #3
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	4934      	ldr	r1, [pc, #208]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800f06c:	4313      	orrs	r3, r2
 800f06e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f070:	f7fd ffe0 	bl	800d034 <HAL_GetTick>
 800f074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f076:	e00a      	b.n	800f08e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f078:	f7fd ffdc 	bl	800d034 <HAL_GetTick>
 800f07c:	4602      	mov	r2, r0
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f086:	4293      	cmp	r3, r2
 800f088:	d901      	bls.n	800f08e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f08a:	2303      	movs	r3, #3
 800f08c:	e04f      	b.n	800f12e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f08e:	4b2b      	ldr	r3, [pc, #172]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800f090:	689b      	ldr	r3, [r3, #8]
 800f092:	f003 020c 	and.w	r2, r3, #12
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	009b      	lsls	r3, r3, #2
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d1eb      	bne.n	800f078 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f0a0:	4b25      	ldr	r3, [pc, #148]	@ (800f138 <HAL_RCC_ClockConfig+0x1b8>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f003 0307 	and.w	r3, r3, #7
 800f0a8:	683a      	ldr	r2, [r7, #0]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d20c      	bcs.n	800f0c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f0ae:	4b22      	ldr	r3, [pc, #136]	@ (800f138 <HAL_RCC_ClockConfig+0x1b8>)
 800f0b0:	683a      	ldr	r2, [r7, #0]
 800f0b2:	b2d2      	uxtb	r2, r2
 800f0b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f0b6:	4b20      	ldr	r3, [pc, #128]	@ (800f138 <HAL_RCC_ClockConfig+0x1b8>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	f003 0307 	and.w	r3, r3, #7
 800f0be:	683a      	ldr	r2, [r7, #0]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d001      	beq.n	800f0c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	e032      	b.n	800f12e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	f003 0304 	and.w	r3, r3, #4
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d008      	beq.n	800f0e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f0d4:	4b19      	ldr	r3, [pc, #100]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800f0d6:	689b      	ldr	r3, [r3, #8]
 800f0d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	68db      	ldr	r3, [r3, #12]
 800f0e0:	4916      	ldr	r1, [pc, #88]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800f0e2:	4313      	orrs	r3, r2
 800f0e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f003 0308 	and.w	r3, r3, #8
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d009      	beq.n	800f106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f0f2:	4b12      	ldr	r3, [pc, #72]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800f0f4:	689b      	ldr	r3, [r3, #8]
 800f0f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	691b      	ldr	r3, [r3, #16]
 800f0fe:	00db      	lsls	r3, r3, #3
 800f100:	490e      	ldr	r1, [pc, #56]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800f102:	4313      	orrs	r3, r2
 800f104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f106:	f000 f821 	bl	800f14c <HAL_RCC_GetSysClockFreq>
 800f10a:	4602      	mov	r2, r0
 800f10c:	4b0b      	ldr	r3, [pc, #44]	@ (800f13c <HAL_RCC_ClockConfig+0x1bc>)
 800f10e:	689b      	ldr	r3, [r3, #8]
 800f110:	091b      	lsrs	r3, r3, #4
 800f112:	f003 030f 	and.w	r3, r3, #15
 800f116:	490a      	ldr	r1, [pc, #40]	@ (800f140 <HAL_RCC_ClockConfig+0x1c0>)
 800f118:	5ccb      	ldrb	r3, [r1, r3]
 800f11a:	fa22 f303 	lsr.w	r3, r2, r3
 800f11e:	4a09      	ldr	r2, [pc, #36]	@ (800f144 <HAL_RCC_ClockConfig+0x1c4>)
 800f120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800f122:	4b09      	ldr	r3, [pc, #36]	@ (800f148 <HAL_RCC_ClockConfig+0x1c8>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	4618      	mov	r0, r3
 800f128:	f7fd ff40 	bl	800cfac <HAL_InitTick>

  return HAL_OK;
 800f12c:	2300      	movs	r3, #0
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3710      	adds	r7, #16
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	40023c00 	.word	0x40023c00
 800f13c:	40023800 	.word	0x40023800
 800f140:	08015f78 	.word	0x08015f78
 800f144:	200000c8 	.word	0x200000c8
 800f148:	200000dc 	.word	0x200000dc

0800f14c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f14c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f150:	b090      	sub	sp, #64	@ 0x40
 800f152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800f154:	2300      	movs	r3, #0
 800f156:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800f158:	2300      	movs	r3, #0
 800f15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800f15c:	2300      	movs	r3, #0
 800f15e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800f160:	2300      	movs	r3, #0
 800f162:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f164:	4b59      	ldr	r3, [pc, #356]	@ (800f2cc <HAL_RCC_GetSysClockFreq+0x180>)
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	f003 030c 	and.w	r3, r3, #12
 800f16c:	2b08      	cmp	r3, #8
 800f16e:	d00d      	beq.n	800f18c <HAL_RCC_GetSysClockFreq+0x40>
 800f170:	2b08      	cmp	r3, #8
 800f172:	f200 80a1 	bhi.w	800f2b8 <HAL_RCC_GetSysClockFreq+0x16c>
 800f176:	2b00      	cmp	r3, #0
 800f178:	d002      	beq.n	800f180 <HAL_RCC_GetSysClockFreq+0x34>
 800f17a:	2b04      	cmp	r3, #4
 800f17c:	d003      	beq.n	800f186 <HAL_RCC_GetSysClockFreq+0x3a>
 800f17e:	e09b      	b.n	800f2b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f180:	4b53      	ldr	r3, [pc, #332]	@ (800f2d0 <HAL_RCC_GetSysClockFreq+0x184>)
 800f182:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f184:	e09b      	b.n	800f2be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f186:	4b53      	ldr	r3, [pc, #332]	@ (800f2d4 <HAL_RCC_GetSysClockFreq+0x188>)
 800f188:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f18a:	e098      	b.n	800f2be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f18c:	4b4f      	ldr	r3, [pc, #316]	@ (800f2cc <HAL_RCC_GetSysClockFreq+0x180>)
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f194:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f196:	4b4d      	ldr	r3, [pc, #308]	@ (800f2cc <HAL_RCC_GetSysClockFreq+0x180>)
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d028      	beq.n	800f1f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f1a2:	4b4a      	ldr	r3, [pc, #296]	@ (800f2cc <HAL_RCC_GetSysClockFreq+0x180>)
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	099b      	lsrs	r3, r3, #6
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	623b      	str	r3, [r7, #32]
 800f1ac:	627a      	str	r2, [r7, #36]	@ 0x24
 800f1ae:	6a3b      	ldr	r3, [r7, #32]
 800f1b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800f1b4:	2100      	movs	r1, #0
 800f1b6:	4b47      	ldr	r3, [pc, #284]	@ (800f2d4 <HAL_RCC_GetSysClockFreq+0x188>)
 800f1b8:	fb03 f201 	mul.w	r2, r3, r1
 800f1bc:	2300      	movs	r3, #0
 800f1be:	fb00 f303 	mul.w	r3, r0, r3
 800f1c2:	4413      	add	r3, r2
 800f1c4:	4a43      	ldr	r2, [pc, #268]	@ (800f2d4 <HAL_RCC_GetSysClockFreq+0x188>)
 800f1c6:	fba0 1202 	umull	r1, r2, r0, r2
 800f1ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f1cc:	460a      	mov	r2, r1
 800f1ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f1d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1d2:	4413      	add	r3, r2
 800f1d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f1d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1d8:	2200      	movs	r2, #0
 800f1da:	61bb      	str	r3, [r7, #24]
 800f1dc:	61fa      	str	r2, [r7, #28]
 800f1de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f1e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800f1e6:	f7f1 fd9f 	bl	8000d28 <__aeabi_uldivmod>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	4613      	mov	r3, r2
 800f1f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1f2:	e053      	b.n	800f29c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f1f4:	4b35      	ldr	r3, [pc, #212]	@ (800f2cc <HAL_RCC_GetSysClockFreq+0x180>)
 800f1f6:	685b      	ldr	r3, [r3, #4]
 800f1f8:	099b      	lsrs	r3, r3, #6
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	613b      	str	r3, [r7, #16]
 800f1fe:	617a      	str	r2, [r7, #20]
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800f206:	f04f 0b00 	mov.w	fp, #0
 800f20a:	4652      	mov	r2, sl
 800f20c:	465b      	mov	r3, fp
 800f20e:	f04f 0000 	mov.w	r0, #0
 800f212:	f04f 0100 	mov.w	r1, #0
 800f216:	0159      	lsls	r1, r3, #5
 800f218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f21c:	0150      	lsls	r0, r2, #5
 800f21e:	4602      	mov	r2, r0
 800f220:	460b      	mov	r3, r1
 800f222:	ebb2 080a 	subs.w	r8, r2, sl
 800f226:	eb63 090b 	sbc.w	r9, r3, fp
 800f22a:	f04f 0200 	mov.w	r2, #0
 800f22e:	f04f 0300 	mov.w	r3, #0
 800f232:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800f236:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800f23a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800f23e:	ebb2 0408 	subs.w	r4, r2, r8
 800f242:	eb63 0509 	sbc.w	r5, r3, r9
 800f246:	f04f 0200 	mov.w	r2, #0
 800f24a:	f04f 0300 	mov.w	r3, #0
 800f24e:	00eb      	lsls	r3, r5, #3
 800f250:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f254:	00e2      	lsls	r2, r4, #3
 800f256:	4614      	mov	r4, r2
 800f258:	461d      	mov	r5, r3
 800f25a:	eb14 030a 	adds.w	r3, r4, sl
 800f25e:	603b      	str	r3, [r7, #0]
 800f260:	eb45 030b 	adc.w	r3, r5, fp
 800f264:	607b      	str	r3, [r7, #4]
 800f266:	f04f 0200 	mov.w	r2, #0
 800f26a:	f04f 0300 	mov.w	r3, #0
 800f26e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f272:	4629      	mov	r1, r5
 800f274:	028b      	lsls	r3, r1, #10
 800f276:	4621      	mov	r1, r4
 800f278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f27c:	4621      	mov	r1, r4
 800f27e:	028a      	lsls	r2, r1, #10
 800f280:	4610      	mov	r0, r2
 800f282:	4619      	mov	r1, r3
 800f284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f286:	2200      	movs	r2, #0
 800f288:	60bb      	str	r3, [r7, #8]
 800f28a:	60fa      	str	r2, [r7, #12]
 800f28c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f290:	f7f1 fd4a 	bl	8000d28 <__aeabi_uldivmod>
 800f294:	4602      	mov	r2, r0
 800f296:	460b      	mov	r3, r1
 800f298:	4613      	mov	r3, r2
 800f29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800f29c:	4b0b      	ldr	r3, [pc, #44]	@ (800f2cc <HAL_RCC_GetSysClockFreq+0x180>)
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	0c1b      	lsrs	r3, r3, #16
 800f2a2:	f003 0303 	and.w	r3, r3, #3
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	005b      	lsls	r3, r3, #1
 800f2aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800f2ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f2b6:	e002      	b.n	800f2be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f2b8:	4b05      	ldr	r3, [pc, #20]	@ (800f2d0 <HAL_RCC_GetSysClockFreq+0x184>)
 800f2ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f2bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3740      	adds	r7, #64	@ 0x40
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f2ca:	bf00      	nop
 800f2cc:	40023800 	.word	0x40023800
 800f2d0:	00f42400 	.word	0x00f42400
 800f2d4:	017d7840 	.word	0x017d7840

0800f2d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f2dc:	4b03      	ldr	r3, [pc, #12]	@ (800f2ec <HAL_RCC_GetHCLKFreq+0x14>)
 800f2de:	681b      	ldr	r3, [r3, #0]
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e8:	4770      	bx	lr
 800f2ea:	bf00      	nop
 800f2ec:	200000c8 	.word	0x200000c8

0800f2f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f2f4:	f7ff fff0 	bl	800f2d8 <HAL_RCC_GetHCLKFreq>
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	4b05      	ldr	r3, [pc, #20]	@ (800f310 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f2fc:	689b      	ldr	r3, [r3, #8]
 800f2fe:	0a9b      	lsrs	r3, r3, #10
 800f300:	f003 0307 	and.w	r3, r3, #7
 800f304:	4903      	ldr	r1, [pc, #12]	@ (800f314 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f306:	5ccb      	ldrb	r3, [r1, r3]
 800f308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	40023800 	.word	0x40023800
 800f314:	08015f88 	.word	0x08015f88

0800f318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f31c:	f7ff ffdc 	bl	800f2d8 <HAL_RCC_GetHCLKFreq>
 800f320:	4602      	mov	r2, r0
 800f322:	4b05      	ldr	r3, [pc, #20]	@ (800f338 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f324:	689b      	ldr	r3, [r3, #8]
 800f326:	0b5b      	lsrs	r3, r3, #13
 800f328:	f003 0307 	and.w	r3, r3, #7
 800f32c:	4903      	ldr	r1, [pc, #12]	@ (800f33c <HAL_RCC_GetPCLK2Freq+0x24>)
 800f32e:	5ccb      	ldrb	r3, [r1, r3]
 800f330:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f334:	4618      	mov	r0, r3
 800f336:	bd80      	pop	{r7, pc}
 800f338:	40023800 	.word	0x40023800
 800f33c:	08015f88 	.word	0x08015f88

0800f340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b082      	sub	sp, #8
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d101      	bne.n	800f352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f34e:	2301      	movs	r3, #1
 800f350:	e041      	b.n	800f3d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d106      	bne.n	800f36c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2200      	movs	r2, #0
 800f362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f7fc feba 	bl	800c0e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2202      	movs	r2, #2
 800f370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681a      	ldr	r2, [r3, #0]
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	3304      	adds	r3, #4
 800f37c:	4619      	mov	r1, r3
 800f37e:	4610      	mov	r0, r2
 800f380:	f000 fc76 	bl	800fc70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2201      	movs	r2, #1
 800f388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2201      	movs	r2, #1
 800f390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2201      	movs	r2, #1
 800f398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2201      	movs	r2, #1
 800f3a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2201      	movs	r2, #1
 800f3c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f3d4:	2300      	movs	r3, #0
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3708      	adds	r7, #8
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
	...

0800f3e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b085      	sub	sp, #20
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	2b01      	cmp	r3, #1
 800f3f2:	d001      	beq.n	800f3f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	e046      	b.n	800f486 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2202      	movs	r2, #2
 800f3fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	4a23      	ldr	r2, [pc, #140]	@ (800f494 <HAL_TIM_Base_Start+0xb4>)
 800f406:	4293      	cmp	r3, r2
 800f408:	d022      	beq.n	800f450 <HAL_TIM_Base_Start+0x70>
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f412:	d01d      	beq.n	800f450 <HAL_TIM_Base_Start+0x70>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	4a1f      	ldr	r2, [pc, #124]	@ (800f498 <HAL_TIM_Base_Start+0xb8>)
 800f41a:	4293      	cmp	r3, r2
 800f41c:	d018      	beq.n	800f450 <HAL_TIM_Base_Start+0x70>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	4a1e      	ldr	r2, [pc, #120]	@ (800f49c <HAL_TIM_Base_Start+0xbc>)
 800f424:	4293      	cmp	r3, r2
 800f426:	d013      	beq.n	800f450 <HAL_TIM_Base_Start+0x70>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	4a1c      	ldr	r2, [pc, #112]	@ (800f4a0 <HAL_TIM_Base_Start+0xc0>)
 800f42e:	4293      	cmp	r3, r2
 800f430:	d00e      	beq.n	800f450 <HAL_TIM_Base_Start+0x70>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4a1b      	ldr	r2, [pc, #108]	@ (800f4a4 <HAL_TIM_Base_Start+0xc4>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d009      	beq.n	800f450 <HAL_TIM_Base_Start+0x70>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	4a19      	ldr	r2, [pc, #100]	@ (800f4a8 <HAL_TIM_Base_Start+0xc8>)
 800f442:	4293      	cmp	r3, r2
 800f444:	d004      	beq.n	800f450 <HAL_TIM_Base_Start+0x70>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	4a18      	ldr	r2, [pc, #96]	@ (800f4ac <HAL_TIM_Base_Start+0xcc>)
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d111      	bne.n	800f474 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	689b      	ldr	r3, [r3, #8]
 800f456:	f003 0307 	and.w	r3, r3, #7
 800f45a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2b06      	cmp	r3, #6
 800f460:	d010      	beq.n	800f484 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	f042 0201 	orr.w	r2, r2, #1
 800f470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f472:	e007      	b.n	800f484 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	681a      	ldr	r2, [r3, #0]
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f042 0201 	orr.w	r2, r2, #1
 800f482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f484:	2300      	movs	r3, #0
}
 800f486:	4618      	mov	r0, r3
 800f488:	3714      	adds	r7, #20
 800f48a:	46bd      	mov	sp, r7
 800f48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f490:	4770      	bx	lr
 800f492:	bf00      	nop
 800f494:	40010000 	.word	0x40010000
 800f498:	40000400 	.word	0x40000400
 800f49c:	40000800 	.word	0x40000800
 800f4a0:	40000c00 	.word	0x40000c00
 800f4a4:	40010400 	.word	0x40010400
 800f4a8:	40014000 	.word	0x40014000
 800f4ac:	40001800 	.word	0x40001800

0800f4b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d101      	bne.n	800f4c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	e041      	b.n	800f546 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f4c8:	b2db      	uxtb	r3, r3
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d106      	bne.n	800f4dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f000 f839 	bl	800f54e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2202      	movs	r2, #2
 800f4e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681a      	ldr	r2, [r3, #0]
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	3304      	adds	r3, #4
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	4610      	mov	r0, r2
 800f4f0:	f000 fbbe 	bl	800fc70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2201      	movs	r2, #1
 800f500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2201      	movs	r2, #1
 800f508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2201      	movs	r2, #1
 800f510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2201      	movs	r2, #1
 800f518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2201      	movs	r2, #1
 800f520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2201      	movs	r2, #1
 800f528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2201      	movs	r2, #1
 800f530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2201      	movs	r2, #1
 800f538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2201      	movs	r2, #1
 800f540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f544:	2300      	movs	r3, #0
}
 800f546:	4618      	mov	r0, r3
 800f548:	3708      	adds	r7, #8
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}

0800f54e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f54e:	b480      	push	{r7}
 800f550:	b083      	sub	sp, #12
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f556:	bf00      	nop
 800f558:	370c      	adds	r7, #12
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr
	...

0800f564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b084      	sub	sp, #16
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
 800f56c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d109      	bne.n	800f588 <HAL_TIM_PWM_Start+0x24>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f57a:	b2db      	uxtb	r3, r3
 800f57c:	2b01      	cmp	r3, #1
 800f57e:	bf14      	ite	ne
 800f580:	2301      	movne	r3, #1
 800f582:	2300      	moveq	r3, #0
 800f584:	b2db      	uxtb	r3, r3
 800f586:	e022      	b.n	800f5ce <HAL_TIM_PWM_Start+0x6a>
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	2b04      	cmp	r3, #4
 800f58c:	d109      	bne.n	800f5a2 <HAL_TIM_PWM_Start+0x3e>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f594:	b2db      	uxtb	r3, r3
 800f596:	2b01      	cmp	r3, #1
 800f598:	bf14      	ite	ne
 800f59a:	2301      	movne	r3, #1
 800f59c:	2300      	moveq	r3, #0
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	e015      	b.n	800f5ce <HAL_TIM_PWM_Start+0x6a>
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	2b08      	cmp	r3, #8
 800f5a6:	d109      	bne.n	800f5bc <HAL_TIM_PWM_Start+0x58>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	bf14      	ite	ne
 800f5b4:	2301      	movne	r3, #1
 800f5b6:	2300      	moveq	r3, #0
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	e008      	b.n	800f5ce <HAL_TIM_PWM_Start+0x6a>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	bf14      	ite	ne
 800f5c8:	2301      	movne	r3, #1
 800f5ca:	2300      	moveq	r3, #0
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d001      	beq.n	800f5d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	e07c      	b.n	800f6d0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d104      	bne.n	800f5e6 <HAL_TIM_PWM_Start+0x82>
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2202      	movs	r2, #2
 800f5e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f5e4:	e013      	b.n	800f60e <HAL_TIM_PWM_Start+0xaa>
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	2b04      	cmp	r3, #4
 800f5ea:	d104      	bne.n	800f5f6 <HAL_TIM_PWM_Start+0x92>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2202      	movs	r2, #2
 800f5f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f5f4:	e00b      	b.n	800f60e <HAL_TIM_PWM_Start+0xaa>
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	2b08      	cmp	r3, #8
 800f5fa:	d104      	bne.n	800f606 <HAL_TIM_PWM_Start+0xa2>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2202      	movs	r2, #2
 800f600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f604:	e003      	b.n	800f60e <HAL_TIM_PWM_Start+0xaa>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2202      	movs	r2, #2
 800f60a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	2201      	movs	r2, #1
 800f614:	6839      	ldr	r1, [r7, #0]
 800f616:	4618      	mov	r0, r3
 800f618:	f000 fe20 	bl	801025c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4a2d      	ldr	r2, [pc, #180]	@ (800f6d8 <HAL_TIM_PWM_Start+0x174>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d004      	beq.n	800f630 <HAL_TIM_PWM_Start+0xcc>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	4a2c      	ldr	r2, [pc, #176]	@ (800f6dc <HAL_TIM_PWM_Start+0x178>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d101      	bne.n	800f634 <HAL_TIM_PWM_Start+0xd0>
 800f630:	2301      	movs	r3, #1
 800f632:	e000      	b.n	800f636 <HAL_TIM_PWM_Start+0xd2>
 800f634:	2300      	movs	r3, #0
 800f636:	2b00      	cmp	r3, #0
 800f638:	d007      	beq.n	800f64a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f648:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	4a22      	ldr	r2, [pc, #136]	@ (800f6d8 <HAL_TIM_PWM_Start+0x174>)
 800f650:	4293      	cmp	r3, r2
 800f652:	d022      	beq.n	800f69a <HAL_TIM_PWM_Start+0x136>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f65c:	d01d      	beq.n	800f69a <HAL_TIM_PWM_Start+0x136>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	4a1f      	ldr	r2, [pc, #124]	@ (800f6e0 <HAL_TIM_PWM_Start+0x17c>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d018      	beq.n	800f69a <HAL_TIM_PWM_Start+0x136>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	4a1d      	ldr	r2, [pc, #116]	@ (800f6e4 <HAL_TIM_PWM_Start+0x180>)
 800f66e:	4293      	cmp	r3, r2
 800f670:	d013      	beq.n	800f69a <HAL_TIM_PWM_Start+0x136>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	4a1c      	ldr	r2, [pc, #112]	@ (800f6e8 <HAL_TIM_PWM_Start+0x184>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d00e      	beq.n	800f69a <HAL_TIM_PWM_Start+0x136>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a16      	ldr	r2, [pc, #88]	@ (800f6dc <HAL_TIM_PWM_Start+0x178>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d009      	beq.n	800f69a <HAL_TIM_PWM_Start+0x136>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	4a18      	ldr	r2, [pc, #96]	@ (800f6ec <HAL_TIM_PWM_Start+0x188>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d004      	beq.n	800f69a <HAL_TIM_PWM_Start+0x136>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4a16      	ldr	r2, [pc, #88]	@ (800f6f0 <HAL_TIM_PWM_Start+0x18c>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d111      	bne.n	800f6be <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	689b      	ldr	r3, [r3, #8]
 800f6a0:	f003 0307 	and.w	r3, r3, #7
 800f6a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2b06      	cmp	r3, #6
 800f6aa:	d010      	beq.n	800f6ce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	681a      	ldr	r2, [r3, #0]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f042 0201 	orr.w	r2, r2, #1
 800f6ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6bc:	e007      	b.n	800f6ce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	681a      	ldr	r2, [r3, #0]
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	f042 0201 	orr.w	r2, r2, #1
 800f6cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f6ce:	2300      	movs	r3, #0
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3710      	adds	r7, #16
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}
 800f6d8:	40010000 	.word	0x40010000
 800f6dc:	40010400 	.word	0x40010400
 800f6e0:	40000400 	.word	0x40000400
 800f6e4:	40000800 	.word	0x40000800
 800f6e8:	40000c00 	.word	0x40000c00
 800f6ec:	40014000 	.word	0x40014000
 800f6f0:	40001800 	.word	0x40001800

0800f6f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b086      	sub	sp, #24
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d101      	bne.n	800f708 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f704:	2301      	movs	r3, #1
 800f706:	e097      	b.n	800f838 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f70e:	b2db      	uxtb	r3, r3
 800f710:	2b00      	cmp	r3, #0
 800f712:	d106      	bne.n	800f722 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2200      	movs	r2, #0
 800f718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f7fc fbd7 	bl	800bed0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2202      	movs	r2, #2
 800f726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	689b      	ldr	r3, [r3, #8]
 800f730:	687a      	ldr	r2, [r7, #4]
 800f732:	6812      	ldr	r2, [r2, #0]
 800f734:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f738:	f023 0307 	bic.w	r3, r3, #7
 800f73c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681a      	ldr	r2, [r3, #0]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	3304      	adds	r3, #4
 800f746:	4619      	mov	r1, r3
 800f748:	4610      	mov	r0, r2
 800f74a:	f000 fa91 	bl	800fc70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	689b      	ldr	r3, [r3, #8]
 800f754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	699b      	ldr	r3, [r3, #24]
 800f75c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	6a1b      	ldr	r3, [r3, #32]
 800f764:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	697a      	ldr	r2, [r7, #20]
 800f76c:	4313      	orrs	r3, r2
 800f76e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f776:	f023 0303 	bic.w	r3, r3, #3
 800f77a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	689a      	ldr	r2, [r3, #8]
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	699b      	ldr	r3, [r3, #24]
 800f784:	021b      	lsls	r3, r3, #8
 800f786:	4313      	orrs	r3, r2
 800f788:	693a      	ldr	r2, [r7, #16]
 800f78a:	4313      	orrs	r3, r2
 800f78c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800f794:	f023 030c 	bic.w	r3, r3, #12
 800f798:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f7a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f7a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	68da      	ldr	r2, [r3, #12]
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	69db      	ldr	r3, [r3, #28]
 800f7ae:	021b      	lsls	r3, r3, #8
 800f7b0:	4313      	orrs	r3, r2
 800f7b2:	693a      	ldr	r2, [r7, #16]
 800f7b4:	4313      	orrs	r3, r2
 800f7b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	691b      	ldr	r3, [r3, #16]
 800f7bc:	011a      	lsls	r2, r3, #4
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	6a1b      	ldr	r3, [r3, #32]
 800f7c2:	031b      	lsls	r3, r3, #12
 800f7c4:	4313      	orrs	r3, r2
 800f7c6:	693a      	ldr	r2, [r7, #16]
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800f7d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800f7da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	685a      	ldr	r2, [r3, #4]
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	695b      	ldr	r3, [r3, #20]
 800f7e4:	011b      	lsls	r3, r3, #4
 800f7e6:	4313      	orrs	r3, r2
 800f7e8:	68fa      	ldr	r2, [r7, #12]
 800f7ea:	4313      	orrs	r3, r2
 800f7ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	697a      	ldr	r2, [r7, #20]
 800f7f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	693a      	ldr	r2, [r7, #16]
 800f7fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	68fa      	ldr	r2, [r7, #12]
 800f804:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2201      	movs	r2, #1
 800f80a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2201      	movs	r2, #1
 800f812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2201      	movs	r2, #1
 800f81a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2201      	movs	r2, #1
 800f822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2201      	movs	r2, #1
 800f82a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2201      	movs	r2, #1
 800f832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f836:	2300      	movs	r3, #0
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3718      	adds	r7, #24
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b084      	sub	sp, #16
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f850:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f858:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f860:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f868:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d110      	bne.n	800f892 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f870:	7bfb      	ldrb	r3, [r7, #15]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d102      	bne.n	800f87c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800f876:	7b7b      	ldrb	r3, [r7, #13]
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d001      	beq.n	800f880 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800f87c:	2301      	movs	r3, #1
 800f87e:	e069      	b.n	800f954 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2202      	movs	r2, #2
 800f884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2202      	movs	r2, #2
 800f88c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f890:	e031      	b.n	800f8f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	2b04      	cmp	r3, #4
 800f896:	d110      	bne.n	800f8ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800f898:	7bbb      	ldrb	r3, [r7, #14]
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	d102      	bne.n	800f8a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f89e:	7b3b      	ldrb	r3, [r7, #12]
 800f8a0:	2b01      	cmp	r3, #1
 800f8a2:	d001      	beq.n	800f8a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	e055      	b.n	800f954 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2202      	movs	r2, #2
 800f8ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2202      	movs	r2, #2
 800f8b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f8b8:	e01d      	b.n	800f8f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f8ba:	7bfb      	ldrb	r3, [r7, #15]
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	d108      	bne.n	800f8d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800f8c0:	7bbb      	ldrb	r3, [r7, #14]
 800f8c2:	2b01      	cmp	r3, #1
 800f8c4:	d105      	bne.n	800f8d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f8c6:	7b7b      	ldrb	r3, [r7, #13]
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	d102      	bne.n	800f8d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f8cc:	7b3b      	ldrb	r3, [r7, #12]
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	d001      	beq.n	800f8d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	e03e      	b.n	800f954 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2202      	movs	r2, #2
 800f8da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2202      	movs	r2, #2
 800f8e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2202      	movs	r2, #2
 800f8ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2202      	movs	r2, #2
 800f8f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d003      	beq.n	800f904 <HAL_TIM_Encoder_Start+0xc4>
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	2b04      	cmp	r3, #4
 800f900:	d008      	beq.n	800f914 <HAL_TIM_Encoder_Start+0xd4>
 800f902:	e00f      	b.n	800f924 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	2201      	movs	r2, #1
 800f90a:	2100      	movs	r1, #0
 800f90c:	4618      	mov	r0, r3
 800f90e:	f000 fca5 	bl	801025c <TIM_CCxChannelCmd>
      break;
 800f912:	e016      	b.n	800f942 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	2201      	movs	r2, #1
 800f91a:	2104      	movs	r1, #4
 800f91c:	4618      	mov	r0, r3
 800f91e:	f000 fc9d 	bl	801025c <TIM_CCxChannelCmd>
      break;
 800f922:	e00e      	b.n	800f942 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	2201      	movs	r2, #1
 800f92a:	2100      	movs	r1, #0
 800f92c:	4618      	mov	r0, r3
 800f92e:	f000 fc95 	bl	801025c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2201      	movs	r2, #1
 800f938:	2104      	movs	r1, #4
 800f93a:	4618      	mov	r0, r3
 800f93c:	f000 fc8e 	bl	801025c <TIM_CCxChannelCmd>
      break;
 800f940:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	681a      	ldr	r2, [r3, #0]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f042 0201 	orr.w	r2, r2, #1
 800f950:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f952:	2300      	movs	r3, #0
}
 800f954:	4618      	mov	r0, r3
 800f956:	3710      	adds	r7, #16
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b086      	sub	sp, #24
 800f960:	af00      	add	r7, sp, #0
 800f962:	60f8      	str	r0, [r7, #12]
 800f964:	60b9      	str	r1, [r7, #8]
 800f966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f968:	2300      	movs	r3, #0
 800f96a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f972:	2b01      	cmp	r3, #1
 800f974:	d101      	bne.n	800f97a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f976:	2302      	movs	r3, #2
 800f978:	e0ae      	b.n	800fad8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	2201      	movs	r2, #1
 800f97e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2b0c      	cmp	r3, #12
 800f986:	f200 809f 	bhi.w	800fac8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800f98a:	a201      	add	r2, pc, #4	@ (adr r2, 800f990 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f990:	0800f9c5 	.word	0x0800f9c5
 800f994:	0800fac9 	.word	0x0800fac9
 800f998:	0800fac9 	.word	0x0800fac9
 800f99c:	0800fac9 	.word	0x0800fac9
 800f9a0:	0800fa05 	.word	0x0800fa05
 800f9a4:	0800fac9 	.word	0x0800fac9
 800f9a8:	0800fac9 	.word	0x0800fac9
 800f9ac:	0800fac9 	.word	0x0800fac9
 800f9b0:	0800fa47 	.word	0x0800fa47
 800f9b4:	0800fac9 	.word	0x0800fac9
 800f9b8:	0800fac9 	.word	0x0800fac9
 800f9bc:	0800fac9 	.word	0x0800fac9
 800f9c0:	0800fa87 	.word	0x0800fa87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	68b9      	ldr	r1, [r7, #8]
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f000 f9fc 	bl	800fdc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	699a      	ldr	r2, [r3, #24]
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	f042 0208 	orr.w	r2, r2, #8
 800f9de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	699a      	ldr	r2, [r3, #24]
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f022 0204 	bic.w	r2, r2, #4
 800f9ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	6999      	ldr	r1, [r3, #24]
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	691a      	ldr	r2, [r3, #16]
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	430a      	orrs	r2, r1
 800fa00:	619a      	str	r2, [r3, #24]
      break;
 800fa02:	e064      	b.n	800face <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	68b9      	ldr	r1, [r7, #8]
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f000 fa4c 	bl	800fea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	699a      	ldr	r2, [r3, #24]
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fa1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	699a      	ldr	r2, [r3, #24]
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fa2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	6999      	ldr	r1, [r3, #24]
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	691b      	ldr	r3, [r3, #16]
 800fa3a:	021a      	lsls	r2, r3, #8
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	430a      	orrs	r2, r1
 800fa42:	619a      	str	r2, [r3, #24]
      break;
 800fa44:	e043      	b.n	800face <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	68b9      	ldr	r1, [r7, #8]
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f000 faa1 	bl	800ff94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	69da      	ldr	r2, [r3, #28]
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	f042 0208 	orr.w	r2, r2, #8
 800fa60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	69da      	ldr	r2, [r3, #28]
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	f022 0204 	bic.w	r2, r2, #4
 800fa70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	69d9      	ldr	r1, [r3, #28]
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	691a      	ldr	r2, [r3, #16]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	430a      	orrs	r2, r1
 800fa82:	61da      	str	r2, [r3, #28]
      break;
 800fa84:	e023      	b.n	800face <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	68b9      	ldr	r1, [r7, #8]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f000 faf5 	bl	801007c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	69da      	ldr	r2, [r3, #28]
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800faa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	69da      	ldr	r2, [r3, #28]
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800fab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	69d9      	ldr	r1, [r3, #28]
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	691b      	ldr	r3, [r3, #16]
 800fabc:	021a      	lsls	r2, r3, #8
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	430a      	orrs	r2, r1
 800fac4:	61da      	str	r2, [r3, #28]
      break;
 800fac6:	e002      	b.n	800face <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800fac8:	2301      	movs	r3, #1
 800faca:	75fb      	strb	r3, [r7, #23]
      break;
 800facc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	2200      	movs	r2, #0
 800fad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fad6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3718      	adds	r7, #24
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b084      	sub	sp, #16
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800faea:	2300      	movs	r3, #0
 800faec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800faf4:	2b01      	cmp	r3, #1
 800faf6:	d101      	bne.n	800fafc <HAL_TIM_ConfigClockSource+0x1c>
 800faf8:	2302      	movs	r3, #2
 800fafa:	e0b4      	b.n	800fc66 <HAL_TIM_ConfigClockSource+0x186>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2201      	movs	r2, #1
 800fb00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2202      	movs	r2, #2
 800fb08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	689b      	ldr	r3, [r3, #8]
 800fb12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fb1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fb22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	68ba      	ldr	r2, [r7, #8]
 800fb2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fb34:	d03e      	beq.n	800fbb4 <HAL_TIM_ConfigClockSource+0xd4>
 800fb36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fb3a:	f200 8087 	bhi.w	800fc4c <HAL_TIM_ConfigClockSource+0x16c>
 800fb3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb42:	f000 8086 	beq.w	800fc52 <HAL_TIM_ConfigClockSource+0x172>
 800fb46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb4a:	d87f      	bhi.n	800fc4c <HAL_TIM_ConfigClockSource+0x16c>
 800fb4c:	2b70      	cmp	r3, #112	@ 0x70
 800fb4e:	d01a      	beq.n	800fb86 <HAL_TIM_ConfigClockSource+0xa6>
 800fb50:	2b70      	cmp	r3, #112	@ 0x70
 800fb52:	d87b      	bhi.n	800fc4c <HAL_TIM_ConfigClockSource+0x16c>
 800fb54:	2b60      	cmp	r3, #96	@ 0x60
 800fb56:	d050      	beq.n	800fbfa <HAL_TIM_ConfigClockSource+0x11a>
 800fb58:	2b60      	cmp	r3, #96	@ 0x60
 800fb5a:	d877      	bhi.n	800fc4c <HAL_TIM_ConfigClockSource+0x16c>
 800fb5c:	2b50      	cmp	r3, #80	@ 0x50
 800fb5e:	d03c      	beq.n	800fbda <HAL_TIM_ConfigClockSource+0xfa>
 800fb60:	2b50      	cmp	r3, #80	@ 0x50
 800fb62:	d873      	bhi.n	800fc4c <HAL_TIM_ConfigClockSource+0x16c>
 800fb64:	2b40      	cmp	r3, #64	@ 0x40
 800fb66:	d058      	beq.n	800fc1a <HAL_TIM_ConfigClockSource+0x13a>
 800fb68:	2b40      	cmp	r3, #64	@ 0x40
 800fb6a:	d86f      	bhi.n	800fc4c <HAL_TIM_ConfigClockSource+0x16c>
 800fb6c:	2b30      	cmp	r3, #48	@ 0x30
 800fb6e:	d064      	beq.n	800fc3a <HAL_TIM_ConfigClockSource+0x15a>
 800fb70:	2b30      	cmp	r3, #48	@ 0x30
 800fb72:	d86b      	bhi.n	800fc4c <HAL_TIM_ConfigClockSource+0x16c>
 800fb74:	2b20      	cmp	r3, #32
 800fb76:	d060      	beq.n	800fc3a <HAL_TIM_ConfigClockSource+0x15a>
 800fb78:	2b20      	cmp	r3, #32
 800fb7a:	d867      	bhi.n	800fc4c <HAL_TIM_ConfigClockSource+0x16c>
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d05c      	beq.n	800fc3a <HAL_TIM_ConfigClockSource+0x15a>
 800fb80:	2b10      	cmp	r3, #16
 800fb82:	d05a      	beq.n	800fc3a <HAL_TIM_ConfigClockSource+0x15a>
 800fb84:	e062      	b.n	800fc4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fb96:	f000 fb41 	bl	801021c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fba8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	68ba      	ldr	r2, [r7, #8]
 800fbb0:	609a      	str	r2, [r3, #8]
      break;
 800fbb2:	e04f      	b.n	800fc54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fbc4:	f000 fb2a 	bl	801021c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	689a      	ldr	r2, [r3, #8]
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fbd6:	609a      	str	r2, [r3, #8]
      break;
 800fbd8:	e03c      	b.n	800fc54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	f000 fa9e 	bl	8010128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2150      	movs	r1, #80	@ 0x50
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f000 faf7 	bl	80101e6 <TIM_ITRx_SetConfig>
      break;
 800fbf8:	e02c      	b.n	800fc54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fc06:	461a      	mov	r2, r3
 800fc08:	f000 fabd 	bl	8010186 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	2160      	movs	r1, #96	@ 0x60
 800fc12:	4618      	mov	r0, r3
 800fc14:	f000 fae7 	bl	80101e6 <TIM_ITRx_SetConfig>
      break;
 800fc18:	e01c      	b.n	800fc54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc26:	461a      	mov	r2, r3
 800fc28:	f000 fa7e 	bl	8010128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2140      	movs	r1, #64	@ 0x40
 800fc32:	4618      	mov	r0, r3
 800fc34:	f000 fad7 	bl	80101e6 <TIM_ITRx_SetConfig>
      break;
 800fc38:	e00c      	b.n	800fc54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681a      	ldr	r2, [r3, #0]
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	4619      	mov	r1, r3
 800fc44:	4610      	mov	r0, r2
 800fc46:	f000 face 	bl	80101e6 <TIM_ITRx_SetConfig>
      break;
 800fc4a:	e003      	b.n	800fc54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	73fb      	strb	r3, [r7, #15]
      break;
 800fc50:	e000      	b.n	800fc54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800fc52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2201      	movs	r2, #1
 800fc58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3710      	adds	r7, #16
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}
	...

0800fc70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b085      	sub	sp, #20
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	4a46      	ldr	r2, [pc, #280]	@ (800fd9c <TIM_Base_SetConfig+0x12c>)
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d013      	beq.n	800fcb0 <TIM_Base_SetConfig+0x40>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc8e:	d00f      	beq.n	800fcb0 <TIM_Base_SetConfig+0x40>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	4a43      	ldr	r2, [pc, #268]	@ (800fda0 <TIM_Base_SetConfig+0x130>)
 800fc94:	4293      	cmp	r3, r2
 800fc96:	d00b      	beq.n	800fcb0 <TIM_Base_SetConfig+0x40>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	4a42      	ldr	r2, [pc, #264]	@ (800fda4 <TIM_Base_SetConfig+0x134>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d007      	beq.n	800fcb0 <TIM_Base_SetConfig+0x40>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	4a41      	ldr	r2, [pc, #260]	@ (800fda8 <TIM_Base_SetConfig+0x138>)
 800fca4:	4293      	cmp	r3, r2
 800fca6:	d003      	beq.n	800fcb0 <TIM_Base_SetConfig+0x40>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	4a40      	ldr	r2, [pc, #256]	@ (800fdac <TIM_Base_SetConfig+0x13c>)
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d108      	bne.n	800fcc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fcb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	68fa      	ldr	r2, [r7, #12]
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	4a35      	ldr	r2, [pc, #212]	@ (800fd9c <TIM_Base_SetConfig+0x12c>)
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d02b      	beq.n	800fd22 <TIM_Base_SetConfig+0xb2>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fcd0:	d027      	beq.n	800fd22 <TIM_Base_SetConfig+0xb2>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	4a32      	ldr	r2, [pc, #200]	@ (800fda0 <TIM_Base_SetConfig+0x130>)
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d023      	beq.n	800fd22 <TIM_Base_SetConfig+0xb2>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	4a31      	ldr	r2, [pc, #196]	@ (800fda4 <TIM_Base_SetConfig+0x134>)
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d01f      	beq.n	800fd22 <TIM_Base_SetConfig+0xb2>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	4a30      	ldr	r2, [pc, #192]	@ (800fda8 <TIM_Base_SetConfig+0x138>)
 800fce6:	4293      	cmp	r3, r2
 800fce8:	d01b      	beq.n	800fd22 <TIM_Base_SetConfig+0xb2>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	4a2f      	ldr	r2, [pc, #188]	@ (800fdac <TIM_Base_SetConfig+0x13c>)
 800fcee:	4293      	cmp	r3, r2
 800fcf0:	d017      	beq.n	800fd22 <TIM_Base_SetConfig+0xb2>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	4a2e      	ldr	r2, [pc, #184]	@ (800fdb0 <TIM_Base_SetConfig+0x140>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d013      	beq.n	800fd22 <TIM_Base_SetConfig+0xb2>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	4a2d      	ldr	r2, [pc, #180]	@ (800fdb4 <TIM_Base_SetConfig+0x144>)
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d00f      	beq.n	800fd22 <TIM_Base_SetConfig+0xb2>
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	4a2c      	ldr	r2, [pc, #176]	@ (800fdb8 <TIM_Base_SetConfig+0x148>)
 800fd06:	4293      	cmp	r3, r2
 800fd08:	d00b      	beq.n	800fd22 <TIM_Base_SetConfig+0xb2>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	4a2b      	ldr	r2, [pc, #172]	@ (800fdbc <TIM_Base_SetConfig+0x14c>)
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d007      	beq.n	800fd22 <TIM_Base_SetConfig+0xb2>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	4a2a      	ldr	r2, [pc, #168]	@ (800fdc0 <TIM_Base_SetConfig+0x150>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d003      	beq.n	800fd22 <TIM_Base_SetConfig+0xb2>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	4a29      	ldr	r2, [pc, #164]	@ (800fdc4 <TIM_Base_SetConfig+0x154>)
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	d108      	bne.n	800fd34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fd28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	68db      	ldr	r3, [r3, #12]
 800fd2e:	68fa      	ldr	r2, [r7, #12]
 800fd30:	4313      	orrs	r3, r2
 800fd32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	695b      	ldr	r3, [r3, #20]
 800fd3e:	4313      	orrs	r3, r2
 800fd40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	68fa      	ldr	r2, [r7, #12]
 800fd46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	689a      	ldr	r2, [r3, #8]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4a10      	ldr	r2, [pc, #64]	@ (800fd9c <TIM_Base_SetConfig+0x12c>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d003      	beq.n	800fd68 <TIM_Base_SetConfig+0xf8>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4a12      	ldr	r2, [pc, #72]	@ (800fdac <TIM_Base_SetConfig+0x13c>)
 800fd64:	4293      	cmp	r3, r2
 800fd66:	d103      	bne.n	800fd70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	691a      	ldr	r2, [r3, #16]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2201      	movs	r2, #1
 800fd74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	691b      	ldr	r3, [r3, #16]
 800fd7a:	f003 0301 	and.w	r3, r3, #1
 800fd7e:	2b01      	cmp	r3, #1
 800fd80:	d105      	bne.n	800fd8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	691b      	ldr	r3, [r3, #16]
 800fd86:	f023 0201 	bic.w	r2, r3, #1
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	611a      	str	r2, [r3, #16]
  }
}
 800fd8e:	bf00      	nop
 800fd90:	3714      	adds	r7, #20
 800fd92:	46bd      	mov	sp, r7
 800fd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd98:	4770      	bx	lr
 800fd9a:	bf00      	nop
 800fd9c:	40010000 	.word	0x40010000
 800fda0:	40000400 	.word	0x40000400
 800fda4:	40000800 	.word	0x40000800
 800fda8:	40000c00 	.word	0x40000c00
 800fdac:	40010400 	.word	0x40010400
 800fdb0:	40014000 	.word	0x40014000
 800fdb4:	40014400 	.word	0x40014400
 800fdb8:	40014800 	.word	0x40014800
 800fdbc:	40001800 	.word	0x40001800
 800fdc0:	40001c00 	.word	0x40001c00
 800fdc4:	40002000 	.word	0x40002000

0800fdc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b087      	sub	sp, #28
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6a1b      	ldr	r3, [r3, #32]
 800fdd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6a1b      	ldr	r3, [r3, #32]
 800fddc:	f023 0201 	bic.w	r2, r3, #1
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	685b      	ldr	r3, [r3, #4]
 800fde8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	699b      	ldr	r3, [r3, #24]
 800fdee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fdf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f023 0303 	bic.w	r3, r3, #3
 800fdfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	68fa      	ldr	r2, [r7, #12]
 800fe06:	4313      	orrs	r3, r2
 800fe08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	f023 0302 	bic.w	r3, r3, #2
 800fe10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	697a      	ldr	r2, [r7, #20]
 800fe18:	4313      	orrs	r3, r2
 800fe1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	4a20      	ldr	r2, [pc, #128]	@ (800fea0 <TIM_OC1_SetConfig+0xd8>)
 800fe20:	4293      	cmp	r3, r2
 800fe22:	d003      	beq.n	800fe2c <TIM_OC1_SetConfig+0x64>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	4a1f      	ldr	r2, [pc, #124]	@ (800fea4 <TIM_OC1_SetConfig+0xdc>)
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d10c      	bne.n	800fe46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	f023 0308 	bic.w	r3, r3, #8
 800fe32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	68db      	ldr	r3, [r3, #12]
 800fe38:	697a      	ldr	r2, [r7, #20]
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	f023 0304 	bic.w	r3, r3, #4
 800fe44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	4a15      	ldr	r2, [pc, #84]	@ (800fea0 <TIM_OC1_SetConfig+0xd8>)
 800fe4a:	4293      	cmp	r3, r2
 800fe4c:	d003      	beq.n	800fe56 <TIM_OC1_SetConfig+0x8e>
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	4a14      	ldr	r2, [pc, #80]	@ (800fea4 <TIM_OC1_SetConfig+0xdc>)
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d111      	bne.n	800fe7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fe5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fe64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	695b      	ldr	r3, [r3, #20]
 800fe6a:	693a      	ldr	r2, [r7, #16]
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	699b      	ldr	r3, [r3, #24]
 800fe74:	693a      	ldr	r2, [r7, #16]
 800fe76:	4313      	orrs	r3, r2
 800fe78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	693a      	ldr	r2, [r7, #16]
 800fe7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	68fa      	ldr	r2, [r7, #12]
 800fe84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	685a      	ldr	r2, [r3, #4]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	697a      	ldr	r2, [r7, #20]
 800fe92:	621a      	str	r2, [r3, #32]
}
 800fe94:	bf00      	nop
 800fe96:	371c      	adds	r7, #28
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9e:	4770      	bx	lr
 800fea0:	40010000 	.word	0x40010000
 800fea4:	40010400 	.word	0x40010400

0800fea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b087      	sub	sp, #28
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6a1b      	ldr	r3, [r3, #32]
 800feb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6a1b      	ldr	r3, [r3, #32]
 800febc:	f023 0210 	bic.w	r2, r3, #16
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	685b      	ldr	r3, [r3, #4]
 800fec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	699b      	ldr	r3, [r3, #24]
 800fece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	021b      	lsls	r3, r3, #8
 800fee6:	68fa      	ldr	r2, [r7, #12]
 800fee8:	4313      	orrs	r3, r2
 800feea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	f023 0320 	bic.w	r3, r3, #32
 800fef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	689b      	ldr	r3, [r3, #8]
 800fef8:	011b      	lsls	r3, r3, #4
 800fefa:	697a      	ldr	r2, [r7, #20]
 800fefc:	4313      	orrs	r3, r2
 800fefe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	4a22      	ldr	r2, [pc, #136]	@ (800ff8c <TIM_OC2_SetConfig+0xe4>)
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d003      	beq.n	800ff10 <TIM_OC2_SetConfig+0x68>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	4a21      	ldr	r2, [pc, #132]	@ (800ff90 <TIM_OC2_SetConfig+0xe8>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d10d      	bne.n	800ff2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ff16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	68db      	ldr	r3, [r3, #12]
 800ff1c:	011b      	lsls	r3, r3, #4
 800ff1e:	697a      	ldr	r2, [r7, #20]
 800ff20:	4313      	orrs	r3, r2
 800ff22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ff2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	4a17      	ldr	r2, [pc, #92]	@ (800ff8c <TIM_OC2_SetConfig+0xe4>)
 800ff30:	4293      	cmp	r3, r2
 800ff32:	d003      	beq.n	800ff3c <TIM_OC2_SetConfig+0x94>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	4a16      	ldr	r2, [pc, #88]	@ (800ff90 <TIM_OC2_SetConfig+0xe8>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d113      	bne.n	800ff64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ff42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ff4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	695b      	ldr	r3, [r3, #20]
 800ff50:	009b      	lsls	r3, r3, #2
 800ff52:	693a      	ldr	r2, [r7, #16]
 800ff54:	4313      	orrs	r3, r2
 800ff56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	699b      	ldr	r3, [r3, #24]
 800ff5c:	009b      	lsls	r3, r3, #2
 800ff5e:	693a      	ldr	r2, [r7, #16]
 800ff60:	4313      	orrs	r3, r2
 800ff62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	693a      	ldr	r2, [r7, #16]
 800ff68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	68fa      	ldr	r2, [r7, #12]
 800ff6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	685a      	ldr	r2, [r3, #4]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	697a      	ldr	r2, [r7, #20]
 800ff7c:	621a      	str	r2, [r3, #32]
}
 800ff7e:	bf00      	nop
 800ff80:	371c      	adds	r7, #28
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr
 800ff8a:	bf00      	nop
 800ff8c:	40010000 	.word	0x40010000
 800ff90:	40010400 	.word	0x40010400

0800ff94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ff94:	b480      	push	{r7}
 800ff96:	b087      	sub	sp, #28
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6a1b      	ldr	r3, [r3, #32]
 800ffa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6a1b      	ldr	r3, [r3, #32]
 800ffa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	69db      	ldr	r3, [r3, #28]
 800ffba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ffc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f023 0303 	bic.w	r3, r3, #3
 800ffca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	68fa      	ldr	r2, [r7, #12]
 800ffd2:	4313      	orrs	r3, r2
 800ffd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ffdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	689b      	ldr	r3, [r3, #8]
 800ffe2:	021b      	lsls	r3, r3, #8
 800ffe4:	697a      	ldr	r2, [r7, #20]
 800ffe6:	4313      	orrs	r3, r2
 800ffe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	4a21      	ldr	r2, [pc, #132]	@ (8010074 <TIM_OC3_SetConfig+0xe0>)
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d003      	beq.n	800fffa <TIM_OC3_SetConfig+0x66>
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	4a20      	ldr	r2, [pc, #128]	@ (8010078 <TIM_OC3_SetConfig+0xe4>)
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d10d      	bne.n	8010016 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	68db      	ldr	r3, [r3, #12]
 8010006:	021b      	lsls	r3, r3, #8
 8010008:	697a      	ldr	r2, [r7, #20]
 801000a:	4313      	orrs	r3, r2
 801000c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	4a16      	ldr	r2, [pc, #88]	@ (8010074 <TIM_OC3_SetConfig+0xe0>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d003      	beq.n	8010026 <TIM_OC3_SetConfig+0x92>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	4a15      	ldr	r2, [pc, #84]	@ (8010078 <TIM_OC3_SetConfig+0xe4>)
 8010022:	4293      	cmp	r3, r2
 8010024:	d113      	bne.n	801004e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801002c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	695b      	ldr	r3, [r3, #20]
 801003a:	011b      	lsls	r3, r3, #4
 801003c:	693a      	ldr	r2, [r7, #16]
 801003e:	4313      	orrs	r3, r2
 8010040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	699b      	ldr	r3, [r3, #24]
 8010046:	011b      	lsls	r3, r3, #4
 8010048:	693a      	ldr	r2, [r7, #16]
 801004a:	4313      	orrs	r3, r2
 801004c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	693a      	ldr	r2, [r7, #16]
 8010052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	68fa      	ldr	r2, [r7, #12]
 8010058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	685a      	ldr	r2, [r3, #4]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	697a      	ldr	r2, [r7, #20]
 8010066:	621a      	str	r2, [r3, #32]
}
 8010068:	bf00      	nop
 801006a:	371c      	adds	r7, #28
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr
 8010074:	40010000 	.word	0x40010000
 8010078:	40010400 	.word	0x40010400

0801007c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801007c:	b480      	push	{r7}
 801007e:	b087      	sub	sp, #28
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6a1b      	ldr	r3, [r3, #32]
 801008a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6a1b      	ldr	r3, [r3, #32]
 8010090:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	69db      	ldr	r3, [r3, #28]
 80100a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80100aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80100b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	021b      	lsls	r3, r3, #8
 80100ba:	68fa      	ldr	r2, [r7, #12]
 80100bc:	4313      	orrs	r3, r2
 80100be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80100c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	689b      	ldr	r3, [r3, #8]
 80100cc:	031b      	lsls	r3, r3, #12
 80100ce:	693a      	ldr	r2, [r7, #16]
 80100d0:	4313      	orrs	r3, r2
 80100d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	4a12      	ldr	r2, [pc, #72]	@ (8010120 <TIM_OC4_SetConfig+0xa4>)
 80100d8:	4293      	cmp	r3, r2
 80100da:	d003      	beq.n	80100e4 <TIM_OC4_SetConfig+0x68>
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	4a11      	ldr	r2, [pc, #68]	@ (8010124 <TIM_OC4_SetConfig+0xa8>)
 80100e0:	4293      	cmp	r3, r2
 80100e2:	d109      	bne.n	80100f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80100ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	695b      	ldr	r3, [r3, #20]
 80100f0:	019b      	lsls	r3, r3, #6
 80100f2:	697a      	ldr	r2, [r7, #20]
 80100f4:	4313      	orrs	r3, r2
 80100f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	697a      	ldr	r2, [r7, #20]
 80100fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	68fa      	ldr	r2, [r7, #12]
 8010102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	685a      	ldr	r2, [r3, #4]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	693a      	ldr	r2, [r7, #16]
 8010110:	621a      	str	r2, [r3, #32]
}
 8010112:	bf00      	nop
 8010114:	371c      	adds	r7, #28
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr
 801011e:	bf00      	nop
 8010120:	40010000 	.word	0x40010000
 8010124:	40010400 	.word	0x40010400

08010128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010128:	b480      	push	{r7}
 801012a:	b087      	sub	sp, #28
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	6a1b      	ldr	r3, [r3, #32]
 8010138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	6a1b      	ldr	r3, [r3, #32]
 801013e:	f023 0201 	bic.w	r2, r3, #1
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	699b      	ldr	r3, [r3, #24]
 801014a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	011b      	lsls	r3, r3, #4
 8010158:	693a      	ldr	r2, [r7, #16]
 801015a:	4313      	orrs	r3, r2
 801015c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	f023 030a 	bic.w	r3, r3, #10
 8010164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010166:	697a      	ldr	r2, [r7, #20]
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	4313      	orrs	r3, r2
 801016c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	693a      	ldr	r2, [r7, #16]
 8010172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	697a      	ldr	r2, [r7, #20]
 8010178:	621a      	str	r2, [r3, #32]
}
 801017a:	bf00      	nop
 801017c:	371c      	adds	r7, #28
 801017e:	46bd      	mov	sp, r7
 8010180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010184:	4770      	bx	lr

08010186 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010186:	b480      	push	{r7}
 8010188:	b087      	sub	sp, #28
 801018a:	af00      	add	r7, sp, #0
 801018c:	60f8      	str	r0, [r7, #12]
 801018e:	60b9      	str	r1, [r7, #8]
 8010190:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	6a1b      	ldr	r3, [r3, #32]
 8010196:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	6a1b      	ldr	r3, [r3, #32]
 801019c:	f023 0210 	bic.w	r2, r3, #16
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	699b      	ldr	r3, [r3, #24]
 80101a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80101b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	031b      	lsls	r3, r3, #12
 80101b6:	693a      	ldr	r2, [r7, #16]
 80101b8:	4313      	orrs	r3, r2
 80101ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80101c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	011b      	lsls	r3, r3, #4
 80101c8:	697a      	ldr	r2, [r7, #20]
 80101ca:	4313      	orrs	r3, r2
 80101cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	693a      	ldr	r2, [r7, #16]
 80101d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	697a      	ldr	r2, [r7, #20]
 80101d8:	621a      	str	r2, [r3, #32]
}
 80101da:	bf00      	nop
 80101dc:	371c      	adds	r7, #28
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr

080101e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80101e6:	b480      	push	{r7}
 80101e8:	b085      	sub	sp, #20
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	6078      	str	r0, [r7, #4]
 80101ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	689b      	ldr	r3, [r3, #8]
 80101f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80101fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80101fe:	683a      	ldr	r2, [r7, #0]
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	4313      	orrs	r3, r2
 8010204:	f043 0307 	orr.w	r3, r3, #7
 8010208:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	68fa      	ldr	r2, [r7, #12]
 801020e:	609a      	str	r2, [r3, #8]
}
 8010210:	bf00      	nop
 8010212:	3714      	adds	r7, #20
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr

0801021c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801021c:	b480      	push	{r7}
 801021e:	b087      	sub	sp, #28
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	607a      	str	r2, [r7, #4]
 8010228:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	689b      	ldr	r3, [r3, #8]
 801022e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010236:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	021a      	lsls	r2, r3, #8
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	431a      	orrs	r2, r3
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	4313      	orrs	r3, r2
 8010244:	697a      	ldr	r2, [r7, #20]
 8010246:	4313      	orrs	r3, r2
 8010248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	697a      	ldr	r2, [r7, #20]
 801024e:	609a      	str	r2, [r3, #8]
}
 8010250:	bf00      	nop
 8010252:	371c      	adds	r7, #28
 8010254:	46bd      	mov	sp, r7
 8010256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025a:	4770      	bx	lr

0801025c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801025c:	b480      	push	{r7}
 801025e:	b087      	sub	sp, #28
 8010260:	af00      	add	r7, sp, #0
 8010262:	60f8      	str	r0, [r7, #12]
 8010264:	60b9      	str	r1, [r7, #8]
 8010266:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	f003 031f 	and.w	r3, r3, #31
 801026e:	2201      	movs	r2, #1
 8010270:	fa02 f303 	lsl.w	r3, r2, r3
 8010274:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	6a1a      	ldr	r2, [r3, #32]
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	43db      	mvns	r3, r3
 801027e:	401a      	ands	r2, r3
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	6a1a      	ldr	r2, [r3, #32]
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	f003 031f 	and.w	r3, r3, #31
 801028e:	6879      	ldr	r1, [r7, #4]
 8010290:	fa01 f303 	lsl.w	r3, r1, r3
 8010294:	431a      	orrs	r2, r3
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	621a      	str	r2, [r3, #32]
}
 801029a:	bf00      	nop
 801029c:	371c      	adds	r7, #28
 801029e:	46bd      	mov	sp, r7
 80102a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a4:	4770      	bx	lr
	...

080102a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d101      	bne.n	80102c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80102bc:	2302      	movs	r3, #2
 80102be:	e05a      	b.n	8010376 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2201      	movs	r2, #1
 80102c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2202      	movs	r2, #2
 80102cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	689b      	ldr	r3, [r3, #8]
 80102de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80102e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	68fa      	ldr	r2, [r7, #12]
 80102ee:	4313      	orrs	r3, r2
 80102f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	68fa      	ldr	r2, [r7, #12]
 80102f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	4a21      	ldr	r2, [pc, #132]	@ (8010384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010300:	4293      	cmp	r3, r2
 8010302:	d022      	beq.n	801034a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801030c:	d01d      	beq.n	801034a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	4a1d      	ldr	r2, [pc, #116]	@ (8010388 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010314:	4293      	cmp	r3, r2
 8010316:	d018      	beq.n	801034a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	4a1b      	ldr	r2, [pc, #108]	@ (801038c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801031e:	4293      	cmp	r3, r2
 8010320:	d013      	beq.n	801034a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4a1a      	ldr	r2, [pc, #104]	@ (8010390 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010328:	4293      	cmp	r3, r2
 801032a:	d00e      	beq.n	801034a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	4a18      	ldr	r2, [pc, #96]	@ (8010394 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010332:	4293      	cmp	r3, r2
 8010334:	d009      	beq.n	801034a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4a17      	ldr	r2, [pc, #92]	@ (8010398 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d004      	beq.n	801034a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	4a15      	ldr	r2, [pc, #84]	@ (801039c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010346:	4293      	cmp	r3, r2
 8010348:	d10c      	bne.n	8010364 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	68ba      	ldr	r2, [r7, #8]
 8010358:	4313      	orrs	r3, r2
 801035a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	68ba      	ldr	r2, [r7, #8]
 8010362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2201      	movs	r2, #1
 8010368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2200      	movs	r2, #0
 8010370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010374:	2300      	movs	r3, #0
}
 8010376:	4618      	mov	r0, r3
 8010378:	3714      	adds	r7, #20
 801037a:	46bd      	mov	sp, r7
 801037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010380:	4770      	bx	lr
 8010382:	bf00      	nop
 8010384:	40010000 	.word	0x40010000
 8010388:	40000400 	.word	0x40000400
 801038c:	40000800 	.word	0x40000800
 8010390:	40000c00 	.word	0x40000c00
 8010394:	40010400 	.word	0x40010400
 8010398:	40014000 	.word	0x40014000
 801039c:	40001800 	.word	0x40001800

080103a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b085      	sub	sp, #20
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
 80103a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80103aa:	2300      	movs	r3, #0
 80103ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d101      	bne.n	80103bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80103b8:	2302      	movs	r3, #2
 80103ba:	e03d      	b.n	8010438 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2201      	movs	r2, #1
 80103c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	68db      	ldr	r3, [r3, #12]
 80103ce:	4313      	orrs	r3, r2
 80103d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	689b      	ldr	r3, [r3, #8]
 80103dc:	4313      	orrs	r3, r2
 80103de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	685b      	ldr	r3, [r3, #4]
 80103ea:	4313      	orrs	r3, r2
 80103ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4313      	orrs	r3, r2
 80103fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	691b      	ldr	r3, [r3, #16]
 8010406:	4313      	orrs	r3, r2
 8010408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	695b      	ldr	r3, [r3, #20]
 8010414:	4313      	orrs	r3, r2
 8010416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	69db      	ldr	r3, [r3, #28]
 8010422:	4313      	orrs	r3, r2
 8010424:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	68fa      	ldr	r2, [r7, #12]
 801042c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2200      	movs	r2, #0
 8010432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010436:	2300      	movs	r3, #0
}
 8010438:	4618      	mov	r0, r3
 801043a:	3714      	adds	r7, #20
 801043c:	46bd      	mov	sp, r7
 801043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010442:	4770      	bx	lr

08010444 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d101      	bne.n	8010456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010452:	2301      	movs	r3, #1
 8010454:	e042      	b.n	80104dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801045c:	b2db      	uxtb	r3, r3
 801045e:	2b00      	cmp	r3, #0
 8010460:	d106      	bne.n	8010470 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f7fc fbb4 	bl	800cbd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2224      	movs	r2, #36	@ 0x24
 8010474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	68da      	ldr	r2, [r3, #12]
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010486:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f000 fddb 	bl	8011044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	691a      	ldr	r2, [r3, #16]
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801049c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	695a      	ldr	r2, [r3, #20]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80104ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	68da      	ldr	r2, [r3, #12]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80104bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2200      	movs	r2, #0
 80104c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2220      	movs	r2, #32
 80104c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2220      	movs	r2, #32
 80104d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2200      	movs	r2, #0
 80104d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80104da:	2300      	movs	r3, #0
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3708      	adds	r7, #8
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b08a      	sub	sp, #40	@ 0x28
 80104e8:	af02      	add	r7, sp, #8
 80104ea:	60f8      	str	r0, [r7, #12]
 80104ec:	60b9      	str	r1, [r7, #8]
 80104ee:	603b      	str	r3, [r7, #0]
 80104f0:	4613      	mov	r3, r2
 80104f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80104f4:	2300      	movs	r3, #0
 80104f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80104fe:	b2db      	uxtb	r3, r3
 8010500:	2b20      	cmp	r3, #32
 8010502:	d175      	bne.n	80105f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d002      	beq.n	8010510 <HAL_UART_Transmit+0x2c>
 801050a:	88fb      	ldrh	r3, [r7, #6]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d101      	bne.n	8010514 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010510:	2301      	movs	r3, #1
 8010512:	e06e      	b.n	80105f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2200      	movs	r2, #0
 8010518:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	2221      	movs	r2, #33	@ 0x21
 801051e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010522:	f7fc fd87 	bl	800d034 <HAL_GetTick>
 8010526:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	88fa      	ldrh	r2, [r7, #6]
 801052c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	88fa      	ldrh	r2, [r7, #6]
 8010532:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	689b      	ldr	r3, [r3, #8]
 8010538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801053c:	d108      	bne.n	8010550 <HAL_UART_Transmit+0x6c>
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	691b      	ldr	r3, [r3, #16]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d104      	bne.n	8010550 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010546:	2300      	movs	r3, #0
 8010548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	61bb      	str	r3, [r7, #24]
 801054e:	e003      	b.n	8010558 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010554:	2300      	movs	r3, #0
 8010556:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010558:	e02e      	b.n	80105b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	9300      	str	r3, [sp, #0]
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	2200      	movs	r2, #0
 8010562:	2180      	movs	r1, #128	@ 0x80
 8010564:	68f8      	ldr	r0, [r7, #12]
 8010566:	f000 fb3d 	bl	8010be4 <UART_WaitOnFlagUntilTimeout>
 801056a:	4603      	mov	r3, r0
 801056c:	2b00      	cmp	r3, #0
 801056e:	d005      	beq.n	801057c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2220      	movs	r2, #32
 8010574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8010578:	2303      	movs	r3, #3
 801057a:	e03a      	b.n	80105f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 801057c:	69fb      	ldr	r3, [r7, #28]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d10b      	bne.n	801059a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010582:	69bb      	ldr	r3, [r7, #24]
 8010584:	881b      	ldrh	r3, [r3, #0]
 8010586:	461a      	mov	r2, r3
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010590:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	3302      	adds	r3, #2
 8010596:	61bb      	str	r3, [r7, #24]
 8010598:	e007      	b.n	80105aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801059a:	69fb      	ldr	r3, [r7, #28]
 801059c:	781a      	ldrb	r2, [r3, #0]
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80105a4:	69fb      	ldr	r3, [r7, #28]
 80105a6:	3301      	adds	r3, #1
 80105a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	3b01      	subs	r3, #1
 80105b2:	b29a      	uxth	r2, r3
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80105bc:	b29b      	uxth	r3, r3
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d1cb      	bne.n	801055a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	9300      	str	r3, [sp, #0]
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	2200      	movs	r2, #0
 80105ca:	2140      	movs	r1, #64	@ 0x40
 80105cc:	68f8      	ldr	r0, [r7, #12]
 80105ce:	f000 fb09 	bl	8010be4 <UART_WaitOnFlagUntilTimeout>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d005      	beq.n	80105e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	2220      	movs	r2, #32
 80105dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80105e0:	2303      	movs	r3, #3
 80105e2:	e006      	b.n	80105f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	2220      	movs	r2, #32
 80105e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80105ec:	2300      	movs	r3, #0
 80105ee:	e000      	b.n	80105f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80105f0:	2302      	movs	r3, #2
  }
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3720      	adds	r7, #32
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}

080105fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80105fa:	b580      	push	{r7, lr}
 80105fc:	b084      	sub	sp, #16
 80105fe:	af00      	add	r7, sp, #0
 8010600:	60f8      	str	r0, [r7, #12]
 8010602:	60b9      	str	r1, [r7, #8]
 8010604:	4613      	mov	r3, r2
 8010606:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801060e:	b2db      	uxtb	r3, r3
 8010610:	2b20      	cmp	r3, #32
 8010612:	d112      	bne.n	801063a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d002      	beq.n	8010620 <HAL_UART_Receive_IT+0x26>
 801061a:	88fb      	ldrh	r3, [r7, #6]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d101      	bne.n	8010624 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010620:	2301      	movs	r3, #1
 8010622:	e00b      	b.n	801063c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2200      	movs	r2, #0
 8010628:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 801062a:	88fb      	ldrh	r3, [r7, #6]
 801062c:	461a      	mov	r2, r3
 801062e:	68b9      	ldr	r1, [r7, #8]
 8010630:	68f8      	ldr	r0, [r7, #12]
 8010632:	f000 fb30 	bl	8010c96 <UART_Start_Receive_IT>
 8010636:	4603      	mov	r3, r0
 8010638:	e000      	b.n	801063c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 801063a:	2302      	movs	r3, #2
  }
}
 801063c:	4618      	mov	r0, r3
 801063e:	3710      	adds	r7, #16
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b0ba      	sub	sp, #232	@ 0xe8
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	68db      	ldr	r3, [r3, #12]
 801065c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	695b      	ldr	r3, [r3, #20]
 8010666:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 801066a:	2300      	movs	r3, #0
 801066c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8010670:	2300      	movs	r3, #0
 8010672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801067a:	f003 030f 	and.w	r3, r3, #15
 801067e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8010682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010686:	2b00      	cmp	r3, #0
 8010688:	d10f      	bne.n	80106aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801068a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801068e:	f003 0320 	and.w	r3, r3, #32
 8010692:	2b00      	cmp	r3, #0
 8010694:	d009      	beq.n	80106aa <HAL_UART_IRQHandler+0x66>
 8010696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801069a:	f003 0320 	and.w	r3, r3, #32
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d003      	beq.n	80106aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f000 fc10 	bl	8010ec8 <UART_Receive_IT>
      return;
 80106a8:	e25b      	b.n	8010b62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80106aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	f000 80de 	beq.w	8010870 <HAL_UART_IRQHandler+0x22c>
 80106b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80106b8:	f003 0301 	and.w	r3, r3, #1
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d106      	bne.n	80106ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80106c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80106c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	f000 80d1 	beq.w	8010870 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80106ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80106d2:	f003 0301 	and.w	r3, r3, #1
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00b      	beq.n	80106f2 <HAL_UART_IRQHandler+0xae>
 80106da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80106de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d005      	beq.n	80106f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106ea:	f043 0201 	orr.w	r2, r3, #1
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80106f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80106f6:	f003 0304 	and.w	r3, r3, #4
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d00b      	beq.n	8010716 <HAL_UART_IRQHandler+0xd2>
 80106fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010702:	f003 0301 	and.w	r3, r3, #1
 8010706:	2b00      	cmp	r3, #0
 8010708:	d005      	beq.n	8010716 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801070e:	f043 0202 	orr.w	r2, r3, #2
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801071a:	f003 0302 	and.w	r3, r3, #2
 801071e:	2b00      	cmp	r3, #0
 8010720:	d00b      	beq.n	801073a <HAL_UART_IRQHandler+0xf6>
 8010722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010726:	f003 0301 	and.w	r3, r3, #1
 801072a:	2b00      	cmp	r3, #0
 801072c:	d005      	beq.n	801073a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010732:	f043 0204 	orr.w	r2, r3, #4
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801073a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801073e:	f003 0308 	and.w	r3, r3, #8
 8010742:	2b00      	cmp	r3, #0
 8010744:	d011      	beq.n	801076a <HAL_UART_IRQHandler+0x126>
 8010746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801074a:	f003 0320 	and.w	r3, r3, #32
 801074e:	2b00      	cmp	r3, #0
 8010750:	d105      	bne.n	801075e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010756:	f003 0301 	and.w	r3, r3, #1
 801075a:	2b00      	cmp	r3, #0
 801075c:	d005      	beq.n	801076a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010762:	f043 0208 	orr.w	r2, r3, #8
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801076e:	2b00      	cmp	r3, #0
 8010770:	f000 81f2 	beq.w	8010b58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010778:	f003 0320 	and.w	r3, r3, #32
 801077c:	2b00      	cmp	r3, #0
 801077e:	d008      	beq.n	8010792 <HAL_UART_IRQHandler+0x14e>
 8010780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010784:	f003 0320 	and.w	r3, r3, #32
 8010788:	2b00      	cmp	r3, #0
 801078a:	d002      	beq.n	8010792 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801078c:	6878      	ldr	r0, [r7, #4]
 801078e:	f000 fb9b 	bl	8010ec8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	695b      	ldr	r3, [r3, #20]
 8010798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801079c:	2b40      	cmp	r3, #64	@ 0x40
 801079e:	bf0c      	ite	eq
 80107a0:	2301      	moveq	r3, #1
 80107a2:	2300      	movne	r3, #0
 80107a4:	b2db      	uxtb	r3, r3
 80107a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107ae:	f003 0308 	and.w	r3, r3, #8
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d103      	bne.n	80107be <HAL_UART_IRQHandler+0x17a>
 80107b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d04f      	beq.n	801085e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f000 faa3 	bl	8010d0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	695b      	ldr	r3, [r3, #20]
 80107ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107ce:	2b40      	cmp	r3, #64	@ 0x40
 80107d0:	d141      	bne.n	8010856 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	3314      	adds	r3, #20
 80107d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80107e0:	e853 3f00 	ldrex	r3, [r3]
 80107e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80107e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80107ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80107f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	3314      	adds	r3, #20
 80107fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80107fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010802:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010806:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801080a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801080e:	e841 2300 	strex	r3, r2, [r1]
 8010812:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801081a:	2b00      	cmp	r3, #0
 801081c:	d1d9      	bne.n	80107d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010822:	2b00      	cmp	r3, #0
 8010824:	d013      	beq.n	801084e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801082a:	4a7e      	ldr	r2, [pc, #504]	@ (8010a24 <HAL_UART_IRQHandler+0x3e0>)
 801082c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010832:	4618      	mov	r0, r3
 8010834:	f7fc fdaf 	bl	800d396 <HAL_DMA_Abort_IT>
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	d016      	beq.n	801086c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010844:	687a      	ldr	r2, [r7, #4]
 8010846:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010848:	4610      	mov	r0, r2
 801084a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801084c:	e00e      	b.n	801086c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f000 f994 	bl	8010b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010854:	e00a      	b.n	801086c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f000 f990 	bl	8010b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801085c:	e006      	b.n	801086c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f000 f98c 	bl	8010b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2200      	movs	r2, #0
 8010868:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 801086a:	e175      	b.n	8010b58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801086c:	bf00      	nop
    return;
 801086e:	e173      	b.n	8010b58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010874:	2b01      	cmp	r3, #1
 8010876:	f040 814f 	bne.w	8010b18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801087a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801087e:	f003 0310 	and.w	r3, r3, #16
 8010882:	2b00      	cmp	r3, #0
 8010884:	f000 8148 	beq.w	8010b18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801088c:	f003 0310 	and.w	r3, r3, #16
 8010890:	2b00      	cmp	r3, #0
 8010892:	f000 8141 	beq.w	8010b18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010896:	2300      	movs	r3, #0
 8010898:	60bb      	str	r3, [r7, #8]
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	60bb      	str	r3, [r7, #8]
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	60bb      	str	r3, [r7, #8]
 80108aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	695b      	ldr	r3, [r3, #20]
 80108b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108b6:	2b40      	cmp	r3, #64	@ 0x40
 80108b8:	f040 80b6 	bne.w	8010a28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	685b      	ldr	r3, [r3, #4]
 80108c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80108c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	f000 8145 	beq.w	8010b5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80108d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80108da:	429a      	cmp	r2, r3
 80108dc:	f080 813e 	bcs.w	8010b5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80108e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108ec:	69db      	ldr	r3, [r3, #28]
 80108ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80108f2:	f000 8088 	beq.w	8010a06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	330c      	adds	r3, #12
 80108fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010900:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010904:	e853 3f00 	ldrex	r3, [r3]
 8010908:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801090c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010914:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	330c      	adds	r3, #12
 801091e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8010922:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801092a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801092e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010932:	e841 2300 	strex	r3, r2, [r1]
 8010936:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801093a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801093e:	2b00      	cmp	r3, #0
 8010940:	d1d9      	bne.n	80108f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	3314      	adds	r3, #20
 8010948:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801094a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801094c:	e853 3f00 	ldrex	r3, [r3]
 8010950:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010952:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010954:	f023 0301 	bic.w	r3, r3, #1
 8010958:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	3314      	adds	r3, #20
 8010962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010966:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801096a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801096c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801096e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010972:	e841 2300 	strex	r3, r2, [r1]
 8010976:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010978:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801097a:	2b00      	cmp	r3, #0
 801097c:	d1e1      	bne.n	8010942 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	3314      	adds	r3, #20
 8010984:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010986:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010988:	e853 3f00 	ldrex	r3, [r3]
 801098c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801098e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010994:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	3314      	adds	r3, #20
 801099e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80109a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80109a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80109a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80109aa:	e841 2300 	strex	r3, r2, [r1]
 80109ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80109b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d1e3      	bne.n	801097e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2220      	movs	r2, #32
 80109ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2200      	movs	r2, #0
 80109c2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	330c      	adds	r3, #12
 80109ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109ce:	e853 3f00 	ldrex	r3, [r3]
 80109d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80109d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109d6:	f023 0310 	bic.w	r3, r3, #16
 80109da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	330c      	adds	r3, #12
 80109e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80109e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80109ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80109ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80109f0:	e841 2300 	strex	r3, r2, [r1]
 80109f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80109f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d1e3      	bne.n	80109c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7fc fc58 	bl	800d2b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2202      	movs	r2, #2
 8010a0a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	1ad3      	subs	r3, r2, r3
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f000 f8b7 	bl	8010b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010a22:	e09b      	b.n	8010b5c <HAL_UART_IRQHandler+0x518>
 8010a24:	08010dd1 	.word	0x08010dd1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	1ad3      	subs	r3, r2, r3
 8010a34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	f000 808e 	beq.w	8010b60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8010a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	f000 8089 	beq.w	8010b60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	330c      	adds	r3, #12
 8010a54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a58:	e853 3f00 	ldrex	r3, [r3]
 8010a5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010a64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	330c      	adds	r3, #12
 8010a6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8010a72:	647a      	str	r2, [r7, #68]	@ 0x44
 8010a74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010a78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010a7a:	e841 2300 	strex	r3, r2, [r1]
 8010a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d1e3      	bne.n	8010a4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	3314      	adds	r3, #20
 8010a8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a90:	e853 3f00 	ldrex	r3, [r3]
 8010a94:	623b      	str	r3, [r7, #32]
   return(result);
 8010a96:	6a3b      	ldr	r3, [r7, #32]
 8010a98:	f023 0301 	bic.w	r3, r3, #1
 8010a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	3314      	adds	r3, #20
 8010aa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010aaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8010aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ab2:	e841 2300 	strex	r3, r2, [r1]
 8010ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d1e3      	bne.n	8010a86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2220      	movs	r2, #32
 8010ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	330c      	adds	r3, #12
 8010ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	e853 3f00 	ldrex	r3, [r3]
 8010ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	f023 0310 	bic.w	r3, r3, #16
 8010ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	330c      	adds	r3, #12
 8010aec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8010af0:	61fa      	str	r2, [r7, #28]
 8010af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010af4:	69b9      	ldr	r1, [r7, #24]
 8010af6:	69fa      	ldr	r2, [r7, #28]
 8010af8:	e841 2300 	strex	r3, r2, [r1]
 8010afc:	617b      	str	r3, [r7, #20]
   return(result);
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d1e3      	bne.n	8010acc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2202      	movs	r2, #2
 8010b08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010b0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010b0e:	4619      	mov	r1, r3
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f000 f83d 	bl	8010b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010b16:	e023      	b.n	8010b60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d009      	beq.n	8010b38 <HAL_UART_IRQHandler+0x4f4>
 8010b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d003      	beq.n	8010b38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f000 f961 	bl	8010df8 <UART_Transmit_IT>
    return;
 8010b36:	e014      	b.n	8010b62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d00e      	beq.n	8010b62 <HAL_UART_IRQHandler+0x51e>
 8010b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d008      	beq.n	8010b62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f000 f9a1 	bl	8010e98 <UART_EndTransmit_IT>
    return;
 8010b56:	e004      	b.n	8010b62 <HAL_UART_IRQHandler+0x51e>
    return;
 8010b58:	bf00      	nop
 8010b5a:	e002      	b.n	8010b62 <HAL_UART_IRQHandler+0x51e>
      return;
 8010b5c:	bf00      	nop
 8010b5e:	e000      	b.n	8010b62 <HAL_UART_IRQHandler+0x51e>
      return;
 8010b60:	bf00      	nop
  }
}
 8010b62:	37e8      	adds	r7, #232	@ 0xe8
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}

08010b68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010b70:	bf00      	nop
 8010b72:	370c      	adds	r7, #12
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr

08010b7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	b083      	sub	sp, #12
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010b84:	bf00      	nop
 8010b86:	370c      	adds	r7, #12
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8e:	4770      	bx	lr

08010b90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010b90:	b480      	push	{r7}
 8010b92:	b083      	sub	sp, #12
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	460b      	mov	r3, r1
 8010b9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010b9c:	bf00      	nop
 8010b9e:	370c      	adds	r7, #12
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr

08010ba8 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b085      	sub	sp, #20
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	60fb      	str	r3, [r7, #12]
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010bbe:	b2db      	uxtb	r3, r3
 8010bc0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010bc8:	b2db      	uxtb	r3, r3
 8010bca:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	b2da      	uxtb	r2, r3
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	b2db      	uxtb	r3, r3
 8010bd4:	4313      	orrs	r3, r2
 8010bd6:	b2db      	uxtb	r3, r3
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3714      	adds	r7, #20
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr

08010be4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b086      	sub	sp, #24
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	60f8      	str	r0, [r7, #12]
 8010bec:	60b9      	str	r1, [r7, #8]
 8010bee:	603b      	str	r3, [r7, #0]
 8010bf0:	4613      	mov	r3, r2
 8010bf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010bf4:	e03b      	b.n	8010c6e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010bf6:	6a3b      	ldr	r3, [r7, #32]
 8010bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bfc:	d037      	beq.n	8010c6e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010bfe:	f7fc fa19 	bl	800d034 <HAL_GetTick>
 8010c02:	4602      	mov	r2, r0
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	1ad3      	subs	r3, r2, r3
 8010c08:	6a3a      	ldr	r2, [r7, #32]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d302      	bcc.n	8010c14 <UART_WaitOnFlagUntilTimeout+0x30>
 8010c0e:	6a3b      	ldr	r3, [r7, #32]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d101      	bne.n	8010c18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010c14:	2303      	movs	r3, #3
 8010c16:	e03a      	b.n	8010c8e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	68db      	ldr	r3, [r3, #12]
 8010c1e:	f003 0304 	and.w	r3, r3, #4
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d023      	beq.n	8010c6e <UART_WaitOnFlagUntilTimeout+0x8a>
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	2b80      	cmp	r3, #128	@ 0x80
 8010c2a:	d020      	beq.n	8010c6e <UART_WaitOnFlagUntilTimeout+0x8a>
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	2b40      	cmp	r3, #64	@ 0x40
 8010c30:	d01d      	beq.n	8010c6e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	f003 0308 	and.w	r3, r3, #8
 8010c3c:	2b08      	cmp	r3, #8
 8010c3e:	d116      	bne.n	8010c6e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8010c40:	2300      	movs	r3, #0
 8010c42:	617b      	str	r3, [r7, #20]
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	617b      	str	r3, [r7, #20]
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	617b      	str	r3, [r7, #20]
 8010c54:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010c56:	68f8      	ldr	r0, [r7, #12]
 8010c58:	f000 f857 	bl	8010d0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	2208      	movs	r2, #8
 8010c60:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2200      	movs	r2, #0
 8010c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e00f      	b.n	8010c8e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	4013      	ands	r3, r2
 8010c78:	68ba      	ldr	r2, [r7, #8]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	bf0c      	ite	eq
 8010c7e:	2301      	moveq	r3, #1
 8010c80:	2300      	movne	r3, #0
 8010c82:	b2db      	uxtb	r3, r3
 8010c84:	461a      	mov	r2, r3
 8010c86:	79fb      	ldrb	r3, [r7, #7]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d0b4      	beq.n	8010bf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c8c:	2300      	movs	r3, #0
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3718      	adds	r7, #24
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}

08010c96 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c96:	b480      	push	{r7}
 8010c98:	b085      	sub	sp, #20
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	60f8      	str	r0, [r7, #12]
 8010c9e:	60b9      	str	r1, [r7, #8]
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	68ba      	ldr	r2, [r7, #8]
 8010ca8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	88fa      	ldrh	r2, [r7, #6]
 8010cae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	88fa      	ldrh	r2, [r7, #6]
 8010cb4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2222      	movs	r2, #34	@ 0x22
 8010cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	691b      	ldr	r3, [r3, #16]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d007      	beq.n	8010cdc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	68da      	ldr	r2, [r3, #12]
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010cda:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	695a      	ldr	r2, [r3, #20]
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	f042 0201 	orr.w	r2, r2, #1
 8010cea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	68da      	ldr	r2, [r3, #12]
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	f042 0220 	orr.w	r2, r2, #32
 8010cfa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010cfc:	2300      	movs	r3, #0
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	3714      	adds	r7, #20
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr

08010d0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010d0a:	b480      	push	{r7}
 8010d0c:	b095      	sub	sp, #84	@ 0x54
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	330c      	adds	r3, #12
 8010d18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d1c:	e853 3f00 	ldrex	r3, [r3]
 8010d20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	330c      	adds	r3, #12
 8010d30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010d32:	643a      	str	r2, [r7, #64]	@ 0x40
 8010d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010d38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010d3a:	e841 2300 	strex	r3, r2, [r1]
 8010d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d1e5      	bne.n	8010d12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	3314      	adds	r3, #20
 8010d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d4e:	6a3b      	ldr	r3, [r7, #32]
 8010d50:	e853 3f00 	ldrex	r3, [r3]
 8010d54:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d56:	69fb      	ldr	r3, [r7, #28]
 8010d58:	f023 0301 	bic.w	r3, r3, #1
 8010d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	3314      	adds	r3, #20
 8010d64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010d66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010d68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010d6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d6e:	e841 2300 	strex	r3, r2, [r1]
 8010d72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d1e5      	bne.n	8010d46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d7e:	2b01      	cmp	r3, #1
 8010d80:	d119      	bne.n	8010db6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	330c      	adds	r3, #12
 8010d88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	e853 3f00 	ldrex	r3, [r3]
 8010d90:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	f023 0310 	bic.w	r3, r3, #16
 8010d98:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	330c      	adds	r3, #12
 8010da0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010da2:	61ba      	str	r2, [r7, #24]
 8010da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010da6:	6979      	ldr	r1, [r7, #20]
 8010da8:	69ba      	ldr	r2, [r7, #24]
 8010daa:	e841 2300 	strex	r3, r2, [r1]
 8010dae:	613b      	str	r3, [r7, #16]
   return(result);
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d1e5      	bne.n	8010d82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2220      	movs	r2, #32
 8010dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8010dc4:	bf00      	nop
 8010dc6:	3754      	adds	r7, #84	@ 0x54
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr

08010dd0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b084      	sub	sp, #16
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ddc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	2200      	movs	r2, #0
 8010de2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	2200      	movs	r2, #0
 8010de8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010dea:	68f8      	ldr	r0, [r7, #12]
 8010dec:	f7ff fec6 	bl	8010b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010df0:	bf00      	nop
 8010df2:	3710      	adds	r7, #16
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}

08010df8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b085      	sub	sp, #20
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010e06:	b2db      	uxtb	r3, r3
 8010e08:	2b21      	cmp	r3, #33	@ 0x21
 8010e0a:	d13e      	bne.n	8010e8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	689b      	ldr	r3, [r3, #8]
 8010e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010e14:	d114      	bne.n	8010e40 <UART_Transmit_IT+0x48>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	691b      	ldr	r3, [r3, #16]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d110      	bne.n	8010e40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6a1b      	ldr	r3, [r3, #32]
 8010e22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	881b      	ldrh	r3, [r3, #0]
 8010e28:	461a      	mov	r2, r3
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010e32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6a1b      	ldr	r3, [r3, #32]
 8010e38:	1c9a      	adds	r2, r3, #2
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	621a      	str	r2, [r3, #32]
 8010e3e:	e008      	b.n	8010e52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6a1b      	ldr	r3, [r3, #32]
 8010e44:	1c59      	adds	r1, r3, #1
 8010e46:	687a      	ldr	r2, [r7, #4]
 8010e48:	6211      	str	r1, [r2, #32]
 8010e4a:	781a      	ldrb	r2, [r3, #0]
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010e56:	b29b      	uxth	r3, r3
 8010e58:	3b01      	subs	r3, #1
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	687a      	ldr	r2, [r7, #4]
 8010e5e:	4619      	mov	r1, r3
 8010e60:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d10f      	bne.n	8010e86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	68da      	ldr	r2, [r3, #12]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010e74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	68da      	ldr	r2, [r3, #12]
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010e84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010e86:	2300      	movs	r3, #0
 8010e88:	e000      	b.n	8010e8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010e8a:	2302      	movs	r3, #2
  }
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3714      	adds	r7, #20
 8010e90:	46bd      	mov	sp, r7
 8010e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e96:	4770      	bx	lr

08010e98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b082      	sub	sp, #8
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	68da      	ldr	r2, [r3, #12]
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010eae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2220      	movs	r2, #32
 8010eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	f7ff fe55 	bl	8010b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010ebe:	2300      	movs	r3, #0
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3708      	adds	r7, #8
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}

08010ec8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b08c      	sub	sp, #48	@ 0x30
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010ed6:	b2db      	uxtb	r3, r3
 8010ed8:	2b22      	cmp	r3, #34	@ 0x22
 8010eda:	f040 80ae 	bne.w	801103a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	689b      	ldr	r3, [r3, #8]
 8010ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010ee6:	d117      	bne.n	8010f18 <UART_Receive_IT+0x50>
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	691b      	ldr	r3, [r3, #16]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d113      	bne.n	8010f18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	685b      	ldr	r3, [r3, #4]
 8010f00:	b29b      	uxth	r3, r3
 8010f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f06:	b29a      	uxth	r2, r3
 8010f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f10:	1c9a      	adds	r2, r3, #2
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	629a      	str	r2, [r3, #40]	@ 0x28
 8010f16:	e026      	b.n	8010f66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	689b      	ldr	r3, [r3, #8]
 8010f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010f2a:	d007      	beq.n	8010f3c <UART_Receive_IT+0x74>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	689b      	ldr	r3, [r3, #8]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10a      	bne.n	8010f4a <UART_Receive_IT+0x82>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	691b      	ldr	r3, [r3, #16]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d106      	bne.n	8010f4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	685b      	ldr	r3, [r3, #4]
 8010f42:	b2da      	uxtb	r2, r3
 8010f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f46:	701a      	strb	r2, [r3, #0]
 8010f48:	e008      	b.n	8010f5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f56:	b2da      	uxtb	r2, r3
 8010f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f60:	1c5a      	adds	r2, r3, #1
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010f6a:	b29b      	uxth	r3, r3
 8010f6c:	3b01      	subs	r3, #1
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	687a      	ldr	r2, [r7, #4]
 8010f72:	4619      	mov	r1, r3
 8010f74:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d15d      	bne.n	8011036 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	68da      	ldr	r2, [r3, #12]
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f022 0220 	bic.w	r2, r2, #32
 8010f88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	68da      	ldr	r2, [r3, #12]
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010f98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	695a      	ldr	r2, [r3, #20]
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	f022 0201 	bic.w	r2, r2, #1
 8010fa8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2220      	movs	r2, #32
 8010fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fbc:	2b01      	cmp	r3, #1
 8010fbe:	d135      	bne.n	801102c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	330c      	adds	r3, #12
 8010fcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	e853 3f00 	ldrex	r3, [r3]
 8010fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	f023 0310 	bic.w	r3, r3, #16
 8010fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	330c      	adds	r3, #12
 8010fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010fe6:	623a      	str	r2, [r7, #32]
 8010fe8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fea:	69f9      	ldr	r1, [r7, #28]
 8010fec:	6a3a      	ldr	r2, [r7, #32]
 8010fee:	e841 2300 	strex	r3, r2, [r1]
 8010ff2:	61bb      	str	r3, [r7, #24]
   return(result);
 8010ff4:	69bb      	ldr	r3, [r7, #24]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d1e5      	bne.n	8010fc6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	f003 0310 	and.w	r3, r3, #16
 8011004:	2b10      	cmp	r3, #16
 8011006:	d10a      	bne.n	801101e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011008:	2300      	movs	r3, #0
 801100a:	60fb      	str	r3, [r7, #12]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	60fb      	str	r3, [r7, #12]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	685b      	ldr	r3, [r3, #4]
 801101a:	60fb      	str	r3, [r7, #12]
 801101c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011022:	4619      	mov	r1, r3
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f7ff fdb3 	bl	8010b90 <HAL_UARTEx_RxEventCallback>
 801102a:	e002      	b.n	8011032 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f7f4 fa3b 	bl	80054a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011032:	2300      	movs	r3, #0
 8011034:	e002      	b.n	801103c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8011036:	2300      	movs	r3, #0
 8011038:	e000      	b.n	801103c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 801103a:	2302      	movs	r3, #2
  }
}
 801103c:	4618      	mov	r0, r3
 801103e:	3730      	adds	r7, #48	@ 0x30
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}

08011044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011048:	b0c0      	sub	sp, #256	@ 0x100
 801104a:	af00      	add	r7, sp, #0
 801104c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	691b      	ldr	r3, [r3, #16]
 8011058:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801105c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011060:	68d9      	ldr	r1, [r3, #12]
 8011062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011066:	681a      	ldr	r2, [r3, #0]
 8011068:	ea40 0301 	orr.w	r3, r0, r1
 801106c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801106e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011072:	689a      	ldr	r2, [r3, #8]
 8011074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011078:	691b      	ldr	r3, [r3, #16]
 801107a:	431a      	orrs	r2, r3
 801107c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011080:	695b      	ldr	r3, [r3, #20]
 8011082:	431a      	orrs	r2, r3
 8011084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011088:	69db      	ldr	r3, [r3, #28]
 801108a:	4313      	orrs	r3, r2
 801108c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 801109c:	f021 010c 	bic.w	r1, r1, #12
 80110a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110a4:	681a      	ldr	r2, [r3, #0]
 80110a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80110aa:	430b      	orrs	r3, r1
 80110ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80110ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	695b      	ldr	r3, [r3, #20]
 80110b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80110ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110be:	6999      	ldr	r1, [r3, #24]
 80110c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110c4:	681a      	ldr	r2, [r3, #0]
 80110c6:	ea40 0301 	orr.w	r3, r0, r1
 80110ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80110cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110d0:	681a      	ldr	r2, [r3, #0]
 80110d2:	4b8f      	ldr	r3, [pc, #572]	@ (8011310 <UART_SetConfig+0x2cc>)
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d005      	beq.n	80110e4 <UART_SetConfig+0xa0>
 80110d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110dc:	681a      	ldr	r2, [r3, #0]
 80110de:	4b8d      	ldr	r3, [pc, #564]	@ (8011314 <UART_SetConfig+0x2d0>)
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d104      	bne.n	80110ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80110e4:	f7fe f918 	bl	800f318 <HAL_RCC_GetPCLK2Freq>
 80110e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80110ec:	e003      	b.n	80110f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80110ee:	f7fe f8ff 	bl	800f2f0 <HAL_RCC_GetPCLK1Freq>
 80110f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80110f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110fa:	69db      	ldr	r3, [r3, #28]
 80110fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011100:	f040 810c 	bne.w	801131c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011108:	2200      	movs	r2, #0
 801110a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801110e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8011112:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8011116:	4622      	mov	r2, r4
 8011118:	462b      	mov	r3, r5
 801111a:	1891      	adds	r1, r2, r2
 801111c:	65b9      	str	r1, [r7, #88]	@ 0x58
 801111e:	415b      	adcs	r3, r3
 8011120:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011122:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011126:	4621      	mov	r1, r4
 8011128:	eb12 0801 	adds.w	r8, r2, r1
 801112c:	4629      	mov	r1, r5
 801112e:	eb43 0901 	adc.w	r9, r3, r1
 8011132:	f04f 0200 	mov.w	r2, #0
 8011136:	f04f 0300 	mov.w	r3, #0
 801113a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801113e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011146:	4690      	mov	r8, r2
 8011148:	4699      	mov	r9, r3
 801114a:	4623      	mov	r3, r4
 801114c:	eb18 0303 	adds.w	r3, r8, r3
 8011150:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011154:	462b      	mov	r3, r5
 8011156:	eb49 0303 	adc.w	r3, r9, r3
 801115a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801115e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011162:	685b      	ldr	r3, [r3, #4]
 8011164:	2200      	movs	r2, #0
 8011166:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801116a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801116e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011172:	460b      	mov	r3, r1
 8011174:	18db      	adds	r3, r3, r3
 8011176:	653b      	str	r3, [r7, #80]	@ 0x50
 8011178:	4613      	mov	r3, r2
 801117a:	eb42 0303 	adc.w	r3, r2, r3
 801117e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011180:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8011184:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8011188:	f7ef fdce 	bl	8000d28 <__aeabi_uldivmod>
 801118c:	4602      	mov	r2, r0
 801118e:	460b      	mov	r3, r1
 8011190:	4b61      	ldr	r3, [pc, #388]	@ (8011318 <UART_SetConfig+0x2d4>)
 8011192:	fba3 2302 	umull	r2, r3, r3, r2
 8011196:	095b      	lsrs	r3, r3, #5
 8011198:	011c      	lsls	r4, r3, #4
 801119a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801119e:	2200      	movs	r2, #0
 80111a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80111a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80111a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80111ac:	4642      	mov	r2, r8
 80111ae:	464b      	mov	r3, r9
 80111b0:	1891      	adds	r1, r2, r2
 80111b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80111b4:	415b      	adcs	r3, r3
 80111b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80111b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80111bc:	4641      	mov	r1, r8
 80111be:	eb12 0a01 	adds.w	sl, r2, r1
 80111c2:	4649      	mov	r1, r9
 80111c4:	eb43 0b01 	adc.w	fp, r3, r1
 80111c8:	f04f 0200 	mov.w	r2, #0
 80111cc:	f04f 0300 	mov.w	r3, #0
 80111d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80111d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80111d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80111dc:	4692      	mov	sl, r2
 80111de:	469b      	mov	fp, r3
 80111e0:	4643      	mov	r3, r8
 80111e2:	eb1a 0303 	adds.w	r3, sl, r3
 80111e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80111ea:	464b      	mov	r3, r9
 80111ec:	eb4b 0303 	adc.w	r3, fp, r3
 80111f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80111f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	2200      	movs	r2, #0
 80111fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011200:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011204:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011208:	460b      	mov	r3, r1
 801120a:	18db      	adds	r3, r3, r3
 801120c:	643b      	str	r3, [r7, #64]	@ 0x40
 801120e:	4613      	mov	r3, r2
 8011210:	eb42 0303 	adc.w	r3, r2, r3
 8011214:	647b      	str	r3, [r7, #68]	@ 0x44
 8011216:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801121a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801121e:	f7ef fd83 	bl	8000d28 <__aeabi_uldivmod>
 8011222:	4602      	mov	r2, r0
 8011224:	460b      	mov	r3, r1
 8011226:	4611      	mov	r1, r2
 8011228:	4b3b      	ldr	r3, [pc, #236]	@ (8011318 <UART_SetConfig+0x2d4>)
 801122a:	fba3 2301 	umull	r2, r3, r3, r1
 801122e:	095b      	lsrs	r3, r3, #5
 8011230:	2264      	movs	r2, #100	@ 0x64
 8011232:	fb02 f303 	mul.w	r3, r2, r3
 8011236:	1acb      	subs	r3, r1, r3
 8011238:	00db      	lsls	r3, r3, #3
 801123a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801123e:	4b36      	ldr	r3, [pc, #216]	@ (8011318 <UART_SetConfig+0x2d4>)
 8011240:	fba3 2302 	umull	r2, r3, r3, r2
 8011244:	095b      	lsrs	r3, r3, #5
 8011246:	005b      	lsls	r3, r3, #1
 8011248:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 801124c:	441c      	add	r4, r3
 801124e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011252:	2200      	movs	r2, #0
 8011254:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011258:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 801125c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8011260:	4642      	mov	r2, r8
 8011262:	464b      	mov	r3, r9
 8011264:	1891      	adds	r1, r2, r2
 8011266:	63b9      	str	r1, [r7, #56]	@ 0x38
 8011268:	415b      	adcs	r3, r3
 801126a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801126c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8011270:	4641      	mov	r1, r8
 8011272:	1851      	adds	r1, r2, r1
 8011274:	6339      	str	r1, [r7, #48]	@ 0x30
 8011276:	4649      	mov	r1, r9
 8011278:	414b      	adcs	r3, r1
 801127a:	637b      	str	r3, [r7, #52]	@ 0x34
 801127c:	f04f 0200 	mov.w	r2, #0
 8011280:	f04f 0300 	mov.w	r3, #0
 8011284:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8011288:	4659      	mov	r1, fp
 801128a:	00cb      	lsls	r3, r1, #3
 801128c:	4651      	mov	r1, sl
 801128e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011292:	4651      	mov	r1, sl
 8011294:	00ca      	lsls	r2, r1, #3
 8011296:	4610      	mov	r0, r2
 8011298:	4619      	mov	r1, r3
 801129a:	4603      	mov	r3, r0
 801129c:	4642      	mov	r2, r8
 801129e:	189b      	adds	r3, r3, r2
 80112a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80112a4:	464b      	mov	r3, r9
 80112a6:	460a      	mov	r2, r1
 80112a8:	eb42 0303 	adc.w	r3, r2, r3
 80112ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80112b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80112b4:	685b      	ldr	r3, [r3, #4]
 80112b6:	2200      	movs	r2, #0
 80112b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80112bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80112c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80112c4:	460b      	mov	r3, r1
 80112c6:	18db      	adds	r3, r3, r3
 80112c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80112ca:	4613      	mov	r3, r2
 80112cc:	eb42 0303 	adc.w	r3, r2, r3
 80112d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80112d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80112d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80112da:	f7ef fd25 	bl	8000d28 <__aeabi_uldivmod>
 80112de:	4602      	mov	r2, r0
 80112e0:	460b      	mov	r3, r1
 80112e2:	4b0d      	ldr	r3, [pc, #52]	@ (8011318 <UART_SetConfig+0x2d4>)
 80112e4:	fba3 1302 	umull	r1, r3, r3, r2
 80112e8:	095b      	lsrs	r3, r3, #5
 80112ea:	2164      	movs	r1, #100	@ 0x64
 80112ec:	fb01 f303 	mul.w	r3, r1, r3
 80112f0:	1ad3      	subs	r3, r2, r3
 80112f2:	00db      	lsls	r3, r3, #3
 80112f4:	3332      	adds	r3, #50	@ 0x32
 80112f6:	4a08      	ldr	r2, [pc, #32]	@ (8011318 <UART_SetConfig+0x2d4>)
 80112f8:	fba2 2303 	umull	r2, r3, r2, r3
 80112fc:	095b      	lsrs	r3, r3, #5
 80112fe:	f003 0207 	and.w	r2, r3, #7
 8011302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	4422      	add	r2, r4
 801130a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801130c:	e106      	b.n	801151c <UART_SetConfig+0x4d8>
 801130e:	bf00      	nop
 8011310:	40011000 	.word	0x40011000
 8011314:	40011400 	.word	0x40011400
 8011318:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801131c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011320:	2200      	movs	r2, #0
 8011322:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011326:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801132a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801132e:	4642      	mov	r2, r8
 8011330:	464b      	mov	r3, r9
 8011332:	1891      	adds	r1, r2, r2
 8011334:	6239      	str	r1, [r7, #32]
 8011336:	415b      	adcs	r3, r3
 8011338:	627b      	str	r3, [r7, #36]	@ 0x24
 801133a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801133e:	4641      	mov	r1, r8
 8011340:	1854      	adds	r4, r2, r1
 8011342:	4649      	mov	r1, r9
 8011344:	eb43 0501 	adc.w	r5, r3, r1
 8011348:	f04f 0200 	mov.w	r2, #0
 801134c:	f04f 0300 	mov.w	r3, #0
 8011350:	00eb      	lsls	r3, r5, #3
 8011352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011356:	00e2      	lsls	r2, r4, #3
 8011358:	4614      	mov	r4, r2
 801135a:	461d      	mov	r5, r3
 801135c:	4643      	mov	r3, r8
 801135e:	18e3      	adds	r3, r4, r3
 8011360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011364:	464b      	mov	r3, r9
 8011366:	eb45 0303 	adc.w	r3, r5, r3
 801136a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801136e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011372:	685b      	ldr	r3, [r3, #4]
 8011374:	2200      	movs	r2, #0
 8011376:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801137a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801137e:	f04f 0200 	mov.w	r2, #0
 8011382:	f04f 0300 	mov.w	r3, #0
 8011386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801138a:	4629      	mov	r1, r5
 801138c:	008b      	lsls	r3, r1, #2
 801138e:	4621      	mov	r1, r4
 8011390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011394:	4621      	mov	r1, r4
 8011396:	008a      	lsls	r2, r1, #2
 8011398:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801139c:	f7ef fcc4 	bl	8000d28 <__aeabi_uldivmod>
 80113a0:	4602      	mov	r2, r0
 80113a2:	460b      	mov	r3, r1
 80113a4:	4b60      	ldr	r3, [pc, #384]	@ (8011528 <UART_SetConfig+0x4e4>)
 80113a6:	fba3 2302 	umull	r2, r3, r3, r2
 80113aa:	095b      	lsrs	r3, r3, #5
 80113ac:	011c      	lsls	r4, r3, #4
 80113ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80113b2:	2200      	movs	r2, #0
 80113b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80113b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80113bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80113c0:	4642      	mov	r2, r8
 80113c2:	464b      	mov	r3, r9
 80113c4:	1891      	adds	r1, r2, r2
 80113c6:	61b9      	str	r1, [r7, #24]
 80113c8:	415b      	adcs	r3, r3
 80113ca:	61fb      	str	r3, [r7, #28]
 80113cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80113d0:	4641      	mov	r1, r8
 80113d2:	1851      	adds	r1, r2, r1
 80113d4:	6139      	str	r1, [r7, #16]
 80113d6:	4649      	mov	r1, r9
 80113d8:	414b      	adcs	r3, r1
 80113da:	617b      	str	r3, [r7, #20]
 80113dc:	f04f 0200 	mov.w	r2, #0
 80113e0:	f04f 0300 	mov.w	r3, #0
 80113e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80113e8:	4659      	mov	r1, fp
 80113ea:	00cb      	lsls	r3, r1, #3
 80113ec:	4651      	mov	r1, sl
 80113ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80113f2:	4651      	mov	r1, sl
 80113f4:	00ca      	lsls	r2, r1, #3
 80113f6:	4610      	mov	r0, r2
 80113f8:	4619      	mov	r1, r3
 80113fa:	4603      	mov	r3, r0
 80113fc:	4642      	mov	r2, r8
 80113fe:	189b      	adds	r3, r3, r2
 8011400:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011404:	464b      	mov	r3, r9
 8011406:	460a      	mov	r2, r1
 8011408:	eb42 0303 	adc.w	r3, r2, r3
 801140c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	2200      	movs	r2, #0
 8011418:	67bb      	str	r3, [r7, #120]	@ 0x78
 801141a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801141c:	f04f 0200 	mov.w	r2, #0
 8011420:	f04f 0300 	mov.w	r3, #0
 8011424:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8011428:	4649      	mov	r1, r9
 801142a:	008b      	lsls	r3, r1, #2
 801142c:	4641      	mov	r1, r8
 801142e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011432:	4641      	mov	r1, r8
 8011434:	008a      	lsls	r2, r1, #2
 8011436:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801143a:	f7ef fc75 	bl	8000d28 <__aeabi_uldivmod>
 801143e:	4602      	mov	r2, r0
 8011440:	460b      	mov	r3, r1
 8011442:	4611      	mov	r1, r2
 8011444:	4b38      	ldr	r3, [pc, #224]	@ (8011528 <UART_SetConfig+0x4e4>)
 8011446:	fba3 2301 	umull	r2, r3, r3, r1
 801144a:	095b      	lsrs	r3, r3, #5
 801144c:	2264      	movs	r2, #100	@ 0x64
 801144e:	fb02 f303 	mul.w	r3, r2, r3
 8011452:	1acb      	subs	r3, r1, r3
 8011454:	011b      	lsls	r3, r3, #4
 8011456:	3332      	adds	r3, #50	@ 0x32
 8011458:	4a33      	ldr	r2, [pc, #204]	@ (8011528 <UART_SetConfig+0x4e4>)
 801145a:	fba2 2303 	umull	r2, r3, r2, r3
 801145e:	095b      	lsrs	r3, r3, #5
 8011460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011464:	441c      	add	r4, r3
 8011466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801146a:	2200      	movs	r2, #0
 801146c:	673b      	str	r3, [r7, #112]	@ 0x70
 801146e:	677a      	str	r2, [r7, #116]	@ 0x74
 8011470:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8011474:	4642      	mov	r2, r8
 8011476:	464b      	mov	r3, r9
 8011478:	1891      	adds	r1, r2, r2
 801147a:	60b9      	str	r1, [r7, #8]
 801147c:	415b      	adcs	r3, r3
 801147e:	60fb      	str	r3, [r7, #12]
 8011480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011484:	4641      	mov	r1, r8
 8011486:	1851      	adds	r1, r2, r1
 8011488:	6039      	str	r1, [r7, #0]
 801148a:	4649      	mov	r1, r9
 801148c:	414b      	adcs	r3, r1
 801148e:	607b      	str	r3, [r7, #4]
 8011490:	f04f 0200 	mov.w	r2, #0
 8011494:	f04f 0300 	mov.w	r3, #0
 8011498:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801149c:	4659      	mov	r1, fp
 801149e:	00cb      	lsls	r3, r1, #3
 80114a0:	4651      	mov	r1, sl
 80114a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80114a6:	4651      	mov	r1, sl
 80114a8:	00ca      	lsls	r2, r1, #3
 80114aa:	4610      	mov	r0, r2
 80114ac:	4619      	mov	r1, r3
 80114ae:	4603      	mov	r3, r0
 80114b0:	4642      	mov	r2, r8
 80114b2:	189b      	adds	r3, r3, r2
 80114b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80114b6:	464b      	mov	r3, r9
 80114b8:	460a      	mov	r2, r1
 80114ba:	eb42 0303 	adc.w	r3, r2, r3
 80114be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80114c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	2200      	movs	r2, #0
 80114c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80114ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80114cc:	f04f 0200 	mov.w	r2, #0
 80114d0:	f04f 0300 	mov.w	r3, #0
 80114d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80114d8:	4649      	mov	r1, r9
 80114da:	008b      	lsls	r3, r1, #2
 80114dc:	4641      	mov	r1, r8
 80114de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80114e2:	4641      	mov	r1, r8
 80114e4:	008a      	lsls	r2, r1, #2
 80114e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80114ea:	f7ef fc1d 	bl	8000d28 <__aeabi_uldivmod>
 80114ee:	4602      	mov	r2, r0
 80114f0:	460b      	mov	r3, r1
 80114f2:	4b0d      	ldr	r3, [pc, #52]	@ (8011528 <UART_SetConfig+0x4e4>)
 80114f4:	fba3 1302 	umull	r1, r3, r3, r2
 80114f8:	095b      	lsrs	r3, r3, #5
 80114fa:	2164      	movs	r1, #100	@ 0x64
 80114fc:	fb01 f303 	mul.w	r3, r1, r3
 8011500:	1ad3      	subs	r3, r2, r3
 8011502:	011b      	lsls	r3, r3, #4
 8011504:	3332      	adds	r3, #50	@ 0x32
 8011506:	4a08      	ldr	r2, [pc, #32]	@ (8011528 <UART_SetConfig+0x4e4>)
 8011508:	fba2 2303 	umull	r2, r3, r2, r3
 801150c:	095b      	lsrs	r3, r3, #5
 801150e:	f003 020f 	and.w	r2, r3, #15
 8011512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	4422      	add	r2, r4
 801151a:	609a      	str	r2, [r3, #8]
}
 801151c:	bf00      	nop
 801151e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011522:	46bd      	mov	sp, r7
 8011524:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011528:	51eb851f 	.word	0x51eb851f

0801152c <malloc>:
 801152c:	4b02      	ldr	r3, [pc, #8]	@ (8011538 <malloc+0xc>)
 801152e:	4601      	mov	r1, r0
 8011530:	6818      	ldr	r0, [r3, #0]
 8011532:	f000 b825 	b.w	8011580 <_malloc_r>
 8011536:	bf00      	nop
 8011538:	200000f0 	.word	0x200000f0

0801153c <sbrk_aligned>:
 801153c:	b570      	push	{r4, r5, r6, lr}
 801153e:	4e0f      	ldr	r6, [pc, #60]	@ (801157c <sbrk_aligned+0x40>)
 8011540:	460c      	mov	r4, r1
 8011542:	6831      	ldr	r1, [r6, #0]
 8011544:	4605      	mov	r5, r0
 8011546:	b911      	cbnz	r1, 801154e <sbrk_aligned+0x12>
 8011548:	f000 ff56 	bl	80123f8 <_sbrk_r>
 801154c:	6030      	str	r0, [r6, #0]
 801154e:	4621      	mov	r1, r4
 8011550:	4628      	mov	r0, r5
 8011552:	f000 ff51 	bl	80123f8 <_sbrk_r>
 8011556:	1c43      	adds	r3, r0, #1
 8011558:	d103      	bne.n	8011562 <sbrk_aligned+0x26>
 801155a:	f04f 34ff 	mov.w	r4, #4294967295
 801155e:	4620      	mov	r0, r4
 8011560:	bd70      	pop	{r4, r5, r6, pc}
 8011562:	1cc4      	adds	r4, r0, #3
 8011564:	f024 0403 	bic.w	r4, r4, #3
 8011568:	42a0      	cmp	r0, r4
 801156a:	d0f8      	beq.n	801155e <sbrk_aligned+0x22>
 801156c:	1a21      	subs	r1, r4, r0
 801156e:	4628      	mov	r0, r5
 8011570:	f000 ff42 	bl	80123f8 <_sbrk_r>
 8011574:	3001      	adds	r0, #1
 8011576:	d1f2      	bne.n	801155e <sbrk_aligned+0x22>
 8011578:	e7ef      	b.n	801155a <sbrk_aligned+0x1e>
 801157a:	bf00      	nop
 801157c:	20000a90 	.word	0x20000a90

08011580 <_malloc_r>:
 8011580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011584:	1ccd      	adds	r5, r1, #3
 8011586:	f025 0503 	bic.w	r5, r5, #3
 801158a:	3508      	adds	r5, #8
 801158c:	2d0c      	cmp	r5, #12
 801158e:	bf38      	it	cc
 8011590:	250c      	movcc	r5, #12
 8011592:	2d00      	cmp	r5, #0
 8011594:	4606      	mov	r6, r0
 8011596:	db01      	blt.n	801159c <_malloc_r+0x1c>
 8011598:	42a9      	cmp	r1, r5
 801159a:	d904      	bls.n	80115a6 <_malloc_r+0x26>
 801159c:	230c      	movs	r3, #12
 801159e:	6033      	str	r3, [r6, #0]
 80115a0:	2000      	movs	r0, #0
 80115a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801167c <_malloc_r+0xfc>
 80115aa:	f000 f869 	bl	8011680 <__malloc_lock>
 80115ae:	f8d8 3000 	ldr.w	r3, [r8]
 80115b2:	461c      	mov	r4, r3
 80115b4:	bb44      	cbnz	r4, 8011608 <_malloc_r+0x88>
 80115b6:	4629      	mov	r1, r5
 80115b8:	4630      	mov	r0, r6
 80115ba:	f7ff ffbf 	bl	801153c <sbrk_aligned>
 80115be:	1c43      	adds	r3, r0, #1
 80115c0:	4604      	mov	r4, r0
 80115c2:	d158      	bne.n	8011676 <_malloc_r+0xf6>
 80115c4:	f8d8 4000 	ldr.w	r4, [r8]
 80115c8:	4627      	mov	r7, r4
 80115ca:	2f00      	cmp	r7, #0
 80115cc:	d143      	bne.n	8011656 <_malloc_r+0xd6>
 80115ce:	2c00      	cmp	r4, #0
 80115d0:	d04b      	beq.n	801166a <_malloc_r+0xea>
 80115d2:	6823      	ldr	r3, [r4, #0]
 80115d4:	4639      	mov	r1, r7
 80115d6:	4630      	mov	r0, r6
 80115d8:	eb04 0903 	add.w	r9, r4, r3
 80115dc:	f000 ff0c 	bl	80123f8 <_sbrk_r>
 80115e0:	4581      	cmp	r9, r0
 80115e2:	d142      	bne.n	801166a <_malloc_r+0xea>
 80115e4:	6821      	ldr	r1, [r4, #0]
 80115e6:	1a6d      	subs	r5, r5, r1
 80115e8:	4629      	mov	r1, r5
 80115ea:	4630      	mov	r0, r6
 80115ec:	f7ff ffa6 	bl	801153c <sbrk_aligned>
 80115f0:	3001      	adds	r0, #1
 80115f2:	d03a      	beq.n	801166a <_malloc_r+0xea>
 80115f4:	6823      	ldr	r3, [r4, #0]
 80115f6:	442b      	add	r3, r5
 80115f8:	6023      	str	r3, [r4, #0]
 80115fa:	f8d8 3000 	ldr.w	r3, [r8]
 80115fe:	685a      	ldr	r2, [r3, #4]
 8011600:	bb62      	cbnz	r2, 801165c <_malloc_r+0xdc>
 8011602:	f8c8 7000 	str.w	r7, [r8]
 8011606:	e00f      	b.n	8011628 <_malloc_r+0xa8>
 8011608:	6822      	ldr	r2, [r4, #0]
 801160a:	1b52      	subs	r2, r2, r5
 801160c:	d420      	bmi.n	8011650 <_malloc_r+0xd0>
 801160e:	2a0b      	cmp	r2, #11
 8011610:	d917      	bls.n	8011642 <_malloc_r+0xc2>
 8011612:	1961      	adds	r1, r4, r5
 8011614:	42a3      	cmp	r3, r4
 8011616:	6025      	str	r5, [r4, #0]
 8011618:	bf18      	it	ne
 801161a:	6059      	strne	r1, [r3, #4]
 801161c:	6863      	ldr	r3, [r4, #4]
 801161e:	bf08      	it	eq
 8011620:	f8c8 1000 	streq.w	r1, [r8]
 8011624:	5162      	str	r2, [r4, r5]
 8011626:	604b      	str	r3, [r1, #4]
 8011628:	4630      	mov	r0, r6
 801162a:	f000 f82f 	bl	801168c <__malloc_unlock>
 801162e:	f104 000b 	add.w	r0, r4, #11
 8011632:	1d23      	adds	r3, r4, #4
 8011634:	f020 0007 	bic.w	r0, r0, #7
 8011638:	1ac2      	subs	r2, r0, r3
 801163a:	bf1c      	itt	ne
 801163c:	1a1b      	subne	r3, r3, r0
 801163e:	50a3      	strne	r3, [r4, r2]
 8011640:	e7af      	b.n	80115a2 <_malloc_r+0x22>
 8011642:	6862      	ldr	r2, [r4, #4]
 8011644:	42a3      	cmp	r3, r4
 8011646:	bf0c      	ite	eq
 8011648:	f8c8 2000 	streq.w	r2, [r8]
 801164c:	605a      	strne	r2, [r3, #4]
 801164e:	e7eb      	b.n	8011628 <_malloc_r+0xa8>
 8011650:	4623      	mov	r3, r4
 8011652:	6864      	ldr	r4, [r4, #4]
 8011654:	e7ae      	b.n	80115b4 <_malloc_r+0x34>
 8011656:	463c      	mov	r4, r7
 8011658:	687f      	ldr	r7, [r7, #4]
 801165a:	e7b6      	b.n	80115ca <_malloc_r+0x4a>
 801165c:	461a      	mov	r2, r3
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	42a3      	cmp	r3, r4
 8011662:	d1fb      	bne.n	801165c <_malloc_r+0xdc>
 8011664:	2300      	movs	r3, #0
 8011666:	6053      	str	r3, [r2, #4]
 8011668:	e7de      	b.n	8011628 <_malloc_r+0xa8>
 801166a:	230c      	movs	r3, #12
 801166c:	6033      	str	r3, [r6, #0]
 801166e:	4630      	mov	r0, r6
 8011670:	f000 f80c 	bl	801168c <__malloc_unlock>
 8011674:	e794      	b.n	80115a0 <_malloc_r+0x20>
 8011676:	6005      	str	r5, [r0, #0]
 8011678:	e7d6      	b.n	8011628 <_malloc_r+0xa8>
 801167a:	bf00      	nop
 801167c:	20000a94 	.word	0x20000a94

08011680 <__malloc_lock>:
 8011680:	4801      	ldr	r0, [pc, #4]	@ (8011688 <__malloc_lock+0x8>)
 8011682:	f000 bf06 	b.w	8012492 <__retarget_lock_acquire_recursive>
 8011686:	bf00      	nop
 8011688:	20000bd8 	.word	0x20000bd8

0801168c <__malloc_unlock>:
 801168c:	4801      	ldr	r0, [pc, #4]	@ (8011694 <__malloc_unlock+0x8>)
 801168e:	f000 bf01 	b.w	8012494 <__retarget_lock_release_recursive>
 8011692:	bf00      	nop
 8011694:	20000bd8 	.word	0x20000bd8

08011698 <__cvt>:
 8011698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801169c:	ec57 6b10 	vmov	r6, r7, d0
 80116a0:	2f00      	cmp	r7, #0
 80116a2:	460c      	mov	r4, r1
 80116a4:	4619      	mov	r1, r3
 80116a6:	463b      	mov	r3, r7
 80116a8:	bfbb      	ittet	lt
 80116aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80116ae:	461f      	movlt	r7, r3
 80116b0:	2300      	movge	r3, #0
 80116b2:	232d      	movlt	r3, #45	@ 0x2d
 80116b4:	700b      	strb	r3, [r1, #0]
 80116b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80116b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80116bc:	4691      	mov	r9, r2
 80116be:	f023 0820 	bic.w	r8, r3, #32
 80116c2:	bfbc      	itt	lt
 80116c4:	4632      	movlt	r2, r6
 80116c6:	4616      	movlt	r6, r2
 80116c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80116cc:	d005      	beq.n	80116da <__cvt+0x42>
 80116ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80116d2:	d100      	bne.n	80116d6 <__cvt+0x3e>
 80116d4:	3401      	adds	r4, #1
 80116d6:	2102      	movs	r1, #2
 80116d8:	e000      	b.n	80116dc <__cvt+0x44>
 80116da:	2103      	movs	r1, #3
 80116dc:	ab03      	add	r3, sp, #12
 80116de:	9301      	str	r3, [sp, #4]
 80116e0:	ab02      	add	r3, sp, #8
 80116e2:	9300      	str	r3, [sp, #0]
 80116e4:	ec47 6b10 	vmov	d0, r6, r7
 80116e8:	4653      	mov	r3, sl
 80116ea:	4622      	mov	r2, r4
 80116ec:	f000 ff5c 	bl	80125a8 <_dtoa_r>
 80116f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80116f4:	4605      	mov	r5, r0
 80116f6:	d119      	bne.n	801172c <__cvt+0x94>
 80116f8:	f019 0f01 	tst.w	r9, #1
 80116fc:	d00e      	beq.n	801171c <__cvt+0x84>
 80116fe:	eb00 0904 	add.w	r9, r0, r4
 8011702:	2200      	movs	r2, #0
 8011704:	2300      	movs	r3, #0
 8011706:	4630      	mov	r0, r6
 8011708:	4639      	mov	r1, r7
 801170a:	f7ef f9dd 	bl	8000ac8 <__aeabi_dcmpeq>
 801170e:	b108      	cbz	r0, 8011714 <__cvt+0x7c>
 8011710:	f8cd 900c 	str.w	r9, [sp, #12]
 8011714:	2230      	movs	r2, #48	@ 0x30
 8011716:	9b03      	ldr	r3, [sp, #12]
 8011718:	454b      	cmp	r3, r9
 801171a:	d31e      	bcc.n	801175a <__cvt+0xc2>
 801171c:	9b03      	ldr	r3, [sp, #12]
 801171e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011720:	1b5b      	subs	r3, r3, r5
 8011722:	4628      	mov	r0, r5
 8011724:	6013      	str	r3, [r2, #0]
 8011726:	b004      	add	sp, #16
 8011728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801172c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011730:	eb00 0904 	add.w	r9, r0, r4
 8011734:	d1e5      	bne.n	8011702 <__cvt+0x6a>
 8011736:	7803      	ldrb	r3, [r0, #0]
 8011738:	2b30      	cmp	r3, #48	@ 0x30
 801173a:	d10a      	bne.n	8011752 <__cvt+0xba>
 801173c:	2200      	movs	r2, #0
 801173e:	2300      	movs	r3, #0
 8011740:	4630      	mov	r0, r6
 8011742:	4639      	mov	r1, r7
 8011744:	f7ef f9c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8011748:	b918      	cbnz	r0, 8011752 <__cvt+0xba>
 801174a:	f1c4 0401 	rsb	r4, r4, #1
 801174e:	f8ca 4000 	str.w	r4, [sl]
 8011752:	f8da 3000 	ldr.w	r3, [sl]
 8011756:	4499      	add	r9, r3
 8011758:	e7d3      	b.n	8011702 <__cvt+0x6a>
 801175a:	1c59      	adds	r1, r3, #1
 801175c:	9103      	str	r1, [sp, #12]
 801175e:	701a      	strb	r2, [r3, #0]
 8011760:	e7d9      	b.n	8011716 <__cvt+0x7e>

08011762 <__exponent>:
 8011762:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011764:	2900      	cmp	r1, #0
 8011766:	bfba      	itte	lt
 8011768:	4249      	neglt	r1, r1
 801176a:	232d      	movlt	r3, #45	@ 0x2d
 801176c:	232b      	movge	r3, #43	@ 0x2b
 801176e:	2909      	cmp	r1, #9
 8011770:	7002      	strb	r2, [r0, #0]
 8011772:	7043      	strb	r3, [r0, #1]
 8011774:	dd29      	ble.n	80117ca <__exponent+0x68>
 8011776:	f10d 0307 	add.w	r3, sp, #7
 801177a:	461d      	mov	r5, r3
 801177c:	270a      	movs	r7, #10
 801177e:	461a      	mov	r2, r3
 8011780:	fbb1 f6f7 	udiv	r6, r1, r7
 8011784:	fb07 1416 	mls	r4, r7, r6, r1
 8011788:	3430      	adds	r4, #48	@ 0x30
 801178a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801178e:	460c      	mov	r4, r1
 8011790:	2c63      	cmp	r4, #99	@ 0x63
 8011792:	f103 33ff 	add.w	r3, r3, #4294967295
 8011796:	4631      	mov	r1, r6
 8011798:	dcf1      	bgt.n	801177e <__exponent+0x1c>
 801179a:	3130      	adds	r1, #48	@ 0x30
 801179c:	1e94      	subs	r4, r2, #2
 801179e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80117a2:	1c41      	adds	r1, r0, #1
 80117a4:	4623      	mov	r3, r4
 80117a6:	42ab      	cmp	r3, r5
 80117a8:	d30a      	bcc.n	80117c0 <__exponent+0x5e>
 80117aa:	f10d 0309 	add.w	r3, sp, #9
 80117ae:	1a9b      	subs	r3, r3, r2
 80117b0:	42ac      	cmp	r4, r5
 80117b2:	bf88      	it	hi
 80117b4:	2300      	movhi	r3, #0
 80117b6:	3302      	adds	r3, #2
 80117b8:	4403      	add	r3, r0
 80117ba:	1a18      	subs	r0, r3, r0
 80117bc:	b003      	add	sp, #12
 80117be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80117c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80117c8:	e7ed      	b.n	80117a6 <__exponent+0x44>
 80117ca:	2330      	movs	r3, #48	@ 0x30
 80117cc:	3130      	adds	r1, #48	@ 0x30
 80117ce:	7083      	strb	r3, [r0, #2]
 80117d0:	70c1      	strb	r1, [r0, #3]
 80117d2:	1d03      	adds	r3, r0, #4
 80117d4:	e7f1      	b.n	80117ba <__exponent+0x58>
	...

080117d8 <_printf_float>:
 80117d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117dc:	b08d      	sub	sp, #52	@ 0x34
 80117de:	460c      	mov	r4, r1
 80117e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80117e4:	4616      	mov	r6, r2
 80117e6:	461f      	mov	r7, r3
 80117e8:	4605      	mov	r5, r0
 80117ea:	f000 fdcd 	bl	8012388 <_localeconv_r>
 80117ee:	6803      	ldr	r3, [r0, #0]
 80117f0:	9304      	str	r3, [sp, #16]
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7ee fd3c 	bl	8000270 <strlen>
 80117f8:	2300      	movs	r3, #0
 80117fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80117fc:	f8d8 3000 	ldr.w	r3, [r8]
 8011800:	9005      	str	r0, [sp, #20]
 8011802:	3307      	adds	r3, #7
 8011804:	f023 0307 	bic.w	r3, r3, #7
 8011808:	f103 0208 	add.w	r2, r3, #8
 801180c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011810:	f8d4 b000 	ldr.w	fp, [r4]
 8011814:	f8c8 2000 	str.w	r2, [r8]
 8011818:	e9d3 8900 	ldrd	r8, r9, [r3]
 801181c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011820:	9307      	str	r3, [sp, #28]
 8011822:	f8cd 8018 	str.w	r8, [sp, #24]
 8011826:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801182a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801182e:	4b9c      	ldr	r3, [pc, #624]	@ (8011aa0 <_printf_float+0x2c8>)
 8011830:	f04f 32ff 	mov.w	r2, #4294967295
 8011834:	f7ef f97a 	bl	8000b2c <__aeabi_dcmpun>
 8011838:	bb70      	cbnz	r0, 8011898 <_printf_float+0xc0>
 801183a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801183e:	4b98      	ldr	r3, [pc, #608]	@ (8011aa0 <_printf_float+0x2c8>)
 8011840:	f04f 32ff 	mov.w	r2, #4294967295
 8011844:	f7ef f954 	bl	8000af0 <__aeabi_dcmple>
 8011848:	bb30      	cbnz	r0, 8011898 <_printf_float+0xc0>
 801184a:	2200      	movs	r2, #0
 801184c:	2300      	movs	r3, #0
 801184e:	4640      	mov	r0, r8
 8011850:	4649      	mov	r1, r9
 8011852:	f7ef f943 	bl	8000adc <__aeabi_dcmplt>
 8011856:	b110      	cbz	r0, 801185e <_printf_float+0x86>
 8011858:	232d      	movs	r3, #45	@ 0x2d
 801185a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801185e:	4a91      	ldr	r2, [pc, #580]	@ (8011aa4 <_printf_float+0x2cc>)
 8011860:	4b91      	ldr	r3, [pc, #580]	@ (8011aa8 <_printf_float+0x2d0>)
 8011862:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011866:	bf8c      	ite	hi
 8011868:	4690      	movhi	r8, r2
 801186a:	4698      	movls	r8, r3
 801186c:	2303      	movs	r3, #3
 801186e:	6123      	str	r3, [r4, #16]
 8011870:	f02b 0304 	bic.w	r3, fp, #4
 8011874:	6023      	str	r3, [r4, #0]
 8011876:	f04f 0900 	mov.w	r9, #0
 801187a:	9700      	str	r7, [sp, #0]
 801187c:	4633      	mov	r3, r6
 801187e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011880:	4621      	mov	r1, r4
 8011882:	4628      	mov	r0, r5
 8011884:	f000 f9d2 	bl	8011c2c <_printf_common>
 8011888:	3001      	adds	r0, #1
 801188a:	f040 808d 	bne.w	80119a8 <_printf_float+0x1d0>
 801188e:	f04f 30ff 	mov.w	r0, #4294967295
 8011892:	b00d      	add	sp, #52	@ 0x34
 8011894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011898:	4642      	mov	r2, r8
 801189a:	464b      	mov	r3, r9
 801189c:	4640      	mov	r0, r8
 801189e:	4649      	mov	r1, r9
 80118a0:	f7ef f944 	bl	8000b2c <__aeabi_dcmpun>
 80118a4:	b140      	cbz	r0, 80118b8 <_printf_float+0xe0>
 80118a6:	464b      	mov	r3, r9
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	bfbc      	itt	lt
 80118ac:	232d      	movlt	r3, #45	@ 0x2d
 80118ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80118b2:	4a7e      	ldr	r2, [pc, #504]	@ (8011aac <_printf_float+0x2d4>)
 80118b4:	4b7e      	ldr	r3, [pc, #504]	@ (8011ab0 <_printf_float+0x2d8>)
 80118b6:	e7d4      	b.n	8011862 <_printf_float+0x8a>
 80118b8:	6863      	ldr	r3, [r4, #4]
 80118ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80118be:	9206      	str	r2, [sp, #24]
 80118c0:	1c5a      	adds	r2, r3, #1
 80118c2:	d13b      	bne.n	801193c <_printf_float+0x164>
 80118c4:	2306      	movs	r3, #6
 80118c6:	6063      	str	r3, [r4, #4]
 80118c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80118cc:	2300      	movs	r3, #0
 80118ce:	6022      	str	r2, [r4, #0]
 80118d0:	9303      	str	r3, [sp, #12]
 80118d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80118d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80118d8:	ab09      	add	r3, sp, #36	@ 0x24
 80118da:	9300      	str	r3, [sp, #0]
 80118dc:	6861      	ldr	r1, [r4, #4]
 80118de:	ec49 8b10 	vmov	d0, r8, r9
 80118e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80118e6:	4628      	mov	r0, r5
 80118e8:	f7ff fed6 	bl	8011698 <__cvt>
 80118ec:	9b06      	ldr	r3, [sp, #24]
 80118ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80118f0:	2b47      	cmp	r3, #71	@ 0x47
 80118f2:	4680      	mov	r8, r0
 80118f4:	d129      	bne.n	801194a <_printf_float+0x172>
 80118f6:	1cc8      	adds	r0, r1, #3
 80118f8:	db02      	blt.n	8011900 <_printf_float+0x128>
 80118fa:	6863      	ldr	r3, [r4, #4]
 80118fc:	4299      	cmp	r1, r3
 80118fe:	dd41      	ble.n	8011984 <_printf_float+0x1ac>
 8011900:	f1aa 0a02 	sub.w	sl, sl, #2
 8011904:	fa5f fa8a 	uxtb.w	sl, sl
 8011908:	3901      	subs	r1, #1
 801190a:	4652      	mov	r2, sl
 801190c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011910:	9109      	str	r1, [sp, #36]	@ 0x24
 8011912:	f7ff ff26 	bl	8011762 <__exponent>
 8011916:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011918:	1813      	adds	r3, r2, r0
 801191a:	2a01      	cmp	r2, #1
 801191c:	4681      	mov	r9, r0
 801191e:	6123      	str	r3, [r4, #16]
 8011920:	dc02      	bgt.n	8011928 <_printf_float+0x150>
 8011922:	6822      	ldr	r2, [r4, #0]
 8011924:	07d2      	lsls	r2, r2, #31
 8011926:	d501      	bpl.n	801192c <_printf_float+0x154>
 8011928:	3301      	adds	r3, #1
 801192a:	6123      	str	r3, [r4, #16]
 801192c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011930:	2b00      	cmp	r3, #0
 8011932:	d0a2      	beq.n	801187a <_printf_float+0xa2>
 8011934:	232d      	movs	r3, #45	@ 0x2d
 8011936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801193a:	e79e      	b.n	801187a <_printf_float+0xa2>
 801193c:	9a06      	ldr	r2, [sp, #24]
 801193e:	2a47      	cmp	r2, #71	@ 0x47
 8011940:	d1c2      	bne.n	80118c8 <_printf_float+0xf0>
 8011942:	2b00      	cmp	r3, #0
 8011944:	d1c0      	bne.n	80118c8 <_printf_float+0xf0>
 8011946:	2301      	movs	r3, #1
 8011948:	e7bd      	b.n	80118c6 <_printf_float+0xee>
 801194a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801194e:	d9db      	bls.n	8011908 <_printf_float+0x130>
 8011950:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011954:	d118      	bne.n	8011988 <_printf_float+0x1b0>
 8011956:	2900      	cmp	r1, #0
 8011958:	6863      	ldr	r3, [r4, #4]
 801195a:	dd0b      	ble.n	8011974 <_printf_float+0x19c>
 801195c:	6121      	str	r1, [r4, #16]
 801195e:	b913      	cbnz	r3, 8011966 <_printf_float+0x18e>
 8011960:	6822      	ldr	r2, [r4, #0]
 8011962:	07d0      	lsls	r0, r2, #31
 8011964:	d502      	bpl.n	801196c <_printf_float+0x194>
 8011966:	3301      	adds	r3, #1
 8011968:	440b      	add	r3, r1
 801196a:	6123      	str	r3, [r4, #16]
 801196c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801196e:	f04f 0900 	mov.w	r9, #0
 8011972:	e7db      	b.n	801192c <_printf_float+0x154>
 8011974:	b913      	cbnz	r3, 801197c <_printf_float+0x1a4>
 8011976:	6822      	ldr	r2, [r4, #0]
 8011978:	07d2      	lsls	r2, r2, #31
 801197a:	d501      	bpl.n	8011980 <_printf_float+0x1a8>
 801197c:	3302      	adds	r3, #2
 801197e:	e7f4      	b.n	801196a <_printf_float+0x192>
 8011980:	2301      	movs	r3, #1
 8011982:	e7f2      	b.n	801196a <_printf_float+0x192>
 8011984:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801198a:	4299      	cmp	r1, r3
 801198c:	db05      	blt.n	801199a <_printf_float+0x1c2>
 801198e:	6823      	ldr	r3, [r4, #0]
 8011990:	6121      	str	r1, [r4, #16]
 8011992:	07d8      	lsls	r0, r3, #31
 8011994:	d5ea      	bpl.n	801196c <_printf_float+0x194>
 8011996:	1c4b      	adds	r3, r1, #1
 8011998:	e7e7      	b.n	801196a <_printf_float+0x192>
 801199a:	2900      	cmp	r1, #0
 801199c:	bfd4      	ite	le
 801199e:	f1c1 0202 	rsble	r2, r1, #2
 80119a2:	2201      	movgt	r2, #1
 80119a4:	4413      	add	r3, r2
 80119a6:	e7e0      	b.n	801196a <_printf_float+0x192>
 80119a8:	6823      	ldr	r3, [r4, #0]
 80119aa:	055a      	lsls	r2, r3, #21
 80119ac:	d407      	bmi.n	80119be <_printf_float+0x1e6>
 80119ae:	6923      	ldr	r3, [r4, #16]
 80119b0:	4642      	mov	r2, r8
 80119b2:	4631      	mov	r1, r6
 80119b4:	4628      	mov	r0, r5
 80119b6:	47b8      	blx	r7
 80119b8:	3001      	adds	r0, #1
 80119ba:	d12b      	bne.n	8011a14 <_printf_float+0x23c>
 80119bc:	e767      	b.n	801188e <_printf_float+0xb6>
 80119be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80119c2:	f240 80dd 	bls.w	8011b80 <_printf_float+0x3a8>
 80119c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80119ca:	2200      	movs	r2, #0
 80119cc:	2300      	movs	r3, #0
 80119ce:	f7ef f87b 	bl	8000ac8 <__aeabi_dcmpeq>
 80119d2:	2800      	cmp	r0, #0
 80119d4:	d033      	beq.n	8011a3e <_printf_float+0x266>
 80119d6:	4a37      	ldr	r2, [pc, #220]	@ (8011ab4 <_printf_float+0x2dc>)
 80119d8:	2301      	movs	r3, #1
 80119da:	4631      	mov	r1, r6
 80119dc:	4628      	mov	r0, r5
 80119de:	47b8      	blx	r7
 80119e0:	3001      	adds	r0, #1
 80119e2:	f43f af54 	beq.w	801188e <_printf_float+0xb6>
 80119e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80119ea:	4543      	cmp	r3, r8
 80119ec:	db02      	blt.n	80119f4 <_printf_float+0x21c>
 80119ee:	6823      	ldr	r3, [r4, #0]
 80119f0:	07d8      	lsls	r0, r3, #31
 80119f2:	d50f      	bpl.n	8011a14 <_printf_float+0x23c>
 80119f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80119f8:	4631      	mov	r1, r6
 80119fa:	4628      	mov	r0, r5
 80119fc:	47b8      	blx	r7
 80119fe:	3001      	adds	r0, #1
 8011a00:	f43f af45 	beq.w	801188e <_printf_float+0xb6>
 8011a04:	f04f 0900 	mov.w	r9, #0
 8011a08:	f108 38ff 	add.w	r8, r8, #4294967295
 8011a0c:	f104 0a1a 	add.w	sl, r4, #26
 8011a10:	45c8      	cmp	r8, r9
 8011a12:	dc09      	bgt.n	8011a28 <_printf_float+0x250>
 8011a14:	6823      	ldr	r3, [r4, #0]
 8011a16:	079b      	lsls	r3, r3, #30
 8011a18:	f100 8103 	bmi.w	8011c22 <_printf_float+0x44a>
 8011a1c:	68e0      	ldr	r0, [r4, #12]
 8011a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a20:	4298      	cmp	r0, r3
 8011a22:	bfb8      	it	lt
 8011a24:	4618      	movlt	r0, r3
 8011a26:	e734      	b.n	8011892 <_printf_float+0xba>
 8011a28:	2301      	movs	r3, #1
 8011a2a:	4652      	mov	r2, sl
 8011a2c:	4631      	mov	r1, r6
 8011a2e:	4628      	mov	r0, r5
 8011a30:	47b8      	blx	r7
 8011a32:	3001      	adds	r0, #1
 8011a34:	f43f af2b 	beq.w	801188e <_printf_float+0xb6>
 8011a38:	f109 0901 	add.w	r9, r9, #1
 8011a3c:	e7e8      	b.n	8011a10 <_printf_float+0x238>
 8011a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	dc39      	bgt.n	8011ab8 <_printf_float+0x2e0>
 8011a44:	4a1b      	ldr	r2, [pc, #108]	@ (8011ab4 <_printf_float+0x2dc>)
 8011a46:	2301      	movs	r3, #1
 8011a48:	4631      	mov	r1, r6
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	47b8      	blx	r7
 8011a4e:	3001      	adds	r0, #1
 8011a50:	f43f af1d 	beq.w	801188e <_printf_float+0xb6>
 8011a54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011a58:	ea59 0303 	orrs.w	r3, r9, r3
 8011a5c:	d102      	bne.n	8011a64 <_printf_float+0x28c>
 8011a5e:	6823      	ldr	r3, [r4, #0]
 8011a60:	07d9      	lsls	r1, r3, #31
 8011a62:	d5d7      	bpl.n	8011a14 <_printf_float+0x23c>
 8011a64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a68:	4631      	mov	r1, r6
 8011a6a:	4628      	mov	r0, r5
 8011a6c:	47b8      	blx	r7
 8011a6e:	3001      	adds	r0, #1
 8011a70:	f43f af0d 	beq.w	801188e <_printf_float+0xb6>
 8011a74:	f04f 0a00 	mov.w	sl, #0
 8011a78:	f104 0b1a 	add.w	fp, r4, #26
 8011a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a7e:	425b      	negs	r3, r3
 8011a80:	4553      	cmp	r3, sl
 8011a82:	dc01      	bgt.n	8011a88 <_printf_float+0x2b0>
 8011a84:	464b      	mov	r3, r9
 8011a86:	e793      	b.n	80119b0 <_printf_float+0x1d8>
 8011a88:	2301      	movs	r3, #1
 8011a8a:	465a      	mov	r2, fp
 8011a8c:	4631      	mov	r1, r6
 8011a8e:	4628      	mov	r0, r5
 8011a90:	47b8      	blx	r7
 8011a92:	3001      	adds	r0, #1
 8011a94:	f43f aefb 	beq.w	801188e <_printf_float+0xb6>
 8011a98:	f10a 0a01 	add.w	sl, sl, #1
 8011a9c:	e7ee      	b.n	8011a7c <_printf_float+0x2a4>
 8011a9e:	bf00      	nop
 8011aa0:	7fefffff 	.word	0x7fefffff
 8011aa4:	08015f94 	.word	0x08015f94
 8011aa8:	08015f90 	.word	0x08015f90
 8011aac:	08015f9c 	.word	0x08015f9c
 8011ab0:	08015f98 	.word	0x08015f98
 8011ab4:	08015fa0 	.word	0x08015fa0
 8011ab8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011aba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011abe:	4553      	cmp	r3, sl
 8011ac0:	bfa8      	it	ge
 8011ac2:	4653      	movge	r3, sl
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	4699      	mov	r9, r3
 8011ac8:	dc36      	bgt.n	8011b38 <_printf_float+0x360>
 8011aca:	f04f 0b00 	mov.w	fp, #0
 8011ace:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ad2:	f104 021a 	add.w	r2, r4, #26
 8011ad6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011ad8:	9306      	str	r3, [sp, #24]
 8011ada:	eba3 0309 	sub.w	r3, r3, r9
 8011ade:	455b      	cmp	r3, fp
 8011ae0:	dc31      	bgt.n	8011b46 <_printf_float+0x36e>
 8011ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ae4:	459a      	cmp	sl, r3
 8011ae6:	dc3a      	bgt.n	8011b5e <_printf_float+0x386>
 8011ae8:	6823      	ldr	r3, [r4, #0]
 8011aea:	07da      	lsls	r2, r3, #31
 8011aec:	d437      	bmi.n	8011b5e <_printf_float+0x386>
 8011aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011af0:	ebaa 0903 	sub.w	r9, sl, r3
 8011af4:	9b06      	ldr	r3, [sp, #24]
 8011af6:	ebaa 0303 	sub.w	r3, sl, r3
 8011afa:	4599      	cmp	r9, r3
 8011afc:	bfa8      	it	ge
 8011afe:	4699      	movge	r9, r3
 8011b00:	f1b9 0f00 	cmp.w	r9, #0
 8011b04:	dc33      	bgt.n	8011b6e <_printf_float+0x396>
 8011b06:	f04f 0800 	mov.w	r8, #0
 8011b0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011b0e:	f104 0b1a 	add.w	fp, r4, #26
 8011b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b14:	ebaa 0303 	sub.w	r3, sl, r3
 8011b18:	eba3 0309 	sub.w	r3, r3, r9
 8011b1c:	4543      	cmp	r3, r8
 8011b1e:	f77f af79 	ble.w	8011a14 <_printf_float+0x23c>
 8011b22:	2301      	movs	r3, #1
 8011b24:	465a      	mov	r2, fp
 8011b26:	4631      	mov	r1, r6
 8011b28:	4628      	mov	r0, r5
 8011b2a:	47b8      	blx	r7
 8011b2c:	3001      	adds	r0, #1
 8011b2e:	f43f aeae 	beq.w	801188e <_printf_float+0xb6>
 8011b32:	f108 0801 	add.w	r8, r8, #1
 8011b36:	e7ec      	b.n	8011b12 <_printf_float+0x33a>
 8011b38:	4642      	mov	r2, r8
 8011b3a:	4631      	mov	r1, r6
 8011b3c:	4628      	mov	r0, r5
 8011b3e:	47b8      	blx	r7
 8011b40:	3001      	adds	r0, #1
 8011b42:	d1c2      	bne.n	8011aca <_printf_float+0x2f2>
 8011b44:	e6a3      	b.n	801188e <_printf_float+0xb6>
 8011b46:	2301      	movs	r3, #1
 8011b48:	4631      	mov	r1, r6
 8011b4a:	4628      	mov	r0, r5
 8011b4c:	9206      	str	r2, [sp, #24]
 8011b4e:	47b8      	blx	r7
 8011b50:	3001      	adds	r0, #1
 8011b52:	f43f ae9c 	beq.w	801188e <_printf_float+0xb6>
 8011b56:	9a06      	ldr	r2, [sp, #24]
 8011b58:	f10b 0b01 	add.w	fp, fp, #1
 8011b5c:	e7bb      	b.n	8011ad6 <_printf_float+0x2fe>
 8011b5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b62:	4631      	mov	r1, r6
 8011b64:	4628      	mov	r0, r5
 8011b66:	47b8      	blx	r7
 8011b68:	3001      	adds	r0, #1
 8011b6a:	d1c0      	bne.n	8011aee <_printf_float+0x316>
 8011b6c:	e68f      	b.n	801188e <_printf_float+0xb6>
 8011b6e:	9a06      	ldr	r2, [sp, #24]
 8011b70:	464b      	mov	r3, r9
 8011b72:	4442      	add	r2, r8
 8011b74:	4631      	mov	r1, r6
 8011b76:	4628      	mov	r0, r5
 8011b78:	47b8      	blx	r7
 8011b7a:	3001      	adds	r0, #1
 8011b7c:	d1c3      	bne.n	8011b06 <_printf_float+0x32e>
 8011b7e:	e686      	b.n	801188e <_printf_float+0xb6>
 8011b80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011b84:	f1ba 0f01 	cmp.w	sl, #1
 8011b88:	dc01      	bgt.n	8011b8e <_printf_float+0x3b6>
 8011b8a:	07db      	lsls	r3, r3, #31
 8011b8c:	d536      	bpl.n	8011bfc <_printf_float+0x424>
 8011b8e:	2301      	movs	r3, #1
 8011b90:	4642      	mov	r2, r8
 8011b92:	4631      	mov	r1, r6
 8011b94:	4628      	mov	r0, r5
 8011b96:	47b8      	blx	r7
 8011b98:	3001      	adds	r0, #1
 8011b9a:	f43f ae78 	beq.w	801188e <_printf_float+0xb6>
 8011b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ba2:	4631      	mov	r1, r6
 8011ba4:	4628      	mov	r0, r5
 8011ba6:	47b8      	blx	r7
 8011ba8:	3001      	adds	r0, #1
 8011baa:	f43f ae70 	beq.w	801188e <_printf_float+0xb6>
 8011bae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011bba:	f7ee ff85 	bl	8000ac8 <__aeabi_dcmpeq>
 8011bbe:	b9c0      	cbnz	r0, 8011bf2 <_printf_float+0x41a>
 8011bc0:	4653      	mov	r3, sl
 8011bc2:	f108 0201 	add.w	r2, r8, #1
 8011bc6:	4631      	mov	r1, r6
 8011bc8:	4628      	mov	r0, r5
 8011bca:	47b8      	blx	r7
 8011bcc:	3001      	adds	r0, #1
 8011bce:	d10c      	bne.n	8011bea <_printf_float+0x412>
 8011bd0:	e65d      	b.n	801188e <_printf_float+0xb6>
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	465a      	mov	r2, fp
 8011bd6:	4631      	mov	r1, r6
 8011bd8:	4628      	mov	r0, r5
 8011bda:	47b8      	blx	r7
 8011bdc:	3001      	adds	r0, #1
 8011bde:	f43f ae56 	beq.w	801188e <_printf_float+0xb6>
 8011be2:	f108 0801 	add.w	r8, r8, #1
 8011be6:	45d0      	cmp	r8, sl
 8011be8:	dbf3      	blt.n	8011bd2 <_printf_float+0x3fa>
 8011bea:	464b      	mov	r3, r9
 8011bec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011bf0:	e6df      	b.n	80119b2 <_printf_float+0x1da>
 8011bf2:	f04f 0800 	mov.w	r8, #0
 8011bf6:	f104 0b1a 	add.w	fp, r4, #26
 8011bfa:	e7f4      	b.n	8011be6 <_printf_float+0x40e>
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	4642      	mov	r2, r8
 8011c00:	e7e1      	b.n	8011bc6 <_printf_float+0x3ee>
 8011c02:	2301      	movs	r3, #1
 8011c04:	464a      	mov	r2, r9
 8011c06:	4631      	mov	r1, r6
 8011c08:	4628      	mov	r0, r5
 8011c0a:	47b8      	blx	r7
 8011c0c:	3001      	adds	r0, #1
 8011c0e:	f43f ae3e 	beq.w	801188e <_printf_float+0xb6>
 8011c12:	f108 0801 	add.w	r8, r8, #1
 8011c16:	68e3      	ldr	r3, [r4, #12]
 8011c18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011c1a:	1a5b      	subs	r3, r3, r1
 8011c1c:	4543      	cmp	r3, r8
 8011c1e:	dcf0      	bgt.n	8011c02 <_printf_float+0x42a>
 8011c20:	e6fc      	b.n	8011a1c <_printf_float+0x244>
 8011c22:	f04f 0800 	mov.w	r8, #0
 8011c26:	f104 0919 	add.w	r9, r4, #25
 8011c2a:	e7f4      	b.n	8011c16 <_printf_float+0x43e>

08011c2c <_printf_common>:
 8011c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c30:	4616      	mov	r6, r2
 8011c32:	4698      	mov	r8, r3
 8011c34:	688a      	ldr	r2, [r1, #8]
 8011c36:	690b      	ldr	r3, [r1, #16]
 8011c38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011c3c:	4293      	cmp	r3, r2
 8011c3e:	bfb8      	it	lt
 8011c40:	4613      	movlt	r3, r2
 8011c42:	6033      	str	r3, [r6, #0]
 8011c44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011c48:	4607      	mov	r7, r0
 8011c4a:	460c      	mov	r4, r1
 8011c4c:	b10a      	cbz	r2, 8011c52 <_printf_common+0x26>
 8011c4e:	3301      	adds	r3, #1
 8011c50:	6033      	str	r3, [r6, #0]
 8011c52:	6823      	ldr	r3, [r4, #0]
 8011c54:	0699      	lsls	r1, r3, #26
 8011c56:	bf42      	ittt	mi
 8011c58:	6833      	ldrmi	r3, [r6, #0]
 8011c5a:	3302      	addmi	r3, #2
 8011c5c:	6033      	strmi	r3, [r6, #0]
 8011c5e:	6825      	ldr	r5, [r4, #0]
 8011c60:	f015 0506 	ands.w	r5, r5, #6
 8011c64:	d106      	bne.n	8011c74 <_printf_common+0x48>
 8011c66:	f104 0a19 	add.w	sl, r4, #25
 8011c6a:	68e3      	ldr	r3, [r4, #12]
 8011c6c:	6832      	ldr	r2, [r6, #0]
 8011c6e:	1a9b      	subs	r3, r3, r2
 8011c70:	42ab      	cmp	r3, r5
 8011c72:	dc26      	bgt.n	8011cc2 <_printf_common+0x96>
 8011c74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011c78:	6822      	ldr	r2, [r4, #0]
 8011c7a:	3b00      	subs	r3, #0
 8011c7c:	bf18      	it	ne
 8011c7e:	2301      	movne	r3, #1
 8011c80:	0692      	lsls	r2, r2, #26
 8011c82:	d42b      	bmi.n	8011cdc <_printf_common+0xb0>
 8011c84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011c88:	4641      	mov	r1, r8
 8011c8a:	4638      	mov	r0, r7
 8011c8c:	47c8      	blx	r9
 8011c8e:	3001      	adds	r0, #1
 8011c90:	d01e      	beq.n	8011cd0 <_printf_common+0xa4>
 8011c92:	6823      	ldr	r3, [r4, #0]
 8011c94:	6922      	ldr	r2, [r4, #16]
 8011c96:	f003 0306 	and.w	r3, r3, #6
 8011c9a:	2b04      	cmp	r3, #4
 8011c9c:	bf02      	ittt	eq
 8011c9e:	68e5      	ldreq	r5, [r4, #12]
 8011ca0:	6833      	ldreq	r3, [r6, #0]
 8011ca2:	1aed      	subeq	r5, r5, r3
 8011ca4:	68a3      	ldr	r3, [r4, #8]
 8011ca6:	bf0c      	ite	eq
 8011ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011cac:	2500      	movne	r5, #0
 8011cae:	4293      	cmp	r3, r2
 8011cb0:	bfc4      	itt	gt
 8011cb2:	1a9b      	subgt	r3, r3, r2
 8011cb4:	18ed      	addgt	r5, r5, r3
 8011cb6:	2600      	movs	r6, #0
 8011cb8:	341a      	adds	r4, #26
 8011cba:	42b5      	cmp	r5, r6
 8011cbc:	d11a      	bne.n	8011cf4 <_printf_common+0xc8>
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	e008      	b.n	8011cd4 <_printf_common+0xa8>
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	4652      	mov	r2, sl
 8011cc6:	4641      	mov	r1, r8
 8011cc8:	4638      	mov	r0, r7
 8011cca:	47c8      	blx	r9
 8011ccc:	3001      	adds	r0, #1
 8011cce:	d103      	bne.n	8011cd8 <_printf_common+0xac>
 8011cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8011cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cd8:	3501      	adds	r5, #1
 8011cda:	e7c6      	b.n	8011c6a <_printf_common+0x3e>
 8011cdc:	18e1      	adds	r1, r4, r3
 8011cde:	1c5a      	adds	r2, r3, #1
 8011ce0:	2030      	movs	r0, #48	@ 0x30
 8011ce2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011ce6:	4422      	add	r2, r4
 8011ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011cf0:	3302      	adds	r3, #2
 8011cf2:	e7c7      	b.n	8011c84 <_printf_common+0x58>
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	4622      	mov	r2, r4
 8011cf8:	4641      	mov	r1, r8
 8011cfa:	4638      	mov	r0, r7
 8011cfc:	47c8      	blx	r9
 8011cfe:	3001      	adds	r0, #1
 8011d00:	d0e6      	beq.n	8011cd0 <_printf_common+0xa4>
 8011d02:	3601      	adds	r6, #1
 8011d04:	e7d9      	b.n	8011cba <_printf_common+0x8e>
	...

08011d08 <_printf_i>:
 8011d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d0c:	7e0f      	ldrb	r7, [r1, #24]
 8011d0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011d10:	2f78      	cmp	r7, #120	@ 0x78
 8011d12:	4691      	mov	r9, r2
 8011d14:	4680      	mov	r8, r0
 8011d16:	460c      	mov	r4, r1
 8011d18:	469a      	mov	sl, r3
 8011d1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011d1e:	d807      	bhi.n	8011d30 <_printf_i+0x28>
 8011d20:	2f62      	cmp	r7, #98	@ 0x62
 8011d22:	d80a      	bhi.n	8011d3a <_printf_i+0x32>
 8011d24:	2f00      	cmp	r7, #0
 8011d26:	f000 80d1 	beq.w	8011ecc <_printf_i+0x1c4>
 8011d2a:	2f58      	cmp	r7, #88	@ 0x58
 8011d2c:	f000 80b8 	beq.w	8011ea0 <_printf_i+0x198>
 8011d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011d34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011d38:	e03a      	b.n	8011db0 <_printf_i+0xa8>
 8011d3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011d3e:	2b15      	cmp	r3, #21
 8011d40:	d8f6      	bhi.n	8011d30 <_printf_i+0x28>
 8011d42:	a101      	add	r1, pc, #4	@ (adr r1, 8011d48 <_printf_i+0x40>)
 8011d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011d48:	08011da1 	.word	0x08011da1
 8011d4c:	08011db5 	.word	0x08011db5
 8011d50:	08011d31 	.word	0x08011d31
 8011d54:	08011d31 	.word	0x08011d31
 8011d58:	08011d31 	.word	0x08011d31
 8011d5c:	08011d31 	.word	0x08011d31
 8011d60:	08011db5 	.word	0x08011db5
 8011d64:	08011d31 	.word	0x08011d31
 8011d68:	08011d31 	.word	0x08011d31
 8011d6c:	08011d31 	.word	0x08011d31
 8011d70:	08011d31 	.word	0x08011d31
 8011d74:	08011eb3 	.word	0x08011eb3
 8011d78:	08011ddf 	.word	0x08011ddf
 8011d7c:	08011e6d 	.word	0x08011e6d
 8011d80:	08011d31 	.word	0x08011d31
 8011d84:	08011d31 	.word	0x08011d31
 8011d88:	08011ed5 	.word	0x08011ed5
 8011d8c:	08011d31 	.word	0x08011d31
 8011d90:	08011ddf 	.word	0x08011ddf
 8011d94:	08011d31 	.word	0x08011d31
 8011d98:	08011d31 	.word	0x08011d31
 8011d9c:	08011e75 	.word	0x08011e75
 8011da0:	6833      	ldr	r3, [r6, #0]
 8011da2:	1d1a      	adds	r2, r3, #4
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	6032      	str	r2, [r6, #0]
 8011da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011dac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011db0:	2301      	movs	r3, #1
 8011db2:	e09c      	b.n	8011eee <_printf_i+0x1e6>
 8011db4:	6833      	ldr	r3, [r6, #0]
 8011db6:	6820      	ldr	r0, [r4, #0]
 8011db8:	1d19      	adds	r1, r3, #4
 8011dba:	6031      	str	r1, [r6, #0]
 8011dbc:	0606      	lsls	r6, r0, #24
 8011dbe:	d501      	bpl.n	8011dc4 <_printf_i+0xbc>
 8011dc0:	681d      	ldr	r5, [r3, #0]
 8011dc2:	e003      	b.n	8011dcc <_printf_i+0xc4>
 8011dc4:	0645      	lsls	r5, r0, #25
 8011dc6:	d5fb      	bpl.n	8011dc0 <_printf_i+0xb8>
 8011dc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011dcc:	2d00      	cmp	r5, #0
 8011dce:	da03      	bge.n	8011dd8 <_printf_i+0xd0>
 8011dd0:	232d      	movs	r3, #45	@ 0x2d
 8011dd2:	426d      	negs	r5, r5
 8011dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011dd8:	4858      	ldr	r0, [pc, #352]	@ (8011f3c <_printf_i+0x234>)
 8011dda:	230a      	movs	r3, #10
 8011ddc:	e011      	b.n	8011e02 <_printf_i+0xfa>
 8011dde:	6821      	ldr	r1, [r4, #0]
 8011de0:	6833      	ldr	r3, [r6, #0]
 8011de2:	0608      	lsls	r0, r1, #24
 8011de4:	f853 5b04 	ldr.w	r5, [r3], #4
 8011de8:	d402      	bmi.n	8011df0 <_printf_i+0xe8>
 8011dea:	0649      	lsls	r1, r1, #25
 8011dec:	bf48      	it	mi
 8011dee:	b2ad      	uxthmi	r5, r5
 8011df0:	2f6f      	cmp	r7, #111	@ 0x6f
 8011df2:	4852      	ldr	r0, [pc, #328]	@ (8011f3c <_printf_i+0x234>)
 8011df4:	6033      	str	r3, [r6, #0]
 8011df6:	bf14      	ite	ne
 8011df8:	230a      	movne	r3, #10
 8011dfa:	2308      	moveq	r3, #8
 8011dfc:	2100      	movs	r1, #0
 8011dfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011e02:	6866      	ldr	r6, [r4, #4]
 8011e04:	60a6      	str	r6, [r4, #8]
 8011e06:	2e00      	cmp	r6, #0
 8011e08:	db05      	blt.n	8011e16 <_printf_i+0x10e>
 8011e0a:	6821      	ldr	r1, [r4, #0]
 8011e0c:	432e      	orrs	r6, r5
 8011e0e:	f021 0104 	bic.w	r1, r1, #4
 8011e12:	6021      	str	r1, [r4, #0]
 8011e14:	d04b      	beq.n	8011eae <_printf_i+0x1a6>
 8011e16:	4616      	mov	r6, r2
 8011e18:	fbb5 f1f3 	udiv	r1, r5, r3
 8011e1c:	fb03 5711 	mls	r7, r3, r1, r5
 8011e20:	5dc7      	ldrb	r7, [r0, r7]
 8011e22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011e26:	462f      	mov	r7, r5
 8011e28:	42bb      	cmp	r3, r7
 8011e2a:	460d      	mov	r5, r1
 8011e2c:	d9f4      	bls.n	8011e18 <_printf_i+0x110>
 8011e2e:	2b08      	cmp	r3, #8
 8011e30:	d10b      	bne.n	8011e4a <_printf_i+0x142>
 8011e32:	6823      	ldr	r3, [r4, #0]
 8011e34:	07df      	lsls	r7, r3, #31
 8011e36:	d508      	bpl.n	8011e4a <_printf_i+0x142>
 8011e38:	6923      	ldr	r3, [r4, #16]
 8011e3a:	6861      	ldr	r1, [r4, #4]
 8011e3c:	4299      	cmp	r1, r3
 8011e3e:	bfde      	ittt	le
 8011e40:	2330      	movle	r3, #48	@ 0x30
 8011e42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011e46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011e4a:	1b92      	subs	r2, r2, r6
 8011e4c:	6122      	str	r2, [r4, #16]
 8011e4e:	f8cd a000 	str.w	sl, [sp]
 8011e52:	464b      	mov	r3, r9
 8011e54:	aa03      	add	r2, sp, #12
 8011e56:	4621      	mov	r1, r4
 8011e58:	4640      	mov	r0, r8
 8011e5a:	f7ff fee7 	bl	8011c2c <_printf_common>
 8011e5e:	3001      	adds	r0, #1
 8011e60:	d14a      	bne.n	8011ef8 <_printf_i+0x1f0>
 8011e62:	f04f 30ff 	mov.w	r0, #4294967295
 8011e66:	b004      	add	sp, #16
 8011e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e6c:	6823      	ldr	r3, [r4, #0]
 8011e6e:	f043 0320 	orr.w	r3, r3, #32
 8011e72:	6023      	str	r3, [r4, #0]
 8011e74:	4832      	ldr	r0, [pc, #200]	@ (8011f40 <_printf_i+0x238>)
 8011e76:	2778      	movs	r7, #120	@ 0x78
 8011e78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011e7c:	6823      	ldr	r3, [r4, #0]
 8011e7e:	6831      	ldr	r1, [r6, #0]
 8011e80:	061f      	lsls	r7, r3, #24
 8011e82:	f851 5b04 	ldr.w	r5, [r1], #4
 8011e86:	d402      	bmi.n	8011e8e <_printf_i+0x186>
 8011e88:	065f      	lsls	r7, r3, #25
 8011e8a:	bf48      	it	mi
 8011e8c:	b2ad      	uxthmi	r5, r5
 8011e8e:	6031      	str	r1, [r6, #0]
 8011e90:	07d9      	lsls	r1, r3, #31
 8011e92:	bf44      	itt	mi
 8011e94:	f043 0320 	orrmi.w	r3, r3, #32
 8011e98:	6023      	strmi	r3, [r4, #0]
 8011e9a:	b11d      	cbz	r5, 8011ea4 <_printf_i+0x19c>
 8011e9c:	2310      	movs	r3, #16
 8011e9e:	e7ad      	b.n	8011dfc <_printf_i+0xf4>
 8011ea0:	4826      	ldr	r0, [pc, #152]	@ (8011f3c <_printf_i+0x234>)
 8011ea2:	e7e9      	b.n	8011e78 <_printf_i+0x170>
 8011ea4:	6823      	ldr	r3, [r4, #0]
 8011ea6:	f023 0320 	bic.w	r3, r3, #32
 8011eaa:	6023      	str	r3, [r4, #0]
 8011eac:	e7f6      	b.n	8011e9c <_printf_i+0x194>
 8011eae:	4616      	mov	r6, r2
 8011eb0:	e7bd      	b.n	8011e2e <_printf_i+0x126>
 8011eb2:	6833      	ldr	r3, [r6, #0]
 8011eb4:	6825      	ldr	r5, [r4, #0]
 8011eb6:	6961      	ldr	r1, [r4, #20]
 8011eb8:	1d18      	adds	r0, r3, #4
 8011eba:	6030      	str	r0, [r6, #0]
 8011ebc:	062e      	lsls	r6, r5, #24
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	d501      	bpl.n	8011ec6 <_printf_i+0x1be>
 8011ec2:	6019      	str	r1, [r3, #0]
 8011ec4:	e002      	b.n	8011ecc <_printf_i+0x1c4>
 8011ec6:	0668      	lsls	r0, r5, #25
 8011ec8:	d5fb      	bpl.n	8011ec2 <_printf_i+0x1ba>
 8011eca:	8019      	strh	r1, [r3, #0]
 8011ecc:	2300      	movs	r3, #0
 8011ece:	6123      	str	r3, [r4, #16]
 8011ed0:	4616      	mov	r6, r2
 8011ed2:	e7bc      	b.n	8011e4e <_printf_i+0x146>
 8011ed4:	6833      	ldr	r3, [r6, #0]
 8011ed6:	1d1a      	adds	r2, r3, #4
 8011ed8:	6032      	str	r2, [r6, #0]
 8011eda:	681e      	ldr	r6, [r3, #0]
 8011edc:	6862      	ldr	r2, [r4, #4]
 8011ede:	2100      	movs	r1, #0
 8011ee0:	4630      	mov	r0, r6
 8011ee2:	f7ee f975 	bl	80001d0 <memchr>
 8011ee6:	b108      	cbz	r0, 8011eec <_printf_i+0x1e4>
 8011ee8:	1b80      	subs	r0, r0, r6
 8011eea:	6060      	str	r0, [r4, #4]
 8011eec:	6863      	ldr	r3, [r4, #4]
 8011eee:	6123      	str	r3, [r4, #16]
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011ef6:	e7aa      	b.n	8011e4e <_printf_i+0x146>
 8011ef8:	6923      	ldr	r3, [r4, #16]
 8011efa:	4632      	mov	r2, r6
 8011efc:	4649      	mov	r1, r9
 8011efe:	4640      	mov	r0, r8
 8011f00:	47d0      	blx	sl
 8011f02:	3001      	adds	r0, #1
 8011f04:	d0ad      	beq.n	8011e62 <_printf_i+0x15a>
 8011f06:	6823      	ldr	r3, [r4, #0]
 8011f08:	079b      	lsls	r3, r3, #30
 8011f0a:	d413      	bmi.n	8011f34 <_printf_i+0x22c>
 8011f0c:	68e0      	ldr	r0, [r4, #12]
 8011f0e:	9b03      	ldr	r3, [sp, #12]
 8011f10:	4298      	cmp	r0, r3
 8011f12:	bfb8      	it	lt
 8011f14:	4618      	movlt	r0, r3
 8011f16:	e7a6      	b.n	8011e66 <_printf_i+0x15e>
 8011f18:	2301      	movs	r3, #1
 8011f1a:	4632      	mov	r2, r6
 8011f1c:	4649      	mov	r1, r9
 8011f1e:	4640      	mov	r0, r8
 8011f20:	47d0      	blx	sl
 8011f22:	3001      	adds	r0, #1
 8011f24:	d09d      	beq.n	8011e62 <_printf_i+0x15a>
 8011f26:	3501      	adds	r5, #1
 8011f28:	68e3      	ldr	r3, [r4, #12]
 8011f2a:	9903      	ldr	r1, [sp, #12]
 8011f2c:	1a5b      	subs	r3, r3, r1
 8011f2e:	42ab      	cmp	r3, r5
 8011f30:	dcf2      	bgt.n	8011f18 <_printf_i+0x210>
 8011f32:	e7eb      	b.n	8011f0c <_printf_i+0x204>
 8011f34:	2500      	movs	r5, #0
 8011f36:	f104 0619 	add.w	r6, r4, #25
 8011f3a:	e7f5      	b.n	8011f28 <_printf_i+0x220>
 8011f3c:	08015fa2 	.word	0x08015fa2
 8011f40:	08015fb3 	.word	0x08015fb3

08011f44 <std>:
 8011f44:	2300      	movs	r3, #0
 8011f46:	b510      	push	{r4, lr}
 8011f48:	4604      	mov	r4, r0
 8011f4a:	e9c0 3300 	strd	r3, r3, [r0]
 8011f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f52:	6083      	str	r3, [r0, #8]
 8011f54:	8181      	strh	r1, [r0, #12]
 8011f56:	6643      	str	r3, [r0, #100]	@ 0x64
 8011f58:	81c2      	strh	r2, [r0, #14]
 8011f5a:	6183      	str	r3, [r0, #24]
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	2208      	movs	r2, #8
 8011f60:	305c      	adds	r0, #92	@ 0x5c
 8011f62:	f000 fa09 	bl	8012378 <memset>
 8011f66:	4b0d      	ldr	r3, [pc, #52]	@ (8011f9c <std+0x58>)
 8011f68:	6263      	str	r3, [r4, #36]	@ 0x24
 8011f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8011fa0 <std+0x5c>)
 8011f6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8011fa4 <std+0x60>)
 8011f70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011f72:	4b0d      	ldr	r3, [pc, #52]	@ (8011fa8 <std+0x64>)
 8011f74:	6323      	str	r3, [r4, #48]	@ 0x30
 8011f76:	4b0d      	ldr	r3, [pc, #52]	@ (8011fac <std+0x68>)
 8011f78:	6224      	str	r4, [r4, #32]
 8011f7a:	429c      	cmp	r4, r3
 8011f7c:	d006      	beq.n	8011f8c <std+0x48>
 8011f7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011f82:	4294      	cmp	r4, r2
 8011f84:	d002      	beq.n	8011f8c <std+0x48>
 8011f86:	33d0      	adds	r3, #208	@ 0xd0
 8011f88:	429c      	cmp	r4, r3
 8011f8a:	d105      	bne.n	8011f98 <std+0x54>
 8011f8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f94:	f000 ba7c 	b.w	8012490 <__retarget_lock_init_recursive>
 8011f98:	bd10      	pop	{r4, pc}
 8011f9a:	bf00      	nop
 8011f9c:	080121a9 	.word	0x080121a9
 8011fa0:	080121cb 	.word	0x080121cb
 8011fa4:	08012203 	.word	0x08012203
 8011fa8:	08012227 	.word	0x08012227
 8011fac:	20000a98 	.word	0x20000a98

08011fb0 <stdio_exit_handler>:
 8011fb0:	4a02      	ldr	r2, [pc, #8]	@ (8011fbc <stdio_exit_handler+0xc>)
 8011fb2:	4903      	ldr	r1, [pc, #12]	@ (8011fc0 <stdio_exit_handler+0x10>)
 8011fb4:	4803      	ldr	r0, [pc, #12]	@ (8011fc4 <stdio_exit_handler+0x14>)
 8011fb6:	f000 b869 	b.w	801208c <_fwalk_sglue>
 8011fba:	bf00      	nop
 8011fbc:	200000e4 	.word	0x200000e4
 8011fc0:	08013c5d 	.word	0x08013c5d
 8011fc4:	200000f4 	.word	0x200000f4

08011fc8 <cleanup_stdio>:
 8011fc8:	6841      	ldr	r1, [r0, #4]
 8011fca:	4b0c      	ldr	r3, [pc, #48]	@ (8011ffc <cleanup_stdio+0x34>)
 8011fcc:	4299      	cmp	r1, r3
 8011fce:	b510      	push	{r4, lr}
 8011fd0:	4604      	mov	r4, r0
 8011fd2:	d001      	beq.n	8011fd8 <cleanup_stdio+0x10>
 8011fd4:	f001 fe42 	bl	8013c5c <_fflush_r>
 8011fd8:	68a1      	ldr	r1, [r4, #8]
 8011fda:	4b09      	ldr	r3, [pc, #36]	@ (8012000 <cleanup_stdio+0x38>)
 8011fdc:	4299      	cmp	r1, r3
 8011fde:	d002      	beq.n	8011fe6 <cleanup_stdio+0x1e>
 8011fe0:	4620      	mov	r0, r4
 8011fe2:	f001 fe3b 	bl	8013c5c <_fflush_r>
 8011fe6:	68e1      	ldr	r1, [r4, #12]
 8011fe8:	4b06      	ldr	r3, [pc, #24]	@ (8012004 <cleanup_stdio+0x3c>)
 8011fea:	4299      	cmp	r1, r3
 8011fec:	d004      	beq.n	8011ff8 <cleanup_stdio+0x30>
 8011fee:	4620      	mov	r0, r4
 8011ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ff4:	f001 be32 	b.w	8013c5c <_fflush_r>
 8011ff8:	bd10      	pop	{r4, pc}
 8011ffa:	bf00      	nop
 8011ffc:	20000a98 	.word	0x20000a98
 8012000:	20000b00 	.word	0x20000b00
 8012004:	20000b68 	.word	0x20000b68

08012008 <global_stdio_init.part.0>:
 8012008:	b510      	push	{r4, lr}
 801200a:	4b0b      	ldr	r3, [pc, #44]	@ (8012038 <global_stdio_init.part.0+0x30>)
 801200c:	4c0b      	ldr	r4, [pc, #44]	@ (801203c <global_stdio_init.part.0+0x34>)
 801200e:	4a0c      	ldr	r2, [pc, #48]	@ (8012040 <global_stdio_init.part.0+0x38>)
 8012010:	601a      	str	r2, [r3, #0]
 8012012:	4620      	mov	r0, r4
 8012014:	2200      	movs	r2, #0
 8012016:	2104      	movs	r1, #4
 8012018:	f7ff ff94 	bl	8011f44 <std>
 801201c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012020:	2201      	movs	r2, #1
 8012022:	2109      	movs	r1, #9
 8012024:	f7ff ff8e 	bl	8011f44 <std>
 8012028:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801202c:	2202      	movs	r2, #2
 801202e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012032:	2112      	movs	r1, #18
 8012034:	f7ff bf86 	b.w	8011f44 <std>
 8012038:	20000bd0 	.word	0x20000bd0
 801203c:	20000a98 	.word	0x20000a98
 8012040:	08011fb1 	.word	0x08011fb1

08012044 <__sfp_lock_acquire>:
 8012044:	4801      	ldr	r0, [pc, #4]	@ (801204c <__sfp_lock_acquire+0x8>)
 8012046:	f000 ba24 	b.w	8012492 <__retarget_lock_acquire_recursive>
 801204a:	bf00      	nop
 801204c:	20000bd9 	.word	0x20000bd9

08012050 <__sfp_lock_release>:
 8012050:	4801      	ldr	r0, [pc, #4]	@ (8012058 <__sfp_lock_release+0x8>)
 8012052:	f000 ba1f 	b.w	8012494 <__retarget_lock_release_recursive>
 8012056:	bf00      	nop
 8012058:	20000bd9 	.word	0x20000bd9

0801205c <__sinit>:
 801205c:	b510      	push	{r4, lr}
 801205e:	4604      	mov	r4, r0
 8012060:	f7ff fff0 	bl	8012044 <__sfp_lock_acquire>
 8012064:	6a23      	ldr	r3, [r4, #32]
 8012066:	b11b      	cbz	r3, 8012070 <__sinit+0x14>
 8012068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801206c:	f7ff bff0 	b.w	8012050 <__sfp_lock_release>
 8012070:	4b04      	ldr	r3, [pc, #16]	@ (8012084 <__sinit+0x28>)
 8012072:	6223      	str	r3, [r4, #32]
 8012074:	4b04      	ldr	r3, [pc, #16]	@ (8012088 <__sinit+0x2c>)
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d1f5      	bne.n	8012068 <__sinit+0xc>
 801207c:	f7ff ffc4 	bl	8012008 <global_stdio_init.part.0>
 8012080:	e7f2      	b.n	8012068 <__sinit+0xc>
 8012082:	bf00      	nop
 8012084:	08011fc9 	.word	0x08011fc9
 8012088:	20000bd0 	.word	0x20000bd0

0801208c <_fwalk_sglue>:
 801208c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012090:	4607      	mov	r7, r0
 8012092:	4688      	mov	r8, r1
 8012094:	4614      	mov	r4, r2
 8012096:	2600      	movs	r6, #0
 8012098:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801209c:	f1b9 0901 	subs.w	r9, r9, #1
 80120a0:	d505      	bpl.n	80120ae <_fwalk_sglue+0x22>
 80120a2:	6824      	ldr	r4, [r4, #0]
 80120a4:	2c00      	cmp	r4, #0
 80120a6:	d1f7      	bne.n	8012098 <_fwalk_sglue+0xc>
 80120a8:	4630      	mov	r0, r6
 80120aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120ae:	89ab      	ldrh	r3, [r5, #12]
 80120b0:	2b01      	cmp	r3, #1
 80120b2:	d907      	bls.n	80120c4 <_fwalk_sglue+0x38>
 80120b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80120b8:	3301      	adds	r3, #1
 80120ba:	d003      	beq.n	80120c4 <_fwalk_sglue+0x38>
 80120bc:	4629      	mov	r1, r5
 80120be:	4638      	mov	r0, r7
 80120c0:	47c0      	blx	r8
 80120c2:	4306      	orrs	r6, r0
 80120c4:	3568      	adds	r5, #104	@ 0x68
 80120c6:	e7e9      	b.n	801209c <_fwalk_sglue+0x10>

080120c8 <iprintf>:
 80120c8:	b40f      	push	{r0, r1, r2, r3}
 80120ca:	b507      	push	{r0, r1, r2, lr}
 80120cc:	4906      	ldr	r1, [pc, #24]	@ (80120e8 <iprintf+0x20>)
 80120ce:	ab04      	add	r3, sp, #16
 80120d0:	6808      	ldr	r0, [r1, #0]
 80120d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80120d6:	6881      	ldr	r1, [r0, #8]
 80120d8:	9301      	str	r3, [sp, #4]
 80120da:	f001 fc23 	bl	8013924 <_vfiprintf_r>
 80120de:	b003      	add	sp, #12
 80120e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80120e4:	b004      	add	sp, #16
 80120e6:	4770      	bx	lr
 80120e8:	200000f0 	.word	0x200000f0

080120ec <_puts_r>:
 80120ec:	6a03      	ldr	r3, [r0, #32]
 80120ee:	b570      	push	{r4, r5, r6, lr}
 80120f0:	6884      	ldr	r4, [r0, #8]
 80120f2:	4605      	mov	r5, r0
 80120f4:	460e      	mov	r6, r1
 80120f6:	b90b      	cbnz	r3, 80120fc <_puts_r+0x10>
 80120f8:	f7ff ffb0 	bl	801205c <__sinit>
 80120fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80120fe:	07db      	lsls	r3, r3, #31
 8012100:	d405      	bmi.n	801210e <_puts_r+0x22>
 8012102:	89a3      	ldrh	r3, [r4, #12]
 8012104:	0598      	lsls	r0, r3, #22
 8012106:	d402      	bmi.n	801210e <_puts_r+0x22>
 8012108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801210a:	f000 f9c2 	bl	8012492 <__retarget_lock_acquire_recursive>
 801210e:	89a3      	ldrh	r3, [r4, #12]
 8012110:	0719      	lsls	r1, r3, #28
 8012112:	d502      	bpl.n	801211a <_puts_r+0x2e>
 8012114:	6923      	ldr	r3, [r4, #16]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d135      	bne.n	8012186 <_puts_r+0x9a>
 801211a:	4621      	mov	r1, r4
 801211c:	4628      	mov	r0, r5
 801211e:	f000 f8c5 	bl	80122ac <__swsetup_r>
 8012122:	b380      	cbz	r0, 8012186 <_puts_r+0x9a>
 8012124:	f04f 35ff 	mov.w	r5, #4294967295
 8012128:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801212a:	07da      	lsls	r2, r3, #31
 801212c:	d405      	bmi.n	801213a <_puts_r+0x4e>
 801212e:	89a3      	ldrh	r3, [r4, #12]
 8012130:	059b      	lsls	r3, r3, #22
 8012132:	d402      	bmi.n	801213a <_puts_r+0x4e>
 8012134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012136:	f000 f9ad 	bl	8012494 <__retarget_lock_release_recursive>
 801213a:	4628      	mov	r0, r5
 801213c:	bd70      	pop	{r4, r5, r6, pc}
 801213e:	2b00      	cmp	r3, #0
 8012140:	da04      	bge.n	801214c <_puts_r+0x60>
 8012142:	69a2      	ldr	r2, [r4, #24]
 8012144:	429a      	cmp	r2, r3
 8012146:	dc17      	bgt.n	8012178 <_puts_r+0x8c>
 8012148:	290a      	cmp	r1, #10
 801214a:	d015      	beq.n	8012178 <_puts_r+0x8c>
 801214c:	6823      	ldr	r3, [r4, #0]
 801214e:	1c5a      	adds	r2, r3, #1
 8012150:	6022      	str	r2, [r4, #0]
 8012152:	7019      	strb	r1, [r3, #0]
 8012154:	68a3      	ldr	r3, [r4, #8]
 8012156:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801215a:	3b01      	subs	r3, #1
 801215c:	60a3      	str	r3, [r4, #8]
 801215e:	2900      	cmp	r1, #0
 8012160:	d1ed      	bne.n	801213e <_puts_r+0x52>
 8012162:	2b00      	cmp	r3, #0
 8012164:	da11      	bge.n	801218a <_puts_r+0x9e>
 8012166:	4622      	mov	r2, r4
 8012168:	210a      	movs	r1, #10
 801216a:	4628      	mov	r0, r5
 801216c:	f000 f85f 	bl	801222e <__swbuf_r>
 8012170:	3001      	adds	r0, #1
 8012172:	d0d7      	beq.n	8012124 <_puts_r+0x38>
 8012174:	250a      	movs	r5, #10
 8012176:	e7d7      	b.n	8012128 <_puts_r+0x3c>
 8012178:	4622      	mov	r2, r4
 801217a:	4628      	mov	r0, r5
 801217c:	f000 f857 	bl	801222e <__swbuf_r>
 8012180:	3001      	adds	r0, #1
 8012182:	d1e7      	bne.n	8012154 <_puts_r+0x68>
 8012184:	e7ce      	b.n	8012124 <_puts_r+0x38>
 8012186:	3e01      	subs	r6, #1
 8012188:	e7e4      	b.n	8012154 <_puts_r+0x68>
 801218a:	6823      	ldr	r3, [r4, #0]
 801218c:	1c5a      	adds	r2, r3, #1
 801218e:	6022      	str	r2, [r4, #0]
 8012190:	220a      	movs	r2, #10
 8012192:	701a      	strb	r2, [r3, #0]
 8012194:	e7ee      	b.n	8012174 <_puts_r+0x88>
	...

08012198 <puts>:
 8012198:	4b02      	ldr	r3, [pc, #8]	@ (80121a4 <puts+0xc>)
 801219a:	4601      	mov	r1, r0
 801219c:	6818      	ldr	r0, [r3, #0]
 801219e:	f7ff bfa5 	b.w	80120ec <_puts_r>
 80121a2:	bf00      	nop
 80121a4:	200000f0 	.word	0x200000f0

080121a8 <__sread>:
 80121a8:	b510      	push	{r4, lr}
 80121aa:	460c      	mov	r4, r1
 80121ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121b0:	f000 f910 	bl	80123d4 <_read_r>
 80121b4:	2800      	cmp	r0, #0
 80121b6:	bfab      	itete	ge
 80121b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80121ba:	89a3      	ldrhlt	r3, [r4, #12]
 80121bc:	181b      	addge	r3, r3, r0
 80121be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80121c2:	bfac      	ite	ge
 80121c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80121c6:	81a3      	strhlt	r3, [r4, #12]
 80121c8:	bd10      	pop	{r4, pc}

080121ca <__swrite>:
 80121ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121ce:	461f      	mov	r7, r3
 80121d0:	898b      	ldrh	r3, [r1, #12]
 80121d2:	05db      	lsls	r3, r3, #23
 80121d4:	4605      	mov	r5, r0
 80121d6:	460c      	mov	r4, r1
 80121d8:	4616      	mov	r6, r2
 80121da:	d505      	bpl.n	80121e8 <__swrite+0x1e>
 80121dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121e0:	2302      	movs	r3, #2
 80121e2:	2200      	movs	r2, #0
 80121e4:	f000 f8e4 	bl	80123b0 <_lseek_r>
 80121e8:	89a3      	ldrh	r3, [r4, #12]
 80121ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80121f2:	81a3      	strh	r3, [r4, #12]
 80121f4:	4632      	mov	r2, r6
 80121f6:	463b      	mov	r3, r7
 80121f8:	4628      	mov	r0, r5
 80121fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121fe:	f000 b90b 	b.w	8012418 <_write_r>

08012202 <__sseek>:
 8012202:	b510      	push	{r4, lr}
 8012204:	460c      	mov	r4, r1
 8012206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801220a:	f000 f8d1 	bl	80123b0 <_lseek_r>
 801220e:	1c43      	adds	r3, r0, #1
 8012210:	89a3      	ldrh	r3, [r4, #12]
 8012212:	bf15      	itete	ne
 8012214:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012216:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801221a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801221e:	81a3      	strheq	r3, [r4, #12]
 8012220:	bf18      	it	ne
 8012222:	81a3      	strhne	r3, [r4, #12]
 8012224:	bd10      	pop	{r4, pc}

08012226 <__sclose>:
 8012226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801222a:	f000 b8b1 	b.w	8012390 <_close_r>

0801222e <__swbuf_r>:
 801222e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012230:	460e      	mov	r6, r1
 8012232:	4614      	mov	r4, r2
 8012234:	4605      	mov	r5, r0
 8012236:	b118      	cbz	r0, 8012240 <__swbuf_r+0x12>
 8012238:	6a03      	ldr	r3, [r0, #32]
 801223a:	b90b      	cbnz	r3, 8012240 <__swbuf_r+0x12>
 801223c:	f7ff ff0e 	bl	801205c <__sinit>
 8012240:	69a3      	ldr	r3, [r4, #24]
 8012242:	60a3      	str	r3, [r4, #8]
 8012244:	89a3      	ldrh	r3, [r4, #12]
 8012246:	071a      	lsls	r2, r3, #28
 8012248:	d501      	bpl.n	801224e <__swbuf_r+0x20>
 801224a:	6923      	ldr	r3, [r4, #16]
 801224c:	b943      	cbnz	r3, 8012260 <__swbuf_r+0x32>
 801224e:	4621      	mov	r1, r4
 8012250:	4628      	mov	r0, r5
 8012252:	f000 f82b 	bl	80122ac <__swsetup_r>
 8012256:	b118      	cbz	r0, 8012260 <__swbuf_r+0x32>
 8012258:	f04f 37ff 	mov.w	r7, #4294967295
 801225c:	4638      	mov	r0, r7
 801225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012260:	6823      	ldr	r3, [r4, #0]
 8012262:	6922      	ldr	r2, [r4, #16]
 8012264:	1a98      	subs	r0, r3, r2
 8012266:	6963      	ldr	r3, [r4, #20]
 8012268:	b2f6      	uxtb	r6, r6
 801226a:	4283      	cmp	r3, r0
 801226c:	4637      	mov	r7, r6
 801226e:	dc05      	bgt.n	801227c <__swbuf_r+0x4e>
 8012270:	4621      	mov	r1, r4
 8012272:	4628      	mov	r0, r5
 8012274:	f001 fcf2 	bl	8013c5c <_fflush_r>
 8012278:	2800      	cmp	r0, #0
 801227a:	d1ed      	bne.n	8012258 <__swbuf_r+0x2a>
 801227c:	68a3      	ldr	r3, [r4, #8]
 801227e:	3b01      	subs	r3, #1
 8012280:	60a3      	str	r3, [r4, #8]
 8012282:	6823      	ldr	r3, [r4, #0]
 8012284:	1c5a      	adds	r2, r3, #1
 8012286:	6022      	str	r2, [r4, #0]
 8012288:	701e      	strb	r6, [r3, #0]
 801228a:	6962      	ldr	r2, [r4, #20]
 801228c:	1c43      	adds	r3, r0, #1
 801228e:	429a      	cmp	r2, r3
 8012290:	d004      	beq.n	801229c <__swbuf_r+0x6e>
 8012292:	89a3      	ldrh	r3, [r4, #12]
 8012294:	07db      	lsls	r3, r3, #31
 8012296:	d5e1      	bpl.n	801225c <__swbuf_r+0x2e>
 8012298:	2e0a      	cmp	r6, #10
 801229a:	d1df      	bne.n	801225c <__swbuf_r+0x2e>
 801229c:	4621      	mov	r1, r4
 801229e:	4628      	mov	r0, r5
 80122a0:	f001 fcdc 	bl	8013c5c <_fflush_r>
 80122a4:	2800      	cmp	r0, #0
 80122a6:	d0d9      	beq.n	801225c <__swbuf_r+0x2e>
 80122a8:	e7d6      	b.n	8012258 <__swbuf_r+0x2a>
	...

080122ac <__swsetup_r>:
 80122ac:	b538      	push	{r3, r4, r5, lr}
 80122ae:	4b29      	ldr	r3, [pc, #164]	@ (8012354 <__swsetup_r+0xa8>)
 80122b0:	4605      	mov	r5, r0
 80122b2:	6818      	ldr	r0, [r3, #0]
 80122b4:	460c      	mov	r4, r1
 80122b6:	b118      	cbz	r0, 80122c0 <__swsetup_r+0x14>
 80122b8:	6a03      	ldr	r3, [r0, #32]
 80122ba:	b90b      	cbnz	r3, 80122c0 <__swsetup_r+0x14>
 80122bc:	f7ff fece 	bl	801205c <__sinit>
 80122c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122c4:	0719      	lsls	r1, r3, #28
 80122c6:	d422      	bmi.n	801230e <__swsetup_r+0x62>
 80122c8:	06da      	lsls	r2, r3, #27
 80122ca:	d407      	bmi.n	80122dc <__swsetup_r+0x30>
 80122cc:	2209      	movs	r2, #9
 80122ce:	602a      	str	r2, [r5, #0]
 80122d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122d4:	81a3      	strh	r3, [r4, #12]
 80122d6:	f04f 30ff 	mov.w	r0, #4294967295
 80122da:	e033      	b.n	8012344 <__swsetup_r+0x98>
 80122dc:	0758      	lsls	r0, r3, #29
 80122de:	d512      	bpl.n	8012306 <__swsetup_r+0x5a>
 80122e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80122e2:	b141      	cbz	r1, 80122f6 <__swsetup_r+0x4a>
 80122e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80122e8:	4299      	cmp	r1, r3
 80122ea:	d002      	beq.n	80122f2 <__swsetup_r+0x46>
 80122ec:	4628      	mov	r0, r5
 80122ee:	f000 ff2b 	bl	8013148 <_free_r>
 80122f2:	2300      	movs	r3, #0
 80122f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80122f6:	89a3      	ldrh	r3, [r4, #12]
 80122f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80122fc:	81a3      	strh	r3, [r4, #12]
 80122fe:	2300      	movs	r3, #0
 8012300:	6063      	str	r3, [r4, #4]
 8012302:	6923      	ldr	r3, [r4, #16]
 8012304:	6023      	str	r3, [r4, #0]
 8012306:	89a3      	ldrh	r3, [r4, #12]
 8012308:	f043 0308 	orr.w	r3, r3, #8
 801230c:	81a3      	strh	r3, [r4, #12]
 801230e:	6923      	ldr	r3, [r4, #16]
 8012310:	b94b      	cbnz	r3, 8012326 <__swsetup_r+0x7a>
 8012312:	89a3      	ldrh	r3, [r4, #12]
 8012314:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801231c:	d003      	beq.n	8012326 <__swsetup_r+0x7a>
 801231e:	4621      	mov	r1, r4
 8012320:	4628      	mov	r0, r5
 8012322:	f001 fce9 	bl	8013cf8 <__smakebuf_r>
 8012326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801232a:	f013 0201 	ands.w	r2, r3, #1
 801232e:	d00a      	beq.n	8012346 <__swsetup_r+0x9a>
 8012330:	2200      	movs	r2, #0
 8012332:	60a2      	str	r2, [r4, #8]
 8012334:	6962      	ldr	r2, [r4, #20]
 8012336:	4252      	negs	r2, r2
 8012338:	61a2      	str	r2, [r4, #24]
 801233a:	6922      	ldr	r2, [r4, #16]
 801233c:	b942      	cbnz	r2, 8012350 <__swsetup_r+0xa4>
 801233e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012342:	d1c5      	bne.n	80122d0 <__swsetup_r+0x24>
 8012344:	bd38      	pop	{r3, r4, r5, pc}
 8012346:	0799      	lsls	r1, r3, #30
 8012348:	bf58      	it	pl
 801234a:	6962      	ldrpl	r2, [r4, #20]
 801234c:	60a2      	str	r2, [r4, #8]
 801234e:	e7f4      	b.n	801233a <__swsetup_r+0x8e>
 8012350:	2000      	movs	r0, #0
 8012352:	e7f7      	b.n	8012344 <__swsetup_r+0x98>
 8012354:	200000f0 	.word	0x200000f0

08012358 <memcmp>:
 8012358:	b510      	push	{r4, lr}
 801235a:	3901      	subs	r1, #1
 801235c:	4402      	add	r2, r0
 801235e:	4290      	cmp	r0, r2
 8012360:	d101      	bne.n	8012366 <memcmp+0xe>
 8012362:	2000      	movs	r0, #0
 8012364:	e005      	b.n	8012372 <memcmp+0x1a>
 8012366:	7803      	ldrb	r3, [r0, #0]
 8012368:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801236c:	42a3      	cmp	r3, r4
 801236e:	d001      	beq.n	8012374 <memcmp+0x1c>
 8012370:	1b18      	subs	r0, r3, r4
 8012372:	bd10      	pop	{r4, pc}
 8012374:	3001      	adds	r0, #1
 8012376:	e7f2      	b.n	801235e <memcmp+0x6>

08012378 <memset>:
 8012378:	4402      	add	r2, r0
 801237a:	4603      	mov	r3, r0
 801237c:	4293      	cmp	r3, r2
 801237e:	d100      	bne.n	8012382 <memset+0xa>
 8012380:	4770      	bx	lr
 8012382:	f803 1b01 	strb.w	r1, [r3], #1
 8012386:	e7f9      	b.n	801237c <memset+0x4>

08012388 <_localeconv_r>:
 8012388:	4800      	ldr	r0, [pc, #0]	@ (801238c <_localeconv_r+0x4>)
 801238a:	4770      	bx	lr
 801238c:	20000230 	.word	0x20000230

08012390 <_close_r>:
 8012390:	b538      	push	{r3, r4, r5, lr}
 8012392:	4d06      	ldr	r5, [pc, #24]	@ (80123ac <_close_r+0x1c>)
 8012394:	2300      	movs	r3, #0
 8012396:	4604      	mov	r4, r0
 8012398:	4608      	mov	r0, r1
 801239a:	602b      	str	r3, [r5, #0]
 801239c:	f7f9 f990 	bl	800b6c0 <_close>
 80123a0:	1c43      	adds	r3, r0, #1
 80123a2:	d102      	bne.n	80123aa <_close_r+0x1a>
 80123a4:	682b      	ldr	r3, [r5, #0]
 80123a6:	b103      	cbz	r3, 80123aa <_close_r+0x1a>
 80123a8:	6023      	str	r3, [r4, #0]
 80123aa:	bd38      	pop	{r3, r4, r5, pc}
 80123ac:	20000bd4 	.word	0x20000bd4

080123b0 <_lseek_r>:
 80123b0:	b538      	push	{r3, r4, r5, lr}
 80123b2:	4d07      	ldr	r5, [pc, #28]	@ (80123d0 <_lseek_r+0x20>)
 80123b4:	4604      	mov	r4, r0
 80123b6:	4608      	mov	r0, r1
 80123b8:	4611      	mov	r1, r2
 80123ba:	2200      	movs	r2, #0
 80123bc:	602a      	str	r2, [r5, #0]
 80123be:	461a      	mov	r2, r3
 80123c0:	f7f9 f9a5 	bl	800b70e <_lseek>
 80123c4:	1c43      	adds	r3, r0, #1
 80123c6:	d102      	bne.n	80123ce <_lseek_r+0x1e>
 80123c8:	682b      	ldr	r3, [r5, #0]
 80123ca:	b103      	cbz	r3, 80123ce <_lseek_r+0x1e>
 80123cc:	6023      	str	r3, [r4, #0]
 80123ce:	bd38      	pop	{r3, r4, r5, pc}
 80123d0:	20000bd4 	.word	0x20000bd4

080123d4 <_read_r>:
 80123d4:	b538      	push	{r3, r4, r5, lr}
 80123d6:	4d07      	ldr	r5, [pc, #28]	@ (80123f4 <_read_r+0x20>)
 80123d8:	4604      	mov	r4, r0
 80123da:	4608      	mov	r0, r1
 80123dc:	4611      	mov	r1, r2
 80123de:	2200      	movs	r2, #0
 80123e0:	602a      	str	r2, [r5, #0]
 80123e2:	461a      	mov	r2, r3
 80123e4:	f7f9 f933 	bl	800b64e <_read>
 80123e8:	1c43      	adds	r3, r0, #1
 80123ea:	d102      	bne.n	80123f2 <_read_r+0x1e>
 80123ec:	682b      	ldr	r3, [r5, #0]
 80123ee:	b103      	cbz	r3, 80123f2 <_read_r+0x1e>
 80123f0:	6023      	str	r3, [r4, #0]
 80123f2:	bd38      	pop	{r3, r4, r5, pc}
 80123f4:	20000bd4 	.word	0x20000bd4

080123f8 <_sbrk_r>:
 80123f8:	b538      	push	{r3, r4, r5, lr}
 80123fa:	4d06      	ldr	r5, [pc, #24]	@ (8012414 <_sbrk_r+0x1c>)
 80123fc:	2300      	movs	r3, #0
 80123fe:	4604      	mov	r4, r0
 8012400:	4608      	mov	r0, r1
 8012402:	602b      	str	r3, [r5, #0]
 8012404:	f7f9 f990 	bl	800b728 <_sbrk>
 8012408:	1c43      	adds	r3, r0, #1
 801240a:	d102      	bne.n	8012412 <_sbrk_r+0x1a>
 801240c:	682b      	ldr	r3, [r5, #0]
 801240e:	b103      	cbz	r3, 8012412 <_sbrk_r+0x1a>
 8012410:	6023      	str	r3, [r4, #0]
 8012412:	bd38      	pop	{r3, r4, r5, pc}
 8012414:	20000bd4 	.word	0x20000bd4

08012418 <_write_r>:
 8012418:	b538      	push	{r3, r4, r5, lr}
 801241a:	4d07      	ldr	r5, [pc, #28]	@ (8012438 <_write_r+0x20>)
 801241c:	4604      	mov	r4, r0
 801241e:	4608      	mov	r0, r1
 8012420:	4611      	mov	r1, r2
 8012422:	2200      	movs	r2, #0
 8012424:	602a      	str	r2, [r5, #0]
 8012426:	461a      	mov	r2, r3
 8012428:	f7f9 f92e 	bl	800b688 <_write>
 801242c:	1c43      	adds	r3, r0, #1
 801242e:	d102      	bne.n	8012436 <_write_r+0x1e>
 8012430:	682b      	ldr	r3, [r5, #0]
 8012432:	b103      	cbz	r3, 8012436 <_write_r+0x1e>
 8012434:	6023      	str	r3, [r4, #0]
 8012436:	bd38      	pop	{r3, r4, r5, pc}
 8012438:	20000bd4 	.word	0x20000bd4

0801243c <__errno>:
 801243c:	4b01      	ldr	r3, [pc, #4]	@ (8012444 <__errno+0x8>)
 801243e:	6818      	ldr	r0, [r3, #0]
 8012440:	4770      	bx	lr
 8012442:	bf00      	nop
 8012444:	200000f0 	.word	0x200000f0

08012448 <__libc_init_array>:
 8012448:	b570      	push	{r4, r5, r6, lr}
 801244a:	4d0d      	ldr	r5, [pc, #52]	@ (8012480 <__libc_init_array+0x38>)
 801244c:	4c0d      	ldr	r4, [pc, #52]	@ (8012484 <__libc_init_array+0x3c>)
 801244e:	1b64      	subs	r4, r4, r5
 8012450:	10a4      	asrs	r4, r4, #2
 8012452:	2600      	movs	r6, #0
 8012454:	42a6      	cmp	r6, r4
 8012456:	d109      	bne.n	801246c <__libc_init_array+0x24>
 8012458:	4d0b      	ldr	r5, [pc, #44]	@ (8012488 <__libc_init_array+0x40>)
 801245a:	4c0c      	ldr	r4, [pc, #48]	@ (801248c <__libc_init_array+0x44>)
 801245c:	f002 fbba 	bl	8014bd4 <_init>
 8012460:	1b64      	subs	r4, r4, r5
 8012462:	10a4      	asrs	r4, r4, #2
 8012464:	2600      	movs	r6, #0
 8012466:	42a6      	cmp	r6, r4
 8012468:	d105      	bne.n	8012476 <__libc_init_array+0x2e>
 801246a:	bd70      	pop	{r4, r5, r6, pc}
 801246c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012470:	4798      	blx	r3
 8012472:	3601      	adds	r6, #1
 8012474:	e7ee      	b.n	8012454 <__libc_init_array+0xc>
 8012476:	f855 3b04 	ldr.w	r3, [r5], #4
 801247a:	4798      	blx	r3
 801247c:	3601      	adds	r6, #1
 801247e:	e7f2      	b.n	8012466 <__libc_init_array+0x1e>
 8012480:	08016390 	.word	0x08016390
 8012484:	08016390 	.word	0x08016390
 8012488:	08016390 	.word	0x08016390
 801248c:	08016394 	.word	0x08016394

08012490 <__retarget_lock_init_recursive>:
 8012490:	4770      	bx	lr

08012492 <__retarget_lock_acquire_recursive>:
 8012492:	4770      	bx	lr

08012494 <__retarget_lock_release_recursive>:
 8012494:	4770      	bx	lr

08012496 <quorem>:
 8012496:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801249a:	6903      	ldr	r3, [r0, #16]
 801249c:	690c      	ldr	r4, [r1, #16]
 801249e:	42a3      	cmp	r3, r4
 80124a0:	4607      	mov	r7, r0
 80124a2:	db7e      	blt.n	80125a2 <quorem+0x10c>
 80124a4:	3c01      	subs	r4, #1
 80124a6:	f101 0814 	add.w	r8, r1, #20
 80124aa:	00a3      	lsls	r3, r4, #2
 80124ac:	f100 0514 	add.w	r5, r0, #20
 80124b0:	9300      	str	r3, [sp, #0]
 80124b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80124b6:	9301      	str	r3, [sp, #4]
 80124b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80124bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80124c0:	3301      	adds	r3, #1
 80124c2:	429a      	cmp	r2, r3
 80124c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80124c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80124cc:	d32e      	bcc.n	801252c <quorem+0x96>
 80124ce:	f04f 0a00 	mov.w	sl, #0
 80124d2:	46c4      	mov	ip, r8
 80124d4:	46ae      	mov	lr, r5
 80124d6:	46d3      	mov	fp, sl
 80124d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80124dc:	b298      	uxth	r0, r3
 80124de:	fb06 a000 	mla	r0, r6, r0, sl
 80124e2:	0c02      	lsrs	r2, r0, #16
 80124e4:	0c1b      	lsrs	r3, r3, #16
 80124e6:	fb06 2303 	mla	r3, r6, r3, r2
 80124ea:	f8de 2000 	ldr.w	r2, [lr]
 80124ee:	b280      	uxth	r0, r0
 80124f0:	b292      	uxth	r2, r2
 80124f2:	1a12      	subs	r2, r2, r0
 80124f4:	445a      	add	r2, fp
 80124f6:	f8de 0000 	ldr.w	r0, [lr]
 80124fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80124fe:	b29b      	uxth	r3, r3
 8012500:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012504:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012508:	b292      	uxth	r2, r2
 801250a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801250e:	45e1      	cmp	r9, ip
 8012510:	f84e 2b04 	str.w	r2, [lr], #4
 8012514:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012518:	d2de      	bcs.n	80124d8 <quorem+0x42>
 801251a:	9b00      	ldr	r3, [sp, #0]
 801251c:	58eb      	ldr	r3, [r5, r3]
 801251e:	b92b      	cbnz	r3, 801252c <quorem+0x96>
 8012520:	9b01      	ldr	r3, [sp, #4]
 8012522:	3b04      	subs	r3, #4
 8012524:	429d      	cmp	r5, r3
 8012526:	461a      	mov	r2, r3
 8012528:	d32f      	bcc.n	801258a <quorem+0xf4>
 801252a:	613c      	str	r4, [r7, #16]
 801252c:	4638      	mov	r0, r7
 801252e:	f001 f8c7 	bl	80136c0 <__mcmp>
 8012532:	2800      	cmp	r0, #0
 8012534:	db25      	blt.n	8012582 <quorem+0xec>
 8012536:	4629      	mov	r1, r5
 8012538:	2000      	movs	r0, #0
 801253a:	f858 2b04 	ldr.w	r2, [r8], #4
 801253e:	f8d1 c000 	ldr.w	ip, [r1]
 8012542:	fa1f fe82 	uxth.w	lr, r2
 8012546:	fa1f f38c 	uxth.w	r3, ip
 801254a:	eba3 030e 	sub.w	r3, r3, lr
 801254e:	4403      	add	r3, r0
 8012550:	0c12      	lsrs	r2, r2, #16
 8012552:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012556:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801255a:	b29b      	uxth	r3, r3
 801255c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012560:	45c1      	cmp	r9, r8
 8012562:	f841 3b04 	str.w	r3, [r1], #4
 8012566:	ea4f 4022 	mov.w	r0, r2, asr #16
 801256a:	d2e6      	bcs.n	801253a <quorem+0xa4>
 801256c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012570:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012574:	b922      	cbnz	r2, 8012580 <quorem+0xea>
 8012576:	3b04      	subs	r3, #4
 8012578:	429d      	cmp	r5, r3
 801257a:	461a      	mov	r2, r3
 801257c:	d30b      	bcc.n	8012596 <quorem+0x100>
 801257e:	613c      	str	r4, [r7, #16]
 8012580:	3601      	adds	r6, #1
 8012582:	4630      	mov	r0, r6
 8012584:	b003      	add	sp, #12
 8012586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801258a:	6812      	ldr	r2, [r2, #0]
 801258c:	3b04      	subs	r3, #4
 801258e:	2a00      	cmp	r2, #0
 8012590:	d1cb      	bne.n	801252a <quorem+0x94>
 8012592:	3c01      	subs	r4, #1
 8012594:	e7c6      	b.n	8012524 <quorem+0x8e>
 8012596:	6812      	ldr	r2, [r2, #0]
 8012598:	3b04      	subs	r3, #4
 801259a:	2a00      	cmp	r2, #0
 801259c:	d1ef      	bne.n	801257e <quorem+0xe8>
 801259e:	3c01      	subs	r4, #1
 80125a0:	e7ea      	b.n	8012578 <quorem+0xe2>
 80125a2:	2000      	movs	r0, #0
 80125a4:	e7ee      	b.n	8012584 <quorem+0xee>
	...

080125a8 <_dtoa_r>:
 80125a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ac:	69c7      	ldr	r7, [r0, #28]
 80125ae:	b097      	sub	sp, #92	@ 0x5c
 80125b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80125b4:	ec55 4b10 	vmov	r4, r5, d0
 80125b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80125ba:	9107      	str	r1, [sp, #28]
 80125bc:	4681      	mov	r9, r0
 80125be:	920c      	str	r2, [sp, #48]	@ 0x30
 80125c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80125c2:	b97f      	cbnz	r7, 80125e4 <_dtoa_r+0x3c>
 80125c4:	2010      	movs	r0, #16
 80125c6:	f7fe ffb1 	bl	801152c <malloc>
 80125ca:	4602      	mov	r2, r0
 80125cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80125d0:	b920      	cbnz	r0, 80125dc <_dtoa_r+0x34>
 80125d2:	4ba9      	ldr	r3, [pc, #676]	@ (8012878 <_dtoa_r+0x2d0>)
 80125d4:	21ef      	movs	r1, #239	@ 0xef
 80125d6:	48a9      	ldr	r0, [pc, #676]	@ (801287c <_dtoa_r+0x2d4>)
 80125d8:	f001 fbfa 	bl	8013dd0 <__assert_func>
 80125dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80125e0:	6007      	str	r7, [r0, #0]
 80125e2:	60c7      	str	r7, [r0, #12]
 80125e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80125e8:	6819      	ldr	r1, [r3, #0]
 80125ea:	b159      	cbz	r1, 8012604 <_dtoa_r+0x5c>
 80125ec:	685a      	ldr	r2, [r3, #4]
 80125ee:	604a      	str	r2, [r1, #4]
 80125f0:	2301      	movs	r3, #1
 80125f2:	4093      	lsls	r3, r2
 80125f4:	608b      	str	r3, [r1, #8]
 80125f6:	4648      	mov	r0, r9
 80125f8:	f000 fe30 	bl	801325c <_Bfree>
 80125fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012600:	2200      	movs	r2, #0
 8012602:	601a      	str	r2, [r3, #0]
 8012604:	1e2b      	subs	r3, r5, #0
 8012606:	bfb9      	ittee	lt
 8012608:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801260c:	9305      	strlt	r3, [sp, #20]
 801260e:	2300      	movge	r3, #0
 8012610:	6033      	strge	r3, [r6, #0]
 8012612:	9f05      	ldr	r7, [sp, #20]
 8012614:	4b9a      	ldr	r3, [pc, #616]	@ (8012880 <_dtoa_r+0x2d8>)
 8012616:	bfbc      	itt	lt
 8012618:	2201      	movlt	r2, #1
 801261a:	6032      	strlt	r2, [r6, #0]
 801261c:	43bb      	bics	r3, r7
 801261e:	d112      	bne.n	8012646 <_dtoa_r+0x9e>
 8012620:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012622:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012626:	6013      	str	r3, [r2, #0]
 8012628:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801262c:	4323      	orrs	r3, r4
 801262e:	f000 855a 	beq.w	80130e6 <_dtoa_r+0xb3e>
 8012632:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012634:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8012894 <_dtoa_r+0x2ec>
 8012638:	2b00      	cmp	r3, #0
 801263a:	f000 855c 	beq.w	80130f6 <_dtoa_r+0xb4e>
 801263e:	f10a 0303 	add.w	r3, sl, #3
 8012642:	f000 bd56 	b.w	80130f2 <_dtoa_r+0xb4a>
 8012646:	ed9d 7b04 	vldr	d7, [sp, #16]
 801264a:	2200      	movs	r2, #0
 801264c:	ec51 0b17 	vmov	r0, r1, d7
 8012650:	2300      	movs	r3, #0
 8012652:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8012656:	f7ee fa37 	bl	8000ac8 <__aeabi_dcmpeq>
 801265a:	4680      	mov	r8, r0
 801265c:	b158      	cbz	r0, 8012676 <_dtoa_r+0xce>
 801265e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012660:	2301      	movs	r3, #1
 8012662:	6013      	str	r3, [r2, #0]
 8012664:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012666:	b113      	cbz	r3, 801266e <_dtoa_r+0xc6>
 8012668:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801266a:	4b86      	ldr	r3, [pc, #536]	@ (8012884 <_dtoa_r+0x2dc>)
 801266c:	6013      	str	r3, [r2, #0]
 801266e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8012898 <_dtoa_r+0x2f0>
 8012672:	f000 bd40 	b.w	80130f6 <_dtoa_r+0xb4e>
 8012676:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801267a:	aa14      	add	r2, sp, #80	@ 0x50
 801267c:	a915      	add	r1, sp, #84	@ 0x54
 801267e:	4648      	mov	r0, r9
 8012680:	f001 f8ce 	bl	8013820 <__d2b>
 8012684:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012688:	9002      	str	r0, [sp, #8]
 801268a:	2e00      	cmp	r6, #0
 801268c:	d078      	beq.n	8012780 <_dtoa_r+0x1d8>
 801268e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012690:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8012694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012698:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801269c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80126a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80126a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80126a8:	4619      	mov	r1, r3
 80126aa:	2200      	movs	r2, #0
 80126ac:	4b76      	ldr	r3, [pc, #472]	@ (8012888 <_dtoa_r+0x2e0>)
 80126ae:	f7ed fdeb 	bl	8000288 <__aeabi_dsub>
 80126b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8012860 <_dtoa_r+0x2b8>)
 80126b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b8:	f7ed ff9e 	bl	80005f8 <__aeabi_dmul>
 80126bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8012868 <_dtoa_r+0x2c0>)
 80126be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c2:	f7ed fde3 	bl	800028c <__adddf3>
 80126c6:	4604      	mov	r4, r0
 80126c8:	4630      	mov	r0, r6
 80126ca:	460d      	mov	r5, r1
 80126cc:	f7ed ff2a 	bl	8000524 <__aeabi_i2d>
 80126d0:	a367      	add	r3, pc, #412	@ (adr r3, 8012870 <_dtoa_r+0x2c8>)
 80126d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d6:	f7ed ff8f 	bl	80005f8 <__aeabi_dmul>
 80126da:	4602      	mov	r2, r0
 80126dc:	460b      	mov	r3, r1
 80126de:	4620      	mov	r0, r4
 80126e0:	4629      	mov	r1, r5
 80126e2:	f7ed fdd3 	bl	800028c <__adddf3>
 80126e6:	4604      	mov	r4, r0
 80126e8:	460d      	mov	r5, r1
 80126ea:	f7ee fa35 	bl	8000b58 <__aeabi_d2iz>
 80126ee:	2200      	movs	r2, #0
 80126f0:	4607      	mov	r7, r0
 80126f2:	2300      	movs	r3, #0
 80126f4:	4620      	mov	r0, r4
 80126f6:	4629      	mov	r1, r5
 80126f8:	f7ee f9f0 	bl	8000adc <__aeabi_dcmplt>
 80126fc:	b140      	cbz	r0, 8012710 <_dtoa_r+0x168>
 80126fe:	4638      	mov	r0, r7
 8012700:	f7ed ff10 	bl	8000524 <__aeabi_i2d>
 8012704:	4622      	mov	r2, r4
 8012706:	462b      	mov	r3, r5
 8012708:	f7ee f9de 	bl	8000ac8 <__aeabi_dcmpeq>
 801270c:	b900      	cbnz	r0, 8012710 <_dtoa_r+0x168>
 801270e:	3f01      	subs	r7, #1
 8012710:	2f16      	cmp	r7, #22
 8012712:	d852      	bhi.n	80127ba <_dtoa_r+0x212>
 8012714:	4b5d      	ldr	r3, [pc, #372]	@ (801288c <_dtoa_r+0x2e4>)
 8012716:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801271e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8012722:	f7ee f9db 	bl	8000adc <__aeabi_dcmplt>
 8012726:	2800      	cmp	r0, #0
 8012728:	d049      	beq.n	80127be <_dtoa_r+0x216>
 801272a:	3f01      	subs	r7, #1
 801272c:	2300      	movs	r3, #0
 801272e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012730:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012732:	1b9b      	subs	r3, r3, r6
 8012734:	1e5a      	subs	r2, r3, #1
 8012736:	bf45      	ittet	mi
 8012738:	f1c3 0301 	rsbmi	r3, r3, #1
 801273c:	9300      	strmi	r3, [sp, #0]
 801273e:	2300      	movpl	r3, #0
 8012740:	2300      	movmi	r3, #0
 8012742:	9206      	str	r2, [sp, #24]
 8012744:	bf54      	ite	pl
 8012746:	9300      	strpl	r3, [sp, #0]
 8012748:	9306      	strmi	r3, [sp, #24]
 801274a:	2f00      	cmp	r7, #0
 801274c:	db39      	blt.n	80127c2 <_dtoa_r+0x21a>
 801274e:	9b06      	ldr	r3, [sp, #24]
 8012750:	970d      	str	r7, [sp, #52]	@ 0x34
 8012752:	443b      	add	r3, r7
 8012754:	9306      	str	r3, [sp, #24]
 8012756:	2300      	movs	r3, #0
 8012758:	9308      	str	r3, [sp, #32]
 801275a:	9b07      	ldr	r3, [sp, #28]
 801275c:	2b09      	cmp	r3, #9
 801275e:	d863      	bhi.n	8012828 <_dtoa_r+0x280>
 8012760:	2b05      	cmp	r3, #5
 8012762:	bfc4      	itt	gt
 8012764:	3b04      	subgt	r3, #4
 8012766:	9307      	strgt	r3, [sp, #28]
 8012768:	9b07      	ldr	r3, [sp, #28]
 801276a:	f1a3 0302 	sub.w	r3, r3, #2
 801276e:	bfcc      	ite	gt
 8012770:	2400      	movgt	r4, #0
 8012772:	2401      	movle	r4, #1
 8012774:	2b03      	cmp	r3, #3
 8012776:	d863      	bhi.n	8012840 <_dtoa_r+0x298>
 8012778:	e8df f003 	tbb	[pc, r3]
 801277c:	2b375452 	.word	0x2b375452
 8012780:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8012784:	441e      	add	r6, r3
 8012786:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801278a:	2b20      	cmp	r3, #32
 801278c:	bfc1      	itttt	gt
 801278e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012792:	409f      	lslgt	r7, r3
 8012794:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012798:	fa24 f303 	lsrgt.w	r3, r4, r3
 801279c:	bfd6      	itet	le
 801279e:	f1c3 0320 	rsble	r3, r3, #32
 80127a2:	ea47 0003 	orrgt.w	r0, r7, r3
 80127a6:	fa04 f003 	lslle.w	r0, r4, r3
 80127aa:	f7ed feab 	bl	8000504 <__aeabi_ui2d>
 80127ae:	2201      	movs	r2, #1
 80127b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80127b4:	3e01      	subs	r6, #1
 80127b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80127b8:	e776      	b.n	80126a8 <_dtoa_r+0x100>
 80127ba:	2301      	movs	r3, #1
 80127bc:	e7b7      	b.n	801272e <_dtoa_r+0x186>
 80127be:	9010      	str	r0, [sp, #64]	@ 0x40
 80127c0:	e7b6      	b.n	8012730 <_dtoa_r+0x188>
 80127c2:	9b00      	ldr	r3, [sp, #0]
 80127c4:	1bdb      	subs	r3, r3, r7
 80127c6:	9300      	str	r3, [sp, #0]
 80127c8:	427b      	negs	r3, r7
 80127ca:	9308      	str	r3, [sp, #32]
 80127cc:	2300      	movs	r3, #0
 80127ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80127d0:	e7c3      	b.n	801275a <_dtoa_r+0x1b2>
 80127d2:	2301      	movs	r3, #1
 80127d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80127d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127d8:	eb07 0b03 	add.w	fp, r7, r3
 80127dc:	f10b 0301 	add.w	r3, fp, #1
 80127e0:	2b01      	cmp	r3, #1
 80127e2:	9303      	str	r3, [sp, #12]
 80127e4:	bfb8      	it	lt
 80127e6:	2301      	movlt	r3, #1
 80127e8:	e006      	b.n	80127f8 <_dtoa_r+0x250>
 80127ea:	2301      	movs	r3, #1
 80127ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80127ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	dd28      	ble.n	8012846 <_dtoa_r+0x29e>
 80127f4:	469b      	mov	fp, r3
 80127f6:	9303      	str	r3, [sp, #12]
 80127f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80127fc:	2100      	movs	r1, #0
 80127fe:	2204      	movs	r2, #4
 8012800:	f102 0514 	add.w	r5, r2, #20
 8012804:	429d      	cmp	r5, r3
 8012806:	d926      	bls.n	8012856 <_dtoa_r+0x2ae>
 8012808:	6041      	str	r1, [r0, #4]
 801280a:	4648      	mov	r0, r9
 801280c:	f000 fce6 	bl	80131dc <_Balloc>
 8012810:	4682      	mov	sl, r0
 8012812:	2800      	cmp	r0, #0
 8012814:	d142      	bne.n	801289c <_dtoa_r+0x2f4>
 8012816:	4b1e      	ldr	r3, [pc, #120]	@ (8012890 <_dtoa_r+0x2e8>)
 8012818:	4602      	mov	r2, r0
 801281a:	f240 11af 	movw	r1, #431	@ 0x1af
 801281e:	e6da      	b.n	80125d6 <_dtoa_r+0x2e>
 8012820:	2300      	movs	r3, #0
 8012822:	e7e3      	b.n	80127ec <_dtoa_r+0x244>
 8012824:	2300      	movs	r3, #0
 8012826:	e7d5      	b.n	80127d4 <_dtoa_r+0x22c>
 8012828:	2401      	movs	r4, #1
 801282a:	2300      	movs	r3, #0
 801282c:	9307      	str	r3, [sp, #28]
 801282e:	9409      	str	r4, [sp, #36]	@ 0x24
 8012830:	f04f 3bff 	mov.w	fp, #4294967295
 8012834:	2200      	movs	r2, #0
 8012836:	f8cd b00c 	str.w	fp, [sp, #12]
 801283a:	2312      	movs	r3, #18
 801283c:	920c      	str	r2, [sp, #48]	@ 0x30
 801283e:	e7db      	b.n	80127f8 <_dtoa_r+0x250>
 8012840:	2301      	movs	r3, #1
 8012842:	9309      	str	r3, [sp, #36]	@ 0x24
 8012844:	e7f4      	b.n	8012830 <_dtoa_r+0x288>
 8012846:	f04f 0b01 	mov.w	fp, #1
 801284a:	f8cd b00c 	str.w	fp, [sp, #12]
 801284e:	465b      	mov	r3, fp
 8012850:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8012854:	e7d0      	b.n	80127f8 <_dtoa_r+0x250>
 8012856:	3101      	adds	r1, #1
 8012858:	0052      	lsls	r2, r2, #1
 801285a:	e7d1      	b.n	8012800 <_dtoa_r+0x258>
 801285c:	f3af 8000 	nop.w
 8012860:	636f4361 	.word	0x636f4361
 8012864:	3fd287a7 	.word	0x3fd287a7
 8012868:	8b60c8b3 	.word	0x8b60c8b3
 801286c:	3fc68a28 	.word	0x3fc68a28
 8012870:	509f79fb 	.word	0x509f79fb
 8012874:	3fd34413 	.word	0x3fd34413
 8012878:	08015fd1 	.word	0x08015fd1
 801287c:	08015fe8 	.word	0x08015fe8
 8012880:	7ff00000 	.word	0x7ff00000
 8012884:	08015fa1 	.word	0x08015fa1
 8012888:	3ff80000 	.word	0x3ff80000
 801288c:	08016138 	.word	0x08016138
 8012890:	08016040 	.word	0x08016040
 8012894:	08015fcd 	.word	0x08015fcd
 8012898:	08015fa0 	.word	0x08015fa0
 801289c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80128a0:	6018      	str	r0, [r3, #0]
 80128a2:	9b03      	ldr	r3, [sp, #12]
 80128a4:	2b0e      	cmp	r3, #14
 80128a6:	f200 80a1 	bhi.w	80129ec <_dtoa_r+0x444>
 80128aa:	2c00      	cmp	r4, #0
 80128ac:	f000 809e 	beq.w	80129ec <_dtoa_r+0x444>
 80128b0:	2f00      	cmp	r7, #0
 80128b2:	dd33      	ble.n	801291c <_dtoa_r+0x374>
 80128b4:	4b9c      	ldr	r3, [pc, #624]	@ (8012b28 <_dtoa_r+0x580>)
 80128b6:	f007 020f 	and.w	r2, r7, #15
 80128ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80128be:	ed93 7b00 	vldr	d7, [r3]
 80128c2:	05f8      	lsls	r0, r7, #23
 80128c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80128c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80128cc:	d516      	bpl.n	80128fc <_dtoa_r+0x354>
 80128ce:	4b97      	ldr	r3, [pc, #604]	@ (8012b2c <_dtoa_r+0x584>)
 80128d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80128d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80128d8:	f7ed ffb8 	bl	800084c <__aeabi_ddiv>
 80128dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80128e0:	f004 040f 	and.w	r4, r4, #15
 80128e4:	2603      	movs	r6, #3
 80128e6:	4d91      	ldr	r5, [pc, #580]	@ (8012b2c <_dtoa_r+0x584>)
 80128e8:	b954      	cbnz	r4, 8012900 <_dtoa_r+0x358>
 80128ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80128ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80128f2:	f7ed ffab 	bl	800084c <__aeabi_ddiv>
 80128f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80128fa:	e028      	b.n	801294e <_dtoa_r+0x3a6>
 80128fc:	2602      	movs	r6, #2
 80128fe:	e7f2      	b.n	80128e6 <_dtoa_r+0x33e>
 8012900:	07e1      	lsls	r1, r4, #31
 8012902:	d508      	bpl.n	8012916 <_dtoa_r+0x36e>
 8012904:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012908:	e9d5 2300 	ldrd	r2, r3, [r5]
 801290c:	f7ed fe74 	bl	80005f8 <__aeabi_dmul>
 8012910:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012914:	3601      	adds	r6, #1
 8012916:	1064      	asrs	r4, r4, #1
 8012918:	3508      	adds	r5, #8
 801291a:	e7e5      	b.n	80128e8 <_dtoa_r+0x340>
 801291c:	f000 80af 	beq.w	8012a7e <_dtoa_r+0x4d6>
 8012920:	427c      	negs	r4, r7
 8012922:	4b81      	ldr	r3, [pc, #516]	@ (8012b28 <_dtoa_r+0x580>)
 8012924:	4d81      	ldr	r5, [pc, #516]	@ (8012b2c <_dtoa_r+0x584>)
 8012926:	f004 020f 	and.w	r2, r4, #15
 801292a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012932:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8012936:	f7ed fe5f 	bl	80005f8 <__aeabi_dmul>
 801293a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801293e:	1124      	asrs	r4, r4, #4
 8012940:	2300      	movs	r3, #0
 8012942:	2602      	movs	r6, #2
 8012944:	2c00      	cmp	r4, #0
 8012946:	f040 808f 	bne.w	8012a68 <_dtoa_r+0x4c0>
 801294a:	2b00      	cmp	r3, #0
 801294c:	d1d3      	bne.n	80128f6 <_dtoa_r+0x34e>
 801294e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012950:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8012954:	2b00      	cmp	r3, #0
 8012956:	f000 8094 	beq.w	8012a82 <_dtoa_r+0x4da>
 801295a:	4b75      	ldr	r3, [pc, #468]	@ (8012b30 <_dtoa_r+0x588>)
 801295c:	2200      	movs	r2, #0
 801295e:	4620      	mov	r0, r4
 8012960:	4629      	mov	r1, r5
 8012962:	f7ee f8bb 	bl	8000adc <__aeabi_dcmplt>
 8012966:	2800      	cmp	r0, #0
 8012968:	f000 808b 	beq.w	8012a82 <_dtoa_r+0x4da>
 801296c:	9b03      	ldr	r3, [sp, #12]
 801296e:	2b00      	cmp	r3, #0
 8012970:	f000 8087 	beq.w	8012a82 <_dtoa_r+0x4da>
 8012974:	f1bb 0f00 	cmp.w	fp, #0
 8012978:	dd34      	ble.n	80129e4 <_dtoa_r+0x43c>
 801297a:	4620      	mov	r0, r4
 801297c:	4b6d      	ldr	r3, [pc, #436]	@ (8012b34 <_dtoa_r+0x58c>)
 801297e:	2200      	movs	r2, #0
 8012980:	4629      	mov	r1, r5
 8012982:	f7ed fe39 	bl	80005f8 <__aeabi_dmul>
 8012986:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801298a:	f107 38ff 	add.w	r8, r7, #4294967295
 801298e:	3601      	adds	r6, #1
 8012990:	465c      	mov	r4, fp
 8012992:	4630      	mov	r0, r6
 8012994:	f7ed fdc6 	bl	8000524 <__aeabi_i2d>
 8012998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801299c:	f7ed fe2c 	bl	80005f8 <__aeabi_dmul>
 80129a0:	4b65      	ldr	r3, [pc, #404]	@ (8012b38 <_dtoa_r+0x590>)
 80129a2:	2200      	movs	r2, #0
 80129a4:	f7ed fc72 	bl	800028c <__adddf3>
 80129a8:	4605      	mov	r5, r0
 80129aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80129ae:	2c00      	cmp	r4, #0
 80129b0:	d16a      	bne.n	8012a88 <_dtoa_r+0x4e0>
 80129b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80129b6:	4b61      	ldr	r3, [pc, #388]	@ (8012b3c <_dtoa_r+0x594>)
 80129b8:	2200      	movs	r2, #0
 80129ba:	f7ed fc65 	bl	8000288 <__aeabi_dsub>
 80129be:	4602      	mov	r2, r0
 80129c0:	460b      	mov	r3, r1
 80129c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80129c6:	462a      	mov	r2, r5
 80129c8:	4633      	mov	r3, r6
 80129ca:	f7ee f8a5 	bl	8000b18 <__aeabi_dcmpgt>
 80129ce:	2800      	cmp	r0, #0
 80129d0:	f040 8298 	bne.w	8012f04 <_dtoa_r+0x95c>
 80129d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80129d8:	462a      	mov	r2, r5
 80129da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80129de:	f7ee f87d 	bl	8000adc <__aeabi_dcmplt>
 80129e2:	bb38      	cbnz	r0, 8012a34 <_dtoa_r+0x48c>
 80129e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80129e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80129ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	f2c0 8157 	blt.w	8012ca2 <_dtoa_r+0x6fa>
 80129f4:	2f0e      	cmp	r7, #14
 80129f6:	f300 8154 	bgt.w	8012ca2 <_dtoa_r+0x6fa>
 80129fa:	4b4b      	ldr	r3, [pc, #300]	@ (8012b28 <_dtoa_r+0x580>)
 80129fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012a00:	ed93 7b00 	vldr	d7, [r3]
 8012a04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	ed8d 7b00 	vstr	d7, [sp]
 8012a0c:	f280 80e5 	bge.w	8012bda <_dtoa_r+0x632>
 8012a10:	9b03      	ldr	r3, [sp, #12]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	f300 80e1 	bgt.w	8012bda <_dtoa_r+0x632>
 8012a18:	d10c      	bne.n	8012a34 <_dtoa_r+0x48c>
 8012a1a:	4b48      	ldr	r3, [pc, #288]	@ (8012b3c <_dtoa_r+0x594>)
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	ec51 0b17 	vmov	r0, r1, d7
 8012a22:	f7ed fde9 	bl	80005f8 <__aeabi_dmul>
 8012a26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a2a:	f7ee f86b 	bl	8000b04 <__aeabi_dcmpge>
 8012a2e:	2800      	cmp	r0, #0
 8012a30:	f000 8266 	beq.w	8012f00 <_dtoa_r+0x958>
 8012a34:	2400      	movs	r4, #0
 8012a36:	4625      	mov	r5, r4
 8012a38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a3a:	4656      	mov	r6, sl
 8012a3c:	ea6f 0803 	mvn.w	r8, r3
 8012a40:	2700      	movs	r7, #0
 8012a42:	4621      	mov	r1, r4
 8012a44:	4648      	mov	r0, r9
 8012a46:	f000 fc09 	bl	801325c <_Bfree>
 8012a4a:	2d00      	cmp	r5, #0
 8012a4c:	f000 80bd 	beq.w	8012bca <_dtoa_r+0x622>
 8012a50:	b12f      	cbz	r7, 8012a5e <_dtoa_r+0x4b6>
 8012a52:	42af      	cmp	r7, r5
 8012a54:	d003      	beq.n	8012a5e <_dtoa_r+0x4b6>
 8012a56:	4639      	mov	r1, r7
 8012a58:	4648      	mov	r0, r9
 8012a5a:	f000 fbff 	bl	801325c <_Bfree>
 8012a5e:	4629      	mov	r1, r5
 8012a60:	4648      	mov	r0, r9
 8012a62:	f000 fbfb 	bl	801325c <_Bfree>
 8012a66:	e0b0      	b.n	8012bca <_dtoa_r+0x622>
 8012a68:	07e2      	lsls	r2, r4, #31
 8012a6a:	d505      	bpl.n	8012a78 <_dtoa_r+0x4d0>
 8012a6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012a70:	f7ed fdc2 	bl	80005f8 <__aeabi_dmul>
 8012a74:	3601      	adds	r6, #1
 8012a76:	2301      	movs	r3, #1
 8012a78:	1064      	asrs	r4, r4, #1
 8012a7a:	3508      	adds	r5, #8
 8012a7c:	e762      	b.n	8012944 <_dtoa_r+0x39c>
 8012a7e:	2602      	movs	r6, #2
 8012a80:	e765      	b.n	801294e <_dtoa_r+0x3a6>
 8012a82:	9c03      	ldr	r4, [sp, #12]
 8012a84:	46b8      	mov	r8, r7
 8012a86:	e784      	b.n	8012992 <_dtoa_r+0x3ea>
 8012a88:	4b27      	ldr	r3, [pc, #156]	@ (8012b28 <_dtoa_r+0x580>)
 8012a8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012a8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012a90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012a94:	4454      	add	r4, sl
 8012a96:	2900      	cmp	r1, #0
 8012a98:	d054      	beq.n	8012b44 <_dtoa_r+0x59c>
 8012a9a:	4929      	ldr	r1, [pc, #164]	@ (8012b40 <_dtoa_r+0x598>)
 8012a9c:	2000      	movs	r0, #0
 8012a9e:	f7ed fed5 	bl	800084c <__aeabi_ddiv>
 8012aa2:	4633      	mov	r3, r6
 8012aa4:	462a      	mov	r2, r5
 8012aa6:	f7ed fbef 	bl	8000288 <__aeabi_dsub>
 8012aaa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012aae:	4656      	mov	r6, sl
 8012ab0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ab4:	f7ee f850 	bl	8000b58 <__aeabi_d2iz>
 8012ab8:	4605      	mov	r5, r0
 8012aba:	f7ed fd33 	bl	8000524 <__aeabi_i2d>
 8012abe:	4602      	mov	r2, r0
 8012ac0:	460b      	mov	r3, r1
 8012ac2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ac6:	f7ed fbdf 	bl	8000288 <__aeabi_dsub>
 8012aca:	3530      	adds	r5, #48	@ 0x30
 8012acc:	4602      	mov	r2, r0
 8012ace:	460b      	mov	r3, r1
 8012ad0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012ad4:	f806 5b01 	strb.w	r5, [r6], #1
 8012ad8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012adc:	f7ed fffe 	bl	8000adc <__aeabi_dcmplt>
 8012ae0:	2800      	cmp	r0, #0
 8012ae2:	d172      	bne.n	8012bca <_dtoa_r+0x622>
 8012ae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ae8:	4911      	ldr	r1, [pc, #68]	@ (8012b30 <_dtoa_r+0x588>)
 8012aea:	2000      	movs	r0, #0
 8012aec:	f7ed fbcc 	bl	8000288 <__aeabi_dsub>
 8012af0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012af4:	f7ed fff2 	bl	8000adc <__aeabi_dcmplt>
 8012af8:	2800      	cmp	r0, #0
 8012afa:	f040 80b4 	bne.w	8012c66 <_dtoa_r+0x6be>
 8012afe:	42a6      	cmp	r6, r4
 8012b00:	f43f af70 	beq.w	80129e4 <_dtoa_r+0x43c>
 8012b04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012b08:	4b0a      	ldr	r3, [pc, #40]	@ (8012b34 <_dtoa_r+0x58c>)
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	f7ed fd74 	bl	80005f8 <__aeabi_dmul>
 8012b10:	4b08      	ldr	r3, [pc, #32]	@ (8012b34 <_dtoa_r+0x58c>)
 8012b12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012b16:	2200      	movs	r2, #0
 8012b18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b1c:	f7ed fd6c 	bl	80005f8 <__aeabi_dmul>
 8012b20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012b24:	e7c4      	b.n	8012ab0 <_dtoa_r+0x508>
 8012b26:	bf00      	nop
 8012b28:	08016138 	.word	0x08016138
 8012b2c:	08016110 	.word	0x08016110
 8012b30:	3ff00000 	.word	0x3ff00000
 8012b34:	40240000 	.word	0x40240000
 8012b38:	401c0000 	.word	0x401c0000
 8012b3c:	40140000 	.word	0x40140000
 8012b40:	3fe00000 	.word	0x3fe00000
 8012b44:	4631      	mov	r1, r6
 8012b46:	4628      	mov	r0, r5
 8012b48:	f7ed fd56 	bl	80005f8 <__aeabi_dmul>
 8012b4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012b50:	9413      	str	r4, [sp, #76]	@ 0x4c
 8012b52:	4656      	mov	r6, sl
 8012b54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b58:	f7ed fffe 	bl	8000b58 <__aeabi_d2iz>
 8012b5c:	4605      	mov	r5, r0
 8012b5e:	f7ed fce1 	bl	8000524 <__aeabi_i2d>
 8012b62:	4602      	mov	r2, r0
 8012b64:	460b      	mov	r3, r1
 8012b66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b6a:	f7ed fb8d 	bl	8000288 <__aeabi_dsub>
 8012b6e:	3530      	adds	r5, #48	@ 0x30
 8012b70:	f806 5b01 	strb.w	r5, [r6], #1
 8012b74:	4602      	mov	r2, r0
 8012b76:	460b      	mov	r3, r1
 8012b78:	42a6      	cmp	r6, r4
 8012b7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012b7e:	f04f 0200 	mov.w	r2, #0
 8012b82:	d124      	bne.n	8012bce <_dtoa_r+0x626>
 8012b84:	4baf      	ldr	r3, [pc, #700]	@ (8012e44 <_dtoa_r+0x89c>)
 8012b86:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012b8a:	f7ed fb7f 	bl	800028c <__adddf3>
 8012b8e:	4602      	mov	r2, r0
 8012b90:	460b      	mov	r3, r1
 8012b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b96:	f7ed ffbf 	bl	8000b18 <__aeabi_dcmpgt>
 8012b9a:	2800      	cmp	r0, #0
 8012b9c:	d163      	bne.n	8012c66 <_dtoa_r+0x6be>
 8012b9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012ba2:	49a8      	ldr	r1, [pc, #672]	@ (8012e44 <_dtoa_r+0x89c>)
 8012ba4:	2000      	movs	r0, #0
 8012ba6:	f7ed fb6f 	bl	8000288 <__aeabi_dsub>
 8012baa:	4602      	mov	r2, r0
 8012bac:	460b      	mov	r3, r1
 8012bae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012bb2:	f7ed ff93 	bl	8000adc <__aeabi_dcmplt>
 8012bb6:	2800      	cmp	r0, #0
 8012bb8:	f43f af14 	beq.w	80129e4 <_dtoa_r+0x43c>
 8012bbc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8012bbe:	1e73      	subs	r3, r6, #1
 8012bc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012bc2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012bc6:	2b30      	cmp	r3, #48	@ 0x30
 8012bc8:	d0f8      	beq.n	8012bbc <_dtoa_r+0x614>
 8012bca:	4647      	mov	r7, r8
 8012bcc:	e03b      	b.n	8012c46 <_dtoa_r+0x69e>
 8012bce:	4b9e      	ldr	r3, [pc, #632]	@ (8012e48 <_dtoa_r+0x8a0>)
 8012bd0:	f7ed fd12 	bl	80005f8 <__aeabi_dmul>
 8012bd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012bd8:	e7bc      	b.n	8012b54 <_dtoa_r+0x5ac>
 8012bda:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8012bde:	4656      	mov	r6, sl
 8012be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012be4:	4620      	mov	r0, r4
 8012be6:	4629      	mov	r1, r5
 8012be8:	f7ed fe30 	bl	800084c <__aeabi_ddiv>
 8012bec:	f7ed ffb4 	bl	8000b58 <__aeabi_d2iz>
 8012bf0:	4680      	mov	r8, r0
 8012bf2:	f7ed fc97 	bl	8000524 <__aeabi_i2d>
 8012bf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012bfa:	f7ed fcfd 	bl	80005f8 <__aeabi_dmul>
 8012bfe:	4602      	mov	r2, r0
 8012c00:	460b      	mov	r3, r1
 8012c02:	4620      	mov	r0, r4
 8012c04:	4629      	mov	r1, r5
 8012c06:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012c0a:	f7ed fb3d 	bl	8000288 <__aeabi_dsub>
 8012c0e:	f806 4b01 	strb.w	r4, [r6], #1
 8012c12:	9d03      	ldr	r5, [sp, #12]
 8012c14:	eba6 040a 	sub.w	r4, r6, sl
 8012c18:	42a5      	cmp	r5, r4
 8012c1a:	4602      	mov	r2, r0
 8012c1c:	460b      	mov	r3, r1
 8012c1e:	d133      	bne.n	8012c88 <_dtoa_r+0x6e0>
 8012c20:	f7ed fb34 	bl	800028c <__adddf3>
 8012c24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c28:	4604      	mov	r4, r0
 8012c2a:	460d      	mov	r5, r1
 8012c2c:	f7ed ff74 	bl	8000b18 <__aeabi_dcmpgt>
 8012c30:	b9c0      	cbnz	r0, 8012c64 <_dtoa_r+0x6bc>
 8012c32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c36:	4620      	mov	r0, r4
 8012c38:	4629      	mov	r1, r5
 8012c3a:	f7ed ff45 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c3e:	b110      	cbz	r0, 8012c46 <_dtoa_r+0x69e>
 8012c40:	f018 0f01 	tst.w	r8, #1
 8012c44:	d10e      	bne.n	8012c64 <_dtoa_r+0x6bc>
 8012c46:	9902      	ldr	r1, [sp, #8]
 8012c48:	4648      	mov	r0, r9
 8012c4a:	f000 fb07 	bl	801325c <_Bfree>
 8012c4e:	2300      	movs	r3, #0
 8012c50:	7033      	strb	r3, [r6, #0]
 8012c52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012c54:	3701      	adds	r7, #1
 8012c56:	601f      	str	r7, [r3, #0]
 8012c58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	f000 824b 	beq.w	80130f6 <_dtoa_r+0xb4e>
 8012c60:	601e      	str	r6, [r3, #0]
 8012c62:	e248      	b.n	80130f6 <_dtoa_r+0xb4e>
 8012c64:	46b8      	mov	r8, r7
 8012c66:	4633      	mov	r3, r6
 8012c68:	461e      	mov	r6, r3
 8012c6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c6e:	2a39      	cmp	r2, #57	@ 0x39
 8012c70:	d106      	bne.n	8012c80 <_dtoa_r+0x6d8>
 8012c72:	459a      	cmp	sl, r3
 8012c74:	d1f8      	bne.n	8012c68 <_dtoa_r+0x6c0>
 8012c76:	2230      	movs	r2, #48	@ 0x30
 8012c78:	f108 0801 	add.w	r8, r8, #1
 8012c7c:	f88a 2000 	strb.w	r2, [sl]
 8012c80:	781a      	ldrb	r2, [r3, #0]
 8012c82:	3201      	adds	r2, #1
 8012c84:	701a      	strb	r2, [r3, #0]
 8012c86:	e7a0      	b.n	8012bca <_dtoa_r+0x622>
 8012c88:	4b6f      	ldr	r3, [pc, #444]	@ (8012e48 <_dtoa_r+0x8a0>)
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	f7ed fcb4 	bl	80005f8 <__aeabi_dmul>
 8012c90:	2200      	movs	r2, #0
 8012c92:	2300      	movs	r3, #0
 8012c94:	4604      	mov	r4, r0
 8012c96:	460d      	mov	r5, r1
 8012c98:	f7ed ff16 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c9c:	2800      	cmp	r0, #0
 8012c9e:	d09f      	beq.n	8012be0 <_dtoa_r+0x638>
 8012ca0:	e7d1      	b.n	8012c46 <_dtoa_r+0x69e>
 8012ca2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ca4:	2a00      	cmp	r2, #0
 8012ca6:	f000 80ea 	beq.w	8012e7e <_dtoa_r+0x8d6>
 8012caa:	9a07      	ldr	r2, [sp, #28]
 8012cac:	2a01      	cmp	r2, #1
 8012cae:	f300 80cd 	bgt.w	8012e4c <_dtoa_r+0x8a4>
 8012cb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012cb4:	2a00      	cmp	r2, #0
 8012cb6:	f000 80c1 	beq.w	8012e3c <_dtoa_r+0x894>
 8012cba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012cbe:	9c08      	ldr	r4, [sp, #32]
 8012cc0:	9e00      	ldr	r6, [sp, #0]
 8012cc2:	9a00      	ldr	r2, [sp, #0]
 8012cc4:	441a      	add	r2, r3
 8012cc6:	9200      	str	r2, [sp, #0]
 8012cc8:	9a06      	ldr	r2, [sp, #24]
 8012cca:	2101      	movs	r1, #1
 8012ccc:	441a      	add	r2, r3
 8012cce:	4648      	mov	r0, r9
 8012cd0:	9206      	str	r2, [sp, #24]
 8012cd2:	f000 fb77 	bl	80133c4 <__i2b>
 8012cd6:	4605      	mov	r5, r0
 8012cd8:	b166      	cbz	r6, 8012cf4 <_dtoa_r+0x74c>
 8012cda:	9b06      	ldr	r3, [sp, #24]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	dd09      	ble.n	8012cf4 <_dtoa_r+0x74c>
 8012ce0:	42b3      	cmp	r3, r6
 8012ce2:	9a00      	ldr	r2, [sp, #0]
 8012ce4:	bfa8      	it	ge
 8012ce6:	4633      	movge	r3, r6
 8012ce8:	1ad2      	subs	r2, r2, r3
 8012cea:	9200      	str	r2, [sp, #0]
 8012cec:	9a06      	ldr	r2, [sp, #24]
 8012cee:	1af6      	subs	r6, r6, r3
 8012cf0:	1ad3      	subs	r3, r2, r3
 8012cf2:	9306      	str	r3, [sp, #24]
 8012cf4:	9b08      	ldr	r3, [sp, #32]
 8012cf6:	b30b      	cbz	r3, 8012d3c <_dtoa_r+0x794>
 8012cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	f000 80c6 	beq.w	8012e8c <_dtoa_r+0x8e4>
 8012d00:	2c00      	cmp	r4, #0
 8012d02:	f000 80c0 	beq.w	8012e86 <_dtoa_r+0x8de>
 8012d06:	4629      	mov	r1, r5
 8012d08:	4622      	mov	r2, r4
 8012d0a:	4648      	mov	r0, r9
 8012d0c:	f000 fc12 	bl	8013534 <__pow5mult>
 8012d10:	9a02      	ldr	r2, [sp, #8]
 8012d12:	4601      	mov	r1, r0
 8012d14:	4605      	mov	r5, r0
 8012d16:	4648      	mov	r0, r9
 8012d18:	f000 fb6a 	bl	80133f0 <__multiply>
 8012d1c:	9902      	ldr	r1, [sp, #8]
 8012d1e:	4680      	mov	r8, r0
 8012d20:	4648      	mov	r0, r9
 8012d22:	f000 fa9b 	bl	801325c <_Bfree>
 8012d26:	9b08      	ldr	r3, [sp, #32]
 8012d28:	1b1b      	subs	r3, r3, r4
 8012d2a:	9308      	str	r3, [sp, #32]
 8012d2c:	f000 80b1 	beq.w	8012e92 <_dtoa_r+0x8ea>
 8012d30:	9a08      	ldr	r2, [sp, #32]
 8012d32:	4641      	mov	r1, r8
 8012d34:	4648      	mov	r0, r9
 8012d36:	f000 fbfd 	bl	8013534 <__pow5mult>
 8012d3a:	9002      	str	r0, [sp, #8]
 8012d3c:	2101      	movs	r1, #1
 8012d3e:	4648      	mov	r0, r9
 8012d40:	f000 fb40 	bl	80133c4 <__i2b>
 8012d44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012d46:	4604      	mov	r4, r0
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	f000 81d8 	beq.w	80130fe <_dtoa_r+0xb56>
 8012d4e:	461a      	mov	r2, r3
 8012d50:	4601      	mov	r1, r0
 8012d52:	4648      	mov	r0, r9
 8012d54:	f000 fbee 	bl	8013534 <__pow5mult>
 8012d58:	9b07      	ldr	r3, [sp, #28]
 8012d5a:	2b01      	cmp	r3, #1
 8012d5c:	4604      	mov	r4, r0
 8012d5e:	f300 809f 	bgt.w	8012ea0 <_dtoa_r+0x8f8>
 8012d62:	9b04      	ldr	r3, [sp, #16]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	f040 8097 	bne.w	8012e98 <_dtoa_r+0x8f0>
 8012d6a:	9b05      	ldr	r3, [sp, #20]
 8012d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	f040 8093 	bne.w	8012e9c <_dtoa_r+0x8f4>
 8012d76:	9b05      	ldr	r3, [sp, #20]
 8012d78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012d7c:	0d1b      	lsrs	r3, r3, #20
 8012d7e:	051b      	lsls	r3, r3, #20
 8012d80:	b133      	cbz	r3, 8012d90 <_dtoa_r+0x7e8>
 8012d82:	9b00      	ldr	r3, [sp, #0]
 8012d84:	3301      	adds	r3, #1
 8012d86:	9300      	str	r3, [sp, #0]
 8012d88:	9b06      	ldr	r3, [sp, #24]
 8012d8a:	3301      	adds	r3, #1
 8012d8c:	9306      	str	r3, [sp, #24]
 8012d8e:	2301      	movs	r3, #1
 8012d90:	9308      	str	r3, [sp, #32]
 8012d92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	f000 81b8 	beq.w	801310a <_dtoa_r+0xb62>
 8012d9a:	6923      	ldr	r3, [r4, #16]
 8012d9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012da0:	6918      	ldr	r0, [r3, #16]
 8012da2:	f000 fac3 	bl	801332c <__hi0bits>
 8012da6:	f1c0 0020 	rsb	r0, r0, #32
 8012daa:	9b06      	ldr	r3, [sp, #24]
 8012dac:	4418      	add	r0, r3
 8012dae:	f010 001f 	ands.w	r0, r0, #31
 8012db2:	f000 8082 	beq.w	8012eba <_dtoa_r+0x912>
 8012db6:	f1c0 0320 	rsb	r3, r0, #32
 8012dba:	2b04      	cmp	r3, #4
 8012dbc:	dd73      	ble.n	8012ea6 <_dtoa_r+0x8fe>
 8012dbe:	9b00      	ldr	r3, [sp, #0]
 8012dc0:	f1c0 001c 	rsb	r0, r0, #28
 8012dc4:	4403      	add	r3, r0
 8012dc6:	9300      	str	r3, [sp, #0]
 8012dc8:	9b06      	ldr	r3, [sp, #24]
 8012dca:	4403      	add	r3, r0
 8012dcc:	4406      	add	r6, r0
 8012dce:	9306      	str	r3, [sp, #24]
 8012dd0:	9b00      	ldr	r3, [sp, #0]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	dd05      	ble.n	8012de2 <_dtoa_r+0x83a>
 8012dd6:	9902      	ldr	r1, [sp, #8]
 8012dd8:	461a      	mov	r2, r3
 8012dda:	4648      	mov	r0, r9
 8012ddc:	f000 fc04 	bl	80135e8 <__lshift>
 8012de0:	9002      	str	r0, [sp, #8]
 8012de2:	9b06      	ldr	r3, [sp, #24]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	dd05      	ble.n	8012df4 <_dtoa_r+0x84c>
 8012de8:	4621      	mov	r1, r4
 8012dea:	461a      	mov	r2, r3
 8012dec:	4648      	mov	r0, r9
 8012dee:	f000 fbfb 	bl	80135e8 <__lshift>
 8012df2:	4604      	mov	r4, r0
 8012df4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d061      	beq.n	8012ebe <_dtoa_r+0x916>
 8012dfa:	9802      	ldr	r0, [sp, #8]
 8012dfc:	4621      	mov	r1, r4
 8012dfe:	f000 fc5f 	bl	80136c0 <__mcmp>
 8012e02:	2800      	cmp	r0, #0
 8012e04:	da5b      	bge.n	8012ebe <_dtoa_r+0x916>
 8012e06:	2300      	movs	r3, #0
 8012e08:	9902      	ldr	r1, [sp, #8]
 8012e0a:	220a      	movs	r2, #10
 8012e0c:	4648      	mov	r0, r9
 8012e0e:	f000 fa47 	bl	80132a0 <__multadd>
 8012e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e14:	9002      	str	r0, [sp, #8]
 8012e16:	f107 38ff 	add.w	r8, r7, #4294967295
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	f000 8177 	beq.w	801310e <_dtoa_r+0xb66>
 8012e20:	4629      	mov	r1, r5
 8012e22:	2300      	movs	r3, #0
 8012e24:	220a      	movs	r2, #10
 8012e26:	4648      	mov	r0, r9
 8012e28:	f000 fa3a 	bl	80132a0 <__multadd>
 8012e2c:	f1bb 0f00 	cmp.w	fp, #0
 8012e30:	4605      	mov	r5, r0
 8012e32:	dc6f      	bgt.n	8012f14 <_dtoa_r+0x96c>
 8012e34:	9b07      	ldr	r3, [sp, #28]
 8012e36:	2b02      	cmp	r3, #2
 8012e38:	dc49      	bgt.n	8012ece <_dtoa_r+0x926>
 8012e3a:	e06b      	b.n	8012f14 <_dtoa_r+0x96c>
 8012e3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012e3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012e42:	e73c      	b.n	8012cbe <_dtoa_r+0x716>
 8012e44:	3fe00000 	.word	0x3fe00000
 8012e48:	40240000 	.word	0x40240000
 8012e4c:	9b03      	ldr	r3, [sp, #12]
 8012e4e:	1e5c      	subs	r4, r3, #1
 8012e50:	9b08      	ldr	r3, [sp, #32]
 8012e52:	42a3      	cmp	r3, r4
 8012e54:	db09      	blt.n	8012e6a <_dtoa_r+0x8c2>
 8012e56:	1b1c      	subs	r4, r3, r4
 8012e58:	9b03      	ldr	r3, [sp, #12]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	f6bf af30 	bge.w	8012cc0 <_dtoa_r+0x718>
 8012e60:	9b00      	ldr	r3, [sp, #0]
 8012e62:	9a03      	ldr	r2, [sp, #12]
 8012e64:	1a9e      	subs	r6, r3, r2
 8012e66:	2300      	movs	r3, #0
 8012e68:	e72b      	b.n	8012cc2 <_dtoa_r+0x71a>
 8012e6a:	9b08      	ldr	r3, [sp, #32]
 8012e6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012e6e:	9408      	str	r4, [sp, #32]
 8012e70:	1ae3      	subs	r3, r4, r3
 8012e72:	441a      	add	r2, r3
 8012e74:	9e00      	ldr	r6, [sp, #0]
 8012e76:	9b03      	ldr	r3, [sp, #12]
 8012e78:	920d      	str	r2, [sp, #52]	@ 0x34
 8012e7a:	2400      	movs	r4, #0
 8012e7c:	e721      	b.n	8012cc2 <_dtoa_r+0x71a>
 8012e7e:	9c08      	ldr	r4, [sp, #32]
 8012e80:	9e00      	ldr	r6, [sp, #0]
 8012e82:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8012e84:	e728      	b.n	8012cd8 <_dtoa_r+0x730>
 8012e86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8012e8a:	e751      	b.n	8012d30 <_dtoa_r+0x788>
 8012e8c:	9a08      	ldr	r2, [sp, #32]
 8012e8e:	9902      	ldr	r1, [sp, #8]
 8012e90:	e750      	b.n	8012d34 <_dtoa_r+0x78c>
 8012e92:	f8cd 8008 	str.w	r8, [sp, #8]
 8012e96:	e751      	b.n	8012d3c <_dtoa_r+0x794>
 8012e98:	2300      	movs	r3, #0
 8012e9a:	e779      	b.n	8012d90 <_dtoa_r+0x7e8>
 8012e9c:	9b04      	ldr	r3, [sp, #16]
 8012e9e:	e777      	b.n	8012d90 <_dtoa_r+0x7e8>
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	9308      	str	r3, [sp, #32]
 8012ea4:	e779      	b.n	8012d9a <_dtoa_r+0x7f2>
 8012ea6:	d093      	beq.n	8012dd0 <_dtoa_r+0x828>
 8012ea8:	9a00      	ldr	r2, [sp, #0]
 8012eaa:	331c      	adds	r3, #28
 8012eac:	441a      	add	r2, r3
 8012eae:	9200      	str	r2, [sp, #0]
 8012eb0:	9a06      	ldr	r2, [sp, #24]
 8012eb2:	441a      	add	r2, r3
 8012eb4:	441e      	add	r6, r3
 8012eb6:	9206      	str	r2, [sp, #24]
 8012eb8:	e78a      	b.n	8012dd0 <_dtoa_r+0x828>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	e7f4      	b.n	8012ea8 <_dtoa_r+0x900>
 8012ebe:	9b03      	ldr	r3, [sp, #12]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	46b8      	mov	r8, r7
 8012ec4:	dc20      	bgt.n	8012f08 <_dtoa_r+0x960>
 8012ec6:	469b      	mov	fp, r3
 8012ec8:	9b07      	ldr	r3, [sp, #28]
 8012eca:	2b02      	cmp	r3, #2
 8012ecc:	dd1e      	ble.n	8012f0c <_dtoa_r+0x964>
 8012ece:	f1bb 0f00 	cmp.w	fp, #0
 8012ed2:	f47f adb1 	bne.w	8012a38 <_dtoa_r+0x490>
 8012ed6:	4621      	mov	r1, r4
 8012ed8:	465b      	mov	r3, fp
 8012eda:	2205      	movs	r2, #5
 8012edc:	4648      	mov	r0, r9
 8012ede:	f000 f9df 	bl	80132a0 <__multadd>
 8012ee2:	4601      	mov	r1, r0
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	9802      	ldr	r0, [sp, #8]
 8012ee8:	f000 fbea 	bl	80136c0 <__mcmp>
 8012eec:	2800      	cmp	r0, #0
 8012eee:	f77f ada3 	ble.w	8012a38 <_dtoa_r+0x490>
 8012ef2:	4656      	mov	r6, sl
 8012ef4:	2331      	movs	r3, #49	@ 0x31
 8012ef6:	f806 3b01 	strb.w	r3, [r6], #1
 8012efa:	f108 0801 	add.w	r8, r8, #1
 8012efe:	e59f      	b.n	8012a40 <_dtoa_r+0x498>
 8012f00:	9c03      	ldr	r4, [sp, #12]
 8012f02:	46b8      	mov	r8, r7
 8012f04:	4625      	mov	r5, r4
 8012f06:	e7f4      	b.n	8012ef2 <_dtoa_r+0x94a>
 8012f08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8012f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	f000 8101 	beq.w	8013116 <_dtoa_r+0xb6e>
 8012f14:	2e00      	cmp	r6, #0
 8012f16:	dd05      	ble.n	8012f24 <_dtoa_r+0x97c>
 8012f18:	4629      	mov	r1, r5
 8012f1a:	4632      	mov	r2, r6
 8012f1c:	4648      	mov	r0, r9
 8012f1e:	f000 fb63 	bl	80135e8 <__lshift>
 8012f22:	4605      	mov	r5, r0
 8012f24:	9b08      	ldr	r3, [sp, #32]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d05c      	beq.n	8012fe4 <_dtoa_r+0xa3c>
 8012f2a:	6869      	ldr	r1, [r5, #4]
 8012f2c:	4648      	mov	r0, r9
 8012f2e:	f000 f955 	bl	80131dc <_Balloc>
 8012f32:	4606      	mov	r6, r0
 8012f34:	b928      	cbnz	r0, 8012f42 <_dtoa_r+0x99a>
 8012f36:	4b82      	ldr	r3, [pc, #520]	@ (8013140 <_dtoa_r+0xb98>)
 8012f38:	4602      	mov	r2, r0
 8012f3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012f3e:	f7ff bb4a 	b.w	80125d6 <_dtoa_r+0x2e>
 8012f42:	692a      	ldr	r2, [r5, #16]
 8012f44:	3202      	adds	r2, #2
 8012f46:	0092      	lsls	r2, r2, #2
 8012f48:	f105 010c 	add.w	r1, r5, #12
 8012f4c:	300c      	adds	r0, #12
 8012f4e:	f000 ff31 	bl	8013db4 <memcpy>
 8012f52:	2201      	movs	r2, #1
 8012f54:	4631      	mov	r1, r6
 8012f56:	4648      	mov	r0, r9
 8012f58:	f000 fb46 	bl	80135e8 <__lshift>
 8012f5c:	f10a 0301 	add.w	r3, sl, #1
 8012f60:	9300      	str	r3, [sp, #0]
 8012f62:	eb0a 030b 	add.w	r3, sl, fp
 8012f66:	9308      	str	r3, [sp, #32]
 8012f68:	9b04      	ldr	r3, [sp, #16]
 8012f6a:	f003 0301 	and.w	r3, r3, #1
 8012f6e:	462f      	mov	r7, r5
 8012f70:	9306      	str	r3, [sp, #24]
 8012f72:	4605      	mov	r5, r0
 8012f74:	9b00      	ldr	r3, [sp, #0]
 8012f76:	9802      	ldr	r0, [sp, #8]
 8012f78:	4621      	mov	r1, r4
 8012f7a:	f103 3bff 	add.w	fp, r3, #4294967295
 8012f7e:	f7ff fa8a 	bl	8012496 <quorem>
 8012f82:	4603      	mov	r3, r0
 8012f84:	3330      	adds	r3, #48	@ 0x30
 8012f86:	9003      	str	r0, [sp, #12]
 8012f88:	4639      	mov	r1, r7
 8012f8a:	9802      	ldr	r0, [sp, #8]
 8012f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f8e:	f000 fb97 	bl	80136c0 <__mcmp>
 8012f92:	462a      	mov	r2, r5
 8012f94:	9004      	str	r0, [sp, #16]
 8012f96:	4621      	mov	r1, r4
 8012f98:	4648      	mov	r0, r9
 8012f9a:	f000 fbad 	bl	80136f8 <__mdiff>
 8012f9e:	68c2      	ldr	r2, [r0, #12]
 8012fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fa2:	4606      	mov	r6, r0
 8012fa4:	bb02      	cbnz	r2, 8012fe8 <_dtoa_r+0xa40>
 8012fa6:	4601      	mov	r1, r0
 8012fa8:	9802      	ldr	r0, [sp, #8]
 8012faa:	f000 fb89 	bl	80136c0 <__mcmp>
 8012fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fb0:	4602      	mov	r2, r0
 8012fb2:	4631      	mov	r1, r6
 8012fb4:	4648      	mov	r0, r9
 8012fb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8012fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8012fba:	f000 f94f 	bl	801325c <_Bfree>
 8012fbe:	9b07      	ldr	r3, [sp, #28]
 8012fc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012fc2:	9e00      	ldr	r6, [sp, #0]
 8012fc4:	ea42 0103 	orr.w	r1, r2, r3
 8012fc8:	9b06      	ldr	r3, [sp, #24]
 8012fca:	4319      	orrs	r1, r3
 8012fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fce:	d10d      	bne.n	8012fec <_dtoa_r+0xa44>
 8012fd0:	2b39      	cmp	r3, #57	@ 0x39
 8012fd2:	d027      	beq.n	8013024 <_dtoa_r+0xa7c>
 8012fd4:	9a04      	ldr	r2, [sp, #16]
 8012fd6:	2a00      	cmp	r2, #0
 8012fd8:	dd01      	ble.n	8012fde <_dtoa_r+0xa36>
 8012fda:	9b03      	ldr	r3, [sp, #12]
 8012fdc:	3331      	adds	r3, #49	@ 0x31
 8012fde:	f88b 3000 	strb.w	r3, [fp]
 8012fe2:	e52e      	b.n	8012a42 <_dtoa_r+0x49a>
 8012fe4:	4628      	mov	r0, r5
 8012fe6:	e7b9      	b.n	8012f5c <_dtoa_r+0x9b4>
 8012fe8:	2201      	movs	r2, #1
 8012fea:	e7e2      	b.n	8012fb2 <_dtoa_r+0xa0a>
 8012fec:	9904      	ldr	r1, [sp, #16]
 8012fee:	2900      	cmp	r1, #0
 8012ff0:	db04      	blt.n	8012ffc <_dtoa_r+0xa54>
 8012ff2:	9807      	ldr	r0, [sp, #28]
 8012ff4:	4301      	orrs	r1, r0
 8012ff6:	9806      	ldr	r0, [sp, #24]
 8012ff8:	4301      	orrs	r1, r0
 8012ffa:	d120      	bne.n	801303e <_dtoa_r+0xa96>
 8012ffc:	2a00      	cmp	r2, #0
 8012ffe:	ddee      	ble.n	8012fde <_dtoa_r+0xa36>
 8013000:	9902      	ldr	r1, [sp, #8]
 8013002:	9300      	str	r3, [sp, #0]
 8013004:	2201      	movs	r2, #1
 8013006:	4648      	mov	r0, r9
 8013008:	f000 faee 	bl	80135e8 <__lshift>
 801300c:	4621      	mov	r1, r4
 801300e:	9002      	str	r0, [sp, #8]
 8013010:	f000 fb56 	bl	80136c0 <__mcmp>
 8013014:	2800      	cmp	r0, #0
 8013016:	9b00      	ldr	r3, [sp, #0]
 8013018:	dc02      	bgt.n	8013020 <_dtoa_r+0xa78>
 801301a:	d1e0      	bne.n	8012fde <_dtoa_r+0xa36>
 801301c:	07da      	lsls	r2, r3, #31
 801301e:	d5de      	bpl.n	8012fde <_dtoa_r+0xa36>
 8013020:	2b39      	cmp	r3, #57	@ 0x39
 8013022:	d1da      	bne.n	8012fda <_dtoa_r+0xa32>
 8013024:	2339      	movs	r3, #57	@ 0x39
 8013026:	f88b 3000 	strb.w	r3, [fp]
 801302a:	4633      	mov	r3, r6
 801302c:	461e      	mov	r6, r3
 801302e:	3b01      	subs	r3, #1
 8013030:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013034:	2a39      	cmp	r2, #57	@ 0x39
 8013036:	d04e      	beq.n	80130d6 <_dtoa_r+0xb2e>
 8013038:	3201      	adds	r2, #1
 801303a:	701a      	strb	r2, [r3, #0]
 801303c:	e501      	b.n	8012a42 <_dtoa_r+0x49a>
 801303e:	2a00      	cmp	r2, #0
 8013040:	dd03      	ble.n	801304a <_dtoa_r+0xaa2>
 8013042:	2b39      	cmp	r3, #57	@ 0x39
 8013044:	d0ee      	beq.n	8013024 <_dtoa_r+0xa7c>
 8013046:	3301      	adds	r3, #1
 8013048:	e7c9      	b.n	8012fde <_dtoa_r+0xa36>
 801304a:	9a00      	ldr	r2, [sp, #0]
 801304c:	9908      	ldr	r1, [sp, #32]
 801304e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013052:	428a      	cmp	r2, r1
 8013054:	d028      	beq.n	80130a8 <_dtoa_r+0xb00>
 8013056:	9902      	ldr	r1, [sp, #8]
 8013058:	2300      	movs	r3, #0
 801305a:	220a      	movs	r2, #10
 801305c:	4648      	mov	r0, r9
 801305e:	f000 f91f 	bl	80132a0 <__multadd>
 8013062:	42af      	cmp	r7, r5
 8013064:	9002      	str	r0, [sp, #8]
 8013066:	f04f 0300 	mov.w	r3, #0
 801306a:	f04f 020a 	mov.w	r2, #10
 801306e:	4639      	mov	r1, r7
 8013070:	4648      	mov	r0, r9
 8013072:	d107      	bne.n	8013084 <_dtoa_r+0xadc>
 8013074:	f000 f914 	bl	80132a0 <__multadd>
 8013078:	4607      	mov	r7, r0
 801307a:	4605      	mov	r5, r0
 801307c:	9b00      	ldr	r3, [sp, #0]
 801307e:	3301      	adds	r3, #1
 8013080:	9300      	str	r3, [sp, #0]
 8013082:	e777      	b.n	8012f74 <_dtoa_r+0x9cc>
 8013084:	f000 f90c 	bl	80132a0 <__multadd>
 8013088:	4629      	mov	r1, r5
 801308a:	4607      	mov	r7, r0
 801308c:	2300      	movs	r3, #0
 801308e:	220a      	movs	r2, #10
 8013090:	4648      	mov	r0, r9
 8013092:	f000 f905 	bl	80132a0 <__multadd>
 8013096:	4605      	mov	r5, r0
 8013098:	e7f0      	b.n	801307c <_dtoa_r+0xad4>
 801309a:	f1bb 0f00 	cmp.w	fp, #0
 801309e:	bfcc      	ite	gt
 80130a0:	465e      	movgt	r6, fp
 80130a2:	2601      	movle	r6, #1
 80130a4:	4456      	add	r6, sl
 80130a6:	2700      	movs	r7, #0
 80130a8:	9902      	ldr	r1, [sp, #8]
 80130aa:	9300      	str	r3, [sp, #0]
 80130ac:	2201      	movs	r2, #1
 80130ae:	4648      	mov	r0, r9
 80130b0:	f000 fa9a 	bl	80135e8 <__lshift>
 80130b4:	4621      	mov	r1, r4
 80130b6:	9002      	str	r0, [sp, #8]
 80130b8:	f000 fb02 	bl	80136c0 <__mcmp>
 80130bc:	2800      	cmp	r0, #0
 80130be:	dcb4      	bgt.n	801302a <_dtoa_r+0xa82>
 80130c0:	d102      	bne.n	80130c8 <_dtoa_r+0xb20>
 80130c2:	9b00      	ldr	r3, [sp, #0]
 80130c4:	07db      	lsls	r3, r3, #31
 80130c6:	d4b0      	bmi.n	801302a <_dtoa_r+0xa82>
 80130c8:	4633      	mov	r3, r6
 80130ca:	461e      	mov	r6, r3
 80130cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80130d0:	2a30      	cmp	r2, #48	@ 0x30
 80130d2:	d0fa      	beq.n	80130ca <_dtoa_r+0xb22>
 80130d4:	e4b5      	b.n	8012a42 <_dtoa_r+0x49a>
 80130d6:	459a      	cmp	sl, r3
 80130d8:	d1a8      	bne.n	801302c <_dtoa_r+0xa84>
 80130da:	2331      	movs	r3, #49	@ 0x31
 80130dc:	f108 0801 	add.w	r8, r8, #1
 80130e0:	f88a 3000 	strb.w	r3, [sl]
 80130e4:	e4ad      	b.n	8012a42 <_dtoa_r+0x49a>
 80130e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80130e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8013144 <_dtoa_r+0xb9c>
 80130ec:	b11b      	cbz	r3, 80130f6 <_dtoa_r+0xb4e>
 80130ee:	f10a 0308 	add.w	r3, sl, #8
 80130f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80130f4:	6013      	str	r3, [r2, #0]
 80130f6:	4650      	mov	r0, sl
 80130f8:	b017      	add	sp, #92	@ 0x5c
 80130fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130fe:	9b07      	ldr	r3, [sp, #28]
 8013100:	2b01      	cmp	r3, #1
 8013102:	f77f ae2e 	ble.w	8012d62 <_dtoa_r+0x7ba>
 8013106:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013108:	9308      	str	r3, [sp, #32]
 801310a:	2001      	movs	r0, #1
 801310c:	e64d      	b.n	8012daa <_dtoa_r+0x802>
 801310e:	f1bb 0f00 	cmp.w	fp, #0
 8013112:	f77f aed9 	ble.w	8012ec8 <_dtoa_r+0x920>
 8013116:	4656      	mov	r6, sl
 8013118:	9802      	ldr	r0, [sp, #8]
 801311a:	4621      	mov	r1, r4
 801311c:	f7ff f9bb 	bl	8012496 <quorem>
 8013120:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8013124:	f806 3b01 	strb.w	r3, [r6], #1
 8013128:	eba6 020a 	sub.w	r2, r6, sl
 801312c:	4593      	cmp	fp, r2
 801312e:	ddb4      	ble.n	801309a <_dtoa_r+0xaf2>
 8013130:	9902      	ldr	r1, [sp, #8]
 8013132:	2300      	movs	r3, #0
 8013134:	220a      	movs	r2, #10
 8013136:	4648      	mov	r0, r9
 8013138:	f000 f8b2 	bl	80132a0 <__multadd>
 801313c:	9002      	str	r0, [sp, #8]
 801313e:	e7eb      	b.n	8013118 <_dtoa_r+0xb70>
 8013140:	08016040 	.word	0x08016040
 8013144:	08015fc4 	.word	0x08015fc4

08013148 <_free_r>:
 8013148:	b538      	push	{r3, r4, r5, lr}
 801314a:	4605      	mov	r5, r0
 801314c:	2900      	cmp	r1, #0
 801314e:	d041      	beq.n	80131d4 <_free_r+0x8c>
 8013150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013154:	1f0c      	subs	r4, r1, #4
 8013156:	2b00      	cmp	r3, #0
 8013158:	bfb8      	it	lt
 801315a:	18e4      	addlt	r4, r4, r3
 801315c:	f7fe fa90 	bl	8011680 <__malloc_lock>
 8013160:	4a1d      	ldr	r2, [pc, #116]	@ (80131d8 <_free_r+0x90>)
 8013162:	6813      	ldr	r3, [r2, #0]
 8013164:	b933      	cbnz	r3, 8013174 <_free_r+0x2c>
 8013166:	6063      	str	r3, [r4, #4]
 8013168:	6014      	str	r4, [r2, #0]
 801316a:	4628      	mov	r0, r5
 801316c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013170:	f7fe ba8c 	b.w	801168c <__malloc_unlock>
 8013174:	42a3      	cmp	r3, r4
 8013176:	d908      	bls.n	801318a <_free_r+0x42>
 8013178:	6820      	ldr	r0, [r4, #0]
 801317a:	1821      	adds	r1, r4, r0
 801317c:	428b      	cmp	r3, r1
 801317e:	bf01      	itttt	eq
 8013180:	6819      	ldreq	r1, [r3, #0]
 8013182:	685b      	ldreq	r3, [r3, #4]
 8013184:	1809      	addeq	r1, r1, r0
 8013186:	6021      	streq	r1, [r4, #0]
 8013188:	e7ed      	b.n	8013166 <_free_r+0x1e>
 801318a:	461a      	mov	r2, r3
 801318c:	685b      	ldr	r3, [r3, #4]
 801318e:	b10b      	cbz	r3, 8013194 <_free_r+0x4c>
 8013190:	42a3      	cmp	r3, r4
 8013192:	d9fa      	bls.n	801318a <_free_r+0x42>
 8013194:	6811      	ldr	r1, [r2, #0]
 8013196:	1850      	adds	r0, r2, r1
 8013198:	42a0      	cmp	r0, r4
 801319a:	d10b      	bne.n	80131b4 <_free_r+0x6c>
 801319c:	6820      	ldr	r0, [r4, #0]
 801319e:	4401      	add	r1, r0
 80131a0:	1850      	adds	r0, r2, r1
 80131a2:	4283      	cmp	r3, r0
 80131a4:	6011      	str	r1, [r2, #0]
 80131a6:	d1e0      	bne.n	801316a <_free_r+0x22>
 80131a8:	6818      	ldr	r0, [r3, #0]
 80131aa:	685b      	ldr	r3, [r3, #4]
 80131ac:	6053      	str	r3, [r2, #4]
 80131ae:	4408      	add	r0, r1
 80131b0:	6010      	str	r0, [r2, #0]
 80131b2:	e7da      	b.n	801316a <_free_r+0x22>
 80131b4:	d902      	bls.n	80131bc <_free_r+0x74>
 80131b6:	230c      	movs	r3, #12
 80131b8:	602b      	str	r3, [r5, #0]
 80131ba:	e7d6      	b.n	801316a <_free_r+0x22>
 80131bc:	6820      	ldr	r0, [r4, #0]
 80131be:	1821      	adds	r1, r4, r0
 80131c0:	428b      	cmp	r3, r1
 80131c2:	bf04      	itt	eq
 80131c4:	6819      	ldreq	r1, [r3, #0]
 80131c6:	685b      	ldreq	r3, [r3, #4]
 80131c8:	6063      	str	r3, [r4, #4]
 80131ca:	bf04      	itt	eq
 80131cc:	1809      	addeq	r1, r1, r0
 80131ce:	6021      	streq	r1, [r4, #0]
 80131d0:	6054      	str	r4, [r2, #4]
 80131d2:	e7ca      	b.n	801316a <_free_r+0x22>
 80131d4:	bd38      	pop	{r3, r4, r5, pc}
 80131d6:	bf00      	nop
 80131d8:	20000a94 	.word	0x20000a94

080131dc <_Balloc>:
 80131dc:	b570      	push	{r4, r5, r6, lr}
 80131de:	69c6      	ldr	r6, [r0, #28]
 80131e0:	4604      	mov	r4, r0
 80131e2:	460d      	mov	r5, r1
 80131e4:	b976      	cbnz	r6, 8013204 <_Balloc+0x28>
 80131e6:	2010      	movs	r0, #16
 80131e8:	f7fe f9a0 	bl	801152c <malloc>
 80131ec:	4602      	mov	r2, r0
 80131ee:	61e0      	str	r0, [r4, #28]
 80131f0:	b920      	cbnz	r0, 80131fc <_Balloc+0x20>
 80131f2:	4b18      	ldr	r3, [pc, #96]	@ (8013254 <_Balloc+0x78>)
 80131f4:	4818      	ldr	r0, [pc, #96]	@ (8013258 <_Balloc+0x7c>)
 80131f6:	216b      	movs	r1, #107	@ 0x6b
 80131f8:	f000 fdea 	bl	8013dd0 <__assert_func>
 80131fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013200:	6006      	str	r6, [r0, #0]
 8013202:	60c6      	str	r6, [r0, #12]
 8013204:	69e6      	ldr	r6, [r4, #28]
 8013206:	68f3      	ldr	r3, [r6, #12]
 8013208:	b183      	cbz	r3, 801322c <_Balloc+0x50>
 801320a:	69e3      	ldr	r3, [r4, #28]
 801320c:	68db      	ldr	r3, [r3, #12]
 801320e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013212:	b9b8      	cbnz	r0, 8013244 <_Balloc+0x68>
 8013214:	2101      	movs	r1, #1
 8013216:	fa01 f605 	lsl.w	r6, r1, r5
 801321a:	1d72      	adds	r2, r6, #5
 801321c:	0092      	lsls	r2, r2, #2
 801321e:	4620      	mov	r0, r4
 8013220:	f000 fdf4 	bl	8013e0c <_calloc_r>
 8013224:	b160      	cbz	r0, 8013240 <_Balloc+0x64>
 8013226:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801322a:	e00e      	b.n	801324a <_Balloc+0x6e>
 801322c:	2221      	movs	r2, #33	@ 0x21
 801322e:	2104      	movs	r1, #4
 8013230:	4620      	mov	r0, r4
 8013232:	f000 fdeb 	bl	8013e0c <_calloc_r>
 8013236:	69e3      	ldr	r3, [r4, #28]
 8013238:	60f0      	str	r0, [r6, #12]
 801323a:	68db      	ldr	r3, [r3, #12]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d1e4      	bne.n	801320a <_Balloc+0x2e>
 8013240:	2000      	movs	r0, #0
 8013242:	bd70      	pop	{r4, r5, r6, pc}
 8013244:	6802      	ldr	r2, [r0, #0]
 8013246:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801324a:	2300      	movs	r3, #0
 801324c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013250:	e7f7      	b.n	8013242 <_Balloc+0x66>
 8013252:	bf00      	nop
 8013254:	08015fd1 	.word	0x08015fd1
 8013258:	08016051 	.word	0x08016051

0801325c <_Bfree>:
 801325c:	b570      	push	{r4, r5, r6, lr}
 801325e:	69c6      	ldr	r6, [r0, #28]
 8013260:	4605      	mov	r5, r0
 8013262:	460c      	mov	r4, r1
 8013264:	b976      	cbnz	r6, 8013284 <_Bfree+0x28>
 8013266:	2010      	movs	r0, #16
 8013268:	f7fe f960 	bl	801152c <malloc>
 801326c:	4602      	mov	r2, r0
 801326e:	61e8      	str	r0, [r5, #28]
 8013270:	b920      	cbnz	r0, 801327c <_Bfree+0x20>
 8013272:	4b09      	ldr	r3, [pc, #36]	@ (8013298 <_Bfree+0x3c>)
 8013274:	4809      	ldr	r0, [pc, #36]	@ (801329c <_Bfree+0x40>)
 8013276:	218f      	movs	r1, #143	@ 0x8f
 8013278:	f000 fdaa 	bl	8013dd0 <__assert_func>
 801327c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013280:	6006      	str	r6, [r0, #0]
 8013282:	60c6      	str	r6, [r0, #12]
 8013284:	b13c      	cbz	r4, 8013296 <_Bfree+0x3a>
 8013286:	69eb      	ldr	r3, [r5, #28]
 8013288:	6862      	ldr	r2, [r4, #4]
 801328a:	68db      	ldr	r3, [r3, #12]
 801328c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013290:	6021      	str	r1, [r4, #0]
 8013292:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013296:	bd70      	pop	{r4, r5, r6, pc}
 8013298:	08015fd1 	.word	0x08015fd1
 801329c:	08016051 	.word	0x08016051

080132a0 <__multadd>:
 80132a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132a4:	690d      	ldr	r5, [r1, #16]
 80132a6:	4607      	mov	r7, r0
 80132a8:	460c      	mov	r4, r1
 80132aa:	461e      	mov	r6, r3
 80132ac:	f101 0c14 	add.w	ip, r1, #20
 80132b0:	2000      	movs	r0, #0
 80132b2:	f8dc 3000 	ldr.w	r3, [ip]
 80132b6:	b299      	uxth	r1, r3
 80132b8:	fb02 6101 	mla	r1, r2, r1, r6
 80132bc:	0c1e      	lsrs	r6, r3, #16
 80132be:	0c0b      	lsrs	r3, r1, #16
 80132c0:	fb02 3306 	mla	r3, r2, r6, r3
 80132c4:	b289      	uxth	r1, r1
 80132c6:	3001      	adds	r0, #1
 80132c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80132cc:	4285      	cmp	r5, r0
 80132ce:	f84c 1b04 	str.w	r1, [ip], #4
 80132d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80132d6:	dcec      	bgt.n	80132b2 <__multadd+0x12>
 80132d8:	b30e      	cbz	r6, 801331e <__multadd+0x7e>
 80132da:	68a3      	ldr	r3, [r4, #8]
 80132dc:	42ab      	cmp	r3, r5
 80132de:	dc19      	bgt.n	8013314 <__multadd+0x74>
 80132e0:	6861      	ldr	r1, [r4, #4]
 80132e2:	4638      	mov	r0, r7
 80132e4:	3101      	adds	r1, #1
 80132e6:	f7ff ff79 	bl	80131dc <_Balloc>
 80132ea:	4680      	mov	r8, r0
 80132ec:	b928      	cbnz	r0, 80132fa <__multadd+0x5a>
 80132ee:	4602      	mov	r2, r0
 80132f0:	4b0c      	ldr	r3, [pc, #48]	@ (8013324 <__multadd+0x84>)
 80132f2:	480d      	ldr	r0, [pc, #52]	@ (8013328 <__multadd+0x88>)
 80132f4:	21ba      	movs	r1, #186	@ 0xba
 80132f6:	f000 fd6b 	bl	8013dd0 <__assert_func>
 80132fa:	6922      	ldr	r2, [r4, #16]
 80132fc:	3202      	adds	r2, #2
 80132fe:	f104 010c 	add.w	r1, r4, #12
 8013302:	0092      	lsls	r2, r2, #2
 8013304:	300c      	adds	r0, #12
 8013306:	f000 fd55 	bl	8013db4 <memcpy>
 801330a:	4621      	mov	r1, r4
 801330c:	4638      	mov	r0, r7
 801330e:	f7ff ffa5 	bl	801325c <_Bfree>
 8013312:	4644      	mov	r4, r8
 8013314:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013318:	3501      	adds	r5, #1
 801331a:	615e      	str	r6, [r3, #20]
 801331c:	6125      	str	r5, [r4, #16]
 801331e:	4620      	mov	r0, r4
 8013320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013324:	08016040 	.word	0x08016040
 8013328:	08016051 	.word	0x08016051

0801332c <__hi0bits>:
 801332c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013330:	4603      	mov	r3, r0
 8013332:	bf36      	itet	cc
 8013334:	0403      	lslcc	r3, r0, #16
 8013336:	2000      	movcs	r0, #0
 8013338:	2010      	movcc	r0, #16
 801333a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801333e:	bf3c      	itt	cc
 8013340:	021b      	lslcc	r3, r3, #8
 8013342:	3008      	addcc	r0, #8
 8013344:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013348:	bf3c      	itt	cc
 801334a:	011b      	lslcc	r3, r3, #4
 801334c:	3004      	addcc	r0, #4
 801334e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013352:	bf3c      	itt	cc
 8013354:	009b      	lslcc	r3, r3, #2
 8013356:	3002      	addcc	r0, #2
 8013358:	2b00      	cmp	r3, #0
 801335a:	db05      	blt.n	8013368 <__hi0bits+0x3c>
 801335c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013360:	f100 0001 	add.w	r0, r0, #1
 8013364:	bf08      	it	eq
 8013366:	2020      	moveq	r0, #32
 8013368:	4770      	bx	lr

0801336a <__lo0bits>:
 801336a:	6803      	ldr	r3, [r0, #0]
 801336c:	4602      	mov	r2, r0
 801336e:	f013 0007 	ands.w	r0, r3, #7
 8013372:	d00b      	beq.n	801338c <__lo0bits+0x22>
 8013374:	07d9      	lsls	r1, r3, #31
 8013376:	d421      	bmi.n	80133bc <__lo0bits+0x52>
 8013378:	0798      	lsls	r0, r3, #30
 801337a:	bf49      	itett	mi
 801337c:	085b      	lsrmi	r3, r3, #1
 801337e:	089b      	lsrpl	r3, r3, #2
 8013380:	2001      	movmi	r0, #1
 8013382:	6013      	strmi	r3, [r2, #0]
 8013384:	bf5c      	itt	pl
 8013386:	6013      	strpl	r3, [r2, #0]
 8013388:	2002      	movpl	r0, #2
 801338a:	4770      	bx	lr
 801338c:	b299      	uxth	r1, r3
 801338e:	b909      	cbnz	r1, 8013394 <__lo0bits+0x2a>
 8013390:	0c1b      	lsrs	r3, r3, #16
 8013392:	2010      	movs	r0, #16
 8013394:	b2d9      	uxtb	r1, r3
 8013396:	b909      	cbnz	r1, 801339c <__lo0bits+0x32>
 8013398:	3008      	adds	r0, #8
 801339a:	0a1b      	lsrs	r3, r3, #8
 801339c:	0719      	lsls	r1, r3, #28
 801339e:	bf04      	itt	eq
 80133a0:	091b      	lsreq	r3, r3, #4
 80133a2:	3004      	addeq	r0, #4
 80133a4:	0799      	lsls	r1, r3, #30
 80133a6:	bf04      	itt	eq
 80133a8:	089b      	lsreq	r3, r3, #2
 80133aa:	3002      	addeq	r0, #2
 80133ac:	07d9      	lsls	r1, r3, #31
 80133ae:	d403      	bmi.n	80133b8 <__lo0bits+0x4e>
 80133b0:	085b      	lsrs	r3, r3, #1
 80133b2:	f100 0001 	add.w	r0, r0, #1
 80133b6:	d003      	beq.n	80133c0 <__lo0bits+0x56>
 80133b8:	6013      	str	r3, [r2, #0]
 80133ba:	4770      	bx	lr
 80133bc:	2000      	movs	r0, #0
 80133be:	4770      	bx	lr
 80133c0:	2020      	movs	r0, #32
 80133c2:	4770      	bx	lr

080133c4 <__i2b>:
 80133c4:	b510      	push	{r4, lr}
 80133c6:	460c      	mov	r4, r1
 80133c8:	2101      	movs	r1, #1
 80133ca:	f7ff ff07 	bl	80131dc <_Balloc>
 80133ce:	4602      	mov	r2, r0
 80133d0:	b928      	cbnz	r0, 80133de <__i2b+0x1a>
 80133d2:	4b05      	ldr	r3, [pc, #20]	@ (80133e8 <__i2b+0x24>)
 80133d4:	4805      	ldr	r0, [pc, #20]	@ (80133ec <__i2b+0x28>)
 80133d6:	f240 1145 	movw	r1, #325	@ 0x145
 80133da:	f000 fcf9 	bl	8013dd0 <__assert_func>
 80133de:	2301      	movs	r3, #1
 80133e0:	6144      	str	r4, [r0, #20]
 80133e2:	6103      	str	r3, [r0, #16]
 80133e4:	bd10      	pop	{r4, pc}
 80133e6:	bf00      	nop
 80133e8:	08016040 	.word	0x08016040
 80133ec:	08016051 	.word	0x08016051

080133f0 <__multiply>:
 80133f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133f4:	4617      	mov	r7, r2
 80133f6:	690a      	ldr	r2, [r1, #16]
 80133f8:	693b      	ldr	r3, [r7, #16]
 80133fa:	429a      	cmp	r2, r3
 80133fc:	bfa8      	it	ge
 80133fe:	463b      	movge	r3, r7
 8013400:	4689      	mov	r9, r1
 8013402:	bfa4      	itt	ge
 8013404:	460f      	movge	r7, r1
 8013406:	4699      	movge	r9, r3
 8013408:	693d      	ldr	r5, [r7, #16]
 801340a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801340e:	68bb      	ldr	r3, [r7, #8]
 8013410:	6879      	ldr	r1, [r7, #4]
 8013412:	eb05 060a 	add.w	r6, r5, sl
 8013416:	42b3      	cmp	r3, r6
 8013418:	b085      	sub	sp, #20
 801341a:	bfb8      	it	lt
 801341c:	3101      	addlt	r1, #1
 801341e:	f7ff fedd 	bl	80131dc <_Balloc>
 8013422:	b930      	cbnz	r0, 8013432 <__multiply+0x42>
 8013424:	4602      	mov	r2, r0
 8013426:	4b41      	ldr	r3, [pc, #260]	@ (801352c <__multiply+0x13c>)
 8013428:	4841      	ldr	r0, [pc, #260]	@ (8013530 <__multiply+0x140>)
 801342a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801342e:	f000 fccf 	bl	8013dd0 <__assert_func>
 8013432:	f100 0414 	add.w	r4, r0, #20
 8013436:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801343a:	4623      	mov	r3, r4
 801343c:	2200      	movs	r2, #0
 801343e:	4573      	cmp	r3, lr
 8013440:	d320      	bcc.n	8013484 <__multiply+0x94>
 8013442:	f107 0814 	add.w	r8, r7, #20
 8013446:	f109 0114 	add.w	r1, r9, #20
 801344a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801344e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8013452:	9302      	str	r3, [sp, #8]
 8013454:	1beb      	subs	r3, r5, r7
 8013456:	3b15      	subs	r3, #21
 8013458:	f023 0303 	bic.w	r3, r3, #3
 801345c:	3304      	adds	r3, #4
 801345e:	3715      	adds	r7, #21
 8013460:	42bd      	cmp	r5, r7
 8013462:	bf38      	it	cc
 8013464:	2304      	movcc	r3, #4
 8013466:	9301      	str	r3, [sp, #4]
 8013468:	9b02      	ldr	r3, [sp, #8]
 801346a:	9103      	str	r1, [sp, #12]
 801346c:	428b      	cmp	r3, r1
 801346e:	d80c      	bhi.n	801348a <__multiply+0x9a>
 8013470:	2e00      	cmp	r6, #0
 8013472:	dd03      	ble.n	801347c <__multiply+0x8c>
 8013474:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013478:	2b00      	cmp	r3, #0
 801347a:	d055      	beq.n	8013528 <__multiply+0x138>
 801347c:	6106      	str	r6, [r0, #16]
 801347e:	b005      	add	sp, #20
 8013480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013484:	f843 2b04 	str.w	r2, [r3], #4
 8013488:	e7d9      	b.n	801343e <__multiply+0x4e>
 801348a:	f8b1 a000 	ldrh.w	sl, [r1]
 801348e:	f1ba 0f00 	cmp.w	sl, #0
 8013492:	d01f      	beq.n	80134d4 <__multiply+0xe4>
 8013494:	46c4      	mov	ip, r8
 8013496:	46a1      	mov	r9, r4
 8013498:	2700      	movs	r7, #0
 801349a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801349e:	f8d9 3000 	ldr.w	r3, [r9]
 80134a2:	fa1f fb82 	uxth.w	fp, r2
 80134a6:	b29b      	uxth	r3, r3
 80134a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80134ac:	443b      	add	r3, r7
 80134ae:	f8d9 7000 	ldr.w	r7, [r9]
 80134b2:	0c12      	lsrs	r2, r2, #16
 80134b4:	0c3f      	lsrs	r7, r7, #16
 80134b6:	fb0a 7202 	mla	r2, sl, r2, r7
 80134ba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80134be:	b29b      	uxth	r3, r3
 80134c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80134c4:	4565      	cmp	r5, ip
 80134c6:	f849 3b04 	str.w	r3, [r9], #4
 80134ca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80134ce:	d8e4      	bhi.n	801349a <__multiply+0xaa>
 80134d0:	9b01      	ldr	r3, [sp, #4]
 80134d2:	50e7      	str	r7, [r4, r3]
 80134d4:	9b03      	ldr	r3, [sp, #12]
 80134d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80134da:	3104      	adds	r1, #4
 80134dc:	f1b9 0f00 	cmp.w	r9, #0
 80134e0:	d020      	beq.n	8013524 <__multiply+0x134>
 80134e2:	6823      	ldr	r3, [r4, #0]
 80134e4:	4647      	mov	r7, r8
 80134e6:	46a4      	mov	ip, r4
 80134e8:	f04f 0a00 	mov.w	sl, #0
 80134ec:	f8b7 b000 	ldrh.w	fp, [r7]
 80134f0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80134f4:	fb09 220b 	mla	r2, r9, fp, r2
 80134f8:	4452      	add	r2, sl
 80134fa:	b29b      	uxth	r3, r3
 80134fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013500:	f84c 3b04 	str.w	r3, [ip], #4
 8013504:	f857 3b04 	ldr.w	r3, [r7], #4
 8013508:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801350c:	f8bc 3000 	ldrh.w	r3, [ip]
 8013510:	fb09 330a 	mla	r3, r9, sl, r3
 8013514:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8013518:	42bd      	cmp	r5, r7
 801351a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801351e:	d8e5      	bhi.n	80134ec <__multiply+0xfc>
 8013520:	9a01      	ldr	r2, [sp, #4]
 8013522:	50a3      	str	r3, [r4, r2]
 8013524:	3404      	adds	r4, #4
 8013526:	e79f      	b.n	8013468 <__multiply+0x78>
 8013528:	3e01      	subs	r6, #1
 801352a:	e7a1      	b.n	8013470 <__multiply+0x80>
 801352c:	08016040 	.word	0x08016040
 8013530:	08016051 	.word	0x08016051

08013534 <__pow5mult>:
 8013534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013538:	4615      	mov	r5, r2
 801353a:	f012 0203 	ands.w	r2, r2, #3
 801353e:	4607      	mov	r7, r0
 8013540:	460e      	mov	r6, r1
 8013542:	d007      	beq.n	8013554 <__pow5mult+0x20>
 8013544:	4c25      	ldr	r4, [pc, #148]	@ (80135dc <__pow5mult+0xa8>)
 8013546:	3a01      	subs	r2, #1
 8013548:	2300      	movs	r3, #0
 801354a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801354e:	f7ff fea7 	bl	80132a0 <__multadd>
 8013552:	4606      	mov	r6, r0
 8013554:	10ad      	asrs	r5, r5, #2
 8013556:	d03d      	beq.n	80135d4 <__pow5mult+0xa0>
 8013558:	69fc      	ldr	r4, [r7, #28]
 801355a:	b97c      	cbnz	r4, 801357c <__pow5mult+0x48>
 801355c:	2010      	movs	r0, #16
 801355e:	f7fd ffe5 	bl	801152c <malloc>
 8013562:	4602      	mov	r2, r0
 8013564:	61f8      	str	r0, [r7, #28]
 8013566:	b928      	cbnz	r0, 8013574 <__pow5mult+0x40>
 8013568:	4b1d      	ldr	r3, [pc, #116]	@ (80135e0 <__pow5mult+0xac>)
 801356a:	481e      	ldr	r0, [pc, #120]	@ (80135e4 <__pow5mult+0xb0>)
 801356c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013570:	f000 fc2e 	bl	8013dd0 <__assert_func>
 8013574:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013578:	6004      	str	r4, [r0, #0]
 801357a:	60c4      	str	r4, [r0, #12]
 801357c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013580:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013584:	b94c      	cbnz	r4, 801359a <__pow5mult+0x66>
 8013586:	f240 2171 	movw	r1, #625	@ 0x271
 801358a:	4638      	mov	r0, r7
 801358c:	f7ff ff1a 	bl	80133c4 <__i2b>
 8013590:	2300      	movs	r3, #0
 8013592:	f8c8 0008 	str.w	r0, [r8, #8]
 8013596:	4604      	mov	r4, r0
 8013598:	6003      	str	r3, [r0, #0]
 801359a:	f04f 0900 	mov.w	r9, #0
 801359e:	07eb      	lsls	r3, r5, #31
 80135a0:	d50a      	bpl.n	80135b8 <__pow5mult+0x84>
 80135a2:	4631      	mov	r1, r6
 80135a4:	4622      	mov	r2, r4
 80135a6:	4638      	mov	r0, r7
 80135a8:	f7ff ff22 	bl	80133f0 <__multiply>
 80135ac:	4631      	mov	r1, r6
 80135ae:	4680      	mov	r8, r0
 80135b0:	4638      	mov	r0, r7
 80135b2:	f7ff fe53 	bl	801325c <_Bfree>
 80135b6:	4646      	mov	r6, r8
 80135b8:	106d      	asrs	r5, r5, #1
 80135ba:	d00b      	beq.n	80135d4 <__pow5mult+0xa0>
 80135bc:	6820      	ldr	r0, [r4, #0]
 80135be:	b938      	cbnz	r0, 80135d0 <__pow5mult+0x9c>
 80135c0:	4622      	mov	r2, r4
 80135c2:	4621      	mov	r1, r4
 80135c4:	4638      	mov	r0, r7
 80135c6:	f7ff ff13 	bl	80133f0 <__multiply>
 80135ca:	6020      	str	r0, [r4, #0]
 80135cc:	f8c0 9000 	str.w	r9, [r0]
 80135d0:	4604      	mov	r4, r0
 80135d2:	e7e4      	b.n	801359e <__pow5mult+0x6a>
 80135d4:	4630      	mov	r0, r6
 80135d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135da:	bf00      	nop
 80135dc:	08016104 	.word	0x08016104
 80135e0:	08015fd1 	.word	0x08015fd1
 80135e4:	08016051 	.word	0x08016051

080135e8 <__lshift>:
 80135e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135ec:	460c      	mov	r4, r1
 80135ee:	6849      	ldr	r1, [r1, #4]
 80135f0:	6923      	ldr	r3, [r4, #16]
 80135f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80135f6:	68a3      	ldr	r3, [r4, #8]
 80135f8:	4607      	mov	r7, r0
 80135fa:	4691      	mov	r9, r2
 80135fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013600:	f108 0601 	add.w	r6, r8, #1
 8013604:	42b3      	cmp	r3, r6
 8013606:	db0b      	blt.n	8013620 <__lshift+0x38>
 8013608:	4638      	mov	r0, r7
 801360a:	f7ff fde7 	bl	80131dc <_Balloc>
 801360e:	4605      	mov	r5, r0
 8013610:	b948      	cbnz	r0, 8013626 <__lshift+0x3e>
 8013612:	4602      	mov	r2, r0
 8013614:	4b28      	ldr	r3, [pc, #160]	@ (80136b8 <__lshift+0xd0>)
 8013616:	4829      	ldr	r0, [pc, #164]	@ (80136bc <__lshift+0xd4>)
 8013618:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801361c:	f000 fbd8 	bl	8013dd0 <__assert_func>
 8013620:	3101      	adds	r1, #1
 8013622:	005b      	lsls	r3, r3, #1
 8013624:	e7ee      	b.n	8013604 <__lshift+0x1c>
 8013626:	2300      	movs	r3, #0
 8013628:	f100 0114 	add.w	r1, r0, #20
 801362c:	f100 0210 	add.w	r2, r0, #16
 8013630:	4618      	mov	r0, r3
 8013632:	4553      	cmp	r3, sl
 8013634:	db33      	blt.n	801369e <__lshift+0xb6>
 8013636:	6920      	ldr	r0, [r4, #16]
 8013638:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801363c:	f104 0314 	add.w	r3, r4, #20
 8013640:	f019 091f 	ands.w	r9, r9, #31
 8013644:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013648:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801364c:	d02b      	beq.n	80136a6 <__lshift+0xbe>
 801364e:	f1c9 0e20 	rsb	lr, r9, #32
 8013652:	468a      	mov	sl, r1
 8013654:	2200      	movs	r2, #0
 8013656:	6818      	ldr	r0, [r3, #0]
 8013658:	fa00 f009 	lsl.w	r0, r0, r9
 801365c:	4310      	orrs	r0, r2
 801365e:	f84a 0b04 	str.w	r0, [sl], #4
 8013662:	f853 2b04 	ldr.w	r2, [r3], #4
 8013666:	459c      	cmp	ip, r3
 8013668:	fa22 f20e 	lsr.w	r2, r2, lr
 801366c:	d8f3      	bhi.n	8013656 <__lshift+0x6e>
 801366e:	ebac 0304 	sub.w	r3, ip, r4
 8013672:	3b15      	subs	r3, #21
 8013674:	f023 0303 	bic.w	r3, r3, #3
 8013678:	3304      	adds	r3, #4
 801367a:	f104 0015 	add.w	r0, r4, #21
 801367e:	4560      	cmp	r0, ip
 8013680:	bf88      	it	hi
 8013682:	2304      	movhi	r3, #4
 8013684:	50ca      	str	r2, [r1, r3]
 8013686:	b10a      	cbz	r2, 801368c <__lshift+0xa4>
 8013688:	f108 0602 	add.w	r6, r8, #2
 801368c:	3e01      	subs	r6, #1
 801368e:	4638      	mov	r0, r7
 8013690:	612e      	str	r6, [r5, #16]
 8013692:	4621      	mov	r1, r4
 8013694:	f7ff fde2 	bl	801325c <_Bfree>
 8013698:	4628      	mov	r0, r5
 801369a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801369e:	f842 0f04 	str.w	r0, [r2, #4]!
 80136a2:	3301      	adds	r3, #1
 80136a4:	e7c5      	b.n	8013632 <__lshift+0x4a>
 80136a6:	3904      	subs	r1, #4
 80136a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80136ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80136b0:	459c      	cmp	ip, r3
 80136b2:	d8f9      	bhi.n	80136a8 <__lshift+0xc0>
 80136b4:	e7ea      	b.n	801368c <__lshift+0xa4>
 80136b6:	bf00      	nop
 80136b8:	08016040 	.word	0x08016040
 80136bc:	08016051 	.word	0x08016051

080136c0 <__mcmp>:
 80136c0:	690a      	ldr	r2, [r1, #16]
 80136c2:	4603      	mov	r3, r0
 80136c4:	6900      	ldr	r0, [r0, #16]
 80136c6:	1a80      	subs	r0, r0, r2
 80136c8:	b530      	push	{r4, r5, lr}
 80136ca:	d10e      	bne.n	80136ea <__mcmp+0x2a>
 80136cc:	3314      	adds	r3, #20
 80136ce:	3114      	adds	r1, #20
 80136d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80136d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80136d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80136dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80136e0:	4295      	cmp	r5, r2
 80136e2:	d003      	beq.n	80136ec <__mcmp+0x2c>
 80136e4:	d205      	bcs.n	80136f2 <__mcmp+0x32>
 80136e6:	f04f 30ff 	mov.w	r0, #4294967295
 80136ea:	bd30      	pop	{r4, r5, pc}
 80136ec:	42a3      	cmp	r3, r4
 80136ee:	d3f3      	bcc.n	80136d8 <__mcmp+0x18>
 80136f0:	e7fb      	b.n	80136ea <__mcmp+0x2a>
 80136f2:	2001      	movs	r0, #1
 80136f4:	e7f9      	b.n	80136ea <__mcmp+0x2a>
	...

080136f8 <__mdiff>:
 80136f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136fc:	4689      	mov	r9, r1
 80136fe:	4606      	mov	r6, r0
 8013700:	4611      	mov	r1, r2
 8013702:	4648      	mov	r0, r9
 8013704:	4614      	mov	r4, r2
 8013706:	f7ff ffdb 	bl	80136c0 <__mcmp>
 801370a:	1e05      	subs	r5, r0, #0
 801370c:	d112      	bne.n	8013734 <__mdiff+0x3c>
 801370e:	4629      	mov	r1, r5
 8013710:	4630      	mov	r0, r6
 8013712:	f7ff fd63 	bl	80131dc <_Balloc>
 8013716:	4602      	mov	r2, r0
 8013718:	b928      	cbnz	r0, 8013726 <__mdiff+0x2e>
 801371a:	4b3f      	ldr	r3, [pc, #252]	@ (8013818 <__mdiff+0x120>)
 801371c:	f240 2137 	movw	r1, #567	@ 0x237
 8013720:	483e      	ldr	r0, [pc, #248]	@ (801381c <__mdiff+0x124>)
 8013722:	f000 fb55 	bl	8013dd0 <__assert_func>
 8013726:	2301      	movs	r3, #1
 8013728:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801372c:	4610      	mov	r0, r2
 801372e:	b003      	add	sp, #12
 8013730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013734:	bfbc      	itt	lt
 8013736:	464b      	movlt	r3, r9
 8013738:	46a1      	movlt	r9, r4
 801373a:	4630      	mov	r0, r6
 801373c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013740:	bfba      	itte	lt
 8013742:	461c      	movlt	r4, r3
 8013744:	2501      	movlt	r5, #1
 8013746:	2500      	movge	r5, #0
 8013748:	f7ff fd48 	bl	80131dc <_Balloc>
 801374c:	4602      	mov	r2, r0
 801374e:	b918      	cbnz	r0, 8013758 <__mdiff+0x60>
 8013750:	4b31      	ldr	r3, [pc, #196]	@ (8013818 <__mdiff+0x120>)
 8013752:	f240 2145 	movw	r1, #581	@ 0x245
 8013756:	e7e3      	b.n	8013720 <__mdiff+0x28>
 8013758:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801375c:	6926      	ldr	r6, [r4, #16]
 801375e:	60c5      	str	r5, [r0, #12]
 8013760:	f109 0310 	add.w	r3, r9, #16
 8013764:	f109 0514 	add.w	r5, r9, #20
 8013768:	f104 0e14 	add.w	lr, r4, #20
 801376c:	f100 0b14 	add.w	fp, r0, #20
 8013770:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013774:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013778:	9301      	str	r3, [sp, #4]
 801377a:	46d9      	mov	r9, fp
 801377c:	f04f 0c00 	mov.w	ip, #0
 8013780:	9b01      	ldr	r3, [sp, #4]
 8013782:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013786:	f853 af04 	ldr.w	sl, [r3, #4]!
 801378a:	9301      	str	r3, [sp, #4]
 801378c:	fa1f f38a 	uxth.w	r3, sl
 8013790:	4619      	mov	r1, r3
 8013792:	b283      	uxth	r3, r0
 8013794:	1acb      	subs	r3, r1, r3
 8013796:	0c00      	lsrs	r0, r0, #16
 8013798:	4463      	add	r3, ip
 801379a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801379e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80137a2:	b29b      	uxth	r3, r3
 80137a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80137a8:	4576      	cmp	r6, lr
 80137aa:	f849 3b04 	str.w	r3, [r9], #4
 80137ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80137b2:	d8e5      	bhi.n	8013780 <__mdiff+0x88>
 80137b4:	1b33      	subs	r3, r6, r4
 80137b6:	3b15      	subs	r3, #21
 80137b8:	f023 0303 	bic.w	r3, r3, #3
 80137bc:	3415      	adds	r4, #21
 80137be:	3304      	adds	r3, #4
 80137c0:	42a6      	cmp	r6, r4
 80137c2:	bf38      	it	cc
 80137c4:	2304      	movcc	r3, #4
 80137c6:	441d      	add	r5, r3
 80137c8:	445b      	add	r3, fp
 80137ca:	461e      	mov	r6, r3
 80137cc:	462c      	mov	r4, r5
 80137ce:	4544      	cmp	r4, r8
 80137d0:	d30e      	bcc.n	80137f0 <__mdiff+0xf8>
 80137d2:	f108 0103 	add.w	r1, r8, #3
 80137d6:	1b49      	subs	r1, r1, r5
 80137d8:	f021 0103 	bic.w	r1, r1, #3
 80137dc:	3d03      	subs	r5, #3
 80137de:	45a8      	cmp	r8, r5
 80137e0:	bf38      	it	cc
 80137e2:	2100      	movcc	r1, #0
 80137e4:	440b      	add	r3, r1
 80137e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80137ea:	b191      	cbz	r1, 8013812 <__mdiff+0x11a>
 80137ec:	6117      	str	r7, [r2, #16]
 80137ee:	e79d      	b.n	801372c <__mdiff+0x34>
 80137f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80137f4:	46e6      	mov	lr, ip
 80137f6:	0c08      	lsrs	r0, r1, #16
 80137f8:	fa1c fc81 	uxtah	ip, ip, r1
 80137fc:	4471      	add	r1, lr
 80137fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013802:	b289      	uxth	r1, r1
 8013804:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013808:	f846 1b04 	str.w	r1, [r6], #4
 801380c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013810:	e7dd      	b.n	80137ce <__mdiff+0xd6>
 8013812:	3f01      	subs	r7, #1
 8013814:	e7e7      	b.n	80137e6 <__mdiff+0xee>
 8013816:	bf00      	nop
 8013818:	08016040 	.word	0x08016040
 801381c:	08016051 	.word	0x08016051

08013820 <__d2b>:
 8013820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013824:	460f      	mov	r7, r1
 8013826:	2101      	movs	r1, #1
 8013828:	ec59 8b10 	vmov	r8, r9, d0
 801382c:	4616      	mov	r6, r2
 801382e:	f7ff fcd5 	bl	80131dc <_Balloc>
 8013832:	4604      	mov	r4, r0
 8013834:	b930      	cbnz	r0, 8013844 <__d2b+0x24>
 8013836:	4602      	mov	r2, r0
 8013838:	4b23      	ldr	r3, [pc, #140]	@ (80138c8 <__d2b+0xa8>)
 801383a:	4824      	ldr	r0, [pc, #144]	@ (80138cc <__d2b+0xac>)
 801383c:	f240 310f 	movw	r1, #783	@ 0x30f
 8013840:	f000 fac6 	bl	8013dd0 <__assert_func>
 8013844:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013848:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801384c:	b10d      	cbz	r5, 8013852 <__d2b+0x32>
 801384e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013852:	9301      	str	r3, [sp, #4]
 8013854:	f1b8 0300 	subs.w	r3, r8, #0
 8013858:	d023      	beq.n	80138a2 <__d2b+0x82>
 801385a:	4668      	mov	r0, sp
 801385c:	9300      	str	r3, [sp, #0]
 801385e:	f7ff fd84 	bl	801336a <__lo0bits>
 8013862:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013866:	b1d0      	cbz	r0, 801389e <__d2b+0x7e>
 8013868:	f1c0 0320 	rsb	r3, r0, #32
 801386c:	fa02 f303 	lsl.w	r3, r2, r3
 8013870:	430b      	orrs	r3, r1
 8013872:	40c2      	lsrs	r2, r0
 8013874:	6163      	str	r3, [r4, #20]
 8013876:	9201      	str	r2, [sp, #4]
 8013878:	9b01      	ldr	r3, [sp, #4]
 801387a:	61a3      	str	r3, [r4, #24]
 801387c:	2b00      	cmp	r3, #0
 801387e:	bf0c      	ite	eq
 8013880:	2201      	moveq	r2, #1
 8013882:	2202      	movne	r2, #2
 8013884:	6122      	str	r2, [r4, #16]
 8013886:	b1a5      	cbz	r5, 80138b2 <__d2b+0x92>
 8013888:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801388c:	4405      	add	r5, r0
 801388e:	603d      	str	r5, [r7, #0]
 8013890:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013894:	6030      	str	r0, [r6, #0]
 8013896:	4620      	mov	r0, r4
 8013898:	b003      	add	sp, #12
 801389a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801389e:	6161      	str	r1, [r4, #20]
 80138a0:	e7ea      	b.n	8013878 <__d2b+0x58>
 80138a2:	a801      	add	r0, sp, #4
 80138a4:	f7ff fd61 	bl	801336a <__lo0bits>
 80138a8:	9b01      	ldr	r3, [sp, #4]
 80138aa:	6163      	str	r3, [r4, #20]
 80138ac:	3020      	adds	r0, #32
 80138ae:	2201      	movs	r2, #1
 80138b0:	e7e8      	b.n	8013884 <__d2b+0x64>
 80138b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80138b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80138ba:	6038      	str	r0, [r7, #0]
 80138bc:	6918      	ldr	r0, [r3, #16]
 80138be:	f7ff fd35 	bl	801332c <__hi0bits>
 80138c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80138c6:	e7e5      	b.n	8013894 <__d2b+0x74>
 80138c8:	08016040 	.word	0x08016040
 80138cc:	08016051 	.word	0x08016051

080138d0 <__sfputc_r>:
 80138d0:	6893      	ldr	r3, [r2, #8]
 80138d2:	3b01      	subs	r3, #1
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	b410      	push	{r4}
 80138d8:	6093      	str	r3, [r2, #8]
 80138da:	da08      	bge.n	80138ee <__sfputc_r+0x1e>
 80138dc:	6994      	ldr	r4, [r2, #24]
 80138de:	42a3      	cmp	r3, r4
 80138e0:	db01      	blt.n	80138e6 <__sfputc_r+0x16>
 80138e2:	290a      	cmp	r1, #10
 80138e4:	d103      	bne.n	80138ee <__sfputc_r+0x1e>
 80138e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138ea:	f7fe bca0 	b.w	801222e <__swbuf_r>
 80138ee:	6813      	ldr	r3, [r2, #0]
 80138f0:	1c58      	adds	r0, r3, #1
 80138f2:	6010      	str	r0, [r2, #0]
 80138f4:	7019      	strb	r1, [r3, #0]
 80138f6:	4608      	mov	r0, r1
 80138f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138fc:	4770      	bx	lr

080138fe <__sfputs_r>:
 80138fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013900:	4606      	mov	r6, r0
 8013902:	460f      	mov	r7, r1
 8013904:	4614      	mov	r4, r2
 8013906:	18d5      	adds	r5, r2, r3
 8013908:	42ac      	cmp	r4, r5
 801390a:	d101      	bne.n	8013910 <__sfputs_r+0x12>
 801390c:	2000      	movs	r0, #0
 801390e:	e007      	b.n	8013920 <__sfputs_r+0x22>
 8013910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013914:	463a      	mov	r2, r7
 8013916:	4630      	mov	r0, r6
 8013918:	f7ff ffda 	bl	80138d0 <__sfputc_r>
 801391c:	1c43      	adds	r3, r0, #1
 801391e:	d1f3      	bne.n	8013908 <__sfputs_r+0xa>
 8013920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013924 <_vfiprintf_r>:
 8013924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013928:	460d      	mov	r5, r1
 801392a:	b09d      	sub	sp, #116	@ 0x74
 801392c:	4614      	mov	r4, r2
 801392e:	4698      	mov	r8, r3
 8013930:	4606      	mov	r6, r0
 8013932:	b118      	cbz	r0, 801393c <_vfiprintf_r+0x18>
 8013934:	6a03      	ldr	r3, [r0, #32]
 8013936:	b90b      	cbnz	r3, 801393c <_vfiprintf_r+0x18>
 8013938:	f7fe fb90 	bl	801205c <__sinit>
 801393c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801393e:	07d9      	lsls	r1, r3, #31
 8013940:	d405      	bmi.n	801394e <_vfiprintf_r+0x2a>
 8013942:	89ab      	ldrh	r3, [r5, #12]
 8013944:	059a      	lsls	r2, r3, #22
 8013946:	d402      	bmi.n	801394e <_vfiprintf_r+0x2a>
 8013948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801394a:	f7fe fda2 	bl	8012492 <__retarget_lock_acquire_recursive>
 801394e:	89ab      	ldrh	r3, [r5, #12]
 8013950:	071b      	lsls	r3, r3, #28
 8013952:	d501      	bpl.n	8013958 <_vfiprintf_r+0x34>
 8013954:	692b      	ldr	r3, [r5, #16]
 8013956:	b99b      	cbnz	r3, 8013980 <_vfiprintf_r+0x5c>
 8013958:	4629      	mov	r1, r5
 801395a:	4630      	mov	r0, r6
 801395c:	f7fe fca6 	bl	80122ac <__swsetup_r>
 8013960:	b170      	cbz	r0, 8013980 <_vfiprintf_r+0x5c>
 8013962:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013964:	07dc      	lsls	r4, r3, #31
 8013966:	d504      	bpl.n	8013972 <_vfiprintf_r+0x4e>
 8013968:	f04f 30ff 	mov.w	r0, #4294967295
 801396c:	b01d      	add	sp, #116	@ 0x74
 801396e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013972:	89ab      	ldrh	r3, [r5, #12]
 8013974:	0598      	lsls	r0, r3, #22
 8013976:	d4f7      	bmi.n	8013968 <_vfiprintf_r+0x44>
 8013978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801397a:	f7fe fd8b 	bl	8012494 <__retarget_lock_release_recursive>
 801397e:	e7f3      	b.n	8013968 <_vfiprintf_r+0x44>
 8013980:	2300      	movs	r3, #0
 8013982:	9309      	str	r3, [sp, #36]	@ 0x24
 8013984:	2320      	movs	r3, #32
 8013986:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801398a:	f8cd 800c 	str.w	r8, [sp, #12]
 801398e:	2330      	movs	r3, #48	@ 0x30
 8013990:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013b40 <_vfiprintf_r+0x21c>
 8013994:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013998:	f04f 0901 	mov.w	r9, #1
 801399c:	4623      	mov	r3, r4
 801399e:	469a      	mov	sl, r3
 80139a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80139a4:	b10a      	cbz	r2, 80139aa <_vfiprintf_r+0x86>
 80139a6:	2a25      	cmp	r2, #37	@ 0x25
 80139a8:	d1f9      	bne.n	801399e <_vfiprintf_r+0x7a>
 80139aa:	ebba 0b04 	subs.w	fp, sl, r4
 80139ae:	d00b      	beq.n	80139c8 <_vfiprintf_r+0xa4>
 80139b0:	465b      	mov	r3, fp
 80139b2:	4622      	mov	r2, r4
 80139b4:	4629      	mov	r1, r5
 80139b6:	4630      	mov	r0, r6
 80139b8:	f7ff ffa1 	bl	80138fe <__sfputs_r>
 80139bc:	3001      	adds	r0, #1
 80139be:	f000 80a7 	beq.w	8013b10 <_vfiprintf_r+0x1ec>
 80139c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80139c4:	445a      	add	r2, fp
 80139c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80139c8:	f89a 3000 	ldrb.w	r3, [sl]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	f000 809f 	beq.w	8013b10 <_vfiprintf_r+0x1ec>
 80139d2:	2300      	movs	r3, #0
 80139d4:	f04f 32ff 	mov.w	r2, #4294967295
 80139d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139dc:	f10a 0a01 	add.w	sl, sl, #1
 80139e0:	9304      	str	r3, [sp, #16]
 80139e2:	9307      	str	r3, [sp, #28]
 80139e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80139e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80139ea:	4654      	mov	r4, sl
 80139ec:	2205      	movs	r2, #5
 80139ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139f2:	4853      	ldr	r0, [pc, #332]	@ (8013b40 <_vfiprintf_r+0x21c>)
 80139f4:	f7ec fbec 	bl	80001d0 <memchr>
 80139f8:	9a04      	ldr	r2, [sp, #16]
 80139fa:	b9d8      	cbnz	r0, 8013a34 <_vfiprintf_r+0x110>
 80139fc:	06d1      	lsls	r1, r2, #27
 80139fe:	bf44      	itt	mi
 8013a00:	2320      	movmi	r3, #32
 8013a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013a06:	0713      	lsls	r3, r2, #28
 8013a08:	bf44      	itt	mi
 8013a0a:	232b      	movmi	r3, #43	@ 0x2b
 8013a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013a10:	f89a 3000 	ldrb.w	r3, [sl]
 8013a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8013a16:	d015      	beq.n	8013a44 <_vfiprintf_r+0x120>
 8013a18:	9a07      	ldr	r2, [sp, #28]
 8013a1a:	4654      	mov	r4, sl
 8013a1c:	2000      	movs	r0, #0
 8013a1e:	f04f 0c0a 	mov.w	ip, #10
 8013a22:	4621      	mov	r1, r4
 8013a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a28:	3b30      	subs	r3, #48	@ 0x30
 8013a2a:	2b09      	cmp	r3, #9
 8013a2c:	d94b      	bls.n	8013ac6 <_vfiprintf_r+0x1a2>
 8013a2e:	b1b0      	cbz	r0, 8013a5e <_vfiprintf_r+0x13a>
 8013a30:	9207      	str	r2, [sp, #28]
 8013a32:	e014      	b.n	8013a5e <_vfiprintf_r+0x13a>
 8013a34:	eba0 0308 	sub.w	r3, r0, r8
 8013a38:	fa09 f303 	lsl.w	r3, r9, r3
 8013a3c:	4313      	orrs	r3, r2
 8013a3e:	9304      	str	r3, [sp, #16]
 8013a40:	46a2      	mov	sl, r4
 8013a42:	e7d2      	b.n	80139ea <_vfiprintf_r+0xc6>
 8013a44:	9b03      	ldr	r3, [sp, #12]
 8013a46:	1d19      	adds	r1, r3, #4
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	9103      	str	r1, [sp, #12]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	bfbb      	ittet	lt
 8013a50:	425b      	neglt	r3, r3
 8013a52:	f042 0202 	orrlt.w	r2, r2, #2
 8013a56:	9307      	strge	r3, [sp, #28]
 8013a58:	9307      	strlt	r3, [sp, #28]
 8013a5a:	bfb8      	it	lt
 8013a5c:	9204      	strlt	r2, [sp, #16]
 8013a5e:	7823      	ldrb	r3, [r4, #0]
 8013a60:	2b2e      	cmp	r3, #46	@ 0x2e
 8013a62:	d10a      	bne.n	8013a7a <_vfiprintf_r+0x156>
 8013a64:	7863      	ldrb	r3, [r4, #1]
 8013a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8013a68:	d132      	bne.n	8013ad0 <_vfiprintf_r+0x1ac>
 8013a6a:	9b03      	ldr	r3, [sp, #12]
 8013a6c:	1d1a      	adds	r2, r3, #4
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	9203      	str	r2, [sp, #12]
 8013a72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013a76:	3402      	adds	r4, #2
 8013a78:	9305      	str	r3, [sp, #20]
 8013a7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013b50 <_vfiprintf_r+0x22c>
 8013a7e:	7821      	ldrb	r1, [r4, #0]
 8013a80:	2203      	movs	r2, #3
 8013a82:	4650      	mov	r0, sl
 8013a84:	f7ec fba4 	bl	80001d0 <memchr>
 8013a88:	b138      	cbz	r0, 8013a9a <_vfiprintf_r+0x176>
 8013a8a:	9b04      	ldr	r3, [sp, #16]
 8013a8c:	eba0 000a 	sub.w	r0, r0, sl
 8013a90:	2240      	movs	r2, #64	@ 0x40
 8013a92:	4082      	lsls	r2, r0
 8013a94:	4313      	orrs	r3, r2
 8013a96:	3401      	adds	r4, #1
 8013a98:	9304      	str	r3, [sp, #16]
 8013a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a9e:	4829      	ldr	r0, [pc, #164]	@ (8013b44 <_vfiprintf_r+0x220>)
 8013aa0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013aa4:	2206      	movs	r2, #6
 8013aa6:	f7ec fb93 	bl	80001d0 <memchr>
 8013aaa:	2800      	cmp	r0, #0
 8013aac:	d03f      	beq.n	8013b2e <_vfiprintf_r+0x20a>
 8013aae:	4b26      	ldr	r3, [pc, #152]	@ (8013b48 <_vfiprintf_r+0x224>)
 8013ab0:	bb1b      	cbnz	r3, 8013afa <_vfiprintf_r+0x1d6>
 8013ab2:	9b03      	ldr	r3, [sp, #12]
 8013ab4:	3307      	adds	r3, #7
 8013ab6:	f023 0307 	bic.w	r3, r3, #7
 8013aba:	3308      	adds	r3, #8
 8013abc:	9303      	str	r3, [sp, #12]
 8013abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ac0:	443b      	add	r3, r7
 8013ac2:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ac4:	e76a      	b.n	801399c <_vfiprintf_r+0x78>
 8013ac6:	fb0c 3202 	mla	r2, ip, r2, r3
 8013aca:	460c      	mov	r4, r1
 8013acc:	2001      	movs	r0, #1
 8013ace:	e7a8      	b.n	8013a22 <_vfiprintf_r+0xfe>
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	3401      	adds	r4, #1
 8013ad4:	9305      	str	r3, [sp, #20]
 8013ad6:	4619      	mov	r1, r3
 8013ad8:	f04f 0c0a 	mov.w	ip, #10
 8013adc:	4620      	mov	r0, r4
 8013ade:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ae2:	3a30      	subs	r2, #48	@ 0x30
 8013ae4:	2a09      	cmp	r2, #9
 8013ae6:	d903      	bls.n	8013af0 <_vfiprintf_r+0x1cc>
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d0c6      	beq.n	8013a7a <_vfiprintf_r+0x156>
 8013aec:	9105      	str	r1, [sp, #20]
 8013aee:	e7c4      	b.n	8013a7a <_vfiprintf_r+0x156>
 8013af0:	fb0c 2101 	mla	r1, ip, r1, r2
 8013af4:	4604      	mov	r4, r0
 8013af6:	2301      	movs	r3, #1
 8013af8:	e7f0      	b.n	8013adc <_vfiprintf_r+0x1b8>
 8013afa:	ab03      	add	r3, sp, #12
 8013afc:	9300      	str	r3, [sp, #0]
 8013afe:	462a      	mov	r2, r5
 8013b00:	4b12      	ldr	r3, [pc, #72]	@ (8013b4c <_vfiprintf_r+0x228>)
 8013b02:	a904      	add	r1, sp, #16
 8013b04:	4630      	mov	r0, r6
 8013b06:	f7fd fe67 	bl	80117d8 <_printf_float>
 8013b0a:	4607      	mov	r7, r0
 8013b0c:	1c78      	adds	r0, r7, #1
 8013b0e:	d1d6      	bne.n	8013abe <_vfiprintf_r+0x19a>
 8013b10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013b12:	07d9      	lsls	r1, r3, #31
 8013b14:	d405      	bmi.n	8013b22 <_vfiprintf_r+0x1fe>
 8013b16:	89ab      	ldrh	r3, [r5, #12]
 8013b18:	059a      	lsls	r2, r3, #22
 8013b1a:	d402      	bmi.n	8013b22 <_vfiprintf_r+0x1fe>
 8013b1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013b1e:	f7fe fcb9 	bl	8012494 <__retarget_lock_release_recursive>
 8013b22:	89ab      	ldrh	r3, [r5, #12]
 8013b24:	065b      	lsls	r3, r3, #25
 8013b26:	f53f af1f 	bmi.w	8013968 <_vfiprintf_r+0x44>
 8013b2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b2c:	e71e      	b.n	801396c <_vfiprintf_r+0x48>
 8013b2e:	ab03      	add	r3, sp, #12
 8013b30:	9300      	str	r3, [sp, #0]
 8013b32:	462a      	mov	r2, r5
 8013b34:	4b05      	ldr	r3, [pc, #20]	@ (8013b4c <_vfiprintf_r+0x228>)
 8013b36:	a904      	add	r1, sp, #16
 8013b38:	4630      	mov	r0, r6
 8013b3a:	f7fe f8e5 	bl	8011d08 <_printf_i>
 8013b3e:	e7e4      	b.n	8013b0a <_vfiprintf_r+0x1e6>
 8013b40:	080160aa 	.word	0x080160aa
 8013b44:	080160b4 	.word	0x080160b4
 8013b48:	080117d9 	.word	0x080117d9
 8013b4c:	080138ff 	.word	0x080138ff
 8013b50:	080160b0 	.word	0x080160b0

08013b54 <__sflush_r>:
 8013b54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b5c:	0716      	lsls	r6, r2, #28
 8013b5e:	4605      	mov	r5, r0
 8013b60:	460c      	mov	r4, r1
 8013b62:	d454      	bmi.n	8013c0e <__sflush_r+0xba>
 8013b64:	684b      	ldr	r3, [r1, #4]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	dc02      	bgt.n	8013b70 <__sflush_r+0x1c>
 8013b6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	dd48      	ble.n	8013c02 <__sflush_r+0xae>
 8013b70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013b72:	2e00      	cmp	r6, #0
 8013b74:	d045      	beq.n	8013c02 <__sflush_r+0xae>
 8013b76:	2300      	movs	r3, #0
 8013b78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013b7c:	682f      	ldr	r7, [r5, #0]
 8013b7e:	6a21      	ldr	r1, [r4, #32]
 8013b80:	602b      	str	r3, [r5, #0]
 8013b82:	d030      	beq.n	8013be6 <__sflush_r+0x92>
 8013b84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013b86:	89a3      	ldrh	r3, [r4, #12]
 8013b88:	0759      	lsls	r1, r3, #29
 8013b8a:	d505      	bpl.n	8013b98 <__sflush_r+0x44>
 8013b8c:	6863      	ldr	r3, [r4, #4]
 8013b8e:	1ad2      	subs	r2, r2, r3
 8013b90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013b92:	b10b      	cbz	r3, 8013b98 <__sflush_r+0x44>
 8013b94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013b96:	1ad2      	subs	r2, r2, r3
 8013b98:	2300      	movs	r3, #0
 8013b9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013b9c:	6a21      	ldr	r1, [r4, #32]
 8013b9e:	4628      	mov	r0, r5
 8013ba0:	47b0      	blx	r6
 8013ba2:	1c43      	adds	r3, r0, #1
 8013ba4:	89a3      	ldrh	r3, [r4, #12]
 8013ba6:	d106      	bne.n	8013bb6 <__sflush_r+0x62>
 8013ba8:	6829      	ldr	r1, [r5, #0]
 8013baa:	291d      	cmp	r1, #29
 8013bac:	d82b      	bhi.n	8013c06 <__sflush_r+0xb2>
 8013bae:	4a2a      	ldr	r2, [pc, #168]	@ (8013c58 <__sflush_r+0x104>)
 8013bb0:	40ca      	lsrs	r2, r1
 8013bb2:	07d6      	lsls	r6, r2, #31
 8013bb4:	d527      	bpl.n	8013c06 <__sflush_r+0xb2>
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	6062      	str	r2, [r4, #4]
 8013bba:	04d9      	lsls	r1, r3, #19
 8013bbc:	6922      	ldr	r2, [r4, #16]
 8013bbe:	6022      	str	r2, [r4, #0]
 8013bc0:	d504      	bpl.n	8013bcc <__sflush_r+0x78>
 8013bc2:	1c42      	adds	r2, r0, #1
 8013bc4:	d101      	bne.n	8013bca <__sflush_r+0x76>
 8013bc6:	682b      	ldr	r3, [r5, #0]
 8013bc8:	b903      	cbnz	r3, 8013bcc <__sflush_r+0x78>
 8013bca:	6560      	str	r0, [r4, #84]	@ 0x54
 8013bcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013bce:	602f      	str	r7, [r5, #0]
 8013bd0:	b1b9      	cbz	r1, 8013c02 <__sflush_r+0xae>
 8013bd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013bd6:	4299      	cmp	r1, r3
 8013bd8:	d002      	beq.n	8013be0 <__sflush_r+0x8c>
 8013bda:	4628      	mov	r0, r5
 8013bdc:	f7ff fab4 	bl	8013148 <_free_r>
 8013be0:	2300      	movs	r3, #0
 8013be2:	6363      	str	r3, [r4, #52]	@ 0x34
 8013be4:	e00d      	b.n	8013c02 <__sflush_r+0xae>
 8013be6:	2301      	movs	r3, #1
 8013be8:	4628      	mov	r0, r5
 8013bea:	47b0      	blx	r6
 8013bec:	4602      	mov	r2, r0
 8013bee:	1c50      	adds	r0, r2, #1
 8013bf0:	d1c9      	bne.n	8013b86 <__sflush_r+0x32>
 8013bf2:	682b      	ldr	r3, [r5, #0]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d0c6      	beq.n	8013b86 <__sflush_r+0x32>
 8013bf8:	2b1d      	cmp	r3, #29
 8013bfa:	d001      	beq.n	8013c00 <__sflush_r+0xac>
 8013bfc:	2b16      	cmp	r3, #22
 8013bfe:	d11e      	bne.n	8013c3e <__sflush_r+0xea>
 8013c00:	602f      	str	r7, [r5, #0]
 8013c02:	2000      	movs	r0, #0
 8013c04:	e022      	b.n	8013c4c <__sflush_r+0xf8>
 8013c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c0a:	b21b      	sxth	r3, r3
 8013c0c:	e01b      	b.n	8013c46 <__sflush_r+0xf2>
 8013c0e:	690f      	ldr	r7, [r1, #16]
 8013c10:	2f00      	cmp	r7, #0
 8013c12:	d0f6      	beq.n	8013c02 <__sflush_r+0xae>
 8013c14:	0793      	lsls	r3, r2, #30
 8013c16:	680e      	ldr	r6, [r1, #0]
 8013c18:	bf08      	it	eq
 8013c1a:	694b      	ldreq	r3, [r1, #20]
 8013c1c:	600f      	str	r7, [r1, #0]
 8013c1e:	bf18      	it	ne
 8013c20:	2300      	movne	r3, #0
 8013c22:	eba6 0807 	sub.w	r8, r6, r7
 8013c26:	608b      	str	r3, [r1, #8]
 8013c28:	f1b8 0f00 	cmp.w	r8, #0
 8013c2c:	dde9      	ble.n	8013c02 <__sflush_r+0xae>
 8013c2e:	6a21      	ldr	r1, [r4, #32]
 8013c30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013c32:	4643      	mov	r3, r8
 8013c34:	463a      	mov	r2, r7
 8013c36:	4628      	mov	r0, r5
 8013c38:	47b0      	blx	r6
 8013c3a:	2800      	cmp	r0, #0
 8013c3c:	dc08      	bgt.n	8013c50 <__sflush_r+0xfc>
 8013c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c46:	81a3      	strh	r3, [r4, #12]
 8013c48:	f04f 30ff 	mov.w	r0, #4294967295
 8013c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c50:	4407      	add	r7, r0
 8013c52:	eba8 0800 	sub.w	r8, r8, r0
 8013c56:	e7e7      	b.n	8013c28 <__sflush_r+0xd4>
 8013c58:	20400001 	.word	0x20400001

08013c5c <_fflush_r>:
 8013c5c:	b538      	push	{r3, r4, r5, lr}
 8013c5e:	690b      	ldr	r3, [r1, #16]
 8013c60:	4605      	mov	r5, r0
 8013c62:	460c      	mov	r4, r1
 8013c64:	b913      	cbnz	r3, 8013c6c <_fflush_r+0x10>
 8013c66:	2500      	movs	r5, #0
 8013c68:	4628      	mov	r0, r5
 8013c6a:	bd38      	pop	{r3, r4, r5, pc}
 8013c6c:	b118      	cbz	r0, 8013c76 <_fflush_r+0x1a>
 8013c6e:	6a03      	ldr	r3, [r0, #32]
 8013c70:	b90b      	cbnz	r3, 8013c76 <_fflush_r+0x1a>
 8013c72:	f7fe f9f3 	bl	801205c <__sinit>
 8013c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d0f3      	beq.n	8013c66 <_fflush_r+0xa>
 8013c7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013c80:	07d0      	lsls	r0, r2, #31
 8013c82:	d404      	bmi.n	8013c8e <_fflush_r+0x32>
 8013c84:	0599      	lsls	r1, r3, #22
 8013c86:	d402      	bmi.n	8013c8e <_fflush_r+0x32>
 8013c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013c8a:	f7fe fc02 	bl	8012492 <__retarget_lock_acquire_recursive>
 8013c8e:	4628      	mov	r0, r5
 8013c90:	4621      	mov	r1, r4
 8013c92:	f7ff ff5f 	bl	8013b54 <__sflush_r>
 8013c96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013c98:	07da      	lsls	r2, r3, #31
 8013c9a:	4605      	mov	r5, r0
 8013c9c:	d4e4      	bmi.n	8013c68 <_fflush_r+0xc>
 8013c9e:	89a3      	ldrh	r3, [r4, #12]
 8013ca0:	059b      	lsls	r3, r3, #22
 8013ca2:	d4e1      	bmi.n	8013c68 <_fflush_r+0xc>
 8013ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013ca6:	f7fe fbf5 	bl	8012494 <__retarget_lock_release_recursive>
 8013caa:	e7dd      	b.n	8013c68 <_fflush_r+0xc>

08013cac <__swhatbuf_r>:
 8013cac:	b570      	push	{r4, r5, r6, lr}
 8013cae:	460c      	mov	r4, r1
 8013cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cb4:	2900      	cmp	r1, #0
 8013cb6:	b096      	sub	sp, #88	@ 0x58
 8013cb8:	4615      	mov	r5, r2
 8013cba:	461e      	mov	r6, r3
 8013cbc:	da0d      	bge.n	8013cda <__swhatbuf_r+0x2e>
 8013cbe:	89a3      	ldrh	r3, [r4, #12]
 8013cc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013cc4:	f04f 0100 	mov.w	r1, #0
 8013cc8:	bf14      	ite	ne
 8013cca:	2340      	movne	r3, #64	@ 0x40
 8013ccc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013cd0:	2000      	movs	r0, #0
 8013cd2:	6031      	str	r1, [r6, #0]
 8013cd4:	602b      	str	r3, [r5, #0]
 8013cd6:	b016      	add	sp, #88	@ 0x58
 8013cd8:	bd70      	pop	{r4, r5, r6, pc}
 8013cda:	466a      	mov	r2, sp
 8013cdc:	f000 f848 	bl	8013d70 <_fstat_r>
 8013ce0:	2800      	cmp	r0, #0
 8013ce2:	dbec      	blt.n	8013cbe <__swhatbuf_r+0x12>
 8013ce4:	9901      	ldr	r1, [sp, #4]
 8013ce6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013cea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013cee:	4259      	negs	r1, r3
 8013cf0:	4159      	adcs	r1, r3
 8013cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013cf6:	e7eb      	b.n	8013cd0 <__swhatbuf_r+0x24>

08013cf8 <__smakebuf_r>:
 8013cf8:	898b      	ldrh	r3, [r1, #12]
 8013cfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013cfc:	079d      	lsls	r5, r3, #30
 8013cfe:	4606      	mov	r6, r0
 8013d00:	460c      	mov	r4, r1
 8013d02:	d507      	bpl.n	8013d14 <__smakebuf_r+0x1c>
 8013d04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013d08:	6023      	str	r3, [r4, #0]
 8013d0a:	6123      	str	r3, [r4, #16]
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	6163      	str	r3, [r4, #20]
 8013d10:	b003      	add	sp, #12
 8013d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d14:	ab01      	add	r3, sp, #4
 8013d16:	466a      	mov	r2, sp
 8013d18:	f7ff ffc8 	bl	8013cac <__swhatbuf_r>
 8013d1c:	9f00      	ldr	r7, [sp, #0]
 8013d1e:	4605      	mov	r5, r0
 8013d20:	4639      	mov	r1, r7
 8013d22:	4630      	mov	r0, r6
 8013d24:	f7fd fc2c 	bl	8011580 <_malloc_r>
 8013d28:	b948      	cbnz	r0, 8013d3e <__smakebuf_r+0x46>
 8013d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d2e:	059a      	lsls	r2, r3, #22
 8013d30:	d4ee      	bmi.n	8013d10 <__smakebuf_r+0x18>
 8013d32:	f023 0303 	bic.w	r3, r3, #3
 8013d36:	f043 0302 	orr.w	r3, r3, #2
 8013d3a:	81a3      	strh	r3, [r4, #12]
 8013d3c:	e7e2      	b.n	8013d04 <__smakebuf_r+0xc>
 8013d3e:	89a3      	ldrh	r3, [r4, #12]
 8013d40:	6020      	str	r0, [r4, #0]
 8013d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d46:	81a3      	strh	r3, [r4, #12]
 8013d48:	9b01      	ldr	r3, [sp, #4]
 8013d4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013d4e:	b15b      	cbz	r3, 8013d68 <__smakebuf_r+0x70>
 8013d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d54:	4630      	mov	r0, r6
 8013d56:	f000 f81d 	bl	8013d94 <_isatty_r>
 8013d5a:	b128      	cbz	r0, 8013d68 <__smakebuf_r+0x70>
 8013d5c:	89a3      	ldrh	r3, [r4, #12]
 8013d5e:	f023 0303 	bic.w	r3, r3, #3
 8013d62:	f043 0301 	orr.w	r3, r3, #1
 8013d66:	81a3      	strh	r3, [r4, #12]
 8013d68:	89a3      	ldrh	r3, [r4, #12]
 8013d6a:	431d      	orrs	r5, r3
 8013d6c:	81a5      	strh	r5, [r4, #12]
 8013d6e:	e7cf      	b.n	8013d10 <__smakebuf_r+0x18>

08013d70 <_fstat_r>:
 8013d70:	b538      	push	{r3, r4, r5, lr}
 8013d72:	4d07      	ldr	r5, [pc, #28]	@ (8013d90 <_fstat_r+0x20>)
 8013d74:	2300      	movs	r3, #0
 8013d76:	4604      	mov	r4, r0
 8013d78:	4608      	mov	r0, r1
 8013d7a:	4611      	mov	r1, r2
 8013d7c:	602b      	str	r3, [r5, #0]
 8013d7e:	f7f7 fcab 	bl	800b6d8 <_fstat>
 8013d82:	1c43      	adds	r3, r0, #1
 8013d84:	d102      	bne.n	8013d8c <_fstat_r+0x1c>
 8013d86:	682b      	ldr	r3, [r5, #0]
 8013d88:	b103      	cbz	r3, 8013d8c <_fstat_r+0x1c>
 8013d8a:	6023      	str	r3, [r4, #0]
 8013d8c:	bd38      	pop	{r3, r4, r5, pc}
 8013d8e:	bf00      	nop
 8013d90:	20000bd4 	.word	0x20000bd4

08013d94 <_isatty_r>:
 8013d94:	b538      	push	{r3, r4, r5, lr}
 8013d96:	4d06      	ldr	r5, [pc, #24]	@ (8013db0 <_isatty_r+0x1c>)
 8013d98:	2300      	movs	r3, #0
 8013d9a:	4604      	mov	r4, r0
 8013d9c:	4608      	mov	r0, r1
 8013d9e:	602b      	str	r3, [r5, #0]
 8013da0:	f7f7 fcaa 	bl	800b6f8 <_isatty>
 8013da4:	1c43      	adds	r3, r0, #1
 8013da6:	d102      	bne.n	8013dae <_isatty_r+0x1a>
 8013da8:	682b      	ldr	r3, [r5, #0]
 8013daa:	b103      	cbz	r3, 8013dae <_isatty_r+0x1a>
 8013dac:	6023      	str	r3, [r4, #0]
 8013dae:	bd38      	pop	{r3, r4, r5, pc}
 8013db0:	20000bd4 	.word	0x20000bd4

08013db4 <memcpy>:
 8013db4:	440a      	add	r2, r1
 8013db6:	4291      	cmp	r1, r2
 8013db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8013dbc:	d100      	bne.n	8013dc0 <memcpy+0xc>
 8013dbe:	4770      	bx	lr
 8013dc0:	b510      	push	{r4, lr}
 8013dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013dca:	4291      	cmp	r1, r2
 8013dcc:	d1f9      	bne.n	8013dc2 <memcpy+0xe>
 8013dce:	bd10      	pop	{r4, pc}

08013dd0 <__assert_func>:
 8013dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013dd2:	4614      	mov	r4, r2
 8013dd4:	461a      	mov	r2, r3
 8013dd6:	4b09      	ldr	r3, [pc, #36]	@ (8013dfc <__assert_func+0x2c>)
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	4605      	mov	r5, r0
 8013ddc:	68d8      	ldr	r0, [r3, #12]
 8013dde:	b14c      	cbz	r4, 8013df4 <__assert_func+0x24>
 8013de0:	4b07      	ldr	r3, [pc, #28]	@ (8013e00 <__assert_func+0x30>)
 8013de2:	9100      	str	r1, [sp, #0]
 8013de4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013de8:	4906      	ldr	r1, [pc, #24]	@ (8013e04 <__assert_func+0x34>)
 8013dea:	462b      	mov	r3, r5
 8013dec:	f000 f842 	bl	8013e74 <fiprintf>
 8013df0:	f000 f852 	bl	8013e98 <abort>
 8013df4:	4b04      	ldr	r3, [pc, #16]	@ (8013e08 <__assert_func+0x38>)
 8013df6:	461c      	mov	r4, r3
 8013df8:	e7f3      	b.n	8013de2 <__assert_func+0x12>
 8013dfa:	bf00      	nop
 8013dfc:	200000f0 	.word	0x200000f0
 8013e00:	080160c5 	.word	0x080160c5
 8013e04:	080160d2 	.word	0x080160d2
 8013e08:	08016100 	.word	0x08016100

08013e0c <_calloc_r>:
 8013e0c:	b570      	push	{r4, r5, r6, lr}
 8013e0e:	fba1 5402 	umull	r5, r4, r1, r2
 8013e12:	b934      	cbnz	r4, 8013e22 <_calloc_r+0x16>
 8013e14:	4629      	mov	r1, r5
 8013e16:	f7fd fbb3 	bl	8011580 <_malloc_r>
 8013e1a:	4606      	mov	r6, r0
 8013e1c:	b928      	cbnz	r0, 8013e2a <_calloc_r+0x1e>
 8013e1e:	4630      	mov	r0, r6
 8013e20:	bd70      	pop	{r4, r5, r6, pc}
 8013e22:	220c      	movs	r2, #12
 8013e24:	6002      	str	r2, [r0, #0]
 8013e26:	2600      	movs	r6, #0
 8013e28:	e7f9      	b.n	8013e1e <_calloc_r+0x12>
 8013e2a:	462a      	mov	r2, r5
 8013e2c:	4621      	mov	r1, r4
 8013e2e:	f7fe faa3 	bl	8012378 <memset>
 8013e32:	e7f4      	b.n	8013e1e <_calloc_r+0x12>

08013e34 <__ascii_mbtowc>:
 8013e34:	b082      	sub	sp, #8
 8013e36:	b901      	cbnz	r1, 8013e3a <__ascii_mbtowc+0x6>
 8013e38:	a901      	add	r1, sp, #4
 8013e3a:	b142      	cbz	r2, 8013e4e <__ascii_mbtowc+0x1a>
 8013e3c:	b14b      	cbz	r3, 8013e52 <__ascii_mbtowc+0x1e>
 8013e3e:	7813      	ldrb	r3, [r2, #0]
 8013e40:	600b      	str	r3, [r1, #0]
 8013e42:	7812      	ldrb	r2, [r2, #0]
 8013e44:	1e10      	subs	r0, r2, #0
 8013e46:	bf18      	it	ne
 8013e48:	2001      	movne	r0, #1
 8013e4a:	b002      	add	sp, #8
 8013e4c:	4770      	bx	lr
 8013e4e:	4610      	mov	r0, r2
 8013e50:	e7fb      	b.n	8013e4a <__ascii_mbtowc+0x16>
 8013e52:	f06f 0001 	mvn.w	r0, #1
 8013e56:	e7f8      	b.n	8013e4a <__ascii_mbtowc+0x16>

08013e58 <__ascii_wctomb>:
 8013e58:	4603      	mov	r3, r0
 8013e5a:	4608      	mov	r0, r1
 8013e5c:	b141      	cbz	r1, 8013e70 <__ascii_wctomb+0x18>
 8013e5e:	2aff      	cmp	r2, #255	@ 0xff
 8013e60:	d904      	bls.n	8013e6c <__ascii_wctomb+0x14>
 8013e62:	228a      	movs	r2, #138	@ 0x8a
 8013e64:	601a      	str	r2, [r3, #0]
 8013e66:	f04f 30ff 	mov.w	r0, #4294967295
 8013e6a:	4770      	bx	lr
 8013e6c:	700a      	strb	r2, [r1, #0]
 8013e6e:	2001      	movs	r0, #1
 8013e70:	4770      	bx	lr
	...

08013e74 <fiprintf>:
 8013e74:	b40e      	push	{r1, r2, r3}
 8013e76:	b503      	push	{r0, r1, lr}
 8013e78:	4601      	mov	r1, r0
 8013e7a:	ab03      	add	r3, sp, #12
 8013e7c:	4805      	ldr	r0, [pc, #20]	@ (8013e94 <fiprintf+0x20>)
 8013e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e82:	6800      	ldr	r0, [r0, #0]
 8013e84:	9301      	str	r3, [sp, #4]
 8013e86:	f7ff fd4d 	bl	8013924 <_vfiprintf_r>
 8013e8a:	b002      	add	sp, #8
 8013e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e90:	b003      	add	sp, #12
 8013e92:	4770      	bx	lr
 8013e94:	200000f0 	.word	0x200000f0

08013e98 <abort>:
 8013e98:	b508      	push	{r3, lr}
 8013e9a:	2006      	movs	r0, #6
 8013e9c:	f000 f82c 	bl	8013ef8 <raise>
 8013ea0:	2001      	movs	r0, #1
 8013ea2:	f7f7 fbc9 	bl	800b638 <_exit>

08013ea6 <_raise_r>:
 8013ea6:	291f      	cmp	r1, #31
 8013ea8:	b538      	push	{r3, r4, r5, lr}
 8013eaa:	4605      	mov	r5, r0
 8013eac:	460c      	mov	r4, r1
 8013eae:	d904      	bls.n	8013eba <_raise_r+0x14>
 8013eb0:	2316      	movs	r3, #22
 8013eb2:	6003      	str	r3, [r0, #0]
 8013eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8013eb8:	bd38      	pop	{r3, r4, r5, pc}
 8013eba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013ebc:	b112      	cbz	r2, 8013ec4 <_raise_r+0x1e>
 8013ebe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013ec2:	b94b      	cbnz	r3, 8013ed8 <_raise_r+0x32>
 8013ec4:	4628      	mov	r0, r5
 8013ec6:	f000 f831 	bl	8013f2c <_getpid_r>
 8013eca:	4622      	mov	r2, r4
 8013ecc:	4601      	mov	r1, r0
 8013ece:	4628      	mov	r0, r5
 8013ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ed4:	f000 b818 	b.w	8013f08 <_kill_r>
 8013ed8:	2b01      	cmp	r3, #1
 8013eda:	d00a      	beq.n	8013ef2 <_raise_r+0x4c>
 8013edc:	1c59      	adds	r1, r3, #1
 8013ede:	d103      	bne.n	8013ee8 <_raise_r+0x42>
 8013ee0:	2316      	movs	r3, #22
 8013ee2:	6003      	str	r3, [r0, #0]
 8013ee4:	2001      	movs	r0, #1
 8013ee6:	e7e7      	b.n	8013eb8 <_raise_r+0x12>
 8013ee8:	2100      	movs	r1, #0
 8013eea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013eee:	4620      	mov	r0, r4
 8013ef0:	4798      	blx	r3
 8013ef2:	2000      	movs	r0, #0
 8013ef4:	e7e0      	b.n	8013eb8 <_raise_r+0x12>
	...

08013ef8 <raise>:
 8013ef8:	4b02      	ldr	r3, [pc, #8]	@ (8013f04 <raise+0xc>)
 8013efa:	4601      	mov	r1, r0
 8013efc:	6818      	ldr	r0, [r3, #0]
 8013efe:	f7ff bfd2 	b.w	8013ea6 <_raise_r>
 8013f02:	bf00      	nop
 8013f04:	200000f0 	.word	0x200000f0

08013f08 <_kill_r>:
 8013f08:	b538      	push	{r3, r4, r5, lr}
 8013f0a:	4d07      	ldr	r5, [pc, #28]	@ (8013f28 <_kill_r+0x20>)
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	4604      	mov	r4, r0
 8013f10:	4608      	mov	r0, r1
 8013f12:	4611      	mov	r1, r2
 8013f14:	602b      	str	r3, [r5, #0]
 8013f16:	f7f7 fb7f 	bl	800b618 <_kill>
 8013f1a:	1c43      	adds	r3, r0, #1
 8013f1c:	d102      	bne.n	8013f24 <_kill_r+0x1c>
 8013f1e:	682b      	ldr	r3, [r5, #0]
 8013f20:	b103      	cbz	r3, 8013f24 <_kill_r+0x1c>
 8013f22:	6023      	str	r3, [r4, #0]
 8013f24:	bd38      	pop	{r3, r4, r5, pc}
 8013f26:	bf00      	nop
 8013f28:	20000bd4 	.word	0x20000bd4

08013f2c <_getpid_r>:
 8013f2c:	f7f7 bb6c 	b.w	800b608 <_getpid>

08013f30 <asin>:
 8013f30:	b538      	push	{r3, r4, r5, lr}
 8013f32:	ed2d 8b02 	vpush	{d8}
 8013f36:	ec55 4b10 	vmov	r4, r5, d0
 8013f3a:	f000 f911 	bl	8014160 <__ieee754_asin>
 8013f3e:	4622      	mov	r2, r4
 8013f40:	462b      	mov	r3, r5
 8013f42:	4620      	mov	r0, r4
 8013f44:	4629      	mov	r1, r5
 8013f46:	eeb0 8a40 	vmov.f32	s16, s0
 8013f4a:	eef0 8a60 	vmov.f32	s17, s1
 8013f4e:	f7ec fded 	bl	8000b2c <__aeabi_dcmpun>
 8013f52:	b9a8      	cbnz	r0, 8013f80 <asin+0x50>
 8013f54:	ec45 4b10 	vmov	d0, r4, r5
 8013f58:	f000 f820 	bl	8013f9c <fabs>
 8013f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8013f90 <asin+0x60>)
 8013f5e:	ec51 0b10 	vmov	r0, r1, d0
 8013f62:	2200      	movs	r2, #0
 8013f64:	f7ec fdd8 	bl	8000b18 <__aeabi_dcmpgt>
 8013f68:	b150      	cbz	r0, 8013f80 <asin+0x50>
 8013f6a:	f7fe fa67 	bl	801243c <__errno>
 8013f6e:	ecbd 8b02 	vpop	{d8}
 8013f72:	2321      	movs	r3, #33	@ 0x21
 8013f74:	6003      	str	r3, [r0, #0]
 8013f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f7a:	4806      	ldr	r0, [pc, #24]	@ (8013f94 <asin+0x64>)
 8013f7c:	f000 b818 	b.w	8013fb0 <nan>
 8013f80:	eeb0 0a48 	vmov.f32	s0, s16
 8013f84:	eef0 0a68 	vmov.f32	s1, s17
 8013f88:	ecbd 8b02 	vpop	{d8}
 8013f8c:	bd38      	pop	{r3, r4, r5, pc}
 8013f8e:	bf00      	nop
 8013f90:	3ff00000 	.word	0x3ff00000
 8013f94:	08016100 	.word	0x08016100

08013f98 <atan2>:
 8013f98:	f000 bae6 	b.w	8014568 <__ieee754_atan2>

08013f9c <fabs>:
 8013f9c:	ec51 0b10 	vmov	r0, r1, d0
 8013fa0:	4602      	mov	r2, r0
 8013fa2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013fa6:	ec43 2b10 	vmov	d0, r2, r3
 8013faa:	4770      	bx	lr
 8013fac:	0000      	movs	r0, r0
	...

08013fb0 <nan>:
 8013fb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013fb8 <nan+0x8>
 8013fb4:	4770      	bx	lr
 8013fb6:	bf00      	nop
 8013fb8:	00000000 	.word	0x00000000
 8013fbc:	7ff80000 	.word	0x7ff80000

08013fc0 <fmax>:
 8013fc0:	b508      	push	{r3, lr}
 8013fc2:	ed2d 8b04 	vpush	{d8-d9}
 8013fc6:	eeb0 8a40 	vmov.f32	s16, s0
 8013fca:	eef0 8a60 	vmov.f32	s17, s1
 8013fce:	eeb0 9a41 	vmov.f32	s18, s2
 8013fd2:	eef0 9a61 	vmov.f32	s19, s3
 8013fd6:	f000 f847 	bl	8014068 <__fpclassifyd>
 8013fda:	b950      	cbnz	r0, 8013ff2 <fmax+0x32>
 8013fdc:	eeb0 8a49 	vmov.f32	s16, s18
 8013fe0:	eef0 8a69 	vmov.f32	s17, s19
 8013fe4:	eeb0 0a48 	vmov.f32	s0, s16
 8013fe8:	eef0 0a68 	vmov.f32	s1, s17
 8013fec:	ecbd 8b04 	vpop	{d8-d9}
 8013ff0:	bd08      	pop	{r3, pc}
 8013ff2:	eeb0 0a49 	vmov.f32	s0, s18
 8013ff6:	eef0 0a69 	vmov.f32	s1, s19
 8013ffa:	f000 f835 	bl	8014068 <__fpclassifyd>
 8013ffe:	2800      	cmp	r0, #0
 8014000:	d0f0      	beq.n	8013fe4 <fmax+0x24>
 8014002:	ec53 2b19 	vmov	r2, r3, d9
 8014006:	ec51 0b18 	vmov	r0, r1, d8
 801400a:	f7ec fd85 	bl	8000b18 <__aeabi_dcmpgt>
 801400e:	2800      	cmp	r0, #0
 8014010:	d0e4      	beq.n	8013fdc <fmax+0x1c>
 8014012:	e7e7      	b.n	8013fe4 <fmax+0x24>

08014014 <fmin>:
 8014014:	b508      	push	{r3, lr}
 8014016:	ed2d 8b04 	vpush	{d8-d9}
 801401a:	eeb0 8a40 	vmov.f32	s16, s0
 801401e:	eef0 8a60 	vmov.f32	s17, s1
 8014022:	eeb0 9a41 	vmov.f32	s18, s2
 8014026:	eef0 9a61 	vmov.f32	s19, s3
 801402a:	f000 f81d 	bl	8014068 <__fpclassifyd>
 801402e:	b950      	cbnz	r0, 8014046 <fmin+0x32>
 8014030:	eeb0 8a49 	vmov.f32	s16, s18
 8014034:	eef0 8a69 	vmov.f32	s17, s19
 8014038:	eeb0 0a48 	vmov.f32	s0, s16
 801403c:	eef0 0a68 	vmov.f32	s1, s17
 8014040:	ecbd 8b04 	vpop	{d8-d9}
 8014044:	bd08      	pop	{r3, pc}
 8014046:	eeb0 0a49 	vmov.f32	s0, s18
 801404a:	eef0 0a69 	vmov.f32	s1, s19
 801404e:	f000 f80b 	bl	8014068 <__fpclassifyd>
 8014052:	2800      	cmp	r0, #0
 8014054:	d0f0      	beq.n	8014038 <fmin+0x24>
 8014056:	ec53 2b19 	vmov	r2, r3, d9
 801405a:	ec51 0b18 	vmov	r0, r1, d8
 801405e:	f7ec fd3d 	bl	8000adc <__aeabi_dcmplt>
 8014062:	2800      	cmp	r0, #0
 8014064:	d0e4      	beq.n	8014030 <fmin+0x1c>
 8014066:	e7e7      	b.n	8014038 <fmin+0x24>

08014068 <__fpclassifyd>:
 8014068:	ec51 0b10 	vmov	r0, r1, d0
 801406c:	460b      	mov	r3, r1
 801406e:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8014072:	b510      	push	{r4, lr}
 8014074:	d104      	bne.n	8014080 <__fpclassifyd+0x18>
 8014076:	2800      	cmp	r0, #0
 8014078:	bf0c      	ite	eq
 801407a:	2002      	moveq	r0, #2
 801407c:	2003      	movne	r0, #3
 801407e:	bd10      	pop	{r4, pc}
 8014080:	4a09      	ldr	r2, [pc, #36]	@ (80140a8 <__fpclassifyd+0x40>)
 8014082:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8014086:	4294      	cmp	r4, r2
 8014088:	d908      	bls.n	801409c <__fpclassifyd+0x34>
 801408a:	4a08      	ldr	r2, [pc, #32]	@ (80140ac <__fpclassifyd+0x44>)
 801408c:	4213      	tst	r3, r2
 801408e:	d007      	beq.n	80140a0 <__fpclassifyd+0x38>
 8014090:	4291      	cmp	r1, r2
 8014092:	d107      	bne.n	80140a4 <__fpclassifyd+0x3c>
 8014094:	fab0 f080 	clz	r0, r0
 8014098:	0940      	lsrs	r0, r0, #5
 801409a:	e7f0      	b.n	801407e <__fpclassifyd+0x16>
 801409c:	2004      	movs	r0, #4
 801409e:	e7ee      	b.n	801407e <__fpclassifyd+0x16>
 80140a0:	2003      	movs	r0, #3
 80140a2:	e7ec      	b.n	801407e <__fpclassifyd+0x16>
 80140a4:	2000      	movs	r0, #0
 80140a6:	e7ea      	b.n	801407e <__fpclassifyd+0x16>
 80140a8:	7fdfffff 	.word	0x7fdfffff
 80140ac:	7ff00000 	.word	0x7ff00000

080140b0 <fmaxf>:
 80140b0:	b508      	push	{r3, lr}
 80140b2:	ed2d 8b02 	vpush	{d8}
 80140b6:	eeb0 8a40 	vmov.f32	s16, s0
 80140ba:	eef0 8a60 	vmov.f32	s17, s1
 80140be:	f000 f831 	bl	8014124 <__fpclassifyf>
 80140c2:	b930      	cbnz	r0, 80140d2 <fmaxf+0x22>
 80140c4:	eeb0 8a68 	vmov.f32	s16, s17
 80140c8:	eeb0 0a48 	vmov.f32	s0, s16
 80140cc:	ecbd 8b02 	vpop	{d8}
 80140d0:	bd08      	pop	{r3, pc}
 80140d2:	eeb0 0a68 	vmov.f32	s0, s17
 80140d6:	f000 f825 	bl	8014124 <__fpclassifyf>
 80140da:	2800      	cmp	r0, #0
 80140dc:	d0f4      	beq.n	80140c8 <fmaxf+0x18>
 80140de:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80140e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140e6:	dded      	ble.n	80140c4 <fmaxf+0x14>
 80140e8:	e7ee      	b.n	80140c8 <fmaxf+0x18>

080140ea <fminf>:
 80140ea:	b508      	push	{r3, lr}
 80140ec:	ed2d 8b02 	vpush	{d8}
 80140f0:	eeb0 8a40 	vmov.f32	s16, s0
 80140f4:	eef0 8a60 	vmov.f32	s17, s1
 80140f8:	f000 f814 	bl	8014124 <__fpclassifyf>
 80140fc:	b930      	cbnz	r0, 801410c <fminf+0x22>
 80140fe:	eeb0 8a68 	vmov.f32	s16, s17
 8014102:	eeb0 0a48 	vmov.f32	s0, s16
 8014106:	ecbd 8b02 	vpop	{d8}
 801410a:	bd08      	pop	{r3, pc}
 801410c:	eeb0 0a68 	vmov.f32	s0, s17
 8014110:	f000 f808 	bl	8014124 <__fpclassifyf>
 8014114:	2800      	cmp	r0, #0
 8014116:	d0f4      	beq.n	8014102 <fminf+0x18>
 8014118:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801411c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014120:	d5ed      	bpl.n	80140fe <fminf+0x14>
 8014122:	e7ee      	b.n	8014102 <fminf+0x18>

08014124 <__fpclassifyf>:
 8014124:	ee10 3a10 	vmov	r3, s0
 8014128:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801412c:	d00d      	beq.n	801414a <__fpclassifyf+0x26>
 801412e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8014132:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8014136:	d30a      	bcc.n	801414e <__fpclassifyf+0x2a>
 8014138:	4b07      	ldr	r3, [pc, #28]	@ (8014158 <__fpclassifyf+0x34>)
 801413a:	1e42      	subs	r2, r0, #1
 801413c:	429a      	cmp	r2, r3
 801413e:	d908      	bls.n	8014152 <__fpclassifyf+0x2e>
 8014140:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8014144:	4258      	negs	r0, r3
 8014146:	4158      	adcs	r0, r3
 8014148:	4770      	bx	lr
 801414a:	2002      	movs	r0, #2
 801414c:	4770      	bx	lr
 801414e:	2004      	movs	r0, #4
 8014150:	4770      	bx	lr
 8014152:	2003      	movs	r0, #3
 8014154:	4770      	bx	lr
 8014156:	bf00      	nop
 8014158:	007ffffe 	.word	0x007ffffe
 801415c:	00000000 	.word	0x00000000

08014160 <__ieee754_asin>:
 8014160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014164:	ec55 4b10 	vmov	r4, r5, d0
 8014168:	4bc7      	ldr	r3, [pc, #796]	@ (8014488 <__ieee754_asin+0x328>)
 801416a:	b087      	sub	sp, #28
 801416c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8014170:	429e      	cmp	r6, r3
 8014172:	9501      	str	r5, [sp, #4]
 8014174:	d92d      	bls.n	80141d2 <__ieee754_asin+0x72>
 8014176:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 801417a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 801417e:	4326      	orrs	r6, r4
 8014180:	d116      	bne.n	80141b0 <__ieee754_asin+0x50>
 8014182:	a3a7      	add	r3, pc, #668	@ (adr r3, 8014420 <__ieee754_asin+0x2c0>)
 8014184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014188:	4620      	mov	r0, r4
 801418a:	4629      	mov	r1, r5
 801418c:	f7ec fa34 	bl	80005f8 <__aeabi_dmul>
 8014190:	a3a5      	add	r3, pc, #660	@ (adr r3, 8014428 <__ieee754_asin+0x2c8>)
 8014192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014196:	4606      	mov	r6, r0
 8014198:	460f      	mov	r7, r1
 801419a:	4620      	mov	r0, r4
 801419c:	4629      	mov	r1, r5
 801419e:	f7ec fa2b 	bl	80005f8 <__aeabi_dmul>
 80141a2:	4602      	mov	r2, r0
 80141a4:	460b      	mov	r3, r1
 80141a6:	4630      	mov	r0, r6
 80141a8:	4639      	mov	r1, r7
 80141aa:	f7ec f86f 	bl	800028c <__adddf3>
 80141ae:	e009      	b.n	80141c4 <__ieee754_asin+0x64>
 80141b0:	4622      	mov	r2, r4
 80141b2:	462b      	mov	r3, r5
 80141b4:	4620      	mov	r0, r4
 80141b6:	4629      	mov	r1, r5
 80141b8:	f7ec f866 	bl	8000288 <__aeabi_dsub>
 80141bc:	4602      	mov	r2, r0
 80141be:	460b      	mov	r3, r1
 80141c0:	f7ec fb44 	bl	800084c <__aeabi_ddiv>
 80141c4:	4604      	mov	r4, r0
 80141c6:	460d      	mov	r5, r1
 80141c8:	ec45 4b10 	vmov	d0, r4, r5
 80141cc:	b007      	add	sp, #28
 80141ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141d2:	4bae      	ldr	r3, [pc, #696]	@ (801448c <__ieee754_asin+0x32c>)
 80141d4:	429e      	cmp	r6, r3
 80141d6:	d810      	bhi.n	80141fa <__ieee754_asin+0x9a>
 80141d8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80141dc:	f080 80ad 	bcs.w	801433a <__ieee754_asin+0x1da>
 80141e0:	a393      	add	r3, pc, #588	@ (adr r3, 8014430 <__ieee754_asin+0x2d0>)
 80141e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e6:	4620      	mov	r0, r4
 80141e8:	4629      	mov	r1, r5
 80141ea:	f7ec f84f 	bl	800028c <__adddf3>
 80141ee:	4ba8      	ldr	r3, [pc, #672]	@ (8014490 <__ieee754_asin+0x330>)
 80141f0:	2200      	movs	r2, #0
 80141f2:	f7ec fc91 	bl	8000b18 <__aeabi_dcmpgt>
 80141f6:	2800      	cmp	r0, #0
 80141f8:	d1e6      	bne.n	80141c8 <__ieee754_asin+0x68>
 80141fa:	ec45 4b10 	vmov	d0, r4, r5
 80141fe:	f7ff fecd 	bl	8013f9c <fabs>
 8014202:	49a3      	ldr	r1, [pc, #652]	@ (8014490 <__ieee754_asin+0x330>)
 8014204:	ec53 2b10 	vmov	r2, r3, d0
 8014208:	2000      	movs	r0, #0
 801420a:	f7ec f83d 	bl	8000288 <__aeabi_dsub>
 801420e:	4ba1      	ldr	r3, [pc, #644]	@ (8014494 <__ieee754_asin+0x334>)
 8014210:	2200      	movs	r2, #0
 8014212:	f7ec f9f1 	bl	80005f8 <__aeabi_dmul>
 8014216:	a388      	add	r3, pc, #544	@ (adr r3, 8014438 <__ieee754_asin+0x2d8>)
 8014218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801421c:	4604      	mov	r4, r0
 801421e:	460d      	mov	r5, r1
 8014220:	f7ec f9ea 	bl	80005f8 <__aeabi_dmul>
 8014224:	a386      	add	r3, pc, #536	@ (adr r3, 8014440 <__ieee754_asin+0x2e0>)
 8014226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801422a:	f7ec f82f 	bl	800028c <__adddf3>
 801422e:	4622      	mov	r2, r4
 8014230:	462b      	mov	r3, r5
 8014232:	f7ec f9e1 	bl	80005f8 <__aeabi_dmul>
 8014236:	a384      	add	r3, pc, #528	@ (adr r3, 8014448 <__ieee754_asin+0x2e8>)
 8014238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801423c:	f7ec f824 	bl	8000288 <__aeabi_dsub>
 8014240:	4622      	mov	r2, r4
 8014242:	462b      	mov	r3, r5
 8014244:	f7ec f9d8 	bl	80005f8 <__aeabi_dmul>
 8014248:	a381      	add	r3, pc, #516	@ (adr r3, 8014450 <__ieee754_asin+0x2f0>)
 801424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801424e:	f7ec f81d 	bl	800028c <__adddf3>
 8014252:	4622      	mov	r2, r4
 8014254:	462b      	mov	r3, r5
 8014256:	f7ec f9cf 	bl	80005f8 <__aeabi_dmul>
 801425a:	a37f      	add	r3, pc, #508	@ (adr r3, 8014458 <__ieee754_asin+0x2f8>)
 801425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014260:	f7ec f812 	bl	8000288 <__aeabi_dsub>
 8014264:	4622      	mov	r2, r4
 8014266:	462b      	mov	r3, r5
 8014268:	f7ec f9c6 	bl	80005f8 <__aeabi_dmul>
 801426c:	a37c      	add	r3, pc, #496	@ (adr r3, 8014460 <__ieee754_asin+0x300>)
 801426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014272:	f7ec f80b 	bl	800028c <__adddf3>
 8014276:	4622      	mov	r2, r4
 8014278:	462b      	mov	r3, r5
 801427a:	f7ec f9bd 	bl	80005f8 <__aeabi_dmul>
 801427e:	a37a      	add	r3, pc, #488	@ (adr r3, 8014468 <__ieee754_asin+0x308>)
 8014280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014288:	4620      	mov	r0, r4
 801428a:	4629      	mov	r1, r5
 801428c:	f7ec f9b4 	bl	80005f8 <__aeabi_dmul>
 8014290:	a377      	add	r3, pc, #476	@ (adr r3, 8014470 <__ieee754_asin+0x310>)
 8014292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014296:	f7eb fff7 	bl	8000288 <__aeabi_dsub>
 801429a:	4622      	mov	r2, r4
 801429c:	462b      	mov	r3, r5
 801429e:	f7ec f9ab 	bl	80005f8 <__aeabi_dmul>
 80142a2:	a375      	add	r3, pc, #468	@ (adr r3, 8014478 <__ieee754_asin+0x318>)
 80142a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a8:	f7eb fff0 	bl	800028c <__adddf3>
 80142ac:	4622      	mov	r2, r4
 80142ae:	462b      	mov	r3, r5
 80142b0:	f7ec f9a2 	bl	80005f8 <__aeabi_dmul>
 80142b4:	a372      	add	r3, pc, #456	@ (adr r3, 8014480 <__ieee754_asin+0x320>)
 80142b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ba:	f7eb ffe5 	bl	8000288 <__aeabi_dsub>
 80142be:	4622      	mov	r2, r4
 80142c0:	462b      	mov	r3, r5
 80142c2:	f7ec f999 	bl	80005f8 <__aeabi_dmul>
 80142c6:	4b72      	ldr	r3, [pc, #456]	@ (8014490 <__ieee754_asin+0x330>)
 80142c8:	2200      	movs	r2, #0
 80142ca:	f7eb ffdf 	bl	800028c <__adddf3>
 80142ce:	ec45 4b10 	vmov	d0, r4, r5
 80142d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80142d6:	f000 fba7 	bl	8014a28 <__ieee754_sqrt>
 80142da:	4b6f      	ldr	r3, [pc, #444]	@ (8014498 <__ieee754_asin+0x338>)
 80142dc:	429e      	cmp	r6, r3
 80142de:	ec5b ab10 	vmov	sl, fp, d0
 80142e2:	f240 80db 	bls.w	801449c <__ieee754_asin+0x33c>
 80142e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142ee:	f7ec faad 	bl	800084c <__aeabi_ddiv>
 80142f2:	4652      	mov	r2, sl
 80142f4:	465b      	mov	r3, fp
 80142f6:	f7ec f97f 	bl	80005f8 <__aeabi_dmul>
 80142fa:	4652      	mov	r2, sl
 80142fc:	465b      	mov	r3, fp
 80142fe:	f7eb ffc5 	bl	800028c <__adddf3>
 8014302:	4602      	mov	r2, r0
 8014304:	460b      	mov	r3, r1
 8014306:	f7eb ffc1 	bl	800028c <__adddf3>
 801430a:	a347      	add	r3, pc, #284	@ (adr r3, 8014428 <__ieee754_asin+0x2c8>)
 801430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014310:	f7eb ffba 	bl	8000288 <__aeabi_dsub>
 8014314:	4602      	mov	r2, r0
 8014316:	460b      	mov	r3, r1
 8014318:	a141      	add	r1, pc, #260	@ (adr r1, 8014420 <__ieee754_asin+0x2c0>)
 801431a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801431e:	f7eb ffb3 	bl	8000288 <__aeabi_dsub>
 8014322:	9b01      	ldr	r3, [sp, #4]
 8014324:	2b00      	cmp	r3, #0
 8014326:	bfdc      	itt	le
 8014328:	4602      	movle	r2, r0
 801432a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 801432e:	4604      	mov	r4, r0
 8014330:	460d      	mov	r5, r1
 8014332:	bfdc      	itt	le
 8014334:	4614      	movle	r4, r2
 8014336:	461d      	movle	r5, r3
 8014338:	e746      	b.n	80141c8 <__ieee754_asin+0x68>
 801433a:	4622      	mov	r2, r4
 801433c:	462b      	mov	r3, r5
 801433e:	4620      	mov	r0, r4
 8014340:	4629      	mov	r1, r5
 8014342:	f7ec f959 	bl	80005f8 <__aeabi_dmul>
 8014346:	a33c      	add	r3, pc, #240	@ (adr r3, 8014438 <__ieee754_asin+0x2d8>)
 8014348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801434c:	4606      	mov	r6, r0
 801434e:	460f      	mov	r7, r1
 8014350:	f7ec f952 	bl	80005f8 <__aeabi_dmul>
 8014354:	a33a      	add	r3, pc, #232	@ (adr r3, 8014440 <__ieee754_asin+0x2e0>)
 8014356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801435a:	f7eb ff97 	bl	800028c <__adddf3>
 801435e:	4632      	mov	r2, r6
 8014360:	463b      	mov	r3, r7
 8014362:	f7ec f949 	bl	80005f8 <__aeabi_dmul>
 8014366:	a338      	add	r3, pc, #224	@ (adr r3, 8014448 <__ieee754_asin+0x2e8>)
 8014368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801436c:	f7eb ff8c 	bl	8000288 <__aeabi_dsub>
 8014370:	4632      	mov	r2, r6
 8014372:	463b      	mov	r3, r7
 8014374:	f7ec f940 	bl	80005f8 <__aeabi_dmul>
 8014378:	a335      	add	r3, pc, #212	@ (adr r3, 8014450 <__ieee754_asin+0x2f0>)
 801437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801437e:	f7eb ff85 	bl	800028c <__adddf3>
 8014382:	4632      	mov	r2, r6
 8014384:	463b      	mov	r3, r7
 8014386:	f7ec f937 	bl	80005f8 <__aeabi_dmul>
 801438a:	a333      	add	r3, pc, #204	@ (adr r3, 8014458 <__ieee754_asin+0x2f8>)
 801438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014390:	f7eb ff7a 	bl	8000288 <__aeabi_dsub>
 8014394:	4632      	mov	r2, r6
 8014396:	463b      	mov	r3, r7
 8014398:	f7ec f92e 	bl	80005f8 <__aeabi_dmul>
 801439c:	a330      	add	r3, pc, #192	@ (adr r3, 8014460 <__ieee754_asin+0x300>)
 801439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a2:	f7eb ff73 	bl	800028c <__adddf3>
 80143a6:	4632      	mov	r2, r6
 80143a8:	463b      	mov	r3, r7
 80143aa:	f7ec f925 	bl	80005f8 <__aeabi_dmul>
 80143ae:	a32e      	add	r3, pc, #184	@ (adr r3, 8014468 <__ieee754_asin+0x308>)
 80143b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b4:	4680      	mov	r8, r0
 80143b6:	4689      	mov	r9, r1
 80143b8:	4630      	mov	r0, r6
 80143ba:	4639      	mov	r1, r7
 80143bc:	f7ec f91c 	bl	80005f8 <__aeabi_dmul>
 80143c0:	a32b      	add	r3, pc, #172	@ (adr r3, 8014470 <__ieee754_asin+0x310>)
 80143c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c6:	f7eb ff5f 	bl	8000288 <__aeabi_dsub>
 80143ca:	4632      	mov	r2, r6
 80143cc:	463b      	mov	r3, r7
 80143ce:	f7ec f913 	bl	80005f8 <__aeabi_dmul>
 80143d2:	a329      	add	r3, pc, #164	@ (adr r3, 8014478 <__ieee754_asin+0x318>)
 80143d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143d8:	f7eb ff58 	bl	800028c <__adddf3>
 80143dc:	4632      	mov	r2, r6
 80143de:	463b      	mov	r3, r7
 80143e0:	f7ec f90a 	bl	80005f8 <__aeabi_dmul>
 80143e4:	a326      	add	r3, pc, #152	@ (adr r3, 8014480 <__ieee754_asin+0x320>)
 80143e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ea:	f7eb ff4d 	bl	8000288 <__aeabi_dsub>
 80143ee:	4632      	mov	r2, r6
 80143f0:	463b      	mov	r3, r7
 80143f2:	f7ec f901 	bl	80005f8 <__aeabi_dmul>
 80143f6:	4b26      	ldr	r3, [pc, #152]	@ (8014490 <__ieee754_asin+0x330>)
 80143f8:	2200      	movs	r2, #0
 80143fa:	f7eb ff47 	bl	800028c <__adddf3>
 80143fe:	4602      	mov	r2, r0
 8014400:	460b      	mov	r3, r1
 8014402:	4640      	mov	r0, r8
 8014404:	4649      	mov	r1, r9
 8014406:	f7ec fa21 	bl	800084c <__aeabi_ddiv>
 801440a:	4622      	mov	r2, r4
 801440c:	462b      	mov	r3, r5
 801440e:	f7ec f8f3 	bl	80005f8 <__aeabi_dmul>
 8014412:	4602      	mov	r2, r0
 8014414:	460b      	mov	r3, r1
 8014416:	4620      	mov	r0, r4
 8014418:	4629      	mov	r1, r5
 801441a:	e6c6      	b.n	80141aa <__ieee754_asin+0x4a>
 801441c:	f3af 8000 	nop.w
 8014420:	54442d18 	.word	0x54442d18
 8014424:	3ff921fb 	.word	0x3ff921fb
 8014428:	33145c07 	.word	0x33145c07
 801442c:	3c91a626 	.word	0x3c91a626
 8014430:	8800759c 	.word	0x8800759c
 8014434:	7e37e43c 	.word	0x7e37e43c
 8014438:	0dfdf709 	.word	0x0dfdf709
 801443c:	3f023de1 	.word	0x3f023de1
 8014440:	7501b288 	.word	0x7501b288
 8014444:	3f49efe0 	.word	0x3f49efe0
 8014448:	b5688f3b 	.word	0xb5688f3b
 801444c:	3fa48228 	.word	0x3fa48228
 8014450:	0e884455 	.word	0x0e884455
 8014454:	3fc9c155 	.word	0x3fc9c155
 8014458:	03eb6f7d 	.word	0x03eb6f7d
 801445c:	3fd4d612 	.word	0x3fd4d612
 8014460:	55555555 	.word	0x55555555
 8014464:	3fc55555 	.word	0x3fc55555
 8014468:	b12e9282 	.word	0xb12e9282
 801446c:	3fb3b8c5 	.word	0x3fb3b8c5
 8014470:	1b8d0159 	.word	0x1b8d0159
 8014474:	3fe6066c 	.word	0x3fe6066c
 8014478:	9c598ac8 	.word	0x9c598ac8
 801447c:	40002ae5 	.word	0x40002ae5
 8014480:	1c8a2d4b 	.word	0x1c8a2d4b
 8014484:	40033a27 	.word	0x40033a27
 8014488:	3fefffff 	.word	0x3fefffff
 801448c:	3fdfffff 	.word	0x3fdfffff
 8014490:	3ff00000 	.word	0x3ff00000
 8014494:	3fe00000 	.word	0x3fe00000
 8014498:	3fef3332 	.word	0x3fef3332
 801449c:	4652      	mov	r2, sl
 801449e:	465b      	mov	r3, fp
 80144a0:	4650      	mov	r0, sl
 80144a2:	4659      	mov	r1, fp
 80144a4:	f7eb fef2 	bl	800028c <__adddf3>
 80144a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80144ac:	4606      	mov	r6, r0
 80144ae:	460f      	mov	r7, r1
 80144b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144b4:	f7ec f9ca 	bl	800084c <__aeabi_ddiv>
 80144b8:	4602      	mov	r2, r0
 80144ba:	460b      	mov	r3, r1
 80144bc:	4630      	mov	r0, r6
 80144be:	4639      	mov	r1, r7
 80144c0:	f7ec f89a 	bl	80005f8 <__aeabi_dmul>
 80144c4:	f04f 0800 	mov.w	r8, #0
 80144c8:	4606      	mov	r6, r0
 80144ca:	460f      	mov	r7, r1
 80144cc:	4642      	mov	r2, r8
 80144ce:	465b      	mov	r3, fp
 80144d0:	4640      	mov	r0, r8
 80144d2:	4659      	mov	r1, fp
 80144d4:	f7ec f890 	bl	80005f8 <__aeabi_dmul>
 80144d8:	4602      	mov	r2, r0
 80144da:	460b      	mov	r3, r1
 80144dc:	4620      	mov	r0, r4
 80144de:	4629      	mov	r1, r5
 80144e0:	f7eb fed2 	bl	8000288 <__aeabi_dsub>
 80144e4:	4642      	mov	r2, r8
 80144e6:	4604      	mov	r4, r0
 80144e8:	460d      	mov	r5, r1
 80144ea:	465b      	mov	r3, fp
 80144ec:	4650      	mov	r0, sl
 80144ee:	4659      	mov	r1, fp
 80144f0:	f7eb fecc 	bl	800028c <__adddf3>
 80144f4:	4602      	mov	r2, r0
 80144f6:	460b      	mov	r3, r1
 80144f8:	4620      	mov	r0, r4
 80144fa:	4629      	mov	r1, r5
 80144fc:	f7ec f9a6 	bl	800084c <__aeabi_ddiv>
 8014500:	4602      	mov	r2, r0
 8014502:	460b      	mov	r3, r1
 8014504:	f7eb fec2 	bl	800028c <__adddf3>
 8014508:	4602      	mov	r2, r0
 801450a:	460b      	mov	r3, r1
 801450c:	a112      	add	r1, pc, #72	@ (adr r1, 8014558 <__ieee754_asin+0x3f8>)
 801450e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014512:	f7eb feb9 	bl	8000288 <__aeabi_dsub>
 8014516:	4602      	mov	r2, r0
 8014518:	460b      	mov	r3, r1
 801451a:	4630      	mov	r0, r6
 801451c:	4639      	mov	r1, r7
 801451e:	f7eb feb3 	bl	8000288 <__aeabi_dsub>
 8014522:	4642      	mov	r2, r8
 8014524:	4604      	mov	r4, r0
 8014526:	460d      	mov	r5, r1
 8014528:	465b      	mov	r3, fp
 801452a:	4640      	mov	r0, r8
 801452c:	4659      	mov	r1, fp
 801452e:	f7eb fead 	bl	800028c <__adddf3>
 8014532:	4602      	mov	r2, r0
 8014534:	460b      	mov	r3, r1
 8014536:	a10a      	add	r1, pc, #40	@ (adr r1, 8014560 <__ieee754_asin+0x400>)
 8014538:	e9d1 0100 	ldrd	r0, r1, [r1]
 801453c:	f7eb fea4 	bl	8000288 <__aeabi_dsub>
 8014540:	4602      	mov	r2, r0
 8014542:	460b      	mov	r3, r1
 8014544:	4620      	mov	r0, r4
 8014546:	4629      	mov	r1, r5
 8014548:	f7eb fe9e 	bl	8000288 <__aeabi_dsub>
 801454c:	4602      	mov	r2, r0
 801454e:	460b      	mov	r3, r1
 8014550:	a103      	add	r1, pc, #12	@ (adr r1, 8014560 <__ieee754_asin+0x400>)
 8014552:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014556:	e6e2      	b.n	801431e <__ieee754_asin+0x1be>
 8014558:	33145c07 	.word	0x33145c07
 801455c:	3c91a626 	.word	0x3c91a626
 8014560:	54442d18 	.word	0x54442d18
 8014564:	3fe921fb 	.word	0x3fe921fb

08014568 <__ieee754_atan2>:
 8014568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801456c:	ec57 6b11 	vmov	r6, r7, d1
 8014570:	4273      	negs	r3, r6
 8014572:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80146f0 <__ieee754_atan2+0x188>
 8014576:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801457a:	4333      	orrs	r3, r6
 801457c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8014580:	4543      	cmp	r3, r8
 8014582:	ec51 0b10 	vmov	r0, r1, d0
 8014586:	4635      	mov	r5, r6
 8014588:	d809      	bhi.n	801459e <__ieee754_atan2+0x36>
 801458a:	4244      	negs	r4, r0
 801458c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014590:	4304      	orrs	r4, r0
 8014592:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8014596:	4544      	cmp	r4, r8
 8014598:	468e      	mov	lr, r1
 801459a:	4681      	mov	r9, r0
 801459c:	d907      	bls.n	80145ae <__ieee754_atan2+0x46>
 801459e:	4632      	mov	r2, r6
 80145a0:	463b      	mov	r3, r7
 80145a2:	f7eb fe73 	bl	800028c <__adddf3>
 80145a6:	ec41 0b10 	vmov	d0, r0, r1
 80145aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145ae:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80145b2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80145b6:	4334      	orrs	r4, r6
 80145b8:	d103      	bne.n	80145c2 <__ieee754_atan2+0x5a>
 80145ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145be:	f000 b89b 	b.w	80146f8 <atan>
 80145c2:	17bc      	asrs	r4, r7, #30
 80145c4:	f004 0402 	and.w	r4, r4, #2
 80145c8:	ea53 0909 	orrs.w	r9, r3, r9
 80145cc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80145d0:	d107      	bne.n	80145e2 <__ieee754_atan2+0x7a>
 80145d2:	2c02      	cmp	r4, #2
 80145d4:	d05f      	beq.n	8014696 <__ieee754_atan2+0x12e>
 80145d6:	2c03      	cmp	r4, #3
 80145d8:	d1e5      	bne.n	80145a6 <__ieee754_atan2+0x3e>
 80145da:	a143      	add	r1, pc, #268	@ (adr r1, 80146e8 <__ieee754_atan2+0x180>)
 80145dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145e0:	e7e1      	b.n	80145a6 <__ieee754_atan2+0x3e>
 80145e2:	4315      	orrs	r5, r2
 80145e4:	d106      	bne.n	80145f4 <__ieee754_atan2+0x8c>
 80145e6:	f1be 0f00 	cmp.w	lr, #0
 80145ea:	db5f      	blt.n	80146ac <__ieee754_atan2+0x144>
 80145ec:	a136      	add	r1, pc, #216	@ (adr r1, 80146c8 <__ieee754_atan2+0x160>)
 80145ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145f2:	e7d8      	b.n	80145a6 <__ieee754_atan2+0x3e>
 80145f4:	4542      	cmp	r2, r8
 80145f6:	d10f      	bne.n	8014618 <__ieee754_atan2+0xb0>
 80145f8:	4293      	cmp	r3, r2
 80145fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80145fe:	d107      	bne.n	8014610 <__ieee754_atan2+0xa8>
 8014600:	2c02      	cmp	r4, #2
 8014602:	d84c      	bhi.n	801469e <__ieee754_atan2+0x136>
 8014604:	4b36      	ldr	r3, [pc, #216]	@ (80146e0 <__ieee754_atan2+0x178>)
 8014606:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801460a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801460e:	e7ca      	b.n	80145a6 <__ieee754_atan2+0x3e>
 8014610:	2c02      	cmp	r4, #2
 8014612:	d848      	bhi.n	80146a6 <__ieee754_atan2+0x13e>
 8014614:	4b33      	ldr	r3, [pc, #204]	@ (80146e4 <__ieee754_atan2+0x17c>)
 8014616:	e7f6      	b.n	8014606 <__ieee754_atan2+0x9e>
 8014618:	4543      	cmp	r3, r8
 801461a:	d0e4      	beq.n	80145e6 <__ieee754_atan2+0x7e>
 801461c:	1a9b      	subs	r3, r3, r2
 801461e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8014622:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014626:	da1e      	bge.n	8014666 <__ieee754_atan2+0xfe>
 8014628:	2f00      	cmp	r7, #0
 801462a:	da01      	bge.n	8014630 <__ieee754_atan2+0xc8>
 801462c:	323c      	adds	r2, #60	@ 0x3c
 801462e:	db1e      	blt.n	801466e <__ieee754_atan2+0x106>
 8014630:	4632      	mov	r2, r6
 8014632:	463b      	mov	r3, r7
 8014634:	f7ec f90a 	bl	800084c <__aeabi_ddiv>
 8014638:	ec41 0b10 	vmov	d0, r0, r1
 801463c:	f7ff fcae 	bl	8013f9c <fabs>
 8014640:	f000 f85a 	bl	80146f8 <atan>
 8014644:	ec51 0b10 	vmov	r0, r1, d0
 8014648:	2c01      	cmp	r4, #1
 801464a:	d013      	beq.n	8014674 <__ieee754_atan2+0x10c>
 801464c:	2c02      	cmp	r4, #2
 801464e:	d015      	beq.n	801467c <__ieee754_atan2+0x114>
 8014650:	2c00      	cmp	r4, #0
 8014652:	d0a8      	beq.n	80145a6 <__ieee754_atan2+0x3e>
 8014654:	a318      	add	r3, pc, #96	@ (adr r3, 80146b8 <__ieee754_atan2+0x150>)
 8014656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801465a:	f7eb fe15 	bl	8000288 <__aeabi_dsub>
 801465e:	a318      	add	r3, pc, #96	@ (adr r3, 80146c0 <__ieee754_atan2+0x158>)
 8014660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014664:	e014      	b.n	8014690 <__ieee754_atan2+0x128>
 8014666:	a118      	add	r1, pc, #96	@ (adr r1, 80146c8 <__ieee754_atan2+0x160>)
 8014668:	e9d1 0100 	ldrd	r0, r1, [r1]
 801466c:	e7ec      	b.n	8014648 <__ieee754_atan2+0xe0>
 801466e:	2000      	movs	r0, #0
 8014670:	2100      	movs	r1, #0
 8014672:	e7e9      	b.n	8014648 <__ieee754_atan2+0xe0>
 8014674:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014678:	4619      	mov	r1, r3
 801467a:	e794      	b.n	80145a6 <__ieee754_atan2+0x3e>
 801467c:	a30e      	add	r3, pc, #56	@ (adr r3, 80146b8 <__ieee754_atan2+0x150>)
 801467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014682:	f7eb fe01 	bl	8000288 <__aeabi_dsub>
 8014686:	4602      	mov	r2, r0
 8014688:	460b      	mov	r3, r1
 801468a:	a10d      	add	r1, pc, #52	@ (adr r1, 80146c0 <__ieee754_atan2+0x158>)
 801468c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014690:	f7eb fdfa 	bl	8000288 <__aeabi_dsub>
 8014694:	e787      	b.n	80145a6 <__ieee754_atan2+0x3e>
 8014696:	a10a      	add	r1, pc, #40	@ (adr r1, 80146c0 <__ieee754_atan2+0x158>)
 8014698:	e9d1 0100 	ldrd	r0, r1, [r1]
 801469c:	e783      	b.n	80145a6 <__ieee754_atan2+0x3e>
 801469e:	a10c      	add	r1, pc, #48	@ (adr r1, 80146d0 <__ieee754_atan2+0x168>)
 80146a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80146a4:	e77f      	b.n	80145a6 <__ieee754_atan2+0x3e>
 80146a6:	2000      	movs	r0, #0
 80146a8:	2100      	movs	r1, #0
 80146aa:	e77c      	b.n	80145a6 <__ieee754_atan2+0x3e>
 80146ac:	a10a      	add	r1, pc, #40	@ (adr r1, 80146d8 <__ieee754_atan2+0x170>)
 80146ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80146b2:	e778      	b.n	80145a6 <__ieee754_atan2+0x3e>
 80146b4:	f3af 8000 	nop.w
 80146b8:	33145c07 	.word	0x33145c07
 80146bc:	3ca1a626 	.word	0x3ca1a626
 80146c0:	54442d18 	.word	0x54442d18
 80146c4:	400921fb 	.word	0x400921fb
 80146c8:	54442d18 	.word	0x54442d18
 80146cc:	3ff921fb 	.word	0x3ff921fb
 80146d0:	54442d18 	.word	0x54442d18
 80146d4:	3fe921fb 	.word	0x3fe921fb
 80146d8:	54442d18 	.word	0x54442d18
 80146dc:	bff921fb 	.word	0xbff921fb
 80146e0:	08016320 	.word	0x08016320
 80146e4:	08016308 	.word	0x08016308
 80146e8:	54442d18 	.word	0x54442d18
 80146ec:	c00921fb 	.word	0xc00921fb
 80146f0:	7ff00000 	.word	0x7ff00000
 80146f4:	00000000 	.word	0x00000000

080146f8 <atan>:
 80146f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146fc:	ec55 4b10 	vmov	r4, r5, d0
 8014700:	4bbf      	ldr	r3, [pc, #764]	@ (8014a00 <atan+0x308>)
 8014702:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8014706:	429e      	cmp	r6, r3
 8014708:	46ab      	mov	fp, r5
 801470a:	d918      	bls.n	801473e <atan+0x46>
 801470c:	4bbd      	ldr	r3, [pc, #756]	@ (8014a04 <atan+0x30c>)
 801470e:	429e      	cmp	r6, r3
 8014710:	d801      	bhi.n	8014716 <atan+0x1e>
 8014712:	d109      	bne.n	8014728 <atan+0x30>
 8014714:	b144      	cbz	r4, 8014728 <atan+0x30>
 8014716:	4622      	mov	r2, r4
 8014718:	462b      	mov	r3, r5
 801471a:	4620      	mov	r0, r4
 801471c:	4629      	mov	r1, r5
 801471e:	f7eb fdb5 	bl	800028c <__adddf3>
 8014722:	4604      	mov	r4, r0
 8014724:	460d      	mov	r5, r1
 8014726:	e006      	b.n	8014736 <atan+0x3e>
 8014728:	f1bb 0f00 	cmp.w	fp, #0
 801472c:	f340 812b 	ble.w	8014986 <atan+0x28e>
 8014730:	a597      	add	r5, pc, #604	@ (adr r5, 8014990 <atan+0x298>)
 8014732:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014736:	ec45 4b10 	vmov	d0, r4, r5
 801473a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801473e:	4bb2      	ldr	r3, [pc, #712]	@ (8014a08 <atan+0x310>)
 8014740:	429e      	cmp	r6, r3
 8014742:	d813      	bhi.n	801476c <atan+0x74>
 8014744:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8014748:	429e      	cmp	r6, r3
 801474a:	d80c      	bhi.n	8014766 <atan+0x6e>
 801474c:	a392      	add	r3, pc, #584	@ (adr r3, 8014998 <atan+0x2a0>)
 801474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014752:	4620      	mov	r0, r4
 8014754:	4629      	mov	r1, r5
 8014756:	f7eb fd99 	bl	800028c <__adddf3>
 801475a:	4bac      	ldr	r3, [pc, #688]	@ (8014a0c <atan+0x314>)
 801475c:	2200      	movs	r2, #0
 801475e:	f7ec f9db 	bl	8000b18 <__aeabi_dcmpgt>
 8014762:	2800      	cmp	r0, #0
 8014764:	d1e7      	bne.n	8014736 <atan+0x3e>
 8014766:	f04f 3aff 	mov.w	sl, #4294967295
 801476a:	e029      	b.n	80147c0 <atan+0xc8>
 801476c:	f7ff fc16 	bl	8013f9c <fabs>
 8014770:	4ba7      	ldr	r3, [pc, #668]	@ (8014a10 <atan+0x318>)
 8014772:	429e      	cmp	r6, r3
 8014774:	ec55 4b10 	vmov	r4, r5, d0
 8014778:	f200 80bc 	bhi.w	80148f4 <atan+0x1fc>
 801477c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8014780:	429e      	cmp	r6, r3
 8014782:	f200 809e 	bhi.w	80148c2 <atan+0x1ca>
 8014786:	4622      	mov	r2, r4
 8014788:	462b      	mov	r3, r5
 801478a:	4620      	mov	r0, r4
 801478c:	4629      	mov	r1, r5
 801478e:	f7eb fd7d 	bl	800028c <__adddf3>
 8014792:	4b9e      	ldr	r3, [pc, #632]	@ (8014a0c <atan+0x314>)
 8014794:	2200      	movs	r2, #0
 8014796:	f7eb fd77 	bl	8000288 <__aeabi_dsub>
 801479a:	2200      	movs	r2, #0
 801479c:	4606      	mov	r6, r0
 801479e:	460f      	mov	r7, r1
 80147a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80147a4:	4620      	mov	r0, r4
 80147a6:	4629      	mov	r1, r5
 80147a8:	f7eb fd70 	bl	800028c <__adddf3>
 80147ac:	4602      	mov	r2, r0
 80147ae:	460b      	mov	r3, r1
 80147b0:	4630      	mov	r0, r6
 80147b2:	4639      	mov	r1, r7
 80147b4:	f7ec f84a 	bl	800084c <__aeabi_ddiv>
 80147b8:	f04f 0a00 	mov.w	sl, #0
 80147bc:	4604      	mov	r4, r0
 80147be:	460d      	mov	r5, r1
 80147c0:	4622      	mov	r2, r4
 80147c2:	462b      	mov	r3, r5
 80147c4:	4620      	mov	r0, r4
 80147c6:	4629      	mov	r1, r5
 80147c8:	f7eb ff16 	bl	80005f8 <__aeabi_dmul>
 80147cc:	4602      	mov	r2, r0
 80147ce:	460b      	mov	r3, r1
 80147d0:	4680      	mov	r8, r0
 80147d2:	4689      	mov	r9, r1
 80147d4:	f7eb ff10 	bl	80005f8 <__aeabi_dmul>
 80147d8:	a371      	add	r3, pc, #452	@ (adr r3, 80149a0 <atan+0x2a8>)
 80147da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147de:	4606      	mov	r6, r0
 80147e0:	460f      	mov	r7, r1
 80147e2:	f7eb ff09 	bl	80005f8 <__aeabi_dmul>
 80147e6:	a370      	add	r3, pc, #448	@ (adr r3, 80149a8 <atan+0x2b0>)
 80147e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ec:	f7eb fd4e 	bl	800028c <__adddf3>
 80147f0:	4632      	mov	r2, r6
 80147f2:	463b      	mov	r3, r7
 80147f4:	f7eb ff00 	bl	80005f8 <__aeabi_dmul>
 80147f8:	a36d      	add	r3, pc, #436	@ (adr r3, 80149b0 <atan+0x2b8>)
 80147fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147fe:	f7eb fd45 	bl	800028c <__adddf3>
 8014802:	4632      	mov	r2, r6
 8014804:	463b      	mov	r3, r7
 8014806:	f7eb fef7 	bl	80005f8 <__aeabi_dmul>
 801480a:	a36b      	add	r3, pc, #428	@ (adr r3, 80149b8 <atan+0x2c0>)
 801480c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014810:	f7eb fd3c 	bl	800028c <__adddf3>
 8014814:	4632      	mov	r2, r6
 8014816:	463b      	mov	r3, r7
 8014818:	f7eb feee 	bl	80005f8 <__aeabi_dmul>
 801481c:	a368      	add	r3, pc, #416	@ (adr r3, 80149c0 <atan+0x2c8>)
 801481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014822:	f7eb fd33 	bl	800028c <__adddf3>
 8014826:	4632      	mov	r2, r6
 8014828:	463b      	mov	r3, r7
 801482a:	f7eb fee5 	bl	80005f8 <__aeabi_dmul>
 801482e:	a366      	add	r3, pc, #408	@ (adr r3, 80149c8 <atan+0x2d0>)
 8014830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014834:	f7eb fd2a 	bl	800028c <__adddf3>
 8014838:	4642      	mov	r2, r8
 801483a:	464b      	mov	r3, r9
 801483c:	f7eb fedc 	bl	80005f8 <__aeabi_dmul>
 8014840:	a363      	add	r3, pc, #396	@ (adr r3, 80149d0 <atan+0x2d8>)
 8014842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014846:	4680      	mov	r8, r0
 8014848:	4689      	mov	r9, r1
 801484a:	4630      	mov	r0, r6
 801484c:	4639      	mov	r1, r7
 801484e:	f7eb fed3 	bl	80005f8 <__aeabi_dmul>
 8014852:	a361      	add	r3, pc, #388	@ (adr r3, 80149d8 <atan+0x2e0>)
 8014854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014858:	f7eb fd16 	bl	8000288 <__aeabi_dsub>
 801485c:	4632      	mov	r2, r6
 801485e:	463b      	mov	r3, r7
 8014860:	f7eb feca 	bl	80005f8 <__aeabi_dmul>
 8014864:	a35e      	add	r3, pc, #376	@ (adr r3, 80149e0 <atan+0x2e8>)
 8014866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801486a:	f7eb fd0d 	bl	8000288 <__aeabi_dsub>
 801486e:	4632      	mov	r2, r6
 8014870:	463b      	mov	r3, r7
 8014872:	f7eb fec1 	bl	80005f8 <__aeabi_dmul>
 8014876:	a35c      	add	r3, pc, #368	@ (adr r3, 80149e8 <atan+0x2f0>)
 8014878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801487c:	f7eb fd04 	bl	8000288 <__aeabi_dsub>
 8014880:	4632      	mov	r2, r6
 8014882:	463b      	mov	r3, r7
 8014884:	f7eb feb8 	bl	80005f8 <__aeabi_dmul>
 8014888:	a359      	add	r3, pc, #356	@ (adr r3, 80149f0 <atan+0x2f8>)
 801488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801488e:	f7eb fcfb 	bl	8000288 <__aeabi_dsub>
 8014892:	4632      	mov	r2, r6
 8014894:	463b      	mov	r3, r7
 8014896:	f7eb feaf 	bl	80005f8 <__aeabi_dmul>
 801489a:	4602      	mov	r2, r0
 801489c:	460b      	mov	r3, r1
 801489e:	4640      	mov	r0, r8
 80148a0:	4649      	mov	r1, r9
 80148a2:	f7eb fcf3 	bl	800028c <__adddf3>
 80148a6:	4622      	mov	r2, r4
 80148a8:	462b      	mov	r3, r5
 80148aa:	f7eb fea5 	bl	80005f8 <__aeabi_dmul>
 80148ae:	f1ba 3fff 	cmp.w	sl, #4294967295
 80148b2:	4602      	mov	r2, r0
 80148b4:	460b      	mov	r3, r1
 80148b6:	d148      	bne.n	801494a <atan+0x252>
 80148b8:	4620      	mov	r0, r4
 80148ba:	4629      	mov	r1, r5
 80148bc:	f7eb fce4 	bl	8000288 <__aeabi_dsub>
 80148c0:	e72f      	b.n	8014722 <atan+0x2a>
 80148c2:	4b52      	ldr	r3, [pc, #328]	@ (8014a0c <atan+0x314>)
 80148c4:	2200      	movs	r2, #0
 80148c6:	4620      	mov	r0, r4
 80148c8:	4629      	mov	r1, r5
 80148ca:	f7eb fcdd 	bl	8000288 <__aeabi_dsub>
 80148ce:	4b4f      	ldr	r3, [pc, #316]	@ (8014a0c <atan+0x314>)
 80148d0:	4606      	mov	r6, r0
 80148d2:	460f      	mov	r7, r1
 80148d4:	2200      	movs	r2, #0
 80148d6:	4620      	mov	r0, r4
 80148d8:	4629      	mov	r1, r5
 80148da:	f7eb fcd7 	bl	800028c <__adddf3>
 80148de:	4602      	mov	r2, r0
 80148e0:	460b      	mov	r3, r1
 80148e2:	4630      	mov	r0, r6
 80148e4:	4639      	mov	r1, r7
 80148e6:	f7eb ffb1 	bl	800084c <__aeabi_ddiv>
 80148ea:	f04f 0a01 	mov.w	sl, #1
 80148ee:	4604      	mov	r4, r0
 80148f0:	460d      	mov	r5, r1
 80148f2:	e765      	b.n	80147c0 <atan+0xc8>
 80148f4:	4b47      	ldr	r3, [pc, #284]	@ (8014a14 <atan+0x31c>)
 80148f6:	429e      	cmp	r6, r3
 80148f8:	d21c      	bcs.n	8014934 <atan+0x23c>
 80148fa:	4b47      	ldr	r3, [pc, #284]	@ (8014a18 <atan+0x320>)
 80148fc:	2200      	movs	r2, #0
 80148fe:	4620      	mov	r0, r4
 8014900:	4629      	mov	r1, r5
 8014902:	f7eb fcc1 	bl	8000288 <__aeabi_dsub>
 8014906:	4b44      	ldr	r3, [pc, #272]	@ (8014a18 <atan+0x320>)
 8014908:	4606      	mov	r6, r0
 801490a:	460f      	mov	r7, r1
 801490c:	2200      	movs	r2, #0
 801490e:	4620      	mov	r0, r4
 8014910:	4629      	mov	r1, r5
 8014912:	f7eb fe71 	bl	80005f8 <__aeabi_dmul>
 8014916:	4b3d      	ldr	r3, [pc, #244]	@ (8014a0c <atan+0x314>)
 8014918:	2200      	movs	r2, #0
 801491a:	f7eb fcb7 	bl	800028c <__adddf3>
 801491e:	4602      	mov	r2, r0
 8014920:	460b      	mov	r3, r1
 8014922:	4630      	mov	r0, r6
 8014924:	4639      	mov	r1, r7
 8014926:	f7eb ff91 	bl	800084c <__aeabi_ddiv>
 801492a:	f04f 0a02 	mov.w	sl, #2
 801492e:	4604      	mov	r4, r0
 8014930:	460d      	mov	r5, r1
 8014932:	e745      	b.n	80147c0 <atan+0xc8>
 8014934:	4622      	mov	r2, r4
 8014936:	462b      	mov	r3, r5
 8014938:	4938      	ldr	r1, [pc, #224]	@ (8014a1c <atan+0x324>)
 801493a:	2000      	movs	r0, #0
 801493c:	f7eb ff86 	bl	800084c <__aeabi_ddiv>
 8014940:	f04f 0a03 	mov.w	sl, #3
 8014944:	4604      	mov	r4, r0
 8014946:	460d      	mov	r5, r1
 8014948:	e73a      	b.n	80147c0 <atan+0xc8>
 801494a:	4b35      	ldr	r3, [pc, #212]	@ (8014a20 <atan+0x328>)
 801494c:	4e35      	ldr	r6, [pc, #212]	@ (8014a24 <atan+0x32c>)
 801494e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014956:	f7eb fc97 	bl	8000288 <__aeabi_dsub>
 801495a:	4622      	mov	r2, r4
 801495c:	462b      	mov	r3, r5
 801495e:	f7eb fc93 	bl	8000288 <__aeabi_dsub>
 8014962:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8014966:	4602      	mov	r2, r0
 8014968:	460b      	mov	r3, r1
 801496a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801496e:	f7eb fc8b 	bl	8000288 <__aeabi_dsub>
 8014972:	f1bb 0f00 	cmp.w	fp, #0
 8014976:	4604      	mov	r4, r0
 8014978:	460d      	mov	r5, r1
 801497a:	f6bf aedc 	bge.w	8014736 <atan+0x3e>
 801497e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014982:	461d      	mov	r5, r3
 8014984:	e6d7      	b.n	8014736 <atan+0x3e>
 8014986:	a51c      	add	r5, pc, #112	@ (adr r5, 80149f8 <atan+0x300>)
 8014988:	e9d5 4500 	ldrd	r4, r5, [r5]
 801498c:	e6d3      	b.n	8014736 <atan+0x3e>
 801498e:	bf00      	nop
 8014990:	54442d18 	.word	0x54442d18
 8014994:	3ff921fb 	.word	0x3ff921fb
 8014998:	8800759c 	.word	0x8800759c
 801499c:	7e37e43c 	.word	0x7e37e43c
 80149a0:	e322da11 	.word	0xe322da11
 80149a4:	3f90ad3a 	.word	0x3f90ad3a
 80149a8:	24760deb 	.word	0x24760deb
 80149ac:	3fa97b4b 	.word	0x3fa97b4b
 80149b0:	a0d03d51 	.word	0xa0d03d51
 80149b4:	3fb10d66 	.word	0x3fb10d66
 80149b8:	c54c206e 	.word	0xc54c206e
 80149bc:	3fb745cd 	.word	0x3fb745cd
 80149c0:	920083ff 	.word	0x920083ff
 80149c4:	3fc24924 	.word	0x3fc24924
 80149c8:	5555550d 	.word	0x5555550d
 80149cc:	3fd55555 	.word	0x3fd55555
 80149d0:	2c6a6c2f 	.word	0x2c6a6c2f
 80149d4:	bfa2b444 	.word	0xbfa2b444
 80149d8:	52defd9a 	.word	0x52defd9a
 80149dc:	3fadde2d 	.word	0x3fadde2d
 80149e0:	af749a6d 	.word	0xaf749a6d
 80149e4:	3fb3b0f2 	.word	0x3fb3b0f2
 80149e8:	fe231671 	.word	0xfe231671
 80149ec:	3fbc71c6 	.word	0x3fbc71c6
 80149f0:	9998ebc4 	.word	0x9998ebc4
 80149f4:	3fc99999 	.word	0x3fc99999
 80149f8:	54442d18 	.word	0x54442d18
 80149fc:	bff921fb 	.word	0xbff921fb
 8014a00:	440fffff 	.word	0x440fffff
 8014a04:	7ff00000 	.word	0x7ff00000
 8014a08:	3fdbffff 	.word	0x3fdbffff
 8014a0c:	3ff00000 	.word	0x3ff00000
 8014a10:	3ff2ffff 	.word	0x3ff2ffff
 8014a14:	40038000 	.word	0x40038000
 8014a18:	3ff80000 	.word	0x3ff80000
 8014a1c:	bff00000 	.word	0xbff00000
 8014a20:	08016338 	.word	0x08016338
 8014a24:	08016358 	.word	0x08016358

08014a28 <__ieee754_sqrt>:
 8014a28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a2c:	4a66      	ldr	r2, [pc, #408]	@ (8014bc8 <__ieee754_sqrt+0x1a0>)
 8014a2e:	ec55 4b10 	vmov	r4, r5, d0
 8014a32:	43aa      	bics	r2, r5
 8014a34:	462b      	mov	r3, r5
 8014a36:	4621      	mov	r1, r4
 8014a38:	d110      	bne.n	8014a5c <__ieee754_sqrt+0x34>
 8014a3a:	4622      	mov	r2, r4
 8014a3c:	4620      	mov	r0, r4
 8014a3e:	4629      	mov	r1, r5
 8014a40:	f7eb fdda 	bl	80005f8 <__aeabi_dmul>
 8014a44:	4602      	mov	r2, r0
 8014a46:	460b      	mov	r3, r1
 8014a48:	4620      	mov	r0, r4
 8014a4a:	4629      	mov	r1, r5
 8014a4c:	f7eb fc1e 	bl	800028c <__adddf3>
 8014a50:	4604      	mov	r4, r0
 8014a52:	460d      	mov	r5, r1
 8014a54:	ec45 4b10 	vmov	d0, r4, r5
 8014a58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a5c:	2d00      	cmp	r5, #0
 8014a5e:	dc0e      	bgt.n	8014a7e <__ieee754_sqrt+0x56>
 8014a60:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8014a64:	4322      	orrs	r2, r4
 8014a66:	d0f5      	beq.n	8014a54 <__ieee754_sqrt+0x2c>
 8014a68:	b19d      	cbz	r5, 8014a92 <__ieee754_sqrt+0x6a>
 8014a6a:	4622      	mov	r2, r4
 8014a6c:	4620      	mov	r0, r4
 8014a6e:	4629      	mov	r1, r5
 8014a70:	f7eb fc0a 	bl	8000288 <__aeabi_dsub>
 8014a74:	4602      	mov	r2, r0
 8014a76:	460b      	mov	r3, r1
 8014a78:	f7eb fee8 	bl	800084c <__aeabi_ddiv>
 8014a7c:	e7e8      	b.n	8014a50 <__ieee754_sqrt+0x28>
 8014a7e:	152a      	asrs	r2, r5, #20
 8014a80:	d115      	bne.n	8014aae <__ieee754_sqrt+0x86>
 8014a82:	2000      	movs	r0, #0
 8014a84:	e009      	b.n	8014a9a <__ieee754_sqrt+0x72>
 8014a86:	0acb      	lsrs	r3, r1, #11
 8014a88:	3a15      	subs	r2, #21
 8014a8a:	0549      	lsls	r1, r1, #21
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d0fa      	beq.n	8014a86 <__ieee754_sqrt+0x5e>
 8014a90:	e7f7      	b.n	8014a82 <__ieee754_sqrt+0x5a>
 8014a92:	462a      	mov	r2, r5
 8014a94:	e7fa      	b.n	8014a8c <__ieee754_sqrt+0x64>
 8014a96:	005b      	lsls	r3, r3, #1
 8014a98:	3001      	adds	r0, #1
 8014a9a:	02dc      	lsls	r4, r3, #11
 8014a9c:	d5fb      	bpl.n	8014a96 <__ieee754_sqrt+0x6e>
 8014a9e:	1e44      	subs	r4, r0, #1
 8014aa0:	1b12      	subs	r2, r2, r4
 8014aa2:	f1c0 0420 	rsb	r4, r0, #32
 8014aa6:	fa21 f404 	lsr.w	r4, r1, r4
 8014aaa:	4323      	orrs	r3, r4
 8014aac:	4081      	lsls	r1, r0
 8014aae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014ab2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8014ab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014aba:	07d2      	lsls	r2, r2, #31
 8014abc:	bf5c      	itt	pl
 8014abe:	005b      	lslpl	r3, r3, #1
 8014ac0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8014ac4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014ac8:	bf58      	it	pl
 8014aca:	0049      	lslpl	r1, r1, #1
 8014acc:	2600      	movs	r6, #0
 8014ace:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8014ad2:	107f      	asrs	r7, r7, #1
 8014ad4:	0049      	lsls	r1, r1, #1
 8014ad6:	2016      	movs	r0, #22
 8014ad8:	4632      	mov	r2, r6
 8014ada:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8014ade:	1915      	adds	r5, r2, r4
 8014ae0:	429d      	cmp	r5, r3
 8014ae2:	bfde      	ittt	le
 8014ae4:	192a      	addle	r2, r5, r4
 8014ae6:	1b5b      	suble	r3, r3, r5
 8014ae8:	1936      	addle	r6, r6, r4
 8014aea:	0fcd      	lsrs	r5, r1, #31
 8014aec:	3801      	subs	r0, #1
 8014aee:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8014af2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014af6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8014afa:	d1f0      	bne.n	8014ade <__ieee754_sqrt+0xb6>
 8014afc:	4605      	mov	r5, r0
 8014afe:	2420      	movs	r4, #32
 8014b00:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8014b04:	4293      	cmp	r3, r2
 8014b06:	eb0c 0e00 	add.w	lr, ip, r0
 8014b0a:	dc02      	bgt.n	8014b12 <__ieee754_sqrt+0xea>
 8014b0c:	d113      	bne.n	8014b36 <__ieee754_sqrt+0x10e>
 8014b0e:	458e      	cmp	lr, r1
 8014b10:	d811      	bhi.n	8014b36 <__ieee754_sqrt+0x10e>
 8014b12:	f1be 0f00 	cmp.w	lr, #0
 8014b16:	eb0e 000c 	add.w	r0, lr, ip
 8014b1a:	da3f      	bge.n	8014b9c <__ieee754_sqrt+0x174>
 8014b1c:	2800      	cmp	r0, #0
 8014b1e:	db3d      	blt.n	8014b9c <__ieee754_sqrt+0x174>
 8014b20:	f102 0801 	add.w	r8, r2, #1
 8014b24:	1a9b      	subs	r3, r3, r2
 8014b26:	458e      	cmp	lr, r1
 8014b28:	bf88      	it	hi
 8014b2a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8014b2e:	eba1 010e 	sub.w	r1, r1, lr
 8014b32:	4465      	add	r5, ip
 8014b34:	4642      	mov	r2, r8
 8014b36:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8014b3a:	3c01      	subs	r4, #1
 8014b3c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8014b40:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014b44:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8014b48:	d1dc      	bne.n	8014b04 <__ieee754_sqrt+0xdc>
 8014b4a:	4319      	orrs	r1, r3
 8014b4c:	d01b      	beq.n	8014b86 <__ieee754_sqrt+0x15e>
 8014b4e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8014bcc <__ieee754_sqrt+0x1a4>
 8014b52:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8014bd0 <__ieee754_sqrt+0x1a8>
 8014b56:	e9da 0100 	ldrd	r0, r1, [sl]
 8014b5a:	e9db 2300 	ldrd	r2, r3, [fp]
 8014b5e:	f7eb fb93 	bl	8000288 <__aeabi_dsub>
 8014b62:	e9da 8900 	ldrd	r8, r9, [sl]
 8014b66:	4602      	mov	r2, r0
 8014b68:	460b      	mov	r3, r1
 8014b6a:	4640      	mov	r0, r8
 8014b6c:	4649      	mov	r1, r9
 8014b6e:	f7eb ffbf 	bl	8000af0 <__aeabi_dcmple>
 8014b72:	b140      	cbz	r0, 8014b86 <__ieee754_sqrt+0x15e>
 8014b74:	f1b5 3fff 	cmp.w	r5, #4294967295
 8014b78:	e9da 0100 	ldrd	r0, r1, [sl]
 8014b7c:	e9db 2300 	ldrd	r2, r3, [fp]
 8014b80:	d10e      	bne.n	8014ba0 <__ieee754_sqrt+0x178>
 8014b82:	3601      	adds	r6, #1
 8014b84:	4625      	mov	r5, r4
 8014b86:	1073      	asrs	r3, r6, #1
 8014b88:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8014b8c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8014b90:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8014b94:	086b      	lsrs	r3, r5, #1
 8014b96:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8014b9a:	e759      	b.n	8014a50 <__ieee754_sqrt+0x28>
 8014b9c:	4690      	mov	r8, r2
 8014b9e:	e7c1      	b.n	8014b24 <__ieee754_sqrt+0xfc>
 8014ba0:	f7eb fb74 	bl	800028c <__adddf3>
 8014ba4:	e9da 8900 	ldrd	r8, r9, [sl]
 8014ba8:	4602      	mov	r2, r0
 8014baa:	460b      	mov	r3, r1
 8014bac:	4640      	mov	r0, r8
 8014bae:	4649      	mov	r1, r9
 8014bb0:	f7eb ff94 	bl	8000adc <__aeabi_dcmplt>
 8014bb4:	b120      	cbz	r0, 8014bc0 <__ieee754_sqrt+0x198>
 8014bb6:	1cab      	adds	r3, r5, #2
 8014bb8:	bf08      	it	eq
 8014bba:	3601      	addeq	r6, #1
 8014bbc:	3502      	adds	r5, #2
 8014bbe:	e7e2      	b.n	8014b86 <__ieee754_sqrt+0x15e>
 8014bc0:	1c6b      	adds	r3, r5, #1
 8014bc2:	f023 0501 	bic.w	r5, r3, #1
 8014bc6:	e7de      	b.n	8014b86 <__ieee754_sqrt+0x15e>
 8014bc8:	7ff00000 	.word	0x7ff00000
 8014bcc:	08016380 	.word	0x08016380
 8014bd0:	08016378 	.word	0x08016378

08014bd4 <_init>:
 8014bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bd6:	bf00      	nop
 8014bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014bda:	bc08      	pop	{r3}
 8014bdc:	469e      	mov	lr, r3
 8014bde:	4770      	bx	lr

08014be0 <_fini>:
 8014be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014be2:	bf00      	nop
 8014be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014be6:	bc08      	pop	{r3}
 8014be8:	469e      	mov	lr, r3
 8014bea:	4770      	bx	lr
