
Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014954  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001780  08014ae8  08014ae8  00015ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016268  08016268  000182b4  2**0
                  CONTENTS
  4 .ARM          00000008  08016268  08016268  00017268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016270  08016270  000182b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016270  08016270  00017270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016274  08016274  00017274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  08016278  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000182b4  2**0
                  CONTENTS
 10 .bss          00000954  200002b4  200002b4  000182b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c08  20000c08  000182b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000182b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019579  00000000  00000000  000182e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b6b  00000000  00000000  0003185d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  000353c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001194  00000000  00000000  000369a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002645f  00000000  00000000  00037b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df94  00000000  00000000  0005df9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d77d6  00000000  00000000  0007bf2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00153705  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f84  00000000  00000000  00153748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0015a6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b4 	.word	0x200002b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014acc 	.word	0x08014acc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b8 	.word	0x200002b8
 80001cc:	08014acc 	.word	0x08014acc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9d3 	b.w	8001050 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b988 	b.w	8001050 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	468e      	mov	lr, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	4688      	mov	r8, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4617      	mov	r7, r2
 8000d6c:	d962      	bls.n	8000e34 <__udivmoddi4+0xdc>
 8000d6e:	fab2 f682 	clz	r6, r2
 8000d72:	b14e      	cbz	r6, 8000d88 <__udivmoddi4+0x30>
 8000d74:	f1c6 0320 	rsb	r3, r6, #32
 8000d78:	fa01 f806 	lsl.w	r8, r1, r6
 8000d7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d80:	40b7      	lsls	r7, r6
 8000d82:	ea43 0808 	orr.w	r8, r3, r8
 8000d86:	40b4      	lsls	r4, r6
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	fa1f fc87 	uxth.w	ip, r7
 8000d90:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d94:	0c23      	lsrs	r3, r4, #16
 8000d96:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9e:	fb01 f20c 	mul.w	r2, r1, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dac:	f080 80ea 	bcs.w	8000f84 <__udivmoddi4+0x22c>
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f240 80e7 	bls.w	8000f84 <__udivmoddi4+0x22c>
 8000db6:	3902      	subs	r1, #2
 8000db8:	443b      	add	r3, r7
 8000dba:	1a9a      	subs	r2, r3, r2
 8000dbc:	b2a3      	uxth	r3, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dca:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dce:	459c      	cmp	ip, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x8e>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd8:	f080 80d6 	bcs.w	8000f88 <__udivmoddi4+0x230>
 8000ddc:	459c      	cmp	ip, r3
 8000dde:	f240 80d3 	bls.w	8000f88 <__udivmoddi4+0x230>
 8000de2:	443b      	add	r3, r7
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dea:	eba3 030c 	sub.w	r3, r3, ip
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40f3      	lsrs	r3, r6
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xb6>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb0>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x14c>
 8000e16:	4573      	cmp	r3, lr
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xc8>
 8000e1a:	4282      	cmp	r2, r0
 8000e1c:	f200 8105 	bhi.w	800102a <__udivmoddi4+0x2d2>
 8000e20:	1a84      	subs	r4, r0, r2
 8000e22:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	4690      	mov	r8, r2
 8000e2a:	2d00      	cmp	r5, #0
 8000e2c:	d0e5      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e2e:	e9c5 4800 	strd	r4, r8, [r5]
 8000e32:	e7e2      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f000 8090 	beq.w	8000f5a <__udivmoddi4+0x202>
 8000e3a:	fab2 f682 	clz	r6, r2
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	f040 80a4 	bne.w	8000f8c <__udivmoddi4+0x234>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	0c03      	lsrs	r3, r0, #16
 8000e48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4c:	b280      	uxth	r0, r0
 8000e4e:	b2bc      	uxth	r4, r7
 8000e50:	2101      	movs	r1, #1
 8000e52:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e56:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x11e>
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x11c>
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	f200 80e0 	bhi.w	8001034 <__udivmoddi4+0x2dc>
 8000e74:	46c4      	mov	ip, r8
 8000e76:	1a9b      	subs	r3, r3, r2
 8000e78:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e7c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e80:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e84:	fb02 f404 	mul.w	r4, r2, r4
 8000e88:	429c      	cmp	r4, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x144>
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x142>
 8000e94:	429c      	cmp	r4, r3
 8000e96:	f200 80ca 	bhi.w	800102e <__udivmoddi4+0x2d6>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	1b1b      	subs	r3, r3, r4
 8000e9e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x98>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb4:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ebc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ec0:	4323      	orrs	r3, r4
 8000ec2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec6:	fa1f fc87 	uxth.w	ip, r7
 8000eca:	fbbe f0f9 	udiv	r0, lr, r9
 8000ece:	0c1c      	lsrs	r4, r3, #16
 8000ed0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000edc:	45a6      	cmp	lr, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d909      	bls.n	8000ef8 <__udivmoddi4+0x1a0>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eea:	f080 809c 	bcs.w	8001026 <__udivmoddi4+0x2ce>
 8000eee:	45a6      	cmp	lr, r4
 8000ef0:	f240 8099 	bls.w	8001026 <__udivmoddi4+0x2ce>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	eba4 040e 	sub.w	r4, r4, lr
 8000efc:	fa1f fe83 	uxth.w	lr, r3
 8000f00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f04:	fb09 4413 	mls	r4, r9, r3, r4
 8000f08:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f0c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f10:	45a4      	cmp	ip, r4
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1ce>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f1a:	f080 8082 	bcs.w	8001022 <__udivmoddi4+0x2ca>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d97f      	bls.n	8001022 <__udivmoddi4+0x2ca>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f2a:	eba4 040c 	sub.w	r4, r4, ip
 8000f2e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f32:	4564      	cmp	r4, ip
 8000f34:	4673      	mov	r3, lr
 8000f36:	46e1      	mov	r9, ip
 8000f38:	d362      	bcc.n	8001000 <__udivmoddi4+0x2a8>
 8000f3a:	d05f      	beq.n	8000ffc <__udivmoddi4+0x2a4>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x1fe>
 8000f3e:	ebb8 0203 	subs.w	r2, r8, r3
 8000f42:	eb64 0409 	sbc.w	r4, r4, r9
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4e:	431e      	orrs	r6, r3
 8000f50:	40cc      	lsrs	r4, r1
 8000f52:	e9c5 6400 	strd	r6, r4, [r5]
 8000f56:	2100      	movs	r1, #0
 8000f58:	e74f      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000f5a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5e:	0c01      	lsrs	r1, r0, #16
 8000f60:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f64:	b280      	uxth	r0, r0
 8000f66:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	463c      	mov	r4, r7
 8000f70:	46b8      	mov	r8, r7
 8000f72:	46be      	mov	lr, r7
 8000f74:	2620      	movs	r6, #32
 8000f76:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f7a:	eba2 0208 	sub.w	r2, r2, r8
 8000f7e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f82:	e766      	b.n	8000e52 <__udivmoddi4+0xfa>
 8000f84:	4601      	mov	r1, r0
 8000f86:	e718      	b.n	8000dba <__udivmoddi4+0x62>
 8000f88:	4610      	mov	r0, r2
 8000f8a:	e72c      	b.n	8000de6 <__udivmoddi4+0x8e>
 8000f8c:	f1c6 0220 	rsb	r2, r6, #32
 8000f90:	fa2e f302 	lsr.w	r3, lr, r2
 8000f94:	40b7      	lsls	r7, r6
 8000f96:	40b1      	lsls	r1, r6
 8000f98:	fa20 f202 	lsr.w	r2, r0, r2
 8000f9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa6:	b2bc      	uxth	r4, r7
 8000fa8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fac:	0c11      	lsrs	r1, r2, #16
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb08 f904 	mul.w	r9, r8, r4
 8000fb6:	40b0      	lsls	r0, r6
 8000fb8:	4589      	cmp	r9, r1
 8000fba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fbe:	b280      	uxth	r0, r0
 8000fc0:	d93e      	bls.n	8001040 <__udivmoddi4+0x2e8>
 8000fc2:	1879      	adds	r1, r7, r1
 8000fc4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc8:	d201      	bcs.n	8000fce <__udivmoddi4+0x276>
 8000fca:	4589      	cmp	r9, r1
 8000fcc:	d81f      	bhi.n	800100e <__udivmoddi4+0x2b6>
 8000fce:	eba1 0109 	sub.w	r1, r1, r9
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fb09 f804 	mul.w	r8, r9, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe4:	4542      	cmp	r2, r8
 8000fe6:	d229      	bcs.n	800103c <__udivmoddi4+0x2e4>
 8000fe8:	18ba      	adds	r2, r7, r2
 8000fea:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fee:	d2c4      	bcs.n	8000f7a <__udivmoddi4+0x222>
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d2c2      	bcs.n	8000f7a <__udivmoddi4+0x222>
 8000ff4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff8:	443a      	add	r2, r7
 8000ffa:	e7be      	b.n	8000f7a <__udivmoddi4+0x222>
 8000ffc:	45f0      	cmp	r8, lr
 8000ffe:	d29d      	bcs.n	8000f3c <__udivmoddi4+0x1e4>
 8001000:	ebbe 0302 	subs.w	r3, lr, r2
 8001004:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001008:	3801      	subs	r0, #1
 800100a:	46e1      	mov	r9, ip
 800100c:	e796      	b.n	8000f3c <__udivmoddi4+0x1e4>
 800100e:	eba7 0909 	sub.w	r9, r7, r9
 8001012:	4449      	add	r1, r9
 8001014:	f1a8 0c02 	sub.w	ip, r8, #2
 8001018:	fbb1 f9fe 	udiv	r9, r1, lr
 800101c:	fb09 f804 	mul.w	r8, r9, r4
 8001020:	e7db      	b.n	8000fda <__udivmoddi4+0x282>
 8001022:	4673      	mov	r3, lr
 8001024:	e77f      	b.n	8000f26 <__udivmoddi4+0x1ce>
 8001026:	4650      	mov	r0, sl
 8001028:	e766      	b.n	8000ef8 <__udivmoddi4+0x1a0>
 800102a:	4608      	mov	r0, r1
 800102c:	e6fd      	b.n	8000e2a <__udivmoddi4+0xd2>
 800102e:	443b      	add	r3, r7
 8001030:	3a02      	subs	r2, #2
 8001032:	e733      	b.n	8000e9c <__udivmoddi4+0x144>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	443b      	add	r3, r7
 800103a:	e71c      	b.n	8000e76 <__udivmoddi4+0x11e>
 800103c:	4649      	mov	r1, r9
 800103e:	e79c      	b.n	8000f7a <__udivmoddi4+0x222>
 8001040:	eba1 0109 	sub.w	r1, r1, r9
 8001044:	46c4      	mov	ip, r8
 8001046:	fbb1 f9fe 	udiv	r9, r1, lr
 800104a:	fb09 f804 	mul.w	r8, r9, r4
 800104e:	e7c4      	b.n	8000fda <__udivmoddi4+0x282>

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af04      	add	r7, sp, #16
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 800105e:	4b32      	ldr	r3, [pc, #200]	@ (8001128 <set_int_enable+0xd4>)
 8001060:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001064:	2b00      	cmp	r3, #0
 8001066:	d025      	beq.n	80010b4 <set_int_enable+0x60>
        if (enable)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 800106e:	2302      	movs	r3, #2
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e001      	b.n	8001078 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001078:	4b2b      	ldr	r3, [pc, #172]	@ (8001128 <set_int_enable+0xd4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	b299      	uxth	r1, r3
 8001082:	4b29      	ldr	r3, [pc, #164]	@ (8001128 <set_int_enable+0xd4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	7bdb      	ldrb	r3, [r3, #15]
 8001088:	461a      	mov	r2, r3
 800108a:	2305      	movs	r3, #5
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f107 030f 	add.w	r3, r7, #15
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	4824      	ldr	r0, [pc, #144]	@ (800112c <set_int_enable+0xd8>)
 800109c:	f00c fd10 	bl	800dac0 <HAL_I2C_Mem_Write>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <set_int_enable+0x58>
            return -1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e039      	b.n	8001120 <set_int_enable+0xcc>
        st.chip_cfg.int_enable = tmp;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <set_int_enable+0xd4>)
 80010b0:	745a      	strb	r2, [r3, #17]
 80010b2:	e034      	b.n	800111e <set_int_enable+0xca>
    } else {
        if (!st.chip_cfg.sensors)
 80010b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <set_int_enable+0xd4>)
 80010b6:	7a9b      	ldrb	r3, [r3, #10]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <set_int_enable+0x6e>
            return -1;
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	e02e      	b.n	8001120 <set_int_enable+0xcc>
        if (enable && st.chip_cfg.int_enable)
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <set_int_enable+0x80>
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <set_int_enable+0xd4>)
 80010ca:	7c5b      	ldrb	r3, [r3, #17]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <set_int_enable+0x80>
            return 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e025      	b.n	8001120 <set_int_enable+0xcc>
        if (enable)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <set_int_enable+0x8c>
            tmp = BIT_DATA_RDY_EN;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e001      	b.n	80010e4 <set_int_enable+0x90>
        else
            tmp = 0x00;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80010e4:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <set_int_enable+0xd4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	b299      	uxth	r1, r3
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <set_int_enable+0xd4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	7bdb      	ldrb	r3, [r3, #15]
 80010f4:	461a      	mov	r2, r3
 80010f6:	2305      	movs	r3, #5
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	2301      	movs	r3, #1
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	f107 030f 	add.w	r3, r7, #15
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	4809      	ldr	r0, [pc, #36]	@ (800112c <set_int_enable+0xd8>)
 8001108:	f00c fcda 	bl	800dac0 <HAL_I2C_Mem_Write>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <set_int_enable+0xc4>
            return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e003      	b.n	8001120 <set_int_enable+0xcc>
        st.chip_cfg.int_enable = tmp;
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	4b03      	ldr	r3, [pc, #12]	@ (8001128 <set_int_enable+0xd4>)
 800111c:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000000 	.word	0x20000000
 800112c:	20000334 	.word	0x20000334

08001130 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af04      	add	r7, sp, #16
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = 0x80;//BIT_RESET;
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 800113a:	4b95      	ldr	r3, [pc, #596]	@ (8001390 <mpu_init+0x260>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	b299      	uxth	r1, r3
 8001144:	4b92      	ldr	r3, [pc, #584]	@ (8001390 <mpu_init+0x260>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	7c9b      	ldrb	r3, [r3, #18]
 800114a:	461a      	mov	r2, r3
 800114c:	2305      	movs	r3, #5
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	2301      	movs	r3, #1
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	463b      	mov	r3, r7
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	488e      	ldr	r0, [pc, #568]	@ (8001394 <mpu_init+0x264>)
 800115c:	f00c fcb0 	bl	800dac0 <HAL_I2C_Mem_Write>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <mpu_init+0x3c>
        return -1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e10c      	b.n	8001386 <mpu_init+0x256>
    delay_ms(100);
 800116c:	2064      	movs	r0, #100	@ 0x64
 800116e:	f00b feb7 	bl	800cee0 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8001172:	2300      	movs	r3, #0
 8001174:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 8001176:	4b86      	ldr	r3, [pc, #536]	@ (8001390 <mpu_init+0x260>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b299      	uxth	r1, r3
 8001180:	4b83      	ldr	r3, [pc, #524]	@ (8001390 <mpu_init+0x260>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	7c9b      	ldrb	r3, [r3, #18]
 8001186:	461a      	mov	r2, r3
 8001188:	2305      	movs	r3, #5
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2301      	movs	r3, #1
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	463b      	mov	r3, r7
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	487f      	ldr	r0, [pc, #508]	@ (8001394 <mpu_init+0x264>)
 8001198:	f00c fc92 	bl	800dac0 <HAL_I2C_Mem_Write>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <mpu_init+0x78>
        return -1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	e0ee      	b.n	8001386 <mpu_init+0x256>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 80011a8:	4b79      	ldr	r3, [pc, #484]	@ (8001390 <mpu_init+0x260>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	b299      	uxth	r1, r3
 80011b2:	4b77      	ldr	r3, [pc, #476]	@ (8001390 <mpu_init+0x260>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	7d9b      	ldrb	r3, [r3, #22]
 80011b8:	461a      	mov	r2, r3
 80011ba:	2305      	movs	r3, #5
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	2306      	movs	r3, #6
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	463b      	mov	r3, r7
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	4872      	ldr	r0, [pc, #456]	@ (8001394 <mpu_init+0x264>)
 80011ca:	f00c fd73 	bl	800dcb4 <HAL_I2C_Mem_Read>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <mpu_init+0xaa>
        return -1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	e0d5      	b.n	8001386 <mpu_init+0x256>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 80011da:	797b      	ldrb	r3, [r7, #5]
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 80011fa:	787b      	ldrb	r3, [r7, #1]
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8001204:	4313      	orrs	r3, r2
 8001206:	b25b      	sxtb	r3, r3
 8001208:	71fb      	strb	r3, [r7, #7]

    if (rev) {
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d015      	beq.n	800123c <mpu_init+0x10c>
        /* Congrats, these parts are better. */
        if (rev == 1)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d103      	bne.n	800121e <mpu_init+0xee>
            st.chip_cfg.accel_half = 1;
 8001216:	4b5e      	ldr	r3, [pc, #376]	@ (8001390 <mpu_init+0x260>)
 8001218:	2201      	movs	r2, #1
 800121a:	74da      	strb	r2, [r3, #19]
 800121c:	e041      	b.n	80012a2 <mpu_init+0x172>
        else if (rev == 2)
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d103      	bne.n	800122c <mpu_init+0xfc>
            st.chip_cfg.accel_half = 0;
 8001224:	4b5a      	ldr	r3, [pc, #360]	@ (8001390 <mpu_init+0x260>)
 8001226:	2200      	movs	r2, #0
 8001228:	74da      	strb	r2, [r3, #19]
 800122a:	e03a      	b.n	80012a2 <mpu_init+0x172>
        else {
            log_e("Unsupported software product rev %d.\n",rev);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4619      	mov	r1, r3
 8001230:	4859      	ldr	r0, [pc, #356]	@ (8001398 <mpu_init+0x268>)
 8001232:	f010 fec3 	bl	8011fbc <iprintf>
            return -1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e0a4      	b.n	8001386 <mpu_init+0x256>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, &(data[0])))
 800123c:	4b54      	ldr	r3, [pc, #336]	@ (8001390 <mpu_init+0x260>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	b299      	uxth	r1, r3
 8001246:	4b52      	ldr	r3, [pc, #328]	@ (8001390 <mpu_init+0x260>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	78db      	ldrb	r3, [r3, #3]
 800124c:	461a      	mov	r2, r3
 800124e:	2305      	movs	r3, #5
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	2301      	movs	r3, #1
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	463b      	mov	r3, r7
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	484d      	ldr	r0, [pc, #308]	@ (8001394 <mpu_init+0x264>)
 800125e:	f00c fd29 	bl	800dcb4 <HAL_I2C_Mem_Read>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <mpu_init+0x13e>
            return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	e08b      	b.n	8001386 <mpu_init+0x256>
        rev = data[0] & 0x0F;
 800126e:	783b      	ldrb	r3, [r7, #0]
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	71fb      	strb	r3, [r7, #7]
        if (!rev) {
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <mpu_init+0x158>
            log_e("Product ID read as 0 indicates device is either incompatible or an MPU3050.\r\n");
 800127c:	4847      	ldr	r0, [pc, #284]	@ (800139c <mpu_init+0x26c>)
 800127e:	f010 ff05 	bl	801208c <puts>
            return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e07e      	b.n	8001386 <mpu_init+0x256>
        } else if (rev == 4) {
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b04      	cmp	r3, #4
 800128c:	d106      	bne.n	800129c <mpu_init+0x16c>
            log_i("Half sensitivity part found.\r\n");
 800128e:	4844      	ldr	r0, [pc, #272]	@ (80013a0 <mpu_init+0x270>)
 8001290:	f010 fefc 	bl	801208c <puts>
            st.chip_cfg.accel_half = 1;
 8001294:	4b3e      	ldr	r3, [pc, #248]	@ (8001390 <mpu_init+0x260>)
 8001296:	2201      	movs	r2, #1
 8001298:	74da      	strb	r2, [r3, #19]
 800129a:	e002      	b.n	80012a2 <mpu_init+0x172>
        } else
            st.chip_cfg.accel_half = 0;
 800129c:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <mpu_init+0x260>)
 800129e:	2200      	movs	r2, #0
 80012a0:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 80012a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <mpu_init+0x260>)
 80012a4:	22ff      	movs	r2, #255	@ 0xff
 80012a6:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 80012a8:	4b39      	ldr	r3, [pc, #228]	@ (8001390 <mpu_init+0x260>)
 80012aa:	22ff      	movs	r2, #255	@ 0xff
 80012ac:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 80012ae:	4b38      	ldr	r3, [pc, #224]	@ (8001390 <mpu_init+0x260>)
 80012b0:	22ff      	movs	r2, #255	@ 0xff
 80012b2:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 80012b4:	4b36      	ldr	r3, [pc, #216]	@ (8001390 <mpu_init+0x260>)
 80012b6:	22ff      	movs	r2, #255	@ 0xff
 80012b8:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 80012ba:	4b35      	ldr	r3, [pc, #212]	@ (8001390 <mpu_init+0x260>)
 80012bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012c0:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 80012c2:	4b33      	ldr	r3, [pc, #204]	@ (8001390 <mpu_init+0x260>)
 80012c4:	22ff      	movs	r2, #255	@ 0xff
 80012c6:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 80012c8:	4b31      	ldr	r3, [pc, #196]	@ (8001390 <mpu_init+0x260>)
 80012ca:	22ff      	movs	r2, #255	@ 0xff
 80012cc:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80012ce:	4b30      	ldr	r3, [pc, #192]	@ (8001390 <mpu_init+0x260>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 80012d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001390 <mpu_init+0x260>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    st.chip_cfg.latched_int = 0;
 80012dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001390 <mpu_init+0x260>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    st.chip_cfg.int_motion_only = 0;
 80012e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <mpu_init+0x260>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 80012ea:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <mpu_init+0x260>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80012f0:	220c      	movs	r2, #12
 80012f2:	2100      	movs	r1, #0
 80012f4:	482b      	ldr	r0, [pc, #172]	@ (80013a4 <mpu_init+0x274>)
 80012f6:	f010 ffb9 	bl	801226c <memset>
    st.chip_cfg.dmp_on = 0;
 80012fa:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <mpu_init+0x260>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    st.chip_cfg.dmp_loaded = 0;
 8001302:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <mpu_init+0x260>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <mpu_init+0x260>)
 800130c:	2200      	movs	r2, #0
 800130e:	84da      	strh	r2, [r3, #38]	@ 0x26

    if (mpu_set_gyro_fsr(2000))
 8001310:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001314:	f000 fa76 	bl	8001804 <mpu_set_gyro_fsr>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <mpu_init+0x1f4>
        return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e030      	b.n	8001386 <mpu_init+0x256>
    if (mpu_set_accel_fsr(2))
 8001324:	2002      	movs	r0, #2
 8001326:	f000 fb07 	bl	8001938 <mpu_set_accel_fsr>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <mpu_init+0x206>
        return -1;
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	e027      	b.n	8001386 <mpu_init+0x256>
    if (mpu_set_lpf(42))
 8001336:	202a      	movs	r0, #42	@ 0x2a
 8001338:	f000 fbae 	bl	8001a98 <mpu_set_lpf>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <mpu_init+0x218>
        return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e01e      	b.n	8001386 <mpu_init+0x256>
    if (mpu_set_sample_rate(50))
 8001348:	2032      	movs	r0, #50	@ 0x32
 800134a:	f000 fc19 	bl	8001b80 <mpu_set_sample_rate>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <mpu_init+0x22a>
        return -1;
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	e015      	b.n	8001386 <mpu_init+0x256>
    if (mpu_configure_fifo(0))
 800135a:	2000      	movs	r0, #0
 800135c:	f000 fd0a 	bl	8001d74 <mpu_configure_fifo>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <mpu_init+0x23c>
        return -1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e00c      	b.n	8001386 <mpu_init+0x256>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 800136c:	2000      	movs	r0, #0
 800136e:	f000 fe89 	bl	8002084 <mpu_set_bypass>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <mpu_init+0x24e>
        return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	e003      	b.n	8001386 <mpu_init+0x256>
#endif

    mpu_set_sensors(0);
 800137e:	2000      	movs	r0, #0
 8001380:	f000 fd4a 	bl	8001e18 <mpu_set_sensors>
    return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000000 	.word	0x20000000
 8001394:	20000334 	.word	0x20000334
 8001398:	08014ae8 	.word	0x08014ae8
 800139c:	08014b10 	.word	0x08014b10
 80013a0:	08014b60 	.word	0x08014b60
 80013a4:	20000016 	.word	0x20000016

080013a8 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af04      	add	r7, sp, #16
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b28      	cmp	r3, #40	@ 0x28
 80013b6:	d902      	bls.n	80013be <mpu_lp_accel_mode+0x16>
        return -1;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	e07d      	b.n	80014ba <mpu_lp_accel_mode+0x112>

    if (!rate) {
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d125      	bne.n	8001410 <mpu_lp_accel_mode+0x68>
        mpu_set_int_latched(0);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f000 ff5b 	bl	8002280 <mpu_set_int_latched>
        tmp[0] = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 80013ce:	2307      	movs	r3, #7
 80013d0:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80013d2:	4b3c      	ldr	r3, [pc, #240]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	b299      	uxth	r1, r3
 80013dc:	4b39      	ldr	r3, [pc, #228]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	7c9b      	ldrb	r3, [r3, #18]
 80013e2:	461a      	mov	r2, r3
 80013e4:	2305      	movs	r3, #5
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	2302      	movs	r3, #2
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	4834      	ldr	r0, [pc, #208]	@ (80014c8 <mpu_lp_accel_mode+0x120>)
 80013f6:	f00c fb63 	bl	800dac0 <HAL_I2C_Mem_Write>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <mpu_lp_accel_mode+0x5e>
            return -1;
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	e059      	b.n	80014ba <mpu_lp_accel_mode+0x112>
        st.chip_cfg.lp_accel_mode = 0;
 8001406:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 8001408:	2200      	movs	r2, #0
 800140a:	751a      	strb	r2, [r3, #20]
        return 0;
 800140c:	2300      	movs	r3, #0
 800140e:	e054      	b.n	80014ba <mpu_lp_accel_mode+0x112>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8001410:	2001      	movs	r0, #1
 8001412:	f000 ff35 	bl	8002280 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8001416:	2320      	movs	r3, #32
 8001418:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d105      	bne.n	800142c <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_1_25HZ;
 8001420:	2300      	movs	r3, #0
 8001422:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001424:	2005      	movs	r0, #5
 8001426:	f000 fb37 	bl	8001a98 <mpu_set_lpf>
 800142a:	e016      	b.n	800145a <mpu_lp_accel_mode+0xb2>
    } else if (rate <= 5) {
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d805      	bhi.n	800143e <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_5HZ;
 8001432:	2301      	movs	r3, #1
 8001434:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001436:	2005      	movs	r0, #5
 8001438:	f000 fb2e 	bl	8001a98 <mpu_set_lpf>
 800143c:	e00d      	b.n	800145a <mpu_lp_accel_mode+0xb2>
    } else if (rate <= 20) {
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b14      	cmp	r3, #20
 8001442:	d805      	bhi.n	8001450 <mpu_lp_accel_mode+0xa8>
        tmp[1] = INV_LPA_20HZ;
 8001444:	2302      	movs	r3, #2
 8001446:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 8001448:	200a      	movs	r0, #10
 800144a:	f000 fb25 	bl	8001a98 <mpu_set_lpf>
 800144e:	e004      	b.n	800145a <mpu_lp_accel_mode+0xb2>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8001450:	2303      	movs	r3, #3
 8001452:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8001454:	2014      	movs	r0, #20
 8001456:	f000 fb1f 	bl	8001a98 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 800145a:	7b7b      	ldrb	r3, [r7, #13]
 800145c:	b25b      	sxtb	r3, r3
 800145e:	019b      	lsls	r3, r3, #6
 8001460:	b25b      	sxtb	r3, r3
 8001462:	f043 0307 	orr.w	r3, r3, #7
 8001466:	b25b      	sxtb	r3, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	b299      	uxth	r1, r3
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7c9b      	ldrb	r3, [r3, #18]
 800147c:	461a      	mov	r2, r3
 800147e:	2305      	movs	r3, #5
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	2302      	movs	r3, #2
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	480e      	ldr	r0, [pc, #56]	@ (80014c8 <mpu_lp_accel_mode+0x120>)
 8001490:	f00c fb16 	bl	800dac0 <HAL_I2C_Mem_Write>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <mpu_lp_accel_mode+0xf8>
        return -1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e00c      	b.n	80014ba <mpu_lp_accel_mode+0x112>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80014a2:	2208      	movs	r2, #8
 80014a4:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 fc5e 	bl	8001d74 <mpu_configure_fifo>

    return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000334 	.word	0x20000334

080014cc <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af04      	add	r7, sp, #16
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80014d2:	4b9e      	ldr	r3, [pc, #632]	@ (800174c <mpu_reset_fifo+0x280>)
 80014d4:	7a9b      	ldrb	r3, [r3, #10]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <mpu_reset_fifo+0x14>
        return -1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	e153      	b.n	8001788 <mpu_reset_fifo+0x2bc>

    data = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80014e4:	4b99      	ldr	r3, [pc, #612]	@ (800174c <mpu_reset_fifo+0x280>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	b299      	uxth	r1, r3
 80014ee:	4b97      	ldr	r3, [pc, #604]	@ (800174c <mpu_reset_fifo+0x280>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	7bdb      	ldrb	r3, [r3, #15]
 80014f4:	461a      	mov	r2, r3
 80014f6:	2305      	movs	r3, #5
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	2301      	movs	r3, #1
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2301      	movs	r3, #1
 8001504:	4892      	ldr	r0, [pc, #584]	@ (8001750 <mpu_reset_fifo+0x284>)
 8001506:	f00c fadb 	bl	800dac0 <HAL_I2C_Mem_Write>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <mpu_reset_fifo+0x4a>
        return -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	e138      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001516:	4b8d      	ldr	r3, [pc, #564]	@ (800174c <mpu_reset_fifo+0x280>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	b299      	uxth	r1, r3
 8001520:	4b8a      	ldr	r3, [pc, #552]	@ (800174c <mpu_reset_fifo+0x280>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	795b      	ldrb	r3, [r3, #5]
 8001526:	461a      	mov	r2, r3
 8001528:	2305      	movs	r3, #5
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	2301      	movs	r3, #1
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	4886      	ldr	r0, [pc, #536]	@ (8001750 <mpu_reset_fifo+0x284>)
 8001538:	f00c fac2 	bl	800dac0 <HAL_I2C_Mem_Write>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <mpu_reset_fifo+0x7c>
        return -1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e11f      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001548:	4b80      	ldr	r3, [pc, #512]	@ (800174c <mpu_reset_fifo+0x280>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b299      	uxth	r1, r3
 8001552:	4b7e      	ldr	r3, [pc, #504]	@ (800174c <mpu_reset_fifo+0x280>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	791b      	ldrb	r3, [r3, #4]
 8001558:	461a      	mov	r2, r3
 800155a:	2305      	movs	r3, #5
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	2301      	movs	r3, #1
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2301      	movs	r3, #1
 8001568:	4879      	ldr	r0, [pc, #484]	@ (8001750 <mpu_reset_fifo+0x284>)
 800156a:	f00c faa9 	bl	800dac0 <HAL_I2C_Mem_Write>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <mpu_reset_fifo+0xae>
        return -1;
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	e106      	b.n	8001788 <mpu_reset_fifo+0x2bc>

    if (st.chip_cfg.dmp_on) {
 800157a:	4b74      	ldr	r3, [pc, #464]	@ (800174c <mpu_reset_fifo+0x280>)
 800157c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001580:	2b00      	cmp	r3, #0
 8001582:	d07e      	beq.n	8001682 <mpu_reset_fifo+0x1b6>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8001584:	230c      	movs	r3, #12
 8001586:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001588:	4b70      	ldr	r3, [pc, #448]	@ (800174c <mpu_reset_fifo+0x280>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	b299      	uxth	r1, r3
 8001592:	4b6e      	ldr	r3, [pc, #440]	@ (800174c <mpu_reset_fifo+0x280>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	791b      	ldrb	r3, [r3, #4]
 8001598:	461a      	mov	r2, r3
 800159a:	2305      	movs	r3, #5
 800159c:	9302      	str	r3, [sp, #8]
 800159e:	2301      	movs	r3, #1
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2301      	movs	r3, #1
 80015a8:	4869      	ldr	r0, [pc, #420]	@ (8001750 <mpu_reset_fifo+0x284>)
 80015aa:	f00c fa89 	bl	800dac0 <HAL_I2C_Mem_Write>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <mpu_reset_fifo+0xee>
            return -1;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	e0e6      	b.n	8001788 <mpu_reset_fifo+0x2bc>
       
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80015ba:	23c0      	movs	r3, #192	@ 0xc0
 80015bc:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80015be:	4b63      	ldr	r3, [pc, #396]	@ (800174c <mpu_reset_fifo+0x280>)
 80015c0:	7a9b      	ldrb	r3, [r3, #10]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <mpu_reset_fifo+0x108>
            data |= BIT_AUX_IF_EN;
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f043 0320 	orr.w	r3, r3, #32
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80015d4:	4b5d      	ldr	r3, [pc, #372]	@ (800174c <mpu_reset_fifo+0x280>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	b299      	uxth	r1, r3
 80015de:	4b5b      	ldr	r3, [pc, #364]	@ (800174c <mpu_reset_fifo+0x280>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	791b      	ldrb	r3, [r3, #4]
 80015e4:	461a      	mov	r2, r3
 80015e6:	2305      	movs	r3, #5
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2301      	movs	r3, #1
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2301      	movs	r3, #1
 80015f4:	4856      	ldr	r0, [pc, #344]	@ (8001750 <mpu_reset_fifo+0x284>)
 80015f6:	f00c fa63 	bl	800dac0 <HAL_I2C_Mem_Write>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <mpu_reset_fifo+0x13a>
            return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
 8001604:	e0c0      	b.n	8001788 <mpu_reset_fifo+0x2bc>
        if (st.chip_cfg.int_enable)
 8001606:	4b51      	ldr	r3, [pc, #324]	@ (800174c <mpu_reset_fifo+0x280>)
 8001608:	7c5b      	ldrb	r3, [r3, #17]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <mpu_reset_fifo+0x148>
            data = BIT_DMP_INT_EN;
 800160e:	2302      	movs	r3, #2
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	e001      	b.n	8001618 <mpu_reset_fifo+0x14c>
        else
            data = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001618:	4b4c      	ldr	r3, [pc, #304]	@ (800174c <mpu_reset_fifo+0x280>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	b299      	uxth	r1, r3
 8001622:	4b4a      	ldr	r3, [pc, #296]	@ (800174c <mpu_reset_fifo+0x280>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	7bdb      	ldrb	r3, [r3, #15]
 8001628:	461a      	mov	r2, r3
 800162a:	2305      	movs	r3, #5
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	2301      	movs	r3, #1
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2301      	movs	r3, #1
 8001638:	4845      	ldr	r0, [pc, #276]	@ (8001750 <mpu_reset_fifo+0x284>)
 800163a:	f00c fa41 	bl	800dac0 <HAL_I2C_Mem_Write>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <mpu_reset_fifo+0x17e>
            return -1;
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	e09e      	b.n	8001788 <mpu_reset_fifo+0x2bc>
        data = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800164e:	4b3f      	ldr	r3, [pc, #252]	@ (800174c <mpu_reset_fifo+0x280>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	b299      	uxth	r1, r3
 8001658:	4b3c      	ldr	r3, [pc, #240]	@ (800174c <mpu_reset_fifo+0x280>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	795b      	ldrb	r3, [r3, #5]
 800165e:	461a      	mov	r2, r3
 8001660:	2305      	movs	r3, #5
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	2301      	movs	r3, #1
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	1dfb      	adds	r3, r7, #7
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2301      	movs	r3, #1
 800166e:	4838      	ldr	r0, [pc, #224]	@ (8001750 <mpu_reset_fifo+0x284>)
 8001670:	f00c fa26 	bl	800dac0 <HAL_I2C_Mem_Write>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8085 	beq.w	8001786 <mpu_reset_fifo+0x2ba>
            return -1;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	e082      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    } else {
        data = BIT_FIFO_RST;
 8001682:	2304      	movs	r3, #4
 8001684:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001686:	4b31      	ldr	r3, [pc, #196]	@ (800174c <mpu_reset_fifo+0x280>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	b299      	uxth	r1, r3
 8001690:	4b2e      	ldr	r3, [pc, #184]	@ (800174c <mpu_reset_fifo+0x280>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	791b      	ldrb	r3, [r3, #4]
 8001696:	461a      	mov	r2, r3
 8001698:	2305      	movs	r3, #5
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2301      	movs	r3, #1
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	482a      	ldr	r0, [pc, #168]	@ (8001750 <mpu_reset_fifo+0x284>)
 80016a8:	f00c fa0a 	bl	800dac0 <HAL_I2C_Mem_Write>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <mpu_reset_fifo+0x1ec>
            return -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e067      	b.n	8001788 <mpu_reset_fifo+0x2bc>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80016b8:	4b24      	ldr	r3, [pc, #144]	@ (800174c <mpu_reset_fifo+0x280>)
 80016ba:	7c9b      	ldrb	r3, [r3, #18]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d105      	bne.n	80016cc <mpu_reset_fifo+0x200>
 80016c0:	4b22      	ldr	r3, [pc, #136]	@ (800174c <mpu_reset_fifo+0x280>)
 80016c2:	7a9b      	ldrb	r3, [r3, #10]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <mpu_reset_fifo+0x206>
            data = BIT_FIFO_EN;
 80016cc:	2340      	movs	r3, #64	@ 0x40
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	e001      	b.n	80016d6 <mpu_reset_fifo+0x20a>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 80016d2:	2360      	movs	r3, #96	@ 0x60
 80016d4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80016d6:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <mpu_reset_fifo+0x280>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	b299      	uxth	r1, r3
 80016e0:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <mpu_reset_fifo+0x280>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	791b      	ldrb	r3, [r3, #4]
 80016e6:	461a      	mov	r2, r3
 80016e8:	2305      	movs	r3, #5
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	2301      	movs	r3, #1
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	1dfb      	adds	r3, r7, #7
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	4816      	ldr	r0, [pc, #88]	@ (8001750 <mpu_reset_fifo+0x284>)
 80016f8:	f00c f9e2 	bl	800dac0 <HAL_I2C_Mem_Write>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <mpu_reset_fifo+0x23c>
            return -1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e03f      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    
        if (st.chip_cfg.int_enable)
 8001708:	4b10      	ldr	r3, [pc, #64]	@ (800174c <mpu_reset_fifo+0x280>)
 800170a:	7c5b      	ldrb	r3, [r3, #17]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <mpu_reset_fifo+0x24a>
            data = BIT_DATA_RDY_EN;
 8001710:	2301      	movs	r3, #1
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	e001      	b.n	800171a <mpu_reset_fifo+0x24e>
        else
            data = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <mpu_reset_fifo+0x280>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	b299      	uxth	r1, r3
 8001724:	4b09      	ldr	r3, [pc, #36]	@ (800174c <mpu_reset_fifo+0x280>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	7bdb      	ldrb	r3, [r3, #15]
 800172a:	461a      	mov	r2, r3
 800172c:	2305      	movs	r3, #5
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	2301      	movs	r3, #1
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	1dfb      	adds	r3, r7, #7
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	4805      	ldr	r0, [pc, #20]	@ (8001750 <mpu_reset_fifo+0x284>)
 800173c:	f00c f9c0 	bl	800dac0 <HAL_I2C_Mem_Write>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <mpu_reset_fifo+0x288>
            return -1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	e01d      	b.n	8001788 <mpu_reset_fifo+0x2bc>
 800174c:	20000000 	.word	0x20000000
 8001750:	20000334 	.word	0x20000334
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <mpu_reset_fifo+0x2c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	b299      	uxth	r1, r3
 800175e:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <mpu_reset_fifo+0x2c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	795b      	ldrb	r3, [r3, #5]
 8001764:	461a      	mov	r2, r3
 8001766:	2305      	movs	r3, #5
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	2301      	movs	r3, #1
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <mpu_reset_fifo+0x2c8>)
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	4808      	ldr	r0, [pc, #32]	@ (8001798 <mpu_reset_fifo+0x2cc>)
 8001776:	f00c f9a3 	bl	800dac0 <HAL_I2C_Mem_Write>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <mpu_reset_fifo+0x2ba>
            return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	e000      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    }
    return 0;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000000 	.word	0x20000000
 8001794:	20000010 	.word	0x20000010
 8001798:	20000334 	.word	0x20000334

0800179c <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 80017a4:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <mpu_get_gyro_fsr+0x64>)
 80017a6:	7a1b      	ldrb	r3, [r3, #8]
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d81e      	bhi.n	80017ea <mpu_get_gyro_fsr+0x4e>
 80017ac:	a201      	add	r2, pc, #4	@ (adr r2, 80017b4 <mpu_get_gyro_fsr+0x18>)
 80017ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b2:	bf00      	nop
 80017b4:	080017c5 	.word	0x080017c5
 80017b8:	080017cd 	.word	0x080017cd
 80017bc:	080017d7 	.word	0x080017d7
 80017c0:	080017e1 	.word	0x080017e1
    case INV_FSR_250DPS:
        fsr[0] = 250;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	22fa      	movs	r2, #250	@ 0xfa
 80017c8:	801a      	strh	r2, [r3, #0]
        break;
 80017ca:	e012      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80017d2:	801a      	strh	r2, [r3, #0]
        break;
 80017d4:	e00d      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017dc:	801a      	strh	r2, [r3, #0]
        break;
 80017de:	e008      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80017e6:	801a      	strh	r2, [r3, #0]
        break;
 80017e8:	e003      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	801a      	strh	r2, [r3, #0]
        break;
 80017f0:	bf00      	nop
    }
    return 0;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	20000000 	.word	0x20000000

08001804 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af04      	add	r7, sp, #16
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800180e:	4b2b      	ldr	r3, [pc, #172]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 8001810:	7a9b      	ldrb	r3, [r3, #10]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <mpu_set_gyro_fsr+0x18>
        return -1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e04a      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>

    switch (fsr) {
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001822:	d017      	beq.n	8001854 <mpu_set_gyro_fsr+0x50>
 8001824:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001828:	dc17      	bgt.n	800185a <mpu_set_gyro_fsr+0x56>
 800182a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800182e:	d00e      	beq.n	800184e <mpu_set_gyro_fsr+0x4a>
 8001830:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001834:	dc11      	bgt.n	800185a <mpu_set_gyro_fsr+0x56>
 8001836:	2bfa      	cmp	r3, #250	@ 0xfa
 8001838:	d003      	beq.n	8001842 <mpu_set_gyro_fsr+0x3e>
 800183a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800183e:	d003      	beq.n	8001848 <mpu_set_gyro_fsr+0x44>
 8001840:	e00b      	b.n	800185a <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
        break;
 8001846:	e00b      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8001848:	2308      	movs	r3, #8
 800184a:	73fb      	strb	r3, [r7, #15]
        break;
 800184c:	e008      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 800184e:	2310      	movs	r3, #16
 8001850:	73fb      	strb	r3, [r7, #15]
        break;
 8001852:	e005      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8001854:	2318      	movs	r3, #24
 8001856:	73fb      	strb	r3, [r7, #15]
        break;
 8001858:	e002      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e028      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 8001862:	7a1a      	ldrb	r2, [r3, #8]
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	429a      	cmp	r2, r3
 800186c:	d101      	bne.n	8001872 <mpu_set_gyro_fsr+0x6e>
        return 0;
 800186e:	2300      	movs	r3, #0
 8001870:	e01f      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8001872:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	b299      	uxth	r1, r3
 800187c:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	799b      	ldrb	r3, [r3, #6]
 8001882:	461a      	mov	r2, r3
 8001884:	2305      	movs	r3, #5
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2301      	movs	r3, #1
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	f107 030f 	add.w	r3, r7, #15
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	480a      	ldr	r0, [pc, #40]	@ (80018c0 <mpu_set_gyro_fsr+0xbc>)
 8001896:	f00c f913 	bl	800dac0 <HAL_I2C_Mem_Write>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <mpu_set_gyro_fsr+0xa2>
        return -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	e005      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>
    st.chip_cfg.gyro_fsr = data >> 3;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 80018ae:	721a      	strb	r2, [r3, #8]
    return 0;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000334 	.word	0x20000334

080018c4 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <mpu_get_accel_fsr+0x70>)
 80018ce:	7a5b      	ldrb	r3, [r3, #9]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d81b      	bhi.n	800190c <mpu_get_accel_fsr+0x48>
 80018d4:	a201      	add	r2, pc, #4	@ (adr r2, 80018dc <mpu_get_accel_fsr+0x18>)
 80018d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018da:	bf00      	nop
 80018dc:	080018ed 	.word	0x080018ed
 80018e0:	080018f5 	.word	0x080018f5
 80018e4:	080018fd 	.word	0x080018fd
 80018e8:	08001905 	.word	0x08001905
    case INV_FSR_2G:
        fsr[0] = 2;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	701a      	strb	r2, [r3, #0]
        break;
 80018f2:	e00e      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2204      	movs	r2, #4
 80018f8:	701a      	strb	r2, [r3, #0]
        break;
 80018fa:	e00a      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2208      	movs	r2, #8
 8001900:	701a      	strb	r2, [r3, #0]
        break;
 8001902:	e006      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2210      	movs	r2, #16
 8001908:	701a      	strb	r2, [r3, #0]
        break;
 800190a:	e002      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	e00a      	b.n	8001928 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <mpu_get_accel_fsr+0x70>)
 8001914:	7cdb      	ldrb	r3, [r3, #19]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	b2da      	uxtb	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	701a      	strb	r2, [r3, #0]
    return 0;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	20000000 	.word	0x20000000

08001938 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af04      	add	r7, sp, #16
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001942:	4b34      	ldr	r3, [pc, #208]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 8001944:	7a9b      	ldrb	r3, [r3, #10]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <mpu_set_accel_fsr+0x18>
        return -1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e05d      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>

    switch (fsr) {
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	3b02      	subs	r3, #2
 8001954:	2b0e      	cmp	r3, #14
 8001956:	d82d      	bhi.n	80019b4 <mpu_set_accel_fsr+0x7c>
 8001958:	a201      	add	r2, pc, #4	@ (adr r2, 8001960 <mpu_set_accel_fsr+0x28>)
 800195a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195e:	bf00      	nop
 8001960:	0800199d 	.word	0x0800199d
 8001964:	080019b5 	.word	0x080019b5
 8001968:	080019a3 	.word	0x080019a3
 800196c:	080019b5 	.word	0x080019b5
 8001970:	080019b5 	.word	0x080019b5
 8001974:	080019b5 	.word	0x080019b5
 8001978:	080019a9 	.word	0x080019a9
 800197c:	080019b5 	.word	0x080019b5
 8001980:	080019b5 	.word	0x080019b5
 8001984:	080019b5 	.word	0x080019b5
 8001988:	080019b5 	.word	0x080019b5
 800198c:	080019b5 	.word	0x080019b5
 8001990:	080019b5 	.word	0x080019b5
 8001994:	080019b5 	.word	0x080019b5
 8001998:	080019af 	.word	0x080019af
    case 2:
        data = INV_FSR_2G << 3;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
        break;
 80019a0:	e00b      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 80019a2:	2308      	movs	r3, #8
 80019a4:	73fb      	strb	r3, [r7, #15]
        break;
 80019a6:	e008      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 80019a8:	2310      	movs	r3, #16
 80019aa:	73fb      	strb	r3, [r7, #15]
        break;
 80019ac:	e005      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 80019ae:	2318      	movs	r3, #24
 80019b0:	73fb      	strb	r3, [r7, #15]
        break;
 80019b2:	e002      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
 80019b8:	e028      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 80019ba:	4b16      	ldr	r3, [pc, #88]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 80019bc:	7a5a      	ldrb	r2, [r3, #9]
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	08db      	lsrs	r3, r3, #3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d101      	bne.n	80019cc <mpu_set_accel_fsr+0x94>
        return 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	e01f      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	b299      	uxth	r1, r3
 80019d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	79db      	ldrb	r3, [r3, #7]
 80019dc:	461a      	mov	r2, r3
 80019de:	2305      	movs	r3, #5
 80019e0:	9302      	str	r3, [sp, #8]
 80019e2:	2301      	movs	r3, #1
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	f107 030f 	add.w	r3, r7, #15
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2301      	movs	r3, #1
 80019ee:	480a      	ldr	r0, [pc, #40]	@ (8001a18 <mpu_set_accel_fsr+0xe0>)
 80019f0:	f00c f866 	bl	800dac0 <HAL_I2C_Mem_Write>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <mpu_set_accel_fsr+0xc8>
        return -1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	e005      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>
    st.chip_cfg.accel_fsr = data >> 3;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	08db      	lsrs	r3, r3, #3
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 8001a08:	725a      	strb	r2, [r3, #9]
    return 0;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000334 	.word	0x20000334

08001a1c <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 8001a24:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <mpu_get_lpf+0x78>)
 8001a26:	7adb      	ldrb	r3, [r3, #11]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	2b05      	cmp	r3, #5
 8001a2c:	d826      	bhi.n	8001a7c <mpu_get_lpf+0x60>
 8001a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <mpu_get_lpf+0x18>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a4d 	.word	0x08001a4d
 8001a38:	08001a55 	.word	0x08001a55
 8001a3c:	08001a5d 	.word	0x08001a5d
 8001a40:	08001a65 	.word	0x08001a65
 8001a44:	08001a6d 	.word	0x08001a6d
 8001a48:	08001a75 	.word	0x08001a75
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	22bc      	movs	r2, #188	@ 0xbc
 8001a50:	801a      	strh	r2, [r3, #0]
        break;
 8001a52:	e017      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2262      	movs	r2, #98	@ 0x62
 8001a58:	801a      	strh	r2, [r3, #0]
        break;
 8001a5a:	e013      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	222a      	movs	r2, #42	@ 0x2a
 8001a60:	801a      	strh	r2, [r3, #0]
        break;
 8001a62:	e00f      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2214      	movs	r2, #20
 8001a68:	801a      	strh	r2, [r3, #0]
        break;
 8001a6a:	e00b      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	220a      	movs	r2, #10
 8001a70:	801a      	strh	r2, [r3, #0]
        break;
 8001a72:	e007      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2205      	movs	r2, #5
 8001a78:	801a      	strh	r2, [r3, #0]
        break;
 8001a7a:	e003      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	801a      	strh	r2, [r3, #0]
        break;
 8001a82:	bf00      	nop
    }
    return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000000 	.word	0x20000000

08001a98 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af04      	add	r7, sp, #16
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001aa2:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001aa4:	7a9b      	ldrb	r3, [r3, #10]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <mpu_set_lpf+0x18>
        return -1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e044      	b.n	8001b3a <mpu_set_lpf+0xa2>

    if (lpf >= 188)
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	2bbb      	cmp	r3, #187	@ 0xbb
 8001ab4:	d902      	bls.n	8001abc <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	e019      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	2b61      	cmp	r3, #97	@ 0x61
 8001ac0:	d902      	bls.n	8001ac8 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	e013      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	2b29      	cmp	r3, #41	@ 0x29
 8001acc:	d902      	bls.n	8001ad4 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	e00d      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	2b13      	cmp	r3, #19
 8001ad8:	d902      	bls.n	8001ae0 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8001ada:	2304      	movs	r3, #4
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e007      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	2b09      	cmp	r3, #9
 8001ae4:	d902      	bls.n	8001aec <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 8001ae6:	2305      	movs	r3, #5
 8001ae8:	73fb      	strb	r3, [r7, #15]
 8001aea:	e001      	b.n	8001af0 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8001aec:	2306      	movs	r3, #6
 8001aee:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8001af0:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001af2:	7ada      	ldrb	r2, [r3, #11]
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d101      	bne.n	8001afe <mpu_set_lpf+0x66>
        return 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e01d      	b.n	8001b3a <mpu_set_lpf+0xa2>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001afe:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	b299      	uxth	r1, r3
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	789b      	ldrb	r3, [r3, #2]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2305      	movs	r3, #5
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	2301      	movs	r3, #1
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	f107 030f 	add.w	r3, r7, #15
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	4809      	ldr	r0, [pc, #36]	@ (8001b48 <mpu_set_lpf+0xb0>)
 8001b22:	f00b ffcd 	bl	800dac0 <HAL_I2C_Mem_Write>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <mpu_set_lpf+0x9a>
        return -1;
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b30:	e003      	b.n	8001b3a <mpu_set_lpf+0xa2>
    st.chip_cfg.lpf = data;
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001b36:	72da      	strb	r2, [r3, #11]
    return 0;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000334 	.word	0x20000334

08001b4c <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 8001b54:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <mpu_get_sample_rate+0x30>)
 8001b56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <mpu_get_sample_rate+0x18>
        return -1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e004      	b.n	8001b6e <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <mpu_get_sample_rate+0x30>)
 8001b66:	89da      	ldrh	r2, [r3, #14]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	801a      	strh	r2, [r3, #0]
    return 0;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000000 	.word	0x20000000

08001b80 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af04      	add	r7, sp, #16
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001b8a:	4b34      	ldr	r3, [pc, #208]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001b8c:	7a9b      	ldrb	r3, [r3, #10]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d102      	bne.n	8001b98 <mpu_set_sample_rate+0x18>
        return -1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e05c      	b.n	8001c52 <mpu_set_sample_rate+0xd2>

    if (st.chip_cfg.dmp_on)
 8001b98:	4b30      	ldr	r3, [pc, #192]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001b9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <mpu_set_sample_rate+0x28>
        return -1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	e054      	b.n	8001c52 <mpu_set_sample_rate+0xd2>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001baa:	7d1b      	ldrb	r3, [r3, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00f      	beq.n	8001bd0 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <mpu_set_sample_rate+0x4a>
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	2b28      	cmp	r3, #40	@ 0x28
 8001bba:	d806      	bhi.n	8001bca <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fbf1 	bl	80013a8 <mpu_lp_accel_mode>
                return 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e043      	b.n	8001c52 <mpu_set_sample_rate+0xd2>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff fbec 	bl	80013a8 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d802      	bhi.n	8001bdc <mpu_set_sample_rate+0x5c>
            rate = 4;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	80fb      	strh	r3, [r7, #6]
 8001bda:	e006      	b.n	8001bea <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001be2:	d902      	bls.n	8001bea <mpu_set_sample_rate+0x6a>
            rate = 1000;
 8001be4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be8:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bf0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8001bfc:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	b299      	uxth	r1, r3
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	785b      	ldrb	r3, [r3, #1]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2305      	movs	r3, #5
 8001c10:	9302      	str	r3, [sp, #8]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	f107 030f 	add.w	r3, r7, #15
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	4810      	ldr	r0, [pc, #64]	@ (8001c60 <mpu_set_sample_rate+0xe0>)
 8001c20:	f00b ff4e 	bl	800dac0 <HAL_I2C_Mem_Write>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <mpu_set_sample_rate+0xb0>
            return -1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e010      	b.n	8001c52 <mpu_set_sample_rate+0xd2>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	3301      	adds	r3, #1
 8001c34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c38:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001c40:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001c44:	89db      	ldrh	r3, [r3, #14]
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff24 	bl	8001a98 <mpu_set_lpf>
        return 0;
 8001c50:	2300      	movs	r3, #0
    }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000334 	.word	0x20000334

08001c64 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <mpu_get_gyro_sens+0x5c>)
 8001c6e:	7a1b      	ldrb	r3, [r3, #8]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d81b      	bhi.n	8001cac <mpu_get_gyro_sens+0x48>
 8001c74:	a201      	add	r2, pc, #4	@ (adr r2, 8001c7c <mpu_get_gyro_sens+0x18>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001c95 	.word	0x08001c95
 8001c84:	08001c9d 	.word	0x08001c9d
 8001c88:	08001ca5 	.word	0x08001ca5
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <mpu_get_gyro_sens+0x60>)
 8001c90:	601a      	str	r2, [r3, #0]
        break;
 8001c92:	e00e      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <mpu_get_gyro_sens+0x64>)
 8001c98:	601a      	str	r2, [r3, #0]
        break;
 8001c9a:	e00a      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <mpu_get_gyro_sens+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
        break;
 8001ca2:	e006      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <mpu_get_gyro_sens+0x6c>)
 8001ca8:	601a      	str	r2, [r3, #0]
        break;
 8001caa:	e002      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	e000      	b.n	8001cb4 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	43030000 	.word	0x43030000
 8001cc8:	42830000 	.word	0x42830000
 8001ccc:	42033333 	.word	0x42033333
 8001cd0:	41833333 	.word	0x41833333

08001cd4 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d4c <mpu_get_accel_sens+0x78>)
 8001cde:	7a5b      	ldrb	r3, [r3, #9]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d81f      	bhi.n	8001d24 <mpu_get_accel_sens+0x50>
 8001ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cec <mpu_get_accel_sens+0x18>)
 8001ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cea:	bf00      	nop
 8001cec:	08001cfd 	.word	0x08001cfd
 8001cf0:	08001d07 	.word	0x08001d07
 8001cf4:	08001d11 	.word	0x08001d11
 8001cf8:	08001d1b 	.word	0x08001d1b
    case INV_FSR_2G:
        sens[0] = 16384;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d02:	801a      	strh	r2, [r3, #0]
        break;
 8001d04:	e011      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f641 729c 	movw	r2, #8092	@ 0x1f9c
 8001d0c:	801a      	strh	r2, [r3, #0]
        break;
 8001d0e:	e00c      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d16:	801a      	strh	r2, [r3, #0]
        break;
 8001d18:	e007      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d20:	801a      	strh	r2, [r3, #0]
        break;
 8001d22:	e002      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    default:
        return -1;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	e00a      	b.n	8001d40 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8001d2a:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <mpu_get_accel_sens+0x78>)
 8001d2c:	7cdb      	ldrb	r3, [r3, #19]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	085b      	lsrs	r3, r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	801a      	strh	r2, [r3, #0]
    return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	20000000 	.word	0x20000000

08001d50 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8001d58:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <mpu_get_fifo_config+0x20>)
 8001d5a:	7c1a      	ldrb	r2, [r3, #16]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	701a      	strb	r2, [r3, #0]
    return 0;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000000 	.word	0x20000000

08001d74 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 8001d8a:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001d8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <mpu_configure_fifo+0x24>
        return 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e038      	b.n	8001e0a <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 8001d98:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001d9a:	7a9b      	ldrb	r3, [r3, #10]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <mpu_configure_fifo+0x32>
            return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
 8001da4:	e031      	b.n	8001e0a <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 8001da6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001da8:	7c1b      	ldrb	r3, [r3, #16]
 8001daa:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dae:	7a9a      	ldrb	r2, [r3, #10]
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4013      	ands	r3, r2
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001db8:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8001dba:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dbc:	7c1b      	ldrb	r3, [r3, #16]
 8001dbe:	79fa      	ldrb	r2, [r7, #7]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d003      	beq.n	8001dcc <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	e001      	b.n	8001dd0 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d103      	bne.n	8001dde <mpu_configure_fifo+0x6a>
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dd8:	7d1b      	ldrb	r3, [r3, #20]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <mpu_configure_fifo+0x72>
            set_int_enable(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f7ff f938 	bl	8001054 <set_int_enable>
 8001de4:	e002      	b.n	8001dec <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff f934 	bl	8001054 <set_int_enable>
        if (sensors) {
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00a      	beq.n	8001e08 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8001df2:	f7ff fb6b 	bl	80014cc <mpu_reset_fifo>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8001dfc:	4a05      	ldr	r2, [pc, #20]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	7413      	strb	r3, [r2, #16]
                return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	e000      	b.n	8001e0a <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8001e08:	68fb      	ldr	r3, [r7, #12]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000

08001e18 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af04      	add	r7, sp, #16
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e007      	b.n	8001e42 <mpu_set_sensors+0x2a>
    else if (sensors)
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <mpu_set_sensors+0x26>
        data = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e001      	b.n	8001e42 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8001e3e:	2340      	movs	r3, #64	@ 0x40
 8001e40:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001e42:	4b40      	ldr	r3, [pc, #256]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	b299      	uxth	r1, r3
 8001e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	7c9b      	ldrb	r3, [r3, #18]
 8001e52:	461a      	mov	r2, r3
 8001e54:	2305      	movs	r3, #5
 8001e56:	9302      	str	r3, [sp, #8]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	f107 030f 	add.w	r3, r7, #15
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	2301      	movs	r3, #1
 8001e64:	4838      	ldr	r0, [pc, #224]	@ (8001f48 <mpu_set_sensors+0x130>)
 8001e66:	f00b fe2b 	bl	800dac0 <HAL_I2C_Mem_Write>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
 8001e70:	4b34      	ldr	r3, [pc, #208]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	729a      	strb	r2, [r3, #10]
        return -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e05f      	b.n	8001f3c <mpu_set_sensors+0x124>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b2f      	ldr	r3, [pc, #188]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e86:	731a      	strb	r2, [r3, #12]

    data = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d104      	bne.n	8001ea0 <mpu_set_sensors+0x88>
        data |= BIT_STBY_XG;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d104      	bne.n	8001eb4 <mpu_set_sensors+0x9c>
        data |= BIT_STBY_YG;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d104      	bne.n	8001ec8 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_ZG;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d104      	bne.n	8001edc <mpu_set_sensors+0xc4>
        data |= BIT_STBY_XYZA;
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001edc:	4b19      	ldr	r3, [pc, #100]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	b299      	uxth	r1, r3
 8001ee6:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	7cdb      	ldrb	r3, [r3, #19]
 8001eec:	461a      	mov	r2, r3
 8001eee:	2305      	movs	r3, #5
 8001ef0:	9302      	str	r3, [sp, #8]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	f107 030f 	add.w	r3, r7, #15
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2301      	movs	r3, #1
 8001efe:	4812      	ldr	r0, [pc, #72]	@ (8001f48 <mpu_set_sensors+0x130>)
 8001f00:	f00b fdde 	bl	800dac0 <HAL_I2C_Mem_Write>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <mpu_set_sensors+0xfe>
        st.chip_cfg.sensors = 0;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	729a      	strb	r2, [r3, #10]
        return -1;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295
 8001f14:	e012      	b.n	8001f3c <mpu_set_sensors+0x124>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <mpu_set_sensors+0x110>
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d002      	beq.n	8001f28 <mpu_set_sensors+0x110>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f000 f9ac 	bl	8002280 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8001f28:	4a06      	ldr	r2, [pc, #24]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8001f2e:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8001f34:	2032      	movs	r0, #50	@ 0x32
 8001f36:	f00a ffd3 	bl	800cee0 <HAL_Delay>
    return 0;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000000 	.word	0x20000000
 8001f48:	20000334 	.word	0x20000334

08001f4c <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	@ 0x28
 8001f50:	af04      	add	r7, sp, #16
 8001f52:	4603      	mov	r3, r0
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8001f5a:	4b48      	ldr	r3, [pc, #288]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <mpu_read_fifo_stream+0x1e>
        return -1;
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295
 8001f68:	e083      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    if (!st.chip_cfg.sensors)
 8001f6a:	4b44      	ldr	r3, [pc, #272]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f6c:	7a9b      	ldrb	r3, [r3, #10]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <mpu_read_fifo_stream+0x2c>
        return -1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	e07c      	b.n	8002072 <mpu_read_fifo_stream+0x126>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8001f78:	4b40      	ldr	r3, [pc, #256]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	b299      	uxth	r1, r3
 8001f82:	4b3e      	ldr	r3, [pc, #248]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	7a9b      	ldrb	r3, [r3, #10]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2305      	movs	r3, #5
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	2302      	movs	r3, #2
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2301      	movs	r3, #1
 8001f9a:	4839      	ldr	r0, [pc, #228]	@ (8002080 <mpu_read_fifo_stream+0x134>)
 8001f9c:	f00b fe8a 	bl	800dcb4 <HAL_I2C_Mem_Read>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <mpu_read_fifo_stream+0x60>
        return -1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	e062      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8001fac:	7d3b      	ldrb	r3, [r7, #20]
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	b21a      	sxth	r2, r3
 8001fb4:	7d7b      	ldrb	r3, [r7, #21]
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8001fbe:	8afa      	ldrh	r2, [r7, #22]
 8001fc0:	89fb      	ldrh	r3, [r7, #14]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d205      	bcs.n	8001fd2 <mpu_read_fifo_stream+0x86>
        more[0] = 0;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
        return -1;
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd0:	e04f      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	885b      	ldrh	r3, [r3, #2]
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	8afa      	ldrh	r2, [r7, #22]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d923      	bls.n	800202a <mpu_read_fifo_stream+0xde>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8001fe2:	4b26      	ldr	r3, [pc, #152]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	b299      	uxth	r1, r3
 8001fec:	4b23      	ldr	r3, [pc, #140]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	7c5b      	ldrb	r3, [r3, #17]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2305      	movs	r3, #5
 8001ff6:	9302      	str	r3, [sp, #8]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2301      	movs	r3, #1
 8002004:	481e      	ldr	r0, [pc, #120]	@ (8002080 <mpu_read_fifo_stream+0x134>)
 8002006:	f00b fe55 	bl	800dcb4 <HAL_I2C_Mem_Read>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <mpu_read_fifo_stream+0xca>
            return -1;
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	e02d      	b.n	8002072 <mpu_read_fifo_stream+0x126>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8002016:	7d3b      	ldrb	r3, [r7, #20]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	d004      	beq.n	800202a <mpu_read_fifo_stream+0xde>
            mpu_reset_fifo();
 8002020:	f7ff fa54 	bl	80014cc <mpu_reset_fifo>
            return -2;
 8002024:	f06f 0301 	mvn.w	r3, #1
 8002028:	e023      	b.n	8002072 <mpu_read_fifo_stream+0x126>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <mpu_read_fifo_stream+0x130>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	b299      	uxth	r1, r3
 8002034:	4b11      	ldr	r3, [pc, #68]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	7adb      	ldrb	r3, [r3, #11]
 800203a:	461a      	mov	r2, r3
 800203c:	2305      	movs	r3, #5
 800203e:	9302      	str	r3, [sp, #8]
 8002040:	89fb      	ldrh	r3, [r7, #14]
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2301      	movs	r3, #1
 800204a:	480d      	ldr	r0, [pc, #52]	@ (8002080 <mpu_read_fifo_stream+0x134>)
 800204c:	f00b fe32 	bl	800dcb4 <HAL_I2C_Mem_Read>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <mpu_read_fifo_stream+0x110>
        return -1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	e00a      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    more[0] = fifo_count / length - 1;
 800205c:	8afa      	ldrh	r2, [r7, #22]
 800205e:	89fb      	ldrh	r3, [r7, #14]
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	b29b      	uxth	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b2da      	uxtb	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	701a      	strb	r2, [r3, #0]
    return 0;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000000 	.word	0x20000000
 8002080:	20000334 	.word	0x20000334

08002084 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af04      	add	r7, sp, #16
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800208e:	4b7a      	ldr	r3, [pc, #488]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002090:	7c9b      	ldrb	r3, [r3, #18]
 8002092:	79fa      	ldrb	r2, [r7, #7]
 8002094:	429a      	cmp	r2, r3
 8002096:	d101      	bne.n	800209c <mpu_set_bypass+0x18>
        return 0;
 8002098:	2300      	movs	r3, #0
 800209a:	e0e8      	b.n	800226e <mpu_set_bypass+0x1ea>

    if (bypass_on) {
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d06b      	beq.n	800217a <mpu_set_bypass+0xf6>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80020a2:	4b75      	ldr	r3, [pc, #468]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	b299      	uxth	r1, r3
 80020ac:	4b72      	ldr	r3, [pc, #456]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	791b      	ldrb	r3, [r3, #4]
 80020b2:	461a      	mov	r2, r3
 80020b4:	2305      	movs	r3, #5
 80020b6:	9302      	str	r3, [sp, #8]
 80020b8:	2301      	movs	r3, #1
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	f107 030f 	add.w	r3, r7, #15
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2301      	movs	r3, #1
 80020c4:	486d      	ldr	r0, [pc, #436]	@ (800227c <mpu_set_bypass+0x1f8>)
 80020c6:	f00b fdf5 	bl	800dcb4 <HAL_I2C_Mem_Read>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <mpu_set_bypass+0x52>
            return -1;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
 80020d4:	e0cb      	b.n	800226e <mpu_set_bypass+0x1ea>
        tmp &= ~BIT_AUX_IF_EN;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	f023 0320 	bic.w	r3, r3, #32
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80020e0:	4b65      	ldr	r3, [pc, #404]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	b299      	uxth	r1, r3
 80020ea:	4b63      	ldr	r3, [pc, #396]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	791b      	ldrb	r3, [r3, #4]
 80020f0:	461a      	mov	r2, r3
 80020f2:	2305      	movs	r3, #5
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	2301      	movs	r3, #1
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	f107 030f 	add.w	r3, r7, #15
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2301      	movs	r3, #1
 8002102:	485e      	ldr	r0, [pc, #376]	@ (800227c <mpu_set_bypass+0x1f8>)
 8002104:	f00b fcdc 	bl	800dac0 <HAL_I2C_Mem_Write>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <mpu_set_bypass+0x90>
            return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
 8002112:	e0ac      	b.n	800226e <mpu_set_bypass+0x1ea>
        delay_ms(3);
 8002114:	2003      	movs	r0, #3
 8002116:	f00a fee3 	bl	800cee0 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 800211a:	2302      	movs	r3, #2
 800211c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800211e:	4b56      	ldr	r3, [pc, #344]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002120:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <mpu_set_bypass+0xae>
            tmp |= BIT_ACTL;
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800212e:	b2db      	uxtb	r3, r3
 8002130:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002132:	4b51      	ldr	r3, [pc, #324]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002134:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <mpu_set_bypass+0xc2>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002142:	b2db      	uxtb	r3, r3
 8002144:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002146:	4b4c      	ldr	r3, [pc, #304]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	b299      	uxth	r1, r3
 8002150:	4b49      	ldr	r3, [pc, #292]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	7d1b      	ldrb	r3, [r3, #20]
 8002156:	461a      	mov	r2, r3
 8002158:	2305      	movs	r3, #5
 800215a:	9302      	str	r3, [sp, #8]
 800215c:	2301      	movs	r3, #1
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	f107 030f 	add.w	r3, r7, #15
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2301      	movs	r3, #1
 8002168:	4844      	ldr	r0, [pc, #272]	@ (800227c <mpu_set_bypass+0x1f8>)
 800216a:	f00b fca9 	bl	800dac0 <HAL_I2C_Mem_Write>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d078      	beq.n	8002266 <mpu_set_bypass+0x1e2>
            return -1;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	e079      	b.n	800226e <mpu_set_bypass+0x1ea>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800217a:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <mpu_set_bypass+0x1f4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	b299      	uxth	r1, r3
 8002184:	4b3c      	ldr	r3, [pc, #240]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	791b      	ldrb	r3, [r3, #4]
 800218a:	461a      	mov	r2, r3
 800218c:	2305      	movs	r3, #5
 800218e:	9302      	str	r3, [sp, #8]
 8002190:	2301      	movs	r3, #1
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	f107 030f 	add.w	r3, r7, #15
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2301      	movs	r3, #1
 800219c:	4837      	ldr	r0, [pc, #220]	@ (800227c <mpu_set_bypass+0x1f8>)
 800219e:	f00b fd89 	bl	800dcb4 <HAL_I2C_Mem_Read>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <mpu_set_bypass+0x12a>
            return -1;
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ac:	e05f      	b.n	800226e <mpu_set_bypass+0x1ea>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80021ae:	4b32      	ldr	r3, [pc, #200]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80021b0:	7a9b      	ldrb	r3, [r3, #10]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <mpu_set_bypass+0x142>
            tmp |= BIT_AUX_IF_EN;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	f043 0320 	orr.w	r3, r3, #32
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	e004      	b.n	80021d0 <mpu_set_bypass+0x14c>
        else
            tmp &= ~BIT_AUX_IF_EN;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	f023 0320 	bic.w	r3, r3, #32
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80021d0:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	b299      	uxth	r1, r3
 80021da:	4b27      	ldr	r3, [pc, #156]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	791b      	ldrb	r3, [r3, #4]
 80021e0:	461a      	mov	r2, r3
 80021e2:	2305      	movs	r3, #5
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	2301      	movs	r3, #1
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	f107 030f 	add.w	r3, r7, #15
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2301      	movs	r3, #1
 80021f2:	4822      	ldr	r0, [pc, #136]	@ (800227c <mpu_set_bypass+0x1f8>)
 80021f4:	f00b fc64 	bl	800dac0 <HAL_I2C_Mem_Write>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <mpu_set_bypass+0x180>
            return -1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	e034      	b.n	800226e <mpu_set_bypass+0x1ea>
        delay_ms(3);
 8002204:	2003      	movs	r0, #3
 8002206:	f00a fe6b 	bl	800cee0 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 800220a:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <mpu_set_bypass+0x1f4>)
 800220c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <mpu_set_bypass+0x196>
            tmp = BIT_ACTL;
 8002214:	2380      	movs	r3, #128	@ 0x80
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e001      	b.n	800221e <mpu_set_bypass+0x19a>
        else
            tmp = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002220:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <mpu_set_bypass+0x1ae>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800222e:	b2db      	uxtb	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	b299      	uxth	r1, r3
 800223c:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <mpu_set_bypass+0x1f4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	7d1b      	ldrb	r3, [r3, #20]
 8002242:	461a      	mov	r2, r3
 8002244:	2305      	movs	r3, #5
 8002246:	9302      	str	r3, [sp, #8]
 8002248:	2301      	movs	r3, #1
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	f107 030f 	add.w	r3, r7, #15
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2301      	movs	r3, #1
 8002254:	4809      	ldr	r0, [pc, #36]	@ (800227c <mpu_set_bypass+0x1f8>)
 8002256:	f00b fc33 	bl	800dac0 <HAL_I2C_Mem_Write>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <mpu_set_bypass+0x1e2>
            return -1;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295
 8002264:	e003      	b.n	800226e <mpu_set_bypass+0x1ea>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8002266:	4a04      	ldr	r2, [pc, #16]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	7493      	strb	r3, [r2, #18]
    return 0;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000000 	.word	0x20000000
 800227c:	20000334 	.word	0x20000334

08002280 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af04      	add	r7, sp, #16
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800228a:	4b23      	ldr	r3, [pc, #140]	@ (8002318 <mpu_set_int_latched+0x98>)
 800228c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002290:	79fa      	ldrb	r2, [r7, #7]
 8002292:	429a      	cmp	r2, r3
 8002294:	d101      	bne.n	800229a <mpu_set_int_latched+0x1a>
        return 0;
 8002296:	2300      	movs	r3, #0
 8002298:	e039      	b.n	800230e <mpu_set_int_latched+0x8e>

    if (enable)
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80022a0:	2330      	movs	r3, #48	@ 0x30
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e001      	b.n	80022aa <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 80022aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022ac:	7c9b      	ldrb	r3, [r3, #18]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 80022bc:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022be:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d004      	beq.n	80022d0 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	b299      	uxth	r1, r3
 80022da:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	7d1b      	ldrb	r3, [r3, #20]
 80022e0:	461a      	mov	r2, r3
 80022e2:	2305      	movs	r3, #5
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	2301      	movs	r3, #1
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	f107 030f 	add.w	r3, r7, #15
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2301      	movs	r3, #1
 80022f2:	480a      	ldr	r0, [pc, #40]	@ (800231c <mpu_set_int_latched+0x9c>)
 80022f4:	f00b fbe4 	bl	800dac0 <HAL_I2C_Mem_Write>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <mpu_set_int_latched+0x84>
        return -1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	e004      	b.n	800230e <mpu_set_int_latched+0x8e>
    st.chip_cfg.latched_int = enable;
 8002304:	4a04      	ldr	r2, [pc, #16]	@ (8002318 <mpu_set_int_latched+0x98>)
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
    return 0;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000
 800231c:	20000334 	.word	0x20000334

08002320 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	@ 0x28
 8002324:	af04      	add	r7, sp, #16
 8002326:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8002328:	4b45      	ldr	r3, [pc, #276]	@ (8002440 <get_accel_prod_shift+0x120>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	b299      	uxth	r1, r3
 8002332:	2305      	movs	r3, #5
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	2304      	movs	r3, #4
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	f107 0310 	add.w	r3, r7, #16
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2301      	movs	r3, #1
 8002342:	220d      	movs	r2, #13
 8002344:	483f      	ldr	r0, [pc, #252]	@ (8002444 <get_accel_prod_shift+0x124>)
 8002346:	f00b fcb5 	bl	800dcb4 <HAL_I2C_Mem_Read>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <get_accel_prod_shift+0x34>
        return 0x07;
 8002350:	2307      	movs	r3, #7
 8002352:	e071      	b.n	8002438 <get_accel_prod_shift+0x118>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 8002354:	7c3b      	ldrb	r3, [r7, #16]
 8002356:	10db      	asrs	r3, r3, #3
 8002358:	b25b      	sxtb	r3, r3
 800235a:	f003 031c 	and.w	r3, r3, #28
 800235e:	b25a      	sxtb	r2, r3
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	111b      	asrs	r3, r3, #4
 8002364:	b25b      	sxtb	r3, r3
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	b25b      	sxtb	r3, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	b25b      	sxtb	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 8002374:	7c7b      	ldrb	r3, [r7, #17]
 8002376:	10db      	asrs	r3, r3, #3
 8002378:	b25b      	sxtb	r3, r3
 800237a:	f003 031c 	and.w	r3, r3, #28
 800237e:	b25a      	sxtb	r2, r3
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	109b      	asrs	r3, r3, #2
 8002384:	b25b      	sxtb	r3, r3
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	b25b      	sxtb	r3, r3
 800238c:	4313      	orrs	r3, r2
 800238e:	b25b      	sxtb	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 8002394:	7cbb      	ldrb	r3, [r7, #18]
 8002396:	10db      	asrs	r3, r3, #3
 8002398:	b25b      	sxtb	r3, r3
 800239a:	f003 031c 	and.w	r3, r3, #28
 800239e:	b25a      	sxtb	r2, r3
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	b25b      	sxtb	r3, r3
 80023aa:	4313      	orrs	r3, r2
 80023ac:	b25b      	sxtb	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 80023b2:	2300      	movs	r3, #0
 80023b4:	75fb      	strb	r3, [r7, #23]
 80023b6:	e03b      	b.n	8002430 <get_accel_prod_shift+0x110>
        if (!shift_code[ii]) {
 80023b8:	7dfb      	ldrb	r3, [r7, #23]
 80023ba:	3318      	adds	r3, #24
 80023bc:	443b      	add	r3, r7
 80023be:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <get_accel_prod_shift+0xb6>
            st_shift[ii] = 0.f;
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
            continue;
 80023d4:	e029      	b.n	800242a <get_accel_prod_shift+0x10a>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	4a1a      	ldr	r2, [pc, #104]	@ (8002448 <get_accel_prod_shift+0x128>)
 80023e0:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 80023e2:	e00f      	b.n	8002404 <get_accel_prod_shift+0xe4>
            st_shift[ii] *= 1.034f;
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800244c <get_accel_prod_shift+0x12c>
 80023fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002400:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 8002404:	7dfb      	ldrb	r3, [r7, #23]
 8002406:	f103 0218 	add.w	r2, r3, #24
 800240a:	443a      	add	r2, r7
 800240c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8002410:	3a01      	subs	r2, #1
 8002412:	b2d1      	uxtb	r1, r2
 8002414:	f103 0218 	add.w	r2, r3, #24
 8002418:	443a      	add	r2, r7
 800241a:	f802 1c0c 	strb.w	r1, [r2, #-12]
 800241e:	3318      	adds	r3, #24
 8002420:	443b      	add	r3, r7
 8002422:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1dc      	bne.n	80023e4 <get_accel_prod_shift+0xc4>
    for (ii = 0; ii < 3; ii++) {
 800242a:	7dfb      	ldrb	r3, [r7, #23]
 800242c:	3301      	adds	r3, #1
 800242e:	75fb      	strb	r3, [r7, #23]
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d9c0      	bls.n	80023b8 <get_accel_prod_shift+0x98>
    }
    return 0;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000000 	.word	0x20000000
 8002444:	20000334 	.word	0x20000334
 8002448:	3eae147b 	.word	0x3eae147b
 800244c:	3f845a1d 	.word	0x3f845a1d

08002450 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	@ 0x28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff5c 	bl	8002320 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
 800246c:	e063      	b.n	8002536 <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	440b      	add	r3, r1
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	bfb8      	it	lt
 8002488:	425b      	neglt	r3, r3
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002492:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8002548 <accel_self_test+0xf8>
 8002496:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800249a:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	3328      	adds	r3, #40	@ 0x28
 80024a4:	443b      	add	r3, r7
 80024a6:	3b1c      	subs	r3, #28
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	d023      	beq.n	80024fe <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	3328      	adds	r3, #40	@ 0x28
 80024bc:	443b      	add	r3, r7
 80024be:	3b1c      	subs	r3, #28
 80024c0:	ed93 7a00 	vldr	s14, [r3]
 80024c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80024c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024d4:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 80024d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80024dc:	eef0 7ae7 	vabs.f32	s15, s15
 80024e0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800254c <accel_self_test+0xfc>
 80024e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ec:	dd20      	ble.n	8002530 <accel_self_test+0xe0>
                result |= 1 << jj;
 80024ee:	2201      	movs	r2, #1
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	6a3a      	ldr	r2, [r7, #32]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	e018      	b.n	8002530 <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 80024fe:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002550 <accel_self_test+0x100>
 8002502:	edd7 7a07 	vldr	s15, [r7, #28]
 8002506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250e:	d408      	bmi.n	8002522 <accel_self_test+0xd2>
            (st_shift_cust > test.max_g))
 8002510:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002554 <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 8002514:	edd7 7a07 	vldr	s15, [r7, #28]
 8002518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002520:	dd06      	ble.n	8002530 <accel_self_test+0xe0>
            result |= 1 << jj;
 8002522:	2201      	movs	r2, #1
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	6a3a      	ldr	r2, [r7, #32]
 800252c:	4313      	orrs	r3, r2
 800252e:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	3301      	adds	r3, #1
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	2b02      	cmp	r3, #2
 800253a:	dd98      	ble.n	800246e <accel_self_test+0x1e>
    }

    return result;
 800253c:	6a3b      	ldr	r3, [r7, #32]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3728      	adds	r7, #40	@ 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	47800000 	.word	0x47800000
 800254c:	3e0f5c29 	.word	0x3e0f5c29
 8002550:	3e99999a 	.word	0x3e99999a
 8002554:	3f733333 	.word	0x3f733333

08002558 <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08c      	sub	sp, #48	@ 0x30
 800255c:	af04      	add	r7, sp, #16
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 8002566:	4b59      	ldr	r3, [pc, #356]	@ (80026cc <gyro_self_test+0x174>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	b299      	uxth	r1, r3
 8002570:	2305      	movs	r3, #5
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	2303      	movs	r3, #3
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2301      	movs	r3, #1
 8002580:	220d      	movs	r2, #13
 8002582:	4853      	ldr	r0, [pc, #332]	@ (80026d0 <gyro_self_test+0x178>)
 8002584:	f00b fb96 	bl	800dcb4 <HAL_I2C_Mem_Read>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <gyro_self_test+0x3a>
        return 0x07;
 800258e:	2307      	movs	r3, #7
 8002590:	e097      	b.n	80026c2 <gyro_self_test+0x16a>

    tmp[0] &= 0x1F;
 8002592:	7a3b      	ldrb	r3, [r7, #8]
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	b2db      	uxtb	r3, r3
 800259a:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 800259c:	7a7b      	ldrb	r3, [r7, #9]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 80025a6:	7abb      	ldrb	r3, [r7, #10]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	e080      	b.n	80026b8 <gyro_self_test+0x160>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	6839      	ldr	r1, [r7, #0]
 80025c6:	440b      	add	r3, r1
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bfb8      	it	lt
 80025d0:	425b      	neglt	r3, r3
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025da:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80026d4 <gyro_self_test+0x17c>
 80025de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e2:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 80025e6:	f107 0208 	add.w	r2, r7, #8
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4413      	add	r3, r2
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d045      	beq.n	8002680 <gyro_self_test+0x128>
            st_shift = 3275.f / test.gyro_sens;
 80025f4:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80026d8 <gyro_self_test+0x180>
 80025f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025fc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80026dc <gyro_self_test+0x184>
 8002600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002604:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8002608:	e007      	b.n	800261a <gyro_self_test+0xc2>
                st_shift *= 1.046f;
 800260a:	edd7 7a05 	vldr	s15, [r7, #20]
 800260e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80026e0 <gyro_self_test+0x188>
 8002612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002616:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 800261a:	f107 0208 	add.w	r2, r7, #8
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	4413      	add	r3, r2
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	3b01      	subs	r3, #1
 8002626:	b2d9      	uxtb	r1, r3
 8002628:	f107 0208 	add.w	r2, r7, #8
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	460a      	mov	r2, r1
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	f107 0208 	add.w	r2, r7, #8
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	4413      	add	r3, r2
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e3      	bne.n	800260a <gyro_self_test+0xb2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 8002642:	edd7 6a04 	vldr	s13, [r7, #16]
 8002646:	ed97 7a05 	vldr	s14, [r7, #20]
 800264a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002652:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002656:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 800265a:	edd7 7a03 	vldr	s15, [r7, #12]
 800265e:	eef0 7ae7 	vabs.f32	s15, s15
 8002662:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80026e4 <gyro_self_test+0x18c>
 8002666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	dd20      	ble.n	80026b2 <gyro_self_test+0x15a>
                result |= 1 << jj;
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	e018      	b.n	80026b2 <gyro_self_test+0x15a>
        } else if ((st_shift_cust < test.min_dps) ||
 8002680:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002684:	edd7 7a04 	vldr	s15, [r7, #16]
 8002688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	d408      	bmi.n	80026a4 <gyro_self_test+0x14c>
            (st_shift_cust > test.max_dps))
 8002692:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80026e8 <gyro_self_test+0x190>
        } else if ((st_shift_cust < test.min_dps) ||
 8002696:	edd7 7a04 	vldr	s15, [r7, #16]
 800269a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a2:	dd06      	ble.n	80026b2 <gyro_self_test+0x15a>
            result |= 1 << jj;
 80026a4:	2201      	movs	r2, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	f77f af7b 	ble.w	80025b6 <gyro_self_test+0x5e>
    }
    return result;
 80026c0:	69bb      	ldr	r3, [r7, #24]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000334 	.word	0x20000334
 80026d4:	47800000 	.word	0x47800000
 80026d8:	00000083 	.word	0x00000083
 80026dc:	454cb000 	.word	0x454cb000
 80026e0:	3f85e354 	.word	0x3f85e354
 80026e4:	3e0f5c29 	.word	0x3e0f5c29
 80026e8:	42d20000 	.word	0x42d20000

080026ec <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 80026ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f0:	b0bc      	sub	sp, #240	@ 0xf0
 80026f2:	af04      	add	r7, sp, #16
 80026f4:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 80026f8:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80026fc:	4613      	mov	r3, r2
 80026fe:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 8002702:	2301      	movs	r3, #1
 8002704:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    data[1] = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 800270e:	4b9c      	ldr	r3, [pc, #624]	@ (8002980 <get_st_biases+0x294>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	b299      	uxth	r1, r3
 8002718:	4b99      	ldr	r3, [pc, #612]	@ (8002980 <get_st_biases+0x294>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	7c9b      	ldrb	r3, [r3, #18]
 800271e:	461a      	mov	r2, r3
 8002720:	2305      	movs	r3, #5
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	2302      	movs	r3, #2
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2301      	movs	r3, #1
 8002730:	4894      	ldr	r0, [pc, #592]	@ (8002984 <get_st_biases+0x298>)
 8002732:	f00b f9c5 	bl	800dac0 <HAL_I2C_Mem_Write>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <get_st_biases+0x56>
        return -1;
 800273c:	f04f 33ff 	mov.w	r3, #4294967295
 8002740:	e3dc      	b.n	8002efc <get_st_biases+0x810>
    delay_ms(200);
 8002742:	20c8      	movs	r0, #200	@ 0xc8
 8002744:	f00a fbcc 	bl	800cee0 <HAL_Delay>
    data[0] = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 800274e:	4b8c      	ldr	r3, [pc, #560]	@ (8002980 <get_st_biases+0x294>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	b299      	uxth	r1, r3
 8002758:	4b89      	ldr	r3, [pc, #548]	@ (8002980 <get_st_biases+0x294>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	7bdb      	ldrb	r3, [r3, #15]
 800275e:	461a      	mov	r2, r3
 8002760:	2305      	movs	r3, #5
 8002762:	9302      	str	r3, [sp, #8]
 8002764:	2301      	movs	r3, #1
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2301      	movs	r3, #1
 8002770:	4884      	ldr	r0, [pc, #528]	@ (8002984 <get_st_biases+0x298>)
 8002772:	f00b f9a5 	bl	800dac0 <HAL_I2C_Mem_Write>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <get_st_biases+0x96>
        return -1;
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
 8002780:	e3bc      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002782:	4b7f      	ldr	r3, [pc, #508]	@ (8002980 <get_st_biases+0x294>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	b299      	uxth	r1, r3
 800278c:	4b7c      	ldr	r3, [pc, #496]	@ (8002980 <get_st_biases+0x294>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	795b      	ldrb	r3, [r3, #5]
 8002792:	461a      	mov	r2, r3
 8002794:	2305      	movs	r3, #5
 8002796:	9302      	str	r3, [sp, #8]
 8002798:	2301      	movs	r3, #1
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2301      	movs	r3, #1
 80027a4:	4877      	ldr	r0, [pc, #476]	@ (8002984 <get_st_biases+0x298>)
 80027a6:	f00b f98b 	bl	800dac0 <HAL_I2C_Mem_Write>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <get_st_biases+0xca>
        return -1;
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
 80027b4:	e3a2      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80027b6:	4b72      	ldr	r3, [pc, #456]	@ (8002980 <get_st_biases+0x294>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	b299      	uxth	r1, r3
 80027c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002980 <get_st_biases+0x294>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	7c9b      	ldrb	r3, [r3, #18]
 80027c6:	461a      	mov	r2, r3
 80027c8:	2305      	movs	r3, #5
 80027ca:	9302      	str	r3, [sp, #8]
 80027cc:	2301      	movs	r3, #1
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2301      	movs	r3, #1
 80027d8:	486a      	ldr	r0, [pc, #424]	@ (8002984 <get_st_biases+0x298>)
 80027da:	f00b f971 	bl	800dac0 <HAL_I2C_Mem_Write>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <get_st_biases+0xfe>
        return -1;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	e388      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80027ea:	4b65      	ldr	r3, [pc, #404]	@ (8002980 <get_st_biases+0x294>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	b299      	uxth	r1, r3
 80027f4:	4b62      	ldr	r3, [pc, #392]	@ (8002980 <get_st_biases+0x294>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	7ddb      	ldrb	r3, [r3, #23]
 80027fa:	461a      	mov	r2, r3
 80027fc:	2305      	movs	r3, #5
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	2301      	movs	r3, #1
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	485d      	ldr	r0, [pc, #372]	@ (8002984 <get_st_biases+0x298>)
 800280e:	f00b f957 	bl	800dac0 <HAL_I2C_Mem_Write>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <get_st_biases+0x132>
        return -1;
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
 800281c:	e36e      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800281e:	4b58      	ldr	r3, [pc, #352]	@ (8002980 <get_st_biases+0x294>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	b299      	uxth	r1, r3
 8002828:	4b55      	ldr	r3, [pc, #340]	@ (8002980 <get_st_biases+0x294>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	791b      	ldrb	r3, [r3, #4]
 800282e:	461a      	mov	r2, r3
 8002830:	2305      	movs	r3, #5
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	2301      	movs	r3, #1
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2301      	movs	r3, #1
 8002840:	4850      	ldr	r0, [pc, #320]	@ (8002984 <get_st_biases+0x298>)
 8002842:	f00b f93d 	bl	800dac0 <HAL_I2C_Mem_Write>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <get_st_biases+0x166>
        return -1;
 800284c:	f04f 33ff 	mov.w	r3, #4294967295
 8002850:	e354      	b.n	8002efc <get_st_biases+0x810>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 8002852:	230c      	movs	r3, #12
 8002854:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8002858:	4b49      	ldr	r3, [pc, #292]	@ (8002980 <get_st_biases+0x294>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	b299      	uxth	r1, r3
 8002862:	4b47      	ldr	r3, [pc, #284]	@ (8002980 <get_st_biases+0x294>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	791b      	ldrb	r3, [r3, #4]
 8002868:	461a      	mov	r2, r3
 800286a:	2305      	movs	r3, #5
 800286c:	9302      	str	r3, [sp, #8]
 800286e:	2301      	movs	r3, #1
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2301      	movs	r3, #1
 800287a:	4842      	ldr	r0, [pc, #264]	@ (8002984 <get_st_biases+0x298>)
 800287c:	f00b f920 	bl	800dac0 <HAL_I2C_Mem_Write>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <get_st_biases+0x1a0>
        return -1;
 8002886:	f04f 33ff 	mov.w	r3, #4294967295
 800288a:	e337      	b.n	8002efc <get_st_biases+0x810>
    delay_ms(15);
 800288c:	200f      	movs	r0, #15
 800288e:	f00a fb27 	bl	800cee0 <HAL_Delay>
    data[0] = st.test->reg_lpf;
 8002892:	4b3b      	ldr	r3, [pc, #236]	@ (8002980 <get_st_biases+0x294>)
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	7a5b      	ldrb	r3, [r3, #9]
 8002898:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 800289c:	4b38      	ldr	r3, [pc, #224]	@ (8002980 <get_st_biases+0x294>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	b299      	uxth	r1, r3
 80028a6:	4b36      	ldr	r3, [pc, #216]	@ (8002980 <get_st_biases+0x294>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	789b      	ldrb	r3, [r3, #2]
 80028ac:	461a      	mov	r2, r3
 80028ae:	2305      	movs	r3, #5
 80028b0:	9302      	str	r3, [sp, #8]
 80028b2:	2301      	movs	r3, #1
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2301      	movs	r3, #1
 80028be:	4831      	ldr	r0, [pc, #196]	@ (8002984 <get_st_biases+0x298>)
 80028c0:	f00b f8fe 	bl	800dac0 <HAL_I2C_Mem_Write>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <get_st_biases+0x1e4>
        return -1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	e315      	b.n	8002efc <get_st_biases+0x810>
    data[0] = st.test->reg_rate_div;
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <get_st_biases+0x294>)
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	7a1b      	ldrb	r3, [r3, #8]
 80028d6:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 80028da:	4b29      	ldr	r3, [pc, #164]	@ (8002980 <get_st_biases+0x294>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	b299      	uxth	r1, r3
 80028e4:	4b26      	ldr	r3, [pc, #152]	@ (8002980 <get_st_biases+0x294>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	785b      	ldrb	r3, [r3, #1]
 80028ea:	461a      	mov	r2, r3
 80028ec:	2305      	movs	r3, #5
 80028ee:	9302      	str	r3, [sp, #8]
 80028f0:	2301      	movs	r3, #1
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2301      	movs	r3, #1
 80028fc:	4821      	ldr	r0, [pc, #132]	@ (8002984 <get_st_biases+0x298>)
 80028fe:	f00b f8df 	bl	800dac0 <HAL_I2C_Mem_Write>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <get_st_biases+0x222>
        return -1;
 8002908:	f04f 33ff 	mov.w	r3, #4294967295
 800290c:	e2f6      	b.n	8002efc <get_st_biases+0x810>
    if (hw_test)
 800290e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <get_st_biases+0x23c>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 8002916:	4b1a      	ldr	r3, [pc, #104]	@ (8002980 <get_st_biases+0x294>)
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	7a9b      	ldrb	r3, [r3, #10]
 800291c:	f063 031f 	orn	r3, r3, #31
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 8002926:	e004      	b.n	8002932 <get_st_biases+0x246>
    else
        data[0] = st.test->reg_gyro_fsr;
 8002928:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <get_st_biases+0x294>)
 800292a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292c:	7a9b      	ldrb	r3, [r3, #10]
 800292e:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 8002932:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <get_st_biases+0x294>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	b299      	uxth	r1, r3
 800293c:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <get_st_biases+0x294>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	799b      	ldrb	r3, [r3, #6]
 8002942:	461a      	mov	r2, r3
 8002944:	2305      	movs	r3, #5
 8002946:	9302      	str	r3, [sp, #8]
 8002948:	2301      	movs	r3, #1
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2301      	movs	r3, #1
 8002954:	480b      	ldr	r0, [pc, #44]	@ (8002984 <get_st_biases+0x298>)
 8002956:	f00b f8b3 	bl	800dac0 <HAL_I2C_Mem_Write>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <get_st_biases+0x27a>
        return -1;
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	e2ca      	b.n	8002efc <get_st_biases+0x810>

    if (hw_test)
 8002966:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00c      	beq.n	8002988 <get_st_biases+0x29c>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 800296e:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <get_st_biases+0x294>)
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	7adb      	ldrb	r3, [r3, #11]
 8002974:	f063 031f 	orn	r3, r3, #31
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 800297e:	e006      	b.n	800298e <get_st_biases+0x2a2>
 8002980:	20000000 	.word	0x20000000
 8002984:	20000334 	.word	0x20000334
    else
        data[0] = test.reg_accel_fsr;
 8002988:	2318      	movs	r3, #24
 800298a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 800298e:	4b73      	ldr	r3, [pc, #460]	@ (8002b5c <get_st_biases+0x470>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	b299      	uxth	r1, r3
 8002998:	4b70      	ldr	r3, [pc, #448]	@ (8002b5c <get_st_biases+0x470>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	79db      	ldrb	r3, [r3, #7]
 800299e:	461a      	mov	r2, r3
 80029a0:	2305      	movs	r3, #5
 80029a2:	9302      	str	r3, [sp, #8]
 80029a4:	2301      	movs	r3, #1
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2301      	movs	r3, #1
 80029b0:	486b      	ldr	r0, [pc, #428]	@ (8002b60 <get_st_biases+0x474>)
 80029b2:	f00b f885 	bl	800dac0 <HAL_I2C_Mem_Write>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <get_st_biases+0x2d6>
        return -1;
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295
 80029c0:	e29c      	b.n	8002efc <get_st_biases+0x810>
    if (hw_test)
 80029c2:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <get_st_biases+0x2e4>
        delay_ms(200);
 80029ca:	20c8      	movs	r0, #200	@ 0xc8
 80029cc:	f00a fa88 	bl	800cee0 <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 80029d0:	2340      	movs	r3, #64	@ 0x40
 80029d2:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80029d6:	4b61      	ldr	r3, [pc, #388]	@ (8002b5c <get_st_biases+0x470>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	b299      	uxth	r1, r3
 80029e0:	4b5e      	ldr	r3, [pc, #376]	@ (8002b5c <get_st_biases+0x470>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	791b      	ldrb	r3, [r3, #4]
 80029e6:	461a      	mov	r2, r3
 80029e8:	2305      	movs	r3, #5
 80029ea:	9302      	str	r3, [sp, #8]
 80029ec:	2301      	movs	r3, #1
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2301      	movs	r3, #1
 80029f8:	4859      	ldr	r0, [pc, #356]	@ (8002b60 <get_st_biases+0x474>)
 80029fa:	f00b f861 	bl	800dac0 <HAL_I2C_Mem_Write>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <get_st_biases+0x31e>
        return -1;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
 8002a08:	e278      	b.n	8002efc <get_st_biases+0x810>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 8002a0a:	2378      	movs	r3, #120	@ 0x78
 8002a0c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002a10:	4b52      	ldr	r3, [pc, #328]	@ (8002b5c <get_st_biases+0x470>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	b299      	uxth	r1, r3
 8002a1a:	4b50      	ldr	r3, [pc, #320]	@ (8002b5c <get_st_biases+0x470>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	795b      	ldrb	r3, [r3, #5]
 8002a20:	461a      	mov	r2, r3
 8002a22:	2305      	movs	r3, #5
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	2301      	movs	r3, #1
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	2301      	movs	r3, #1
 8002a32:	484b      	ldr	r0, [pc, #300]	@ (8002b60 <get_st_biases+0x474>)
 8002a34:	f00b f844 	bl	800dac0 <HAL_I2C_Mem_Write>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <get_st_biases+0x358>
        return -1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	e25b      	b.n	8002efc <get_st_biases+0x810>
    delay_ms(test.wait_ms);
 8002a44:	2332      	movs	r3, #50	@ 0x32
 8002a46:	4618      	mov	r0, r3
 8002a48:	f00a fa4a 	bl	800cee0 <HAL_Delay>
    data[0] = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002a52:	4b42      	ldr	r3, [pc, #264]	@ (8002b5c <get_st_biases+0x470>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	b299      	uxth	r1, r3
 8002a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b5c <get_st_biases+0x470>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	795b      	ldrb	r3, [r3, #5]
 8002a62:	461a      	mov	r2, r3
 8002a64:	2305      	movs	r3, #5
 8002a66:	9302      	str	r3, [sp, #8]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2301      	movs	r3, #1
 8002a74:	483a      	ldr	r0, [pc, #232]	@ (8002b60 <get_st_biases+0x474>)
 8002a76:	f00b f823 	bl	800dac0 <HAL_I2C_Mem_Write>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <get_st_biases+0x39a>
        return -1;
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	e23a      	b.n	8002efc <get_st_biases+0x810>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 8002a86:	4b35      	ldr	r3, [pc, #212]	@ (8002b5c <get_st_biases+0x470>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	b299      	uxth	r1, r3
 8002a90:	4b32      	ldr	r3, [pc, #200]	@ (8002b5c <get_st_biases+0x470>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	7a9b      	ldrb	r3, [r3, #10]
 8002a96:	461a      	mov	r2, r3
 8002a98:	2305      	movs	r3, #5
 8002a9a:	9302      	str	r3, [sp, #8]
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	482d      	ldr	r0, [pc, #180]	@ (8002b60 <get_st_biases+0x474>)
 8002aaa:	f00b f903 	bl	800dcb4 <HAL_I2C_Mem_Read>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <get_st_biases+0x3ce>
        return -1;
 8002ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab8:	e220      	b.n	8002efc <get_st_biases+0x810>

    fifo_count = (data[0] << 8) | data[1];
 8002aba:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002abe:	b21b      	sxth	r3, r3
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	b21a      	sxth	r2, r3
 8002ac4:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b21b      	sxth	r3, r3
 8002ace:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 8002ad2:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 8002ad6:	4b23      	ldr	r3, [pc, #140]	@ (8002b64 <get_st_biases+0x478>)
 8002ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8002adc:	08db      	lsrs	r3, r3, #3
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 8002ae4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ae8:	f103 0108 	add.w	r1, r3, #8
 8002aec:	2300      	movs	r3, #0
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002af4:	1d1a      	adds	r2, r3, #4
 8002af6:	680b      	ldr	r3, [r1, #0]
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b00:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 8002b02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b06:	f103 0108 	add.w	r1, r3, #8
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	600b      	str	r3, [r1, #0]
 8002b0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b12:	1d1a      	adds	r2, r3, #4
 8002b14:	680b      	ldr	r3, [r1, #0]
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b1e:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 8002b20:	2300      	movs	r3, #0
 8002b22:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002b26:	e0b0      	b.n	8002c8a <get_st_biases+0x59e>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <get_st_biases+0x470>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	b299      	uxth	r1, r3
 8002b32:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <get_st_biases+0x470>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	7adb      	ldrb	r3, [r3, #11]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2305      	movs	r3, #5
 8002b3c:	9302      	str	r3, [sp, #8]
 8002b3e:	230c      	movs	r3, #12
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2301      	movs	r3, #1
 8002b4a:	4805      	ldr	r0, [pc, #20]	@ (8002b60 <get_st_biases+0x474>)
 8002b4c:	f00b f8b2 	bl	800dcb4 <HAL_I2C_Mem_Read>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <get_st_biases+0x47c>
            return -1;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5a:	e1cf      	b.n	8002efc <get_st_biases+0x810>
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000334 	.word	0x20000334
 8002b64:	aaaaaaab 	.word	0xaaaaaaab
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8002b68:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002b6c:	b21b      	sxth	r3, r3
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	b21a      	sxth	r2, r3
 8002b72:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002b76:	b21b      	sxth	r3, r3
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 8002b80:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	b21a      	sxth	r2, r3
 8002b8a:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8002b8e:	b21b      	sxth	r3, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b21b      	sxth	r3, r3
 8002b94:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 8002b98:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8002b9c:	b21b      	sxth	r3, r3
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	b21a      	sxth	r2, r3
 8002ba2:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
        accel[0] += (long)accel_cur[0];
 8002bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8002bba:	441a      	add	r2, r3
 8002bbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bc0:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 8002bc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	6819      	ldr	r1, [r3, #0]
 8002bca:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bd4:	1d1a      	adds	r2, r3, #4
 8002bd6:	180b      	adds	r3, r1, r0
 8002bd8:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 8002bda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bde:	3308      	adds	r3, #8
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 8002be6:	4618      	mov	r0, r3
 8002be8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bec:	f103 0208 	add.w	r2, r3, #8
 8002bf0:	180b      	adds	r3, r1, r0
 8002bf2:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 8002bf4:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	b21a      	sxth	r2, r3
 8002bfe:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002c02:	b21b      	sxth	r3, r3
 8002c04:	4313      	orrs	r3, r2
 8002c06:	b21b      	sxth	r3, r3
 8002c08:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 8002c0c:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8002c10:	b21b      	sxth	r3, r3
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	b21a      	sxth	r2, r3
 8002c16:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 8002c1a:	b21b      	sxth	r3, r3
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 8002c24:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8002c28:	b21b      	sxth	r3, r3
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	b21a      	sxth	r2, r3
 8002c2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8002c32:	b21b      	sxth	r3, r3
 8002c34:	4313      	orrs	r3, r2
 8002c36:	b21b      	sxth	r3, r3
 8002c38:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
        gyro[0] += (long)gyro_cur[0];
 8002c3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8002c46:	441a      	add	r2, r3
 8002c48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c4c:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 8002c4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c52:	3304      	adds	r3, #4
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c60:	1d1a      	adds	r2, r3, #4
 8002c62:	180b      	adds	r3, r1, r0
 8002c64:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 8002c66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c78:	f103 0208 	add.w	r2, r3, #8
 8002c7c:	180b      	adds	r3, r1, r0
 8002c7e:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 8002c80:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002c84:	3301      	adds	r3, #1
 8002c86:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002c8a:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 8002c8e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002c92:	429a      	cmp	r2, r3
 8002c94:	f4ff af48 	bcc.w	8002b28 <get_st_biases+0x43c>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 8002c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	17da      	asrs	r2, r3, #31
 8002ca0:	461c      	mov	r4, r3
 8002ca2:	4615      	mov	r5, r2
 8002ca4:	1423      	asrs	r3, r4, #16
 8002ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002caa:	0423      	lsls	r3, r4, #16
 8002cac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002cb0:	2283      	movs	r2, #131	@ 0x83
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8002cb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cbc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002cc0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002cc4:	f7fd ffe0 	bl	8000c88 <__aeabi_ldivmod>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cde:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002ce2:	f7fd ffd1 	bl	8000c88 <__aeabi_ldivmod>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cee:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 8002cf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	17da      	asrs	r2, r3, #31
 8002cfa:	4698      	mov	r8, r3
 8002cfc:	4691      	mov	r9, r2
 8002cfe:	ea4f 4328 	mov.w	r3, r8, asr #16
 8002d02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d06:	ea4f 4308 	mov.w	r3, r8, lsl #16
 8002d0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d0e:	2283      	movs	r2, #131	@ 0x83
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d1a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002d1e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002d22:	f7fd ffb1 	bl	8000c88 <__aeabi_ldivmod>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002d32:	2200      	movs	r2, #0
 8002d34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d38:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002d3c:	f7fd ffa4 	bl	8000c88 <__aeabi_ldivmod>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d4c:	1d1a      	adds	r2, r3, #4
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 8002d52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d56:	3308      	adds	r3, #8
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	17da      	asrs	r2, r3, #31
 8002d5c:	469a      	mov	sl, r3
 8002d5e:	4693      	mov	fp, r2
 8002d60:	ea4f 432a 	mov.w	r3, sl, asr #16
 8002d64:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d66:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8002d6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d6c:	2283      	movs	r2, #131	@ 0x83
 8002d6e:	2300      	movs	r3, #0
 8002d70:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002d72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d74:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002d78:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002d7c:	f7fd ff84 	bl	8000c88 <__aeabi_ldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d90:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d92:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002d96:	f7fd ff77 	bl	8000c88 <__aeabi_ldivmod>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002da6:	f103 0208 	add.w	r2, r3, #8
 8002daa:	4603      	mov	r3, r0
 8002dac:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 8002dae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	17da      	asrs	r2, r3, #31
 8002db6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002db8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002dba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	141b      	asrs	r3, r3, #16
 8002dc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dce:	2300      	movs	r3, #0
 8002dd0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dd8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002ddc:	f7fd ff54 	bl	8000c88 <__aeabi_ldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4610      	mov	r0, r2
 8002de6:	4619      	mov	r1, r3
 8002de8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002dec:	2200      	movs	r2, #0
 8002dee:	643b      	str	r3, [r7, #64]	@ 0x40
 8002df0:	647a      	str	r2, [r7, #68]	@ 0x44
 8002df2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002df6:	f7fd ff47 	bl	8000c88 <__aeabi_ldivmod>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e02:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 8002e04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e08:	3304      	adds	r3, #4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	17da      	asrs	r2, r3, #31
 8002e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e12:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002e16:	460b      	mov	r3, r1
 8002e18:	141b      	asrs	r3, r3, #16
 8002e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	041b      	lsls	r3, r3, #16
 8002e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e26:	2300      	movs	r3, #0
 8002e28:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e30:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002e34:	f7fd ff28 	bl	8000c88 <__aeabi_ldivmod>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002e44:	2200      	movs	r2, #0
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e4e:	f7fd ff1b 	bl	8000c88 <__aeabi_ldivmod>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e5e:	3304      	adds	r3, #4
 8002e60:	4602      	mov	r2, r0
 8002e62:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 8002e64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e68:	3308      	adds	r3, #8
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	17da      	asrs	r2, r3, #31
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	61fa      	str	r2, [r7, #28]
 8002e72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002e76:	460b      	mov	r3, r1
 8002e78:	141b      	asrs	r3, r3, #16
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	041b      	lsls	r3, r3, #16
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e86:	2300      	movs	r3, #0
 8002e88:	60ba      	str	r2, [r7, #8]
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e94:	f7fd fef8 	bl	8000c88 <__aeabi_ldivmod>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eae:	f7fd feeb 	bl	8000c88 <__aeabi_ldivmod>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 8002ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ec8:	3308      	adds	r3, #8
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	dd0a      	ble.n	8002ee6 <get_st_biases+0x7fa>
        accel[2] -= 65536L;
 8002ed0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002edc:	3308      	adds	r3, #8
 8002ede:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e009      	b.n	8002efa <get_st_biases+0x80e>
    else
        accel[2] += 65536L;
 8002ee6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002eea:	3308      	adds	r3, #8
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8002ef8:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	37e0      	adds	r7, #224	@ 0xe0
 8002f00:	46bd      	mov	sp, r7
 8002f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f06:	bf00      	nop

08002f08 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08e      	sub	sp, #56	@ 0x38
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 8002f12:	2302      	movs	r3, #2
 8002f14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 8002f18:	4b64      	ldr	r3, [pc, #400]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8002f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f000 fa18 	bl	8003358 <mpu_set_dmp_state>
        dmp_was_on = 1;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002f2e:	e002      	b.n	8002f36 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 8002f36:	f107 030c 	add.w	r3, r7, #12
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fc2e 	bl	800179c <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 8002f40:	f107 030f 	add.w	r3, r7, #15
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe fcbd 	bl	80018c4 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 8002f4a:	f107 0308 	add.w	r3, r7, #8
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fd64 	bl	8001a1c <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 8002f54:	f107 030a 	add.w	r3, r7, #10
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fdf7 	bl	8001b4c <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 8002f5e:	4b53      	ldr	r3, [pc, #332]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8002f60:	7a9b      	ldrb	r3, [r3, #10]
 8002f62:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 8002f66:	f107 030e 	add.w	r3, r7, #14
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fef0 	bl	8001d50 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f74:	e00a      	b.n	8002f8c <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 8002f76:	2200      	movs	r2, #0
 8002f78:	6839      	ldr	r1, [r7, #0]
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fbb6 	bl	80026ec <get_st_biases>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 8002f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f88:	3301      	adds	r3, #1
 8002f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f92:	429a      	cmp	r2, r3
 8002f94:	dbef      	blt.n	8002f76 <mpu_run_self_test+0x6e>
 8002f96:	e000      	b.n	8002f9a <mpu_run_self_test+0x92>
            break;
 8002f98:	bf00      	nop
    if (ii == tries) {
 8002f9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d102      	bne.n	8002faa <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8002fa8:	e045      	b.n	8003036 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fae:	e00d      	b.n	8002fcc <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 8002fb0:	f107 0110 	add.w	r1, r7, #16
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	2201      	movs	r2, #1
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fb96 	bl	80026ec <get_st_biases>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc8:	3301      	adds	r3, #1
 8002fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fcc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	dbec      	blt.n	8002fb0 <mpu_run_self_test+0xa8>
 8002fd6:	e000      	b.n	8002fda <mpu_run_self_test+0xd2>
            break;
 8002fd8:	bf00      	nop
    if (ii == tries) {
 8002fda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002fde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d102      	bne.n	8002fea <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8002fe8:	e025      	b.n	8003036 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 8002fea:	f107 0310 	add.w	r3, r7, #16
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6838      	ldr	r0, [r7, #0]
 8002ff2:	f7ff fa2d 	bl	8002450 <accel_self_test>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff faa8 	bl	8002558 <gyro_self_test>
 8003008:	4603      	mov	r3, r0
 800300a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    result = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!gyro_result)
 8003012:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <mpu_run_self_test+0x11a>
        result |= 0x01;
 800301a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!accel_result)
 8003022:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <mpu_run_self_test+0x12c>
        result |= 0x02;
 800302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	633b      	str	r3, [r7, #48]	@ 0x30
 8003032:	e000      	b.n	8003036 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 8003034:	bf00      	nop
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 8003036:	4b1d      	ldr	r3, [pc, #116]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003038:	22ff      	movs	r2, #255	@ 0xff
 800303a:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800303c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ac <mpu_run_self_test+0x1a4>)
 800303e:	22ff      	movs	r2, #255	@ 0xff
 8003040:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8003042:	4b1a      	ldr	r3, [pc, #104]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003044:	22ff      	movs	r2, #255	@ 0xff
 8003046:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8003048:	4b18      	ldr	r3, [pc, #96]	@ (80030ac <mpu_run_self_test+0x1a4>)
 800304a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800304e:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 8003050:	4b16      	ldr	r3, [pc, #88]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003052:	22ff      	movs	r2, #255	@ 0xff
 8003054:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 8003056:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003058:	22ff      	movs	r2, #255	@ 0xff
 800305a:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800305c:	4b13      	ldr	r3, [pc, #76]	@ (80030ac <mpu_run_self_test+0x1a4>)
 800305e:	2201      	movs	r2, #1
 8003060:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 8003062:	89bb      	ldrh	r3, [r7, #12]
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe fbcd 	bl	8001804 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe fc63 	bl	8001938 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 8003072:	893b      	ldrh	r3, [r7, #8]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe fd0f 	bl	8001a98 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 800307a:	897b      	ldrh	r3, [r7, #10]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fd7f 	bl	8001b80 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 8003082:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fec6 	bl	8001e18 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 800308c:	7bbb      	ldrb	r3, [r7, #14]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe fe70 	bl	8001d74 <mpu_configure_fifo>

    if (dmp_was_on)
 8003094:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <mpu_run_self_test+0x19a>
        mpu_set_dmp_state(1);
 800309c:	2001      	movs	r0, #1
 800309e:	f000 f95b 	bl	8003358 <mpu_set_dmp_state>

    return result;
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3738      	adds	r7, #56	@ 0x38
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000000 	.word	0x20000000

080030b0 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af04      	add	r7, sp, #16
 80030b6:	4603      	mov	r3, r0
 80030b8:	603a      	str	r2, [r7, #0]
 80030ba:	80fb      	strh	r3, [r7, #6]
 80030bc:	460b      	mov	r3, r1
 80030be:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <mpu_write_mem+0x1c>
        return -1;
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	e04e      	b.n	800316a <mpu_write_mem+0xba>
    if (!st.chip_cfg.sensors)
 80030cc:	4b29      	ldr	r3, [pc, #164]	@ (8003174 <mpu_write_mem+0xc4>)
 80030ce:	7a9b      	ldrb	r3, [r3, #10]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <mpu_write_mem+0x2a>
        return -1;
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295
 80030d8:	e047      	b.n	800316a <mpu_write_mem+0xba>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	b29b      	uxth	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80030ea:	7b7b      	ldrb	r3, [r7, #13]
 80030ec:	461a      	mov	r2, r3
 80030ee:	88bb      	ldrh	r3, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	4a20      	ldr	r2, [pc, #128]	@ (8003174 <mpu_write_mem+0xc4>)
 80030f4:	6852      	ldr	r2, [r2, #4]
 80030f6:	8952      	ldrh	r2, [r2, #10]
 80030f8:	4293      	cmp	r3, r2
 80030fa:	dd02      	ble.n	8003102 <mpu_write_mem+0x52>
        return -1;
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003100:	e033      	b.n	800316a <mpu_write_mem+0xba>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8003102:	4b1c      	ldr	r3, [pc, #112]	@ (8003174 <mpu_write_mem+0xc4>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	b299      	uxth	r1, r3
 800310c:	4b19      	ldr	r3, [pc, #100]	@ (8003174 <mpu_write_mem+0xc4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	7e1b      	ldrb	r3, [r3, #24]
 8003112:	461a      	mov	r2, r3
 8003114:	2305      	movs	r3, #5
 8003116:	9302      	str	r3, [sp, #8]
 8003118:	2302      	movs	r3, #2
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	f107 030c 	add.w	r3, r7, #12
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	2301      	movs	r3, #1
 8003124:	4814      	ldr	r0, [pc, #80]	@ (8003178 <mpu_write_mem+0xc8>)
 8003126:	f00a fccb 	bl	800dac0 <HAL_I2C_Mem_Write>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <mpu_write_mem+0x86>
        return -1;
 8003130:	f04f 33ff 	mov.w	r3, #4294967295
 8003134:	e019      	b.n	800316a <mpu_write_mem+0xba>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8003136:	4b0f      	ldr	r3, [pc, #60]	@ (8003174 <mpu_write_mem+0xc4>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	b299      	uxth	r1, r3
 8003140:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <mpu_write_mem+0xc4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	7d5b      	ldrb	r3, [r3, #21]
 8003146:	461a      	mov	r2, r3
 8003148:	2305      	movs	r3, #5
 800314a:	9302      	str	r3, [sp, #8]
 800314c:	88bb      	ldrh	r3, [r7, #4]
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2301      	movs	r3, #1
 8003156:	4808      	ldr	r0, [pc, #32]	@ (8003178 <mpu_write_mem+0xc8>)
 8003158:	f00a fcb2 	bl	800dac0 <HAL_I2C_Mem_Write>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <mpu_write_mem+0xb8>
        return -1;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295
 8003166:	e000      	b.n	800316a <mpu_write_mem+0xba>
    return 0;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000000 	.word	0x20000000
 8003178:	20000334 	.word	0x20000334

0800317c <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af04      	add	r7, sp, #16
 8003182:	4603      	mov	r3, r0
 8003184:	603a      	str	r2, [r7, #0]
 8003186:	80fb      	strh	r3, [r7, #6]
 8003188:	460b      	mov	r3, r1
 800318a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d102      	bne.n	8003198 <mpu_read_mem+0x1c>
        return -1;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	e04e      	b.n	8003236 <mpu_read_mem+0xba>
    if (!st.chip_cfg.sensors)
 8003198:	4b29      	ldr	r3, [pc, #164]	@ (8003240 <mpu_read_mem+0xc4>)
 800319a:	7a9b      	ldrb	r3, [r3, #10]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <mpu_read_mem+0x2a>
        return -1;
 80031a0:	f04f 33ff 	mov.w	r3, #4294967295
 80031a4:	e047      	b.n	8003236 <mpu_read_mem+0xba>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80031b6:	7b7b      	ldrb	r3, [r7, #13]
 80031b8:	461a      	mov	r2, r3
 80031ba:	88bb      	ldrh	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	4a20      	ldr	r2, [pc, #128]	@ (8003240 <mpu_read_mem+0xc4>)
 80031c0:	6852      	ldr	r2, [r2, #4]
 80031c2:	8952      	ldrh	r2, [r2, #10]
 80031c4:	4293      	cmp	r3, r2
 80031c6:	dd02      	ble.n	80031ce <mpu_read_mem+0x52>
        return -1;
 80031c8:	f04f 33ff 	mov.w	r3, #4294967295
 80031cc:	e033      	b.n	8003236 <mpu_read_mem+0xba>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80031ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003240 <mpu_read_mem+0xc4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	b299      	uxth	r1, r3
 80031d8:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <mpu_read_mem+0xc4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	7e1b      	ldrb	r3, [r3, #24]
 80031de:	461a      	mov	r2, r3
 80031e0:	2305      	movs	r3, #5
 80031e2:	9302      	str	r3, [sp, #8]
 80031e4:	2302      	movs	r3, #2
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	2301      	movs	r3, #1
 80031f0:	4814      	ldr	r0, [pc, #80]	@ (8003244 <mpu_read_mem+0xc8>)
 80031f2:	f00a fc65 	bl	800dac0 <HAL_I2C_Mem_Write>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <mpu_read_mem+0x86>
        return -1;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003200:	e019      	b.n	8003236 <mpu_read_mem+0xba>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8003202:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <mpu_read_mem+0xc4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	b299      	uxth	r1, r3
 800320c:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <mpu_read_mem+0xc4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	7d5b      	ldrb	r3, [r3, #21]
 8003212:	461a      	mov	r2, r3
 8003214:	2305      	movs	r3, #5
 8003216:	9302      	str	r3, [sp, #8]
 8003218:	88bb      	ldrh	r3, [r7, #4]
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2301      	movs	r3, #1
 8003222:	4808      	ldr	r0, [pc, #32]	@ (8003244 <mpu_read_mem+0xc8>)
 8003224:	f00a fd46 	bl	800dcb4 <HAL_I2C_Mem_Read>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <mpu_read_mem+0xb8>
        return -1;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	e000      	b.n	8003236 <mpu_read_mem+0xba>
    return 0;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000000 	.word	0x20000000
 8003244:	20000334 	.word	0x20000334

08003248 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	@ 0x38
 800324c:	af04      	add	r7, sp, #16
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	4611      	mov	r1, r2
 8003252:	461a      	mov	r2, r3
 8003254:	4603      	mov	r3, r0
 8003256:	81fb      	strh	r3, [r7, #14]
 8003258:	460b      	mov	r3, r1
 800325a:	81bb      	strh	r3, [r7, #12]
 800325c:	4613      	mov	r3, r2
 800325e:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8003260:	4b3b      	ldr	r3, [pc, #236]	@ (8003350 <mpu_load_firmware+0x108>)
 8003262:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	e06b      	b.n	8003348 <mpu_load_firmware+0x100>

    if (!firmware)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <mpu_load_firmware+0x34>
        return -1;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295
 800327a:	e065      	b.n	8003348 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 800327c:	2300      	movs	r3, #0
 800327e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003280:	e034      	b.n	80032ec <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8003282:	89fa      	ldrh	r2, [r7, #14]
 8003284:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b10      	cmp	r3, #16
 800328a:	bfa8      	it	ge
 800328c:	2310      	movge	r3, #16
 800328e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8003290:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	441a      	add	r2, r3
 8003296:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8003298:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ff08 	bl	80030b0 <mpu_write_mem>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <mpu_load_firmware+0x64>
            return -1;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
 80032aa:	e04d      	b.n	8003348 <mpu_load_firmware+0x100>
        if (mpu_read_mem(ii, this_write, cur))
 80032ac:	f107 0214 	add.w	r2, r7, #20
 80032b0:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80032b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff61 	bl	800317c <mpu_read_mem>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <mpu_load_firmware+0x7e>
            return -1;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	e040      	b.n	8003348 <mpu_load_firmware+0x100>
        if (memcmp(firmware+ii, cur, this_write))
 80032c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4413      	add	r3, r2
 80032cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032ce:	f107 0114 	add.w	r1, r7, #20
 80032d2:	4618      	mov	r0, r3
 80032d4:	f00e ffba 	bl	801224c <memcmp>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <mpu_load_firmware+0x9c>
            return -2;
 80032de:	f06f 0301 	mvn.w	r3, #1
 80032e2:	e031      	b.n	8003348 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 80032e4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80032e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032e8:	4413      	add	r3, r2
 80032ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80032ec:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80032ee:	89fb      	ldrh	r3, [r7, #14]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d3c6      	bcc.n	8003282 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 80032f4:	89bb      	ldrh	r3, [r7, #12]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 80032fe:	89bb      	ldrh	r3, [r7, #12]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8003304:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <mpu_load_firmware+0x108>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	b299      	uxth	r1, r3
 800330e:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <mpu_load_firmware+0x108>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	7e9b      	ldrb	r3, [r3, #26]
 8003314:	461a      	mov	r2, r3
 8003316:	2305      	movs	r3, #5
 8003318:	9302      	str	r3, [sp, #8]
 800331a:	2302      	movs	r3, #2
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	f107 0310 	add.w	r3, r7, #16
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2301      	movs	r3, #1
 8003326:	480b      	ldr	r0, [pc, #44]	@ (8003354 <mpu_load_firmware+0x10c>)
 8003328:	f00a fbca 	bl	800dac0 <HAL_I2C_Mem_Write>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <mpu_load_firmware+0xf0>
        return -1;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295
 8003336:	e007      	b.n	8003348 <mpu_load_firmware+0x100>

    st.chip_cfg.dmp_loaded = 1;
 8003338:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <mpu_load_firmware+0x108>)
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8003340:	4a03      	ldr	r2, [pc, #12]	@ (8003350 <mpu_load_firmware+0x108>)
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	84d3      	strh	r3, [r2, #38]	@ 0x26
    return 0;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3728      	adds	r7, #40	@ 0x28
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000000 	.word	0x20000000
 8003354:	20000334 	.word	0x20000334

08003358 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af04      	add	r7, sp, #16
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8003362:	4b2e      	ldr	r3, [pc, #184]	@ (800341c <mpu_set_dmp_state+0xc4>)
 8003364:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003368:	79fa      	ldrb	r2, [r7, #7]
 800336a:	429a      	cmp	r2, r3
 800336c:	d101      	bne.n	8003372 <mpu_set_dmp_state+0x1a>
        return 0;
 800336e:	2300      	movs	r3, #0
 8003370:	e050      	b.n	8003414 <mpu_set_dmp_state+0xbc>

    if (enable) {
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d02f      	beq.n	80033d8 <mpu_set_dmp_state+0x80>
        if (!st.chip_cfg.dmp_loaded)
 8003378:	4b28      	ldr	r3, [pc, #160]	@ (800341c <mpu_set_dmp_state+0xc4>)
 800337a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <mpu_set_dmp_state+0x30>
            return -1;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295
 8003386:	e045      	b.n	8003414 <mpu_set_dmp_state+0xbc>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8003388:	2000      	movs	r0, #0
 800338a:	f7fd fe63 	bl	8001054 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 800338e:	2000      	movs	r0, #0
 8003390:	f7fe fe78 	bl	8002084 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8003394:	4b21      	ldr	r3, [pc, #132]	@ (800341c <mpu_set_dmp_state+0xc4>)
 8003396:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe fbf1 	bl	8001b80 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80033a2:	4b1e      	ldr	r3, [pc, #120]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	b299      	uxth	r1, r3
 80033ac:	2305      	movs	r3, #5
 80033ae:	9302      	str	r3, [sp, #8]
 80033b0:	2301      	movs	r3, #1
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	f107 030f 	add.w	r3, r7, #15
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2301      	movs	r3, #1
 80033bc:	2223      	movs	r2, #35	@ 0x23
 80033be:	4818      	ldr	r0, [pc, #96]	@ (8003420 <mpu_set_dmp_state+0xc8>)
 80033c0:	f00a fb7e 	bl	800dac0 <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 1;
 80033c4:	4b15      	ldr	r3, [pc, #84]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 80033cc:	2001      	movs	r0, #1
 80033ce:	f7fd fe41 	bl	8001054 <set_int_enable>
        mpu_reset_fifo();
 80033d2:	f7fe f87b 	bl	80014cc <mpu_reset_fifo>
 80033d6:	e01c      	b.n	8003412 <mpu_set_dmp_state+0xba>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 80033d8:	2000      	movs	r0, #0
 80033da:	f7fd fe3b 	bl	8001054 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 80033de:	4b0f      	ldr	r3, [pc, #60]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033e0:	7c1b      	ldrb	r3, [r3, #16]
 80033e2:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80033e4:	4b0d      	ldr	r3, [pc, #52]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	b299      	uxth	r1, r3
 80033ee:	2305      	movs	r3, #5
 80033f0:	9302      	str	r3, [sp, #8]
 80033f2:	2301      	movs	r3, #1
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	f107 030f 	add.w	r3, r7, #15
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2301      	movs	r3, #1
 80033fe:	2223      	movs	r2, #35	@ 0x23
 8003400:	4807      	ldr	r0, [pc, #28]	@ (8003420 <mpu_set_dmp_state+0xc8>)
 8003402:	f00a fb5d 	bl	800dac0 <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 0;
 8003406:	4b05      	ldr	r3, [pc, #20]	@ (800341c <mpu_set_dmp_state+0xc4>)
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        mpu_reset_fifo();
 800340e:	f7fe f85d 	bl	80014cc <mpu_reset_fifo>
    }
    return 0;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20000000 	.word	0x20000000
 8003420:	20000334 	.word	0x20000334

08003424 <myget_ms>:

    st.chip_cfg.int_motion_only = 0;
    return 0;
}
void myget_ms(unsigned long *time)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 800343c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003440:	23c8      	movs	r3, #200	@ 0xc8
 8003442:	4904      	ldr	r1, [pc, #16]	@ (8003454 <dmp_load_motion_driver_firmware+0x1c>)
 8003444:	f640 30f6 	movw	r0, #3062	@ 0xbf6
 8003448:	f7ff fefe 	bl	8003248 <mpu_load_firmware>
 800344c:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 800344e:	4618      	mov	r0, r3
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	08014c70 	.word	0x08014c70

08003458 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8003462:	4a6e      	ldr	r2, [pc, #440]	@ (800361c <dmp_set_orientation+0x1c4>)
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	4611      	mov	r1, r2
 800346c:	8019      	strh	r1, [r3, #0]
 800346e:	3302      	adds	r3, #2
 8003470:	0c12      	lsrs	r2, r2, #16
 8003472:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8003474:	4a6a      	ldr	r2, [pc, #424]	@ (8003620 <dmp_set_orientation+0x1c8>)
 8003476:	f107 0310 	add.w	r3, r7, #16
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	4611      	mov	r1, r2
 800347e:	8019      	strh	r1, [r3, #0]
 8003480:	3302      	adds	r3, #2
 8003482:	0c12      	lsrs	r2, r2, #16
 8003484:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8003486:	4a67      	ldr	r2, [pc, #412]	@ (8003624 <dmp_set_orientation+0x1cc>)
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	4611      	mov	r1, r2
 8003490:	8019      	strh	r1, [r3, #0]
 8003492:	3302      	adds	r3, #2
 8003494:	0c12      	lsrs	r2, r2, #16
 8003496:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8003498:	4a63      	ldr	r2, [pc, #396]	@ (8003628 <dmp_set_orientation+0x1d0>)
 800349a:	f107 0308 	add.w	r3, r7, #8
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	4611      	mov	r1, r2
 80034a2:	8019      	strh	r1, [r3, #0]
 80034a4:	3302      	adds	r3, #2
 80034a6:	0c12      	lsrs	r2, r2, #16
 80034a8:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	3320      	adds	r3, #32
 80034b2:	443b      	add	r3, r7
 80034b4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034b8:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	08db      	lsrs	r3, r3, #3
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	3320      	adds	r3, #32
 80034c6:	443b      	add	r3, r7
 80034c8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034cc:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	099b      	lsrs	r3, r3, #6
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	3320      	adds	r3, #32
 80034da:	443b      	add	r3, r7
 80034dc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034e0:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	3320      	adds	r3, #32
 80034ea:	443b      	add	r3, r7
 80034ec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80034f0:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	08db      	lsrs	r3, r3, #3
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	3320      	adds	r3, #32
 80034fe:	443b      	add	r3, r7
 8003500:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003504:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	099b      	lsrs	r3, r3, #6
 800350a:	b29b      	uxth	r3, r3
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	3320      	adds	r3, #32
 8003512:	443b      	add	r3, r7
 8003514:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003518:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 800351a:	f107 031c 	add.w	r3, r7, #28
 800351e:	461a      	mov	r2, r3
 8003520:	2103      	movs	r1, #3
 8003522:	f240 4026 	movw	r0, #1062	@ 0x426
 8003526:	f7ff fdc3 	bl	80030b0 <mpu_write_mem>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <dmp_set_orientation+0xde>
        return -1;
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
 8003534:	e06e      	b.n	8003614 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8003536:	f107 0318 	add.w	r3, r7, #24
 800353a:	461a      	mov	r2, r3
 800353c:	2103      	movs	r1, #3
 800353e:	f240 402a 	movw	r0, #1066	@ 0x42a
 8003542:	f7ff fdb5 	bl	80030b0 <mpu_write_mem>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <dmp_set_orientation+0xfa>
        return -1;
 800354c:	f04f 33ff 	mov.w	r3, #4294967295
 8003550:	e060      	b.n	8003614 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8003552:	f107 031c 	add.w	r3, r7, #28
 8003556:	f107 020c 	add.w	r2, r7, #12
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	4611      	mov	r1, r2
 800355e:	8019      	strh	r1, [r3, #0]
 8003560:	3302      	adds	r3, #2
 8003562:	0c12      	lsrs	r2, r2, #16
 8003564:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8003566:	f107 0318 	add.w	r3, r7, #24
 800356a:	f107 0208 	add.w	r2, r7, #8
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	4611      	mov	r1, r2
 8003572:	8019      	strh	r1, [r3, #0]
 8003574:	3302      	adds	r3, #2
 8003576:	0c12      	lsrs	r2, r2, #16
 8003578:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 8003584:	7f3b      	ldrb	r3, [r7, #28]
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 800358e:	7e3b      	ldrb	r3, [r7, #24]
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	b2db      	uxtb	r3, r3
 8003596:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 80035a2:	7f7b      	ldrb	r3, [r7, #29]
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 80035ac:	7e7b      	ldrb	r3, [r7, #25]
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 80035c0:	7fbb      	ldrb	r3, [r7, #30]
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 80035ca:	7ebb      	ldrb	r3, [r7, #26]
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 80035d4:	f107 031c 	add.w	r3, r7, #28
 80035d8:	461a      	mov	r2, r3
 80035da:	2103      	movs	r1, #3
 80035dc:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 80035e0:	f7ff fd66 	bl	80030b0 <mpu_write_mem>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <dmp_set_orientation+0x198>
        return -1;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	e011      	b.n	8003614 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 80035f0:	f107 0318 	add.w	r3, r7, #24
 80035f4:	461a      	mov	r2, r3
 80035f6:	2103      	movs	r1, #3
 80035f8:	f240 4031 	movw	r0, #1073	@ 0x431
 80035fc:	f7ff fd58 	bl	80030b0 <mpu_write_mem>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <dmp_set_orientation+0x1b4>
        return -1;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	e003      	b.n	8003614 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 800360c:	4a07      	ldr	r2, [pc, #28]	@ (800362c <dmp_set_orientation+0x1d4>)
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	8113      	strh	r3, [r2, #8]
    return 0;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	08014b80 	.word	0x08014b80
 8003620:	08014b84 	.word	0x08014b84
 8003624:	08014b88 	.word	0x08014b88
 8003628:	08014b8c 	.word	0x08014b8c
 800362c:	200002d0 	.word	0x200002d0

08003630 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 8003630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003634:	b08c      	sub	sp, #48	@ 0x30
 8003636:	af00      	add	r7, sp, #0
 8003638:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 800363a:	4b80      	ldr	r3, [pc, #512]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 800363c:	891b      	ldrh	r3, [r3, #8]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (dmp.orient & 4)
 800364c:	4b7b      	ldr	r3, [pc, #492]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 800364e:	891b      	ldrh	r3, [r3, #8]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	425b      	negs	r3, r3
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800365e:	4b77      	ldr	r3, [pc, #476]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 8003660:	891b      	ldrh	r3, [r3, #8]
 8003662:	08db      	lsrs	r3, r3, #3
 8003664:	b29b      	uxth	r3, r3
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (dmp.orient & 0x20)
 8003674:	4b71      	ldr	r3, [pc, #452]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 8003676:	891b      	ldrh	r3, [r3, #8]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 8003680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003682:	425b      	negs	r3, r3
 8003684:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8003686:	4b6d      	ldr	r3, [pc, #436]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 8003688:	891b      	ldrh	r3, [r3, #8]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	b29b      	uxth	r3, r3
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	4413      	add	r3, r2
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dmp.orient & 0x100)
 800369c:	4b67      	ldr	r3, [pc, #412]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 800369e:	891b      	ldrh	r3, [r3, #8]
 80036a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 80036a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036aa:	425b      	negs	r3, r3
 80036ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	17da      	asrs	r2, r3, #31
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	617a      	str	r2, [r7, #20]
 80036b6:	4b62      	ldr	r3, [pc, #392]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 80036b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036bc:	460a      	mov	r2, r1
 80036be:	fb03 f202 	mul.w	r2, r3, r2
 80036c2:	2300      	movs	r3, #0
 80036c4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80036c8:	4601      	mov	r1, r0
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	4a5b      	ldr	r2, [pc, #364]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 80036d2:	6939      	ldr	r1, [r7, #16]
 80036d4:	fba1 ab02 	umull	sl, fp, r1, r2
 80036d8:	445b      	add	r3, fp
 80036da:	469b      	mov	fp, r3
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	ea4f 729a 	mov.w	r2, sl, lsr #30
 80036e8:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 80036ec:	ea4f 73ab 	mov.w	r3, fp, asr #30
 80036f0:	4613      	mov	r3, r2
 80036f2:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 80036f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f6:	17da      	asrs	r2, r3, #31
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	60fa      	str	r2, [r7, #12]
 80036fc:	4b50      	ldr	r3, [pc, #320]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 80036fe:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003702:	465a      	mov	r2, fp
 8003704:	fb03 f202 	mul.w	r2, r3, r2
 8003708:	2300      	movs	r3, #0
 800370a:	4651      	mov	r1, sl
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	4413      	add	r3, r2
 8003712:	4a4b      	ldr	r2, [pc, #300]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 8003714:	4651      	mov	r1, sl
 8003716:	fba1 8902 	umull	r8, r9, r1, r2
 800371a:	444b      	add	r3, r9
 800371c:	4699      	mov	r9, r3
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800372a:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800372e:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003732:	4613      	mov	r3, r2
 8003734:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8003736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003738:	17da      	asrs	r2, r3, #31
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	4b40      	ldr	r3, [pc, #256]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 8003740:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003744:	464a      	mov	r2, r9
 8003746:	fb03 f202 	mul.w	r2, r3, r2
 800374a:	2300      	movs	r3, #0
 800374c:	4641      	mov	r1, r8
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	4413      	add	r3, r2
 8003754:	4a3a      	ldr	r2, [pc, #232]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 8003756:	4641      	mov	r1, r8
 8003758:	fba1 4502 	umull	r4, r5, r1, r2
 800375c:	442b      	add	r3, r5
 800375e:	461d      	mov	r5, r3
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	0fa2      	lsrs	r2, r4, #30
 800376a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800376e:	17ab      	asrs	r3, r5, #30
 8003770:	4613      	mov	r3, r2
 8003772:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	161b      	asrs	r3, r3, #24
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	141b      	asrs	r3, r3, #16
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	121b      	asrs	r3, r3, #8
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	b2db      	uxtb	r3, r3
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 800379a:	f107 0320 	add.w	r3, r7, #32
 800379e:	461a      	mov	r2, r3
 80037a0:	2104      	movs	r1, #4
 80037a2:	f44f 7074 	mov.w	r0, #976	@ 0x3d0
 80037a6:	f7ff fc83 	bl	80030b0 <mpu_write_mem>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <dmp_set_gyro_bias+0x186>
        return -1;
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
 80037b4:	e03c      	b.n	8003830 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 80037b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b8:	161b      	asrs	r3, r3, #24
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 80037c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c2:	141b      	asrs	r3, r3, #16
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 80037ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037cc:	121b      	asrs	r3, r3, #8
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 80037dc:	f107 0320 	add.w	r3, r7, #32
 80037e0:	461a      	mov	r2, r3
 80037e2:	2104      	movs	r1, #4
 80037e4:	f44f 7075 	mov.w	r0, #980	@ 0x3d4
 80037e8:	f7ff fc62 	bl	80030b0 <mpu_write_mem>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <dmp_set_gyro_bias+0x1c8>
        return -1;
 80037f2:	f04f 33ff 	mov.w	r3, #4294967295
 80037f6:	e01b      	b.n	8003830 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 80037f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fa:	161b      	asrs	r3, r3, #24
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 8003802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003804:	141b      	asrs	r3, r3, #16
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 800380c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380e:	121b      	asrs	r3, r3, #8
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 8003816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 800381e:	f107 0320 	add.w	r3, r7, #32
 8003822:	461a      	mov	r2, r3
 8003824:	2104      	movs	r1, #4
 8003826:	f44f 7076 	mov.w	r0, #984	@ 0x3d8
 800382a:	f7ff fc41 	bl	80030b0 <mpu_write_mem>
 800382e:	4603      	mov	r3, r0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3730      	adds	r7, #48	@ 0x30
 8003834:	46bd      	mov	sp, r7
 8003836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383a:	bf00      	nop
 800383c:	200002d0 	.word	0x200002d0
 8003840:	02cae309 	.word	0x02cae309

08003844 <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 8003844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003848:	b094      	sub	sp, #80	@ 0x50
 800384a:	af00      	add	r7, sp, #0
 800384c:	6278      	str	r0, [r7, #36]	@ 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 800384e:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fa3e 	bl	8001cd4 <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 8003858:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800385a:	b29b      	uxth	r3, r3
 800385c:	2200      	movs	r2, #0
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	61fa      	str	r2, [r7, #28]
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	69f9      	ldr	r1, [r7, #28]
 800386c:	03cb      	lsls	r3, r1, #15
 800386e:	69b9      	ldr	r1, [r7, #24]
 8003870:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 8003874:	69b9      	ldr	r1, [r7, #24]
 8003876:	03ca      	lsls	r2, r1, #15
 8003878:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    //__no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 800387c:	4b71      	ldr	r3, [pc, #452]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 800387e:	891b      	ldrh	r3, [r3, #8]
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003888:	4413      	add	r3, r2
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (dmp.orient & 4)
 800388e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 8003890:	891b      	ldrh	r3, [r3, #8]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 800389a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800389c:	425b      	negs	r3, r3
 800389e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 80038a0:	4b68      	ldr	r3, [pc, #416]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038a2:	891b      	ldrh	r3, [r3, #8]
 80038a4:	08db      	lsrs	r3, r3, #3
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b0:	4413      	add	r3, r2
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (dmp.orient & 0x20)
 80038b6:	4b63      	ldr	r3, [pc, #396]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038b8:	891b      	ldrh	r3, [r3, #8]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 80038c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c4:	425b      	negs	r3, r3
 80038c6:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 80038c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038ca:	891b      	ldrh	r3, [r3, #8]
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d8:	4413      	add	r3, r2
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	647b      	str	r3, [r7, #68]	@ 0x44
    if (dmp.orient & 0x100)
 80038de:	4b59      	ldr	r3, [pc, #356]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038e0:	891b      	ldrh	r3, [r3, #8]
 80038e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 80038ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ec:	425b      	negs	r3, r3
 80038ee:	647b      	str	r3, [r7, #68]	@ 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 80038f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038f2:	17da      	asrs	r2, r3, #31
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	617a      	str	r2, [r7, #20]
 80038f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038fe:	460a      	mov	r2, r1
 8003900:	fb02 f203 	mul.w	r2, r2, r3
 8003904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003906:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800390a:	4601      	mov	r1, r0
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003914:	6939      	ldr	r1, [r7, #16]
 8003916:	fba2 ab01 	umull	sl, fp, r2, r1
 800391a:	445b      	add	r3, fp
 800391c:	469b      	mov	fp, r3
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800392a:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 800392e:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8003932:	4613      	mov	r3, r2
 8003934:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 8003936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003938:	17da      	asrs	r2, r3, #31
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	60fa      	str	r2, [r7, #12]
 800393e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003940:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003944:	465a      	mov	r2, fp
 8003946:	fb02 f203 	mul.w	r2, r2, r3
 800394a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800394c:	4651      	mov	r1, sl
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003956:	4651      	mov	r1, sl
 8003958:	fba2 8901 	umull	r8, r9, r2, r1
 800395c:	444b      	add	r3, r9
 800395e:	4699      	mov	r9, r3
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800396c:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8003970:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003974:	4613      	mov	r3, r2
 8003976:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 8003978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800397a:	17da      	asrs	r2, r3, #31
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003982:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003986:	464a      	mov	r2, r9
 8003988:	fb02 f203 	mul.w	r2, r2, r3
 800398c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800398e:	4641      	mov	r1, r8
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003998:	4641      	mov	r1, r8
 800399a:	fba2 4501 	umull	r4, r5, r2, r1
 800399e:	442b      	add	r3, r5
 80039a0:	461d      	mov	r5, r3
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	0fa2      	lsrs	r2, r4, #30
 80039ac:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80039b0:	17ab      	asrs	r3, r5, #30
 80039b2:	4613      	mov	r3, r2
 80039b4:	647b      	str	r3, [r7, #68]	@ 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 80039b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b8:	161b      	asrs	r3, r3, #24
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 80039c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039c2:	141b      	asrs	r3, r3, #16
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 80039ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039cc:	121b      	asrs	r3, r3, #8
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 80039d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 80039dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039de:	161b      	asrs	r3, r3, #24
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 80039e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e8:	141b      	asrs	r3, r3, #16
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 80039f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f2:	121b      	asrs	r3, r3, #8
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 80039fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 8003a02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a04:	161b      	asrs	r3, r3, #24
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 8003a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a0e:	141b      	asrs	r3, r3, #16
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 8003a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a18:	121b      	asrs	r3, r3, #8
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 8003a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 8003a28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	210c      	movs	r1, #12
 8003a30:	f44f 7025 	mov.w	r0, #660	@ 0x294
 8003a34:	f7ff fb3c 	bl	80030b0 <mpu_write_mem>
 8003a38:	4603      	mov	r3, r0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3750      	adds	r7, #80	@ 0x50
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a44:	200002d0 	.word	0x200002d0

08003a48 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8003a52:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad0 <dmp_set_fifo_rate+0x88>)
 8003a54:	f107 0310 	add.w	r3, r7, #16
 8003a58:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2bc8      	cmp	r3, #200	@ 0xc8
 8003a62:	d902      	bls.n	8003a6a <dmp_set_fifo_rate+0x22>
        return -1;
 8003a64:	f04f 33ff 	mov.w	r3, #4294967295
 8003a68:	e02e      	b.n	8003ac8 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	22c8      	movs	r2, #200	@ 0xc8
 8003a6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8003a78:	8bfb      	ldrh	r3, [r7, #30]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8003a82:	8bfb      	ldrh	r3, [r7, #30]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8003a88:	f107 0308 	add.w	r3, r7, #8
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2102      	movs	r1, #2
 8003a90:	f240 2016 	movw	r0, #534	@ 0x216
 8003a94:	f7ff fb0c 	bl	80030b0 <mpu_write_mem>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <dmp_set_fifo_rate+0x5c>
        return -1;
 8003a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa2:	e011      	b.n	8003ac8 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	210c      	movs	r1, #12
 8003aac:	f640 20c1 	movw	r0, #2753	@ 0xac1
 8003ab0:	f7ff fafe 	bl	80030b0 <mpu_write_mem>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <dmp_set_fifo_rate+0x78>
        return -1;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	e003      	b.n	8003ac8 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8003ac0:	4a04      	ldr	r2, [pc, #16]	@ (8003ad4 <dmp_set_fifo_rate+0x8c>)
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	8193      	strh	r3, [r2, #12]
    return 0;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	08014b90 	.word	0x08014b90
 8003ad4:	200002d0 	.word	0x200002d0

08003ad8 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	460a      	mov	r2, r1
 8003ae2:	71fb      	strb	r3, [r7, #7]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <dmp_set_tap_thresh+0x22>
 8003af2:	88bb      	ldrh	r3, [r7, #4]
 8003af4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003af8:	d902      	bls.n	8003b00 <dmp_set_tap_thresh+0x28>
        return -1;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
 8003afe:	e10b      	b.n	8003d18 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8003b00:	88bb      	ldrh	r3, [r7, #4]
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b0a:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8003d20 <dmp_set_tap_thresh+0x248>
 8003b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b12:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 8003b16:	f107 030b 	add.w	r3, r7, #11
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fd fed2 	bl	80018c4 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8003b20:	7afb      	ldrb	r3, [r7, #11]
 8003b22:	3b02      	subs	r3, #2
 8003b24:	2b0e      	cmp	r3, #14
 8003b26:	d87d      	bhi.n	8003c24 <dmp_set_tap_thresh+0x14c>
 8003b28:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <dmp_set_tap_thresh+0x58>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b6d 	.word	0x08003b6d
 8003b34:	08003c25 	.word	0x08003c25
 8003b38:	08003b9b 	.word	0x08003b9b
 8003b3c:	08003c25 	.word	0x08003c25
 8003b40:	08003c25 	.word	0x08003c25
 8003b44:	08003c25 	.word	0x08003c25
 8003b48:	08003bc9 	.word	0x08003bc9
 8003b4c:	08003c25 	.word	0x08003c25
 8003b50:	08003c25 	.word	0x08003c25
 8003b54:	08003c25 	.word	0x08003c25
 8003b58:	08003c25 	.word	0x08003c25
 8003b5c:	08003c25 	.word	0x08003c25
 8003b60:	08003c25 	.word	0x08003c25
 8003b64:	08003c25 	.word	0x08003c25
 8003b68:	08003bf7 	.word	0x08003bf7
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8003b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b70:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8003d24 <dmp_set_tap_thresh+0x24c>
 8003b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b7c:	ee17 3a90 	vmov	r3, s15
 8003b80:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8003b82:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b86:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003d28 <dmp_set_tap_thresh+0x250>
 8003b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b92:	ee17 3a90 	vmov	r3, s15
 8003b96:	82bb      	strh	r3, [r7, #20]
        break;
 8003b98:	e047      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8003b9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b9e:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8003d2c <dmp_set_tap_thresh+0x254>
 8003ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003baa:	ee17 3a90 	vmov	r3, s15
 8003bae:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8003bb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bb4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8003d30 <dmp_set_tap_thresh+0x258>
 8003bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc0:	ee17 3a90 	vmov	r3, s15
 8003bc4:	82bb      	strh	r3, [r7, #20]
        break;
 8003bc6:	e030      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8003bc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bcc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003d34 <dmp_set_tap_thresh+0x25c>
 8003bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd8:	ee17 3a90 	vmov	r3, s15
 8003bdc:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8003bde:	edd7 7a04 	vldr	s15, [r7, #16]
 8003be2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003d38 <dmp_set_tap_thresh+0x260>
 8003be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bee:	ee17 3a90 	vmov	r3, s15
 8003bf2:	82bb      	strh	r3, [r7, #20]
        break;
 8003bf4:	e019      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8003bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bfa:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8003d3c <dmp_set_tap_thresh+0x264>
 8003bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c06:	ee17 3a90 	vmov	r3, s15
 8003c0a:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8003c0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c10:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003d40 <dmp_set_tap_thresh+0x268>
 8003c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c1c:	ee17 3a90 	vmov	r3, s15
 8003c20:	82bb      	strh	r3, [r7, #20]
        break;
 8003c22:	e002      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	e076      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8003c2a:	8afb      	ldrh	r3, [r7, #22]
 8003c2c:	0a1b      	lsrs	r3, r3, #8
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8003c34:	8afb      	ldrh	r3, [r7, #22]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8003c3a:	8abb      	ldrh	r3, [r7, #20]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8003c44:	8abb      	ldrh	r3, [r7, #20]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01c      	beq.n	8003c8e <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8003c54:	f107 030c 	add.w	r3, r7, #12
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	f44f 70ea 	mov.w	r0, #468	@ 0x1d4
 8003c60:	f7ff fa26 	bl	80030b0 <mpu_write_mem>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <dmp_set_tap_thresh+0x198>
            return -1;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	e053      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8003c70:	f107 030c 	add.w	r3, r7, #12
 8003c74:	3302      	adds	r3, #2
 8003c76:	461a      	mov	r2, r3
 8003c78:	2102      	movs	r1, #2
 8003c7a:	f44f 7092 	mov.w	r0, #292	@ 0x124
 8003c7e:	f7ff fa17 	bl	80030b0 <mpu_write_mem>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <dmp_set_tap_thresh+0x1b6>
            return -1;
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	e044      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01c      	beq.n	8003cd2 <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8003c98:	f107 030c 	add.w	r3, r7, #12
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	f44f 70ec 	mov.w	r0, #472	@ 0x1d8
 8003ca4:	f7ff fa04 	bl	80030b0 <mpu_write_mem>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <dmp_set_tap_thresh+0x1dc>
            return -1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb2:	e031      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8003cb4:	f107 030c 	add.w	r3, r7, #12
 8003cb8:	3302      	adds	r3, #2
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	f44f 7094 	mov.w	r0, #296	@ 0x128
 8003cc2:	f7ff f9f5 	bl	80030b0 <mpu_write_mem>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <dmp_set_tap_thresh+0x1fa>
            return -1;
 8003ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd0:	e022      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01c      	beq.n	8003d16 <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8003cdc:	f107 030c 	add.w	r3, r7, #12
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	f44f 70ee 	mov.w	r0, #476	@ 0x1dc
 8003ce8:	f7ff f9e2 	bl	80030b0 <mpu_write_mem>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <dmp_set_tap_thresh+0x220>
            return -1;
 8003cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf6:	e00f      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8003cf8:	f107 030c 	add.w	r3, r7, #12
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2102      	movs	r1, #2
 8003d02:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003d06:	f7ff f9d3 	bl	80030b0 <mpu_write_mem>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <dmp_set_tap_thresh+0x23e>
            return -1;
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
 8003d14:	e000      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	43480000 	.word	0x43480000
 8003d24:	46800000 	.word	0x46800000
 8003d28:	46400000 	.word	0x46400000
 8003d2c:	46000000 	.word	0x46000000
 8003d30:	45c00000 	.word	0x45c00000
 8003d34:	45800000 	.word	0x45800000
 8003d38:	45400000 	.word	0x45400000
 8003d3c:	45000000 	.word	0x45000000
 8003d40:	44c00000 	.word	0x44c00000

08003d44 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d004      	beq.n	8003d66 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d004      	beq.n	8003d7a <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	f043 030c 	orr.w	r3, r3, #12
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	f043 0303 	orr.w	r3, r3, #3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8003d8e:	f107 030f 	add.w	r3, r7, #15
 8003d92:	461a      	mov	r2, r3
 8003d94:	2101      	movs	r1, #1
 8003d96:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 8003d9a:	f7ff f989 	bl	80030b0 <mpu_write_mem>
 8003d9e:	4603      	mov	r3, r0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <dmp_set_tap_count+0x16>
        min_taps = 1;
 8003db8:	2301      	movs	r3, #1
 8003dba:	71fb      	strb	r3, [r7, #7]
 8003dbc:	e004      	b.n	8003dc8 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d901      	bls.n	8003dc8 <dmp_set_tap_count+0x20>
        min_taps = 4;
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8003dd0:	f107 030f 	add.w	r3, r7, #15
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	f240 104f 	movw	r0, #335	@ 0x14f
 8003ddc:	f7ff f968 	bl	80030b0 <mpu_write_mem>
 8003de0:	4603      	mov	r3, r0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	4a0c      	ldr	r2, [pc, #48]	@ (8003e2c <dmp_set_tap_time+0x40>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003e02:	89fb      	ldrh	r3, [r7, #14]
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003e0c:	89fb      	ldrh	r3, [r7, #14]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8003e12:	f107 030c 	add.w	r3, r7, #12
 8003e16:	461a      	mov	r2, r3
 8003e18:	2102      	movs	r1, #2
 8003e1a:	f44f 70ef 	mov.w	r0, #478	@ 0x1de
 8003e1e:	f7ff f947 	bl	80030b0 <mpu_write_mem>
 8003e22:	4603      	mov	r3, r0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	cccccccd 	.word	0xcccccccd

08003e30 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8003e70 <dmp_set_tap_time_multi+0x40>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003e46:	89fb      	ldrh	r3, [r7, #14]
 8003e48:	0a1b      	lsrs	r3, r3, #8
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 8003e56:	f107 030c 	add.w	r3, r7, #12
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	f44f 70ed 	mov.w	r0, #474	@ 0x1da
 8003e62:	f7ff f925 	bl	80030b0 <mpu_write_mem>
 8003e66:	4603      	mov	r3, r0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	cccccccd 	.word	0xcccccccd

08003e74 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a13      	ldr	r2, [pc, #76]	@ (8003ed0 <dmp_set_shake_reject_thresh+0x5c>)
 8003e84:	fb82 1203 	smull	r1, r2, r2, r3
 8003e88:	1192      	asrs	r2, r2, #6
 8003e8a:	17db      	asrs	r3, r3, #31
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	887a      	ldrh	r2, [r7, #2]
 8003e90:	fb02 f303 	mul.w	r3, r2, r3
 8003e94:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	161b      	asrs	r3, r3, #24
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	141b      	asrs	r3, r3, #16
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	121b      	asrs	r3, r3, #8
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8003eb4:	f107 0308 	add.w	r3, r7, #8
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2104      	movs	r1, #4
 8003ebc:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 8003ec0:	f7ff f8f6 	bl	80030b0 <mpu_write_mem>
 8003ec4:	4603      	mov	r3, r0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	10624dd3 	.word	0x10624dd3

08003ed4 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8003f14 <dmp_set_shake_reject_time+0x40>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	0a1b      	lsrs	r3, r3, #8
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 8003efa:	f107 030c 	add.w	r3, r7, #12
 8003efe:	461a      	mov	r2, r3
 8003f00:	2102      	movs	r1, #2
 8003f02:	f44f 70ad 	mov.w	r0, #346	@ 0x15a
 8003f06:	f7ff f8d3 	bl	80030b0 <mpu_write_mem>
 8003f0a:	4603      	mov	r3, r0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	cccccccd 	.word	0xcccccccd

08003f18 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	4a0c      	ldr	r2, [pc, #48]	@ (8003f58 <dmp_set_shake_reject_timeout+0x40>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	089b      	lsrs	r3, r3, #2
 8003f2c:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	0a1b      	lsrs	r3, r3, #8
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 8003f3e:	f107 030c 	add.w	r3, r7, #12
 8003f42:	461a      	mov	r2, r3
 8003f44:	2102      	movs	r1, #2
 8003f46:	f44f 70ac 	mov.w	r0, #344	@ 0x158
 8003f4a:	f7ff f8b1 	bl	80030b0 <mpu_write_mem>
 8003f4e:	4603      	mov	r3, r0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	cccccccd 	.word	0xcccccccd

08003f5c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8003f66:	2302      	movs	r3, #2
 8003f68:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 8003f6a:	23ca      	movs	r3, #202	@ 0xca
 8003f6c:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8003f6e:	23e3      	movs	r3, #227	@ 0xe3
 8003f70:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8003f72:	2309      	movs	r3, #9
 8003f74:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 8003f76:	f107 030c 	add.w	r3, r7, #12
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	2104      	movs	r1, #4
 8003f7e:	2068      	movs	r0, #104	@ 0x68
 8003f80:	f7ff f896 	bl	80030b0 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 8003f84:	23a3      	movs	r3, #163	@ 0xa3
 8003f86:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d006      	beq.n	8003fa0 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 8003f92:	23c0      	movs	r3, #192	@ 0xc0
 8003f94:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 8003f96:	23c8      	movs	r3, #200	@ 0xc8
 8003f98:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 8003f9a:	23c2      	movs	r3, #194	@ 0xc2
 8003f9c:	73fb      	strb	r3, [r7, #15]
 8003f9e:	e005      	b.n	8003fac <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 8003fa0:	23a3      	movs	r3, #163	@ 0xa3
 8003fa2:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 8003fa4:	23a3      	movs	r3, #163	@ 0xa3
 8003fa6:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 8003fa8:	23a3      	movs	r3, #163	@ 0xa3
 8003faa:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d006      	beq.n	8003fc4 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 8003fb6:	23c4      	movs	r3, #196	@ 0xc4
 8003fb8:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 8003fba:	23cc      	movs	r3, #204	@ 0xcc
 8003fbc:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 8003fbe:	23c6      	movs	r3, #198	@ 0xc6
 8003fc0:	74bb      	strb	r3, [r7, #18]
 8003fc2:	e005      	b.n	8003fd0 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8003fc4:	23a3      	movs	r3, #163	@ 0xa3
 8003fc6:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 8003fc8:	23a3      	movs	r3, #163	@ 0xa3
 8003fca:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8003fcc:	23a3      	movs	r3, #163	@ 0xa3
 8003fce:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 8003fd0:	23a3      	movs	r3, #163	@ 0xa3
 8003fd2:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8003fd4:	23a3      	movs	r3, #163	@ 0xa3
 8003fd6:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 8003fd8:	23a3      	movs	r3, #163	@ 0xa3
 8003fda:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8003fdc:	f107 030c 	add.w	r3, r7, #12
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	210a      	movs	r1, #10
 8003fe4:	f640 20a7 	movw	r0, #2727	@ 0xaa7
 8003fe8:	f7ff f862 	bl	80030b0 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	733b      	strb	r3, [r7, #12]
 8003ffa:	e001      	b.n	8004000 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8003ffc:	23d8      	movs	r3, #216	@ 0xd8
 8003ffe:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8004000:	f107 030c 	add.w	r3, r7, #12
 8004004:	461a      	mov	r2, r3
 8004006:	2101      	movs	r1, #1
 8004008:	f640 20b6 	movw	r0, #2742	@ 0xab6
 800400c:	f7ff f850 	bl	80030b0 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800401a:	2001      	movs	r0, #1
 800401c:	f000 f8c6 	bl	80041ac <dmp_enable_gyro_cal>
 8004020:	e002      	b.n	8004028 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 8004022:	2000      	movs	r0, #0
 8004024:	f000 f8c2 	bl	80041ac <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01d      	beq.n	800406e <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 800403c:	23b2      	movs	r3, #178	@ 0xb2
 800403e:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8004040:	238b      	movs	r3, #139	@ 0x8b
 8004042:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8004044:	23b6      	movs	r3, #182	@ 0xb6
 8004046:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8004048:	239b      	movs	r3, #155	@ 0x9b
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e007      	b.n	800405e <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 800404e:	23b0      	movs	r3, #176	@ 0xb0
 8004050:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 8004052:	2380      	movs	r3, #128	@ 0x80
 8004054:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 8004056:	23b4      	movs	r3, #180	@ 0xb4
 8004058:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 800405a:	2390      	movs	r3, #144	@ 0x90
 800405c:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800405e:	f107 030c 	add.w	r3, r7, #12
 8004062:	461a      	mov	r2, r3
 8004064:	2104      	movs	r1, #4
 8004066:	f640 20a2 	movw	r0, #2722	@ 0xaa2
 800406a:	f7ff f821 	bl	80030b0 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d025      	beq.n	80040c4 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8004078:	23f8      	movs	r3, #248	@ 0xf8
 800407a:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800407c:	f107 030c 	add.w	r3, r7, #12
 8004080:	461a      	mov	r2, r3
 8004082:	2101      	movs	r1, #1
 8004084:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 8004088:	f7ff f812 	bl	80030b0 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800408c:	21fa      	movs	r1, #250	@ 0xfa
 800408e:	2007      	movs	r0, #7
 8004090:	f7ff fd22 	bl	8003ad8 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8004094:	2007      	movs	r0, #7
 8004096:	f7ff fe55 	bl	8003d44 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800409a:	2001      	movs	r0, #1
 800409c:	f7ff fe84 	bl	8003da8 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 80040a0:	2064      	movs	r0, #100	@ 0x64
 80040a2:	f7ff fea3 	bl	8003dec <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 80040a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80040aa:	f7ff fec1 	bl	8003e30 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 80040ae:	21c8      	movs	r1, #200	@ 0xc8
 80040b0:	483c      	ldr	r0, [pc, #240]	@ (80041a4 <dmp_enable_feature+0x248>)
 80040b2:	f7ff fedf 	bl	8003e74 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 80040b6:	2028      	movs	r0, #40	@ 0x28
 80040b8:	f7ff ff0c 	bl	8003ed4 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 80040bc:	200a      	movs	r0, #10
 80040be:	f7ff ff2b 	bl	8003f18 <dmp_set_shake_reject_timeout>
 80040c2:	e009      	b.n	80040d8 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 80040c4:	23d8      	movs	r3, #216	@ 0xd8
 80040c6:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80040c8:	f107 030c 	add.w	r3, r7, #12
 80040cc:	461a      	mov	r2, r3
 80040ce:	2101      	movs	r1, #1
 80040d0:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 80040d4:	f7fe ffec 	bl	80030b0 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 80040d8:	88fb      	ldrh	r3, [r7, #6]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 80040e2:	23d9      	movs	r3, #217	@ 0xd9
 80040e4:	733b      	strb	r3, [r7, #12]
 80040e6:	e001      	b.n	80040ec <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 80040e8:	23d8      	movs	r3, #216	@ 0xd8
 80040ea:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 80040ec:	f107 030c 	add.w	r3, r7, #12
 80040f0:	461a      	mov	r2, r3
 80040f2:	2101      	movs	r1, #1
 80040f4:	f240 703d 	movw	r0, #1853	@ 0x73d
 80040f8:	f7fe ffda 	bl	80030b0 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 8004106:	2001      	movs	r0, #1
 8004108:	f000 f880 	bl	800420c <dmp_enable_lp_quat>
 800410c:	e002      	b.n	8004114 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 800410e:	2000      	movs	r0, #0
 8004110:	f000 f87c 	bl	800420c <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 800411e:	2001      	movs	r0, #1
 8004120:	f000 f89b 	bl	800425a <dmp_enable_6x_lp_quat>
 8004124:	e002      	b.n	800412c <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 8004126:	2000      	movs	r0, #0
 8004128:	f000 f897 	bl	800425a <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	f043 0308 	orr.w	r3, r3, #8
 8004132:	b29a      	uxth	r2, r3
 8004134:	4b1c      	ldr	r3, [pc, #112]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004136:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8004138:	f7fd f9c8 	bl	80014cc <mpu_reset_fifo>

    dmp.packet_length = 0;
 800413c:	4b1a      	ldr	r3, [pc, #104]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800413e:	2200      	movs	r2, #0
 8004140:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8004142:	88fb      	ldrh	r3, [r7, #6]
 8004144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 800414c:	4b16      	ldr	r3, [pc, #88]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800414e:	7b9b      	ldrb	r3, [r3, #14]
 8004150:	3306      	adds	r3, #6
 8004152:	b2da      	uxtb	r2, r3
 8004154:	4b14      	ldr	r3, [pc, #80]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004156:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8004162:	4b11      	ldr	r3, [pc, #68]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004164:	7b9b      	ldrb	r3, [r3, #14]
 8004166:	3306      	adds	r3, #6
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4b0f      	ldr	r3, [pc, #60]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800416c:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	f003 0314 	and.w	r3, r3, #20
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8004178:	4b0b      	ldr	r3, [pc, #44]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800417a:	7b9b      	ldrb	r3, [r3, #14]
 800417c:	3310      	adds	r3, #16
 800417e:	b2da      	uxtb	r2, r3
 8004180:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004182:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 800418e:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004190:	7b9b      	ldrb	r3, [r3, #14]
 8004192:	3304      	adds	r3, #4
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4b04      	ldr	r3, [pc, #16]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004198:	739a      	strb	r2, [r3, #14]

    return 0;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	02cae309 	.word	0x02cae309
 80041a8:	200002d0 	.word	0x200002d0

080041ac <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00f      	beq.n	80041dc <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 80041bc:	4a11      	ldr	r2, [pc, #68]	@ (8004204 <dmp_enable_gyro_cal+0x58>)
 80041be:	f107 0314 	add.w	r3, r7, #20
 80041c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80041c4:	c303      	stmia	r3!, {r0, r1}
 80041c6:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80041c8:	f107 0314 	add.w	r3, r7, #20
 80041cc:	461a      	mov	r2, r3
 80041ce:	2109      	movs	r1, #9
 80041d0:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 80041d4:	f7fe ff6c 	bl	80030b0 <mpu_write_mem>
 80041d8:	4603      	mov	r3, r0
 80041da:	e00e      	b.n	80041fa <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80041dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004208 <dmp_enable_gyro_cal+0x5c>)
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80041e4:	c303      	stmia	r3!, {r0, r1}
 80041e6:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80041e8:	f107 0308 	add.w	r3, r7, #8
 80041ec:	461a      	mov	r2, r3
 80041ee:	2109      	movs	r1, #9
 80041f0:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 80041f4:	f7fe ff5c 	bl	80030b0 <mpu_write_mem>
 80041f8:	4603      	mov	r3, r0
    }
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	08014b9c 	.word	0x08014b9c
 8004208:	08014ba8 	.word	0x08014ba8

0800420c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 800421c:	23c0      	movs	r3, #192	@ 0xc0
 800421e:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8004220:	23c2      	movs	r3, #194	@ 0xc2
 8004222:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8004224:	23c4      	movs	r3, #196	@ 0xc4
 8004226:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8004228:	23c6      	movs	r3, #198	@ 0xc6
 800422a:	73fb      	strb	r3, [r7, #15]
 800422c:	e006      	b.n	800423c <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 800422e:	f107 030c 	add.w	r3, r7, #12
 8004232:	2204      	movs	r2, #4
 8004234:	218b      	movs	r1, #139	@ 0x8b
 8004236:	4618      	mov	r0, r3
 8004238:	f00e f818 	bl	801226c <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	461a      	mov	r2, r3
 8004242:	2104      	movs	r1, #4
 8004244:	f640 2098 	movw	r0, #2712	@ 0xa98
 8004248:	f7fe ff32 	bl	80030b0 <mpu_write_mem>

    return mpu_reset_fifo();
 800424c:	f7fd f93e 	bl	80014cc <mpu_reset_fifo>
 8004250:	4603      	mov	r3, r0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	4603      	mov	r3, r0
 8004262:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 800426a:	2320      	movs	r3, #32
 800426c:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 800426e:	2328      	movs	r3, #40	@ 0x28
 8004270:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8004272:	2330      	movs	r3, #48	@ 0x30
 8004274:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 8004276:	2338      	movs	r3, #56	@ 0x38
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	e006      	b.n	800428a <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 800427c:	f107 030c 	add.w	r3, r7, #12
 8004280:	2204      	movs	r2, #4
 8004282:	21a3      	movs	r1, #163	@ 0xa3
 8004284:	4618      	mov	r0, r3
 8004286:	f00d fff1 	bl	801226c <memset>

    mpu_write_mem(CFG_8, 4, regs);
 800428a:	f107 030c 	add.w	r3, r7, #12
 800428e:	461a      	mov	r2, r3
 8004290:	2104      	movs	r1, #4
 8004292:	f640 209e 	movw	r0, #2718	@ 0xa9e
 8004296:	f7fe ff0b 	bl	80030b0 <mpu_write_mem>

    return mpu_reset_fifo();
 800429a:	f7fd f917 	bl	80014cc <mpu_reset_fifo>
 800429e:	4603      	mov	r3, r0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3303      	adds	r3, #3
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042ba:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3303      	adds	r3, #3
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042c6:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3301      	adds	r3, #1
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d012      	beq.n	80042fc <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 80042d6:	7bbb      	ldrb	r3, [r7, #14]
 80042d8:	08db      	lsrs	r3, r3, #3
 80042da:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 80042dc:	7bbb      	ldrb	r3, [r7, #14]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	3301      	adds	r3, #1
 80042e6:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 80042e8:	4b10      	ldr	r3, [pc, #64]	@ (800432c <decode_gesture+0x84>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 80042f0:	4b0e      	ldr	r3, [pc, #56]	@ (800432c <decode_gesture+0x84>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	7b39      	ldrb	r1, [r7, #12]
 80042f6:	7b7a      	ldrb	r2, [r7, #13]
 80042f8:	4610      	mov	r0, r2
 80042fa:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3301      	adds	r3, #1
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 800430a:	4b08      	ldr	r3, [pc, #32]	@ (800432c <decode_gesture+0x84>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d006      	beq.n	8004320 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8004312:	4b06      	ldr	r3, [pc, #24]	@ (800432c <decode_gesture+0x84>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	7bfa      	ldrb	r2, [r7, #15]
 8004318:	0992      	lsrs	r2, r2, #6
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	4610      	mov	r0, r2
 800431e:	4798      	blx	r3
    }

    return 0;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	200002d0 	.word	0x200002d0

08004330 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b092      	sub	sp, #72	@ 0x48
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    sensors[0] = 0;
 8004344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004346:	2200      	movs	r2, #0
 8004348:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800434a:	4bb1      	ldr	r3, [pc, #708]	@ (8004610 <dmp_read_fifo+0x2e0>)
 800434c:	7b9b      	ldrb	r3, [r3, #14]
 800434e:	4618      	mov	r0, r3
 8004350:	f107 0320 	add.w	r3, r7, #32
 8004354:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004356:	4619      	mov	r1, r3
 8004358:	f7fd fdf8 	bl	8001f4c <mpu_read_fifo_stream>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <dmp_read_fifo+0x38>
        return -1;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
 8004366:	e14e      	b.n	8004606 <dmp_read_fifo+0x2d6>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8004368:	4ba9      	ldr	r3, [pc, #676]	@ (8004610 <dmp_read_fifo+0x2e0>)
 800436a:	895b      	ldrh	r3, [r3, #10]
 800436c:	f003 0314 	and.w	r3, r3, #20
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 808a 	beq.w	800448a <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004376:	f897 3020 	ldrb.w	r3, [r7, #32]
 800437a:	061a      	lsls	r2, r3, #24
 800437c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004380:	041b      	lsls	r3, r3, #16
 8004382:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8004384:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004388:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800438a:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800438c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004390:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004396:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800439a:	061a      	lsls	r2, r3, #24
 800439c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80043a0:	041b      	lsls	r3, r3, #16
 80043a2:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80043a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80043a8:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80043aa:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80043ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043b0:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80043b6:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80043b8:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80043be:	061a      	lsls	r2, r3, #24
 80043c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80043c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80043cc:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043ce:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80043d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043d4:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80043da:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043dc:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80043de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80043e2:	061a      	lsls	r2, r3, #24
 80043e4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80043e8:	041b      	lsls	r3, r3, #16
 80043ea:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80043ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80043f0:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80043f2:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80043f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80043f8:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80043fe:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004400:	601a      	str	r2, [r3, #0]
        ii += 16;
 8004402:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004406:	3310      	adds	r3, #16
 8004408:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	141b      	asrs	r3, r3, #16
 8004412:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3304      	adds	r3, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	141b      	asrs	r3, r3, #16
 800441c:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3308      	adds	r3, #8
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	141b      	asrs	r3, r3, #16
 8004426:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	330c      	adds	r3, #12
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	141b      	asrs	r3, r3, #16
 8004430:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	fb03 f202 	mul.w	r2, r3, r2
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	6979      	ldr	r1, [r7, #20]
 800443e:	fb01 f303 	mul.w	r3, r1, r3
 8004442:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	69b9      	ldr	r1, [r7, #24]
 8004448:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800444c:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	69f9      	ldr	r1, [r7, #28]
 8004452:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004456:	4413      	add	r3, r2
 8004458:	643b      	str	r3, [r7, #64]	@ 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 800445a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800445c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004460:	db03      	blt.n	800446a <dmp_read_fifo+0x13a>
 8004462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004464:	f1b3 5f88 	cmp.w	r3, #285212672	@ 0x11000000
 8004468:	dd07      	ble.n	800447a <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 800446a:	f7fd f82f 	bl	80014cc <mpu_reset_fifo>
            sensors[0] = 0;
 800446e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004470:	2200      	movs	r2, #0
 8004472:	801a      	strh	r2, [r3, #0]
            return -1;
 8004474:	f04f 33ff 	mov.w	r3, #4294967295
 8004478:	e0c5      	b.n	8004606 <dmp_read_fifo+0x2d6>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 800447a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800447c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004484:	b21a      	sxth	r2, r3
 8004486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004488:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800448a:	4b61      	ldr	r3, [pc, #388]	@ (8004610 <dmp_read_fifo+0x2e0>)
 800448c:	895b      	ldrh	r3, [r3, #10]
 800448e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d04f      	beq.n	8004536 <dmp_read_fifo+0x206>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004496:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800449a:	3348      	adds	r3, #72	@ 0x48
 800449c:	443b      	add	r3, r7
 800449e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044a2:	b21b      	sxth	r3, r3
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	b21a      	sxth	r2, r3
 80044a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044ac:	3301      	adds	r3, #1
 80044ae:	3348      	adds	r3, #72	@ 0x48
 80044b0:	443b      	add	r3, r7
 80044b2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044b6:	b21b      	sxth	r3, r3
 80044b8:	4313      	orrs	r3, r2
 80044ba:	b21a      	sxth	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80044c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044c4:	3302      	adds	r3, #2
 80044c6:	3348      	adds	r3, #72	@ 0x48
 80044c8:	443b      	add	r3, r7
 80044ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044ce:	b21b      	sxth	r3, r3
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	b219      	sxth	r1, r3
 80044d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044d8:	3303      	adds	r3, #3
 80044da:	3348      	adds	r3, #72	@ 0x48
 80044dc:	443b      	add	r3, r7
 80044de:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044e2:	b21a      	sxth	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	3302      	adds	r3, #2
 80044e8:	430a      	orrs	r2, r1
 80044ea:	b212      	sxth	r2, r2
 80044ec:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80044ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044f2:	3304      	adds	r3, #4
 80044f4:	3348      	adds	r3, #72	@ 0x48
 80044f6:	443b      	add	r3, r7
 80044f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044fc:	b21b      	sxth	r3, r3
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	b219      	sxth	r1, r3
 8004502:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004506:	3305      	adds	r3, #5
 8004508:	3348      	adds	r3, #72	@ 0x48
 800450a:	443b      	add	r3, r7
 800450c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004510:	b21a      	sxth	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3304      	adds	r3, #4
 8004516:	430a      	orrs	r2, r1
 8004518:	b212      	sxth	r2, r2
 800451a:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800451c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004520:	3306      	adds	r3, #6
 8004522:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8004526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800452c:	f043 0308 	orr.w	r3, r3, #8
 8004530:	b21a      	sxth	r2, r3
 8004532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004534:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004536:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <dmp_read_fifo+0x2e0>)
 8004538:	895b      	ldrh	r3, [r3, #10]
 800453a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800453e:	2b00      	cmp	r3, #0
 8004540:	d04f      	beq.n	80045e2 <dmp_read_fifo+0x2b2>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004542:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004546:	3348      	adds	r3, #72	@ 0x48
 8004548:	443b      	add	r3, r7
 800454a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800454e:	b21b      	sxth	r3, r3
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	b21a      	sxth	r2, r3
 8004554:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004558:	3301      	adds	r3, #1
 800455a:	3348      	adds	r3, #72	@ 0x48
 800455c:	443b      	add	r3, r7
 800455e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004562:	b21b      	sxth	r3, r3
 8004564:	4313      	orrs	r3, r2
 8004566:	b21a      	sxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800456c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004570:	3302      	adds	r3, #2
 8004572:	3348      	adds	r3, #72	@ 0x48
 8004574:	443b      	add	r3, r7
 8004576:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800457a:	b21b      	sxth	r3, r3
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	b219      	sxth	r1, r3
 8004580:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004584:	3303      	adds	r3, #3
 8004586:	3348      	adds	r3, #72	@ 0x48
 8004588:	443b      	add	r3, r7
 800458a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800458e:	b21a      	sxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3302      	adds	r3, #2
 8004594:	430a      	orrs	r2, r1
 8004596:	b212      	sxth	r2, r2
 8004598:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800459a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800459e:	3304      	adds	r3, #4
 80045a0:	3348      	adds	r3, #72	@ 0x48
 80045a2:	443b      	add	r3, r7
 80045a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045a8:	b21b      	sxth	r3, r3
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	b219      	sxth	r1, r3
 80045ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045b2:	3305      	adds	r3, #5
 80045b4:	3348      	adds	r3, #72	@ 0x48
 80045b6:	443b      	add	r3, r7
 80045b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045bc:	b21a      	sxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3304      	adds	r3, #4
 80045c2:	430a      	orrs	r2, r1
 80045c4:	b212      	sxth	r2, r2
 80045c6:	801a      	strh	r2, [r3, #0]
        ii += 6;
 80045c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045cc:	3306      	adds	r3, #6
 80045ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_GYRO;
 80045d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045d8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80045dc:	b21a      	sxth	r2, r3
 80045de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045e0:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80045e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <dmp_read_fifo+0x2e0>)
 80045e4:	895b      	ldrh	r3, [r3, #10]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <dmp_read_fifo+0x2ce>
        decode_gesture(fifo_data + ii);
 80045ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045f2:	f107 0220 	add.w	r2, r7, #32
 80045f6:	4413      	add	r3, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fe55 	bl	80042a8 <decode_gesture>

    myget_ms(timestamp);
 80045fe:	6838      	ldr	r0, [r7, #0]
 8004600:	f7fe ff10 	bl	8003424 <myget_ms>
    return 0;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3748      	adds	r7, #72	@ 0x48
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	200002d0 	.word	0x200002d0

08004614 <run_self_test>:
#define DEFAULT_MPU_HZ (100)

#define q30 1073741824.0f

static int run_self_test(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	@ 0x28
 8004618:	af00      	add	r7, sp, #0
    int result;
    long gyro[3], accel[3];

    result = mpu_run_self_test(gyro, accel);
 800461a:	f107 020c 	add.w	r2, r7, #12
 800461e:	f107 0318 	add.w	r3, r7, #24
 8004622:	4611      	mov	r1, r2
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe fc6f 	bl	8002f08 <mpu_run_self_test>
 800462a:	6278      	str	r0, [r7, #36]	@ 0x24
    if (result == 0x3) {
 800462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462e:	2b03      	cmp	r3, #3
 8004630:	d150      	bne.n	80046d4 <run_self_test+0xc0>
        /* Test passed. We can trust the gyro data here, so let's push it down
         * to the DMP.
         */
        float sens;
        unsigned short accel_sens;
        mpu_get_gyro_sens(&sens);
 8004632:	f107 0308 	add.w	r3, r7, #8
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fb14 	bl	8001c64 <mpu_get_gyro_sens>
        gyro[0] = (long)(gyro[0] * sens);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004646:	edd7 7a02 	vldr	s15, [r7, #8]
 800464a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004652:	ee17 3a90 	vmov	r3, s15
 8004656:	61bb      	str	r3, [r7, #24]
        gyro[1] = (long)(gyro[1] * sens);
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004662:	edd7 7a02 	vldr	s15, [r7, #8]
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800466e:	ee17 3a90 	vmov	r3, s15
 8004672:	61fb      	str	r3, [r7, #28]
        gyro[2] = (long)(gyro[2] * sens);
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800467e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800468a:	ee17 3a90 	vmov	r3, s15
 800468e:	623b      	str	r3, [r7, #32]
        dmp_set_gyro_bias(gyro);
 8004690:	f107 0318 	add.w	r3, r7, #24
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe ffcb 	bl	8003630 <dmp_set_gyro_bias>
        mpu_get_accel_sens(&accel_sens);
 800469a:	1dbb      	adds	r3, r7, #6
 800469c:	4618      	mov	r0, r3
 800469e:	f7fd fb19 	bl	8001cd4 <mpu_get_accel_sens>
        accel[0] *= accel_sens;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	88fa      	ldrh	r2, [r7, #6]
 80046a6:	fb02 f303 	mul.w	r3, r2, r3
 80046aa:	60fb      	str	r3, [r7, #12]
        accel[1] *= accel_sens;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	88fa      	ldrh	r2, [r7, #6]
 80046b0:	fb02 f303 	mul.w	r3, r2, r3
 80046b4:	613b      	str	r3, [r7, #16]
        accel[2] *= accel_sens;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	88fa      	ldrh	r2, [r7, #6]
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	617b      	str	r3, [r7, #20]
        dmp_set_accel_bias(accel);
 80046c0:	f107 030c 	add.w	r3, r7, #12
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff f8bd 	bl	8003844 <dmp_set_accel_bias>
		printf("setting bias succesfully ......\r\n");
 80046ca:	4805      	ldr	r0, [pc, #20]	@ (80046e0 <run_self_test+0xcc>)
 80046cc:	f00d fcde 	bl	801208c <puts>
    }else
		{
			return -1;
		}
		return 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e001      	b.n	80046d8 <run_self_test+0xc4>
			return -1;
 80046d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3728      	adds	r7, #40	@ 0x28
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	08014bcc 	.word	0x08014bcc

080046e4 <inv_row_2_scale>:

static signed char gyro_orientation[9] = {-1, 0, 0,
                                           0,-1, 0,
                                           0, 0, 1};
static  unsigned short inv_row_2_scale(const signed char *row)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f993 3000 	ldrsb.w	r3, [r3]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	dd02      	ble.n	80046fc <inv_row_2_scale+0x18>
        b = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	81fb      	strh	r3, [r7, #14]
 80046fa:	e02d      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f993 3000 	ldrsb.w	r3, [r3]
 8004702:	2b00      	cmp	r3, #0
 8004704:	da02      	bge.n	800470c <inv_row_2_scale+0x28>
        b = 4;
 8004706:	2304      	movs	r3, #4
 8004708:	81fb      	strh	r3, [r7, #14]
 800470a:	e025      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3301      	adds	r3, #1
 8004710:	f993 3000 	ldrsb.w	r3, [r3]
 8004714:	2b00      	cmp	r3, #0
 8004716:	dd02      	ble.n	800471e <inv_row_2_scale+0x3a>
        b = 1;
 8004718:	2301      	movs	r3, #1
 800471a:	81fb      	strh	r3, [r7, #14]
 800471c:	e01c      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3301      	adds	r3, #1
 8004722:	f993 3000 	ldrsb.w	r3, [r3]
 8004726:	2b00      	cmp	r3, #0
 8004728:	da02      	bge.n	8004730 <inv_row_2_scale+0x4c>
        b = 5;
 800472a:	2305      	movs	r3, #5
 800472c:	81fb      	strh	r3, [r7, #14]
 800472e:	e013      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3302      	adds	r3, #2
 8004734:	f993 3000 	ldrsb.w	r3, [r3]
 8004738:	2b00      	cmp	r3, #0
 800473a:	dd02      	ble.n	8004742 <inv_row_2_scale+0x5e>
        b = 2;
 800473c:	2302      	movs	r3, #2
 800473e:	81fb      	strh	r3, [r7, #14]
 8004740:	e00a      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3302      	adds	r3, #2
 8004746:	f993 3000 	ldrsb.w	r3, [r3]
 800474a:	2b00      	cmp	r3, #0
 800474c:	da02      	bge.n	8004754 <inv_row_2_scale+0x70>
        b = 6;
 800474e:	2306      	movs	r3, #6
 8004750:	81fb      	strh	r3, [r7, #14]
 8004752:	e001      	b.n	8004758 <inv_row_2_scale+0x74>
    else
        b = 7;      // error
 8004754:	2307      	movs	r3, #7
 8004756:	81fb      	strh	r3, [r7, #14]
    return b;
 8004758:	89fb      	ldrh	r3, [r7, #14]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <inv_orientation_matrix_to_scalar>:


static  unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b084      	sub	sp, #16
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
    unsigned short scalar;
    scalar = inv_row_2_scale(mtx);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ffb8 	bl	80046e4 <inv_row_2_scale>
 8004774:	4603      	mov	r3, r0
 8004776:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3303      	adds	r3, #3
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff ffb1 	bl	80046e4 <inv_row_2_scale>
 8004782:	4603      	mov	r3, r0
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	b21a      	sxth	r2, r3
 8004788:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800478c:	4313      	orrs	r3, r2
 800478e:	b21b      	sxth	r3, r3
 8004790:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3306      	adds	r3, #6
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff ffa4 	bl	80046e4 <inv_row_2_scale>
 800479c:	4603      	mov	r3, r0
 800479e:	019b      	lsls	r3, r3, #6
 80047a0:	b21a      	sxth	r2, r3
 80047a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	b21b      	sxth	r3, r3
 80047aa:	81fb      	strh	r3, [r7, #14]


    return scalar;
 80047ac:	89fb      	ldrh	r3, [r7, #14]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <MPU6050_DMP_Init>:

int MPU6050_DMP_Init(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
	int result;
	//struct int_param_s int_param;
	result = mpu_init();
 80047be:	f7fc fcb7 	bl	8001130 <mpu_init>
 80047c2:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <MPU6050_DMP_Init+0x18>
	{
		 return -1;
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
 80047ce:	e05d      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 80047d0:	2078      	movs	r0, #120	@ 0x78
 80047d2:	f7fd fb21 	bl	8001e18 <mpu_set_sensors>
 80047d6:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <MPU6050_DMP_Init+0x2c>
	{
		 return -2;
 80047de:	f06f 0301 	mvn.w	r3, #1
 80047e2:	e053      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 80047e4:	2078      	movs	r0, #120	@ 0x78
 80047e6:	f7fd fac5 	bl	8001d74 <mpu_configure_fifo>
 80047ea:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <MPU6050_DMP_Init+0x40>
	{
		 return -3;
 80047f2:	f06f 0302 	mvn.w	r3, #2
 80047f6:	e049      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_set_sample_rate(DEFAULT_MPU_HZ);
 80047f8:	2064      	movs	r0, #100	@ 0x64
 80047fa:	f7fd f9c1 	bl	8001b80 <mpu_set_sample_rate>
 80047fe:	6078      	str	r0, [r7, #4]
	if(result != 0)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <MPU6050_DMP_Init+0x54>
	{
		 return -4;
 8004806:	f06f 0303 	mvn.w	r3, #3
 800480a:	e03f      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	
	result = dmp_load_motion_driver_firmware();
 800480c:	f7fe fe14 	bl	8003438 <dmp_load_motion_driver_firmware>
 8004810:	6078      	str	r0, [r7, #4]
	if(result != 0)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <MPU6050_DMP_Init+0x66>
	{
		 return -5;
 8004818:	f06f 0304 	mvn.w	r3, #4
 800481c:	e036      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation));
 800481e:	481d      	ldr	r0, [pc, #116]	@ (8004894 <MPU6050_DMP_Init+0xdc>)
 8004820:	f7ff ffa1 	bl	8004766 <inv_orientation_matrix_to_scalar>
 8004824:	4603      	mov	r3, r0
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fe16 	bl	8003458 <dmp_set_orientation>
 800482c:	6078      	str	r0, [r7, #4]
	if(result != 0)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <MPU6050_DMP_Init+0x82>
	{
		 return -6;
 8004834:	f06f 0305 	mvn.w	r3, #5
 8004838:	e028      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 800483a:	f240 1073 	movw	r0, #371	@ 0x173
 800483e:	f7ff fb8d 	bl	8003f5c <dmp_enable_feature>
 8004842:	6078      	str	r0, [r7, #4]
	        DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
	        DMP_FEATURE_GYRO_CAL);
	if(result != 0)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <MPU6050_DMP_Init+0x98>
	{
		 return -7;
 800484a:	f06f 0306 	mvn.w	r3, #6
 800484e:	e01d      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = dmp_set_fifo_rate(DEFAULT_MPU_HZ);
 8004850:	2064      	movs	r0, #100	@ 0x64
 8004852:	f7ff f8f9 	bl	8003a48 <dmp_set_fifo_rate>
 8004856:	6078      	str	r0, [r7, #4]
	if(result != 0)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <MPU6050_DMP_Init+0xac>
	{
		 return -8;
 800485e:	f06f 0307 	mvn.w	r3, #7
 8004862:	e013      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = run_self_test();
 8004864:	f7ff fed6 	bl	8004614 <run_self_test>
 8004868:	6078      	str	r0, [r7, #4]
	if(result != 0)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <MPU6050_DMP_Init+0xbe>
	{
		 return -9;
 8004870:	f06f 0308 	mvn.w	r3, #8
 8004874:	e00a      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_set_dmp_state(1);
 8004876:	2001      	movs	r0, #1
 8004878:	f7fe fd6e 	bl	8003358 <mpu_set_dmp_state>
 800487c:	6078      	str	r0, [r7, #4]
	if(result != 0)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <MPU6050_DMP_Init+0xd2>
	{
		 return -10;
 8004884:	f06f 0309 	mvn.w	r3, #9
 8004888:	e000      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	return 0;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	2000002c 	.word	0x2000002c

08004898 <MPU6050_DMP_Get_Data>:

int MPU6050_DMP_Get_Data(float *Pitch,float *Roll,float *Yaw)
{
 8004898:	b5b0      	push	{r4, r5, r7, lr}
 800489a:	b094      	sub	sp, #80	@ 0x50
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
	float q0 = 0.0f;
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	647b      	str	r3, [r7, #68]	@ 0x44
	float q1 = 0.0f;
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	643b      	str	r3, [r7, #64]	@ 0x40
	float q2 = 0.0f;
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float q3 = 0.0f;
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	short accel[3]; 
	long quat[4];
  unsigned long timestamp;
	short sensors;
	unsigned char more;
	if(dmp_read_fifo(gyro,accel,quat,&timestamp,&sensors,&more))
 80048bc:	f107 0414 	add.w	r4, r7, #20
 80048c0:	f107 0218 	add.w	r2, r7, #24
 80048c4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80048c8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80048cc:	f107 0311 	add.w	r3, r7, #17
 80048d0:	9301      	str	r3, [sp, #4]
 80048d2:	f107 0312 	add.w	r3, r7, #18
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	4623      	mov	r3, r4
 80048da:	f7ff fd29 	bl	8004330 <dmp_read_fifo>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <MPU6050_DMP_Get_Data+0x52>
	{
		return -1;
 80048e4:	f04f 33ff 	mov.w	r3, #4294967295
 80048e8:	e0f6      	b.n	8004ad8 <MPU6050_DMP_Get_Data+0x240>
	}
	if(sensors & INV_WXYZ_QUAT)
 80048ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80ee 	beq.w	8004ad6 <MPU6050_DMP_Get_Data+0x23e>
	{
		q0=quat[0] / q30;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	ee07 3a90 	vmov	s15, r3
 8004900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004904:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8004ae8 <MPU6050_DMP_Get_Data+0x250>
 8004908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800490c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		q1=quat[1] / q30;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800491a:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8004ae8 <MPU6050_DMP_Get_Data+0x250>
 800491e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004922:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q2=quat[2] / q30;
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	ee07 3a90 	vmov	s15, r3
 800492c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004930:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8004ae8 <MPU6050_DMP_Get_Data+0x250>
 8004934:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004938:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q3=quat[3] / q30;
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004946:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8004ae8 <MPU6050_DMP_Get_Data+0x250>
 800494a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800494e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		
		*Pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3; 	
 8004952:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004956:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800495a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800495e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004966:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800496a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800496e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800497a:	ee17 0a90 	vmov	r0, s15
 800497e:	f7fb fde3 	bl	8000548 <__aeabi_f2d>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	ec43 2b10 	vmov	d0, r2, r3
 800498a:	f00f fa4d 	bl	8013e28 <asin>
 800498e:	ec51 0b10 	vmov	r0, r1, d0
 8004992:	a353      	add	r3, pc, #332	@ (adr r3, 8004ae0 <MPU6050_DMP_Get_Data+0x248>)
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f7fb fe2e 	bl	80005f8 <__aeabi_dmul>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	f7fc f920 	bl	8000be8 <__aeabi_d2f>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	601a      	str	r2, [r3, #0]
		*Roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; // roll
 80049ae:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80049b2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80049b6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80049ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049be:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80049c2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80049c6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80049ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d2:	ee17 0a90 	vmov	r0, s15
 80049d6:	f7fb fdb7 	bl	8000548 <__aeabi_f2d>
 80049da:	4604      	mov	r4, r0
 80049dc:	460d      	mov	r5, r1
 80049de:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80049e2:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80049e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049ea:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80049ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049f2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80049f6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80049fa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80049fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a0e:	ee17 0a90 	vmov	r0, s15
 8004a12:	f7fb fd99 	bl	8000548 <__aeabi_f2d>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	ec43 2b11 	vmov	d1, r2, r3
 8004a1e:	ec45 4b10 	vmov	d0, r4, r5
 8004a22:	f00f fa35 	bl	8013e90 <atan2>
 8004a26:	ec51 0b10 	vmov	r0, r1, d0
 8004a2a:	a32d      	add	r3, pc, #180	@ (adr r3, 8004ae0 <MPU6050_DMP_Get_Data+0x248>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f7fb fde2 	bl	80005f8 <__aeabi_dmul>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f7fc f8d4 	bl	8000be8 <__aeabi_d2f>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	601a      	str	r2, [r3, #0]
		*Yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;	//yaw
 8004a46:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004a4a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a52:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8004a56:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004a66:	ee17 0a90 	vmov	r0, s15
 8004a6a:	f7fb fd6d 	bl	8000548 <__aeabi_f2d>
 8004a6e:	4604      	mov	r4, r0
 8004a70:	460d      	mov	r5, r1
 8004a72:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004a76:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004a7a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004a7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a86:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004a8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a92:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004a96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a9e:	ee17 0a90 	vmov	r0, s15
 8004aa2:	f7fb fd51 	bl	8000548 <__aeabi_f2d>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	ec43 2b11 	vmov	d1, r2, r3
 8004aae:	ec45 4b10 	vmov	d0, r4, r5
 8004ab2:	f00f f9ed 	bl	8013e90 <atan2>
 8004ab6:	ec51 0b10 	vmov	r0, r1, d0
 8004aba:	a309      	add	r3, pc, #36	@ (adr r3, 8004ae0 <MPU6050_DMP_Get_Data+0x248>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f7fb fd9a 	bl	80005f8 <__aeabi_dmul>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4619      	mov	r1, r3
 8004acc:	f7fc f88c 	bl	8000be8 <__aeabi_d2f>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	601a      	str	r2, [r3, #0]
	}
	return 0;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3748      	adds	r7, #72	@ 0x48
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae0:	66666666 	.word	0x66666666
 8004ae4:	404ca666 	.word	0x404ca666
 8004ae8:	4e800000 	.word	0x4e800000

08004aec <OLED_I2C_Init>:
// #define OLED_W_SCL(x) HAL_GPIO_WritePin(GPIOB, SCL_Pin, (GPIO_PinState)(x))
// #define OLED_W_SDA(x) HAL_GPIO_WritePin(GPIOB, SDA_Pin, (GPIO_PinState)(x))

/*引脚初始化*/
void OLED_I2C_Init(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
	// 使用硬件I2C1，不需要手动初始化GPIO
	// 在CubeMX中已经配置好了I2C1
}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <OLED_WriteCommand>:
 * @brief  OLED写命令
 * @param  Command 要写入的命令
 * @retval 无
 */
void OLED_WriteCommand(uint8_t Command)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {0x00, Command}; // 0x00表示写命令
 8004b06:	2300      	movs	r3, #0
 8004b08:	733b      	strb	r3, [r7, #12]
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, buf, 2, 100);
 8004b0e:	f107 020c 	add.w	r2, r7, #12
 8004b12:	2364      	movs	r3, #100	@ 0x64
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	2302      	movs	r3, #2
 8004b18:	2178      	movs	r1, #120	@ 0x78
 8004b1a:	4803      	ldr	r0, [pc, #12]	@ (8004b28 <OLED_WriteCommand+0x2c>)
 8004b1c:	f008 fed2 	bl	800d8c4 <HAL_I2C_Master_Transmit>
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	200002e0 	.word	0x200002e0

08004b2c <OLED_WriteData>:
 * @brief  OLED写数据
 * @param  Data 要写入的数据
 * @retval 无
 */
void OLED_WriteData(uint8_t Data)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	4603      	mov	r3, r0
 8004b34:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {0x40, Data}; // 0x40表示写数据
 8004b36:	2340      	movs	r3, #64	@ 0x40
 8004b38:	733b      	strb	r3, [r7, #12]
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, buf, 2, 100);
 8004b3e:	f107 020c 	add.w	r2, r7, #12
 8004b42:	2364      	movs	r3, #100	@ 0x64
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	2302      	movs	r3, #2
 8004b48:	2178      	movs	r1, #120	@ 0x78
 8004b4a:	4803      	ldr	r0, [pc, #12]	@ (8004b58 <OLED_WriteData+0x2c>)
 8004b4c:	f008 feba 	bl	800d8c4 <HAL_I2C_Master_Transmit>
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	200002e0 	.word	0x200002e0

08004b5c <OLED_SetCursor>:
 * @param  Y 以左上为原点，向下方向的坐标，范围：0~7
 * @param  X 以左上为原点，向右方向的坐标，范围：0~127
 * @retval 无
 */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	460a      	mov	r2, r1
 8004b66:	71fb      	strb	r3, [r7, #7]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);				 //设置Y位置
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff ffc1 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4)); //设置X位置4位
 8004b7a:	79bb      	ldrb	r3, [r7, #6]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	f043 0310 	orr.w	r3, r3, #16
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff ffb8 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));		 //设置X位置4位
 8004b8c:	79bb      	ldrb	r3, [r7, #6]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff ffb1 	bl	8004afc <OLED_WriteCommand>
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <OLED_Clear>:
 * @brief  OLED清屏
 * @param  无
 * @retval 无
 */
void OLED_Clear(void)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8004ba8:	2300      	movs	r3, #0
 8004baa:	71bb      	strb	r3, [r7, #6]
 8004bac:	e014      	b.n	8004bd8 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 8004bae:	79bb      	ldrb	r3, [r7, #6]
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff ffd2 	bl	8004b5c <OLED_SetCursor>
		for (i = 0; i < 128; i++)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	71fb      	strb	r3, [r7, #7]
 8004bbc:	e005      	b.n	8004bca <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	f7ff ffb4 	bl	8004b2c <OLED_WriteData>
		for (i = 0; i < 128; i++)
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	71fb      	strb	r3, [r7, #7]
 8004bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	daf5      	bge.n	8004bbe <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 8004bd2:	79bb      	ldrb	r3, [r7, #6]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	71bb      	strb	r3, [r7, #6]
 8004bd8:	79bb      	ldrb	r3, [r7, #6]
 8004bda:	2b07      	cmp	r3, #7
 8004bdc:	d9e7      	bls.n	8004bae <OLED_Clear+0xc>
		}
	}
}
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <OLED_Clear_Part>:
 * @param  start 列开始位，范围：1~16
 * @param  end 列开始位，范围：1~16
 * @retval 无
 */
void OLED_Clear_Part(uint8_t Line, uint8_t start, uint8_t end)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	71fb      	strb	r3, [r7, #7]
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	71bb      	strb	r3, [r7, #6]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	717b      	strb	r3, [r7, #5]
	uint8_t i, Column;
	for (Column = start; Column <= end; Column++)
 8004bfa:	79bb      	ldrb	r3, [r7, #6]
 8004bfc:	73bb      	strb	r3, [r7, #14]
 8004bfe:	e036      	b.n	8004c6e <OLED_Clear_Part+0x86>
	{
		OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8); //设置光标位置在上半部
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	7bbb      	ldrb	r3, [r7, #14]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f7ff ffa0 	bl	8004b5c <OLED_SetCursor>
		for (i = 0; i < 8; i++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e005      	b.n	8004c2e <OLED_Clear_Part+0x46>
		{
			OLED_WriteData(0x00); //显示上半部分内
 8004c22:	2000      	movs	r0, #0
 8004c24:	f7ff ff82 	bl	8004b2c <OLED_WriteData>
		for (i = 0; i < 8; i++)
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	2b07      	cmp	r3, #7
 8004c32:	d9f6      	bls.n	8004c22 <OLED_Clear_Part+0x3a>
		}
		OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8); //设置光标位置在下半部
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	7bbb      	ldrb	r3, [r7, #14]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f7ff ff86 	bl	8004b5c <OLED_SetCursor>
		for (i = 0; i < 8; i++)
 8004c50:	2300      	movs	r3, #0
 8004c52:	73fb      	strb	r3, [r7, #15]
 8004c54:	e005      	b.n	8004c62 <OLED_Clear_Part+0x7a>
		{
			OLED_WriteData(0x00); //显示下半部分内
 8004c56:	2000      	movs	r0, #0
 8004c58:	f7ff ff68 	bl	8004b2c <OLED_WriteData>
		for (i = 0; i < 8; i++)
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b07      	cmp	r3, #7
 8004c66:	d9f6      	bls.n	8004c56 <OLED_Clear_Part+0x6e>
	for (Column = start; Column <= end; Column++)
 8004c68:	7bbb      	ldrb	r3, [r7, #14]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	73bb      	strb	r3, [r7, #14]
 8004c6e:	7bba      	ldrb	r2, [r7, #14]
 8004c70:	797b      	ldrb	r3, [r7, #5]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d9c4      	bls.n	8004c00 <OLED_Clear_Part+0x18>
		}
	}
}
 8004c76:	bf00      	nop
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <OLED_ShowChar>:
 * @param  Column 列位，范围：1~16
 * @param  Char 要显示的一个字，范围：ASCII见字符
 * @retval 无
 */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	71fb      	strb	r3, [r7, #7]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	71bb      	strb	r3, [r7, #6]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8); //设置光标位置在上半部
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	79bb      	ldrb	r3, [r7, #6]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f7ff ff57 	bl	8004b5c <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
 8004cb2:	e00e      	b.n	8004cd2 <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]); //显示上半部分内
 8004cb4:	797b      	ldrb	r3, [r7, #5]
 8004cb6:	f1a3 0220 	sub.w	r2, r3, #32
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	491b      	ldr	r1, [pc, #108]	@ (8004d2c <OLED_ShowChar+0xac>)
 8004cbe:	0112      	lsls	r2, r2, #4
 8004cc0:	440a      	add	r2, r1
 8004cc2:	4413      	add	r3, r2
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff ff30 	bl	8004b2c <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b07      	cmp	r3, #7
 8004cd6:	d9ed      	bls.n	8004cb4 <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8); //设置光标位置在下半部
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	79bb      	ldrb	r3, [r7, #6]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	4619      	mov	r1, r3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	f7ff ff34 	bl	8004b5c <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	73fb      	strb	r3, [r7, #15]
 8004cf8:	e00f      	b.n	8004d1a <OLED_ShowChar+0x9a>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]); //显示下半部分内
 8004cfa:	797b      	ldrb	r3, [r7, #5]
 8004cfc:	f1a3 0220 	sub.w	r2, r3, #32
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	3308      	adds	r3, #8
 8004d04:	4909      	ldr	r1, [pc, #36]	@ (8004d2c <OLED_ShowChar+0xac>)
 8004d06:	0112      	lsls	r2, r2, #4
 8004d08:	440a      	add	r2, r1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff ff0c 	bl	8004b2c <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	3301      	adds	r3, #1
 8004d18:	73fb      	strb	r3, [r7, #15]
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	2b07      	cmp	r3, #7
 8004d1e:	d9ec      	bls.n	8004cfa <OLED_ShowChar+0x7a>
	}
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	08015868 	.word	0x08015868

08004d30 <OLED_ShowString>:
 * @param  Column 起始列位置，范围：1~16
 * @param  String 要显示的字符串，范围：ASCII见字符
 * @retval 无
 */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4603      	mov	r3, r0
 8004d38:	603a      	str	r2, [r7, #0]
 8004d3a:	71fb      	strb	r3, [r7, #7]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 8004d40:	2300      	movs	r3, #0
 8004d42:	73fb      	strb	r3, [r7, #15]
 8004d44:	e00e      	b.n	8004d64 <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 8004d46:	79ba      	ldrb	r2, [r7, #6]
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	b2d9      	uxtb	r1, r3
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	4413      	add	r3, r2
 8004d54:	781a      	ldrb	r2, [r3, #0]
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff ff91 	bl	8004c80 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
 8004d60:	3301      	adds	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	4413      	add	r3, r2
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ea      	bne.n	8004d46 <OLED_ShowString+0x16>
	}
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <OLED_Pow>:
/**
 * @brief  OLED次方函数
 * @retval 返回值等于X的Y次方
 */
uint32_t OLED_Pow(uint32_t X, uint32_t Y)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
	uint32_t Result = 1;
 8004d84:	2301      	movs	r3, #1
 8004d86:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8004d88:	e004      	b.n	8004d94 <OLED_Pow+0x1a>
	{
		Result *= X;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	1e5a      	subs	r2, r3, #1
 8004d98:	603a      	str	r2, [r7, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f5      	bne.n	8004d8a <OLED_Pow+0x10>
	}
	return Result;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <OLED_ShowNum>:
 * @param  Number 要显示的数字，范围：0~4294967295
 * @param  Length 要显示数字的长度，范围：1~10
 * @retval 无
 */
void OLED_ShowNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 8004dac:	b590      	push	{r4, r7, lr}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	603a      	str	r2, [r7, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	4603      	mov	r3, r0
 8004db8:	71fb      	strb	r3, [r7, #7]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	71bb      	strb	r3, [r7, #6]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < Length; i++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
 8004dc6:	e023      	b.n	8004e10 <OLED_ShowNum+0x64>
	{
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(10, Length - i - 1) % 10 + '0');
 8004dc8:	79ba      	ldrb	r2, [r7, #6]
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	4413      	add	r3, r2
 8004dce:	b2dc      	uxtb	r4, r3
 8004dd0:	797a      	ldrb	r2, [r7, #5]
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	4619      	mov	r1, r3
 8004dda:	200a      	movs	r0, #10
 8004ddc:	f7ff ffcd 	bl	8004d7a <OLED_Pow>
 8004de0:	4602      	mov	r2, r0
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004de8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e24 <OLED_ShowNum+0x78>)
 8004dea:	fba3 2301 	umull	r2, r3, r3, r1
 8004dee:	08da      	lsrs	r2, r3, #3
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	1aca      	subs	r2, r1, r3
 8004dfa:	b2d3      	uxtb	r3, r2
 8004dfc:	3330      	adds	r3, #48	@ 0x30
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	4621      	mov	r1, r4
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ff3b 	bl	8004c80 <OLED_ShowChar>
	for (i = 0; i < Length; i++)
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
 8004e10:	7bfa      	ldrb	r2, [r7, #15]
 8004e12:	797b      	ldrb	r3, [r7, #5]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d3d7      	bcc.n	8004dc8 <OLED_ShowNum+0x1c>
	}
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}
 8004e22:	bf00      	nop
 8004e24:	cccccccd 	.word	0xcccccccd

08004e28 <OLED_Init>:
 * @brief  OLED初始化
 * @param  无
 * @retval 无
 */
void OLED_Init(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
	// 增加上电延时
	HAL_Delay(100);  // 使用HAL_Delay替代for循环延时
 8004e2c:	2064      	movs	r0, #100	@ 0x64
 8004e2e:	f008 f857 	bl	800cee0 <HAL_Delay>

	// 初始化I2C
	OLED_I2C_Init();
 8004e32:	f7ff fe5b 	bl	8004aec <OLED_I2C_Init>

	// 等待OLED稳定
	HAL_Delay(100);
 8004e36:	2064      	movs	r0, #100	@ 0x64
 8004e38:	f008 f852 	bl	800cee0 <HAL_Delay>

	OLED_WriteCommand(0xAE); //关闭显示
 8004e3c:	20ae      	movs	r0, #174	@ 0xae
 8004e3e:	f7ff fe5d 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xD5); //设置显示时钟分比/震荡器频率
 8004e42:	20d5      	movs	r0, #213	@ 0xd5
 8004e44:	f7ff fe5a 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 8004e48:	2080      	movs	r0, #128	@ 0x80
 8004e4a:	f7ff fe57 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xA8); //设置多路复用
 8004e4e:	20a8      	movs	r0, #168	@ 0xa8
 8004e50:	f7ff fe54 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 8004e54:	203f      	movs	r0, #63	@ 0x3f
 8004e56:	f7ff fe51 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xD3); //设置显示偏移
 8004e5a:	20d3      	movs	r0, #211	@ 0xd3
 8004e5c:	f7ff fe4e 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 8004e60:	2000      	movs	r0, #0
 8004e62:	f7ff fe4b 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0x40); //设置显示开始
 8004e66:	2040      	movs	r0, #64	@ 0x40
 8004e68:	f7ff fe48 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xA1); //设置左右方向0xA1正常 0xA0左右反置
 8004e6c:	20a1      	movs	r0, #161	@ 0xa1
 8004e6e:	f7ff fe45 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xC8); //设置上下方向0xC8正常 0xC0上下反置
 8004e72:	20c8      	movs	r0, #200	@ 0xc8
 8004e74:	f7ff fe42 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xDA); //设置COM引脚件配
 8004e78:	20da      	movs	r0, #218	@ 0xda
 8004e7a:	f7ff fe3f 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8004e7e:	2012      	movs	r0, #18
 8004e80:	f7ff fe3c 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0x81); //设置对比度控
 8004e84:	2081      	movs	r0, #129	@ 0x81
 8004e86:	f7ff fe39 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 8004e8a:	20cf      	movs	r0, #207	@ 0xcf
 8004e8c:	f7ff fe36 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xD9); //设置预充电周
 8004e90:	20d9      	movs	r0, #217	@ 0xd9
 8004e92:	f7ff fe33 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8004e96:	20f1      	movs	r0, #241	@ 0xf1
 8004e98:	f7ff fe30 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xDB); //设置VCOMH取消选择级别
 8004e9c:	20db      	movs	r0, #219	@ 0xdb
 8004e9e:	f7ff fe2d 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8004ea2:	2030      	movs	r0, #48	@ 0x30
 8004ea4:	f7ff fe2a 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xA4); //设置整个显示打开/关闭
 8004ea8:	20a4      	movs	r0, #164	@ 0xa4
 8004eaa:	f7ff fe27 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xA6); //设置正常/倒转显示
 8004eae:	20a6      	movs	r0, #166	@ 0xa6
 8004eb0:	f7ff fe24 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0x8D); //设置充电
 8004eb4:	208d      	movs	r0, #141	@ 0x8d
 8004eb6:	f7ff fe21 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8004eba:	2014      	movs	r0, #20
 8004ebc:	f7ff fe1e 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xAF); //开显示
 8004ec0:	20af      	movs	r0, #175	@ 0xaf
 8004ec2:	f7ff fe1b 	bl	8004afc <OLED_WriteCommand>

	OLED_Clear(); // OLED清屏
 8004ec6:	f7ff fe6c 	bl	8004ba2 <OLED_Clear>
	
	// 等待显示稳定
	HAL_Delay(100);
 8004eca:	2064      	movs	r0, #100	@ 0x64
 8004ecc:	f008 f808 	bl	800cee0 <HAL_Delay>
}
 8004ed0:	bf00      	nop
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <Servo_Init>:
// 定时器时钟频率（APB2=84MHz，TIMx使用84MHz）
#define TIMER_CLK_FREQ 168000000  // 单位：Hz

void Servo_Init(Servo* servo, TIM_HandleTypeDef* timer, uint32_t channel,
                GPIO_TypeDef* gpio_port, uint16_t gpio_pin) 
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
    servo->timer = timer;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	601a      	str	r2, [r3, #0]
    servo->channel = channel;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	605a      	str	r2, [r3, #4]
    servo->gpio_port = gpio_port;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	609a      	str	r2, [r3, #8]
    servo->gpio_pin = gpio_pin;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8c3a      	ldrh	r2, [r7, #32]
 8004ef8:	819a      	strh	r2, [r3, #12]
    servo->pulse_width = SERVO_MIN_PULSE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004f00:	611a      	str	r2, [r3, #16]

    // 配置PWM周期
    uint32_t period_cycles = (TIMER_CLK_FREQ / 1000000) * SERVO_PWM_PERIOD / 
                            (timer->Init.Prescaler + 1);
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	3301      	adds	r3, #1
    uint32_t period_cycles = (TIMER_CLK_FREQ / 1000000) * SERVO_PWM_PERIOD / 
 8004f08:	4a0d      	ldr	r2, [pc, #52]	@ (8004f40 <Servo_Init+0x6c>)
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_AUTORELOAD(timer, period_cycles - 1);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	3a01      	subs	r2, #1
 8004f18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	1e5a      	subs	r2, r3, #1
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	60da      	str	r2, [r3, #12]

    // 启动PWM
    HAL_TIM_PWM_Start(timer, channel);
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	68b8      	ldr	r0, [r7, #8]
 8004f26:	f00a fa97 	bl	800f458 <HAL_TIM_PWM_Start>
    Servo_SetPulse(servo, servo->pulse_width);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f807 	bl	8004f44 <Servo_SetPulse>
}
 8004f36:	bf00      	nop
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	00334500 	.word	0x00334500

08004f44 <Servo_SetPulse>:
                    (uint32_t)((SERVO_MAX_PULSE - SERVO_MIN_PULSE) * angle / 180.0f);
    
    Servo_SetPulse(servo, pulse);
}

void Servo_SetPulse(Servo* servo, uint32_t pulse_us) {
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
    // 计算比较寄存器值
    uint32_t pulse_cycles = (TIMER_CLK_FREQ / 1000000) * pulse_us / 
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	22a8      	movs	r2, #168	@ 0xa8
 8004f52:	fb03 f202 	mul.w	r2, r3, r2
                           (servo->timer->Init.Prescaler + 1);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	3301      	adds	r3, #1
    uint32_t pulse_cycles = (TIMER_CLK_FREQ / 1000000) * pulse_us / 
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	60fb      	str	r3, [r7, #12]
    
    // 设置比较值
    switch(servo->channel) {
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <Servo_SetPulse+0x2e>
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d006      	beq.n	8004f7e <Servo_SetPulse+0x3a>
 8004f70:	e00b      	b.n	8004f8a <Servo_SetPulse+0x46>
        case TIM_CHANNEL_1:
            __HAL_TIM_SET_COMPARE(servo->timer, TIM_CHANNEL_1, pulse_cycles);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8004f7c:	e005      	b.n	8004f8a <Servo_SetPulse+0x46>
        case TIM_CHANNEL_2:
            __HAL_TIM_SET_COMPARE(servo->timer, TIM_CHANNEL_2, pulse_cycles);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8004f88:	bf00      	nop
        // 添加其他通道...
    }
    servo->pulse_width = pulse_us;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	611a      	str	r2, [r3, #16]
}
 8004f90:	bf00      	nop
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08e      	sub	sp, #56	@ 0x38
 8004fa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	605a      	str	r2, [r3, #4]
 8004fac:	609a      	str	r2, [r3, #8]
 8004fae:	60da      	str	r2, [r3, #12]
 8004fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	4bac      	ldr	r3, [pc, #688]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fba:	4aab      	ldr	r2, [pc, #684]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fbc:	f043 0310 	orr.w	r3, r3, #16
 8004fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fc2:	4ba9      	ldr	r3, [pc, #676]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc6:	f003 0310 	and.w	r3, r3, #16
 8004fca:	623b      	str	r3, [r7, #32]
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	4ba5      	ldr	r3, [pc, #660]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd6:	4aa4      	ldr	r2, [pc, #656]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fd8:	f043 0304 	orr.w	r3, r3, #4
 8004fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fde:	4ba2      	ldr	r3, [pc, #648]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	4b9e      	ldr	r3, [pc, #632]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff2:	4a9d      	ldr	r2, [pc, #628]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004ff4:	f043 0320 	orr.w	r3, r3, #32
 8004ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ffa:	4b9b      	ldr	r3, [pc, #620]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005006:	2300      	movs	r3, #0
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	4b97      	ldr	r3, [pc, #604]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500e:	4a96      	ldr	r2, [pc, #600]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005014:	6313      	str	r3, [r2, #48]	@ 0x30
 8005016:	4b94      	ldr	r3, [pc, #592]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	4b90      	ldr	r3, [pc, #576]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502a:	4a8f      	ldr	r2, [pc, #572]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	6313      	str	r3, [r2, #48]	@ 0x30
 8005032:	4b8d      	ldr	r3, [pc, #564]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	4b89      	ldr	r3, [pc, #548]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005046:	4a88      	ldr	r2, [pc, #544]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005048:	f043 0302 	orr.w	r3, r3, #2
 800504c:	6313      	str	r3, [r2, #48]	@ 0x30
 800504e:	4b86      	ldr	r3, [pc, #536]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	4b82      	ldr	r3, [pc, #520]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005062:	4a81      	ldr	r2, [pc, #516]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005064:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005068:	6313      	str	r3, [r2, #48]	@ 0x30
 800506a:	4b7f      	ldr	r3, [pc, #508]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005076:	2300      	movs	r3, #0
 8005078:	607b      	str	r3, [r7, #4]
 800507a:	4b7b      	ldr	r3, [pc, #492]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507e:	4a7a      	ldr	r2, [pc, #488]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005080:	f043 0308 	orr.w	r3, r3, #8
 8005084:	6313      	str	r3, [r2, #48]	@ 0x30
 8005086:	4b78      	ldr	r3, [pc, #480]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M4_IN1_Pin|M4_IN2_Pin|M3_IN1_Pin, GPIO_PIN_RESET);
 8005092:	2200      	movs	r2, #0
 8005094:	212a      	movs	r1, #42	@ 0x2a
 8005096:	4875      	ldr	r0, [pc, #468]	@ (800526c <MX_GPIO_Init+0x2d0>)
 8005098:	f008 fa9e 	bl	800d5d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_IN2_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800509c:	2200      	movs	r2, #0
 800509e:	f24f 0102 	movw	r1, #61442	@ 0xf002
 80050a2:	4873      	ldr	r0, [pc, #460]	@ (8005270 <MX_GPIO_Init+0x2d4>)
 80050a4:	f008 fa98 	bl	800d5d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, M1_IN1_Pin|GPIO_PIN_1|M2_IN1_Pin|Trig_2_Pin, GPIO_PIN_RESET);
 80050a8:	2200      	movs	r2, #0
 80050aa:	f248 010b 	movw	r1, #32779	@ 0x800b
 80050ae:	4871      	ldr	r0, [pc, #452]	@ (8005274 <MX_GPIO_Init+0x2d8>)
 80050b0:	f008 fa92 	bl	800d5d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M1_IN2_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12
 80050b4:	2200      	movs	r2, #0
 80050b6:	f24d 5180 	movw	r1, #54656	@ 0xd580
 80050ba:	486f      	ldr	r0, [pc, #444]	@ (8005278 <MX_GPIO_Init+0x2dc>)
 80050bc:	f008 fa8c 	bl	800d5d8 <HAL_GPIO_WritePin>
                          |Trig_4_Pin|Trig_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_RESET);
 80050c0:	2200      	movs	r2, #0
 80050c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050c6:	486d      	ldr	r0, [pc, #436]	@ (800527c <MX_GPIO_Init+0x2e0>)
 80050c8:	f008 fa86 	bl	800d5d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE13
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_13
 80050cc:	f242 031f 	movw	r3, #8223	@ 0x201f
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050d2:	2303      	movs	r3, #3
 80050d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050de:	4619      	mov	r1, r3
 80050e0:	4865      	ldr	r0, [pc, #404]	@ (8005278 <MX_GPIO_Init+0x2dc>)
 80050e2:	f008 f8c5 	bl	800d270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC2 PC4
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 80050e6:	f242 1315 	movw	r3, #8469	@ 0x2115
 80050ea:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ec:	2303      	movs	r3, #3
 80050ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050f8:	4619      	mov	r1, r3
 80050fa:	485c      	ldr	r0, [pc, #368]	@ (800526c <MX_GPIO_Init+0x2d0>)
 80050fc:	f008 f8b8 	bl	800d270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF7 PF8
                           PF9 PF10 PF11 PF12
                           PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005100:	f64f 73bf 	movw	r3, #65471	@ 0xffbf
 8005104:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005106:	2303      	movs	r3, #3
 8005108:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510a:	2300      	movs	r3, #0
 800510c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800510e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005112:	4619      	mov	r1, r3
 8005114:	485a      	ldr	r0, [pc, #360]	@ (8005280 <MX_GPIO_Init+0x2e4>)
 8005116:	f008 f8ab 	bl	800d270 <HAL_GPIO_Init>

  /*Configure GPIO pins : M4_IN1_Pin M4_IN2_Pin M3_IN1_Pin */
  GPIO_InitStruct.Pin = M4_IN1_Pin|M4_IN2_Pin|M3_IN1_Pin;
 800511a:	232a      	movs	r3, #42	@ 0x2a
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800511e:	2301      	movs	r3, #1
 8005120:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005122:	2300      	movs	r3, #0
 8005124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005126:	2300      	movs	r3, #0
 8005128:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800512a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800512e:	4619      	mov	r1, r3
 8005130:	484e      	ldr	r0, [pc, #312]	@ (800526c <MX_GPIO_Init+0x2d0>)
 8005132:	f008 f89d 	bl	800d270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8005136:	f649 0310 	movw	r3, #38928	@ 0x9810
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800513c:	2303      	movs	r3, #3
 800513e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005148:	4619      	mov	r1, r3
 800514a:	484e      	ldr	r0, [pc, #312]	@ (8005284 <MX_GPIO_Init+0x2e8>)
 800514c:	f008 f890 	bl	800d270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8005150:	f240 3335 	movw	r3, #821	@ 0x335
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005156:	2303      	movs	r3, #3
 8005158:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515a:	2300      	movs	r3, #0
 800515c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800515e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005162:	4619      	mov	r1, r3
 8005164:	4842      	ldr	r0, [pc, #264]	@ (8005270 <MX_GPIO_Init+0x2d4>)
 8005166:	f008 f883 	bl	800d270 <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_IN2_Pin PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = M3_IN2_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800516a:	f24f 0302 	movw	r3, #61442	@ 0xf002
 800516e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005170:	2301      	movs	r3, #1
 8005172:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005174:	2300      	movs	r3, #0
 8005176:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005178:	2300      	movs	r3, #0
 800517a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800517c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005180:	4619      	mov	r1, r3
 8005182:	483b      	ldr	r0, [pc, #236]	@ (8005270 <MX_GPIO_Init+0x2d4>)
 8005184:	f008 f874 	bl	800d270 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin PG1 M2_IN1_Pin Trig_2_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|GPIO_PIN_1|M2_IN1_Pin|Trig_2_Pin;
 8005188:	f248 030b 	movw	r3, #32779	@ 0x800b
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800518e:	2301      	movs	r3, #1
 8005190:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005192:	2300      	movs	r3, #0
 8005194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005196:	2300      	movs	r3, #0
 8005198:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800519a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800519e:	4619      	mov	r1, r3
 80051a0:	4834      	ldr	r0, [pc, #208]	@ (8005274 <MX_GPIO_Init+0x2d8>)
 80051a2:	f008 f865 	bl	800d270 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN2_Pin PE8 PE10 PE12
                           Trig_4_Pin Trig_3_Pin */
  GPIO_InitStruct.Pin = M1_IN2_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12
 80051a6:	f24d 5380 	movw	r3, #54656	@ 0xd580
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |Trig_4_Pin|Trig_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051ac:	2301      	movs	r3, #1
 80051ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b4:	2300      	movs	r3, #0
 80051b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051bc:	4619      	mov	r1, r3
 80051be:	482e      	ldr	r0, [pc, #184]	@ (8005278 <MX_GPIO_Init+0x2dc>)
 80051c0:	f008 f856 	bl	800d270 <HAL_GPIO_Init>

  /*Configure GPIO pins : Echo_4_Pin Echo_3_Pin */
  GPIO_InitStruct.Pin = Echo_4_Pin|Echo_3_Pin;
 80051c4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80051c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80051ca:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80051ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051d8:	4619      	mov	r1, r3
 80051da:	4825      	ldr	r0, [pc, #148]	@ (8005270 <MX_GPIO_Init+0x2d4>)
 80051dc:	f008 f848 	bl	800d270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD0
                           PD1 PD3 PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_0
 80051e0:	f644 439b 	movw	r3, #19611	@ 0x4c9b
 80051e4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051e6:	2303      	movs	r3, #3
 80051e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051f2:	4619      	mov	r1, r3
 80051f4:	4821      	ldr	r0, [pc, #132]	@ (800527c <MX_GPIO_Init+0x2e0>)
 80051f6:	f008 f83b 	bl	800d270 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IN2_Pin */
  GPIO_InitStruct.Pin = M2_IN2_Pin;
 80051fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005200:	2301      	movs	r3, #1
 8005202:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005204:	2300      	movs	r3, #0
 8005206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005208:	2300      	movs	r3, #0
 800520a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(M2_IN2_GPIO_Port, &GPIO_InitStruct);
 800520c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005210:	4619      	mov	r1, r3
 8005212:	481a      	ldr	r0, [pc, #104]	@ (800527c <MX_GPIO_Init+0x2e0>)
 8005214:	f008 f82c 	bl	800d270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG4 PG5 PG6
                           PG7 PG8 PG10 PG11
                           PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8005218:	f641 53f4 	movw	r3, #7668	@ 0x1df4
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800521e:	2303      	movs	r3, #3
 8005220:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005222:	2300      	movs	r3, #0
 8005224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800522a:	4619      	mov	r1, r3
 800522c:	4811      	ldr	r0, [pc, #68]	@ (8005274 <MX_GPIO_Init+0x2d8>)
 800522e:	f008 f81f 	bl	800d270 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_2_Pin */
  GPIO_InitStruct.Pin = Echo_2_Pin;
 8005232:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005238:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800523c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523e:	2300      	movs	r3, #0
 8005240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Echo_2_GPIO_Port, &GPIO_InitStruct);
 8005242:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005246:	4619      	mov	r1, r3
 8005248:	480a      	ldr	r0, [pc, #40]	@ (8005274 <MX_GPIO_Init+0x2d8>)
 800524a:	f008 f811 	bl	800d270 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800524e:	2200      	movs	r2, #0
 8005250:	2100      	movs	r1, #0
 8005252:	2028      	movs	r0, #40	@ 0x28
 8005254:	f007 ff43 	bl	800d0de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005258:	2028      	movs	r0, #40	@ 0x28
 800525a:	f007 ff5c 	bl	800d116 <HAL_NVIC_EnableIRQ>

}
 800525e:	bf00      	nop
 8005260:	3738      	adds	r7, #56	@ 0x38
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40023800 	.word	0x40023800
 800526c:	40020800 	.word	0x40020800
 8005270:	40020400 	.word	0x40020400
 8005274:	40021800 	.word	0x40021800
 8005278:	40021000 	.word	0x40021000
 800527c:	40020c00 	.word	0x40020c00
 8005280:	40021400 	.word	0x40021400
 8005284:	40020000 	.word	0x40020000

08005288 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800528c:	4b12      	ldr	r3, [pc, #72]	@ (80052d8 <MX_I2C1_Init+0x50>)
 800528e:	4a13      	ldr	r2, [pc, #76]	@ (80052dc <MX_I2C1_Init+0x54>)
 8005290:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005292:	4b11      	ldr	r3, [pc, #68]	@ (80052d8 <MX_I2C1_Init+0x50>)
 8005294:	4a12      	ldr	r2, [pc, #72]	@ (80052e0 <MX_I2C1_Init+0x58>)
 8005296:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005298:	4b0f      	ldr	r3, [pc, #60]	@ (80052d8 <MX_I2C1_Init+0x50>)
 800529a:	2200      	movs	r2, #0
 800529c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800529e:	4b0e      	ldr	r3, [pc, #56]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052a4:	4b0c      	ldr	r3, [pc, #48]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80052aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052ac:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80052b2:	4b09      	ldr	r3, [pc, #36]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052b8:	4b07      	ldr	r3, [pc, #28]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80052be:	4b06      	ldr	r3, [pc, #24]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052c4:	4804      	ldr	r0, [pc, #16]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052c6:	f008 f9b9 	bl	800d63c <HAL_I2C_Init>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80052d0:	f001 ff42 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80052d4:	bf00      	nop
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	200002e0 	.word	0x200002e0
 80052dc:	40005400 	.word	0x40005400
 80052e0:	00061a80 	.word	0x00061a80

080052e4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80052e8:	4b12      	ldr	r3, [pc, #72]	@ (8005334 <MX_I2C3_Init+0x50>)
 80052ea:	4a13      	ldr	r2, [pc, #76]	@ (8005338 <MX_I2C3_Init+0x54>)
 80052ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80052ee:	4b11      	ldr	r3, [pc, #68]	@ (8005334 <MX_I2C3_Init+0x50>)
 80052f0:	4a12      	ldr	r2, [pc, #72]	@ (800533c <MX_I2C3_Init+0x58>)
 80052f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80052f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005334 <MX_I2C3_Init+0x50>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80052fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005334 <MX_I2C3_Init+0x50>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005300:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <MX_I2C3_Init+0x50>)
 8005302:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005306:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005308:	4b0a      	ldr	r3, [pc, #40]	@ (8005334 <MX_I2C3_Init+0x50>)
 800530a:	2200      	movs	r2, #0
 800530c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800530e:	4b09      	ldr	r3, [pc, #36]	@ (8005334 <MX_I2C3_Init+0x50>)
 8005310:	2200      	movs	r2, #0
 8005312:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005314:	4b07      	ldr	r3, [pc, #28]	@ (8005334 <MX_I2C3_Init+0x50>)
 8005316:	2200      	movs	r2, #0
 8005318:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800531a:	4b06      	ldr	r3, [pc, #24]	@ (8005334 <MX_I2C3_Init+0x50>)
 800531c:	2200      	movs	r2, #0
 800531e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005320:	4804      	ldr	r0, [pc, #16]	@ (8005334 <MX_I2C3_Init+0x50>)
 8005322:	f008 f98b 	bl	800d63c <HAL_I2C_Init>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800532c:	f001 ff14 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005330:	bf00      	nop
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000334 	.word	0x20000334
 8005338:	40005c00 	.word	0x40005c00
 800533c:	000186a0 	.word	0x000186a0

08005340 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08c      	sub	sp, #48	@ 0x30
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005348:	f107 031c 	add.w	r3, r7, #28
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	605a      	str	r2, [r3, #4]
 8005352:	609a      	str	r2, [r3, #8]
 8005354:	60da      	str	r2, [r3, #12]
 8005356:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a42      	ldr	r2, [pc, #264]	@ (8005468 <HAL_I2C_MspInit+0x128>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d12c      	bne.n	80053bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	4b41      	ldr	r3, [pc, #260]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 8005368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536a:	4a40      	ldr	r2, [pc, #256]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 800536c:	f043 0302 	orr.w	r3, r3, #2
 8005370:	6313      	str	r3, [r2, #48]	@ 0x30
 8005372:	4b3e      	ldr	r3, [pc, #248]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 8005374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	61bb      	str	r3, [r7, #24]
 800537c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800537e:	23c0      	movs	r3, #192	@ 0xc0
 8005380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005382:	2312      	movs	r3, #18
 8005384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005386:	2300      	movs	r3, #0
 8005388:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800538a:	2303      	movs	r3, #3
 800538c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800538e:	2304      	movs	r3, #4
 8005390:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005392:	f107 031c 	add.w	r3, r7, #28
 8005396:	4619      	mov	r1, r3
 8005398:	4835      	ldr	r0, [pc, #212]	@ (8005470 <HAL_I2C_MspInit+0x130>)
 800539a:	f007 ff69 	bl	800d270 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	4b32      	ldr	r3, [pc, #200]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a6:	4a31      	ldr	r2, [pc, #196]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80053ae:	4b2f      	ldr	r3, [pc, #188]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80053ba:	e050      	b.n	800545e <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005474 <HAL_I2C_MspInit+0x134>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d14b      	bne.n	800545e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	4b28      	ldr	r3, [pc, #160]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ce:	4a27      	ldr	r2, [pc, #156]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053d0:	f043 0304 	orr.w	r3, r3, #4
 80053d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80053d6:	4b25      	ldr	r3, [pc, #148]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	4b21      	ldr	r3, [pc, #132]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ea:	4a20      	ldr	r2, [pc, #128]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80053f2:	4b1e      	ldr	r3, [pc, #120]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005404:	2312      	movs	r3, #18
 8005406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005408:	2300      	movs	r3, #0
 800540a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800540c:	2303      	movs	r3, #3
 800540e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005410:	2304      	movs	r3, #4
 8005412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005414:	f107 031c 	add.w	r3, r7, #28
 8005418:	4619      	mov	r1, r3
 800541a:	4817      	ldr	r0, [pc, #92]	@ (8005478 <HAL_I2C_MspInit+0x138>)
 800541c:	f007 ff28 	bl	800d270 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005426:	2312      	movs	r3, #18
 8005428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542a:	2300      	movs	r3, #0
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800542e:	2303      	movs	r3, #3
 8005430:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005432:	2304      	movs	r3, #4
 8005434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005436:	f107 031c 	add.w	r3, r7, #28
 800543a:	4619      	mov	r1, r3
 800543c:	480f      	ldr	r0, [pc, #60]	@ (800547c <HAL_I2C_MspInit+0x13c>)
 800543e:	f007 ff17 	bl	800d270 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005442:	2300      	movs	r3, #0
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	4b09      	ldr	r3, [pc, #36]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544a:	4a08      	ldr	r2, [pc, #32]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 800544c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005450:	6413      	str	r3, [r2, #64]	@ 0x40
 8005452:	4b06      	ldr	r3, [pc, #24]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 8005454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800545a:	60bb      	str	r3, [r7, #8]
 800545c:	68bb      	ldr	r3, [r7, #8]
}
 800545e:	bf00      	nop
 8005460:	3730      	adds	r7, #48	@ 0x30
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40005400 	.word	0x40005400
 800546c:	40023800 	.word	0x40023800
 8005470:	40020400 	.word	0x40020400
 8005474:	40005c00 	.word	0x40005c00
 8005478:	40020800 	.word	0x40020800
 800547c:	40020000 	.word	0x40020000

08005480 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define CLAMP(value, min, max) ((value) < (min) ? (min) : ((value) > (max) ? (max) : (value)))

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    // 检查是否是UART5（US100传感器使用的串口）
    if (huart == &huart5||huart == &huart2||huart == &huart3||huart == &huart4) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a14      	ldr	r2, [pc, #80]	@ (80054dc <HAL_UART_RxCpltCallback+0x5c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00b      	beq.n	80054a8 <HAL_UART_RxCpltCallback+0x28>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a13      	ldr	r2, [pc, #76]	@ (80054e0 <HAL_UART_RxCpltCallback+0x60>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <HAL_UART_RxCpltCallback+0x28>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a12      	ldr	r2, [pc, #72]	@ (80054e4 <HAL_UART_RxCpltCallback+0x64>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <HAL_UART_RxCpltCallback+0x28>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a11      	ldr	r2, [pc, #68]	@ (80054e8 <HAL_UART_RxCpltCallback+0x68>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d102      	bne.n	80054ae <HAL_UART_RxCpltCallback+0x2e>
        // 调用US100库的回调函数
        US100_UART_RxCpltCallback(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f007 f8b1 	bl	800c610 <US100_UART_RxCpltCallback>
    } 
    if (huart == &huart1) {
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a0e      	ldr	r2, [pc, #56]	@ (80054ec <HAL_UART_RxCpltCallback+0x6c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d10e      	bne.n	80054d4 <HAL_UART_RxCpltCallback+0x54>
        // 处理其他串口的回调
        HAL_UART_Transmit(&huart1, message, strlen(message), 100);
 80054b6:	480e      	ldr	r0, [pc, #56]	@ (80054f0 <HAL_UART_RxCpltCallback+0x70>)
 80054b8:	f7fa feda 	bl	8000270 <strlen>
 80054bc:	4603      	mov	r3, r0
 80054be:	b29a      	uxth	r2, r3
 80054c0:	2364      	movs	r3, #100	@ 0x64
 80054c2:	490b      	ldr	r1, [pc, #44]	@ (80054f0 <HAL_UART_RxCpltCallback+0x70>)
 80054c4:	4809      	ldr	r0, [pc, #36]	@ (80054ec <HAL_UART_RxCpltCallback+0x6c>)
 80054c6:	f00a ff87 	bl	80103d8 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart1, receivedata, 2);
 80054ca:	2202      	movs	r2, #2
 80054cc:	4909      	ldr	r1, [pc, #36]	@ (80054f4 <HAL_UART_RxCpltCallback+0x74>)
 80054ce:	4807      	ldr	r0, [pc, #28]	@ (80054ec <HAL_UART_RxCpltCallback+0x6c>)
 80054d0:	f00b f80d 	bl	80104ee <HAL_UART_Receive_IT>
    //     HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
        
    //     // 继续接收下一个字节
    //     HAL_UART_Receive_IT(&huart4, &uart4_rx_buffer, 1);
    // }
}
 80054d4:	bf00      	nop
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000950 	.word	0x20000950
 80054e0:	200009e0 	.word	0x200009e0
 80054e4:	20000a28 	.word	0x20000a28
 80054e8:	20000908 	.word	0x20000908
 80054ec:	20000998 	.word	0x20000998
 80054f0:	2000004c 	.word	0x2000004c
 80054f4:	20000430 	.word	0x20000430

080054f8 <smooth_speed_transition>:
        }
    }
}

#define MAX_SPEED_STEP 5  // 每次最大速度变化量
uint8_t smooth_speed_transition(uint8_t current, uint8_t target) {
 80054f8:	b5b0      	push	{r4, r5, r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	460a      	mov	r2, r1
 8005502:	71fb      	strb	r3, [r7, #7]
 8005504:	4613      	mov	r3, r2
 8005506:	71bb      	strb	r3, [r7, #6]
    if(target > current) {
 8005508:	79ba      	ldrb	r2, [r7, #6]
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	429a      	cmp	r2, r3
 800550e:	d91b      	bls.n	8005548 <smooth_speed_transition+0x50>
        return fmin(current + MAX_SPEED_STEP, target);
 8005510:	79fb      	ldrb	r3, [r7, #7]
 8005512:	3305      	adds	r3, #5
 8005514:	4618      	mov	r0, r3
 8005516:	f7fb f805 	bl	8000524 <__aeabi_i2d>
 800551a:	4604      	mov	r4, r0
 800551c:	460d      	mov	r5, r1
 800551e:	79bb      	ldrb	r3, [r7, #6]
 8005520:	4618      	mov	r0, r3
 8005522:	f7fa ffef 	bl	8000504 <__aeabi_ui2d>
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	ec43 2b11 	vmov	d1, r2, r3
 800552e:	ec45 4b10 	vmov	d0, r4, r5
 8005532:	f00e fceb 	bl	8013f0c <fmin>
 8005536:	ec53 2b10 	vmov	r2, r3, d0
 800553a:	4610      	mov	r0, r2
 800553c:	4619      	mov	r1, r3
 800553e:	f7fb fb33 	bl	8000ba8 <__aeabi_d2uiz>
 8005542:	4603      	mov	r3, r0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	e020      	b.n	800558a <smooth_speed_transition+0x92>
    } else if(target < current) {
 8005548:	79ba      	ldrb	r2, [r7, #6]
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	429a      	cmp	r2, r3
 800554e:	d21b      	bcs.n	8005588 <smooth_speed_transition+0x90>
        return fmax(current - MAX_SPEED_STEP, target);
 8005550:	79fb      	ldrb	r3, [r7, #7]
 8005552:	3b05      	subs	r3, #5
 8005554:	4618      	mov	r0, r3
 8005556:	f7fa ffe5 	bl	8000524 <__aeabi_i2d>
 800555a:	4604      	mov	r4, r0
 800555c:	460d      	mov	r5, r1
 800555e:	79bb      	ldrb	r3, [r7, #6]
 8005560:	4618      	mov	r0, r3
 8005562:	f7fa ffcf 	bl	8000504 <__aeabi_ui2d>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	ec43 2b11 	vmov	d1, r2, r3
 800556e:	ec45 4b10 	vmov	d0, r4, r5
 8005572:	f00e fca1 	bl	8013eb8 <fmax>
 8005576:	ec53 2b10 	vmov	r2, r3, d0
 800557a:	4610      	mov	r0, r2
 800557c:	4619      	mov	r1, r3
 800557e:	f7fb fb13 	bl	8000ba8 <__aeabi_d2uiz>
 8005582:	4603      	mov	r3, r0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	e000      	b.n	800558a <smooth_speed_transition+0x92>
    }
    return current;
 8005588:	79fb      	ldrb	r3, [r7, #7]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005594 <PID_ResetAll>:

void PID_ResetAll(void) {
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  PID_Reset(&pid_yaw);
 8005598:	4806      	ldr	r0, [pc, #24]	@ (80055b4 <PID_ResetAll+0x20>)
 800559a:	f005 fdcf 	bl	800b13c <PID_Reset>
  PID_Reset(&pid_rear);
 800559e:	4806      	ldr	r0, [pc, #24]	@ (80055b8 <PID_ResetAll+0x24>)
 80055a0:	f005 fdcc 	bl	800b13c <PID_Reset>
  PID_Reset(&pid_front);
 80055a4:	4805      	ldr	r0, [pc, #20]	@ (80055bc <PID_ResetAll+0x28>)
 80055a6:	f005 fdc9 	bl	800b13c <PID_Reset>
  PID_Reset(&pid_position);
 80055aa:	4805      	ldr	r0, [pc, #20]	@ (80055c0 <PID_ResetAll+0x2c>)
 80055ac:	f005 fdc6 	bl	800b13c <PID_Reset>
}
 80055b0:	bf00      	nop
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000070 	.word	0x20000070
 80055b8:	200000a0 	.word	0x200000a0
 80055bc:	20000088 	.word	0x20000088
 80055c0:	200000b8 	.word	0x200000b8

080055c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b0d0      	sub	sp, #320	@ 0x140
 80055c8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80055ca:	f007 fc17 	bl	800cdfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80055ce:	f001 fd59 	bl	8007084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80055d2:	f7ff fce3 	bl	8004f9c <MX_GPIO_Init>
  MX_I2C1_Init();
 80055d6:	f7ff fe57 	bl	8005288 <MX_I2C1_Init>
  MX_I2C3_Init();
 80055da:	f7ff fe83 	bl	80052e4 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80055de:	f007 f995 	bl	800c90c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80055e2:	f005 ff39 	bl	800b458 <MX_TIM1_Init>
  MX_TIM3_Init();
 80055e6:	f005 ffe3 	bl	800b5b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80055ea:	f006 f835 	bl	800b658 <MX_TIM4_Init>
  MX_TIM5_Init();
 80055ee:	f006 f887 	bl	800b700 <MX_TIM5_Init>
  MX_TIM8_Init();
 80055f2:	f006 f953 	bl	800b89c <MX_TIM8_Init>
  MX_TIM9_Init();
 80055f6:	f006 f9ff 	bl	800b9f8 <MX_TIM9_Init>
  MX_TIM10_Init();
 80055fa:	f006 fa6b 	bl	800bad4 <MX_TIM10_Init>
  MX_TIM2_Init();
 80055fe:	f005 ff83 	bl	800b508 <MX_TIM2_Init>
  MX_UART4_Init();
 8005602:	f007 f92f 	bl	800c864 <MX_UART4_Init>
  MX_UART5_Init();
 8005606:	f007 f957 	bl	800c8b8 <MX_UART5_Init>
  MX_USART2_UART_Init();
 800560a:	f007 f9a9 	bl	800c960 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800560e:	f007 f9d1 	bl	800c9b4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8005612:	f007 f9f9 	bl	800ca08 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8005616:	f006 f90b 	bl	800b830 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800561a:	f7ff fc05 	bl	8004e28 <OLED_Init>

  HAL_UART_Receive_IT(&huart1, receivedata, 2);
 800561e:	2202      	movs	r2, #2
 8005620:	4983      	ldr	r1, [pc, #524]	@ (8005830 <main+0x26c>)
 8005622:	4884      	ldr	r0, [pc, #528]	@ (8005834 <main+0x270>)
 8005624:	f00a ff63 	bl	80104ee <HAL_UART_Receive_IT>
  // 初始化UART4接收
  HAL_UART_Receive_IT(&huart4, &uart4_rx_buffer, 1);
 8005628:	2201      	movs	r2, #1
 800562a:	4983      	ldr	r1, [pc, #524]	@ (8005838 <main+0x274>)
 800562c:	4883      	ldr	r0, [pc, #524]	@ (800583c <main+0x278>)
 800562e:	f00a ff5e 	bl	80104ee <HAL_UART_Receive_IT>
  
  HAL_TIM_Base_Start(&htim6);
 8005632:	4883      	ldr	r0, [pc, #524]	@ (8005840 <main+0x27c>)
 8005634:	f009 fe4e 	bl	800f2d4 <HAL_TIM_Base_Start>
  Reset_Timer();  // 重置计时器
 8005638:	f001 ff4c 	bl	80074d4 <Reset_Timer>
  
  // 初始化MPU6050 DMP
  int mpu_result;
  int retry_count = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  uint32_t init_start_time = HAL_GetTick();
 8005642:	f007 fc41 	bl	800cec8 <HAL_GetTick>
 8005646:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
  
  do {
      mpu_result = MPU6050_DMP_Init();
 800564a:	f7ff f8b5 	bl	80047b8 <MPU6050_DMP_Init>
 800564e:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
      if (mpu_result != 0) {
 8005652:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01f      	beq.n	800569a <main+0xd6>
          retry_count++;
 800565a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800565e:	3301      	adds	r3, #1
 8005660:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
          // 只在每10次重试时更新显示，减少OLED操作
          if (retry_count % 10 == 0) {
 8005664:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8005668:	4b76      	ldr	r3, [pc, #472]	@ (8005844 <main+0x280>)
 800566a:	fb83 2301 	smull	r2, r3, r3, r1
 800566e:	109a      	asrs	r2, r3, #2
 8005670:	17cb      	asrs	r3, r1, #31
 8005672:	1ad2      	subs	r2, r2, r3
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	1aca      	subs	r2, r1, r3
 800567e:	2a00      	cmp	r2, #0
 8005680:	d10b      	bne.n	800569a <main+0xd6>
              OLED_ShowString(1,1,"INITING...");
 8005682:	4a71      	ldr	r2, [pc, #452]	@ (8005848 <main+0x284>)
 8005684:	2101      	movs	r1, #1
 8005686:	2001      	movs	r0, #1
 8005688:	f7ff fb52 	bl	8004d30 <OLED_ShowString>
              OLED_ShowNum(1,11,retry_count,2);
 800568c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005690:	2302      	movs	r3, #2
 8005692:	210b      	movs	r1, #11
 8005694:	2001      	movs	r0, #1
 8005696:	f7ff fb89 	bl	8004dac <OLED_ShowNum>
          }
      }
  } while (mpu_result != 0);
 800569a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1d3      	bne.n	800564a <main+0x86>
  
  OLED_Clear();
 80056a2:	f7ff fa7e 	bl	8004ba2 <OLED_Clear>
  OLED_ShowString(1,1,"SUCCESS");
 80056a6:	4a69      	ldr	r2, [pc, #420]	@ (800584c <main+0x288>)
 80056a8:	2101      	movs	r1, #1
 80056aa:	2001      	movs	r0, #1
 80056ac:	f7ff fb40 	bl	8004d30 <OLED_ShowString>
  // 显示初始化耗时
  uint32_t init_time = HAL_GetTick() - init_start_time;
 80056b0:	f007 fc0a 	bl	800cec8 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  OLED_ShowNum(2,1,init_time,4);
 80056c0:	2304      	movs	r3, #4
 80056c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80056c6:	2101      	movs	r1, #1
 80056c8:	2002      	movs	r0, #2
 80056ca:	f7ff fb6f 	bl	8004dac <OLED_ShowNum>
  OLED_ShowString(2,5,"ms");
 80056ce:	4a60      	ldr	r2, [pc, #384]	@ (8005850 <main+0x28c>)
 80056d0:	2105      	movs	r1, #5
 80056d2:	2002      	movs	r0, #2
 80056d4:	f7ff fb2c 	bl	8004d30 <OLED_ShowString>
  // Ultrasonic_Init(&ultrasonic_sensors[2], Trig_3_GPIO_Port, Trig_3_Pin, Echo_3_GPIO_Port, Echo_3_Pin);  // 传感器3
  // Ultrasonic_Init(&ultrasonic_sensors[3], Trig_4_GPIO_Port, Trig_4_Pin, Echo_4_GPIO_Port, Echo_4_Pin);  // 传感器4
  // Ultrasonic_Init(&ultrasonic_sensors[4], Trig_5_GPIO_Port, Trig_5_Pin, Echo_5_GPIO_Port, Echo_5_Pin);  // 传感器5

  // 初始化US100传感器顺时针1234
  US100_Init(&us100_sensor2, &huart5);
 80056d8:	495e      	ldr	r1, [pc, #376]	@ (8005854 <main+0x290>)
 80056da:	485f      	ldr	r0, [pc, #380]	@ (8005858 <main+0x294>)
 80056dc:	f006 fe92 	bl	800c404 <US100_Init>
  US100_Init(&us100_sensor1, &huart4);
 80056e0:	4956      	ldr	r1, [pc, #344]	@ (800583c <main+0x278>)
 80056e2:	485e      	ldr	r0, [pc, #376]	@ (800585c <main+0x298>)
 80056e4:	f006 fe8e 	bl	800c404 <US100_Init>
  US100_Init(&us100_sensor4, &huart3);
 80056e8:	495d      	ldr	r1, [pc, #372]	@ (8005860 <main+0x29c>)
 80056ea:	485e      	ldr	r0, [pc, #376]	@ (8005864 <main+0x2a0>)
 80056ec:	f006 fe8a 	bl	800c404 <US100_Init>
  US100_Init(&us100_sensor3, &huart2);
 80056f0:	495d      	ldr	r1, [pc, #372]	@ (8005868 <main+0x2a4>)
 80056f2:	485e      	ldr	r0, [pc, #376]	@ (800586c <main+0x2a8>)
 80056f4:	f006 fe86 	bl	800c404 <US100_Init>
  
  // 等待一段时间，确保传感器稳定
  HAL_Delay(50);
 80056f8:	2032      	movs	r0, #50	@ 0x32
 80056fa:	f007 fbf1 	bl	800cee0 <HAL_Delay>
  
  // 开始第一次测量
  US100_StartMeasurement(&us100_sensor1);
 80056fe:	4857      	ldr	r0, [pc, #348]	@ (800585c <main+0x298>)
 8005700:	f006 fed8 	bl	800c4b4 <US100_StartMeasurement>
  US100_StartMeasurement(&us100_sensor2);
 8005704:	4854      	ldr	r0, [pc, #336]	@ (8005858 <main+0x294>)
 8005706:	f006 fed5 	bl	800c4b4 <US100_StartMeasurement>
  US100_StartMeasurement(&us100_sensor3);
 800570a:	4858      	ldr	r0, [pc, #352]	@ (800586c <main+0x2a8>)
 800570c:	f006 fed2 	bl	800c4b4 <US100_StartMeasurement>
  US100_StartMeasurement(&us100_sensor4);
 8005710:	4854      	ldr	r0, [pc, #336]	@ (8005864 <main+0x2a0>)
 8005712:	f006 fecf 	bl	800c4b4 <US100_StartMeasurement>

  Motor_Init(MOTOR_1,
 8005716:	4b56      	ldr	r3, [pc, #344]	@ (8005870 <main+0x2ac>)
 8005718:	9303      	str	r3, [sp, #12]
 800571a:	2380      	movs	r3, #128	@ 0x80
 800571c:	9302      	str	r3, [sp, #8]
 800571e:	4b55      	ldr	r3, [pc, #340]	@ (8005874 <main+0x2b0>)
 8005720:	9301      	str	r3, [sp, #4]
 8005722:	2301      	movs	r3, #1
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	4b54      	ldr	r3, [pc, #336]	@ (8005878 <main+0x2b4>)
 8005728:	2200      	movs	r2, #0
 800572a:	4954      	ldr	r1, [pc, #336]	@ (800587c <main+0x2b8>)
 800572c:	2000      	movs	r0, #0
 800572e:	f001 fd19 	bl	8007164 <Motor_Init>
            &htim5, TIM_CHANNEL_1,
            M1_IN1_GPIO_Port, M1_IN1_Pin,
            M1_IN2_GPIO_Port, M1_IN2_Pin,
            &htim1);

  Motor_Init(MOTOR_2,
 8005732:	4b53      	ldr	r3, [pc, #332]	@ (8005880 <main+0x2bc>)
 8005734:	9303      	str	r3, [sp, #12]
 8005736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800573a:	9302      	str	r3, [sp, #8]
 800573c:	4b51      	ldr	r3, [pc, #324]	@ (8005884 <main+0x2c0>)
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	2308      	movs	r3, #8
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	4b4c      	ldr	r3, [pc, #304]	@ (8005878 <main+0x2b4>)
 8005746:	2204      	movs	r2, #4
 8005748:	494c      	ldr	r1, [pc, #304]	@ (800587c <main+0x2b8>)
 800574a:	2001      	movs	r0, #1
 800574c:	f001 fd0a 	bl	8007164 <Motor_Init>
            &htim5, TIM_CHANNEL_2,
            M2_IN1_GPIO_Port, M2_IN1_Pin,
            M2_IN2_GPIO_Port, M2_IN2_Pin,
            &htim4);

  Motor_Init(MOTOR_3,
 8005750:	4b4d      	ldr	r3, [pc, #308]	@ (8005888 <main+0x2c4>)
 8005752:	9303      	str	r3, [sp, #12]
 8005754:	2302      	movs	r3, #2
 8005756:	9302      	str	r3, [sp, #8]
 8005758:	4b4c      	ldr	r3, [pc, #304]	@ (800588c <main+0x2c8>)
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	2320      	movs	r3, #32
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	4b4b      	ldr	r3, [pc, #300]	@ (8005890 <main+0x2cc>)
 8005762:	2208      	movs	r2, #8
 8005764:	4945      	ldr	r1, [pc, #276]	@ (800587c <main+0x2b8>)
 8005766:	2002      	movs	r0, #2
 8005768:	f001 fcfc 	bl	8007164 <Motor_Init>
            &htim5, TIM_CHANNEL_3,
            M3_IN1_GPIO_Port, M3_IN1_Pin,
            M3_IN2_GPIO_Port, M3_IN2_Pin,
            &htim3);

  Motor_Init(MOTOR_4,
 800576c:	4b49      	ldr	r3, [pc, #292]	@ (8005894 <main+0x2d0>)
 800576e:	9303      	str	r3, [sp, #12]
 8005770:	2308      	movs	r3, #8
 8005772:	9302      	str	r3, [sp, #8]
 8005774:	4b46      	ldr	r3, [pc, #280]	@ (8005890 <main+0x2cc>)
 8005776:	9301      	str	r3, [sp, #4]
 8005778:	2302      	movs	r3, #2
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	4b44      	ldr	r3, [pc, #272]	@ (8005890 <main+0x2cc>)
 800577e:	220c      	movs	r2, #12
 8005780:	493e      	ldr	r1, [pc, #248]	@ (800587c <main+0x2b8>)
 8005782:	2003      	movs	r0, #3
 8005784:	f001 fcee 	bl	8007164 <Motor_Init>
            &htim5, TIM_CHANNEL_4,
            M4_IN1_GPIO_Port, M4_IN1_Pin,
            M4_IN2_GPIO_Port, M4_IN2_Pin,
            &htim2);

  Servo_Init(&servo1, &htim8, TIM_CHANNEL_1, Servo_1_GPIO_Port, Servo_1_Pin);
 8005788:	2340      	movs	r3, #64	@ 0x40
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	4b40      	ldr	r3, [pc, #256]	@ (8005890 <main+0x2cc>)
 800578e:	2200      	movs	r2, #0
 8005790:	4941      	ldr	r1, [pc, #260]	@ (8005898 <main+0x2d4>)
 8005792:	4842      	ldr	r0, [pc, #264]	@ (800589c <main+0x2d8>)
 8005794:	f7ff fb9e 	bl	8004ed4 <Servo_Init>
  Servo_Init(&servo2, &htim8, TIM_CHANNEL_2, Servo_2_GPIO_Port, Servo_2_Pin);
 8005798:	2380      	movs	r3, #128	@ 0x80
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	4b3c      	ldr	r3, [pc, #240]	@ (8005890 <main+0x2cc>)
 800579e:	2204      	movs	r2, #4
 80057a0:	493d      	ldr	r1, [pc, #244]	@ (8005898 <main+0x2d4>)
 80057a2:	483f      	ldr	r0, [pc, #252]	@ (80058a0 <main+0x2dc>)
 80057a4:	f7ff fb96 	bl	8004ed4 <Servo_Init>
  Servo_Init(&servo3, &htim9, TIM_CHANNEL_1, Servo_3_GPIO_Port, Servo_3_Pin);
 80057a8:	2320      	movs	r3, #32
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	4b31      	ldr	r3, [pc, #196]	@ (8005874 <main+0x2b0>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	493c      	ldr	r1, [pc, #240]	@ (80058a4 <main+0x2e0>)
 80057b2:	483d      	ldr	r0, [pc, #244]	@ (80058a8 <main+0x2e4>)
 80057b4:	f7ff fb8e 	bl	8004ed4 <Servo_Init>
  Servo_Init(&servo4, &htim9, TIM_CHANNEL_2, Servo_4_GPIO_Port, Servo_4_Pin);
 80057b8:	2340      	movs	r3, #64	@ 0x40
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005874 <main+0x2b0>)
 80057be:	2204      	movs	r2, #4
 80057c0:	4938      	ldr	r1, [pc, #224]	@ (80058a4 <main+0x2e0>)
 80057c2:	483a      	ldr	r0, [pc, #232]	@ (80058ac <main+0x2e8>)
 80057c4:	f7ff fb86 	bl	8004ed4 <Servo_Init>
  Servo_Init(&servo5, &htim10, TIM_CHANNEL_1, Servo_5_GPIO_Port, Servo_5_Pin);
 80057c8:	2340      	movs	r3, #64	@ 0x40
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	4b38      	ldr	r3, [pc, #224]	@ (80058b0 <main+0x2ec>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	4938      	ldr	r1, [pc, #224]	@ (80058b4 <main+0x2f0>)
 80057d2:	4839      	ldr	r0, [pc, #228]	@ (80058b8 <main+0x2f4>)
 80057d4:	f7ff fb7e 	bl	8004ed4 <Servo_Init>

  prev_time = HAL_GetTick();
 80057d8:	f007 fb76 	bl	800cec8 <HAL_GetTick>
 80057dc:	4603      	mov	r3, r0
 80057de:	4a37      	ldr	r2, [pc, #220]	@ (80058bc <main+0x2f8>)
 80057e0:	6013      	str	r3, [r2, #0]

  /*------------------------------------MPU6050 DMP执行部分-------------------------------------*/
    OLED_ShowString(3,1,"yaw:");
 80057e2:	4a37      	ldr	r2, [pc, #220]	@ (80058c0 <main+0x2fc>)
 80057e4:	2101      	movs	r1, #1
 80057e6:	2003      	movs	r0, #3
 80057e8:	f7ff faa2 	bl	8004d30 <OLED_ShowString>
    OLED_ShowString(3,9,"TAR:");
 80057ec:	4a35      	ldr	r2, [pc, #212]	@ (80058c4 <main+0x300>)
 80057ee:	2109      	movs	r1, #9
 80057f0:	2003      	movs	r0, #3
 80057f2:	f7ff fa9d 	bl	8004d30 <OLED_ShowString>

  
  // 设置目标偏航角为当前偏航角
  target_yaw = yaw;
 80057f6:	4b34      	ldr	r3, [pc, #208]	@ (80058c8 <main+0x304>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a34      	ldr	r2, [pc, #208]	@ (80058cc <main+0x308>)
 80057fc:	6013      	str	r3, [r2, #0]
  
  // 重置PID控制器，避免积分项累积
  PID_Reset(&pid_yaw);
 80057fe:	4834      	ldr	r0, [pc, #208]	@ (80058d0 <main+0x30c>)
 8005800:	f005 fc9c 	bl	800b13c <PID_Reset>
  PID_Reset(&pid_encoder);
 8005804:	4833      	ldr	r0, [pc, #204]	@ (80058d4 <main+0x310>)
 8005806:	f005 fc99 	bl	800b13c <PID_Reset>
  OLED_Clear_Part(1,1,5);
 800580a:	2205      	movs	r2, #5
 800580c:	2101      	movs	r1, #1
 800580e:	2001      	movs	r0, #1
 8005810:	f7ff f9ea 	bl	8004be8 <OLED_Clear_Part>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  start_start = HAL_GetTick();
 8005814:	f007 fb58 	bl	800cec8 <HAL_GetTick>
 8005818:	4603      	mov	r3, r0
 800581a:	4a2f      	ldr	r2, [pc, #188]	@ (80058d8 <main+0x314>)
 800581c:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uint32_t current_time = HAL_GetTick();
 800581e:	f007 fb53 	bl	800cec8 <HAL_GetTick>
 8005822:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    
    // 添加延时，确保超声波传感器有足够的时间完成测量
    // HAL_Delay(50);  // 增加延时到50ms，给传感器更多恢复时间

    /*----------------------------------------------------------------------------US100传感器执行部分-------------------------------------------------------------*/
    US100_GetAllValidDistances(distances);
 8005826:	482d      	ldr	r0, [pc, #180]	@ (80058dc <main+0x318>)
 8005828:	f006 ff60 	bl	800c6ec <US100_GetAllValidDistances>
    
    while (distances[1]==0)
 800582c:	e069      	b.n	8005902 <main+0x33e>
 800582e:	bf00      	nop
 8005830:	20000430 	.word	0x20000430
 8005834:	20000998 	.word	0x20000998
 8005838:	20000432 	.word	0x20000432
 800583c:	20000908 	.word	0x20000908
 8005840:	20000730 	.word	0x20000730
 8005844:	66666667 	.word	0x66666667
 8005848:	08014bf0 	.word	0x08014bf0
 800584c:	08014bfc 	.word	0x08014bfc
 8005850:	08014c04 	.word	0x08014c04
 8005854:	20000950 	.word	0x20000950
 8005858:	200004d4 	.word	0x200004d4
 800585c:	20000498 	.word	0x20000498
 8005860:	20000a28 	.word	0x20000a28
 8005864:	2000054c 	.word	0x2000054c
 8005868:	200009e0 	.word	0x200009e0
 800586c:	20000510 	.word	0x20000510
 8005870:	200005c8 	.word	0x200005c8
 8005874:	40021000 	.word	0x40021000
 8005878:	40021800 	.word	0x40021800
 800587c:	200006e8 	.word	0x200006e8
 8005880:	200006a0 	.word	0x200006a0
 8005884:	40020c00 	.word	0x40020c00
 8005888:	20000658 	.word	0x20000658
 800588c:	40020400 	.word	0x40020400
 8005890:	40020800 	.word	0x40020800
 8005894:	20000610 	.word	0x20000610
 8005898:	20000778 	.word	0x20000778
 800589c:	20000434 	.word	0x20000434
 80058a0:	20000448 	.word	0x20000448
 80058a4:	200007c0 	.word	0x200007c0
 80058a8:	2000045c 	.word	0x2000045c
 80058ac:	20000470 	.word	0x20000470
 80058b0:	40021400 	.word	0x40021400
 80058b4:	20000808 	.word	0x20000808
 80058b8:	20000484 	.word	0x20000484
 80058bc:	20000418 	.word	0x20000418
 80058c0:	08014c08 	.word	0x08014c08
 80058c4:	08014c10 	.word	0x08014c10
 80058c8:	20000594 	.word	0x20000594
 80058cc:	20000590 	.word	0x20000590
 80058d0:	20000070 	.word	0x20000070
 80058d4:	20000058 	.word	0x20000058
 80058d8:	2000042c 	.word	0x2000042c
 80058dc:	20000038 	.word	0x20000038
    {
      US100_GetAllValidDistances(distances);
 80058e0:	48d9      	ldr	r0, [pc, #868]	@ (8005c48 <main+0x684>)
 80058e2:	f006 ff03 	bl	800c6ec <US100_GetAllValidDistances>
      OLED_ShowNum(1, 13, fabs(distances[1]), 4);
 80058e6:	4bd8      	ldr	r3, [pc, #864]	@ (8005c48 <main+0x684>)
 80058e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80058ec:	eef0 7ae7 	vabs.f32	s15, s15
 80058f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058f4:	2304      	movs	r3, #4
 80058f6:	ee17 2a90 	vmov	r2, s15
 80058fa:	210d      	movs	r1, #13
 80058fc:	2001      	movs	r0, #1
 80058fe:	f7ff fa55 	bl	8004dac <OLED_ShowNum>
    while (distances[1]==0)
 8005902:	4bd1      	ldr	r3, [pc, #836]	@ (8005c48 <main+0x684>)
 8005904:	edd3 7a01 	vldr	s15, [r3, #4]
 8005908:	eef5 7a40 	vcmp.f32	s15, #0.0
 800590c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005910:	d0e6      	beq.n	80058e0 <main+0x31c>
    }

    if (current_time - oled_prev_time >= 100) {  // 每100ms更新一次显示
 8005912:	4bce      	ldr	r3, [pc, #824]	@ (8005c4c <main+0x688>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b63      	cmp	r3, #99	@ 0x63
 800591e:	d949      	bls.n	80059b4 <main+0x3f0>
        // 显示原始距离和滤波后的距离
        OLED_ShowString(1, 1, "Flt:");
 8005920:	4acb      	ldr	r2, [pc, #812]	@ (8005c50 <main+0x68c>)
 8005922:	2101      	movs	r1, #1
 8005924:	2001      	movs	r0, #1
 8005926:	f7ff fa03 	bl	8004d30 <OLED_ShowString>
        OLED_ShowString(1, 9, "Flt:");
 800592a:	4ac9      	ldr	r2, [pc, #804]	@ (8005c50 <main+0x68c>)
 800592c:	2109      	movs	r1, #9
 800592e:	2001      	movs	r0, #1
 8005930:	f7ff f9fe 	bl	8004d30 <OLED_ShowString>
        OLED_ShowString(2, 1, "Flt:");
 8005934:	4ac6      	ldr	r2, [pc, #792]	@ (8005c50 <main+0x68c>)
 8005936:	2101      	movs	r1, #1
 8005938:	2002      	movs	r0, #2
 800593a:	f7ff f9f9 	bl	8004d30 <OLED_ShowString>
        OLED_ShowString(2, 9, "Flt:");
 800593e:	4ac4      	ldr	r2, [pc, #784]	@ (8005c50 <main+0x68c>)
 8005940:	2109      	movs	r1, #9
 8005942:	2002      	movs	r0, #2
 8005944:	f7ff f9f4 	bl	8004d30 <OLED_ShowString>
        
        // 显示第一个传感器的原始值和滤波值
        OLED_ShowNum(1, 5, distances[0], 4);
 8005948:	4bbf      	ldr	r3, [pc, #764]	@ (8005c48 <main+0x684>)
 800594a:	edd3 7a00 	vldr	s15, [r3]
 800594e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005952:	2304      	movs	r3, #4
 8005954:	ee17 2a90 	vmov	r2, s15
 8005958:	2105      	movs	r1, #5
 800595a:	2001      	movs	r0, #1
 800595c:	f7ff fa26 	bl	8004dac <OLED_ShowNum>
        OLED_ShowNum(1, 13, fabs(distances[1]), 4);
 8005960:	4bb9      	ldr	r3, [pc, #740]	@ (8005c48 <main+0x684>)
 8005962:	edd3 7a01 	vldr	s15, [r3, #4]
 8005966:	eef0 7ae7 	vabs.f32	s15, s15
 800596a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800596e:	2304      	movs	r3, #4
 8005970:	ee17 2a90 	vmov	r2, s15
 8005974:	210d      	movs	r1, #13
 8005976:	2001      	movs	r0, #1
 8005978:	f7ff fa18 	bl	8004dac <OLED_ShowNum>
        
        // 显示第二个传感器的原始值和滤波值
        OLED_ShowNum(2, 5, distances[2], 4);
 800597c:	4bb2      	ldr	r3, [pc, #712]	@ (8005c48 <main+0x684>)
 800597e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005986:	2304      	movs	r3, #4
 8005988:	ee17 2a90 	vmov	r2, s15
 800598c:	2105      	movs	r1, #5
 800598e:	2002      	movs	r0, #2
 8005990:	f7ff fa0c 	bl	8004dac <OLED_ShowNum>
        OLED_ShowNum(2, 13, distances[3], 4);
 8005994:	4bac      	ldr	r3, [pc, #688]	@ (8005c48 <main+0x684>)
 8005996:	edd3 7a03 	vldr	s15, [r3, #12]
 800599a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800599e:	2304      	movs	r3, #4
 80059a0:	ee17 2a90 	vmov	r2, s15
 80059a4:	210d      	movs	r1, #13
 80059a6:	2002      	movs	r0, #2
 80059a8:	f7ff fa00 	bl	8004dac <OLED_ShowNum>
        
        oled_prev_time = current_time;
 80059ac:	4aa7      	ldr	r2, [pc, #668]	@ (8005c4c <main+0x688>)
 80059ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b2:	6013      	str	r3, [r2, #0]
    }

    if(delay_flag) 
 80059b4:	4ba7      	ldr	r3, [pc, #668]	@ (8005c54 <main+0x690>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d006      	beq.n	80059ca <main+0x406>
    {
      HAL_Delay(500);
 80059bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80059c0:	f007 fa8e 	bl	800cee0 <HAL_Delay>
      delay_flag=false;
 80059c4:	4ba3      	ldr	r3, [pc, #652]	@ (8005c54 <main+0x690>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	701a      	strb	r2, [r3, #0]
    /*---------------------------------------------------------------电机执行部分---------------------------------------------------------------------------------*/
    // straight_us100(distances[0]);
    // Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, 60, &yaw, &target_yaw);
    // Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, 60, &yaw, &target_yaw);
    // Update_Target_Yaw(&yaw, &target_yaw);
    OLED_ShowChar(3,5,yaw >= 0 ? '+' : '-'); 
 80059ca:	4ba3      	ldr	r3, [pc, #652]	@ (8005c58 <main+0x694>)
 80059cc:	edd3 7a00 	vldr	s15, [r3]
 80059d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d8:	db01      	blt.n	80059de <main+0x41a>
 80059da:	232b      	movs	r3, #43	@ 0x2b
 80059dc:	e000      	b.n	80059e0 <main+0x41c>
 80059de:	232d      	movs	r3, #45	@ 0x2d
 80059e0:	461a      	mov	r2, r3
 80059e2:	2105      	movs	r1, #5
 80059e4:	2003      	movs	r0, #3
 80059e6:	f7ff f94b 	bl	8004c80 <OLED_ShowChar>
    OLED_ShowChar(3,13,target_yaw >= 0 ? '+' : '-'); 
 80059ea:	4b9c      	ldr	r3, [pc, #624]	@ (8005c5c <main+0x698>)
 80059ec:	edd3 7a00 	vldr	s15, [r3]
 80059f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f8:	db01      	blt.n	80059fe <main+0x43a>
 80059fa:	232b      	movs	r3, #43	@ 0x2b
 80059fc:	e000      	b.n	8005a00 <main+0x43c>
 80059fe:	232d      	movs	r3, #45	@ 0x2d
 8005a00:	461a      	mov	r2, r3
 8005a02:	210d      	movs	r1, #13
 8005a04:	2003      	movs	r0, #3
 8005a06:	f7ff f93b 	bl	8004c80 <OLED_ShowChar>
    OLED_ShowNum(3,14,fabsf(target_yaw),3);
 8005a0a:	4b94      	ldr	r3, [pc, #592]	@ (8005c5c <main+0x698>)
 8005a0c:	edd3 7a00 	vldr	s15, [r3]
 8005a10:	eef0 7ae7 	vabs.f32	s15, s15
 8005a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a18:	2303      	movs	r3, #3
 8005a1a:	ee17 2a90 	vmov	r2, s15
 8005a1e:	210e      	movs	r1, #14
 8005a20:	2003      	movs	r0, #3
 8005a22:	f7ff f9c3 	bl	8004dac <OLED_ShowNum>
    OLED_ShowNum(3,6,fabsf(yaw),3);
 8005a26:	4b8c      	ldr	r3, [pc, #560]	@ (8005c58 <main+0x694>)
 8005a28:	edd3 7a00 	vldr	s15, [r3]
 8005a2c:	eef0 7ae7 	vabs.f32	s15, s15
 8005a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a34:	2303      	movs	r3, #3
 8005a36:	ee17 2a90 	vmov	r2, s15
 8005a3a:	2106      	movs	r1, #6
 8005a3c:	2003      	movs	r0, #3
 8005a3e:	f7ff f9b5 	bl	8004dac <OLED_ShowNum>
    
    OLED_ShowNum(4,1,path,2);  // 显示毫秒
 8005a42:	4b87      	ldr	r3, [pc, #540]	@ (8005c60 <main+0x69c>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	2302      	movs	r3, #2
 8005a48:	2101      	movs	r1, #1
 8005a4a:	2004      	movs	r0, #4
 8005a4c:	f7ff f9ae 	bl	8004dac <OLED_ShowNum>
    // OLED_ShowNum(4,4,time,4); OLED_ShowNum(4,10,time_start,4);
    // meandistances(distances);  

    switch (path) {
 8005a50:	4b83      	ldr	r3, [pc, #524]	@ (8005c60 <main+0x69c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b0c      	cmp	r3, #12
 8005a56:	f63f aee2 	bhi.w	800581e <main+0x25a>
 8005a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <main+0x49c>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005a95 	.word	0x08005a95
 8005a64:	08005cf5 	.word	0x08005cf5
 8005a68:	08005ec1 	.word	0x08005ec1
 8005a6c:	08006065 	.word	0x08006065
 8005a70:	080061df 	.word	0x080061df
 8005a74:	0800638b 	.word	0x0800638b
 8005a78:	08006505 	.word	0x08006505
 8005a7c:	080066bd 	.word	0x080066bd
 8005a80:	0800683d 	.word	0x0800683d
 8005a84:	080069eb 	.word	0x080069eb
 8005a88:	08006b63 	.word	0x08006b63
 8005a8c:	08006d13 	.word	0x08006d13
 8005a90:	08006e91 	.word	0x08006e91
      case 0: {
        // 参数定义
        const float TARGET_DISTANCE = 230.0f;   // 调试，这个变量用于检测最终的目标距离
 8005a94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005a9c:	4a71      	ldr	r2, [pc, #452]	@ (8005c64 <main+0x6a0>)
 8005a9e:	601a      	str	r2, [r3, #0]
        const float DECEL_RANGE = 150.0f;      // 调试，这个变量用于设置减速区间范围
 8005aa0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005aa4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005aa8:	4a6f      	ldr	r2, [pc, #444]	@ (8005c68 <main+0x6a4>)
 8005aaa:	601a      	str	r2, [r3, #0]
        const uint8_t MIN_SPEED = 10;          // 调试，这个变量用于设置接近目标时的速度最小速度（靠近时）
 8005aac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ab0:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8005ab4:	220a      	movs	r2, #10
 8005ab6:	701a      	strb	r2, [r3, #0]
        const uint8_t MAX_SPEED = 80;          // 调试，这个变量用于设置离目标较远时的速度
 8005ab8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005abc:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8005ac0:	2250      	movs	r2, #80	@ 0x50
 8005ac2:	701a      	strb	r2, [r3, #0]
    
        float current_distance = distances[1]; 
 8005ac4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ac8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005acc:	4a5e      	ldr	r2, [pc, #376]	@ (8005c48 <main+0x684>)
 8005ace:	6852      	ldr	r2, [r2, #4]
 8005ad0:	601a      	str	r2, [r3, #0]
    
        // 速度计算逻辑
        uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 8005ad2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ad6:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    
        if (current_distance <= TARGET_DISTANCE && current_distance != 0) {
 8005ae0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ae4:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 8005ae8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005aec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005af0:	ed92 7a00 	vldr	s14, [r2]
 8005af4:	edd3 7a00 	vldr	s15, [r3]
 8005af8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b00:	d827      	bhi.n	8005b52 <main+0x58e>
 8005b02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b06:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005b0a:	edd3 7a00 	vldr	s15, [r3]
 8005b0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b16:	d01c      	beq.n	8005b52 <main+0x58e>
            // 区域3：到达目标距离（≤80mm）
            motor_speed = MIN_SPEED;
 8005b18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b1c:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
    
            // 执行路径切换逻辑
            if( /* mean[1] <=100 && */ current_distance<=40) {
 8005b26:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b2a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005b2e:	edd3 7a00 	vldr	s15, [r3]
 8005b32:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8005c6c <main+0x6a8>
 8005b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3e:	f200 80a6 	bhi.w	8005c8e <main+0x6ca>
              path += 1;
 8005b42:	4b47      	ldr	r3, [pc, #284]	@ (8005c60 <main+0x69c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3301      	adds	r3, #1
 8005b48:	4a45      	ldr	r2, [pc, #276]	@ (8005c60 <main+0x69c>)
 8005b4a:	6013      	str	r3, [r2, #0]
              PID_ResetAll(); // 重置所有PID控制器
 8005b4c:	f7ff fd22 	bl	8005594 <PID_ResetAll>
            if( /* mean[1] <=100 && */ current_distance<=40) {
 8005b50:	e09d      	b.n	8005c8e <main+0x6ca>
          }
        }
        else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE) /* && mean[1] <= (TARGET_DISTANCE + DECEL_RANGE) */) {
 8005b52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b56:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8005b5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005b62:	ed92 7a00 	vldr	s14, [r2]
 8005b66:	edd3 7a00 	vldr	s15, [r3]
 8005b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b72:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005b76:	ed93 7a00 	vldr	s14, [r3]
 8005b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b82:	d87d      	bhi.n	8005c80 <main+0x6bc>
            // 区域2：减速区间（70~170mm）
            // 距离越近速度越慢，线性变化：170mm->60, 70mm->10
            float distance_from_target = current_distance - TARGET_DISTANCE;
 8005b84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b88:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005b8c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005b90:	f5a2 718e 	sub.w	r1, r2, #284	@ 0x11c
 8005b94:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005b98:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8005b9c:	ed91 7a00 	vldr	s14, [r1]
 8005ba0:	edd2 7a00 	vldr	s15, [r2]
 8005ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ba8:	edc3 7a00 	vstr	s15, [r3]
            float ratio = (distance_from_target / DECEL_RANGE);
 8005bac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bb0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005bb4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005bb8:	f5a2 7190 	sub.w	r1, r2, #288	@ 0x120
 8005bbc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005bc0:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8005bc4:	edd1 6a00 	vldr	s13, [r1]
 8005bc8:	ed92 7a00 	vldr	s14, [r2]
 8005bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bd0:	edc3 7a00 	vstr	s15, [r3]
            motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 8005bd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bd8:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8005bdc:	781a      	ldrb	r2, [r3, #0]
 8005bde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005be2:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bf2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bf6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005bfa:	edd3 7a00 	vldr	s15, [r3]
 8005bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c06:	edc7 7a01 	vstr	s15, [r7, #4]
 8005c0a:	793b      	ldrb	r3, [r7, #4]
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c12:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
            motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8005c1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c22:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8005c26:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d31f      	bcc.n	8005c70 <main+0x6ac>
 8005c30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c34:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8005c38:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	bf28      	it	cs
 8005c42:	4613      	movcs	r3, r2
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	e018      	b.n	8005c7a <main+0x6b6>
 8005c48:	20000038 	.word	0x20000038
 8005c4c:	2000041c 	.word	0x2000041c
 8005c50:	08014c18 	.word	0x08014c18
 8005c54:	20000049 	.word	0x20000049
 8005c58:	20000594 	.word	0x20000594
 8005c5c:	20000590 	.word	0x20000590
 8005c60:	20000420 	.word	0x20000420
 8005c64:	43660000 	.word	0x43660000
 8005c68:	43160000 	.word	0x43160000
 8005c6c:	42200000 	.word	0x42200000
 8005c70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c74:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
 8005c7e:	e006      	b.n	8005c8e <main+0x6ca>
        }
        else {
            // 区域1：全速区间（>170mm）
            motor_speed = MAX_SPEED;
 8005c80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c84:	f5a3 738b 	sub.w	r3, r3, #278	@ 0x116
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
        }
    
        // 执行带平滑过渡的电机控制
        static uint8_t last_speed = 0;
        motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8005c8e:	4bc7      	ldr	r3, [pc, #796]	@ (8005fac <main+0x9e8>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8005c96:	4611      	mov	r1, r2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff fc2d 	bl	80054f8 <smooth_speed_transition>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
        last_speed = motor_speed;
 8005ca4:	4ac1      	ldr	r2, [pc, #772]	@ (8005fac <main+0x9e8>)
 8005ca6:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8005caa:	7013      	strb	r3, [r2, #0]
    
        Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8005cac:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8005cb0:	b21b      	sxth	r3, r3
 8005cb2:	4abf      	ldr	r2, [pc, #764]	@ (8005fb0 <main+0x9ec>)
 8005cb4:	9202      	str	r2, [sp, #8]
 8005cb6:	4abf      	ldr	r2, [pc, #764]	@ (8005fb4 <main+0x9f0>)
 8005cb8:	9201      	str	r2, [sp, #4]
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	f001 fe22 	bl	800790c <Motor_Straight>
        
        // 使用左侧电机调整
        Adjust_Left_Motors_By_Distance(MOTOR_1, MOTOR_3, MOTOR_2, MOTOR_4, distances[0], 40.0f);
 8005cc8:	4bbb      	ldr	r3, [pc, #748]	@ (8005fb8 <main+0x9f4>)
 8005cca:	edd3 7a00 	vldr	s15, [r3]
 8005cce:	eddf 0abb 	vldr	s1, [pc, #748]	@ 8005fbc <main+0x9f8>
 8005cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	2201      	movs	r2, #1
 8005cda:	2102      	movs	r1, #2
 8005cdc:	2000      	movs	r0, #0
 8005cde:	f002 f827 	bl	8007d30 <Adjust_Left_Motors_By_Distance>
    
        OLED_ShowNum(4, 4, motor_speed, 2);
 8005ce2:	f897 212b 	ldrb.w	r2, [r7, #299]	@ 0x12b
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	2104      	movs	r1, #4
 8005cea:	2004      	movs	r0, #4
 8005cec:	f7ff f85e 	bl	8004dac <OLED_ShowNum>
        break;
 8005cf0:	f001 b9b5 	b.w	800705e <main+0x1a9a>
      }
      case 1: {
        // 参数定义
        const float TARGET_DISTANCE = 70.0f;   // 调试，这个变量用于检测最终的目标距离
 8005cf4:	4bb2      	ldr	r3, [pc, #712]	@ (8005fc0 <main+0x9fc>)
 8005cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        const float DECEL_RANGE = 700.0f;      // 调试，这个变量用于设置减速区间范围
 8005cf8:	4bb2      	ldr	r3, [pc, #712]	@ (8005fc4 <main+0xa00>)
 8005cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
        const uint8_t MIN_SPEED = 25;          // 调试，这个变量用于设置接近目标时的速度最小速度（靠近时）
 8005cfc:	2319      	movs	r3, #25
 8005cfe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        const uint8_t MAX_SPEED = 80;          // 调试，这个变量用于设置离目标较远时的速度
 8005d02:	2350      	movs	r3, #80	@ 0x50
 8005d04:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    
        // 获取当前检测距离（使用第4个传感器）
        float current_distance = distances[3]; 
 8005d08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d0c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005d10:	4aa9      	ldr	r2, [pc, #676]	@ (8005fb8 <main+0x9f4>)
 8005d12:	68d2      	ldr	r2, [r2, #12]
 8005d14:	601a      	str	r2, [r3, #0]
    
        // 速度计算逻辑
        uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 8005d16:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005d1a:	f887 312a 	strb.w	r3, [r7, #298]	@ 0x12a
    
        if (current_distance <= TARGET_DISTANCE) {
 8005d1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d22:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005d26:	ed93 7a00 	vldr	s14, [r3]
 8005d2a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005d2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d36:	d818      	bhi.n	8005d6a <main+0x7a6>
            // 区域3：到达目标距离（≤80mm）
            motor_speed = MIN_SPEED;
 8005d38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005d3c:	f887 312a 	strb.w	r3, [r7, #298]	@ 0x12a
    
            // 执行路径切换逻辑
            if(current_distance<=TARGET_DISTANCE) {
 8005d40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d44:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005d48:	ed93 7a00 	vldr	s14, [r3]
 8005d4c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005d50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d58:	d86c      	bhi.n	8005e34 <main+0x870>
                path += 1;
 8005d5a:	4b9b      	ldr	r3, [pc, #620]	@ (8005fc8 <main+0xa04>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	4a99      	ldr	r2, [pc, #612]	@ (8005fc8 <main+0xa04>)
 8005d62:	6013      	str	r3, [r2, #0]
                PID_ResetAll(); // 重置所有PID控制器
 8005d64:	f7ff fc16 	bl	8005594 <PID_ResetAll>
 8005d68:	e064      	b.n	8005e34 <main+0x870>
            }
        }
        else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8005d6a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005d6e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d7a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005d7e:	ed93 7a00 	vldr	s14, [r3]
 8005d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8a:	d84f      	bhi.n	8005e2c <main+0x868>
            // 区域2：减速区间（80~180mm）
            float distance_from_target = current_distance - TARGET_DISTANCE;
 8005d8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d94:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d98:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8005d9c:	ed92 7a00 	vldr	s14, [r2]
 8005da0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005da8:	edc3 7a00 	vstr	s15, [r3]
            float ratio = (distance_from_target / DECEL_RANGE);
 8005dac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005db8:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8005dbc:	edd2 6a00 	vldr	s13, [r2]
 8005dc0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8005dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dc8:	edc3 7a00 	vstr	s15, [r3]
            motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 8005dcc:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8005dd0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de6:	edd3 7a00 	vldr	s15, [r3]
 8005dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df2:	edc7 7a01 	vstr	s15, [r7, #4]
 8005df6:	793b      	ldrb	r3, [r7, #4]
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005dfe:	4413      	add	r3, r2
 8005e00:	f887 312a 	strb.w	r3, [r7, #298]	@ 0x12a
            motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8005e04:	f897 212a 	ldrb.w	r2, [r7, #298]	@ 0x12a
 8005e08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d308      	bcc.n	8005e22 <main+0x85e>
 8005e10:	f897 212a 	ldrb.w	r2, [r7, #298]	@ 0x12a
 8005e14:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	bf28      	it	cs
 8005e1c:	4613      	movcs	r3, r2
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	e001      	b.n	8005e26 <main+0x862>
 8005e22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005e26:	f887 312a 	strb.w	r3, [r7, #298]	@ 0x12a
 8005e2a:	e003      	b.n	8005e34 <main+0x870>
        }
        else {
            // 区域1：全速区间（>170mm）
            motor_speed = MAX_SPEED;
 8005e2c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005e30:	f887 312a 	strb.w	r3, [r7, #298]	@ 0x12a
        }
    
        // 执行带平滑过渡的电机控制
        static uint8_t last_speed = 0;
        motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8005e34:	4b65      	ldr	r3, [pc, #404]	@ (8005fcc <main+0xa08>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	f897 212a 	ldrb.w	r2, [r7, #298]	@ 0x12a
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff fb5a 	bl	80054f8 <smooth_speed_transition>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f887 312a 	strb.w	r3, [r7, #298]	@ 0x12a
        last_speed = motor_speed;
 8005e4a:	4a60      	ldr	r2, [pc, #384]	@ (8005fcc <main+0xa08>)
 8005e4c:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 8005e50:	7013      	strb	r3, [r2, #0]
    
        Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8005e52:	f897 312a 	ldrb.w	r3, [r7, #298]	@ 0x12a
 8005e56:	b21b      	sxth	r3, r3
 8005e58:	4a55      	ldr	r2, [pc, #340]	@ (8005fb0 <main+0x9ec>)
 8005e5a:	9202      	str	r2, [sp, #8]
 8005e5c:	4a55      	ldr	r2, [pc, #340]	@ (8005fb4 <main+0x9f0>)
 8005e5e:	9201      	str	r2, [sp, #4]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	2303      	movs	r3, #3
 8005e64:	2202      	movs	r2, #2
 8005e66:	2101      	movs	r1, #1
 8005e68:	2000      	movs	r0, #0
 8005e6a:	f001 fb43 	bl	80074f4 <Motor_Rightward>
        
        // 使用前后电机调整
        float avg_distance = (distances[1] + distances[2]) / 2.0f;
 8005e6e:	4b52      	ldr	r3, [pc, #328]	@ (8005fb8 <main+0x9f4>)
 8005e70:	ed93 7a01 	vldr	s14, [r3, #4]
 8005e74:	4b50      	ldr	r3, [pc, #320]	@ (8005fb8 <main+0x9f4>)
 8005e76:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005e86:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005e8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e8e:	edc3 7a00 	vstr	s15, [r3]
        Adjust_Motors_By_FrontBack_Distance(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, avg_distance, 40.0f);
 8005e92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005e9a:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8005fbc <main+0x9f8>
 8005e9e:	ed93 0a00 	vldr	s0, [r3]
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	2103      	movs	r1, #3
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	f004 f849 	bl	8009f40 <Adjust_Motors_By_FrontBack_Distance>
    
        OLED_ShowNum(4, 4, motor_speed, 2);
 8005eae:	f897 212a 	ldrb.w	r2, [r7, #298]	@ 0x12a
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	2104      	movs	r1, #4
 8005eb6:	2004      	movs	r0, #4
 8005eb8:	f7fe ff78 	bl	8004dac <OLED_ShowNum>
        break;
 8005ebc:	f001 b8cf 	b.w	800705e <main+0x1a9a>
      }
      case 2: {
        const uint32_t DELAY_ENTER = 200; //调试
 8005ec0:	23c8      	movs	r3, #200	@ 0xc8
 8005ec2:	64bb      	str	r3, [r7, #72]	@ 0x48

        if (path_change!=2)
 8005ec4:	4b42      	ldr	r3, [pc, #264]	@ (8005fd0 <main+0xa0c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	f000 80af 	beq.w	800602c <main+0xa68>
        {
          if ((distances[0]>=150&& /* mean[0]>=70 && */ path_change==0)||(distances[0]<=150&& /* mean[0]<=70&& */ path_change==1))
 8005ece:	4b3a      	ldr	r3, [pc, #232]	@ (8005fb8 <main+0x9f4>)
 8005ed0:	edd3 7a00 	vldr	s15, [r3]
 8005ed4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8005fd4 <main+0xa10>
 8005ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee0:	db03      	blt.n	8005eea <main+0x926>
 8005ee2:	4b3b      	ldr	r3, [pc, #236]	@ (8005fd0 <main+0xa0c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00d      	beq.n	8005f06 <main+0x942>
 8005eea:	4b33      	ldr	r3, [pc, #204]	@ (8005fb8 <main+0x9f4>)
 8005eec:	edd3 7a00 	vldr	s15, [r3]
 8005ef0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8005fd4 <main+0xa10>
 8005ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efc:	d81e      	bhi.n	8005f3c <main+0x978>
 8005efe:	4b34      	ldr	r3, [pc, #208]	@ (8005fd0 <main+0xa0c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d11a      	bne.n	8005f3c <main+0x978>
          {
            Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -33, &yaw, &target_yaw);
 8005f06:	4b2a      	ldr	r3, [pc, #168]	@ (8005fb0 <main+0x9ec>)
 8005f08:	9302      	str	r3, [sp, #8]
 8005f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8005fb4 <main+0x9f0>)
 8005f0c:	9301      	str	r3, [sp, #4]
 8005f0e:	f06f 0320 	mvn.w	r3, #32
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	2303      	movs	r3, #3
 8005f16:	2202      	movs	r2, #2
 8005f18:	2101      	movs	r1, #1
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	f001 fcf6 	bl	800790c <Motor_Straight>
            // 使用右侧电机调整
            Adjust_Right_Motors_By_Distance(MOTOR_2, MOTOR_4, MOTOR_1, MOTOR_3, distances[3], 40.0f);
 8005f20:	4b25      	ldr	r3, [pc, #148]	@ (8005fb8 <main+0x9f4>)
 8005f22:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f26:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8005fbc <main+0x9f8>
 8005f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8005f2e:	2302      	movs	r3, #2
 8005f30:	2200      	movs	r2, #0
 8005f32:	2103      	movs	r1, #3
 8005f34:	2001      	movs	r0, #1
 8005f36:	f002 ff7f 	bl	8008e38 <Adjust_Right_Motors_By_Distance>
 8005f3a:	e091      	b.n	8006060 <main+0xa9c>
          }else if (distances[0]<=150 && /* mean[0]<=100 && */ path_change==0)
 8005f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb8 <main+0x9f4>)
 8005f3e:	edd3 7a00 	vldr	s15, [r3]
 8005f42:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005fd4 <main+0xa10>
 8005f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f4e:	d821      	bhi.n	8005f94 <main+0x9d0>
 8005f50:	4b1f      	ldr	r3, [pc, #124]	@ (8005fd0 <main+0xa0c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d11d      	bne.n	8005f94 <main+0x9d0>
          {
            if(flag){
 8005f58:	4b1f      	ldr	r3, [pc, #124]	@ (8005fd8 <main+0xa14>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d007      	beq.n	8005f70 <main+0x9ac>
              time_start = HAL_GetTick();
 8005f60:	f006 ffb2 	bl	800cec8 <HAL_GetTick>
 8005f64:	4603      	mov	r3, r0
 8005f66:	4a1d      	ldr	r2, [pc, #116]	@ (8005fdc <main+0xa18>)
 8005f68:	6013      	str	r3, [r2, #0]
              flag = false;
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005fd8 <main+0xa14>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	701a      	strb	r2, [r3, #0]
            }
            uint32_t time = HAL_GetTick();
 8005f70:	f006 ffaa 	bl	800cec8 <HAL_GetTick>
 8005f74:	6478      	str	r0, [r7, #68]	@ 0x44
            if(time - time_start >=110){
 8005f76:	4b19      	ldr	r3, [pc, #100]	@ (8005fdc <main+0xa18>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b6d      	cmp	r3, #109	@ 0x6d
 8005f80:	d96d      	bls.n	800605e <main+0xa9a>
              path_change+=1;
 8005f82:	4b13      	ldr	r3, [pc, #76]	@ (8005fd0 <main+0xa0c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3301      	adds	r3, #1
 8005f88:	4a11      	ldr	r2, [pc, #68]	@ (8005fd0 <main+0xa0c>)
 8005f8a:	6013      	str	r3, [r2, #0]
              flag = true;
 8005f8c:	4b12      	ldr	r3, [pc, #72]	@ (8005fd8 <main+0xa14>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	701a      	strb	r2, [r3, #0]
          {
 8005f92:	e064      	b.n	800605e <main+0xa9a>
            }
          }else if (distances[0]>=150&& /* mean[0]>=70&& */ path_change==1)
 8005f94:	4b08      	ldr	r3, [pc, #32]	@ (8005fb8 <main+0x9f4>)
 8005f96:	edd3 7a00 	vldr	s15, [r3]
 8005f9a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005fd4 <main+0xa10>
 8005f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa6:	da1b      	bge.n	8005fe0 <main+0xa1c>
          PID_Reset(&pid_rear);
          PID_Reset(&pid_front);
          PID_Reset(&pid_position);
        }
        
        break;
 8005fa8:	f001 b847 	b.w	800703a <main+0x1a76>
 8005fac:	20000588 	.word	0x20000588
 8005fb0:	20000590 	.word	0x20000590
 8005fb4:	20000594 	.word	0x20000594
 8005fb8:	20000038 	.word	0x20000038
 8005fbc:	42200000 	.word	0x42200000
 8005fc0:	428c0000 	.word	0x428c0000
 8005fc4:	442f0000 	.word	0x442f0000
 8005fc8:	20000420 	.word	0x20000420
 8005fcc:	20000589 	.word	0x20000589
 8005fd0:	20000424 	.word	0x20000424
 8005fd4:	43160000 	.word	0x43160000
 8005fd8:	20000048 	.word	0x20000048
 8005fdc:	20000428 	.word	0x20000428
          }else if (distances[0]>=150&& /* mean[0]>=70&& */ path_change==1)
 8005fe0:	4bba      	ldr	r3, [pc, #744]	@ (80062cc <main+0xd08>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	f041 8028 	bne.w	800703a <main+0x1a76>
            if(flag){
 8005fea:	4bb9      	ldr	r3, [pc, #740]	@ (80062d0 <main+0xd0c>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <main+0xa3e>
              time_start = HAL_GetTick();
 8005ff2:	f006 ff69 	bl	800cec8 <HAL_GetTick>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4ab6      	ldr	r2, [pc, #728]	@ (80062d4 <main+0xd10>)
 8005ffa:	6013      	str	r3, [r2, #0]
              flag = false;
 8005ffc:	4bb4      	ldr	r3, [pc, #720]	@ (80062d0 <main+0xd0c>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	701a      	strb	r2, [r3, #0]
            uint32_t time = HAL_GetTick();
 8006002:	f006 ff61 	bl	800cec8 <HAL_GetTick>
 8006006:	6438      	str	r0, [r7, #64]	@ 0x40
            if(time - time_start >= DELAY_ENTER ){
 8006008:	4bb2      	ldr	r3, [pc, #712]	@ (80062d4 <main+0xd10>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006012:	429a      	cmp	r2, r3
 8006014:	f201 8011 	bhi.w	800703a <main+0x1a76>
              path_change+=1;
 8006018:	4bac      	ldr	r3, [pc, #688]	@ (80062cc <main+0xd08>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3301      	adds	r3, #1
 800601e:	4aab      	ldr	r2, [pc, #684]	@ (80062cc <main+0xd08>)
 8006020:	6013      	str	r3, [r2, #0]
              flag = true;
 8006022:	4bab      	ldr	r3, [pc, #684]	@ (80062d0 <main+0xd0c>)
 8006024:	2201      	movs	r2, #1
 8006026:	701a      	strb	r2, [r3, #0]
        break;
 8006028:	f001 b807 	b.w	800703a <main+0x1a76>
          path_change = 0;
 800602c:	4ba7      	ldr	r3, [pc, #668]	@ (80062cc <main+0xd08>)
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]
          flag = true;
 8006032:	4ba7      	ldr	r3, [pc, #668]	@ (80062d0 <main+0xd0c>)
 8006034:	2201      	movs	r2, #1
 8006036:	701a      	strb	r2, [r3, #0]
          path +=1;
 8006038:	4ba7      	ldr	r3, [pc, #668]	@ (80062d8 <main+0xd14>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3301      	adds	r3, #1
 800603e:	4aa6      	ldr	r2, [pc, #664]	@ (80062d8 <main+0xd14>)
 8006040:	6013      	str	r3, [r2, #0]
          PID_Reset(&pid_yaw);        
 8006042:	48a6      	ldr	r0, [pc, #664]	@ (80062dc <main+0xd18>)
 8006044:	f005 f87a 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_rear);
 8006048:	48a5      	ldr	r0, [pc, #660]	@ (80062e0 <main+0xd1c>)
 800604a:	f005 f877 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_front);
 800604e:	48a5      	ldr	r0, [pc, #660]	@ (80062e4 <main+0xd20>)
 8006050:	f005 f874 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_position);
 8006054:	48a4      	ldr	r0, [pc, #656]	@ (80062e8 <main+0xd24>)
 8006056:	f005 f871 	bl	800b13c <PID_Reset>
        break;
 800605a:	f000 bfee 	b.w	800703a <main+0x1a76>
          {
 800605e:	bf00      	nop
        break;
 8006060:	f000 bfeb 	b.w	800703a <main+0x1a76>
      }

      case 3: {
        // 参数定义
        const float TARGET_DISTANCE = 90.0f;   // 调试，这个变量用于检测最终的目标距离
 8006064:	4ba1      	ldr	r3, [pc, #644]	@ (80062ec <main+0xd28>)
 8006066:	667b      	str	r3, [r7, #100]	@ 0x64
        const float DECEL_RANGE = 800.0f;      // 调试，这个变量用于设置减速区间范围
 8006068:	4ba1      	ldr	r3, [pc, #644]	@ (80062f0 <main+0xd2c>)
 800606a:	663b      	str	r3, [r7, #96]	@ 0x60
        const uint8_t MIN_SPEED = 20;          // 调试，这个变量用于设置接近目标时的速度最小速度（靠近时）
 800606c:	2314      	movs	r3, #20
 800606e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        const uint8_t MAX_SPEED = 60;          // 调试，这个变量用于设置离目标较远时的速度
 8006072:	233c      	movs	r3, #60	@ 0x3c
 8006074:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    
        // 获取当前检测距离（使用第4个传感器）
        float current_distance = distances[0]; 
 8006078:	4b9e      	ldr	r3, [pc, #632]	@ (80062f4 <main+0xd30>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	65bb      	str	r3, [r7, #88]	@ 0x58
    
        // 速度计算逻辑
        uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 800607e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8006082:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
    
        if (current_distance <= TARGET_DISTANCE) {
 8006086:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800608a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800608e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006096:	d814      	bhi.n	80060c2 <main+0xafe>
            // 区域3：到达目标距离（≤70mm）
            motor_speed = MIN_SPEED;
 8006098:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800609c:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
    
            // 执行路径切换逻辑
            if(current_distance<=TARGET_DISTANCE) {
 80060a0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80060a4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80060a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b0:	d854      	bhi.n	800615c <main+0xb98>
              path += 1;
 80060b2:	4b89      	ldr	r3, [pc, #548]	@ (80062d8 <main+0xd14>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3301      	adds	r3, #1
 80060b8:	4a87      	ldr	r2, [pc, #540]	@ (80062d8 <main+0xd14>)
 80060ba:	6013      	str	r3, [r2, #0]
              PID_ResetAll(); // 重置所有PID控制器
 80060bc:	f7ff fa6a 	bl	8005594 <PID_ResetAll>
 80060c0:	e04c      	b.n	800615c <main+0xb98>
            }
        } 
        else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 80060c2:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80060c6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80060ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060ce:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80060d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060da:	d83b      	bhi.n	8006154 <main+0xb90>
            // 区域2：减速区间（70~170mm）
            float distance_from_target = current_distance - TARGET_DISTANCE;
 80060dc:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80060e0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80060e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060e8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
            float ratio = (distance_from_target / DECEL_RANGE);
 80060ec:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80060f0:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80060f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f8:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
            motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 80060fc:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 8006100:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800610e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8006112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800611a:	edc7 7a01 	vstr	s15, [r7, #4]
 800611e:	793b      	ldrb	r3, [r7, #4]
 8006120:	b2da      	uxtb	r2, r3
 8006122:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006126:	4413      	add	r3, r2
 8006128:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
            motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 800612c:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 8006130:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006134:	429a      	cmp	r2, r3
 8006136:	d308      	bcc.n	800614a <main+0xb86>
 8006138:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 800613c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8006140:	4293      	cmp	r3, r2
 8006142:	bf28      	it	cs
 8006144:	4613      	movcs	r3, r2
 8006146:	b2db      	uxtb	r3, r3
 8006148:	e001      	b.n	800614e <main+0xb8a>
 800614a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800614e:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
 8006152:	e003      	b.n	800615c <main+0xb98>
        }
        else {
            // 区域1：全速区间（>170mm）
            motor_speed = MAX_SPEED;
 8006154:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8006158:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
        }
    
        // 执行带平滑过渡的电机控制
        static uint8_t last_speed = 0;
        motor_speed = smooth_speed_transition(last_speed, motor_speed);
 800615c:	4b66      	ldr	r3, [pc, #408]	@ (80062f8 <main+0xd34>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 8006164:	4611      	mov	r1, r2
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff f9c6 	bl	80054f8 <smooth_speed_transition>
 800616c:	4603      	mov	r3, r0
 800616e:	f887 3129 	strb.w	r3, [r7, #297]	@ 0x129
        last_speed = motor_speed;
 8006172:	4a61      	ldr	r2, [pc, #388]	@ (80062f8 <main+0xd34>)
 8006174:	f897 3129 	ldrb.w	r3, [r7, #297]	@ 0x129
 8006178:	7013      	strb	r3, [r2, #0]
    
        Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -motor_speed, &yaw, &target_yaw);
 800617a:	f897 3129 	ldrb.w	r3, [r7, #297]	@ 0x129
 800617e:	b29b      	uxth	r3, r3
 8006180:	425b      	negs	r3, r3
 8006182:	b29b      	uxth	r3, r3
 8006184:	b21b      	sxth	r3, r3
 8006186:	4a5d      	ldr	r2, [pc, #372]	@ (80062fc <main+0xd38>)
 8006188:	9202      	str	r2, [sp, #8]
 800618a:	4a5d      	ldr	r2, [pc, #372]	@ (8006300 <main+0xd3c>)
 800618c:	9201      	str	r2, [sp, #4]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	2303      	movs	r3, #3
 8006192:	2202      	movs	r2, #2
 8006194:	2101      	movs	r1, #1
 8006196:	2000      	movs	r0, #0
 8006198:	f001 f9ac 	bl	80074f4 <Motor_Rightward>
        
        // 使用前后电机调整
        float avg_distance = (distances[1] + distances[2]) / 2.0f;
 800619c:	4b55      	ldr	r3, [pc, #340]	@ (80062f4 <main+0xd30>)
 800619e:	ed93 7a01 	vldr	s14, [r3, #4]
 80061a2:	4b54      	ldr	r3, [pc, #336]	@ (80062f4 <main+0xd30>)
 80061a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80061a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061ac:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80061b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061b4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        Adjust_Motors_By_FrontBack_Distance(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, avg_distance, 38.0f);
 80061b8:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8006304 <main+0xd40>
 80061bc:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 80061c0:	2302      	movs	r3, #2
 80061c2:	2201      	movs	r2, #1
 80061c4:	2103      	movs	r1, #3
 80061c6:	2000      	movs	r0, #0
 80061c8:	f003 feba 	bl	8009f40 <Adjust_Motors_By_FrontBack_Distance>
    
        OLED_ShowNum(4, 4, motor_speed, 2);
 80061cc:	f897 2129 	ldrb.w	r2, [r7, #297]	@ 0x129
 80061d0:	2302      	movs	r3, #2
 80061d2:	2104      	movs	r1, #4
 80061d4:	2004      	movs	r0, #4
 80061d6:	f7fe fde9 	bl	8004dac <OLED_ShowNum>
        break;
 80061da:	f000 bf40 	b.w	800705e <main+0x1a9a>
      }

      case 4: {
        const uint32_t DELAY_ENTER = 200; //调试
 80061de:	23c8      	movs	r3, #200	@ 0xc8
 80061e0:	673b      	str	r3, [r7, #112]	@ 0x70

        if (path_change!=2)
 80061e2:	4b3a      	ldr	r3, [pc, #232]	@ (80062cc <main+0xd08>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	f000 80b6 	beq.w	8006358 <main+0xd94>
        {
          if ((distances[3]>=150 && /* mean[3]>=70 && */ path_change==0)||(distances[3]<=150 && /* mean[3]<=70 && */ path_change==1))
 80061ec:	4b41      	ldr	r3, [pc, #260]	@ (80062f4 <main+0xd30>)
 80061ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80061f2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8006308 <main+0xd44>
 80061f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061fe:	db03      	blt.n	8006208 <main+0xc44>
 8006200:	4b32      	ldr	r3, [pc, #200]	@ (80062cc <main+0xd08>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00d      	beq.n	8006224 <main+0xc60>
 8006208:	4b3a      	ldr	r3, [pc, #232]	@ (80062f4 <main+0xd30>)
 800620a:	edd3 7a03 	vldr	s15, [r3, #12]
 800620e:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8006308 <main+0xd44>
 8006212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800621a:	d81e      	bhi.n	800625a <main+0xc96>
 800621c:	4b2b      	ldr	r3, [pc, #172]	@ (80062cc <main+0xd08>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d11a      	bne.n	800625a <main+0xc96>
          {
            Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8006224:	4b35      	ldr	r3, [pc, #212]	@ (80062fc <main+0xd38>)
 8006226:	9302      	str	r3, [sp, #8]
 8006228:	4b35      	ldr	r3, [pc, #212]	@ (8006300 <main+0xd3c>)
 800622a:	9301      	str	r3, [sp, #4]
 800622c:	f06f 031d 	mvn.w	r3, #29
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	2303      	movs	r3, #3
 8006234:	2202      	movs	r2, #2
 8006236:	2101      	movs	r1, #1
 8006238:	2000      	movs	r0, #0
 800623a:	f001 fb67 	bl	800790c <Motor_Straight>
            // 使用左侧电机调整
            Adjust_Left_Motors_By_Distance(MOTOR_1, MOTOR_3, MOTOR_2, MOTOR_4, distances[0], 30.0f);
 800623e:	4b2d      	ldr	r3, [pc, #180]	@ (80062f4 <main+0xd30>)
 8006240:	edd3 7a00 	vldr	s15, [r3]
 8006244:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8006248:	eeb0 0a67 	vmov.f32	s0, s15
 800624c:	2303      	movs	r3, #3
 800624e:	2201      	movs	r2, #1
 8006250:	2102      	movs	r1, #2
 8006252:	2000      	movs	r0, #0
 8006254:	f001 fd6c 	bl	8007d30 <Adjust_Left_Motors_By_Distance>
 8006258:	e095      	b.n	8006386 <main+0xdc2>
          }else if (distances[3]<=150 && /* mean[3]<=70&& */ path_change==0)
 800625a:	4b26      	ldr	r3, [pc, #152]	@ (80062f4 <main+0xd30>)
 800625c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006260:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8006308 <main+0xd44>
 8006264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800626c:	d821      	bhi.n	80062b2 <main+0xcee>
 800626e:	4b17      	ldr	r3, [pc, #92]	@ (80062cc <main+0xd08>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d11d      	bne.n	80062b2 <main+0xcee>
          {
            if(flag){
 8006276:	4b16      	ldr	r3, [pc, #88]	@ (80062d0 <main+0xd0c>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d007      	beq.n	800628e <main+0xcca>
              time_start = HAL_GetTick();
 800627e:	f006 fe23 	bl	800cec8 <HAL_GetTick>
 8006282:	4603      	mov	r3, r0
 8006284:	4a13      	ldr	r2, [pc, #76]	@ (80062d4 <main+0xd10>)
 8006286:	6013      	str	r3, [r2, #0]
              flag = false;
 8006288:	4b11      	ldr	r3, [pc, #68]	@ (80062d0 <main+0xd0c>)
 800628a:	2200      	movs	r2, #0
 800628c:	701a      	strb	r2, [r3, #0]
            }
            uint32_t time = HAL_GetTick();
 800628e:	f006 fe1b 	bl	800cec8 <HAL_GetTick>
 8006292:	66f8      	str	r0, [r7, #108]	@ 0x6c
            if(time - time_start >=100){
 8006294:	4b0f      	ldr	r3, [pc, #60]	@ (80062d4 <main+0xd10>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b63      	cmp	r3, #99	@ 0x63
 800629e:	d971      	bls.n	8006384 <main+0xdc0>
              path_change+=1;
 80062a0:	4b0a      	ldr	r3, [pc, #40]	@ (80062cc <main+0xd08>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	4a09      	ldr	r2, [pc, #36]	@ (80062cc <main+0xd08>)
 80062a8:	6013      	str	r3, [r2, #0]
              flag = true;
 80062aa:	4b09      	ldr	r3, [pc, #36]	@ (80062d0 <main+0xd0c>)
 80062ac:	2201      	movs	r2, #1
 80062ae:	701a      	strb	r2, [r3, #0]
          {
 80062b0:	e068      	b.n	8006384 <main+0xdc0>
            }
          }else if (distances[3]>=150 && /* mean[3]>=70 && */ path_change==1)
 80062b2:	4b10      	ldr	r3, [pc, #64]	@ (80062f4 <main+0xd30>)
 80062b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80062b8:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8006308 <main+0xd44>
 80062bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c4:	da22      	bge.n	800630c <main+0xd48>
          PID_Reset(&pid_rear);
          PID_Reset(&pid_front);
          PID_Reset(&pid_position);
        }
        
        break;
 80062c6:	f000 bebb 	b.w	8007040 <main+0x1a7c>
 80062ca:	bf00      	nop
 80062cc:	20000424 	.word	0x20000424
 80062d0:	20000048 	.word	0x20000048
 80062d4:	20000428 	.word	0x20000428
 80062d8:	20000420 	.word	0x20000420
 80062dc:	20000070 	.word	0x20000070
 80062e0:	200000a0 	.word	0x200000a0
 80062e4:	20000088 	.word	0x20000088
 80062e8:	200000b8 	.word	0x200000b8
 80062ec:	42b40000 	.word	0x42b40000
 80062f0:	44480000 	.word	0x44480000
 80062f4:	20000038 	.word	0x20000038
 80062f8:	2000058a 	.word	0x2000058a
 80062fc:	20000590 	.word	0x20000590
 8006300:	20000594 	.word	0x20000594
 8006304:	42180000 	.word	0x42180000
 8006308:	43160000 	.word	0x43160000
          }else if (distances[3]>=150 && /* mean[3]>=70 && */ path_change==1)
 800630c:	4bba      	ldr	r3, [pc, #744]	@ (80065f8 <main+0x1034>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b01      	cmp	r3, #1
 8006312:	f040 8695 	bne.w	8007040 <main+0x1a7c>
            if(flag){
 8006316:	4bb9      	ldr	r3, [pc, #740]	@ (80065fc <main+0x1038>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d007      	beq.n	800632e <main+0xd6a>
              time_start = HAL_GetTick();
 800631e:	f006 fdd3 	bl	800cec8 <HAL_GetTick>
 8006322:	4603      	mov	r3, r0
 8006324:	4ab6      	ldr	r2, [pc, #728]	@ (8006600 <main+0x103c>)
 8006326:	6013      	str	r3, [r2, #0]
              flag = false;
 8006328:	4bb4      	ldr	r3, [pc, #720]	@ (80065fc <main+0x1038>)
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]
            uint32_t time = HAL_GetTick();
 800632e:	f006 fdcb 	bl	800cec8 <HAL_GetTick>
 8006332:	66b8      	str	r0, [r7, #104]	@ 0x68
            if(time - time_start >= DELAY_ENTER ){
 8006334:	4bb2      	ldr	r3, [pc, #712]	@ (8006600 <main+0x103c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800633e:	429a      	cmp	r2, r3
 8006340:	f200 867e 	bhi.w	8007040 <main+0x1a7c>
              path_change+=1;
 8006344:	4bac      	ldr	r3, [pc, #688]	@ (80065f8 <main+0x1034>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3301      	adds	r3, #1
 800634a:	4aab      	ldr	r2, [pc, #684]	@ (80065f8 <main+0x1034>)
 800634c:	6013      	str	r3, [r2, #0]
              flag = true;
 800634e:	4bab      	ldr	r3, [pc, #684]	@ (80065fc <main+0x1038>)
 8006350:	2201      	movs	r2, #1
 8006352:	701a      	strb	r2, [r3, #0]
        break;
 8006354:	f000 be74 	b.w	8007040 <main+0x1a7c>
          path_change = 0;
 8006358:	4ba7      	ldr	r3, [pc, #668]	@ (80065f8 <main+0x1034>)
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]
          path +=1;
 800635e:	4ba9      	ldr	r3, [pc, #676]	@ (8006604 <main+0x1040>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3301      	adds	r3, #1
 8006364:	4aa7      	ldr	r2, [pc, #668]	@ (8006604 <main+0x1040>)
 8006366:	6013      	str	r3, [r2, #0]
          PID_Reset(&pid_yaw);        
 8006368:	48a7      	ldr	r0, [pc, #668]	@ (8006608 <main+0x1044>)
 800636a:	f004 fee7 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_rear);
 800636e:	48a7      	ldr	r0, [pc, #668]	@ (800660c <main+0x1048>)
 8006370:	f004 fee4 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_front);
 8006374:	48a6      	ldr	r0, [pc, #664]	@ (8006610 <main+0x104c>)
 8006376:	f004 fee1 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_position);
 800637a:	48a6      	ldr	r0, [pc, #664]	@ (8006614 <main+0x1050>)
 800637c:	f004 fede 	bl	800b13c <PID_Reset>
        break;
 8006380:	f000 be5e 	b.w	8007040 <main+0x1a7c>
          {
 8006384:	bf00      	nop
        break;
 8006386:	f000 be5b 	b.w	8007040 <main+0x1a7c>
      }

      case 5: {
        // 参数定义
        const float TARGET_DISTANCE = 90.0f;   // 调试，这个变量用于检测最终的目标距离
 800638a:	4ba3      	ldr	r3, [pc, #652]	@ (8006618 <main+0x1054>)
 800638c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        const float DECEL_RANGE = 800.0f;      // 调试，这个变量用于设置减速区间范围
 8006390:	4ba2      	ldr	r3, [pc, #648]	@ (800661c <main+0x1058>)
 8006392:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint8_t MIN_SPEED = 25;          // 调试，这个变量用于设置接近目标时的速度最小速度（靠近时）
 8006396:	2319      	movs	r3, #25
 8006398:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        const uint8_t MAX_SPEED = 80;          // 调试，这个变量用于设置离目标较远时的速度
 800639c:	2350      	movs	r3, #80	@ 0x50
 800639e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
    
        // 获取当前检测距离（使用第4个传感器）
        float current_distance = distances[3]; 
 80063a2:	4b9f      	ldr	r3, [pc, #636]	@ (8006620 <main+0x105c>)
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    
        // 速度计算逻辑
        uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 80063aa:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80063ae:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
    
        if (current_distance <= TARGET_DISTANCE) {
 80063b2:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80063b6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80063ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c2:	d814      	bhi.n	80063ee <main+0xe2a>
            // 区域3：到达目标距离（≤70mm）
            motor_speed = MIN_SPEED;
 80063c4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80063c8:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
    
            // 执行路径切换逻辑
            if(current_distance<=TARGET_DISTANCE) {
 80063cc:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80063d0:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80063d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063dc:	d854      	bhi.n	8006488 <main+0xec4>
              path += 1;
 80063de:	4b89      	ldr	r3, [pc, #548]	@ (8006604 <main+0x1040>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3301      	adds	r3, #1
 80063e4:	4a87      	ldr	r2, [pc, #540]	@ (8006604 <main+0x1040>)
 80063e6:	6013      	str	r3, [r2, #0]
              PID_ResetAll(); // 重置所有PID控制器
 80063e8:	f7ff f8d4 	bl	8005594 <PID_ResetAll>
 80063ec:	e04c      	b.n	8006488 <main+0xec4>
            }
        } 
        else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 80063ee:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 80063f2:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80063f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063fa:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80063fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006406:	d83b      	bhi.n	8006480 <main+0xebc>
            // 区域2：减速区间（70~170mm）
            float distance_from_target = current_distance - TARGET_DISTANCE;
 8006408:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800640c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8006410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006414:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
            float ratio = (distance_from_target / DECEL_RANGE);
 8006418:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 800641c:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8006420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006424:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
            motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 8006428:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800642c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800643a:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800643e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006446:	edc7 7a01 	vstr	s15, [r7, #4]
 800644a:	793b      	ldrb	r3, [r7, #4]
 800644c:	b2da      	uxtb	r2, r3
 800644e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006452:	4413      	add	r3, r2
 8006454:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
            motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8006458:	f897 2128 	ldrb.w	r2, [r7, #296]	@ 0x128
 800645c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006460:	429a      	cmp	r2, r3
 8006462:	d308      	bcc.n	8006476 <main+0xeb2>
 8006464:	f897 2128 	ldrb.w	r2, [r7, #296]	@ 0x128
 8006468:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800646c:	4293      	cmp	r3, r2
 800646e:	bf28      	it	cs
 8006470:	4613      	movcs	r3, r2
 8006472:	b2db      	uxtb	r3, r3
 8006474:	e001      	b.n	800647a <main+0xeb6>
 8006476:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800647a:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
 800647e:	e003      	b.n	8006488 <main+0xec4>
        }
        else {
            // 区域1：全速区间（>170mm）
            motor_speed = MAX_SPEED;
 8006480:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8006484:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
        }
    
        // 执行带平滑过渡的电机控制
        static uint8_t last_speed = 0;
        motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8006488:	4b66      	ldr	r3, [pc, #408]	@ (8006624 <main+0x1060>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	f897 2128 	ldrb.w	r2, [r7, #296]	@ 0x128
 8006490:	4611      	mov	r1, r2
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff f830 	bl	80054f8 <smooth_speed_transition>
 8006498:	4603      	mov	r3, r0
 800649a:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
        last_speed = motor_speed;
 800649e:	4a61      	ldr	r2, [pc, #388]	@ (8006624 <main+0x1060>)
 80064a0:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 80064a4:	7013      	strb	r3, [r2, #0]
    
        Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 80064a6:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 80064aa:	b21b      	sxth	r3, r3
 80064ac:	4a5e      	ldr	r2, [pc, #376]	@ (8006628 <main+0x1064>)
 80064ae:	9202      	str	r2, [sp, #8]
 80064b0:	4a5e      	ldr	r2, [pc, #376]	@ (800662c <main+0x1068>)
 80064b2:	9201      	str	r2, [sp, #4]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	2303      	movs	r3, #3
 80064b8:	2202      	movs	r2, #2
 80064ba:	2101      	movs	r1, #1
 80064bc:	2000      	movs	r0, #0
 80064be:	f001 f819 	bl	80074f4 <Motor_Rightward>
        
        // 使用前后电机调整
        float avg_distance = (distances[1] + distances[2]) / 2.0f;
 80064c2:	4b57      	ldr	r3, [pc, #348]	@ (8006620 <main+0x105c>)
 80064c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80064c8:	4b55      	ldr	r3, [pc, #340]	@ (8006620 <main+0x105c>)
 80064ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80064ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064d2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80064d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064da:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
        Adjust_Motors_By_FrontBack_Distance(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, avg_distance, 40.0f);
 80064de:	eddf 0a54 	vldr	s1, [pc, #336]	@ 8006630 <main+0x106c>
 80064e2:	ed97 0a1d 	vldr	s0, [r7, #116]	@ 0x74
 80064e6:	2302      	movs	r3, #2
 80064e8:	2201      	movs	r2, #1
 80064ea:	2103      	movs	r1, #3
 80064ec:	2000      	movs	r0, #0
 80064ee:	f003 fd27 	bl	8009f40 <Adjust_Motors_By_FrontBack_Distance>
    
        OLED_ShowNum(4, 4, motor_speed, 2);
 80064f2:	f897 2128 	ldrb.w	r2, [r7, #296]	@ 0x128
 80064f6:	2302      	movs	r3, #2
 80064f8:	2104      	movs	r1, #4
 80064fa:	2004      	movs	r0, #4
 80064fc:	f7fe fc56 	bl	8004dac <OLED_ShowNum>
        break;
 8006500:	f000 bdad 	b.w	800705e <main+0x1a9a>
      }

      case 6: {
        const uint32_t DELAY_ENTER = 200; //调试
 8006504:	23c8      	movs	r3, #200	@ 0xc8
 8006506:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        if (path_change!=2)
 800650a:	4b3b      	ldr	r3, [pc, #236]	@ (80065f8 <main+0x1034>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b02      	cmp	r3, #2
 8006510:	f000 80bb 	beq.w	800668a <main+0x10c6>
        {
          if ((distances[0]>=150 && /* mean[0]>=70 && */ path_change==0)||(distances[0]<=150 && /*mean[0]<=150 && */path_change==1))
 8006514:	4b42      	ldr	r3, [pc, #264]	@ (8006620 <main+0x105c>)
 8006516:	edd3 7a00 	vldr	s15, [r3]
 800651a:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8006634 <main+0x1070>
 800651e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006526:	db03      	blt.n	8006530 <main+0xf6c>
 8006528:	4b33      	ldr	r3, [pc, #204]	@ (80065f8 <main+0x1034>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00d      	beq.n	800654c <main+0xf88>
 8006530:	4b3b      	ldr	r3, [pc, #236]	@ (8006620 <main+0x105c>)
 8006532:	edd3 7a00 	vldr	s15, [r3]
 8006536:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006634 <main+0x1070>
 800653a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800653e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006542:	d81e      	bhi.n	8006582 <main+0xfbe>
 8006544:	4b2c      	ldr	r3, [pc, #176]	@ (80065f8 <main+0x1034>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d11a      	bne.n	8006582 <main+0xfbe>
          {
            Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 800654c:	4b36      	ldr	r3, [pc, #216]	@ (8006628 <main+0x1064>)
 800654e:	9302      	str	r3, [sp, #8]
 8006550:	4b36      	ldr	r3, [pc, #216]	@ (800662c <main+0x1068>)
 8006552:	9301      	str	r3, [sp, #4]
 8006554:	f06f 031d 	mvn.w	r3, #29
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	2303      	movs	r3, #3
 800655c:	2202      	movs	r2, #2
 800655e:	2101      	movs	r1, #1
 8006560:	2000      	movs	r0, #0
 8006562:	f001 f9d3 	bl	800790c <Motor_Straight>
            // 使用右侧电机调整
            Adjust_Right_Motors_By_Distance(MOTOR_2, MOTOR_4, MOTOR_1, MOTOR_3, distances[3], 40.0f);
 8006566:	4b2e      	ldr	r3, [pc, #184]	@ (8006620 <main+0x105c>)
 8006568:	edd3 7a03 	vldr	s15, [r3, #12]
 800656c:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8006630 <main+0x106c>
 8006570:	eeb0 0a67 	vmov.f32	s0, s15
 8006574:	2302      	movs	r3, #2
 8006576:	2200      	movs	r2, #0
 8006578:	2103      	movs	r1, #3
 800657a:	2001      	movs	r0, #1
 800657c:	f002 fc5c 	bl	8008e38 <Adjust_Right_Motors_By_Distance>
 8006580:	e09a      	b.n	80066b8 <main+0x10f4>
          }else if (distances[0]<=150 /*&& mean[0]<=70*/ && path_change==0)
 8006582:	4b27      	ldr	r3, [pc, #156]	@ (8006620 <main+0x105c>)
 8006584:	edd3 7a00 	vldr	s15, [r3]
 8006588:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006634 <main+0x1070>
 800658c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006594:	d823      	bhi.n	80065de <main+0x101a>
 8006596:	4b18      	ldr	r3, [pc, #96]	@ (80065f8 <main+0x1034>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d11f      	bne.n	80065de <main+0x101a>
          {
            if(flag){
 800659e:	4b17      	ldr	r3, [pc, #92]	@ (80065fc <main+0x1038>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d007      	beq.n	80065b6 <main+0xff2>
              time_start = HAL_GetTick();
 80065a6:	f006 fc8f 	bl	800cec8 <HAL_GetTick>
 80065aa:	4603      	mov	r3, r0
 80065ac:	4a14      	ldr	r2, [pc, #80]	@ (8006600 <main+0x103c>)
 80065ae:	6013      	str	r3, [r2, #0]
              flag = false;
 80065b0:	4b12      	ldr	r3, [pc, #72]	@ (80065fc <main+0x1038>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	701a      	strb	r2, [r3, #0]
            }
            uint32_t time = HAL_GetTick();
 80065b6:	f006 fc87 	bl	800cec8 <HAL_GetTick>
 80065ba:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
            if(time - time_start >=100){
 80065be:	4b10      	ldr	r3, [pc, #64]	@ (8006600 <main+0x103c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b63      	cmp	r3, #99	@ 0x63
 80065ca:	d974      	bls.n	80066b6 <main+0x10f2>
              path_change+=1;
 80065cc:	4b0a      	ldr	r3, [pc, #40]	@ (80065f8 <main+0x1034>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3301      	adds	r3, #1
 80065d2:	4a09      	ldr	r2, [pc, #36]	@ (80065f8 <main+0x1034>)
 80065d4:	6013      	str	r3, [r2, #0]
              flag = true;
 80065d6:	4b09      	ldr	r3, [pc, #36]	@ (80065fc <main+0x1038>)
 80065d8:	2201      	movs	r2, #1
 80065da:	701a      	strb	r2, [r3, #0]
          {
 80065dc:	e06b      	b.n	80066b6 <main+0x10f2>
            }
          }else if (distances[0]>=150 && /* mean[0]>=70 && */ path_change==1)
 80065de:	4b10      	ldr	r3, [pc, #64]	@ (8006620 <main+0x105c>)
 80065e0:	edd3 7a00 	vldr	s15, [r3]
 80065e4:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8006634 <main+0x1070>
 80065e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f0:	da22      	bge.n	8006638 <main+0x1074>
          PID_Reset(&pid_rear);
          PID_Reset(&pid_front);
          PID_Reset(&pid_position);
        }
        
        break;
 80065f2:	f000 bd28 	b.w	8007046 <main+0x1a82>
 80065f6:	bf00      	nop
 80065f8:	20000424 	.word	0x20000424
 80065fc:	20000048 	.word	0x20000048
 8006600:	20000428 	.word	0x20000428
 8006604:	20000420 	.word	0x20000420
 8006608:	20000070 	.word	0x20000070
 800660c:	200000a0 	.word	0x200000a0
 8006610:	20000088 	.word	0x20000088
 8006614:	200000b8 	.word	0x200000b8
 8006618:	42b40000 	.word	0x42b40000
 800661c:	44480000 	.word	0x44480000
 8006620:	20000038 	.word	0x20000038
 8006624:	2000058b 	.word	0x2000058b
 8006628:	20000590 	.word	0x20000590
 800662c:	20000594 	.word	0x20000594
 8006630:	42200000 	.word	0x42200000
 8006634:	43160000 	.word	0x43160000
          }else if (distances[0]>=150 && /* mean[0]>=70 && */ path_change==1)
 8006638:	4bbc      	ldr	r3, [pc, #752]	@ (800692c <main+0x1368>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b01      	cmp	r3, #1
 800663e:	f040 8502 	bne.w	8007046 <main+0x1a82>
            if(flag){
 8006642:	4bbb      	ldr	r3, [pc, #748]	@ (8006930 <main+0x136c>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <main+0x1096>
              time_start = HAL_GetTick();
 800664a:	f006 fc3d 	bl	800cec8 <HAL_GetTick>
 800664e:	4603      	mov	r3, r0
 8006650:	4ab8      	ldr	r2, [pc, #736]	@ (8006934 <main+0x1370>)
 8006652:	6013      	str	r3, [r2, #0]
              flag = false;
 8006654:	4bb6      	ldr	r3, [pc, #728]	@ (8006930 <main+0x136c>)
 8006656:	2200      	movs	r2, #0
 8006658:	701a      	strb	r2, [r3, #0]
            uint32_t time = HAL_GetTick();
 800665a:	f006 fc35 	bl	800cec8 <HAL_GetTick>
 800665e:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
            if(time - time_start >= DELAY_ENTER ){
 8006662:	4bb4      	ldr	r3, [pc, #720]	@ (8006934 <main+0x1370>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006670:	429a      	cmp	r2, r3
 8006672:	f200 84e8 	bhi.w	8007046 <main+0x1a82>
              path_change+=1;
 8006676:	4bad      	ldr	r3, [pc, #692]	@ (800692c <main+0x1368>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3301      	adds	r3, #1
 800667c:	4aab      	ldr	r2, [pc, #684]	@ (800692c <main+0x1368>)
 800667e:	6013      	str	r3, [r2, #0]
              flag = true;
 8006680:	4bab      	ldr	r3, [pc, #684]	@ (8006930 <main+0x136c>)
 8006682:	2201      	movs	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
        break;
 8006686:	f000 bcde 	b.w	8007046 <main+0x1a82>
          path_change = 0;
 800668a:	4ba8      	ldr	r3, [pc, #672]	@ (800692c <main+0x1368>)
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]
          path +=1;
 8006690:	4ba9      	ldr	r3, [pc, #676]	@ (8006938 <main+0x1374>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3301      	adds	r3, #1
 8006696:	4aa8      	ldr	r2, [pc, #672]	@ (8006938 <main+0x1374>)
 8006698:	6013      	str	r3, [r2, #0]
          PID_Reset(&pid_yaw);        
 800669a:	48a8      	ldr	r0, [pc, #672]	@ (800693c <main+0x1378>)
 800669c:	f004 fd4e 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_rear);
 80066a0:	48a7      	ldr	r0, [pc, #668]	@ (8006940 <main+0x137c>)
 80066a2:	f004 fd4b 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_front);
 80066a6:	48a7      	ldr	r0, [pc, #668]	@ (8006944 <main+0x1380>)
 80066a8:	f004 fd48 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_position);
 80066ac:	48a6      	ldr	r0, [pc, #664]	@ (8006948 <main+0x1384>)
 80066ae:	f004 fd45 	bl	800b13c <PID_Reset>
        break;
 80066b2:	f000 bcc8 	b.w	8007046 <main+0x1a82>
          {
 80066b6:	bf00      	nop
        break;
 80066b8:	f000 bcc5 	b.w	8007046 <main+0x1a82>
      }

      case 7: {
        // 参数定义
        const float TARGET_DISTANCE = 90.0f;   // 调试，这个变量用于检测最终的目标距离
 80066bc:	4ba3      	ldr	r3, [pc, #652]	@ (800694c <main+0x1388>)
 80066be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        const float DECEL_RANGE = 800.0f;      // 调试，这个变量用于设置减速区间范围
 80066c2:	4ba3      	ldr	r3, [pc, #652]	@ (8006950 <main+0x138c>)
 80066c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        const uint8_t MIN_SPEED = 20;          // 调试，这个变量用于设置接近目标时的速度最小速度（靠近时）
 80066c8:	2314      	movs	r3, #20
 80066ca:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
        const uint8_t MAX_SPEED = 60;          // 调试，这个变量用于设置离目标较远时的速度
 80066ce:	233c      	movs	r3, #60	@ 0x3c
 80066d0:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
    
        // 获取当前检测距离（使用第4个传感器）
        float current_distance = distances[0]; 
 80066d4:	4b9f      	ldr	r3, [pc, #636]	@ (8006954 <main+0x1390>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    
        // 速度计算逻辑
        uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 80066dc:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80066e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
        if (current_distance <= TARGET_DISTANCE) {
 80066e4:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 80066e8:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80066ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f4:	d814      	bhi.n	8006720 <main+0x115c>
            // 区域3：到达目标距离（≤70mm）
            motor_speed = MIN_SPEED;
 80066f6:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80066fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
            // 执行路径切换逻辑
            if(current_distance<=TARGET_DISTANCE) {
 80066fe:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 8006702:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8006706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800670a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800670e:	d854      	bhi.n	80067ba <main+0x11f6>
              path += 1;
 8006710:	4b89      	ldr	r3, [pc, #548]	@ (8006938 <main+0x1374>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3301      	adds	r3, #1
 8006716:	4a88      	ldr	r2, [pc, #544]	@ (8006938 <main+0x1374>)
 8006718:	6013      	str	r3, [r2, #0]
              PID_ResetAll(); // 重置所有PID控制器
 800671a:	f7fe ff3b 	bl	8005594 <PID_ResetAll>
 800671e:	e04c      	b.n	80067ba <main+0x11f6>
            }
        } 
        else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8006720:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8006724:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8006728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800672c:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 8006730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006738:	d83b      	bhi.n	80067b2 <main+0x11ee>
            // 区域2：减速区间（70~170mm）
            float distance_from_target = current_distance - TARGET_DISTANCE;
 800673a:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 800673e:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8006742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006746:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            float ratio = (distance_from_target / DECEL_RANGE);
 800674a:	edd7 6a29 	vldr	s13, [r7, #164]	@ 0xa4
 800674e:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8006752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006756:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 800675a:	f897 20ae 	ldrb.w	r2, [r7, #174]	@ 0xae
 800675e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	ee07 3a90 	vmov	s15, r3
 8006768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800676c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8006770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006778:	edc7 7a01 	vstr	s15, [r7, #4]
 800677c:	793b      	ldrb	r3, [r7, #4]
 800677e:	b2da      	uxtb	r2, r3
 8006780:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8006784:	4413      	add	r3, r2
 8006786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 800678a:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 800678e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8006792:	429a      	cmp	r2, r3
 8006794:	d308      	bcc.n	80067a8 <main+0x11e4>
 8006796:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 800679a:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800679e:	4293      	cmp	r3, r2
 80067a0:	bf28      	it	cs
 80067a2:	4613      	movcs	r3, r2
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	e001      	b.n	80067ac <main+0x11e8>
 80067a8:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80067ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 80067b0:	e003      	b.n	80067ba <main+0x11f6>
        }
        else {
            // 区域1：全速区间（>170mm）
            motor_speed = MAX_SPEED;
 80067b2:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80067b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        }
    
        // 执行带平滑过渡的电机控制
        static uint8_t last_speed = 0;
        motor_speed = smooth_speed_transition(last_speed, motor_speed);
 80067ba:	4b67      	ldr	r3, [pc, #412]	@ (8006958 <main+0x1394>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 80067c2:	4611      	mov	r1, r2
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe fe97 	bl	80054f8 <smooth_speed_transition>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        last_speed = motor_speed;
 80067d0:	4a61      	ldr	r2, [pc, #388]	@ (8006958 <main+0x1394>)
 80067d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d6:	7013      	strb	r3, [r2, #0]
    
        Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -motor_speed, &yaw, &target_yaw);
 80067d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067dc:	b29b      	uxth	r3, r3
 80067de:	425b      	negs	r3, r3
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	b21b      	sxth	r3, r3
 80067e4:	4a5d      	ldr	r2, [pc, #372]	@ (800695c <main+0x1398>)
 80067e6:	9202      	str	r2, [sp, #8]
 80067e8:	4a5d      	ldr	r2, [pc, #372]	@ (8006960 <main+0x139c>)
 80067ea:	9201      	str	r2, [sp, #4]
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	2303      	movs	r3, #3
 80067f0:	2202      	movs	r2, #2
 80067f2:	2101      	movs	r1, #1
 80067f4:	2000      	movs	r0, #0
 80067f6:	f000 fe7d 	bl	80074f4 <Motor_Rightward>
        
        // 使用前后电机调整
        float avg_distance = (distances[1] + distances[2]) / 2.0f;
 80067fa:	4b56      	ldr	r3, [pc, #344]	@ (8006954 <main+0x1390>)
 80067fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8006800:	4b54      	ldr	r3, [pc, #336]	@ (8006954 <main+0x1390>)
 8006802:	edd3 7a02 	vldr	s15, [r3, #8]
 8006806:	ee37 7a27 	vadd.f32	s14, s14, s15
 800680a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800680e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006812:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
        Adjust_Motors_By_FrontBack_Distance(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, avg_distance, 40.0f);
 8006816:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8006964 <main+0x13a0>
 800681a:	ed97 0a27 	vldr	s0, [r7, #156]	@ 0x9c
 800681e:	2302      	movs	r3, #2
 8006820:	2201      	movs	r2, #1
 8006822:	2103      	movs	r1, #3
 8006824:	2000      	movs	r0, #0
 8006826:	f003 fb8b 	bl	8009f40 <Adjust_Motors_By_FrontBack_Distance>
    
        OLED_ShowNum(4, 4, motor_speed, 2);
 800682a:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 800682e:	2302      	movs	r3, #2
 8006830:	2104      	movs	r1, #4
 8006832:	2004      	movs	r0, #4
 8006834:	f7fe faba 	bl	8004dac <OLED_ShowNum>
        break;
 8006838:	f000 bc11 	b.w	800705e <main+0x1a9a>
      }

      case 8: {
        const uint32_t DELAY_ENTER = 200; //调试
 800683c:	23c8      	movs	r3, #200	@ 0xc8
 800683e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (path_change!=2)
 8006842:	4b3a      	ldr	r3, [pc, #232]	@ (800692c <main+0x1368>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b02      	cmp	r3, #2
 8006848:	f000 80b8 	beq.w	80069bc <main+0x13f8>
        {
          if ((distances[3]>=150 && /* mean[3]>=70 && */ path_change==0)||(distances[3]<=150 && /* mean[3]<=70 && */ path_change==1))
 800684c:	4b41      	ldr	r3, [pc, #260]	@ (8006954 <main+0x1390>)
 800684e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006852:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8006968 <main+0x13a4>
 8006856:	eef4 7ac7 	vcmpe.f32	s15, s14
 800685a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800685e:	db03      	blt.n	8006868 <main+0x12a4>
 8006860:	4b32      	ldr	r3, [pc, #200]	@ (800692c <main+0x1368>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00d      	beq.n	8006884 <main+0x12c0>
 8006868:	4b3a      	ldr	r3, [pc, #232]	@ (8006954 <main+0x1390>)
 800686a:	edd3 7a03 	vldr	s15, [r3, #12]
 800686e:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8006968 <main+0x13a4>
 8006872:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687a:	d81e      	bhi.n	80068ba <main+0x12f6>
 800687c:	4b2b      	ldr	r3, [pc, #172]	@ (800692c <main+0x1368>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d11a      	bne.n	80068ba <main+0x12f6>
          {
            Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8006884:	4b35      	ldr	r3, [pc, #212]	@ (800695c <main+0x1398>)
 8006886:	9302      	str	r3, [sp, #8]
 8006888:	4b35      	ldr	r3, [pc, #212]	@ (8006960 <main+0x139c>)
 800688a:	9301      	str	r3, [sp, #4]
 800688c:	f06f 031d 	mvn.w	r3, #29
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	2303      	movs	r3, #3
 8006894:	2202      	movs	r2, #2
 8006896:	2101      	movs	r1, #1
 8006898:	2000      	movs	r0, #0
 800689a:	f001 f837 	bl	800790c <Motor_Straight>
            // 使用左侧电机调整
            Adjust_Left_Motors_By_Distance(MOTOR_1, MOTOR_3, MOTOR_2, MOTOR_4, distances[0], 40.0f);
 800689e:	4b2d      	ldr	r3, [pc, #180]	@ (8006954 <main+0x1390>)
 80068a0:	edd3 7a00 	vldr	s15, [r3]
 80068a4:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8006964 <main+0x13a0>
 80068a8:	eeb0 0a67 	vmov.f32	s0, s15
 80068ac:	2303      	movs	r3, #3
 80068ae:	2201      	movs	r2, #1
 80068b0:	2102      	movs	r1, #2
 80068b2:	2000      	movs	r0, #0
 80068b4:	f001 fa3c 	bl	8007d30 <Adjust_Left_Motors_By_Distance>
 80068b8:	e096      	b.n	80069e8 <main+0x1424>
          }else if (distances[3]<=150 && /* mean[3]<=70 && */ path_change==0)
 80068ba:	4b26      	ldr	r3, [pc, #152]	@ (8006954 <main+0x1390>)
 80068bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80068c0:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8006968 <main+0x13a4>
 80068c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068cc:	d823      	bhi.n	8006916 <main+0x1352>
 80068ce:	4b17      	ldr	r3, [pc, #92]	@ (800692c <main+0x1368>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d11f      	bne.n	8006916 <main+0x1352>
          {
            if(flag){
 80068d6:	4b16      	ldr	r3, [pc, #88]	@ (8006930 <main+0x136c>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d007      	beq.n	80068ee <main+0x132a>
              time_start = HAL_GetTick();
 80068de:	f006 faf3 	bl	800cec8 <HAL_GetTick>
 80068e2:	4603      	mov	r3, r0
 80068e4:	4a13      	ldr	r2, [pc, #76]	@ (8006934 <main+0x1370>)
 80068e6:	6013      	str	r3, [r2, #0]
              flag = false;
 80068e8:	4b11      	ldr	r3, [pc, #68]	@ (8006930 <main+0x136c>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	701a      	strb	r2, [r3, #0]
            }
            uint32_t time = HAL_GetTick();
 80068ee:	f006 faeb 	bl	800cec8 <HAL_GetTick>
 80068f2:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if(time - time_start >=100){
 80068f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006934 <main+0x1370>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b63      	cmp	r3, #99	@ 0x63
 8006902:	d970      	bls.n	80069e6 <main+0x1422>
              path_change+=1;
 8006904:	4b09      	ldr	r3, [pc, #36]	@ (800692c <main+0x1368>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3301      	adds	r3, #1
 800690a:	4a08      	ldr	r2, [pc, #32]	@ (800692c <main+0x1368>)
 800690c:	6013      	str	r3, [r2, #0]
              flag = true;
 800690e:	4b08      	ldr	r3, [pc, #32]	@ (8006930 <main+0x136c>)
 8006910:	2201      	movs	r2, #1
 8006912:	701a      	strb	r2, [r3, #0]
          {
 8006914:	e067      	b.n	80069e6 <main+0x1422>
            }
          }else if (distances[3]>=150 && /* mean[3]>=70 && */ path_change==1)
 8006916:	4b0f      	ldr	r3, [pc, #60]	@ (8006954 <main+0x1390>)
 8006918:	edd3 7a03 	vldr	s15, [r3, #12]
 800691c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8006968 <main+0x13a4>
 8006920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006928:	da20      	bge.n	800696c <main+0x13a8>
          PID_Reset(&pid_rear);
          PID_Reset(&pid_front);
          PID_Reset(&pid_position);
        }
        
        break;
 800692a:	e38f      	b.n	800704c <main+0x1a88>
 800692c:	20000424 	.word	0x20000424
 8006930:	20000048 	.word	0x20000048
 8006934:	20000428 	.word	0x20000428
 8006938:	20000420 	.word	0x20000420
 800693c:	20000070 	.word	0x20000070
 8006940:	200000a0 	.word	0x200000a0
 8006944:	20000088 	.word	0x20000088
 8006948:	200000b8 	.word	0x200000b8
 800694c:	42b40000 	.word	0x42b40000
 8006950:	44480000 	.word	0x44480000
 8006954:	20000038 	.word	0x20000038
 8006958:	2000058c 	.word	0x2000058c
 800695c:	20000590 	.word	0x20000590
 8006960:	20000594 	.word	0x20000594
 8006964:	42200000 	.word	0x42200000
 8006968:	43160000 	.word	0x43160000
          }else if (distances[3]>=150 && /* mean[3]>=70 && */ path_change==1)
 800696c:	4bb9      	ldr	r3, [pc, #740]	@ (8006c54 <main+0x1690>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b01      	cmp	r3, #1
 8006972:	f040 836b 	bne.w	800704c <main+0x1a88>
            if(flag){
 8006976:	4bb8      	ldr	r3, [pc, #736]	@ (8006c58 <main+0x1694>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d007      	beq.n	800698e <main+0x13ca>
              time_start = HAL_GetTick();
 800697e:	f006 faa3 	bl	800cec8 <HAL_GetTick>
 8006982:	4603      	mov	r3, r0
 8006984:	4ab5      	ldr	r2, [pc, #724]	@ (8006c5c <main+0x1698>)
 8006986:	6013      	str	r3, [r2, #0]
              flag = false;
 8006988:	4bb3      	ldr	r3, [pc, #716]	@ (8006c58 <main+0x1694>)
 800698a:	2200      	movs	r2, #0
 800698c:	701a      	strb	r2, [r3, #0]
            uint32_t time = HAL_GetTick();
 800698e:	f006 fa9b 	bl	800cec8 <HAL_GetTick>
 8006992:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
            if(time - time_start >= DELAY_ENTER ){
 8006996:	4bb1      	ldr	r3, [pc, #708]	@ (8006c5c <main+0x1698>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80069a4:	429a      	cmp	r2, r3
 80069a6:	f200 8351 	bhi.w	800704c <main+0x1a88>
              path_change+=1;
 80069aa:	4baa      	ldr	r3, [pc, #680]	@ (8006c54 <main+0x1690>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3301      	adds	r3, #1
 80069b0:	4aa8      	ldr	r2, [pc, #672]	@ (8006c54 <main+0x1690>)
 80069b2:	6013      	str	r3, [r2, #0]
              flag = true;
 80069b4:	4ba8      	ldr	r3, [pc, #672]	@ (8006c58 <main+0x1694>)
 80069b6:	2201      	movs	r2, #1
 80069b8:	701a      	strb	r2, [r3, #0]
        break;
 80069ba:	e347      	b.n	800704c <main+0x1a88>
          path_change = 0;
 80069bc:	4ba5      	ldr	r3, [pc, #660]	@ (8006c54 <main+0x1690>)
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
          path +=1;
 80069c2:	4ba7      	ldr	r3, [pc, #668]	@ (8006c60 <main+0x169c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3301      	adds	r3, #1
 80069c8:	4aa5      	ldr	r2, [pc, #660]	@ (8006c60 <main+0x169c>)
 80069ca:	6013      	str	r3, [r2, #0]
          PID_Reset(&pid_yaw);        
 80069cc:	48a5      	ldr	r0, [pc, #660]	@ (8006c64 <main+0x16a0>)
 80069ce:	f004 fbb5 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_rear);
 80069d2:	48a5      	ldr	r0, [pc, #660]	@ (8006c68 <main+0x16a4>)
 80069d4:	f004 fbb2 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_front);
 80069d8:	48a4      	ldr	r0, [pc, #656]	@ (8006c6c <main+0x16a8>)
 80069da:	f004 fbaf 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_position);
 80069de:	48a4      	ldr	r0, [pc, #656]	@ (8006c70 <main+0x16ac>)
 80069e0:	f004 fbac 	bl	800b13c <PID_Reset>
        break;
 80069e4:	e332      	b.n	800704c <main+0x1a88>
          {
 80069e6:	bf00      	nop
        break;
 80069e8:	e330      	b.n	800704c <main+0x1a88>
      }

      case 9: {
        // 参数定义
        const float TARGET_DISTANCE = 90.0f;   // 调试，这个变量用于检测最终的目标距离
 80069ea:	4ba2      	ldr	r3, [pc, #648]	@ (8006c74 <main+0x16b0>)
 80069ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        const float DECEL_RANGE = 800.0f;      // 调试，这个变量用于设置减速区间范围
 80069f0:	4ba1      	ldr	r3, [pc, #644]	@ (8006c78 <main+0x16b4>)
 80069f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        const uint8_t MIN_SPEED = 20;          // 调试，这个变量用于设置接近目标时的速度最小速度（靠近时）
 80069f6:	2314      	movs	r3, #20
 80069f8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
        const uint8_t MAX_SPEED = 60;          // 调试，这个变量用于设置离目标较远时的速度
 80069fc:	233c      	movs	r3, #60	@ 0x3c
 80069fe:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6
    
        // 获取当前检测距离（使用第4个传感器）
        float current_distance = distances[3]; 
 8006a02:	4b9e      	ldr	r3, [pc, #632]	@ (8006c7c <main+0x16b8>)
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    
        // 速度计算逻辑
        uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 8006a0a:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8006a0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    
        if (current_distance <= TARGET_DISTANCE) {
 8006a12:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 8006a16:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8006a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a22:	d814      	bhi.n	8006a4e <main+0x148a>
            // 区域3：到达目标距离（≤70mm）
            motor_speed = MIN_SPEED;
 8006a24:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8006a28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    
            // 执行路径切换逻辑
            if(current_distance<=TARGET_DISTANCE) {
 8006a2c:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 8006a30:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8006a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a3c:	d854      	bhi.n	8006ae8 <main+0x1524>
              path += 1;
 8006a3e:	4b88      	ldr	r3, [pc, #544]	@ (8006c60 <main+0x169c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3301      	adds	r3, #1
 8006a44:	4a86      	ldr	r2, [pc, #536]	@ (8006c60 <main+0x169c>)
 8006a46:	6013      	str	r3, [r2, #0]
              PID_ResetAll(); // 重置所有PID控制器
 8006a48:	f7fe fda4 	bl	8005594 <PID_ResetAll>
 8006a4c:	e04c      	b.n	8006ae8 <main+0x1524>
            }
        } 
        else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8006a4e:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8006a52:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8006a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a5a:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 8006a5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a66:	d83b      	bhi.n	8006ae0 <main+0x151c>
            // 区域2：减速区间（70~170mm）
            float distance_from_target = current_distance - TARGET_DISTANCE;
 8006a68:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 8006a6c:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8006a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a74:	edc7 7a33 	vstr	s15, [r7, #204]	@ 0xcc
            float ratio = (distance_from_target / DECEL_RANGE);
 8006a78:	edd7 6a33 	vldr	s13, [r7, #204]	@ 0xcc
 8006a7c:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8006a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a84:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8
            motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 8006a88:	f897 20d6 	ldrb.w	r2, [r7, #214]	@ 0xd6
 8006a8c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a9a:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8006a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aa6:	edc7 7a01 	vstr	s15, [r7, #4]
 8006aaa:	793b      	ldrb	r3, [r7, #4]
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
            motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8006ab8:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8006abc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d308      	bcc.n	8006ad6 <main+0x1512>
 8006ac4:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8006ac8:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8006acc:	4293      	cmp	r3, r2
 8006ace:	bf28      	it	cs
 8006ad0:	4613      	movcs	r3, r2
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	e001      	b.n	8006ada <main+0x1516>
 8006ad6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8006ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006ade:	e003      	b.n	8006ae8 <main+0x1524>
        }
        else {
            // 区域1：全速区间（>170mm）
            motor_speed = MAX_SPEED;
 8006ae0:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8006ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
        }
    
        // 执行带平滑过渡的电机控制
        static uint8_t last_speed = 0;
        motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8006ae8:	4b65      	ldr	r3, [pc, #404]	@ (8006c80 <main+0x16bc>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8006af0:	4611      	mov	r1, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe fd00 	bl	80054f8 <smooth_speed_transition>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
        last_speed = motor_speed;
 8006afe:	4a60      	ldr	r2, [pc, #384]	@ (8006c80 <main+0x16bc>)
 8006b00:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006b04:	7013      	strb	r3, [r2, #0]
    
        Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8006b06:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006b0a:	b21b      	sxth	r3, r3
 8006b0c:	4a5d      	ldr	r2, [pc, #372]	@ (8006c84 <main+0x16c0>)
 8006b0e:	9202      	str	r2, [sp, #8]
 8006b10:	4a5d      	ldr	r2, [pc, #372]	@ (8006c88 <main+0x16c4>)
 8006b12:	9201      	str	r2, [sp, #4]
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	2303      	movs	r3, #3
 8006b18:	2202      	movs	r2, #2
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	f000 fce9 	bl	80074f4 <Motor_Rightward>
        
        // 使用前后电机调整
        float avg_distance = (distances[1] + distances[2]) / 2.0f;
 8006b22:	4b56      	ldr	r3, [pc, #344]	@ (8006c7c <main+0x16b8>)
 8006b24:	ed93 7a01 	vldr	s14, [r3, #4]
 8006b28:	4b54      	ldr	r3, [pc, #336]	@ (8006c7c <main+0x16b8>)
 8006b2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8006b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b32:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006b36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b3a:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
        Adjust_Motors_By_FrontBack_Distance(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, avg_distance, 40.0f);
 8006b3e:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8006c8c <main+0x16c8>
 8006b42:	ed97 0a31 	vldr	s0, [r7, #196]	@ 0xc4
 8006b46:	2302      	movs	r3, #2
 8006b48:	2201      	movs	r2, #1
 8006b4a:	2103      	movs	r1, #3
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	f003 f9f7 	bl	8009f40 <Adjust_Motors_By_FrontBack_Distance>
    
        OLED_ShowNum(4, 4, motor_speed, 2);
 8006b52:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8006b56:	2302      	movs	r3, #2
 8006b58:	2104      	movs	r1, #4
 8006b5a:	2004      	movs	r0, #4
 8006b5c:	f7fe f926 	bl	8004dac <OLED_ShowNum>
        break;
 8006b60:	e27d      	b.n	800705e <main+0x1a9a>
      }

      case 10: {
        const uint32_t DELAY_ENTER = 200; //调试
 8006b62:	23c8      	movs	r3, #200	@ 0xc8
 8006b64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

        if (path_change!=2)
 8006b68:	4b3a      	ldr	r3, [pc, #232]	@ (8006c54 <main+0x1690>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	f000 80b9 	beq.w	8006ce4 <main+0x1720>
        {
          if ((distances[0]>=150 && /* mean[0]>=70 && */ path_change==0)||(distances[0]<=150 && /* mean[0]<=70 && */ path_change==1))
 8006b72:	4b42      	ldr	r3, [pc, #264]	@ (8006c7c <main+0x16b8>)
 8006b74:	edd3 7a00 	vldr	s15, [r3]
 8006b78:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8006c90 <main+0x16cc>
 8006b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b84:	db03      	blt.n	8006b8e <main+0x15ca>
 8006b86:	4b33      	ldr	r3, [pc, #204]	@ (8006c54 <main+0x1690>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00d      	beq.n	8006baa <main+0x15e6>
 8006b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8006c7c <main+0x16b8>)
 8006b90:	edd3 7a00 	vldr	s15, [r3]
 8006b94:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8006c90 <main+0x16cc>
 8006b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba0:	d81e      	bhi.n	8006be0 <main+0x161c>
 8006ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8006c54 <main+0x1690>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d11a      	bne.n	8006be0 <main+0x161c>
          {
            Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8006baa:	4b36      	ldr	r3, [pc, #216]	@ (8006c84 <main+0x16c0>)
 8006bac:	9302      	str	r3, [sp, #8]
 8006bae:	4b36      	ldr	r3, [pc, #216]	@ (8006c88 <main+0x16c4>)
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	f06f 031d 	mvn.w	r3, #29
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	2303      	movs	r3, #3
 8006bba:	2202      	movs	r2, #2
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	f000 fea4 	bl	800790c <Motor_Straight>
            // 使用右侧电机调整
            Adjust_Right_Motors_By_Distance(MOTOR_2, MOTOR_4, MOTOR_1, MOTOR_3, distances[3], 40.0f);
 8006bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8006c7c <main+0x16b8>)
 8006bc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8006bca:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8006c8c <main+0x16c8>
 8006bce:	eeb0 0a67 	vmov.f32	s0, s15
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2103      	movs	r1, #3
 8006bd8:	2001      	movs	r0, #1
 8006bda:	f002 f92d 	bl	8008e38 <Adjust_Right_Motors_By_Distance>
 8006bde:	e097      	b.n	8006d10 <main+0x174c>
          }else if (distances[0]<=150 && /* mean[0]<=70 && */ path_change==0)
 8006be0:	4b26      	ldr	r3, [pc, #152]	@ (8006c7c <main+0x16b8>)
 8006be2:	edd3 7a00 	vldr	s15, [r3]
 8006be6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006c90 <main+0x16cc>
 8006bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf2:	d823      	bhi.n	8006c3c <main+0x1678>
 8006bf4:	4b17      	ldr	r3, [pc, #92]	@ (8006c54 <main+0x1690>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d11f      	bne.n	8006c3c <main+0x1678>
          {
            if(flag){
 8006bfc:	4b16      	ldr	r3, [pc, #88]	@ (8006c58 <main+0x1694>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <main+0x1650>
              time_start = HAL_GetTick();
 8006c04:	f006 f960 	bl	800cec8 <HAL_GetTick>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	4a14      	ldr	r2, [pc, #80]	@ (8006c5c <main+0x1698>)
 8006c0c:	6013      	str	r3, [r2, #0]
              flag = false;
 8006c0e:	4b12      	ldr	r3, [pc, #72]	@ (8006c58 <main+0x1694>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	701a      	strb	r2, [r3, #0]
            }
            uint32_t time = HAL_GetTick();
 8006c14:	f006 f958 	bl	800cec8 <HAL_GetTick>
 8006c18:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
            if(time - time_start >=100){
 8006c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c5c <main+0x1698>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b63      	cmp	r3, #99	@ 0x63
 8006c28:	d971      	bls.n	8006d0e <main+0x174a>
              path_change+=1;
 8006c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c54 <main+0x1690>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	4a08      	ldr	r2, [pc, #32]	@ (8006c54 <main+0x1690>)
 8006c32:	6013      	str	r3, [r2, #0]
              flag = true;
 8006c34:	4b08      	ldr	r3, [pc, #32]	@ (8006c58 <main+0x1694>)
 8006c36:	2201      	movs	r2, #1
 8006c38:	701a      	strb	r2, [r3, #0]
          {
 8006c3a:	e068      	b.n	8006d0e <main+0x174a>
            }
          }else if (distances[0]>=150 && /* mean[0]>=70 && */ path_change==1)
 8006c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c7c <main+0x16b8>)
 8006c3e:	edd3 7a00 	vldr	s15, [r3]
 8006c42:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8006c90 <main+0x16cc>
 8006c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4e:	da21      	bge.n	8006c94 <main+0x16d0>
          PID_Reset(&pid_rear);
          PID_Reset(&pid_front);
          PID_Reset(&pid_position);
        }
        
        break;
 8006c50:	e1ff      	b.n	8007052 <main+0x1a8e>
 8006c52:	bf00      	nop
 8006c54:	20000424 	.word	0x20000424
 8006c58:	20000048 	.word	0x20000048
 8006c5c:	20000428 	.word	0x20000428
 8006c60:	20000420 	.word	0x20000420
 8006c64:	20000070 	.word	0x20000070
 8006c68:	200000a0 	.word	0x200000a0
 8006c6c:	20000088 	.word	0x20000088
 8006c70:	200000b8 	.word	0x200000b8
 8006c74:	42b40000 	.word	0x42b40000
 8006c78:	44480000 	.word	0x44480000
 8006c7c:	20000038 	.word	0x20000038
 8006c80:	2000058d 	.word	0x2000058d
 8006c84:	20000590 	.word	0x20000590
 8006c88:	20000594 	.word	0x20000594
 8006c8c:	42200000 	.word	0x42200000
 8006c90:	43160000 	.word	0x43160000
          }else if (distances[0]>=150 && /* mean[0]>=70 && */ path_change==1)
 8006c94:	4bba      	ldr	r3, [pc, #744]	@ (8006f80 <main+0x19bc>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	f040 81da 	bne.w	8007052 <main+0x1a8e>
            if(flag){
 8006c9e:	4bb9      	ldr	r3, [pc, #740]	@ (8006f84 <main+0x19c0>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <main+0x16f2>
              time_start = HAL_GetTick();
 8006ca6:	f006 f90f 	bl	800cec8 <HAL_GetTick>
 8006caa:	4603      	mov	r3, r0
 8006cac:	4ab6      	ldr	r2, [pc, #728]	@ (8006f88 <main+0x19c4>)
 8006cae:	6013      	str	r3, [r2, #0]
              flag = false;
 8006cb0:	4bb4      	ldr	r3, [pc, #720]	@ (8006f84 <main+0x19c0>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	701a      	strb	r2, [r3, #0]
            uint32_t time = HAL_GetTick();
 8006cb6:	f006 f907 	bl	800cec8 <HAL_GetTick>
 8006cba:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
            if(time - time_start >= DELAY_ENTER){
 8006cbe:	4bb2      	ldr	r3, [pc, #712]	@ (8006f88 <main+0x19c4>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	f200 81c0 	bhi.w	8007052 <main+0x1a8e>
              path_change+=1;
 8006cd2:	4bab      	ldr	r3, [pc, #684]	@ (8006f80 <main+0x19bc>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	4aa9      	ldr	r2, [pc, #676]	@ (8006f80 <main+0x19bc>)
 8006cda:	6013      	str	r3, [r2, #0]
              flag = true;
 8006cdc:	4ba9      	ldr	r3, [pc, #676]	@ (8006f84 <main+0x19c0>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	701a      	strb	r2, [r3, #0]
        break;
 8006ce2:	e1b6      	b.n	8007052 <main+0x1a8e>
          path_change = 0;
 8006ce4:	4ba6      	ldr	r3, [pc, #664]	@ (8006f80 <main+0x19bc>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
          path +=1;
 8006cea:	4ba8      	ldr	r3, [pc, #672]	@ (8006f8c <main+0x19c8>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	4aa6      	ldr	r2, [pc, #664]	@ (8006f8c <main+0x19c8>)
 8006cf2:	6013      	str	r3, [r2, #0]
          PID_Reset(&pid_yaw);        
 8006cf4:	48a6      	ldr	r0, [pc, #664]	@ (8006f90 <main+0x19cc>)
 8006cf6:	f004 fa21 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_rear);
 8006cfa:	48a6      	ldr	r0, [pc, #664]	@ (8006f94 <main+0x19d0>)
 8006cfc:	f004 fa1e 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_front);
 8006d00:	48a5      	ldr	r0, [pc, #660]	@ (8006f98 <main+0x19d4>)
 8006d02:	f004 fa1b 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_position);
 8006d06:	48a5      	ldr	r0, [pc, #660]	@ (8006f9c <main+0x19d8>)
 8006d08:	f004 fa18 	bl	800b13c <PID_Reset>
        break;
 8006d0c:	e1a1      	b.n	8007052 <main+0x1a8e>
          {
 8006d0e:	bf00      	nop
        break;
 8006d10:	e19f      	b.n	8007052 <main+0x1a8e>
      }

      case 11: {
        // 参数定义
        const float TARGET_DISTANCE = 90.0f;   // 调试，这个变量用于检测最终的目标距离
 8006d12:	4ba3      	ldr	r3, [pc, #652]	@ (8006fa0 <main+0x19dc>)
 8006d14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        const float DECEL_RANGE = 800.0f;      // 调试，这个变量用于设置减速区间范围
 8006d18:	4ba2      	ldr	r3, [pc, #648]	@ (8006fa4 <main+0x19e0>)
 8006d1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        const uint8_t MIN_SPEED = 20;          // 调试，这个变量用于设置接近目标时的速度最小速度（靠近时）
 8006d1e:	2314      	movs	r3, #20
 8006d20:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
        const uint8_t MAX_SPEED = 60;          // 调试，这个变量用于设置离目标较远时的速度
 8006d24:	233c      	movs	r3, #60	@ 0x3c
 8006d26:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
    
        // 获取当前检测距离（使用第4个传感器）
        float current_distance = distances[0]; 
 8006d2a:	4b9f      	ldr	r3, [pc, #636]	@ (8006fa8 <main+0x19e4>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    
        // 速度计算逻辑
        uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 8006d32:	f897 30fe 	ldrb.w	r3, [r7, #254]	@ 0xfe
 8006d36:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
    
        if (current_distance <= TARGET_DISTANCE) {
 8006d3a:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8006d3e:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8006d42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d4a:	d814      	bhi.n	8006d76 <main+0x17b2>
            // 区域3：到达目标距离（≤70mm）
            motor_speed = MIN_SPEED;
 8006d4c:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8006d50:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
    
            // 执行路径切换逻辑
            if(current_distance<=TARGET_DISTANCE) {
 8006d54:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8006d58:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8006d5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d64:	d854      	bhi.n	8006e10 <main+0x184c>
              path += 1;
 8006d66:	4b89      	ldr	r3, [pc, #548]	@ (8006f8c <main+0x19c8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	4a87      	ldr	r2, [pc, #540]	@ (8006f8c <main+0x19c8>)
 8006d6e:	6013      	str	r3, [r2, #0]
              PID_ResetAll(); // 重置所有PID控制器
 8006d70:	f7fe fc10 	bl	8005594 <PID_ResetAll>
 8006d74:	e04c      	b.n	8006e10 <main+0x184c>
            }
        } 
        else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8006d76:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8006d7a:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8006d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d82:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8006d86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d8e:	d83b      	bhi.n	8006e08 <main+0x1844>
            // 区域2：减速区间（70~170mm）
            float distance_from_target = current_distance - TARGET_DISTANCE;
 8006d90:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8006d94:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8006d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d9c:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
            float ratio = (distance_from_target / DECEL_RANGE);
 8006da0:	edd7 6a3d 	vldr	s13, [r7, #244]	@ 0xf4
 8006da4:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8006da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dac:	edc7 7a3c 	vstr	s15, [r7, #240]	@ 0xf0
            motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 8006db0:	f897 20fe 	ldrb.w	r2, [r7, #254]	@ 0xfe
 8006db4:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dc2:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8006dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dce:	edc7 7a01 	vstr	s15, [r7, #4]
 8006dd2:	793b      	ldrb	r3, [r7, #4]
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8006dda:	4413      	add	r3, r2
 8006ddc:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
            motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8006de0:	f897 2125 	ldrb.w	r2, [r7, #293]	@ 0x125
 8006de4:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d308      	bcc.n	8006dfe <main+0x183a>
 8006dec:	f897 2125 	ldrb.w	r2, [r7, #293]	@ 0x125
 8006df0:	f897 30fe 	ldrb.w	r3, [r7, #254]	@ 0xfe
 8006df4:	4293      	cmp	r3, r2
 8006df6:	bf28      	it	cs
 8006df8:	4613      	movcs	r3, r2
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	e001      	b.n	8006e02 <main+0x183e>
 8006dfe:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8006e02:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
 8006e06:	e003      	b.n	8006e10 <main+0x184c>
        }
        else {
            // 区域1：全速区间（>170mm）
            motor_speed = MAX_SPEED;
 8006e08:	f897 30fe 	ldrb.w	r3, [r7, #254]	@ 0xfe
 8006e0c:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
        }
    
        // 执行带平滑过渡的电机控制
        static uint8_t last_speed = 0;
        motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8006e10:	4b66      	ldr	r3, [pc, #408]	@ (8006fac <main+0x19e8>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f897 2125 	ldrb.w	r2, [r7, #293]	@ 0x125
 8006e18:	4611      	mov	r1, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fe fb6c 	bl	80054f8 <smooth_speed_transition>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
        last_speed = motor_speed;
 8006e26:	4a61      	ldr	r2, [pc, #388]	@ (8006fac <main+0x19e8>)
 8006e28:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 8006e2c:	7013      	strb	r3, [r2, #0]
    
        Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -motor_speed, &yaw, &target_yaw);
 8006e2e:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	425b      	negs	r3, r3
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	b21b      	sxth	r3, r3
 8006e3a:	4a5d      	ldr	r2, [pc, #372]	@ (8006fb0 <main+0x19ec>)
 8006e3c:	9202      	str	r2, [sp, #8]
 8006e3e:	4a5d      	ldr	r2, [pc, #372]	@ (8006fb4 <main+0x19f0>)
 8006e40:	9201      	str	r2, [sp, #4]
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	2303      	movs	r3, #3
 8006e46:	2202      	movs	r2, #2
 8006e48:	2101      	movs	r1, #1
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	f000 fb52 	bl	80074f4 <Motor_Rightward>
        
        // 使用前后电机调整
        float avg_distance = (distances[1] + distances[2]) / 2.0f;
 8006e50:	4b55      	ldr	r3, [pc, #340]	@ (8006fa8 <main+0x19e4>)
 8006e52:	ed93 7a01 	vldr	s14, [r3, #4]
 8006e56:	4b54      	ldr	r3, [pc, #336]	@ (8006fa8 <main+0x19e4>)
 8006e58:	edd3 7a02 	vldr	s15, [r3, #8]
 8006e5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006e64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e68:	edc7 7a3b 	vstr	s15, [r7, #236]	@ 0xec
        Adjust_Motors_By_FrontBack_Distance(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, avg_distance, 40.0f);
 8006e6c:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8006fb8 <main+0x19f4>
 8006e70:	ed97 0a3b 	vldr	s0, [r7, #236]	@ 0xec
 8006e74:	2302      	movs	r3, #2
 8006e76:	2201      	movs	r2, #1
 8006e78:	2103      	movs	r1, #3
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	f003 f860 	bl	8009f40 <Adjust_Motors_By_FrontBack_Distance>
    
        OLED_ShowNum(4, 4, motor_speed, 2);
 8006e80:	f897 2125 	ldrb.w	r2, [r7, #293]	@ 0x125
 8006e84:	2302      	movs	r3, #2
 8006e86:	2104      	movs	r1, #4
 8006e88:	2004      	movs	r0, #4
 8006e8a:	f7fd ff8f 	bl	8004dac <OLED_ShowNum>
        break;
 8006e8e:	e0e6      	b.n	800705e <main+0x1a9a>
      }

      case 12: {
        const uint32_t DELAY_ENTER = 200; //调试，这个delay是用于超声波检测到突变后的继续前进时间
 8006e90:	23c8      	movs	r3, #200	@ 0xc8
 8006e92:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

        if (path_change!=2)
 8006e96:	4b3a      	ldr	r3, [pc, #232]	@ (8006f80 <main+0x19bc>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	f000 80b6 	beq.w	800700c <main+0x1a48>
        {
          if ((distances[3]>=150 && /* mean[3]>=70 && */ path_change==0)||(distances[3]<=150 && /* mean[3]<=70 && */ path_change==1))
 8006ea0:	4b41      	ldr	r3, [pc, #260]	@ (8006fa8 <main+0x19e4>)
 8006ea2:	edd3 7a03 	vldr	s15, [r3, #12]
 8006ea6:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8006fbc <main+0x19f8>
 8006eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb2:	db03      	blt.n	8006ebc <main+0x18f8>
 8006eb4:	4b32      	ldr	r3, [pc, #200]	@ (8006f80 <main+0x19bc>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00d      	beq.n	8006ed8 <main+0x1914>
 8006ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8006fa8 <main+0x19e4>)
 8006ebe:	edd3 7a03 	vldr	s15, [r3, #12]
 8006ec2:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8006fbc <main+0x19f8>
 8006ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ece:	d81e      	bhi.n	8006f0e <main+0x194a>
 8006ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8006f80 <main+0x19bc>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d11a      	bne.n	8006f0e <main+0x194a>
          {
            Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8006ed8:	4b35      	ldr	r3, [pc, #212]	@ (8006fb0 <main+0x19ec>)
 8006eda:	9302      	str	r3, [sp, #8]
 8006edc:	4b35      	ldr	r3, [pc, #212]	@ (8006fb4 <main+0x19f0>)
 8006ede:	9301      	str	r3, [sp, #4]
 8006ee0:	f06f 031d 	mvn.w	r3, #29
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	2202      	movs	r2, #2
 8006eea:	2101      	movs	r1, #1
 8006eec:	2000      	movs	r0, #0
 8006eee:	f000 fd0d 	bl	800790c <Motor_Straight>
            // 使用左侧电机调整
            Adjust_Left_Motors_By_Distance(MOTOR_1, MOTOR_3, MOTOR_2, MOTOR_4, distances[0], 40.0f);
 8006ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8006fa8 <main+0x19e4>)
 8006ef4:	edd3 7a00 	vldr	s15, [r3]
 8006ef8:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8006fb8 <main+0x19f4>
 8006efc:	eeb0 0a67 	vmov.f32	s0, s15
 8006f00:	2303      	movs	r3, #3
 8006f02:	2201      	movs	r2, #1
 8006f04:	2102      	movs	r1, #2
 8006f06:	2000      	movs	r0, #0
 8006f08:	f000 ff12 	bl	8007d30 <Adjust_Left_Motors_By_Distance>
 8006f0c:	e094      	b.n	8007038 <main+0x1a74>
          }else if (distances[3]<=150 && /* mean[3]<=70 && */ path_change==0)
 8006f0e:	4b26      	ldr	r3, [pc, #152]	@ (8006fa8 <main+0x19e4>)
 8006f10:	edd3 7a03 	vldr	s15, [r3, #12]
 8006f14:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8006fbc <main+0x19f8>
 8006f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f20:	d823      	bhi.n	8006f6a <main+0x19a6>
 8006f22:	4b17      	ldr	r3, [pc, #92]	@ (8006f80 <main+0x19bc>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d11f      	bne.n	8006f6a <main+0x19a6>
          {
            if(flag){
 8006f2a:	4b16      	ldr	r3, [pc, #88]	@ (8006f84 <main+0x19c0>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d007      	beq.n	8006f42 <main+0x197e>
              time_start = HAL_GetTick();
 8006f32:	f005 ffc9 	bl	800cec8 <HAL_GetTick>
 8006f36:	4603      	mov	r3, r0
 8006f38:	4a13      	ldr	r2, [pc, #76]	@ (8006f88 <main+0x19c4>)
 8006f3a:	6013      	str	r3, [r2, #0]
              flag = false;
 8006f3c:	4b11      	ldr	r3, [pc, #68]	@ (8006f84 <main+0x19c0>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	701a      	strb	r2, [r3, #0]
            }
            uint32_t time = HAL_GetTick();
 8006f42:	f005 ffc1 	bl	800cec8 <HAL_GetTick>
 8006f46:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
            if(time - time_start >=100){
 8006f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f88 <main+0x19c4>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b63      	cmp	r3, #99	@ 0x63
 8006f56:	d96e      	bls.n	8007036 <main+0x1a72>
              path_change+=1;
 8006f58:	4b09      	ldr	r3, [pc, #36]	@ (8006f80 <main+0x19bc>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	4a08      	ldr	r2, [pc, #32]	@ (8006f80 <main+0x19bc>)
 8006f60:	6013      	str	r3, [r2, #0]
              flag = true;
 8006f62:	4b08      	ldr	r3, [pc, #32]	@ (8006f84 <main+0x19c0>)
 8006f64:	2201      	movs	r2, #1
 8006f66:	701a      	strb	r2, [r3, #0]
          {
 8006f68:	e065      	b.n	8007036 <main+0x1a72>
            }
          }else if (distances[3]>=150 && /* mean[3]>=70 && */ path_change==1)
 8006f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8006fa8 <main+0x19e4>)
 8006f6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006f70:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8006fbc <main+0x19f8>
 8006f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7c:	da20      	bge.n	8006fc0 <main+0x19fc>
          PID_Reset(&pid_rear);
          PID_Reset(&pid_front);
          PID_Reset(&pid_position);
        }
        
        break;
 8006f7e:	e06b      	b.n	8007058 <main+0x1a94>
 8006f80:	20000424 	.word	0x20000424
 8006f84:	20000048 	.word	0x20000048
 8006f88:	20000428 	.word	0x20000428
 8006f8c:	20000420 	.word	0x20000420
 8006f90:	20000070 	.word	0x20000070
 8006f94:	200000a0 	.word	0x200000a0
 8006f98:	20000088 	.word	0x20000088
 8006f9c:	200000b8 	.word	0x200000b8
 8006fa0:	42b40000 	.word	0x42b40000
 8006fa4:	44480000 	.word	0x44480000
 8006fa8:	20000038 	.word	0x20000038
 8006fac:	2000058e 	.word	0x2000058e
 8006fb0:	20000590 	.word	0x20000590
 8006fb4:	20000594 	.word	0x20000594
 8006fb8:	42200000 	.word	0x42200000
 8006fbc:	43160000 	.word	0x43160000
          }else if (distances[3]>=150 && /* mean[3]>=70 && */ path_change==1)
 8006fc0:	4b28      	ldr	r3, [pc, #160]	@ (8007064 <main+0x1aa0>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d147      	bne.n	8007058 <main+0x1a94>
            if(flag){
 8006fc8:	4b27      	ldr	r3, [pc, #156]	@ (8007068 <main+0x1aa4>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d007      	beq.n	8006fe0 <main+0x1a1c>
              time_start = HAL_GetTick();
 8006fd0:	f005 ff7a 	bl	800cec8 <HAL_GetTick>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	4a25      	ldr	r2, [pc, #148]	@ (800706c <main+0x1aa8>)
 8006fd8:	6013      	str	r3, [r2, #0]
              flag = false;
 8006fda:	4b23      	ldr	r3, [pc, #140]	@ (8007068 <main+0x1aa4>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	701a      	strb	r2, [r3, #0]
            uint32_t time = HAL_GetTick();
 8006fe0:	f005 ff72 	bl	800cec8 <HAL_GetTick>
 8006fe4:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
            if(time - time_start >= DELAY_ENTER ){
 8006fe8:	4b20      	ldr	r3, [pc, #128]	@ (800706c <main+0x1aa8>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d82e      	bhi.n	8007058 <main+0x1a94>
              path_change+=1;
 8006ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8007064 <main+0x1aa0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3301      	adds	r3, #1
 8007000:	4a18      	ldr	r2, [pc, #96]	@ (8007064 <main+0x1aa0>)
 8007002:	6013      	str	r3, [r2, #0]
              flag = true;
 8007004:	4b18      	ldr	r3, [pc, #96]	@ (8007068 <main+0x1aa4>)
 8007006:	2201      	movs	r2, #1
 8007008:	701a      	strb	r2, [r3, #0]
        break;
 800700a:	e025      	b.n	8007058 <main+0x1a94>
          path_change = 0;
 800700c:	4b15      	ldr	r3, [pc, #84]	@ (8007064 <main+0x1aa0>)
 800700e:	2200      	movs	r2, #0
 8007010:	601a      	str	r2, [r3, #0]
          path +=1;
 8007012:	4b17      	ldr	r3, [pc, #92]	@ (8007070 <main+0x1aac>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3301      	adds	r3, #1
 8007018:	4a15      	ldr	r2, [pc, #84]	@ (8007070 <main+0x1aac>)
 800701a:	6013      	str	r3, [r2, #0]
          PID_Reset(&pid_yaw);        
 800701c:	4815      	ldr	r0, [pc, #84]	@ (8007074 <main+0x1ab0>)
 800701e:	f004 f88d 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_rear);
 8007022:	4815      	ldr	r0, [pc, #84]	@ (8007078 <main+0x1ab4>)
 8007024:	f004 f88a 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_front);
 8007028:	4814      	ldr	r0, [pc, #80]	@ (800707c <main+0x1ab8>)
 800702a:	f004 f887 	bl	800b13c <PID_Reset>
          PID_Reset(&pid_position);
 800702e:	4814      	ldr	r0, [pc, #80]	@ (8007080 <main+0x1abc>)
 8007030:	f004 f884 	bl	800b13c <PID_Reset>
        break;
 8007034:	e010      	b.n	8007058 <main+0x1a94>
          {
 8007036:	bf00      	nop
        break;
 8007038:	e00e      	b.n	8007058 <main+0x1a94>
        break;
 800703a:	bf00      	nop
 800703c:	f7fe bbef 	b.w	800581e <main+0x25a>
        break;
 8007040:	bf00      	nop
 8007042:	f7fe bbec 	b.w	800581e <main+0x25a>
        break;
 8007046:	bf00      	nop
 8007048:	f7fe bbe9 	b.w	800581e <main+0x25a>
        break;
 800704c:	bf00      	nop
 800704e:	f7fe bbe6 	b.w	800581e <main+0x25a>
        break;
 8007052:	bf00      	nop
 8007054:	f7fe bbe3 	b.w	800581e <main+0x25a>
        break;
 8007058:	bf00      	nop
 800705a:	f7fe bbe0 	b.w	800581e <main+0x25a>
  {
 800705e:	f7fe bbde 	b.w	800581e <main+0x25a>
 8007062:	bf00      	nop
 8007064:	20000424 	.word	0x20000424
 8007068:	20000048 	.word	0x20000048
 800706c:	20000428 	.word	0x20000428
 8007070:	20000420 	.word	0x20000420
 8007074:	20000070 	.word	0x20000070
 8007078:	200000a0 	.word	0x200000a0
 800707c:	20000088 	.word	0x20000088
 8007080:	200000b8 	.word	0x200000b8

08007084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b094      	sub	sp, #80	@ 0x50
 8007088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800708a:	f107 0320 	add.w	r3, r7, #32
 800708e:	2230      	movs	r2, #48	@ 0x30
 8007090:	2100      	movs	r1, #0
 8007092:	4618      	mov	r0, r3
 8007094:	f00b f8ea 	bl	801226c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007098:	f107 030c 	add.w	r3, r7, #12
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	605a      	str	r2, [r3, #4]
 80070a2:	609a      	str	r2, [r3, #8]
 80070a4:	60da      	str	r2, [r3, #12]
 80070a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80070a8:	2300      	movs	r3, #0
 80070aa:	60bb      	str	r3, [r7, #8]
 80070ac:	4b28      	ldr	r3, [pc, #160]	@ (8007150 <SystemClock_Config+0xcc>)
 80070ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b0:	4a27      	ldr	r2, [pc, #156]	@ (8007150 <SystemClock_Config+0xcc>)
 80070b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80070b8:	4b25      	ldr	r3, [pc, #148]	@ (8007150 <SystemClock_Config+0xcc>)
 80070ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070c0:	60bb      	str	r3, [r7, #8]
 80070c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80070c4:	2300      	movs	r3, #0
 80070c6:	607b      	str	r3, [r7, #4]
 80070c8:	4b22      	ldr	r3, [pc, #136]	@ (8007154 <SystemClock_Config+0xd0>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a21      	ldr	r2, [pc, #132]	@ (8007154 <SystemClock_Config+0xd0>)
 80070ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80070d2:	6013      	str	r3, [r2, #0]
 80070d4:	4b1f      	ldr	r3, [pc, #124]	@ (8007154 <SystemClock_Config+0xd0>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070dc:	607b      	str	r3, [r7, #4]
 80070de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80070e0:	2302      	movs	r3, #2
 80070e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80070e4:	2301      	movs	r3, #1
 80070e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80070e8:	2310      	movs	r3, #16
 80070ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80070ec:	2302      	movs	r3, #2
 80070ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80070f0:	2300      	movs	r3, #0
 80070f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80070f4:	2308      	movs	r3, #8
 80070f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80070f8:	23a8      	movs	r3, #168	@ 0xa8
 80070fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80070fc:	2302      	movs	r3, #2
 80070fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007100:	2304      	movs	r3, #4
 8007102:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007104:	f107 0320 	add.w	r3, r7, #32
 8007108:	4618      	mov	r0, r3
 800710a:	f007 fc3b 	bl	800e984 <HAL_RCC_OscConfig>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007114:	f000 f820 	bl	8007158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007118:	230f      	movs	r3, #15
 800711a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800711c:	2302      	movs	r3, #2
 800711e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007120:	2300      	movs	r3, #0
 8007122:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007124:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8007128:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800712a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800712e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007130:	f107 030c 	add.w	r3, r7, #12
 8007134:	2105      	movs	r1, #5
 8007136:	4618      	mov	r0, r3
 8007138:	f007 fe9c 	bl	800ee74 <HAL_RCC_ClockConfig>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007142:	f000 f809 	bl	8007158 <Error_Handler>
  }
}
 8007146:	bf00      	nop
 8007148:	3750      	adds	r7, #80	@ 0x50
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	40023800 	.word	0x40023800
 8007154:	40007000 	.word	0x40007000

08007158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007158:	b480      	push	{r7}
 800715a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800715c:	b672      	cpsid	i
}
 800715e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007160:	bf00      	nop
 8007162:	e7fd      	b.n	8007160 <Error_Handler+0x8>

08007164 <Motor_Init>:
void Motor_Init(Motor_ID id,
                TIM_HandleTypeDef* pwm_tim, uint32_t pwm_ch,
                GPIO_TypeDef* in1_port, uint16_t in1_pin,
                GPIO_TypeDef* in2_port, uint16_t in2_pin,
                TIM_HandleTypeDef* encoder_tim)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	607a      	str	r2, [r7, #4]
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	4603      	mov	r3, r0
 8007172:	73fb      	strb	r3, [r7, #15]
    motors[id].pwm_tim = pwm_tim;
 8007174:	7bfa      	ldrb	r2, [r7, #15]
 8007176:	4938      	ldr	r1, [pc, #224]	@ (8007258 <Motor_Init+0xf4>)
 8007178:	4613      	mov	r3, r2
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	4413      	add	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	440b      	add	r3, r1
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	601a      	str	r2, [r3, #0]
    motors[id].pwm_channel = pwm_ch;
 8007186:	7bfa      	ldrb	r2, [r7, #15]
 8007188:	4933      	ldr	r1, [pc, #204]	@ (8007258 <Motor_Init+0xf4>)
 800718a:	4613      	mov	r3, r2
 800718c:	00db      	lsls	r3, r3, #3
 800718e:	4413      	add	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	440b      	add	r3, r1
 8007194:	3304      	adds	r3, #4
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	601a      	str	r2, [r3, #0]

    motors[id].in1_port = in1_port;
 800719a:	7bfa      	ldrb	r2, [r7, #15]
 800719c:	492e      	ldr	r1, [pc, #184]	@ (8007258 <Motor_Init+0xf4>)
 800719e:	4613      	mov	r3, r2
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	440b      	add	r3, r1
 80071a8:	3308      	adds	r3, #8
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	601a      	str	r2, [r3, #0]
    motors[id].in1_pin = in1_pin;
 80071ae:	7bfa      	ldrb	r2, [r7, #15]
 80071b0:	4929      	ldr	r1, [pc, #164]	@ (8007258 <Motor_Init+0xf4>)
 80071b2:	4613      	mov	r3, r2
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	440b      	add	r3, r1
 80071bc:	330c      	adds	r3, #12
 80071be:	8b3a      	ldrh	r2, [r7, #24]
 80071c0:	801a      	strh	r2, [r3, #0]
    motors[id].in2_port = in2_port;
 80071c2:	7bfa      	ldrb	r2, [r7, #15]
 80071c4:	4924      	ldr	r1, [pc, #144]	@ (8007258 <Motor_Init+0xf4>)
 80071c6:	4613      	mov	r3, r2
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	440b      	add	r3, r1
 80071d0:	3310      	adds	r3, #16
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	601a      	str	r2, [r3, #0]
    motors[id].in2_pin = in2_pin;
 80071d6:	7bfa      	ldrb	r2, [r7, #15]
 80071d8:	491f      	ldr	r1, [pc, #124]	@ (8007258 <Motor_Init+0xf4>)
 80071da:	4613      	mov	r3, r2
 80071dc:	00db      	lsls	r3, r3, #3
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	440b      	add	r3, r1
 80071e4:	3314      	adds	r3, #20
 80071e6:	8c3a      	ldrh	r2, [r7, #32]
 80071e8:	801a      	strh	r2, [r3, #0]

    motors[id].encoder_tim = encoder_tim;
 80071ea:	7bfa      	ldrb	r2, [r7, #15]
 80071ec:	491a      	ldr	r1, [pc, #104]	@ (8007258 <Motor_Init+0xf4>)
 80071ee:	4613      	mov	r3, r2
 80071f0:	00db      	lsls	r3, r3, #3
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	440b      	add	r3, r1
 80071f8:	3318      	adds	r3, #24
 80071fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071fc:	601a      	str	r2, [r3, #0]
    motors[id].encoder_offset = 0;
 80071fe:	7bfa      	ldrb	r2, [r7, #15]
 8007200:	4915      	ldr	r1, [pc, #84]	@ (8007258 <Motor_Init+0xf4>)
 8007202:	4613      	mov	r3, r2
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	440b      	add	r3, r1
 800720c:	331c      	adds	r3, #28
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]
    motors[id].encoder_total = 0;
 8007212:	7bfa      	ldrb	r2, [r7, #15]
 8007214:	4910      	ldr	r1, [pc, #64]	@ (8007258 <Motor_Init+0xf4>)
 8007216:	4613      	mov	r3, r2
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	440b      	add	r3, r1
 8007220:	3320      	adds	r3, #32
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]

    HAL_TIM_PWM_Start(pwm_tim, pwm_ch);
 8007226:	6879      	ldr	r1, [r7, #4]
 8007228:	68b8      	ldr	r0, [r7, #8]
 800722a:	f008 f915 	bl	800f458 <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(encoder_tim, TIM_CHANNEL_1|TIM_CHANNEL_2);
 800722e:	2104      	movs	r1, #4
 8007230:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007232:	f008 fa7f 	bl	800f734 <HAL_TIM_Encoder_Start>
    motors[id].encoder_offset = (int32_t)__HAL_TIM_GET_COUNTER(encoder_tim);
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723c:	7bfa      	ldrb	r2, [r7, #15]
 800723e:	4618      	mov	r0, r3
 8007240:	4905      	ldr	r1, [pc, #20]	@ (8007258 <Motor_Init+0xf4>)
 8007242:	4613      	mov	r3, r2
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	331c      	adds	r3, #28
 800724e:	6018      	str	r0, [r3, #0]
}
 8007250:	bf00      	nop
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	20000388 	.word	0x20000388

0800725c <Motor_SetSpeed>:

void Motor_SetSpeed(Motor_ID id, int16_t speed)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	460a      	mov	r2, r1
 8007266:	71fb      	strb	r3, [r7, #7]
 8007268:	4613      	mov	r3, r2
 800726a:	80bb      	strh	r3, [r7, #4]
    speed = (speed > 100) ? 100 : (speed < -100) ? -100 : speed;
 800726c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007270:	2b64      	cmp	r3, #100	@ 0x64
 8007272:	dc08      	bgt.n	8007286 <Motor_SetSpeed+0x2a>
 8007274:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007278:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800727c:	4293      	cmp	r3, r2
 800727e:	bfb8      	it	lt
 8007280:	4613      	movlt	r3, r2
 8007282:	b21b      	sxth	r3, r3
 8007284:	e000      	b.n	8007288 <Motor_SetSpeed+0x2c>
 8007286:	2364      	movs	r3, #100	@ 0x64
 8007288:	80bb      	strh	r3, [r7, #4]

    if(speed >= 0) {
 800728a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	db2c      	blt.n	80072ec <Motor_SetSpeed+0x90>
        HAL_GPIO_WritePin(motors[id].in1_port, motors[id].in1_pin, GPIO_PIN_SET);
 8007292:	79fa      	ldrb	r2, [r7, #7]
 8007294:	495e      	ldr	r1, [pc, #376]	@ (8007410 <Motor_SetSpeed+0x1b4>)
 8007296:	4613      	mov	r3, r2
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	440b      	add	r3, r1
 80072a0:	3308      	adds	r3, #8
 80072a2:	6818      	ldr	r0, [r3, #0]
 80072a4:	79fa      	ldrb	r2, [r7, #7]
 80072a6:	495a      	ldr	r1, [pc, #360]	@ (8007410 <Motor_SetSpeed+0x1b4>)
 80072a8:	4613      	mov	r3, r2
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	440b      	add	r3, r1
 80072b2:	330c      	adds	r3, #12
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	2201      	movs	r2, #1
 80072b8:	4619      	mov	r1, r3
 80072ba:	f006 f98d 	bl	800d5d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motors[id].in2_port, motors[id].in2_pin, GPIO_PIN_RESET);
 80072be:	79fa      	ldrb	r2, [r7, #7]
 80072c0:	4953      	ldr	r1, [pc, #332]	@ (8007410 <Motor_SetSpeed+0x1b4>)
 80072c2:	4613      	mov	r3, r2
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	440b      	add	r3, r1
 80072cc:	3310      	adds	r3, #16
 80072ce:	6818      	ldr	r0, [r3, #0]
 80072d0:	79fa      	ldrb	r2, [r7, #7]
 80072d2:	494f      	ldr	r1, [pc, #316]	@ (8007410 <Motor_SetSpeed+0x1b4>)
 80072d4:	4613      	mov	r3, r2
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	440b      	add	r3, r1
 80072de:	3314      	adds	r3, #20
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	2200      	movs	r2, #0
 80072e4:	4619      	mov	r1, r3
 80072e6:	f006 f977 	bl	800d5d8 <HAL_GPIO_WritePin>
 80072ea:	e02f      	b.n	800734c <Motor_SetSpeed+0xf0>
    } else {
        HAL_GPIO_WritePin(motors[id].in1_port, motors[id].in1_pin, GPIO_PIN_RESET);
 80072ec:	79fa      	ldrb	r2, [r7, #7]
 80072ee:	4948      	ldr	r1, [pc, #288]	@ (8007410 <Motor_SetSpeed+0x1b4>)
 80072f0:	4613      	mov	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	4413      	add	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	3308      	adds	r3, #8
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	79fa      	ldrb	r2, [r7, #7]
 8007300:	4943      	ldr	r1, [pc, #268]	@ (8007410 <Motor_SetSpeed+0x1b4>)
 8007302:	4613      	mov	r3, r2
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	4413      	add	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	440b      	add	r3, r1
 800730c:	330c      	adds	r3, #12
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	2200      	movs	r2, #0
 8007312:	4619      	mov	r1, r3
 8007314:	f006 f960 	bl	800d5d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motors[id].in2_port, motors[id].in2_pin, GPIO_PIN_SET);
 8007318:	79fa      	ldrb	r2, [r7, #7]
 800731a:	493d      	ldr	r1, [pc, #244]	@ (8007410 <Motor_SetSpeed+0x1b4>)
 800731c:	4613      	mov	r3, r2
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	4413      	add	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	440b      	add	r3, r1
 8007326:	3310      	adds	r3, #16
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	79fa      	ldrb	r2, [r7, #7]
 800732c:	4938      	ldr	r1, [pc, #224]	@ (8007410 <Motor_SetSpeed+0x1b4>)
 800732e:	4613      	mov	r3, r2
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	440b      	add	r3, r1
 8007338:	3314      	adds	r3, #20
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	2201      	movs	r2, #1
 800733e:	4619      	mov	r1, r3
 8007340:	f006 f94a 	bl	800d5d8 <HAL_GPIO_WritePin>
        speed = -speed;
 8007344:	88bb      	ldrh	r3, [r7, #4]
 8007346:	425b      	negs	r3, r3
 8007348:	b29b      	uxth	r3, r3
 800734a:	80bb      	strh	r3, [r7, #4]
    }

    uint32_t duty = (speed * 9999) / 100;
 800734c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007350:	f242 720f 	movw	r2, #9999	@ 0x270f
 8007354:	fb02 f303 	mul.w	r3, r2, r3
 8007358:	4a2e      	ldr	r2, [pc, #184]	@ (8007414 <Motor_SetSpeed+0x1b8>)
 800735a:	fb82 1203 	smull	r1, r2, r2, r3
 800735e:	1152      	asrs	r2, r2, #5
 8007360:	17db      	asrs	r3, r3, #31
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 8007366:	79fa      	ldrb	r2, [r7, #7]
 8007368:	4929      	ldr	r1, [pc, #164]	@ (8007410 <Motor_SetSpeed+0x1b4>)
 800736a:	4613      	mov	r3, r2
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	3304      	adds	r3, #4
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10b      	bne.n	8007394 <Motor_SetSpeed+0x138>
 800737c:	79fa      	ldrb	r2, [r7, #7]
 800737e:	4924      	ldr	r1, [pc, #144]	@ (8007410 <Motor_SetSpeed+0x1b4>)
 8007380:	4613      	mov	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	4413      	add	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	440b      	add	r3, r1
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8007392:	e038      	b.n	8007406 <Motor_SetSpeed+0x1aa>
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 8007394:	79fa      	ldrb	r2, [r7, #7]
 8007396:	491e      	ldr	r1, [pc, #120]	@ (8007410 <Motor_SetSpeed+0x1b4>)
 8007398:	4613      	mov	r3, r2
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	4413      	add	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	440b      	add	r3, r1
 80073a2:	3304      	adds	r3, #4
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d10b      	bne.n	80073c2 <Motor_SetSpeed+0x166>
 80073aa:	79fa      	ldrb	r2, [r7, #7]
 80073ac:	4918      	ldr	r1, [pc, #96]	@ (8007410 <Motor_SetSpeed+0x1b4>)
 80073ae:	4613      	mov	r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	4413      	add	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	440b      	add	r3, r1
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80073c0:	e021      	b.n	8007406 <Motor_SetSpeed+0x1aa>
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 80073c2:	79fa      	ldrb	r2, [r7, #7]
 80073c4:	4912      	ldr	r1, [pc, #72]	@ (8007410 <Motor_SetSpeed+0x1b4>)
 80073c6:	4613      	mov	r3, r2
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	440b      	add	r3, r1
 80073d0:	3304      	adds	r3, #4
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b08      	cmp	r3, #8
 80073d6:	d10b      	bne.n	80073f0 <Motor_SetSpeed+0x194>
 80073d8:	79fa      	ldrb	r2, [r7, #7]
 80073da:	490d      	ldr	r1, [pc, #52]	@ (8007410 <Motor_SetSpeed+0x1b4>)
 80073dc:	4613      	mov	r3, r2
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	4413      	add	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80073ee:	e00a      	b.n	8007406 <Motor_SetSpeed+0x1aa>
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 80073f0:	79fa      	ldrb	r2, [r7, #7]
 80073f2:	4907      	ldr	r1, [pc, #28]	@ (8007410 <Motor_SetSpeed+0x1b4>)
 80073f4:	4613      	mov	r3, r2
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8007406:	bf00      	nop
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20000388 	.word	0x20000388
 8007414:	51eb851f 	.word	0x51eb851f

08007418 <Motor_GetEncoder>:

int32_t Motor_GetEncoder(Motor_ID id)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	4603      	mov	r3, r0
 8007420:	71fb      	strb	r3, [r7, #7]
    int32_t current_cnt = (int32_t)__HAL_TIM_GET_COUNTER(motors[id].encoder_tim);
 8007422:	79fa      	ldrb	r2, [r7, #7]
 8007424:	492a      	ldr	r1, [pc, #168]	@ (80074d0 <Motor_GetEncoder+0xb8>)
 8007426:	4613      	mov	r3, r2
 8007428:	00db      	lsls	r3, r3, #3
 800742a:	4413      	add	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	440b      	add	r3, r1
 8007430:	3318      	adds	r3, #24
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007438:	60bb      	str	r3, [r7, #8]
    int32_t diff = current_cnt - motors[id].encoder_offset;
 800743a:	79fa      	ldrb	r2, [r7, #7]
 800743c:	4924      	ldr	r1, [pc, #144]	@ (80074d0 <Motor_GetEncoder+0xb8>)
 800743e:	4613      	mov	r3, r2
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	440b      	add	r3, r1
 8007448:	331c      	adds	r3, #28
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	60fb      	str	r3, [r7, #12]
    
    if (diff > 32767) diff -= 65536;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007458:	db04      	blt.n	8007464 <Motor_GetEncoder+0x4c>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	e007      	b.n	8007474 <Motor_GetEncoder+0x5c>
    else if (diff < -32768) diff += 65536;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800746a:	da03      	bge.n	8007474 <Motor_GetEncoder+0x5c>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8007472:	60fb      	str	r3, [r7, #12]
    
    motors[id].encoder_total += diff;
 8007474:	79fa      	ldrb	r2, [r7, #7]
 8007476:	4916      	ldr	r1, [pc, #88]	@ (80074d0 <Motor_GetEncoder+0xb8>)
 8007478:	4613      	mov	r3, r2
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	4413      	add	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	440b      	add	r3, r1
 8007482:	3320      	adds	r3, #32
 8007484:	6819      	ldr	r1, [r3, #0]
 8007486:	79fa      	ldrb	r2, [r7, #7]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4419      	add	r1, r3
 800748c:	4810      	ldr	r0, [pc, #64]	@ (80074d0 <Motor_GetEncoder+0xb8>)
 800748e:	4613      	mov	r3, r2
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4403      	add	r3, r0
 8007498:	3320      	adds	r3, #32
 800749a:	6019      	str	r1, [r3, #0]
    motors[id].encoder_offset = current_cnt;
 800749c:	79fa      	ldrb	r2, [r7, #7]
 800749e:	490c      	ldr	r1, [pc, #48]	@ (80074d0 <Motor_GetEncoder+0xb8>)
 80074a0:	4613      	mov	r3, r2
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	4413      	add	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	440b      	add	r3, r1
 80074aa:	331c      	adds	r3, #28
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	601a      	str	r2, [r3, #0]
    
    return motors[id].encoder_total;
 80074b0:	79fa      	ldrb	r2, [r7, #7]
 80074b2:	4907      	ldr	r1, [pc, #28]	@ (80074d0 <Motor_GetEncoder+0xb8>)
 80074b4:	4613      	mov	r3, r2
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	4413      	add	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	440b      	add	r3, r1
 80074be:	3320      	adds	r3, #32
 80074c0:	681b      	ldr	r3, [r3, #0]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3714      	adds	r7, #20
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	20000388 	.word	0x20000388

080074d4 <Reset_Timer>:
    prev_counter = current_counter;
    return diff ; 
}

void Reset_Timer(void)
{
 80074d4:	b480      	push	{r7}
 80074d6:	af00      	add	r7, sp, #0
    prev_counter = __HAL_TIM_GET_COUNTER(&htim6);
 80074d8:	4b04      	ldr	r3, [pc, #16]	@ (80074ec <Reset_Timer+0x18>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074de:	4a04      	ldr	r2, [pc, #16]	@ (80074f0 <Reset_Timer+0x1c>)
 80074e0:	6013      	str	r3, [r2, #0]
}
 80074e2:	bf00      	nop
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	20000730 	.word	0x20000730
 80074f0:	20000598 	.word	0x20000598

080074f4 <Motor_Rightward>:

void Motor_Rightward(Motor_ID id1, Motor_ID id2, Motor_ID id3, Motor_ID id4, int16_t speed, float* yaw, float* target_yaw) {
 80074f4:	b590      	push	{r4, r7, lr}
 80074f6:	b09f      	sub	sp, #124	@ 0x7c
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	4604      	mov	r4, r0
 80074fc:	4608      	mov	r0, r1
 80074fe:	4611      	mov	r1, r2
 8007500:	461a      	mov	r2, r3
 8007502:	4623      	mov	r3, r4
 8007504:	71fb      	strb	r3, [r7, #7]
 8007506:	4603      	mov	r3, r0
 8007508:	71bb      	strb	r3, [r7, #6]
 800750a:	460b      	mov	r3, r1
 800750c:	717b      	strb	r3, [r7, #5]
 800750e:	4613      	mov	r3, r2
 8007510:	713b      	strb	r3, [r7, #4]
    // 使用 HAL_GetTick 计算时间差
    static uint32_t prev_tick = 0;
    uint32_t current_tick = HAL_GetTick();
 8007512:	f005 fcd9 	bl	800cec8 <HAL_GetTick>
 8007516:	66b8      	str	r0, [r7, #104]	@ 0x68
    float dt = (current_tick - prev_tick) / 1000.0f;  // 转换为秒
 8007518:	4b53      	ldr	r3, [pc, #332]	@ (8007668 <Motor_Rightward+0x174>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	ee07 3a90 	vmov	s15, r3
 8007524:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007528:	eddf 6a50 	vldr	s13, [pc, #320]	@ 800766c <Motor_Rightward+0x178>
 800752c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007530:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    prev_tick = current_tick;
 8007534:	4a4c      	ldr	r2, [pc, #304]	@ (8007668 <Motor_Rightward+0x174>)
 8007536:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007538:	6013      	str	r3, [r2, #0]

    if (dt <= 0.001f) {
 800753a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800753e:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8007670 <Motor_Rightward+0x17c>
 8007542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754a:	d801      	bhi.n	8007550 <Motor_Rightward+0x5c>
        dt = 0.001f;  // 最小时间差为1ms
 800754c:	4b49      	ldr	r3, [pc, #292]	@ (8007674 <Motor_Rightward+0x180>)
 800754e:	677b      	str	r3, [r7, #116]	@ 0x74

    // 静态变量存储上一次的编码器值
    static int32_t prev_enc1 = 0, prev_enc2 = 0, prev_enc3 = 0, prev_enc4 = 0;

    // 获取当前编码器值
    int32_t enc1 = Motor_GetEncoder(id1);
 8007550:	79fb      	ldrb	r3, [r7, #7]
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff ff60 	bl	8007418 <Motor_GetEncoder>
 8007558:	6678      	str	r0, [r7, #100]	@ 0x64
    int32_t enc2 = -Motor_GetEncoder(id2);
 800755a:	79bb      	ldrb	r3, [r7, #6]
 800755c:	4618      	mov	r0, r3
 800755e:	f7ff ff5b 	bl	8007418 <Motor_GetEncoder>
 8007562:	4603      	mov	r3, r0
 8007564:	425b      	negs	r3, r3
 8007566:	663b      	str	r3, [r7, #96]	@ 0x60
    int32_t enc3 = -Motor_GetEncoder(id3);
 8007568:	797b      	ldrb	r3, [r7, #5]
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff ff54 	bl	8007418 <Motor_GetEncoder>
 8007570:	4603      	mov	r3, r0
 8007572:	425b      	negs	r3, r3
 8007574:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int32_t enc4 = Motor_GetEncoder(id4);
 8007576:	793b      	ldrb	r3, [r7, #4]
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff ff4d 	bl	8007418 <Motor_GetEncoder>
 800757e:	65b8      	str	r0, [r7, #88]	@ 0x58

    // 计算编码器速度（单位时间内的变化量）
    float speed1 = (enc1 - prev_enc1) / dt;
 8007580:	4b3d      	ldr	r3, [pc, #244]	@ (8007678 <Motor_Rightward+0x184>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	ee07 3a90 	vmov	s15, r3
 800758c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007590:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007598:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float speed2 = (enc2 - prev_enc2) / dt;
 800759c:	4b37      	ldr	r3, [pc, #220]	@ (800767c <Motor_Rightward+0x188>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	ee07 3a90 	vmov	s15, r3
 80075a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80075ac:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80075b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075b4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    float speed3 = (enc3 - prev_enc3) / dt;
 80075b8:	4b31      	ldr	r3, [pc, #196]	@ (8007680 <Motor_Rightward+0x18c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	ee07 3a90 	vmov	s15, r3
 80075c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80075c8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80075cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075d0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float speed4 = (enc4 - prev_enc4) / dt;
 80075d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007684 <Motor_Rightward+0x190>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	ee07 3a90 	vmov	s15, r3
 80075e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80075e4:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80075e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ec:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    // OLED_ShowNum(2,2,(int16_t)fabsf(speed3),4);  // 左后数字
    // OLED_ShowChar(2,9,speed4 >= 0 ? '+' : '-');  // 右前符号
    // OLED_ShowNum(2,10,(int16_t)fabsf(speed4),4);  // 右前数字

    // 更新上一次的编码器值
    prev_enc1 = enc1;
 80075f0:	4a21      	ldr	r2, [pc, #132]	@ (8007678 <Motor_Rightward+0x184>)
 80075f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075f4:	6013      	str	r3, [r2, #0]
    prev_enc2 = enc2;
 80075f6:	4a21      	ldr	r2, [pc, #132]	@ (800767c <Motor_Rightward+0x188>)
 80075f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075fa:	6013      	str	r3, [r2, #0]
    prev_enc3 = enc3;
 80075fc:	4a20      	ldr	r2, [pc, #128]	@ (8007680 <Motor_Rightward+0x18c>)
 80075fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007600:	6013      	str	r3, [r2, #0]
    prev_enc4 = enc4;
 8007602:	4a20      	ldr	r2, [pc, #128]	@ (8007684 <Motor_Rightward+0x190>)
 8007604:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007606:	6013      	str	r3, [r2, #0]

    // 获取当前偏航角
    float pitch, roll, current_yaw;
    if (MPU6050_DMP_Get_Data(&pitch, &roll, &current_yaw) != 0) {
 8007608:	f107 020c 	add.w	r2, r7, #12
 800760c:	f107 0110 	add.w	r1, r7, #16
 8007610:	f107 0314 	add.w	r3, r7, #20
 8007614:	4618      	mov	r0, r3
 8007616:	f7fd f93f 	bl	8004898 <MPU6050_DMP_Get_Data>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	f040 8165 	bne.w	80078ec <Motor_Rightward+0x3f8>
        // Motor_SetSpeed(id2, 0);
        // Motor_SetSpeed(id3, 0);
        // Motor_SetSpeed(id4, 0);
        return;
    }
    *yaw = current_yaw;
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007628:	601a      	str	r2, [r3, #0]
        
    float yaw_error = *target_yaw - *yaw;
 800762a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800762e:	ed93 7a00 	vldr	s14, [r3]
 8007632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007636:	edd3 7a00 	vldr	s15, [r3]
 800763a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800763e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    if (yaw_error > 180) yaw_error -= 360;
 8007642:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007646:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8007688 <Motor_Rightward+0x194>
 800764a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800764e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007652:	dd21      	ble.n	8007698 <Motor_Rightward+0x1a4>
 8007654:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007658:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007690 <Motor_Rightward+0x19c>
 800765c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007660:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 8007664:	e029      	b.n	80076ba <Motor_Rightward+0x1c6>
 8007666:	bf00      	nop
 8007668:	2000059c 	.word	0x2000059c
 800766c:	447a0000 	.word	0x447a0000
 8007670:	3a83126f 	.word	0x3a83126f
 8007674:	3a83126f 	.word	0x3a83126f
 8007678:	200005a0 	.word	0x200005a0
 800767c:	200005a4 	.word	0x200005a4
 8007680:	200005a8 	.word	0x200005a8
 8007684:	200005ac 	.word	0x200005ac
 8007688:	43340000 	.word	0x43340000
 800768c:	c3340000 	.word	0xc3340000
 8007690:	43b40000 	.word	0x43b40000
 8007694:	3e99999a 	.word	0x3e99999a
    else if (yaw_error < -180) yaw_error += 360;
 8007698:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800769c:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 800768c <Motor_Rightward+0x198>
 80076a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a8:	d507      	bpl.n	80076ba <Motor_Rightward+0x1c6>
 80076aa:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80076ae:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 8007690 <Motor_Rightward+0x19c>
 80076b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076b6:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

    // 计算速度误差
    float front_speed_error = speed1 - speed4;  // 前轮组速度同步（左前-右前）
 80076ba:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80076be:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80076c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076c6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float rear_speed_error = speed2 - speed3;   // 后轮组速度同步（右后-左后）
 80076ca:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80076ce:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80076d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076d6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float position_speed_error = (front_speed_error - rear_speed_error) / 2;  // 前后轮组速度同步
 80076da:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80076de:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80076e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076e6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80076ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076ee:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // 速度分配 - 修正后的分配方式
    float base_speed = speed;
 80076f2:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	@ 0x88
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076fe:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    
    // 限制PID输出的最大值，防止过度修正
    float max_pid_output = base_speed * 0.3f;  // 降低PID输出最大值为基准速度的30%
 8007702:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8007706:	ed1f 7a1d 	vldr	s14, [pc, #-116]	@ 8007694 <Motor_Rightward+0x1a0>
 800770a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800770e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    
    // 计算偏航角PID输出
    float yaw_pid_output = 0.0f;
 8007712:	f04f 0300 	mov.w	r3, #0
 8007716:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (fabs(yaw_error) > 2.0f) {
 8007718:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800771c:	eef0 7ae7 	vabs.f32	s15, s15
 8007720:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8007724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772c:	dd08      	ble.n	8007740 <Motor_Rightward+0x24c>
        yaw_pid_output = PID_Calculate(&pid_yaw, yaw_error, dt);
 800772e:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007732:	ed97 0a1c 	vldr	s0, [r7, #112]	@ 0x70
 8007736:	486f      	ldr	r0, [pc, #444]	@ (80078f4 <Motor_Rightward+0x400>)
 8007738:	f003 fc84 	bl	800b044 <PID_Calculate>
 800773c:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
        // 误差小于1度时，重置PID控制器
        // PID_Reset(&pid_yaw);
    }
    
    // 计算前后轮组的速度PID输出
    float front_pid_output = PID_Calculate(&pid_front, front_speed_error, dt);
 8007740:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007744:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8007748:	486b      	ldr	r0, [pc, #428]	@ (80078f8 <Motor_Rightward+0x404>)
 800774a:	f003 fc7b 	bl	800b044 <PID_Calculate>
 800774e:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
    float rear_pid_output = PID_Calculate(&pid_rear, rear_speed_error, dt);
 8007752:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007756:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 800775a:	4868      	ldr	r0, [pc, #416]	@ (80078fc <Motor_Rightward+0x408>)
 800775c:	f003 fc72 	bl	800b044 <PID_Calculate>
 8007760:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
    float position_pid_output = PID_Calculate(&pid_position, position_speed_error + yaw_pid_output, dt);
 8007764:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8007768:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800776c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007770:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007774:	eeb0 0a67 	vmov.f32	s0, s15
 8007778:	4861      	ldr	r0, [pc, #388]	@ (8007900 <Motor_Rightward+0x40c>)
 800777a:	f003 fc63 	bl	800b044 <PID_Calculate>
 800777e:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    // front_pid_output = fmaxf(fminf(front_pid_output, max_pid_output*1), -max_pid_output*1);
    // rear_pid_output = fmaxf(fminf(rear_pid_output, max_pid_output*1), -max_pid_output*1);
    // position_pid_output = fmaxf(fminf(position_pid_output, max_pid_output*1), -max_pid_output*1);
    
    // 前轮组 - 左前右前同步
    float motor_speed1 = -(base_speed - front_pid_output - position_pid_output - yaw_pid_output);  // 左前
 8007782:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007786:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800778a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800778e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007792:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007796:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800779a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800779e:	eef1 7a67 	vneg.f32	s15, s15
 80077a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float motor_speed4 = (base_speed + front_pid_output - position_pid_output - yaw_pid_output);   // 右前
 80077a6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80077aa:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80077ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077b2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80077b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80077ba:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80077be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077c2:	edc7 7a08 	vstr	s15, [r7, #32]
    
    // 后轮组 - 左后右后同步
    float motor_speed2 = (base_speed - rear_pid_output + position_pid_output + yaw_pid_output);   // 右后
 80077c6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80077ca:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80077ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80077d2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80077d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077da:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80077de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077e2:	edc7 7a07 	vstr	s15, [r7, #28]
    float motor_speed3 = -(base_speed + rear_pid_output + position_pid_output + yaw_pid_output);  // 左后
 80077e6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80077ea:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80077ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077f2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80077f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077fa:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80077fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007802:	eef1 7a67 	vneg.f32	s15, s15
 8007806:	edc7 7a06 	vstr	s15, [r7, #24]

    // 限幅
    motor_speed1 = fmaxf(fminf(motor_speed1, 100.0f), -100.0f);
 800780a:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8007904 <Motor_Rightward+0x410>
 800780e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8007812:	f00c fbe6 	bl	8013fe2 <fminf>
 8007816:	eef0 7a40 	vmov.f32	s15, s0
 800781a:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8007908 <Motor_Rightward+0x414>
 800781e:	eeb0 0a67 	vmov.f32	s0, s15
 8007822:	f00c fbc1 	bl	8013fa8 <fmaxf>
 8007826:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    motor_speed2 = fmaxf(fminf(motor_speed2, 100.0f), -100.0f);
 800782a:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8007904 <Motor_Rightward+0x410>
 800782e:	ed97 0a07 	vldr	s0, [r7, #28]
 8007832:	f00c fbd6 	bl	8013fe2 <fminf>
 8007836:	eef0 7a40 	vmov.f32	s15, s0
 800783a:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8007908 <Motor_Rightward+0x414>
 800783e:	eeb0 0a67 	vmov.f32	s0, s15
 8007842:	f00c fbb1 	bl	8013fa8 <fmaxf>
 8007846:	ed87 0a07 	vstr	s0, [r7, #28]
    motor_speed3 = fmaxf(fminf(motor_speed3, 100.0f), -100.0f);
 800784a:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8007904 <Motor_Rightward+0x410>
 800784e:	ed97 0a06 	vldr	s0, [r7, #24]
 8007852:	f00c fbc6 	bl	8013fe2 <fminf>
 8007856:	eef0 7a40 	vmov.f32	s15, s0
 800785a:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8007908 <Motor_Rightward+0x414>
 800785e:	eeb0 0a67 	vmov.f32	s0, s15
 8007862:	f00c fba1 	bl	8013fa8 <fmaxf>
 8007866:	ed87 0a06 	vstr	s0, [r7, #24]
    motor_speed4 = fmaxf(fminf(motor_speed4, 100.0f), -100.0f);
 800786a:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8007904 <Motor_Rightward+0x410>
 800786e:	ed97 0a08 	vldr	s0, [r7, #32]
 8007872:	f00c fbb6 	bl	8013fe2 <fminf>
 8007876:	eef0 7a40 	vmov.f32	s15, s0
 800787a:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8007908 <Motor_Rightward+0x414>
 800787e:	eeb0 0a67 	vmov.f32	s0, s15
 8007882:	f00c fb91 	bl	8013fa8 <fmaxf>
 8007886:	ed87 0a08 	vstr	s0, [r7, #32]

    // 设置电机速度
    Motor_SetSpeed(id1, motor_speed1);
 800788a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800788e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007892:	ee17 3a90 	vmov	r3, s15
 8007896:	b21a      	sxth	r2, r3
 8007898:	79fb      	ldrb	r3, [r7, #7]
 800789a:	4611      	mov	r1, r2
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff fcdd 	bl	800725c <Motor_SetSpeed>
    Motor_SetSpeed(id2, motor_speed2);
 80078a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80078a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078aa:	ee17 3a90 	vmov	r3, s15
 80078ae:	b21a      	sxth	r2, r3
 80078b0:	79bb      	ldrb	r3, [r7, #6]
 80078b2:	4611      	mov	r1, r2
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff fcd1 	bl	800725c <Motor_SetSpeed>
    Motor_SetSpeed(id3, motor_speed3);
 80078ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80078be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078c2:	ee17 3a90 	vmov	r3, s15
 80078c6:	b21a      	sxth	r2, r3
 80078c8:	797b      	ldrb	r3, [r7, #5]
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff fcc5 	bl	800725c <Motor_SetSpeed>
    Motor_SetSpeed(id4, motor_speed4);
 80078d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80078d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078da:	ee17 3a90 	vmov	r3, s15
 80078de:	b21a      	sxth	r2, r3
 80078e0:	793b      	ldrb	r3, [r7, #4]
 80078e2:	4611      	mov	r1, r2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7ff fcb9 	bl	800725c <Motor_SetSpeed>
 80078ea:	e000      	b.n	80078ee <Motor_Rightward+0x3fa>
        return;
 80078ec:	bf00      	nop
}
 80078ee:	377c      	adds	r7, #124	@ 0x7c
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd90      	pop	{r4, r7, pc}
 80078f4:	20000070 	.word	0x20000070
 80078f8:	20000088 	.word	0x20000088
 80078fc:	200000a0 	.word	0x200000a0
 8007900:	200000b8 	.word	0x200000b8
 8007904:	42c80000 	.word	0x42c80000
 8007908:	c2c80000 	.word	0xc2c80000

0800790c <Motor_Straight>:

void Motor_Straight(Motor_ID id1, Motor_ID id2, Motor_ID id3, Motor_ID id4, int16_t speed, float* yaw, float* target_yaw) {
 800790c:	b590      	push	{r4, r7, lr}
 800790e:	b09f      	sub	sp, #124	@ 0x7c
 8007910:	af00      	add	r7, sp, #0
 8007912:	4604      	mov	r4, r0
 8007914:	4608      	mov	r0, r1
 8007916:	4611      	mov	r1, r2
 8007918:	461a      	mov	r2, r3
 800791a:	4623      	mov	r3, r4
 800791c:	71fb      	strb	r3, [r7, #7]
 800791e:	4603      	mov	r3, r0
 8007920:	71bb      	strb	r3, [r7, #6]
 8007922:	460b      	mov	r3, r1
 8007924:	717b      	strb	r3, [r7, #5]
 8007926:	4613      	mov	r3, r2
 8007928:	713b      	strb	r3, [r7, #4]
    // 使用 HAL_GetTick 计算时间差
    static uint32_t prev_tick = 0;
    uint32_t current_tick = HAL_GetTick();
 800792a:	f005 facd 	bl	800cec8 <HAL_GetTick>
 800792e:	66b8      	str	r0, [r7, #104]	@ 0x68
    float dt = (current_tick - prev_tick) / 1000.0f;  // 转换为秒
 8007930:	4b7d      	ldr	r3, [pc, #500]	@ (8007b28 <Motor_Straight+0x21c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	ee07 3a90 	vmov	s15, r3
 800793c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007940:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8007b2c <Motor_Straight+0x220>
 8007944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007948:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    prev_tick = current_tick;
 800794c:	4a76      	ldr	r2, [pc, #472]	@ (8007b28 <Motor_Straight+0x21c>)
 800794e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007950:	6013      	str	r3, [r2, #0]
        
    // 添加时间差保护
    if (dt <= 0.001f) {
 8007952:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8007956:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8007b30 <Motor_Straight+0x224>
 800795a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800795e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007962:	d801      	bhi.n	8007968 <Motor_Straight+0x5c>
        dt = 0.001f;  // 最小时间差为1ms
 8007964:	4b73      	ldr	r3, [pc, #460]	@ (8007b34 <Motor_Straight+0x228>)
 8007966:	677b      	str	r3, [r7, #116]	@ 0x74

    // 静态变量存储上一次的编码器值
    static int32_t prev_enc1 = 0, prev_enc2 = 0, prev_enc3 = 0, prev_enc4 = 0;

    // 获取当前编码器值
    int32_t enc1 = Motor_GetEncoder(id1);
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff fd54 	bl	8007418 <Motor_GetEncoder>
 8007970:	6678      	str	r0, [r7, #100]	@ 0x64
    int32_t enc2 = -Motor_GetEncoder(id2);
 8007972:	79bb      	ldrb	r3, [r7, #6]
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff fd4f 	bl	8007418 <Motor_GetEncoder>
 800797a:	4603      	mov	r3, r0
 800797c:	425b      	negs	r3, r3
 800797e:	663b      	str	r3, [r7, #96]	@ 0x60
    int32_t enc3 = Motor_GetEncoder(id3);
 8007980:	797b      	ldrb	r3, [r7, #5]
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff fd48 	bl	8007418 <Motor_GetEncoder>
 8007988:	65f8      	str	r0, [r7, #92]	@ 0x5c
    int32_t enc4 = -Motor_GetEncoder(id4);
 800798a:	793b      	ldrb	r3, [r7, #4]
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff fd43 	bl	8007418 <Motor_GetEncoder>
 8007992:	4603      	mov	r3, r0
 8007994:	425b      	negs	r3, r3
 8007996:	65bb      	str	r3, [r7, #88]	@ 0x58

    // 计算编码器速度（单位时间内的变化量）
    float speed1 = (enc1 - prev_enc1) / dt;
 8007998:	4b67      	ldr	r3, [pc, #412]	@ (8007b38 <Motor_Straight+0x22c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	ee07 3a90 	vmov	s15, r3
 80079a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80079a8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80079ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079b0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float speed2 = (enc2 - prev_enc2) / dt;
 80079b4:	4b61      	ldr	r3, [pc, #388]	@ (8007b3c <Motor_Straight+0x230>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	ee07 3a90 	vmov	s15, r3
 80079c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80079c4:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80079c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079cc:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    float speed3 = (enc3 - prev_enc3) / dt;
 80079d0:	4b5b      	ldr	r3, [pc, #364]	@ (8007b40 <Motor_Straight+0x234>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	ee07 3a90 	vmov	s15, r3
 80079dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80079e0:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80079e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079e8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float speed4 = (enc4 - prev_enc4) / dt;
 80079ec:	4b55      	ldr	r3, [pc, #340]	@ (8007b44 <Motor_Straight+0x238>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	ee07 3a90 	vmov	s15, r3
 80079f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80079fc:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a04:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    // OLED_ShowNum(2,2,(int16_t)fabsf(speed3),4);  // 左后数字
    // OLED_ShowChar(2,9,speed4 >= 0 ? '+' : '-');  // 右前符号
    // OLED_ShowNum(2,10,(int16_t)fabsf(speed4),4);  // 右前数字

    // 更新上一次的编码器值
    prev_enc1 = enc1;
 8007a08:	4a4b      	ldr	r2, [pc, #300]	@ (8007b38 <Motor_Straight+0x22c>)
 8007a0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a0c:	6013      	str	r3, [r2, #0]
    prev_enc2 = enc2;
 8007a0e:	4a4b      	ldr	r2, [pc, #300]	@ (8007b3c <Motor_Straight+0x230>)
 8007a10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a12:	6013      	str	r3, [r2, #0]
    prev_enc3 = enc3;
 8007a14:	4a4a      	ldr	r2, [pc, #296]	@ (8007b40 <Motor_Straight+0x234>)
 8007a16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a18:	6013      	str	r3, [r2, #0]
    prev_enc4 = enc4;
 8007a1a:	4a4a      	ldr	r2, [pc, #296]	@ (8007b44 <Motor_Straight+0x238>)
 8007a1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a1e:	6013      	str	r3, [r2, #0]

    // 获取当前偏航角
    float pitch, roll, current_yaw;
    if (MPU6050_DMP_Get_Data(&pitch, &roll, &current_yaw) != 0) {
 8007a20:	f107 020c 	add.w	r2, r7, #12
 8007a24:	f107 0110 	add.w	r1, r7, #16
 8007a28:	f107 0314 	add.w	r3, r7, #20
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fc ff33 	bl	8004898 <MPU6050_DMP_Get_Data>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f040 816a 	bne.w	8007d0e <Motor_Straight+0x402>
        // Motor_SetSpeed(id2, 0);
        // Motor_SetSpeed(id3, 0);
        // Motor_SetSpeed(id4, 0);
        return;
    }
    *yaw = current_yaw;
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a40:	601a      	str	r2, [r3, #0]

    // 计算偏航角误差
    float yaw_error = *target_yaw - *yaw;
 8007a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a46:	ed93 7a00 	vldr	s14, [r3]
 8007a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a4e:	edd3 7a00 	vldr	s15, [r3]
 8007a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a56:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    if (yaw_error > 180) yaw_error -= 360;
 8007a5a:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007a5e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8007b48 <Motor_Straight+0x23c>
 8007a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a6a:	dd08      	ble.n	8007a7e <Motor_Straight+0x172>
 8007a6c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007a70:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8007b4c <Motor_Straight+0x240>
 8007a74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a78:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 8007a7c:	e010      	b.n	8007aa0 <Motor_Straight+0x194>
    else if (yaw_error < -180) yaw_error += 360;
 8007a7e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007a82:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8007b50 <Motor_Straight+0x244>
 8007a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a8e:	d507      	bpl.n	8007aa0 <Motor_Straight+0x194>
 8007a90:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007a94:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8007b4c <Motor_Straight+0x240>
 8007a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a9c:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

    // 计算速度误差
    float left_speed_error = speed1 - speed3;  // 左侧轮子速度同步
 8007aa0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8007aa4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8007aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007aac:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float right_speed_error = speed2 - speed4;  // 右侧轮子速度同步
 8007ab0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8007ab4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8007ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007abc:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float position_speed_error = (left_speed_error + right_speed_error) / 2;  // 左右两侧速度同步
 8007ac0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8007ac4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8007ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007acc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8007ad0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007ad4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // 速度分配 - 修正后的分配方式
    float base_speed = speed;
 8007ad8:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	@ 0x88
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ae4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    
    // 限制PID输出的最大值，防止过度修正
    float max_pid_output = base_speed * 0.3f;
 8007ae8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8007aec:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007b54 <Motor_Straight+0x248>
 8007af0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007af4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    
    // 计算偏航角PID输出
    float yaw_pid_output = 0.0f;
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (fabs(yaw_error) > 2.0f) {
 8007afe:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007b02:	eef0 7ae7 	vabs.f32	s15, s15
 8007b06:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8007b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b12:	dd23      	ble.n	8007b5c <Motor_Straight+0x250>
        yaw_pid_output = PID_Calculate(&pid_yaw, yaw_error, dt);
 8007b14:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007b18:	ed97 0a1c 	vldr	s0, [r7, #112]	@ 0x70
 8007b1c:	480e      	ldr	r0, [pc, #56]	@ (8007b58 <Motor_Straight+0x24c>)
 8007b1e:	f003 fa91 	bl	800b044 <PID_Calculate>
 8007b22:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
 8007b26:	e01c      	b.n	8007b62 <Motor_Straight+0x256>
 8007b28:	200005b0 	.word	0x200005b0
 8007b2c:	447a0000 	.word	0x447a0000
 8007b30:	3a83126f 	.word	0x3a83126f
 8007b34:	3a83126f 	.word	0x3a83126f
 8007b38:	200005b4 	.word	0x200005b4
 8007b3c:	200005b8 	.word	0x200005b8
 8007b40:	200005bc 	.word	0x200005bc
 8007b44:	200005c0 	.word	0x200005c0
 8007b48:	43340000 	.word	0x43340000
 8007b4c:	43b40000 	.word	0x43b40000
 8007b50:	c3340000 	.word	0xc3340000
 8007b54:	3e99999a 	.word	0x3e99999a
 8007b58:	20000070 	.word	0x20000070
        // yaw_pid_output = fmaxf(fminf(yaw_pid_output, max_pid_output*1), -max_pid_output*1);
    } else {
        // 误差小于1度时，重置PID控制器
        PID_Reset(&pid_yaw);
 8007b5c:	486e      	ldr	r0, [pc, #440]	@ (8007d18 <Motor_Straight+0x40c>)
 8007b5e:	f003 faed 	bl	800b13c <PID_Reset>
    }
    
    // 计算左右轮组的速度PID输出
    float left_pid_output = PID_Calculate(&pid_front, left_speed_error, dt);
 8007b62:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007b66:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8007b6a:	486c      	ldr	r0, [pc, #432]	@ (8007d1c <Motor_Straight+0x410>)
 8007b6c:	f003 fa6a 	bl	800b044 <PID_Calculate>
 8007b70:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
    float right_pid_output = PID_Calculate(&pid_rear, right_speed_error, dt);
 8007b74:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007b78:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8007b7c:	4868      	ldr	r0, [pc, #416]	@ (8007d20 <Motor_Straight+0x414>)
 8007b7e:	f003 fa61 	bl	800b044 <PID_Calculate>
 8007b82:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
    float position_pid_output = PID_Calculate(&pid_position, position_speed_error + yaw_pid_output, dt);
 8007b86:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8007b8a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b92:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007b96:	eeb0 0a67 	vmov.f32	s0, s15
 8007b9a:	4862      	ldr	r0, [pc, #392]	@ (8007d24 <Motor_Straight+0x418>)
 8007b9c:	f003 fa52 	bl	800b044 <PID_Calculate>
 8007ba0:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    // left_pid_output = fmaxf(fminf(left_pid_output, max_pid_output*1), -max_pid_output*1);
    // right_pid_output = fmaxf(fminf(right_pid_output, max_pid_output*1), -max_pid_output*1);
    // position_pid_output = fmaxf(fminf(position_pid_output, max_pid_output*1), -max_pid_output*1);
    
    // 左侧轮子 - 正转
    float motor_speed1 = -(base_speed - left_pid_output - position_pid_output - yaw_pid_output);  // 左前
 8007ba4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007ba8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8007bac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007bb0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007bb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007bb8:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bc0:	eef1 7a67 	vneg.f32	s15, s15
 8007bc4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float motor_speed3 = (base_speed + left_pid_output - position_pid_output - yaw_pid_output);   // 左后
 8007bc8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007bcc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8007bd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007bd4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007bd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007bdc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007be4:	edc7 7a08 	vstr	s15, [r7, #32]
    
    // 右侧轮子 - 反转
    float motor_speed2 = (base_speed - right_pid_output + position_pid_output + yaw_pid_output);  // 右前
 8007be8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007bec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007bf0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007bf4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bfc:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8007c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c04:	edc7 7a07 	vstr	s15, [r7, #28]
    float motor_speed4 = -(base_speed + right_pid_output + position_pid_output + yaw_pid_output); // 右后
 8007c08:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007c0c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007c10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007c14:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007c18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007c1c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c24:	eef1 7a67 	vneg.f32	s15, s15
 8007c28:	edc7 7a06 	vstr	s15, [r7, #24]

    // 限幅
    motor_speed1 = fmaxf(fminf(motor_speed1, 100.0f), -100.0f);
 8007c2c:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8007d28 <Motor_Straight+0x41c>
 8007c30:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8007c34:	f00c f9d5 	bl	8013fe2 <fminf>
 8007c38:	eef0 7a40 	vmov.f32	s15, s0
 8007c3c:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8007d2c <Motor_Straight+0x420>
 8007c40:	eeb0 0a67 	vmov.f32	s0, s15
 8007c44:	f00c f9b0 	bl	8013fa8 <fmaxf>
 8007c48:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    motor_speed2 = fmaxf(fminf(motor_speed2, 100.0f), -100.0f);
 8007c4c:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8007d28 <Motor_Straight+0x41c>
 8007c50:	ed97 0a07 	vldr	s0, [r7, #28]
 8007c54:	f00c f9c5 	bl	8013fe2 <fminf>
 8007c58:	eef0 7a40 	vmov.f32	s15, s0
 8007c5c:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8007d2c <Motor_Straight+0x420>
 8007c60:	eeb0 0a67 	vmov.f32	s0, s15
 8007c64:	f00c f9a0 	bl	8013fa8 <fmaxf>
 8007c68:	ed87 0a07 	vstr	s0, [r7, #28]
    motor_speed3 = fmaxf(fminf(motor_speed3, 100.0f), -100.0f);
 8007c6c:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8007d28 <Motor_Straight+0x41c>
 8007c70:	ed97 0a08 	vldr	s0, [r7, #32]
 8007c74:	f00c f9b5 	bl	8013fe2 <fminf>
 8007c78:	eef0 7a40 	vmov.f32	s15, s0
 8007c7c:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8007d2c <Motor_Straight+0x420>
 8007c80:	eeb0 0a67 	vmov.f32	s0, s15
 8007c84:	f00c f990 	bl	8013fa8 <fmaxf>
 8007c88:	ed87 0a08 	vstr	s0, [r7, #32]
    motor_speed4 = fmaxf(fminf(motor_speed4, 100.0f), -100.0f);
 8007c8c:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8007d28 <Motor_Straight+0x41c>
 8007c90:	ed97 0a06 	vldr	s0, [r7, #24]
 8007c94:	f00c f9a5 	bl	8013fe2 <fminf>
 8007c98:	eef0 7a40 	vmov.f32	s15, s0
 8007c9c:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8007d2c <Motor_Straight+0x420>
 8007ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ca4:	f00c f980 	bl	8013fa8 <fmaxf>
 8007ca8:	ed87 0a06 	vstr	s0, [r7, #24]

    // 设置电机速度
    Motor_SetSpeed(id1, motor_speed1);
 8007cac:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8007cb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cb4:	ee17 3a90 	vmov	r3, s15
 8007cb8:	b21a      	sxth	r2, r3
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff facc 	bl	800725c <Motor_SetSpeed>
    Motor_SetSpeed(id2, motor_speed2);
 8007cc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8007cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ccc:	ee17 3a90 	vmov	r3, s15
 8007cd0:	b21a      	sxth	r2, r3
 8007cd2:	79bb      	ldrb	r3, [r7, #6]
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7ff fac0 	bl	800725c <Motor_SetSpeed>
    Motor_SetSpeed(id3, motor_speed3);
 8007cdc:	edd7 7a08 	vldr	s15, [r7, #32]
 8007ce0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ce4:	ee17 3a90 	vmov	r3, s15
 8007ce8:	b21a      	sxth	r2, r3
 8007cea:	797b      	ldrb	r3, [r7, #5]
 8007cec:	4611      	mov	r1, r2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff fab4 	bl	800725c <Motor_SetSpeed>
    Motor_SetSpeed(id4, motor_speed4);
 8007cf4:	edd7 7a06 	vldr	s15, [r7, #24]
 8007cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cfc:	ee17 3a90 	vmov	r3, s15
 8007d00:	b21a      	sxth	r2, r3
 8007d02:	793b      	ldrb	r3, [r7, #4]
 8007d04:	4611      	mov	r1, r2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7ff faa8 	bl	800725c <Motor_SetSpeed>
 8007d0c:	e000      	b.n	8007d10 <Motor_Straight+0x404>
        return;
 8007d0e:	bf00      	nop
}
 8007d10:	377c      	adds	r7, #124	@ 0x7c
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd90      	pop	{r4, r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20000070 	.word	0x20000070
 8007d1c:	20000088 	.word	0x20000088
 8007d20:	200000a0 	.word	0x200000a0
 8007d24:	200000b8 	.word	0x200000b8
 8007d28:	42c80000 	.word	0x42c80000
 8007d2c:	c2c80000 	.word	0xc2c80000

08007d30 <Adjust_Left_Motors_By_Distance>:
}

#define magnification 0.9
#define magnification_close 0.9

void Adjust_Left_Motors_By_Distance(Motor_ID id1, Motor_ID id3, Motor_ID id2, Motor_ID id4, float distance, float threshold) {
 8007d30:	b5b0      	push	{r4, r5, r7, lr}
 8007d32:	b08c      	sub	sp, #48	@ 0x30
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4604      	mov	r4, r0
 8007d38:	4608      	mov	r0, r1
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	ed87 0a02 	vstr	s0, [r7, #8]
 8007d42:	edc7 0a01 	vstr	s1, [r7, #4]
 8007d46:	4623      	mov	r3, r4
 8007d48:	73fb      	strb	r3, [r7, #15]
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	73bb      	strb	r3, [r7, #14]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	737b      	strb	r3, [r7, #13]
 8007d52:	4613      	mov	r3, r2
 8007d54:	733b      	strb	r3, [r7, #12]
    // 计算距离误差
    float distance_error = distance - threshold;
 8007d56:	ed97 7a02 	vldr	s14, [r7, #8]
 8007d5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8007d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d62:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    
    // 定义调整参数
    const float kp = 0.001f;  // 比例系数
 8007d66:	4b9f      	ldr	r3, [pc, #636]	@ (8007fe4 <Adjust_Left_Motors_By_Distance+0x2b4>)
 8007d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    const float max_adjustment = 0.3f;  // 最大速度调整量
 8007d6a:	4b9f      	ldr	r3, [pc, #636]	@ (8007fe8 <Adjust_Left_Motors_By_Distance+0x2b8>)
 8007d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    
    // 计算速度调整量（取绝对值）
    float speed_adjustment = fabsf(kp * distance_error);
 8007d6e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8007d72:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d7a:	eef0 7ae7 	vabs.f32	s15, s15
 8007d7e:	edc7 7a08 	vstr	s15, [r7, #32]
    
    // 限制速度调整量
    speed_adjustment = fminf(speed_adjustment, max_adjustment);
 8007d82:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8007d86:	ed97 0a08 	vldr	s0, [r7, #32]
 8007d8a:	f00c f92a 	bl	8013fe2 <fminf>
 8007d8e:	ed87 0a08 	vstr	s0, [r7, #32]
    
    // 获取当前电机速度
    uint32_t current_speed1 = __HAL_TIM_GET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel);
 8007d92:	7bfa      	ldrb	r2, [r7, #15]
 8007d94:	4995      	ldr	r1, [pc, #596]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007d96:	4613      	mov	r3, r2
 8007d98:	00db      	lsls	r3, r3, #3
 8007d9a:	4413      	add	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	440b      	add	r3, r1
 8007da0:	3304      	adds	r3, #4
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <Adjust_Left_Motors_By_Distance+0x8e>
 8007da8:	7bfa      	ldrb	r2, [r7, #15]
 8007daa:	4990      	ldr	r1, [pc, #576]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007dac:	4613      	mov	r3, r2
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	4413      	add	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dbc:	e035      	b.n	8007e2a <Adjust_Left_Motors_By_Distance+0xfa>
 8007dbe:	7bfa      	ldrb	r2, [r7, #15]
 8007dc0:	498a      	ldr	r1, [pc, #552]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	00db      	lsls	r3, r3, #3
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	440b      	add	r3, r1
 8007dcc:	3304      	adds	r3, #4
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d10a      	bne.n	8007dea <Adjust_Left_Motors_By_Distance+0xba>
 8007dd4:	7bfa      	ldrb	r2, [r7, #15]
 8007dd6:	4985      	ldr	r1, [pc, #532]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007dd8:	4613      	mov	r3, r2
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	440b      	add	r3, r1
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de8:	e01f      	b.n	8007e2a <Adjust_Left_Motors_By_Distance+0xfa>
 8007dea:	7bfa      	ldrb	r2, [r7, #15]
 8007dec:	497f      	ldr	r1, [pc, #508]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007dee:	4613      	mov	r3, r2
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	440b      	add	r3, r1
 8007df8:	3304      	adds	r3, #4
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d10a      	bne.n	8007e16 <Adjust_Left_Motors_By_Distance+0xe6>
 8007e00:	7bfa      	ldrb	r2, [r7, #15]
 8007e02:	497a      	ldr	r1, [pc, #488]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007e04:	4613      	mov	r3, r2
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	4413      	add	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	440b      	add	r3, r1
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e14:	e009      	b.n	8007e2a <Adjust_Left_Motors_By_Distance+0xfa>
 8007e16:	7bfa      	ldrb	r2, [r7, #15]
 8007e18:	4974      	ldr	r1, [pc, #464]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	440b      	add	r3, r1
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e2a:	61fb      	str	r3, [r7, #28]
    uint32_t current_speed2 = __HAL_TIM_GET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel);
 8007e2c:	7b7a      	ldrb	r2, [r7, #13]
 8007e2e:	496f      	ldr	r1, [pc, #444]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007e30:	4613      	mov	r3, r2
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	3304      	adds	r3, #4
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10a      	bne.n	8007e58 <Adjust_Left_Motors_By_Distance+0x128>
 8007e42:	7b7a      	ldrb	r2, [r7, #13]
 8007e44:	4969      	ldr	r1, [pc, #420]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007e46:	4613      	mov	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	440b      	add	r3, r1
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e56:	e035      	b.n	8007ec4 <Adjust_Left_Motors_By_Distance+0x194>
 8007e58:	7b7a      	ldrb	r2, [r7, #13]
 8007e5a:	4964      	ldr	r1, [pc, #400]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	4413      	add	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	440b      	add	r3, r1
 8007e66:	3304      	adds	r3, #4
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b04      	cmp	r3, #4
 8007e6c:	d10a      	bne.n	8007e84 <Adjust_Left_Motors_By_Distance+0x154>
 8007e6e:	7b7a      	ldrb	r2, [r7, #13]
 8007e70:	495e      	ldr	r1, [pc, #376]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007e72:	4613      	mov	r3, r2
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	4413      	add	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	440b      	add	r3, r1
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e82:	e01f      	b.n	8007ec4 <Adjust_Left_Motors_By_Distance+0x194>
 8007e84:	7b7a      	ldrb	r2, [r7, #13]
 8007e86:	4959      	ldr	r1, [pc, #356]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007e88:	4613      	mov	r3, r2
 8007e8a:	00db      	lsls	r3, r3, #3
 8007e8c:	4413      	add	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	440b      	add	r3, r1
 8007e92:	3304      	adds	r3, #4
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	d10a      	bne.n	8007eb0 <Adjust_Left_Motors_By_Distance+0x180>
 8007e9a:	7b7a      	ldrb	r2, [r7, #13]
 8007e9c:	4953      	ldr	r1, [pc, #332]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	00db      	lsls	r3, r3, #3
 8007ea2:	4413      	add	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	440b      	add	r3, r1
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eae:	e009      	b.n	8007ec4 <Adjust_Left_Motors_By_Distance+0x194>
 8007eb0:	7b7a      	ldrb	r2, [r7, #13]
 8007eb2:	494e      	ldr	r1, [pc, #312]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	00db      	lsls	r3, r3, #3
 8007eb8:	4413      	add	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	440b      	add	r3, r1
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec4:	61bb      	str	r3, [r7, #24]
    uint32_t current_speed3 = __HAL_TIM_GET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel);
 8007ec6:	7bba      	ldrb	r2, [r7, #14]
 8007ec8:	4948      	ldr	r1, [pc, #288]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007eca:	4613      	mov	r3, r2
 8007ecc:	00db      	lsls	r3, r3, #3
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <Adjust_Left_Motors_By_Distance+0x1c2>
 8007edc:	7bba      	ldrb	r2, [r7, #14]
 8007ede:	4943      	ldr	r1, [pc, #268]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	440b      	add	r3, r1
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ef0:	e035      	b.n	8007f5e <Adjust_Left_Motors_By_Distance+0x22e>
 8007ef2:	7bba      	ldrb	r2, [r7, #14]
 8007ef4:	493d      	ldr	r1, [pc, #244]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	00db      	lsls	r3, r3, #3
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	440b      	add	r3, r1
 8007f00:	3304      	adds	r3, #4
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d10a      	bne.n	8007f1e <Adjust_Left_Motors_By_Distance+0x1ee>
 8007f08:	7bba      	ldrb	r2, [r7, #14]
 8007f0a:	4938      	ldr	r1, [pc, #224]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	4413      	add	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	440b      	add	r3, r1
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f1c:	e01f      	b.n	8007f5e <Adjust_Left_Motors_By_Distance+0x22e>
 8007f1e:	7bba      	ldrb	r2, [r7, #14]
 8007f20:	4932      	ldr	r1, [pc, #200]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007f22:	4613      	mov	r3, r2
 8007f24:	00db      	lsls	r3, r3, #3
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d10a      	bne.n	8007f4a <Adjust_Left_Motors_By_Distance+0x21a>
 8007f34:	7bba      	ldrb	r2, [r7, #14]
 8007f36:	492d      	ldr	r1, [pc, #180]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007f38:	4613      	mov	r3, r2
 8007f3a:	00db      	lsls	r3, r3, #3
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	440b      	add	r3, r1
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f48:	e009      	b.n	8007f5e <Adjust_Left_Motors_By_Distance+0x22e>
 8007f4a:	7bba      	ldrb	r2, [r7, #14]
 8007f4c:	4927      	ldr	r1, [pc, #156]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007f4e:	4613      	mov	r3, r2
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	440b      	add	r3, r1
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5e:	617b      	str	r3, [r7, #20]
    uint32_t current_speed4 = __HAL_TIM_GET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel);
 8007f60:	7b3a      	ldrb	r2, [r7, #12]
 8007f62:	4922      	ldr	r1, [pc, #136]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007f64:	4613      	mov	r3, r2
 8007f66:	00db      	lsls	r3, r3, #3
 8007f68:	4413      	add	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	440b      	add	r3, r1
 8007f6e:	3304      	adds	r3, #4
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10a      	bne.n	8007f8c <Adjust_Left_Motors_By_Distance+0x25c>
 8007f76:	7b3a      	ldrb	r2, [r7, #12]
 8007f78:	491c      	ldr	r1, [pc, #112]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	00db      	lsls	r3, r3, #3
 8007f7e:	4413      	add	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	440b      	add	r3, r1
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f8a:	e03b      	b.n	8008004 <Adjust_Left_Motors_By_Distance+0x2d4>
 8007f8c:	7b3a      	ldrb	r2, [r7, #12]
 8007f8e:	4917      	ldr	r1, [pc, #92]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007f90:	4613      	mov	r3, r2
 8007f92:	00db      	lsls	r3, r3, #3
 8007f94:	4413      	add	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	440b      	add	r3, r1
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d10a      	bne.n	8007fb8 <Adjust_Left_Motors_By_Distance+0x288>
 8007fa2:	7b3a      	ldrb	r2, [r7, #12]
 8007fa4:	4911      	ldr	r1, [pc, #68]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	00db      	lsls	r3, r3, #3
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	440b      	add	r3, r1
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb6:	e025      	b.n	8008004 <Adjust_Left_Motors_By_Distance+0x2d4>
 8007fb8:	7b3a      	ldrb	r2, [r7, #12]
 8007fba:	490c      	ldr	r1, [pc, #48]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	4413      	add	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b08      	cmp	r3, #8
 8007fcc:	d110      	bne.n	8007ff0 <Adjust_Left_Motors_By_Distance+0x2c0>
 8007fce:	7b3a      	ldrb	r2, [r7, #12]
 8007fd0:	4906      	ldr	r1, [pc, #24]	@ (8007fec <Adjust_Left_Motors_By_Distance+0x2bc>)
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	4413      	add	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	440b      	add	r3, r1
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe2:	e00f      	b.n	8008004 <Adjust_Left_Motors_By_Distance+0x2d4>
 8007fe4:	3a83126f 	.word	0x3a83126f
 8007fe8:	3e99999a 	.word	0x3e99999a
 8007fec:	20000388 	.word	0x20000388
 8007ff0:	7b3a      	ldrb	r2, [r7, #12]
 8007ff2:	49b3      	ldr	r1, [pc, #716]	@ (80082c0 <Adjust_Left_Motors_By_Distance+0x590>)
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	440b      	add	r3, r1
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008004:	613b      	str	r3, [r7, #16]
    
    // 根据距离误差调整速度
    if (distance_error > 0) {  // 距离过远
 8008006:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800800a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800800e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008012:	f340 8382 	ble.w	800871a <Adjust_Left_Motors_By_Distance+0x9ea>
        // 左侧电机减速，右侧电机加速
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 - speed_adjustment * current_speed1 * magnification);
 8008016:	7bfa      	ldrb	r2, [r7, #15]
 8008018:	49a9      	ldr	r1, [pc, #676]	@ (80082c0 <Adjust_Left_Motors_By_Distance+0x590>)
 800801a:	4613      	mov	r3, r2
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	3304      	adds	r3, #4
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d12e      	bne.n	800808a <Adjust_Left_Motors_By_Distance+0x35a>
 800802c:	69f8      	ldr	r0, [r7, #28]
 800802e:	f7f8 fa69 	bl	8000504 <__aeabi_ui2d>
 8008032:	4604      	mov	r4, r0
 8008034:	460d      	mov	r5, r1
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	ee07 3a90 	vmov	s15, r3
 800803c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008040:	edd7 7a08 	vldr	s15, [r7, #32]
 8008044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008048:	ee17 0a90 	vmov	r0, s15
 800804c:	f7f8 fa7c 	bl	8000548 <__aeabi_f2d>
 8008050:	a399      	add	r3, pc, #612	@ (adr r3, 80082b8 <Adjust_Left_Motors_By_Distance+0x588>)
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	f7f8 facf 	bl	80005f8 <__aeabi_dmul>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 f911 	bl	8000288 <__aeabi_dsub>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	4610      	mov	r0, r2
 800806c:	4619      	mov	r1, r3
 800806e:	7bfa      	ldrb	r2, [r7, #15]
 8008070:	4c93      	ldr	r4, [pc, #588]	@ (80082c0 <Adjust_Left_Motors_By_Distance+0x590>)
 8008072:	4613      	mov	r3, r2
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4423      	add	r3, r4
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681c      	ldr	r4, [r3, #0]
 8008080:	f7f8 fd92 	bl	8000ba8 <__aeabi_d2uiz>
 8008084:	4603      	mov	r3, r0
 8008086:	6363      	str	r3, [r4, #52]	@ 0x34
 8008088:	e0a1      	b.n	80081ce <Adjust_Left_Motors_By_Distance+0x49e>
 800808a:	7bfa      	ldrb	r2, [r7, #15]
 800808c:	498c      	ldr	r1, [pc, #560]	@ (80082c0 <Adjust_Left_Motors_By_Distance+0x590>)
 800808e:	4613      	mov	r3, r2
 8008090:	00db      	lsls	r3, r3, #3
 8008092:	4413      	add	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	440b      	add	r3, r1
 8008098:	3304      	adds	r3, #4
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b04      	cmp	r3, #4
 800809e:	d12e      	bne.n	80080fe <Adjust_Left_Motors_By_Distance+0x3ce>
 80080a0:	69f8      	ldr	r0, [r7, #28]
 80080a2:	f7f8 fa2f 	bl	8000504 <__aeabi_ui2d>
 80080a6:	4604      	mov	r4, r0
 80080a8:	460d      	mov	r5, r1
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	ee07 3a90 	vmov	s15, r3
 80080b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80080b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80080b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080bc:	ee17 0a90 	vmov	r0, s15
 80080c0:	f7f8 fa42 	bl	8000548 <__aeabi_f2d>
 80080c4:	a37c      	add	r3, pc, #496	@ (adr r3, 80082b8 <Adjust_Left_Motors_By_Distance+0x588>)
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	f7f8 fa95 	bl	80005f8 <__aeabi_dmul>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4620      	mov	r0, r4
 80080d4:	4629      	mov	r1, r5
 80080d6:	f7f8 f8d7 	bl	8000288 <__aeabi_dsub>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	4610      	mov	r0, r2
 80080e0:	4619      	mov	r1, r3
 80080e2:	7bfa      	ldrb	r2, [r7, #15]
 80080e4:	4c76      	ldr	r4, [pc, #472]	@ (80082c0 <Adjust_Left_Motors_By_Distance+0x590>)
 80080e6:	4613      	mov	r3, r2
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4423      	add	r3, r4
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681c      	ldr	r4, [r3, #0]
 80080f4:	f7f8 fd58 	bl	8000ba8 <__aeabi_d2uiz>
 80080f8:	4603      	mov	r3, r0
 80080fa:	63a3      	str	r3, [r4, #56]	@ 0x38
 80080fc:	e067      	b.n	80081ce <Adjust_Left_Motors_By_Distance+0x49e>
 80080fe:	7bfa      	ldrb	r2, [r7, #15]
 8008100:	496f      	ldr	r1, [pc, #444]	@ (80082c0 <Adjust_Left_Motors_By_Distance+0x590>)
 8008102:	4613      	mov	r3, r2
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	440b      	add	r3, r1
 800810c:	3304      	adds	r3, #4
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b08      	cmp	r3, #8
 8008112:	d12e      	bne.n	8008172 <Adjust_Left_Motors_By_Distance+0x442>
 8008114:	69f8      	ldr	r0, [r7, #28]
 8008116:	f7f8 f9f5 	bl	8000504 <__aeabi_ui2d>
 800811a:	4604      	mov	r4, r0
 800811c:	460d      	mov	r5, r1
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	ee07 3a90 	vmov	s15, r3
 8008124:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008128:	edd7 7a08 	vldr	s15, [r7, #32]
 800812c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008130:	ee17 0a90 	vmov	r0, s15
 8008134:	f7f8 fa08 	bl	8000548 <__aeabi_f2d>
 8008138:	a35f      	add	r3, pc, #380	@ (adr r3, 80082b8 <Adjust_Left_Motors_By_Distance+0x588>)
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	f7f8 fa5b 	bl	80005f8 <__aeabi_dmul>
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	4620      	mov	r0, r4
 8008148:	4629      	mov	r1, r5
 800814a:	f7f8 f89d 	bl	8000288 <__aeabi_dsub>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	4610      	mov	r0, r2
 8008154:	4619      	mov	r1, r3
 8008156:	7bfa      	ldrb	r2, [r7, #15]
 8008158:	4c59      	ldr	r4, [pc, #356]	@ (80082c0 <Adjust_Left_Motors_By_Distance+0x590>)
 800815a:	4613      	mov	r3, r2
 800815c:	00db      	lsls	r3, r3, #3
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4423      	add	r3, r4
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681c      	ldr	r4, [r3, #0]
 8008168:	f7f8 fd1e 	bl	8000ba8 <__aeabi_d2uiz>
 800816c:	4603      	mov	r3, r0
 800816e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008170:	e02d      	b.n	80081ce <Adjust_Left_Motors_By_Distance+0x49e>
 8008172:	69f8      	ldr	r0, [r7, #28]
 8008174:	f7f8 f9c6 	bl	8000504 <__aeabi_ui2d>
 8008178:	4604      	mov	r4, r0
 800817a:	460d      	mov	r5, r1
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008186:	edd7 7a08 	vldr	s15, [r7, #32]
 800818a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800818e:	ee17 0a90 	vmov	r0, s15
 8008192:	f7f8 f9d9 	bl	8000548 <__aeabi_f2d>
 8008196:	a348      	add	r3, pc, #288	@ (adr r3, 80082b8 <Adjust_Left_Motors_By_Distance+0x588>)
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	f7f8 fa2c 	bl	80005f8 <__aeabi_dmul>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4620      	mov	r0, r4
 80081a6:	4629      	mov	r1, r5
 80081a8:	f7f8 f86e 	bl	8000288 <__aeabi_dsub>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4610      	mov	r0, r2
 80081b2:	4619      	mov	r1, r3
 80081b4:	7bfa      	ldrb	r2, [r7, #15]
 80081b6:	4c42      	ldr	r4, [pc, #264]	@ (80082c0 <Adjust_Left_Motors_By_Distance+0x590>)
 80081b8:	4613      	mov	r3, r2
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	4413      	add	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4423      	add	r3, r4
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681c      	ldr	r4, [r3, #0]
 80081c6:	f7f8 fcef 	bl	8000ba8 <__aeabi_d2uiz>
 80081ca:	4603      	mov	r3, r0
 80081cc:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjustment * current_speed3 * magnification);
 80081ce:	7bba      	ldrb	r2, [r7, #14]
 80081d0:	493b      	ldr	r1, [pc, #236]	@ (80082c0 <Adjust_Left_Motors_By_Distance+0x590>)
 80081d2:	4613      	mov	r3, r2
 80081d4:	00db      	lsls	r3, r3, #3
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	3304      	adds	r3, #4
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d12e      	bne.n	8008242 <Adjust_Left_Motors_By_Distance+0x512>
 80081e4:	6978      	ldr	r0, [r7, #20]
 80081e6:	f7f8 f98d 	bl	8000504 <__aeabi_ui2d>
 80081ea:	4604      	mov	r4, r0
 80081ec:	460d      	mov	r5, r1
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	ee07 3a90 	vmov	s15, r3
 80081f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80081f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80081fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008200:	ee17 0a90 	vmov	r0, s15
 8008204:	f7f8 f9a0 	bl	8000548 <__aeabi_f2d>
 8008208:	a32b      	add	r3, pc, #172	@ (adr r3, 80082b8 <Adjust_Left_Motors_By_Distance+0x588>)
 800820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820e:	f7f8 f9f3 	bl	80005f8 <__aeabi_dmul>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	4620      	mov	r0, r4
 8008218:	4629      	mov	r1, r5
 800821a:	f7f8 f835 	bl	8000288 <__aeabi_dsub>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4610      	mov	r0, r2
 8008224:	4619      	mov	r1, r3
 8008226:	7bba      	ldrb	r2, [r7, #14]
 8008228:	4c25      	ldr	r4, [pc, #148]	@ (80082c0 <Adjust_Left_Motors_By_Distance+0x590>)
 800822a:	4613      	mov	r3, r2
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4423      	add	r3, r4
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681c      	ldr	r4, [r3, #0]
 8008238:	f7f8 fcb6 	bl	8000ba8 <__aeabi_d2uiz>
 800823c:	4603      	mov	r3, r0
 800823e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008240:	e0a8      	b.n	8008394 <Adjust_Left_Motors_By_Distance+0x664>
 8008242:	7bba      	ldrb	r2, [r7, #14]
 8008244:	491e      	ldr	r1, [pc, #120]	@ (80082c0 <Adjust_Left_Motors_By_Distance+0x590>)
 8008246:	4613      	mov	r3, r2
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	4413      	add	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	440b      	add	r3, r1
 8008250:	3304      	adds	r3, #4
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b04      	cmp	r3, #4
 8008256:	d135      	bne.n	80082c4 <Adjust_Left_Motors_By_Distance+0x594>
 8008258:	6978      	ldr	r0, [r7, #20]
 800825a:	f7f8 f953 	bl	8000504 <__aeabi_ui2d>
 800825e:	4604      	mov	r4, r0
 8008260:	460d      	mov	r5, r1
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	ee07 3a90 	vmov	s15, r3
 8008268:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800826c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008274:	ee17 0a90 	vmov	r0, s15
 8008278:	f7f8 f966 	bl	8000548 <__aeabi_f2d>
 800827c:	a30e      	add	r3, pc, #56	@ (adr r3, 80082b8 <Adjust_Left_Motors_By_Distance+0x588>)
 800827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008282:	f7f8 f9b9 	bl	80005f8 <__aeabi_dmul>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	4620      	mov	r0, r4
 800828c:	4629      	mov	r1, r5
 800828e:	f7f7 fffb 	bl	8000288 <__aeabi_dsub>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	4610      	mov	r0, r2
 8008298:	4619      	mov	r1, r3
 800829a:	7bba      	ldrb	r2, [r7, #14]
 800829c:	4c08      	ldr	r4, [pc, #32]	@ (80082c0 <Adjust_Left_Motors_By_Distance+0x590>)
 800829e:	4613      	mov	r3, r2
 80082a0:	00db      	lsls	r3, r3, #3
 80082a2:	4413      	add	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4423      	add	r3, r4
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681c      	ldr	r4, [r3, #0]
 80082ac:	f7f8 fc7c 	bl	8000ba8 <__aeabi_d2uiz>
 80082b0:	4603      	mov	r3, r0
 80082b2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80082b4:	e06e      	b.n	8008394 <Adjust_Left_Motors_By_Distance+0x664>
 80082b6:	bf00      	nop
 80082b8:	cccccccd 	.word	0xcccccccd
 80082bc:	3feccccc 	.word	0x3feccccc
 80082c0:	20000388 	.word	0x20000388
 80082c4:	7bba      	ldrb	r2, [r7, #14]
 80082c6:	49c2      	ldr	r1, [pc, #776]	@ (80085d0 <Adjust_Left_Motors_By_Distance+0x8a0>)
 80082c8:	4613      	mov	r3, r2
 80082ca:	00db      	lsls	r3, r3, #3
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	440b      	add	r3, r1
 80082d2:	3304      	adds	r3, #4
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b08      	cmp	r3, #8
 80082d8:	d12e      	bne.n	8008338 <Adjust_Left_Motors_By_Distance+0x608>
 80082da:	6978      	ldr	r0, [r7, #20]
 80082dc:	f7f8 f912 	bl	8000504 <__aeabi_ui2d>
 80082e0:	4604      	mov	r4, r0
 80082e2:	460d      	mov	r5, r1
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80082ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80082f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f6:	ee17 0a90 	vmov	r0, s15
 80082fa:	f7f8 f925 	bl	8000548 <__aeabi_f2d>
 80082fe:	a3b2      	add	r3, pc, #712	@ (adr r3, 80085c8 <Adjust_Left_Motors_By_Distance+0x898>)
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	f7f8 f978 	bl	80005f8 <__aeabi_dmul>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4620      	mov	r0, r4
 800830e:	4629      	mov	r1, r5
 8008310:	f7f7 ffba 	bl	8000288 <__aeabi_dsub>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	4610      	mov	r0, r2
 800831a:	4619      	mov	r1, r3
 800831c:	7bba      	ldrb	r2, [r7, #14]
 800831e:	4cac      	ldr	r4, [pc, #688]	@ (80085d0 <Adjust_Left_Motors_By_Distance+0x8a0>)
 8008320:	4613      	mov	r3, r2
 8008322:	00db      	lsls	r3, r3, #3
 8008324:	4413      	add	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4423      	add	r3, r4
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681c      	ldr	r4, [r3, #0]
 800832e:	f7f8 fc3b 	bl	8000ba8 <__aeabi_d2uiz>
 8008332:	4603      	mov	r3, r0
 8008334:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008336:	e02d      	b.n	8008394 <Adjust_Left_Motors_By_Distance+0x664>
 8008338:	6978      	ldr	r0, [r7, #20]
 800833a:	f7f8 f8e3 	bl	8000504 <__aeabi_ui2d>
 800833e:	4604      	mov	r4, r0
 8008340:	460d      	mov	r5, r1
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	ee07 3a90 	vmov	s15, r3
 8008348:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800834c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008354:	ee17 0a90 	vmov	r0, s15
 8008358:	f7f8 f8f6 	bl	8000548 <__aeabi_f2d>
 800835c:	a39a      	add	r3, pc, #616	@ (adr r3, 80085c8 <Adjust_Left_Motors_By_Distance+0x898>)
 800835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008362:	f7f8 f949 	bl	80005f8 <__aeabi_dmul>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4620      	mov	r0, r4
 800836c:	4629      	mov	r1, r5
 800836e:	f7f7 ff8b 	bl	8000288 <__aeabi_dsub>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4610      	mov	r0, r2
 8008378:	4619      	mov	r1, r3
 800837a:	7bba      	ldrb	r2, [r7, #14]
 800837c:	4c94      	ldr	r4, [pc, #592]	@ (80085d0 <Adjust_Left_Motors_By_Distance+0x8a0>)
 800837e:	4613      	mov	r3, r2
 8008380:	00db      	lsls	r3, r3, #3
 8008382:	4413      	add	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4423      	add	r3, r4
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681c      	ldr	r4, [r3, #0]
 800838c:	f7f8 fc0c 	bl	8000ba8 <__aeabi_d2uiz>
 8008390:	4603      	mov	r3, r0
 8008392:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 + speed_adjustment * current_speed2 * magnification);
 8008394:	7b7a      	ldrb	r2, [r7, #13]
 8008396:	498e      	ldr	r1, [pc, #568]	@ (80085d0 <Adjust_Left_Motors_By_Distance+0x8a0>)
 8008398:	4613      	mov	r3, r2
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	440b      	add	r3, r1
 80083a2:	3304      	adds	r3, #4
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d12e      	bne.n	8008408 <Adjust_Left_Motors_By_Distance+0x6d8>
 80083aa:	69b8      	ldr	r0, [r7, #24]
 80083ac:	f7f8 f8aa 	bl	8000504 <__aeabi_ui2d>
 80083b0:	4604      	mov	r4, r0
 80083b2:	460d      	mov	r5, r1
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	ee07 3a90 	vmov	s15, r3
 80083ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80083be:	edd7 7a08 	vldr	s15, [r7, #32]
 80083c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c6:	ee17 0a90 	vmov	r0, s15
 80083ca:	f7f8 f8bd 	bl	8000548 <__aeabi_f2d>
 80083ce:	a37e      	add	r3, pc, #504	@ (adr r3, 80085c8 <Adjust_Left_Motors_By_Distance+0x898>)
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	f7f8 f910 	bl	80005f8 <__aeabi_dmul>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4620      	mov	r0, r4
 80083de:	4629      	mov	r1, r5
 80083e0:	f7f7 ff54 	bl	800028c <__adddf3>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	4610      	mov	r0, r2
 80083ea:	4619      	mov	r1, r3
 80083ec:	7b7a      	ldrb	r2, [r7, #13]
 80083ee:	4c78      	ldr	r4, [pc, #480]	@ (80085d0 <Adjust_Left_Motors_By_Distance+0x8a0>)
 80083f0:	4613      	mov	r3, r2
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	4413      	add	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4423      	add	r3, r4
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681c      	ldr	r4, [r3, #0]
 80083fe:	f7f8 fbd3 	bl	8000ba8 <__aeabi_d2uiz>
 8008402:	4603      	mov	r3, r0
 8008404:	6363      	str	r3, [r4, #52]	@ 0x34
 8008406:	e0a1      	b.n	800854c <Adjust_Left_Motors_By_Distance+0x81c>
 8008408:	7b7a      	ldrb	r2, [r7, #13]
 800840a:	4971      	ldr	r1, [pc, #452]	@ (80085d0 <Adjust_Left_Motors_By_Distance+0x8a0>)
 800840c:	4613      	mov	r3, r2
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	3304      	adds	r3, #4
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b04      	cmp	r3, #4
 800841c:	d12e      	bne.n	800847c <Adjust_Left_Motors_By_Distance+0x74c>
 800841e:	69b8      	ldr	r0, [r7, #24]
 8008420:	f7f8 f870 	bl	8000504 <__aeabi_ui2d>
 8008424:	4604      	mov	r4, r0
 8008426:	460d      	mov	r5, r1
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	ee07 3a90 	vmov	s15, r3
 800842e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008432:	edd7 7a08 	vldr	s15, [r7, #32]
 8008436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843a:	ee17 0a90 	vmov	r0, s15
 800843e:	f7f8 f883 	bl	8000548 <__aeabi_f2d>
 8008442:	a361      	add	r3, pc, #388	@ (adr r3, 80085c8 <Adjust_Left_Motors_By_Distance+0x898>)
 8008444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008448:	f7f8 f8d6 	bl	80005f8 <__aeabi_dmul>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4620      	mov	r0, r4
 8008452:	4629      	mov	r1, r5
 8008454:	f7f7 ff1a 	bl	800028c <__adddf3>
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	4610      	mov	r0, r2
 800845e:	4619      	mov	r1, r3
 8008460:	7b7a      	ldrb	r2, [r7, #13]
 8008462:	4c5b      	ldr	r4, [pc, #364]	@ (80085d0 <Adjust_Left_Motors_By_Distance+0x8a0>)
 8008464:	4613      	mov	r3, r2
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4423      	add	r3, r4
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681c      	ldr	r4, [r3, #0]
 8008472:	f7f8 fb99 	bl	8000ba8 <__aeabi_d2uiz>
 8008476:	4603      	mov	r3, r0
 8008478:	63a3      	str	r3, [r4, #56]	@ 0x38
 800847a:	e067      	b.n	800854c <Adjust_Left_Motors_By_Distance+0x81c>
 800847c:	7b7a      	ldrb	r2, [r7, #13]
 800847e:	4954      	ldr	r1, [pc, #336]	@ (80085d0 <Adjust_Left_Motors_By_Distance+0x8a0>)
 8008480:	4613      	mov	r3, r2
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	4413      	add	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	440b      	add	r3, r1
 800848a:	3304      	adds	r3, #4
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b08      	cmp	r3, #8
 8008490:	d12e      	bne.n	80084f0 <Adjust_Left_Motors_By_Distance+0x7c0>
 8008492:	69b8      	ldr	r0, [r7, #24]
 8008494:	f7f8 f836 	bl	8000504 <__aeabi_ui2d>
 8008498:	4604      	mov	r4, r0
 800849a:	460d      	mov	r5, r1
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80084a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80084aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ae:	ee17 0a90 	vmov	r0, s15
 80084b2:	f7f8 f849 	bl	8000548 <__aeabi_f2d>
 80084b6:	a344      	add	r3, pc, #272	@ (adr r3, 80085c8 <Adjust_Left_Motors_By_Distance+0x898>)
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	f7f8 f89c 	bl	80005f8 <__aeabi_dmul>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4620      	mov	r0, r4
 80084c6:	4629      	mov	r1, r5
 80084c8:	f7f7 fee0 	bl	800028c <__adddf3>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4610      	mov	r0, r2
 80084d2:	4619      	mov	r1, r3
 80084d4:	7b7a      	ldrb	r2, [r7, #13]
 80084d6:	4c3e      	ldr	r4, [pc, #248]	@ (80085d0 <Adjust_Left_Motors_By_Distance+0x8a0>)
 80084d8:	4613      	mov	r3, r2
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	4413      	add	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4423      	add	r3, r4
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681c      	ldr	r4, [r3, #0]
 80084e6:	f7f8 fb5f 	bl	8000ba8 <__aeabi_d2uiz>
 80084ea:	4603      	mov	r3, r0
 80084ec:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80084ee:	e02d      	b.n	800854c <Adjust_Left_Motors_By_Distance+0x81c>
 80084f0:	69b8      	ldr	r0, [r7, #24]
 80084f2:	f7f8 f807 	bl	8000504 <__aeabi_ui2d>
 80084f6:	4604      	mov	r4, r0
 80084f8:	460d      	mov	r5, r1
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	ee07 3a90 	vmov	s15, r3
 8008500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008504:	edd7 7a08 	vldr	s15, [r7, #32]
 8008508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800850c:	ee17 0a90 	vmov	r0, s15
 8008510:	f7f8 f81a 	bl	8000548 <__aeabi_f2d>
 8008514:	a32c      	add	r3, pc, #176	@ (adr r3, 80085c8 <Adjust_Left_Motors_By_Distance+0x898>)
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	f7f8 f86d 	bl	80005f8 <__aeabi_dmul>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	4620      	mov	r0, r4
 8008524:	4629      	mov	r1, r5
 8008526:	f7f7 feb1 	bl	800028c <__adddf3>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4610      	mov	r0, r2
 8008530:	4619      	mov	r1, r3
 8008532:	7b7a      	ldrb	r2, [r7, #13]
 8008534:	4c26      	ldr	r4, [pc, #152]	@ (80085d0 <Adjust_Left_Motors_By_Distance+0x8a0>)
 8008536:	4613      	mov	r3, r2
 8008538:	00db      	lsls	r3, r3, #3
 800853a:	4413      	add	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4423      	add	r3, r4
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681c      	ldr	r4, [r3, #0]
 8008544:	f7f8 fb30 	bl	8000ba8 <__aeabi_d2uiz>
 8008548:	4603      	mov	r3, r0
 800854a:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjustment * current_speed4 * magnification);
 800854c:	7b3a      	ldrb	r2, [r7, #12]
 800854e:	4920      	ldr	r1, [pc, #128]	@ (80085d0 <Adjust_Left_Motors_By_Distance+0x8a0>)
 8008550:	4613      	mov	r3, r2
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	3304      	adds	r3, #4
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d138      	bne.n	80085d4 <Adjust_Left_Motors_By_Distance+0x8a4>
 8008562:	6938      	ldr	r0, [r7, #16]
 8008564:	f7f7 ffce 	bl	8000504 <__aeabi_ui2d>
 8008568:	4604      	mov	r4, r0
 800856a:	460d      	mov	r5, r1
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	ee07 3a90 	vmov	s15, r3
 8008572:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008576:	edd7 7a08 	vldr	s15, [r7, #32]
 800857a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800857e:	ee17 0a90 	vmov	r0, s15
 8008582:	f7f7 ffe1 	bl	8000548 <__aeabi_f2d>
 8008586:	a310      	add	r3, pc, #64	@ (adr r3, 80085c8 <Adjust_Left_Motors_By_Distance+0x898>)
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f7f8 f834 	bl	80005f8 <__aeabi_dmul>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4620      	mov	r0, r4
 8008596:	4629      	mov	r1, r5
 8008598:	f7f7 fe78 	bl	800028c <__adddf3>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4610      	mov	r0, r2
 80085a2:	4619      	mov	r1, r3
 80085a4:	7b3a      	ldrb	r2, [r7, #12]
 80085a6:	4c0a      	ldr	r4, [pc, #40]	@ (80085d0 <Adjust_Left_Motors_By_Distance+0x8a0>)
 80085a8:	4613      	mov	r3, r2
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4423      	add	r3, r4
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681c      	ldr	r4, [r3, #0]
 80085b6:	f7f8 faf7 	bl	8000ba8 <__aeabi_d2uiz>
 80085ba:	4603      	mov	r3, r0
 80085bc:	6363      	str	r3, [r4, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 - speed_adjustment * current_speed2 * magnification_close);
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjustment * current_speed4 * magnification_close);
        // OLED_ShowNum(4, 7, speed_adjustment * current_speed4 * magnification_close, 4);
        // OLED_ShowNum(4, 12, current_speed4, 4);
    }
}
 80085be:	f000 bc2c 	b.w	8008e1a <Adjust_Left_Motors_By_Distance+0x10ea>
 80085c2:	bf00      	nop
 80085c4:	f3af 8000 	nop.w
 80085c8:	cccccccd 	.word	0xcccccccd
 80085cc:	3feccccc 	.word	0x3feccccc
 80085d0:	20000388 	.word	0x20000388
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjustment * current_speed4 * magnification);
 80085d4:	7b3a      	ldrb	r2, [r7, #12]
 80085d6:	49aa      	ldr	r1, [pc, #680]	@ (8008880 <Adjust_Left_Motors_By_Distance+0xb50>)
 80085d8:	4613      	mov	r3, r2
 80085da:	00db      	lsls	r3, r3, #3
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	3304      	adds	r3, #4
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	d12e      	bne.n	8008648 <Adjust_Left_Motors_By_Distance+0x918>
 80085ea:	6938      	ldr	r0, [r7, #16]
 80085ec:	f7f7 ff8a 	bl	8000504 <__aeabi_ui2d>
 80085f0:	4604      	mov	r4, r0
 80085f2:	460d      	mov	r5, r1
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	ee07 3a90 	vmov	s15, r3
 80085fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80085fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8008602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008606:	ee17 0a90 	vmov	r0, s15
 800860a:	f7f7 ff9d 	bl	8000548 <__aeabi_f2d>
 800860e:	a39a      	add	r3, pc, #616	@ (adr r3, 8008878 <Adjust_Left_Motors_By_Distance+0xb48>)
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	f7f7 fff0 	bl	80005f8 <__aeabi_dmul>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	4620      	mov	r0, r4
 800861e:	4629      	mov	r1, r5
 8008620:	f7f7 fe34 	bl	800028c <__adddf3>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4610      	mov	r0, r2
 800862a:	4619      	mov	r1, r3
 800862c:	7b3a      	ldrb	r2, [r7, #12]
 800862e:	4c94      	ldr	r4, [pc, #592]	@ (8008880 <Adjust_Left_Motors_By_Distance+0xb50>)
 8008630:	4613      	mov	r3, r2
 8008632:	00db      	lsls	r3, r3, #3
 8008634:	4413      	add	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4423      	add	r3, r4
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681c      	ldr	r4, [r3, #0]
 800863e:	f7f8 fab3 	bl	8000ba8 <__aeabi_d2uiz>
 8008642:	4603      	mov	r3, r0
 8008644:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008646:	e3e8      	b.n	8008e1a <Adjust_Left_Motors_By_Distance+0x10ea>
 8008648:	7b3a      	ldrb	r2, [r7, #12]
 800864a:	498d      	ldr	r1, [pc, #564]	@ (8008880 <Adjust_Left_Motors_By_Distance+0xb50>)
 800864c:	4613      	mov	r3, r2
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	4413      	add	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	440b      	add	r3, r1
 8008656:	3304      	adds	r3, #4
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b08      	cmp	r3, #8
 800865c:	d12e      	bne.n	80086bc <Adjust_Left_Motors_By_Distance+0x98c>
 800865e:	6938      	ldr	r0, [r7, #16]
 8008660:	f7f7 ff50 	bl	8000504 <__aeabi_ui2d>
 8008664:	4604      	mov	r4, r0
 8008666:	460d      	mov	r5, r1
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008672:	edd7 7a08 	vldr	s15, [r7, #32]
 8008676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867a:	ee17 0a90 	vmov	r0, s15
 800867e:	f7f7 ff63 	bl	8000548 <__aeabi_f2d>
 8008682:	a37d      	add	r3, pc, #500	@ (adr r3, 8008878 <Adjust_Left_Motors_By_Distance+0xb48>)
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	f7f7 ffb6 	bl	80005f8 <__aeabi_dmul>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4620      	mov	r0, r4
 8008692:	4629      	mov	r1, r5
 8008694:	f7f7 fdfa 	bl	800028c <__adddf3>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	4610      	mov	r0, r2
 800869e:	4619      	mov	r1, r3
 80086a0:	7b3a      	ldrb	r2, [r7, #12]
 80086a2:	4c77      	ldr	r4, [pc, #476]	@ (8008880 <Adjust_Left_Motors_By_Distance+0xb50>)
 80086a4:	4613      	mov	r3, r2
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4423      	add	r3, r4
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681c      	ldr	r4, [r3, #0]
 80086b2:	f7f8 fa79 	bl	8000ba8 <__aeabi_d2uiz>
 80086b6:	4603      	mov	r3, r0
 80086b8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80086ba:	e3ae      	b.n	8008e1a <Adjust_Left_Motors_By_Distance+0x10ea>
 80086bc:	6938      	ldr	r0, [r7, #16]
 80086be:	f7f7 ff21 	bl	8000504 <__aeabi_ui2d>
 80086c2:	4604      	mov	r4, r0
 80086c4:	460d      	mov	r5, r1
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	ee07 3a90 	vmov	s15, r3
 80086cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80086d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80086d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d8:	ee17 0a90 	vmov	r0, s15
 80086dc:	f7f7 ff34 	bl	8000548 <__aeabi_f2d>
 80086e0:	a365      	add	r3, pc, #404	@ (adr r3, 8008878 <Adjust_Left_Motors_By_Distance+0xb48>)
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	f7f7 ff87 	bl	80005f8 <__aeabi_dmul>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	4620      	mov	r0, r4
 80086f0:	4629      	mov	r1, r5
 80086f2:	f7f7 fdcb 	bl	800028c <__adddf3>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4610      	mov	r0, r2
 80086fc:	4619      	mov	r1, r3
 80086fe:	7b3a      	ldrb	r2, [r7, #12]
 8008700:	4c5f      	ldr	r4, [pc, #380]	@ (8008880 <Adjust_Left_Motors_By_Distance+0xb50>)
 8008702:	4613      	mov	r3, r2
 8008704:	00db      	lsls	r3, r3, #3
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4423      	add	r3, r4
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681c      	ldr	r4, [r3, #0]
 8008710:	f7f8 fa4a 	bl	8000ba8 <__aeabi_d2uiz>
 8008714:	4603      	mov	r3, r0
 8008716:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8008718:	e37f      	b.n	8008e1a <Adjust_Left_Motors_By_Distance+0x10ea>
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 + speed_adjustment * current_speed1 * magnification_close);
 800871a:	7bfa      	ldrb	r2, [r7, #15]
 800871c:	4958      	ldr	r1, [pc, #352]	@ (8008880 <Adjust_Left_Motors_By_Distance+0xb50>)
 800871e:	4613      	mov	r3, r2
 8008720:	00db      	lsls	r3, r3, #3
 8008722:	4413      	add	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	440b      	add	r3, r1
 8008728:	3304      	adds	r3, #4
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d12e      	bne.n	800878e <Adjust_Left_Motors_By_Distance+0xa5e>
 8008730:	69f8      	ldr	r0, [r7, #28]
 8008732:	f7f7 fee7 	bl	8000504 <__aeabi_ui2d>
 8008736:	4604      	mov	r4, r0
 8008738:	460d      	mov	r5, r1
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	ee07 3a90 	vmov	s15, r3
 8008740:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008744:	edd7 7a08 	vldr	s15, [r7, #32]
 8008748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800874c:	ee17 0a90 	vmov	r0, s15
 8008750:	f7f7 fefa 	bl	8000548 <__aeabi_f2d>
 8008754:	a348      	add	r3, pc, #288	@ (adr r3, 8008878 <Adjust_Left_Motors_By_Distance+0xb48>)
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	f7f7 ff4d 	bl	80005f8 <__aeabi_dmul>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4620      	mov	r0, r4
 8008764:	4629      	mov	r1, r5
 8008766:	f7f7 fd91 	bl	800028c <__adddf3>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	4610      	mov	r0, r2
 8008770:	4619      	mov	r1, r3
 8008772:	7bfa      	ldrb	r2, [r7, #15]
 8008774:	4c42      	ldr	r4, [pc, #264]	@ (8008880 <Adjust_Left_Motors_By_Distance+0xb50>)
 8008776:	4613      	mov	r3, r2
 8008778:	00db      	lsls	r3, r3, #3
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4423      	add	r3, r4
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681c      	ldr	r4, [r3, #0]
 8008784:	f7f8 fa10 	bl	8000ba8 <__aeabi_d2uiz>
 8008788:	4603      	mov	r3, r0
 800878a:	6363      	str	r3, [r4, #52]	@ 0x34
 800878c:	e0a8      	b.n	80088e0 <Adjust_Left_Motors_By_Distance+0xbb0>
 800878e:	7bfa      	ldrb	r2, [r7, #15]
 8008790:	493b      	ldr	r1, [pc, #236]	@ (8008880 <Adjust_Left_Motors_By_Distance+0xb50>)
 8008792:	4613      	mov	r3, r2
 8008794:	00db      	lsls	r3, r3, #3
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	440b      	add	r3, r1
 800879c:	3304      	adds	r3, #4
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b04      	cmp	r3, #4
 80087a2:	d12e      	bne.n	8008802 <Adjust_Left_Motors_By_Distance+0xad2>
 80087a4:	69f8      	ldr	r0, [r7, #28]
 80087a6:	f7f7 fead 	bl	8000504 <__aeabi_ui2d>
 80087aa:	4604      	mov	r4, r0
 80087ac:	460d      	mov	r5, r1
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	ee07 3a90 	vmov	s15, r3
 80087b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80087b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80087bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c0:	ee17 0a90 	vmov	r0, s15
 80087c4:	f7f7 fec0 	bl	8000548 <__aeabi_f2d>
 80087c8:	a32b      	add	r3, pc, #172	@ (adr r3, 8008878 <Adjust_Left_Motors_By_Distance+0xb48>)
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f7f7 ff13 	bl	80005f8 <__aeabi_dmul>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4620      	mov	r0, r4
 80087d8:	4629      	mov	r1, r5
 80087da:	f7f7 fd57 	bl	800028c <__adddf3>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	4610      	mov	r0, r2
 80087e4:	4619      	mov	r1, r3
 80087e6:	7bfa      	ldrb	r2, [r7, #15]
 80087e8:	4c25      	ldr	r4, [pc, #148]	@ (8008880 <Adjust_Left_Motors_By_Distance+0xb50>)
 80087ea:	4613      	mov	r3, r2
 80087ec:	00db      	lsls	r3, r3, #3
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4423      	add	r3, r4
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681c      	ldr	r4, [r3, #0]
 80087f8:	f7f8 f9d6 	bl	8000ba8 <__aeabi_d2uiz>
 80087fc:	4603      	mov	r3, r0
 80087fe:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008800:	e06e      	b.n	80088e0 <Adjust_Left_Motors_By_Distance+0xbb0>
 8008802:	7bfa      	ldrb	r2, [r7, #15]
 8008804:	491e      	ldr	r1, [pc, #120]	@ (8008880 <Adjust_Left_Motors_By_Distance+0xb50>)
 8008806:	4613      	mov	r3, r2
 8008808:	00db      	lsls	r3, r3, #3
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	3304      	adds	r3, #4
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b08      	cmp	r3, #8
 8008816:	d135      	bne.n	8008884 <Adjust_Left_Motors_By_Distance+0xb54>
 8008818:	69f8      	ldr	r0, [r7, #28]
 800881a:	f7f7 fe73 	bl	8000504 <__aeabi_ui2d>
 800881e:	4604      	mov	r4, r0
 8008820:	460d      	mov	r5, r1
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	ee07 3a90 	vmov	s15, r3
 8008828:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800882c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008834:	ee17 0a90 	vmov	r0, s15
 8008838:	f7f7 fe86 	bl	8000548 <__aeabi_f2d>
 800883c:	a30e      	add	r3, pc, #56	@ (adr r3, 8008878 <Adjust_Left_Motors_By_Distance+0xb48>)
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	f7f7 fed9 	bl	80005f8 <__aeabi_dmul>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4620      	mov	r0, r4
 800884c:	4629      	mov	r1, r5
 800884e:	f7f7 fd1d 	bl	800028c <__adddf3>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4610      	mov	r0, r2
 8008858:	4619      	mov	r1, r3
 800885a:	7bfa      	ldrb	r2, [r7, #15]
 800885c:	4c08      	ldr	r4, [pc, #32]	@ (8008880 <Adjust_Left_Motors_By_Distance+0xb50>)
 800885e:	4613      	mov	r3, r2
 8008860:	00db      	lsls	r3, r3, #3
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4423      	add	r3, r4
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681c      	ldr	r4, [r3, #0]
 800886c:	f7f8 f99c 	bl	8000ba8 <__aeabi_d2uiz>
 8008870:	4603      	mov	r3, r0
 8008872:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008874:	e034      	b.n	80088e0 <Adjust_Left_Motors_By_Distance+0xbb0>
 8008876:	bf00      	nop
 8008878:	cccccccd 	.word	0xcccccccd
 800887c:	3feccccc 	.word	0x3feccccc
 8008880:	20000388 	.word	0x20000388
 8008884:	69f8      	ldr	r0, [r7, #28]
 8008886:	f7f7 fe3d 	bl	8000504 <__aeabi_ui2d>
 800888a:	4604      	mov	r4, r0
 800888c:	460d      	mov	r5, r1
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	ee07 3a90 	vmov	s15, r3
 8008894:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008898:	edd7 7a08 	vldr	s15, [r7, #32]
 800889c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a0:	ee17 0a90 	vmov	r0, s15
 80088a4:	f7f7 fe50 	bl	8000548 <__aeabi_f2d>
 80088a8:	a3d3      	add	r3, pc, #844	@ (adr r3, 8008bf8 <Adjust_Left_Motors_By_Distance+0xec8>)
 80088aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ae:	f7f7 fea3 	bl	80005f8 <__aeabi_dmul>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	4620      	mov	r0, r4
 80088b8:	4629      	mov	r1, r5
 80088ba:	f7f7 fce7 	bl	800028c <__adddf3>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	4610      	mov	r0, r2
 80088c4:	4619      	mov	r1, r3
 80088c6:	7bfa      	ldrb	r2, [r7, #15]
 80088c8:	4ccd      	ldr	r4, [pc, #820]	@ (8008c00 <Adjust_Left_Motors_By_Distance+0xed0>)
 80088ca:	4613      	mov	r3, r2
 80088cc:	00db      	lsls	r3, r3, #3
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4423      	add	r3, r4
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681c      	ldr	r4, [r3, #0]
 80088d8:	f7f8 f966 	bl	8000ba8 <__aeabi_d2uiz>
 80088dc:	4603      	mov	r3, r0
 80088de:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 + speed_adjustment * current_speed3 * magnification_close);
 80088e0:	7bba      	ldrb	r2, [r7, #14]
 80088e2:	49c7      	ldr	r1, [pc, #796]	@ (8008c00 <Adjust_Left_Motors_By_Distance+0xed0>)
 80088e4:	4613      	mov	r3, r2
 80088e6:	00db      	lsls	r3, r3, #3
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	440b      	add	r3, r1
 80088ee:	3304      	adds	r3, #4
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d12e      	bne.n	8008954 <Adjust_Left_Motors_By_Distance+0xc24>
 80088f6:	6978      	ldr	r0, [r7, #20]
 80088f8:	f7f7 fe04 	bl	8000504 <__aeabi_ui2d>
 80088fc:	4604      	mov	r4, r0
 80088fe:	460d      	mov	r5, r1
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	ee07 3a90 	vmov	s15, r3
 8008906:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800890a:	edd7 7a08 	vldr	s15, [r7, #32]
 800890e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008912:	ee17 0a90 	vmov	r0, s15
 8008916:	f7f7 fe17 	bl	8000548 <__aeabi_f2d>
 800891a:	a3b7      	add	r3, pc, #732	@ (adr r3, 8008bf8 <Adjust_Left_Motors_By_Distance+0xec8>)
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	f7f7 fe6a 	bl	80005f8 <__aeabi_dmul>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4620      	mov	r0, r4
 800892a:	4629      	mov	r1, r5
 800892c:	f7f7 fcae 	bl	800028c <__adddf3>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4610      	mov	r0, r2
 8008936:	4619      	mov	r1, r3
 8008938:	7bba      	ldrb	r2, [r7, #14]
 800893a:	4cb1      	ldr	r4, [pc, #708]	@ (8008c00 <Adjust_Left_Motors_By_Distance+0xed0>)
 800893c:	4613      	mov	r3, r2
 800893e:	00db      	lsls	r3, r3, #3
 8008940:	4413      	add	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4423      	add	r3, r4
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681c      	ldr	r4, [r3, #0]
 800894a:	f7f8 f92d 	bl	8000ba8 <__aeabi_d2uiz>
 800894e:	4603      	mov	r3, r0
 8008950:	6363      	str	r3, [r4, #52]	@ 0x34
 8008952:	e0a1      	b.n	8008a98 <Adjust_Left_Motors_By_Distance+0xd68>
 8008954:	7bba      	ldrb	r2, [r7, #14]
 8008956:	49aa      	ldr	r1, [pc, #680]	@ (8008c00 <Adjust_Left_Motors_By_Distance+0xed0>)
 8008958:	4613      	mov	r3, r2
 800895a:	00db      	lsls	r3, r3, #3
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	3304      	adds	r3, #4
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b04      	cmp	r3, #4
 8008968:	d12e      	bne.n	80089c8 <Adjust_Left_Motors_By_Distance+0xc98>
 800896a:	6978      	ldr	r0, [r7, #20]
 800896c:	f7f7 fdca 	bl	8000504 <__aeabi_ui2d>
 8008970:	4604      	mov	r4, r0
 8008972:	460d      	mov	r5, r1
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800897e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008986:	ee17 0a90 	vmov	r0, s15
 800898a:	f7f7 fddd 	bl	8000548 <__aeabi_f2d>
 800898e:	a39a      	add	r3, pc, #616	@ (adr r3, 8008bf8 <Adjust_Left_Motors_By_Distance+0xec8>)
 8008990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008994:	f7f7 fe30 	bl	80005f8 <__aeabi_dmul>
 8008998:	4602      	mov	r2, r0
 800899a:	460b      	mov	r3, r1
 800899c:	4620      	mov	r0, r4
 800899e:	4629      	mov	r1, r5
 80089a0:	f7f7 fc74 	bl	800028c <__adddf3>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	4610      	mov	r0, r2
 80089aa:	4619      	mov	r1, r3
 80089ac:	7bba      	ldrb	r2, [r7, #14]
 80089ae:	4c94      	ldr	r4, [pc, #592]	@ (8008c00 <Adjust_Left_Motors_By_Distance+0xed0>)
 80089b0:	4613      	mov	r3, r2
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	4413      	add	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4423      	add	r3, r4
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681c      	ldr	r4, [r3, #0]
 80089be:	f7f8 f8f3 	bl	8000ba8 <__aeabi_d2uiz>
 80089c2:	4603      	mov	r3, r0
 80089c4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80089c6:	e067      	b.n	8008a98 <Adjust_Left_Motors_By_Distance+0xd68>
 80089c8:	7bba      	ldrb	r2, [r7, #14]
 80089ca:	498d      	ldr	r1, [pc, #564]	@ (8008c00 <Adjust_Left_Motors_By_Distance+0xed0>)
 80089cc:	4613      	mov	r3, r2
 80089ce:	00db      	lsls	r3, r3, #3
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	440b      	add	r3, r1
 80089d6:	3304      	adds	r3, #4
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b08      	cmp	r3, #8
 80089dc:	d12e      	bne.n	8008a3c <Adjust_Left_Motors_By_Distance+0xd0c>
 80089de:	6978      	ldr	r0, [r7, #20]
 80089e0:	f7f7 fd90 	bl	8000504 <__aeabi_ui2d>
 80089e4:	4604      	mov	r4, r0
 80089e6:	460d      	mov	r5, r1
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80089f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80089f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089fa:	ee17 0a90 	vmov	r0, s15
 80089fe:	f7f7 fda3 	bl	8000548 <__aeabi_f2d>
 8008a02:	a37d      	add	r3, pc, #500	@ (adr r3, 8008bf8 <Adjust_Left_Motors_By_Distance+0xec8>)
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	f7f7 fdf6 	bl	80005f8 <__aeabi_dmul>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4620      	mov	r0, r4
 8008a12:	4629      	mov	r1, r5
 8008a14:	f7f7 fc3a 	bl	800028c <__adddf3>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	4619      	mov	r1, r3
 8008a20:	7bba      	ldrb	r2, [r7, #14]
 8008a22:	4c77      	ldr	r4, [pc, #476]	@ (8008c00 <Adjust_Left_Motors_By_Distance+0xed0>)
 8008a24:	4613      	mov	r3, r2
 8008a26:	00db      	lsls	r3, r3, #3
 8008a28:	4413      	add	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4423      	add	r3, r4
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681c      	ldr	r4, [r3, #0]
 8008a32:	f7f8 f8b9 	bl	8000ba8 <__aeabi_d2uiz>
 8008a36:	4603      	mov	r3, r0
 8008a38:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008a3a:	e02d      	b.n	8008a98 <Adjust_Left_Motors_By_Distance+0xd68>
 8008a3c:	6978      	ldr	r0, [r7, #20]
 8008a3e:	f7f7 fd61 	bl	8000504 <__aeabi_ui2d>
 8008a42:	4604      	mov	r4, r0
 8008a44:	460d      	mov	r5, r1
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	ee07 3a90 	vmov	s15, r3
 8008a4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a50:	edd7 7a08 	vldr	s15, [r7, #32]
 8008a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a58:	ee17 0a90 	vmov	r0, s15
 8008a5c:	f7f7 fd74 	bl	8000548 <__aeabi_f2d>
 8008a60:	a365      	add	r3, pc, #404	@ (adr r3, 8008bf8 <Adjust_Left_Motors_By_Distance+0xec8>)
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	f7f7 fdc7 	bl	80005f8 <__aeabi_dmul>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	4620      	mov	r0, r4
 8008a70:	4629      	mov	r1, r5
 8008a72:	f7f7 fc0b 	bl	800028c <__adddf3>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	7bba      	ldrb	r2, [r7, #14]
 8008a80:	4c5f      	ldr	r4, [pc, #380]	@ (8008c00 <Adjust_Left_Motors_By_Distance+0xed0>)
 8008a82:	4613      	mov	r3, r2
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4423      	add	r3, r4
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681c      	ldr	r4, [r3, #0]
 8008a90:	f7f8 f88a 	bl	8000ba8 <__aeabi_d2uiz>
 8008a94:	4603      	mov	r3, r0
 8008a96:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 - speed_adjustment * current_speed2 * magnification_close);
 8008a98:	7b7a      	ldrb	r2, [r7, #13]
 8008a9a:	4959      	ldr	r1, [pc, #356]	@ (8008c00 <Adjust_Left_Motors_By_Distance+0xed0>)
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	4413      	add	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	440b      	add	r3, r1
 8008aa6:	3304      	adds	r3, #4
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d12e      	bne.n	8008b0c <Adjust_Left_Motors_By_Distance+0xddc>
 8008aae:	69b8      	ldr	r0, [r7, #24]
 8008ab0:	f7f7 fd28 	bl	8000504 <__aeabi_ui2d>
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	460d      	mov	r5, r1
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ac2:	edd7 7a08 	vldr	s15, [r7, #32]
 8008ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aca:	ee17 0a90 	vmov	r0, s15
 8008ace:	f7f7 fd3b 	bl	8000548 <__aeabi_f2d>
 8008ad2:	a349      	add	r3, pc, #292	@ (adr r3, 8008bf8 <Adjust_Left_Motors_By_Distance+0xec8>)
 8008ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad8:	f7f7 fd8e 	bl	80005f8 <__aeabi_dmul>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	f7f7 fbd0 	bl	8000288 <__aeabi_dsub>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	4610      	mov	r0, r2
 8008aee:	4619      	mov	r1, r3
 8008af0:	7b7a      	ldrb	r2, [r7, #13]
 8008af2:	4c43      	ldr	r4, [pc, #268]	@ (8008c00 <Adjust_Left_Motors_By_Distance+0xed0>)
 8008af4:	4613      	mov	r3, r2
 8008af6:	00db      	lsls	r3, r3, #3
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4423      	add	r3, r4
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681c      	ldr	r4, [r3, #0]
 8008b02:	f7f8 f851 	bl	8000ba8 <__aeabi_d2uiz>
 8008b06:	4603      	mov	r3, r0
 8008b08:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b0a:	e0a9      	b.n	8008c60 <Adjust_Left_Motors_By_Distance+0xf30>
 8008b0c:	7b7a      	ldrb	r2, [r7, #13]
 8008b0e:	493c      	ldr	r1, [pc, #240]	@ (8008c00 <Adjust_Left_Motors_By_Distance+0xed0>)
 8008b10:	4613      	mov	r3, r2
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	440b      	add	r3, r1
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d12e      	bne.n	8008b80 <Adjust_Left_Motors_By_Distance+0xe50>
 8008b22:	69b8      	ldr	r0, [r7, #24]
 8008b24:	f7f7 fcee 	bl	8000504 <__aeabi_ui2d>
 8008b28:	4604      	mov	r4, r0
 8008b2a:	460d      	mov	r5, r1
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	ee07 3a90 	vmov	s15, r3
 8008b32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b36:	edd7 7a08 	vldr	s15, [r7, #32]
 8008b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3e:	ee17 0a90 	vmov	r0, s15
 8008b42:	f7f7 fd01 	bl	8000548 <__aeabi_f2d>
 8008b46:	a32c      	add	r3, pc, #176	@ (adr r3, 8008bf8 <Adjust_Left_Motors_By_Distance+0xec8>)
 8008b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4c:	f7f7 fd54 	bl	80005f8 <__aeabi_dmul>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4620      	mov	r0, r4
 8008b56:	4629      	mov	r1, r5
 8008b58:	f7f7 fb96 	bl	8000288 <__aeabi_dsub>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4610      	mov	r0, r2
 8008b62:	4619      	mov	r1, r3
 8008b64:	7b7a      	ldrb	r2, [r7, #13]
 8008b66:	4c26      	ldr	r4, [pc, #152]	@ (8008c00 <Adjust_Left_Motors_By_Distance+0xed0>)
 8008b68:	4613      	mov	r3, r2
 8008b6a:	00db      	lsls	r3, r3, #3
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4423      	add	r3, r4
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681c      	ldr	r4, [r3, #0]
 8008b76:	f7f8 f817 	bl	8000ba8 <__aeabi_d2uiz>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008b7e:	e06f      	b.n	8008c60 <Adjust_Left_Motors_By_Distance+0xf30>
 8008b80:	7b7a      	ldrb	r2, [r7, #13]
 8008b82:	491f      	ldr	r1, [pc, #124]	@ (8008c00 <Adjust_Left_Motors_By_Distance+0xed0>)
 8008b84:	4613      	mov	r3, r2
 8008b86:	00db      	lsls	r3, r3, #3
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	440b      	add	r3, r1
 8008b8e:	3304      	adds	r3, #4
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	d136      	bne.n	8008c04 <Adjust_Left_Motors_By_Distance+0xed4>
 8008b96:	69b8      	ldr	r0, [r7, #24]
 8008b98:	f7f7 fcb4 	bl	8000504 <__aeabi_ui2d>
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	460d      	mov	r5, r1
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	ee07 3a90 	vmov	s15, r3
 8008ba6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008baa:	edd7 7a08 	vldr	s15, [r7, #32]
 8008bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bb2:	ee17 0a90 	vmov	r0, s15
 8008bb6:	f7f7 fcc7 	bl	8000548 <__aeabi_f2d>
 8008bba:	a30f      	add	r3, pc, #60	@ (adr r3, 8008bf8 <Adjust_Left_Motors_By_Distance+0xec8>)
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	f7f7 fd1a 	bl	80005f8 <__aeabi_dmul>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4620      	mov	r0, r4
 8008bca:	4629      	mov	r1, r5
 8008bcc:	f7f7 fb5c 	bl	8000288 <__aeabi_dsub>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	7b7a      	ldrb	r2, [r7, #13]
 8008bda:	4c09      	ldr	r4, [pc, #36]	@ (8008c00 <Adjust_Left_Motors_By_Distance+0xed0>)
 8008bdc:	4613      	mov	r3, r2
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	4413      	add	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4423      	add	r3, r4
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681c      	ldr	r4, [r3, #0]
 8008bea:	f7f7 ffdd 	bl	8000ba8 <__aeabi_d2uiz>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008bf2:	e035      	b.n	8008c60 <Adjust_Left_Motors_By_Distance+0xf30>
 8008bf4:	f3af 8000 	nop.w
 8008bf8:	cccccccd 	.word	0xcccccccd
 8008bfc:	3feccccc 	.word	0x3feccccc
 8008c00:	20000388 	.word	0x20000388
 8008c04:	69b8      	ldr	r0, [r7, #24]
 8008c06:	f7f7 fc7d 	bl	8000504 <__aeabi_ui2d>
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	460d      	mov	r5, r1
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	ee07 3a90 	vmov	s15, r3
 8008c14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c18:	edd7 7a08 	vldr	s15, [r7, #32]
 8008c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c20:	ee17 0a90 	vmov	r0, s15
 8008c24:	f7f7 fc90 	bl	8000548 <__aeabi_f2d>
 8008c28:	a37f      	add	r3, pc, #508	@ (adr r3, 8008e28 <Adjust_Left_Motors_By_Distance+0x10f8>)
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	f7f7 fce3 	bl	80005f8 <__aeabi_dmul>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	4620      	mov	r0, r4
 8008c38:	4629      	mov	r1, r5
 8008c3a:	f7f7 fb25 	bl	8000288 <__aeabi_dsub>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	4610      	mov	r0, r2
 8008c44:	4619      	mov	r1, r3
 8008c46:	7b7a      	ldrb	r2, [r7, #13]
 8008c48:	4c79      	ldr	r4, [pc, #484]	@ (8008e30 <Adjust_Left_Motors_By_Distance+0x1100>)
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	00db      	lsls	r3, r3, #3
 8008c4e:	4413      	add	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4423      	add	r3, r4
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681c      	ldr	r4, [r3, #0]
 8008c58:	f7f7 ffa6 	bl	8000ba8 <__aeabi_d2uiz>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjustment * current_speed4 * magnification_close);
 8008c60:	7b3a      	ldrb	r2, [r7, #12]
 8008c62:	4973      	ldr	r1, [pc, #460]	@ (8008e30 <Adjust_Left_Motors_By_Distance+0x1100>)
 8008c64:	4613      	mov	r3, r2
 8008c66:	00db      	lsls	r3, r3, #3
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	440b      	add	r3, r1
 8008c6e:	3304      	adds	r3, #4
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d12e      	bne.n	8008cd4 <Adjust_Left_Motors_By_Distance+0xfa4>
 8008c76:	6938      	ldr	r0, [r7, #16]
 8008c78:	f7f7 fc44 	bl	8000504 <__aeabi_ui2d>
 8008c7c:	4604      	mov	r4, r0
 8008c7e:	460d      	mov	r5, r1
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	ee07 3a90 	vmov	s15, r3
 8008c86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8008c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c92:	ee17 0a90 	vmov	r0, s15
 8008c96:	f7f7 fc57 	bl	8000548 <__aeabi_f2d>
 8008c9a:	a363      	add	r3, pc, #396	@ (adr r3, 8008e28 <Adjust_Left_Motors_By_Distance+0x10f8>)
 8008c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca0:	f7f7 fcaa 	bl	80005f8 <__aeabi_dmul>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	4620      	mov	r0, r4
 8008caa:	4629      	mov	r1, r5
 8008cac:	f7f7 faec 	bl	8000288 <__aeabi_dsub>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	7b3a      	ldrb	r2, [r7, #12]
 8008cba:	4c5d      	ldr	r4, [pc, #372]	@ (8008e30 <Adjust_Left_Motors_By_Distance+0x1100>)
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4423      	add	r3, r4
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681c      	ldr	r4, [r3, #0]
 8008cca:	f7f7 ff6d 	bl	8000ba8 <__aeabi_d2uiz>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8008cd2:	e0a2      	b.n	8008e1a <Adjust_Left_Motors_By_Distance+0x10ea>
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjustment * current_speed4 * magnification_close);
 8008cd4:	7b3a      	ldrb	r2, [r7, #12]
 8008cd6:	4956      	ldr	r1, [pc, #344]	@ (8008e30 <Adjust_Left_Motors_By_Distance+0x1100>)
 8008cd8:	4613      	mov	r3, r2
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	d12e      	bne.n	8008d48 <Adjust_Left_Motors_By_Distance+0x1018>
 8008cea:	6938      	ldr	r0, [r7, #16]
 8008cec:	f7f7 fc0a 	bl	8000504 <__aeabi_ui2d>
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	ee07 3a90 	vmov	s15, r3
 8008cfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8008d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d06:	ee17 0a90 	vmov	r0, s15
 8008d0a:	f7f7 fc1d 	bl	8000548 <__aeabi_f2d>
 8008d0e:	a346      	add	r3, pc, #280	@ (adr r3, 8008e28 <Adjust_Left_Motors_By_Distance+0x10f8>)
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	f7f7 fc70 	bl	80005f8 <__aeabi_dmul>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	4629      	mov	r1, r5
 8008d20:	f7f7 fab2 	bl	8000288 <__aeabi_dsub>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4610      	mov	r0, r2
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	7b3a      	ldrb	r2, [r7, #12]
 8008d2e:	4c40      	ldr	r4, [pc, #256]	@ (8008e30 <Adjust_Left_Motors_By_Distance+0x1100>)
 8008d30:	4613      	mov	r3, r2
 8008d32:	00db      	lsls	r3, r3, #3
 8008d34:	4413      	add	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4423      	add	r3, r4
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681c      	ldr	r4, [r3, #0]
 8008d3e:	f7f7 ff33 	bl	8000ba8 <__aeabi_d2uiz>
 8008d42:	4603      	mov	r3, r0
 8008d44:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8008d46:	e068      	b.n	8008e1a <Adjust_Left_Motors_By_Distance+0x10ea>
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjustment * current_speed4 * magnification_close);
 8008d48:	7b3a      	ldrb	r2, [r7, #12]
 8008d4a:	4939      	ldr	r1, [pc, #228]	@ (8008e30 <Adjust_Left_Motors_By_Distance+0x1100>)
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	4413      	add	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	440b      	add	r3, r1
 8008d56:	3304      	adds	r3, #4
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b08      	cmp	r3, #8
 8008d5c:	d12e      	bne.n	8008dbc <Adjust_Left_Motors_By_Distance+0x108c>
 8008d5e:	6938      	ldr	r0, [r7, #16]
 8008d60:	f7f7 fbd0 	bl	8000504 <__aeabi_ui2d>
 8008d64:	4604      	mov	r4, r0
 8008d66:	460d      	mov	r5, r1
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d72:	edd7 7a08 	vldr	s15, [r7, #32]
 8008d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d7a:	ee17 0a90 	vmov	r0, s15
 8008d7e:	f7f7 fbe3 	bl	8000548 <__aeabi_f2d>
 8008d82:	a329      	add	r3, pc, #164	@ (adr r3, 8008e28 <Adjust_Left_Motors_By_Distance+0x10f8>)
 8008d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d88:	f7f7 fc36 	bl	80005f8 <__aeabi_dmul>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	4620      	mov	r0, r4
 8008d92:	4629      	mov	r1, r5
 8008d94:	f7f7 fa78 	bl	8000288 <__aeabi_dsub>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4619      	mov	r1, r3
 8008da0:	7b3a      	ldrb	r2, [r7, #12]
 8008da2:	4c23      	ldr	r4, [pc, #140]	@ (8008e30 <Adjust_Left_Motors_By_Distance+0x1100>)
 8008da4:	4613      	mov	r3, r2
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	4413      	add	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4423      	add	r3, r4
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681c      	ldr	r4, [r3, #0]
 8008db2:	f7f7 fef9 	bl	8000ba8 <__aeabi_d2uiz>
 8008db6:	4603      	mov	r3, r0
 8008db8:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8008dba:	e02e      	b.n	8008e1a <Adjust_Left_Motors_By_Distance+0x10ea>
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjustment * current_speed4 * magnification_close);
 8008dbc:	6938      	ldr	r0, [r7, #16]
 8008dbe:	f7f7 fba1 	bl	8000504 <__aeabi_ui2d>
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	460d      	mov	r5, r1
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	ee07 3a90 	vmov	s15, r3
 8008dcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008dd0:	edd7 7a08 	vldr	s15, [r7, #32]
 8008dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd8:	ee17 0a90 	vmov	r0, s15
 8008ddc:	f7f7 fbb4 	bl	8000548 <__aeabi_f2d>
 8008de0:	a311      	add	r3, pc, #68	@ (adr r3, 8008e28 <Adjust_Left_Motors_By_Distance+0x10f8>)
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	f7f7 fc07 	bl	80005f8 <__aeabi_dmul>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4620      	mov	r0, r4
 8008df0:	4629      	mov	r1, r5
 8008df2:	f7f7 fa49 	bl	8000288 <__aeabi_dsub>
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	7b3a      	ldrb	r2, [r7, #12]
 8008e00:	4c0b      	ldr	r4, [pc, #44]	@ (8008e30 <Adjust_Left_Motors_By_Distance+0x1100>)
 8008e02:	4613      	mov	r3, r2
 8008e04:	00db      	lsls	r3, r3, #3
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4423      	add	r3, r4
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681c      	ldr	r4, [r3, #0]
 8008e10:	f7f7 feca 	bl	8000ba8 <__aeabi_d2uiz>
 8008e14:	4603      	mov	r3, r0
 8008e16:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8008e18:	e7ff      	b.n	8008e1a <Adjust_Left_Motors_By_Distance+0x10ea>
 8008e1a:	bf00      	nop
 8008e1c:	3730      	adds	r7, #48	@ 0x30
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bdb0      	pop	{r4, r5, r7, pc}
 8008e22:	bf00      	nop
 8008e24:	f3af 8000 	nop.w
 8008e28:	cccccccd 	.word	0xcccccccd
 8008e2c:	3feccccc 	.word	0x3feccccc
 8008e30:	20000388 	.word	0x20000388
 8008e34:	00000000 	.word	0x00000000

08008e38 <Adjust_Right_Motors_By_Distance>:

void Adjust_Right_Motors_By_Distance(Motor_ID id2, Motor_ID id4, Motor_ID id1, Motor_ID id3, float distance, float threshold) {
 8008e38:	b5b0      	push	{r4, r5, r7, lr}
 8008e3a:	b08c      	sub	sp, #48	@ 0x30
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4604      	mov	r4, r0
 8008e40:	4608      	mov	r0, r1
 8008e42:	4611      	mov	r1, r2
 8008e44:	461a      	mov	r2, r3
 8008e46:	ed87 0a02 	vstr	s0, [r7, #8]
 8008e4a:	edc7 0a01 	vstr	s1, [r7, #4]
 8008e4e:	4623      	mov	r3, r4
 8008e50:	73fb      	strb	r3, [r7, #15]
 8008e52:	4603      	mov	r3, r0
 8008e54:	73bb      	strb	r3, [r7, #14]
 8008e56:	460b      	mov	r3, r1
 8008e58:	737b      	strb	r3, [r7, #13]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	733b      	strb	r3, [r7, #12]
    // 计算距离误差
    float distance_error = distance - threshold;
 8008e5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8008e62:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e6a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    
    // 定义调整参数
    const float kp = 0.001f;  // 比例系数
 8008e6e:	4b9f      	ldr	r3, [pc, #636]	@ (80090ec <Adjust_Right_Motors_By_Distance+0x2b4>)
 8008e70:	62bb      	str	r3, [r7, #40]	@ 0x28
    const float max_adjustment = 0.3f;  // 最大速度调整量
 8008e72:	4b9f      	ldr	r3, [pc, #636]	@ (80090f0 <Adjust_Right_Motors_By_Distance+0x2b8>)
 8008e74:	627b      	str	r3, [r7, #36]	@ 0x24
    
    // 计算速度调整量（取绝对值）
    float speed_adjustment = fabsf(kp * distance_error);
 8008e76:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8008e7a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8008e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e82:	eef0 7ae7 	vabs.f32	s15, s15
 8008e86:	edc7 7a08 	vstr	s15, [r7, #32]
    
    // 限制速度调整量
    speed_adjustment = fminf(speed_adjustment, max_adjustment);
 8008e8a:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8008e8e:	ed97 0a08 	vldr	s0, [r7, #32]
 8008e92:	f00b f8a6 	bl	8013fe2 <fminf>
 8008e96:	ed87 0a08 	vstr	s0, [r7, #32]
    
    // 获取当前电机速度
    uint32_t current_speed1 = __HAL_TIM_GET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel);
 8008e9a:	7b7a      	ldrb	r2, [r7, #13]
 8008e9c:	4995      	ldr	r1, [pc, #596]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	00db      	lsls	r3, r3, #3
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	440b      	add	r3, r1
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <Adjust_Right_Motors_By_Distance+0x8e>
 8008eb0:	7b7a      	ldrb	r2, [r7, #13]
 8008eb2:	4990      	ldr	r1, [pc, #576]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	4413      	add	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	440b      	add	r3, r1
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ec4:	e035      	b.n	8008f32 <Adjust_Right_Motors_By_Distance+0xfa>
 8008ec6:	7b7a      	ldrb	r2, [r7, #13]
 8008ec8:	498a      	ldr	r1, [pc, #552]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008eca:	4613      	mov	r3, r2
 8008ecc:	00db      	lsls	r3, r3, #3
 8008ece:	4413      	add	r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	440b      	add	r3, r1
 8008ed4:	3304      	adds	r3, #4
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	d10a      	bne.n	8008ef2 <Adjust_Right_Motors_By_Distance+0xba>
 8008edc:	7b7a      	ldrb	r2, [r7, #13]
 8008ede:	4985      	ldr	r1, [pc, #532]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	00db      	lsls	r3, r3, #3
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	440b      	add	r3, r1
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef0:	e01f      	b.n	8008f32 <Adjust_Right_Motors_By_Distance+0xfa>
 8008ef2:	7b7a      	ldrb	r2, [r7, #13]
 8008ef4:	497f      	ldr	r1, [pc, #508]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	00db      	lsls	r3, r3, #3
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	440b      	add	r3, r1
 8008f00:	3304      	adds	r3, #4
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b08      	cmp	r3, #8
 8008f06:	d10a      	bne.n	8008f1e <Adjust_Right_Motors_By_Distance+0xe6>
 8008f08:	7b7a      	ldrb	r2, [r7, #13]
 8008f0a:	497a      	ldr	r1, [pc, #488]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	00db      	lsls	r3, r3, #3
 8008f10:	4413      	add	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	440b      	add	r3, r1
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f1c:	e009      	b.n	8008f32 <Adjust_Right_Motors_By_Distance+0xfa>
 8008f1e:	7b7a      	ldrb	r2, [r7, #13]
 8008f20:	4974      	ldr	r1, [pc, #464]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008f22:	4613      	mov	r3, r2
 8008f24:	00db      	lsls	r3, r3, #3
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	440b      	add	r3, r1
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f32:	61fb      	str	r3, [r7, #28]
    uint32_t current_speed2 = __HAL_TIM_GET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel);
 8008f34:	7bfa      	ldrb	r2, [r7, #15]
 8008f36:	496f      	ldr	r1, [pc, #444]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008f38:	4613      	mov	r3, r2
 8008f3a:	00db      	lsls	r3, r3, #3
 8008f3c:	4413      	add	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	440b      	add	r3, r1
 8008f42:	3304      	adds	r3, #4
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <Adjust_Right_Motors_By_Distance+0x128>
 8008f4a:	7bfa      	ldrb	r2, [r7, #15]
 8008f4c:	4969      	ldr	r1, [pc, #420]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008f4e:	4613      	mov	r3, r2
 8008f50:	00db      	lsls	r3, r3, #3
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	440b      	add	r3, r1
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f5e:	e035      	b.n	8008fcc <Adjust_Right_Motors_By_Distance+0x194>
 8008f60:	7bfa      	ldrb	r2, [r7, #15]
 8008f62:	4964      	ldr	r1, [pc, #400]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008f64:	4613      	mov	r3, r2
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	4413      	add	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	440b      	add	r3, r1
 8008f6e:	3304      	adds	r3, #4
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b04      	cmp	r3, #4
 8008f74:	d10a      	bne.n	8008f8c <Adjust_Right_Motors_By_Distance+0x154>
 8008f76:	7bfa      	ldrb	r2, [r7, #15]
 8008f78:	495e      	ldr	r1, [pc, #376]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	00db      	lsls	r3, r3, #3
 8008f7e:	4413      	add	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	440b      	add	r3, r1
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f8a:	e01f      	b.n	8008fcc <Adjust_Right_Motors_By_Distance+0x194>
 8008f8c:	7bfa      	ldrb	r2, [r7, #15]
 8008f8e:	4959      	ldr	r1, [pc, #356]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008f90:	4613      	mov	r3, r2
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	4413      	add	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	440b      	add	r3, r1
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b08      	cmp	r3, #8
 8008fa0:	d10a      	bne.n	8008fb8 <Adjust_Right_Motors_By_Distance+0x180>
 8008fa2:	7bfa      	ldrb	r2, [r7, #15]
 8008fa4:	4953      	ldr	r1, [pc, #332]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	00db      	lsls	r3, r3, #3
 8008faa:	4413      	add	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	440b      	add	r3, r1
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fb6:	e009      	b.n	8008fcc <Adjust_Right_Motors_By_Distance+0x194>
 8008fb8:	7bfa      	ldrb	r2, [r7, #15]
 8008fba:	494e      	ldr	r1, [pc, #312]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	4413      	add	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	440b      	add	r3, r1
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fcc:	61bb      	str	r3, [r7, #24]
    uint32_t current_speed3 = __HAL_TIM_GET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel);
 8008fce:	7b3a      	ldrb	r2, [r7, #12]
 8008fd0:	4948      	ldr	r1, [pc, #288]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	4413      	add	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	440b      	add	r3, r1
 8008fdc:	3304      	adds	r3, #4
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10a      	bne.n	8008ffa <Adjust_Right_Motors_By_Distance+0x1c2>
 8008fe4:	7b3a      	ldrb	r2, [r7, #12]
 8008fe6:	4943      	ldr	r1, [pc, #268]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008fe8:	4613      	mov	r3, r2
 8008fea:	00db      	lsls	r3, r3, #3
 8008fec:	4413      	add	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	440b      	add	r3, r1
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ff8:	e035      	b.n	8009066 <Adjust_Right_Motors_By_Distance+0x22e>
 8008ffa:	7b3a      	ldrb	r2, [r7, #12]
 8008ffc:	493d      	ldr	r1, [pc, #244]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8008ffe:	4613      	mov	r3, r2
 8009000:	00db      	lsls	r3, r3, #3
 8009002:	4413      	add	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	440b      	add	r3, r1
 8009008:	3304      	adds	r3, #4
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b04      	cmp	r3, #4
 800900e:	d10a      	bne.n	8009026 <Adjust_Right_Motors_By_Distance+0x1ee>
 8009010:	7b3a      	ldrb	r2, [r7, #12]
 8009012:	4938      	ldr	r1, [pc, #224]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8009014:	4613      	mov	r3, r2
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	4413      	add	r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	440b      	add	r3, r1
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009024:	e01f      	b.n	8009066 <Adjust_Right_Motors_By_Distance+0x22e>
 8009026:	7b3a      	ldrb	r2, [r7, #12]
 8009028:	4932      	ldr	r1, [pc, #200]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 800902a:	4613      	mov	r3, r2
 800902c:	00db      	lsls	r3, r3, #3
 800902e:	4413      	add	r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	440b      	add	r3, r1
 8009034:	3304      	adds	r3, #4
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b08      	cmp	r3, #8
 800903a:	d10a      	bne.n	8009052 <Adjust_Right_Motors_By_Distance+0x21a>
 800903c:	7b3a      	ldrb	r2, [r7, #12]
 800903e:	492d      	ldr	r1, [pc, #180]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8009040:	4613      	mov	r3, r2
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	4413      	add	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	440b      	add	r3, r1
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009050:	e009      	b.n	8009066 <Adjust_Right_Motors_By_Distance+0x22e>
 8009052:	7b3a      	ldrb	r2, [r7, #12]
 8009054:	4927      	ldr	r1, [pc, #156]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8009056:	4613      	mov	r3, r2
 8009058:	00db      	lsls	r3, r3, #3
 800905a:	4413      	add	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	440b      	add	r3, r1
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009066:	617b      	str	r3, [r7, #20]
    uint32_t current_speed4 = __HAL_TIM_GET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel);
 8009068:	7bba      	ldrb	r2, [r7, #14]
 800906a:	4922      	ldr	r1, [pc, #136]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 800906c:	4613      	mov	r3, r2
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	4413      	add	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	440b      	add	r3, r1
 8009076:	3304      	adds	r3, #4
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10a      	bne.n	8009094 <Adjust_Right_Motors_By_Distance+0x25c>
 800907e:	7bba      	ldrb	r2, [r7, #14]
 8009080:	491c      	ldr	r1, [pc, #112]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8009082:	4613      	mov	r3, r2
 8009084:	00db      	lsls	r3, r3, #3
 8009086:	4413      	add	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	440b      	add	r3, r1
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009092:	e03b      	b.n	800910c <Adjust_Right_Motors_By_Distance+0x2d4>
 8009094:	7bba      	ldrb	r2, [r7, #14]
 8009096:	4917      	ldr	r1, [pc, #92]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 8009098:	4613      	mov	r3, r2
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	3304      	adds	r3, #4
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	d10a      	bne.n	80090c0 <Adjust_Right_Motors_By_Distance+0x288>
 80090aa:	7bba      	ldrb	r2, [r7, #14]
 80090ac:	4911      	ldr	r1, [pc, #68]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 80090ae:	4613      	mov	r3, r2
 80090b0:	00db      	lsls	r3, r3, #3
 80090b2:	4413      	add	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	440b      	add	r3, r1
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090be:	e025      	b.n	800910c <Adjust_Right_Motors_By_Distance+0x2d4>
 80090c0:	7bba      	ldrb	r2, [r7, #14]
 80090c2:	490c      	ldr	r1, [pc, #48]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 80090c4:	4613      	mov	r3, r2
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	440b      	add	r3, r1
 80090ce:	3304      	adds	r3, #4
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b08      	cmp	r3, #8
 80090d4:	d110      	bne.n	80090f8 <Adjust_Right_Motors_By_Distance+0x2c0>
 80090d6:	7bba      	ldrb	r2, [r7, #14]
 80090d8:	4906      	ldr	r1, [pc, #24]	@ (80090f4 <Adjust_Right_Motors_By_Distance+0x2bc>)
 80090da:	4613      	mov	r3, r2
 80090dc:	00db      	lsls	r3, r3, #3
 80090de:	4413      	add	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	440b      	add	r3, r1
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ea:	e00f      	b.n	800910c <Adjust_Right_Motors_By_Distance+0x2d4>
 80090ec:	3a83126f 	.word	0x3a83126f
 80090f0:	3e99999a 	.word	0x3e99999a
 80090f4:	20000388 	.word	0x20000388
 80090f8:	7bba      	ldrb	r2, [r7, #14]
 80090fa:	49b3      	ldr	r1, [pc, #716]	@ (80093c8 <Adjust_Right_Motors_By_Distance+0x590>)
 80090fc:	4613      	mov	r3, r2
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	440b      	add	r3, r1
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800910c:	613b      	str	r3, [r7, #16]
    
    // 根据距离误差调整速度
    if (distance_error > 0) {  // 距离过远
 800910e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8009112:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800911a:	f340 8382 	ble.w	8009822 <Adjust_Right_Motors_By_Distance+0x9ea>
        // 右侧电机减速，左侧电机加速
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 - speed_adjustment * current_speed2 * magnification);
 800911e:	7bfa      	ldrb	r2, [r7, #15]
 8009120:	49a9      	ldr	r1, [pc, #676]	@ (80093c8 <Adjust_Right_Motors_By_Distance+0x590>)
 8009122:	4613      	mov	r3, r2
 8009124:	00db      	lsls	r3, r3, #3
 8009126:	4413      	add	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	440b      	add	r3, r1
 800912c:	3304      	adds	r3, #4
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d12e      	bne.n	8009192 <Adjust_Right_Motors_By_Distance+0x35a>
 8009134:	69b8      	ldr	r0, [r7, #24]
 8009136:	f7f7 f9e5 	bl	8000504 <__aeabi_ui2d>
 800913a:	4604      	mov	r4, r0
 800913c:	460d      	mov	r5, r1
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	ee07 3a90 	vmov	s15, r3
 8009144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009148:	edd7 7a08 	vldr	s15, [r7, #32]
 800914c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009150:	ee17 0a90 	vmov	r0, s15
 8009154:	f7f7 f9f8 	bl	8000548 <__aeabi_f2d>
 8009158:	a399      	add	r3, pc, #612	@ (adr r3, 80093c0 <Adjust_Right_Motors_By_Distance+0x588>)
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	f7f7 fa4b 	bl	80005f8 <__aeabi_dmul>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	4620      	mov	r0, r4
 8009168:	4629      	mov	r1, r5
 800916a:	f7f7 f88d 	bl	8000288 <__aeabi_dsub>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	4610      	mov	r0, r2
 8009174:	4619      	mov	r1, r3
 8009176:	7bfa      	ldrb	r2, [r7, #15]
 8009178:	4c93      	ldr	r4, [pc, #588]	@ (80093c8 <Adjust_Right_Motors_By_Distance+0x590>)
 800917a:	4613      	mov	r3, r2
 800917c:	00db      	lsls	r3, r3, #3
 800917e:	4413      	add	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4423      	add	r3, r4
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681c      	ldr	r4, [r3, #0]
 8009188:	f7f7 fd0e 	bl	8000ba8 <__aeabi_d2uiz>
 800918c:	4603      	mov	r3, r0
 800918e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009190:	e0a1      	b.n	80092d6 <Adjust_Right_Motors_By_Distance+0x49e>
 8009192:	7bfa      	ldrb	r2, [r7, #15]
 8009194:	498c      	ldr	r1, [pc, #560]	@ (80093c8 <Adjust_Right_Motors_By_Distance+0x590>)
 8009196:	4613      	mov	r3, r2
 8009198:	00db      	lsls	r3, r3, #3
 800919a:	4413      	add	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	440b      	add	r3, r1
 80091a0:	3304      	adds	r3, #4
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b04      	cmp	r3, #4
 80091a6:	d12e      	bne.n	8009206 <Adjust_Right_Motors_By_Distance+0x3ce>
 80091a8:	69b8      	ldr	r0, [r7, #24]
 80091aa:	f7f7 f9ab 	bl	8000504 <__aeabi_ui2d>
 80091ae:	4604      	mov	r4, r0
 80091b0:	460d      	mov	r5, r1
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	ee07 3a90 	vmov	s15, r3
 80091b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80091bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80091c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c4:	ee17 0a90 	vmov	r0, s15
 80091c8:	f7f7 f9be 	bl	8000548 <__aeabi_f2d>
 80091cc:	a37c      	add	r3, pc, #496	@ (adr r3, 80093c0 <Adjust_Right_Motors_By_Distance+0x588>)
 80091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d2:	f7f7 fa11 	bl	80005f8 <__aeabi_dmul>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4620      	mov	r0, r4
 80091dc:	4629      	mov	r1, r5
 80091de:	f7f7 f853 	bl	8000288 <__aeabi_dsub>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4610      	mov	r0, r2
 80091e8:	4619      	mov	r1, r3
 80091ea:	7bfa      	ldrb	r2, [r7, #15]
 80091ec:	4c76      	ldr	r4, [pc, #472]	@ (80093c8 <Adjust_Right_Motors_By_Distance+0x590>)
 80091ee:	4613      	mov	r3, r2
 80091f0:	00db      	lsls	r3, r3, #3
 80091f2:	4413      	add	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4423      	add	r3, r4
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681c      	ldr	r4, [r3, #0]
 80091fc:	f7f7 fcd4 	bl	8000ba8 <__aeabi_d2uiz>
 8009200:	4603      	mov	r3, r0
 8009202:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009204:	e067      	b.n	80092d6 <Adjust_Right_Motors_By_Distance+0x49e>
 8009206:	7bfa      	ldrb	r2, [r7, #15]
 8009208:	496f      	ldr	r1, [pc, #444]	@ (80093c8 <Adjust_Right_Motors_By_Distance+0x590>)
 800920a:	4613      	mov	r3, r2
 800920c:	00db      	lsls	r3, r3, #3
 800920e:	4413      	add	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	440b      	add	r3, r1
 8009214:	3304      	adds	r3, #4
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b08      	cmp	r3, #8
 800921a:	d12e      	bne.n	800927a <Adjust_Right_Motors_By_Distance+0x442>
 800921c:	69b8      	ldr	r0, [r7, #24]
 800921e:	f7f7 f971 	bl	8000504 <__aeabi_ui2d>
 8009222:	4604      	mov	r4, r0
 8009224:	460d      	mov	r5, r1
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	ee07 3a90 	vmov	s15, r3
 800922c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009230:	edd7 7a08 	vldr	s15, [r7, #32]
 8009234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009238:	ee17 0a90 	vmov	r0, s15
 800923c:	f7f7 f984 	bl	8000548 <__aeabi_f2d>
 8009240:	a35f      	add	r3, pc, #380	@ (adr r3, 80093c0 <Adjust_Right_Motors_By_Distance+0x588>)
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	f7f7 f9d7 	bl	80005f8 <__aeabi_dmul>
 800924a:	4602      	mov	r2, r0
 800924c:	460b      	mov	r3, r1
 800924e:	4620      	mov	r0, r4
 8009250:	4629      	mov	r1, r5
 8009252:	f7f7 f819 	bl	8000288 <__aeabi_dsub>
 8009256:	4602      	mov	r2, r0
 8009258:	460b      	mov	r3, r1
 800925a:	4610      	mov	r0, r2
 800925c:	4619      	mov	r1, r3
 800925e:	7bfa      	ldrb	r2, [r7, #15]
 8009260:	4c59      	ldr	r4, [pc, #356]	@ (80093c8 <Adjust_Right_Motors_By_Distance+0x590>)
 8009262:	4613      	mov	r3, r2
 8009264:	00db      	lsls	r3, r3, #3
 8009266:	4413      	add	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4423      	add	r3, r4
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681c      	ldr	r4, [r3, #0]
 8009270:	f7f7 fc9a 	bl	8000ba8 <__aeabi_d2uiz>
 8009274:	4603      	mov	r3, r0
 8009276:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8009278:	e02d      	b.n	80092d6 <Adjust_Right_Motors_By_Distance+0x49e>
 800927a:	69b8      	ldr	r0, [r7, #24]
 800927c:	f7f7 f942 	bl	8000504 <__aeabi_ui2d>
 8009280:	4604      	mov	r4, r0
 8009282:	460d      	mov	r5, r1
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	ee07 3a90 	vmov	s15, r3
 800928a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800928e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009296:	ee17 0a90 	vmov	r0, s15
 800929a:	f7f7 f955 	bl	8000548 <__aeabi_f2d>
 800929e:	a348      	add	r3, pc, #288	@ (adr r3, 80093c0 <Adjust_Right_Motors_By_Distance+0x588>)
 80092a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a4:	f7f7 f9a8 	bl	80005f8 <__aeabi_dmul>
 80092a8:	4602      	mov	r2, r0
 80092aa:	460b      	mov	r3, r1
 80092ac:	4620      	mov	r0, r4
 80092ae:	4629      	mov	r1, r5
 80092b0:	f7f6 ffea 	bl	8000288 <__aeabi_dsub>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	4610      	mov	r0, r2
 80092ba:	4619      	mov	r1, r3
 80092bc:	7bfa      	ldrb	r2, [r7, #15]
 80092be:	4c42      	ldr	r4, [pc, #264]	@ (80093c8 <Adjust_Right_Motors_By_Distance+0x590>)
 80092c0:	4613      	mov	r3, r2
 80092c2:	00db      	lsls	r3, r3, #3
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4423      	add	r3, r4
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681c      	ldr	r4, [r3, #0]
 80092ce:	f7f7 fc6b 	bl	8000ba8 <__aeabi_d2uiz>
 80092d2:	4603      	mov	r3, r0
 80092d4:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjustment * current_speed4 * magnification);
 80092d6:	7bba      	ldrb	r2, [r7, #14]
 80092d8:	493b      	ldr	r1, [pc, #236]	@ (80093c8 <Adjust_Right_Motors_By_Distance+0x590>)
 80092da:	4613      	mov	r3, r2
 80092dc:	00db      	lsls	r3, r3, #3
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	440b      	add	r3, r1
 80092e4:	3304      	adds	r3, #4
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d12e      	bne.n	800934a <Adjust_Right_Motors_By_Distance+0x512>
 80092ec:	6938      	ldr	r0, [r7, #16]
 80092ee:	f7f7 f909 	bl	8000504 <__aeabi_ui2d>
 80092f2:	4604      	mov	r4, r0
 80092f4:	460d      	mov	r5, r1
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	ee07 3a90 	vmov	s15, r3
 80092fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009300:	edd7 7a08 	vldr	s15, [r7, #32]
 8009304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009308:	ee17 0a90 	vmov	r0, s15
 800930c:	f7f7 f91c 	bl	8000548 <__aeabi_f2d>
 8009310:	a32b      	add	r3, pc, #172	@ (adr r3, 80093c0 <Adjust_Right_Motors_By_Distance+0x588>)
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	f7f7 f96f 	bl	80005f8 <__aeabi_dmul>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	4620      	mov	r0, r4
 8009320:	4629      	mov	r1, r5
 8009322:	f7f6 ffb1 	bl	8000288 <__aeabi_dsub>
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	4610      	mov	r0, r2
 800932c:	4619      	mov	r1, r3
 800932e:	7bba      	ldrb	r2, [r7, #14]
 8009330:	4c25      	ldr	r4, [pc, #148]	@ (80093c8 <Adjust_Right_Motors_By_Distance+0x590>)
 8009332:	4613      	mov	r3, r2
 8009334:	00db      	lsls	r3, r3, #3
 8009336:	4413      	add	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4423      	add	r3, r4
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681c      	ldr	r4, [r3, #0]
 8009340:	f7f7 fc32 	bl	8000ba8 <__aeabi_d2uiz>
 8009344:	4603      	mov	r3, r0
 8009346:	6363      	str	r3, [r4, #52]	@ 0x34
 8009348:	e0a8      	b.n	800949c <Adjust_Right_Motors_By_Distance+0x664>
 800934a:	7bba      	ldrb	r2, [r7, #14]
 800934c:	491e      	ldr	r1, [pc, #120]	@ (80093c8 <Adjust_Right_Motors_By_Distance+0x590>)
 800934e:	4613      	mov	r3, r2
 8009350:	00db      	lsls	r3, r3, #3
 8009352:	4413      	add	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	440b      	add	r3, r1
 8009358:	3304      	adds	r3, #4
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b04      	cmp	r3, #4
 800935e:	d135      	bne.n	80093cc <Adjust_Right_Motors_By_Distance+0x594>
 8009360:	6938      	ldr	r0, [r7, #16]
 8009362:	f7f7 f8cf 	bl	8000504 <__aeabi_ui2d>
 8009366:	4604      	mov	r4, r0
 8009368:	460d      	mov	r5, r1
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	ee07 3a90 	vmov	s15, r3
 8009370:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009374:	edd7 7a08 	vldr	s15, [r7, #32]
 8009378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800937c:	ee17 0a90 	vmov	r0, s15
 8009380:	f7f7 f8e2 	bl	8000548 <__aeabi_f2d>
 8009384:	a30e      	add	r3, pc, #56	@ (adr r3, 80093c0 <Adjust_Right_Motors_By_Distance+0x588>)
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	f7f7 f935 	bl	80005f8 <__aeabi_dmul>
 800938e:	4602      	mov	r2, r0
 8009390:	460b      	mov	r3, r1
 8009392:	4620      	mov	r0, r4
 8009394:	4629      	mov	r1, r5
 8009396:	f7f6 ff77 	bl	8000288 <__aeabi_dsub>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	4610      	mov	r0, r2
 80093a0:	4619      	mov	r1, r3
 80093a2:	7bba      	ldrb	r2, [r7, #14]
 80093a4:	4c08      	ldr	r4, [pc, #32]	@ (80093c8 <Adjust_Right_Motors_By_Distance+0x590>)
 80093a6:	4613      	mov	r3, r2
 80093a8:	00db      	lsls	r3, r3, #3
 80093aa:	4413      	add	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4423      	add	r3, r4
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681c      	ldr	r4, [r3, #0]
 80093b4:	f7f7 fbf8 	bl	8000ba8 <__aeabi_d2uiz>
 80093b8:	4603      	mov	r3, r0
 80093ba:	63a3      	str	r3, [r4, #56]	@ 0x38
 80093bc:	e06e      	b.n	800949c <Adjust_Right_Motors_By_Distance+0x664>
 80093be:	bf00      	nop
 80093c0:	cccccccd 	.word	0xcccccccd
 80093c4:	3feccccc 	.word	0x3feccccc
 80093c8:	20000388 	.word	0x20000388
 80093cc:	7bba      	ldrb	r2, [r7, #14]
 80093ce:	49c2      	ldr	r1, [pc, #776]	@ (80096d8 <Adjust_Right_Motors_By_Distance+0x8a0>)
 80093d0:	4613      	mov	r3, r2
 80093d2:	00db      	lsls	r3, r3, #3
 80093d4:	4413      	add	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	440b      	add	r3, r1
 80093da:	3304      	adds	r3, #4
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b08      	cmp	r3, #8
 80093e0:	d12e      	bne.n	8009440 <Adjust_Right_Motors_By_Distance+0x608>
 80093e2:	6938      	ldr	r0, [r7, #16]
 80093e4:	f7f7 f88e 	bl	8000504 <__aeabi_ui2d>
 80093e8:	4604      	mov	r4, r0
 80093ea:	460d      	mov	r5, r1
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	ee07 3a90 	vmov	s15, r3
 80093f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80093f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80093fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093fe:	ee17 0a90 	vmov	r0, s15
 8009402:	f7f7 f8a1 	bl	8000548 <__aeabi_f2d>
 8009406:	a3b2      	add	r3, pc, #712	@ (adr r3, 80096d0 <Adjust_Right_Motors_By_Distance+0x898>)
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	f7f7 f8f4 	bl	80005f8 <__aeabi_dmul>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	4620      	mov	r0, r4
 8009416:	4629      	mov	r1, r5
 8009418:	f7f6 ff36 	bl	8000288 <__aeabi_dsub>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4610      	mov	r0, r2
 8009422:	4619      	mov	r1, r3
 8009424:	7bba      	ldrb	r2, [r7, #14]
 8009426:	4cac      	ldr	r4, [pc, #688]	@ (80096d8 <Adjust_Right_Motors_By_Distance+0x8a0>)
 8009428:	4613      	mov	r3, r2
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	4413      	add	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4423      	add	r3, r4
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681c      	ldr	r4, [r3, #0]
 8009436:	f7f7 fbb7 	bl	8000ba8 <__aeabi_d2uiz>
 800943a:	4603      	mov	r3, r0
 800943c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800943e:	e02d      	b.n	800949c <Adjust_Right_Motors_By_Distance+0x664>
 8009440:	6938      	ldr	r0, [r7, #16]
 8009442:	f7f7 f85f 	bl	8000504 <__aeabi_ui2d>
 8009446:	4604      	mov	r4, r0
 8009448:	460d      	mov	r5, r1
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	ee07 3a90 	vmov	s15, r3
 8009450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009454:	edd7 7a08 	vldr	s15, [r7, #32]
 8009458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800945c:	ee17 0a90 	vmov	r0, s15
 8009460:	f7f7 f872 	bl	8000548 <__aeabi_f2d>
 8009464:	a39a      	add	r3, pc, #616	@ (adr r3, 80096d0 <Adjust_Right_Motors_By_Distance+0x898>)
 8009466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946a:	f7f7 f8c5 	bl	80005f8 <__aeabi_dmul>
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	4620      	mov	r0, r4
 8009474:	4629      	mov	r1, r5
 8009476:	f7f6 ff07 	bl	8000288 <__aeabi_dsub>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4610      	mov	r0, r2
 8009480:	4619      	mov	r1, r3
 8009482:	7bba      	ldrb	r2, [r7, #14]
 8009484:	4c94      	ldr	r4, [pc, #592]	@ (80096d8 <Adjust_Right_Motors_By_Distance+0x8a0>)
 8009486:	4613      	mov	r3, r2
 8009488:	00db      	lsls	r3, r3, #3
 800948a:	4413      	add	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4423      	add	r3, r4
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681c      	ldr	r4, [r3, #0]
 8009494:	f7f7 fb88 	bl	8000ba8 <__aeabi_d2uiz>
 8009498:	4603      	mov	r3, r0
 800949a:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 + speed_adjustment * current_speed1 * magnification);
 800949c:	7b7a      	ldrb	r2, [r7, #13]
 800949e:	498e      	ldr	r1, [pc, #568]	@ (80096d8 <Adjust_Right_Motors_By_Distance+0x8a0>)
 80094a0:	4613      	mov	r3, r2
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	3304      	adds	r3, #4
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d12e      	bne.n	8009510 <Adjust_Right_Motors_By_Distance+0x6d8>
 80094b2:	69f8      	ldr	r0, [r7, #28]
 80094b4:	f7f7 f826 	bl	8000504 <__aeabi_ui2d>
 80094b8:	4604      	mov	r4, r0
 80094ba:	460d      	mov	r5, r1
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	ee07 3a90 	vmov	s15, r3
 80094c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80094c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80094ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ce:	ee17 0a90 	vmov	r0, s15
 80094d2:	f7f7 f839 	bl	8000548 <__aeabi_f2d>
 80094d6:	a37e      	add	r3, pc, #504	@ (adr r3, 80096d0 <Adjust_Right_Motors_By_Distance+0x898>)
 80094d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094dc:	f7f7 f88c 	bl	80005f8 <__aeabi_dmul>
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	4620      	mov	r0, r4
 80094e6:	4629      	mov	r1, r5
 80094e8:	f7f6 fed0 	bl	800028c <__adddf3>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4610      	mov	r0, r2
 80094f2:	4619      	mov	r1, r3
 80094f4:	7b7a      	ldrb	r2, [r7, #13]
 80094f6:	4c78      	ldr	r4, [pc, #480]	@ (80096d8 <Adjust_Right_Motors_By_Distance+0x8a0>)
 80094f8:	4613      	mov	r3, r2
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	4413      	add	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4423      	add	r3, r4
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681c      	ldr	r4, [r3, #0]
 8009506:	f7f7 fb4f 	bl	8000ba8 <__aeabi_d2uiz>
 800950a:	4603      	mov	r3, r0
 800950c:	6363      	str	r3, [r4, #52]	@ 0x34
 800950e:	e0a1      	b.n	8009654 <Adjust_Right_Motors_By_Distance+0x81c>
 8009510:	7b7a      	ldrb	r2, [r7, #13]
 8009512:	4971      	ldr	r1, [pc, #452]	@ (80096d8 <Adjust_Right_Motors_By_Distance+0x8a0>)
 8009514:	4613      	mov	r3, r2
 8009516:	00db      	lsls	r3, r3, #3
 8009518:	4413      	add	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	440b      	add	r3, r1
 800951e:	3304      	adds	r3, #4
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b04      	cmp	r3, #4
 8009524:	d12e      	bne.n	8009584 <Adjust_Right_Motors_By_Distance+0x74c>
 8009526:	69f8      	ldr	r0, [r7, #28]
 8009528:	f7f6 ffec 	bl	8000504 <__aeabi_ui2d>
 800952c:	4604      	mov	r4, r0
 800952e:	460d      	mov	r5, r1
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	ee07 3a90 	vmov	s15, r3
 8009536:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800953a:	edd7 7a08 	vldr	s15, [r7, #32]
 800953e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009542:	ee17 0a90 	vmov	r0, s15
 8009546:	f7f6 ffff 	bl	8000548 <__aeabi_f2d>
 800954a:	a361      	add	r3, pc, #388	@ (adr r3, 80096d0 <Adjust_Right_Motors_By_Distance+0x898>)
 800954c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009550:	f7f7 f852 	bl	80005f8 <__aeabi_dmul>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	4620      	mov	r0, r4
 800955a:	4629      	mov	r1, r5
 800955c:	f7f6 fe96 	bl	800028c <__adddf3>
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	4610      	mov	r0, r2
 8009566:	4619      	mov	r1, r3
 8009568:	7b7a      	ldrb	r2, [r7, #13]
 800956a:	4c5b      	ldr	r4, [pc, #364]	@ (80096d8 <Adjust_Right_Motors_By_Distance+0x8a0>)
 800956c:	4613      	mov	r3, r2
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	4413      	add	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4423      	add	r3, r4
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681c      	ldr	r4, [r3, #0]
 800957a:	f7f7 fb15 	bl	8000ba8 <__aeabi_d2uiz>
 800957e:	4603      	mov	r3, r0
 8009580:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009582:	e067      	b.n	8009654 <Adjust_Right_Motors_By_Distance+0x81c>
 8009584:	7b7a      	ldrb	r2, [r7, #13]
 8009586:	4954      	ldr	r1, [pc, #336]	@ (80096d8 <Adjust_Right_Motors_By_Distance+0x8a0>)
 8009588:	4613      	mov	r3, r2
 800958a:	00db      	lsls	r3, r3, #3
 800958c:	4413      	add	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	440b      	add	r3, r1
 8009592:	3304      	adds	r3, #4
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b08      	cmp	r3, #8
 8009598:	d12e      	bne.n	80095f8 <Adjust_Right_Motors_By_Distance+0x7c0>
 800959a:	69f8      	ldr	r0, [r7, #28]
 800959c:	f7f6 ffb2 	bl	8000504 <__aeabi_ui2d>
 80095a0:	4604      	mov	r4, r0
 80095a2:	460d      	mov	r5, r1
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	ee07 3a90 	vmov	s15, r3
 80095aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80095ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80095b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095b6:	ee17 0a90 	vmov	r0, s15
 80095ba:	f7f6 ffc5 	bl	8000548 <__aeabi_f2d>
 80095be:	a344      	add	r3, pc, #272	@ (adr r3, 80096d0 <Adjust_Right_Motors_By_Distance+0x898>)
 80095c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c4:	f7f7 f818 	bl	80005f8 <__aeabi_dmul>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4620      	mov	r0, r4
 80095ce:	4629      	mov	r1, r5
 80095d0:	f7f6 fe5c 	bl	800028c <__adddf3>
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	4610      	mov	r0, r2
 80095da:	4619      	mov	r1, r3
 80095dc:	7b7a      	ldrb	r2, [r7, #13]
 80095de:	4c3e      	ldr	r4, [pc, #248]	@ (80096d8 <Adjust_Right_Motors_By_Distance+0x8a0>)
 80095e0:	4613      	mov	r3, r2
 80095e2:	00db      	lsls	r3, r3, #3
 80095e4:	4413      	add	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4423      	add	r3, r4
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681c      	ldr	r4, [r3, #0]
 80095ee:	f7f7 fadb 	bl	8000ba8 <__aeabi_d2uiz>
 80095f2:	4603      	mov	r3, r0
 80095f4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80095f6:	e02d      	b.n	8009654 <Adjust_Right_Motors_By_Distance+0x81c>
 80095f8:	69f8      	ldr	r0, [r7, #28]
 80095fa:	f7f6 ff83 	bl	8000504 <__aeabi_ui2d>
 80095fe:	4604      	mov	r4, r0
 8009600:	460d      	mov	r5, r1
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	ee07 3a90 	vmov	s15, r3
 8009608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800960c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009614:	ee17 0a90 	vmov	r0, s15
 8009618:	f7f6 ff96 	bl	8000548 <__aeabi_f2d>
 800961c:	a32c      	add	r3, pc, #176	@ (adr r3, 80096d0 <Adjust_Right_Motors_By_Distance+0x898>)
 800961e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009622:	f7f6 ffe9 	bl	80005f8 <__aeabi_dmul>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4620      	mov	r0, r4
 800962c:	4629      	mov	r1, r5
 800962e:	f7f6 fe2d 	bl	800028c <__adddf3>
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	4610      	mov	r0, r2
 8009638:	4619      	mov	r1, r3
 800963a:	7b7a      	ldrb	r2, [r7, #13]
 800963c:	4c26      	ldr	r4, [pc, #152]	@ (80096d8 <Adjust_Right_Motors_By_Distance+0x8a0>)
 800963e:	4613      	mov	r3, r2
 8009640:	00db      	lsls	r3, r3, #3
 8009642:	4413      	add	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4423      	add	r3, r4
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681c      	ldr	r4, [r3, #0]
 800964c:	f7f7 faac 	bl	8000ba8 <__aeabi_d2uiz>
 8009650:	4603      	mov	r3, r0
 8009652:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 + speed_adjustment * current_speed3 * magnification);
 8009654:	7b3a      	ldrb	r2, [r7, #12]
 8009656:	4920      	ldr	r1, [pc, #128]	@ (80096d8 <Adjust_Right_Motors_By_Distance+0x8a0>)
 8009658:	4613      	mov	r3, r2
 800965a:	00db      	lsls	r3, r3, #3
 800965c:	4413      	add	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	440b      	add	r3, r1
 8009662:	3304      	adds	r3, #4
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d138      	bne.n	80096dc <Adjust_Right_Motors_By_Distance+0x8a4>
 800966a:	6978      	ldr	r0, [r7, #20]
 800966c:	f7f6 ff4a 	bl	8000504 <__aeabi_ui2d>
 8009670:	4604      	mov	r4, r0
 8009672:	460d      	mov	r5, r1
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	ee07 3a90 	vmov	s15, r3
 800967a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800967e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009686:	ee17 0a90 	vmov	r0, s15
 800968a:	f7f6 ff5d 	bl	8000548 <__aeabi_f2d>
 800968e:	a310      	add	r3, pc, #64	@ (adr r3, 80096d0 <Adjust_Right_Motors_By_Distance+0x898>)
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	f7f6 ffb0 	bl	80005f8 <__aeabi_dmul>
 8009698:	4602      	mov	r2, r0
 800969a:	460b      	mov	r3, r1
 800969c:	4620      	mov	r0, r4
 800969e:	4629      	mov	r1, r5
 80096a0:	f7f6 fdf4 	bl	800028c <__adddf3>
 80096a4:	4602      	mov	r2, r0
 80096a6:	460b      	mov	r3, r1
 80096a8:	4610      	mov	r0, r2
 80096aa:	4619      	mov	r1, r3
 80096ac:	7b3a      	ldrb	r2, [r7, #12]
 80096ae:	4c0a      	ldr	r4, [pc, #40]	@ (80096d8 <Adjust_Right_Motors_By_Distance+0x8a0>)
 80096b0:	4613      	mov	r3, r2
 80096b2:	00db      	lsls	r3, r3, #3
 80096b4:	4413      	add	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4423      	add	r3, r4
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681c      	ldr	r4, [r3, #0]
 80096be:	f7f7 fa73 	bl	8000ba8 <__aeabi_d2uiz>
 80096c2:	4603      	mov	r3, r0
 80096c4:	6363      	str	r3, [r4, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 - speed_adjustment * current_speed1 * magnification_close);
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjustment * current_speed3 * magnification_close);
        // OLED_ShowNum(4, 7, speed_adjustment * current_speed4 * magnification_close, 4);
        // OLED_ShowNum(4, 12, current_speed4, 4);
    }
}
 80096c6:	f000 bc2c 	b.w	8009f22 <Adjust_Right_Motors_By_Distance+0x10ea>
 80096ca:	bf00      	nop
 80096cc:	f3af 8000 	nop.w
 80096d0:	cccccccd 	.word	0xcccccccd
 80096d4:	3feccccc 	.word	0x3feccccc
 80096d8:	20000388 	.word	0x20000388
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 + speed_adjustment * current_speed3 * magnification);
 80096dc:	7b3a      	ldrb	r2, [r7, #12]
 80096de:	49aa      	ldr	r1, [pc, #680]	@ (8009988 <Adjust_Right_Motors_By_Distance+0xb50>)
 80096e0:	4613      	mov	r3, r2
 80096e2:	00db      	lsls	r3, r3, #3
 80096e4:	4413      	add	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	440b      	add	r3, r1
 80096ea:	3304      	adds	r3, #4
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b04      	cmp	r3, #4
 80096f0:	d12e      	bne.n	8009750 <Adjust_Right_Motors_By_Distance+0x918>
 80096f2:	6978      	ldr	r0, [r7, #20]
 80096f4:	f7f6 ff06 	bl	8000504 <__aeabi_ui2d>
 80096f8:	4604      	mov	r4, r0
 80096fa:	460d      	mov	r5, r1
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	ee07 3a90 	vmov	s15, r3
 8009702:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009706:	edd7 7a08 	vldr	s15, [r7, #32]
 800970a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970e:	ee17 0a90 	vmov	r0, s15
 8009712:	f7f6 ff19 	bl	8000548 <__aeabi_f2d>
 8009716:	a39a      	add	r3, pc, #616	@ (adr r3, 8009980 <Adjust_Right_Motors_By_Distance+0xb48>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	f7f6 ff6c 	bl	80005f8 <__aeabi_dmul>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4620      	mov	r0, r4
 8009726:	4629      	mov	r1, r5
 8009728:	f7f6 fdb0 	bl	800028c <__adddf3>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	4610      	mov	r0, r2
 8009732:	4619      	mov	r1, r3
 8009734:	7b3a      	ldrb	r2, [r7, #12]
 8009736:	4c94      	ldr	r4, [pc, #592]	@ (8009988 <Adjust_Right_Motors_By_Distance+0xb50>)
 8009738:	4613      	mov	r3, r2
 800973a:	00db      	lsls	r3, r3, #3
 800973c:	4413      	add	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4423      	add	r3, r4
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681c      	ldr	r4, [r3, #0]
 8009746:	f7f7 fa2f 	bl	8000ba8 <__aeabi_d2uiz>
 800974a:	4603      	mov	r3, r0
 800974c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800974e:	e3e8      	b.n	8009f22 <Adjust_Right_Motors_By_Distance+0x10ea>
 8009750:	7b3a      	ldrb	r2, [r7, #12]
 8009752:	498d      	ldr	r1, [pc, #564]	@ (8009988 <Adjust_Right_Motors_By_Distance+0xb50>)
 8009754:	4613      	mov	r3, r2
 8009756:	00db      	lsls	r3, r3, #3
 8009758:	4413      	add	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	440b      	add	r3, r1
 800975e:	3304      	adds	r3, #4
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b08      	cmp	r3, #8
 8009764:	d12e      	bne.n	80097c4 <Adjust_Right_Motors_By_Distance+0x98c>
 8009766:	6978      	ldr	r0, [r7, #20]
 8009768:	f7f6 fecc 	bl	8000504 <__aeabi_ui2d>
 800976c:	4604      	mov	r4, r0
 800976e:	460d      	mov	r5, r1
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	ee07 3a90 	vmov	s15, r3
 8009776:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800977a:	edd7 7a08 	vldr	s15, [r7, #32]
 800977e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009782:	ee17 0a90 	vmov	r0, s15
 8009786:	f7f6 fedf 	bl	8000548 <__aeabi_f2d>
 800978a:	a37d      	add	r3, pc, #500	@ (adr r3, 8009980 <Adjust_Right_Motors_By_Distance+0xb48>)
 800978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009790:	f7f6 ff32 	bl	80005f8 <__aeabi_dmul>
 8009794:	4602      	mov	r2, r0
 8009796:	460b      	mov	r3, r1
 8009798:	4620      	mov	r0, r4
 800979a:	4629      	mov	r1, r5
 800979c:	f7f6 fd76 	bl	800028c <__adddf3>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4610      	mov	r0, r2
 80097a6:	4619      	mov	r1, r3
 80097a8:	7b3a      	ldrb	r2, [r7, #12]
 80097aa:	4c77      	ldr	r4, [pc, #476]	@ (8009988 <Adjust_Right_Motors_By_Distance+0xb50>)
 80097ac:	4613      	mov	r3, r2
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	4413      	add	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4423      	add	r3, r4
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681c      	ldr	r4, [r3, #0]
 80097ba:	f7f7 f9f5 	bl	8000ba8 <__aeabi_d2uiz>
 80097be:	4603      	mov	r3, r0
 80097c0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80097c2:	e3ae      	b.n	8009f22 <Adjust_Right_Motors_By_Distance+0x10ea>
 80097c4:	6978      	ldr	r0, [r7, #20]
 80097c6:	f7f6 fe9d 	bl	8000504 <__aeabi_ui2d>
 80097ca:	4604      	mov	r4, r0
 80097cc:	460d      	mov	r5, r1
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	ee07 3a90 	vmov	s15, r3
 80097d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80097d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80097dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097e0:	ee17 0a90 	vmov	r0, s15
 80097e4:	f7f6 feb0 	bl	8000548 <__aeabi_f2d>
 80097e8:	a365      	add	r3, pc, #404	@ (adr r3, 8009980 <Adjust_Right_Motors_By_Distance+0xb48>)
 80097ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ee:	f7f6 ff03 	bl	80005f8 <__aeabi_dmul>
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	4620      	mov	r0, r4
 80097f8:	4629      	mov	r1, r5
 80097fa:	f7f6 fd47 	bl	800028c <__adddf3>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4610      	mov	r0, r2
 8009804:	4619      	mov	r1, r3
 8009806:	7b3a      	ldrb	r2, [r7, #12]
 8009808:	4c5f      	ldr	r4, [pc, #380]	@ (8009988 <Adjust_Right_Motors_By_Distance+0xb50>)
 800980a:	4613      	mov	r3, r2
 800980c:	00db      	lsls	r3, r3, #3
 800980e:	4413      	add	r3, r2
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	4423      	add	r3, r4
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681c      	ldr	r4, [r3, #0]
 8009818:	f7f7 f9c6 	bl	8000ba8 <__aeabi_d2uiz>
 800981c:	4603      	mov	r3, r0
 800981e:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8009820:	e37f      	b.n	8009f22 <Adjust_Right_Motors_By_Distance+0x10ea>
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 + speed_adjustment * current_speed2 * magnification_close);
 8009822:	7bfa      	ldrb	r2, [r7, #15]
 8009824:	4958      	ldr	r1, [pc, #352]	@ (8009988 <Adjust_Right_Motors_By_Distance+0xb50>)
 8009826:	4613      	mov	r3, r2
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	4413      	add	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	440b      	add	r3, r1
 8009830:	3304      	adds	r3, #4
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d12e      	bne.n	8009896 <Adjust_Right_Motors_By_Distance+0xa5e>
 8009838:	69b8      	ldr	r0, [r7, #24]
 800983a:	f7f6 fe63 	bl	8000504 <__aeabi_ui2d>
 800983e:	4604      	mov	r4, r0
 8009840:	460d      	mov	r5, r1
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	ee07 3a90 	vmov	s15, r3
 8009848:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800984c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009854:	ee17 0a90 	vmov	r0, s15
 8009858:	f7f6 fe76 	bl	8000548 <__aeabi_f2d>
 800985c:	a348      	add	r3, pc, #288	@ (adr r3, 8009980 <Adjust_Right_Motors_By_Distance+0xb48>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7f6 fec9 	bl	80005f8 <__aeabi_dmul>
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	4620      	mov	r0, r4
 800986c:	4629      	mov	r1, r5
 800986e:	f7f6 fd0d 	bl	800028c <__adddf3>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	4610      	mov	r0, r2
 8009878:	4619      	mov	r1, r3
 800987a:	7bfa      	ldrb	r2, [r7, #15]
 800987c:	4c42      	ldr	r4, [pc, #264]	@ (8009988 <Adjust_Right_Motors_By_Distance+0xb50>)
 800987e:	4613      	mov	r3, r2
 8009880:	00db      	lsls	r3, r3, #3
 8009882:	4413      	add	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4423      	add	r3, r4
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681c      	ldr	r4, [r3, #0]
 800988c:	f7f7 f98c 	bl	8000ba8 <__aeabi_d2uiz>
 8009890:	4603      	mov	r3, r0
 8009892:	6363      	str	r3, [r4, #52]	@ 0x34
 8009894:	e0a8      	b.n	80099e8 <Adjust_Right_Motors_By_Distance+0xbb0>
 8009896:	7bfa      	ldrb	r2, [r7, #15]
 8009898:	493b      	ldr	r1, [pc, #236]	@ (8009988 <Adjust_Right_Motors_By_Distance+0xb50>)
 800989a:	4613      	mov	r3, r2
 800989c:	00db      	lsls	r3, r3, #3
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	440b      	add	r3, r1
 80098a4:	3304      	adds	r3, #4
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b04      	cmp	r3, #4
 80098aa:	d12e      	bne.n	800990a <Adjust_Right_Motors_By_Distance+0xad2>
 80098ac:	69b8      	ldr	r0, [r7, #24]
 80098ae:	f7f6 fe29 	bl	8000504 <__aeabi_ui2d>
 80098b2:	4604      	mov	r4, r0
 80098b4:	460d      	mov	r5, r1
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	ee07 3a90 	vmov	s15, r3
 80098bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80098c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80098c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c8:	ee17 0a90 	vmov	r0, s15
 80098cc:	f7f6 fe3c 	bl	8000548 <__aeabi_f2d>
 80098d0:	a32b      	add	r3, pc, #172	@ (adr r3, 8009980 <Adjust_Right_Motors_By_Distance+0xb48>)
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	f7f6 fe8f 	bl	80005f8 <__aeabi_dmul>
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	4620      	mov	r0, r4
 80098e0:	4629      	mov	r1, r5
 80098e2:	f7f6 fcd3 	bl	800028c <__adddf3>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4610      	mov	r0, r2
 80098ec:	4619      	mov	r1, r3
 80098ee:	7bfa      	ldrb	r2, [r7, #15]
 80098f0:	4c25      	ldr	r4, [pc, #148]	@ (8009988 <Adjust_Right_Motors_By_Distance+0xb50>)
 80098f2:	4613      	mov	r3, r2
 80098f4:	00db      	lsls	r3, r3, #3
 80098f6:	4413      	add	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4423      	add	r3, r4
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681c      	ldr	r4, [r3, #0]
 8009900:	f7f7 f952 	bl	8000ba8 <__aeabi_d2uiz>
 8009904:	4603      	mov	r3, r0
 8009906:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009908:	e06e      	b.n	80099e8 <Adjust_Right_Motors_By_Distance+0xbb0>
 800990a:	7bfa      	ldrb	r2, [r7, #15]
 800990c:	491e      	ldr	r1, [pc, #120]	@ (8009988 <Adjust_Right_Motors_By_Distance+0xb50>)
 800990e:	4613      	mov	r3, r2
 8009910:	00db      	lsls	r3, r3, #3
 8009912:	4413      	add	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	440b      	add	r3, r1
 8009918:	3304      	adds	r3, #4
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b08      	cmp	r3, #8
 800991e:	d135      	bne.n	800998c <Adjust_Right_Motors_By_Distance+0xb54>
 8009920:	69b8      	ldr	r0, [r7, #24]
 8009922:	f7f6 fdef 	bl	8000504 <__aeabi_ui2d>
 8009926:	4604      	mov	r4, r0
 8009928:	460d      	mov	r5, r1
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	ee07 3a90 	vmov	s15, r3
 8009930:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009934:	edd7 7a08 	vldr	s15, [r7, #32]
 8009938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800993c:	ee17 0a90 	vmov	r0, s15
 8009940:	f7f6 fe02 	bl	8000548 <__aeabi_f2d>
 8009944:	a30e      	add	r3, pc, #56	@ (adr r3, 8009980 <Adjust_Right_Motors_By_Distance+0xb48>)
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	f7f6 fe55 	bl	80005f8 <__aeabi_dmul>
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	4620      	mov	r0, r4
 8009954:	4629      	mov	r1, r5
 8009956:	f7f6 fc99 	bl	800028c <__adddf3>
 800995a:	4602      	mov	r2, r0
 800995c:	460b      	mov	r3, r1
 800995e:	4610      	mov	r0, r2
 8009960:	4619      	mov	r1, r3
 8009962:	7bfa      	ldrb	r2, [r7, #15]
 8009964:	4c08      	ldr	r4, [pc, #32]	@ (8009988 <Adjust_Right_Motors_By_Distance+0xb50>)
 8009966:	4613      	mov	r3, r2
 8009968:	00db      	lsls	r3, r3, #3
 800996a:	4413      	add	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4423      	add	r3, r4
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681c      	ldr	r4, [r3, #0]
 8009974:	f7f7 f918 	bl	8000ba8 <__aeabi_d2uiz>
 8009978:	4603      	mov	r3, r0
 800997a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800997c:	e034      	b.n	80099e8 <Adjust_Right_Motors_By_Distance+0xbb0>
 800997e:	bf00      	nop
 8009980:	cccccccd 	.word	0xcccccccd
 8009984:	3feccccc 	.word	0x3feccccc
 8009988:	20000388 	.word	0x20000388
 800998c:	69b8      	ldr	r0, [r7, #24]
 800998e:	f7f6 fdb9 	bl	8000504 <__aeabi_ui2d>
 8009992:	4604      	mov	r4, r0
 8009994:	460d      	mov	r5, r1
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	ee07 3a90 	vmov	s15, r3
 800999c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80099a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80099a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a8:	ee17 0a90 	vmov	r0, s15
 80099ac:	f7f6 fdcc 	bl	8000548 <__aeabi_f2d>
 80099b0:	a3d3      	add	r3, pc, #844	@ (adr r3, 8009d00 <Adjust_Right_Motors_By_Distance+0xec8>)
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	f7f6 fe1f 	bl	80005f8 <__aeabi_dmul>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4620      	mov	r0, r4
 80099c0:	4629      	mov	r1, r5
 80099c2:	f7f6 fc63 	bl	800028c <__adddf3>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	4610      	mov	r0, r2
 80099cc:	4619      	mov	r1, r3
 80099ce:	7bfa      	ldrb	r2, [r7, #15]
 80099d0:	4ccd      	ldr	r4, [pc, #820]	@ (8009d08 <Adjust_Right_Motors_By_Distance+0xed0>)
 80099d2:	4613      	mov	r3, r2
 80099d4:	00db      	lsls	r3, r3, #3
 80099d6:	4413      	add	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4423      	add	r3, r4
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681c      	ldr	r4, [r3, #0]
 80099e0:	f7f7 f8e2 	bl	8000ba8 <__aeabi_d2uiz>
 80099e4:	4603      	mov	r3, r0
 80099e6:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjustment * current_speed4 * magnification_close);
 80099e8:	7bba      	ldrb	r2, [r7, #14]
 80099ea:	49c7      	ldr	r1, [pc, #796]	@ (8009d08 <Adjust_Right_Motors_By_Distance+0xed0>)
 80099ec:	4613      	mov	r3, r2
 80099ee:	00db      	lsls	r3, r3, #3
 80099f0:	4413      	add	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	440b      	add	r3, r1
 80099f6:	3304      	adds	r3, #4
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d12e      	bne.n	8009a5c <Adjust_Right_Motors_By_Distance+0xc24>
 80099fe:	6938      	ldr	r0, [r7, #16]
 8009a00:	f7f6 fd80 	bl	8000504 <__aeabi_ui2d>
 8009a04:	4604      	mov	r4, r0
 8009a06:	460d      	mov	r5, r1
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009a12:	edd7 7a08 	vldr	s15, [r7, #32]
 8009a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1a:	ee17 0a90 	vmov	r0, s15
 8009a1e:	f7f6 fd93 	bl	8000548 <__aeabi_f2d>
 8009a22:	a3b7      	add	r3, pc, #732	@ (adr r3, 8009d00 <Adjust_Right_Motors_By_Distance+0xec8>)
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	f7f6 fde6 	bl	80005f8 <__aeabi_dmul>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	4620      	mov	r0, r4
 8009a32:	4629      	mov	r1, r5
 8009a34:	f7f6 fc2a 	bl	800028c <__adddf3>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	4619      	mov	r1, r3
 8009a40:	7bba      	ldrb	r2, [r7, #14]
 8009a42:	4cb1      	ldr	r4, [pc, #708]	@ (8009d08 <Adjust_Right_Motors_By_Distance+0xed0>)
 8009a44:	4613      	mov	r3, r2
 8009a46:	00db      	lsls	r3, r3, #3
 8009a48:	4413      	add	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4423      	add	r3, r4
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681c      	ldr	r4, [r3, #0]
 8009a52:	f7f7 f8a9 	bl	8000ba8 <__aeabi_d2uiz>
 8009a56:	4603      	mov	r3, r0
 8009a58:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a5a:	e0a1      	b.n	8009ba0 <Adjust_Right_Motors_By_Distance+0xd68>
 8009a5c:	7bba      	ldrb	r2, [r7, #14]
 8009a5e:	49aa      	ldr	r1, [pc, #680]	@ (8009d08 <Adjust_Right_Motors_By_Distance+0xed0>)
 8009a60:	4613      	mov	r3, r2
 8009a62:	00db      	lsls	r3, r3, #3
 8009a64:	4413      	add	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	440b      	add	r3, r1
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	d12e      	bne.n	8009ad0 <Adjust_Right_Motors_By_Distance+0xc98>
 8009a72:	6938      	ldr	r0, [r7, #16]
 8009a74:	f7f6 fd46 	bl	8000504 <__aeabi_ui2d>
 8009a78:	4604      	mov	r4, r0
 8009a7a:	460d      	mov	r5, r1
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009a86:	edd7 7a08 	vldr	s15, [r7, #32]
 8009a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a8e:	ee17 0a90 	vmov	r0, s15
 8009a92:	f7f6 fd59 	bl	8000548 <__aeabi_f2d>
 8009a96:	a39a      	add	r3, pc, #616	@ (adr r3, 8009d00 <Adjust_Right_Motors_By_Distance+0xec8>)
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	f7f6 fdac 	bl	80005f8 <__aeabi_dmul>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	f7f6 fbf0 	bl	800028c <__adddf3>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4610      	mov	r0, r2
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	7bba      	ldrb	r2, [r7, #14]
 8009ab6:	4c94      	ldr	r4, [pc, #592]	@ (8009d08 <Adjust_Right_Motors_By_Distance+0xed0>)
 8009ab8:	4613      	mov	r3, r2
 8009aba:	00db      	lsls	r3, r3, #3
 8009abc:	4413      	add	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4423      	add	r3, r4
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681c      	ldr	r4, [r3, #0]
 8009ac6:	f7f7 f86f 	bl	8000ba8 <__aeabi_d2uiz>
 8009aca:	4603      	mov	r3, r0
 8009acc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009ace:	e067      	b.n	8009ba0 <Adjust_Right_Motors_By_Distance+0xd68>
 8009ad0:	7bba      	ldrb	r2, [r7, #14]
 8009ad2:	498d      	ldr	r1, [pc, #564]	@ (8009d08 <Adjust_Right_Motors_By_Distance+0xed0>)
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	00db      	lsls	r3, r3, #3
 8009ad8:	4413      	add	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	440b      	add	r3, r1
 8009ade:	3304      	adds	r3, #4
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b08      	cmp	r3, #8
 8009ae4:	d12e      	bne.n	8009b44 <Adjust_Right_Motors_By_Distance+0xd0c>
 8009ae6:	6938      	ldr	r0, [r7, #16]
 8009ae8:	f7f6 fd0c 	bl	8000504 <__aeabi_ui2d>
 8009aec:	4604      	mov	r4, r0
 8009aee:	460d      	mov	r5, r1
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009afa:	edd7 7a08 	vldr	s15, [r7, #32]
 8009afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b02:	ee17 0a90 	vmov	r0, s15
 8009b06:	f7f6 fd1f 	bl	8000548 <__aeabi_f2d>
 8009b0a:	a37d      	add	r3, pc, #500	@ (adr r3, 8009d00 <Adjust_Right_Motors_By_Distance+0xec8>)
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	f7f6 fd72 	bl	80005f8 <__aeabi_dmul>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	4620      	mov	r0, r4
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	f7f6 fbb6 	bl	800028c <__adddf3>
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	4610      	mov	r0, r2
 8009b26:	4619      	mov	r1, r3
 8009b28:	7bba      	ldrb	r2, [r7, #14]
 8009b2a:	4c77      	ldr	r4, [pc, #476]	@ (8009d08 <Adjust_Right_Motors_By_Distance+0xed0>)
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	00db      	lsls	r3, r3, #3
 8009b30:	4413      	add	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4423      	add	r3, r4
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681c      	ldr	r4, [r3, #0]
 8009b3a:	f7f7 f835 	bl	8000ba8 <__aeabi_d2uiz>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8009b42:	e02d      	b.n	8009ba0 <Adjust_Right_Motors_By_Distance+0xd68>
 8009b44:	6938      	ldr	r0, [r7, #16]
 8009b46:	f7f6 fcdd 	bl	8000504 <__aeabi_ui2d>
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	460d      	mov	r5, r1
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	ee07 3a90 	vmov	s15, r3
 8009b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b58:	edd7 7a08 	vldr	s15, [r7, #32]
 8009b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b60:	ee17 0a90 	vmov	r0, s15
 8009b64:	f7f6 fcf0 	bl	8000548 <__aeabi_f2d>
 8009b68:	a365      	add	r3, pc, #404	@ (adr r3, 8009d00 <Adjust_Right_Motors_By_Distance+0xec8>)
 8009b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6e:	f7f6 fd43 	bl	80005f8 <__aeabi_dmul>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	4620      	mov	r0, r4
 8009b78:	4629      	mov	r1, r5
 8009b7a:	f7f6 fb87 	bl	800028c <__adddf3>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	4610      	mov	r0, r2
 8009b84:	4619      	mov	r1, r3
 8009b86:	7bba      	ldrb	r2, [r7, #14]
 8009b88:	4c5f      	ldr	r4, [pc, #380]	@ (8009d08 <Adjust_Right_Motors_By_Distance+0xed0>)
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	4413      	add	r3, r2
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4423      	add	r3, r4
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681c      	ldr	r4, [r3, #0]
 8009b98:	f7f7 f806 	bl	8000ba8 <__aeabi_d2uiz>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 - speed_adjustment * current_speed1 * magnification_close);
 8009ba0:	7b7a      	ldrb	r2, [r7, #13]
 8009ba2:	4959      	ldr	r1, [pc, #356]	@ (8009d08 <Adjust_Right_Motors_By_Distance+0xed0>)
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	00db      	lsls	r3, r3, #3
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	440b      	add	r3, r1
 8009bae:	3304      	adds	r3, #4
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d12e      	bne.n	8009c14 <Adjust_Right_Motors_By_Distance+0xddc>
 8009bb6:	69f8      	ldr	r0, [r7, #28]
 8009bb8:	f7f6 fca4 	bl	8000504 <__aeabi_ui2d>
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	460d      	mov	r5, r1
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009bca:	edd7 7a08 	vldr	s15, [r7, #32]
 8009bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd2:	ee17 0a90 	vmov	r0, s15
 8009bd6:	f7f6 fcb7 	bl	8000548 <__aeabi_f2d>
 8009bda:	a349      	add	r3, pc, #292	@ (adr r3, 8009d00 <Adjust_Right_Motors_By_Distance+0xec8>)
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	f7f6 fd0a 	bl	80005f8 <__aeabi_dmul>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4620      	mov	r0, r4
 8009bea:	4629      	mov	r1, r5
 8009bec:	f7f6 fb4c 	bl	8000288 <__aeabi_dsub>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	7b7a      	ldrb	r2, [r7, #13]
 8009bfa:	4c43      	ldr	r4, [pc, #268]	@ (8009d08 <Adjust_Right_Motors_By_Distance+0xed0>)
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	00db      	lsls	r3, r3, #3
 8009c00:	4413      	add	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4423      	add	r3, r4
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681c      	ldr	r4, [r3, #0]
 8009c0a:	f7f6 ffcd 	bl	8000ba8 <__aeabi_d2uiz>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c12:	e0a9      	b.n	8009d68 <Adjust_Right_Motors_By_Distance+0xf30>
 8009c14:	7b7a      	ldrb	r2, [r7, #13]
 8009c16:	493c      	ldr	r1, [pc, #240]	@ (8009d08 <Adjust_Right_Motors_By_Distance+0xed0>)
 8009c18:	4613      	mov	r3, r2
 8009c1a:	00db      	lsls	r3, r3, #3
 8009c1c:	4413      	add	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	440b      	add	r3, r1
 8009c22:	3304      	adds	r3, #4
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b04      	cmp	r3, #4
 8009c28:	d12e      	bne.n	8009c88 <Adjust_Right_Motors_By_Distance+0xe50>
 8009c2a:	69f8      	ldr	r0, [r7, #28]
 8009c2c:	f7f6 fc6a 	bl	8000504 <__aeabi_ui2d>
 8009c30:	4604      	mov	r4, r0
 8009c32:	460d      	mov	r5, r1
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	ee07 3a90 	vmov	s15, r3
 8009c3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c46:	ee17 0a90 	vmov	r0, s15
 8009c4a:	f7f6 fc7d 	bl	8000548 <__aeabi_f2d>
 8009c4e:	a32c      	add	r3, pc, #176	@ (adr r3, 8009d00 <Adjust_Right_Motors_By_Distance+0xec8>)
 8009c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c54:	f7f6 fcd0 	bl	80005f8 <__aeabi_dmul>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	4629      	mov	r1, r5
 8009c60:	f7f6 fb12 	bl	8000288 <__aeabi_dsub>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	4610      	mov	r0, r2
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	7b7a      	ldrb	r2, [r7, #13]
 8009c6e:	4c26      	ldr	r4, [pc, #152]	@ (8009d08 <Adjust_Right_Motors_By_Distance+0xed0>)
 8009c70:	4613      	mov	r3, r2
 8009c72:	00db      	lsls	r3, r3, #3
 8009c74:	4413      	add	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4423      	add	r3, r4
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681c      	ldr	r4, [r3, #0]
 8009c7e:	f7f6 ff93 	bl	8000ba8 <__aeabi_d2uiz>
 8009c82:	4603      	mov	r3, r0
 8009c84:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009c86:	e06f      	b.n	8009d68 <Adjust_Right_Motors_By_Distance+0xf30>
 8009c88:	7b7a      	ldrb	r2, [r7, #13]
 8009c8a:	491f      	ldr	r1, [pc, #124]	@ (8009d08 <Adjust_Right_Motors_By_Distance+0xed0>)
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	00db      	lsls	r3, r3, #3
 8009c90:	4413      	add	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	440b      	add	r3, r1
 8009c96:	3304      	adds	r3, #4
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b08      	cmp	r3, #8
 8009c9c:	d136      	bne.n	8009d0c <Adjust_Right_Motors_By_Distance+0xed4>
 8009c9e:	69f8      	ldr	r0, [r7, #28]
 8009ca0:	f7f6 fc30 	bl	8000504 <__aeabi_ui2d>
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	460d      	mov	r5, r1
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	ee07 3a90 	vmov	s15, r3
 8009cae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009cb2:	edd7 7a08 	vldr	s15, [r7, #32]
 8009cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cba:	ee17 0a90 	vmov	r0, s15
 8009cbe:	f7f6 fc43 	bl	8000548 <__aeabi_f2d>
 8009cc2:	a30f      	add	r3, pc, #60	@ (adr r3, 8009d00 <Adjust_Right_Motors_By_Distance+0xec8>)
 8009cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc8:	f7f6 fc96 	bl	80005f8 <__aeabi_dmul>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	f7f6 fad8 	bl	8000288 <__aeabi_dsub>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4610      	mov	r0, r2
 8009cde:	4619      	mov	r1, r3
 8009ce0:	7b7a      	ldrb	r2, [r7, #13]
 8009ce2:	4c09      	ldr	r4, [pc, #36]	@ (8009d08 <Adjust_Right_Motors_By_Distance+0xed0>)
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	4413      	add	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4423      	add	r3, r4
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681c      	ldr	r4, [r3, #0]
 8009cf2:	f7f6 ff59 	bl	8000ba8 <__aeabi_d2uiz>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8009cfa:	e035      	b.n	8009d68 <Adjust_Right_Motors_By_Distance+0xf30>
 8009cfc:	f3af 8000 	nop.w
 8009d00:	cccccccd 	.word	0xcccccccd
 8009d04:	3feccccc 	.word	0x3feccccc
 8009d08:	20000388 	.word	0x20000388
 8009d0c:	69f8      	ldr	r0, [r7, #28]
 8009d0e:	f7f6 fbf9 	bl	8000504 <__aeabi_ui2d>
 8009d12:	4604      	mov	r4, r0
 8009d14:	460d      	mov	r5, r1
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	ee07 3a90 	vmov	s15, r3
 8009d1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d20:	edd7 7a08 	vldr	s15, [r7, #32]
 8009d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d28:	ee17 0a90 	vmov	r0, s15
 8009d2c:	f7f6 fc0c 	bl	8000548 <__aeabi_f2d>
 8009d30:	a37f      	add	r3, pc, #508	@ (adr r3, 8009f30 <Adjust_Right_Motors_By_Distance+0x10f8>)
 8009d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d36:	f7f6 fc5f 	bl	80005f8 <__aeabi_dmul>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4620      	mov	r0, r4
 8009d40:	4629      	mov	r1, r5
 8009d42:	f7f6 faa1 	bl	8000288 <__aeabi_dsub>
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	7b7a      	ldrb	r2, [r7, #13]
 8009d50:	4c79      	ldr	r4, [pc, #484]	@ (8009f38 <Adjust_Right_Motors_By_Distance+0x1100>)
 8009d52:	4613      	mov	r3, r2
 8009d54:	00db      	lsls	r3, r3, #3
 8009d56:	4413      	add	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4423      	add	r3, r4
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681c      	ldr	r4, [r3, #0]
 8009d60:	f7f6 ff22 	bl	8000ba8 <__aeabi_d2uiz>
 8009d64:	4603      	mov	r3, r0
 8009d66:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjustment * current_speed3 * magnification_close);
 8009d68:	7b3a      	ldrb	r2, [r7, #12]
 8009d6a:	4973      	ldr	r1, [pc, #460]	@ (8009f38 <Adjust_Right_Motors_By_Distance+0x1100>)
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	00db      	lsls	r3, r3, #3
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	440b      	add	r3, r1
 8009d76:	3304      	adds	r3, #4
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d12e      	bne.n	8009ddc <Adjust_Right_Motors_By_Distance+0xfa4>
 8009d7e:	6978      	ldr	r0, [r7, #20]
 8009d80:	f7f6 fbc0 	bl	8000504 <__aeabi_ui2d>
 8009d84:	4604      	mov	r4, r0
 8009d86:	460d      	mov	r5, r1
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	ee07 3a90 	vmov	s15, r3
 8009d8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d92:	edd7 7a08 	vldr	s15, [r7, #32]
 8009d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d9a:	ee17 0a90 	vmov	r0, s15
 8009d9e:	f7f6 fbd3 	bl	8000548 <__aeabi_f2d>
 8009da2:	a363      	add	r3, pc, #396	@ (adr r3, 8009f30 <Adjust_Right_Motors_By_Distance+0x10f8>)
 8009da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da8:	f7f6 fc26 	bl	80005f8 <__aeabi_dmul>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	4620      	mov	r0, r4
 8009db2:	4629      	mov	r1, r5
 8009db4:	f7f6 fa68 	bl	8000288 <__aeabi_dsub>
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	7b3a      	ldrb	r2, [r7, #12]
 8009dc2:	4c5d      	ldr	r4, [pc, #372]	@ (8009f38 <Adjust_Right_Motors_By_Distance+0x1100>)
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	00db      	lsls	r3, r3, #3
 8009dc8:	4413      	add	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4423      	add	r3, r4
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681c      	ldr	r4, [r3, #0]
 8009dd2:	f7f6 fee9 	bl	8000ba8 <__aeabi_d2uiz>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8009dda:	e0a2      	b.n	8009f22 <Adjust_Right_Motors_By_Distance+0x10ea>
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjustment * current_speed3 * magnification_close);
 8009ddc:	7b3a      	ldrb	r2, [r7, #12]
 8009dde:	4956      	ldr	r1, [pc, #344]	@ (8009f38 <Adjust_Right_Motors_By_Distance+0x1100>)
 8009de0:	4613      	mov	r3, r2
 8009de2:	00db      	lsls	r3, r3, #3
 8009de4:	4413      	add	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	440b      	add	r3, r1
 8009dea:	3304      	adds	r3, #4
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b04      	cmp	r3, #4
 8009df0:	d12e      	bne.n	8009e50 <Adjust_Right_Motors_By_Distance+0x1018>
 8009df2:	6978      	ldr	r0, [r7, #20]
 8009df4:	f7f6 fb86 	bl	8000504 <__aeabi_ui2d>
 8009df8:	4604      	mov	r4, r0
 8009dfa:	460d      	mov	r5, r1
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	ee07 3a90 	vmov	s15, r3
 8009e02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009e06:	edd7 7a08 	vldr	s15, [r7, #32]
 8009e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e0e:	ee17 0a90 	vmov	r0, s15
 8009e12:	f7f6 fb99 	bl	8000548 <__aeabi_f2d>
 8009e16:	a346      	add	r3, pc, #280	@ (adr r3, 8009f30 <Adjust_Right_Motors_By_Distance+0x10f8>)
 8009e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1c:	f7f6 fbec 	bl	80005f8 <__aeabi_dmul>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4620      	mov	r0, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	f7f6 fa2e 	bl	8000288 <__aeabi_dsub>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4610      	mov	r0, r2
 8009e32:	4619      	mov	r1, r3
 8009e34:	7b3a      	ldrb	r2, [r7, #12]
 8009e36:	4c40      	ldr	r4, [pc, #256]	@ (8009f38 <Adjust_Right_Motors_By_Distance+0x1100>)
 8009e38:	4613      	mov	r3, r2
 8009e3a:	00db      	lsls	r3, r3, #3
 8009e3c:	4413      	add	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4423      	add	r3, r4
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681c      	ldr	r4, [r3, #0]
 8009e46:	f7f6 feaf 	bl	8000ba8 <__aeabi_d2uiz>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8009e4e:	e068      	b.n	8009f22 <Adjust_Right_Motors_By_Distance+0x10ea>
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjustment * current_speed3 * magnification_close);
 8009e50:	7b3a      	ldrb	r2, [r7, #12]
 8009e52:	4939      	ldr	r1, [pc, #228]	@ (8009f38 <Adjust_Right_Motors_By_Distance+0x1100>)
 8009e54:	4613      	mov	r3, r2
 8009e56:	00db      	lsls	r3, r3, #3
 8009e58:	4413      	add	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	440b      	add	r3, r1
 8009e5e:	3304      	adds	r3, #4
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b08      	cmp	r3, #8
 8009e64:	d12e      	bne.n	8009ec4 <Adjust_Right_Motors_By_Distance+0x108c>
 8009e66:	6978      	ldr	r0, [r7, #20]
 8009e68:	f7f6 fb4c 	bl	8000504 <__aeabi_ui2d>
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	460d      	mov	r5, r1
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	ee07 3a90 	vmov	s15, r3
 8009e76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009e7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8009e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e82:	ee17 0a90 	vmov	r0, s15
 8009e86:	f7f6 fb5f 	bl	8000548 <__aeabi_f2d>
 8009e8a:	a329      	add	r3, pc, #164	@ (adr r3, 8009f30 <Adjust_Right_Motors_By_Distance+0x10f8>)
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	f7f6 fbb2 	bl	80005f8 <__aeabi_dmul>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	4620      	mov	r0, r4
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	f7f6 f9f4 	bl	8000288 <__aeabi_dsub>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	7b3a      	ldrb	r2, [r7, #12]
 8009eaa:	4c23      	ldr	r4, [pc, #140]	@ (8009f38 <Adjust_Right_Motors_By_Distance+0x1100>)
 8009eac:	4613      	mov	r3, r2
 8009eae:	00db      	lsls	r3, r3, #3
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4423      	add	r3, r4
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681c      	ldr	r4, [r3, #0]
 8009eba:	f7f6 fe75 	bl	8000ba8 <__aeabi_d2uiz>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8009ec2:	e02e      	b.n	8009f22 <Adjust_Right_Motors_By_Distance+0x10ea>
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjustment * current_speed3 * magnification_close);
 8009ec4:	6978      	ldr	r0, [r7, #20]
 8009ec6:	f7f6 fb1d 	bl	8000504 <__aeabi_ui2d>
 8009eca:	4604      	mov	r4, r0
 8009ecc:	460d      	mov	r5, r1
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	ee07 3a90 	vmov	s15, r3
 8009ed4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009ed8:	edd7 7a08 	vldr	s15, [r7, #32]
 8009edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee0:	ee17 0a90 	vmov	r0, s15
 8009ee4:	f7f6 fb30 	bl	8000548 <__aeabi_f2d>
 8009ee8:	a311      	add	r3, pc, #68	@ (adr r3, 8009f30 <Adjust_Right_Motors_By_Distance+0x10f8>)
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	f7f6 fb83 	bl	80005f8 <__aeabi_dmul>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	4629      	mov	r1, r5
 8009efa:	f7f6 f9c5 	bl	8000288 <__aeabi_dsub>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	4610      	mov	r0, r2
 8009f04:	4619      	mov	r1, r3
 8009f06:	7b3a      	ldrb	r2, [r7, #12]
 8009f08:	4c0b      	ldr	r4, [pc, #44]	@ (8009f38 <Adjust_Right_Motors_By_Distance+0x1100>)
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	4413      	add	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4423      	add	r3, r4
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681c      	ldr	r4, [r3, #0]
 8009f18:	f7f6 fe46 	bl	8000ba8 <__aeabi_d2uiz>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8009f20:	e7ff      	b.n	8009f22 <Adjust_Right_Motors_By_Distance+0x10ea>
 8009f22:	bf00      	nop
 8009f24:	3730      	adds	r7, #48	@ 0x30
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bdb0      	pop	{r4, r5, r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	f3af 8000 	nop.w
 8009f30:	cccccccd 	.word	0xcccccccd
 8009f34:	3feccccc 	.word	0x3feccccc
 8009f38:	20000388 	.word	0x20000388
 8009f3c:	00000000 	.word	0x00000000

08009f40 <Adjust_Motors_By_FrontBack_Distance>:

void Adjust_Motors_By_FrontBack_Distance(Motor_ID id1, Motor_ID id4, Motor_ID id2, Motor_ID id3, float distance, float threshold) {
 8009f40:	b5b0      	push	{r4, r5, r7, lr}
 8009f42:	b08c      	sub	sp, #48	@ 0x30
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	4604      	mov	r4, r0
 8009f48:	4608      	mov	r0, r1
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	ed87 0a02 	vstr	s0, [r7, #8]
 8009f52:	edc7 0a01 	vstr	s1, [r7, #4]
 8009f56:	4623      	mov	r3, r4
 8009f58:	73fb      	strb	r3, [r7, #15]
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	73bb      	strb	r3, [r7, #14]
 8009f5e:	460b      	mov	r3, r1
 8009f60:	737b      	strb	r3, [r7, #13]
 8009f62:	4613      	mov	r3, r2
 8009f64:	733b      	strb	r3, [r7, #12]
    // 计算距离误差
    float distance_error = distance - threshold;
 8009f66:	ed97 7a02 	vldr	s14, [r7, #8]
 8009f6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f72:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    
    // 定义调整参数
    const float kp = 0.001f;  // 比例系数
 8009f76:	4b9f      	ldr	r3, [pc, #636]	@ (800a1f4 <Adjust_Motors_By_FrontBack_Distance+0x2b4>)
 8009f78:	62bb      	str	r3, [r7, #40]	@ 0x28
    const float max_adjustment = 0.3f;  // 最大速度调整量
 8009f7a:	4b9f      	ldr	r3, [pc, #636]	@ (800a1f8 <Adjust_Motors_By_FrontBack_Distance+0x2b8>)
 8009f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    
    // 计算速度调整量（取绝对值）
    float speed_adjustment = fabsf(kp * distance_error);
 8009f7e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8009f82:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8009f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f8a:	eef0 7ae7 	vabs.f32	s15, s15
 8009f8e:	edc7 7a08 	vstr	s15, [r7, #32]
    
    // 限制速度调整量
    speed_adjustment = fminf(speed_adjustment, max_adjustment);
 8009f92:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8009f96:	ed97 0a08 	vldr	s0, [r7, #32]
 8009f9a:	f00a f822 	bl	8013fe2 <fminf>
 8009f9e:	ed87 0a08 	vstr	s0, [r7, #32]
    
    // 获取当前电机速度
    uint32_t current_speed1 = __HAL_TIM_GET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel);
 8009fa2:	7bfa      	ldrb	r2, [r7, #15]
 8009fa4:	4995      	ldr	r1, [pc, #596]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	00db      	lsls	r3, r3, #3
 8009faa:	4413      	add	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	440b      	add	r3, r1
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10a      	bne.n	8009fce <Adjust_Motors_By_FrontBack_Distance+0x8e>
 8009fb8:	7bfa      	ldrb	r2, [r7, #15]
 8009fba:	4990      	ldr	r1, [pc, #576]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	4413      	add	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	440b      	add	r3, r1
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fcc:	e035      	b.n	800a03a <Adjust_Motors_By_FrontBack_Distance+0xfa>
 8009fce:	7bfa      	ldrb	r2, [r7, #15]
 8009fd0:	498a      	ldr	r1, [pc, #552]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	00db      	lsls	r3, r3, #3
 8009fd6:	4413      	add	r3, r2
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	440b      	add	r3, r1
 8009fdc:	3304      	adds	r3, #4
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	d10a      	bne.n	8009ffa <Adjust_Motors_By_FrontBack_Distance+0xba>
 8009fe4:	7bfa      	ldrb	r2, [r7, #15]
 8009fe6:	4985      	ldr	r1, [pc, #532]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8009fe8:	4613      	mov	r3, r2
 8009fea:	00db      	lsls	r3, r3, #3
 8009fec:	4413      	add	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	440b      	add	r3, r1
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff8:	e01f      	b.n	800a03a <Adjust_Motors_By_FrontBack_Distance+0xfa>
 8009ffa:	7bfa      	ldrb	r2, [r7, #15]
 8009ffc:	497f      	ldr	r1, [pc, #508]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8009ffe:	4613      	mov	r3, r2
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	4413      	add	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	440b      	add	r3, r1
 800a008:	3304      	adds	r3, #4
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b08      	cmp	r3, #8
 800a00e:	d10a      	bne.n	800a026 <Adjust_Motors_By_FrontBack_Distance+0xe6>
 800a010:	7bfa      	ldrb	r2, [r7, #15]
 800a012:	497a      	ldr	r1, [pc, #488]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a014:	4613      	mov	r3, r2
 800a016:	00db      	lsls	r3, r3, #3
 800a018:	4413      	add	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	440b      	add	r3, r1
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a024:	e009      	b.n	800a03a <Adjust_Motors_By_FrontBack_Distance+0xfa>
 800a026:	7bfa      	ldrb	r2, [r7, #15]
 800a028:	4974      	ldr	r1, [pc, #464]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a02a:	4613      	mov	r3, r2
 800a02c:	00db      	lsls	r3, r3, #3
 800a02e:	4413      	add	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	440b      	add	r3, r1
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a03a:	61fb      	str	r3, [r7, #28]
    uint32_t current_speed2 = __HAL_TIM_GET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel);
 800a03c:	7b7a      	ldrb	r2, [r7, #13]
 800a03e:	496f      	ldr	r1, [pc, #444]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a040:	4613      	mov	r3, r2
 800a042:	00db      	lsls	r3, r3, #3
 800a044:	4413      	add	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	440b      	add	r3, r1
 800a04a:	3304      	adds	r3, #4
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10a      	bne.n	800a068 <Adjust_Motors_By_FrontBack_Distance+0x128>
 800a052:	7b7a      	ldrb	r2, [r7, #13]
 800a054:	4969      	ldr	r1, [pc, #420]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a056:	4613      	mov	r3, r2
 800a058:	00db      	lsls	r3, r3, #3
 800a05a:	4413      	add	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	440b      	add	r3, r1
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a066:	e035      	b.n	800a0d4 <Adjust_Motors_By_FrontBack_Distance+0x194>
 800a068:	7b7a      	ldrb	r2, [r7, #13]
 800a06a:	4964      	ldr	r1, [pc, #400]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a06c:	4613      	mov	r3, r2
 800a06e:	00db      	lsls	r3, r3, #3
 800a070:	4413      	add	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	440b      	add	r3, r1
 800a076:	3304      	adds	r3, #4
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	d10a      	bne.n	800a094 <Adjust_Motors_By_FrontBack_Distance+0x154>
 800a07e:	7b7a      	ldrb	r2, [r7, #13]
 800a080:	495e      	ldr	r1, [pc, #376]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a082:	4613      	mov	r3, r2
 800a084:	00db      	lsls	r3, r3, #3
 800a086:	4413      	add	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	440b      	add	r3, r1
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a092:	e01f      	b.n	800a0d4 <Adjust_Motors_By_FrontBack_Distance+0x194>
 800a094:	7b7a      	ldrb	r2, [r7, #13]
 800a096:	4959      	ldr	r1, [pc, #356]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a098:	4613      	mov	r3, r2
 800a09a:	00db      	lsls	r3, r3, #3
 800a09c:	4413      	add	r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	440b      	add	r3, r1
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b08      	cmp	r3, #8
 800a0a8:	d10a      	bne.n	800a0c0 <Adjust_Motors_By_FrontBack_Distance+0x180>
 800a0aa:	7b7a      	ldrb	r2, [r7, #13]
 800a0ac:	4953      	ldr	r1, [pc, #332]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	00db      	lsls	r3, r3, #3
 800a0b2:	4413      	add	r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	440b      	add	r3, r1
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0be:	e009      	b.n	800a0d4 <Adjust_Motors_By_FrontBack_Distance+0x194>
 800a0c0:	7b7a      	ldrb	r2, [r7, #13]
 800a0c2:	494e      	ldr	r1, [pc, #312]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	00db      	lsls	r3, r3, #3
 800a0c8:	4413      	add	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	440b      	add	r3, r1
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d4:	61bb      	str	r3, [r7, #24]
    uint32_t current_speed3 = __HAL_TIM_GET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel);
 800a0d6:	7b3a      	ldrb	r2, [r7, #12]
 800a0d8:	4948      	ldr	r1, [pc, #288]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a0da:	4613      	mov	r3, r2
 800a0dc:	00db      	lsls	r3, r3, #3
 800a0de:	4413      	add	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	440b      	add	r3, r1
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10a      	bne.n	800a102 <Adjust_Motors_By_FrontBack_Distance+0x1c2>
 800a0ec:	7b3a      	ldrb	r2, [r7, #12]
 800a0ee:	4943      	ldr	r1, [pc, #268]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	4413      	add	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	440b      	add	r3, r1
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a100:	e035      	b.n	800a16e <Adjust_Motors_By_FrontBack_Distance+0x22e>
 800a102:	7b3a      	ldrb	r2, [r7, #12]
 800a104:	493d      	ldr	r1, [pc, #244]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a106:	4613      	mov	r3, r2
 800a108:	00db      	lsls	r3, r3, #3
 800a10a:	4413      	add	r3, r2
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	440b      	add	r3, r1
 800a110:	3304      	adds	r3, #4
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b04      	cmp	r3, #4
 800a116:	d10a      	bne.n	800a12e <Adjust_Motors_By_FrontBack_Distance+0x1ee>
 800a118:	7b3a      	ldrb	r2, [r7, #12]
 800a11a:	4938      	ldr	r1, [pc, #224]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a11c:	4613      	mov	r3, r2
 800a11e:	00db      	lsls	r3, r3, #3
 800a120:	4413      	add	r3, r2
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	440b      	add	r3, r1
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a12c:	e01f      	b.n	800a16e <Adjust_Motors_By_FrontBack_Distance+0x22e>
 800a12e:	7b3a      	ldrb	r2, [r7, #12]
 800a130:	4932      	ldr	r1, [pc, #200]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a132:	4613      	mov	r3, r2
 800a134:	00db      	lsls	r3, r3, #3
 800a136:	4413      	add	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	440b      	add	r3, r1
 800a13c:	3304      	adds	r3, #4
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b08      	cmp	r3, #8
 800a142:	d10a      	bne.n	800a15a <Adjust_Motors_By_FrontBack_Distance+0x21a>
 800a144:	7b3a      	ldrb	r2, [r7, #12]
 800a146:	492d      	ldr	r1, [pc, #180]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a148:	4613      	mov	r3, r2
 800a14a:	00db      	lsls	r3, r3, #3
 800a14c:	4413      	add	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	440b      	add	r3, r1
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a158:	e009      	b.n	800a16e <Adjust_Motors_By_FrontBack_Distance+0x22e>
 800a15a:	7b3a      	ldrb	r2, [r7, #12]
 800a15c:	4927      	ldr	r1, [pc, #156]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a15e:	4613      	mov	r3, r2
 800a160:	00db      	lsls	r3, r3, #3
 800a162:	4413      	add	r3, r2
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	440b      	add	r3, r1
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a16e:	617b      	str	r3, [r7, #20]
    uint32_t current_speed4 = __HAL_TIM_GET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel);
 800a170:	7bba      	ldrb	r2, [r7, #14]
 800a172:	4922      	ldr	r1, [pc, #136]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a174:	4613      	mov	r3, r2
 800a176:	00db      	lsls	r3, r3, #3
 800a178:	4413      	add	r3, r2
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	440b      	add	r3, r1
 800a17e:	3304      	adds	r3, #4
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10a      	bne.n	800a19c <Adjust_Motors_By_FrontBack_Distance+0x25c>
 800a186:	7bba      	ldrb	r2, [r7, #14]
 800a188:	491c      	ldr	r1, [pc, #112]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a18a:	4613      	mov	r3, r2
 800a18c:	00db      	lsls	r3, r3, #3
 800a18e:	4413      	add	r3, r2
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	440b      	add	r3, r1
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a19a:	e03b      	b.n	800a214 <Adjust_Motors_By_FrontBack_Distance+0x2d4>
 800a19c:	7bba      	ldrb	r2, [r7, #14]
 800a19e:	4917      	ldr	r1, [pc, #92]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	4413      	add	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	440b      	add	r3, r1
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b04      	cmp	r3, #4
 800a1b0:	d10a      	bne.n	800a1c8 <Adjust_Motors_By_FrontBack_Distance+0x288>
 800a1b2:	7bba      	ldrb	r2, [r7, #14]
 800a1b4:	4911      	ldr	r1, [pc, #68]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	00db      	lsls	r3, r3, #3
 800a1ba:	4413      	add	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	440b      	add	r3, r1
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1c6:	e025      	b.n	800a214 <Adjust_Motors_By_FrontBack_Distance+0x2d4>
 800a1c8:	7bba      	ldrb	r2, [r7, #14]
 800a1ca:	490c      	ldr	r1, [pc, #48]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	00db      	lsls	r3, r3, #3
 800a1d0:	4413      	add	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	440b      	add	r3, r1
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b08      	cmp	r3, #8
 800a1dc:	d110      	bne.n	800a200 <Adjust_Motors_By_FrontBack_Distance+0x2c0>
 800a1de:	7bba      	ldrb	r2, [r7, #14]
 800a1e0:	4906      	ldr	r1, [pc, #24]	@ (800a1fc <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	00db      	lsls	r3, r3, #3
 800a1e6:	4413      	add	r3, r2
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	440b      	add	r3, r1
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1f2:	e00f      	b.n	800a214 <Adjust_Motors_By_FrontBack_Distance+0x2d4>
 800a1f4:	3a83126f 	.word	0x3a83126f
 800a1f8:	3e99999a 	.word	0x3e99999a
 800a1fc:	20000388 	.word	0x20000388
 800a200:	7bba      	ldrb	r2, [r7, #14]
 800a202:	49b3      	ldr	r1, [pc, #716]	@ (800a4d0 <Adjust_Motors_By_FrontBack_Distance+0x590>)
 800a204:	4613      	mov	r3, r2
 800a206:	00db      	lsls	r3, r3, #3
 800a208:	4413      	add	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	440b      	add	r3, r1
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a214:	613b      	str	r3, [r7, #16]
    
    // 根据距离误差调整速度
    if (distance_error > 0) {  // 距离过远
 800a216:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a21a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a222:	f340 8382 	ble.w	800a92a <Adjust_Motors_By_FrontBack_Distance+0x9ea>
        // 前轮电机减速，后轮电机加速
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 - speed_adjustment * current_speed1 * magnification);
 800a226:	7bfa      	ldrb	r2, [r7, #15]
 800a228:	49a9      	ldr	r1, [pc, #676]	@ (800a4d0 <Adjust_Motors_By_FrontBack_Distance+0x590>)
 800a22a:	4613      	mov	r3, r2
 800a22c:	00db      	lsls	r3, r3, #3
 800a22e:	4413      	add	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	440b      	add	r3, r1
 800a234:	3304      	adds	r3, #4
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d12e      	bne.n	800a29a <Adjust_Motors_By_FrontBack_Distance+0x35a>
 800a23c:	69f8      	ldr	r0, [r7, #28]
 800a23e:	f7f6 f961 	bl	8000504 <__aeabi_ui2d>
 800a242:	4604      	mov	r4, r0
 800a244:	460d      	mov	r5, r1
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	ee07 3a90 	vmov	s15, r3
 800a24c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a250:	edd7 7a08 	vldr	s15, [r7, #32]
 800a254:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a258:	ee17 0a90 	vmov	r0, s15
 800a25c:	f7f6 f974 	bl	8000548 <__aeabi_f2d>
 800a260:	a399      	add	r3, pc, #612	@ (adr r3, 800a4c8 <Adjust_Motors_By_FrontBack_Distance+0x588>)
 800a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a266:	f7f6 f9c7 	bl	80005f8 <__aeabi_dmul>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	4620      	mov	r0, r4
 800a270:	4629      	mov	r1, r5
 800a272:	f7f6 f809 	bl	8000288 <__aeabi_dsub>
 800a276:	4602      	mov	r2, r0
 800a278:	460b      	mov	r3, r1
 800a27a:	4610      	mov	r0, r2
 800a27c:	4619      	mov	r1, r3
 800a27e:	7bfa      	ldrb	r2, [r7, #15]
 800a280:	4c93      	ldr	r4, [pc, #588]	@ (800a4d0 <Adjust_Motors_By_FrontBack_Distance+0x590>)
 800a282:	4613      	mov	r3, r2
 800a284:	00db      	lsls	r3, r3, #3
 800a286:	4413      	add	r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4423      	add	r3, r4
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681c      	ldr	r4, [r3, #0]
 800a290:	f7f6 fc8a 	bl	8000ba8 <__aeabi_d2uiz>
 800a294:	4603      	mov	r3, r0
 800a296:	6363      	str	r3, [r4, #52]	@ 0x34
 800a298:	e0a1      	b.n	800a3de <Adjust_Motors_By_FrontBack_Distance+0x49e>
 800a29a:	7bfa      	ldrb	r2, [r7, #15]
 800a29c:	498c      	ldr	r1, [pc, #560]	@ (800a4d0 <Adjust_Motors_By_FrontBack_Distance+0x590>)
 800a29e:	4613      	mov	r3, r2
 800a2a0:	00db      	lsls	r3, r3, #3
 800a2a2:	4413      	add	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	440b      	add	r3, r1
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	d12e      	bne.n	800a30e <Adjust_Motors_By_FrontBack_Distance+0x3ce>
 800a2b0:	69f8      	ldr	r0, [r7, #28]
 800a2b2:	f7f6 f927 	bl	8000504 <__aeabi_ui2d>
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	460d      	mov	r5, r1
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	ee07 3a90 	vmov	s15, r3
 800a2c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a2c4:	edd7 7a08 	vldr	s15, [r7, #32]
 800a2c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2cc:	ee17 0a90 	vmov	r0, s15
 800a2d0:	f7f6 f93a 	bl	8000548 <__aeabi_f2d>
 800a2d4:	a37c      	add	r3, pc, #496	@ (adr r3, 800a4c8 <Adjust_Motors_By_FrontBack_Distance+0x588>)
 800a2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2da:	f7f6 f98d 	bl	80005f8 <__aeabi_dmul>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	4629      	mov	r1, r5
 800a2e6:	f7f5 ffcf 	bl	8000288 <__aeabi_dsub>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	7bfa      	ldrb	r2, [r7, #15]
 800a2f4:	4c76      	ldr	r4, [pc, #472]	@ (800a4d0 <Adjust_Motors_By_FrontBack_Distance+0x590>)
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	00db      	lsls	r3, r3, #3
 800a2fa:	4413      	add	r3, r2
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	4423      	add	r3, r4
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681c      	ldr	r4, [r3, #0]
 800a304:	f7f6 fc50 	bl	8000ba8 <__aeabi_d2uiz>
 800a308:	4603      	mov	r3, r0
 800a30a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a30c:	e067      	b.n	800a3de <Adjust_Motors_By_FrontBack_Distance+0x49e>
 800a30e:	7bfa      	ldrb	r2, [r7, #15]
 800a310:	496f      	ldr	r1, [pc, #444]	@ (800a4d0 <Adjust_Motors_By_FrontBack_Distance+0x590>)
 800a312:	4613      	mov	r3, r2
 800a314:	00db      	lsls	r3, r3, #3
 800a316:	4413      	add	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	440b      	add	r3, r1
 800a31c:	3304      	adds	r3, #4
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b08      	cmp	r3, #8
 800a322:	d12e      	bne.n	800a382 <Adjust_Motors_By_FrontBack_Distance+0x442>
 800a324:	69f8      	ldr	r0, [r7, #28]
 800a326:	f7f6 f8ed 	bl	8000504 <__aeabi_ui2d>
 800a32a:	4604      	mov	r4, r0
 800a32c:	460d      	mov	r5, r1
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	ee07 3a90 	vmov	s15, r3
 800a334:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a338:	edd7 7a08 	vldr	s15, [r7, #32]
 800a33c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a340:	ee17 0a90 	vmov	r0, s15
 800a344:	f7f6 f900 	bl	8000548 <__aeabi_f2d>
 800a348:	a35f      	add	r3, pc, #380	@ (adr r3, 800a4c8 <Adjust_Motors_By_FrontBack_Distance+0x588>)
 800a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34e:	f7f6 f953 	bl	80005f8 <__aeabi_dmul>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	4620      	mov	r0, r4
 800a358:	4629      	mov	r1, r5
 800a35a:	f7f5 ff95 	bl	8000288 <__aeabi_dsub>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	4610      	mov	r0, r2
 800a364:	4619      	mov	r1, r3
 800a366:	7bfa      	ldrb	r2, [r7, #15]
 800a368:	4c59      	ldr	r4, [pc, #356]	@ (800a4d0 <Adjust_Motors_By_FrontBack_Distance+0x590>)
 800a36a:	4613      	mov	r3, r2
 800a36c:	00db      	lsls	r3, r3, #3
 800a36e:	4413      	add	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	4423      	add	r3, r4
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681c      	ldr	r4, [r3, #0]
 800a378:	f7f6 fc16 	bl	8000ba8 <__aeabi_d2uiz>
 800a37c:	4603      	mov	r3, r0
 800a37e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800a380:	e02d      	b.n	800a3de <Adjust_Motors_By_FrontBack_Distance+0x49e>
 800a382:	69f8      	ldr	r0, [r7, #28]
 800a384:	f7f6 f8be 	bl	8000504 <__aeabi_ui2d>
 800a388:	4604      	mov	r4, r0
 800a38a:	460d      	mov	r5, r1
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	ee07 3a90 	vmov	s15, r3
 800a392:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a396:	edd7 7a08 	vldr	s15, [r7, #32]
 800a39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a39e:	ee17 0a90 	vmov	r0, s15
 800a3a2:	f7f6 f8d1 	bl	8000548 <__aeabi_f2d>
 800a3a6:	a348      	add	r3, pc, #288	@ (adr r3, 800a4c8 <Adjust_Motors_By_FrontBack_Distance+0x588>)
 800a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ac:	f7f6 f924 	bl	80005f8 <__aeabi_dmul>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	f7f5 ff66 	bl	8000288 <__aeabi_dsub>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	7bfa      	ldrb	r2, [r7, #15]
 800a3c6:	4c42      	ldr	r4, [pc, #264]	@ (800a4d0 <Adjust_Motors_By_FrontBack_Distance+0x590>)
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	00db      	lsls	r3, r3, #3
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4423      	add	r3, r4
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681c      	ldr	r4, [r3, #0]
 800a3d6:	f7f6 fbe7 	bl	8000ba8 <__aeabi_d2uiz>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 - speed_adjustment * current_speed4 * magnification);
 800a3de:	7bba      	ldrb	r2, [r7, #14]
 800a3e0:	493b      	ldr	r1, [pc, #236]	@ (800a4d0 <Adjust_Motors_By_FrontBack_Distance+0x590>)
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	00db      	lsls	r3, r3, #3
 800a3e6:	4413      	add	r3, r2
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	440b      	add	r3, r1
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d12e      	bne.n	800a452 <Adjust_Motors_By_FrontBack_Distance+0x512>
 800a3f4:	6938      	ldr	r0, [r7, #16]
 800a3f6:	f7f6 f885 	bl	8000504 <__aeabi_ui2d>
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	460d      	mov	r5, r1
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	ee07 3a90 	vmov	s15, r3
 800a404:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a408:	edd7 7a08 	vldr	s15, [r7, #32]
 800a40c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a410:	ee17 0a90 	vmov	r0, s15
 800a414:	f7f6 f898 	bl	8000548 <__aeabi_f2d>
 800a418:	a32b      	add	r3, pc, #172	@ (adr r3, 800a4c8 <Adjust_Motors_By_FrontBack_Distance+0x588>)
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	f7f6 f8eb 	bl	80005f8 <__aeabi_dmul>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	4620      	mov	r0, r4
 800a428:	4629      	mov	r1, r5
 800a42a:	f7f5 ff2d 	bl	8000288 <__aeabi_dsub>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	4610      	mov	r0, r2
 800a434:	4619      	mov	r1, r3
 800a436:	7bba      	ldrb	r2, [r7, #14]
 800a438:	4c25      	ldr	r4, [pc, #148]	@ (800a4d0 <Adjust_Motors_By_FrontBack_Distance+0x590>)
 800a43a:	4613      	mov	r3, r2
 800a43c:	00db      	lsls	r3, r3, #3
 800a43e:	4413      	add	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4423      	add	r3, r4
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681c      	ldr	r4, [r3, #0]
 800a448:	f7f6 fbae 	bl	8000ba8 <__aeabi_d2uiz>
 800a44c:	4603      	mov	r3, r0
 800a44e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a450:	e0a8      	b.n	800a5a4 <Adjust_Motors_By_FrontBack_Distance+0x664>
 800a452:	7bba      	ldrb	r2, [r7, #14]
 800a454:	491e      	ldr	r1, [pc, #120]	@ (800a4d0 <Adjust_Motors_By_FrontBack_Distance+0x590>)
 800a456:	4613      	mov	r3, r2
 800a458:	00db      	lsls	r3, r3, #3
 800a45a:	4413      	add	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	440b      	add	r3, r1
 800a460:	3304      	adds	r3, #4
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2b04      	cmp	r3, #4
 800a466:	d135      	bne.n	800a4d4 <Adjust_Motors_By_FrontBack_Distance+0x594>
 800a468:	6938      	ldr	r0, [r7, #16]
 800a46a:	f7f6 f84b 	bl	8000504 <__aeabi_ui2d>
 800a46e:	4604      	mov	r4, r0
 800a470:	460d      	mov	r5, r1
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	ee07 3a90 	vmov	s15, r3
 800a478:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a47c:	edd7 7a08 	vldr	s15, [r7, #32]
 800a480:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a484:	ee17 0a90 	vmov	r0, s15
 800a488:	f7f6 f85e 	bl	8000548 <__aeabi_f2d>
 800a48c:	a30e      	add	r3, pc, #56	@ (adr r3, 800a4c8 <Adjust_Motors_By_FrontBack_Distance+0x588>)
 800a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a492:	f7f6 f8b1 	bl	80005f8 <__aeabi_dmul>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	4620      	mov	r0, r4
 800a49c:	4629      	mov	r1, r5
 800a49e:	f7f5 fef3 	bl	8000288 <__aeabi_dsub>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	7bba      	ldrb	r2, [r7, #14]
 800a4ac:	4c08      	ldr	r4, [pc, #32]	@ (800a4d0 <Adjust_Motors_By_FrontBack_Distance+0x590>)
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	00db      	lsls	r3, r3, #3
 800a4b2:	4413      	add	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4423      	add	r3, r4
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681c      	ldr	r4, [r3, #0]
 800a4bc:	f7f6 fb74 	bl	8000ba8 <__aeabi_d2uiz>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a4c4:	e06e      	b.n	800a5a4 <Adjust_Motors_By_FrontBack_Distance+0x664>
 800a4c6:	bf00      	nop
 800a4c8:	cccccccd 	.word	0xcccccccd
 800a4cc:	3feccccc 	.word	0x3feccccc
 800a4d0:	20000388 	.word	0x20000388
 800a4d4:	7bba      	ldrb	r2, [r7, #14]
 800a4d6:	49c2      	ldr	r1, [pc, #776]	@ (800a7e0 <Adjust_Motors_By_FrontBack_Distance+0x8a0>)
 800a4d8:	4613      	mov	r3, r2
 800a4da:	00db      	lsls	r3, r3, #3
 800a4dc:	4413      	add	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	440b      	add	r3, r1
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b08      	cmp	r3, #8
 800a4e8:	d12e      	bne.n	800a548 <Adjust_Motors_By_FrontBack_Distance+0x608>
 800a4ea:	6938      	ldr	r0, [r7, #16]
 800a4ec:	f7f6 f80a 	bl	8000504 <__aeabi_ui2d>
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	460d      	mov	r5, r1
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	ee07 3a90 	vmov	s15, r3
 800a4fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a4fe:	edd7 7a08 	vldr	s15, [r7, #32]
 800a502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a506:	ee17 0a90 	vmov	r0, s15
 800a50a:	f7f6 f81d 	bl	8000548 <__aeabi_f2d>
 800a50e:	a3b2      	add	r3, pc, #712	@ (adr r3, 800a7d8 <Adjust_Motors_By_FrontBack_Distance+0x898>)
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	f7f6 f870 	bl	80005f8 <__aeabi_dmul>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4620      	mov	r0, r4
 800a51e:	4629      	mov	r1, r5
 800a520:	f7f5 feb2 	bl	8000288 <__aeabi_dsub>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	4610      	mov	r0, r2
 800a52a:	4619      	mov	r1, r3
 800a52c:	7bba      	ldrb	r2, [r7, #14]
 800a52e:	4cac      	ldr	r4, [pc, #688]	@ (800a7e0 <Adjust_Motors_By_FrontBack_Distance+0x8a0>)
 800a530:	4613      	mov	r3, r2
 800a532:	00db      	lsls	r3, r3, #3
 800a534:	4413      	add	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	4423      	add	r3, r4
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681c      	ldr	r4, [r3, #0]
 800a53e:	f7f6 fb33 	bl	8000ba8 <__aeabi_d2uiz>
 800a542:	4603      	mov	r3, r0
 800a544:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800a546:	e02d      	b.n	800a5a4 <Adjust_Motors_By_FrontBack_Distance+0x664>
 800a548:	6938      	ldr	r0, [r7, #16]
 800a54a:	f7f5 ffdb 	bl	8000504 <__aeabi_ui2d>
 800a54e:	4604      	mov	r4, r0
 800a550:	460d      	mov	r5, r1
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	ee07 3a90 	vmov	s15, r3
 800a558:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a55c:	edd7 7a08 	vldr	s15, [r7, #32]
 800a560:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a564:	ee17 0a90 	vmov	r0, s15
 800a568:	f7f5 ffee 	bl	8000548 <__aeabi_f2d>
 800a56c:	a39a      	add	r3, pc, #616	@ (adr r3, 800a7d8 <Adjust_Motors_By_FrontBack_Distance+0x898>)
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	f7f6 f841 	bl	80005f8 <__aeabi_dmul>
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	4620      	mov	r0, r4
 800a57c:	4629      	mov	r1, r5
 800a57e:	f7f5 fe83 	bl	8000288 <__aeabi_dsub>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	4610      	mov	r0, r2
 800a588:	4619      	mov	r1, r3
 800a58a:	7bba      	ldrb	r2, [r7, #14]
 800a58c:	4c94      	ldr	r4, [pc, #592]	@ (800a7e0 <Adjust_Motors_By_FrontBack_Distance+0x8a0>)
 800a58e:	4613      	mov	r3, r2
 800a590:	00db      	lsls	r3, r3, #3
 800a592:	4413      	add	r3, r2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	4423      	add	r3, r4
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681c      	ldr	r4, [r3, #0]
 800a59c:	f7f6 fb04 	bl	8000ba8 <__aeabi_d2uiz>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 + speed_adjustment * current_speed2 * magnification);
 800a5a4:	7b7a      	ldrb	r2, [r7, #13]
 800a5a6:	498e      	ldr	r1, [pc, #568]	@ (800a7e0 <Adjust_Motors_By_FrontBack_Distance+0x8a0>)
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	00db      	lsls	r3, r3, #3
 800a5ac:	4413      	add	r3, r2
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	440b      	add	r3, r1
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d12e      	bne.n	800a618 <Adjust_Motors_By_FrontBack_Distance+0x6d8>
 800a5ba:	69b8      	ldr	r0, [r7, #24]
 800a5bc:	f7f5 ffa2 	bl	8000504 <__aeabi_ui2d>
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	460d      	mov	r5, r1
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	ee07 3a90 	vmov	s15, r3
 800a5ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a5ce:	edd7 7a08 	vldr	s15, [r7, #32]
 800a5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5d6:	ee17 0a90 	vmov	r0, s15
 800a5da:	f7f5 ffb5 	bl	8000548 <__aeabi_f2d>
 800a5de:	a37e      	add	r3, pc, #504	@ (adr r3, 800a7d8 <Adjust_Motors_By_FrontBack_Distance+0x898>)
 800a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e4:	f7f6 f808 	bl	80005f8 <__aeabi_dmul>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	f7f5 fe4c 	bl	800028c <__adddf3>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	7b7a      	ldrb	r2, [r7, #13]
 800a5fe:	4c78      	ldr	r4, [pc, #480]	@ (800a7e0 <Adjust_Motors_By_FrontBack_Distance+0x8a0>)
 800a600:	4613      	mov	r3, r2
 800a602:	00db      	lsls	r3, r3, #3
 800a604:	4413      	add	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4423      	add	r3, r4
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681c      	ldr	r4, [r3, #0]
 800a60e:	f7f6 facb 	bl	8000ba8 <__aeabi_d2uiz>
 800a612:	4603      	mov	r3, r0
 800a614:	6363      	str	r3, [r4, #52]	@ 0x34
 800a616:	e0a1      	b.n	800a75c <Adjust_Motors_By_FrontBack_Distance+0x81c>
 800a618:	7b7a      	ldrb	r2, [r7, #13]
 800a61a:	4971      	ldr	r1, [pc, #452]	@ (800a7e0 <Adjust_Motors_By_FrontBack_Distance+0x8a0>)
 800a61c:	4613      	mov	r3, r2
 800a61e:	00db      	lsls	r3, r3, #3
 800a620:	4413      	add	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	440b      	add	r3, r1
 800a626:	3304      	adds	r3, #4
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b04      	cmp	r3, #4
 800a62c:	d12e      	bne.n	800a68c <Adjust_Motors_By_FrontBack_Distance+0x74c>
 800a62e:	69b8      	ldr	r0, [r7, #24]
 800a630:	f7f5 ff68 	bl	8000504 <__aeabi_ui2d>
 800a634:	4604      	mov	r4, r0
 800a636:	460d      	mov	r5, r1
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	ee07 3a90 	vmov	s15, r3
 800a63e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a642:	edd7 7a08 	vldr	s15, [r7, #32]
 800a646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a64a:	ee17 0a90 	vmov	r0, s15
 800a64e:	f7f5 ff7b 	bl	8000548 <__aeabi_f2d>
 800a652:	a361      	add	r3, pc, #388	@ (adr r3, 800a7d8 <Adjust_Motors_By_FrontBack_Distance+0x898>)
 800a654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a658:	f7f5 ffce 	bl	80005f8 <__aeabi_dmul>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	4620      	mov	r0, r4
 800a662:	4629      	mov	r1, r5
 800a664:	f7f5 fe12 	bl	800028c <__adddf3>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	4610      	mov	r0, r2
 800a66e:	4619      	mov	r1, r3
 800a670:	7b7a      	ldrb	r2, [r7, #13]
 800a672:	4c5b      	ldr	r4, [pc, #364]	@ (800a7e0 <Adjust_Motors_By_FrontBack_Distance+0x8a0>)
 800a674:	4613      	mov	r3, r2
 800a676:	00db      	lsls	r3, r3, #3
 800a678:	4413      	add	r3, r2
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	4423      	add	r3, r4
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681c      	ldr	r4, [r3, #0]
 800a682:	f7f6 fa91 	bl	8000ba8 <__aeabi_d2uiz>
 800a686:	4603      	mov	r3, r0
 800a688:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a68a:	e067      	b.n	800a75c <Adjust_Motors_By_FrontBack_Distance+0x81c>
 800a68c:	7b7a      	ldrb	r2, [r7, #13]
 800a68e:	4954      	ldr	r1, [pc, #336]	@ (800a7e0 <Adjust_Motors_By_FrontBack_Distance+0x8a0>)
 800a690:	4613      	mov	r3, r2
 800a692:	00db      	lsls	r3, r3, #3
 800a694:	4413      	add	r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	440b      	add	r3, r1
 800a69a:	3304      	adds	r3, #4
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	d12e      	bne.n	800a700 <Adjust_Motors_By_FrontBack_Distance+0x7c0>
 800a6a2:	69b8      	ldr	r0, [r7, #24]
 800a6a4:	f7f5 ff2e 	bl	8000504 <__aeabi_ui2d>
 800a6a8:	4604      	mov	r4, r0
 800a6aa:	460d      	mov	r5, r1
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	ee07 3a90 	vmov	s15, r3
 800a6b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a6b6:	edd7 7a08 	vldr	s15, [r7, #32]
 800a6ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6be:	ee17 0a90 	vmov	r0, s15
 800a6c2:	f7f5 ff41 	bl	8000548 <__aeabi_f2d>
 800a6c6:	a344      	add	r3, pc, #272	@ (adr r3, 800a7d8 <Adjust_Motors_By_FrontBack_Distance+0x898>)
 800a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6cc:	f7f5 ff94 	bl	80005f8 <__aeabi_dmul>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	f7f5 fdd8 	bl	800028c <__adddf3>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	7b7a      	ldrb	r2, [r7, #13]
 800a6e6:	4c3e      	ldr	r4, [pc, #248]	@ (800a7e0 <Adjust_Motors_By_FrontBack_Distance+0x8a0>)
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	00db      	lsls	r3, r3, #3
 800a6ec:	4413      	add	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4423      	add	r3, r4
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681c      	ldr	r4, [r3, #0]
 800a6f6:	f7f6 fa57 	bl	8000ba8 <__aeabi_d2uiz>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800a6fe:	e02d      	b.n	800a75c <Adjust_Motors_By_FrontBack_Distance+0x81c>
 800a700:	69b8      	ldr	r0, [r7, #24]
 800a702:	f7f5 feff 	bl	8000504 <__aeabi_ui2d>
 800a706:	4604      	mov	r4, r0
 800a708:	460d      	mov	r5, r1
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	ee07 3a90 	vmov	s15, r3
 800a710:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a714:	edd7 7a08 	vldr	s15, [r7, #32]
 800a718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a71c:	ee17 0a90 	vmov	r0, s15
 800a720:	f7f5 ff12 	bl	8000548 <__aeabi_f2d>
 800a724:	a32c      	add	r3, pc, #176	@ (adr r3, 800a7d8 <Adjust_Motors_By_FrontBack_Distance+0x898>)
 800a726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72a:	f7f5 ff65 	bl	80005f8 <__aeabi_dmul>
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	4620      	mov	r0, r4
 800a734:	4629      	mov	r1, r5
 800a736:	f7f5 fda9 	bl	800028c <__adddf3>
 800a73a:	4602      	mov	r2, r0
 800a73c:	460b      	mov	r3, r1
 800a73e:	4610      	mov	r0, r2
 800a740:	4619      	mov	r1, r3
 800a742:	7b7a      	ldrb	r2, [r7, #13]
 800a744:	4c26      	ldr	r4, [pc, #152]	@ (800a7e0 <Adjust_Motors_By_FrontBack_Distance+0x8a0>)
 800a746:	4613      	mov	r3, r2
 800a748:	00db      	lsls	r3, r3, #3
 800a74a:	4413      	add	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4423      	add	r3, r4
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681c      	ldr	r4, [r3, #0]
 800a754:	f7f6 fa28 	bl	8000ba8 <__aeabi_d2uiz>
 800a758:	4603      	mov	r3, r0
 800a75a:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 + speed_adjustment * current_speed3 * magnification);
 800a75c:	7b3a      	ldrb	r2, [r7, #12]
 800a75e:	4920      	ldr	r1, [pc, #128]	@ (800a7e0 <Adjust_Motors_By_FrontBack_Distance+0x8a0>)
 800a760:	4613      	mov	r3, r2
 800a762:	00db      	lsls	r3, r3, #3
 800a764:	4413      	add	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	440b      	add	r3, r1
 800a76a:	3304      	adds	r3, #4
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d138      	bne.n	800a7e4 <Adjust_Motors_By_FrontBack_Distance+0x8a4>
 800a772:	6978      	ldr	r0, [r7, #20]
 800a774:	f7f5 fec6 	bl	8000504 <__aeabi_ui2d>
 800a778:	4604      	mov	r4, r0
 800a77a:	460d      	mov	r5, r1
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	ee07 3a90 	vmov	s15, r3
 800a782:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a786:	edd7 7a08 	vldr	s15, [r7, #32]
 800a78a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a78e:	ee17 0a90 	vmov	r0, s15
 800a792:	f7f5 fed9 	bl	8000548 <__aeabi_f2d>
 800a796:	a310      	add	r3, pc, #64	@ (adr r3, 800a7d8 <Adjust_Motors_By_FrontBack_Distance+0x898>)
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	f7f5 ff2c 	bl	80005f8 <__aeabi_dmul>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	f7f5 fd70 	bl	800028c <__adddf3>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	7b3a      	ldrb	r2, [r7, #12]
 800a7b6:	4c0a      	ldr	r4, [pc, #40]	@ (800a7e0 <Adjust_Motors_By_FrontBack_Distance+0x8a0>)
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	00db      	lsls	r3, r3, #3
 800a7bc:	4413      	add	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4423      	add	r3, r4
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681c      	ldr	r4, [r3, #0]
 800a7c6:	f7f6 f9ef 	bl	8000ba8 <__aeabi_d2uiz>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	6363      	str	r3, [r4, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 - speed_adjustment * current_speed2 * magnification_close);
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjustment * current_speed3 * magnification_close);
        // OLED_ShowNum(4, 7, speed_adjustment * current_speed4 * magnification_close, 4);
        // OLED_ShowNum(4, 12, current_speed4, 4);
    }
}
 800a7ce:	f000 bc2c 	b.w	800b02a <Adjust_Motors_By_FrontBack_Distance+0x10ea>
 800a7d2:	bf00      	nop
 800a7d4:	f3af 8000 	nop.w
 800a7d8:	cccccccd 	.word	0xcccccccd
 800a7dc:	3feccccc 	.word	0x3feccccc
 800a7e0:	20000388 	.word	0x20000388
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 + speed_adjustment * current_speed3 * magnification);
 800a7e4:	7b3a      	ldrb	r2, [r7, #12]
 800a7e6:	49aa      	ldr	r1, [pc, #680]	@ (800aa90 <Adjust_Motors_By_FrontBack_Distance+0xb50>)
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	00db      	lsls	r3, r3, #3
 800a7ec:	4413      	add	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	440b      	add	r3, r1
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2b04      	cmp	r3, #4
 800a7f8:	d12e      	bne.n	800a858 <Adjust_Motors_By_FrontBack_Distance+0x918>
 800a7fa:	6978      	ldr	r0, [r7, #20]
 800a7fc:	f7f5 fe82 	bl	8000504 <__aeabi_ui2d>
 800a800:	4604      	mov	r4, r0
 800a802:	460d      	mov	r5, r1
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	ee07 3a90 	vmov	s15, r3
 800a80a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a80e:	edd7 7a08 	vldr	s15, [r7, #32]
 800a812:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a816:	ee17 0a90 	vmov	r0, s15
 800a81a:	f7f5 fe95 	bl	8000548 <__aeabi_f2d>
 800a81e:	a39a      	add	r3, pc, #616	@ (adr r3, 800aa88 <Adjust_Motors_By_FrontBack_Distance+0xb48>)
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	f7f5 fee8 	bl	80005f8 <__aeabi_dmul>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4620      	mov	r0, r4
 800a82e:	4629      	mov	r1, r5
 800a830:	f7f5 fd2c 	bl	800028c <__adddf3>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4610      	mov	r0, r2
 800a83a:	4619      	mov	r1, r3
 800a83c:	7b3a      	ldrb	r2, [r7, #12]
 800a83e:	4c94      	ldr	r4, [pc, #592]	@ (800aa90 <Adjust_Motors_By_FrontBack_Distance+0xb50>)
 800a840:	4613      	mov	r3, r2
 800a842:	00db      	lsls	r3, r3, #3
 800a844:	4413      	add	r3, r2
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4423      	add	r3, r4
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681c      	ldr	r4, [r3, #0]
 800a84e:	f7f6 f9ab 	bl	8000ba8 <__aeabi_d2uiz>
 800a852:	4603      	mov	r3, r0
 800a854:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a856:	e3e8      	b.n	800b02a <Adjust_Motors_By_FrontBack_Distance+0x10ea>
 800a858:	7b3a      	ldrb	r2, [r7, #12]
 800a85a:	498d      	ldr	r1, [pc, #564]	@ (800aa90 <Adjust_Motors_By_FrontBack_Distance+0xb50>)
 800a85c:	4613      	mov	r3, r2
 800a85e:	00db      	lsls	r3, r3, #3
 800a860:	4413      	add	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	440b      	add	r3, r1
 800a866:	3304      	adds	r3, #4
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b08      	cmp	r3, #8
 800a86c:	d12e      	bne.n	800a8cc <Adjust_Motors_By_FrontBack_Distance+0x98c>
 800a86e:	6978      	ldr	r0, [r7, #20]
 800a870:	f7f5 fe48 	bl	8000504 <__aeabi_ui2d>
 800a874:	4604      	mov	r4, r0
 800a876:	460d      	mov	r5, r1
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	ee07 3a90 	vmov	s15, r3
 800a87e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a882:	edd7 7a08 	vldr	s15, [r7, #32]
 800a886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a88a:	ee17 0a90 	vmov	r0, s15
 800a88e:	f7f5 fe5b 	bl	8000548 <__aeabi_f2d>
 800a892:	a37d      	add	r3, pc, #500	@ (adr r3, 800aa88 <Adjust_Motors_By_FrontBack_Distance+0xb48>)
 800a894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a898:	f7f5 feae 	bl	80005f8 <__aeabi_dmul>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	f7f5 fcf2 	bl	800028c <__adddf3>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	7b3a      	ldrb	r2, [r7, #12]
 800a8b2:	4c77      	ldr	r4, [pc, #476]	@ (800aa90 <Adjust_Motors_By_FrontBack_Distance+0xb50>)
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	4413      	add	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4423      	add	r3, r4
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681c      	ldr	r4, [r3, #0]
 800a8c2:	f7f6 f971 	bl	8000ba8 <__aeabi_d2uiz>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800a8ca:	e3ae      	b.n	800b02a <Adjust_Motors_By_FrontBack_Distance+0x10ea>
 800a8cc:	6978      	ldr	r0, [r7, #20]
 800a8ce:	f7f5 fe19 	bl	8000504 <__aeabi_ui2d>
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	460d      	mov	r5, r1
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	ee07 3a90 	vmov	s15, r3
 800a8dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a8e0:	edd7 7a08 	vldr	s15, [r7, #32]
 800a8e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8e8:	ee17 0a90 	vmov	r0, s15
 800a8ec:	f7f5 fe2c 	bl	8000548 <__aeabi_f2d>
 800a8f0:	a365      	add	r3, pc, #404	@ (adr r3, 800aa88 <Adjust_Motors_By_FrontBack_Distance+0xb48>)
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	f7f5 fe7f 	bl	80005f8 <__aeabi_dmul>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4620      	mov	r0, r4
 800a900:	4629      	mov	r1, r5
 800a902:	f7f5 fcc3 	bl	800028c <__adddf3>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4610      	mov	r0, r2
 800a90c:	4619      	mov	r1, r3
 800a90e:	7b3a      	ldrb	r2, [r7, #12]
 800a910:	4c5f      	ldr	r4, [pc, #380]	@ (800aa90 <Adjust_Motors_By_FrontBack_Distance+0xb50>)
 800a912:	4613      	mov	r3, r2
 800a914:	00db      	lsls	r3, r3, #3
 800a916:	4413      	add	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4423      	add	r3, r4
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681c      	ldr	r4, [r3, #0]
 800a920:	f7f6 f942 	bl	8000ba8 <__aeabi_d2uiz>
 800a924:	4603      	mov	r3, r0
 800a926:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800a928:	e37f      	b.n	800b02a <Adjust_Motors_By_FrontBack_Distance+0x10ea>
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, current_speed1 + speed_adjustment * current_speed1 * magnification_close);
 800a92a:	7bfa      	ldrb	r2, [r7, #15]
 800a92c:	4958      	ldr	r1, [pc, #352]	@ (800aa90 <Adjust_Motors_By_FrontBack_Distance+0xb50>)
 800a92e:	4613      	mov	r3, r2
 800a930:	00db      	lsls	r3, r3, #3
 800a932:	4413      	add	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	440b      	add	r3, r1
 800a938:	3304      	adds	r3, #4
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d12e      	bne.n	800a99e <Adjust_Motors_By_FrontBack_Distance+0xa5e>
 800a940:	69f8      	ldr	r0, [r7, #28]
 800a942:	f7f5 fddf 	bl	8000504 <__aeabi_ui2d>
 800a946:	4604      	mov	r4, r0
 800a948:	460d      	mov	r5, r1
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	ee07 3a90 	vmov	s15, r3
 800a950:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a954:	edd7 7a08 	vldr	s15, [r7, #32]
 800a958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a95c:	ee17 0a90 	vmov	r0, s15
 800a960:	f7f5 fdf2 	bl	8000548 <__aeabi_f2d>
 800a964:	a348      	add	r3, pc, #288	@ (adr r3, 800aa88 <Adjust_Motors_By_FrontBack_Distance+0xb48>)
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	f7f5 fe45 	bl	80005f8 <__aeabi_dmul>
 800a96e:	4602      	mov	r2, r0
 800a970:	460b      	mov	r3, r1
 800a972:	4620      	mov	r0, r4
 800a974:	4629      	mov	r1, r5
 800a976:	f7f5 fc89 	bl	800028c <__adddf3>
 800a97a:	4602      	mov	r2, r0
 800a97c:	460b      	mov	r3, r1
 800a97e:	4610      	mov	r0, r2
 800a980:	4619      	mov	r1, r3
 800a982:	7bfa      	ldrb	r2, [r7, #15]
 800a984:	4c42      	ldr	r4, [pc, #264]	@ (800aa90 <Adjust_Motors_By_FrontBack_Distance+0xb50>)
 800a986:	4613      	mov	r3, r2
 800a988:	00db      	lsls	r3, r3, #3
 800a98a:	4413      	add	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4423      	add	r3, r4
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681c      	ldr	r4, [r3, #0]
 800a994:	f7f6 f908 	bl	8000ba8 <__aeabi_d2uiz>
 800a998:	4603      	mov	r3, r0
 800a99a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a99c:	e0a8      	b.n	800aaf0 <Adjust_Motors_By_FrontBack_Distance+0xbb0>
 800a99e:	7bfa      	ldrb	r2, [r7, #15]
 800a9a0:	493b      	ldr	r1, [pc, #236]	@ (800aa90 <Adjust_Motors_By_FrontBack_Distance+0xb50>)
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	00db      	lsls	r3, r3, #3
 800a9a6:	4413      	add	r3, r2
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	440b      	add	r3, r1
 800a9ac:	3304      	adds	r3, #4
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b04      	cmp	r3, #4
 800a9b2:	d12e      	bne.n	800aa12 <Adjust_Motors_By_FrontBack_Distance+0xad2>
 800a9b4:	69f8      	ldr	r0, [r7, #28]
 800a9b6:	f7f5 fda5 	bl	8000504 <__aeabi_ui2d>
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	460d      	mov	r5, r1
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	ee07 3a90 	vmov	s15, r3
 800a9c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a9c8:	edd7 7a08 	vldr	s15, [r7, #32]
 800a9cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9d0:	ee17 0a90 	vmov	r0, s15
 800a9d4:	f7f5 fdb8 	bl	8000548 <__aeabi_f2d>
 800a9d8:	a32b      	add	r3, pc, #172	@ (adr r3, 800aa88 <Adjust_Motors_By_FrontBack_Distance+0xb48>)
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	f7f5 fe0b 	bl	80005f8 <__aeabi_dmul>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	f7f5 fc4f 	bl	800028c <__adddf3>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4610      	mov	r0, r2
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	7bfa      	ldrb	r2, [r7, #15]
 800a9f8:	4c25      	ldr	r4, [pc, #148]	@ (800aa90 <Adjust_Motors_By_FrontBack_Distance+0xb50>)
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	00db      	lsls	r3, r3, #3
 800a9fe:	4413      	add	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4423      	add	r3, r4
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	681c      	ldr	r4, [r3, #0]
 800aa08:	f7f6 f8ce 	bl	8000ba8 <__aeabi_d2uiz>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	63a3      	str	r3, [r4, #56]	@ 0x38
 800aa10:	e06e      	b.n	800aaf0 <Adjust_Motors_By_FrontBack_Distance+0xbb0>
 800aa12:	7bfa      	ldrb	r2, [r7, #15]
 800aa14:	491e      	ldr	r1, [pc, #120]	@ (800aa90 <Adjust_Motors_By_FrontBack_Distance+0xb50>)
 800aa16:	4613      	mov	r3, r2
 800aa18:	00db      	lsls	r3, r3, #3
 800aa1a:	4413      	add	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	440b      	add	r3, r1
 800aa20:	3304      	adds	r3, #4
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b08      	cmp	r3, #8
 800aa26:	d135      	bne.n	800aa94 <Adjust_Motors_By_FrontBack_Distance+0xb54>
 800aa28:	69f8      	ldr	r0, [r7, #28]
 800aa2a:	f7f5 fd6b 	bl	8000504 <__aeabi_ui2d>
 800aa2e:	4604      	mov	r4, r0
 800aa30:	460d      	mov	r5, r1
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	ee07 3a90 	vmov	s15, r3
 800aa38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aa3c:	edd7 7a08 	vldr	s15, [r7, #32]
 800aa40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa44:	ee17 0a90 	vmov	r0, s15
 800aa48:	f7f5 fd7e 	bl	8000548 <__aeabi_f2d>
 800aa4c:	a30e      	add	r3, pc, #56	@ (adr r3, 800aa88 <Adjust_Motors_By_FrontBack_Distance+0xb48>)
 800aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa52:	f7f5 fdd1 	bl	80005f8 <__aeabi_dmul>
 800aa56:	4602      	mov	r2, r0
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	f7f5 fc15 	bl	800028c <__adddf3>
 800aa62:	4602      	mov	r2, r0
 800aa64:	460b      	mov	r3, r1
 800aa66:	4610      	mov	r0, r2
 800aa68:	4619      	mov	r1, r3
 800aa6a:	7bfa      	ldrb	r2, [r7, #15]
 800aa6c:	4c08      	ldr	r4, [pc, #32]	@ (800aa90 <Adjust_Motors_By_FrontBack_Distance+0xb50>)
 800aa6e:	4613      	mov	r3, r2
 800aa70:	00db      	lsls	r3, r3, #3
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4423      	add	r3, r4
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681c      	ldr	r4, [r3, #0]
 800aa7c:	f7f6 f894 	bl	8000ba8 <__aeabi_d2uiz>
 800aa80:	4603      	mov	r3, r0
 800aa82:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800aa84:	e034      	b.n	800aaf0 <Adjust_Motors_By_FrontBack_Distance+0xbb0>
 800aa86:	bf00      	nop
 800aa88:	cccccccd 	.word	0xcccccccd
 800aa8c:	3feccccc 	.word	0x3feccccc
 800aa90:	20000388 	.word	0x20000388
 800aa94:	69f8      	ldr	r0, [r7, #28]
 800aa96:	f7f5 fd35 	bl	8000504 <__aeabi_ui2d>
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	460d      	mov	r5, r1
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	ee07 3a90 	vmov	s15, r3
 800aaa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aaa8:	edd7 7a08 	vldr	s15, [r7, #32]
 800aaac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aab0:	ee17 0a90 	vmov	r0, s15
 800aab4:	f7f5 fd48 	bl	8000548 <__aeabi_f2d>
 800aab8:	a3d3      	add	r3, pc, #844	@ (adr r3, 800ae08 <Adjust_Motors_By_FrontBack_Distance+0xec8>)
 800aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabe:	f7f5 fd9b 	bl	80005f8 <__aeabi_dmul>
 800aac2:	4602      	mov	r2, r0
 800aac4:	460b      	mov	r3, r1
 800aac6:	4620      	mov	r0, r4
 800aac8:	4629      	mov	r1, r5
 800aaca:	f7f5 fbdf 	bl	800028c <__adddf3>
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	4610      	mov	r0, r2
 800aad4:	4619      	mov	r1, r3
 800aad6:	7bfa      	ldrb	r2, [r7, #15]
 800aad8:	4ccd      	ldr	r4, [pc, #820]	@ (800ae10 <Adjust_Motors_By_FrontBack_Distance+0xed0>)
 800aada:	4613      	mov	r3, r2
 800aadc:	00db      	lsls	r3, r3, #3
 800aade:	4413      	add	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4423      	add	r3, r4
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681c      	ldr	r4, [r3, #0]
 800aae8:	f7f6 f85e 	bl	8000ba8 <__aeabi_d2uiz>
 800aaec:	4603      	mov	r3, r0
 800aaee:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, current_speed4 + speed_adjustment * current_speed4 * magnification_close);
 800aaf0:	7bba      	ldrb	r2, [r7, #14]
 800aaf2:	49c7      	ldr	r1, [pc, #796]	@ (800ae10 <Adjust_Motors_By_FrontBack_Distance+0xed0>)
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	00db      	lsls	r3, r3, #3
 800aaf8:	4413      	add	r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	440b      	add	r3, r1
 800aafe:	3304      	adds	r3, #4
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d12e      	bne.n	800ab64 <Adjust_Motors_By_FrontBack_Distance+0xc24>
 800ab06:	6938      	ldr	r0, [r7, #16]
 800ab08:	f7f5 fcfc 	bl	8000504 <__aeabi_ui2d>
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	460d      	mov	r5, r1
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	ee07 3a90 	vmov	s15, r3
 800ab16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab1a:	edd7 7a08 	vldr	s15, [r7, #32]
 800ab1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab22:	ee17 0a90 	vmov	r0, s15
 800ab26:	f7f5 fd0f 	bl	8000548 <__aeabi_f2d>
 800ab2a:	a3b7      	add	r3, pc, #732	@ (adr r3, 800ae08 <Adjust_Motors_By_FrontBack_Distance+0xec8>)
 800ab2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab30:	f7f5 fd62 	bl	80005f8 <__aeabi_dmul>
 800ab34:	4602      	mov	r2, r0
 800ab36:	460b      	mov	r3, r1
 800ab38:	4620      	mov	r0, r4
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	f7f5 fba6 	bl	800028c <__adddf3>
 800ab40:	4602      	mov	r2, r0
 800ab42:	460b      	mov	r3, r1
 800ab44:	4610      	mov	r0, r2
 800ab46:	4619      	mov	r1, r3
 800ab48:	7bba      	ldrb	r2, [r7, #14]
 800ab4a:	4cb1      	ldr	r4, [pc, #708]	@ (800ae10 <Adjust_Motors_By_FrontBack_Distance+0xed0>)
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	00db      	lsls	r3, r3, #3
 800ab50:	4413      	add	r3, r2
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	4423      	add	r3, r4
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681c      	ldr	r4, [r3, #0]
 800ab5a:	f7f6 f825 	bl	8000ba8 <__aeabi_d2uiz>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab62:	e0a1      	b.n	800aca8 <Adjust_Motors_By_FrontBack_Distance+0xd68>
 800ab64:	7bba      	ldrb	r2, [r7, #14]
 800ab66:	49aa      	ldr	r1, [pc, #680]	@ (800ae10 <Adjust_Motors_By_FrontBack_Distance+0xed0>)
 800ab68:	4613      	mov	r3, r2
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	4413      	add	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	440b      	add	r3, r1
 800ab72:	3304      	adds	r3, #4
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b04      	cmp	r3, #4
 800ab78:	d12e      	bne.n	800abd8 <Adjust_Motors_By_FrontBack_Distance+0xc98>
 800ab7a:	6938      	ldr	r0, [r7, #16]
 800ab7c:	f7f5 fcc2 	bl	8000504 <__aeabi_ui2d>
 800ab80:	4604      	mov	r4, r0
 800ab82:	460d      	mov	r5, r1
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	ee07 3a90 	vmov	s15, r3
 800ab8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab8e:	edd7 7a08 	vldr	s15, [r7, #32]
 800ab92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab96:	ee17 0a90 	vmov	r0, s15
 800ab9a:	f7f5 fcd5 	bl	8000548 <__aeabi_f2d>
 800ab9e:	a39a      	add	r3, pc, #616	@ (adr r3, 800ae08 <Adjust_Motors_By_FrontBack_Distance+0xec8>)
 800aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba4:	f7f5 fd28 	bl	80005f8 <__aeabi_dmul>
 800aba8:	4602      	mov	r2, r0
 800abaa:	460b      	mov	r3, r1
 800abac:	4620      	mov	r0, r4
 800abae:	4629      	mov	r1, r5
 800abb0:	f7f5 fb6c 	bl	800028c <__adddf3>
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	4610      	mov	r0, r2
 800abba:	4619      	mov	r1, r3
 800abbc:	7bba      	ldrb	r2, [r7, #14]
 800abbe:	4c94      	ldr	r4, [pc, #592]	@ (800ae10 <Adjust_Motors_By_FrontBack_Distance+0xed0>)
 800abc0:	4613      	mov	r3, r2
 800abc2:	00db      	lsls	r3, r3, #3
 800abc4:	4413      	add	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4423      	add	r3, r4
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681c      	ldr	r4, [r3, #0]
 800abce:	f7f5 ffeb 	bl	8000ba8 <__aeabi_d2uiz>
 800abd2:	4603      	mov	r3, r0
 800abd4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800abd6:	e067      	b.n	800aca8 <Adjust_Motors_By_FrontBack_Distance+0xd68>
 800abd8:	7bba      	ldrb	r2, [r7, #14]
 800abda:	498d      	ldr	r1, [pc, #564]	@ (800ae10 <Adjust_Motors_By_FrontBack_Distance+0xed0>)
 800abdc:	4613      	mov	r3, r2
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	4413      	add	r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	440b      	add	r3, r1
 800abe6:	3304      	adds	r3, #4
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b08      	cmp	r3, #8
 800abec:	d12e      	bne.n	800ac4c <Adjust_Motors_By_FrontBack_Distance+0xd0c>
 800abee:	6938      	ldr	r0, [r7, #16]
 800abf0:	f7f5 fc88 	bl	8000504 <__aeabi_ui2d>
 800abf4:	4604      	mov	r4, r0
 800abf6:	460d      	mov	r5, r1
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	ee07 3a90 	vmov	s15, r3
 800abfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac02:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac0a:	ee17 0a90 	vmov	r0, s15
 800ac0e:	f7f5 fc9b 	bl	8000548 <__aeabi_f2d>
 800ac12:	a37d      	add	r3, pc, #500	@ (adr r3, 800ae08 <Adjust_Motors_By_FrontBack_Distance+0xec8>)
 800ac14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac18:	f7f5 fcee 	bl	80005f8 <__aeabi_dmul>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	4620      	mov	r0, r4
 800ac22:	4629      	mov	r1, r5
 800ac24:	f7f5 fb32 	bl	800028c <__adddf3>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	4619      	mov	r1, r3
 800ac30:	7bba      	ldrb	r2, [r7, #14]
 800ac32:	4c77      	ldr	r4, [pc, #476]	@ (800ae10 <Adjust_Motors_By_FrontBack_Distance+0xed0>)
 800ac34:	4613      	mov	r3, r2
 800ac36:	00db      	lsls	r3, r3, #3
 800ac38:	4413      	add	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4423      	add	r3, r4
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681c      	ldr	r4, [r3, #0]
 800ac42:	f7f5 ffb1 	bl	8000ba8 <__aeabi_d2uiz>
 800ac46:	4603      	mov	r3, r0
 800ac48:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800ac4a:	e02d      	b.n	800aca8 <Adjust_Motors_By_FrontBack_Distance+0xd68>
 800ac4c:	6938      	ldr	r0, [r7, #16]
 800ac4e:	f7f5 fc59 	bl	8000504 <__aeabi_ui2d>
 800ac52:	4604      	mov	r4, r0
 800ac54:	460d      	mov	r5, r1
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	ee07 3a90 	vmov	s15, r3
 800ac5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac60:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac68:	ee17 0a90 	vmov	r0, s15
 800ac6c:	f7f5 fc6c 	bl	8000548 <__aeabi_f2d>
 800ac70:	a365      	add	r3, pc, #404	@ (adr r3, 800ae08 <Adjust_Motors_By_FrontBack_Distance+0xec8>)
 800ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac76:	f7f5 fcbf 	bl	80005f8 <__aeabi_dmul>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	4620      	mov	r0, r4
 800ac80:	4629      	mov	r1, r5
 800ac82:	f7f5 fb03 	bl	800028c <__adddf3>
 800ac86:	4602      	mov	r2, r0
 800ac88:	460b      	mov	r3, r1
 800ac8a:	4610      	mov	r0, r2
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	7bba      	ldrb	r2, [r7, #14]
 800ac90:	4c5f      	ldr	r4, [pc, #380]	@ (800ae10 <Adjust_Motors_By_FrontBack_Distance+0xed0>)
 800ac92:	4613      	mov	r3, r2
 800ac94:	00db      	lsls	r3, r3, #3
 800ac96:	4413      	add	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4423      	add	r3, r4
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681c      	ldr	r4, [r3, #0]
 800aca0:	f7f5 ff82 	bl	8000ba8 <__aeabi_d2uiz>
 800aca4:	4603      	mov	r3, r0
 800aca6:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, current_speed2 - speed_adjustment * current_speed2 * magnification_close);
 800aca8:	7b7a      	ldrb	r2, [r7, #13]
 800acaa:	4959      	ldr	r1, [pc, #356]	@ (800ae10 <Adjust_Motors_By_FrontBack_Distance+0xed0>)
 800acac:	4613      	mov	r3, r2
 800acae:	00db      	lsls	r3, r3, #3
 800acb0:	4413      	add	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	440b      	add	r3, r1
 800acb6:	3304      	adds	r3, #4
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d12e      	bne.n	800ad1c <Adjust_Motors_By_FrontBack_Distance+0xddc>
 800acbe:	69b8      	ldr	r0, [r7, #24]
 800acc0:	f7f5 fc20 	bl	8000504 <__aeabi_ui2d>
 800acc4:	4604      	mov	r4, r0
 800acc6:	460d      	mov	r5, r1
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	ee07 3a90 	vmov	s15, r3
 800acce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800acd2:	edd7 7a08 	vldr	s15, [r7, #32]
 800acd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acda:	ee17 0a90 	vmov	r0, s15
 800acde:	f7f5 fc33 	bl	8000548 <__aeabi_f2d>
 800ace2:	a349      	add	r3, pc, #292	@ (adr r3, 800ae08 <Adjust_Motors_By_FrontBack_Distance+0xec8>)
 800ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace8:	f7f5 fc86 	bl	80005f8 <__aeabi_dmul>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	4620      	mov	r0, r4
 800acf2:	4629      	mov	r1, r5
 800acf4:	f7f5 fac8 	bl	8000288 <__aeabi_dsub>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	4610      	mov	r0, r2
 800acfe:	4619      	mov	r1, r3
 800ad00:	7b7a      	ldrb	r2, [r7, #13]
 800ad02:	4c43      	ldr	r4, [pc, #268]	@ (800ae10 <Adjust_Motors_By_FrontBack_Distance+0xed0>)
 800ad04:	4613      	mov	r3, r2
 800ad06:	00db      	lsls	r3, r3, #3
 800ad08:	4413      	add	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4423      	add	r3, r4
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681c      	ldr	r4, [r3, #0]
 800ad12:	f7f5 ff49 	bl	8000ba8 <__aeabi_d2uiz>
 800ad16:	4603      	mov	r3, r0
 800ad18:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad1a:	e0a9      	b.n	800ae70 <Adjust_Motors_By_FrontBack_Distance+0xf30>
 800ad1c:	7b7a      	ldrb	r2, [r7, #13]
 800ad1e:	493c      	ldr	r1, [pc, #240]	@ (800ae10 <Adjust_Motors_By_FrontBack_Distance+0xed0>)
 800ad20:	4613      	mov	r3, r2
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	4413      	add	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	440b      	add	r3, r1
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b04      	cmp	r3, #4
 800ad30:	d12e      	bne.n	800ad90 <Adjust_Motors_By_FrontBack_Distance+0xe50>
 800ad32:	69b8      	ldr	r0, [r7, #24]
 800ad34:	f7f5 fbe6 	bl	8000504 <__aeabi_ui2d>
 800ad38:	4604      	mov	r4, r0
 800ad3a:	460d      	mov	r5, r1
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	ee07 3a90 	vmov	s15, r3
 800ad42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ad46:	edd7 7a08 	vldr	s15, [r7, #32]
 800ad4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad4e:	ee17 0a90 	vmov	r0, s15
 800ad52:	f7f5 fbf9 	bl	8000548 <__aeabi_f2d>
 800ad56:	a32c      	add	r3, pc, #176	@ (adr r3, 800ae08 <Adjust_Motors_By_FrontBack_Distance+0xec8>)
 800ad58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5c:	f7f5 fc4c 	bl	80005f8 <__aeabi_dmul>
 800ad60:	4602      	mov	r2, r0
 800ad62:	460b      	mov	r3, r1
 800ad64:	4620      	mov	r0, r4
 800ad66:	4629      	mov	r1, r5
 800ad68:	f7f5 fa8e 	bl	8000288 <__aeabi_dsub>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	460b      	mov	r3, r1
 800ad70:	4610      	mov	r0, r2
 800ad72:	4619      	mov	r1, r3
 800ad74:	7b7a      	ldrb	r2, [r7, #13]
 800ad76:	4c26      	ldr	r4, [pc, #152]	@ (800ae10 <Adjust_Motors_By_FrontBack_Distance+0xed0>)
 800ad78:	4613      	mov	r3, r2
 800ad7a:	00db      	lsls	r3, r3, #3
 800ad7c:	4413      	add	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4423      	add	r3, r4
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681c      	ldr	r4, [r3, #0]
 800ad86:	f7f5 ff0f 	bl	8000ba8 <__aeabi_d2uiz>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ad8e:	e06f      	b.n	800ae70 <Adjust_Motors_By_FrontBack_Distance+0xf30>
 800ad90:	7b7a      	ldrb	r2, [r7, #13]
 800ad92:	491f      	ldr	r1, [pc, #124]	@ (800ae10 <Adjust_Motors_By_FrontBack_Distance+0xed0>)
 800ad94:	4613      	mov	r3, r2
 800ad96:	00db      	lsls	r3, r3, #3
 800ad98:	4413      	add	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	440b      	add	r3, r1
 800ad9e:	3304      	adds	r3, #4
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b08      	cmp	r3, #8
 800ada4:	d136      	bne.n	800ae14 <Adjust_Motors_By_FrontBack_Distance+0xed4>
 800ada6:	69b8      	ldr	r0, [r7, #24]
 800ada8:	f7f5 fbac 	bl	8000504 <__aeabi_ui2d>
 800adac:	4604      	mov	r4, r0
 800adae:	460d      	mov	r5, r1
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	ee07 3a90 	vmov	s15, r3
 800adb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800adba:	edd7 7a08 	vldr	s15, [r7, #32]
 800adbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adc2:	ee17 0a90 	vmov	r0, s15
 800adc6:	f7f5 fbbf 	bl	8000548 <__aeabi_f2d>
 800adca:	a30f      	add	r3, pc, #60	@ (adr r3, 800ae08 <Adjust_Motors_By_FrontBack_Distance+0xec8>)
 800adcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add0:	f7f5 fc12 	bl	80005f8 <__aeabi_dmul>
 800add4:	4602      	mov	r2, r0
 800add6:	460b      	mov	r3, r1
 800add8:	4620      	mov	r0, r4
 800adda:	4629      	mov	r1, r5
 800addc:	f7f5 fa54 	bl	8000288 <__aeabi_dsub>
 800ade0:	4602      	mov	r2, r0
 800ade2:	460b      	mov	r3, r1
 800ade4:	4610      	mov	r0, r2
 800ade6:	4619      	mov	r1, r3
 800ade8:	7b7a      	ldrb	r2, [r7, #13]
 800adea:	4c09      	ldr	r4, [pc, #36]	@ (800ae10 <Adjust_Motors_By_FrontBack_Distance+0xed0>)
 800adec:	4613      	mov	r3, r2
 800adee:	00db      	lsls	r3, r3, #3
 800adf0:	4413      	add	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4423      	add	r3, r4
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681c      	ldr	r4, [r3, #0]
 800adfa:	f7f5 fed5 	bl	8000ba8 <__aeabi_d2uiz>
 800adfe:	4603      	mov	r3, r0
 800ae00:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800ae02:	e035      	b.n	800ae70 <Adjust_Motors_By_FrontBack_Distance+0xf30>
 800ae04:	f3af 8000 	nop.w
 800ae08:	cccccccd 	.word	0xcccccccd
 800ae0c:	3feccccc 	.word	0x3feccccc
 800ae10:	20000388 	.word	0x20000388
 800ae14:	69b8      	ldr	r0, [r7, #24]
 800ae16:	f7f5 fb75 	bl	8000504 <__aeabi_ui2d>
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	460d      	mov	r5, r1
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	ee07 3a90 	vmov	s15, r3
 800ae24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ae28:	edd7 7a08 	vldr	s15, [r7, #32]
 800ae2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae30:	ee17 0a90 	vmov	r0, s15
 800ae34:	f7f5 fb88 	bl	8000548 <__aeabi_f2d>
 800ae38:	a37f      	add	r3, pc, #508	@ (adr r3, 800b038 <Adjust_Motors_By_FrontBack_Distance+0x10f8>)
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	f7f5 fbdb 	bl	80005f8 <__aeabi_dmul>
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	4620      	mov	r0, r4
 800ae48:	4629      	mov	r1, r5
 800ae4a:	f7f5 fa1d 	bl	8000288 <__aeabi_dsub>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4610      	mov	r0, r2
 800ae54:	4619      	mov	r1, r3
 800ae56:	7b7a      	ldrb	r2, [r7, #13]
 800ae58:	4c79      	ldr	r4, [pc, #484]	@ (800b040 <Adjust_Motors_By_FrontBack_Distance+0x1100>)
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	00db      	lsls	r3, r3, #3
 800ae5e:	4413      	add	r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4423      	add	r3, r4
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	681c      	ldr	r4, [r3, #0]
 800ae68:	f7f5 fe9e 	bl	8000ba8 <__aeabi_d2uiz>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjustment * current_speed3 * magnification_close);
 800ae70:	7b3a      	ldrb	r2, [r7, #12]
 800ae72:	4973      	ldr	r1, [pc, #460]	@ (800b040 <Adjust_Motors_By_FrontBack_Distance+0x1100>)
 800ae74:	4613      	mov	r3, r2
 800ae76:	00db      	lsls	r3, r3, #3
 800ae78:	4413      	add	r3, r2
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	440b      	add	r3, r1
 800ae7e:	3304      	adds	r3, #4
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d12e      	bne.n	800aee4 <Adjust_Motors_By_FrontBack_Distance+0xfa4>
 800ae86:	6978      	ldr	r0, [r7, #20]
 800ae88:	f7f5 fb3c 	bl	8000504 <__aeabi_ui2d>
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	460d      	mov	r5, r1
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	ee07 3a90 	vmov	s15, r3
 800ae96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ae9a:	edd7 7a08 	vldr	s15, [r7, #32]
 800ae9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aea2:	ee17 0a90 	vmov	r0, s15
 800aea6:	f7f5 fb4f 	bl	8000548 <__aeabi_f2d>
 800aeaa:	a363      	add	r3, pc, #396	@ (adr r3, 800b038 <Adjust_Motors_By_FrontBack_Distance+0x10f8>)
 800aeac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb0:	f7f5 fba2 	bl	80005f8 <__aeabi_dmul>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4620      	mov	r0, r4
 800aeba:	4629      	mov	r1, r5
 800aebc:	f7f5 f9e4 	bl	8000288 <__aeabi_dsub>
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	4610      	mov	r0, r2
 800aec6:	4619      	mov	r1, r3
 800aec8:	7b3a      	ldrb	r2, [r7, #12]
 800aeca:	4c5d      	ldr	r4, [pc, #372]	@ (800b040 <Adjust_Motors_By_FrontBack_Distance+0x1100>)
 800aecc:	4613      	mov	r3, r2
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	4413      	add	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4423      	add	r3, r4
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681c      	ldr	r4, [r3, #0]
 800aeda:	f7f5 fe65 	bl	8000ba8 <__aeabi_d2uiz>
 800aede:	4603      	mov	r3, r0
 800aee0:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800aee2:	e0a2      	b.n	800b02a <Adjust_Motors_By_FrontBack_Distance+0x10ea>
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjustment * current_speed3 * magnification_close);
 800aee4:	7b3a      	ldrb	r2, [r7, #12]
 800aee6:	4956      	ldr	r1, [pc, #344]	@ (800b040 <Adjust_Motors_By_FrontBack_Distance+0x1100>)
 800aee8:	4613      	mov	r3, r2
 800aeea:	00db      	lsls	r3, r3, #3
 800aeec:	4413      	add	r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	440b      	add	r3, r1
 800aef2:	3304      	adds	r3, #4
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b04      	cmp	r3, #4
 800aef8:	d12e      	bne.n	800af58 <Adjust_Motors_By_FrontBack_Distance+0x1018>
 800aefa:	6978      	ldr	r0, [r7, #20]
 800aefc:	f7f5 fb02 	bl	8000504 <__aeabi_ui2d>
 800af00:	4604      	mov	r4, r0
 800af02:	460d      	mov	r5, r1
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800af0e:	edd7 7a08 	vldr	s15, [r7, #32]
 800af12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af16:	ee17 0a90 	vmov	r0, s15
 800af1a:	f7f5 fb15 	bl	8000548 <__aeabi_f2d>
 800af1e:	a346      	add	r3, pc, #280	@ (adr r3, 800b038 <Adjust_Motors_By_FrontBack_Distance+0x10f8>)
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	f7f5 fb68 	bl	80005f8 <__aeabi_dmul>
 800af28:	4602      	mov	r2, r0
 800af2a:	460b      	mov	r3, r1
 800af2c:	4620      	mov	r0, r4
 800af2e:	4629      	mov	r1, r5
 800af30:	f7f5 f9aa 	bl	8000288 <__aeabi_dsub>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	4610      	mov	r0, r2
 800af3a:	4619      	mov	r1, r3
 800af3c:	7b3a      	ldrb	r2, [r7, #12]
 800af3e:	4c40      	ldr	r4, [pc, #256]	@ (800b040 <Adjust_Motors_By_FrontBack_Distance+0x1100>)
 800af40:	4613      	mov	r3, r2
 800af42:	00db      	lsls	r3, r3, #3
 800af44:	4413      	add	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4423      	add	r3, r4
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681c      	ldr	r4, [r3, #0]
 800af4e:	f7f5 fe2b 	bl	8000ba8 <__aeabi_d2uiz>
 800af52:	4603      	mov	r3, r0
 800af54:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800af56:	e068      	b.n	800b02a <Adjust_Motors_By_FrontBack_Distance+0x10ea>
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjustment * current_speed3 * magnification_close);
 800af58:	7b3a      	ldrb	r2, [r7, #12]
 800af5a:	4939      	ldr	r1, [pc, #228]	@ (800b040 <Adjust_Motors_By_FrontBack_Distance+0x1100>)
 800af5c:	4613      	mov	r3, r2
 800af5e:	00db      	lsls	r3, r3, #3
 800af60:	4413      	add	r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	440b      	add	r3, r1
 800af66:	3304      	adds	r3, #4
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b08      	cmp	r3, #8
 800af6c:	d12e      	bne.n	800afcc <Adjust_Motors_By_FrontBack_Distance+0x108c>
 800af6e:	6978      	ldr	r0, [r7, #20]
 800af70:	f7f5 fac8 	bl	8000504 <__aeabi_ui2d>
 800af74:	4604      	mov	r4, r0
 800af76:	460d      	mov	r5, r1
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	ee07 3a90 	vmov	s15, r3
 800af7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800af82:	edd7 7a08 	vldr	s15, [r7, #32]
 800af86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af8a:	ee17 0a90 	vmov	r0, s15
 800af8e:	f7f5 fadb 	bl	8000548 <__aeabi_f2d>
 800af92:	a329      	add	r3, pc, #164	@ (adr r3, 800b038 <Adjust_Motors_By_FrontBack_Distance+0x10f8>)
 800af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af98:	f7f5 fb2e 	bl	80005f8 <__aeabi_dmul>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4620      	mov	r0, r4
 800afa2:	4629      	mov	r1, r5
 800afa4:	f7f5 f970 	bl	8000288 <__aeabi_dsub>
 800afa8:	4602      	mov	r2, r0
 800afaa:	460b      	mov	r3, r1
 800afac:	4610      	mov	r0, r2
 800afae:	4619      	mov	r1, r3
 800afb0:	7b3a      	ldrb	r2, [r7, #12]
 800afb2:	4c23      	ldr	r4, [pc, #140]	@ (800b040 <Adjust_Motors_By_FrontBack_Distance+0x1100>)
 800afb4:	4613      	mov	r3, r2
 800afb6:	00db      	lsls	r3, r3, #3
 800afb8:	4413      	add	r3, r2
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4423      	add	r3, r4
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681c      	ldr	r4, [r3, #0]
 800afc2:	f7f5 fdf1 	bl	8000ba8 <__aeabi_d2uiz>
 800afc6:	4603      	mov	r3, r0
 800afc8:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 800afca:	e02e      	b.n	800b02a <Adjust_Motors_By_FrontBack_Distance+0x10ea>
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, current_speed3 - speed_adjustment * current_speed3 * magnification_close);
 800afcc:	6978      	ldr	r0, [r7, #20]
 800afce:	f7f5 fa99 	bl	8000504 <__aeabi_ui2d>
 800afd2:	4604      	mov	r4, r0
 800afd4:	460d      	mov	r5, r1
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800afe0:	edd7 7a08 	vldr	s15, [r7, #32]
 800afe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afe8:	ee17 0a90 	vmov	r0, s15
 800afec:	f7f5 faac 	bl	8000548 <__aeabi_f2d>
 800aff0:	a311      	add	r3, pc, #68	@ (adr r3, 800b038 <Adjust_Motors_By_FrontBack_Distance+0x10f8>)
 800aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff6:	f7f5 faff 	bl	80005f8 <__aeabi_dmul>
 800affa:	4602      	mov	r2, r0
 800affc:	460b      	mov	r3, r1
 800affe:	4620      	mov	r0, r4
 800b000:	4629      	mov	r1, r5
 800b002:	f7f5 f941 	bl	8000288 <__aeabi_dsub>
 800b006:	4602      	mov	r2, r0
 800b008:	460b      	mov	r3, r1
 800b00a:	4610      	mov	r0, r2
 800b00c:	4619      	mov	r1, r3
 800b00e:	7b3a      	ldrb	r2, [r7, #12]
 800b010:	4c0b      	ldr	r4, [pc, #44]	@ (800b040 <Adjust_Motors_By_FrontBack_Distance+0x1100>)
 800b012:	4613      	mov	r3, r2
 800b014:	00db      	lsls	r3, r3, #3
 800b016:	4413      	add	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4423      	add	r3, r4
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	681c      	ldr	r4, [r3, #0]
 800b020:	f7f5 fdc2 	bl	8000ba8 <__aeabi_d2uiz>
 800b024:	4603      	mov	r3, r0
 800b026:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800b028:	e7ff      	b.n	800b02a <Adjust_Motors_By_FrontBack_Distance+0x10ea>
 800b02a:	bf00      	nop
 800b02c:	3730      	adds	r7, #48	@ 0x30
 800b02e:	46bd      	mov	sp, r7
 800b030:	bdb0      	pop	{r4, r5, r7, pc}
 800b032:	bf00      	nop
 800b034:	f3af 8000 	nop.w
 800b038:	cccccccd 	.word	0xcccccccd
 800b03c:	3feccccc 	.word	0x3feccccc
 800b040:	20000388 	.word	0x20000388

0800b044 <PID_Calculate>:
    .prev_error = 0.0f,
    .max_integral = 50.0f
};

/* Exported functions --------------------------------------------------------*/
float PID_Calculate(PIDController* pid, float error, float dt) {
 800b044:	b580      	push	{r7, lr}
 800b046:	b088      	sub	sp, #32
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	ed87 0a02 	vstr	s0, [r7, #8]
 800b050:	edc7 0a01 	vstr	s1, [r7, #4]
    // 添加时间差保护
    if (dt <= 0.001f) {
 800b054:	edd7 7a01 	vldr	s15, [r7, #4]
 800b058:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800b134 <PID_Calculate+0xf0>
 800b05c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b064:	d801      	bhi.n	800b06a <PID_Calculate+0x26>
        dt = 0.001f;  // 最小时间差为1ms
 800b066:	4b34      	ldr	r3, [pc, #208]	@ (800b138 <PID_Calculate+0xf4>)
 800b068:	607b      	str	r3, [r7, #4]
    }

    float proportional = pid->Kp * error;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	edd3 7a00 	vldr	s15, [r3]
 800b070:	ed97 7a02 	vldr	s14, [r7, #8]
 800b074:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b078:	edc7 7a07 	vstr	s15, [r7, #28]

    pid->integral += error * dt;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	ed93 7a03 	vldr	s14, [r3, #12]
 800b082:	edd7 6a02 	vldr	s13, [r7, #8]
 800b086:	edd7 7a01 	vldr	s15, [r7, #4]
 800b08a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b08e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	edc3 7a03 	vstr	s15, [r3, #12]
    pid->integral = fmaxf(fminf(pid->integral, pid->max_integral), -pid->max_integral);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	edd3 7a03 	vldr	s15, [r3, #12]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	ed93 7a05 	vldr	s14, [r3, #20]
 800b0a4:	eef0 0a47 	vmov.f32	s1, s14
 800b0a8:	eeb0 0a67 	vmov.f32	s0, s15
 800b0ac:	f008 ff99 	bl	8013fe2 <fminf>
 800b0b0:	eeb0 7a40 	vmov.f32	s14, s0
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	edd3 7a05 	vldr	s15, [r3, #20]
 800b0ba:	eef1 7a67 	vneg.f32	s15, s15
 800b0be:	eef0 0a67 	vmov.f32	s1, s15
 800b0c2:	eeb0 0a47 	vmov.f32	s0, s14
 800b0c6:	f008 ff6f 	bl	8013fa8 <fmaxf>
 800b0ca:	eef0 7a40 	vmov.f32	s15, s0
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	edc3 7a03 	vstr	s15, [r3, #12]

    float derivative = pid->Kd * (error - pid->prev_error) / dt;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	ed93 7a02 	vldr	s14, [r3, #8]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	edd3 7a04 	vldr	s15, [r3, #16]
 800b0e0:	edd7 6a02 	vldr	s13, [r7, #8]
 800b0e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b0e8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b0ec:	ed97 7a01 	vldr	s14, [r7, #4]
 800b0f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0f4:	edc7 7a06 	vstr	s15, [r7, #24]

    float output = proportional + (pid->Ki * pid->integral) + derivative;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	ed93 7a01 	vldr	s14, [r3, #4]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	edd3 7a03 	vldr	s15, [r3, #12]
 800b104:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b108:	edd7 7a07 	vldr	s15, [r7, #28]
 800b10c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b110:	ed97 7a06 	vldr	s14, [r7, #24]
 800b114:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b118:	edc7 7a05 	vstr	s15, [r7, #20]

    pid->prev_error = error;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	611a      	str	r2, [r3, #16]

    return output;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	ee07 3a90 	vmov	s15, r3
}
 800b128:	eeb0 0a67 	vmov.f32	s0, s15
 800b12c:	3720      	adds	r7, #32
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	3a83126f 	.word	0x3a83126f
 800b138:	3a83126f 	.word	0x3a83126f

0800b13c <PID_Reset>:

void PID_Reset(PIDController* pid) {
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
    pid->integral = 0.0f;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f04f 0200 	mov.w	r2, #0
 800b14a:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0.0f;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f04f 0200 	mov.w	r2, #0
 800b152:	611a      	str	r2, [r3, #16]
} 
 800b154:	bf00      	nop
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b166:	2300      	movs	r3, #0
 800b168:	607b      	str	r3, [r7, #4]
 800b16a:	4b10      	ldr	r3, [pc, #64]	@ (800b1ac <HAL_MspInit+0x4c>)
 800b16c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b16e:	4a0f      	ldr	r2, [pc, #60]	@ (800b1ac <HAL_MspInit+0x4c>)
 800b170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b174:	6453      	str	r3, [r2, #68]	@ 0x44
 800b176:	4b0d      	ldr	r3, [pc, #52]	@ (800b1ac <HAL_MspInit+0x4c>)
 800b178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b17a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b17e:	607b      	str	r3, [r7, #4]
 800b180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b182:	2300      	movs	r3, #0
 800b184:	603b      	str	r3, [r7, #0]
 800b186:	4b09      	ldr	r3, [pc, #36]	@ (800b1ac <HAL_MspInit+0x4c>)
 800b188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b18a:	4a08      	ldr	r2, [pc, #32]	@ (800b1ac <HAL_MspInit+0x4c>)
 800b18c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b190:	6413      	str	r3, [r2, #64]	@ 0x40
 800b192:	4b06      	ldr	r3, [pc, #24]	@ (800b1ac <HAL_MspInit+0x4c>)
 800b194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b19a:	603b      	str	r3, [r7, #0]
 800b19c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b19e:	bf00      	nop
 800b1a0:	370c      	adds	r7, #12
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr
 800b1aa:	bf00      	nop
 800b1ac:	40023800 	.word	0x40023800

0800b1b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800b1b4:	bf00      	nop
 800b1b6:	e7fd      	b.n	800b1b4 <NMI_Handler+0x4>

0800b1b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b1bc:	bf00      	nop
 800b1be:	e7fd      	b.n	800b1bc <HardFault_Handler+0x4>

0800b1c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b1c4:	bf00      	nop
 800b1c6:	e7fd      	b.n	800b1c4 <MemManage_Handler+0x4>

0800b1c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b1cc:	bf00      	nop
 800b1ce:	e7fd      	b.n	800b1cc <BusFault_Handler+0x4>

0800b1d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b1d4:	bf00      	nop
 800b1d6:	e7fd      	b.n	800b1d4 <UsageFault_Handler+0x4>

0800b1d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b1dc:	bf00      	nop
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b1ea:	bf00      	nop
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b1f8:	bf00      	nop
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b206:	f001 fe4b 	bl	800cea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b20a:	bf00      	nop
 800b20c:	bd80      	pop	{r7, pc}
	...

0800b210 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b214:	4802      	ldr	r0, [pc, #8]	@ (800b220 <USART1_IRQHandler+0x10>)
 800b216:	f005 f98f 	bl	8010538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b21a:	bf00      	nop
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	20000998 	.word	0x20000998

0800b224 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800b228:	4802      	ldr	r0, [pc, #8]	@ (800b234 <USART2_IRQHandler+0x10>)
 800b22a:	f005 f985 	bl	8010538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800b22e:	bf00      	nop
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	200009e0 	.word	0x200009e0

0800b238 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800b23c:	4802      	ldr	r0, [pc, #8]	@ (800b248 <USART3_IRQHandler+0x10>)
 800b23e:	f005 f97b 	bl	8010538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800b242:	bf00      	nop
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	20000a28 	.word	0x20000a28

0800b24c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Echo_4_Pin);
 800b250:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b254:	f002 f9da 	bl	800d60c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Echo_3_Pin);
 800b258:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b25c:	f002 f9d6 	bl	800d60c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Echo_2_Pin);
 800b260:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800b264:	f002 f9d2 	bl	800d60c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b268:	bf00      	nop
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b270:	4802      	ldr	r0, [pc, #8]	@ (800b27c <UART4_IRQHandler+0x10>)
 800b272:	f005 f961 	bl	8010538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b276:	bf00      	nop
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	20000908 	.word	0x20000908

0800b280 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800b284:	4802      	ldr	r0, [pc, #8]	@ (800b290 <UART5_IRQHandler+0x10>)
 800b286:	f005 f957 	bl	8010538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800b28a:	bf00      	nop
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	20000950 	.word	0x20000950

0800b294 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800b298:	4802      	ldr	r0, [pc, #8]	@ (800b2a4 <USART6_IRQHandler+0x10>)
 800b29a:	f005 f94d 	bl	8010538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800b29e:	bf00      	nop
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000a70 	.word	0x20000a70

0800b2a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	af00      	add	r7, sp, #0
  return 1;
 800b2ac:	2301      	movs	r3, #1
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <_kill>:

int _kill(int pid, int sig)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b2c2:	f007 f835 	bl	8012330 <__errno>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2216      	movs	r2, #22
 800b2ca:	601a      	str	r2, [r3, #0]
  return -1;
 800b2cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <_exit>:

void _exit (int status)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b2e0:	f04f 31ff 	mov.w	r1, #4294967295
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7ff ffe7 	bl	800b2b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b2ea:	bf00      	nop
 800b2ec:	e7fd      	b.n	800b2ea <_exit+0x12>

0800b2ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b086      	sub	sp, #24
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	60f8      	str	r0, [r7, #12]
 800b2f6:	60b9      	str	r1, [r7, #8]
 800b2f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	617b      	str	r3, [r7, #20]
 800b2fe:	e00a      	b.n	800b316 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b300:	f3af 8000 	nop.w
 800b304:	4601      	mov	r1, r0
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	1c5a      	adds	r2, r3, #1
 800b30a:	60ba      	str	r2, [r7, #8]
 800b30c:	b2ca      	uxtb	r2, r1
 800b30e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	3301      	adds	r3, #1
 800b314:	617b      	str	r3, [r7, #20]
 800b316:	697a      	ldr	r2, [r7, #20]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	dbf0      	blt.n	800b300 <_read+0x12>
  }

  return len;
 800b31e:	687b      	ldr	r3, [r7, #4]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3718      	adds	r7, #24
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b334:	2300      	movs	r3, #0
 800b336:	617b      	str	r3, [r7, #20]
 800b338:	e009      	b.n	800b34e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	1c5a      	adds	r2, r3, #1
 800b33e:	60ba      	str	r2, [r7, #8]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	4618      	mov	r0, r3
 800b344:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	3301      	adds	r3, #1
 800b34c:	617b      	str	r3, [r7, #20]
 800b34e:	697a      	ldr	r2, [r7, #20]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	429a      	cmp	r2, r3
 800b354:	dbf1      	blt.n	800b33a <_write+0x12>
  }
  return len;
 800b356:	687b      	ldr	r3, [r7, #4]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3718      	adds	r7, #24
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <_close>:

int _close(int file)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b388:	605a      	str	r2, [r3, #4]
  return 0;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <_isatty>:

int _isatty(int file)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b3a0:	2301      	movs	r3, #1
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	370c      	adds	r7, #12
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b3ae:	b480      	push	{r7}
 800b3b0:	b085      	sub	sp, #20
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	60f8      	str	r0, [r7, #12]
 800b3b6:	60b9      	str	r1, [r7, #8]
 800b3b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b3d0:	4a14      	ldr	r2, [pc, #80]	@ (800b424 <_sbrk+0x5c>)
 800b3d2:	4b15      	ldr	r3, [pc, #84]	@ (800b428 <_sbrk+0x60>)
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b3dc:	4b13      	ldr	r3, [pc, #76]	@ (800b42c <_sbrk+0x64>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d102      	bne.n	800b3ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b3e4:	4b11      	ldr	r3, [pc, #68]	@ (800b42c <_sbrk+0x64>)
 800b3e6:	4a12      	ldr	r2, [pc, #72]	@ (800b430 <_sbrk+0x68>)
 800b3e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b3ea:	4b10      	ldr	r3, [pc, #64]	@ (800b42c <_sbrk+0x64>)
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	693a      	ldr	r2, [r7, #16]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d207      	bcs.n	800b408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b3f8:	f006 ff9a 	bl	8012330 <__errno>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	220c      	movs	r2, #12
 800b400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b402:	f04f 33ff 	mov.w	r3, #4294967295
 800b406:	e009      	b.n	800b41c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b408:	4b08      	ldr	r3, [pc, #32]	@ (800b42c <_sbrk+0x64>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b40e:	4b07      	ldr	r3, [pc, #28]	@ (800b42c <_sbrk+0x64>)
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4413      	add	r3, r2
 800b416:	4a05      	ldr	r2, [pc, #20]	@ (800b42c <_sbrk+0x64>)
 800b418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b41a:	68fb      	ldr	r3, [r7, #12]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3718      	adds	r7, #24
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	20020000 	.word	0x20020000
 800b428:	00000400 	.word	0x00000400
 800b42c:	200005c4 	.word	0x200005c4
 800b430:	20000c08 	.word	0x20000c08

0800b434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b434:	b480      	push	{r7}
 800b436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b438:	4b06      	ldr	r3, [pc, #24]	@ (800b454 <SystemInit+0x20>)
 800b43a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b43e:	4a05      	ldr	r2, [pc, #20]	@ (800b454 <SystemInit+0x20>)
 800b440:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b448:	bf00      	nop
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	e000ed00 	.word	0xe000ed00

0800b458 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08c      	sub	sp, #48	@ 0x30
 800b45c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800b45e:	f107 030c 	add.w	r3, r7, #12
 800b462:	2224      	movs	r2, #36	@ 0x24
 800b464:	2100      	movs	r1, #0
 800b466:	4618      	mov	r0, r3
 800b468:	f006 ff00 	bl	801226c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b46c:	1d3b      	adds	r3, r7, #4
 800b46e:	2200      	movs	r2, #0
 800b470:	601a      	str	r2, [r3, #0]
 800b472:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800b474:	4b22      	ldr	r3, [pc, #136]	@ (800b500 <MX_TIM1_Init+0xa8>)
 800b476:	4a23      	ldr	r2, [pc, #140]	@ (800b504 <MX_TIM1_Init+0xac>)
 800b478:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800b47a:	4b21      	ldr	r3, [pc, #132]	@ (800b500 <MX_TIM1_Init+0xa8>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b480:	4b1f      	ldr	r3, [pc, #124]	@ (800b500 <MX_TIM1_Init+0xa8>)
 800b482:	2200      	movs	r2, #0
 800b484:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800b486:	4b1e      	ldr	r3, [pc, #120]	@ (800b500 <MX_TIM1_Init+0xa8>)
 800b488:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b48c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b48e:	4b1c      	ldr	r3, [pc, #112]	@ (800b500 <MX_TIM1_Init+0xa8>)
 800b490:	2200      	movs	r2, #0
 800b492:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800b494:	4b1a      	ldr	r3, [pc, #104]	@ (800b500 <MX_TIM1_Init+0xa8>)
 800b496:	2200      	movs	r2, #0
 800b498:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b49a:	4b19      	ldr	r3, [pc, #100]	@ (800b500 <MX_TIM1_Init+0xa8>)
 800b49c:	2200      	movs	r2, #0
 800b49e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800b4b0:	230f      	movs	r3, #15
 800b4b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800b4c0:	230f      	movs	r3, #15
 800b4c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800b4c4:	f107 030c 	add.w	r3, r7, #12
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	480d      	ldr	r0, [pc, #52]	@ (800b500 <MX_TIM1_Init+0xa8>)
 800b4cc:	f004 f88c 	bl	800f5e8 <HAL_TIM_Encoder_Init>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d001      	beq.n	800b4da <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800b4d6:	f7fb fe3f 	bl	8007158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b4e2:	1d3b      	adds	r3, r7, #4
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4806      	ldr	r0, [pc, #24]	@ (800b500 <MX_TIM1_Init+0xa8>)
 800b4e8:	f004 fe58 	bl	801019c <HAL_TIMEx_MasterConfigSynchronization>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d001      	beq.n	800b4f6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800b4f2:	f7fb fe31 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800b4f6:	bf00      	nop
 800b4f8:	3730      	adds	r7, #48	@ 0x30
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	200005c8 	.word	0x200005c8
 800b504:	40010000 	.word	0x40010000

0800b508 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08c      	sub	sp, #48	@ 0x30
 800b50c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800b50e:	f107 030c 	add.w	r3, r7, #12
 800b512:	2224      	movs	r2, #36	@ 0x24
 800b514:	2100      	movs	r1, #0
 800b516:	4618      	mov	r0, r3
 800b518:	f006 fea8 	bl	801226c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b51c:	1d3b      	adds	r3, r7, #4
 800b51e:	2200      	movs	r2, #0
 800b520:	601a      	str	r2, [r3, #0]
 800b522:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b524:	4b21      	ldr	r3, [pc, #132]	@ (800b5ac <MX_TIM2_Init+0xa4>)
 800b526:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b52a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b52c:	4b1f      	ldr	r3, [pc, #124]	@ (800b5ac <MX_TIM2_Init+0xa4>)
 800b52e:	2200      	movs	r2, #0
 800b530:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b532:	4b1e      	ldr	r3, [pc, #120]	@ (800b5ac <MX_TIM2_Init+0xa4>)
 800b534:	2200      	movs	r2, #0
 800b536:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800b538:	4b1c      	ldr	r3, [pc, #112]	@ (800b5ac <MX_TIM2_Init+0xa4>)
 800b53a:	f04f 32ff 	mov.w	r2, #4294967295
 800b53e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b540:	4b1a      	ldr	r3, [pc, #104]	@ (800b5ac <MX_TIM2_Init+0xa4>)
 800b542:	2200      	movs	r2, #0
 800b544:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b546:	4b19      	ldr	r3, [pc, #100]	@ (800b5ac <MX_TIM2_Init+0xa4>)
 800b548:	2200      	movs	r2, #0
 800b54a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800b54c:	2301      	movs	r3, #1
 800b54e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800b550:	2300      	movs	r3, #0
 800b552:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800b554:	2301      	movs	r3, #1
 800b556:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800b558:	2300      	movs	r3, #0
 800b55a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800b55c:	230f      	movs	r3, #15
 800b55e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800b560:	2300      	movs	r3, #0
 800b562:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800b564:	2301      	movs	r3, #1
 800b566:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800b568:	2300      	movs	r3, #0
 800b56a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800b56c:	230f      	movs	r3, #15
 800b56e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800b570:	f107 030c 	add.w	r3, r7, #12
 800b574:	4619      	mov	r1, r3
 800b576:	480d      	ldr	r0, [pc, #52]	@ (800b5ac <MX_TIM2_Init+0xa4>)
 800b578:	f004 f836 	bl	800f5e8 <HAL_TIM_Encoder_Init>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d001      	beq.n	800b586 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800b582:	f7fb fde9 	bl	8007158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b586:	2300      	movs	r3, #0
 800b588:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b58a:	2300      	movs	r3, #0
 800b58c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b58e:	1d3b      	adds	r3, r7, #4
 800b590:	4619      	mov	r1, r3
 800b592:	4806      	ldr	r0, [pc, #24]	@ (800b5ac <MX_TIM2_Init+0xa4>)
 800b594:	f004 fe02 	bl	801019c <HAL_TIMEx_MasterConfigSynchronization>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d001      	beq.n	800b5a2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800b59e:	f7fb fddb 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800b5a2:	bf00      	nop
 800b5a4:	3730      	adds	r7, #48	@ 0x30
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	20000610 	.word	0x20000610

0800b5b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b08c      	sub	sp, #48	@ 0x30
 800b5b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800b5b6:	f107 030c 	add.w	r3, r7, #12
 800b5ba:	2224      	movs	r2, #36	@ 0x24
 800b5bc:	2100      	movs	r1, #0
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f006 fe54 	bl	801226c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b5c4:	1d3b      	adds	r3, r7, #4
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	601a      	str	r2, [r3, #0]
 800b5ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b5cc:	4b20      	ldr	r3, [pc, #128]	@ (800b650 <MX_TIM3_Init+0xa0>)
 800b5ce:	4a21      	ldr	r2, [pc, #132]	@ (800b654 <MX_TIM3_Init+0xa4>)
 800b5d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800b5d2:	4b1f      	ldr	r3, [pc, #124]	@ (800b650 <MX_TIM3_Init+0xa0>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b5d8:	4b1d      	ldr	r3, [pc, #116]	@ (800b650 <MX_TIM3_Init+0xa0>)
 800b5da:	2200      	movs	r2, #0
 800b5dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800b5de:	4b1c      	ldr	r3, [pc, #112]	@ (800b650 <MX_TIM3_Init+0xa0>)
 800b5e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b5e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b5e6:	4b1a      	ldr	r3, [pc, #104]	@ (800b650 <MX_TIM3_Init+0xa0>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b5ec:	4b18      	ldr	r3, [pc, #96]	@ (800b650 <MX_TIM3_Init+0xa0>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800b5fe:	2300      	movs	r3, #0
 800b600:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800b602:	230f      	movs	r3, #15
 800b604:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800b606:	2300      	movs	r3, #0
 800b608:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800b60a:	2301      	movs	r3, #1
 800b60c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800b60e:	2300      	movs	r3, #0
 800b610:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800b612:	230f      	movs	r3, #15
 800b614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800b616:	f107 030c 	add.w	r3, r7, #12
 800b61a:	4619      	mov	r1, r3
 800b61c:	480c      	ldr	r0, [pc, #48]	@ (800b650 <MX_TIM3_Init+0xa0>)
 800b61e:	f003 ffe3 	bl	800f5e8 <HAL_TIM_Encoder_Init>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d001      	beq.n	800b62c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800b628:	f7fb fd96 	bl	8007158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b62c:	2300      	movs	r3, #0
 800b62e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b630:	2300      	movs	r3, #0
 800b632:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b634:	1d3b      	adds	r3, r7, #4
 800b636:	4619      	mov	r1, r3
 800b638:	4805      	ldr	r0, [pc, #20]	@ (800b650 <MX_TIM3_Init+0xa0>)
 800b63a:	f004 fdaf 	bl	801019c <HAL_TIMEx_MasterConfigSynchronization>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800b644:	f7fb fd88 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800b648:	bf00      	nop
 800b64a:	3730      	adds	r7, #48	@ 0x30
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	20000658 	.word	0x20000658
 800b654:	40000400 	.word	0x40000400

0800b658 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b08c      	sub	sp, #48	@ 0x30
 800b65c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800b65e:	f107 030c 	add.w	r3, r7, #12
 800b662:	2224      	movs	r2, #36	@ 0x24
 800b664:	2100      	movs	r1, #0
 800b666:	4618      	mov	r0, r3
 800b668:	f006 fe00 	bl	801226c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b66c:	1d3b      	adds	r3, r7, #4
 800b66e:	2200      	movs	r2, #0
 800b670:	601a      	str	r2, [r3, #0]
 800b672:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b674:	4b20      	ldr	r3, [pc, #128]	@ (800b6f8 <MX_TIM4_Init+0xa0>)
 800b676:	4a21      	ldr	r2, [pc, #132]	@ (800b6fc <MX_TIM4_Init+0xa4>)
 800b678:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800b67a:	4b1f      	ldr	r3, [pc, #124]	@ (800b6f8 <MX_TIM4_Init+0xa0>)
 800b67c:	2200      	movs	r2, #0
 800b67e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b680:	4b1d      	ldr	r3, [pc, #116]	@ (800b6f8 <MX_TIM4_Init+0xa0>)
 800b682:	2200      	movs	r2, #0
 800b684:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800b686:	4b1c      	ldr	r3, [pc, #112]	@ (800b6f8 <MX_TIM4_Init+0xa0>)
 800b688:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b68c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b68e:	4b1a      	ldr	r3, [pc, #104]	@ (800b6f8 <MX_TIM4_Init+0xa0>)
 800b690:	2200      	movs	r2, #0
 800b692:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b694:	4b18      	ldr	r3, [pc, #96]	@ (800b6f8 <MX_TIM4_Init+0xa0>)
 800b696:	2200      	movs	r2, #0
 800b698:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800b69a:	2301      	movs	r3, #1
 800b69c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800b6aa:	230f      	movs	r3, #15
 800b6ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800b6be:	f107 030c 	add.w	r3, r7, #12
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	480c      	ldr	r0, [pc, #48]	@ (800b6f8 <MX_TIM4_Init+0xa0>)
 800b6c6:	f003 ff8f 	bl	800f5e8 <HAL_TIM_Encoder_Init>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d001      	beq.n	800b6d4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800b6d0:	f7fb fd42 	bl	8007158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b6dc:	1d3b      	adds	r3, r7, #4
 800b6de:	4619      	mov	r1, r3
 800b6e0:	4805      	ldr	r0, [pc, #20]	@ (800b6f8 <MX_TIM4_Init+0xa0>)
 800b6e2:	f004 fd5b 	bl	801019c <HAL_TIMEx_MasterConfigSynchronization>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d001      	beq.n	800b6f0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800b6ec:	f7fb fd34 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800b6f0:	bf00      	nop
 800b6f2:	3730      	adds	r7, #48	@ 0x30
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	200006a0 	.word	0x200006a0
 800b6fc:	40000800 	.word	0x40000800

0800b700 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b08e      	sub	sp, #56	@ 0x38
 800b704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b706:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b70a:	2200      	movs	r2, #0
 800b70c:	601a      	str	r2, [r3, #0]
 800b70e:	605a      	str	r2, [r3, #4]
 800b710:	609a      	str	r2, [r3, #8]
 800b712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b714:	f107 0320 	add.w	r3, r7, #32
 800b718:	2200      	movs	r2, #0
 800b71a:	601a      	str	r2, [r3, #0]
 800b71c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b71e:	1d3b      	adds	r3, r7, #4
 800b720:	2200      	movs	r2, #0
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	605a      	str	r2, [r3, #4]
 800b726:	609a      	str	r2, [r3, #8]
 800b728:	60da      	str	r2, [r3, #12]
 800b72a:	611a      	str	r2, [r3, #16]
 800b72c:	615a      	str	r2, [r3, #20]
 800b72e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800b730:	4b3d      	ldr	r3, [pc, #244]	@ (800b828 <MX_TIM5_Init+0x128>)
 800b732:	4a3e      	ldr	r2, [pc, #248]	@ (800b82c <MX_TIM5_Init+0x12c>)
 800b734:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 800b736:	4b3c      	ldr	r3, [pc, #240]	@ (800b828 <MX_TIM5_Init+0x128>)
 800b738:	2253      	movs	r2, #83	@ 0x53
 800b73a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b73c:	4b3a      	ldr	r3, [pc, #232]	@ (800b828 <MX_TIM5_Init+0x128>)
 800b73e:	2200      	movs	r2, #0
 800b740:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 800b742:	4b39      	ldr	r3, [pc, #228]	@ (800b828 <MX_TIM5_Init+0x128>)
 800b744:	f242 720f 	movw	r2, #9999	@ 0x270f
 800b748:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b74a:	4b37      	ldr	r3, [pc, #220]	@ (800b828 <MX_TIM5_Init+0x128>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b750:	4b35      	ldr	r3, [pc, #212]	@ (800b828 <MX_TIM5_Init+0x128>)
 800b752:	2200      	movs	r2, #0
 800b754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800b756:	4834      	ldr	r0, [pc, #208]	@ (800b828 <MX_TIM5_Init+0x128>)
 800b758:	f003 fd6c 	bl	800f234 <HAL_TIM_Base_Init>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d001      	beq.n	800b766 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800b762:	f7fb fcf9 	bl	8007158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b766:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b76a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800b76c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b770:	4619      	mov	r1, r3
 800b772:	482d      	ldr	r0, [pc, #180]	@ (800b828 <MX_TIM5_Init+0x128>)
 800b774:	f004 f92e 	bl	800f9d4 <HAL_TIM_ConfigClockSource>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800b77e:	f7fb fceb 	bl	8007158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800b782:	4829      	ldr	r0, [pc, #164]	@ (800b828 <MX_TIM5_Init+0x128>)
 800b784:	f003 fe0e 	bl	800f3a4 <HAL_TIM_PWM_Init>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d001      	beq.n	800b792 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800b78e:	f7fb fce3 	bl	8007158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b792:	2300      	movs	r3, #0
 800b794:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b796:	2300      	movs	r3, #0
 800b798:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800b79a:	f107 0320 	add.w	r3, r7, #32
 800b79e:	4619      	mov	r1, r3
 800b7a0:	4821      	ldr	r0, [pc, #132]	@ (800b828 <MX_TIM5_Init+0x128>)
 800b7a2:	f004 fcfb 	bl	801019c <HAL_TIMEx_MasterConfigSynchronization>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d001      	beq.n	800b7b0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800b7ac:	f7fb fcd4 	bl	8007158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b7b0:	2360      	movs	r3, #96	@ 0x60
 800b7b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b7c0:	1d3b      	adds	r3, r7, #4
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4818      	ldr	r0, [pc, #96]	@ (800b828 <MX_TIM5_Init+0x128>)
 800b7c8:	f004 f842 	bl	800f850 <HAL_TIM_PWM_ConfigChannel>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d001      	beq.n	800b7d6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800b7d2:	f7fb fcc1 	bl	8007158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b7d6:	1d3b      	adds	r3, r7, #4
 800b7d8:	2204      	movs	r2, #4
 800b7da:	4619      	mov	r1, r3
 800b7dc:	4812      	ldr	r0, [pc, #72]	@ (800b828 <MX_TIM5_Init+0x128>)
 800b7de:	f004 f837 	bl	800f850 <HAL_TIM_PWM_ConfigChannel>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d001      	beq.n	800b7ec <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 800b7e8:	f7fb fcb6 	bl	8007158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b7ec:	1d3b      	adds	r3, r7, #4
 800b7ee:	2208      	movs	r2, #8
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	480d      	ldr	r0, [pc, #52]	@ (800b828 <MX_TIM5_Init+0x128>)
 800b7f4:	f004 f82c 	bl	800f850 <HAL_TIM_PWM_ConfigChannel>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d001      	beq.n	800b802 <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 800b7fe:	f7fb fcab 	bl	8007158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b802:	1d3b      	adds	r3, r7, #4
 800b804:	220c      	movs	r2, #12
 800b806:	4619      	mov	r1, r3
 800b808:	4807      	ldr	r0, [pc, #28]	@ (800b828 <MX_TIM5_Init+0x128>)
 800b80a:	f004 f821 	bl	800f850 <HAL_TIM_PWM_ConfigChannel>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d001      	beq.n	800b818 <MX_TIM5_Init+0x118>
  {
    Error_Handler();
 800b814:	f7fb fca0 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800b818:	4803      	ldr	r0, [pc, #12]	@ (800b828 <MX_TIM5_Init+0x128>)
 800b81a:	f000 fb2b 	bl	800be74 <HAL_TIM_MspPostInit>

}
 800b81e:	bf00      	nop
 800b820:	3738      	adds	r7, #56	@ 0x38
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	200006e8 	.word	0x200006e8
 800b82c:	40000c00 	.word	0x40000c00

0800b830 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b836:	463b      	mov	r3, r7
 800b838:	2200      	movs	r2, #0
 800b83a:	601a      	str	r2, [r3, #0]
 800b83c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800b83e:	4b15      	ldr	r3, [pc, #84]	@ (800b894 <MX_TIM6_Init+0x64>)
 800b840:	4a15      	ldr	r2, [pc, #84]	@ (800b898 <MX_TIM6_Init+0x68>)
 800b842:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 800b844:	4b13      	ldr	r3, [pc, #76]	@ (800b894 <MX_TIM6_Init+0x64>)
 800b846:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800b84a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b84c:	4b11      	ldr	r3, [pc, #68]	@ (800b894 <MX_TIM6_Init+0x64>)
 800b84e:	2200      	movs	r2, #0
 800b850:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800b852:	4b10      	ldr	r3, [pc, #64]	@ (800b894 <MX_TIM6_Init+0x64>)
 800b854:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b858:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b85a:	4b0e      	ldr	r3, [pc, #56]	@ (800b894 <MX_TIM6_Init+0x64>)
 800b85c:	2200      	movs	r2, #0
 800b85e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b860:	480c      	ldr	r0, [pc, #48]	@ (800b894 <MX_TIM6_Init+0x64>)
 800b862:	f003 fce7 	bl	800f234 <HAL_TIM_Base_Init>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800b86c:	f7fb fc74 	bl	8007158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b870:	2300      	movs	r3, #0
 800b872:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b874:	2300      	movs	r3, #0
 800b876:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b878:	463b      	mov	r3, r7
 800b87a:	4619      	mov	r1, r3
 800b87c:	4805      	ldr	r0, [pc, #20]	@ (800b894 <MX_TIM6_Init+0x64>)
 800b87e:	f004 fc8d 	bl	801019c <HAL_TIMEx_MasterConfigSynchronization>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d001      	beq.n	800b88c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800b888:	f7fb fc66 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800b88c:	bf00      	nop
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	20000730 	.word	0x20000730
 800b898:	40001000 	.word	0x40001000

0800b89c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b096      	sub	sp, #88	@ 0x58
 800b8a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b8a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	605a      	str	r2, [r3, #4]
 800b8ac:	609a      	str	r2, [r3, #8]
 800b8ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b8b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b8ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8be:	2200      	movs	r2, #0
 800b8c0:	601a      	str	r2, [r3, #0]
 800b8c2:	605a      	str	r2, [r3, #4]
 800b8c4:	609a      	str	r2, [r3, #8]
 800b8c6:	60da      	str	r2, [r3, #12]
 800b8c8:	611a      	str	r2, [r3, #16]
 800b8ca:	615a      	str	r2, [r3, #20]
 800b8cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b8ce:	1d3b      	adds	r3, r7, #4
 800b8d0:	2220      	movs	r2, #32
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f006 fcc9 	bl	801226c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800b8da:	4b45      	ldr	r3, [pc, #276]	@ (800b9f0 <MX_TIM8_Init+0x154>)
 800b8dc:	4a45      	ldr	r2, [pc, #276]	@ (800b9f4 <MX_TIM8_Init+0x158>)
 800b8de:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800b8e0:	4b43      	ldr	r3, [pc, #268]	@ (800b9f0 <MX_TIM8_Init+0x154>)
 800b8e2:	22a7      	movs	r2, #167	@ 0xa7
 800b8e4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b8e6:	4b42      	ldr	r3, [pc, #264]	@ (800b9f0 <MX_TIM8_Init+0x154>)
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000-1;
 800b8ec:	4b40      	ldr	r3, [pc, #256]	@ (800b9f0 <MX_TIM8_Init+0x154>)
 800b8ee:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800b8f2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b8f4:	4b3e      	ldr	r3, [pc, #248]	@ (800b9f0 <MX_TIM8_Init+0x154>)
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800b8fa:	4b3d      	ldr	r3, [pc, #244]	@ (800b9f0 <MX_TIM8_Init+0x154>)
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b900:	4b3b      	ldr	r3, [pc, #236]	@ (800b9f0 <MX_TIM8_Init+0x154>)
 800b902:	2200      	movs	r2, #0
 800b904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800b906:	483a      	ldr	r0, [pc, #232]	@ (800b9f0 <MX_TIM8_Init+0x154>)
 800b908:	f003 fc94 	bl	800f234 <HAL_TIM_Base_Init>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d001      	beq.n	800b916 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800b912:	f7fb fc21 	bl	8007158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b916:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b91a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800b91c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b920:	4619      	mov	r1, r3
 800b922:	4833      	ldr	r0, [pc, #204]	@ (800b9f0 <MX_TIM8_Init+0x154>)
 800b924:	f004 f856 	bl	800f9d4 <HAL_TIM_ConfigClockSource>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800b92e:	f7fb fc13 	bl	8007158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800b932:	482f      	ldr	r0, [pc, #188]	@ (800b9f0 <MX_TIM8_Init+0x154>)
 800b934:	f003 fd36 	bl	800f3a4 <HAL_TIM_PWM_Init>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800b93e:	f7fb fc0b 	bl	8007158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b942:	2300      	movs	r3, #0
 800b944:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b946:	2300      	movs	r3, #0
 800b948:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800b94a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b94e:	4619      	mov	r1, r3
 800b950:	4827      	ldr	r0, [pc, #156]	@ (800b9f0 <MX_TIM8_Init+0x154>)
 800b952:	f004 fc23 	bl	801019c <HAL_TIMEx_MasterConfigSynchronization>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d001      	beq.n	800b960 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800b95c:	f7fb fbfc 	bl	8007158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b960:	2360      	movs	r3, #96	@ 0x60
 800b962:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1000;
 800b964:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b968:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b96a:	2300      	movs	r3, #0
 800b96c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b96e:	2300      	movs	r3, #0
 800b970:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b972:	2300      	movs	r3, #0
 800b974:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b976:	2300      	movs	r3, #0
 800b978:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b97a:	2300      	movs	r3, #0
 800b97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b97e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b982:	2200      	movs	r2, #0
 800b984:	4619      	mov	r1, r3
 800b986:	481a      	ldr	r0, [pc, #104]	@ (800b9f0 <MX_TIM8_Init+0x154>)
 800b988:	f003 ff62 	bl	800f850 <HAL_TIM_PWM_ConfigChannel>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800b992:	f7fb fbe1 	bl	8007158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b99a:	2204      	movs	r2, #4
 800b99c:	4619      	mov	r1, r3
 800b99e:	4814      	ldr	r0, [pc, #80]	@ (800b9f0 <MX_TIM8_Init+0x154>)
 800b9a0:	f003 ff56 	bl	800f850 <HAL_TIM_PWM_ConfigChannel>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d001      	beq.n	800b9ae <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 800b9aa:	f7fb fbd5 	bl	8007158 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b9c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b9c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800b9cc:	1d3b      	adds	r3, r7, #4
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	4807      	ldr	r0, [pc, #28]	@ (800b9f0 <MX_TIM8_Init+0x154>)
 800b9d2:	f004 fc5f 	bl	8010294 <HAL_TIMEx_ConfigBreakDeadTime>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 800b9dc:	f7fb fbbc 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800b9e0:	4803      	ldr	r0, [pc, #12]	@ (800b9f0 <MX_TIM8_Init+0x154>)
 800b9e2:	f000 fa47 	bl	800be74 <HAL_TIM_MspPostInit>

}
 800b9e6:	bf00      	nop
 800b9e8:	3758      	adds	r7, #88	@ 0x58
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	20000778 	.word	0x20000778
 800b9f4:	40010400 	.word	0x40010400

0800b9f8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b08c      	sub	sp, #48	@ 0x30
 800b9fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b9fe:	f107 0320 	add.w	r3, r7, #32
 800ba02:	2200      	movs	r2, #0
 800ba04:	601a      	str	r2, [r3, #0]
 800ba06:	605a      	str	r2, [r3, #4]
 800ba08:	609a      	str	r2, [r3, #8]
 800ba0a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ba0c:	1d3b      	adds	r3, r7, #4
 800ba0e:	2200      	movs	r2, #0
 800ba10:	601a      	str	r2, [r3, #0]
 800ba12:	605a      	str	r2, [r3, #4]
 800ba14:	609a      	str	r2, [r3, #8]
 800ba16:	60da      	str	r2, [r3, #12]
 800ba18:	611a      	str	r2, [r3, #16]
 800ba1a:	615a      	str	r2, [r3, #20]
 800ba1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800ba1e:	4b2b      	ldr	r3, [pc, #172]	@ (800bacc <MX_TIM9_Init+0xd4>)
 800ba20:	4a2b      	ldr	r2, [pc, #172]	@ (800bad0 <MX_TIM9_Init+0xd8>)
 800ba22:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 800ba24:	4b29      	ldr	r3, [pc, #164]	@ (800bacc <MX_TIM9_Init+0xd4>)
 800ba26:	22a7      	movs	r2, #167	@ 0xa7
 800ba28:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ba2a:	4b28      	ldr	r3, [pc, #160]	@ (800bacc <MX_TIM9_Init+0xd4>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 800ba30:	4b26      	ldr	r3, [pc, #152]	@ (800bacc <MX_TIM9_Init+0xd4>)
 800ba32:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800ba36:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ba38:	4b24      	ldr	r3, [pc, #144]	@ (800bacc <MX_TIM9_Init+0xd4>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ba3e:	4b23      	ldr	r3, [pc, #140]	@ (800bacc <MX_TIM9_Init+0xd4>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800ba44:	4821      	ldr	r0, [pc, #132]	@ (800bacc <MX_TIM9_Init+0xd4>)
 800ba46:	f003 fbf5 	bl	800f234 <HAL_TIM_Base_Init>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d001      	beq.n	800ba54 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800ba50:	f7fb fb82 	bl	8007158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ba54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ba58:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800ba5a:	f107 0320 	add.w	r3, r7, #32
 800ba5e:	4619      	mov	r1, r3
 800ba60:	481a      	ldr	r0, [pc, #104]	@ (800bacc <MX_TIM9_Init+0xd4>)
 800ba62:	f003 ffb7 	bl	800f9d4 <HAL_TIM_ConfigClockSource>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d001      	beq.n	800ba70 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800ba6c:	f7fb fb74 	bl	8007158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800ba70:	4816      	ldr	r0, [pc, #88]	@ (800bacc <MX_TIM9_Init+0xd4>)
 800ba72:	f003 fc97 	bl	800f3a4 <HAL_TIM_PWM_Init>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800ba7c:	f7fb fb6c 	bl	8007158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ba80:	2360      	movs	r3, #96	@ 0x60
 800ba82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800ba84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ba88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ba92:	1d3b      	adds	r3, r7, #4
 800ba94:	2200      	movs	r2, #0
 800ba96:	4619      	mov	r1, r3
 800ba98:	480c      	ldr	r0, [pc, #48]	@ (800bacc <MX_TIM9_Init+0xd4>)
 800ba9a:	f003 fed9 	bl	800f850 <HAL_TIM_PWM_ConfigChannel>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d001      	beq.n	800baa8 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 800baa4:	f7fb fb58 	bl	8007158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800baa8:	1d3b      	adds	r3, r7, #4
 800baaa:	2204      	movs	r2, #4
 800baac:	4619      	mov	r1, r3
 800baae:	4807      	ldr	r0, [pc, #28]	@ (800bacc <MX_TIM9_Init+0xd4>)
 800bab0:	f003 fece 	bl	800f850 <HAL_TIM_PWM_ConfigChannel>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 800baba:	f7fb fb4d 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800babe:	4803      	ldr	r0, [pc, #12]	@ (800bacc <MX_TIM9_Init+0xd4>)
 800bac0:	f000 f9d8 	bl	800be74 <HAL_TIM_MspPostInit>

}
 800bac4:	bf00      	nop
 800bac6:	3730      	adds	r7, #48	@ 0x30
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	200007c0 	.word	0x200007c0
 800bad0:	40014000 	.word	0x40014000

0800bad4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b088      	sub	sp, #32
 800bad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800bada:	1d3b      	adds	r3, r7, #4
 800badc:	2200      	movs	r2, #0
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	605a      	str	r2, [r3, #4]
 800bae2:	609a      	str	r2, [r3, #8]
 800bae4:	60da      	str	r2, [r3, #12]
 800bae6:	611a      	str	r2, [r3, #16]
 800bae8:	615a      	str	r2, [r3, #20]
 800baea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800baec:	4b1e      	ldr	r3, [pc, #120]	@ (800bb68 <MX_TIM10_Init+0x94>)
 800baee:	4a1f      	ldr	r2, [pc, #124]	@ (800bb6c <MX_TIM10_Init+0x98>)
 800baf0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 800baf2:	4b1d      	ldr	r3, [pc, #116]	@ (800bb68 <MX_TIM10_Init+0x94>)
 800baf4:	22a7      	movs	r2, #167	@ 0xa7
 800baf6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800baf8:	4b1b      	ldr	r3, [pc, #108]	@ (800bb68 <MX_TIM10_Init+0x94>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 20000-1;
 800bafe:	4b1a      	ldr	r3, [pc, #104]	@ (800bb68 <MX_TIM10_Init+0x94>)
 800bb00:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800bb04:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bb06:	4b18      	ldr	r3, [pc, #96]	@ (800bb68 <MX_TIM10_Init+0x94>)
 800bb08:	2200      	movs	r2, #0
 800bb0a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bb0c:	4b16      	ldr	r3, [pc, #88]	@ (800bb68 <MX_TIM10_Init+0x94>)
 800bb0e:	2200      	movs	r2, #0
 800bb10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800bb12:	4815      	ldr	r0, [pc, #84]	@ (800bb68 <MX_TIM10_Init+0x94>)
 800bb14:	f003 fb8e 	bl	800f234 <HAL_TIM_Base_Init>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800bb1e:	f7fb fb1b 	bl	8007158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800bb22:	4811      	ldr	r0, [pc, #68]	@ (800bb68 <MX_TIM10_Init+0x94>)
 800bb24:	f003 fc3e 	bl	800f3a4 <HAL_TIM_PWM_Init>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d001      	beq.n	800bb32 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800bb2e:	f7fb fb13 	bl	8007158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bb32:	2360      	movs	r3, #96	@ 0x60
 800bb34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800bb36:	2300      	movs	r3, #0
 800bb38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800bb42:	1d3b      	adds	r3, r7, #4
 800bb44:	2200      	movs	r2, #0
 800bb46:	4619      	mov	r1, r3
 800bb48:	4807      	ldr	r0, [pc, #28]	@ (800bb68 <MX_TIM10_Init+0x94>)
 800bb4a:	f003 fe81 	bl	800f850 <HAL_TIM_PWM_ConfigChannel>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800bb54:	f7fb fb00 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800bb58:	4803      	ldr	r0, [pc, #12]	@ (800bb68 <MX_TIM10_Init+0x94>)
 800bb5a:	f000 f98b 	bl	800be74 <HAL_TIM_MspPostInit>

}
 800bb5e:	bf00      	nop
 800bb60:	3720      	adds	r7, #32
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	20000808 	.word	0x20000808
 800bb6c:	40014400 	.word	0x40014400

0800bb70 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b090      	sub	sp, #64	@ 0x40
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	601a      	str	r2, [r3, #0]
 800bb80:	605a      	str	r2, [r3, #4]
 800bb82:	609a      	str	r2, [r3, #8]
 800bb84:	60da      	str	r2, [r3, #12]
 800bb86:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a74      	ldr	r2, [pc, #464]	@ (800bd60 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d12d      	bne.n	800bbee <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800bb92:	2300      	movs	r3, #0
 800bb94:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb96:	4b73      	ldr	r3, [pc, #460]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bb98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb9a:	4a72      	ldr	r2, [pc, #456]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bb9c:	f043 0301 	orr.w	r3, r3, #1
 800bba0:	6453      	str	r3, [r2, #68]	@ 0x44
 800bba2:	4b70      	ldr	r3, [pc, #448]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bba6:	f003 0301 	and.w	r3, r3, #1
 800bbaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bbac:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800bbae:	2300      	movs	r3, #0
 800bbb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbb2:	4b6c      	ldr	r3, [pc, #432]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bbb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbb6:	4a6b      	ldr	r2, [pc, #428]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bbb8:	f043 0310 	orr.w	r3, r3, #16
 800bbbc:	6313      	str	r3, [r2, #48]	@ 0x30
 800bbbe:	4b69      	ldr	r3, [pc, #420]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bbc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbc2:	f003 0310 	and.w	r3, r3, #16
 800bbc6:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M1_E1_Pin|M1_E2_Pin;
 800bbca:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800bbce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bbe0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	4860      	ldr	r0, [pc, #384]	@ (800bd68 <HAL_TIM_Encoder_MspInit+0x1f8>)
 800bbe8:	f001 fb42 	bl	800d270 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800bbec:	e0b3      	b.n	800bd56 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM2)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbf6:	d14a      	bne.n	800bc8e <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	623b      	str	r3, [r7, #32]
 800bbfc:	4b59      	ldr	r3, [pc, #356]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bbfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc00:	4a58      	ldr	r2, [pc, #352]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bc02:	f043 0301 	orr.w	r3, r3, #1
 800bc06:	6413      	str	r3, [r2, #64]	@ 0x40
 800bc08:	4b56      	ldr	r3, [pc, #344]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bc0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc0c:	f003 0301 	and.w	r3, r3, #1
 800bc10:	623b      	str	r3, [r7, #32]
 800bc12:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc14:	2300      	movs	r3, #0
 800bc16:	61fb      	str	r3, [r7, #28]
 800bc18:	4b52      	ldr	r3, [pc, #328]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bc1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc1c:	4a51      	ldr	r2, [pc, #324]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bc1e:	f043 0301 	orr.w	r3, r3, #1
 800bc22:	6313      	str	r3, [r2, #48]	@ 0x30
 800bc24:	4b4f      	ldr	r3, [pc, #316]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bc26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc28:	f003 0301 	and.w	r3, r3, #1
 800bc2c:	61fb      	str	r3, [r7, #28]
 800bc2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bc30:	2300      	movs	r3, #0
 800bc32:	61bb      	str	r3, [r7, #24]
 800bc34:	4b4b      	ldr	r3, [pc, #300]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bc36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc38:	4a4a      	ldr	r2, [pc, #296]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bc3a:	f043 0302 	orr.w	r3, r3, #2
 800bc3e:	6313      	str	r3, [r2, #48]	@ 0x30
 800bc40:	4b48      	ldr	r3, [pc, #288]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bc42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc44:	f003 0302 	and.w	r3, r3, #2
 800bc48:	61bb      	str	r3, [r7, #24]
 800bc4a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M4_E1_Pin;
 800bc4c:	2320      	movs	r3, #32
 800bc4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc50:	2302      	movs	r3, #2
 800bc52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc54:	2300      	movs	r3, #0
 800bc56:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M4_E1_GPIO_Port, &GPIO_InitStruct);
 800bc60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bc64:	4619      	mov	r1, r3
 800bc66:	4841      	ldr	r0, [pc, #260]	@ (800bd6c <HAL_TIM_Encoder_MspInit+0x1fc>)
 800bc68:	f001 fb02 	bl	800d270 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M4_E2_Pin;
 800bc6c:	2308      	movs	r3, #8
 800bc6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc70:	2302      	movs	r3, #2
 800bc72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc74:	2300      	movs	r3, #0
 800bc76:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M4_E2_GPIO_Port, &GPIO_InitStruct);
 800bc80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bc84:	4619      	mov	r1, r3
 800bc86:	483a      	ldr	r0, [pc, #232]	@ (800bd70 <HAL_TIM_Encoder_MspInit+0x200>)
 800bc88:	f001 faf2 	bl	800d270 <HAL_GPIO_Init>
}
 800bc8c:	e063      	b.n	800bd56 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM3)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a38      	ldr	r2, [pc, #224]	@ (800bd74 <HAL_TIM_Encoder_MspInit+0x204>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d12c      	bne.n	800bcf2 <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800bc98:	2300      	movs	r3, #0
 800bc9a:	617b      	str	r3, [r7, #20]
 800bc9c:	4b31      	ldr	r3, [pc, #196]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bc9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bca0:	4a30      	ldr	r2, [pc, #192]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bca2:	f043 0302 	orr.w	r3, r3, #2
 800bca6:	6413      	str	r3, [r2, #64]	@ 0x40
 800bca8:	4b2e      	ldr	r3, [pc, #184]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bcaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcac:	f003 0302 	and.w	r3, r3, #2
 800bcb0:	617b      	str	r3, [r7, #20]
 800bcb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	613b      	str	r3, [r7, #16]
 800bcb8:	4b2a      	ldr	r3, [pc, #168]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bcba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcbc:	4a29      	ldr	r2, [pc, #164]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bcbe:	f043 0301 	orr.w	r3, r3, #1
 800bcc2:	6313      	str	r3, [r2, #48]	@ 0x30
 800bcc4:	4b27      	ldr	r3, [pc, #156]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bcc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcc8:	f003 0301 	and.w	r3, r3, #1
 800bccc:	613b      	str	r3, [r7, #16]
 800bcce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_E1_Pin|M3_E2_Pin;
 800bcd0:	23c0      	movs	r3, #192	@ 0xc0
 800bcd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800bce0:	2302      	movs	r3, #2
 800bce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bce4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bce8:	4619      	mov	r1, r3
 800bcea:	4820      	ldr	r0, [pc, #128]	@ (800bd6c <HAL_TIM_Encoder_MspInit+0x1fc>)
 800bcec:	f001 fac0 	bl	800d270 <HAL_GPIO_Init>
}
 800bcf0:	e031      	b.n	800bd56 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM4)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a20      	ldr	r2, [pc, #128]	@ (800bd78 <HAL_TIM_Encoder_MspInit+0x208>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d12c      	bne.n	800bd56 <HAL_TIM_Encoder_MspInit+0x1e6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	60fb      	str	r3, [r7, #12]
 800bd00:	4b18      	ldr	r3, [pc, #96]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bd02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd04:	4a17      	ldr	r2, [pc, #92]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bd06:	f043 0304 	orr.w	r3, r3, #4
 800bd0a:	6413      	str	r3, [r2, #64]	@ 0x40
 800bd0c:	4b15      	ldr	r3, [pc, #84]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bd0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd10:	f003 0304 	and.w	r3, r3, #4
 800bd14:	60fb      	str	r3, [r7, #12]
 800bd16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800bd18:	2300      	movs	r3, #0
 800bd1a:	60bb      	str	r3, [r7, #8]
 800bd1c:	4b11      	ldr	r3, [pc, #68]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bd1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd20:	4a10      	ldr	r2, [pc, #64]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bd22:	f043 0308 	orr.w	r3, r3, #8
 800bd26:	6313      	str	r3, [r2, #48]	@ 0x30
 800bd28:	4b0e      	ldr	r3, [pc, #56]	@ (800bd64 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800bd2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd2c:	f003 0308 	and.w	r3, r3, #8
 800bd30:	60bb      	str	r3, [r7, #8]
 800bd32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M2_E1_Pin|M2_E2_Pin;
 800bd34:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800bd38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd3a:	2302      	movs	r3, #2
 800bd3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd42:	2300      	movs	r3, #0
 800bd44:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800bd46:	2302      	movs	r3, #2
 800bd48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bd4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bd4e:	4619      	mov	r1, r3
 800bd50:	480a      	ldr	r0, [pc, #40]	@ (800bd7c <HAL_TIM_Encoder_MspInit+0x20c>)
 800bd52:	f001 fa8d 	bl	800d270 <HAL_GPIO_Init>
}
 800bd56:	bf00      	nop
 800bd58:	3740      	adds	r7, #64	@ 0x40
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	40010000 	.word	0x40010000
 800bd64:	40023800 	.word	0x40023800
 800bd68:	40021000 	.word	0x40021000
 800bd6c:	40020000 	.word	0x40020000
 800bd70:	40020400 	.word	0x40020400
 800bd74:	40000400 	.word	0x40000400
 800bd78:	40000800 	.word	0x40000800
 800bd7c:	40020c00 	.word	0x40020c00

0800bd80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b089      	sub	sp, #36	@ 0x24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a33      	ldr	r2, [pc, #204]	@ (800be5c <HAL_TIM_Base_MspInit+0xdc>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d10e      	bne.n	800bdb0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800bd92:	2300      	movs	r3, #0
 800bd94:	61fb      	str	r3, [r7, #28]
 800bd96:	4b32      	ldr	r3, [pc, #200]	@ (800be60 <HAL_TIM_Base_MspInit+0xe0>)
 800bd98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd9a:	4a31      	ldr	r2, [pc, #196]	@ (800be60 <HAL_TIM_Base_MspInit+0xe0>)
 800bd9c:	f043 0308 	orr.w	r3, r3, #8
 800bda0:	6413      	str	r3, [r2, #64]	@ 0x40
 800bda2:	4b2f      	ldr	r3, [pc, #188]	@ (800be60 <HAL_TIM_Base_MspInit+0xe0>)
 800bda4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bda6:	f003 0308 	and.w	r3, r3, #8
 800bdaa:	61fb      	str	r3, [r7, #28]
 800bdac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800bdae:	e04e      	b.n	800be4e <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM6)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a2b      	ldr	r2, [pc, #172]	@ (800be64 <HAL_TIM_Base_MspInit+0xe4>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d10e      	bne.n	800bdd8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800bdba:	2300      	movs	r3, #0
 800bdbc:	61bb      	str	r3, [r7, #24]
 800bdbe:	4b28      	ldr	r3, [pc, #160]	@ (800be60 <HAL_TIM_Base_MspInit+0xe0>)
 800bdc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdc2:	4a27      	ldr	r2, [pc, #156]	@ (800be60 <HAL_TIM_Base_MspInit+0xe0>)
 800bdc4:	f043 0310 	orr.w	r3, r3, #16
 800bdc8:	6413      	str	r3, [r2, #64]	@ 0x40
 800bdca:	4b25      	ldr	r3, [pc, #148]	@ (800be60 <HAL_TIM_Base_MspInit+0xe0>)
 800bdcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdce:	f003 0310 	and.w	r3, r3, #16
 800bdd2:	61bb      	str	r3, [r7, #24]
 800bdd4:	69bb      	ldr	r3, [r7, #24]
}
 800bdd6:	e03a      	b.n	800be4e <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM8)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a22      	ldr	r2, [pc, #136]	@ (800be68 <HAL_TIM_Base_MspInit+0xe8>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d10e      	bne.n	800be00 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800bde2:	2300      	movs	r3, #0
 800bde4:	617b      	str	r3, [r7, #20]
 800bde6:	4b1e      	ldr	r3, [pc, #120]	@ (800be60 <HAL_TIM_Base_MspInit+0xe0>)
 800bde8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdea:	4a1d      	ldr	r2, [pc, #116]	@ (800be60 <HAL_TIM_Base_MspInit+0xe0>)
 800bdec:	f043 0302 	orr.w	r3, r3, #2
 800bdf0:	6453      	str	r3, [r2, #68]	@ 0x44
 800bdf2:	4b1b      	ldr	r3, [pc, #108]	@ (800be60 <HAL_TIM_Base_MspInit+0xe0>)
 800bdf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdf6:	f003 0302 	and.w	r3, r3, #2
 800bdfa:	617b      	str	r3, [r7, #20]
 800bdfc:	697b      	ldr	r3, [r7, #20]
}
 800bdfe:	e026      	b.n	800be4e <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM9)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a19      	ldr	r2, [pc, #100]	@ (800be6c <HAL_TIM_Base_MspInit+0xec>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d10e      	bne.n	800be28 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800be0a:	2300      	movs	r3, #0
 800be0c:	613b      	str	r3, [r7, #16]
 800be0e:	4b14      	ldr	r3, [pc, #80]	@ (800be60 <HAL_TIM_Base_MspInit+0xe0>)
 800be10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be12:	4a13      	ldr	r2, [pc, #76]	@ (800be60 <HAL_TIM_Base_MspInit+0xe0>)
 800be14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be18:	6453      	str	r3, [r2, #68]	@ 0x44
 800be1a:	4b11      	ldr	r3, [pc, #68]	@ (800be60 <HAL_TIM_Base_MspInit+0xe0>)
 800be1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be22:	613b      	str	r3, [r7, #16]
 800be24:	693b      	ldr	r3, [r7, #16]
}
 800be26:	e012      	b.n	800be4e <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM10)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a10      	ldr	r2, [pc, #64]	@ (800be70 <HAL_TIM_Base_MspInit+0xf0>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d10d      	bne.n	800be4e <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800be32:	2300      	movs	r3, #0
 800be34:	60fb      	str	r3, [r7, #12]
 800be36:	4b0a      	ldr	r3, [pc, #40]	@ (800be60 <HAL_TIM_Base_MspInit+0xe0>)
 800be38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be3a:	4a09      	ldr	r2, [pc, #36]	@ (800be60 <HAL_TIM_Base_MspInit+0xe0>)
 800be3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be40:	6453      	str	r3, [r2, #68]	@ 0x44
 800be42:	4b07      	ldr	r3, [pc, #28]	@ (800be60 <HAL_TIM_Base_MspInit+0xe0>)
 800be44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be4a:	60fb      	str	r3, [r7, #12]
 800be4c:	68fb      	ldr	r3, [r7, #12]
}
 800be4e:	bf00      	nop
 800be50:	3724      	adds	r7, #36	@ 0x24
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop
 800be5c:	40000c00 	.word	0x40000c00
 800be60:	40023800 	.word	0x40023800
 800be64:	40001000 	.word	0x40001000
 800be68:	40010400 	.word	0x40010400
 800be6c:	40014000 	.word	0x40014000
 800be70:	40014400 	.word	0x40014400

0800be74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b08c      	sub	sp, #48	@ 0x30
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be7c:	f107 031c 	add.w	r3, r7, #28
 800be80:	2200      	movs	r2, #0
 800be82:	601a      	str	r2, [r3, #0]
 800be84:	605a      	str	r2, [r3, #4]
 800be86:	609a      	str	r2, [r3, #8]
 800be88:	60da      	str	r2, [r3, #12]
 800be8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a48      	ldr	r2, [pc, #288]	@ (800bfb4 <HAL_TIM_MspPostInit+0x140>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d11e      	bne.n	800bed4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be96:	2300      	movs	r3, #0
 800be98:	61bb      	str	r3, [r7, #24]
 800be9a:	4b47      	ldr	r3, [pc, #284]	@ (800bfb8 <HAL_TIM_MspPostInit+0x144>)
 800be9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be9e:	4a46      	ldr	r2, [pc, #280]	@ (800bfb8 <HAL_TIM_MspPostInit+0x144>)
 800bea0:	f043 0301 	orr.w	r3, r3, #1
 800bea4:	6313      	str	r3, [r2, #48]	@ 0x30
 800bea6:	4b44      	ldr	r3, [pc, #272]	@ (800bfb8 <HAL_TIM_MspPostInit+0x144>)
 800bea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beaa:	f003 0301 	and.w	r3, r3, #1
 800beae:	61bb      	str	r3, [r7, #24]
 800beb0:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin|M4_PWM_Pin;
 800beb2:	230f      	movs	r3, #15
 800beb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800beb6:	2302      	movs	r3, #2
 800beb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800beba:	2300      	movs	r3, #0
 800bebc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bebe:	2300      	movs	r3, #0
 800bec0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800bec2:	2302      	movs	r3, #2
 800bec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bec6:	f107 031c 	add.w	r3, r7, #28
 800beca:	4619      	mov	r1, r3
 800becc:	483b      	ldr	r0, [pc, #236]	@ (800bfbc <HAL_TIM_MspPostInit+0x148>)
 800bece:	f001 f9cf 	bl	800d270 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800bed2:	e06a      	b.n	800bfaa <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM8)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a39      	ldr	r2, [pc, #228]	@ (800bfc0 <HAL_TIM_MspPostInit+0x14c>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d11e      	bne.n	800bf1c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bede:	2300      	movs	r3, #0
 800bee0:	617b      	str	r3, [r7, #20]
 800bee2:	4b35      	ldr	r3, [pc, #212]	@ (800bfb8 <HAL_TIM_MspPostInit+0x144>)
 800bee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bee6:	4a34      	ldr	r2, [pc, #208]	@ (800bfb8 <HAL_TIM_MspPostInit+0x144>)
 800bee8:	f043 0304 	orr.w	r3, r3, #4
 800beec:	6313      	str	r3, [r2, #48]	@ 0x30
 800beee:	4b32      	ldr	r3, [pc, #200]	@ (800bfb8 <HAL_TIM_MspPostInit+0x144>)
 800bef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bef2:	f003 0304 	and.w	r3, r3, #4
 800bef6:	617b      	str	r3, [r7, #20]
 800bef8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Servo_1_Pin|Servo_2_Pin;
 800befa:	23c0      	movs	r3, #192	@ 0xc0
 800befc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800befe:	2302      	movs	r3, #2
 800bf00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf02:	2300      	movs	r3, #0
 800bf04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf06:	2300      	movs	r3, #0
 800bf08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bf0e:	f107 031c 	add.w	r3, r7, #28
 800bf12:	4619      	mov	r1, r3
 800bf14:	482b      	ldr	r0, [pc, #172]	@ (800bfc4 <HAL_TIM_MspPostInit+0x150>)
 800bf16:	f001 f9ab 	bl	800d270 <HAL_GPIO_Init>
}
 800bf1a:	e046      	b.n	800bfaa <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM9)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a29      	ldr	r2, [pc, #164]	@ (800bfc8 <HAL_TIM_MspPostInit+0x154>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d11e      	bne.n	800bf64 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800bf26:	2300      	movs	r3, #0
 800bf28:	613b      	str	r3, [r7, #16]
 800bf2a:	4b23      	ldr	r3, [pc, #140]	@ (800bfb8 <HAL_TIM_MspPostInit+0x144>)
 800bf2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf2e:	4a22      	ldr	r2, [pc, #136]	@ (800bfb8 <HAL_TIM_MspPostInit+0x144>)
 800bf30:	f043 0310 	orr.w	r3, r3, #16
 800bf34:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf36:	4b20      	ldr	r3, [pc, #128]	@ (800bfb8 <HAL_TIM_MspPostInit+0x144>)
 800bf38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf3a:	f003 0310 	and.w	r3, r3, #16
 800bf3e:	613b      	str	r3, [r7, #16]
 800bf40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo_3_Pin|Servo_4_Pin;
 800bf42:	2360      	movs	r3, #96	@ 0x60
 800bf44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf46:	2302      	movs	r3, #2
 800bf48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800bf52:	2303      	movs	r3, #3
 800bf54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bf56:	f107 031c 	add.w	r3, r7, #28
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	481b      	ldr	r0, [pc, #108]	@ (800bfcc <HAL_TIM_MspPostInit+0x158>)
 800bf5e:	f001 f987 	bl	800d270 <HAL_GPIO_Init>
}
 800bf62:	e022      	b.n	800bfaa <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM10)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a19      	ldr	r2, [pc, #100]	@ (800bfd0 <HAL_TIM_MspPostInit+0x15c>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d11d      	bne.n	800bfaa <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800bf6e:	2300      	movs	r3, #0
 800bf70:	60fb      	str	r3, [r7, #12]
 800bf72:	4b11      	ldr	r3, [pc, #68]	@ (800bfb8 <HAL_TIM_MspPostInit+0x144>)
 800bf74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf76:	4a10      	ldr	r2, [pc, #64]	@ (800bfb8 <HAL_TIM_MspPostInit+0x144>)
 800bf78:	f043 0320 	orr.w	r3, r3, #32
 800bf7c:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf7e:	4b0e      	ldr	r3, [pc, #56]	@ (800bfb8 <HAL_TIM_MspPostInit+0x144>)
 800bf80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf82:	f003 0320 	and.w	r3, r3, #32
 800bf86:	60fb      	str	r3, [r7, #12]
 800bf88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_5_Pin;
 800bf8a:	2340      	movs	r3, #64	@ 0x40
 800bf8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf8e:	2302      	movs	r3, #2
 800bf90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf92:	2300      	movs	r3, #0
 800bf94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf96:	2300      	movs	r3, #0
 800bf98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Servo_5_GPIO_Port, &GPIO_InitStruct);
 800bf9e:	f107 031c 	add.w	r3, r7, #28
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	480b      	ldr	r0, [pc, #44]	@ (800bfd4 <HAL_TIM_MspPostInit+0x160>)
 800bfa6:	f001 f963 	bl	800d270 <HAL_GPIO_Init>
}
 800bfaa:	bf00      	nop
 800bfac:	3730      	adds	r7, #48	@ 0x30
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	40000c00 	.word	0x40000c00
 800bfb8:	40023800 	.word	0x40023800
 800bfbc:	40020000 	.word	0x40020000
 800bfc0:	40010400 	.word	0x40010400
 800bfc4:	40020800 	.word	0x40020800
 800bfc8:	40014000 	.word	0x40014000
 800bfcc:	40021000 	.word	0x40021000
 800bfd0:	40014400 	.word	0x40014400
 800bfd4:	40021400 	.word	0x40021400

0800bfd8 <get_us_timestamp>:
// 距离滤波缓冲区
static float distance_buffer[MAX_ULTRASONIC_SENSORS][FILTER_SAMPLES] = {0};
static uint8_t buffer_index[MAX_ULTRASONIC_SENSORS] = {0};

// 获取微秒级时间戳
static uint32_t get_us_timestamp(void) {
 800bfd8:	b590      	push	{r4, r7, lr}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
    // 使用SysTick计数器获取微秒级时间戳
    uint32_t ticks = SysTick->VAL;
 800bfde:	4b0b      	ldr	r3, [pc, #44]	@ (800c00c <get_us_timestamp+0x34>)
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	60fb      	str	r3, [r7, #12]
    uint32_t ticks_per_us = SYSCLK_FREQ / 1000000;
 800bfe4:	23a8      	movs	r3, #168	@ 0xa8
 800bfe6:	60bb      	str	r3, [r7, #8]
    uint32_t us = (ticks / ticks_per_us) + (HAL_GetTick() * 1000);
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	fbb2 f4f3 	udiv	r4, r2, r3
 800bff0:	f000 ff6a 	bl	800cec8 <HAL_GetTick>
 800bff4:	4603      	mov	r3, r0
 800bff6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bffa:	fb02 f303 	mul.w	r3, r2, r3
 800bffe:	4423      	add	r3, r4
 800c000:	607b      	str	r3, [r7, #4]
    return us;
 800c002:	687b      	ldr	r3, [r7, #4]
}
 800c004:	4618      	mov	r0, r3
 800c006:	3714      	adds	r7, #20
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd90      	pop	{r4, r7, pc}
 800c00c:	e000e010 	.word	0xe000e010

0800c010 <HAL_GPIO_EXTI_Callback>:
            break;
    }
}

// Echo中断回调
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800c010:	b580      	push	{r7, lr}
 800c012:	b090      	sub	sp, #64	@ 0x40
 800c014:	af00      	add	r7, sp, #0
 800c016:	4603      	mov	r3, r0
 800c018:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < sensor_count; i++) {
 800c01a:	2300      	movs	r3, #0
 800c01c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c020:	e0ee      	b.n	800c200 <HAL_GPIO_EXTI_Callback+0x1f0>
        UltrasonicSensor* s = active_sensors[i];
 800c022:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c026:	4a7c      	ldr	r2, [pc, #496]	@ (800c218 <HAL_GPIO_EXTI_Callback+0x208>)
 800c028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c02c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        
        if (GPIO_Pin == s->echo_pin) {
 800c02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c030:	899b      	ldrh	r3, [r3, #12]
 800c032:	88fa      	ldrh	r2, [r7, #6]
 800c034:	429a      	cmp	r2, r3
 800c036:	f040 80de 	bne.w	800c1f6 <HAL_GPIO_EXTI_Callback+0x1e6>
            if (HAL_GPIO_ReadPin(s->echo_port, s->echo_pin)) {
 800c03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c03c:	689a      	ldr	r2, [r3, #8]
 800c03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c040:	899b      	ldrh	r3, [r3, #12]
 800c042:	4619      	mov	r1, r3
 800c044:	4610      	mov	r0, r2
 800c046:	f001 faaf 	bl	800d5a8 <HAL_GPIO_ReadPin>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d005      	beq.n	800c05c <HAL_GPIO_EXTI_Callback+0x4c>
                // 上升沿，记录开始时间（微秒级）
                s->pulse_start = get_us_timestamp();
 800c050:	f7ff ffc2 	bl	800bfd8 <get_us_timestamp>
 800c054:	4602      	mov	r2, r0
 800c056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c058:	615a      	str	r2, [r3, #20]
 800c05a:	e0cc      	b.n	800c1f6 <HAL_GPIO_EXTI_Callback+0x1e6>
            } else {
                // 下降沿，计算时间（微秒级）
                uint32_t end_time = get_us_timestamp();
 800c05c:	f7ff ffbc 	bl	800bfd8 <get_us_timestamp>
 800c060:	62b8      	str	r0, [r7, #40]	@ 0x28
                uint32_t duration_us = end_time - s->pulse_start;
 800c062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c064:	695b      	ldr	r3, [r3, #20]
 800c066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	627b      	str	r3, [r7, #36]	@ 0x24
                
                // 计算距离（厘米）：声速340m/s = 0.034cm/μs
                float raw_distance = (duration_us * 0.034f) / 2.0f;
 800c06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06e:	ee07 3a90 	vmov	s15, r3
 800c072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c076:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800c21c <HAL_GPIO_EXTI_Callback+0x20c>
 800c07a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c07e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c086:	edc7 7a08 	vstr	s15, [r7, #32]
                
                // 检查距离是否在有效范围内
                if (raw_distance >= MIN_VALID_DISTANCE && raw_distance <= MAX_VALID_DISTANCE) {
 800c08a:	edd7 7a08 	vldr	s15, [r7, #32]
 800c08e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800c092:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c09a:	f2c0 8091 	blt.w	800c1c0 <HAL_GPIO_EXTI_Callback+0x1b0>
 800c09e:	edd7 7a08 	vldr	s15, [r7, #32]
 800c0a2:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800c220 <HAL_GPIO_EXTI_Callback+0x210>
 800c0a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ae:	f200 8087 	bhi.w	800c1c0 <HAL_GPIO_EXTI_Callback+0x1b0>
                    // 更新滤波缓冲区
                    distance_buffer[i][buffer_index[i]] = raw_distance;
 800c0b2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800c0b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c0ba:	495a      	ldr	r1, [pc, #360]	@ (800c224 <HAL_GPIO_EXTI_Callback+0x214>)
 800c0bc:	5ccb      	ldrb	r3, [r1, r3]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	4959      	ldr	r1, [pc, #356]	@ (800c228 <HAL_GPIO_EXTI_Callback+0x218>)
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	4413      	add	r3, r2
 800c0c8:	4403      	add	r3, r0
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	440b      	add	r3, r1
 800c0ce:	6a3a      	ldr	r2, [r7, #32]
 800c0d0:	601a      	str	r2, [r3, #0]
                    buffer_index[i] = (buffer_index[i] + 1) % FILTER_SAMPLES;
 800c0d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c0d6:	4a53      	ldr	r2, [pc, #332]	@ (800c224 <HAL_GPIO_EXTI_Callback+0x214>)
 800c0d8:	5cd3      	ldrb	r3, [r2, r3]
 800c0da:	1c5a      	adds	r2, r3, #1
 800c0dc:	4b53      	ldr	r3, [pc, #332]	@ (800c22c <HAL_GPIO_EXTI_Callback+0x21c>)
 800c0de:	fb83 1302 	smull	r1, r3, r3, r2
 800c0e2:	1059      	asrs	r1, r3, #1
 800c0e4:	17d3      	asrs	r3, r2, #31
 800c0e6:	1ac9      	subs	r1, r1, r3
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	440b      	add	r3, r1
 800c0ee:	1ad1      	subs	r1, r2, r3
 800c0f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c0f4:	b2c9      	uxtb	r1, r1
 800c0f6:	4a4b      	ldr	r2, [pc, #300]	@ (800c224 <HAL_GPIO_EXTI_Callback+0x214>)
 800c0f8:	54d1      	strb	r1, [r2, r3]
                    
                    // 计算中值滤波
                    float temp_buffer[FILTER_SAMPLES];
                    for (int j = 0; j < FILTER_SAMPLES; j++) {
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c0fe:	e013      	b.n	800c128 <HAL_GPIO_EXTI_Callback+0x118>
                        temp_buffer[j] = distance_buffer[i][j];
 800c100:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800c104:	4948      	ldr	r1, [pc, #288]	@ (800c228 <HAL_GPIO_EXTI_Callback+0x218>)
 800c106:	4613      	mov	r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	4413      	add	r3, r2
 800c10c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c10e:	4413      	add	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	440b      	add	r3, r1
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	3340      	adds	r3, #64	@ 0x40
 800c11c:	443b      	add	r3, r7
 800c11e:	3b38      	subs	r3, #56	@ 0x38
 800c120:	601a      	str	r2, [r3, #0]
                    for (int j = 0; j < FILTER_SAMPLES; j++) {
 800c122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c124:	3301      	adds	r3, #1
 800c126:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c12a:	2b04      	cmp	r3, #4
 800c12c:	dde8      	ble.n	800c100 <HAL_GPIO_EXTI_Callback+0xf0>
                    }
                    
                    // 简单冒泡排序
                    for (int j = 0; j < FILTER_SAMPLES - 1; j++) {
 800c12e:	2300      	movs	r3, #0
 800c130:	637b      	str	r3, [r7, #52]	@ 0x34
 800c132:	e03e      	b.n	800c1b2 <HAL_GPIO_EXTI_Callback+0x1a2>
                        for (int k = 0; k < FILTER_SAMPLES - j - 1; k++) {
 800c134:	2300      	movs	r3, #0
 800c136:	633b      	str	r3, [r7, #48]	@ 0x30
 800c138:	e032      	b.n	800c1a0 <HAL_GPIO_EXTI_Callback+0x190>
                            if (temp_buffer[k] > temp_buffer[k + 1]) {
 800c13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	3340      	adds	r3, #64	@ 0x40
 800c140:	443b      	add	r3, r7
 800c142:	3b38      	subs	r3, #56	@ 0x38
 800c144:	ed93 7a00 	vldr	s14, [r3]
 800c148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c14a:	3301      	adds	r3, #1
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	3340      	adds	r3, #64	@ 0x40
 800c150:	443b      	add	r3, r7
 800c152:	3b38      	subs	r3, #56	@ 0x38
 800c154:	edd3 7a00 	vldr	s15, [r3]
 800c158:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c160:	dd1b      	ble.n	800c19a <HAL_GPIO_EXTI_Callback+0x18a>
                                float temp = temp_buffer[k];
 800c162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	3340      	adds	r3, #64	@ 0x40
 800c168:	443b      	add	r3, r7
 800c16a:	3b38      	subs	r3, #56	@ 0x38
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	61fb      	str	r3, [r7, #28]
                                temp_buffer[k] = temp_buffer[k + 1];
 800c170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c172:	3301      	adds	r3, #1
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	3340      	adds	r3, #64	@ 0x40
 800c178:	443b      	add	r3, r7
 800c17a:	3b38      	subs	r3, #56	@ 0x38
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	3340      	adds	r3, #64	@ 0x40
 800c184:	443b      	add	r3, r7
 800c186:	3b38      	subs	r3, #56	@ 0x38
 800c188:	601a      	str	r2, [r3, #0]
                                temp_buffer[k + 1] = temp;
 800c18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c18c:	3301      	adds	r3, #1
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	3340      	adds	r3, #64	@ 0x40
 800c192:	443b      	add	r3, r7
 800c194:	3b38      	subs	r3, #56	@ 0x38
 800c196:	69fa      	ldr	r2, [r7, #28]
 800c198:	601a      	str	r2, [r3, #0]
                        for (int k = 0; k < FILTER_SAMPLES - j - 1; k++) {
 800c19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c19c:	3301      	adds	r3, #1
 800c19e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c1a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1a2:	f1c3 0304 	rsb	r3, r3, #4
 800c1a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	dbc6      	blt.n	800c13a <HAL_GPIO_EXTI_Callback+0x12a>
                    for (int j = 0; j < FILTER_SAMPLES - 1; j++) {
 800c1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1b4:	2b03      	cmp	r3, #3
 800c1b6:	ddbd      	ble.n	800c134 <HAL_GPIO_EXTI_Callback+0x124>
                            }
                        }
                    }
                    
                    // 取中值
                    s->distance = temp_buffer[FILTER_SAMPLES / 2];
 800c1b8:	693a      	ldr	r2, [r7, #16]
 800c1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1bc:	619a      	str	r2, [r3, #24]
                if (raw_distance >= MIN_VALID_DISTANCE && raw_distance <= MAX_VALID_DISTANCE) {
 800c1be:	e017      	b.n	800c1f0 <HAL_GPIO_EXTI_Callback+0x1e0>
                } else {
                    // 距离无效，保持上一次的有效值
                    // 如果所有值都无效，则设为0
                    if (s->distance < MIN_VALID_DISTANCE || s->distance > MAX_VALID_DISTANCE) {
 800c1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1c2:	edd3 7a06 	vldr	s15, [r3, #24]
 800c1c6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800c1ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d2:	d409      	bmi.n	800c1e8 <HAL_GPIO_EXTI_Callback+0x1d8>
 800c1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1d6:	edd3 7a06 	vldr	s15, [r3, #24]
 800c1da:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800c220 <HAL_GPIO_EXTI_Callback+0x210>
 800c1de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e6:	dd03      	ble.n	800c1f0 <HAL_GPIO_EXTI_Callback+0x1e0>
                        s->distance = 0.0f;
 800c1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1ea:	f04f 0200 	mov.w	r2, #0
 800c1ee:	619a      	str	r2, [r3, #24]
                    }
                }
                
                s->data_ready = 1;
 800c1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	771a      	strb	r2, [r3, #28]
    for (uint8_t i = 0; i < sensor_count; i++) {
 800c1f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c200:	4b0b      	ldr	r3, [pc, #44]	@ (800c230 <HAL_GPIO_EXTI_Callback+0x220>)
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800c208:	429a      	cmp	r2, r3
 800c20a:	f4ff af0a 	bcc.w	800c022 <HAL_GPIO_EXTI_Callback+0x12>
            }
        }
    }
}
 800c20e:	bf00      	nop
 800c210:	bf00      	nop
 800c212:	3740      	adds	r7, #64	@ 0x40
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	20000850 	.word	0x20000850
 800c21c:	3d0b4396 	.word	0x3d0b4396
 800c220:	43c80000 	.word	0x43c80000
 800c224:	200008cc 	.word	0x200008cc
 800c228:	20000868 	.word	0x20000868
 800c22c:	66666667 	.word	0x66666667
 800c230:	20000864 	.word	0x20000864

0800c234 <KalmanFilter_Init>:

// 静态变量用于存储上次有效的距离值
float last_valid_distances[MAX_US100_SENSORS] = {0};

// 卡尔曼滤波器实现
void KalmanFilter_Init(KalmanFilter* kf, float Q, float R, float dt) {
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	ed87 0a02 	vstr	s0, [r7, #8]
 800c240:	edc7 0a01 	vstr	s1, [r7, #4]
 800c244:	ed87 1a00 	vstr	s2, [r7]
    kf->x = 0.0f;      // 初始状态估计值
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f04f 0200 	mov.w	r2, #0
 800c24e:	601a      	str	r2, [r3, #0]
    kf->P = 1.0f;      // 初始估计误差协方差
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c256:	605a      	str	r2, [r3, #4]
    kf->Q = Q;         // 过程噪声协方差
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	68ba      	ldr	r2, [r7, #8]
 800c25c:	609a      	str	r2, [r3, #8]
    kf->R = R;         // 测量噪声协方差
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	60da      	str	r2, [r3, #12]
    kf->dt = dt;       // 时间步长
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	683a      	ldr	r2, [r7, #0]
 800c268:	615a      	str	r2, [r3, #20]
}
 800c26a:	bf00      	nop
 800c26c:	3714      	adds	r7, #20
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr

0800c276 <KalmanFilter_Update>:

float KalmanFilter_Update(KalmanFilter* kf, float measurement) {
 800c276:	b480      	push	{r7}
 800c278:	b085      	sub	sp, #20
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	ed87 0a00 	vstr	s0, [r7]
    // 预测步骤
    float x_pred = kf->x;                    // 状态预测
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	60fb      	str	r3, [r7, #12]
    float P_pred = kf->P + kf->Q * kf->dt;   // 误差协方差预测
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	ed93 7a01 	vldr	s14, [r3, #4]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	edd3 6a02 	vldr	s13, [r3, #8]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	edd3 7a05 	vldr	s15, [r3, #20]
 800c29a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c29e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2a2:	edc7 7a02 	vstr	s15, [r7, #8]

    // 更新步骤
    kf->K = P_pred / (P_pred + kf->R);       // 计算卡尔曼增益
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	ed93 7a03 	vldr	s14, [r3, #12]
 800c2ac:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c2b4:	edd7 6a02 	vldr	s13, [r7, #8]
 800c2b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->x = x_pred + kf->K * (measurement - x_pred);  // 更新状态估计
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	ed93 7a04 	vldr	s14, [r3, #16]
 800c2c8:	edd7 6a00 	vldr	s13, [r7]
 800c2cc:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c2d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2d8:	edd7 7a03 	vldr	s15, [r7, #12]
 800c2dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	edc3 7a00 	vstr	s15, [r3]
    kf->P = (1.0f - kf->K) * P_pred;         // 更新误差协方差
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	edd3 7a04 	vldr	s15, [r3, #16]
 800c2ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c2f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c2f4:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	edc3 7a01 	vstr	s15, [r3, #4]

    return kf->x;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	ee07 3a90 	vmov	s15, r3
}
 800c30a:	eeb0 0a67 	vmov.f32	s0, s15
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr

0800c318 <SlidingWindowFilter_Init>:

// 滑动窗口滤波器实现
void SlidingWindowFilter_Init(SlidingWindowFilter* swf, int size) {
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
    swf->size = size;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	683a      	ldr	r2, [r7, #0]
 800c326:	605a      	str	r2, [r3, #4]
    swf->index = 0;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	609a      	str	r2, [r3, #8]
    swf->sum = 0.0f;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f04f 0200 	mov.w	r2, #0
 800c334:	60da      	str	r2, [r3, #12]
    swf->buffer = (float*)malloc(size * sizeof(float));
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	4618      	mov	r0, r3
 800c33c:	f005 f870 	bl	8011420 <malloc>
 800c340:	4603      	mov	r3, r0
 800c342:	461a      	mov	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	601a      	str	r2, [r3, #0]
    if (swf->buffer != NULL) {
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d007      	beq.n	800c360 <SlidingWindowFilter_Init+0x48>
        memset(swf->buffer, 0, size * sizeof(float));
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6818      	ldr	r0, [r3, #0]
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	461a      	mov	r2, r3
 800c35a:	2100      	movs	r1, #0
 800c35c:	f005 ff86 	bl	801226c <memset>
    }
}
 800c360:	bf00      	nop
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <SlidingWindowFilter_Update>:

float SlidingWindowFilter_Update(SlidingWindowFilter* swf, float new_value) {
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	ed87 0a00 	vstr	s0, [r7]
    if (swf->buffer == NULL) return new_value;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d102      	bne.n	800c382 <SlidingWindowFilter_Update+0x1a>
 800c37c:	edd7 7a00 	vldr	s15, [r7]
 800c380:	e038      	b.n	800c3f4 <SlidingWindowFilter_Update+0x8c>

    // 减去最旧的值
    swf->sum -= swf->buffer[swf->index];
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	ed93 7a03 	vldr	s14, [r3, #12]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	4413      	add	r3, r2
 800c394:	edd3 7a00 	vldr	s15, [r3]
 800c398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	edc3 7a03 	vstr	s15, [r3, #12]
    
    // 添加新值
    swf->buffer[swf->index] = new_value;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4413      	add	r3, r2
 800c3ae:	683a      	ldr	r2, [r7, #0]
 800c3b0:	601a      	str	r2, [r3, #0]
    swf->sum += new_value;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	ed93 7a03 	vldr	s14, [r3, #12]
 800c3b8:	edd7 7a00 	vldr	s15, [r7]
 800c3bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	edc3 7a03 	vstr	s15, [r3, #12]
    
    // 更新索引
    swf->index = (swf->index + 1) % swf->size;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	6852      	ldr	r2, [r2, #4]
 800c3d0:	fb93 f1f2 	sdiv	r1, r3, r2
 800c3d4:	fb01 f202 	mul.w	r2, r1, r2
 800c3d8:	1a9a      	subs	r2, r3, r2
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	609a      	str	r2, [r3, #8]
    
    // 返回平均值
    return swf->sum / swf->size;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	edd3 6a03 	vldr	s13, [r3, #12]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	ee07 3a90 	vmov	s15, r3
 800c3ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c3f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 800c3f4:	eeb0 0a67 	vmov.f32	s0, s15
 800c3f8:	370c      	adds	r7, #12
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
	...

0800c404 <US100_Init>:
        swf->sum = 0.0f;
        swf->index = 0;
    }
}

void US100_Init(US100Sensor* sensor, UART_HandleTypeDef* uart) {
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
    if (us100_sensor_count >= MAX_US100_SENSORS) return;
 800c40e:	4b24      	ldr	r3, [pc, #144]	@ (800c4a0 <US100_Init+0x9c>)
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	2b04      	cmp	r3, #4
 800c414:	d83e      	bhi.n	800c494 <US100_Init+0x90>
    
    // 保存串口句柄
    sensor->uart = uart;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	683a      	ldr	r2, [r7, #0]
 800c41a:	601a      	str	r2, [r3, #0]
    
    // 初始化状态
    sensor->state = US100_STATE_IDLE;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	711a      	strb	r2, [r3, #4]
    sensor->data_ready = 0;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	749a      	strb	r2, [r3, #18]
    sensor->distance = 0.0f;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	821a      	strh	r2, [r3, #16]
    sensor->rx_index = 0;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	739a      	strb	r2, [r3, #14]
    
    // 初始化卡尔曼滤波器
    KalmanFilter_Init(&sensor->kalman, 0.993f, 0.011f, 0.005f);  // Q=0.1, R=1.0, dt=0.01
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	3314      	adds	r3, #20
 800c438:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 800c4a4 <US100_Init+0xa0>
 800c43c:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 800c4a8 <US100_Init+0xa4>
 800c440:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 800c4ac <US100_Init+0xa8>
 800c444:	4618      	mov	r0, r3
 800c446:	f7ff fef5 	bl	800c234 <KalmanFilter_Init>
    
    // 初始化滑动窗口滤波器
    SlidingWindowFilter_Init(&sensor->sliding, 4);  // 5点滑动窗口
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	332c      	adds	r3, #44	@ 0x2c
 800c44e:	2104      	movs	r1, #4
 800c450:	4618      	mov	r0, r3
 800c452:	f7ff ff61 	bl	800c318 <SlidingWindowFilter_Init>
    
    // 添加到活动传感器数组
    active_sensors[us100_sensor_count++] = sensor;
 800c456:	4b12      	ldr	r3, [pc, #72]	@ (800c4a0 <US100_Init+0x9c>)
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	1c5a      	adds	r2, r3, #1
 800c45c:	b2d1      	uxtb	r1, r2
 800c45e:	4a10      	ldr	r2, [pc, #64]	@ (800c4a0 <US100_Init+0x9c>)
 800c460:	7011      	strb	r1, [r2, #0]
 800c462:	4619      	mov	r1, r3
 800c464:	4a12      	ldr	r2, [pc, #72]	@ (800c4b0 <US100_Init+0xac>)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    // 确保串口已初始化
    if (HAL_UART_GetState(uart) != HAL_UART_STATE_READY) {
 800c46c:	6838      	ldr	r0, [r7, #0]
 800c46e:	f004 fb15 	bl	8010a9c <HAL_UART_GetState>
 800c472:	4603      	mov	r3, r0
 800c474:	2b20      	cmp	r3, #32
 800c476:	d005      	beq.n	800c484 <US100_Init+0x80>
        if (HAL_UART_Init(uart) != HAL_OK) {
 800c478:	6838      	ldr	r0, [r7, #0]
 800c47a:	f003 ff5d 	bl	8010338 <HAL_UART_Init>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d109      	bne.n	800c498 <US100_Init+0x94>
            return;
        }
    }
    
    // 启动串口接收
    HAL_UART_Receive_IT(uart, &sensor->rx_buffer[0], 1);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	330c      	adds	r3, #12
 800c488:	2201      	movs	r2, #1
 800c48a:	4619      	mov	r1, r3
 800c48c:	6838      	ldr	r0, [r7, #0]
 800c48e:	f004 f82e 	bl	80104ee <HAL_UART_Receive_IT>
 800c492:	e002      	b.n	800c49a <US100_Init+0x96>
    if (us100_sensor_count >= MAX_US100_SENSORS) return;
 800c494:	bf00      	nop
 800c496:	e000      	b.n	800c49a <US100_Init+0x96>
            return;
 800c498:	bf00      	nop
}
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	200008e8 	.word	0x200008e8
 800c4a4:	3ba3d70a 	.word	0x3ba3d70a
 800c4a8:	3c343958 	.word	0x3c343958
 800c4ac:	3f7e353f 	.word	0x3f7e353f
 800c4b0:	200008d4 	.word	0x200008d4

0800c4b4 <US100_StartMeasurement>:

void US100_StartMeasurement(US100Sensor* sensor) {
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
    if (sensor->state != US100_STATE_IDLE) {
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	791b      	ldrb	r3, [r3, #4]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d00d      	beq.n	800c4e0 <US100_StartMeasurement+0x2c>
        sensor->state = US100_STATE_IDLE;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	711a      	strb	r2, [r3, #4]
        sensor->rx_index = 0;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	739a      	strb	r2, [r3, #14]
        HAL_UART_Receive_IT(sensor->uart, &sensor->rx_buffer[0], 1);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6818      	ldr	r0, [r3, #0]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	330c      	adds	r3, #12
 800c4d8:	2201      	movs	r2, #1
 800c4da:	4619      	mov	r1, r3
 800c4dc:	f004 f807 	bl	80104ee <HAL_UART_Receive_IT>
    }
    
    // 开始新的测量
    sensor->state = US100_STATE_SENDING;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	711a      	strb	r2, [r3, #4]
    sensor->timestamp = HAL_GetTick();
 800c4e6:	f000 fcef 	bl	800cec8 <HAL_GetTick>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	609a      	str	r2, [r3, #8]
    
    // 发送读取距离命令
    uint8_t cmd = US100_CMD_READ_DISTANCE;
 800c4f0:	2355      	movs	r3, #85	@ 0x55
 800c4f2:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(sensor->uart, &cmd, 1, 100);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6818      	ldr	r0, [r3, #0]
 800c4f8:	f107 010f 	add.w	r1, r7, #15
 800c4fc:	2364      	movs	r3, #100	@ 0x64
 800c4fe:	2201      	movs	r2, #1
 800c500:	f003 ff6a 	bl	80103d8 <HAL_UART_Transmit>
}
 800c504:	bf00      	nop
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <US100_Update>:

void US100_Update(US100Sensor* sensor) {
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 800c514:	f000 fcd8 	bl	800cec8 <HAL_GetTick>
 800c518:	60f8      	str	r0, [r7, #12]
    
    switch (sensor->state) {
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	791b      	ldrb	r3, [r3, #4]
 800c51e:	2b03      	cmp	r3, #3
 800c520:	d029      	beq.n	800c576 <US100_Update+0x6a>
 800c522:	2b03      	cmp	r3, #3
 800c524:	dc6a      	bgt.n	800c5fc <US100_Update+0xf0>
 800c526:	2b01      	cmp	r3, #1
 800c528:	d002      	beq.n	800c530 <US100_Update+0x24>
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d00d      	beq.n	800c54a <US100_Update+0x3e>
                sensor->state = US100_STATE_IDLE;
            }
            break;
            
        default:
            break;
 800c52e:	e065      	b.n	800c5fc <US100_Update+0xf0>
            if ((now - sensor->timestamp) >= 10) {
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	1ad3      	subs	r3, r2, r3
 800c538:	2b09      	cmp	r3, #9
 800c53a:	d961      	bls.n	800c600 <US100_Update+0xf4>
                sensor->state = US100_STATE_WAITING;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2202      	movs	r2, #2
 800c540:	711a      	strb	r2, [r3, #4]
                sensor->timestamp = now;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	609a      	str	r2, [r3, #8]
            break;
 800c548:	e05a      	b.n	800c600 <US100_Update+0xf4>
            if ((now - sensor->timestamp) >= US100_TIMEOUT_MS) {
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	1ad3      	subs	r3, r2, r3
 800c552:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c556:	d355      	bcc.n	800c604 <US100_Update+0xf8>
                sensor->state = US100_STATE_IDLE;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	711a      	strb	r2, [r3, #4]
                sensor->rx_index = 0;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	739a      	strb	r2, [r3, #14]
                HAL_UART_Receive_IT(sensor->uart, &sensor->rx_buffer[0], 1);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6818      	ldr	r0, [r3, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	330c      	adds	r3, #12
 800c56c:	2201      	movs	r2, #1
 800c56e:	4619      	mov	r1, r3
 800c570:	f003 ffbd 	bl	80104ee <HAL_UART_Receive_IT>
            break;
 800c574:	e046      	b.n	800c604 <US100_Update+0xf8>
            if (sensor->rx_index >= 2) {
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	7b9b      	ldrb	r3, [r3, #14]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d944      	bls.n	800c608 <US100_Update+0xfc>
                if (sensor->rx_buffer[0] == 0xFF && sensor->rx_buffer[1] == 0xFF) {
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	7b1b      	ldrb	r3, [r3, #12]
 800c582:	2bff      	cmp	r3, #255	@ 0xff
 800c584:	d112      	bne.n	800c5ac <US100_Update+0xa0>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	7b5b      	ldrb	r3, [r3, #13]
 800c58a:	2bff      	cmp	r3, #255	@ 0xff
 800c58c:	d10e      	bne.n	800c5ac <US100_Update+0xa0>
                    sensor->state = US100_STATE_IDLE;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	711a      	strb	r2, [r3, #4]
                    sensor->rx_index = 0;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	739a      	strb	r2, [r3, #14]
                    HAL_UART_Receive_IT(sensor->uart, &sensor->rx_buffer[0], 1);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6818      	ldr	r0, [r3, #0]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	330c      	adds	r3, #12
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	f003 ffa2 	bl	80104ee <HAL_UART_Receive_IT>
                    return;
 800c5aa:	e02e      	b.n	800c60a <US100_Update+0xfe>
                uint16_t raw_distance = (sensor->rx_buffer[1] << 8) | sensor->rx_buffer[0];
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	7b5b      	ldrb	r3, [r3, #13]
 800c5b0:	b21b      	sxth	r3, r3
 800c5b2:	021b      	lsls	r3, r3, #8
 800c5b4:	b21a      	sxth	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	7b1b      	ldrb	r3, [r3, #12]
 800c5ba:	b21b      	sxth	r3, r3
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	b21b      	sxth	r3, r3
 800c5c0:	817b      	strh	r3, [r7, #10]
                if (raw_distance > 8000) {
 800c5c2:	897b      	ldrh	r3, [r7, #10]
 800c5c4:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800c5c8:	d90e      	bls.n	800c5e8 <US100_Update+0xdc>
                    sensor->state = US100_STATE_IDLE;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	711a      	strb	r2, [r3, #4]
                    sensor->rx_index = 0;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	739a      	strb	r2, [r3, #14]
                    HAL_UART_Receive_IT(sensor->uart, &sensor->rx_buffer[0], 1);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6818      	ldr	r0, [r3, #0]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	330c      	adds	r3, #12
 800c5de:	2201      	movs	r2, #1
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	f003 ff84 	bl	80104ee <HAL_UART_Receive_IT>
                    return;
 800c5e6:	e010      	b.n	800c60a <US100_Update+0xfe>
                sensor->distance = raw_distance;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	897a      	ldrh	r2, [r7, #10]
 800c5ec:	821a      	strh	r2, [r3, #16]
                sensor->data_ready = 1;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	749a      	strb	r2, [r3, #18]
                sensor->state = US100_STATE_IDLE;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	711a      	strb	r2, [r3, #4]
            break;
 800c5fa:	e005      	b.n	800c608 <US100_Update+0xfc>
            break;
 800c5fc:	bf00      	nop
 800c5fe:	e004      	b.n	800c60a <US100_Update+0xfe>
            break;
 800c600:	bf00      	nop
 800c602:	e002      	b.n	800c60a <US100_Update+0xfe>
            break;
 800c604:	bf00      	nop
 800c606:	e000      	b.n	800c60a <US100_Update+0xfe>
            break;
 800c608:	bf00      	nop
    }
}
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <US100_UART_RxCpltCallback>:

void US100_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c618:	2300      	movs	r3, #0
 800c61a:	73fb      	strb	r3, [r7, #15]
 800c61c:	e026      	b.n	800c66c <US100_UART_RxCpltCallback+0x5c>
        US100Sensor* s = active_sensors[i];
 800c61e:	7bfb      	ldrb	r3, [r7, #15]
 800c620:	4a17      	ldr	r2, [pc, #92]	@ (800c680 <US100_UART_RxCpltCallback+0x70>)
 800c622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c626:	60bb      	str	r3, [r7, #8]
        
        if (huart == s->uart) {
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d119      	bne.n	800c666 <US100_UART_RxCpltCallback+0x56>
            s->rx_index++;
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	7b9b      	ldrb	r3, [r3, #14]
 800c636:	3301      	adds	r3, #1
 800c638:	b2da      	uxtb	r2, r3
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	739a      	strb	r2, [r3, #14]
            
            if (s->rx_index >= 2) {
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	7b9b      	ldrb	r3, [r3, #14]
 800c642:	2b01      	cmp	r3, #1
 800c644:	d903      	bls.n	800c64e <US100_UART_RxCpltCallback+0x3e>
                s->state = US100_STATE_RECEIVING;
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	2203      	movs	r2, #3
 800c64a:	711a      	strb	r2, [r3, #4]
            } else {
                HAL_UART_Receive_IT(huart, &s->rx_buffer[s->rx_index], 1);
            }
            
            break;
 800c64c:	e014      	b.n	800c678 <US100_UART_RxCpltCallback+0x68>
                HAL_UART_Receive_IT(huart, &s->rx_buffer[s->rx_index], 1);
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	7b9b      	ldrb	r3, [r3, #14]
 800c652:	3308      	adds	r3, #8
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	4413      	add	r3, r2
 800c658:	3304      	adds	r3, #4
 800c65a:	2201      	movs	r2, #1
 800c65c:	4619      	mov	r1, r3
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f003 ff45 	bl	80104ee <HAL_UART_Receive_IT>
            break;
 800c664:	e008      	b.n	800c678 <US100_UART_RxCpltCallback+0x68>
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c666:	7bfb      	ldrb	r3, [r7, #15]
 800c668:	3301      	adds	r3, #1
 800c66a:	73fb      	strb	r3, [r7, #15]
 800c66c:	4b05      	ldr	r3, [pc, #20]	@ (800c684 <US100_UART_RxCpltCallback+0x74>)
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	7bfa      	ldrb	r2, [r7, #15]
 800c672:	429a      	cmp	r2, r3
 800c674:	d3d3      	bcc.n	800c61e <US100_UART_RxCpltCallback+0xe>
        }
    }
}
 800c676:	bf00      	nop
 800c678:	bf00      	nop
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	200008d4 	.word	0x200008d4
 800c684:	200008e8 	.word	0x200008e8

0800c688 <US100_GetDistance>:

float US100_GetDistance(US100Sensor* sensor) {
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
    if (sensor->data_ready) {
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	7c9b      	ldrb	r3, [r3, #18]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d01e      	beq.n	800c6d6 <US100_GetDistance+0x4e>
        sensor->data_ready = 0;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	749a      	strb	r2, [r3, #18]
        float raw_distance = sensor->distance;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	8a1b      	ldrh	r3, [r3, #16]
 800c6a2:	ee07 3a90 	vmov	s15, r3
 800c6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6aa:	edc7 7a05 	vstr	s15, [r7, #20]
        
        // 应用卡尔曼滤波
        float kalman_filtered = KalmanFilter_Update(&sensor->kalman, raw_distance);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	3314      	adds	r3, #20
 800c6b2:	ed97 0a05 	vldr	s0, [r7, #20]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7ff fddd 	bl	800c276 <KalmanFilter_Update>
 800c6bc:	ed87 0a04 	vstr	s0, [r7, #16]
        
        // 应用滑动窗口滤波
        float final_filtered = SlidingWindowFilter_Update(&sensor->sliding, kalman_filtered);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	332c      	adds	r3, #44	@ 0x2c
 800c6c4:	ed97 0a04 	vldr	s0, [r7, #16]
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7ff fe4d 	bl	800c368 <SlidingWindowFilter_Update>
 800c6ce:	ed87 0a03 	vstr	s0, [r7, #12]
        
        return final_filtered;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	e000      	b.n	800c6d8 <US100_GetDistance+0x50>
    }
    return -1.0f; // 无效数据
 800c6d6:	4b04      	ldr	r3, [pc, #16]	@ (800c6e8 <US100_GetDistance+0x60>)
}
 800c6d8:	ee07 3a90 	vmov	s15, r3
 800c6dc:	eeb0 0a67 	vmov.f32	s0, s15
 800c6e0:	3718      	adds	r7, #24
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	bf800000 	.word	0xbf800000

0800c6ec <US100_GetAllValidDistances>:

void US100_GetAllValidDistances(float* distances) {
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b086      	sub	sp, #24
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
    // 更新所有传感器的状态
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	75fb      	strb	r3, [r7, #23]
 800c6f8:	e009      	b.n	800c70e <US100_GetAllValidDistances+0x22>
        US100_Update(active_sensors[i]);
 800c6fa:	7dfb      	ldrb	r3, [r7, #23]
 800c6fc:	4a53      	ldr	r2, [pc, #332]	@ (800c84c <US100_GetAllValidDistances+0x160>)
 800c6fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c702:	4618      	mov	r0, r3
 800c704:	f7ff ff02 	bl	800c50c <US100_Update>
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c708:	7dfb      	ldrb	r3, [r7, #23]
 800c70a:	3301      	adds	r3, #1
 800c70c:	75fb      	strb	r3, [r7, #23]
 800c70e:	4b50      	ldr	r3, [pc, #320]	@ (800c850 <US100_GetAllValidDistances+0x164>)
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	7dfa      	ldrb	r2, [r7, #23]
 800c714:	429a      	cmp	r2, r3
 800c716:	d3f0      	bcc.n	800c6fa <US100_GetAllValidDistances+0xe>
    }
    
    // 获取所有传感器的距离值
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c718:	2300      	movs	r3, #0
 800c71a:	75bb      	strb	r3, [r7, #22]
 800c71c:	e031      	b.n	800c782 <US100_GetAllValidDistances+0x96>
        float current_distance = US100_GetDistance(active_sensors[i]);
 800c71e:	7dbb      	ldrb	r3, [r7, #22]
 800c720:	4a4a      	ldr	r2, [pc, #296]	@ (800c84c <US100_GetAllValidDistances+0x160>)
 800c722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c726:	4618      	mov	r0, r3
 800c728:	f7ff ffae 	bl	800c688 <US100_GetDistance>
 800c72c:	ed87 0a02 	vstr	s0, [r7, #8]
        if (current_distance > 0) {
 800c730:	edd7 7a02 	vldr	s15, [r7, #8]
 800c734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c73c:	dd14      	ble.n	800c768 <US100_GetAllValidDistances+0x7c>
            raw_distances[i] = active_sensors[i]->distance;
 800c73e:	7dbb      	ldrb	r3, [r7, #22]
 800c740:	4a42      	ldr	r2, [pc, #264]	@ (800c84c <US100_GetAllValidDistances+0x160>)
 800c742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c746:	8a1a      	ldrh	r2, [r3, #16]
 800c748:	7dbb      	ldrb	r3, [r7, #22]
 800c74a:	ee07 2a90 	vmov	s15, r2
 800c74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c752:	4a40      	ldr	r2, [pc, #256]	@ (800c854 <US100_GetAllValidDistances+0x168>)
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	4413      	add	r3, r2
 800c758:	edc3 7a00 	vstr	s15, [r3]
            last_valid_distances[i] = current_distance;
 800c75c:	7dbb      	ldrb	r3, [r7, #22]
 800c75e:	4a3e      	ldr	r2, [pc, #248]	@ (800c858 <US100_GetAllValidDistances+0x16c>)
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	4413      	add	r3, r2
 800c764:	68ba      	ldr	r2, [r7, #8]
 800c766:	601a      	str	r2, [r3, #0]
        }
        distances[i] = last_valid_distances[i];
 800c768:	7dba      	ldrb	r2, [r7, #22]
 800c76a:	7dbb      	ldrb	r3, [r7, #22]
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	6879      	ldr	r1, [r7, #4]
 800c770:	440b      	add	r3, r1
 800c772:	4939      	ldr	r1, [pc, #228]	@ (800c858 <US100_GetAllValidDistances+0x16c>)
 800c774:	0092      	lsls	r2, r2, #2
 800c776:	440a      	add	r2, r1
 800c778:	6812      	ldr	r2, [r2, #0]
 800c77a:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c77c:	7dbb      	ldrb	r3, [r7, #22]
 800c77e:	3301      	adds	r3, #1
 800c780:	75bb      	strb	r3, [r7, #22]
 800c782:	4b33      	ldr	r3, [pc, #204]	@ (800c850 <US100_GetAllValidDistances+0x164>)
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	7dba      	ldrb	r2, [r7, #22]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d3c8      	bcc.n	800c71e <US100_GetAllValidDistances+0x32>
    }
    
    // 检查是否所有传感器都有有效数据
    uint8_t all_valid = 1;
 800c78c:	2301      	movs	r3, #1
 800c78e:	757b      	strb	r3, [r7, #21]
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c790:	2300      	movs	r3, #0
 800c792:	753b      	strb	r3, [r7, #20]
 800c794:	e010      	b.n	800c7b8 <US100_GetAllValidDistances+0xcc>
        if (distances[i] <= 0) {
 800c796:	7d3b      	ldrb	r3, [r7, #20]
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	4413      	add	r3, r2
 800c79e:	edd3 7a00 	vldr	s15, [r3]
 800c7a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7aa:	d802      	bhi.n	800c7b2 <US100_GetAllValidDistances+0xc6>
            all_valid = 0;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	757b      	strb	r3, [r7, #21]
            break;
 800c7b0:	e007      	b.n	800c7c2 <US100_GetAllValidDistances+0xd6>
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c7b2:	7d3b      	ldrb	r3, [r7, #20]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	753b      	strb	r3, [r7, #20]
 800c7b8:	4b25      	ldr	r3, [pc, #148]	@ (800c850 <US100_GetAllValidDistances+0x164>)
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	7d3a      	ldrb	r2, [r7, #20]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d3e9      	bcc.n	800c796 <US100_GetAllValidDistances+0xaa>
        }
    }
    
    // 如果所有传感器都有有效数据，开始下一次测量
    if (all_valid) {
 800c7c2:	7d7b      	ldrb	r3, [r7, #21]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d012      	beq.n	800c7ee <US100_GetAllValidDistances+0x102>
        for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	74fb      	strb	r3, [r7, #19]
 800c7cc:	e009      	b.n	800c7e2 <US100_GetAllValidDistances+0xf6>
            US100_StartMeasurement(active_sensors[i]);
 800c7ce:	7cfb      	ldrb	r3, [r7, #19]
 800c7d0:	4a1e      	ldr	r2, [pc, #120]	@ (800c84c <US100_GetAllValidDistances+0x160>)
 800c7d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7ff fe6c 	bl	800c4b4 <US100_StartMeasurement>
        for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c7dc:	7cfb      	ldrb	r3, [r7, #19]
 800c7de:	3301      	adds	r3, #1
 800c7e0:	74fb      	strb	r3, [r7, #19]
 800c7e2:	4b1b      	ldr	r3, [pc, #108]	@ (800c850 <US100_GetAllValidDistances+0x164>)
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	7cfa      	ldrb	r2, [r7, #19]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d3f0      	bcc.n	800c7ce <US100_GetAllValidDistances+0xe2>
            }
            
            last_measurement_time = current_time;
        }
    }
}
 800c7ec:	e02a      	b.n	800c844 <US100_GetAllValidDistances+0x158>
        uint32_t current_time = HAL_GetTick();
 800c7ee:	f000 fb6b 	bl	800cec8 <HAL_GetTick>
 800c7f2:	60f8      	str	r0, [r7, #12]
        if (current_time - last_measurement_time > 5) {
 800c7f4:	4b19      	ldr	r3, [pc, #100]	@ (800c85c <US100_GetAllValidDistances+0x170>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	2b05      	cmp	r3, #5
 800c7fe:	d921      	bls.n	800c844 <US100_GetAllValidDistances+0x158>
            timeout_count++;
 800c800:	4b17      	ldr	r3, [pc, #92]	@ (800c860 <US100_GetAllValidDistances+0x174>)
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	3301      	adds	r3, #1
 800c806:	b2da      	uxtb	r2, r3
 800c808:	4b15      	ldr	r3, [pc, #84]	@ (800c860 <US100_GetAllValidDistances+0x174>)
 800c80a:	701a      	strb	r2, [r3, #0]
            if (timeout_count >= 1) {
 800c80c:	4b14      	ldr	r3, [pc, #80]	@ (800c860 <US100_GetAllValidDistances+0x174>)
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d014      	beq.n	800c83e <US100_GetAllValidDistances+0x152>
                for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c814:	2300      	movs	r3, #0
 800c816:	74bb      	strb	r3, [r7, #18]
 800c818:	e009      	b.n	800c82e <US100_GetAllValidDistances+0x142>
                    US100_StartMeasurement(active_sensors[i]);
 800c81a:	7cbb      	ldrb	r3, [r7, #18]
 800c81c:	4a0b      	ldr	r2, [pc, #44]	@ (800c84c <US100_GetAllValidDistances+0x160>)
 800c81e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c822:	4618      	mov	r0, r3
 800c824:	f7ff fe46 	bl	800c4b4 <US100_StartMeasurement>
                for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800c828:	7cbb      	ldrb	r3, [r7, #18]
 800c82a:	3301      	adds	r3, #1
 800c82c:	74bb      	strb	r3, [r7, #18]
 800c82e:	4b08      	ldr	r3, [pc, #32]	@ (800c850 <US100_GetAllValidDistances+0x164>)
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	7cba      	ldrb	r2, [r7, #18]
 800c834:	429a      	cmp	r2, r3
 800c836:	d3f0      	bcc.n	800c81a <US100_GetAllValidDistances+0x12e>
                timeout_count = 0;
 800c838:	4b09      	ldr	r3, [pc, #36]	@ (800c860 <US100_GetAllValidDistances+0x174>)
 800c83a:	2200      	movs	r2, #0
 800c83c:	701a      	strb	r2, [r3, #0]
            last_measurement_time = current_time;
 800c83e:	4a07      	ldr	r2, [pc, #28]	@ (800c85c <US100_GetAllValidDistances+0x170>)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6013      	str	r3, [r2, #0]
}
 800c844:	bf00      	nop
 800c846:	3718      	adds	r7, #24
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	200008d4 	.word	0x200008d4
 800c850:	200008e8 	.word	0x200008e8
 800c854:	200000d4 	.word	0x200000d4
 800c858:	200008ec 	.word	0x200008ec
 800c85c:	20000900 	.word	0x20000900
 800c860:	20000904 	.word	0x20000904

0800c864 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800c868:	4b11      	ldr	r3, [pc, #68]	@ (800c8b0 <MX_UART4_Init+0x4c>)
 800c86a:	4a12      	ldr	r2, [pc, #72]	@ (800c8b4 <MX_UART4_Init+0x50>)
 800c86c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800c86e:	4b10      	ldr	r3, [pc, #64]	@ (800c8b0 <MX_UART4_Init+0x4c>)
 800c870:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800c874:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800c876:	4b0e      	ldr	r3, [pc, #56]	@ (800c8b0 <MX_UART4_Init+0x4c>)
 800c878:	2200      	movs	r2, #0
 800c87a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800c87c:	4b0c      	ldr	r3, [pc, #48]	@ (800c8b0 <MX_UART4_Init+0x4c>)
 800c87e:	2200      	movs	r2, #0
 800c880:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800c882:	4b0b      	ldr	r3, [pc, #44]	@ (800c8b0 <MX_UART4_Init+0x4c>)
 800c884:	2200      	movs	r2, #0
 800c886:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800c888:	4b09      	ldr	r3, [pc, #36]	@ (800c8b0 <MX_UART4_Init+0x4c>)
 800c88a:	220c      	movs	r2, #12
 800c88c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c88e:	4b08      	ldr	r3, [pc, #32]	@ (800c8b0 <MX_UART4_Init+0x4c>)
 800c890:	2200      	movs	r2, #0
 800c892:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800c894:	4b06      	ldr	r3, [pc, #24]	@ (800c8b0 <MX_UART4_Init+0x4c>)
 800c896:	2200      	movs	r2, #0
 800c898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800c89a:	4805      	ldr	r0, [pc, #20]	@ (800c8b0 <MX_UART4_Init+0x4c>)
 800c89c:	f003 fd4c 	bl	8010338 <HAL_UART_Init>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d001      	beq.n	800c8aa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800c8a6:	f7fa fc57 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800c8aa:	bf00      	nop
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	20000908 	.word	0x20000908
 800c8b4:	40004c00 	.word	0x40004c00

0800c8b8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800c8bc:	4b11      	ldr	r3, [pc, #68]	@ (800c904 <MX_UART5_Init+0x4c>)
 800c8be:	4a12      	ldr	r2, [pc, #72]	@ (800c908 <MX_UART5_Init+0x50>)
 800c8c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800c8c2:	4b10      	ldr	r3, [pc, #64]	@ (800c904 <MX_UART5_Init+0x4c>)
 800c8c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800c8c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800c8ca:	4b0e      	ldr	r3, [pc, #56]	@ (800c904 <MX_UART5_Init+0x4c>)
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800c8d0:	4b0c      	ldr	r3, [pc, #48]	@ (800c904 <MX_UART5_Init+0x4c>)
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800c8d6:	4b0b      	ldr	r3, [pc, #44]	@ (800c904 <MX_UART5_Init+0x4c>)
 800c8d8:	2200      	movs	r2, #0
 800c8da:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800c8dc:	4b09      	ldr	r3, [pc, #36]	@ (800c904 <MX_UART5_Init+0x4c>)
 800c8de:	220c      	movs	r2, #12
 800c8e0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c8e2:	4b08      	ldr	r3, [pc, #32]	@ (800c904 <MX_UART5_Init+0x4c>)
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800c8e8:	4b06      	ldr	r3, [pc, #24]	@ (800c904 <MX_UART5_Init+0x4c>)
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800c8ee:	4805      	ldr	r0, [pc, #20]	@ (800c904 <MX_UART5_Init+0x4c>)
 800c8f0:	f003 fd22 	bl	8010338 <HAL_UART_Init>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d001      	beq.n	800c8fe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800c8fa:	f7fa fc2d 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800c8fe:	bf00      	nop
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	20000950 	.word	0x20000950
 800c908:	40005000 	.word	0x40005000

0800c90c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c910:	4b11      	ldr	r3, [pc, #68]	@ (800c958 <MX_USART1_UART_Init+0x4c>)
 800c912:	4a12      	ldr	r2, [pc, #72]	@ (800c95c <MX_USART1_UART_Init+0x50>)
 800c914:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c916:	4b10      	ldr	r3, [pc, #64]	@ (800c958 <MX_USART1_UART_Init+0x4c>)
 800c918:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c91c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c91e:	4b0e      	ldr	r3, [pc, #56]	@ (800c958 <MX_USART1_UART_Init+0x4c>)
 800c920:	2200      	movs	r2, #0
 800c922:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c924:	4b0c      	ldr	r3, [pc, #48]	@ (800c958 <MX_USART1_UART_Init+0x4c>)
 800c926:	2200      	movs	r2, #0
 800c928:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c92a:	4b0b      	ldr	r3, [pc, #44]	@ (800c958 <MX_USART1_UART_Init+0x4c>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c930:	4b09      	ldr	r3, [pc, #36]	@ (800c958 <MX_USART1_UART_Init+0x4c>)
 800c932:	220c      	movs	r2, #12
 800c934:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c936:	4b08      	ldr	r3, [pc, #32]	@ (800c958 <MX_USART1_UART_Init+0x4c>)
 800c938:	2200      	movs	r2, #0
 800c93a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c93c:	4b06      	ldr	r3, [pc, #24]	@ (800c958 <MX_USART1_UART_Init+0x4c>)
 800c93e:	2200      	movs	r2, #0
 800c940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c942:	4805      	ldr	r0, [pc, #20]	@ (800c958 <MX_USART1_UART_Init+0x4c>)
 800c944:	f003 fcf8 	bl	8010338 <HAL_UART_Init>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d001      	beq.n	800c952 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c94e:	f7fa fc03 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c952:	bf00      	nop
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	20000998 	.word	0x20000998
 800c95c:	40011000 	.word	0x40011000

0800c960 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800c964:	4b11      	ldr	r3, [pc, #68]	@ (800c9ac <MX_USART2_UART_Init+0x4c>)
 800c966:	4a12      	ldr	r2, [pc, #72]	@ (800c9b0 <MX_USART2_UART_Init+0x50>)
 800c968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800c96a:	4b10      	ldr	r3, [pc, #64]	@ (800c9ac <MX_USART2_UART_Init+0x4c>)
 800c96c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800c970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c972:	4b0e      	ldr	r3, [pc, #56]	@ (800c9ac <MX_USART2_UART_Init+0x4c>)
 800c974:	2200      	movs	r2, #0
 800c976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c978:	4b0c      	ldr	r3, [pc, #48]	@ (800c9ac <MX_USART2_UART_Init+0x4c>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c97e:	4b0b      	ldr	r3, [pc, #44]	@ (800c9ac <MX_USART2_UART_Init+0x4c>)
 800c980:	2200      	movs	r2, #0
 800c982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c984:	4b09      	ldr	r3, [pc, #36]	@ (800c9ac <MX_USART2_UART_Init+0x4c>)
 800c986:	220c      	movs	r2, #12
 800c988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c98a:	4b08      	ldr	r3, [pc, #32]	@ (800c9ac <MX_USART2_UART_Init+0x4c>)
 800c98c:	2200      	movs	r2, #0
 800c98e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c990:	4b06      	ldr	r3, [pc, #24]	@ (800c9ac <MX_USART2_UART_Init+0x4c>)
 800c992:	2200      	movs	r2, #0
 800c994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c996:	4805      	ldr	r0, [pc, #20]	@ (800c9ac <MX_USART2_UART_Init+0x4c>)
 800c998:	f003 fcce 	bl	8010338 <HAL_UART_Init>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d001      	beq.n	800c9a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800c9a2:	f7fa fbd9 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800c9a6:	bf00      	nop
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	200009e0 	.word	0x200009e0
 800c9b0:	40004400 	.word	0x40004400

0800c9b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800c9b8:	4b11      	ldr	r3, [pc, #68]	@ (800ca00 <MX_USART3_UART_Init+0x4c>)
 800c9ba:	4a12      	ldr	r2, [pc, #72]	@ (800ca04 <MX_USART3_UART_Init+0x50>)
 800c9bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800c9be:	4b10      	ldr	r3, [pc, #64]	@ (800ca00 <MX_USART3_UART_Init+0x4c>)
 800c9c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800c9c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c9c6:	4b0e      	ldr	r3, [pc, #56]	@ (800ca00 <MX_USART3_UART_Init+0x4c>)
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c9cc:	4b0c      	ldr	r3, [pc, #48]	@ (800ca00 <MX_USART3_UART_Init+0x4c>)
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c9d2:	4b0b      	ldr	r3, [pc, #44]	@ (800ca00 <MX_USART3_UART_Init+0x4c>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c9d8:	4b09      	ldr	r3, [pc, #36]	@ (800ca00 <MX_USART3_UART_Init+0x4c>)
 800c9da:	220c      	movs	r2, #12
 800c9dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c9de:	4b08      	ldr	r3, [pc, #32]	@ (800ca00 <MX_USART3_UART_Init+0x4c>)
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c9e4:	4b06      	ldr	r3, [pc, #24]	@ (800ca00 <MX_USART3_UART_Init+0x4c>)
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800c9ea:	4805      	ldr	r0, [pc, #20]	@ (800ca00 <MX_USART3_UART_Init+0x4c>)
 800c9ec:	f003 fca4 	bl	8010338 <HAL_UART_Init>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d001      	beq.n	800c9fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800c9f6:	f7fa fbaf 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800c9fa:	bf00      	nop
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20000a28 	.word	0x20000a28
 800ca04:	40004800 	.word	0x40004800

0800ca08 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800ca0c:	4b11      	ldr	r3, [pc, #68]	@ (800ca54 <MX_USART6_UART_Init+0x4c>)
 800ca0e:	4a12      	ldr	r2, [pc, #72]	@ (800ca58 <MX_USART6_UART_Init+0x50>)
 800ca10:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800ca12:	4b10      	ldr	r3, [pc, #64]	@ (800ca54 <MX_USART6_UART_Init+0x4c>)
 800ca14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800ca18:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800ca1a:	4b0e      	ldr	r3, [pc, #56]	@ (800ca54 <MX_USART6_UART_Init+0x4c>)
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800ca20:	4b0c      	ldr	r3, [pc, #48]	@ (800ca54 <MX_USART6_UART_Init+0x4c>)
 800ca22:	2200      	movs	r2, #0
 800ca24:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800ca26:	4b0b      	ldr	r3, [pc, #44]	@ (800ca54 <MX_USART6_UART_Init+0x4c>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800ca2c:	4b09      	ldr	r3, [pc, #36]	@ (800ca54 <MX_USART6_UART_Init+0x4c>)
 800ca2e:	220c      	movs	r2, #12
 800ca30:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ca32:	4b08      	ldr	r3, [pc, #32]	@ (800ca54 <MX_USART6_UART_Init+0x4c>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800ca38:	4b06      	ldr	r3, [pc, #24]	@ (800ca54 <MX_USART6_UART_Init+0x4c>)
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800ca3e:	4805      	ldr	r0, [pc, #20]	@ (800ca54 <MX_USART6_UART_Init+0x4c>)
 800ca40:	f003 fc7a 	bl	8010338 <HAL_UART_Init>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d001      	beq.n	800ca4e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800ca4a:	f7fa fb85 	bl	8007158 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800ca4e:	bf00      	nop
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	20000a70 	.word	0x20000a70
 800ca58:	40011400 	.word	0x40011400

0800ca5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b094      	sub	sp, #80	@ 0x50
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca64:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ca68:	2200      	movs	r2, #0
 800ca6a:	601a      	str	r2, [r3, #0]
 800ca6c:	605a      	str	r2, [r3, #4]
 800ca6e:	609a      	str	r2, [r3, #8]
 800ca70:	60da      	str	r2, [r3, #12]
 800ca72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4aa0      	ldr	r2, [pc, #640]	@ (800ccfc <HAL_UART_MspInit+0x2a0>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d135      	bne.n	800caea <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800ca7e:	2300      	movs	r3, #0
 800ca80:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca82:	4b9f      	ldr	r3, [pc, #636]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800ca84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca86:	4a9e      	ldr	r2, [pc, #632]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800ca88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ca8c:	6413      	str	r3, [r2, #64]	@ 0x40
 800ca8e:	4b9c      	ldr	r3, [pc, #624]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800ca90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ca96:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca9e:	4b98      	ldr	r3, [pc, #608]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800caa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caa2:	4a97      	ldr	r2, [pc, #604]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800caa4:	f043 0304 	orr.w	r3, r3, #4
 800caa8:	6313      	str	r3, [r2, #48]	@ 0x30
 800caaa:	4b95      	ldr	r3, [pc, #596]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800caac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caae:	f003 0304 	and.w	r3, r3, #4
 800cab2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_1_Pin|RX_1_Pin;
 800cab6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800caba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cabc:	2302      	movs	r3, #2
 800cabe:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cac0:	2300      	movs	r3, #0
 800cac2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cac4:	2303      	movs	r3, #3
 800cac6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800cac8:	2308      	movs	r3, #8
 800caca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cacc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cad0:	4619      	mov	r1, r3
 800cad2:	488c      	ldr	r0, [pc, #560]	@ (800cd04 <HAL_UART_MspInit+0x2a8>)
 800cad4:	f000 fbcc 	bl	800d270 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800cad8:	2200      	movs	r2, #0
 800cada:	2100      	movs	r1, #0
 800cadc:	2034      	movs	r0, #52	@ 0x34
 800cade:	f000 fafe 	bl	800d0de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800cae2:	2034      	movs	r0, #52	@ 0x34
 800cae4:	f000 fb17 	bl	800d116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800cae8:	e154      	b.n	800cd94 <HAL_UART_MspInit+0x338>
  else if(uartHandle->Instance==UART5)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4a86      	ldr	r2, [pc, #536]	@ (800cd08 <HAL_UART_MspInit+0x2ac>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d153      	bne.n	800cb9c <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 800caf4:	2300      	movs	r3, #0
 800caf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800caf8:	4b81      	ldr	r3, [pc, #516]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cafa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cafc:	4a80      	ldr	r2, [pc, #512]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cafe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb02:	6413      	str	r3, [r2, #64]	@ 0x40
 800cb04:	4b7e      	ldr	r3, [pc, #504]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cb06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cb0c:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cb10:	2300      	movs	r3, #0
 800cb12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb14:	4b7a      	ldr	r3, [pc, #488]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cb16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb18:	4a79      	ldr	r2, [pc, #484]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cb1a:	f043 0304 	orr.w	r3, r3, #4
 800cb1e:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb20:	4b77      	ldr	r3, [pc, #476]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cb22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb24:	f003 0304 	and.w	r3, r3, #4
 800cb28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb30:	4b73      	ldr	r3, [pc, #460]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cb32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb34:	4a72      	ldr	r2, [pc, #456]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cb36:	f043 0308 	orr.w	r3, r3, #8
 800cb3a:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb3c:	4b70      	ldr	r3, [pc, #448]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cb3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb40:	f003 0308 	and.w	r3, r3, #8
 800cb44:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800cb48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb4e:	2302      	movs	r3, #2
 800cb50:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb52:	2300      	movs	r3, #0
 800cb54:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb56:	2303      	movs	r3, #3
 800cb58:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800cb5a:	2308      	movs	r3, #8
 800cb5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cb5e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cb62:	4619      	mov	r1, r3
 800cb64:	4867      	ldr	r0, [pc, #412]	@ (800cd04 <HAL_UART_MspInit+0x2a8>)
 800cb66:	f000 fb83 	bl	800d270 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cb6a:	2304      	movs	r3, #4
 800cb6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb6e:	2302      	movs	r3, #2
 800cb70:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb72:	2300      	movs	r3, #0
 800cb74:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb76:	2303      	movs	r3, #3
 800cb78:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800cb7a:	2308      	movs	r3, #8
 800cb7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cb7e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cb82:	4619      	mov	r1, r3
 800cb84:	4861      	ldr	r0, [pc, #388]	@ (800cd0c <HAL_UART_MspInit+0x2b0>)
 800cb86:	f000 fb73 	bl	800d270 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	2035      	movs	r0, #53	@ 0x35
 800cb90:	f000 faa5 	bl	800d0de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800cb94:	2035      	movs	r0, #53	@ 0x35
 800cb96:	f000 fabe 	bl	800d116 <HAL_NVIC_EnableIRQ>
}
 800cb9a:	e0fb      	b.n	800cd94 <HAL_UART_MspInit+0x338>
  else if(uartHandle->Instance==USART1)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a5b      	ldr	r2, [pc, #364]	@ (800cd10 <HAL_UART_MspInit+0x2b4>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d135      	bne.n	800cc12 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 800cba6:	2300      	movs	r3, #0
 800cba8:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbaa:	4b55      	ldr	r3, [pc, #340]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cbac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbae:	4a54      	ldr	r2, [pc, #336]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cbb0:	f043 0310 	orr.w	r3, r3, #16
 800cbb4:	6453      	str	r3, [r2, #68]	@ 0x44
 800cbb6:	4b52      	ldr	r3, [pc, #328]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cbb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbba:	f003 0310 	and.w	r3, r3, #16
 800cbbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	623b      	str	r3, [r7, #32]
 800cbc6:	4b4e      	ldr	r3, [pc, #312]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cbc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbca:	4a4d      	ldr	r2, [pc, #308]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cbcc:	f043 0301 	orr.w	r3, r3, #1
 800cbd0:	6313      	str	r3, [r2, #48]	@ 0x30
 800cbd2:	4b4b      	ldr	r3, [pc, #300]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cbd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbd6:	f003 0301 	and.w	r3, r3, #1
 800cbda:	623b      	str	r3, [r7, #32]
 800cbdc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800cbde:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800cbe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbe4:	2302      	movs	r3, #2
 800cbe6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbec:	2303      	movs	r3, #3
 800cbee:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cbf0:	2307      	movs	r3, #7
 800cbf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cbf4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	4846      	ldr	r0, [pc, #280]	@ (800cd14 <HAL_UART_MspInit+0x2b8>)
 800cbfc:	f000 fb38 	bl	800d270 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800cc00:	2200      	movs	r2, #0
 800cc02:	2100      	movs	r1, #0
 800cc04:	2025      	movs	r0, #37	@ 0x25
 800cc06:	f000 fa6a 	bl	800d0de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800cc0a:	2025      	movs	r0, #37	@ 0x25
 800cc0c:	f000 fa83 	bl	800d116 <HAL_NVIC_EnableIRQ>
}
 800cc10:	e0c0      	b.n	800cd94 <HAL_UART_MspInit+0x338>
  else if(uartHandle->Instance==USART2)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a40      	ldr	r2, [pc, #256]	@ (800cd18 <HAL_UART_MspInit+0x2bc>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d134      	bne.n	800cc86 <HAL_UART_MspInit+0x22a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	61fb      	str	r3, [r7, #28]
 800cc20:	4b37      	ldr	r3, [pc, #220]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cc22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc24:	4a36      	ldr	r2, [pc, #216]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cc26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc2a:	6413      	str	r3, [r2, #64]	@ 0x40
 800cc2c:	4b34      	ldr	r3, [pc, #208]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cc2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc34:	61fb      	str	r3, [r7, #28]
 800cc36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cc38:	2300      	movs	r3, #0
 800cc3a:	61bb      	str	r3, [r7, #24]
 800cc3c:	4b30      	ldr	r3, [pc, #192]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cc3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc40:	4a2f      	ldr	r2, [pc, #188]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cc42:	f043 0308 	orr.w	r3, r3, #8
 800cc46:	6313      	str	r3, [r2, #48]	@ 0x30
 800cc48:	4b2d      	ldr	r3, [pc, #180]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cc4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc4c:	f003 0308 	and.w	r3, r3, #8
 800cc50:	61bb      	str	r3, [r7, #24]
 800cc52:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800cc54:	2360      	movs	r3, #96	@ 0x60
 800cc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc58:	2302      	movs	r3, #2
 800cc5a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc60:	2303      	movs	r3, #3
 800cc62:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800cc64:	2307      	movs	r3, #7
 800cc66:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cc68:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	4827      	ldr	r0, [pc, #156]	@ (800cd0c <HAL_UART_MspInit+0x2b0>)
 800cc70:	f000 fafe 	bl	800d270 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800cc74:	2200      	movs	r2, #0
 800cc76:	2100      	movs	r1, #0
 800cc78:	2026      	movs	r0, #38	@ 0x26
 800cc7a:	f000 fa30 	bl	800d0de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800cc7e:	2026      	movs	r0, #38	@ 0x26
 800cc80:	f000 fa49 	bl	800d116 <HAL_NVIC_EnableIRQ>
}
 800cc84:	e086      	b.n	800cd94 <HAL_UART_MspInit+0x338>
  else if(uartHandle->Instance==USART3)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a24      	ldr	r2, [pc, #144]	@ (800cd1c <HAL_UART_MspInit+0x2c0>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d147      	bne.n	800cd20 <HAL_UART_MspInit+0x2c4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800cc90:	2300      	movs	r3, #0
 800cc92:	617b      	str	r3, [r7, #20]
 800cc94:	4b1a      	ldr	r3, [pc, #104]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cc96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc98:	4a19      	ldr	r2, [pc, #100]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cc9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cc9e:	6413      	str	r3, [r2, #64]	@ 0x40
 800cca0:	4b17      	ldr	r3, [pc, #92]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800cca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cca4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cca8:	617b      	str	r3, [r7, #20]
 800ccaa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ccac:	2300      	movs	r3, #0
 800ccae:	613b      	str	r3, [r7, #16]
 800ccb0:	4b13      	ldr	r3, [pc, #76]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800ccb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccb4:	4a12      	ldr	r2, [pc, #72]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800ccb6:	f043 0308 	orr.w	r3, r3, #8
 800ccba:	6313      	str	r3, [r2, #48]	@ 0x30
 800ccbc:	4b10      	ldr	r3, [pc, #64]	@ (800cd00 <HAL_UART_MspInit+0x2a4>)
 800ccbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccc0:	f003 0308 	and.w	r3, r3, #8
 800ccc4:	613b      	str	r3, [r7, #16]
 800ccc6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ccc8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800cccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccce:	2302      	movs	r3, #2
 800ccd0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccd6:	2303      	movs	r3, #3
 800ccd8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ccda:	2307      	movs	r3, #7
 800ccdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ccde:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cce2:	4619      	mov	r1, r3
 800cce4:	4809      	ldr	r0, [pc, #36]	@ (800cd0c <HAL_UART_MspInit+0x2b0>)
 800cce6:	f000 fac3 	bl	800d270 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800ccea:	2200      	movs	r2, #0
 800ccec:	2100      	movs	r1, #0
 800ccee:	2027      	movs	r0, #39	@ 0x27
 800ccf0:	f000 f9f5 	bl	800d0de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ccf4:	2027      	movs	r0, #39	@ 0x27
 800ccf6:	f000 fa0e 	bl	800d116 <HAL_NVIC_EnableIRQ>
}
 800ccfa:	e04b      	b.n	800cd94 <HAL_UART_MspInit+0x338>
 800ccfc:	40004c00 	.word	0x40004c00
 800cd00:	40023800 	.word	0x40023800
 800cd04:	40020800 	.word	0x40020800
 800cd08:	40005000 	.word	0x40005000
 800cd0c:	40020c00 	.word	0x40020c00
 800cd10:	40011000 	.word	0x40011000
 800cd14:	40020000 	.word	0x40020000
 800cd18:	40004400 	.word	0x40004400
 800cd1c:	40004800 	.word	0x40004800
  else if(uartHandle->Instance==USART6)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a1d      	ldr	r2, [pc, #116]	@ (800cd9c <HAL_UART_MspInit+0x340>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d134      	bne.n	800cd94 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART6_CLK_ENABLE();
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	60fb      	str	r3, [r7, #12]
 800cd2e:	4b1c      	ldr	r3, [pc, #112]	@ (800cda0 <HAL_UART_MspInit+0x344>)
 800cd30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd32:	4a1b      	ldr	r2, [pc, #108]	@ (800cda0 <HAL_UART_MspInit+0x344>)
 800cd34:	f043 0320 	orr.w	r3, r3, #32
 800cd38:	6453      	str	r3, [r2, #68]	@ 0x44
 800cd3a:	4b19      	ldr	r3, [pc, #100]	@ (800cda0 <HAL_UART_MspInit+0x344>)
 800cd3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd3e:	f003 0320 	and.w	r3, r3, #32
 800cd42:	60fb      	str	r3, [r7, #12]
 800cd44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800cd46:	2300      	movs	r3, #0
 800cd48:	60bb      	str	r3, [r7, #8]
 800cd4a:	4b15      	ldr	r3, [pc, #84]	@ (800cda0 <HAL_UART_MspInit+0x344>)
 800cd4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd4e:	4a14      	ldr	r2, [pc, #80]	@ (800cda0 <HAL_UART_MspInit+0x344>)
 800cd50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd54:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd56:	4b12      	ldr	r3, [pc, #72]	@ (800cda0 <HAL_UART_MspInit+0x344>)
 800cd58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd5e:	60bb      	str	r3, [r7, #8]
 800cd60:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800cd62:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 800cd66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd68:	2302      	movs	r3, #2
 800cd6a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd70:	2303      	movs	r3, #3
 800cd72:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800cd74:	2308      	movs	r3, #8
 800cd76:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cd78:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	4809      	ldr	r0, [pc, #36]	@ (800cda4 <HAL_UART_MspInit+0x348>)
 800cd80:	f000 fa76 	bl	800d270 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800cd84:	2200      	movs	r2, #0
 800cd86:	2100      	movs	r1, #0
 800cd88:	2047      	movs	r0, #71	@ 0x47
 800cd8a:	f000 f9a8 	bl	800d0de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800cd8e:	2047      	movs	r0, #71	@ 0x47
 800cd90:	f000 f9c1 	bl	800d116 <HAL_NVIC_EnableIRQ>
}
 800cd94:	bf00      	nop
 800cd96:	3750      	adds	r7, #80	@ 0x50
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	40011400 	.word	0x40011400
 800cda0:	40023800 	.word	0x40023800
 800cda4:	40021800 	.word	0x40021800

0800cda8 <Reset_Handler>:
 800cda8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800cde0 <LoopFillZerobss+0xe>
 800cdac:	f7fe fb42 	bl	800b434 <SystemInit>
 800cdb0:	480c      	ldr	r0, [pc, #48]	@ (800cde4 <LoopFillZerobss+0x12>)
 800cdb2:	490d      	ldr	r1, [pc, #52]	@ (800cde8 <LoopFillZerobss+0x16>)
 800cdb4:	4a0d      	ldr	r2, [pc, #52]	@ (800cdec <LoopFillZerobss+0x1a>)
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	e002      	b.n	800cdc0 <LoopCopyDataInit>

0800cdba <CopyDataInit>:
 800cdba:	58d4      	ldr	r4, [r2, r3]
 800cdbc:	50c4      	str	r4, [r0, r3]
 800cdbe:	3304      	adds	r3, #4

0800cdc0 <LoopCopyDataInit>:
 800cdc0:	18c4      	adds	r4, r0, r3
 800cdc2:	428c      	cmp	r4, r1
 800cdc4:	d3f9      	bcc.n	800cdba <CopyDataInit>
 800cdc6:	4a0a      	ldr	r2, [pc, #40]	@ (800cdf0 <LoopFillZerobss+0x1e>)
 800cdc8:	4c0a      	ldr	r4, [pc, #40]	@ (800cdf4 <LoopFillZerobss+0x22>)
 800cdca:	2300      	movs	r3, #0
 800cdcc:	e001      	b.n	800cdd2 <LoopFillZerobss>

0800cdce <FillZerobss>:
 800cdce:	6013      	str	r3, [r2, #0]
 800cdd0:	3204      	adds	r2, #4

0800cdd2 <LoopFillZerobss>:
 800cdd2:	42a2      	cmp	r2, r4
 800cdd4:	d3fb      	bcc.n	800cdce <FillZerobss>
 800cdd6:	f005 fab1 	bl	801233c <__libc_init_array>
 800cdda:	f7f8 fbf3 	bl	80055c4 <main>
 800cdde:	4770      	bx	lr
 800cde0:	20020000 	.word	0x20020000
 800cde4:	20000000 	.word	0x20000000
 800cde8:	200002b4 	.word	0x200002b4
 800cdec:	08016278 	.word	0x08016278
 800cdf0:	200002b4 	.word	0x200002b4
 800cdf4:	20000c08 	.word	0x20000c08

0800cdf8 <ADC_IRQHandler>:
 800cdf8:	e7fe      	b.n	800cdf8 <ADC_IRQHandler>
	...

0800cdfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ce00:	4b0e      	ldr	r3, [pc, #56]	@ (800ce3c <HAL_Init+0x40>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a0d      	ldr	r2, [pc, #52]	@ (800ce3c <HAL_Init+0x40>)
 800ce06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ce0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ce0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ce3c <HAL_Init+0x40>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a0a      	ldr	r2, [pc, #40]	@ (800ce3c <HAL_Init+0x40>)
 800ce12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ce16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ce18:	4b08      	ldr	r3, [pc, #32]	@ (800ce3c <HAL_Init+0x40>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a07      	ldr	r2, [pc, #28]	@ (800ce3c <HAL_Init+0x40>)
 800ce1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ce24:	2003      	movs	r0, #3
 800ce26:	f000 f94f 	bl	800d0c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ce2a:	200f      	movs	r0, #15
 800ce2c:	f000 f808 	bl	800ce40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ce30:	f7fe f996 	bl	800b160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ce34:	2300      	movs	r3, #0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	40023c00 	.word	0x40023c00

0800ce40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ce48:	4b12      	ldr	r3, [pc, #72]	@ (800ce94 <HAL_InitTick+0x54>)
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	4b12      	ldr	r3, [pc, #72]	@ (800ce98 <HAL_InitTick+0x58>)
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	4619      	mov	r1, r3
 800ce52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ce56:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f000 f967 	bl	800d132 <HAL_SYSTICK_Config>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e00e      	b.n	800ce8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2b0f      	cmp	r3, #15
 800ce72:	d80a      	bhi.n	800ce8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ce74:	2200      	movs	r2, #0
 800ce76:	6879      	ldr	r1, [r7, #4]
 800ce78:	f04f 30ff 	mov.w	r0, #4294967295
 800ce7c:	f000 f92f 	bl	800d0de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ce80:	4a06      	ldr	r2, [pc, #24]	@ (800ce9c <HAL_InitTick+0x5c>)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ce86:	2300      	movs	r3, #0
 800ce88:	e000      	b.n	800ce8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ce8a:	2301      	movs	r3, #1
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	200000d0 	.word	0x200000d0
 800ce98:	200000e8 	.word	0x200000e8
 800ce9c:	200000e4 	.word	0x200000e4

0800cea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cea0:	b480      	push	{r7}
 800cea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800cea4:	4b06      	ldr	r3, [pc, #24]	@ (800cec0 <HAL_IncTick+0x20>)
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	461a      	mov	r2, r3
 800ceaa:	4b06      	ldr	r3, [pc, #24]	@ (800cec4 <HAL_IncTick+0x24>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	4413      	add	r3, r2
 800ceb0:	4a04      	ldr	r2, [pc, #16]	@ (800cec4 <HAL_IncTick+0x24>)
 800ceb2:	6013      	str	r3, [r2, #0]
}
 800ceb4:	bf00      	nop
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	200000e8 	.word	0x200000e8
 800cec4:	20000ab8 	.word	0x20000ab8

0800cec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cec8:	b480      	push	{r7}
 800ceca:	af00      	add	r7, sp, #0
  return uwTick;
 800cecc:	4b03      	ldr	r3, [pc, #12]	@ (800cedc <HAL_GetTick+0x14>)
 800cece:	681b      	ldr	r3, [r3, #0]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	20000ab8 	.word	0x20000ab8

0800cee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cee8:	f7ff ffee 	bl	800cec8 <HAL_GetTick>
 800ceec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cef8:	d005      	beq.n	800cf06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800cefa:	4b0a      	ldr	r3, [pc, #40]	@ (800cf24 <HAL_Delay+0x44>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	461a      	mov	r2, r3
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	4413      	add	r3, r2
 800cf04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800cf06:	bf00      	nop
 800cf08:	f7ff ffde 	bl	800cec8 <HAL_GetTick>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	1ad3      	subs	r3, r2, r3
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d8f7      	bhi.n	800cf08 <HAL_Delay+0x28>
  {
  }
}
 800cf18:	bf00      	nop
 800cf1a:	bf00      	nop
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	200000e8 	.word	0x200000e8

0800cf28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f003 0307 	and.w	r3, r3, #7
 800cf36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cf38:	4b0c      	ldr	r3, [pc, #48]	@ (800cf6c <__NVIC_SetPriorityGrouping+0x44>)
 800cf3a:	68db      	ldr	r3, [r3, #12]
 800cf3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cf3e:	68ba      	ldr	r2, [r7, #8]
 800cf40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800cf44:	4013      	ands	r3, r2
 800cf46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cf50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800cf54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cf58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cf5a:	4a04      	ldr	r2, [pc, #16]	@ (800cf6c <__NVIC_SetPriorityGrouping+0x44>)
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	60d3      	str	r3, [r2, #12]
}
 800cf60:	bf00      	nop
 800cf62:	3714      	adds	r7, #20
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr
 800cf6c:	e000ed00 	.word	0xe000ed00

0800cf70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800cf70:	b480      	push	{r7}
 800cf72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cf74:	4b04      	ldr	r3, [pc, #16]	@ (800cf88 <__NVIC_GetPriorityGrouping+0x18>)
 800cf76:	68db      	ldr	r3, [r3, #12]
 800cf78:	0a1b      	lsrs	r3, r3, #8
 800cf7a:	f003 0307 	and.w	r3, r3, #7
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr
 800cf88:	e000ed00 	.word	0xe000ed00

0800cf8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	4603      	mov	r3, r0
 800cf94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cf96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	db0b      	blt.n	800cfb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cf9e:	79fb      	ldrb	r3, [r7, #7]
 800cfa0:	f003 021f 	and.w	r2, r3, #31
 800cfa4:	4907      	ldr	r1, [pc, #28]	@ (800cfc4 <__NVIC_EnableIRQ+0x38>)
 800cfa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfaa:	095b      	lsrs	r3, r3, #5
 800cfac:	2001      	movs	r0, #1
 800cfae:	fa00 f202 	lsl.w	r2, r0, r2
 800cfb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800cfb6:	bf00      	nop
 800cfb8:	370c      	adds	r7, #12
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr
 800cfc2:	bf00      	nop
 800cfc4:	e000e100 	.word	0xe000e100

0800cfc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	4603      	mov	r3, r0
 800cfd0:	6039      	str	r1, [r7, #0]
 800cfd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cfd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	db0a      	blt.n	800cff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	490c      	ldr	r1, [pc, #48]	@ (800d014 <__NVIC_SetPriority+0x4c>)
 800cfe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfe6:	0112      	lsls	r2, r2, #4
 800cfe8:	b2d2      	uxtb	r2, r2
 800cfea:	440b      	add	r3, r1
 800cfec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800cff0:	e00a      	b.n	800d008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	b2da      	uxtb	r2, r3
 800cff6:	4908      	ldr	r1, [pc, #32]	@ (800d018 <__NVIC_SetPriority+0x50>)
 800cff8:	79fb      	ldrb	r3, [r7, #7]
 800cffa:	f003 030f 	and.w	r3, r3, #15
 800cffe:	3b04      	subs	r3, #4
 800d000:	0112      	lsls	r2, r2, #4
 800d002:	b2d2      	uxtb	r2, r2
 800d004:	440b      	add	r3, r1
 800d006:	761a      	strb	r2, [r3, #24]
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr
 800d014:	e000e100 	.word	0xe000e100
 800d018:	e000ed00 	.word	0xe000ed00

0800d01c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b089      	sub	sp, #36	@ 0x24
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	f003 0307 	and.w	r3, r3, #7
 800d02e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	f1c3 0307 	rsb	r3, r3, #7
 800d036:	2b04      	cmp	r3, #4
 800d038:	bf28      	it	cs
 800d03a:	2304      	movcs	r3, #4
 800d03c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d03e:	69fb      	ldr	r3, [r7, #28]
 800d040:	3304      	adds	r3, #4
 800d042:	2b06      	cmp	r3, #6
 800d044:	d902      	bls.n	800d04c <NVIC_EncodePriority+0x30>
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	3b03      	subs	r3, #3
 800d04a:	e000      	b.n	800d04e <NVIC_EncodePriority+0x32>
 800d04c:	2300      	movs	r3, #0
 800d04e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d050:	f04f 32ff 	mov.w	r2, #4294967295
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	fa02 f303 	lsl.w	r3, r2, r3
 800d05a:	43da      	mvns	r2, r3
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	401a      	ands	r2, r3
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d064:	f04f 31ff 	mov.w	r1, #4294967295
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	fa01 f303 	lsl.w	r3, r1, r3
 800d06e:	43d9      	mvns	r1, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d074:	4313      	orrs	r3, r2
         );
}
 800d076:	4618      	mov	r0, r3
 800d078:	3724      	adds	r7, #36	@ 0x24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr
	...

0800d084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	3b01      	subs	r3, #1
 800d090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d094:	d301      	bcc.n	800d09a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d096:	2301      	movs	r3, #1
 800d098:	e00f      	b.n	800d0ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d09a:	4a0a      	ldr	r2, [pc, #40]	@ (800d0c4 <SysTick_Config+0x40>)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	3b01      	subs	r3, #1
 800d0a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d0a2:	210f      	movs	r1, #15
 800d0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a8:	f7ff ff8e 	bl	800cfc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d0ac:	4b05      	ldr	r3, [pc, #20]	@ (800d0c4 <SysTick_Config+0x40>)
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d0b2:	4b04      	ldr	r3, [pc, #16]	@ (800d0c4 <SysTick_Config+0x40>)
 800d0b4:	2207      	movs	r2, #7
 800d0b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d0b8:	2300      	movs	r3, #0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	e000e010 	.word	0xe000e010

0800d0c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f7ff ff29 	bl	800cf28 <__NVIC_SetPriorityGrouping>
}
 800d0d6:	bf00      	nop
 800d0d8:	3708      	adds	r7, #8
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b086      	sub	sp, #24
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	60b9      	str	r1, [r7, #8]
 800d0e8:	607a      	str	r2, [r7, #4]
 800d0ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d0f0:	f7ff ff3e 	bl	800cf70 <__NVIC_GetPriorityGrouping>
 800d0f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	68b9      	ldr	r1, [r7, #8]
 800d0fa:	6978      	ldr	r0, [r7, #20]
 800d0fc:	f7ff ff8e 	bl	800d01c <NVIC_EncodePriority>
 800d100:	4602      	mov	r2, r0
 800d102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d106:	4611      	mov	r1, r2
 800d108:	4618      	mov	r0, r3
 800d10a:	f7ff ff5d 	bl	800cfc8 <__NVIC_SetPriority>
}
 800d10e:	bf00      	nop
 800d110:	3718      	adds	r7, #24
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b082      	sub	sp, #8
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	4603      	mov	r3, r0
 800d11e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d124:	4618      	mov	r0, r3
 800d126:	f7ff ff31 	bl	800cf8c <__NVIC_EnableIRQ>
}
 800d12a:	bf00      	nop
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b082      	sub	sp, #8
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7ff ffa2 	bl	800d084 <SysTick_Config>
 800d140:	4603      	mov	r3, r0
}
 800d142:	4618      	mov	r0, r3
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b084      	sub	sp, #16
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d156:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800d158:	f7ff feb6 	bl	800cec8 <HAL_GetTick>
 800d15c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d164:	b2db      	uxtb	r3, r3
 800d166:	2b02      	cmp	r3, #2
 800d168:	d008      	beq.n	800d17c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2280      	movs	r2, #128	@ 0x80
 800d16e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800d178:	2301      	movs	r3, #1
 800d17a:	e052      	b.n	800d222 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f022 0216 	bic.w	r2, r2, #22
 800d18a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	695a      	ldr	r2, [r3, #20]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d19a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d103      	bne.n	800d1ac <HAL_DMA_Abort+0x62>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d007      	beq.n	800d1bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f022 0208 	bic.w	r2, r2, #8
 800d1ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f022 0201 	bic.w	r2, r2, #1
 800d1ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d1cc:	e013      	b.n	800d1f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d1ce:	f7ff fe7b 	bl	800cec8 <HAL_GetTick>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	2b05      	cmp	r3, #5
 800d1da:	d90c      	bls.n	800d1f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2220      	movs	r2, #32
 800d1e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2203      	movs	r2, #3
 800d1e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	e015      	b.n	800d222 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f003 0301 	and.w	r3, r3, #1
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1e4      	bne.n	800d1ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d208:	223f      	movs	r2, #63	@ 0x3f
 800d20a:	409a      	lsls	r2, r3
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	3710      	adds	r7, #16
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d22a:	b480      	push	{r7}
 800d22c:	b083      	sub	sp, #12
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	2b02      	cmp	r3, #2
 800d23c:	d004      	beq.n	800d248 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2280      	movs	r2, #128	@ 0x80
 800d242:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800d244:	2301      	movs	r3, #1
 800d246:	e00c      	b.n	800d262 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2205      	movs	r2, #5
 800d24c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f022 0201 	bic.w	r2, r2, #1
 800d25e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d260:	2300      	movs	r3, #0
}
 800d262:	4618      	mov	r0, r3
 800d264:	370c      	adds	r7, #12
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr
	...

0800d270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d270:	b480      	push	{r7}
 800d272:	b089      	sub	sp, #36	@ 0x24
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d27a:	2300      	movs	r3, #0
 800d27c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d27e:	2300      	movs	r3, #0
 800d280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d282:	2300      	movs	r3, #0
 800d284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d286:	2300      	movs	r3, #0
 800d288:	61fb      	str	r3, [r7, #28]
 800d28a:	e16b      	b.n	800d564 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d28c:	2201      	movs	r2, #1
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	fa02 f303 	lsl.w	r3, r2, r3
 800d294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	697a      	ldr	r2, [r7, #20]
 800d29c:	4013      	ands	r3, r2
 800d29e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d2a0:	693a      	ldr	r2, [r7, #16]
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	f040 815a 	bne.w	800d55e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	f003 0303 	and.w	r3, r3, #3
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d005      	beq.n	800d2c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d2be:	2b02      	cmp	r3, #2
 800d2c0:	d130      	bne.n	800d324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	005b      	lsls	r3, r3, #1
 800d2cc:	2203      	movs	r2, #3
 800d2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d2d2:	43db      	mvns	r3, r3
 800d2d4:	69ba      	ldr	r2, [r7, #24]
 800d2d6:	4013      	ands	r3, r2
 800d2d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	68da      	ldr	r2, [r3, #12]
 800d2de:	69fb      	ldr	r3, [r7, #28]
 800d2e0:	005b      	lsls	r3, r3, #1
 800d2e2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2e6:	69ba      	ldr	r2, [r7, #24]
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	69ba      	ldr	r2, [r7, #24]
 800d2f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	69fb      	ldr	r3, [r7, #28]
 800d2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d300:	43db      	mvns	r3, r3
 800d302:	69ba      	ldr	r2, [r7, #24]
 800d304:	4013      	ands	r3, r2
 800d306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	091b      	lsrs	r3, r3, #4
 800d30e:	f003 0201 	and.w	r2, r3, #1
 800d312:	69fb      	ldr	r3, [r7, #28]
 800d314:	fa02 f303 	lsl.w	r3, r2, r3
 800d318:	69ba      	ldr	r2, [r7, #24]
 800d31a:	4313      	orrs	r3, r2
 800d31c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	69ba      	ldr	r2, [r7, #24]
 800d322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	f003 0303 	and.w	r3, r3, #3
 800d32c:	2b03      	cmp	r3, #3
 800d32e:	d017      	beq.n	800d360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	005b      	lsls	r3, r3, #1
 800d33a:	2203      	movs	r2, #3
 800d33c:	fa02 f303 	lsl.w	r3, r2, r3
 800d340:	43db      	mvns	r3, r3
 800d342:	69ba      	ldr	r2, [r7, #24]
 800d344:	4013      	ands	r3, r2
 800d346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	689a      	ldr	r2, [r3, #8]
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	005b      	lsls	r3, r3, #1
 800d350:	fa02 f303 	lsl.w	r3, r2, r3
 800d354:	69ba      	ldr	r2, [r7, #24]
 800d356:	4313      	orrs	r3, r2
 800d358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	69ba      	ldr	r2, [r7, #24]
 800d35e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	f003 0303 	and.w	r3, r3, #3
 800d368:	2b02      	cmp	r3, #2
 800d36a:	d123      	bne.n	800d3b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d36c:	69fb      	ldr	r3, [r7, #28]
 800d36e:	08da      	lsrs	r2, r3, #3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	3208      	adds	r2, #8
 800d374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	f003 0307 	and.w	r3, r3, #7
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	220f      	movs	r2, #15
 800d384:	fa02 f303 	lsl.w	r3, r2, r3
 800d388:	43db      	mvns	r3, r3
 800d38a:	69ba      	ldr	r2, [r7, #24]
 800d38c:	4013      	ands	r3, r2
 800d38e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	691a      	ldr	r2, [r3, #16]
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	f003 0307 	and.w	r3, r3, #7
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	fa02 f303 	lsl.w	r3, r2, r3
 800d3a0:	69ba      	ldr	r2, [r7, #24]
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d3a6:	69fb      	ldr	r3, [r7, #28]
 800d3a8:	08da      	lsrs	r2, r3, #3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	3208      	adds	r2, #8
 800d3ae:	69b9      	ldr	r1, [r7, #24]
 800d3b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d3ba:	69fb      	ldr	r3, [r7, #28]
 800d3bc:	005b      	lsls	r3, r3, #1
 800d3be:	2203      	movs	r2, #3
 800d3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d3c4:	43db      	mvns	r3, r3
 800d3c6:	69ba      	ldr	r2, [r7, #24]
 800d3c8:	4013      	ands	r3, r2
 800d3ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	f003 0203 	and.w	r2, r3, #3
 800d3d4:	69fb      	ldr	r3, [r7, #28]
 800d3d6:	005b      	lsls	r3, r3, #1
 800d3d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3dc:	69ba      	ldr	r2, [r7, #24]
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	69ba      	ldr	r2, [r7, #24]
 800d3e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f000 80b4 	beq.w	800d55e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	60fb      	str	r3, [r7, #12]
 800d3fa:	4b60      	ldr	r3, [pc, #384]	@ (800d57c <HAL_GPIO_Init+0x30c>)
 800d3fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3fe:	4a5f      	ldr	r2, [pc, #380]	@ (800d57c <HAL_GPIO_Init+0x30c>)
 800d400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d404:	6453      	str	r3, [r2, #68]	@ 0x44
 800d406:	4b5d      	ldr	r3, [pc, #372]	@ (800d57c <HAL_GPIO_Init+0x30c>)
 800d408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d40a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d40e:	60fb      	str	r3, [r7, #12]
 800d410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d412:	4a5b      	ldr	r2, [pc, #364]	@ (800d580 <HAL_GPIO_Init+0x310>)
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	089b      	lsrs	r3, r3, #2
 800d418:	3302      	adds	r3, #2
 800d41a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d41e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	f003 0303 	and.w	r3, r3, #3
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	220f      	movs	r2, #15
 800d42a:	fa02 f303 	lsl.w	r3, r2, r3
 800d42e:	43db      	mvns	r3, r3
 800d430:	69ba      	ldr	r2, [r7, #24]
 800d432:	4013      	ands	r3, r2
 800d434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4a52      	ldr	r2, [pc, #328]	@ (800d584 <HAL_GPIO_Init+0x314>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d02b      	beq.n	800d496 <HAL_GPIO_Init+0x226>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	4a51      	ldr	r2, [pc, #324]	@ (800d588 <HAL_GPIO_Init+0x318>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d025      	beq.n	800d492 <HAL_GPIO_Init+0x222>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4a50      	ldr	r2, [pc, #320]	@ (800d58c <HAL_GPIO_Init+0x31c>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d01f      	beq.n	800d48e <HAL_GPIO_Init+0x21e>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4a4f      	ldr	r2, [pc, #316]	@ (800d590 <HAL_GPIO_Init+0x320>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d019      	beq.n	800d48a <HAL_GPIO_Init+0x21a>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4a4e      	ldr	r2, [pc, #312]	@ (800d594 <HAL_GPIO_Init+0x324>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d013      	beq.n	800d486 <HAL_GPIO_Init+0x216>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4a4d      	ldr	r2, [pc, #308]	@ (800d598 <HAL_GPIO_Init+0x328>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d00d      	beq.n	800d482 <HAL_GPIO_Init+0x212>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	4a4c      	ldr	r2, [pc, #304]	@ (800d59c <HAL_GPIO_Init+0x32c>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d007      	beq.n	800d47e <HAL_GPIO_Init+0x20e>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4a4b      	ldr	r2, [pc, #300]	@ (800d5a0 <HAL_GPIO_Init+0x330>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d101      	bne.n	800d47a <HAL_GPIO_Init+0x20a>
 800d476:	2307      	movs	r3, #7
 800d478:	e00e      	b.n	800d498 <HAL_GPIO_Init+0x228>
 800d47a:	2308      	movs	r3, #8
 800d47c:	e00c      	b.n	800d498 <HAL_GPIO_Init+0x228>
 800d47e:	2306      	movs	r3, #6
 800d480:	e00a      	b.n	800d498 <HAL_GPIO_Init+0x228>
 800d482:	2305      	movs	r3, #5
 800d484:	e008      	b.n	800d498 <HAL_GPIO_Init+0x228>
 800d486:	2304      	movs	r3, #4
 800d488:	e006      	b.n	800d498 <HAL_GPIO_Init+0x228>
 800d48a:	2303      	movs	r3, #3
 800d48c:	e004      	b.n	800d498 <HAL_GPIO_Init+0x228>
 800d48e:	2302      	movs	r3, #2
 800d490:	e002      	b.n	800d498 <HAL_GPIO_Init+0x228>
 800d492:	2301      	movs	r3, #1
 800d494:	e000      	b.n	800d498 <HAL_GPIO_Init+0x228>
 800d496:	2300      	movs	r3, #0
 800d498:	69fa      	ldr	r2, [r7, #28]
 800d49a:	f002 0203 	and.w	r2, r2, #3
 800d49e:	0092      	lsls	r2, r2, #2
 800d4a0:	4093      	lsls	r3, r2
 800d4a2:	69ba      	ldr	r2, [r7, #24]
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d4a8:	4935      	ldr	r1, [pc, #212]	@ (800d580 <HAL_GPIO_Init+0x310>)
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	089b      	lsrs	r3, r3, #2
 800d4ae:	3302      	adds	r3, #2
 800d4b0:	69ba      	ldr	r2, [r7, #24]
 800d4b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d4b6:	4b3b      	ldr	r3, [pc, #236]	@ (800d5a4 <HAL_GPIO_Init+0x334>)
 800d4b8:	689b      	ldr	r3, [r3, #8]
 800d4ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	43db      	mvns	r3, r3
 800d4c0:	69ba      	ldr	r2, [r7, #24]
 800d4c2:	4013      	ands	r3, r2
 800d4c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d003      	beq.n	800d4da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800d4d2:	69ba      	ldr	r2, [r7, #24]
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d4da:	4a32      	ldr	r2, [pc, #200]	@ (800d5a4 <HAL_GPIO_Init+0x334>)
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d4e0:	4b30      	ldr	r3, [pc, #192]	@ (800d5a4 <HAL_GPIO_Init+0x334>)
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	43db      	mvns	r3, r3
 800d4ea:	69ba      	ldr	r2, [r7, #24]
 800d4ec:	4013      	ands	r3, r2
 800d4ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d003      	beq.n	800d504 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800d4fc:	69ba      	ldr	r2, [r7, #24]
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	4313      	orrs	r3, r2
 800d502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d504:	4a27      	ldr	r2, [pc, #156]	@ (800d5a4 <HAL_GPIO_Init+0x334>)
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800d50a:	4b26      	ldr	r3, [pc, #152]	@ (800d5a4 <HAL_GPIO_Init+0x334>)
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	43db      	mvns	r3, r3
 800d514:	69ba      	ldr	r2, [r7, #24]
 800d516:	4013      	ands	r3, r2
 800d518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d522:	2b00      	cmp	r3, #0
 800d524:	d003      	beq.n	800d52e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800d526:	69ba      	ldr	r2, [r7, #24]
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	4313      	orrs	r3, r2
 800d52c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d52e:	4a1d      	ldr	r2, [pc, #116]	@ (800d5a4 <HAL_GPIO_Init+0x334>)
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d534:	4b1b      	ldr	r3, [pc, #108]	@ (800d5a4 <HAL_GPIO_Init+0x334>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	43db      	mvns	r3, r3
 800d53e:	69ba      	ldr	r2, [r7, #24]
 800d540:	4013      	ands	r3, r2
 800d542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d003      	beq.n	800d558 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800d550:	69ba      	ldr	r2, [r7, #24]
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	4313      	orrs	r3, r2
 800d556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d558:	4a12      	ldr	r2, [pc, #72]	@ (800d5a4 <HAL_GPIO_Init+0x334>)
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d55e:	69fb      	ldr	r3, [r7, #28]
 800d560:	3301      	adds	r3, #1
 800d562:	61fb      	str	r3, [r7, #28]
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	2b0f      	cmp	r3, #15
 800d568:	f67f ae90 	bls.w	800d28c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d56c:	bf00      	nop
 800d56e:	bf00      	nop
 800d570:	3724      	adds	r7, #36	@ 0x24
 800d572:	46bd      	mov	sp, r7
 800d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d578:	4770      	bx	lr
 800d57a:	bf00      	nop
 800d57c:	40023800 	.word	0x40023800
 800d580:	40013800 	.word	0x40013800
 800d584:	40020000 	.word	0x40020000
 800d588:	40020400 	.word	0x40020400
 800d58c:	40020800 	.word	0x40020800
 800d590:	40020c00 	.word	0x40020c00
 800d594:	40021000 	.word	0x40021000
 800d598:	40021400 	.word	0x40021400
 800d59c:	40021800 	.word	0x40021800
 800d5a0:	40021c00 	.word	0x40021c00
 800d5a4:	40013c00 	.word	0x40013c00

0800d5a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	691a      	ldr	r2, [r3, #16]
 800d5b8:	887b      	ldrh	r3, [r7, #2]
 800d5ba:	4013      	ands	r3, r2
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d002      	beq.n	800d5c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	73fb      	strb	r3, [r7, #15]
 800d5c4:	e001      	b.n	800d5ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3714      	adds	r7, #20
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr

0800d5d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b083      	sub	sp, #12
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	807b      	strh	r3, [r7, #2]
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d5e8:	787b      	ldrb	r3, [r7, #1]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d003      	beq.n	800d5f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d5ee:	887a      	ldrh	r2, [r7, #2]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d5f4:	e003      	b.n	800d5fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d5f6:	887b      	ldrh	r3, [r7, #2]
 800d5f8:	041a      	lsls	r2, r3, #16
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	619a      	str	r2, [r3, #24]
}
 800d5fe:	bf00      	nop
 800d600:	370c      	adds	r7, #12
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr
	...

0800d60c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	4603      	mov	r3, r0
 800d614:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800d616:	4b08      	ldr	r3, [pc, #32]	@ (800d638 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d618:	695a      	ldr	r2, [r3, #20]
 800d61a:	88fb      	ldrh	r3, [r7, #6]
 800d61c:	4013      	ands	r3, r2
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d006      	beq.n	800d630 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d622:	4a05      	ldr	r2, [pc, #20]	@ (800d638 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d624:	88fb      	ldrh	r3, [r7, #6]
 800d626:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d628:	88fb      	ldrh	r3, [r7, #6]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7fe fcf0 	bl	800c010 <HAL_GPIO_EXTI_Callback>
  }
}
 800d630:	bf00      	nop
 800d632:	3708      	adds	r7, #8
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	40013c00 	.word	0x40013c00

0800d63c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d101      	bne.n	800d64e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d64a:	2301      	movs	r3, #1
 800d64c:	e12b      	b.n	800d8a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d654:	b2db      	uxtb	r3, r3
 800d656:	2b00      	cmp	r3, #0
 800d658:	d106      	bne.n	800d668 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7f7 fe6c 	bl	8005340 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2224      	movs	r2, #36	@ 0x24
 800d66c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f022 0201 	bic.w	r2, r2, #1
 800d67e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d68e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	681a      	ldr	r2, [r3, #0]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d69e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d6a0:	f001 fda0 	bl	800f1e4 <HAL_RCC_GetPCLK1Freq>
 800d6a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	4a81      	ldr	r2, [pc, #516]	@ (800d8b0 <HAL_I2C_Init+0x274>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d807      	bhi.n	800d6c0 <HAL_I2C_Init+0x84>
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	4a80      	ldr	r2, [pc, #512]	@ (800d8b4 <HAL_I2C_Init+0x278>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	bf94      	ite	ls
 800d6b8:	2301      	movls	r3, #1
 800d6ba:	2300      	movhi	r3, #0
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	e006      	b.n	800d6ce <HAL_I2C_Init+0x92>
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	4a7d      	ldr	r2, [pc, #500]	@ (800d8b8 <HAL_I2C_Init+0x27c>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	bf94      	ite	ls
 800d6c8:	2301      	movls	r3, #1
 800d6ca:	2300      	movhi	r3, #0
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	e0e7      	b.n	800d8a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	4a78      	ldr	r2, [pc, #480]	@ (800d8bc <HAL_I2C_Init+0x280>)
 800d6da:	fba2 2303 	umull	r2, r3, r2, r3
 800d6de:	0c9b      	lsrs	r3, r3, #18
 800d6e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	68ba      	ldr	r2, [r7, #8]
 800d6f2:	430a      	orrs	r2, r1
 800d6f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	6a1b      	ldr	r3, [r3, #32]
 800d6fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	4a6a      	ldr	r2, [pc, #424]	@ (800d8b0 <HAL_I2C_Init+0x274>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d802      	bhi.n	800d710 <HAL_I2C_Init+0xd4>
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	3301      	adds	r3, #1
 800d70e:	e009      	b.n	800d724 <HAL_I2C_Init+0xe8>
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d716:	fb02 f303 	mul.w	r3, r2, r3
 800d71a:	4a69      	ldr	r2, [pc, #420]	@ (800d8c0 <HAL_I2C_Init+0x284>)
 800d71c:	fba2 2303 	umull	r2, r3, r2, r3
 800d720:	099b      	lsrs	r3, r3, #6
 800d722:	3301      	adds	r3, #1
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	6812      	ldr	r2, [r2, #0]
 800d728:	430b      	orrs	r3, r1
 800d72a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	69db      	ldr	r3, [r3, #28]
 800d732:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800d736:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	495c      	ldr	r1, [pc, #368]	@ (800d8b0 <HAL_I2C_Init+0x274>)
 800d740:	428b      	cmp	r3, r1
 800d742:	d819      	bhi.n	800d778 <HAL_I2C_Init+0x13c>
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	1e59      	subs	r1, r3, #1
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	005b      	lsls	r3, r3, #1
 800d74e:	fbb1 f3f3 	udiv	r3, r1, r3
 800d752:	1c59      	adds	r1, r3, #1
 800d754:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d758:	400b      	ands	r3, r1
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00a      	beq.n	800d774 <HAL_I2C_Init+0x138>
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	1e59      	subs	r1, r3, #1
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	005b      	lsls	r3, r3, #1
 800d768:	fbb1 f3f3 	udiv	r3, r1, r3
 800d76c:	3301      	adds	r3, #1
 800d76e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d772:	e051      	b.n	800d818 <HAL_I2C_Init+0x1dc>
 800d774:	2304      	movs	r3, #4
 800d776:	e04f      	b.n	800d818 <HAL_I2C_Init+0x1dc>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d111      	bne.n	800d7a4 <HAL_I2C_Init+0x168>
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	1e58      	subs	r0, r3, #1
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6859      	ldr	r1, [r3, #4]
 800d788:	460b      	mov	r3, r1
 800d78a:	005b      	lsls	r3, r3, #1
 800d78c:	440b      	add	r3, r1
 800d78e:	fbb0 f3f3 	udiv	r3, r0, r3
 800d792:	3301      	adds	r3, #1
 800d794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d798:	2b00      	cmp	r3, #0
 800d79a:	bf0c      	ite	eq
 800d79c:	2301      	moveq	r3, #1
 800d79e:	2300      	movne	r3, #0
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	e012      	b.n	800d7ca <HAL_I2C_Init+0x18e>
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	1e58      	subs	r0, r3, #1
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6859      	ldr	r1, [r3, #4]
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	440b      	add	r3, r1
 800d7b2:	0099      	lsls	r1, r3, #2
 800d7b4:	440b      	add	r3, r1
 800d7b6:	fbb0 f3f3 	udiv	r3, r0, r3
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	bf0c      	ite	eq
 800d7c4:	2301      	moveq	r3, #1
 800d7c6:	2300      	movne	r3, #0
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d001      	beq.n	800d7d2 <HAL_I2C_Init+0x196>
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	e022      	b.n	800d818 <HAL_I2C_Init+0x1dc>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	689b      	ldr	r3, [r3, #8]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d10e      	bne.n	800d7f8 <HAL_I2C_Init+0x1bc>
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	1e58      	subs	r0, r3, #1
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6859      	ldr	r1, [r3, #4]
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	005b      	lsls	r3, r3, #1
 800d7e6:	440b      	add	r3, r1
 800d7e8:	fbb0 f3f3 	udiv	r3, r0, r3
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d7f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7f6:	e00f      	b.n	800d818 <HAL_I2C_Init+0x1dc>
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	1e58      	subs	r0, r3, #1
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6859      	ldr	r1, [r3, #4]
 800d800:	460b      	mov	r3, r1
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	440b      	add	r3, r1
 800d806:	0099      	lsls	r1, r3, #2
 800d808:	440b      	add	r3, r1
 800d80a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d80e:	3301      	adds	r3, #1
 800d810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d814:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d818:	6879      	ldr	r1, [r7, #4]
 800d81a:	6809      	ldr	r1, [r1, #0]
 800d81c:	4313      	orrs	r3, r2
 800d81e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	69da      	ldr	r2, [r3, #28]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6a1b      	ldr	r3, [r3, #32]
 800d832:	431a      	orrs	r2, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	430a      	orrs	r2, r1
 800d83a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800d846:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	6911      	ldr	r1, [r2, #16]
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	68d2      	ldr	r2, [r2, #12]
 800d852:	4311      	orrs	r1, r2
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	6812      	ldr	r2, [r2, #0]
 800d858:	430b      	orrs	r3, r1
 800d85a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	695a      	ldr	r2, [r3, #20]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	699b      	ldr	r3, [r3, #24]
 800d86e:	431a      	orrs	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	430a      	orrs	r2, r1
 800d876:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f042 0201 	orr.w	r2, r2, #1
 800d886:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2200      	movs	r2, #0
 800d88c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2220      	movs	r2, #32
 800d892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3710      	adds	r7, #16
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	000186a0 	.word	0x000186a0
 800d8b4:	001e847f 	.word	0x001e847f
 800d8b8:	003d08ff 	.word	0x003d08ff
 800d8bc:	431bde83 	.word	0x431bde83
 800d8c0:	10624dd3 	.word	0x10624dd3

0800d8c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b088      	sub	sp, #32
 800d8c8:	af02      	add	r7, sp, #8
 800d8ca:	60f8      	str	r0, [r7, #12]
 800d8cc:	607a      	str	r2, [r7, #4]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	817b      	strh	r3, [r7, #10]
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d8d8:	f7ff faf6 	bl	800cec8 <HAL_GetTick>
 800d8dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	2b20      	cmp	r3, #32
 800d8e8:	f040 80e0 	bne.w	800daac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	2319      	movs	r3, #25
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	4970      	ldr	r1, [pc, #448]	@ (800dab8 <HAL_I2C_Master_Transmit+0x1f4>)
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f000 fe0e 	bl	800e518 <I2C_WaitOnFlagUntilTimeout>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d001      	beq.n	800d906 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800d902:	2302      	movs	r3, #2
 800d904:	e0d3      	b.n	800daae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d101      	bne.n	800d914 <HAL_I2C_Master_Transmit+0x50>
 800d910:	2302      	movs	r3, #2
 800d912:	e0cc      	b.n	800daae <HAL_I2C_Master_Transmit+0x1ea>
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2201      	movs	r2, #1
 800d918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f003 0301 	and.w	r3, r3, #1
 800d926:	2b01      	cmp	r3, #1
 800d928:	d007      	beq.n	800d93a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f042 0201 	orr.w	r2, r2, #1
 800d938:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d948:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2221      	movs	r2, #33	@ 0x21
 800d94e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2210      	movs	r2, #16
 800d956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2200      	movs	r2, #0
 800d95e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	893a      	ldrh	r2, [r7, #8]
 800d96a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d970:	b29a      	uxth	r2, r3
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	4a50      	ldr	r2, [pc, #320]	@ (800dabc <HAL_I2C_Master_Transmit+0x1f8>)
 800d97a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d97c:	8979      	ldrh	r1, [r7, #10]
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	6a3a      	ldr	r2, [r7, #32]
 800d982:	68f8      	ldr	r0, [r7, #12]
 800d984:	f000 fbc8 	bl	800e118 <I2C_MasterRequestWrite>
 800d988:	4603      	mov	r3, r0
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d001      	beq.n	800d992 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800d98e:	2301      	movs	r3, #1
 800d990:	e08d      	b.n	800daae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d992:	2300      	movs	r3, #0
 800d994:	613b      	str	r3, [r7, #16]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	695b      	ldr	r3, [r3, #20]
 800d99c:	613b      	str	r3, [r7, #16]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	699b      	ldr	r3, [r3, #24]
 800d9a4:	613b      	str	r3, [r7, #16]
 800d9a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800d9a8:	e066      	b.n	800da78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d9aa:	697a      	ldr	r2, [r7, #20]
 800d9ac:	6a39      	ldr	r1, [r7, #32]
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	f000 fecc 	bl	800e74c <I2C_WaitOnTXEFlagUntilTimeout>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00d      	beq.n	800d9d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9be:	2b04      	cmp	r3, #4
 800d9c0:	d107      	bne.n	800d9d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d9d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e06b      	b.n	800daae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9da:	781a      	ldrb	r2, [r3, #0]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9e6:	1c5a      	adds	r2, r3, #1
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	3b01      	subs	r3, #1
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9fe:	3b01      	subs	r3, #1
 800da00:	b29a      	uxth	r2, r3
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	695b      	ldr	r3, [r3, #20]
 800da0c:	f003 0304 	and.w	r3, r3, #4
 800da10:	2b04      	cmp	r3, #4
 800da12:	d11b      	bne.n	800da4c <HAL_I2C_Master_Transmit+0x188>
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d017      	beq.n	800da4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da20:	781a      	ldrb	r2, [r3, #0]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da2c:	1c5a      	adds	r2, r3, #1
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da36:	b29b      	uxth	r3, r3
 800da38:	3b01      	subs	r3, #1
 800da3a:	b29a      	uxth	r2, r3
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da44:	3b01      	subs	r3, #1
 800da46:	b29a      	uxth	r2, r3
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da4c:	697a      	ldr	r2, [r7, #20]
 800da4e:	6a39      	ldr	r1, [r7, #32]
 800da50:	68f8      	ldr	r0, [r7, #12]
 800da52:	f000 fec3 	bl	800e7dc <I2C_WaitOnBTFFlagUntilTimeout>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00d      	beq.n	800da78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da60:	2b04      	cmp	r3, #4
 800da62:	d107      	bne.n	800da74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800da74:	2301      	movs	r3, #1
 800da76:	e01a      	b.n	800daae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d194      	bne.n	800d9aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	681a      	ldr	r2, [r3, #0]
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2220      	movs	r2, #32
 800da94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2200      	movs	r2, #0
 800da9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2200      	movs	r2, #0
 800daa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800daa8:	2300      	movs	r3, #0
 800daaa:	e000      	b.n	800daae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800daac:	2302      	movs	r3, #2
  }
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3718      	adds	r7, #24
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	00100002 	.word	0x00100002
 800dabc:	ffff0000 	.word	0xffff0000

0800dac0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b088      	sub	sp, #32
 800dac4:	af02      	add	r7, sp, #8
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	4608      	mov	r0, r1
 800daca:	4611      	mov	r1, r2
 800dacc:	461a      	mov	r2, r3
 800dace:	4603      	mov	r3, r0
 800dad0:	817b      	strh	r3, [r7, #10]
 800dad2:	460b      	mov	r3, r1
 800dad4:	813b      	strh	r3, [r7, #8]
 800dad6:	4613      	mov	r3, r2
 800dad8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dada:	f7ff f9f5 	bl	800cec8 <HAL_GetTick>
 800dade:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	2b20      	cmp	r3, #32
 800daea:	f040 80d9 	bne.w	800dca0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	2319      	movs	r3, #25
 800daf4:	2201      	movs	r2, #1
 800daf6:	496d      	ldr	r1, [pc, #436]	@ (800dcac <HAL_I2C_Mem_Write+0x1ec>)
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f000 fd0d 	bl	800e518 <I2C_WaitOnFlagUntilTimeout>
 800dafe:	4603      	mov	r3, r0
 800db00:	2b00      	cmp	r3, #0
 800db02:	d001      	beq.n	800db08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800db04:	2302      	movs	r3, #2
 800db06:	e0cc      	b.n	800dca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800db0e:	2b01      	cmp	r3, #1
 800db10:	d101      	bne.n	800db16 <HAL_I2C_Mem_Write+0x56>
 800db12:	2302      	movs	r3, #2
 800db14:	e0c5      	b.n	800dca2 <HAL_I2C_Mem_Write+0x1e2>
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2201      	movs	r2, #1
 800db1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f003 0301 	and.w	r3, r3, #1
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d007      	beq.n	800db3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f042 0201 	orr.w	r2, r2, #1
 800db3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800db4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	2221      	movs	r2, #33	@ 0x21
 800db50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2240      	movs	r2, #64	@ 0x40
 800db58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2200      	movs	r2, #0
 800db60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	6a3a      	ldr	r2, [r7, #32]
 800db66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800db6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db72:	b29a      	uxth	r2, r3
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	4a4d      	ldr	r2, [pc, #308]	@ (800dcb0 <HAL_I2C_Mem_Write+0x1f0>)
 800db7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800db7e:	88f8      	ldrh	r0, [r7, #6]
 800db80:	893a      	ldrh	r2, [r7, #8]
 800db82:	8979      	ldrh	r1, [r7, #10]
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	9301      	str	r3, [sp, #4]
 800db88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	4603      	mov	r3, r0
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	f000 fb44 	bl	800e21c <I2C_RequestMemoryWrite>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d052      	beq.n	800dc40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800db9a:	2301      	movs	r3, #1
 800db9c:	e081      	b.n	800dca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800db9e:	697a      	ldr	r2, [r7, #20]
 800dba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dba2:	68f8      	ldr	r0, [r7, #12]
 800dba4:	f000 fdd2 	bl	800e74c <I2C_WaitOnTXEFlagUntilTimeout>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00d      	beq.n	800dbca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbb2:	2b04      	cmp	r3, #4
 800dbb4:	d107      	bne.n	800dbc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dbc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e06b      	b.n	800dca2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbce:	781a      	ldrb	r2, [r3, #0]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbda:	1c5a      	adds	r2, r3, #1
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbe4:	3b01      	subs	r3, #1
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dbf0:	b29b      	uxth	r3, r3
 800dbf2:	3b01      	subs	r3, #1
 800dbf4:	b29a      	uxth	r2, r3
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	695b      	ldr	r3, [r3, #20]
 800dc00:	f003 0304 	and.w	r3, r3, #4
 800dc04:	2b04      	cmp	r3, #4
 800dc06:	d11b      	bne.n	800dc40 <HAL_I2C_Mem_Write+0x180>
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d017      	beq.n	800dc40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc14:	781a      	ldrb	r2, [r3, #0]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc20:	1c5a      	adds	r2, r3, #1
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	3b01      	subs	r3, #1
 800dc3a:	b29a      	uxth	r2, r3
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d1aa      	bne.n	800db9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc48:	697a      	ldr	r2, [r7, #20]
 800dc4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc4c:	68f8      	ldr	r0, [r7, #12]
 800dc4e:	f000 fdc5 	bl	800e7dc <I2C_WaitOnBTFFlagUntilTimeout>
 800dc52:	4603      	mov	r3, r0
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d00d      	beq.n	800dc74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc5c:	2b04      	cmp	r3, #4
 800dc5e:	d107      	bne.n	800dc70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	681a      	ldr	r2, [r3, #0]
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dc6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800dc70:	2301      	movs	r3, #1
 800dc72:	e016      	b.n	800dca2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dc82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2220      	movs	r2, #32
 800dc88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2200      	movs	r2, #0
 800dc98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	e000      	b.n	800dca2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800dca0:	2302      	movs	r3, #2
  }
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3718      	adds	r7, #24
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	00100002 	.word	0x00100002
 800dcb0:	ffff0000 	.word	0xffff0000

0800dcb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b08c      	sub	sp, #48	@ 0x30
 800dcb8:	af02      	add	r7, sp, #8
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	4608      	mov	r0, r1
 800dcbe:	4611      	mov	r1, r2
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	817b      	strh	r3, [r7, #10]
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	813b      	strh	r3, [r7, #8]
 800dcca:	4613      	mov	r3, r2
 800dccc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dcce:	f7ff f8fb 	bl	800cec8 <HAL_GetTick>
 800dcd2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b20      	cmp	r3, #32
 800dcde:	f040 8214 	bne.w	800e10a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	2319      	movs	r3, #25
 800dce8:	2201      	movs	r2, #1
 800dcea:	497b      	ldr	r1, [pc, #492]	@ (800ded8 <HAL_I2C_Mem_Read+0x224>)
 800dcec:	68f8      	ldr	r0, [r7, #12]
 800dcee:	f000 fc13 	bl	800e518 <I2C_WaitOnFlagUntilTimeout>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d001      	beq.n	800dcfc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800dcf8:	2302      	movs	r3, #2
 800dcfa:	e207      	b.n	800e10c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d101      	bne.n	800dd0a <HAL_I2C_Mem_Read+0x56>
 800dd06:	2302      	movs	r3, #2
 800dd08:	e200      	b.n	800e10c <HAL_I2C_Mem_Read+0x458>
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f003 0301 	and.w	r3, r3, #1
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d007      	beq.n	800dd30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f042 0201 	orr.w	r2, r2, #1
 800dd2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dd3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2222      	movs	r2, #34	@ 0x22
 800dd44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2240      	movs	r2, #64	@ 0x40
 800dd4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2200      	movs	r2, #0
 800dd54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800dd60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	4a5b      	ldr	r2, [pc, #364]	@ (800dedc <HAL_I2C_Mem_Read+0x228>)
 800dd70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dd72:	88f8      	ldrh	r0, [r7, #6]
 800dd74:	893a      	ldrh	r2, [r7, #8]
 800dd76:	8979      	ldrh	r1, [r7, #10]
 800dd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd7a:	9301      	str	r3, [sp, #4]
 800dd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd7e:	9300      	str	r3, [sp, #0]
 800dd80:	4603      	mov	r3, r0
 800dd82:	68f8      	ldr	r0, [r7, #12]
 800dd84:	f000 fae0 	bl	800e348 <I2C_RequestMemoryRead>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d001      	beq.n	800dd92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800dd8e:	2301      	movs	r3, #1
 800dd90:	e1bc      	b.n	800e10c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d113      	bne.n	800ddc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	623b      	str	r3, [r7, #32]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	695b      	ldr	r3, [r3, #20]
 800dda4:	623b      	str	r3, [r7, #32]
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	699b      	ldr	r3, [r3, #24]
 800ddac:	623b      	str	r3, [r7, #32]
 800ddae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ddbe:	601a      	str	r2, [r3, #0]
 800ddc0:	e190      	b.n	800e0e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d11b      	bne.n	800de02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	681a      	ldr	r2, [r3, #0]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ddd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ddda:	2300      	movs	r3, #0
 800dddc:	61fb      	str	r3, [r7, #28]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	695b      	ldr	r3, [r3, #20]
 800dde4:	61fb      	str	r3, [r7, #28]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	699b      	ldr	r3, [r3, #24]
 800ddec:	61fb      	str	r3, [r7, #28]
 800ddee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ddfe:	601a      	str	r2, [r3, #0]
 800de00:	e170      	b.n	800e0e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de06:	2b02      	cmp	r3, #2
 800de08:	d11b      	bne.n	800de42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	681a      	ldr	r2, [r3, #0]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800de18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	681a      	ldr	r2, [r3, #0]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de2a:	2300      	movs	r3, #0
 800de2c:	61bb      	str	r3, [r7, #24]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	695b      	ldr	r3, [r3, #20]
 800de34:	61bb      	str	r3, [r7, #24]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	699b      	ldr	r3, [r3, #24]
 800de3c:	61bb      	str	r3, [r7, #24]
 800de3e:	69bb      	ldr	r3, [r7, #24]
 800de40:	e150      	b.n	800e0e4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de42:	2300      	movs	r3, #0
 800de44:	617b      	str	r3, [r7, #20]
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	695b      	ldr	r3, [r3, #20]
 800de4c:	617b      	str	r3, [r7, #20]
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	699b      	ldr	r3, [r3, #24]
 800de54:	617b      	str	r3, [r7, #20]
 800de56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800de58:	e144      	b.n	800e0e4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de5e:	2b03      	cmp	r3, #3
 800de60:	f200 80f1 	bhi.w	800e046 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d123      	bne.n	800deb4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800de6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800de70:	68f8      	ldr	r0, [r7, #12]
 800de72:	f000 fcfb 	bl	800e86c <I2C_WaitOnRXNEFlagUntilTimeout>
 800de76:	4603      	mov	r3, r0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d001      	beq.n	800de80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800de7c:	2301      	movs	r3, #1
 800de7e:	e145      	b.n	800e10c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	691a      	ldr	r2, [r3, #16]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de8a:	b2d2      	uxtb	r2, r2
 800de8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de92:	1c5a      	adds	r2, r3, #1
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de9c:	3b01      	subs	r3, #1
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dea8:	b29b      	uxth	r3, r3
 800deaa:	3b01      	subs	r3, #1
 800deac:	b29a      	uxth	r2, r3
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800deb2:	e117      	b.n	800e0e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800deb8:	2b02      	cmp	r3, #2
 800deba:	d14e      	bne.n	800df5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800debc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dec2:	2200      	movs	r2, #0
 800dec4:	4906      	ldr	r1, [pc, #24]	@ (800dee0 <HAL_I2C_Mem_Read+0x22c>)
 800dec6:	68f8      	ldr	r0, [r7, #12]
 800dec8:	f000 fb26 	bl	800e518 <I2C_WaitOnFlagUntilTimeout>
 800decc:	4603      	mov	r3, r0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d008      	beq.n	800dee4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800ded2:	2301      	movs	r3, #1
 800ded4:	e11a      	b.n	800e10c <HAL_I2C_Mem_Read+0x458>
 800ded6:	bf00      	nop
 800ded8:	00100002 	.word	0x00100002
 800dedc:	ffff0000 	.word	0xffff0000
 800dee0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800def2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	691a      	ldr	r2, [r3, #16]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800defe:	b2d2      	uxtb	r2, r2
 800df00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df06:	1c5a      	adds	r2, r3, #1
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df10:	3b01      	subs	r3, #1
 800df12:	b29a      	uxth	r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	3b01      	subs	r3, #1
 800df20:	b29a      	uxth	r2, r3
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	691a      	ldr	r2, [r3, #16]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df30:	b2d2      	uxtb	r2, r2
 800df32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df38:	1c5a      	adds	r2, r3, #1
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df42:	3b01      	subs	r3, #1
 800df44:	b29a      	uxth	r2, r3
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df4e:	b29b      	uxth	r3, r3
 800df50:	3b01      	subs	r3, #1
 800df52:	b29a      	uxth	r2, r3
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800df58:	e0c4      	b.n	800e0e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800df5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df5c:	9300      	str	r3, [sp, #0]
 800df5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df60:	2200      	movs	r2, #0
 800df62:	496c      	ldr	r1, [pc, #432]	@ (800e114 <HAL_I2C_Mem_Read+0x460>)
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f000 fad7 	bl	800e518 <I2C_WaitOnFlagUntilTimeout>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d001      	beq.n	800df74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800df70:	2301      	movs	r3, #1
 800df72:	e0cb      	b.n	800e10c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800df82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	691a      	ldr	r2, [r3, #16]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df8e:	b2d2      	uxtb	r2, r2
 800df90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df96:	1c5a      	adds	r2, r3, #1
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfa0:	3b01      	subs	r3, #1
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	3b01      	subs	r3, #1
 800dfb0:	b29a      	uxth	r2, r3
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb8:	9300      	str	r3, [sp, #0]
 800dfba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	4955      	ldr	r1, [pc, #340]	@ (800e114 <HAL_I2C_Mem_Read+0x460>)
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	f000 faa9 	bl	800e518 <I2C_WaitOnFlagUntilTimeout>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d001      	beq.n	800dfd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	e09d      	b.n	800e10c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dfde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	691a      	ldr	r2, [r3, #16]
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfea:	b2d2      	uxtb	r2, r2
 800dfec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dff2:	1c5a      	adds	r2, r3, #1
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dffc:	3b01      	subs	r3, #1
 800dffe:	b29a      	uxth	r2, r3
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e008:	b29b      	uxth	r3, r3
 800e00a:	3b01      	subs	r3, #1
 800e00c:	b29a      	uxth	r2, r3
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	691a      	ldr	r2, [r3, #16]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e01c:	b2d2      	uxtb	r2, r2
 800e01e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e024:	1c5a      	adds	r2, r3, #1
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e02e:	3b01      	subs	r3, #1
 800e030:	b29a      	uxth	r2, r3
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	3b01      	subs	r3, #1
 800e03e:	b29a      	uxth	r2, r3
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e044:	e04e      	b.n	800e0e4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e048:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e04a:	68f8      	ldr	r0, [r7, #12]
 800e04c:	f000 fc0e 	bl	800e86c <I2C_WaitOnRXNEFlagUntilTimeout>
 800e050:	4603      	mov	r3, r0
 800e052:	2b00      	cmp	r3, #0
 800e054:	d001      	beq.n	800e05a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	e058      	b.n	800e10c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	691a      	ldr	r2, [r3, #16]
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e064:	b2d2      	uxtb	r2, r2
 800e066:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e06c:	1c5a      	adds	r2, r3, #1
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e076:	3b01      	subs	r3, #1
 800e078:	b29a      	uxth	r2, r3
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e082:	b29b      	uxth	r3, r3
 800e084:	3b01      	subs	r3, #1
 800e086:	b29a      	uxth	r2, r3
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	695b      	ldr	r3, [r3, #20]
 800e092:	f003 0304 	and.w	r3, r3, #4
 800e096:	2b04      	cmp	r3, #4
 800e098:	d124      	bne.n	800e0e4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e09e:	2b03      	cmp	r3, #3
 800e0a0:	d107      	bne.n	800e0b2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e0b0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	691a      	ldr	r2, [r3, #16]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0bc:	b2d2      	uxtb	r2, r2
 800e0be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0c4:	1c5a      	adds	r2, r3, #1
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0ce:	3b01      	subs	r3, #1
 800e0d0:	b29a      	uxth	r2, r3
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	3b01      	subs	r3, #1
 800e0de:	b29a      	uxth	r2, r3
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f47f aeb6 	bne.w	800de5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2220      	movs	r2, #32
 800e0f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2200      	movs	r2, #0
 800e102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800e106:	2300      	movs	r3, #0
 800e108:	e000      	b.n	800e10c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800e10a:	2302      	movs	r3, #2
  }
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3728      	adds	r7, #40	@ 0x28
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	00010004 	.word	0x00010004

0800e118 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b088      	sub	sp, #32
 800e11c:	af02      	add	r7, sp, #8
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	607a      	str	r2, [r7, #4]
 800e122:	603b      	str	r3, [r7, #0]
 800e124:	460b      	mov	r3, r1
 800e126:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e12c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	2b08      	cmp	r3, #8
 800e132:	d006      	beq.n	800e142 <I2C_MasterRequestWrite+0x2a>
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	2b01      	cmp	r3, #1
 800e138:	d003      	beq.n	800e142 <I2C_MasterRequestWrite+0x2a>
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e140:	d108      	bne.n	800e154 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e150:	601a      	str	r2, [r3, #0]
 800e152:	e00b      	b.n	800e16c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e158:	2b12      	cmp	r3, #18
 800e15a:	d107      	bne.n	800e16c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e16a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e178:	68f8      	ldr	r0, [r7, #12]
 800e17a:	f000 f9cd 	bl	800e518 <I2C_WaitOnFlagUntilTimeout>
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d00d      	beq.n	800e1a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e18e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e192:	d103      	bne.n	800e19c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e19a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e19c:	2303      	movs	r3, #3
 800e19e:	e035      	b.n	800e20c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	691b      	ldr	r3, [r3, #16]
 800e1a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e1a8:	d108      	bne.n	800e1bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e1aa:	897b      	ldrh	r3, [r7, #10]
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e1b8:	611a      	str	r2, [r3, #16]
 800e1ba:	e01b      	b.n	800e1f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e1bc:	897b      	ldrh	r3, [r7, #10]
 800e1be:	11db      	asrs	r3, r3, #7
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	f003 0306 	and.w	r3, r3, #6
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	f063 030f 	orn	r3, r3, #15
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	490e      	ldr	r1, [pc, #56]	@ (800e214 <I2C_MasterRequestWrite+0xfc>)
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f000 fa16 	bl	800e60c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d001      	beq.n	800e1ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e010      	b.n	800e20c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e1ea:	897b      	ldrh	r3, [r7, #10]
 800e1ec:	b2da      	uxtb	r2, r3
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	4907      	ldr	r1, [pc, #28]	@ (800e218 <I2C_MasterRequestWrite+0x100>)
 800e1fa:	68f8      	ldr	r0, [r7, #12]
 800e1fc:	f000 fa06 	bl	800e60c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e200:	4603      	mov	r3, r0
 800e202:	2b00      	cmp	r3, #0
 800e204:	d001      	beq.n	800e20a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e206:	2301      	movs	r3, #1
 800e208:	e000      	b.n	800e20c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e20a:	2300      	movs	r3, #0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3718      	adds	r7, #24
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	00010008 	.word	0x00010008
 800e218:	00010002 	.word	0x00010002

0800e21c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b088      	sub	sp, #32
 800e220:	af02      	add	r7, sp, #8
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	4608      	mov	r0, r1
 800e226:	4611      	mov	r1, r2
 800e228:	461a      	mov	r2, r3
 800e22a:	4603      	mov	r3, r0
 800e22c:	817b      	strh	r3, [r7, #10]
 800e22e:	460b      	mov	r3, r1
 800e230:	813b      	strh	r3, [r7, #8]
 800e232:	4613      	mov	r3, r2
 800e234:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e244:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	6a3b      	ldr	r3, [r7, #32]
 800e24c:	2200      	movs	r2, #0
 800e24e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e252:	68f8      	ldr	r0, [r7, #12]
 800e254:	f000 f960 	bl	800e518 <I2C_WaitOnFlagUntilTimeout>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00d      	beq.n	800e27a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e268:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e26c:	d103      	bne.n	800e276 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e274:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e276:	2303      	movs	r3, #3
 800e278:	e05f      	b.n	800e33a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e27a:	897b      	ldrh	r3, [r7, #10]
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	461a      	mov	r2, r3
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e288:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e28c:	6a3a      	ldr	r2, [r7, #32]
 800e28e:	492d      	ldr	r1, [pc, #180]	@ (800e344 <I2C_RequestMemoryWrite+0x128>)
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f000 f9bb 	bl	800e60c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d001      	beq.n	800e2a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800e29c:	2301      	movs	r3, #1
 800e29e:	e04c      	b.n	800e33a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	617b      	str	r3, [r7, #20]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	695b      	ldr	r3, [r3, #20]
 800e2aa:	617b      	str	r3, [r7, #20]
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	699b      	ldr	r3, [r3, #24]
 800e2b2:	617b      	str	r3, [r7, #20]
 800e2b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e2b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2b8:	6a39      	ldr	r1, [r7, #32]
 800e2ba:	68f8      	ldr	r0, [r7, #12]
 800e2bc:	f000 fa46 	bl	800e74c <I2C_WaitOnTXEFlagUntilTimeout>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00d      	beq.n	800e2e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2ca:	2b04      	cmp	r3, #4
 800e2cc:	d107      	bne.n	800e2de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e2dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e2de:	2301      	movs	r3, #1
 800e2e0:	e02b      	b.n	800e33a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e2e2:	88fb      	ldrh	r3, [r7, #6]
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d105      	bne.n	800e2f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e2e8:	893b      	ldrh	r3, [r7, #8]
 800e2ea:	b2da      	uxtb	r2, r3
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	611a      	str	r2, [r3, #16]
 800e2f2:	e021      	b.n	800e338 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e2f4:	893b      	ldrh	r3, [r7, #8]
 800e2f6:	0a1b      	lsrs	r3, r3, #8
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	b2da      	uxtb	r2, r3
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e304:	6a39      	ldr	r1, [r7, #32]
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f000 fa20 	bl	800e74c <I2C_WaitOnTXEFlagUntilTimeout>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00d      	beq.n	800e32e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e316:	2b04      	cmp	r3, #4
 800e318:	d107      	bne.n	800e32a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e328:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e32a:	2301      	movs	r3, #1
 800e32c:	e005      	b.n	800e33a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e32e:	893b      	ldrh	r3, [r7, #8]
 800e330:	b2da      	uxtb	r2, r3
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e338:	2300      	movs	r3, #0
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3718      	adds	r7, #24
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	00010002 	.word	0x00010002

0800e348 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b088      	sub	sp, #32
 800e34c:	af02      	add	r7, sp, #8
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	4608      	mov	r0, r1
 800e352:	4611      	mov	r1, r2
 800e354:	461a      	mov	r2, r3
 800e356:	4603      	mov	r3, r0
 800e358:	817b      	strh	r3, [r7, #10]
 800e35a:	460b      	mov	r3, r1
 800e35c:	813b      	strh	r3, [r7, #8]
 800e35e:	4613      	mov	r3, r2
 800e360:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	681a      	ldr	r2, [r3, #0]
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e370:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e380:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e384:	9300      	str	r3, [sp, #0]
 800e386:	6a3b      	ldr	r3, [r7, #32]
 800e388:	2200      	movs	r2, #0
 800e38a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f000 f8c2 	bl	800e518 <I2C_WaitOnFlagUntilTimeout>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d00d      	beq.n	800e3b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3a8:	d103      	bne.n	800e3b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e3b2:	2303      	movs	r3, #3
 800e3b4:	e0aa      	b.n	800e50c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e3b6:	897b      	ldrh	r3, [r7, #10]
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e3c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c8:	6a3a      	ldr	r2, [r7, #32]
 800e3ca:	4952      	ldr	r1, [pc, #328]	@ (800e514 <I2C_RequestMemoryRead+0x1cc>)
 800e3cc:	68f8      	ldr	r0, [r7, #12]
 800e3ce:	f000 f91d 	bl	800e60c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d001      	beq.n	800e3dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e3d8:	2301      	movs	r3, #1
 800e3da:	e097      	b.n	800e50c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e3dc:	2300      	movs	r3, #0
 800e3de:	617b      	str	r3, [r7, #20]
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	695b      	ldr	r3, [r3, #20]
 800e3e6:	617b      	str	r3, [r7, #20]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	699b      	ldr	r3, [r3, #24]
 800e3ee:	617b      	str	r3, [r7, #20]
 800e3f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e3f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3f4:	6a39      	ldr	r1, [r7, #32]
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	f000 f9a8 	bl	800e74c <I2C_WaitOnTXEFlagUntilTimeout>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d00d      	beq.n	800e41e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e406:	2b04      	cmp	r3, #4
 800e408:	d107      	bne.n	800e41a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e418:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e41a:	2301      	movs	r3, #1
 800e41c:	e076      	b.n	800e50c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e41e:	88fb      	ldrh	r3, [r7, #6]
 800e420:	2b01      	cmp	r3, #1
 800e422:	d105      	bne.n	800e430 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e424:	893b      	ldrh	r3, [r7, #8]
 800e426:	b2da      	uxtb	r2, r3
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	611a      	str	r2, [r3, #16]
 800e42e:	e021      	b.n	800e474 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e430:	893b      	ldrh	r3, [r7, #8]
 800e432:	0a1b      	lsrs	r3, r3, #8
 800e434:	b29b      	uxth	r3, r3
 800e436:	b2da      	uxtb	r2, r3
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e43e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e440:	6a39      	ldr	r1, [r7, #32]
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	f000 f982 	bl	800e74c <I2C_WaitOnTXEFlagUntilTimeout>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d00d      	beq.n	800e46a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e452:	2b04      	cmp	r3, #4
 800e454:	d107      	bne.n	800e466 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	681a      	ldr	r2, [r3, #0]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e464:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e466:	2301      	movs	r3, #1
 800e468:	e050      	b.n	800e50c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e46a:	893b      	ldrh	r3, [r7, #8]
 800e46c:	b2da      	uxtb	r2, r3
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e476:	6a39      	ldr	r1, [r7, #32]
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f000 f967 	bl	800e74c <I2C_WaitOnTXEFlagUntilTimeout>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d00d      	beq.n	800e4a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e488:	2b04      	cmp	r3, #4
 800e48a:	d107      	bne.n	800e49c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e49a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e49c:	2301      	movs	r3, #1
 800e49e:	e035      	b.n	800e50c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e4ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4b2:	9300      	str	r3, [sp, #0]
 800e4b4:	6a3b      	ldr	r3, [r7, #32]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	f000 f82b 	bl	800e518 <I2C_WaitOnFlagUntilTimeout>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d00d      	beq.n	800e4e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e4d6:	d103      	bne.n	800e4e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e4de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e4e0:	2303      	movs	r3, #3
 800e4e2:	e013      	b.n	800e50c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e4e4:	897b      	ldrh	r3, [r7, #10]
 800e4e6:	b2db      	uxtb	r3, r3
 800e4e8:	f043 0301 	orr.w	r3, r3, #1
 800e4ec:	b2da      	uxtb	r2, r3
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f6:	6a3a      	ldr	r2, [r7, #32]
 800e4f8:	4906      	ldr	r1, [pc, #24]	@ (800e514 <I2C_RequestMemoryRead+0x1cc>)
 800e4fa:	68f8      	ldr	r0, [r7, #12]
 800e4fc:	f000 f886 	bl	800e60c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d001      	beq.n	800e50a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e506:	2301      	movs	r3, #1
 800e508:	e000      	b.n	800e50c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e50a:	2300      	movs	r3, #0
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3718      	adds	r7, #24
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	00010002 	.word	0x00010002

0800e518 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	603b      	str	r3, [r7, #0]
 800e524:	4613      	mov	r3, r2
 800e526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e528:	e048      	b.n	800e5bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e530:	d044      	beq.n	800e5bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e532:	f7fe fcc9 	bl	800cec8 <HAL_GetTick>
 800e536:	4602      	mov	r2, r0
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	1ad3      	subs	r3, r2, r3
 800e53c:	683a      	ldr	r2, [r7, #0]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d302      	bcc.n	800e548 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d139      	bne.n	800e5bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	0c1b      	lsrs	r3, r3, #16
 800e54c:	b2db      	uxtb	r3, r3
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d10d      	bne.n	800e56e <I2C_WaitOnFlagUntilTimeout+0x56>
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	695b      	ldr	r3, [r3, #20]
 800e558:	43da      	mvns	r2, r3
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	4013      	ands	r3, r2
 800e55e:	b29b      	uxth	r3, r3
 800e560:	2b00      	cmp	r3, #0
 800e562:	bf0c      	ite	eq
 800e564:	2301      	moveq	r3, #1
 800e566:	2300      	movne	r3, #0
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	461a      	mov	r2, r3
 800e56c:	e00c      	b.n	800e588 <I2C_WaitOnFlagUntilTimeout+0x70>
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	699b      	ldr	r3, [r3, #24]
 800e574:	43da      	mvns	r2, r3
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	4013      	ands	r3, r2
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	bf0c      	ite	eq
 800e580:	2301      	moveq	r3, #1
 800e582:	2300      	movne	r3, #0
 800e584:	b2db      	uxtb	r3, r3
 800e586:	461a      	mov	r2, r3
 800e588:	79fb      	ldrb	r3, [r7, #7]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d116      	bne.n	800e5bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2200      	movs	r2, #0
 800e592:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2220      	movs	r2, #32
 800e598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5a8:	f043 0220 	orr.w	r2, r3, #32
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	e023      	b.n	800e604 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	0c1b      	lsrs	r3, r3, #16
 800e5c0:	b2db      	uxtb	r3, r3
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d10d      	bne.n	800e5e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	695b      	ldr	r3, [r3, #20]
 800e5cc:	43da      	mvns	r2, r3
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	4013      	ands	r3, r2
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	bf0c      	ite	eq
 800e5d8:	2301      	moveq	r3, #1
 800e5da:	2300      	movne	r3, #0
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	461a      	mov	r2, r3
 800e5e0:	e00c      	b.n	800e5fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	699b      	ldr	r3, [r3, #24]
 800e5e8:	43da      	mvns	r2, r3
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	4013      	ands	r3, r2
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	bf0c      	ite	eq
 800e5f4:	2301      	moveq	r3, #1
 800e5f6:	2300      	movne	r3, #0
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	79fb      	ldrb	r3, [r7, #7]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d093      	beq.n	800e52a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e602:	2300      	movs	r3, #0
}
 800e604:	4618      	mov	r0, r3
 800e606:	3710      	adds	r7, #16
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	60b9      	str	r1, [r7, #8]
 800e616:	607a      	str	r2, [r7, #4]
 800e618:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e61a:	e071      	b.n	800e700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	695b      	ldr	r3, [r3, #20]
 800e622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e62a:	d123      	bne.n	800e674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e63a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e644:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2200      	movs	r2, #0
 800e64a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2220      	movs	r2, #32
 800e650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2200      	movs	r2, #0
 800e658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e660:	f043 0204 	orr.w	r2, r3, #4
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2200      	movs	r2, #0
 800e66c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e670:	2301      	movs	r3, #1
 800e672:	e067      	b.n	800e744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e67a:	d041      	beq.n	800e700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e67c:	f7fe fc24 	bl	800cec8 <HAL_GetTick>
 800e680:	4602      	mov	r2, r0
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	1ad3      	subs	r3, r2, r3
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d302      	bcc.n	800e692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d136      	bne.n	800e700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	0c1b      	lsrs	r3, r3, #16
 800e696:	b2db      	uxtb	r3, r3
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d10c      	bne.n	800e6b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	695b      	ldr	r3, [r3, #20]
 800e6a2:	43da      	mvns	r2, r3
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	4013      	ands	r3, r2
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	bf14      	ite	ne
 800e6ae:	2301      	movne	r3, #1
 800e6b0:	2300      	moveq	r3, #0
 800e6b2:	b2db      	uxtb	r3, r3
 800e6b4:	e00b      	b.n	800e6ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	699b      	ldr	r3, [r3, #24]
 800e6bc:	43da      	mvns	r2, r3
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	4013      	ands	r3, r2
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	bf14      	ite	ne
 800e6c8:	2301      	movne	r3, #1
 800e6ca:	2300      	moveq	r3, #0
 800e6cc:	b2db      	uxtb	r3, r3
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d016      	beq.n	800e700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2220      	movs	r2, #32
 800e6dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6ec:	f043 0220 	orr.w	r2, r3, #32
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	e021      	b.n	800e744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	0c1b      	lsrs	r3, r3, #16
 800e704:	b2db      	uxtb	r3, r3
 800e706:	2b01      	cmp	r3, #1
 800e708:	d10c      	bne.n	800e724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	695b      	ldr	r3, [r3, #20]
 800e710:	43da      	mvns	r2, r3
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	4013      	ands	r3, r2
 800e716:	b29b      	uxth	r3, r3
 800e718:	2b00      	cmp	r3, #0
 800e71a:	bf14      	ite	ne
 800e71c:	2301      	movne	r3, #1
 800e71e:	2300      	moveq	r3, #0
 800e720:	b2db      	uxtb	r3, r3
 800e722:	e00b      	b.n	800e73c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	699b      	ldr	r3, [r3, #24]
 800e72a:	43da      	mvns	r2, r3
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	4013      	ands	r3, r2
 800e730:	b29b      	uxth	r3, r3
 800e732:	2b00      	cmp	r3, #0
 800e734:	bf14      	ite	ne
 800e736:	2301      	movne	r3, #1
 800e738:	2300      	moveq	r3, #0
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f47f af6d 	bne.w	800e61c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800e742:	2300      	movs	r3, #0
}
 800e744:	4618      	mov	r0, r3
 800e746:	3710      	adds	r7, #16
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e758:	e034      	b.n	800e7c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e75a:	68f8      	ldr	r0, [r7, #12]
 800e75c:	f000 f8e3 	bl	800e926 <I2C_IsAcknowledgeFailed>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d001      	beq.n	800e76a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e766:	2301      	movs	r3, #1
 800e768:	e034      	b.n	800e7d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e770:	d028      	beq.n	800e7c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e772:	f7fe fba9 	bl	800cec8 <HAL_GetTick>
 800e776:	4602      	mov	r2, r0
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	1ad3      	subs	r3, r2, r3
 800e77c:	68ba      	ldr	r2, [r7, #8]
 800e77e:	429a      	cmp	r2, r3
 800e780:	d302      	bcc.n	800e788 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d11d      	bne.n	800e7c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	695b      	ldr	r3, [r3, #20]
 800e78e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e792:	2b80      	cmp	r3, #128	@ 0x80
 800e794:	d016      	beq.n	800e7c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2200      	movs	r2, #0
 800e79a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2220      	movs	r2, #32
 800e7a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7b0:	f043 0220 	orr.w	r2, r3, #32
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	e007      	b.n	800e7d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	695b      	ldr	r3, [r3, #20]
 800e7ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7ce:	2b80      	cmp	r3, #128	@ 0x80
 800e7d0:	d1c3      	bne.n	800e75a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e7d2:	2300      	movs	r3, #0
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3710      	adds	r7, #16
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}

0800e7dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e7e8:	e034      	b.n	800e854 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	f000 f89b 	bl	800e926 <I2C_IsAcknowledgeFailed>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d001      	beq.n	800e7fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	e034      	b.n	800e864 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e800:	d028      	beq.n	800e854 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e802:	f7fe fb61 	bl	800cec8 <HAL_GetTick>
 800e806:	4602      	mov	r2, r0
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	1ad3      	subs	r3, r2, r3
 800e80c:	68ba      	ldr	r2, [r7, #8]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d302      	bcc.n	800e818 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d11d      	bne.n	800e854 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	695b      	ldr	r3, [r3, #20]
 800e81e:	f003 0304 	and.w	r3, r3, #4
 800e822:	2b04      	cmp	r3, #4
 800e824:	d016      	beq.n	800e854 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2200      	movs	r2, #0
 800e82a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2220      	movs	r2, #32
 800e830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2200      	movs	r2, #0
 800e838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e840:	f043 0220 	orr.w	r2, r3, #32
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2200      	movs	r2, #0
 800e84c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e850:	2301      	movs	r3, #1
 800e852:	e007      	b.n	800e864 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	695b      	ldr	r3, [r3, #20]
 800e85a:	f003 0304 	and.w	r3, r3, #4
 800e85e:	2b04      	cmp	r3, #4
 800e860:	d1c3      	bne.n	800e7ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e862:	2300      	movs	r3, #0
}
 800e864:	4618      	mov	r0, r3
 800e866:	3710      	adds	r7, #16
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e878:	e049      	b.n	800e90e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	695b      	ldr	r3, [r3, #20]
 800e880:	f003 0310 	and.w	r3, r3, #16
 800e884:	2b10      	cmp	r3, #16
 800e886:	d119      	bne.n	800e8bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	f06f 0210 	mvn.w	r2, #16
 800e890:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2200      	movs	r2, #0
 800e896:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2220      	movs	r2, #32
 800e89c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	e030      	b.n	800e91e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8bc:	f7fe fb04 	bl	800cec8 <HAL_GetTick>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	1ad3      	subs	r3, r2, r3
 800e8c6:	68ba      	ldr	r2, [r7, #8]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d302      	bcc.n	800e8d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d11d      	bne.n	800e90e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	695b      	ldr	r3, [r3, #20]
 800e8d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8dc:	2b40      	cmp	r3, #64	@ 0x40
 800e8de:	d016      	beq.n	800e90e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2220      	movs	r2, #32
 800e8ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8fa:	f043 0220 	orr.w	r2, r3, #32
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	2200      	movs	r2, #0
 800e906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800e90a:	2301      	movs	r3, #1
 800e90c:	e007      	b.n	800e91e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	695b      	ldr	r3, [r3, #20]
 800e914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e918:	2b40      	cmp	r3, #64	@ 0x40
 800e91a:	d1ae      	bne.n	800e87a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e91c:	2300      	movs	r3, #0
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3710      	adds	r7, #16
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e926:	b480      	push	{r7}
 800e928:	b083      	sub	sp, #12
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	695b      	ldr	r3, [r3, #20]
 800e934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e93c:	d11b      	bne.n	800e976 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e946:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2220      	movs	r2, #32
 800e952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2200      	movs	r2, #0
 800e95a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e962:	f043 0204 	orr.w	r2, r3, #4
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2200      	movs	r2, #0
 800e96e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800e972:	2301      	movs	r3, #1
 800e974:	e000      	b.n	800e978 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e976:	2300      	movs	r3, #0
}
 800e978:	4618      	mov	r0, r3
 800e97a:	370c      	adds	r7, #12
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr

0800e984 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b086      	sub	sp, #24
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d101      	bne.n	800e996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e992:	2301      	movs	r3, #1
 800e994:	e267      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f003 0301 	and.w	r3, r3, #1
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d075      	beq.n	800ea8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e9a2:	4b88      	ldr	r3, [pc, #544]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800e9a4:	689b      	ldr	r3, [r3, #8]
 800e9a6:	f003 030c 	and.w	r3, r3, #12
 800e9aa:	2b04      	cmp	r3, #4
 800e9ac:	d00c      	beq.n	800e9c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e9ae:	4b85      	ldr	r3, [pc, #532]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800e9b0:	689b      	ldr	r3, [r3, #8]
 800e9b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e9b6:	2b08      	cmp	r3, #8
 800e9b8:	d112      	bne.n	800e9e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e9ba:	4b82      	ldr	r3, [pc, #520]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e9c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e9c6:	d10b      	bne.n	800e9e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e9c8:	4b7e      	ldr	r3, [pc, #504]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d05b      	beq.n	800ea8c <HAL_RCC_OscConfig+0x108>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d157      	bne.n	800ea8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e9dc:	2301      	movs	r3, #1
 800e9de:	e242      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e9e8:	d106      	bne.n	800e9f8 <HAL_RCC_OscConfig+0x74>
 800e9ea:	4b76      	ldr	r3, [pc, #472]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	4a75      	ldr	r2, [pc, #468]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800e9f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e9f4:	6013      	str	r3, [r2, #0]
 800e9f6:	e01d      	b.n	800ea34 <HAL_RCC_OscConfig+0xb0>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	685b      	ldr	r3, [r3, #4]
 800e9fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ea00:	d10c      	bne.n	800ea1c <HAL_RCC_OscConfig+0x98>
 800ea02:	4b70      	ldr	r3, [pc, #448]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	4a6f      	ldr	r2, [pc, #444]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800ea08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ea0c:	6013      	str	r3, [r2, #0]
 800ea0e:	4b6d      	ldr	r3, [pc, #436]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a6c      	ldr	r2, [pc, #432]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800ea14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ea18:	6013      	str	r3, [r2, #0]
 800ea1a:	e00b      	b.n	800ea34 <HAL_RCC_OscConfig+0xb0>
 800ea1c:	4b69      	ldr	r3, [pc, #420]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4a68      	ldr	r2, [pc, #416]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800ea22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ea26:	6013      	str	r3, [r2, #0]
 800ea28:	4b66      	ldr	r3, [pc, #408]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a65      	ldr	r2, [pc, #404]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800ea2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ea32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d013      	beq.n	800ea64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea3c:	f7fe fa44 	bl	800cec8 <HAL_GetTick>
 800ea40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea42:	e008      	b.n	800ea56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ea44:	f7fe fa40 	bl	800cec8 <HAL_GetTick>
 800ea48:	4602      	mov	r2, r0
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	1ad3      	subs	r3, r2, r3
 800ea4e:	2b64      	cmp	r3, #100	@ 0x64
 800ea50:	d901      	bls.n	800ea56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ea52:	2303      	movs	r3, #3
 800ea54:	e207      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ea56:	4b5b      	ldr	r3, [pc, #364]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d0f0      	beq.n	800ea44 <HAL_RCC_OscConfig+0xc0>
 800ea62:	e014      	b.n	800ea8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea64:	f7fe fa30 	bl	800cec8 <HAL_GetTick>
 800ea68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ea6a:	e008      	b.n	800ea7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ea6c:	f7fe fa2c 	bl	800cec8 <HAL_GetTick>
 800ea70:	4602      	mov	r2, r0
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	1ad3      	subs	r3, r2, r3
 800ea76:	2b64      	cmp	r3, #100	@ 0x64
 800ea78:	d901      	bls.n	800ea7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ea7a:	2303      	movs	r3, #3
 800ea7c:	e1f3      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ea7e:	4b51      	ldr	r3, [pc, #324]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d1f0      	bne.n	800ea6c <HAL_RCC_OscConfig+0xe8>
 800ea8a:	e000      	b.n	800ea8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ea8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f003 0302 	and.w	r3, r3, #2
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d063      	beq.n	800eb62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ea9a:	4b4a      	ldr	r3, [pc, #296]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800ea9c:	689b      	ldr	r3, [r3, #8]
 800ea9e:	f003 030c 	and.w	r3, r3, #12
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d00b      	beq.n	800eabe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800eaa6:	4b47      	ldr	r3, [pc, #284]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800eaa8:	689b      	ldr	r3, [r3, #8]
 800eaaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800eaae:	2b08      	cmp	r3, #8
 800eab0:	d11c      	bne.n	800eaec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800eab2:	4b44      	ldr	r3, [pc, #272]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d116      	bne.n	800eaec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eabe:	4b41      	ldr	r3, [pc, #260]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f003 0302 	and.w	r3, r3, #2
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d005      	beq.n	800ead6 <HAL_RCC_OscConfig+0x152>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	2b01      	cmp	r3, #1
 800ead0:	d001      	beq.n	800ead6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ead2:	2301      	movs	r3, #1
 800ead4:	e1c7      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ead6:	4b3b      	ldr	r3, [pc, #236]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	691b      	ldr	r3, [r3, #16]
 800eae2:	00db      	lsls	r3, r3, #3
 800eae4:	4937      	ldr	r1, [pc, #220]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800eae6:	4313      	orrs	r3, r2
 800eae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eaea:	e03a      	b.n	800eb62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d020      	beq.n	800eb36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800eaf4:	4b34      	ldr	r3, [pc, #208]	@ (800ebc8 <HAL_RCC_OscConfig+0x244>)
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eafa:	f7fe f9e5 	bl	800cec8 <HAL_GetTick>
 800eafe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eb00:	e008      	b.n	800eb14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eb02:	f7fe f9e1 	bl	800cec8 <HAL_GetTick>
 800eb06:	4602      	mov	r2, r0
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	1ad3      	subs	r3, r2, r3
 800eb0c:	2b02      	cmp	r3, #2
 800eb0e:	d901      	bls.n	800eb14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800eb10:	2303      	movs	r3, #3
 800eb12:	e1a8      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eb14:	4b2b      	ldr	r3, [pc, #172]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f003 0302 	and.w	r3, r3, #2
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d0f0      	beq.n	800eb02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eb20:	4b28      	ldr	r3, [pc, #160]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	691b      	ldr	r3, [r3, #16]
 800eb2c:	00db      	lsls	r3, r3, #3
 800eb2e:	4925      	ldr	r1, [pc, #148]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800eb30:	4313      	orrs	r3, r2
 800eb32:	600b      	str	r3, [r1, #0]
 800eb34:	e015      	b.n	800eb62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800eb36:	4b24      	ldr	r3, [pc, #144]	@ (800ebc8 <HAL_RCC_OscConfig+0x244>)
 800eb38:	2200      	movs	r2, #0
 800eb3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb3c:	f7fe f9c4 	bl	800cec8 <HAL_GetTick>
 800eb40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eb42:	e008      	b.n	800eb56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eb44:	f7fe f9c0 	bl	800cec8 <HAL_GetTick>
 800eb48:	4602      	mov	r2, r0
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	1ad3      	subs	r3, r2, r3
 800eb4e:	2b02      	cmp	r3, #2
 800eb50:	d901      	bls.n	800eb56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800eb52:	2303      	movs	r3, #3
 800eb54:	e187      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eb56:	4b1b      	ldr	r3, [pc, #108]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f003 0302 	and.w	r3, r3, #2
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d1f0      	bne.n	800eb44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f003 0308 	and.w	r3, r3, #8
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d036      	beq.n	800ebdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	695b      	ldr	r3, [r3, #20]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d016      	beq.n	800eba4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800eb76:	4b15      	ldr	r3, [pc, #84]	@ (800ebcc <HAL_RCC_OscConfig+0x248>)
 800eb78:	2201      	movs	r2, #1
 800eb7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb7c:	f7fe f9a4 	bl	800cec8 <HAL_GetTick>
 800eb80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eb82:	e008      	b.n	800eb96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eb84:	f7fe f9a0 	bl	800cec8 <HAL_GetTick>
 800eb88:	4602      	mov	r2, r0
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	1ad3      	subs	r3, r2, r3
 800eb8e:	2b02      	cmp	r3, #2
 800eb90:	d901      	bls.n	800eb96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800eb92:	2303      	movs	r3, #3
 800eb94:	e167      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eb96:	4b0b      	ldr	r3, [pc, #44]	@ (800ebc4 <HAL_RCC_OscConfig+0x240>)
 800eb98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb9a:	f003 0302 	and.w	r3, r3, #2
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d0f0      	beq.n	800eb84 <HAL_RCC_OscConfig+0x200>
 800eba2:	e01b      	b.n	800ebdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eba4:	4b09      	ldr	r3, [pc, #36]	@ (800ebcc <HAL_RCC_OscConfig+0x248>)
 800eba6:	2200      	movs	r2, #0
 800eba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ebaa:	f7fe f98d 	bl	800cec8 <HAL_GetTick>
 800ebae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ebb0:	e00e      	b.n	800ebd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ebb2:	f7fe f989 	bl	800cec8 <HAL_GetTick>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	1ad3      	subs	r3, r2, r3
 800ebbc:	2b02      	cmp	r3, #2
 800ebbe:	d907      	bls.n	800ebd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ebc0:	2303      	movs	r3, #3
 800ebc2:	e150      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
 800ebc4:	40023800 	.word	0x40023800
 800ebc8:	42470000 	.word	0x42470000
 800ebcc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ebd0:	4b88      	ldr	r3, [pc, #544]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ebd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebd4:	f003 0302 	and.w	r3, r3, #2
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d1ea      	bne.n	800ebb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f003 0304 	and.w	r3, r3, #4
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f000 8097 	beq.w	800ed18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ebea:	2300      	movs	r3, #0
 800ebec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ebee:	4b81      	ldr	r3, [pc, #516]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ebf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d10f      	bne.n	800ec1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	60bb      	str	r3, [r7, #8]
 800ebfe:	4b7d      	ldr	r3, [pc, #500]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ec00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec02:	4a7c      	ldr	r2, [pc, #496]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ec04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ec08:	6413      	str	r3, [r2, #64]	@ 0x40
 800ec0a:	4b7a      	ldr	r3, [pc, #488]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ec0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ec12:	60bb      	str	r3, [r7, #8]
 800ec14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ec16:	2301      	movs	r3, #1
 800ec18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ec1a:	4b77      	ldr	r3, [pc, #476]	@ (800edf8 <HAL_RCC_OscConfig+0x474>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d118      	bne.n	800ec58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ec26:	4b74      	ldr	r3, [pc, #464]	@ (800edf8 <HAL_RCC_OscConfig+0x474>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4a73      	ldr	r2, [pc, #460]	@ (800edf8 <HAL_RCC_OscConfig+0x474>)
 800ec2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ec30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ec32:	f7fe f949 	bl	800cec8 <HAL_GetTick>
 800ec36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ec38:	e008      	b.n	800ec4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ec3a:	f7fe f945 	bl	800cec8 <HAL_GetTick>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	1ad3      	subs	r3, r2, r3
 800ec44:	2b02      	cmp	r3, #2
 800ec46:	d901      	bls.n	800ec4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ec48:	2303      	movs	r3, #3
 800ec4a:	e10c      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ec4c:	4b6a      	ldr	r3, [pc, #424]	@ (800edf8 <HAL_RCC_OscConfig+0x474>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d0f0      	beq.n	800ec3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	689b      	ldr	r3, [r3, #8]
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d106      	bne.n	800ec6e <HAL_RCC_OscConfig+0x2ea>
 800ec60:	4b64      	ldr	r3, [pc, #400]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ec62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec64:	4a63      	ldr	r2, [pc, #396]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ec66:	f043 0301 	orr.w	r3, r3, #1
 800ec6a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ec6c:	e01c      	b.n	800eca8 <HAL_RCC_OscConfig+0x324>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	689b      	ldr	r3, [r3, #8]
 800ec72:	2b05      	cmp	r3, #5
 800ec74:	d10c      	bne.n	800ec90 <HAL_RCC_OscConfig+0x30c>
 800ec76:	4b5f      	ldr	r3, [pc, #380]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ec78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec7a:	4a5e      	ldr	r2, [pc, #376]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ec7c:	f043 0304 	orr.w	r3, r3, #4
 800ec80:	6713      	str	r3, [r2, #112]	@ 0x70
 800ec82:	4b5c      	ldr	r3, [pc, #368]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ec84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec86:	4a5b      	ldr	r2, [pc, #364]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ec88:	f043 0301 	orr.w	r3, r3, #1
 800ec8c:	6713      	str	r3, [r2, #112]	@ 0x70
 800ec8e:	e00b      	b.n	800eca8 <HAL_RCC_OscConfig+0x324>
 800ec90:	4b58      	ldr	r3, [pc, #352]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ec92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec94:	4a57      	ldr	r2, [pc, #348]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ec96:	f023 0301 	bic.w	r3, r3, #1
 800ec9a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ec9c:	4b55      	ldr	r3, [pc, #340]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ec9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eca0:	4a54      	ldr	r2, [pc, #336]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800eca2:	f023 0304 	bic.w	r3, r3, #4
 800eca6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	689b      	ldr	r3, [r3, #8]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d015      	beq.n	800ecdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ecb0:	f7fe f90a 	bl	800cec8 <HAL_GetTick>
 800ecb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ecb6:	e00a      	b.n	800ecce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ecb8:	f7fe f906 	bl	800cec8 <HAL_GetTick>
 800ecbc:	4602      	mov	r2, r0
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	1ad3      	subs	r3, r2, r3
 800ecc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d901      	bls.n	800ecce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ecca:	2303      	movs	r3, #3
 800eccc:	e0cb      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ecce:	4b49      	ldr	r3, [pc, #292]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ecd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecd2:	f003 0302 	and.w	r3, r3, #2
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d0ee      	beq.n	800ecb8 <HAL_RCC_OscConfig+0x334>
 800ecda:	e014      	b.n	800ed06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ecdc:	f7fe f8f4 	bl	800cec8 <HAL_GetTick>
 800ece0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ece2:	e00a      	b.n	800ecfa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ece4:	f7fe f8f0 	bl	800cec8 <HAL_GetTick>
 800ece8:	4602      	mov	r2, r0
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	1ad3      	subs	r3, r2, r3
 800ecee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d901      	bls.n	800ecfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ecf6:	2303      	movs	r3, #3
 800ecf8:	e0b5      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ecfa:	4b3e      	ldr	r3, [pc, #248]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ecfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecfe:	f003 0302 	and.w	r3, r3, #2
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d1ee      	bne.n	800ece4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ed06:	7dfb      	ldrb	r3, [r7, #23]
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d105      	bne.n	800ed18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ed0c:	4b39      	ldr	r3, [pc, #228]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ed0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed10:	4a38      	ldr	r2, [pc, #224]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ed12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ed16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	699b      	ldr	r3, [r3, #24]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	f000 80a1 	beq.w	800ee64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ed22:	4b34      	ldr	r3, [pc, #208]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ed24:	689b      	ldr	r3, [r3, #8]
 800ed26:	f003 030c 	and.w	r3, r3, #12
 800ed2a:	2b08      	cmp	r3, #8
 800ed2c:	d05c      	beq.n	800ede8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	699b      	ldr	r3, [r3, #24]
 800ed32:	2b02      	cmp	r3, #2
 800ed34:	d141      	bne.n	800edba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ed36:	4b31      	ldr	r3, [pc, #196]	@ (800edfc <HAL_RCC_OscConfig+0x478>)
 800ed38:	2200      	movs	r2, #0
 800ed3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed3c:	f7fe f8c4 	bl	800cec8 <HAL_GetTick>
 800ed40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed42:	e008      	b.n	800ed56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ed44:	f7fe f8c0 	bl	800cec8 <HAL_GetTick>
 800ed48:	4602      	mov	r2, r0
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	1ad3      	subs	r3, r2, r3
 800ed4e:	2b02      	cmp	r3, #2
 800ed50:	d901      	bls.n	800ed56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ed52:	2303      	movs	r3, #3
 800ed54:	e087      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed56:	4b27      	ldr	r3, [pc, #156]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d1f0      	bne.n	800ed44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	69da      	ldr	r2, [r3, #28]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6a1b      	ldr	r3, [r3, #32]
 800ed6a:	431a      	orrs	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed70:	019b      	lsls	r3, r3, #6
 800ed72:	431a      	orrs	r2, r3
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed78:	085b      	lsrs	r3, r3, #1
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	041b      	lsls	r3, r3, #16
 800ed7e:	431a      	orrs	r2, r3
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed84:	061b      	lsls	r3, r3, #24
 800ed86:	491b      	ldr	r1, [pc, #108]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ed8c:	4b1b      	ldr	r3, [pc, #108]	@ (800edfc <HAL_RCC_OscConfig+0x478>)
 800ed8e:	2201      	movs	r2, #1
 800ed90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed92:	f7fe f899 	bl	800cec8 <HAL_GetTick>
 800ed96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ed98:	e008      	b.n	800edac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ed9a:	f7fe f895 	bl	800cec8 <HAL_GetTick>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	1ad3      	subs	r3, r2, r3
 800eda4:	2b02      	cmp	r3, #2
 800eda6:	d901      	bls.n	800edac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800eda8:	2303      	movs	r3, #3
 800edaa:	e05c      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800edac:	4b11      	ldr	r3, [pc, #68]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d0f0      	beq.n	800ed9a <HAL_RCC_OscConfig+0x416>
 800edb8:	e054      	b.n	800ee64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800edba:	4b10      	ldr	r3, [pc, #64]	@ (800edfc <HAL_RCC_OscConfig+0x478>)
 800edbc:	2200      	movs	r2, #0
 800edbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800edc0:	f7fe f882 	bl	800cec8 <HAL_GetTick>
 800edc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800edc6:	e008      	b.n	800edda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800edc8:	f7fe f87e 	bl	800cec8 <HAL_GetTick>
 800edcc:	4602      	mov	r2, r0
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	1ad3      	subs	r3, r2, r3
 800edd2:	2b02      	cmp	r3, #2
 800edd4:	d901      	bls.n	800edda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800edd6:	2303      	movs	r3, #3
 800edd8:	e045      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800edda:	4b06      	ldr	r3, [pc, #24]	@ (800edf4 <HAL_RCC_OscConfig+0x470>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1f0      	bne.n	800edc8 <HAL_RCC_OscConfig+0x444>
 800ede6:	e03d      	b.n	800ee64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	699b      	ldr	r3, [r3, #24]
 800edec:	2b01      	cmp	r3, #1
 800edee:	d107      	bne.n	800ee00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800edf0:	2301      	movs	r3, #1
 800edf2:	e038      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
 800edf4:	40023800 	.word	0x40023800
 800edf8:	40007000 	.word	0x40007000
 800edfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ee00:	4b1b      	ldr	r3, [pc, #108]	@ (800ee70 <HAL_RCC_OscConfig+0x4ec>)
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	699b      	ldr	r3, [r3, #24]
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d028      	beq.n	800ee60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d121      	bne.n	800ee60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d11a      	bne.n	800ee60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ee2a:	68fa      	ldr	r2, [r7, #12]
 800ee2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ee30:	4013      	ands	r3, r2
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ee36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d111      	bne.n	800ee60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee46:	085b      	lsrs	r3, r3, #1
 800ee48:	3b01      	subs	r3, #1
 800ee4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d107      	bne.n	800ee60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d001      	beq.n	800ee64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ee60:	2301      	movs	r3, #1
 800ee62:	e000      	b.n	800ee66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ee64:	2300      	movs	r3, #0
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3718      	adds	r7, #24
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	40023800 	.word	0x40023800

0800ee74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d101      	bne.n	800ee88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ee84:	2301      	movs	r3, #1
 800ee86:	e0cc      	b.n	800f022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ee88:	4b68      	ldr	r3, [pc, #416]	@ (800f02c <HAL_RCC_ClockConfig+0x1b8>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f003 0307 	and.w	r3, r3, #7
 800ee90:	683a      	ldr	r2, [r7, #0]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d90c      	bls.n	800eeb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ee96:	4b65      	ldr	r3, [pc, #404]	@ (800f02c <HAL_RCC_ClockConfig+0x1b8>)
 800ee98:	683a      	ldr	r2, [r7, #0]
 800ee9a:	b2d2      	uxtb	r2, r2
 800ee9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ee9e:	4b63      	ldr	r3, [pc, #396]	@ (800f02c <HAL_RCC_ClockConfig+0x1b8>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f003 0307 	and.w	r3, r3, #7
 800eea6:	683a      	ldr	r2, [r7, #0]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d001      	beq.n	800eeb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800eeac:	2301      	movs	r3, #1
 800eeae:	e0b8      	b.n	800f022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f003 0302 	and.w	r3, r3, #2
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d020      	beq.n	800eefe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	f003 0304 	and.w	r3, r3, #4
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d005      	beq.n	800eed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800eec8:	4b59      	ldr	r3, [pc, #356]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800eeca:	689b      	ldr	r3, [r3, #8]
 800eecc:	4a58      	ldr	r2, [pc, #352]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800eece:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800eed2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f003 0308 	and.w	r3, r3, #8
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d005      	beq.n	800eeec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800eee0:	4b53      	ldr	r3, [pc, #332]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800eee2:	689b      	ldr	r3, [r3, #8]
 800eee4:	4a52      	ldr	r2, [pc, #328]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800eee6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800eeea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eeec:	4b50      	ldr	r3, [pc, #320]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	689b      	ldr	r3, [r3, #8]
 800eef8:	494d      	ldr	r1, [pc, #308]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800eefa:	4313      	orrs	r3, r2
 800eefc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f003 0301 	and.w	r3, r3, #1
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d044      	beq.n	800ef94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	685b      	ldr	r3, [r3, #4]
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	d107      	bne.n	800ef22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef12:	4b47      	ldr	r3, [pc, #284]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d119      	bne.n	800ef52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	e07f      	b.n	800f022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	2b02      	cmp	r3, #2
 800ef28:	d003      	beq.n	800ef32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ef2e:	2b03      	cmp	r3, #3
 800ef30:	d107      	bne.n	800ef42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ef32:	4b3f      	ldr	r3, [pc, #252]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d109      	bne.n	800ef52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e06f      	b.n	800f022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef42:	4b3b      	ldr	r3, [pc, #236]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f003 0302 	and.w	r3, r3, #2
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d101      	bne.n	800ef52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e067      	b.n	800f022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ef52:	4b37      	ldr	r3, [pc, #220]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800ef54:	689b      	ldr	r3, [r3, #8]
 800ef56:	f023 0203 	bic.w	r2, r3, #3
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	685b      	ldr	r3, [r3, #4]
 800ef5e:	4934      	ldr	r1, [pc, #208]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800ef60:	4313      	orrs	r3, r2
 800ef62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ef64:	f7fd ffb0 	bl	800cec8 <HAL_GetTick>
 800ef68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef6a:	e00a      	b.n	800ef82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ef6c:	f7fd ffac 	bl	800cec8 <HAL_GetTick>
 800ef70:	4602      	mov	r2, r0
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	1ad3      	subs	r3, r2, r3
 800ef76:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d901      	bls.n	800ef82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ef7e:	2303      	movs	r3, #3
 800ef80:	e04f      	b.n	800f022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef82:	4b2b      	ldr	r3, [pc, #172]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800ef84:	689b      	ldr	r3, [r3, #8]
 800ef86:	f003 020c 	and.w	r2, r3, #12
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	009b      	lsls	r3, r3, #2
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d1eb      	bne.n	800ef6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ef94:	4b25      	ldr	r3, [pc, #148]	@ (800f02c <HAL_RCC_ClockConfig+0x1b8>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f003 0307 	and.w	r3, r3, #7
 800ef9c:	683a      	ldr	r2, [r7, #0]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d20c      	bcs.n	800efbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800efa2:	4b22      	ldr	r3, [pc, #136]	@ (800f02c <HAL_RCC_ClockConfig+0x1b8>)
 800efa4:	683a      	ldr	r2, [r7, #0]
 800efa6:	b2d2      	uxtb	r2, r2
 800efa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800efaa:	4b20      	ldr	r3, [pc, #128]	@ (800f02c <HAL_RCC_ClockConfig+0x1b8>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f003 0307 	and.w	r3, r3, #7
 800efb2:	683a      	ldr	r2, [r7, #0]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d001      	beq.n	800efbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800efb8:	2301      	movs	r3, #1
 800efba:	e032      	b.n	800f022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f003 0304 	and.w	r3, r3, #4
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d008      	beq.n	800efda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800efc8:	4b19      	ldr	r3, [pc, #100]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800efca:	689b      	ldr	r3, [r3, #8]
 800efcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	68db      	ldr	r3, [r3, #12]
 800efd4:	4916      	ldr	r1, [pc, #88]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800efd6:	4313      	orrs	r3, r2
 800efd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f003 0308 	and.w	r3, r3, #8
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d009      	beq.n	800effa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800efe6:	4b12      	ldr	r3, [pc, #72]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800efe8:	689b      	ldr	r3, [r3, #8]
 800efea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	691b      	ldr	r3, [r3, #16]
 800eff2:	00db      	lsls	r3, r3, #3
 800eff4:	490e      	ldr	r1, [pc, #56]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800eff6:	4313      	orrs	r3, r2
 800eff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800effa:	f000 f821 	bl	800f040 <HAL_RCC_GetSysClockFreq>
 800effe:	4602      	mov	r2, r0
 800f000:	4b0b      	ldr	r3, [pc, #44]	@ (800f030 <HAL_RCC_ClockConfig+0x1bc>)
 800f002:	689b      	ldr	r3, [r3, #8]
 800f004:	091b      	lsrs	r3, r3, #4
 800f006:	f003 030f 	and.w	r3, r3, #15
 800f00a:	490a      	ldr	r1, [pc, #40]	@ (800f034 <HAL_RCC_ClockConfig+0x1c0>)
 800f00c:	5ccb      	ldrb	r3, [r1, r3]
 800f00e:	fa22 f303 	lsr.w	r3, r2, r3
 800f012:	4a09      	ldr	r2, [pc, #36]	@ (800f038 <HAL_RCC_ClockConfig+0x1c4>)
 800f014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800f016:	4b09      	ldr	r3, [pc, #36]	@ (800f03c <HAL_RCC_ClockConfig+0x1c8>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7fd ff10 	bl	800ce40 <HAL_InitTick>

  return HAL_OK;
 800f020:	2300      	movs	r3, #0
}
 800f022:	4618      	mov	r0, r3
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	40023c00 	.word	0x40023c00
 800f030:	40023800 	.word	0x40023800
 800f034:	08015e58 	.word	0x08015e58
 800f038:	200000d0 	.word	0x200000d0
 800f03c:	200000e4 	.word	0x200000e4

0800f040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f044:	b090      	sub	sp, #64	@ 0x40
 800f046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800f048:	2300      	movs	r3, #0
 800f04a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800f04c:	2300      	movs	r3, #0
 800f04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800f050:	2300      	movs	r3, #0
 800f052:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800f054:	2300      	movs	r3, #0
 800f056:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f058:	4b59      	ldr	r3, [pc, #356]	@ (800f1c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800f05a:	689b      	ldr	r3, [r3, #8]
 800f05c:	f003 030c 	and.w	r3, r3, #12
 800f060:	2b08      	cmp	r3, #8
 800f062:	d00d      	beq.n	800f080 <HAL_RCC_GetSysClockFreq+0x40>
 800f064:	2b08      	cmp	r3, #8
 800f066:	f200 80a1 	bhi.w	800f1ac <HAL_RCC_GetSysClockFreq+0x16c>
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d002      	beq.n	800f074 <HAL_RCC_GetSysClockFreq+0x34>
 800f06e:	2b04      	cmp	r3, #4
 800f070:	d003      	beq.n	800f07a <HAL_RCC_GetSysClockFreq+0x3a>
 800f072:	e09b      	b.n	800f1ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f074:	4b53      	ldr	r3, [pc, #332]	@ (800f1c4 <HAL_RCC_GetSysClockFreq+0x184>)
 800f076:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f078:	e09b      	b.n	800f1b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f07a:	4b53      	ldr	r3, [pc, #332]	@ (800f1c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800f07c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f07e:	e098      	b.n	800f1b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f080:	4b4f      	ldr	r3, [pc, #316]	@ (800f1c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f088:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f08a:	4b4d      	ldr	r3, [pc, #308]	@ (800f1c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800f08c:	685b      	ldr	r3, [r3, #4]
 800f08e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f092:	2b00      	cmp	r3, #0
 800f094:	d028      	beq.n	800f0e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f096:	4b4a      	ldr	r3, [pc, #296]	@ (800f1c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	099b      	lsrs	r3, r3, #6
 800f09c:	2200      	movs	r2, #0
 800f09e:	623b      	str	r3, [r7, #32]
 800f0a0:	627a      	str	r2, [r7, #36]	@ 0x24
 800f0a2:	6a3b      	ldr	r3, [r7, #32]
 800f0a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800f0a8:	2100      	movs	r1, #0
 800f0aa:	4b47      	ldr	r3, [pc, #284]	@ (800f1c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800f0ac:	fb03 f201 	mul.w	r2, r3, r1
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	fb00 f303 	mul.w	r3, r0, r3
 800f0b6:	4413      	add	r3, r2
 800f0b8:	4a43      	ldr	r2, [pc, #268]	@ (800f1c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800f0ba:	fba0 1202 	umull	r1, r2, r0, r2
 800f0be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f0c0:	460a      	mov	r2, r1
 800f0c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f0c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0c6:	4413      	add	r3, r2
 800f0c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f0ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	61bb      	str	r3, [r7, #24]
 800f0d0:	61fa      	str	r2, [r7, #28]
 800f0d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f0d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800f0da:	f7f1 fe25 	bl	8000d28 <__aeabi_uldivmod>
 800f0de:	4602      	mov	r2, r0
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0e6:	e053      	b.n	800f190 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f0e8:	4b35      	ldr	r3, [pc, #212]	@ (800f1c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	099b      	lsrs	r3, r3, #6
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	613b      	str	r3, [r7, #16]
 800f0f2:	617a      	str	r2, [r7, #20]
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800f0fa:	f04f 0b00 	mov.w	fp, #0
 800f0fe:	4652      	mov	r2, sl
 800f100:	465b      	mov	r3, fp
 800f102:	f04f 0000 	mov.w	r0, #0
 800f106:	f04f 0100 	mov.w	r1, #0
 800f10a:	0159      	lsls	r1, r3, #5
 800f10c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f110:	0150      	lsls	r0, r2, #5
 800f112:	4602      	mov	r2, r0
 800f114:	460b      	mov	r3, r1
 800f116:	ebb2 080a 	subs.w	r8, r2, sl
 800f11a:	eb63 090b 	sbc.w	r9, r3, fp
 800f11e:	f04f 0200 	mov.w	r2, #0
 800f122:	f04f 0300 	mov.w	r3, #0
 800f126:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800f12a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800f12e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800f132:	ebb2 0408 	subs.w	r4, r2, r8
 800f136:	eb63 0509 	sbc.w	r5, r3, r9
 800f13a:	f04f 0200 	mov.w	r2, #0
 800f13e:	f04f 0300 	mov.w	r3, #0
 800f142:	00eb      	lsls	r3, r5, #3
 800f144:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f148:	00e2      	lsls	r2, r4, #3
 800f14a:	4614      	mov	r4, r2
 800f14c:	461d      	mov	r5, r3
 800f14e:	eb14 030a 	adds.w	r3, r4, sl
 800f152:	603b      	str	r3, [r7, #0]
 800f154:	eb45 030b 	adc.w	r3, r5, fp
 800f158:	607b      	str	r3, [r7, #4]
 800f15a:	f04f 0200 	mov.w	r2, #0
 800f15e:	f04f 0300 	mov.w	r3, #0
 800f162:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f166:	4629      	mov	r1, r5
 800f168:	028b      	lsls	r3, r1, #10
 800f16a:	4621      	mov	r1, r4
 800f16c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f170:	4621      	mov	r1, r4
 800f172:	028a      	lsls	r2, r1, #10
 800f174:	4610      	mov	r0, r2
 800f176:	4619      	mov	r1, r3
 800f178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f17a:	2200      	movs	r2, #0
 800f17c:	60bb      	str	r3, [r7, #8]
 800f17e:	60fa      	str	r2, [r7, #12]
 800f180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f184:	f7f1 fdd0 	bl	8000d28 <__aeabi_uldivmod>
 800f188:	4602      	mov	r2, r0
 800f18a:	460b      	mov	r3, r1
 800f18c:	4613      	mov	r3, r2
 800f18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800f190:	4b0b      	ldr	r3, [pc, #44]	@ (800f1c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	0c1b      	lsrs	r3, r3, #16
 800f196:	f003 0303 	and.w	r3, r3, #3
 800f19a:	3301      	adds	r3, #1
 800f19c:	005b      	lsls	r3, r3, #1
 800f19e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800f1a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f1aa:	e002      	b.n	800f1b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f1ac:	4b05      	ldr	r3, [pc, #20]	@ (800f1c4 <HAL_RCC_GetSysClockFreq+0x184>)
 800f1ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800f1b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3740      	adds	r7, #64	@ 0x40
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f1be:	bf00      	nop
 800f1c0:	40023800 	.word	0x40023800
 800f1c4:	00f42400 	.word	0x00f42400
 800f1c8:	017d7840 	.word	0x017d7840

0800f1cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f1d0:	4b03      	ldr	r3, [pc, #12]	@ (800f1e0 <HAL_RCC_GetHCLKFreq+0x14>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1dc:	4770      	bx	lr
 800f1de:	bf00      	nop
 800f1e0:	200000d0 	.word	0x200000d0

0800f1e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f1e8:	f7ff fff0 	bl	800f1cc <HAL_RCC_GetHCLKFreq>
 800f1ec:	4602      	mov	r2, r0
 800f1ee:	4b05      	ldr	r3, [pc, #20]	@ (800f204 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f1f0:	689b      	ldr	r3, [r3, #8]
 800f1f2:	0a9b      	lsrs	r3, r3, #10
 800f1f4:	f003 0307 	and.w	r3, r3, #7
 800f1f8:	4903      	ldr	r1, [pc, #12]	@ (800f208 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f1fa:	5ccb      	ldrb	r3, [r1, r3]
 800f1fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f200:	4618      	mov	r0, r3
 800f202:	bd80      	pop	{r7, pc}
 800f204:	40023800 	.word	0x40023800
 800f208:	08015e68 	.word	0x08015e68

0800f20c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f210:	f7ff ffdc 	bl	800f1cc <HAL_RCC_GetHCLKFreq>
 800f214:	4602      	mov	r2, r0
 800f216:	4b05      	ldr	r3, [pc, #20]	@ (800f22c <HAL_RCC_GetPCLK2Freq+0x20>)
 800f218:	689b      	ldr	r3, [r3, #8]
 800f21a:	0b5b      	lsrs	r3, r3, #13
 800f21c:	f003 0307 	and.w	r3, r3, #7
 800f220:	4903      	ldr	r1, [pc, #12]	@ (800f230 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f222:	5ccb      	ldrb	r3, [r1, r3]
 800f224:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f228:	4618      	mov	r0, r3
 800f22a:	bd80      	pop	{r7, pc}
 800f22c:	40023800 	.word	0x40023800
 800f230:	08015e68 	.word	0x08015e68

0800f234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d101      	bne.n	800f246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f242:	2301      	movs	r3, #1
 800f244:	e041      	b.n	800f2ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d106      	bne.n	800f260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2200      	movs	r2, #0
 800f256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f7fc fd90 	bl	800bd80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2202      	movs	r2, #2
 800f264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	3304      	adds	r3, #4
 800f270:	4619      	mov	r1, r3
 800f272:	4610      	mov	r0, r2
 800f274:	f000 fc76 	bl	800fb64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2201      	movs	r2, #1
 800f27c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2201      	movs	r2, #1
 800f284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2201      	movs	r2, #1
 800f28c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2201      	movs	r2, #1
 800f294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2201      	movs	r2, #1
 800f29c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f2c8:	2300      	movs	r3, #0
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3708      	adds	r7, #8
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
	...

0800f2d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b085      	sub	sp, #20
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f2e2:	b2db      	uxtb	r3, r3
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d001      	beq.n	800f2ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	e046      	b.n	800f37a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2202      	movs	r2, #2
 800f2f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4a23      	ldr	r2, [pc, #140]	@ (800f388 <HAL_TIM_Base_Start+0xb4>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d022      	beq.n	800f344 <HAL_TIM_Base_Start+0x70>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f306:	d01d      	beq.n	800f344 <HAL_TIM_Base_Start+0x70>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4a1f      	ldr	r2, [pc, #124]	@ (800f38c <HAL_TIM_Base_Start+0xb8>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d018      	beq.n	800f344 <HAL_TIM_Base_Start+0x70>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	4a1e      	ldr	r2, [pc, #120]	@ (800f390 <HAL_TIM_Base_Start+0xbc>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d013      	beq.n	800f344 <HAL_TIM_Base_Start+0x70>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	4a1c      	ldr	r2, [pc, #112]	@ (800f394 <HAL_TIM_Base_Start+0xc0>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d00e      	beq.n	800f344 <HAL_TIM_Base_Start+0x70>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	4a1b      	ldr	r2, [pc, #108]	@ (800f398 <HAL_TIM_Base_Start+0xc4>)
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d009      	beq.n	800f344 <HAL_TIM_Base_Start+0x70>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	4a19      	ldr	r2, [pc, #100]	@ (800f39c <HAL_TIM_Base_Start+0xc8>)
 800f336:	4293      	cmp	r3, r2
 800f338:	d004      	beq.n	800f344 <HAL_TIM_Base_Start+0x70>
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	4a18      	ldr	r2, [pc, #96]	@ (800f3a0 <HAL_TIM_Base_Start+0xcc>)
 800f340:	4293      	cmp	r3, r2
 800f342:	d111      	bne.n	800f368 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	689b      	ldr	r3, [r3, #8]
 800f34a:	f003 0307 	and.w	r3, r3, #7
 800f34e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2b06      	cmp	r3, #6
 800f354:	d010      	beq.n	800f378 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f042 0201 	orr.w	r2, r2, #1
 800f364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f366:	e007      	b.n	800f378 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	681a      	ldr	r2, [r3, #0]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	f042 0201 	orr.w	r2, r2, #1
 800f376:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f378:	2300      	movs	r3, #0
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3714      	adds	r7, #20
 800f37e:	46bd      	mov	sp, r7
 800f380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f384:	4770      	bx	lr
 800f386:	bf00      	nop
 800f388:	40010000 	.word	0x40010000
 800f38c:	40000400 	.word	0x40000400
 800f390:	40000800 	.word	0x40000800
 800f394:	40000c00 	.word	0x40000c00
 800f398:	40010400 	.word	0x40010400
 800f39c:	40014000 	.word	0x40014000
 800f3a0:	40001800 	.word	0x40001800

0800f3a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d101      	bne.n	800f3b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e041      	b.n	800f43a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f3bc:	b2db      	uxtb	r3, r3
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d106      	bne.n	800f3d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 f839 	bl	800f442 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2202      	movs	r2, #2
 800f3d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	3304      	adds	r3, #4
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	4610      	mov	r0, r2
 800f3e4:	f000 fbbe 	bl	800fb64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2201      	movs	r2, #1
 800f404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2201      	movs	r2, #1
 800f40c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2201      	movs	r2, #1
 800f414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2201      	movs	r2, #1
 800f41c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2201      	movs	r2, #1
 800f424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2201      	movs	r2, #1
 800f42c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2201      	movs	r2, #1
 800f434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f438:	2300      	movs	r3, #0
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3708      	adds	r7, #8
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f442:	b480      	push	{r7}
 800f444:	b083      	sub	sp, #12
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f44a:	bf00      	nop
 800f44c:	370c      	adds	r7, #12
 800f44e:	46bd      	mov	sp, r7
 800f450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f454:	4770      	bx	lr
	...

0800f458 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b084      	sub	sp, #16
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d109      	bne.n	800f47c <HAL_TIM_PWM_Start+0x24>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f46e:	b2db      	uxtb	r3, r3
 800f470:	2b01      	cmp	r3, #1
 800f472:	bf14      	ite	ne
 800f474:	2301      	movne	r3, #1
 800f476:	2300      	moveq	r3, #0
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	e022      	b.n	800f4c2 <HAL_TIM_PWM_Start+0x6a>
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	2b04      	cmp	r3, #4
 800f480:	d109      	bne.n	800f496 <HAL_TIM_PWM_Start+0x3e>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f488:	b2db      	uxtb	r3, r3
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	bf14      	ite	ne
 800f48e:	2301      	movne	r3, #1
 800f490:	2300      	moveq	r3, #0
 800f492:	b2db      	uxtb	r3, r3
 800f494:	e015      	b.n	800f4c2 <HAL_TIM_PWM_Start+0x6a>
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	2b08      	cmp	r3, #8
 800f49a:	d109      	bne.n	800f4b0 <HAL_TIM_PWM_Start+0x58>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	2b01      	cmp	r3, #1
 800f4a6:	bf14      	ite	ne
 800f4a8:	2301      	movne	r3, #1
 800f4aa:	2300      	moveq	r3, #0
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	e008      	b.n	800f4c2 <HAL_TIM_PWM_Start+0x6a>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	bf14      	ite	ne
 800f4bc:	2301      	movne	r3, #1
 800f4be:	2300      	moveq	r3, #0
 800f4c0:	b2db      	uxtb	r3, r3
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d001      	beq.n	800f4ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	e07c      	b.n	800f5c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d104      	bne.n	800f4da <HAL_TIM_PWM_Start+0x82>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2202      	movs	r2, #2
 800f4d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f4d8:	e013      	b.n	800f502 <HAL_TIM_PWM_Start+0xaa>
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	2b04      	cmp	r3, #4
 800f4de:	d104      	bne.n	800f4ea <HAL_TIM_PWM_Start+0x92>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2202      	movs	r2, #2
 800f4e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f4e8:	e00b      	b.n	800f502 <HAL_TIM_PWM_Start+0xaa>
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	2b08      	cmp	r3, #8
 800f4ee:	d104      	bne.n	800f4fa <HAL_TIM_PWM_Start+0xa2>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2202      	movs	r2, #2
 800f4f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f4f8:	e003      	b.n	800f502 <HAL_TIM_PWM_Start+0xaa>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2202      	movs	r2, #2
 800f4fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2201      	movs	r2, #1
 800f508:	6839      	ldr	r1, [r7, #0]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f000 fe20 	bl	8010150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	4a2d      	ldr	r2, [pc, #180]	@ (800f5cc <HAL_TIM_PWM_Start+0x174>)
 800f516:	4293      	cmp	r3, r2
 800f518:	d004      	beq.n	800f524 <HAL_TIM_PWM_Start+0xcc>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	4a2c      	ldr	r2, [pc, #176]	@ (800f5d0 <HAL_TIM_PWM_Start+0x178>)
 800f520:	4293      	cmp	r3, r2
 800f522:	d101      	bne.n	800f528 <HAL_TIM_PWM_Start+0xd0>
 800f524:	2301      	movs	r3, #1
 800f526:	e000      	b.n	800f52a <HAL_TIM_PWM_Start+0xd2>
 800f528:	2300      	movs	r3, #0
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d007      	beq.n	800f53e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f53c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	4a22      	ldr	r2, [pc, #136]	@ (800f5cc <HAL_TIM_PWM_Start+0x174>)
 800f544:	4293      	cmp	r3, r2
 800f546:	d022      	beq.n	800f58e <HAL_TIM_PWM_Start+0x136>
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f550:	d01d      	beq.n	800f58e <HAL_TIM_PWM_Start+0x136>
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4a1f      	ldr	r2, [pc, #124]	@ (800f5d4 <HAL_TIM_PWM_Start+0x17c>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d018      	beq.n	800f58e <HAL_TIM_PWM_Start+0x136>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	4a1d      	ldr	r2, [pc, #116]	@ (800f5d8 <HAL_TIM_PWM_Start+0x180>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d013      	beq.n	800f58e <HAL_TIM_PWM_Start+0x136>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	4a1c      	ldr	r2, [pc, #112]	@ (800f5dc <HAL_TIM_PWM_Start+0x184>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d00e      	beq.n	800f58e <HAL_TIM_PWM_Start+0x136>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4a16      	ldr	r2, [pc, #88]	@ (800f5d0 <HAL_TIM_PWM_Start+0x178>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d009      	beq.n	800f58e <HAL_TIM_PWM_Start+0x136>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4a18      	ldr	r2, [pc, #96]	@ (800f5e0 <HAL_TIM_PWM_Start+0x188>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d004      	beq.n	800f58e <HAL_TIM_PWM_Start+0x136>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4a16      	ldr	r2, [pc, #88]	@ (800f5e4 <HAL_TIM_PWM_Start+0x18c>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d111      	bne.n	800f5b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	689b      	ldr	r3, [r3, #8]
 800f594:	f003 0307 	and.w	r3, r3, #7
 800f598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2b06      	cmp	r3, #6
 800f59e:	d010      	beq.n	800f5c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	681a      	ldr	r2, [r3, #0]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f042 0201 	orr.w	r2, r2, #1
 800f5ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f5b0:	e007      	b.n	800f5c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f042 0201 	orr.w	r2, r2, #1
 800f5c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f5c2:	2300      	movs	r3, #0
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3710      	adds	r7, #16
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}
 800f5cc:	40010000 	.word	0x40010000
 800f5d0:	40010400 	.word	0x40010400
 800f5d4:	40000400 	.word	0x40000400
 800f5d8:	40000800 	.word	0x40000800
 800f5dc:	40000c00 	.word	0x40000c00
 800f5e0:	40014000 	.word	0x40014000
 800f5e4:	40001800 	.word	0x40001800

0800f5e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b086      	sub	sp, #24
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d101      	bne.n	800f5fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	e097      	b.n	800f72c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f602:	b2db      	uxtb	r3, r3
 800f604:	2b00      	cmp	r3, #0
 800f606:	d106      	bne.n	800f616 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f7fc faad 	bl	800bb70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2202      	movs	r2, #2
 800f61a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	689b      	ldr	r3, [r3, #8]
 800f624:	687a      	ldr	r2, [r7, #4]
 800f626:	6812      	ldr	r2, [r2, #0]
 800f628:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f62c:	f023 0307 	bic.w	r3, r3, #7
 800f630:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681a      	ldr	r2, [r3, #0]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	3304      	adds	r3, #4
 800f63a:	4619      	mov	r1, r3
 800f63c:	4610      	mov	r0, r2
 800f63e:	f000 fa91 	bl	800fb64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	689b      	ldr	r3, [r3, #8]
 800f648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	699b      	ldr	r3, [r3, #24]
 800f650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	6a1b      	ldr	r3, [r3, #32]
 800f658:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	697a      	ldr	r2, [r7, #20]
 800f660:	4313      	orrs	r3, r2
 800f662:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f66a:	f023 0303 	bic.w	r3, r3, #3
 800f66e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	689a      	ldr	r2, [r3, #8]
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	699b      	ldr	r3, [r3, #24]
 800f678:	021b      	lsls	r3, r3, #8
 800f67a:	4313      	orrs	r3, r2
 800f67c:	693a      	ldr	r2, [r7, #16]
 800f67e:	4313      	orrs	r3, r2
 800f680:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800f688:	f023 030c 	bic.w	r3, r3, #12
 800f68c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f694:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f698:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	68da      	ldr	r2, [r3, #12]
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	69db      	ldr	r3, [r3, #28]
 800f6a2:	021b      	lsls	r3, r3, #8
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	693a      	ldr	r2, [r7, #16]
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	691b      	ldr	r3, [r3, #16]
 800f6b0:	011a      	lsls	r2, r3, #4
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	6a1b      	ldr	r3, [r3, #32]
 800f6b6:	031b      	lsls	r3, r3, #12
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	693a      	ldr	r2, [r7, #16]
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800f6c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800f6ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	685a      	ldr	r2, [r3, #4]
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	695b      	ldr	r3, [r3, #20]
 800f6d8:	011b      	lsls	r3, r3, #4
 800f6da:	4313      	orrs	r3, r2
 800f6dc:	68fa      	ldr	r2, [r7, #12]
 800f6de:	4313      	orrs	r3, r2
 800f6e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	697a      	ldr	r2, [r7, #20]
 800f6e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	693a      	ldr	r2, [r7, #16]
 800f6f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	68fa      	ldr	r2, [r7, #12]
 800f6f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2201      	movs	r2, #1
 800f706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2201      	movs	r2, #1
 800f70e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2201      	movs	r2, #1
 800f716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2201      	movs	r2, #1
 800f71e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2201      	movs	r2, #1
 800f726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f72a:	2300      	movs	r3, #0
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3718      	adds	r7, #24
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b084      	sub	sp, #16
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f744:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f74c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f754:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f75c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d110      	bne.n	800f786 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f764:	7bfb      	ldrb	r3, [r7, #15]
 800f766:	2b01      	cmp	r3, #1
 800f768:	d102      	bne.n	800f770 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800f76a:	7b7b      	ldrb	r3, [r7, #13]
 800f76c:	2b01      	cmp	r3, #1
 800f76e:	d001      	beq.n	800f774 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800f770:	2301      	movs	r3, #1
 800f772:	e069      	b.n	800f848 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2202      	movs	r2, #2
 800f778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2202      	movs	r2, #2
 800f780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f784:	e031      	b.n	800f7ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	2b04      	cmp	r3, #4
 800f78a:	d110      	bne.n	800f7ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800f78c:	7bbb      	ldrb	r3, [r7, #14]
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d102      	bne.n	800f798 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f792:	7b3b      	ldrb	r3, [r7, #12]
 800f794:	2b01      	cmp	r3, #1
 800f796:	d001      	beq.n	800f79c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800f798:	2301      	movs	r3, #1
 800f79a:	e055      	b.n	800f848 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2202      	movs	r2, #2
 800f7a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2202      	movs	r2, #2
 800f7a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f7ac:	e01d      	b.n	800f7ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f7ae:	7bfb      	ldrb	r3, [r7, #15]
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d108      	bne.n	800f7c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800f7b4:	7bbb      	ldrb	r3, [r7, #14]
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	d105      	bne.n	800f7c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f7ba:	7b7b      	ldrb	r3, [r7, #13]
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d102      	bne.n	800f7c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f7c0:	7b3b      	ldrb	r3, [r7, #12]
 800f7c2:	2b01      	cmp	r3, #1
 800f7c4:	d001      	beq.n	800f7ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	e03e      	b.n	800f848 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2202      	movs	r2, #2
 800f7ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2202      	movs	r2, #2
 800f7d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2202      	movs	r2, #2
 800f7de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2202      	movs	r2, #2
 800f7e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d003      	beq.n	800f7f8 <HAL_TIM_Encoder_Start+0xc4>
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	2b04      	cmp	r3, #4
 800f7f4:	d008      	beq.n	800f808 <HAL_TIM_Encoder_Start+0xd4>
 800f7f6:	e00f      	b.n	800f818 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	2100      	movs	r1, #0
 800f800:	4618      	mov	r0, r3
 800f802:	f000 fca5 	bl	8010150 <TIM_CCxChannelCmd>
      break;
 800f806:	e016      	b.n	800f836 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	2201      	movs	r2, #1
 800f80e:	2104      	movs	r1, #4
 800f810:	4618      	mov	r0, r3
 800f812:	f000 fc9d 	bl	8010150 <TIM_CCxChannelCmd>
      break;
 800f816:	e00e      	b.n	800f836 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2201      	movs	r2, #1
 800f81e:	2100      	movs	r1, #0
 800f820:	4618      	mov	r0, r3
 800f822:	f000 fc95 	bl	8010150 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2201      	movs	r2, #1
 800f82c:	2104      	movs	r1, #4
 800f82e:	4618      	mov	r0, r3
 800f830:	f000 fc8e 	bl	8010150 <TIM_CCxChannelCmd>
      break;
 800f834:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	681a      	ldr	r2, [r3, #0]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f042 0201 	orr.w	r2, r2, #1
 800f844:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f846:	2300      	movs	r3, #0
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3710      	adds	r7, #16
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b086      	sub	sp, #24
 800f854:	af00      	add	r7, sp, #0
 800f856:	60f8      	str	r0, [r7, #12]
 800f858:	60b9      	str	r1, [r7, #8]
 800f85a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f85c:	2300      	movs	r3, #0
 800f85e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f866:	2b01      	cmp	r3, #1
 800f868:	d101      	bne.n	800f86e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f86a:	2302      	movs	r3, #2
 800f86c:	e0ae      	b.n	800f9cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2201      	movs	r2, #1
 800f872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2b0c      	cmp	r3, #12
 800f87a:	f200 809f 	bhi.w	800f9bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800f87e:	a201      	add	r2, pc, #4	@ (adr r2, 800f884 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f884:	0800f8b9 	.word	0x0800f8b9
 800f888:	0800f9bd 	.word	0x0800f9bd
 800f88c:	0800f9bd 	.word	0x0800f9bd
 800f890:	0800f9bd 	.word	0x0800f9bd
 800f894:	0800f8f9 	.word	0x0800f8f9
 800f898:	0800f9bd 	.word	0x0800f9bd
 800f89c:	0800f9bd 	.word	0x0800f9bd
 800f8a0:	0800f9bd 	.word	0x0800f9bd
 800f8a4:	0800f93b 	.word	0x0800f93b
 800f8a8:	0800f9bd 	.word	0x0800f9bd
 800f8ac:	0800f9bd 	.word	0x0800f9bd
 800f8b0:	0800f9bd 	.word	0x0800f9bd
 800f8b4:	0800f97b 	.word	0x0800f97b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	68b9      	ldr	r1, [r7, #8]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f000 f9fc 	bl	800fcbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	699a      	ldr	r2, [r3, #24]
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f042 0208 	orr.w	r2, r2, #8
 800f8d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	699a      	ldr	r2, [r3, #24]
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	f022 0204 	bic.w	r2, r2, #4
 800f8e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	6999      	ldr	r1, [r3, #24]
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	691a      	ldr	r2, [r3, #16]
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	430a      	orrs	r2, r1
 800f8f4:	619a      	str	r2, [r3, #24]
      break;
 800f8f6:	e064      	b.n	800f9c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	68b9      	ldr	r1, [r7, #8]
 800f8fe:	4618      	mov	r0, r3
 800f900:	f000 fa4c 	bl	800fd9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	699a      	ldr	r2, [r3, #24]
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	699a      	ldr	r2, [r3, #24]
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	6999      	ldr	r1, [r3, #24]
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	691b      	ldr	r3, [r3, #16]
 800f92e:	021a      	lsls	r2, r3, #8
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	430a      	orrs	r2, r1
 800f936:	619a      	str	r2, [r3, #24]
      break;
 800f938:	e043      	b.n	800f9c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	68b9      	ldr	r1, [r7, #8]
 800f940:	4618      	mov	r0, r3
 800f942:	f000 faa1 	bl	800fe88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	69da      	ldr	r2, [r3, #28]
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f042 0208 	orr.w	r2, r2, #8
 800f954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	69da      	ldr	r2, [r3, #28]
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f022 0204 	bic.w	r2, r2, #4
 800f964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	69d9      	ldr	r1, [r3, #28]
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	691a      	ldr	r2, [r3, #16]
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	430a      	orrs	r2, r1
 800f976:	61da      	str	r2, [r3, #28]
      break;
 800f978:	e023      	b.n	800f9c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	68b9      	ldr	r1, [r7, #8]
 800f980:	4618      	mov	r0, r3
 800f982:	f000 faf5 	bl	800ff70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	69da      	ldr	r2, [r3, #28]
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	69da      	ldr	r2, [r3, #28]
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f9a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	69d9      	ldr	r1, [r3, #28]
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	691b      	ldr	r3, [r3, #16]
 800f9b0:	021a      	lsls	r2, r3, #8
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	430a      	orrs	r2, r1
 800f9b8:	61da      	str	r2, [r3, #28]
      break;
 800f9ba:	e002      	b.n	800f9c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800f9bc:	2301      	movs	r3, #1
 800f9be:	75fb      	strb	r3, [r7, #23]
      break;
 800f9c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f9ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3718      	adds	r7, #24
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b084      	sub	sp, #16
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
 800f9dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f9e8:	2b01      	cmp	r3, #1
 800f9ea:	d101      	bne.n	800f9f0 <HAL_TIM_ConfigClockSource+0x1c>
 800f9ec:	2302      	movs	r3, #2
 800f9ee:	e0b4      	b.n	800fb5a <HAL_TIM_ConfigClockSource+0x186>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2202      	movs	r2, #2
 800f9fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	689b      	ldr	r3, [r3, #8]
 800fa06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fa0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fa16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68ba      	ldr	r2, [r7, #8]
 800fa1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fa28:	d03e      	beq.n	800faa8 <HAL_TIM_ConfigClockSource+0xd4>
 800fa2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fa2e:	f200 8087 	bhi.w	800fb40 <HAL_TIM_ConfigClockSource+0x16c>
 800fa32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fa36:	f000 8086 	beq.w	800fb46 <HAL_TIM_ConfigClockSource+0x172>
 800fa3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fa3e:	d87f      	bhi.n	800fb40 <HAL_TIM_ConfigClockSource+0x16c>
 800fa40:	2b70      	cmp	r3, #112	@ 0x70
 800fa42:	d01a      	beq.n	800fa7a <HAL_TIM_ConfigClockSource+0xa6>
 800fa44:	2b70      	cmp	r3, #112	@ 0x70
 800fa46:	d87b      	bhi.n	800fb40 <HAL_TIM_ConfigClockSource+0x16c>
 800fa48:	2b60      	cmp	r3, #96	@ 0x60
 800fa4a:	d050      	beq.n	800faee <HAL_TIM_ConfigClockSource+0x11a>
 800fa4c:	2b60      	cmp	r3, #96	@ 0x60
 800fa4e:	d877      	bhi.n	800fb40 <HAL_TIM_ConfigClockSource+0x16c>
 800fa50:	2b50      	cmp	r3, #80	@ 0x50
 800fa52:	d03c      	beq.n	800face <HAL_TIM_ConfigClockSource+0xfa>
 800fa54:	2b50      	cmp	r3, #80	@ 0x50
 800fa56:	d873      	bhi.n	800fb40 <HAL_TIM_ConfigClockSource+0x16c>
 800fa58:	2b40      	cmp	r3, #64	@ 0x40
 800fa5a:	d058      	beq.n	800fb0e <HAL_TIM_ConfigClockSource+0x13a>
 800fa5c:	2b40      	cmp	r3, #64	@ 0x40
 800fa5e:	d86f      	bhi.n	800fb40 <HAL_TIM_ConfigClockSource+0x16c>
 800fa60:	2b30      	cmp	r3, #48	@ 0x30
 800fa62:	d064      	beq.n	800fb2e <HAL_TIM_ConfigClockSource+0x15a>
 800fa64:	2b30      	cmp	r3, #48	@ 0x30
 800fa66:	d86b      	bhi.n	800fb40 <HAL_TIM_ConfigClockSource+0x16c>
 800fa68:	2b20      	cmp	r3, #32
 800fa6a:	d060      	beq.n	800fb2e <HAL_TIM_ConfigClockSource+0x15a>
 800fa6c:	2b20      	cmp	r3, #32
 800fa6e:	d867      	bhi.n	800fb40 <HAL_TIM_ConfigClockSource+0x16c>
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d05c      	beq.n	800fb2e <HAL_TIM_ConfigClockSource+0x15a>
 800fa74:	2b10      	cmp	r3, #16
 800fa76:	d05a      	beq.n	800fb2e <HAL_TIM_ConfigClockSource+0x15a>
 800fa78:	e062      	b.n	800fb40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fa8a:	f000 fb41 	bl	8010110 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	689b      	ldr	r3, [r3, #8]
 800fa94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fa9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	68ba      	ldr	r2, [r7, #8]
 800faa4:	609a      	str	r2, [r3, #8]
      break;
 800faa6:	e04f      	b.n	800fb48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fab8:	f000 fb2a 	bl	8010110 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	689a      	ldr	r2, [r3, #8]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800faca:	609a      	str	r2, [r3, #8]
      break;
 800facc:	e03c      	b.n	800fb48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fada:	461a      	mov	r2, r3
 800fadc:	f000 fa9e 	bl	801001c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	2150      	movs	r1, #80	@ 0x50
 800fae6:	4618      	mov	r0, r3
 800fae8:	f000 faf7 	bl	80100da <TIM_ITRx_SetConfig>
      break;
 800faec:	e02c      	b.n	800fb48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fafa:	461a      	mov	r2, r3
 800fafc:	f000 fabd 	bl	801007a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	2160      	movs	r1, #96	@ 0x60
 800fb06:	4618      	mov	r0, r3
 800fb08:	f000 fae7 	bl	80100da <TIM_ITRx_SetConfig>
      break;
 800fb0c:	e01c      	b.n	800fb48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	f000 fa7e 	bl	801001c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	2140      	movs	r1, #64	@ 0x40
 800fb26:	4618      	mov	r0, r3
 800fb28:	f000 fad7 	bl	80100da <TIM_ITRx_SetConfig>
      break;
 800fb2c:	e00c      	b.n	800fb48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681a      	ldr	r2, [r3, #0]
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	4619      	mov	r1, r3
 800fb38:	4610      	mov	r0, r2
 800fb3a:	f000 face 	bl	80100da <TIM_ITRx_SetConfig>
      break;
 800fb3e:	e003      	b.n	800fb48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800fb40:	2301      	movs	r3, #1
 800fb42:	73fb      	strb	r3, [r7, #15]
      break;
 800fb44:	e000      	b.n	800fb48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800fb46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2200      	movs	r2, #0
 800fb54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3710      	adds	r7, #16
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
	...

0800fb64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fb64:	b480      	push	{r7}
 800fb66:	b085      	sub	sp, #20
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	4a46      	ldr	r2, [pc, #280]	@ (800fc90 <TIM_Base_SetConfig+0x12c>)
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d013      	beq.n	800fba4 <TIM_Base_SetConfig+0x40>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb82:	d00f      	beq.n	800fba4 <TIM_Base_SetConfig+0x40>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	4a43      	ldr	r2, [pc, #268]	@ (800fc94 <TIM_Base_SetConfig+0x130>)
 800fb88:	4293      	cmp	r3, r2
 800fb8a:	d00b      	beq.n	800fba4 <TIM_Base_SetConfig+0x40>
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	4a42      	ldr	r2, [pc, #264]	@ (800fc98 <TIM_Base_SetConfig+0x134>)
 800fb90:	4293      	cmp	r3, r2
 800fb92:	d007      	beq.n	800fba4 <TIM_Base_SetConfig+0x40>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	4a41      	ldr	r2, [pc, #260]	@ (800fc9c <TIM_Base_SetConfig+0x138>)
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d003      	beq.n	800fba4 <TIM_Base_SetConfig+0x40>
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	4a40      	ldr	r2, [pc, #256]	@ (800fca0 <TIM_Base_SetConfig+0x13c>)
 800fba0:	4293      	cmp	r3, r2
 800fba2:	d108      	bne.n	800fbb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fbaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	68fa      	ldr	r2, [r7, #12]
 800fbb2:	4313      	orrs	r3, r2
 800fbb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	4a35      	ldr	r2, [pc, #212]	@ (800fc90 <TIM_Base_SetConfig+0x12c>)
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d02b      	beq.n	800fc16 <TIM_Base_SetConfig+0xb2>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fbc4:	d027      	beq.n	800fc16 <TIM_Base_SetConfig+0xb2>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	4a32      	ldr	r2, [pc, #200]	@ (800fc94 <TIM_Base_SetConfig+0x130>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d023      	beq.n	800fc16 <TIM_Base_SetConfig+0xb2>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4a31      	ldr	r2, [pc, #196]	@ (800fc98 <TIM_Base_SetConfig+0x134>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d01f      	beq.n	800fc16 <TIM_Base_SetConfig+0xb2>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	4a30      	ldr	r2, [pc, #192]	@ (800fc9c <TIM_Base_SetConfig+0x138>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d01b      	beq.n	800fc16 <TIM_Base_SetConfig+0xb2>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	4a2f      	ldr	r2, [pc, #188]	@ (800fca0 <TIM_Base_SetConfig+0x13c>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d017      	beq.n	800fc16 <TIM_Base_SetConfig+0xb2>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	4a2e      	ldr	r2, [pc, #184]	@ (800fca4 <TIM_Base_SetConfig+0x140>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d013      	beq.n	800fc16 <TIM_Base_SetConfig+0xb2>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	4a2d      	ldr	r2, [pc, #180]	@ (800fca8 <TIM_Base_SetConfig+0x144>)
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	d00f      	beq.n	800fc16 <TIM_Base_SetConfig+0xb2>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	4a2c      	ldr	r2, [pc, #176]	@ (800fcac <TIM_Base_SetConfig+0x148>)
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d00b      	beq.n	800fc16 <TIM_Base_SetConfig+0xb2>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	4a2b      	ldr	r2, [pc, #172]	@ (800fcb0 <TIM_Base_SetConfig+0x14c>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d007      	beq.n	800fc16 <TIM_Base_SetConfig+0xb2>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	4a2a      	ldr	r2, [pc, #168]	@ (800fcb4 <TIM_Base_SetConfig+0x150>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d003      	beq.n	800fc16 <TIM_Base_SetConfig+0xb2>
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	4a29      	ldr	r2, [pc, #164]	@ (800fcb8 <TIM_Base_SetConfig+0x154>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d108      	bne.n	800fc28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fc1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	68fa      	ldr	r2, [r7, #12]
 800fc24:	4313      	orrs	r3, r2
 800fc26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	695b      	ldr	r3, [r3, #20]
 800fc32:	4313      	orrs	r3, r2
 800fc34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	68fa      	ldr	r2, [r7, #12]
 800fc3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	689a      	ldr	r2, [r3, #8]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	4a10      	ldr	r2, [pc, #64]	@ (800fc90 <TIM_Base_SetConfig+0x12c>)
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d003      	beq.n	800fc5c <TIM_Base_SetConfig+0xf8>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	4a12      	ldr	r2, [pc, #72]	@ (800fca0 <TIM_Base_SetConfig+0x13c>)
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	d103      	bne.n	800fc64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	691a      	ldr	r2, [r3, #16]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2201      	movs	r2, #1
 800fc68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	691b      	ldr	r3, [r3, #16]
 800fc6e:	f003 0301 	and.w	r3, r3, #1
 800fc72:	2b01      	cmp	r3, #1
 800fc74:	d105      	bne.n	800fc82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	691b      	ldr	r3, [r3, #16]
 800fc7a:	f023 0201 	bic.w	r2, r3, #1
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	611a      	str	r2, [r3, #16]
  }
}
 800fc82:	bf00      	nop
 800fc84:	3714      	adds	r7, #20
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr
 800fc8e:	bf00      	nop
 800fc90:	40010000 	.word	0x40010000
 800fc94:	40000400 	.word	0x40000400
 800fc98:	40000800 	.word	0x40000800
 800fc9c:	40000c00 	.word	0x40000c00
 800fca0:	40010400 	.word	0x40010400
 800fca4:	40014000 	.word	0x40014000
 800fca8:	40014400 	.word	0x40014400
 800fcac:	40014800 	.word	0x40014800
 800fcb0:	40001800 	.word	0x40001800
 800fcb4:	40001c00 	.word	0x40001c00
 800fcb8:	40002000 	.word	0x40002000

0800fcbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b087      	sub	sp, #28
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6a1b      	ldr	r3, [r3, #32]
 800fcca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6a1b      	ldr	r3, [r3, #32]
 800fcd0:	f023 0201 	bic.w	r2, r3, #1
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	699b      	ldr	r3, [r3, #24]
 800fce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fcea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	f023 0303 	bic.w	r3, r3, #3
 800fcf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	68fa      	ldr	r2, [r7, #12]
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	f023 0302 	bic.w	r3, r3, #2
 800fd04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	689b      	ldr	r3, [r3, #8]
 800fd0a:	697a      	ldr	r2, [r7, #20]
 800fd0c:	4313      	orrs	r3, r2
 800fd0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4a20      	ldr	r2, [pc, #128]	@ (800fd94 <TIM_OC1_SetConfig+0xd8>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d003      	beq.n	800fd20 <TIM_OC1_SetConfig+0x64>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	4a1f      	ldr	r2, [pc, #124]	@ (800fd98 <TIM_OC1_SetConfig+0xdc>)
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d10c      	bne.n	800fd3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	f023 0308 	bic.w	r3, r3, #8
 800fd26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	68db      	ldr	r3, [r3, #12]
 800fd2c:	697a      	ldr	r2, [r7, #20]
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	f023 0304 	bic.w	r3, r3, #4
 800fd38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4a15      	ldr	r2, [pc, #84]	@ (800fd94 <TIM_OC1_SetConfig+0xd8>)
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	d003      	beq.n	800fd4a <TIM_OC1_SetConfig+0x8e>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	4a14      	ldr	r2, [pc, #80]	@ (800fd98 <TIM_OC1_SetConfig+0xdc>)
 800fd46:	4293      	cmp	r3, r2
 800fd48:	d111      	bne.n	800fd6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fd50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fd58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	695b      	ldr	r3, [r3, #20]
 800fd5e:	693a      	ldr	r2, [r7, #16]
 800fd60:	4313      	orrs	r3, r2
 800fd62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	699b      	ldr	r3, [r3, #24]
 800fd68:	693a      	ldr	r2, [r7, #16]
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	693a      	ldr	r2, [r7, #16]
 800fd72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	685a      	ldr	r2, [r3, #4]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	697a      	ldr	r2, [r7, #20]
 800fd86:	621a      	str	r2, [r3, #32]
}
 800fd88:	bf00      	nop
 800fd8a:	371c      	adds	r7, #28
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr
 800fd94:	40010000 	.word	0x40010000
 800fd98:	40010400 	.word	0x40010400

0800fd9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b087      	sub	sp, #28
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6a1b      	ldr	r3, [r3, #32]
 800fdaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6a1b      	ldr	r3, [r3, #32]
 800fdb0:	f023 0210 	bic.w	r2, r3, #16
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	685b      	ldr	r3, [r3, #4]
 800fdbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	699b      	ldr	r3, [r3, #24]
 800fdc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fdca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fdd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	021b      	lsls	r3, r3, #8
 800fdda:	68fa      	ldr	r2, [r7, #12]
 800fddc:	4313      	orrs	r3, r2
 800fdde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	f023 0320 	bic.w	r3, r3, #32
 800fde6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	689b      	ldr	r3, [r3, #8]
 800fdec:	011b      	lsls	r3, r3, #4
 800fdee:	697a      	ldr	r2, [r7, #20]
 800fdf0:	4313      	orrs	r3, r2
 800fdf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	4a22      	ldr	r2, [pc, #136]	@ (800fe80 <TIM_OC2_SetConfig+0xe4>)
 800fdf8:	4293      	cmp	r3, r2
 800fdfa:	d003      	beq.n	800fe04 <TIM_OC2_SetConfig+0x68>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	4a21      	ldr	r2, [pc, #132]	@ (800fe84 <TIM_OC2_SetConfig+0xe8>)
 800fe00:	4293      	cmp	r3, r2
 800fe02:	d10d      	bne.n	800fe20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fe0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	68db      	ldr	r3, [r3, #12]
 800fe10:	011b      	lsls	r3, r3, #4
 800fe12:	697a      	ldr	r2, [r7, #20]
 800fe14:	4313      	orrs	r3, r2
 800fe16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	4a17      	ldr	r2, [pc, #92]	@ (800fe80 <TIM_OC2_SetConfig+0xe4>)
 800fe24:	4293      	cmp	r3, r2
 800fe26:	d003      	beq.n	800fe30 <TIM_OC2_SetConfig+0x94>
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	4a16      	ldr	r2, [pc, #88]	@ (800fe84 <TIM_OC2_SetConfig+0xe8>)
 800fe2c:	4293      	cmp	r3, r2
 800fe2e:	d113      	bne.n	800fe58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fe36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fe3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	695b      	ldr	r3, [r3, #20]
 800fe44:	009b      	lsls	r3, r3, #2
 800fe46:	693a      	ldr	r2, [r7, #16]
 800fe48:	4313      	orrs	r3, r2
 800fe4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	699b      	ldr	r3, [r3, #24]
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	693a      	ldr	r2, [r7, #16]
 800fe54:	4313      	orrs	r3, r2
 800fe56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	693a      	ldr	r2, [r7, #16]
 800fe5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	68fa      	ldr	r2, [r7, #12]
 800fe62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	685a      	ldr	r2, [r3, #4]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	697a      	ldr	r2, [r7, #20]
 800fe70:	621a      	str	r2, [r3, #32]
}
 800fe72:	bf00      	nop
 800fe74:	371c      	adds	r7, #28
 800fe76:	46bd      	mov	sp, r7
 800fe78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7c:	4770      	bx	lr
 800fe7e:	bf00      	nop
 800fe80:	40010000 	.word	0x40010000
 800fe84:	40010400 	.word	0x40010400

0800fe88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b087      	sub	sp, #28
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6a1b      	ldr	r3, [r3, #32]
 800fe96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6a1b      	ldr	r3, [r3, #32]
 800fe9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	69db      	ldr	r3, [r3, #28]
 800feae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800feb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f023 0303 	bic.w	r3, r3, #3
 800febe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	68fa      	ldr	r2, [r7, #12]
 800fec6:	4313      	orrs	r3, r2
 800fec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	689b      	ldr	r3, [r3, #8]
 800fed6:	021b      	lsls	r3, r3, #8
 800fed8:	697a      	ldr	r2, [r7, #20]
 800feda:	4313      	orrs	r3, r2
 800fedc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	4a21      	ldr	r2, [pc, #132]	@ (800ff68 <TIM_OC3_SetConfig+0xe0>)
 800fee2:	4293      	cmp	r3, r2
 800fee4:	d003      	beq.n	800feee <TIM_OC3_SetConfig+0x66>
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	4a20      	ldr	r2, [pc, #128]	@ (800ff6c <TIM_OC3_SetConfig+0xe4>)
 800feea:	4293      	cmp	r3, r2
 800feec:	d10d      	bne.n	800ff0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	68db      	ldr	r3, [r3, #12]
 800fefa:	021b      	lsls	r3, r3, #8
 800fefc:	697a      	ldr	r2, [r7, #20]
 800fefe:	4313      	orrs	r3, r2
 800ff00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ff08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	4a16      	ldr	r2, [pc, #88]	@ (800ff68 <TIM_OC3_SetConfig+0xe0>)
 800ff0e:	4293      	cmp	r3, r2
 800ff10:	d003      	beq.n	800ff1a <TIM_OC3_SetConfig+0x92>
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	4a15      	ldr	r2, [pc, #84]	@ (800ff6c <TIM_OC3_SetConfig+0xe4>)
 800ff16:	4293      	cmp	r3, r2
 800ff18:	d113      	bne.n	800ff42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ff1a:	693b      	ldr	r3, [r7, #16]
 800ff1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ff20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ff28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	695b      	ldr	r3, [r3, #20]
 800ff2e:	011b      	lsls	r3, r3, #4
 800ff30:	693a      	ldr	r2, [r7, #16]
 800ff32:	4313      	orrs	r3, r2
 800ff34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	699b      	ldr	r3, [r3, #24]
 800ff3a:	011b      	lsls	r3, r3, #4
 800ff3c:	693a      	ldr	r2, [r7, #16]
 800ff3e:	4313      	orrs	r3, r2
 800ff40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	693a      	ldr	r2, [r7, #16]
 800ff46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	68fa      	ldr	r2, [r7, #12]
 800ff4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	685a      	ldr	r2, [r3, #4]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	697a      	ldr	r2, [r7, #20]
 800ff5a:	621a      	str	r2, [r3, #32]
}
 800ff5c:	bf00      	nop
 800ff5e:	371c      	adds	r7, #28
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr
 800ff68:	40010000 	.word	0x40010000
 800ff6c:	40010400 	.word	0x40010400

0800ff70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ff70:	b480      	push	{r7}
 800ff72:	b087      	sub	sp, #28
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6a1b      	ldr	r3, [r3, #32]
 800ff7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6a1b      	ldr	r3, [r3, #32]
 800ff84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	69db      	ldr	r3, [r3, #28]
 800ff96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ff9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ffa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	021b      	lsls	r3, r3, #8
 800ffae:	68fa      	ldr	r2, [r7, #12]
 800ffb0:	4313      	orrs	r3, r2
 800ffb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ffb4:	693b      	ldr	r3, [r7, #16]
 800ffb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ffba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	689b      	ldr	r3, [r3, #8]
 800ffc0:	031b      	lsls	r3, r3, #12
 800ffc2:	693a      	ldr	r2, [r7, #16]
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	4a12      	ldr	r2, [pc, #72]	@ (8010014 <TIM_OC4_SetConfig+0xa4>)
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d003      	beq.n	800ffd8 <TIM_OC4_SetConfig+0x68>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	4a11      	ldr	r2, [pc, #68]	@ (8010018 <TIM_OC4_SetConfig+0xa8>)
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	d109      	bne.n	800ffec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ffde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	695b      	ldr	r3, [r3, #20]
 800ffe4:	019b      	lsls	r3, r3, #6
 800ffe6:	697a      	ldr	r2, [r7, #20]
 800ffe8:	4313      	orrs	r3, r2
 800ffea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	697a      	ldr	r2, [r7, #20]
 800fff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	68fa      	ldr	r2, [r7, #12]
 800fff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	685a      	ldr	r2, [r3, #4]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	693a      	ldr	r2, [r7, #16]
 8010004:	621a      	str	r2, [r3, #32]
}
 8010006:	bf00      	nop
 8010008:	371c      	adds	r7, #28
 801000a:	46bd      	mov	sp, r7
 801000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010010:	4770      	bx	lr
 8010012:	bf00      	nop
 8010014:	40010000 	.word	0x40010000
 8010018:	40010400 	.word	0x40010400

0801001c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801001c:	b480      	push	{r7}
 801001e:	b087      	sub	sp, #28
 8010020:	af00      	add	r7, sp, #0
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	60b9      	str	r1, [r7, #8]
 8010026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	6a1b      	ldr	r3, [r3, #32]
 801002c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	6a1b      	ldr	r3, [r3, #32]
 8010032:	f023 0201 	bic.w	r2, r3, #1
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	699b      	ldr	r3, [r3, #24]
 801003e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	011b      	lsls	r3, r3, #4
 801004c:	693a      	ldr	r2, [r7, #16]
 801004e:	4313      	orrs	r3, r2
 8010050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	f023 030a 	bic.w	r3, r3, #10
 8010058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801005a:	697a      	ldr	r2, [r7, #20]
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	4313      	orrs	r3, r2
 8010060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	693a      	ldr	r2, [r7, #16]
 8010066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	697a      	ldr	r2, [r7, #20]
 801006c:	621a      	str	r2, [r3, #32]
}
 801006e:	bf00      	nop
 8010070:	371c      	adds	r7, #28
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr

0801007a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801007a:	b480      	push	{r7}
 801007c:	b087      	sub	sp, #28
 801007e:	af00      	add	r7, sp, #0
 8010080:	60f8      	str	r0, [r7, #12]
 8010082:	60b9      	str	r1, [r7, #8]
 8010084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	6a1b      	ldr	r3, [r3, #32]
 801008a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6a1b      	ldr	r3, [r3, #32]
 8010090:	f023 0210 	bic.w	r2, r3, #16
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	699b      	ldr	r3, [r3, #24]
 801009c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80100a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	031b      	lsls	r3, r3, #12
 80100aa:	693a      	ldr	r2, [r7, #16]
 80100ac:	4313      	orrs	r3, r2
 80100ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80100b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	011b      	lsls	r3, r3, #4
 80100bc:	697a      	ldr	r2, [r7, #20]
 80100be:	4313      	orrs	r3, r2
 80100c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	693a      	ldr	r2, [r7, #16]
 80100c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	697a      	ldr	r2, [r7, #20]
 80100cc:	621a      	str	r2, [r3, #32]
}
 80100ce:	bf00      	nop
 80100d0:	371c      	adds	r7, #28
 80100d2:	46bd      	mov	sp, r7
 80100d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d8:	4770      	bx	lr

080100da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80100da:	b480      	push	{r7}
 80100dc:	b085      	sub	sp, #20
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]
 80100e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	689b      	ldr	r3, [r3, #8]
 80100e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80100f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80100f2:	683a      	ldr	r2, [r7, #0]
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	4313      	orrs	r3, r2
 80100f8:	f043 0307 	orr.w	r3, r3, #7
 80100fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	68fa      	ldr	r2, [r7, #12]
 8010102:	609a      	str	r2, [r3, #8]
}
 8010104:	bf00      	nop
 8010106:	3714      	adds	r7, #20
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr

08010110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010110:	b480      	push	{r7}
 8010112:	b087      	sub	sp, #28
 8010114:	af00      	add	r7, sp, #0
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	607a      	str	r2, [r7, #4]
 801011c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	689b      	ldr	r3, [r3, #8]
 8010122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801012a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	021a      	lsls	r2, r3, #8
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	431a      	orrs	r2, r3
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	4313      	orrs	r3, r2
 8010138:	697a      	ldr	r2, [r7, #20]
 801013a:	4313      	orrs	r3, r2
 801013c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	697a      	ldr	r2, [r7, #20]
 8010142:	609a      	str	r2, [r3, #8]
}
 8010144:	bf00      	nop
 8010146:	371c      	adds	r7, #28
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr

08010150 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010150:	b480      	push	{r7}
 8010152:	b087      	sub	sp, #28
 8010154:	af00      	add	r7, sp, #0
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	60b9      	str	r1, [r7, #8]
 801015a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	f003 031f 	and.w	r3, r3, #31
 8010162:	2201      	movs	r2, #1
 8010164:	fa02 f303 	lsl.w	r3, r2, r3
 8010168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	6a1a      	ldr	r2, [r3, #32]
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	43db      	mvns	r3, r3
 8010172:	401a      	ands	r2, r3
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	6a1a      	ldr	r2, [r3, #32]
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	f003 031f 	and.w	r3, r3, #31
 8010182:	6879      	ldr	r1, [r7, #4]
 8010184:	fa01 f303 	lsl.w	r3, r1, r3
 8010188:	431a      	orrs	r2, r3
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	621a      	str	r2, [r3, #32]
}
 801018e:	bf00      	nop
 8010190:	371c      	adds	r7, #28
 8010192:	46bd      	mov	sp, r7
 8010194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010198:	4770      	bx	lr
	...

0801019c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801019c:	b480      	push	{r7}
 801019e:	b085      	sub	sp, #20
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80101ac:	2b01      	cmp	r3, #1
 80101ae:	d101      	bne.n	80101b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80101b0:	2302      	movs	r3, #2
 80101b2:	e05a      	b.n	801026a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2201      	movs	r2, #1
 80101b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2202      	movs	r2, #2
 80101c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	685b      	ldr	r3, [r3, #4]
 80101ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	689b      	ldr	r3, [r3, #8]
 80101d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80101da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	68fa      	ldr	r2, [r7, #12]
 80101e2:	4313      	orrs	r3, r2
 80101e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	68fa      	ldr	r2, [r7, #12]
 80101ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	4a21      	ldr	r2, [pc, #132]	@ (8010278 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d022      	beq.n	801023e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010200:	d01d      	beq.n	801023e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4a1d      	ldr	r2, [pc, #116]	@ (801027c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d018      	beq.n	801023e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4a1b      	ldr	r2, [pc, #108]	@ (8010280 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8010212:	4293      	cmp	r3, r2
 8010214:	d013      	beq.n	801023e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4a1a      	ldr	r2, [pc, #104]	@ (8010284 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801021c:	4293      	cmp	r3, r2
 801021e:	d00e      	beq.n	801023e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	4a18      	ldr	r2, [pc, #96]	@ (8010288 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010226:	4293      	cmp	r3, r2
 8010228:	d009      	beq.n	801023e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	4a17      	ldr	r2, [pc, #92]	@ (801028c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010230:	4293      	cmp	r3, r2
 8010232:	d004      	beq.n	801023e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	4a15      	ldr	r2, [pc, #84]	@ (8010290 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801023a:	4293      	cmp	r3, r2
 801023c:	d10c      	bne.n	8010258 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010244:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	68ba      	ldr	r2, [r7, #8]
 801024c:	4313      	orrs	r3, r2
 801024e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	68ba      	ldr	r2, [r7, #8]
 8010256:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2201      	movs	r2, #1
 801025c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2200      	movs	r2, #0
 8010264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010268:	2300      	movs	r3, #0
}
 801026a:	4618      	mov	r0, r3
 801026c:	3714      	adds	r7, #20
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	4770      	bx	lr
 8010276:	bf00      	nop
 8010278:	40010000 	.word	0x40010000
 801027c:	40000400 	.word	0x40000400
 8010280:	40000800 	.word	0x40000800
 8010284:	40000c00 	.word	0x40000c00
 8010288:	40010400 	.word	0x40010400
 801028c:	40014000 	.word	0x40014000
 8010290:	40001800 	.word	0x40001800

08010294 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010294:	b480      	push	{r7}
 8010296:	b085      	sub	sp, #20
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801029e:	2300      	movs	r3, #0
 80102a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	d101      	bne.n	80102b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80102ac:	2302      	movs	r3, #2
 80102ae:	e03d      	b.n	801032c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2201      	movs	r2, #1
 80102b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	68db      	ldr	r3, [r3, #12]
 80102c2:	4313      	orrs	r3, r2
 80102c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	689b      	ldr	r3, [r3, #8]
 80102d0:	4313      	orrs	r3, r2
 80102d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	4313      	orrs	r3, r2
 80102e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	4313      	orrs	r3, r2
 80102ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	691b      	ldr	r3, [r3, #16]
 80102fa:	4313      	orrs	r3, r2
 80102fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	695b      	ldr	r3, [r3, #20]
 8010308:	4313      	orrs	r3, r2
 801030a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	69db      	ldr	r3, [r3, #28]
 8010316:	4313      	orrs	r3, r2
 8010318:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	68fa      	ldr	r2, [r7, #12]
 8010320:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2200      	movs	r2, #0
 8010326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801032a:	2300      	movs	r3, #0
}
 801032c:	4618      	mov	r0, r3
 801032e:	3714      	adds	r7, #20
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d101      	bne.n	801034a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010346:	2301      	movs	r3, #1
 8010348:	e042      	b.n	80103d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010350:	b2db      	uxtb	r3, r3
 8010352:	2b00      	cmp	r3, #0
 8010354:	d106      	bne.n	8010364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2200      	movs	r2, #0
 801035a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f7fc fb7c 	bl	800ca5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2224      	movs	r2, #36	@ 0x24
 8010368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	68da      	ldr	r2, [r3, #12]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801037a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f000 fddb 	bl	8010f38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	691a      	ldr	r2, [r3, #16]
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	695a      	ldr	r2, [r3, #20]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80103a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	68da      	ldr	r2, [r3, #12]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80103b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2200      	movs	r2, #0
 80103b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2220      	movs	r2, #32
 80103bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2220      	movs	r2, #32
 80103c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2200      	movs	r2, #0
 80103cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80103ce:	2300      	movs	r3, #0
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3708      	adds	r7, #8
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b08a      	sub	sp, #40	@ 0x28
 80103dc:	af02      	add	r7, sp, #8
 80103de:	60f8      	str	r0, [r7, #12]
 80103e0:	60b9      	str	r1, [r7, #8]
 80103e2:	603b      	str	r3, [r7, #0]
 80103e4:	4613      	mov	r3, r2
 80103e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80103e8:	2300      	movs	r3, #0
 80103ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80103f2:	b2db      	uxtb	r3, r3
 80103f4:	2b20      	cmp	r3, #32
 80103f6:	d175      	bne.n	80104e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d002      	beq.n	8010404 <HAL_UART_Transmit+0x2c>
 80103fe:	88fb      	ldrh	r3, [r7, #6]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d101      	bne.n	8010408 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010404:	2301      	movs	r3, #1
 8010406:	e06e      	b.n	80104e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	2200      	movs	r2, #0
 801040c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2221      	movs	r2, #33	@ 0x21
 8010412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010416:	f7fc fd57 	bl	800cec8 <HAL_GetTick>
 801041a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	88fa      	ldrh	r2, [r7, #6]
 8010420:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	88fa      	ldrh	r2, [r7, #6]
 8010426:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	689b      	ldr	r3, [r3, #8]
 801042c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010430:	d108      	bne.n	8010444 <HAL_UART_Transmit+0x6c>
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	691b      	ldr	r3, [r3, #16]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d104      	bne.n	8010444 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801043a:	2300      	movs	r3, #0
 801043c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	61bb      	str	r3, [r7, #24]
 8010442:	e003      	b.n	801044c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010448:	2300      	movs	r3, #0
 801044a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801044c:	e02e      	b.n	80104ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	9300      	str	r3, [sp, #0]
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	2200      	movs	r2, #0
 8010456:	2180      	movs	r1, #128	@ 0x80
 8010458:	68f8      	ldr	r0, [r7, #12]
 801045a:	f000 fb3d 	bl	8010ad8 <UART_WaitOnFlagUntilTimeout>
 801045e:	4603      	mov	r3, r0
 8010460:	2b00      	cmp	r3, #0
 8010462:	d005      	beq.n	8010470 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	2220      	movs	r2, #32
 8010468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 801046c:	2303      	movs	r3, #3
 801046e:	e03a      	b.n	80104e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8010470:	69fb      	ldr	r3, [r7, #28]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d10b      	bne.n	801048e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010476:	69bb      	ldr	r3, [r7, #24]
 8010478:	881b      	ldrh	r3, [r3, #0]
 801047a:	461a      	mov	r2, r3
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010484:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010486:	69bb      	ldr	r3, [r7, #24]
 8010488:	3302      	adds	r3, #2
 801048a:	61bb      	str	r3, [r7, #24]
 801048c:	e007      	b.n	801049e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801048e:	69fb      	ldr	r3, [r7, #28]
 8010490:	781a      	ldrb	r2, [r3, #0]
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010498:	69fb      	ldr	r3, [r7, #28]
 801049a:	3301      	adds	r3, #1
 801049c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	3b01      	subs	r3, #1
 80104a6:	b29a      	uxth	r2, r3
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80104b0:	b29b      	uxth	r3, r3
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d1cb      	bne.n	801044e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	9300      	str	r3, [sp, #0]
 80104ba:	697b      	ldr	r3, [r7, #20]
 80104bc:	2200      	movs	r2, #0
 80104be:	2140      	movs	r1, #64	@ 0x40
 80104c0:	68f8      	ldr	r0, [r7, #12]
 80104c2:	f000 fb09 	bl	8010ad8 <UART_WaitOnFlagUntilTimeout>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d005      	beq.n	80104d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2220      	movs	r2, #32
 80104d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80104d4:	2303      	movs	r3, #3
 80104d6:	e006      	b.n	80104e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	2220      	movs	r2, #32
 80104dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80104e0:	2300      	movs	r3, #0
 80104e2:	e000      	b.n	80104e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80104e4:	2302      	movs	r3, #2
  }
}
 80104e6:	4618      	mov	r0, r3
 80104e8:	3720      	adds	r7, #32
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd80      	pop	{r7, pc}

080104ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80104ee:	b580      	push	{r7, lr}
 80104f0:	b084      	sub	sp, #16
 80104f2:	af00      	add	r7, sp, #0
 80104f4:	60f8      	str	r0, [r7, #12]
 80104f6:	60b9      	str	r1, [r7, #8]
 80104f8:	4613      	mov	r3, r2
 80104fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010502:	b2db      	uxtb	r3, r3
 8010504:	2b20      	cmp	r3, #32
 8010506:	d112      	bne.n	801052e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d002      	beq.n	8010514 <HAL_UART_Receive_IT+0x26>
 801050e:	88fb      	ldrh	r3, [r7, #6]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d101      	bne.n	8010518 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010514:	2301      	movs	r3, #1
 8010516:	e00b      	b.n	8010530 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	2200      	movs	r2, #0
 801051c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 801051e:	88fb      	ldrh	r3, [r7, #6]
 8010520:	461a      	mov	r2, r3
 8010522:	68b9      	ldr	r1, [r7, #8]
 8010524:	68f8      	ldr	r0, [r7, #12]
 8010526:	f000 fb30 	bl	8010b8a <UART_Start_Receive_IT>
 801052a:	4603      	mov	r3, r0
 801052c:	e000      	b.n	8010530 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 801052e:	2302      	movs	r3, #2
  }
}
 8010530:	4618      	mov	r0, r3
 8010532:	3710      	adds	r7, #16
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b0ba      	sub	sp, #232	@ 0xe8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	68db      	ldr	r3, [r3, #12]
 8010550:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	695b      	ldr	r3, [r3, #20]
 801055a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 801055e:	2300      	movs	r3, #0
 8010560:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8010564:	2300      	movs	r3, #0
 8010566:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801056a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801056e:	f003 030f 	and.w	r3, r3, #15
 8010572:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8010576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801057a:	2b00      	cmp	r3, #0
 801057c:	d10f      	bne.n	801059e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801057e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010582:	f003 0320 	and.w	r3, r3, #32
 8010586:	2b00      	cmp	r3, #0
 8010588:	d009      	beq.n	801059e <HAL_UART_IRQHandler+0x66>
 801058a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801058e:	f003 0320 	and.w	r3, r3, #32
 8010592:	2b00      	cmp	r3, #0
 8010594:	d003      	beq.n	801059e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f000 fc10 	bl	8010dbc <UART_Receive_IT>
      return;
 801059c:	e25b      	b.n	8010a56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801059e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	f000 80de 	beq.w	8010764 <HAL_UART_IRQHandler+0x22c>
 80105a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80105ac:	f003 0301 	and.w	r3, r3, #1
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d106      	bne.n	80105c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80105b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80105b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80105bc:	2b00      	cmp	r3, #0
 80105be:	f000 80d1 	beq.w	8010764 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80105c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80105c6:	f003 0301 	and.w	r3, r3, #1
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d00b      	beq.n	80105e6 <HAL_UART_IRQHandler+0xae>
 80105ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80105d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d005      	beq.n	80105e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105de:	f043 0201 	orr.w	r2, r3, #1
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80105e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80105ea:	f003 0304 	and.w	r3, r3, #4
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00b      	beq.n	801060a <HAL_UART_IRQHandler+0xd2>
 80105f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80105f6:	f003 0301 	and.w	r3, r3, #1
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d005      	beq.n	801060a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010602:	f043 0202 	orr.w	r2, r3, #2
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801060a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801060e:	f003 0302 	and.w	r3, r3, #2
 8010612:	2b00      	cmp	r3, #0
 8010614:	d00b      	beq.n	801062e <HAL_UART_IRQHandler+0xf6>
 8010616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801061a:	f003 0301 	and.w	r3, r3, #1
 801061e:	2b00      	cmp	r3, #0
 8010620:	d005      	beq.n	801062e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010626:	f043 0204 	orr.w	r2, r3, #4
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801062e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010632:	f003 0308 	and.w	r3, r3, #8
 8010636:	2b00      	cmp	r3, #0
 8010638:	d011      	beq.n	801065e <HAL_UART_IRQHandler+0x126>
 801063a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801063e:	f003 0320 	and.w	r3, r3, #32
 8010642:	2b00      	cmp	r3, #0
 8010644:	d105      	bne.n	8010652 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801064a:	f003 0301 	and.w	r3, r3, #1
 801064e:	2b00      	cmp	r3, #0
 8010650:	d005      	beq.n	801065e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010656:	f043 0208 	orr.w	r2, r3, #8
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010662:	2b00      	cmp	r3, #0
 8010664:	f000 81f2 	beq.w	8010a4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801066c:	f003 0320 	and.w	r3, r3, #32
 8010670:	2b00      	cmp	r3, #0
 8010672:	d008      	beq.n	8010686 <HAL_UART_IRQHandler+0x14e>
 8010674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010678:	f003 0320 	and.w	r3, r3, #32
 801067c:	2b00      	cmp	r3, #0
 801067e:	d002      	beq.n	8010686 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f000 fb9b 	bl	8010dbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	695b      	ldr	r3, [r3, #20]
 801068c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010690:	2b40      	cmp	r3, #64	@ 0x40
 8010692:	bf0c      	ite	eq
 8010694:	2301      	moveq	r3, #1
 8010696:	2300      	movne	r3, #0
 8010698:	b2db      	uxtb	r3, r3
 801069a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106a2:	f003 0308 	and.w	r3, r3, #8
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d103      	bne.n	80106b2 <HAL_UART_IRQHandler+0x17a>
 80106aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d04f      	beq.n	8010752 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f000 faa3 	bl	8010bfe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	695b      	ldr	r3, [r3, #20]
 80106be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106c2:	2b40      	cmp	r3, #64	@ 0x40
 80106c4:	d141      	bne.n	801074a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	3314      	adds	r3, #20
 80106cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80106d4:	e853 3f00 	ldrex	r3, [r3]
 80106d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80106dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80106e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80106e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	3314      	adds	r3, #20
 80106ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80106f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80106f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80106fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010702:	e841 2300 	strex	r3, r2, [r1]
 8010706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801070a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801070e:	2b00      	cmp	r3, #0
 8010710:	d1d9      	bne.n	80106c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010716:	2b00      	cmp	r3, #0
 8010718:	d013      	beq.n	8010742 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801071e:	4a7e      	ldr	r2, [pc, #504]	@ (8010918 <HAL_UART_IRQHandler+0x3e0>)
 8010720:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010726:	4618      	mov	r0, r3
 8010728:	f7fc fd7f 	bl	800d22a <HAL_DMA_Abort_IT>
 801072c:	4603      	mov	r3, r0
 801072e:	2b00      	cmp	r3, #0
 8010730:	d016      	beq.n	8010760 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801073c:	4610      	mov	r0, r2
 801073e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010740:	e00e      	b.n	8010760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 f994 	bl	8010a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010748:	e00a      	b.n	8010760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f000 f990 	bl	8010a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010750:	e006      	b.n	8010760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f000 f98c 	bl	8010a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2200      	movs	r2, #0
 801075c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 801075e:	e175      	b.n	8010a4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010760:	bf00      	nop
    return;
 8010762:	e173      	b.n	8010a4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010768:	2b01      	cmp	r3, #1
 801076a:	f040 814f 	bne.w	8010a0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801076e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010772:	f003 0310 	and.w	r3, r3, #16
 8010776:	2b00      	cmp	r3, #0
 8010778:	f000 8148 	beq.w	8010a0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801077c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010780:	f003 0310 	and.w	r3, r3, #16
 8010784:	2b00      	cmp	r3, #0
 8010786:	f000 8141 	beq.w	8010a0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801078a:	2300      	movs	r3, #0
 801078c:	60bb      	str	r3, [r7, #8]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	60bb      	str	r3, [r7, #8]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	685b      	ldr	r3, [r3, #4]
 801079c:	60bb      	str	r3, [r7, #8]
 801079e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	695b      	ldr	r3, [r3, #20]
 80107a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107aa:	2b40      	cmp	r3, #64	@ 0x40
 80107ac:	f040 80b6 	bne.w	801091c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	685b      	ldr	r3, [r3, #4]
 80107b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80107bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	f000 8145 	beq.w	8010a50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80107ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80107ce:	429a      	cmp	r2, r3
 80107d0:	f080 813e 	bcs.w	8010a50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80107da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107e0:	69db      	ldr	r3, [r3, #28]
 80107e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107e6:	f000 8088 	beq.w	80108fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	330c      	adds	r3, #12
 80107f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80107f8:	e853 3f00 	ldrex	r3, [r3]
 80107fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010800:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010808:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	330c      	adds	r3, #12
 8010812:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8010816:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801081a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801081e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010822:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010826:	e841 2300 	strex	r3, r2, [r1]
 801082a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801082e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010832:	2b00      	cmp	r3, #0
 8010834:	d1d9      	bne.n	80107ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	3314      	adds	r3, #20
 801083c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801083e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010840:	e853 3f00 	ldrex	r3, [r3]
 8010844:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010846:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010848:	f023 0301 	bic.w	r3, r3, #1
 801084c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	3314      	adds	r3, #20
 8010856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801085a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801085e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010860:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010862:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010866:	e841 2300 	strex	r3, r2, [r1]
 801086a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801086c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801086e:	2b00      	cmp	r3, #0
 8010870:	d1e1      	bne.n	8010836 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	3314      	adds	r3, #20
 8010878:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801087a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801087c:	e853 3f00 	ldrex	r3, [r3]
 8010880:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010882:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010888:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	3314      	adds	r3, #20
 8010892:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010896:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010898:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801089a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801089c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801089e:	e841 2300 	strex	r3, r2, [r1]
 80108a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80108a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d1e3      	bne.n	8010872 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2220      	movs	r2, #32
 80108ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2200      	movs	r2, #0
 80108b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	330c      	adds	r3, #12
 80108be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108c2:	e853 3f00 	ldrex	r3, [r3]
 80108c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80108c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80108ca:	f023 0310 	bic.w	r3, r3, #16
 80108ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	330c      	adds	r3, #12
 80108d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80108dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80108de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80108e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80108e4:	e841 2300 	strex	r3, r2, [r1]
 80108e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80108ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d1e3      	bne.n	80108b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7fc fc28 	bl	800d14a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2202      	movs	r2, #2
 80108fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010908:	b29b      	uxth	r3, r3
 801090a:	1ad3      	subs	r3, r2, r3
 801090c:	b29b      	uxth	r3, r3
 801090e:	4619      	mov	r1, r3
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f000 f8b7 	bl	8010a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010916:	e09b      	b.n	8010a50 <HAL_UART_IRQHandler+0x518>
 8010918:	08010cc5 	.word	0x08010cc5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010924:	b29b      	uxth	r3, r3
 8010926:	1ad3      	subs	r3, r2, r3
 8010928:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010930:	b29b      	uxth	r3, r3
 8010932:	2b00      	cmp	r3, #0
 8010934:	f000 808e 	beq.w	8010a54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8010938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801093c:	2b00      	cmp	r3, #0
 801093e:	f000 8089 	beq.w	8010a54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	330c      	adds	r3, #12
 8010948:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801094a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801094c:	e853 3f00 	ldrex	r3, [r3]
 8010950:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010954:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010958:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	330c      	adds	r3, #12
 8010962:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8010966:	647a      	str	r2, [r7, #68]	@ 0x44
 8010968:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801096a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801096c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801096e:	e841 2300 	strex	r3, r2, [r1]
 8010972:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010976:	2b00      	cmp	r3, #0
 8010978:	d1e3      	bne.n	8010942 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	3314      	adds	r3, #20
 8010980:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010984:	e853 3f00 	ldrex	r3, [r3]
 8010988:	623b      	str	r3, [r7, #32]
   return(result);
 801098a:	6a3b      	ldr	r3, [r7, #32]
 801098c:	f023 0301 	bic.w	r3, r3, #1
 8010990:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	3314      	adds	r3, #20
 801099a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801099e:	633a      	str	r2, [r7, #48]	@ 0x30
 80109a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80109a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109a6:	e841 2300 	strex	r3, r2, [r1]
 80109aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80109ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d1e3      	bne.n	801097a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2220      	movs	r2, #32
 80109b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2200      	movs	r2, #0
 80109be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	330c      	adds	r3, #12
 80109c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	e853 3f00 	ldrex	r3, [r3]
 80109ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	f023 0310 	bic.w	r3, r3, #16
 80109d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	330c      	adds	r3, #12
 80109e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80109e4:	61fa      	str	r2, [r7, #28]
 80109e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109e8:	69b9      	ldr	r1, [r7, #24]
 80109ea:	69fa      	ldr	r2, [r7, #28]
 80109ec:	e841 2300 	strex	r3, r2, [r1]
 80109f0:	617b      	str	r3, [r7, #20]
   return(result);
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d1e3      	bne.n	80109c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2202      	movs	r2, #2
 80109fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80109fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010a02:	4619      	mov	r1, r3
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f000 f83d 	bl	8010a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010a0a:	e023      	b.n	8010a54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d009      	beq.n	8010a2c <HAL_UART_IRQHandler+0x4f4>
 8010a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d003      	beq.n	8010a2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f000 f961 	bl	8010cec <UART_Transmit_IT>
    return;
 8010a2a:	e014      	b.n	8010a56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d00e      	beq.n	8010a56 <HAL_UART_IRQHandler+0x51e>
 8010a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d008      	beq.n	8010a56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f000 f9a1 	bl	8010d8c <UART_EndTransmit_IT>
    return;
 8010a4a:	e004      	b.n	8010a56 <HAL_UART_IRQHandler+0x51e>
    return;
 8010a4c:	bf00      	nop
 8010a4e:	e002      	b.n	8010a56 <HAL_UART_IRQHandler+0x51e>
      return;
 8010a50:	bf00      	nop
 8010a52:	e000      	b.n	8010a56 <HAL_UART_IRQHandler+0x51e>
      return;
 8010a54:	bf00      	nop
  }
}
 8010a56:	37e8      	adds	r7, #232	@ 0xe8
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}

08010a5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010a64:	bf00      	nop
 8010a66:	370c      	adds	r7, #12
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6e:	4770      	bx	lr

08010a70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010a78:	bf00      	nop
 8010a7a:	370c      	adds	r7, #12
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr

08010a84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010a84:	b480      	push	{r7}
 8010a86:	b083      	sub	sp, #12
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010a90:	bf00      	nop
 8010a92:	370c      	adds	r7, #12
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr

08010a9c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b085      	sub	sp, #20
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	60fb      	str	r3, [r7, #12]
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010ab2:	b2db      	uxtb	r3, r3
 8010ab4:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010abc:	b2db      	uxtb	r3, r3
 8010abe:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	b2da      	uxtb	r2, r3
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	4313      	orrs	r3, r2
 8010aca:	b2db      	uxtb	r3, r3
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3714      	adds	r7, #20
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad6:	4770      	bx	lr

08010ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b086      	sub	sp, #24
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	60f8      	str	r0, [r7, #12]
 8010ae0:	60b9      	str	r1, [r7, #8]
 8010ae2:	603b      	str	r3, [r7, #0]
 8010ae4:	4613      	mov	r3, r2
 8010ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ae8:	e03b      	b.n	8010b62 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010aea:	6a3b      	ldr	r3, [r7, #32]
 8010aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010af0:	d037      	beq.n	8010b62 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010af2:	f7fc f9e9 	bl	800cec8 <HAL_GetTick>
 8010af6:	4602      	mov	r2, r0
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	1ad3      	subs	r3, r2, r3
 8010afc:	6a3a      	ldr	r2, [r7, #32]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d302      	bcc.n	8010b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8010b02:	6a3b      	ldr	r3, [r7, #32]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d101      	bne.n	8010b0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010b08:	2303      	movs	r3, #3
 8010b0a:	e03a      	b.n	8010b82 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	68db      	ldr	r3, [r3, #12]
 8010b12:	f003 0304 	and.w	r3, r3, #4
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d023      	beq.n	8010b62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	2b80      	cmp	r3, #128	@ 0x80
 8010b1e:	d020      	beq.n	8010b62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	2b40      	cmp	r3, #64	@ 0x40
 8010b24:	d01d      	beq.n	8010b62 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f003 0308 	and.w	r3, r3, #8
 8010b30:	2b08      	cmp	r3, #8
 8010b32:	d116      	bne.n	8010b62 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8010b34:	2300      	movs	r3, #0
 8010b36:	617b      	str	r3, [r7, #20]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	617b      	str	r3, [r7, #20]
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	685b      	ldr	r3, [r3, #4]
 8010b46:	617b      	str	r3, [r7, #20]
 8010b48:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010b4a:	68f8      	ldr	r0, [r7, #12]
 8010b4c:	f000 f857 	bl	8010bfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	2208      	movs	r2, #8
 8010b54:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010b5e:	2301      	movs	r3, #1
 8010b60:	e00f      	b.n	8010b82 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	4013      	ands	r3, r2
 8010b6c:	68ba      	ldr	r2, [r7, #8]
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	bf0c      	ite	eq
 8010b72:	2301      	moveq	r3, #1
 8010b74:	2300      	movne	r3, #0
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	461a      	mov	r2, r3
 8010b7a:	79fb      	ldrb	r3, [r7, #7]
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d0b4      	beq.n	8010aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010b80:	2300      	movs	r3, #0
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3718      	adds	r7, #24
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010b8a:	b480      	push	{r7}
 8010b8c:	b085      	sub	sp, #20
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	60f8      	str	r0, [r7, #12]
 8010b92:	60b9      	str	r1, [r7, #8]
 8010b94:	4613      	mov	r3, r2
 8010b96:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	68ba      	ldr	r2, [r7, #8]
 8010b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	88fa      	ldrh	r2, [r7, #6]
 8010ba2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	88fa      	ldrh	r2, [r7, #6]
 8010ba8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2200      	movs	r2, #0
 8010bae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	2222      	movs	r2, #34	@ 0x22
 8010bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	691b      	ldr	r3, [r3, #16]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d007      	beq.n	8010bd0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	68da      	ldr	r2, [r3, #12]
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010bce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	695a      	ldr	r2, [r3, #20]
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f042 0201 	orr.w	r2, r2, #1
 8010bde:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	68da      	ldr	r2, [r3, #12]
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f042 0220 	orr.w	r2, r2, #32
 8010bee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010bf0:	2300      	movs	r3, #0
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3714      	adds	r7, #20
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfc:	4770      	bx	lr

08010bfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010bfe:	b480      	push	{r7}
 8010c00:	b095      	sub	sp, #84	@ 0x54
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	330c      	adds	r3, #12
 8010c0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c10:	e853 3f00 	ldrex	r3, [r3]
 8010c14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	330c      	adds	r3, #12
 8010c24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010c26:	643a      	str	r2, [r7, #64]	@ 0x40
 8010c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010c2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010c2e:	e841 2300 	strex	r3, r2, [r1]
 8010c32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d1e5      	bne.n	8010c06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	3314      	adds	r3, #20
 8010c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c42:	6a3b      	ldr	r3, [r7, #32]
 8010c44:	e853 3f00 	ldrex	r3, [r3]
 8010c48:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c4a:	69fb      	ldr	r3, [r7, #28]
 8010c4c:	f023 0301 	bic.w	r3, r3, #1
 8010c50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	3314      	adds	r3, #20
 8010c58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c62:	e841 2300 	strex	r3, r2, [r1]
 8010c66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d1e5      	bne.n	8010c3a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c72:	2b01      	cmp	r3, #1
 8010c74:	d119      	bne.n	8010caa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	330c      	adds	r3, #12
 8010c7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	e853 3f00 	ldrex	r3, [r3]
 8010c84:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	f023 0310 	bic.w	r3, r3, #16
 8010c8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	330c      	adds	r3, #12
 8010c94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010c96:	61ba      	str	r2, [r7, #24]
 8010c98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c9a:	6979      	ldr	r1, [r7, #20]
 8010c9c:	69ba      	ldr	r2, [r7, #24]
 8010c9e:	e841 2300 	strex	r3, r2, [r1]
 8010ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d1e5      	bne.n	8010c76 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2220      	movs	r2, #32
 8010cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8010cb8:	bf00      	nop
 8010cba:	3754      	adds	r7, #84	@ 0x54
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr

08010cc4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b084      	sub	sp, #16
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010cde:	68f8      	ldr	r0, [r7, #12]
 8010ce0:	f7ff fec6 	bl	8010a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ce4:	bf00      	nop
 8010ce6:	3710      	adds	r7, #16
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010cec:	b480      	push	{r7}
 8010cee:	b085      	sub	sp, #20
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010cfa:	b2db      	uxtb	r3, r3
 8010cfc:	2b21      	cmp	r3, #33	@ 0x21
 8010cfe:	d13e      	bne.n	8010d7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	689b      	ldr	r3, [r3, #8]
 8010d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010d08:	d114      	bne.n	8010d34 <UART_Transmit_IT+0x48>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	691b      	ldr	r3, [r3, #16]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d110      	bne.n	8010d34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6a1b      	ldr	r3, [r3, #32]
 8010d16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	881b      	ldrh	r3, [r3, #0]
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010d26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6a1b      	ldr	r3, [r3, #32]
 8010d2c:	1c9a      	adds	r2, r3, #2
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	621a      	str	r2, [r3, #32]
 8010d32:	e008      	b.n	8010d46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	6a1b      	ldr	r3, [r3, #32]
 8010d38:	1c59      	adds	r1, r3, #1
 8010d3a:	687a      	ldr	r2, [r7, #4]
 8010d3c:	6211      	str	r1, [r2, #32]
 8010d3e:	781a      	ldrb	r2, [r3, #0]
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010d4a:	b29b      	uxth	r3, r3
 8010d4c:	3b01      	subs	r3, #1
 8010d4e:	b29b      	uxth	r3, r3
 8010d50:	687a      	ldr	r2, [r7, #4]
 8010d52:	4619      	mov	r1, r3
 8010d54:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d10f      	bne.n	8010d7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	68da      	ldr	r2, [r3, #12]
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010d68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	68da      	ldr	r2, [r3, #12]
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010d78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	e000      	b.n	8010d80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010d7e:	2302      	movs	r3, #2
  }
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3714      	adds	r7, #20
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr

08010d8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	68da      	ldr	r2, [r3, #12]
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010da2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2220      	movs	r2, #32
 8010da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f7ff fe55 	bl	8010a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010db2:	2300      	movs	r3, #0
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3708      	adds	r7, #8
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}

08010dbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b08c      	sub	sp, #48	@ 0x30
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	2b22      	cmp	r3, #34	@ 0x22
 8010dce:	f040 80ae 	bne.w	8010f2e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	689b      	ldr	r3, [r3, #8]
 8010dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010dda:	d117      	bne.n	8010e0c <UART_Receive_IT+0x50>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	691b      	ldr	r3, [r3, #16]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d113      	bne.n	8010e0c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8010de4:	2300      	movs	r3, #0
 8010de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010dec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	b29b      	uxth	r3, r3
 8010df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010dfa:	b29a      	uxth	r2, r3
 8010dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dfe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e04:	1c9a      	adds	r2, r3, #2
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	629a      	str	r2, [r3, #40]	@ 0x28
 8010e0a:	e026      	b.n	8010e5a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8010e12:	2300      	movs	r3, #0
 8010e14:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	689b      	ldr	r3, [r3, #8]
 8010e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010e1e:	d007      	beq.n	8010e30 <UART_Receive_IT+0x74>
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	689b      	ldr	r3, [r3, #8]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d10a      	bne.n	8010e3e <UART_Receive_IT+0x82>
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	691b      	ldr	r3, [r3, #16]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d106      	bne.n	8010e3e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	685b      	ldr	r3, [r3, #4]
 8010e36:	b2da      	uxtb	r2, r3
 8010e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e3a:	701a      	strb	r2, [r3, #0]
 8010e3c:	e008      	b.n	8010e50 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	b2db      	uxtb	r3, r3
 8010e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e4a:	b2da      	uxtb	r2, r3
 8010e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e4e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e54:	1c5a      	adds	r2, r3, #1
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	3b01      	subs	r3, #1
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	4619      	mov	r1, r3
 8010e68:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d15d      	bne.n	8010f2a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	68da      	ldr	r2, [r3, #12]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f022 0220 	bic.w	r2, r2, #32
 8010e7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	68da      	ldr	r2, [r3, #12]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010e8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	695a      	ldr	r2, [r3, #20]
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	f022 0201 	bic.w	r2, r2, #1
 8010e9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2220      	movs	r2, #32
 8010ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010eb0:	2b01      	cmp	r3, #1
 8010eb2:	d135      	bne.n	8010f20 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	330c      	adds	r3, #12
 8010ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	e853 3f00 	ldrex	r3, [r3]
 8010ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	f023 0310 	bic.w	r3, r3, #16
 8010ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	330c      	adds	r3, #12
 8010ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010eda:	623a      	str	r2, [r7, #32]
 8010edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ede:	69f9      	ldr	r1, [r7, #28]
 8010ee0:	6a3a      	ldr	r2, [r7, #32]
 8010ee2:	e841 2300 	strex	r3, r2, [r1]
 8010ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8010ee8:	69bb      	ldr	r3, [r7, #24]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d1e5      	bne.n	8010eba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	f003 0310 	and.w	r3, r3, #16
 8010ef8:	2b10      	cmp	r3, #16
 8010efa:	d10a      	bne.n	8010f12 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010efc:	2300      	movs	r3, #0
 8010efe:	60fb      	str	r3, [r7, #12]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	60fb      	str	r3, [r7, #12]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	60fb      	str	r3, [r7, #12]
 8010f10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010f16:	4619      	mov	r1, r3
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f7ff fdb3 	bl	8010a84 <HAL_UARTEx_RxEventCallback>
 8010f1e:	e002      	b.n	8010f26 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f7f4 faad 	bl	8005480 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010f26:	2300      	movs	r3, #0
 8010f28:	e002      	b.n	8010f30 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	e000      	b.n	8010f30 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8010f2e:	2302      	movs	r3, #2
  }
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3730      	adds	r7, #48	@ 0x30
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010f3c:	b0c0      	sub	sp, #256	@ 0x100
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	691b      	ldr	r3, [r3, #16]
 8010f4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f54:	68d9      	ldr	r1, [r3, #12]
 8010f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f5a:	681a      	ldr	r2, [r3, #0]
 8010f5c:	ea40 0301 	orr.w	r3, r0, r1
 8010f60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f66:	689a      	ldr	r2, [r3, #8]
 8010f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f6c:	691b      	ldr	r3, [r3, #16]
 8010f6e:	431a      	orrs	r2, r3
 8010f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f74:	695b      	ldr	r3, [r3, #20]
 8010f76:	431a      	orrs	r2, r3
 8010f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f7c:	69db      	ldr	r3, [r3, #28]
 8010f7e:	4313      	orrs	r3, r2
 8010f80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	68db      	ldr	r3, [r3, #12]
 8010f8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8010f90:	f021 010c 	bic.w	r1, r1, #12
 8010f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f98:	681a      	ldr	r2, [r3, #0]
 8010f9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010f9e:	430b      	orrs	r3, r1
 8010fa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	695b      	ldr	r3, [r3, #20]
 8010faa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8010fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010fb2:	6999      	ldr	r1, [r3, #24]
 8010fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	ea40 0301 	orr.w	r3, r0, r1
 8010fbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	4b8f      	ldr	r3, [pc, #572]	@ (8011204 <UART_SetConfig+0x2cc>)
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d005      	beq.n	8010fd8 <UART_SetConfig+0xa0>
 8010fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010fd0:	681a      	ldr	r2, [r3, #0]
 8010fd2:	4b8d      	ldr	r3, [pc, #564]	@ (8011208 <UART_SetConfig+0x2d0>)
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d104      	bne.n	8010fe2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010fd8:	f7fe f918 	bl	800f20c <HAL_RCC_GetPCLK2Freq>
 8010fdc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8010fe0:	e003      	b.n	8010fea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010fe2:	f7fe f8ff 	bl	800f1e4 <HAL_RCC_GetPCLK1Freq>
 8010fe6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010fee:	69db      	ldr	r3, [r3, #28]
 8010ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010ff4:	f040 810c 	bne.w	8011210 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011002:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8011006:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801100a:	4622      	mov	r2, r4
 801100c:	462b      	mov	r3, r5
 801100e:	1891      	adds	r1, r2, r2
 8011010:	65b9      	str	r1, [r7, #88]	@ 0x58
 8011012:	415b      	adcs	r3, r3
 8011014:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011016:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801101a:	4621      	mov	r1, r4
 801101c:	eb12 0801 	adds.w	r8, r2, r1
 8011020:	4629      	mov	r1, r5
 8011022:	eb43 0901 	adc.w	r9, r3, r1
 8011026:	f04f 0200 	mov.w	r2, #0
 801102a:	f04f 0300 	mov.w	r3, #0
 801102e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011032:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011036:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801103a:	4690      	mov	r8, r2
 801103c:	4699      	mov	r9, r3
 801103e:	4623      	mov	r3, r4
 8011040:	eb18 0303 	adds.w	r3, r8, r3
 8011044:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011048:	462b      	mov	r3, r5
 801104a:	eb49 0303 	adc.w	r3, r9, r3
 801104e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	2200      	movs	r2, #0
 801105a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801105e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8011062:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011066:	460b      	mov	r3, r1
 8011068:	18db      	adds	r3, r3, r3
 801106a:	653b      	str	r3, [r7, #80]	@ 0x50
 801106c:	4613      	mov	r3, r2
 801106e:	eb42 0303 	adc.w	r3, r2, r3
 8011072:	657b      	str	r3, [r7, #84]	@ 0x54
 8011074:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8011078:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801107c:	f7ef fe54 	bl	8000d28 <__aeabi_uldivmod>
 8011080:	4602      	mov	r2, r0
 8011082:	460b      	mov	r3, r1
 8011084:	4b61      	ldr	r3, [pc, #388]	@ (801120c <UART_SetConfig+0x2d4>)
 8011086:	fba3 2302 	umull	r2, r3, r3, r2
 801108a:	095b      	lsrs	r3, r3, #5
 801108c:	011c      	lsls	r4, r3, #4
 801108e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011092:	2200      	movs	r2, #0
 8011094:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011098:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 801109c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80110a0:	4642      	mov	r2, r8
 80110a2:	464b      	mov	r3, r9
 80110a4:	1891      	adds	r1, r2, r2
 80110a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80110a8:	415b      	adcs	r3, r3
 80110aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80110ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80110b0:	4641      	mov	r1, r8
 80110b2:	eb12 0a01 	adds.w	sl, r2, r1
 80110b6:	4649      	mov	r1, r9
 80110b8:	eb43 0b01 	adc.w	fp, r3, r1
 80110bc:	f04f 0200 	mov.w	r2, #0
 80110c0:	f04f 0300 	mov.w	r3, #0
 80110c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80110c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80110cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80110d0:	4692      	mov	sl, r2
 80110d2:	469b      	mov	fp, r3
 80110d4:	4643      	mov	r3, r8
 80110d6:	eb1a 0303 	adds.w	r3, sl, r3
 80110da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80110de:	464b      	mov	r3, r9
 80110e0:	eb4b 0303 	adc.w	r3, fp, r3
 80110e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80110e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110ec:	685b      	ldr	r3, [r3, #4]
 80110ee:	2200      	movs	r2, #0
 80110f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80110f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80110f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80110fc:	460b      	mov	r3, r1
 80110fe:	18db      	adds	r3, r3, r3
 8011100:	643b      	str	r3, [r7, #64]	@ 0x40
 8011102:	4613      	mov	r3, r2
 8011104:	eb42 0303 	adc.w	r3, r2, r3
 8011108:	647b      	str	r3, [r7, #68]	@ 0x44
 801110a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801110e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8011112:	f7ef fe09 	bl	8000d28 <__aeabi_uldivmod>
 8011116:	4602      	mov	r2, r0
 8011118:	460b      	mov	r3, r1
 801111a:	4611      	mov	r1, r2
 801111c:	4b3b      	ldr	r3, [pc, #236]	@ (801120c <UART_SetConfig+0x2d4>)
 801111e:	fba3 2301 	umull	r2, r3, r3, r1
 8011122:	095b      	lsrs	r3, r3, #5
 8011124:	2264      	movs	r2, #100	@ 0x64
 8011126:	fb02 f303 	mul.w	r3, r2, r3
 801112a:	1acb      	subs	r3, r1, r3
 801112c:	00db      	lsls	r3, r3, #3
 801112e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8011132:	4b36      	ldr	r3, [pc, #216]	@ (801120c <UART_SetConfig+0x2d4>)
 8011134:	fba3 2302 	umull	r2, r3, r3, r2
 8011138:	095b      	lsrs	r3, r3, #5
 801113a:	005b      	lsls	r3, r3, #1
 801113c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8011140:	441c      	add	r4, r3
 8011142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011146:	2200      	movs	r2, #0
 8011148:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801114c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8011150:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8011154:	4642      	mov	r2, r8
 8011156:	464b      	mov	r3, r9
 8011158:	1891      	adds	r1, r2, r2
 801115a:	63b9      	str	r1, [r7, #56]	@ 0x38
 801115c:	415b      	adcs	r3, r3
 801115e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011160:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8011164:	4641      	mov	r1, r8
 8011166:	1851      	adds	r1, r2, r1
 8011168:	6339      	str	r1, [r7, #48]	@ 0x30
 801116a:	4649      	mov	r1, r9
 801116c:	414b      	adcs	r3, r1
 801116e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011170:	f04f 0200 	mov.w	r2, #0
 8011174:	f04f 0300 	mov.w	r3, #0
 8011178:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 801117c:	4659      	mov	r1, fp
 801117e:	00cb      	lsls	r3, r1, #3
 8011180:	4651      	mov	r1, sl
 8011182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011186:	4651      	mov	r1, sl
 8011188:	00ca      	lsls	r2, r1, #3
 801118a:	4610      	mov	r0, r2
 801118c:	4619      	mov	r1, r3
 801118e:	4603      	mov	r3, r0
 8011190:	4642      	mov	r2, r8
 8011192:	189b      	adds	r3, r3, r2
 8011194:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011198:	464b      	mov	r3, r9
 801119a:	460a      	mov	r2, r1
 801119c:	eb42 0303 	adc.w	r3, r2, r3
 80111a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80111a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111a8:	685b      	ldr	r3, [r3, #4]
 80111aa:	2200      	movs	r2, #0
 80111ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80111b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80111b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80111b8:	460b      	mov	r3, r1
 80111ba:	18db      	adds	r3, r3, r3
 80111bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80111be:	4613      	mov	r3, r2
 80111c0:	eb42 0303 	adc.w	r3, r2, r3
 80111c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80111c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80111ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80111ce:	f7ef fdab 	bl	8000d28 <__aeabi_uldivmod>
 80111d2:	4602      	mov	r2, r0
 80111d4:	460b      	mov	r3, r1
 80111d6:	4b0d      	ldr	r3, [pc, #52]	@ (801120c <UART_SetConfig+0x2d4>)
 80111d8:	fba3 1302 	umull	r1, r3, r3, r2
 80111dc:	095b      	lsrs	r3, r3, #5
 80111de:	2164      	movs	r1, #100	@ 0x64
 80111e0:	fb01 f303 	mul.w	r3, r1, r3
 80111e4:	1ad3      	subs	r3, r2, r3
 80111e6:	00db      	lsls	r3, r3, #3
 80111e8:	3332      	adds	r3, #50	@ 0x32
 80111ea:	4a08      	ldr	r2, [pc, #32]	@ (801120c <UART_SetConfig+0x2d4>)
 80111ec:	fba2 2303 	umull	r2, r3, r2, r3
 80111f0:	095b      	lsrs	r3, r3, #5
 80111f2:	f003 0207 	and.w	r2, r3, #7
 80111f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	4422      	add	r2, r4
 80111fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011200:	e106      	b.n	8011410 <UART_SetConfig+0x4d8>
 8011202:	bf00      	nop
 8011204:	40011000 	.word	0x40011000
 8011208:	40011400 	.word	0x40011400
 801120c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011214:	2200      	movs	r2, #0
 8011216:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801121a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801121e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8011222:	4642      	mov	r2, r8
 8011224:	464b      	mov	r3, r9
 8011226:	1891      	adds	r1, r2, r2
 8011228:	6239      	str	r1, [r7, #32]
 801122a:	415b      	adcs	r3, r3
 801122c:	627b      	str	r3, [r7, #36]	@ 0x24
 801122e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011232:	4641      	mov	r1, r8
 8011234:	1854      	adds	r4, r2, r1
 8011236:	4649      	mov	r1, r9
 8011238:	eb43 0501 	adc.w	r5, r3, r1
 801123c:	f04f 0200 	mov.w	r2, #0
 8011240:	f04f 0300 	mov.w	r3, #0
 8011244:	00eb      	lsls	r3, r5, #3
 8011246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801124a:	00e2      	lsls	r2, r4, #3
 801124c:	4614      	mov	r4, r2
 801124e:	461d      	mov	r5, r3
 8011250:	4643      	mov	r3, r8
 8011252:	18e3      	adds	r3, r4, r3
 8011254:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011258:	464b      	mov	r3, r9
 801125a:	eb45 0303 	adc.w	r3, r5, r3
 801125e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	2200      	movs	r2, #0
 801126a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801126e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011272:	f04f 0200 	mov.w	r2, #0
 8011276:	f04f 0300 	mov.w	r3, #0
 801127a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801127e:	4629      	mov	r1, r5
 8011280:	008b      	lsls	r3, r1, #2
 8011282:	4621      	mov	r1, r4
 8011284:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011288:	4621      	mov	r1, r4
 801128a:	008a      	lsls	r2, r1, #2
 801128c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8011290:	f7ef fd4a 	bl	8000d28 <__aeabi_uldivmod>
 8011294:	4602      	mov	r2, r0
 8011296:	460b      	mov	r3, r1
 8011298:	4b60      	ldr	r3, [pc, #384]	@ (801141c <UART_SetConfig+0x4e4>)
 801129a:	fba3 2302 	umull	r2, r3, r3, r2
 801129e:	095b      	lsrs	r3, r3, #5
 80112a0:	011c      	lsls	r4, r3, #4
 80112a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80112a6:	2200      	movs	r2, #0
 80112a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80112ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80112b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80112b4:	4642      	mov	r2, r8
 80112b6:	464b      	mov	r3, r9
 80112b8:	1891      	adds	r1, r2, r2
 80112ba:	61b9      	str	r1, [r7, #24]
 80112bc:	415b      	adcs	r3, r3
 80112be:	61fb      	str	r3, [r7, #28]
 80112c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80112c4:	4641      	mov	r1, r8
 80112c6:	1851      	adds	r1, r2, r1
 80112c8:	6139      	str	r1, [r7, #16]
 80112ca:	4649      	mov	r1, r9
 80112cc:	414b      	adcs	r3, r1
 80112ce:	617b      	str	r3, [r7, #20]
 80112d0:	f04f 0200 	mov.w	r2, #0
 80112d4:	f04f 0300 	mov.w	r3, #0
 80112d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80112dc:	4659      	mov	r1, fp
 80112de:	00cb      	lsls	r3, r1, #3
 80112e0:	4651      	mov	r1, sl
 80112e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80112e6:	4651      	mov	r1, sl
 80112e8:	00ca      	lsls	r2, r1, #3
 80112ea:	4610      	mov	r0, r2
 80112ec:	4619      	mov	r1, r3
 80112ee:	4603      	mov	r3, r0
 80112f0:	4642      	mov	r2, r8
 80112f2:	189b      	adds	r3, r3, r2
 80112f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80112f8:	464b      	mov	r3, r9
 80112fa:	460a      	mov	r2, r1
 80112fc:	eb42 0303 	adc.w	r3, r2, r3
 8011300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	2200      	movs	r2, #0
 801130c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801130e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011310:	f04f 0200 	mov.w	r2, #0
 8011314:	f04f 0300 	mov.w	r3, #0
 8011318:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 801131c:	4649      	mov	r1, r9
 801131e:	008b      	lsls	r3, r1, #2
 8011320:	4641      	mov	r1, r8
 8011322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011326:	4641      	mov	r1, r8
 8011328:	008a      	lsls	r2, r1, #2
 801132a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801132e:	f7ef fcfb 	bl	8000d28 <__aeabi_uldivmod>
 8011332:	4602      	mov	r2, r0
 8011334:	460b      	mov	r3, r1
 8011336:	4611      	mov	r1, r2
 8011338:	4b38      	ldr	r3, [pc, #224]	@ (801141c <UART_SetConfig+0x4e4>)
 801133a:	fba3 2301 	umull	r2, r3, r3, r1
 801133e:	095b      	lsrs	r3, r3, #5
 8011340:	2264      	movs	r2, #100	@ 0x64
 8011342:	fb02 f303 	mul.w	r3, r2, r3
 8011346:	1acb      	subs	r3, r1, r3
 8011348:	011b      	lsls	r3, r3, #4
 801134a:	3332      	adds	r3, #50	@ 0x32
 801134c:	4a33      	ldr	r2, [pc, #204]	@ (801141c <UART_SetConfig+0x4e4>)
 801134e:	fba2 2303 	umull	r2, r3, r2, r3
 8011352:	095b      	lsrs	r3, r3, #5
 8011354:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011358:	441c      	add	r4, r3
 801135a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801135e:	2200      	movs	r2, #0
 8011360:	673b      	str	r3, [r7, #112]	@ 0x70
 8011362:	677a      	str	r2, [r7, #116]	@ 0x74
 8011364:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8011368:	4642      	mov	r2, r8
 801136a:	464b      	mov	r3, r9
 801136c:	1891      	adds	r1, r2, r2
 801136e:	60b9      	str	r1, [r7, #8]
 8011370:	415b      	adcs	r3, r3
 8011372:	60fb      	str	r3, [r7, #12]
 8011374:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011378:	4641      	mov	r1, r8
 801137a:	1851      	adds	r1, r2, r1
 801137c:	6039      	str	r1, [r7, #0]
 801137e:	4649      	mov	r1, r9
 8011380:	414b      	adcs	r3, r1
 8011382:	607b      	str	r3, [r7, #4]
 8011384:	f04f 0200 	mov.w	r2, #0
 8011388:	f04f 0300 	mov.w	r3, #0
 801138c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8011390:	4659      	mov	r1, fp
 8011392:	00cb      	lsls	r3, r1, #3
 8011394:	4651      	mov	r1, sl
 8011396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801139a:	4651      	mov	r1, sl
 801139c:	00ca      	lsls	r2, r1, #3
 801139e:	4610      	mov	r0, r2
 80113a0:	4619      	mov	r1, r3
 80113a2:	4603      	mov	r3, r0
 80113a4:	4642      	mov	r2, r8
 80113a6:	189b      	adds	r3, r3, r2
 80113a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80113aa:	464b      	mov	r3, r9
 80113ac:	460a      	mov	r2, r1
 80113ae:	eb42 0303 	adc.w	r3, r2, r3
 80113b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80113b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80113b8:	685b      	ldr	r3, [r3, #4]
 80113ba:	2200      	movs	r2, #0
 80113bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80113be:	667a      	str	r2, [r7, #100]	@ 0x64
 80113c0:	f04f 0200 	mov.w	r2, #0
 80113c4:	f04f 0300 	mov.w	r3, #0
 80113c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80113cc:	4649      	mov	r1, r9
 80113ce:	008b      	lsls	r3, r1, #2
 80113d0:	4641      	mov	r1, r8
 80113d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80113d6:	4641      	mov	r1, r8
 80113d8:	008a      	lsls	r2, r1, #2
 80113da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80113de:	f7ef fca3 	bl	8000d28 <__aeabi_uldivmod>
 80113e2:	4602      	mov	r2, r0
 80113e4:	460b      	mov	r3, r1
 80113e6:	4b0d      	ldr	r3, [pc, #52]	@ (801141c <UART_SetConfig+0x4e4>)
 80113e8:	fba3 1302 	umull	r1, r3, r3, r2
 80113ec:	095b      	lsrs	r3, r3, #5
 80113ee:	2164      	movs	r1, #100	@ 0x64
 80113f0:	fb01 f303 	mul.w	r3, r1, r3
 80113f4:	1ad3      	subs	r3, r2, r3
 80113f6:	011b      	lsls	r3, r3, #4
 80113f8:	3332      	adds	r3, #50	@ 0x32
 80113fa:	4a08      	ldr	r2, [pc, #32]	@ (801141c <UART_SetConfig+0x4e4>)
 80113fc:	fba2 2303 	umull	r2, r3, r2, r3
 8011400:	095b      	lsrs	r3, r3, #5
 8011402:	f003 020f 	and.w	r2, r3, #15
 8011406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	4422      	add	r2, r4
 801140e:	609a      	str	r2, [r3, #8]
}
 8011410:	bf00      	nop
 8011412:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011416:	46bd      	mov	sp, r7
 8011418:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801141c:	51eb851f 	.word	0x51eb851f

08011420 <malloc>:
 8011420:	4b02      	ldr	r3, [pc, #8]	@ (801142c <malloc+0xc>)
 8011422:	4601      	mov	r1, r0
 8011424:	6818      	ldr	r0, [r3, #0]
 8011426:	f000 b825 	b.w	8011474 <_malloc_r>
 801142a:	bf00      	nop
 801142c:	200000f8 	.word	0x200000f8

08011430 <sbrk_aligned>:
 8011430:	b570      	push	{r4, r5, r6, lr}
 8011432:	4e0f      	ldr	r6, [pc, #60]	@ (8011470 <sbrk_aligned+0x40>)
 8011434:	460c      	mov	r4, r1
 8011436:	6831      	ldr	r1, [r6, #0]
 8011438:	4605      	mov	r5, r0
 801143a:	b911      	cbnz	r1, 8011442 <sbrk_aligned+0x12>
 801143c:	f000 ff56 	bl	80122ec <_sbrk_r>
 8011440:	6030      	str	r0, [r6, #0]
 8011442:	4621      	mov	r1, r4
 8011444:	4628      	mov	r0, r5
 8011446:	f000 ff51 	bl	80122ec <_sbrk_r>
 801144a:	1c43      	adds	r3, r0, #1
 801144c:	d103      	bne.n	8011456 <sbrk_aligned+0x26>
 801144e:	f04f 34ff 	mov.w	r4, #4294967295
 8011452:	4620      	mov	r0, r4
 8011454:	bd70      	pop	{r4, r5, r6, pc}
 8011456:	1cc4      	adds	r4, r0, #3
 8011458:	f024 0403 	bic.w	r4, r4, #3
 801145c:	42a0      	cmp	r0, r4
 801145e:	d0f8      	beq.n	8011452 <sbrk_aligned+0x22>
 8011460:	1a21      	subs	r1, r4, r0
 8011462:	4628      	mov	r0, r5
 8011464:	f000 ff42 	bl	80122ec <_sbrk_r>
 8011468:	3001      	adds	r0, #1
 801146a:	d1f2      	bne.n	8011452 <sbrk_aligned+0x22>
 801146c:	e7ef      	b.n	801144e <sbrk_aligned+0x1e>
 801146e:	bf00      	nop
 8011470:	20000abc 	.word	0x20000abc

08011474 <_malloc_r>:
 8011474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011478:	1ccd      	adds	r5, r1, #3
 801147a:	f025 0503 	bic.w	r5, r5, #3
 801147e:	3508      	adds	r5, #8
 8011480:	2d0c      	cmp	r5, #12
 8011482:	bf38      	it	cc
 8011484:	250c      	movcc	r5, #12
 8011486:	2d00      	cmp	r5, #0
 8011488:	4606      	mov	r6, r0
 801148a:	db01      	blt.n	8011490 <_malloc_r+0x1c>
 801148c:	42a9      	cmp	r1, r5
 801148e:	d904      	bls.n	801149a <_malloc_r+0x26>
 8011490:	230c      	movs	r3, #12
 8011492:	6033      	str	r3, [r6, #0]
 8011494:	2000      	movs	r0, #0
 8011496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801149a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011570 <_malloc_r+0xfc>
 801149e:	f000 f869 	bl	8011574 <__malloc_lock>
 80114a2:	f8d8 3000 	ldr.w	r3, [r8]
 80114a6:	461c      	mov	r4, r3
 80114a8:	bb44      	cbnz	r4, 80114fc <_malloc_r+0x88>
 80114aa:	4629      	mov	r1, r5
 80114ac:	4630      	mov	r0, r6
 80114ae:	f7ff ffbf 	bl	8011430 <sbrk_aligned>
 80114b2:	1c43      	adds	r3, r0, #1
 80114b4:	4604      	mov	r4, r0
 80114b6:	d158      	bne.n	801156a <_malloc_r+0xf6>
 80114b8:	f8d8 4000 	ldr.w	r4, [r8]
 80114bc:	4627      	mov	r7, r4
 80114be:	2f00      	cmp	r7, #0
 80114c0:	d143      	bne.n	801154a <_malloc_r+0xd6>
 80114c2:	2c00      	cmp	r4, #0
 80114c4:	d04b      	beq.n	801155e <_malloc_r+0xea>
 80114c6:	6823      	ldr	r3, [r4, #0]
 80114c8:	4639      	mov	r1, r7
 80114ca:	4630      	mov	r0, r6
 80114cc:	eb04 0903 	add.w	r9, r4, r3
 80114d0:	f000 ff0c 	bl	80122ec <_sbrk_r>
 80114d4:	4581      	cmp	r9, r0
 80114d6:	d142      	bne.n	801155e <_malloc_r+0xea>
 80114d8:	6821      	ldr	r1, [r4, #0]
 80114da:	1a6d      	subs	r5, r5, r1
 80114dc:	4629      	mov	r1, r5
 80114de:	4630      	mov	r0, r6
 80114e0:	f7ff ffa6 	bl	8011430 <sbrk_aligned>
 80114e4:	3001      	adds	r0, #1
 80114e6:	d03a      	beq.n	801155e <_malloc_r+0xea>
 80114e8:	6823      	ldr	r3, [r4, #0]
 80114ea:	442b      	add	r3, r5
 80114ec:	6023      	str	r3, [r4, #0]
 80114ee:	f8d8 3000 	ldr.w	r3, [r8]
 80114f2:	685a      	ldr	r2, [r3, #4]
 80114f4:	bb62      	cbnz	r2, 8011550 <_malloc_r+0xdc>
 80114f6:	f8c8 7000 	str.w	r7, [r8]
 80114fa:	e00f      	b.n	801151c <_malloc_r+0xa8>
 80114fc:	6822      	ldr	r2, [r4, #0]
 80114fe:	1b52      	subs	r2, r2, r5
 8011500:	d420      	bmi.n	8011544 <_malloc_r+0xd0>
 8011502:	2a0b      	cmp	r2, #11
 8011504:	d917      	bls.n	8011536 <_malloc_r+0xc2>
 8011506:	1961      	adds	r1, r4, r5
 8011508:	42a3      	cmp	r3, r4
 801150a:	6025      	str	r5, [r4, #0]
 801150c:	bf18      	it	ne
 801150e:	6059      	strne	r1, [r3, #4]
 8011510:	6863      	ldr	r3, [r4, #4]
 8011512:	bf08      	it	eq
 8011514:	f8c8 1000 	streq.w	r1, [r8]
 8011518:	5162      	str	r2, [r4, r5]
 801151a:	604b      	str	r3, [r1, #4]
 801151c:	4630      	mov	r0, r6
 801151e:	f000 f82f 	bl	8011580 <__malloc_unlock>
 8011522:	f104 000b 	add.w	r0, r4, #11
 8011526:	1d23      	adds	r3, r4, #4
 8011528:	f020 0007 	bic.w	r0, r0, #7
 801152c:	1ac2      	subs	r2, r0, r3
 801152e:	bf1c      	itt	ne
 8011530:	1a1b      	subne	r3, r3, r0
 8011532:	50a3      	strne	r3, [r4, r2]
 8011534:	e7af      	b.n	8011496 <_malloc_r+0x22>
 8011536:	6862      	ldr	r2, [r4, #4]
 8011538:	42a3      	cmp	r3, r4
 801153a:	bf0c      	ite	eq
 801153c:	f8c8 2000 	streq.w	r2, [r8]
 8011540:	605a      	strne	r2, [r3, #4]
 8011542:	e7eb      	b.n	801151c <_malloc_r+0xa8>
 8011544:	4623      	mov	r3, r4
 8011546:	6864      	ldr	r4, [r4, #4]
 8011548:	e7ae      	b.n	80114a8 <_malloc_r+0x34>
 801154a:	463c      	mov	r4, r7
 801154c:	687f      	ldr	r7, [r7, #4]
 801154e:	e7b6      	b.n	80114be <_malloc_r+0x4a>
 8011550:	461a      	mov	r2, r3
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	42a3      	cmp	r3, r4
 8011556:	d1fb      	bne.n	8011550 <_malloc_r+0xdc>
 8011558:	2300      	movs	r3, #0
 801155a:	6053      	str	r3, [r2, #4]
 801155c:	e7de      	b.n	801151c <_malloc_r+0xa8>
 801155e:	230c      	movs	r3, #12
 8011560:	6033      	str	r3, [r6, #0]
 8011562:	4630      	mov	r0, r6
 8011564:	f000 f80c 	bl	8011580 <__malloc_unlock>
 8011568:	e794      	b.n	8011494 <_malloc_r+0x20>
 801156a:	6005      	str	r5, [r0, #0]
 801156c:	e7d6      	b.n	801151c <_malloc_r+0xa8>
 801156e:	bf00      	nop
 8011570:	20000ac0 	.word	0x20000ac0

08011574 <__malloc_lock>:
 8011574:	4801      	ldr	r0, [pc, #4]	@ (801157c <__malloc_lock+0x8>)
 8011576:	f000 bf06 	b.w	8012386 <__retarget_lock_acquire_recursive>
 801157a:	bf00      	nop
 801157c:	20000c04 	.word	0x20000c04

08011580 <__malloc_unlock>:
 8011580:	4801      	ldr	r0, [pc, #4]	@ (8011588 <__malloc_unlock+0x8>)
 8011582:	f000 bf01 	b.w	8012388 <__retarget_lock_release_recursive>
 8011586:	bf00      	nop
 8011588:	20000c04 	.word	0x20000c04

0801158c <__cvt>:
 801158c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011590:	ec57 6b10 	vmov	r6, r7, d0
 8011594:	2f00      	cmp	r7, #0
 8011596:	460c      	mov	r4, r1
 8011598:	4619      	mov	r1, r3
 801159a:	463b      	mov	r3, r7
 801159c:	bfbb      	ittet	lt
 801159e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80115a2:	461f      	movlt	r7, r3
 80115a4:	2300      	movge	r3, #0
 80115a6:	232d      	movlt	r3, #45	@ 0x2d
 80115a8:	700b      	strb	r3, [r1, #0]
 80115aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80115ac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80115b0:	4691      	mov	r9, r2
 80115b2:	f023 0820 	bic.w	r8, r3, #32
 80115b6:	bfbc      	itt	lt
 80115b8:	4632      	movlt	r2, r6
 80115ba:	4616      	movlt	r6, r2
 80115bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80115c0:	d005      	beq.n	80115ce <__cvt+0x42>
 80115c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80115c6:	d100      	bne.n	80115ca <__cvt+0x3e>
 80115c8:	3401      	adds	r4, #1
 80115ca:	2102      	movs	r1, #2
 80115cc:	e000      	b.n	80115d0 <__cvt+0x44>
 80115ce:	2103      	movs	r1, #3
 80115d0:	ab03      	add	r3, sp, #12
 80115d2:	9301      	str	r3, [sp, #4]
 80115d4:	ab02      	add	r3, sp, #8
 80115d6:	9300      	str	r3, [sp, #0]
 80115d8:	ec47 6b10 	vmov	d0, r6, r7
 80115dc:	4653      	mov	r3, sl
 80115de:	4622      	mov	r2, r4
 80115e0:	f000 ff5e 	bl	80124a0 <_dtoa_r>
 80115e4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80115e8:	4605      	mov	r5, r0
 80115ea:	d119      	bne.n	8011620 <__cvt+0x94>
 80115ec:	f019 0f01 	tst.w	r9, #1
 80115f0:	d00e      	beq.n	8011610 <__cvt+0x84>
 80115f2:	eb00 0904 	add.w	r9, r0, r4
 80115f6:	2200      	movs	r2, #0
 80115f8:	2300      	movs	r3, #0
 80115fa:	4630      	mov	r0, r6
 80115fc:	4639      	mov	r1, r7
 80115fe:	f7ef fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 8011602:	b108      	cbz	r0, 8011608 <__cvt+0x7c>
 8011604:	f8cd 900c 	str.w	r9, [sp, #12]
 8011608:	2230      	movs	r2, #48	@ 0x30
 801160a:	9b03      	ldr	r3, [sp, #12]
 801160c:	454b      	cmp	r3, r9
 801160e:	d31e      	bcc.n	801164e <__cvt+0xc2>
 8011610:	9b03      	ldr	r3, [sp, #12]
 8011612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011614:	1b5b      	subs	r3, r3, r5
 8011616:	4628      	mov	r0, r5
 8011618:	6013      	str	r3, [r2, #0]
 801161a:	b004      	add	sp, #16
 801161c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011620:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011624:	eb00 0904 	add.w	r9, r0, r4
 8011628:	d1e5      	bne.n	80115f6 <__cvt+0x6a>
 801162a:	7803      	ldrb	r3, [r0, #0]
 801162c:	2b30      	cmp	r3, #48	@ 0x30
 801162e:	d10a      	bne.n	8011646 <__cvt+0xba>
 8011630:	2200      	movs	r2, #0
 8011632:	2300      	movs	r3, #0
 8011634:	4630      	mov	r0, r6
 8011636:	4639      	mov	r1, r7
 8011638:	f7ef fa46 	bl	8000ac8 <__aeabi_dcmpeq>
 801163c:	b918      	cbnz	r0, 8011646 <__cvt+0xba>
 801163e:	f1c4 0401 	rsb	r4, r4, #1
 8011642:	f8ca 4000 	str.w	r4, [sl]
 8011646:	f8da 3000 	ldr.w	r3, [sl]
 801164a:	4499      	add	r9, r3
 801164c:	e7d3      	b.n	80115f6 <__cvt+0x6a>
 801164e:	1c59      	adds	r1, r3, #1
 8011650:	9103      	str	r1, [sp, #12]
 8011652:	701a      	strb	r2, [r3, #0]
 8011654:	e7d9      	b.n	801160a <__cvt+0x7e>

08011656 <__exponent>:
 8011656:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011658:	2900      	cmp	r1, #0
 801165a:	bfba      	itte	lt
 801165c:	4249      	neglt	r1, r1
 801165e:	232d      	movlt	r3, #45	@ 0x2d
 8011660:	232b      	movge	r3, #43	@ 0x2b
 8011662:	2909      	cmp	r1, #9
 8011664:	7002      	strb	r2, [r0, #0]
 8011666:	7043      	strb	r3, [r0, #1]
 8011668:	dd29      	ble.n	80116be <__exponent+0x68>
 801166a:	f10d 0307 	add.w	r3, sp, #7
 801166e:	461d      	mov	r5, r3
 8011670:	270a      	movs	r7, #10
 8011672:	461a      	mov	r2, r3
 8011674:	fbb1 f6f7 	udiv	r6, r1, r7
 8011678:	fb07 1416 	mls	r4, r7, r6, r1
 801167c:	3430      	adds	r4, #48	@ 0x30
 801167e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011682:	460c      	mov	r4, r1
 8011684:	2c63      	cmp	r4, #99	@ 0x63
 8011686:	f103 33ff 	add.w	r3, r3, #4294967295
 801168a:	4631      	mov	r1, r6
 801168c:	dcf1      	bgt.n	8011672 <__exponent+0x1c>
 801168e:	3130      	adds	r1, #48	@ 0x30
 8011690:	1e94      	subs	r4, r2, #2
 8011692:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011696:	1c41      	adds	r1, r0, #1
 8011698:	4623      	mov	r3, r4
 801169a:	42ab      	cmp	r3, r5
 801169c:	d30a      	bcc.n	80116b4 <__exponent+0x5e>
 801169e:	f10d 0309 	add.w	r3, sp, #9
 80116a2:	1a9b      	subs	r3, r3, r2
 80116a4:	42ac      	cmp	r4, r5
 80116a6:	bf88      	it	hi
 80116a8:	2300      	movhi	r3, #0
 80116aa:	3302      	adds	r3, #2
 80116ac:	4403      	add	r3, r0
 80116ae:	1a18      	subs	r0, r3, r0
 80116b0:	b003      	add	sp, #12
 80116b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80116b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80116bc:	e7ed      	b.n	801169a <__exponent+0x44>
 80116be:	2330      	movs	r3, #48	@ 0x30
 80116c0:	3130      	adds	r1, #48	@ 0x30
 80116c2:	7083      	strb	r3, [r0, #2]
 80116c4:	70c1      	strb	r1, [r0, #3]
 80116c6:	1d03      	adds	r3, r0, #4
 80116c8:	e7f1      	b.n	80116ae <__exponent+0x58>
	...

080116cc <_printf_float>:
 80116cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d0:	b08d      	sub	sp, #52	@ 0x34
 80116d2:	460c      	mov	r4, r1
 80116d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80116d8:	4616      	mov	r6, r2
 80116da:	461f      	mov	r7, r3
 80116dc:	4605      	mov	r5, r0
 80116de:	f000 fdcd 	bl	801227c <_localeconv_r>
 80116e2:	6803      	ldr	r3, [r0, #0]
 80116e4:	9304      	str	r3, [sp, #16]
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7ee fdc2 	bl	8000270 <strlen>
 80116ec:	2300      	movs	r3, #0
 80116ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80116f0:	f8d8 3000 	ldr.w	r3, [r8]
 80116f4:	9005      	str	r0, [sp, #20]
 80116f6:	3307      	adds	r3, #7
 80116f8:	f023 0307 	bic.w	r3, r3, #7
 80116fc:	f103 0208 	add.w	r2, r3, #8
 8011700:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011704:	f8d4 b000 	ldr.w	fp, [r4]
 8011708:	f8c8 2000 	str.w	r2, [r8]
 801170c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011710:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011714:	9307      	str	r3, [sp, #28]
 8011716:	f8cd 8018 	str.w	r8, [sp, #24]
 801171a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801171e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011722:	4b9c      	ldr	r3, [pc, #624]	@ (8011994 <_printf_float+0x2c8>)
 8011724:	f04f 32ff 	mov.w	r2, #4294967295
 8011728:	f7ef fa00 	bl	8000b2c <__aeabi_dcmpun>
 801172c:	bb70      	cbnz	r0, 801178c <_printf_float+0xc0>
 801172e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011732:	4b98      	ldr	r3, [pc, #608]	@ (8011994 <_printf_float+0x2c8>)
 8011734:	f04f 32ff 	mov.w	r2, #4294967295
 8011738:	f7ef f9da 	bl	8000af0 <__aeabi_dcmple>
 801173c:	bb30      	cbnz	r0, 801178c <_printf_float+0xc0>
 801173e:	2200      	movs	r2, #0
 8011740:	2300      	movs	r3, #0
 8011742:	4640      	mov	r0, r8
 8011744:	4649      	mov	r1, r9
 8011746:	f7ef f9c9 	bl	8000adc <__aeabi_dcmplt>
 801174a:	b110      	cbz	r0, 8011752 <_printf_float+0x86>
 801174c:	232d      	movs	r3, #45	@ 0x2d
 801174e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011752:	4a91      	ldr	r2, [pc, #580]	@ (8011998 <_printf_float+0x2cc>)
 8011754:	4b91      	ldr	r3, [pc, #580]	@ (801199c <_printf_float+0x2d0>)
 8011756:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801175a:	bf8c      	ite	hi
 801175c:	4690      	movhi	r8, r2
 801175e:	4698      	movls	r8, r3
 8011760:	2303      	movs	r3, #3
 8011762:	6123      	str	r3, [r4, #16]
 8011764:	f02b 0304 	bic.w	r3, fp, #4
 8011768:	6023      	str	r3, [r4, #0]
 801176a:	f04f 0900 	mov.w	r9, #0
 801176e:	9700      	str	r7, [sp, #0]
 8011770:	4633      	mov	r3, r6
 8011772:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011774:	4621      	mov	r1, r4
 8011776:	4628      	mov	r0, r5
 8011778:	f000 f9d2 	bl	8011b20 <_printf_common>
 801177c:	3001      	adds	r0, #1
 801177e:	f040 808d 	bne.w	801189c <_printf_float+0x1d0>
 8011782:	f04f 30ff 	mov.w	r0, #4294967295
 8011786:	b00d      	add	sp, #52	@ 0x34
 8011788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801178c:	4642      	mov	r2, r8
 801178e:	464b      	mov	r3, r9
 8011790:	4640      	mov	r0, r8
 8011792:	4649      	mov	r1, r9
 8011794:	f7ef f9ca 	bl	8000b2c <__aeabi_dcmpun>
 8011798:	b140      	cbz	r0, 80117ac <_printf_float+0xe0>
 801179a:	464b      	mov	r3, r9
 801179c:	2b00      	cmp	r3, #0
 801179e:	bfbc      	itt	lt
 80117a0:	232d      	movlt	r3, #45	@ 0x2d
 80117a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80117a6:	4a7e      	ldr	r2, [pc, #504]	@ (80119a0 <_printf_float+0x2d4>)
 80117a8:	4b7e      	ldr	r3, [pc, #504]	@ (80119a4 <_printf_float+0x2d8>)
 80117aa:	e7d4      	b.n	8011756 <_printf_float+0x8a>
 80117ac:	6863      	ldr	r3, [r4, #4]
 80117ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80117b2:	9206      	str	r2, [sp, #24]
 80117b4:	1c5a      	adds	r2, r3, #1
 80117b6:	d13b      	bne.n	8011830 <_printf_float+0x164>
 80117b8:	2306      	movs	r3, #6
 80117ba:	6063      	str	r3, [r4, #4]
 80117bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80117c0:	2300      	movs	r3, #0
 80117c2:	6022      	str	r2, [r4, #0]
 80117c4:	9303      	str	r3, [sp, #12]
 80117c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80117c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80117cc:	ab09      	add	r3, sp, #36	@ 0x24
 80117ce:	9300      	str	r3, [sp, #0]
 80117d0:	6861      	ldr	r1, [r4, #4]
 80117d2:	ec49 8b10 	vmov	d0, r8, r9
 80117d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80117da:	4628      	mov	r0, r5
 80117dc:	f7ff fed6 	bl	801158c <__cvt>
 80117e0:	9b06      	ldr	r3, [sp, #24]
 80117e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80117e4:	2b47      	cmp	r3, #71	@ 0x47
 80117e6:	4680      	mov	r8, r0
 80117e8:	d129      	bne.n	801183e <_printf_float+0x172>
 80117ea:	1cc8      	adds	r0, r1, #3
 80117ec:	db02      	blt.n	80117f4 <_printf_float+0x128>
 80117ee:	6863      	ldr	r3, [r4, #4]
 80117f0:	4299      	cmp	r1, r3
 80117f2:	dd41      	ble.n	8011878 <_printf_float+0x1ac>
 80117f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80117f8:	fa5f fa8a 	uxtb.w	sl, sl
 80117fc:	3901      	subs	r1, #1
 80117fe:	4652      	mov	r2, sl
 8011800:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011804:	9109      	str	r1, [sp, #36]	@ 0x24
 8011806:	f7ff ff26 	bl	8011656 <__exponent>
 801180a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801180c:	1813      	adds	r3, r2, r0
 801180e:	2a01      	cmp	r2, #1
 8011810:	4681      	mov	r9, r0
 8011812:	6123      	str	r3, [r4, #16]
 8011814:	dc02      	bgt.n	801181c <_printf_float+0x150>
 8011816:	6822      	ldr	r2, [r4, #0]
 8011818:	07d2      	lsls	r2, r2, #31
 801181a:	d501      	bpl.n	8011820 <_printf_float+0x154>
 801181c:	3301      	adds	r3, #1
 801181e:	6123      	str	r3, [r4, #16]
 8011820:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011824:	2b00      	cmp	r3, #0
 8011826:	d0a2      	beq.n	801176e <_printf_float+0xa2>
 8011828:	232d      	movs	r3, #45	@ 0x2d
 801182a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801182e:	e79e      	b.n	801176e <_printf_float+0xa2>
 8011830:	9a06      	ldr	r2, [sp, #24]
 8011832:	2a47      	cmp	r2, #71	@ 0x47
 8011834:	d1c2      	bne.n	80117bc <_printf_float+0xf0>
 8011836:	2b00      	cmp	r3, #0
 8011838:	d1c0      	bne.n	80117bc <_printf_float+0xf0>
 801183a:	2301      	movs	r3, #1
 801183c:	e7bd      	b.n	80117ba <_printf_float+0xee>
 801183e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011842:	d9db      	bls.n	80117fc <_printf_float+0x130>
 8011844:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011848:	d118      	bne.n	801187c <_printf_float+0x1b0>
 801184a:	2900      	cmp	r1, #0
 801184c:	6863      	ldr	r3, [r4, #4]
 801184e:	dd0b      	ble.n	8011868 <_printf_float+0x19c>
 8011850:	6121      	str	r1, [r4, #16]
 8011852:	b913      	cbnz	r3, 801185a <_printf_float+0x18e>
 8011854:	6822      	ldr	r2, [r4, #0]
 8011856:	07d0      	lsls	r0, r2, #31
 8011858:	d502      	bpl.n	8011860 <_printf_float+0x194>
 801185a:	3301      	adds	r3, #1
 801185c:	440b      	add	r3, r1
 801185e:	6123      	str	r3, [r4, #16]
 8011860:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011862:	f04f 0900 	mov.w	r9, #0
 8011866:	e7db      	b.n	8011820 <_printf_float+0x154>
 8011868:	b913      	cbnz	r3, 8011870 <_printf_float+0x1a4>
 801186a:	6822      	ldr	r2, [r4, #0]
 801186c:	07d2      	lsls	r2, r2, #31
 801186e:	d501      	bpl.n	8011874 <_printf_float+0x1a8>
 8011870:	3302      	adds	r3, #2
 8011872:	e7f4      	b.n	801185e <_printf_float+0x192>
 8011874:	2301      	movs	r3, #1
 8011876:	e7f2      	b.n	801185e <_printf_float+0x192>
 8011878:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801187c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801187e:	4299      	cmp	r1, r3
 8011880:	db05      	blt.n	801188e <_printf_float+0x1c2>
 8011882:	6823      	ldr	r3, [r4, #0]
 8011884:	6121      	str	r1, [r4, #16]
 8011886:	07d8      	lsls	r0, r3, #31
 8011888:	d5ea      	bpl.n	8011860 <_printf_float+0x194>
 801188a:	1c4b      	adds	r3, r1, #1
 801188c:	e7e7      	b.n	801185e <_printf_float+0x192>
 801188e:	2900      	cmp	r1, #0
 8011890:	bfd4      	ite	le
 8011892:	f1c1 0202 	rsble	r2, r1, #2
 8011896:	2201      	movgt	r2, #1
 8011898:	4413      	add	r3, r2
 801189a:	e7e0      	b.n	801185e <_printf_float+0x192>
 801189c:	6823      	ldr	r3, [r4, #0]
 801189e:	055a      	lsls	r2, r3, #21
 80118a0:	d407      	bmi.n	80118b2 <_printf_float+0x1e6>
 80118a2:	6923      	ldr	r3, [r4, #16]
 80118a4:	4642      	mov	r2, r8
 80118a6:	4631      	mov	r1, r6
 80118a8:	4628      	mov	r0, r5
 80118aa:	47b8      	blx	r7
 80118ac:	3001      	adds	r0, #1
 80118ae:	d12b      	bne.n	8011908 <_printf_float+0x23c>
 80118b0:	e767      	b.n	8011782 <_printf_float+0xb6>
 80118b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80118b6:	f240 80dd 	bls.w	8011a74 <_printf_float+0x3a8>
 80118ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80118be:	2200      	movs	r2, #0
 80118c0:	2300      	movs	r3, #0
 80118c2:	f7ef f901 	bl	8000ac8 <__aeabi_dcmpeq>
 80118c6:	2800      	cmp	r0, #0
 80118c8:	d033      	beq.n	8011932 <_printf_float+0x266>
 80118ca:	4a37      	ldr	r2, [pc, #220]	@ (80119a8 <_printf_float+0x2dc>)
 80118cc:	2301      	movs	r3, #1
 80118ce:	4631      	mov	r1, r6
 80118d0:	4628      	mov	r0, r5
 80118d2:	47b8      	blx	r7
 80118d4:	3001      	adds	r0, #1
 80118d6:	f43f af54 	beq.w	8011782 <_printf_float+0xb6>
 80118da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80118de:	4543      	cmp	r3, r8
 80118e0:	db02      	blt.n	80118e8 <_printf_float+0x21c>
 80118e2:	6823      	ldr	r3, [r4, #0]
 80118e4:	07d8      	lsls	r0, r3, #31
 80118e6:	d50f      	bpl.n	8011908 <_printf_float+0x23c>
 80118e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80118ec:	4631      	mov	r1, r6
 80118ee:	4628      	mov	r0, r5
 80118f0:	47b8      	blx	r7
 80118f2:	3001      	adds	r0, #1
 80118f4:	f43f af45 	beq.w	8011782 <_printf_float+0xb6>
 80118f8:	f04f 0900 	mov.w	r9, #0
 80118fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8011900:	f104 0a1a 	add.w	sl, r4, #26
 8011904:	45c8      	cmp	r8, r9
 8011906:	dc09      	bgt.n	801191c <_printf_float+0x250>
 8011908:	6823      	ldr	r3, [r4, #0]
 801190a:	079b      	lsls	r3, r3, #30
 801190c:	f100 8103 	bmi.w	8011b16 <_printf_float+0x44a>
 8011910:	68e0      	ldr	r0, [r4, #12]
 8011912:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011914:	4298      	cmp	r0, r3
 8011916:	bfb8      	it	lt
 8011918:	4618      	movlt	r0, r3
 801191a:	e734      	b.n	8011786 <_printf_float+0xba>
 801191c:	2301      	movs	r3, #1
 801191e:	4652      	mov	r2, sl
 8011920:	4631      	mov	r1, r6
 8011922:	4628      	mov	r0, r5
 8011924:	47b8      	blx	r7
 8011926:	3001      	adds	r0, #1
 8011928:	f43f af2b 	beq.w	8011782 <_printf_float+0xb6>
 801192c:	f109 0901 	add.w	r9, r9, #1
 8011930:	e7e8      	b.n	8011904 <_printf_float+0x238>
 8011932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011934:	2b00      	cmp	r3, #0
 8011936:	dc39      	bgt.n	80119ac <_printf_float+0x2e0>
 8011938:	4a1b      	ldr	r2, [pc, #108]	@ (80119a8 <_printf_float+0x2dc>)
 801193a:	2301      	movs	r3, #1
 801193c:	4631      	mov	r1, r6
 801193e:	4628      	mov	r0, r5
 8011940:	47b8      	blx	r7
 8011942:	3001      	adds	r0, #1
 8011944:	f43f af1d 	beq.w	8011782 <_printf_float+0xb6>
 8011948:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801194c:	ea59 0303 	orrs.w	r3, r9, r3
 8011950:	d102      	bne.n	8011958 <_printf_float+0x28c>
 8011952:	6823      	ldr	r3, [r4, #0]
 8011954:	07d9      	lsls	r1, r3, #31
 8011956:	d5d7      	bpl.n	8011908 <_printf_float+0x23c>
 8011958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801195c:	4631      	mov	r1, r6
 801195e:	4628      	mov	r0, r5
 8011960:	47b8      	blx	r7
 8011962:	3001      	adds	r0, #1
 8011964:	f43f af0d 	beq.w	8011782 <_printf_float+0xb6>
 8011968:	f04f 0a00 	mov.w	sl, #0
 801196c:	f104 0b1a 	add.w	fp, r4, #26
 8011970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011972:	425b      	negs	r3, r3
 8011974:	4553      	cmp	r3, sl
 8011976:	dc01      	bgt.n	801197c <_printf_float+0x2b0>
 8011978:	464b      	mov	r3, r9
 801197a:	e793      	b.n	80118a4 <_printf_float+0x1d8>
 801197c:	2301      	movs	r3, #1
 801197e:	465a      	mov	r2, fp
 8011980:	4631      	mov	r1, r6
 8011982:	4628      	mov	r0, r5
 8011984:	47b8      	blx	r7
 8011986:	3001      	adds	r0, #1
 8011988:	f43f aefb 	beq.w	8011782 <_printf_float+0xb6>
 801198c:	f10a 0a01 	add.w	sl, sl, #1
 8011990:	e7ee      	b.n	8011970 <_printf_float+0x2a4>
 8011992:	bf00      	nop
 8011994:	7fefffff 	.word	0x7fefffff
 8011998:	08015e74 	.word	0x08015e74
 801199c:	08015e70 	.word	0x08015e70
 80119a0:	08015e7c 	.word	0x08015e7c
 80119a4:	08015e78 	.word	0x08015e78
 80119a8:	08015e80 	.word	0x08015e80
 80119ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80119ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80119b2:	4553      	cmp	r3, sl
 80119b4:	bfa8      	it	ge
 80119b6:	4653      	movge	r3, sl
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	4699      	mov	r9, r3
 80119bc:	dc36      	bgt.n	8011a2c <_printf_float+0x360>
 80119be:	f04f 0b00 	mov.w	fp, #0
 80119c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80119c6:	f104 021a 	add.w	r2, r4, #26
 80119ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80119cc:	9306      	str	r3, [sp, #24]
 80119ce:	eba3 0309 	sub.w	r3, r3, r9
 80119d2:	455b      	cmp	r3, fp
 80119d4:	dc31      	bgt.n	8011a3a <_printf_float+0x36e>
 80119d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119d8:	459a      	cmp	sl, r3
 80119da:	dc3a      	bgt.n	8011a52 <_printf_float+0x386>
 80119dc:	6823      	ldr	r3, [r4, #0]
 80119de:	07da      	lsls	r2, r3, #31
 80119e0:	d437      	bmi.n	8011a52 <_printf_float+0x386>
 80119e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119e4:	ebaa 0903 	sub.w	r9, sl, r3
 80119e8:	9b06      	ldr	r3, [sp, #24]
 80119ea:	ebaa 0303 	sub.w	r3, sl, r3
 80119ee:	4599      	cmp	r9, r3
 80119f0:	bfa8      	it	ge
 80119f2:	4699      	movge	r9, r3
 80119f4:	f1b9 0f00 	cmp.w	r9, #0
 80119f8:	dc33      	bgt.n	8011a62 <_printf_float+0x396>
 80119fa:	f04f 0800 	mov.w	r8, #0
 80119fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a02:	f104 0b1a 	add.w	fp, r4, #26
 8011a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a08:	ebaa 0303 	sub.w	r3, sl, r3
 8011a0c:	eba3 0309 	sub.w	r3, r3, r9
 8011a10:	4543      	cmp	r3, r8
 8011a12:	f77f af79 	ble.w	8011908 <_printf_float+0x23c>
 8011a16:	2301      	movs	r3, #1
 8011a18:	465a      	mov	r2, fp
 8011a1a:	4631      	mov	r1, r6
 8011a1c:	4628      	mov	r0, r5
 8011a1e:	47b8      	blx	r7
 8011a20:	3001      	adds	r0, #1
 8011a22:	f43f aeae 	beq.w	8011782 <_printf_float+0xb6>
 8011a26:	f108 0801 	add.w	r8, r8, #1
 8011a2a:	e7ec      	b.n	8011a06 <_printf_float+0x33a>
 8011a2c:	4642      	mov	r2, r8
 8011a2e:	4631      	mov	r1, r6
 8011a30:	4628      	mov	r0, r5
 8011a32:	47b8      	blx	r7
 8011a34:	3001      	adds	r0, #1
 8011a36:	d1c2      	bne.n	80119be <_printf_float+0x2f2>
 8011a38:	e6a3      	b.n	8011782 <_printf_float+0xb6>
 8011a3a:	2301      	movs	r3, #1
 8011a3c:	4631      	mov	r1, r6
 8011a3e:	4628      	mov	r0, r5
 8011a40:	9206      	str	r2, [sp, #24]
 8011a42:	47b8      	blx	r7
 8011a44:	3001      	adds	r0, #1
 8011a46:	f43f ae9c 	beq.w	8011782 <_printf_float+0xb6>
 8011a4a:	9a06      	ldr	r2, [sp, #24]
 8011a4c:	f10b 0b01 	add.w	fp, fp, #1
 8011a50:	e7bb      	b.n	80119ca <_printf_float+0x2fe>
 8011a52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a56:	4631      	mov	r1, r6
 8011a58:	4628      	mov	r0, r5
 8011a5a:	47b8      	blx	r7
 8011a5c:	3001      	adds	r0, #1
 8011a5e:	d1c0      	bne.n	80119e2 <_printf_float+0x316>
 8011a60:	e68f      	b.n	8011782 <_printf_float+0xb6>
 8011a62:	9a06      	ldr	r2, [sp, #24]
 8011a64:	464b      	mov	r3, r9
 8011a66:	4442      	add	r2, r8
 8011a68:	4631      	mov	r1, r6
 8011a6a:	4628      	mov	r0, r5
 8011a6c:	47b8      	blx	r7
 8011a6e:	3001      	adds	r0, #1
 8011a70:	d1c3      	bne.n	80119fa <_printf_float+0x32e>
 8011a72:	e686      	b.n	8011782 <_printf_float+0xb6>
 8011a74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011a78:	f1ba 0f01 	cmp.w	sl, #1
 8011a7c:	dc01      	bgt.n	8011a82 <_printf_float+0x3b6>
 8011a7e:	07db      	lsls	r3, r3, #31
 8011a80:	d536      	bpl.n	8011af0 <_printf_float+0x424>
 8011a82:	2301      	movs	r3, #1
 8011a84:	4642      	mov	r2, r8
 8011a86:	4631      	mov	r1, r6
 8011a88:	4628      	mov	r0, r5
 8011a8a:	47b8      	blx	r7
 8011a8c:	3001      	adds	r0, #1
 8011a8e:	f43f ae78 	beq.w	8011782 <_printf_float+0xb6>
 8011a92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a96:	4631      	mov	r1, r6
 8011a98:	4628      	mov	r0, r5
 8011a9a:	47b8      	blx	r7
 8011a9c:	3001      	adds	r0, #1
 8011a9e:	f43f ae70 	beq.w	8011782 <_printf_float+0xb6>
 8011aa2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011aae:	f7ef f80b 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ab2:	b9c0      	cbnz	r0, 8011ae6 <_printf_float+0x41a>
 8011ab4:	4653      	mov	r3, sl
 8011ab6:	f108 0201 	add.w	r2, r8, #1
 8011aba:	4631      	mov	r1, r6
 8011abc:	4628      	mov	r0, r5
 8011abe:	47b8      	blx	r7
 8011ac0:	3001      	adds	r0, #1
 8011ac2:	d10c      	bne.n	8011ade <_printf_float+0x412>
 8011ac4:	e65d      	b.n	8011782 <_printf_float+0xb6>
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	465a      	mov	r2, fp
 8011aca:	4631      	mov	r1, r6
 8011acc:	4628      	mov	r0, r5
 8011ace:	47b8      	blx	r7
 8011ad0:	3001      	adds	r0, #1
 8011ad2:	f43f ae56 	beq.w	8011782 <_printf_float+0xb6>
 8011ad6:	f108 0801 	add.w	r8, r8, #1
 8011ada:	45d0      	cmp	r8, sl
 8011adc:	dbf3      	blt.n	8011ac6 <_printf_float+0x3fa>
 8011ade:	464b      	mov	r3, r9
 8011ae0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011ae4:	e6df      	b.n	80118a6 <_printf_float+0x1da>
 8011ae6:	f04f 0800 	mov.w	r8, #0
 8011aea:	f104 0b1a 	add.w	fp, r4, #26
 8011aee:	e7f4      	b.n	8011ada <_printf_float+0x40e>
 8011af0:	2301      	movs	r3, #1
 8011af2:	4642      	mov	r2, r8
 8011af4:	e7e1      	b.n	8011aba <_printf_float+0x3ee>
 8011af6:	2301      	movs	r3, #1
 8011af8:	464a      	mov	r2, r9
 8011afa:	4631      	mov	r1, r6
 8011afc:	4628      	mov	r0, r5
 8011afe:	47b8      	blx	r7
 8011b00:	3001      	adds	r0, #1
 8011b02:	f43f ae3e 	beq.w	8011782 <_printf_float+0xb6>
 8011b06:	f108 0801 	add.w	r8, r8, #1
 8011b0a:	68e3      	ldr	r3, [r4, #12]
 8011b0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011b0e:	1a5b      	subs	r3, r3, r1
 8011b10:	4543      	cmp	r3, r8
 8011b12:	dcf0      	bgt.n	8011af6 <_printf_float+0x42a>
 8011b14:	e6fc      	b.n	8011910 <_printf_float+0x244>
 8011b16:	f04f 0800 	mov.w	r8, #0
 8011b1a:	f104 0919 	add.w	r9, r4, #25
 8011b1e:	e7f4      	b.n	8011b0a <_printf_float+0x43e>

08011b20 <_printf_common>:
 8011b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b24:	4616      	mov	r6, r2
 8011b26:	4698      	mov	r8, r3
 8011b28:	688a      	ldr	r2, [r1, #8]
 8011b2a:	690b      	ldr	r3, [r1, #16]
 8011b2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011b30:	4293      	cmp	r3, r2
 8011b32:	bfb8      	it	lt
 8011b34:	4613      	movlt	r3, r2
 8011b36:	6033      	str	r3, [r6, #0]
 8011b38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011b3c:	4607      	mov	r7, r0
 8011b3e:	460c      	mov	r4, r1
 8011b40:	b10a      	cbz	r2, 8011b46 <_printf_common+0x26>
 8011b42:	3301      	adds	r3, #1
 8011b44:	6033      	str	r3, [r6, #0]
 8011b46:	6823      	ldr	r3, [r4, #0]
 8011b48:	0699      	lsls	r1, r3, #26
 8011b4a:	bf42      	ittt	mi
 8011b4c:	6833      	ldrmi	r3, [r6, #0]
 8011b4e:	3302      	addmi	r3, #2
 8011b50:	6033      	strmi	r3, [r6, #0]
 8011b52:	6825      	ldr	r5, [r4, #0]
 8011b54:	f015 0506 	ands.w	r5, r5, #6
 8011b58:	d106      	bne.n	8011b68 <_printf_common+0x48>
 8011b5a:	f104 0a19 	add.w	sl, r4, #25
 8011b5e:	68e3      	ldr	r3, [r4, #12]
 8011b60:	6832      	ldr	r2, [r6, #0]
 8011b62:	1a9b      	subs	r3, r3, r2
 8011b64:	42ab      	cmp	r3, r5
 8011b66:	dc26      	bgt.n	8011bb6 <_printf_common+0x96>
 8011b68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011b6c:	6822      	ldr	r2, [r4, #0]
 8011b6e:	3b00      	subs	r3, #0
 8011b70:	bf18      	it	ne
 8011b72:	2301      	movne	r3, #1
 8011b74:	0692      	lsls	r2, r2, #26
 8011b76:	d42b      	bmi.n	8011bd0 <_printf_common+0xb0>
 8011b78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011b7c:	4641      	mov	r1, r8
 8011b7e:	4638      	mov	r0, r7
 8011b80:	47c8      	blx	r9
 8011b82:	3001      	adds	r0, #1
 8011b84:	d01e      	beq.n	8011bc4 <_printf_common+0xa4>
 8011b86:	6823      	ldr	r3, [r4, #0]
 8011b88:	6922      	ldr	r2, [r4, #16]
 8011b8a:	f003 0306 	and.w	r3, r3, #6
 8011b8e:	2b04      	cmp	r3, #4
 8011b90:	bf02      	ittt	eq
 8011b92:	68e5      	ldreq	r5, [r4, #12]
 8011b94:	6833      	ldreq	r3, [r6, #0]
 8011b96:	1aed      	subeq	r5, r5, r3
 8011b98:	68a3      	ldr	r3, [r4, #8]
 8011b9a:	bf0c      	ite	eq
 8011b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ba0:	2500      	movne	r5, #0
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	bfc4      	itt	gt
 8011ba6:	1a9b      	subgt	r3, r3, r2
 8011ba8:	18ed      	addgt	r5, r5, r3
 8011baa:	2600      	movs	r6, #0
 8011bac:	341a      	adds	r4, #26
 8011bae:	42b5      	cmp	r5, r6
 8011bb0:	d11a      	bne.n	8011be8 <_printf_common+0xc8>
 8011bb2:	2000      	movs	r0, #0
 8011bb4:	e008      	b.n	8011bc8 <_printf_common+0xa8>
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	4652      	mov	r2, sl
 8011bba:	4641      	mov	r1, r8
 8011bbc:	4638      	mov	r0, r7
 8011bbe:	47c8      	blx	r9
 8011bc0:	3001      	adds	r0, #1
 8011bc2:	d103      	bne.n	8011bcc <_printf_common+0xac>
 8011bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8011bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bcc:	3501      	adds	r5, #1
 8011bce:	e7c6      	b.n	8011b5e <_printf_common+0x3e>
 8011bd0:	18e1      	adds	r1, r4, r3
 8011bd2:	1c5a      	adds	r2, r3, #1
 8011bd4:	2030      	movs	r0, #48	@ 0x30
 8011bd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011bda:	4422      	add	r2, r4
 8011bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011be0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011be4:	3302      	adds	r3, #2
 8011be6:	e7c7      	b.n	8011b78 <_printf_common+0x58>
 8011be8:	2301      	movs	r3, #1
 8011bea:	4622      	mov	r2, r4
 8011bec:	4641      	mov	r1, r8
 8011bee:	4638      	mov	r0, r7
 8011bf0:	47c8      	blx	r9
 8011bf2:	3001      	adds	r0, #1
 8011bf4:	d0e6      	beq.n	8011bc4 <_printf_common+0xa4>
 8011bf6:	3601      	adds	r6, #1
 8011bf8:	e7d9      	b.n	8011bae <_printf_common+0x8e>
	...

08011bfc <_printf_i>:
 8011bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c00:	7e0f      	ldrb	r7, [r1, #24]
 8011c02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011c04:	2f78      	cmp	r7, #120	@ 0x78
 8011c06:	4691      	mov	r9, r2
 8011c08:	4680      	mov	r8, r0
 8011c0a:	460c      	mov	r4, r1
 8011c0c:	469a      	mov	sl, r3
 8011c0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011c12:	d807      	bhi.n	8011c24 <_printf_i+0x28>
 8011c14:	2f62      	cmp	r7, #98	@ 0x62
 8011c16:	d80a      	bhi.n	8011c2e <_printf_i+0x32>
 8011c18:	2f00      	cmp	r7, #0
 8011c1a:	f000 80d1 	beq.w	8011dc0 <_printf_i+0x1c4>
 8011c1e:	2f58      	cmp	r7, #88	@ 0x58
 8011c20:	f000 80b8 	beq.w	8011d94 <_printf_i+0x198>
 8011c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011c28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011c2c:	e03a      	b.n	8011ca4 <_printf_i+0xa8>
 8011c2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011c32:	2b15      	cmp	r3, #21
 8011c34:	d8f6      	bhi.n	8011c24 <_printf_i+0x28>
 8011c36:	a101      	add	r1, pc, #4	@ (adr r1, 8011c3c <_printf_i+0x40>)
 8011c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011c3c:	08011c95 	.word	0x08011c95
 8011c40:	08011ca9 	.word	0x08011ca9
 8011c44:	08011c25 	.word	0x08011c25
 8011c48:	08011c25 	.word	0x08011c25
 8011c4c:	08011c25 	.word	0x08011c25
 8011c50:	08011c25 	.word	0x08011c25
 8011c54:	08011ca9 	.word	0x08011ca9
 8011c58:	08011c25 	.word	0x08011c25
 8011c5c:	08011c25 	.word	0x08011c25
 8011c60:	08011c25 	.word	0x08011c25
 8011c64:	08011c25 	.word	0x08011c25
 8011c68:	08011da7 	.word	0x08011da7
 8011c6c:	08011cd3 	.word	0x08011cd3
 8011c70:	08011d61 	.word	0x08011d61
 8011c74:	08011c25 	.word	0x08011c25
 8011c78:	08011c25 	.word	0x08011c25
 8011c7c:	08011dc9 	.word	0x08011dc9
 8011c80:	08011c25 	.word	0x08011c25
 8011c84:	08011cd3 	.word	0x08011cd3
 8011c88:	08011c25 	.word	0x08011c25
 8011c8c:	08011c25 	.word	0x08011c25
 8011c90:	08011d69 	.word	0x08011d69
 8011c94:	6833      	ldr	r3, [r6, #0]
 8011c96:	1d1a      	adds	r2, r3, #4
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	6032      	str	r2, [r6, #0]
 8011c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011ca0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	e09c      	b.n	8011de2 <_printf_i+0x1e6>
 8011ca8:	6833      	ldr	r3, [r6, #0]
 8011caa:	6820      	ldr	r0, [r4, #0]
 8011cac:	1d19      	adds	r1, r3, #4
 8011cae:	6031      	str	r1, [r6, #0]
 8011cb0:	0606      	lsls	r6, r0, #24
 8011cb2:	d501      	bpl.n	8011cb8 <_printf_i+0xbc>
 8011cb4:	681d      	ldr	r5, [r3, #0]
 8011cb6:	e003      	b.n	8011cc0 <_printf_i+0xc4>
 8011cb8:	0645      	lsls	r5, r0, #25
 8011cba:	d5fb      	bpl.n	8011cb4 <_printf_i+0xb8>
 8011cbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011cc0:	2d00      	cmp	r5, #0
 8011cc2:	da03      	bge.n	8011ccc <_printf_i+0xd0>
 8011cc4:	232d      	movs	r3, #45	@ 0x2d
 8011cc6:	426d      	negs	r5, r5
 8011cc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011ccc:	4858      	ldr	r0, [pc, #352]	@ (8011e30 <_printf_i+0x234>)
 8011cce:	230a      	movs	r3, #10
 8011cd0:	e011      	b.n	8011cf6 <_printf_i+0xfa>
 8011cd2:	6821      	ldr	r1, [r4, #0]
 8011cd4:	6833      	ldr	r3, [r6, #0]
 8011cd6:	0608      	lsls	r0, r1, #24
 8011cd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8011cdc:	d402      	bmi.n	8011ce4 <_printf_i+0xe8>
 8011cde:	0649      	lsls	r1, r1, #25
 8011ce0:	bf48      	it	mi
 8011ce2:	b2ad      	uxthmi	r5, r5
 8011ce4:	2f6f      	cmp	r7, #111	@ 0x6f
 8011ce6:	4852      	ldr	r0, [pc, #328]	@ (8011e30 <_printf_i+0x234>)
 8011ce8:	6033      	str	r3, [r6, #0]
 8011cea:	bf14      	ite	ne
 8011cec:	230a      	movne	r3, #10
 8011cee:	2308      	moveq	r3, #8
 8011cf0:	2100      	movs	r1, #0
 8011cf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011cf6:	6866      	ldr	r6, [r4, #4]
 8011cf8:	60a6      	str	r6, [r4, #8]
 8011cfa:	2e00      	cmp	r6, #0
 8011cfc:	db05      	blt.n	8011d0a <_printf_i+0x10e>
 8011cfe:	6821      	ldr	r1, [r4, #0]
 8011d00:	432e      	orrs	r6, r5
 8011d02:	f021 0104 	bic.w	r1, r1, #4
 8011d06:	6021      	str	r1, [r4, #0]
 8011d08:	d04b      	beq.n	8011da2 <_printf_i+0x1a6>
 8011d0a:	4616      	mov	r6, r2
 8011d0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8011d10:	fb03 5711 	mls	r7, r3, r1, r5
 8011d14:	5dc7      	ldrb	r7, [r0, r7]
 8011d16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011d1a:	462f      	mov	r7, r5
 8011d1c:	42bb      	cmp	r3, r7
 8011d1e:	460d      	mov	r5, r1
 8011d20:	d9f4      	bls.n	8011d0c <_printf_i+0x110>
 8011d22:	2b08      	cmp	r3, #8
 8011d24:	d10b      	bne.n	8011d3e <_printf_i+0x142>
 8011d26:	6823      	ldr	r3, [r4, #0]
 8011d28:	07df      	lsls	r7, r3, #31
 8011d2a:	d508      	bpl.n	8011d3e <_printf_i+0x142>
 8011d2c:	6923      	ldr	r3, [r4, #16]
 8011d2e:	6861      	ldr	r1, [r4, #4]
 8011d30:	4299      	cmp	r1, r3
 8011d32:	bfde      	ittt	le
 8011d34:	2330      	movle	r3, #48	@ 0x30
 8011d36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011d3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011d3e:	1b92      	subs	r2, r2, r6
 8011d40:	6122      	str	r2, [r4, #16]
 8011d42:	f8cd a000 	str.w	sl, [sp]
 8011d46:	464b      	mov	r3, r9
 8011d48:	aa03      	add	r2, sp, #12
 8011d4a:	4621      	mov	r1, r4
 8011d4c:	4640      	mov	r0, r8
 8011d4e:	f7ff fee7 	bl	8011b20 <_printf_common>
 8011d52:	3001      	adds	r0, #1
 8011d54:	d14a      	bne.n	8011dec <_printf_i+0x1f0>
 8011d56:	f04f 30ff 	mov.w	r0, #4294967295
 8011d5a:	b004      	add	sp, #16
 8011d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d60:	6823      	ldr	r3, [r4, #0]
 8011d62:	f043 0320 	orr.w	r3, r3, #32
 8011d66:	6023      	str	r3, [r4, #0]
 8011d68:	4832      	ldr	r0, [pc, #200]	@ (8011e34 <_printf_i+0x238>)
 8011d6a:	2778      	movs	r7, #120	@ 0x78
 8011d6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011d70:	6823      	ldr	r3, [r4, #0]
 8011d72:	6831      	ldr	r1, [r6, #0]
 8011d74:	061f      	lsls	r7, r3, #24
 8011d76:	f851 5b04 	ldr.w	r5, [r1], #4
 8011d7a:	d402      	bmi.n	8011d82 <_printf_i+0x186>
 8011d7c:	065f      	lsls	r7, r3, #25
 8011d7e:	bf48      	it	mi
 8011d80:	b2ad      	uxthmi	r5, r5
 8011d82:	6031      	str	r1, [r6, #0]
 8011d84:	07d9      	lsls	r1, r3, #31
 8011d86:	bf44      	itt	mi
 8011d88:	f043 0320 	orrmi.w	r3, r3, #32
 8011d8c:	6023      	strmi	r3, [r4, #0]
 8011d8e:	b11d      	cbz	r5, 8011d98 <_printf_i+0x19c>
 8011d90:	2310      	movs	r3, #16
 8011d92:	e7ad      	b.n	8011cf0 <_printf_i+0xf4>
 8011d94:	4826      	ldr	r0, [pc, #152]	@ (8011e30 <_printf_i+0x234>)
 8011d96:	e7e9      	b.n	8011d6c <_printf_i+0x170>
 8011d98:	6823      	ldr	r3, [r4, #0]
 8011d9a:	f023 0320 	bic.w	r3, r3, #32
 8011d9e:	6023      	str	r3, [r4, #0]
 8011da0:	e7f6      	b.n	8011d90 <_printf_i+0x194>
 8011da2:	4616      	mov	r6, r2
 8011da4:	e7bd      	b.n	8011d22 <_printf_i+0x126>
 8011da6:	6833      	ldr	r3, [r6, #0]
 8011da8:	6825      	ldr	r5, [r4, #0]
 8011daa:	6961      	ldr	r1, [r4, #20]
 8011dac:	1d18      	adds	r0, r3, #4
 8011dae:	6030      	str	r0, [r6, #0]
 8011db0:	062e      	lsls	r6, r5, #24
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	d501      	bpl.n	8011dba <_printf_i+0x1be>
 8011db6:	6019      	str	r1, [r3, #0]
 8011db8:	e002      	b.n	8011dc0 <_printf_i+0x1c4>
 8011dba:	0668      	lsls	r0, r5, #25
 8011dbc:	d5fb      	bpl.n	8011db6 <_printf_i+0x1ba>
 8011dbe:	8019      	strh	r1, [r3, #0]
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	6123      	str	r3, [r4, #16]
 8011dc4:	4616      	mov	r6, r2
 8011dc6:	e7bc      	b.n	8011d42 <_printf_i+0x146>
 8011dc8:	6833      	ldr	r3, [r6, #0]
 8011dca:	1d1a      	adds	r2, r3, #4
 8011dcc:	6032      	str	r2, [r6, #0]
 8011dce:	681e      	ldr	r6, [r3, #0]
 8011dd0:	6862      	ldr	r2, [r4, #4]
 8011dd2:	2100      	movs	r1, #0
 8011dd4:	4630      	mov	r0, r6
 8011dd6:	f7ee f9fb 	bl	80001d0 <memchr>
 8011dda:	b108      	cbz	r0, 8011de0 <_printf_i+0x1e4>
 8011ddc:	1b80      	subs	r0, r0, r6
 8011dde:	6060      	str	r0, [r4, #4]
 8011de0:	6863      	ldr	r3, [r4, #4]
 8011de2:	6123      	str	r3, [r4, #16]
 8011de4:	2300      	movs	r3, #0
 8011de6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011dea:	e7aa      	b.n	8011d42 <_printf_i+0x146>
 8011dec:	6923      	ldr	r3, [r4, #16]
 8011dee:	4632      	mov	r2, r6
 8011df0:	4649      	mov	r1, r9
 8011df2:	4640      	mov	r0, r8
 8011df4:	47d0      	blx	sl
 8011df6:	3001      	adds	r0, #1
 8011df8:	d0ad      	beq.n	8011d56 <_printf_i+0x15a>
 8011dfa:	6823      	ldr	r3, [r4, #0]
 8011dfc:	079b      	lsls	r3, r3, #30
 8011dfe:	d413      	bmi.n	8011e28 <_printf_i+0x22c>
 8011e00:	68e0      	ldr	r0, [r4, #12]
 8011e02:	9b03      	ldr	r3, [sp, #12]
 8011e04:	4298      	cmp	r0, r3
 8011e06:	bfb8      	it	lt
 8011e08:	4618      	movlt	r0, r3
 8011e0a:	e7a6      	b.n	8011d5a <_printf_i+0x15e>
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	4632      	mov	r2, r6
 8011e10:	4649      	mov	r1, r9
 8011e12:	4640      	mov	r0, r8
 8011e14:	47d0      	blx	sl
 8011e16:	3001      	adds	r0, #1
 8011e18:	d09d      	beq.n	8011d56 <_printf_i+0x15a>
 8011e1a:	3501      	adds	r5, #1
 8011e1c:	68e3      	ldr	r3, [r4, #12]
 8011e1e:	9903      	ldr	r1, [sp, #12]
 8011e20:	1a5b      	subs	r3, r3, r1
 8011e22:	42ab      	cmp	r3, r5
 8011e24:	dcf2      	bgt.n	8011e0c <_printf_i+0x210>
 8011e26:	e7eb      	b.n	8011e00 <_printf_i+0x204>
 8011e28:	2500      	movs	r5, #0
 8011e2a:	f104 0619 	add.w	r6, r4, #25
 8011e2e:	e7f5      	b.n	8011e1c <_printf_i+0x220>
 8011e30:	08015e82 	.word	0x08015e82
 8011e34:	08015e93 	.word	0x08015e93

08011e38 <std>:
 8011e38:	2300      	movs	r3, #0
 8011e3a:	b510      	push	{r4, lr}
 8011e3c:	4604      	mov	r4, r0
 8011e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8011e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e46:	6083      	str	r3, [r0, #8]
 8011e48:	8181      	strh	r1, [r0, #12]
 8011e4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8011e4c:	81c2      	strh	r2, [r0, #14]
 8011e4e:	6183      	str	r3, [r0, #24]
 8011e50:	4619      	mov	r1, r3
 8011e52:	2208      	movs	r2, #8
 8011e54:	305c      	adds	r0, #92	@ 0x5c
 8011e56:	f000 fa09 	bl	801226c <memset>
 8011e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8011e90 <std+0x58>)
 8011e5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8011e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8011e94 <std+0x5c>)
 8011e60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011e62:	4b0d      	ldr	r3, [pc, #52]	@ (8011e98 <std+0x60>)
 8011e64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011e66:	4b0d      	ldr	r3, [pc, #52]	@ (8011e9c <std+0x64>)
 8011e68:	6323      	str	r3, [r4, #48]	@ 0x30
 8011e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8011ea0 <std+0x68>)
 8011e6c:	6224      	str	r4, [r4, #32]
 8011e6e:	429c      	cmp	r4, r3
 8011e70:	d006      	beq.n	8011e80 <std+0x48>
 8011e72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011e76:	4294      	cmp	r4, r2
 8011e78:	d002      	beq.n	8011e80 <std+0x48>
 8011e7a:	33d0      	adds	r3, #208	@ 0xd0
 8011e7c:	429c      	cmp	r4, r3
 8011e7e:	d105      	bne.n	8011e8c <std+0x54>
 8011e80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e88:	f000 ba7c 	b.w	8012384 <__retarget_lock_init_recursive>
 8011e8c:	bd10      	pop	{r4, pc}
 8011e8e:	bf00      	nop
 8011e90:	0801209d 	.word	0x0801209d
 8011e94:	080120bf 	.word	0x080120bf
 8011e98:	080120f7 	.word	0x080120f7
 8011e9c:	0801211b 	.word	0x0801211b
 8011ea0:	20000ac4 	.word	0x20000ac4

08011ea4 <stdio_exit_handler>:
 8011ea4:	4a02      	ldr	r2, [pc, #8]	@ (8011eb0 <stdio_exit_handler+0xc>)
 8011ea6:	4903      	ldr	r1, [pc, #12]	@ (8011eb4 <stdio_exit_handler+0x10>)
 8011ea8:	4803      	ldr	r0, [pc, #12]	@ (8011eb8 <stdio_exit_handler+0x14>)
 8011eaa:	f000 b869 	b.w	8011f80 <_fwalk_sglue>
 8011eae:	bf00      	nop
 8011eb0:	200000ec 	.word	0x200000ec
 8011eb4:	08013b55 	.word	0x08013b55
 8011eb8:	200000fc 	.word	0x200000fc

08011ebc <cleanup_stdio>:
 8011ebc:	6841      	ldr	r1, [r0, #4]
 8011ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8011ef0 <cleanup_stdio+0x34>)
 8011ec0:	4299      	cmp	r1, r3
 8011ec2:	b510      	push	{r4, lr}
 8011ec4:	4604      	mov	r4, r0
 8011ec6:	d001      	beq.n	8011ecc <cleanup_stdio+0x10>
 8011ec8:	f001 fe44 	bl	8013b54 <_fflush_r>
 8011ecc:	68a1      	ldr	r1, [r4, #8]
 8011ece:	4b09      	ldr	r3, [pc, #36]	@ (8011ef4 <cleanup_stdio+0x38>)
 8011ed0:	4299      	cmp	r1, r3
 8011ed2:	d002      	beq.n	8011eda <cleanup_stdio+0x1e>
 8011ed4:	4620      	mov	r0, r4
 8011ed6:	f001 fe3d 	bl	8013b54 <_fflush_r>
 8011eda:	68e1      	ldr	r1, [r4, #12]
 8011edc:	4b06      	ldr	r3, [pc, #24]	@ (8011ef8 <cleanup_stdio+0x3c>)
 8011ede:	4299      	cmp	r1, r3
 8011ee0:	d004      	beq.n	8011eec <cleanup_stdio+0x30>
 8011ee2:	4620      	mov	r0, r4
 8011ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ee8:	f001 be34 	b.w	8013b54 <_fflush_r>
 8011eec:	bd10      	pop	{r4, pc}
 8011eee:	bf00      	nop
 8011ef0:	20000ac4 	.word	0x20000ac4
 8011ef4:	20000b2c 	.word	0x20000b2c
 8011ef8:	20000b94 	.word	0x20000b94

08011efc <global_stdio_init.part.0>:
 8011efc:	b510      	push	{r4, lr}
 8011efe:	4b0b      	ldr	r3, [pc, #44]	@ (8011f2c <global_stdio_init.part.0+0x30>)
 8011f00:	4c0b      	ldr	r4, [pc, #44]	@ (8011f30 <global_stdio_init.part.0+0x34>)
 8011f02:	4a0c      	ldr	r2, [pc, #48]	@ (8011f34 <global_stdio_init.part.0+0x38>)
 8011f04:	601a      	str	r2, [r3, #0]
 8011f06:	4620      	mov	r0, r4
 8011f08:	2200      	movs	r2, #0
 8011f0a:	2104      	movs	r1, #4
 8011f0c:	f7ff ff94 	bl	8011e38 <std>
 8011f10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011f14:	2201      	movs	r2, #1
 8011f16:	2109      	movs	r1, #9
 8011f18:	f7ff ff8e 	bl	8011e38 <std>
 8011f1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011f20:	2202      	movs	r2, #2
 8011f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f26:	2112      	movs	r1, #18
 8011f28:	f7ff bf86 	b.w	8011e38 <std>
 8011f2c:	20000bfc 	.word	0x20000bfc
 8011f30:	20000ac4 	.word	0x20000ac4
 8011f34:	08011ea5 	.word	0x08011ea5

08011f38 <__sfp_lock_acquire>:
 8011f38:	4801      	ldr	r0, [pc, #4]	@ (8011f40 <__sfp_lock_acquire+0x8>)
 8011f3a:	f000 ba24 	b.w	8012386 <__retarget_lock_acquire_recursive>
 8011f3e:	bf00      	nop
 8011f40:	20000c05 	.word	0x20000c05

08011f44 <__sfp_lock_release>:
 8011f44:	4801      	ldr	r0, [pc, #4]	@ (8011f4c <__sfp_lock_release+0x8>)
 8011f46:	f000 ba1f 	b.w	8012388 <__retarget_lock_release_recursive>
 8011f4a:	bf00      	nop
 8011f4c:	20000c05 	.word	0x20000c05

08011f50 <__sinit>:
 8011f50:	b510      	push	{r4, lr}
 8011f52:	4604      	mov	r4, r0
 8011f54:	f7ff fff0 	bl	8011f38 <__sfp_lock_acquire>
 8011f58:	6a23      	ldr	r3, [r4, #32]
 8011f5a:	b11b      	cbz	r3, 8011f64 <__sinit+0x14>
 8011f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f60:	f7ff bff0 	b.w	8011f44 <__sfp_lock_release>
 8011f64:	4b04      	ldr	r3, [pc, #16]	@ (8011f78 <__sinit+0x28>)
 8011f66:	6223      	str	r3, [r4, #32]
 8011f68:	4b04      	ldr	r3, [pc, #16]	@ (8011f7c <__sinit+0x2c>)
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d1f5      	bne.n	8011f5c <__sinit+0xc>
 8011f70:	f7ff ffc4 	bl	8011efc <global_stdio_init.part.0>
 8011f74:	e7f2      	b.n	8011f5c <__sinit+0xc>
 8011f76:	bf00      	nop
 8011f78:	08011ebd 	.word	0x08011ebd
 8011f7c:	20000bfc 	.word	0x20000bfc

08011f80 <_fwalk_sglue>:
 8011f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f84:	4607      	mov	r7, r0
 8011f86:	4688      	mov	r8, r1
 8011f88:	4614      	mov	r4, r2
 8011f8a:	2600      	movs	r6, #0
 8011f8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011f90:	f1b9 0901 	subs.w	r9, r9, #1
 8011f94:	d505      	bpl.n	8011fa2 <_fwalk_sglue+0x22>
 8011f96:	6824      	ldr	r4, [r4, #0]
 8011f98:	2c00      	cmp	r4, #0
 8011f9a:	d1f7      	bne.n	8011f8c <_fwalk_sglue+0xc>
 8011f9c:	4630      	mov	r0, r6
 8011f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fa2:	89ab      	ldrh	r3, [r5, #12]
 8011fa4:	2b01      	cmp	r3, #1
 8011fa6:	d907      	bls.n	8011fb8 <_fwalk_sglue+0x38>
 8011fa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011fac:	3301      	adds	r3, #1
 8011fae:	d003      	beq.n	8011fb8 <_fwalk_sglue+0x38>
 8011fb0:	4629      	mov	r1, r5
 8011fb2:	4638      	mov	r0, r7
 8011fb4:	47c0      	blx	r8
 8011fb6:	4306      	orrs	r6, r0
 8011fb8:	3568      	adds	r5, #104	@ 0x68
 8011fba:	e7e9      	b.n	8011f90 <_fwalk_sglue+0x10>

08011fbc <iprintf>:
 8011fbc:	b40f      	push	{r0, r1, r2, r3}
 8011fbe:	b507      	push	{r0, r1, r2, lr}
 8011fc0:	4906      	ldr	r1, [pc, #24]	@ (8011fdc <iprintf+0x20>)
 8011fc2:	ab04      	add	r3, sp, #16
 8011fc4:	6808      	ldr	r0, [r1, #0]
 8011fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fca:	6881      	ldr	r1, [r0, #8]
 8011fcc:	9301      	str	r3, [sp, #4]
 8011fce:	f001 fc25 	bl	801381c <_vfiprintf_r>
 8011fd2:	b003      	add	sp, #12
 8011fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fd8:	b004      	add	sp, #16
 8011fda:	4770      	bx	lr
 8011fdc:	200000f8 	.word	0x200000f8

08011fe0 <_puts_r>:
 8011fe0:	6a03      	ldr	r3, [r0, #32]
 8011fe2:	b570      	push	{r4, r5, r6, lr}
 8011fe4:	6884      	ldr	r4, [r0, #8]
 8011fe6:	4605      	mov	r5, r0
 8011fe8:	460e      	mov	r6, r1
 8011fea:	b90b      	cbnz	r3, 8011ff0 <_puts_r+0x10>
 8011fec:	f7ff ffb0 	bl	8011f50 <__sinit>
 8011ff0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ff2:	07db      	lsls	r3, r3, #31
 8011ff4:	d405      	bmi.n	8012002 <_puts_r+0x22>
 8011ff6:	89a3      	ldrh	r3, [r4, #12]
 8011ff8:	0598      	lsls	r0, r3, #22
 8011ffa:	d402      	bmi.n	8012002 <_puts_r+0x22>
 8011ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ffe:	f000 f9c2 	bl	8012386 <__retarget_lock_acquire_recursive>
 8012002:	89a3      	ldrh	r3, [r4, #12]
 8012004:	0719      	lsls	r1, r3, #28
 8012006:	d502      	bpl.n	801200e <_puts_r+0x2e>
 8012008:	6923      	ldr	r3, [r4, #16]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d135      	bne.n	801207a <_puts_r+0x9a>
 801200e:	4621      	mov	r1, r4
 8012010:	4628      	mov	r0, r5
 8012012:	f000 f8c5 	bl	80121a0 <__swsetup_r>
 8012016:	b380      	cbz	r0, 801207a <_puts_r+0x9a>
 8012018:	f04f 35ff 	mov.w	r5, #4294967295
 801201c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801201e:	07da      	lsls	r2, r3, #31
 8012020:	d405      	bmi.n	801202e <_puts_r+0x4e>
 8012022:	89a3      	ldrh	r3, [r4, #12]
 8012024:	059b      	lsls	r3, r3, #22
 8012026:	d402      	bmi.n	801202e <_puts_r+0x4e>
 8012028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801202a:	f000 f9ad 	bl	8012388 <__retarget_lock_release_recursive>
 801202e:	4628      	mov	r0, r5
 8012030:	bd70      	pop	{r4, r5, r6, pc}
 8012032:	2b00      	cmp	r3, #0
 8012034:	da04      	bge.n	8012040 <_puts_r+0x60>
 8012036:	69a2      	ldr	r2, [r4, #24]
 8012038:	429a      	cmp	r2, r3
 801203a:	dc17      	bgt.n	801206c <_puts_r+0x8c>
 801203c:	290a      	cmp	r1, #10
 801203e:	d015      	beq.n	801206c <_puts_r+0x8c>
 8012040:	6823      	ldr	r3, [r4, #0]
 8012042:	1c5a      	adds	r2, r3, #1
 8012044:	6022      	str	r2, [r4, #0]
 8012046:	7019      	strb	r1, [r3, #0]
 8012048:	68a3      	ldr	r3, [r4, #8]
 801204a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801204e:	3b01      	subs	r3, #1
 8012050:	60a3      	str	r3, [r4, #8]
 8012052:	2900      	cmp	r1, #0
 8012054:	d1ed      	bne.n	8012032 <_puts_r+0x52>
 8012056:	2b00      	cmp	r3, #0
 8012058:	da11      	bge.n	801207e <_puts_r+0x9e>
 801205a:	4622      	mov	r2, r4
 801205c:	210a      	movs	r1, #10
 801205e:	4628      	mov	r0, r5
 8012060:	f000 f85f 	bl	8012122 <__swbuf_r>
 8012064:	3001      	adds	r0, #1
 8012066:	d0d7      	beq.n	8012018 <_puts_r+0x38>
 8012068:	250a      	movs	r5, #10
 801206a:	e7d7      	b.n	801201c <_puts_r+0x3c>
 801206c:	4622      	mov	r2, r4
 801206e:	4628      	mov	r0, r5
 8012070:	f000 f857 	bl	8012122 <__swbuf_r>
 8012074:	3001      	adds	r0, #1
 8012076:	d1e7      	bne.n	8012048 <_puts_r+0x68>
 8012078:	e7ce      	b.n	8012018 <_puts_r+0x38>
 801207a:	3e01      	subs	r6, #1
 801207c:	e7e4      	b.n	8012048 <_puts_r+0x68>
 801207e:	6823      	ldr	r3, [r4, #0]
 8012080:	1c5a      	adds	r2, r3, #1
 8012082:	6022      	str	r2, [r4, #0]
 8012084:	220a      	movs	r2, #10
 8012086:	701a      	strb	r2, [r3, #0]
 8012088:	e7ee      	b.n	8012068 <_puts_r+0x88>
	...

0801208c <puts>:
 801208c:	4b02      	ldr	r3, [pc, #8]	@ (8012098 <puts+0xc>)
 801208e:	4601      	mov	r1, r0
 8012090:	6818      	ldr	r0, [r3, #0]
 8012092:	f7ff bfa5 	b.w	8011fe0 <_puts_r>
 8012096:	bf00      	nop
 8012098:	200000f8 	.word	0x200000f8

0801209c <__sread>:
 801209c:	b510      	push	{r4, lr}
 801209e:	460c      	mov	r4, r1
 80120a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120a4:	f000 f910 	bl	80122c8 <_read_r>
 80120a8:	2800      	cmp	r0, #0
 80120aa:	bfab      	itete	ge
 80120ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80120ae:	89a3      	ldrhlt	r3, [r4, #12]
 80120b0:	181b      	addge	r3, r3, r0
 80120b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80120b6:	bfac      	ite	ge
 80120b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80120ba:	81a3      	strhlt	r3, [r4, #12]
 80120bc:	bd10      	pop	{r4, pc}

080120be <__swrite>:
 80120be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120c2:	461f      	mov	r7, r3
 80120c4:	898b      	ldrh	r3, [r1, #12]
 80120c6:	05db      	lsls	r3, r3, #23
 80120c8:	4605      	mov	r5, r0
 80120ca:	460c      	mov	r4, r1
 80120cc:	4616      	mov	r6, r2
 80120ce:	d505      	bpl.n	80120dc <__swrite+0x1e>
 80120d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120d4:	2302      	movs	r3, #2
 80120d6:	2200      	movs	r2, #0
 80120d8:	f000 f8e4 	bl	80122a4 <_lseek_r>
 80120dc:	89a3      	ldrh	r3, [r4, #12]
 80120de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80120e6:	81a3      	strh	r3, [r4, #12]
 80120e8:	4632      	mov	r2, r6
 80120ea:	463b      	mov	r3, r7
 80120ec:	4628      	mov	r0, r5
 80120ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120f2:	f000 b90b 	b.w	801230c <_write_r>

080120f6 <__sseek>:
 80120f6:	b510      	push	{r4, lr}
 80120f8:	460c      	mov	r4, r1
 80120fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120fe:	f000 f8d1 	bl	80122a4 <_lseek_r>
 8012102:	1c43      	adds	r3, r0, #1
 8012104:	89a3      	ldrh	r3, [r4, #12]
 8012106:	bf15      	itete	ne
 8012108:	6560      	strne	r0, [r4, #84]	@ 0x54
 801210a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801210e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012112:	81a3      	strheq	r3, [r4, #12]
 8012114:	bf18      	it	ne
 8012116:	81a3      	strhne	r3, [r4, #12]
 8012118:	bd10      	pop	{r4, pc}

0801211a <__sclose>:
 801211a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801211e:	f000 b8b1 	b.w	8012284 <_close_r>

08012122 <__swbuf_r>:
 8012122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012124:	460e      	mov	r6, r1
 8012126:	4614      	mov	r4, r2
 8012128:	4605      	mov	r5, r0
 801212a:	b118      	cbz	r0, 8012134 <__swbuf_r+0x12>
 801212c:	6a03      	ldr	r3, [r0, #32]
 801212e:	b90b      	cbnz	r3, 8012134 <__swbuf_r+0x12>
 8012130:	f7ff ff0e 	bl	8011f50 <__sinit>
 8012134:	69a3      	ldr	r3, [r4, #24]
 8012136:	60a3      	str	r3, [r4, #8]
 8012138:	89a3      	ldrh	r3, [r4, #12]
 801213a:	071a      	lsls	r2, r3, #28
 801213c:	d501      	bpl.n	8012142 <__swbuf_r+0x20>
 801213e:	6923      	ldr	r3, [r4, #16]
 8012140:	b943      	cbnz	r3, 8012154 <__swbuf_r+0x32>
 8012142:	4621      	mov	r1, r4
 8012144:	4628      	mov	r0, r5
 8012146:	f000 f82b 	bl	80121a0 <__swsetup_r>
 801214a:	b118      	cbz	r0, 8012154 <__swbuf_r+0x32>
 801214c:	f04f 37ff 	mov.w	r7, #4294967295
 8012150:	4638      	mov	r0, r7
 8012152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012154:	6823      	ldr	r3, [r4, #0]
 8012156:	6922      	ldr	r2, [r4, #16]
 8012158:	1a98      	subs	r0, r3, r2
 801215a:	6963      	ldr	r3, [r4, #20]
 801215c:	b2f6      	uxtb	r6, r6
 801215e:	4283      	cmp	r3, r0
 8012160:	4637      	mov	r7, r6
 8012162:	dc05      	bgt.n	8012170 <__swbuf_r+0x4e>
 8012164:	4621      	mov	r1, r4
 8012166:	4628      	mov	r0, r5
 8012168:	f001 fcf4 	bl	8013b54 <_fflush_r>
 801216c:	2800      	cmp	r0, #0
 801216e:	d1ed      	bne.n	801214c <__swbuf_r+0x2a>
 8012170:	68a3      	ldr	r3, [r4, #8]
 8012172:	3b01      	subs	r3, #1
 8012174:	60a3      	str	r3, [r4, #8]
 8012176:	6823      	ldr	r3, [r4, #0]
 8012178:	1c5a      	adds	r2, r3, #1
 801217a:	6022      	str	r2, [r4, #0]
 801217c:	701e      	strb	r6, [r3, #0]
 801217e:	6962      	ldr	r2, [r4, #20]
 8012180:	1c43      	adds	r3, r0, #1
 8012182:	429a      	cmp	r2, r3
 8012184:	d004      	beq.n	8012190 <__swbuf_r+0x6e>
 8012186:	89a3      	ldrh	r3, [r4, #12]
 8012188:	07db      	lsls	r3, r3, #31
 801218a:	d5e1      	bpl.n	8012150 <__swbuf_r+0x2e>
 801218c:	2e0a      	cmp	r6, #10
 801218e:	d1df      	bne.n	8012150 <__swbuf_r+0x2e>
 8012190:	4621      	mov	r1, r4
 8012192:	4628      	mov	r0, r5
 8012194:	f001 fcde 	bl	8013b54 <_fflush_r>
 8012198:	2800      	cmp	r0, #0
 801219a:	d0d9      	beq.n	8012150 <__swbuf_r+0x2e>
 801219c:	e7d6      	b.n	801214c <__swbuf_r+0x2a>
	...

080121a0 <__swsetup_r>:
 80121a0:	b538      	push	{r3, r4, r5, lr}
 80121a2:	4b29      	ldr	r3, [pc, #164]	@ (8012248 <__swsetup_r+0xa8>)
 80121a4:	4605      	mov	r5, r0
 80121a6:	6818      	ldr	r0, [r3, #0]
 80121a8:	460c      	mov	r4, r1
 80121aa:	b118      	cbz	r0, 80121b4 <__swsetup_r+0x14>
 80121ac:	6a03      	ldr	r3, [r0, #32]
 80121ae:	b90b      	cbnz	r3, 80121b4 <__swsetup_r+0x14>
 80121b0:	f7ff fece 	bl	8011f50 <__sinit>
 80121b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121b8:	0719      	lsls	r1, r3, #28
 80121ba:	d422      	bmi.n	8012202 <__swsetup_r+0x62>
 80121bc:	06da      	lsls	r2, r3, #27
 80121be:	d407      	bmi.n	80121d0 <__swsetup_r+0x30>
 80121c0:	2209      	movs	r2, #9
 80121c2:	602a      	str	r2, [r5, #0]
 80121c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121c8:	81a3      	strh	r3, [r4, #12]
 80121ca:	f04f 30ff 	mov.w	r0, #4294967295
 80121ce:	e033      	b.n	8012238 <__swsetup_r+0x98>
 80121d0:	0758      	lsls	r0, r3, #29
 80121d2:	d512      	bpl.n	80121fa <__swsetup_r+0x5a>
 80121d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80121d6:	b141      	cbz	r1, 80121ea <__swsetup_r+0x4a>
 80121d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80121dc:	4299      	cmp	r1, r3
 80121de:	d002      	beq.n	80121e6 <__swsetup_r+0x46>
 80121e0:	4628      	mov	r0, r5
 80121e2:	f000 ff2d 	bl	8013040 <_free_r>
 80121e6:	2300      	movs	r3, #0
 80121e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80121ea:	89a3      	ldrh	r3, [r4, #12]
 80121ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80121f0:	81a3      	strh	r3, [r4, #12]
 80121f2:	2300      	movs	r3, #0
 80121f4:	6063      	str	r3, [r4, #4]
 80121f6:	6923      	ldr	r3, [r4, #16]
 80121f8:	6023      	str	r3, [r4, #0]
 80121fa:	89a3      	ldrh	r3, [r4, #12]
 80121fc:	f043 0308 	orr.w	r3, r3, #8
 8012200:	81a3      	strh	r3, [r4, #12]
 8012202:	6923      	ldr	r3, [r4, #16]
 8012204:	b94b      	cbnz	r3, 801221a <__swsetup_r+0x7a>
 8012206:	89a3      	ldrh	r3, [r4, #12]
 8012208:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801220c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012210:	d003      	beq.n	801221a <__swsetup_r+0x7a>
 8012212:	4621      	mov	r1, r4
 8012214:	4628      	mov	r0, r5
 8012216:	f001 fceb 	bl	8013bf0 <__smakebuf_r>
 801221a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801221e:	f013 0201 	ands.w	r2, r3, #1
 8012222:	d00a      	beq.n	801223a <__swsetup_r+0x9a>
 8012224:	2200      	movs	r2, #0
 8012226:	60a2      	str	r2, [r4, #8]
 8012228:	6962      	ldr	r2, [r4, #20]
 801222a:	4252      	negs	r2, r2
 801222c:	61a2      	str	r2, [r4, #24]
 801222e:	6922      	ldr	r2, [r4, #16]
 8012230:	b942      	cbnz	r2, 8012244 <__swsetup_r+0xa4>
 8012232:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012236:	d1c5      	bne.n	80121c4 <__swsetup_r+0x24>
 8012238:	bd38      	pop	{r3, r4, r5, pc}
 801223a:	0799      	lsls	r1, r3, #30
 801223c:	bf58      	it	pl
 801223e:	6962      	ldrpl	r2, [r4, #20]
 8012240:	60a2      	str	r2, [r4, #8]
 8012242:	e7f4      	b.n	801222e <__swsetup_r+0x8e>
 8012244:	2000      	movs	r0, #0
 8012246:	e7f7      	b.n	8012238 <__swsetup_r+0x98>
 8012248:	200000f8 	.word	0x200000f8

0801224c <memcmp>:
 801224c:	b510      	push	{r4, lr}
 801224e:	3901      	subs	r1, #1
 8012250:	4402      	add	r2, r0
 8012252:	4290      	cmp	r0, r2
 8012254:	d101      	bne.n	801225a <memcmp+0xe>
 8012256:	2000      	movs	r0, #0
 8012258:	e005      	b.n	8012266 <memcmp+0x1a>
 801225a:	7803      	ldrb	r3, [r0, #0]
 801225c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012260:	42a3      	cmp	r3, r4
 8012262:	d001      	beq.n	8012268 <memcmp+0x1c>
 8012264:	1b18      	subs	r0, r3, r4
 8012266:	bd10      	pop	{r4, pc}
 8012268:	3001      	adds	r0, #1
 801226a:	e7f2      	b.n	8012252 <memcmp+0x6>

0801226c <memset>:
 801226c:	4402      	add	r2, r0
 801226e:	4603      	mov	r3, r0
 8012270:	4293      	cmp	r3, r2
 8012272:	d100      	bne.n	8012276 <memset+0xa>
 8012274:	4770      	bx	lr
 8012276:	f803 1b01 	strb.w	r1, [r3], #1
 801227a:	e7f9      	b.n	8012270 <memset+0x4>

0801227c <_localeconv_r>:
 801227c:	4800      	ldr	r0, [pc, #0]	@ (8012280 <_localeconv_r+0x4>)
 801227e:	4770      	bx	lr
 8012280:	20000238 	.word	0x20000238

08012284 <_close_r>:
 8012284:	b538      	push	{r3, r4, r5, lr}
 8012286:	4d06      	ldr	r5, [pc, #24]	@ (80122a0 <_close_r+0x1c>)
 8012288:	2300      	movs	r3, #0
 801228a:	4604      	mov	r4, r0
 801228c:	4608      	mov	r0, r1
 801228e:	602b      	str	r3, [r5, #0]
 8012290:	f7f9 f866 	bl	800b360 <_close>
 8012294:	1c43      	adds	r3, r0, #1
 8012296:	d102      	bne.n	801229e <_close_r+0x1a>
 8012298:	682b      	ldr	r3, [r5, #0]
 801229a:	b103      	cbz	r3, 801229e <_close_r+0x1a>
 801229c:	6023      	str	r3, [r4, #0]
 801229e:	bd38      	pop	{r3, r4, r5, pc}
 80122a0:	20000c00 	.word	0x20000c00

080122a4 <_lseek_r>:
 80122a4:	b538      	push	{r3, r4, r5, lr}
 80122a6:	4d07      	ldr	r5, [pc, #28]	@ (80122c4 <_lseek_r+0x20>)
 80122a8:	4604      	mov	r4, r0
 80122aa:	4608      	mov	r0, r1
 80122ac:	4611      	mov	r1, r2
 80122ae:	2200      	movs	r2, #0
 80122b0:	602a      	str	r2, [r5, #0]
 80122b2:	461a      	mov	r2, r3
 80122b4:	f7f9 f87b 	bl	800b3ae <_lseek>
 80122b8:	1c43      	adds	r3, r0, #1
 80122ba:	d102      	bne.n	80122c2 <_lseek_r+0x1e>
 80122bc:	682b      	ldr	r3, [r5, #0]
 80122be:	b103      	cbz	r3, 80122c2 <_lseek_r+0x1e>
 80122c0:	6023      	str	r3, [r4, #0]
 80122c2:	bd38      	pop	{r3, r4, r5, pc}
 80122c4:	20000c00 	.word	0x20000c00

080122c8 <_read_r>:
 80122c8:	b538      	push	{r3, r4, r5, lr}
 80122ca:	4d07      	ldr	r5, [pc, #28]	@ (80122e8 <_read_r+0x20>)
 80122cc:	4604      	mov	r4, r0
 80122ce:	4608      	mov	r0, r1
 80122d0:	4611      	mov	r1, r2
 80122d2:	2200      	movs	r2, #0
 80122d4:	602a      	str	r2, [r5, #0]
 80122d6:	461a      	mov	r2, r3
 80122d8:	f7f9 f809 	bl	800b2ee <_read>
 80122dc:	1c43      	adds	r3, r0, #1
 80122de:	d102      	bne.n	80122e6 <_read_r+0x1e>
 80122e0:	682b      	ldr	r3, [r5, #0]
 80122e2:	b103      	cbz	r3, 80122e6 <_read_r+0x1e>
 80122e4:	6023      	str	r3, [r4, #0]
 80122e6:	bd38      	pop	{r3, r4, r5, pc}
 80122e8:	20000c00 	.word	0x20000c00

080122ec <_sbrk_r>:
 80122ec:	b538      	push	{r3, r4, r5, lr}
 80122ee:	4d06      	ldr	r5, [pc, #24]	@ (8012308 <_sbrk_r+0x1c>)
 80122f0:	2300      	movs	r3, #0
 80122f2:	4604      	mov	r4, r0
 80122f4:	4608      	mov	r0, r1
 80122f6:	602b      	str	r3, [r5, #0]
 80122f8:	f7f9 f866 	bl	800b3c8 <_sbrk>
 80122fc:	1c43      	adds	r3, r0, #1
 80122fe:	d102      	bne.n	8012306 <_sbrk_r+0x1a>
 8012300:	682b      	ldr	r3, [r5, #0]
 8012302:	b103      	cbz	r3, 8012306 <_sbrk_r+0x1a>
 8012304:	6023      	str	r3, [r4, #0]
 8012306:	bd38      	pop	{r3, r4, r5, pc}
 8012308:	20000c00 	.word	0x20000c00

0801230c <_write_r>:
 801230c:	b538      	push	{r3, r4, r5, lr}
 801230e:	4d07      	ldr	r5, [pc, #28]	@ (801232c <_write_r+0x20>)
 8012310:	4604      	mov	r4, r0
 8012312:	4608      	mov	r0, r1
 8012314:	4611      	mov	r1, r2
 8012316:	2200      	movs	r2, #0
 8012318:	602a      	str	r2, [r5, #0]
 801231a:	461a      	mov	r2, r3
 801231c:	f7f9 f804 	bl	800b328 <_write>
 8012320:	1c43      	adds	r3, r0, #1
 8012322:	d102      	bne.n	801232a <_write_r+0x1e>
 8012324:	682b      	ldr	r3, [r5, #0]
 8012326:	b103      	cbz	r3, 801232a <_write_r+0x1e>
 8012328:	6023      	str	r3, [r4, #0]
 801232a:	bd38      	pop	{r3, r4, r5, pc}
 801232c:	20000c00 	.word	0x20000c00

08012330 <__errno>:
 8012330:	4b01      	ldr	r3, [pc, #4]	@ (8012338 <__errno+0x8>)
 8012332:	6818      	ldr	r0, [r3, #0]
 8012334:	4770      	bx	lr
 8012336:	bf00      	nop
 8012338:	200000f8 	.word	0x200000f8

0801233c <__libc_init_array>:
 801233c:	b570      	push	{r4, r5, r6, lr}
 801233e:	4d0d      	ldr	r5, [pc, #52]	@ (8012374 <__libc_init_array+0x38>)
 8012340:	4c0d      	ldr	r4, [pc, #52]	@ (8012378 <__libc_init_array+0x3c>)
 8012342:	1b64      	subs	r4, r4, r5
 8012344:	10a4      	asrs	r4, r4, #2
 8012346:	2600      	movs	r6, #0
 8012348:	42a6      	cmp	r6, r4
 801234a:	d109      	bne.n	8012360 <__libc_init_array+0x24>
 801234c:	4d0b      	ldr	r5, [pc, #44]	@ (801237c <__libc_init_array+0x40>)
 801234e:	4c0c      	ldr	r4, [pc, #48]	@ (8012380 <__libc_init_array+0x44>)
 8012350:	f002 fbbc 	bl	8014acc <_init>
 8012354:	1b64      	subs	r4, r4, r5
 8012356:	10a4      	asrs	r4, r4, #2
 8012358:	2600      	movs	r6, #0
 801235a:	42a6      	cmp	r6, r4
 801235c:	d105      	bne.n	801236a <__libc_init_array+0x2e>
 801235e:	bd70      	pop	{r4, r5, r6, pc}
 8012360:	f855 3b04 	ldr.w	r3, [r5], #4
 8012364:	4798      	blx	r3
 8012366:	3601      	adds	r6, #1
 8012368:	e7ee      	b.n	8012348 <__libc_init_array+0xc>
 801236a:	f855 3b04 	ldr.w	r3, [r5], #4
 801236e:	4798      	blx	r3
 8012370:	3601      	adds	r6, #1
 8012372:	e7f2      	b.n	801235a <__libc_init_array+0x1e>
 8012374:	08016270 	.word	0x08016270
 8012378:	08016270 	.word	0x08016270
 801237c:	08016270 	.word	0x08016270
 8012380:	08016274 	.word	0x08016274

08012384 <__retarget_lock_init_recursive>:
 8012384:	4770      	bx	lr

08012386 <__retarget_lock_acquire_recursive>:
 8012386:	4770      	bx	lr

08012388 <__retarget_lock_release_recursive>:
 8012388:	4770      	bx	lr

0801238a <quorem>:
 801238a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801238e:	6903      	ldr	r3, [r0, #16]
 8012390:	690c      	ldr	r4, [r1, #16]
 8012392:	42a3      	cmp	r3, r4
 8012394:	4607      	mov	r7, r0
 8012396:	db7e      	blt.n	8012496 <quorem+0x10c>
 8012398:	3c01      	subs	r4, #1
 801239a:	f101 0814 	add.w	r8, r1, #20
 801239e:	00a3      	lsls	r3, r4, #2
 80123a0:	f100 0514 	add.w	r5, r0, #20
 80123a4:	9300      	str	r3, [sp, #0]
 80123a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80123aa:	9301      	str	r3, [sp, #4]
 80123ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80123b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80123b4:	3301      	adds	r3, #1
 80123b6:	429a      	cmp	r2, r3
 80123b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80123bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80123c0:	d32e      	bcc.n	8012420 <quorem+0x96>
 80123c2:	f04f 0a00 	mov.w	sl, #0
 80123c6:	46c4      	mov	ip, r8
 80123c8:	46ae      	mov	lr, r5
 80123ca:	46d3      	mov	fp, sl
 80123cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80123d0:	b298      	uxth	r0, r3
 80123d2:	fb06 a000 	mla	r0, r6, r0, sl
 80123d6:	0c02      	lsrs	r2, r0, #16
 80123d8:	0c1b      	lsrs	r3, r3, #16
 80123da:	fb06 2303 	mla	r3, r6, r3, r2
 80123de:	f8de 2000 	ldr.w	r2, [lr]
 80123e2:	b280      	uxth	r0, r0
 80123e4:	b292      	uxth	r2, r2
 80123e6:	1a12      	subs	r2, r2, r0
 80123e8:	445a      	add	r2, fp
 80123ea:	f8de 0000 	ldr.w	r0, [lr]
 80123ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80123f2:	b29b      	uxth	r3, r3
 80123f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80123f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80123fc:	b292      	uxth	r2, r2
 80123fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012402:	45e1      	cmp	r9, ip
 8012404:	f84e 2b04 	str.w	r2, [lr], #4
 8012408:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801240c:	d2de      	bcs.n	80123cc <quorem+0x42>
 801240e:	9b00      	ldr	r3, [sp, #0]
 8012410:	58eb      	ldr	r3, [r5, r3]
 8012412:	b92b      	cbnz	r3, 8012420 <quorem+0x96>
 8012414:	9b01      	ldr	r3, [sp, #4]
 8012416:	3b04      	subs	r3, #4
 8012418:	429d      	cmp	r5, r3
 801241a:	461a      	mov	r2, r3
 801241c:	d32f      	bcc.n	801247e <quorem+0xf4>
 801241e:	613c      	str	r4, [r7, #16]
 8012420:	4638      	mov	r0, r7
 8012422:	f001 f8c9 	bl	80135b8 <__mcmp>
 8012426:	2800      	cmp	r0, #0
 8012428:	db25      	blt.n	8012476 <quorem+0xec>
 801242a:	4629      	mov	r1, r5
 801242c:	2000      	movs	r0, #0
 801242e:	f858 2b04 	ldr.w	r2, [r8], #4
 8012432:	f8d1 c000 	ldr.w	ip, [r1]
 8012436:	fa1f fe82 	uxth.w	lr, r2
 801243a:	fa1f f38c 	uxth.w	r3, ip
 801243e:	eba3 030e 	sub.w	r3, r3, lr
 8012442:	4403      	add	r3, r0
 8012444:	0c12      	lsrs	r2, r2, #16
 8012446:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801244a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801244e:	b29b      	uxth	r3, r3
 8012450:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012454:	45c1      	cmp	r9, r8
 8012456:	f841 3b04 	str.w	r3, [r1], #4
 801245a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801245e:	d2e6      	bcs.n	801242e <quorem+0xa4>
 8012460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012464:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012468:	b922      	cbnz	r2, 8012474 <quorem+0xea>
 801246a:	3b04      	subs	r3, #4
 801246c:	429d      	cmp	r5, r3
 801246e:	461a      	mov	r2, r3
 8012470:	d30b      	bcc.n	801248a <quorem+0x100>
 8012472:	613c      	str	r4, [r7, #16]
 8012474:	3601      	adds	r6, #1
 8012476:	4630      	mov	r0, r6
 8012478:	b003      	add	sp, #12
 801247a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801247e:	6812      	ldr	r2, [r2, #0]
 8012480:	3b04      	subs	r3, #4
 8012482:	2a00      	cmp	r2, #0
 8012484:	d1cb      	bne.n	801241e <quorem+0x94>
 8012486:	3c01      	subs	r4, #1
 8012488:	e7c6      	b.n	8012418 <quorem+0x8e>
 801248a:	6812      	ldr	r2, [r2, #0]
 801248c:	3b04      	subs	r3, #4
 801248e:	2a00      	cmp	r2, #0
 8012490:	d1ef      	bne.n	8012472 <quorem+0xe8>
 8012492:	3c01      	subs	r4, #1
 8012494:	e7ea      	b.n	801246c <quorem+0xe2>
 8012496:	2000      	movs	r0, #0
 8012498:	e7ee      	b.n	8012478 <quorem+0xee>
 801249a:	0000      	movs	r0, r0
 801249c:	0000      	movs	r0, r0
	...

080124a0 <_dtoa_r>:
 80124a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124a4:	69c7      	ldr	r7, [r0, #28]
 80124a6:	b097      	sub	sp, #92	@ 0x5c
 80124a8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80124ac:	ec55 4b10 	vmov	r4, r5, d0
 80124b0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80124b2:	9107      	str	r1, [sp, #28]
 80124b4:	4681      	mov	r9, r0
 80124b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80124b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80124ba:	b97f      	cbnz	r7, 80124dc <_dtoa_r+0x3c>
 80124bc:	2010      	movs	r0, #16
 80124be:	f7fe ffaf 	bl	8011420 <malloc>
 80124c2:	4602      	mov	r2, r0
 80124c4:	f8c9 001c 	str.w	r0, [r9, #28]
 80124c8:	b920      	cbnz	r0, 80124d4 <_dtoa_r+0x34>
 80124ca:	4ba9      	ldr	r3, [pc, #676]	@ (8012770 <_dtoa_r+0x2d0>)
 80124cc:	21ef      	movs	r1, #239	@ 0xef
 80124ce:	48a9      	ldr	r0, [pc, #676]	@ (8012774 <_dtoa_r+0x2d4>)
 80124d0:	f001 fbfa 	bl	8013cc8 <__assert_func>
 80124d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80124d8:	6007      	str	r7, [r0, #0]
 80124da:	60c7      	str	r7, [r0, #12]
 80124dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80124e0:	6819      	ldr	r1, [r3, #0]
 80124e2:	b159      	cbz	r1, 80124fc <_dtoa_r+0x5c>
 80124e4:	685a      	ldr	r2, [r3, #4]
 80124e6:	604a      	str	r2, [r1, #4]
 80124e8:	2301      	movs	r3, #1
 80124ea:	4093      	lsls	r3, r2
 80124ec:	608b      	str	r3, [r1, #8]
 80124ee:	4648      	mov	r0, r9
 80124f0:	f000 fe30 	bl	8013154 <_Bfree>
 80124f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80124f8:	2200      	movs	r2, #0
 80124fa:	601a      	str	r2, [r3, #0]
 80124fc:	1e2b      	subs	r3, r5, #0
 80124fe:	bfb9      	ittee	lt
 8012500:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012504:	9305      	strlt	r3, [sp, #20]
 8012506:	2300      	movge	r3, #0
 8012508:	6033      	strge	r3, [r6, #0]
 801250a:	9f05      	ldr	r7, [sp, #20]
 801250c:	4b9a      	ldr	r3, [pc, #616]	@ (8012778 <_dtoa_r+0x2d8>)
 801250e:	bfbc      	itt	lt
 8012510:	2201      	movlt	r2, #1
 8012512:	6032      	strlt	r2, [r6, #0]
 8012514:	43bb      	bics	r3, r7
 8012516:	d112      	bne.n	801253e <_dtoa_r+0x9e>
 8012518:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801251a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801251e:	6013      	str	r3, [r2, #0]
 8012520:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012524:	4323      	orrs	r3, r4
 8012526:	f000 855a 	beq.w	8012fde <_dtoa_r+0xb3e>
 801252a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801252c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801278c <_dtoa_r+0x2ec>
 8012530:	2b00      	cmp	r3, #0
 8012532:	f000 855c 	beq.w	8012fee <_dtoa_r+0xb4e>
 8012536:	f10a 0303 	add.w	r3, sl, #3
 801253a:	f000 bd56 	b.w	8012fea <_dtoa_r+0xb4a>
 801253e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012542:	2200      	movs	r2, #0
 8012544:	ec51 0b17 	vmov	r0, r1, d7
 8012548:	2300      	movs	r3, #0
 801254a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801254e:	f7ee fabb 	bl	8000ac8 <__aeabi_dcmpeq>
 8012552:	4680      	mov	r8, r0
 8012554:	b158      	cbz	r0, 801256e <_dtoa_r+0xce>
 8012556:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012558:	2301      	movs	r3, #1
 801255a:	6013      	str	r3, [r2, #0]
 801255c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801255e:	b113      	cbz	r3, 8012566 <_dtoa_r+0xc6>
 8012560:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012562:	4b86      	ldr	r3, [pc, #536]	@ (801277c <_dtoa_r+0x2dc>)
 8012564:	6013      	str	r3, [r2, #0]
 8012566:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8012790 <_dtoa_r+0x2f0>
 801256a:	f000 bd40 	b.w	8012fee <_dtoa_r+0xb4e>
 801256e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8012572:	aa14      	add	r2, sp, #80	@ 0x50
 8012574:	a915      	add	r1, sp, #84	@ 0x54
 8012576:	4648      	mov	r0, r9
 8012578:	f001 f8ce 	bl	8013718 <__d2b>
 801257c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012580:	9002      	str	r0, [sp, #8]
 8012582:	2e00      	cmp	r6, #0
 8012584:	d078      	beq.n	8012678 <_dtoa_r+0x1d8>
 8012586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012588:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801258c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012590:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8012594:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012598:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801259c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80125a0:	4619      	mov	r1, r3
 80125a2:	2200      	movs	r2, #0
 80125a4:	4b76      	ldr	r3, [pc, #472]	@ (8012780 <_dtoa_r+0x2e0>)
 80125a6:	f7ed fe6f 	bl	8000288 <__aeabi_dsub>
 80125aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8012758 <_dtoa_r+0x2b8>)
 80125ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b0:	f7ee f822 	bl	80005f8 <__aeabi_dmul>
 80125b4:	a36a      	add	r3, pc, #424	@ (adr r3, 8012760 <_dtoa_r+0x2c0>)
 80125b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ba:	f7ed fe67 	bl	800028c <__adddf3>
 80125be:	4604      	mov	r4, r0
 80125c0:	4630      	mov	r0, r6
 80125c2:	460d      	mov	r5, r1
 80125c4:	f7ed ffae 	bl	8000524 <__aeabi_i2d>
 80125c8:	a367      	add	r3, pc, #412	@ (adr r3, 8012768 <_dtoa_r+0x2c8>)
 80125ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ce:	f7ee f813 	bl	80005f8 <__aeabi_dmul>
 80125d2:	4602      	mov	r2, r0
 80125d4:	460b      	mov	r3, r1
 80125d6:	4620      	mov	r0, r4
 80125d8:	4629      	mov	r1, r5
 80125da:	f7ed fe57 	bl	800028c <__adddf3>
 80125de:	4604      	mov	r4, r0
 80125e0:	460d      	mov	r5, r1
 80125e2:	f7ee fab9 	bl	8000b58 <__aeabi_d2iz>
 80125e6:	2200      	movs	r2, #0
 80125e8:	4607      	mov	r7, r0
 80125ea:	2300      	movs	r3, #0
 80125ec:	4620      	mov	r0, r4
 80125ee:	4629      	mov	r1, r5
 80125f0:	f7ee fa74 	bl	8000adc <__aeabi_dcmplt>
 80125f4:	b140      	cbz	r0, 8012608 <_dtoa_r+0x168>
 80125f6:	4638      	mov	r0, r7
 80125f8:	f7ed ff94 	bl	8000524 <__aeabi_i2d>
 80125fc:	4622      	mov	r2, r4
 80125fe:	462b      	mov	r3, r5
 8012600:	f7ee fa62 	bl	8000ac8 <__aeabi_dcmpeq>
 8012604:	b900      	cbnz	r0, 8012608 <_dtoa_r+0x168>
 8012606:	3f01      	subs	r7, #1
 8012608:	2f16      	cmp	r7, #22
 801260a:	d852      	bhi.n	80126b2 <_dtoa_r+0x212>
 801260c:	4b5d      	ldr	r3, [pc, #372]	@ (8012784 <_dtoa_r+0x2e4>)
 801260e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012616:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801261a:	f7ee fa5f 	bl	8000adc <__aeabi_dcmplt>
 801261e:	2800      	cmp	r0, #0
 8012620:	d049      	beq.n	80126b6 <_dtoa_r+0x216>
 8012622:	3f01      	subs	r7, #1
 8012624:	2300      	movs	r3, #0
 8012626:	9310      	str	r3, [sp, #64]	@ 0x40
 8012628:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801262a:	1b9b      	subs	r3, r3, r6
 801262c:	1e5a      	subs	r2, r3, #1
 801262e:	bf45      	ittet	mi
 8012630:	f1c3 0301 	rsbmi	r3, r3, #1
 8012634:	9300      	strmi	r3, [sp, #0]
 8012636:	2300      	movpl	r3, #0
 8012638:	2300      	movmi	r3, #0
 801263a:	9206      	str	r2, [sp, #24]
 801263c:	bf54      	ite	pl
 801263e:	9300      	strpl	r3, [sp, #0]
 8012640:	9306      	strmi	r3, [sp, #24]
 8012642:	2f00      	cmp	r7, #0
 8012644:	db39      	blt.n	80126ba <_dtoa_r+0x21a>
 8012646:	9b06      	ldr	r3, [sp, #24]
 8012648:	970d      	str	r7, [sp, #52]	@ 0x34
 801264a:	443b      	add	r3, r7
 801264c:	9306      	str	r3, [sp, #24]
 801264e:	2300      	movs	r3, #0
 8012650:	9308      	str	r3, [sp, #32]
 8012652:	9b07      	ldr	r3, [sp, #28]
 8012654:	2b09      	cmp	r3, #9
 8012656:	d863      	bhi.n	8012720 <_dtoa_r+0x280>
 8012658:	2b05      	cmp	r3, #5
 801265a:	bfc4      	itt	gt
 801265c:	3b04      	subgt	r3, #4
 801265e:	9307      	strgt	r3, [sp, #28]
 8012660:	9b07      	ldr	r3, [sp, #28]
 8012662:	f1a3 0302 	sub.w	r3, r3, #2
 8012666:	bfcc      	ite	gt
 8012668:	2400      	movgt	r4, #0
 801266a:	2401      	movle	r4, #1
 801266c:	2b03      	cmp	r3, #3
 801266e:	d863      	bhi.n	8012738 <_dtoa_r+0x298>
 8012670:	e8df f003 	tbb	[pc, r3]
 8012674:	2b375452 	.word	0x2b375452
 8012678:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801267c:	441e      	add	r6, r3
 801267e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012682:	2b20      	cmp	r3, #32
 8012684:	bfc1      	itttt	gt
 8012686:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801268a:	409f      	lslgt	r7, r3
 801268c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012690:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012694:	bfd6      	itet	le
 8012696:	f1c3 0320 	rsble	r3, r3, #32
 801269a:	ea47 0003 	orrgt.w	r0, r7, r3
 801269e:	fa04 f003 	lslle.w	r0, r4, r3
 80126a2:	f7ed ff2f 	bl	8000504 <__aeabi_ui2d>
 80126a6:	2201      	movs	r2, #1
 80126a8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80126ac:	3e01      	subs	r6, #1
 80126ae:	9212      	str	r2, [sp, #72]	@ 0x48
 80126b0:	e776      	b.n	80125a0 <_dtoa_r+0x100>
 80126b2:	2301      	movs	r3, #1
 80126b4:	e7b7      	b.n	8012626 <_dtoa_r+0x186>
 80126b6:	9010      	str	r0, [sp, #64]	@ 0x40
 80126b8:	e7b6      	b.n	8012628 <_dtoa_r+0x188>
 80126ba:	9b00      	ldr	r3, [sp, #0]
 80126bc:	1bdb      	subs	r3, r3, r7
 80126be:	9300      	str	r3, [sp, #0]
 80126c0:	427b      	negs	r3, r7
 80126c2:	9308      	str	r3, [sp, #32]
 80126c4:	2300      	movs	r3, #0
 80126c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80126c8:	e7c3      	b.n	8012652 <_dtoa_r+0x1b2>
 80126ca:	2301      	movs	r3, #1
 80126cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80126ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80126d0:	eb07 0b03 	add.w	fp, r7, r3
 80126d4:	f10b 0301 	add.w	r3, fp, #1
 80126d8:	2b01      	cmp	r3, #1
 80126da:	9303      	str	r3, [sp, #12]
 80126dc:	bfb8      	it	lt
 80126de:	2301      	movlt	r3, #1
 80126e0:	e006      	b.n	80126f0 <_dtoa_r+0x250>
 80126e2:	2301      	movs	r3, #1
 80126e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80126e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	dd28      	ble.n	801273e <_dtoa_r+0x29e>
 80126ec:	469b      	mov	fp, r3
 80126ee:	9303      	str	r3, [sp, #12]
 80126f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80126f4:	2100      	movs	r1, #0
 80126f6:	2204      	movs	r2, #4
 80126f8:	f102 0514 	add.w	r5, r2, #20
 80126fc:	429d      	cmp	r5, r3
 80126fe:	d926      	bls.n	801274e <_dtoa_r+0x2ae>
 8012700:	6041      	str	r1, [r0, #4]
 8012702:	4648      	mov	r0, r9
 8012704:	f000 fce6 	bl	80130d4 <_Balloc>
 8012708:	4682      	mov	sl, r0
 801270a:	2800      	cmp	r0, #0
 801270c:	d142      	bne.n	8012794 <_dtoa_r+0x2f4>
 801270e:	4b1e      	ldr	r3, [pc, #120]	@ (8012788 <_dtoa_r+0x2e8>)
 8012710:	4602      	mov	r2, r0
 8012712:	f240 11af 	movw	r1, #431	@ 0x1af
 8012716:	e6da      	b.n	80124ce <_dtoa_r+0x2e>
 8012718:	2300      	movs	r3, #0
 801271a:	e7e3      	b.n	80126e4 <_dtoa_r+0x244>
 801271c:	2300      	movs	r3, #0
 801271e:	e7d5      	b.n	80126cc <_dtoa_r+0x22c>
 8012720:	2401      	movs	r4, #1
 8012722:	2300      	movs	r3, #0
 8012724:	9307      	str	r3, [sp, #28]
 8012726:	9409      	str	r4, [sp, #36]	@ 0x24
 8012728:	f04f 3bff 	mov.w	fp, #4294967295
 801272c:	2200      	movs	r2, #0
 801272e:	f8cd b00c 	str.w	fp, [sp, #12]
 8012732:	2312      	movs	r3, #18
 8012734:	920c      	str	r2, [sp, #48]	@ 0x30
 8012736:	e7db      	b.n	80126f0 <_dtoa_r+0x250>
 8012738:	2301      	movs	r3, #1
 801273a:	9309      	str	r3, [sp, #36]	@ 0x24
 801273c:	e7f4      	b.n	8012728 <_dtoa_r+0x288>
 801273e:	f04f 0b01 	mov.w	fp, #1
 8012742:	f8cd b00c 	str.w	fp, [sp, #12]
 8012746:	465b      	mov	r3, fp
 8012748:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801274c:	e7d0      	b.n	80126f0 <_dtoa_r+0x250>
 801274e:	3101      	adds	r1, #1
 8012750:	0052      	lsls	r2, r2, #1
 8012752:	e7d1      	b.n	80126f8 <_dtoa_r+0x258>
 8012754:	f3af 8000 	nop.w
 8012758:	636f4361 	.word	0x636f4361
 801275c:	3fd287a7 	.word	0x3fd287a7
 8012760:	8b60c8b3 	.word	0x8b60c8b3
 8012764:	3fc68a28 	.word	0x3fc68a28
 8012768:	509f79fb 	.word	0x509f79fb
 801276c:	3fd34413 	.word	0x3fd34413
 8012770:	08015eb1 	.word	0x08015eb1
 8012774:	08015ec8 	.word	0x08015ec8
 8012778:	7ff00000 	.word	0x7ff00000
 801277c:	08015e81 	.word	0x08015e81
 8012780:	3ff80000 	.word	0x3ff80000
 8012784:	08016018 	.word	0x08016018
 8012788:	08015f20 	.word	0x08015f20
 801278c:	08015ead 	.word	0x08015ead
 8012790:	08015e80 	.word	0x08015e80
 8012794:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012798:	6018      	str	r0, [r3, #0]
 801279a:	9b03      	ldr	r3, [sp, #12]
 801279c:	2b0e      	cmp	r3, #14
 801279e:	f200 80a1 	bhi.w	80128e4 <_dtoa_r+0x444>
 80127a2:	2c00      	cmp	r4, #0
 80127a4:	f000 809e 	beq.w	80128e4 <_dtoa_r+0x444>
 80127a8:	2f00      	cmp	r7, #0
 80127aa:	dd33      	ble.n	8012814 <_dtoa_r+0x374>
 80127ac:	4b9c      	ldr	r3, [pc, #624]	@ (8012a20 <_dtoa_r+0x580>)
 80127ae:	f007 020f 	and.w	r2, r7, #15
 80127b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80127b6:	ed93 7b00 	vldr	d7, [r3]
 80127ba:	05f8      	lsls	r0, r7, #23
 80127bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80127c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80127c4:	d516      	bpl.n	80127f4 <_dtoa_r+0x354>
 80127c6:	4b97      	ldr	r3, [pc, #604]	@ (8012a24 <_dtoa_r+0x584>)
 80127c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80127cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80127d0:	f7ee f83c 	bl	800084c <__aeabi_ddiv>
 80127d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80127d8:	f004 040f 	and.w	r4, r4, #15
 80127dc:	2603      	movs	r6, #3
 80127de:	4d91      	ldr	r5, [pc, #580]	@ (8012a24 <_dtoa_r+0x584>)
 80127e0:	b954      	cbnz	r4, 80127f8 <_dtoa_r+0x358>
 80127e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80127e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80127ea:	f7ee f82f 	bl	800084c <__aeabi_ddiv>
 80127ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80127f2:	e028      	b.n	8012846 <_dtoa_r+0x3a6>
 80127f4:	2602      	movs	r6, #2
 80127f6:	e7f2      	b.n	80127de <_dtoa_r+0x33e>
 80127f8:	07e1      	lsls	r1, r4, #31
 80127fa:	d508      	bpl.n	801280e <_dtoa_r+0x36e>
 80127fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012800:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012804:	f7ed fef8 	bl	80005f8 <__aeabi_dmul>
 8012808:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801280c:	3601      	adds	r6, #1
 801280e:	1064      	asrs	r4, r4, #1
 8012810:	3508      	adds	r5, #8
 8012812:	e7e5      	b.n	80127e0 <_dtoa_r+0x340>
 8012814:	f000 80af 	beq.w	8012976 <_dtoa_r+0x4d6>
 8012818:	427c      	negs	r4, r7
 801281a:	4b81      	ldr	r3, [pc, #516]	@ (8012a20 <_dtoa_r+0x580>)
 801281c:	4d81      	ldr	r5, [pc, #516]	@ (8012a24 <_dtoa_r+0x584>)
 801281e:	f004 020f 	and.w	r2, r4, #15
 8012822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801282a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801282e:	f7ed fee3 	bl	80005f8 <__aeabi_dmul>
 8012832:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012836:	1124      	asrs	r4, r4, #4
 8012838:	2300      	movs	r3, #0
 801283a:	2602      	movs	r6, #2
 801283c:	2c00      	cmp	r4, #0
 801283e:	f040 808f 	bne.w	8012960 <_dtoa_r+0x4c0>
 8012842:	2b00      	cmp	r3, #0
 8012844:	d1d3      	bne.n	80127ee <_dtoa_r+0x34e>
 8012846:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012848:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801284c:	2b00      	cmp	r3, #0
 801284e:	f000 8094 	beq.w	801297a <_dtoa_r+0x4da>
 8012852:	4b75      	ldr	r3, [pc, #468]	@ (8012a28 <_dtoa_r+0x588>)
 8012854:	2200      	movs	r2, #0
 8012856:	4620      	mov	r0, r4
 8012858:	4629      	mov	r1, r5
 801285a:	f7ee f93f 	bl	8000adc <__aeabi_dcmplt>
 801285e:	2800      	cmp	r0, #0
 8012860:	f000 808b 	beq.w	801297a <_dtoa_r+0x4da>
 8012864:	9b03      	ldr	r3, [sp, #12]
 8012866:	2b00      	cmp	r3, #0
 8012868:	f000 8087 	beq.w	801297a <_dtoa_r+0x4da>
 801286c:	f1bb 0f00 	cmp.w	fp, #0
 8012870:	dd34      	ble.n	80128dc <_dtoa_r+0x43c>
 8012872:	4620      	mov	r0, r4
 8012874:	4b6d      	ldr	r3, [pc, #436]	@ (8012a2c <_dtoa_r+0x58c>)
 8012876:	2200      	movs	r2, #0
 8012878:	4629      	mov	r1, r5
 801287a:	f7ed febd 	bl	80005f8 <__aeabi_dmul>
 801287e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012882:	f107 38ff 	add.w	r8, r7, #4294967295
 8012886:	3601      	adds	r6, #1
 8012888:	465c      	mov	r4, fp
 801288a:	4630      	mov	r0, r6
 801288c:	f7ed fe4a 	bl	8000524 <__aeabi_i2d>
 8012890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012894:	f7ed feb0 	bl	80005f8 <__aeabi_dmul>
 8012898:	4b65      	ldr	r3, [pc, #404]	@ (8012a30 <_dtoa_r+0x590>)
 801289a:	2200      	movs	r2, #0
 801289c:	f7ed fcf6 	bl	800028c <__adddf3>
 80128a0:	4605      	mov	r5, r0
 80128a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80128a6:	2c00      	cmp	r4, #0
 80128a8:	d16a      	bne.n	8012980 <_dtoa_r+0x4e0>
 80128aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80128ae:	4b61      	ldr	r3, [pc, #388]	@ (8012a34 <_dtoa_r+0x594>)
 80128b0:	2200      	movs	r2, #0
 80128b2:	f7ed fce9 	bl	8000288 <__aeabi_dsub>
 80128b6:	4602      	mov	r2, r0
 80128b8:	460b      	mov	r3, r1
 80128ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80128be:	462a      	mov	r2, r5
 80128c0:	4633      	mov	r3, r6
 80128c2:	f7ee f929 	bl	8000b18 <__aeabi_dcmpgt>
 80128c6:	2800      	cmp	r0, #0
 80128c8:	f040 8298 	bne.w	8012dfc <_dtoa_r+0x95c>
 80128cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80128d0:	462a      	mov	r2, r5
 80128d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80128d6:	f7ee f901 	bl	8000adc <__aeabi_dcmplt>
 80128da:	bb38      	cbnz	r0, 801292c <_dtoa_r+0x48c>
 80128dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80128e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80128e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	f2c0 8157 	blt.w	8012b9a <_dtoa_r+0x6fa>
 80128ec:	2f0e      	cmp	r7, #14
 80128ee:	f300 8154 	bgt.w	8012b9a <_dtoa_r+0x6fa>
 80128f2:	4b4b      	ldr	r3, [pc, #300]	@ (8012a20 <_dtoa_r+0x580>)
 80128f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80128f8:	ed93 7b00 	vldr	d7, [r3]
 80128fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80128fe:	2b00      	cmp	r3, #0
 8012900:	ed8d 7b00 	vstr	d7, [sp]
 8012904:	f280 80e5 	bge.w	8012ad2 <_dtoa_r+0x632>
 8012908:	9b03      	ldr	r3, [sp, #12]
 801290a:	2b00      	cmp	r3, #0
 801290c:	f300 80e1 	bgt.w	8012ad2 <_dtoa_r+0x632>
 8012910:	d10c      	bne.n	801292c <_dtoa_r+0x48c>
 8012912:	4b48      	ldr	r3, [pc, #288]	@ (8012a34 <_dtoa_r+0x594>)
 8012914:	2200      	movs	r2, #0
 8012916:	ec51 0b17 	vmov	r0, r1, d7
 801291a:	f7ed fe6d 	bl	80005f8 <__aeabi_dmul>
 801291e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012922:	f7ee f8ef 	bl	8000b04 <__aeabi_dcmpge>
 8012926:	2800      	cmp	r0, #0
 8012928:	f000 8266 	beq.w	8012df8 <_dtoa_r+0x958>
 801292c:	2400      	movs	r4, #0
 801292e:	4625      	mov	r5, r4
 8012930:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012932:	4656      	mov	r6, sl
 8012934:	ea6f 0803 	mvn.w	r8, r3
 8012938:	2700      	movs	r7, #0
 801293a:	4621      	mov	r1, r4
 801293c:	4648      	mov	r0, r9
 801293e:	f000 fc09 	bl	8013154 <_Bfree>
 8012942:	2d00      	cmp	r5, #0
 8012944:	f000 80bd 	beq.w	8012ac2 <_dtoa_r+0x622>
 8012948:	b12f      	cbz	r7, 8012956 <_dtoa_r+0x4b6>
 801294a:	42af      	cmp	r7, r5
 801294c:	d003      	beq.n	8012956 <_dtoa_r+0x4b6>
 801294e:	4639      	mov	r1, r7
 8012950:	4648      	mov	r0, r9
 8012952:	f000 fbff 	bl	8013154 <_Bfree>
 8012956:	4629      	mov	r1, r5
 8012958:	4648      	mov	r0, r9
 801295a:	f000 fbfb 	bl	8013154 <_Bfree>
 801295e:	e0b0      	b.n	8012ac2 <_dtoa_r+0x622>
 8012960:	07e2      	lsls	r2, r4, #31
 8012962:	d505      	bpl.n	8012970 <_dtoa_r+0x4d0>
 8012964:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012968:	f7ed fe46 	bl	80005f8 <__aeabi_dmul>
 801296c:	3601      	adds	r6, #1
 801296e:	2301      	movs	r3, #1
 8012970:	1064      	asrs	r4, r4, #1
 8012972:	3508      	adds	r5, #8
 8012974:	e762      	b.n	801283c <_dtoa_r+0x39c>
 8012976:	2602      	movs	r6, #2
 8012978:	e765      	b.n	8012846 <_dtoa_r+0x3a6>
 801297a:	9c03      	ldr	r4, [sp, #12]
 801297c:	46b8      	mov	r8, r7
 801297e:	e784      	b.n	801288a <_dtoa_r+0x3ea>
 8012980:	4b27      	ldr	r3, [pc, #156]	@ (8012a20 <_dtoa_r+0x580>)
 8012982:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012984:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012988:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801298c:	4454      	add	r4, sl
 801298e:	2900      	cmp	r1, #0
 8012990:	d054      	beq.n	8012a3c <_dtoa_r+0x59c>
 8012992:	4929      	ldr	r1, [pc, #164]	@ (8012a38 <_dtoa_r+0x598>)
 8012994:	2000      	movs	r0, #0
 8012996:	f7ed ff59 	bl	800084c <__aeabi_ddiv>
 801299a:	4633      	mov	r3, r6
 801299c:	462a      	mov	r2, r5
 801299e:	f7ed fc73 	bl	8000288 <__aeabi_dsub>
 80129a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80129a6:	4656      	mov	r6, sl
 80129a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80129ac:	f7ee f8d4 	bl	8000b58 <__aeabi_d2iz>
 80129b0:	4605      	mov	r5, r0
 80129b2:	f7ed fdb7 	bl	8000524 <__aeabi_i2d>
 80129b6:	4602      	mov	r2, r0
 80129b8:	460b      	mov	r3, r1
 80129ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80129be:	f7ed fc63 	bl	8000288 <__aeabi_dsub>
 80129c2:	3530      	adds	r5, #48	@ 0x30
 80129c4:	4602      	mov	r2, r0
 80129c6:	460b      	mov	r3, r1
 80129c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80129cc:	f806 5b01 	strb.w	r5, [r6], #1
 80129d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80129d4:	f7ee f882 	bl	8000adc <__aeabi_dcmplt>
 80129d8:	2800      	cmp	r0, #0
 80129da:	d172      	bne.n	8012ac2 <_dtoa_r+0x622>
 80129dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80129e0:	4911      	ldr	r1, [pc, #68]	@ (8012a28 <_dtoa_r+0x588>)
 80129e2:	2000      	movs	r0, #0
 80129e4:	f7ed fc50 	bl	8000288 <__aeabi_dsub>
 80129e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80129ec:	f7ee f876 	bl	8000adc <__aeabi_dcmplt>
 80129f0:	2800      	cmp	r0, #0
 80129f2:	f040 80b4 	bne.w	8012b5e <_dtoa_r+0x6be>
 80129f6:	42a6      	cmp	r6, r4
 80129f8:	f43f af70 	beq.w	80128dc <_dtoa_r+0x43c>
 80129fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012a00:	4b0a      	ldr	r3, [pc, #40]	@ (8012a2c <_dtoa_r+0x58c>)
 8012a02:	2200      	movs	r2, #0
 8012a04:	f7ed fdf8 	bl	80005f8 <__aeabi_dmul>
 8012a08:	4b08      	ldr	r3, [pc, #32]	@ (8012a2c <_dtoa_r+0x58c>)
 8012a0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012a0e:	2200      	movs	r2, #0
 8012a10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a14:	f7ed fdf0 	bl	80005f8 <__aeabi_dmul>
 8012a18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a1c:	e7c4      	b.n	80129a8 <_dtoa_r+0x508>
 8012a1e:	bf00      	nop
 8012a20:	08016018 	.word	0x08016018
 8012a24:	08015ff0 	.word	0x08015ff0
 8012a28:	3ff00000 	.word	0x3ff00000
 8012a2c:	40240000 	.word	0x40240000
 8012a30:	401c0000 	.word	0x401c0000
 8012a34:	40140000 	.word	0x40140000
 8012a38:	3fe00000 	.word	0x3fe00000
 8012a3c:	4631      	mov	r1, r6
 8012a3e:	4628      	mov	r0, r5
 8012a40:	f7ed fdda 	bl	80005f8 <__aeabi_dmul>
 8012a44:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012a48:	9413      	str	r4, [sp, #76]	@ 0x4c
 8012a4a:	4656      	mov	r6, sl
 8012a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a50:	f7ee f882 	bl	8000b58 <__aeabi_d2iz>
 8012a54:	4605      	mov	r5, r0
 8012a56:	f7ed fd65 	bl	8000524 <__aeabi_i2d>
 8012a5a:	4602      	mov	r2, r0
 8012a5c:	460b      	mov	r3, r1
 8012a5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a62:	f7ed fc11 	bl	8000288 <__aeabi_dsub>
 8012a66:	3530      	adds	r5, #48	@ 0x30
 8012a68:	f806 5b01 	strb.w	r5, [r6], #1
 8012a6c:	4602      	mov	r2, r0
 8012a6e:	460b      	mov	r3, r1
 8012a70:	42a6      	cmp	r6, r4
 8012a72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012a76:	f04f 0200 	mov.w	r2, #0
 8012a7a:	d124      	bne.n	8012ac6 <_dtoa_r+0x626>
 8012a7c:	4baf      	ldr	r3, [pc, #700]	@ (8012d3c <_dtoa_r+0x89c>)
 8012a7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012a82:	f7ed fc03 	bl	800028c <__adddf3>
 8012a86:	4602      	mov	r2, r0
 8012a88:	460b      	mov	r3, r1
 8012a8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a8e:	f7ee f843 	bl	8000b18 <__aeabi_dcmpgt>
 8012a92:	2800      	cmp	r0, #0
 8012a94:	d163      	bne.n	8012b5e <_dtoa_r+0x6be>
 8012a96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012a9a:	49a8      	ldr	r1, [pc, #672]	@ (8012d3c <_dtoa_r+0x89c>)
 8012a9c:	2000      	movs	r0, #0
 8012a9e:	f7ed fbf3 	bl	8000288 <__aeabi_dsub>
 8012aa2:	4602      	mov	r2, r0
 8012aa4:	460b      	mov	r3, r1
 8012aa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012aaa:	f7ee f817 	bl	8000adc <__aeabi_dcmplt>
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	f43f af14 	beq.w	80128dc <_dtoa_r+0x43c>
 8012ab4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8012ab6:	1e73      	subs	r3, r6, #1
 8012ab8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012aba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012abe:	2b30      	cmp	r3, #48	@ 0x30
 8012ac0:	d0f8      	beq.n	8012ab4 <_dtoa_r+0x614>
 8012ac2:	4647      	mov	r7, r8
 8012ac4:	e03b      	b.n	8012b3e <_dtoa_r+0x69e>
 8012ac6:	4b9e      	ldr	r3, [pc, #632]	@ (8012d40 <_dtoa_r+0x8a0>)
 8012ac8:	f7ed fd96 	bl	80005f8 <__aeabi_dmul>
 8012acc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012ad0:	e7bc      	b.n	8012a4c <_dtoa_r+0x5ac>
 8012ad2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8012ad6:	4656      	mov	r6, sl
 8012ad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012adc:	4620      	mov	r0, r4
 8012ade:	4629      	mov	r1, r5
 8012ae0:	f7ed feb4 	bl	800084c <__aeabi_ddiv>
 8012ae4:	f7ee f838 	bl	8000b58 <__aeabi_d2iz>
 8012ae8:	4680      	mov	r8, r0
 8012aea:	f7ed fd1b 	bl	8000524 <__aeabi_i2d>
 8012aee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012af2:	f7ed fd81 	bl	80005f8 <__aeabi_dmul>
 8012af6:	4602      	mov	r2, r0
 8012af8:	460b      	mov	r3, r1
 8012afa:	4620      	mov	r0, r4
 8012afc:	4629      	mov	r1, r5
 8012afe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012b02:	f7ed fbc1 	bl	8000288 <__aeabi_dsub>
 8012b06:	f806 4b01 	strb.w	r4, [r6], #1
 8012b0a:	9d03      	ldr	r5, [sp, #12]
 8012b0c:	eba6 040a 	sub.w	r4, r6, sl
 8012b10:	42a5      	cmp	r5, r4
 8012b12:	4602      	mov	r2, r0
 8012b14:	460b      	mov	r3, r1
 8012b16:	d133      	bne.n	8012b80 <_dtoa_r+0x6e0>
 8012b18:	f7ed fbb8 	bl	800028c <__adddf3>
 8012b1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b20:	4604      	mov	r4, r0
 8012b22:	460d      	mov	r5, r1
 8012b24:	f7ed fff8 	bl	8000b18 <__aeabi_dcmpgt>
 8012b28:	b9c0      	cbnz	r0, 8012b5c <_dtoa_r+0x6bc>
 8012b2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b2e:	4620      	mov	r0, r4
 8012b30:	4629      	mov	r1, r5
 8012b32:	f7ed ffc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b36:	b110      	cbz	r0, 8012b3e <_dtoa_r+0x69e>
 8012b38:	f018 0f01 	tst.w	r8, #1
 8012b3c:	d10e      	bne.n	8012b5c <_dtoa_r+0x6bc>
 8012b3e:	9902      	ldr	r1, [sp, #8]
 8012b40:	4648      	mov	r0, r9
 8012b42:	f000 fb07 	bl	8013154 <_Bfree>
 8012b46:	2300      	movs	r3, #0
 8012b48:	7033      	strb	r3, [r6, #0]
 8012b4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012b4c:	3701      	adds	r7, #1
 8012b4e:	601f      	str	r7, [r3, #0]
 8012b50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	f000 824b 	beq.w	8012fee <_dtoa_r+0xb4e>
 8012b58:	601e      	str	r6, [r3, #0]
 8012b5a:	e248      	b.n	8012fee <_dtoa_r+0xb4e>
 8012b5c:	46b8      	mov	r8, r7
 8012b5e:	4633      	mov	r3, r6
 8012b60:	461e      	mov	r6, r3
 8012b62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b66:	2a39      	cmp	r2, #57	@ 0x39
 8012b68:	d106      	bne.n	8012b78 <_dtoa_r+0x6d8>
 8012b6a:	459a      	cmp	sl, r3
 8012b6c:	d1f8      	bne.n	8012b60 <_dtoa_r+0x6c0>
 8012b6e:	2230      	movs	r2, #48	@ 0x30
 8012b70:	f108 0801 	add.w	r8, r8, #1
 8012b74:	f88a 2000 	strb.w	r2, [sl]
 8012b78:	781a      	ldrb	r2, [r3, #0]
 8012b7a:	3201      	adds	r2, #1
 8012b7c:	701a      	strb	r2, [r3, #0]
 8012b7e:	e7a0      	b.n	8012ac2 <_dtoa_r+0x622>
 8012b80:	4b6f      	ldr	r3, [pc, #444]	@ (8012d40 <_dtoa_r+0x8a0>)
 8012b82:	2200      	movs	r2, #0
 8012b84:	f7ed fd38 	bl	80005f8 <__aeabi_dmul>
 8012b88:	2200      	movs	r2, #0
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	4604      	mov	r4, r0
 8012b8e:	460d      	mov	r5, r1
 8012b90:	f7ed ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b94:	2800      	cmp	r0, #0
 8012b96:	d09f      	beq.n	8012ad8 <_dtoa_r+0x638>
 8012b98:	e7d1      	b.n	8012b3e <_dtoa_r+0x69e>
 8012b9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012b9c:	2a00      	cmp	r2, #0
 8012b9e:	f000 80ea 	beq.w	8012d76 <_dtoa_r+0x8d6>
 8012ba2:	9a07      	ldr	r2, [sp, #28]
 8012ba4:	2a01      	cmp	r2, #1
 8012ba6:	f300 80cd 	bgt.w	8012d44 <_dtoa_r+0x8a4>
 8012baa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012bac:	2a00      	cmp	r2, #0
 8012bae:	f000 80c1 	beq.w	8012d34 <_dtoa_r+0x894>
 8012bb2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012bb6:	9c08      	ldr	r4, [sp, #32]
 8012bb8:	9e00      	ldr	r6, [sp, #0]
 8012bba:	9a00      	ldr	r2, [sp, #0]
 8012bbc:	441a      	add	r2, r3
 8012bbe:	9200      	str	r2, [sp, #0]
 8012bc0:	9a06      	ldr	r2, [sp, #24]
 8012bc2:	2101      	movs	r1, #1
 8012bc4:	441a      	add	r2, r3
 8012bc6:	4648      	mov	r0, r9
 8012bc8:	9206      	str	r2, [sp, #24]
 8012bca:	f000 fb77 	bl	80132bc <__i2b>
 8012bce:	4605      	mov	r5, r0
 8012bd0:	b166      	cbz	r6, 8012bec <_dtoa_r+0x74c>
 8012bd2:	9b06      	ldr	r3, [sp, #24]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	dd09      	ble.n	8012bec <_dtoa_r+0x74c>
 8012bd8:	42b3      	cmp	r3, r6
 8012bda:	9a00      	ldr	r2, [sp, #0]
 8012bdc:	bfa8      	it	ge
 8012bde:	4633      	movge	r3, r6
 8012be0:	1ad2      	subs	r2, r2, r3
 8012be2:	9200      	str	r2, [sp, #0]
 8012be4:	9a06      	ldr	r2, [sp, #24]
 8012be6:	1af6      	subs	r6, r6, r3
 8012be8:	1ad3      	subs	r3, r2, r3
 8012bea:	9306      	str	r3, [sp, #24]
 8012bec:	9b08      	ldr	r3, [sp, #32]
 8012bee:	b30b      	cbz	r3, 8012c34 <_dtoa_r+0x794>
 8012bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	f000 80c6 	beq.w	8012d84 <_dtoa_r+0x8e4>
 8012bf8:	2c00      	cmp	r4, #0
 8012bfa:	f000 80c0 	beq.w	8012d7e <_dtoa_r+0x8de>
 8012bfe:	4629      	mov	r1, r5
 8012c00:	4622      	mov	r2, r4
 8012c02:	4648      	mov	r0, r9
 8012c04:	f000 fc12 	bl	801342c <__pow5mult>
 8012c08:	9a02      	ldr	r2, [sp, #8]
 8012c0a:	4601      	mov	r1, r0
 8012c0c:	4605      	mov	r5, r0
 8012c0e:	4648      	mov	r0, r9
 8012c10:	f000 fb6a 	bl	80132e8 <__multiply>
 8012c14:	9902      	ldr	r1, [sp, #8]
 8012c16:	4680      	mov	r8, r0
 8012c18:	4648      	mov	r0, r9
 8012c1a:	f000 fa9b 	bl	8013154 <_Bfree>
 8012c1e:	9b08      	ldr	r3, [sp, #32]
 8012c20:	1b1b      	subs	r3, r3, r4
 8012c22:	9308      	str	r3, [sp, #32]
 8012c24:	f000 80b1 	beq.w	8012d8a <_dtoa_r+0x8ea>
 8012c28:	9a08      	ldr	r2, [sp, #32]
 8012c2a:	4641      	mov	r1, r8
 8012c2c:	4648      	mov	r0, r9
 8012c2e:	f000 fbfd 	bl	801342c <__pow5mult>
 8012c32:	9002      	str	r0, [sp, #8]
 8012c34:	2101      	movs	r1, #1
 8012c36:	4648      	mov	r0, r9
 8012c38:	f000 fb40 	bl	80132bc <__i2b>
 8012c3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012c3e:	4604      	mov	r4, r0
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	f000 81d8 	beq.w	8012ff6 <_dtoa_r+0xb56>
 8012c46:	461a      	mov	r2, r3
 8012c48:	4601      	mov	r1, r0
 8012c4a:	4648      	mov	r0, r9
 8012c4c:	f000 fbee 	bl	801342c <__pow5mult>
 8012c50:	9b07      	ldr	r3, [sp, #28]
 8012c52:	2b01      	cmp	r3, #1
 8012c54:	4604      	mov	r4, r0
 8012c56:	f300 809f 	bgt.w	8012d98 <_dtoa_r+0x8f8>
 8012c5a:	9b04      	ldr	r3, [sp, #16]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	f040 8097 	bne.w	8012d90 <_dtoa_r+0x8f0>
 8012c62:	9b05      	ldr	r3, [sp, #20]
 8012c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	f040 8093 	bne.w	8012d94 <_dtoa_r+0x8f4>
 8012c6e:	9b05      	ldr	r3, [sp, #20]
 8012c70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012c74:	0d1b      	lsrs	r3, r3, #20
 8012c76:	051b      	lsls	r3, r3, #20
 8012c78:	b133      	cbz	r3, 8012c88 <_dtoa_r+0x7e8>
 8012c7a:	9b00      	ldr	r3, [sp, #0]
 8012c7c:	3301      	adds	r3, #1
 8012c7e:	9300      	str	r3, [sp, #0]
 8012c80:	9b06      	ldr	r3, [sp, #24]
 8012c82:	3301      	adds	r3, #1
 8012c84:	9306      	str	r3, [sp, #24]
 8012c86:	2301      	movs	r3, #1
 8012c88:	9308      	str	r3, [sp, #32]
 8012c8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	f000 81b8 	beq.w	8013002 <_dtoa_r+0xb62>
 8012c92:	6923      	ldr	r3, [r4, #16]
 8012c94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012c98:	6918      	ldr	r0, [r3, #16]
 8012c9a:	f000 fac3 	bl	8013224 <__hi0bits>
 8012c9e:	f1c0 0020 	rsb	r0, r0, #32
 8012ca2:	9b06      	ldr	r3, [sp, #24]
 8012ca4:	4418      	add	r0, r3
 8012ca6:	f010 001f 	ands.w	r0, r0, #31
 8012caa:	f000 8082 	beq.w	8012db2 <_dtoa_r+0x912>
 8012cae:	f1c0 0320 	rsb	r3, r0, #32
 8012cb2:	2b04      	cmp	r3, #4
 8012cb4:	dd73      	ble.n	8012d9e <_dtoa_r+0x8fe>
 8012cb6:	9b00      	ldr	r3, [sp, #0]
 8012cb8:	f1c0 001c 	rsb	r0, r0, #28
 8012cbc:	4403      	add	r3, r0
 8012cbe:	9300      	str	r3, [sp, #0]
 8012cc0:	9b06      	ldr	r3, [sp, #24]
 8012cc2:	4403      	add	r3, r0
 8012cc4:	4406      	add	r6, r0
 8012cc6:	9306      	str	r3, [sp, #24]
 8012cc8:	9b00      	ldr	r3, [sp, #0]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	dd05      	ble.n	8012cda <_dtoa_r+0x83a>
 8012cce:	9902      	ldr	r1, [sp, #8]
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	4648      	mov	r0, r9
 8012cd4:	f000 fc04 	bl	80134e0 <__lshift>
 8012cd8:	9002      	str	r0, [sp, #8]
 8012cda:	9b06      	ldr	r3, [sp, #24]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	dd05      	ble.n	8012cec <_dtoa_r+0x84c>
 8012ce0:	4621      	mov	r1, r4
 8012ce2:	461a      	mov	r2, r3
 8012ce4:	4648      	mov	r0, r9
 8012ce6:	f000 fbfb 	bl	80134e0 <__lshift>
 8012cea:	4604      	mov	r4, r0
 8012cec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d061      	beq.n	8012db6 <_dtoa_r+0x916>
 8012cf2:	9802      	ldr	r0, [sp, #8]
 8012cf4:	4621      	mov	r1, r4
 8012cf6:	f000 fc5f 	bl	80135b8 <__mcmp>
 8012cfa:	2800      	cmp	r0, #0
 8012cfc:	da5b      	bge.n	8012db6 <_dtoa_r+0x916>
 8012cfe:	2300      	movs	r3, #0
 8012d00:	9902      	ldr	r1, [sp, #8]
 8012d02:	220a      	movs	r2, #10
 8012d04:	4648      	mov	r0, r9
 8012d06:	f000 fa47 	bl	8013198 <__multadd>
 8012d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d0c:	9002      	str	r0, [sp, #8]
 8012d0e:	f107 38ff 	add.w	r8, r7, #4294967295
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	f000 8177 	beq.w	8013006 <_dtoa_r+0xb66>
 8012d18:	4629      	mov	r1, r5
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	220a      	movs	r2, #10
 8012d1e:	4648      	mov	r0, r9
 8012d20:	f000 fa3a 	bl	8013198 <__multadd>
 8012d24:	f1bb 0f00 	cmp.w	fp, #0
 8012d28:	4605      	mov	r5, r0
 8012d2a:	dc6f      	bgt.n	8012e0c <_dtoa_r+0x96c>
 8012d2c:	9b07      	ldr	r3, [sp, #28]
 8012d2e:	2b02      	cmp	r3, #2
 8012d30:	dc49      	bgt.n	8012dc6 <_dtoa_r+0x926>
 8012d32:	e06b      	b.n	8012e0c <_dtoa_r+0x96c>
 8012d34:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012d36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012d3a:	e73c      	b.n	8012bb6 <_dtoa_r+0x716>
 8012d3c:	3fe00000 	.word	0x3fe00000
 8012d40:	40240000 	.word	0x40240000
 8012d44:	9b03      	ldr	r3, [sp, #12]
 8012d46:	1e5c      	subs	r4, r3, #1
 8012d48:	9b08      	ldr	r3, [sp, #32]
 8012d4a:	42a3      	cmp	r3, r4
 8012d4c:	db09      	blt.n	8012d62 <_dtoa_r+0x8c2>
 8012d4e:	1b1c      	subs	r4, r3, r4
 8012d50:	9b03      	ldr	r3, [sp, #12]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	f6bf af30 	bge.w	8012bb8 <_dtoa_r+0x718>
 8012d58:	9b00      	ldr	r3, [sp, #0]
 8012d5a:	9a03      	ldr	r2, [sp, #12]
 8012d5c:	1a9e      	subs	r6, r3, r2
 8012d5e:	2300      	movs	r3, #0
 8012d60:	e72b      	b.n	8012bba <_dtoa_r+0x71a>
 8012d62:	9b08      	ldr	r3, [sp, #32]
 8012d64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012d66:	9408      	str	r4, [sp, #32]
 8012d68:	1ae3      	subs	r3, r4, r3
 8012d6a:	441a      	add	r2, r3
 8012d6c:	9e00      	ldr	r6, [sp, #0]
 8012d6e:	9b03      	ldr	r3, [sp, #12]
 8012d70:	920d      	str	r2, [sp, #52]	@ 0x34
 8012d72:	2400      	movs	r4, #0
 8012d74:	e721      	b.n	8012bba <_dtoa_r+0x71a>
 8012d76:	9c08      	ldr	r4, [sp, #32]
 8012d78:	9e00      	ldr	r6, [sp, #0]
 8012d7a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8012d7c:	e728      	b.n	8012bd0 <_dtoa_r+0x730>
 8012d7e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8012d82:	e751      	b.n	8012c28 <_dtoa_r+0x788>
 8012d84:	9a08      	ldr	r2, [sp, #32]
 8012d86:	9902      	ldr	r1, [sp, #8]
 8012d88:	e750      	b.n	8012c2c <_dtoa_r+0x78c>
 8012d8a:	f8cd 8008 	str.w	r8, [sp, #8]
 8012d8e:	e751      	b.n	8012c34 <_dtoa_r+0x794>
 8012d90:	2300      	movs	r3, #0
 8012d92:	e779      	b.n	8012c88 <_dtoa_r+0x7e8>
 8012d94:	9b04      	ldr	r3, [sp, #16]
 8012d96:	e777      	b.n	8012c88 <_dtoa_r+0x7e8>
 8012d98:	2300      	movs	r3, #0
 8012d9a:	9308      	str	r3, [sp, #32]
 8012d9c:	e779      	b.n	8012c92 <_dtoa_r+0x7f2>
 8012d9e:	d093      	beq.n	8012cc8 <_dtoa_r+0x828>
 8012da0:	9a00      	ldr	r2, [sp, #0]
 8012da2:	331c      	adds	r3, #28
 8012da4:	441a      	add	r2, r3
 8012da6:	9200      	str	r2, [sp, #0]
 8012da8:	9a06      	ldr	r2, [sp, #24]
 8012daa:	441a      	add	r2, r3
 8012dac:	441e      	add	r6, r3
 8012dae:	9206      	str	r2, [sp, #24]
 8012db0:	e78a      	b.n	8012cc8 <_dtoa_r+0x828>
 8012db2:	4603      	mov	r3, r0
 8012db4:	e7f4      	b.n	8012da0 <_dtoa_r+0x900>
 8012db6:	9b03      	ldr	r3, [sp, #12]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	46b8      	mov	r8, r7
 8012dbc:	dc20      	bgt.n	8012e00 <_dtoa_r+0x960>
 8012dbe:	469b      	mov	fp, r3
 8012dc0:	9b07      	ldr	r3, [sp, #28]
 8012dc2:	2b02      	cmp	r3, #2
 8012dc4:	dd1e      	ble.n	8012e04 <_dtoa_r+0x964>
 8012dc6:	f1bb 0f00 	cmp.w	fp, #0
 8012dca:	f47f adb1 	bne.w	8012930 <_dtoa_r+0x490>
 8012dce:	4621      	mov	r1, r4
 8012dd0:	465b      	mov	r3, fp
 8012dd2:	2205      	movs	r2, #5
 8012dd4:	4648      	mov	r0, r9
 8012dd6:	f000 f9df 	bl	8013198 <__multadd>
 8012dda:	4601      	mov	r1, r0
 8012ddc:	4604      	mov	r4, r0
 8012dde:	9802      	ldr	r0, [sp, #8]
 8012de0:	f000 fbea 	bl	80135b8 <__mcmp>
 8012de4:	2800      	cmp	r0, #0
 8012de6:	f77f ada3 	ble.w	8012930 <_dtoa_r+0x490>
 8012dea:	4656      	mov	r6, sl
 8012dec:	2331      	movs	r3, #49	@ 0x31
 8012dee:	f806 3b01 	strb.w	r3, [r6], #1
 8012df2:	f108 0801 	add.w	r8, r8, #1
 8012df6:	e59f      	b.n	8012938 <_dtoa_r+0x498>
 8012df8:	9c03      	ldr	r4, [sp, #12]
 8012dfa:	46b8      	mov	r8, r7
 8012dfc:	4625      	mov	r5, r4
 8012dfe:	e7f4      	b.n	8012dea <_dtoa_r+0x94a>
 8012e00:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8012e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	f000 8101 	beq.w	801300e <_dtoa_r+0xb6e>
 8012e0c:	2e00      	cmp	r6, #0
 8012e0e:	dd05      	ble.n	8012e1c <_dtoa_r+0x97c>
 8012e10:	4629      	mov	r1, r5
 8012e12:	4632      	mov	r2, r6
 8012e14:	4648      	mov	r0, r9
 8012e16:	f000 fb63 	bl	80134e0 <__lshift>
 8012e1a:	4605      	mov	r5, r0
 8012e1c:	9b08      	ldr	r3, [sp, #32]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d05c      	beq.n	8012edc <_dtoa_r+0xa3c>
 8012e22:	6869      	ldr	r1, [r5, #4]
 8012e24:	4648      	mov	r0, r9
 8012e26:	f000 f955 	bl	80130d4 <_Balloc>
 8012e2a:	4606      	mov	r6, r0
 8012e2c:	b928      	cbnz	r0, 8012e3a <_dtoa_r+0x99a>
 8012e2e:	4b82      	ldr	r3, [pc, #520]	@ (8013038 <_dtoa_r+0xb98>)
 8012e30:	4602      	mov	r2, r0
 8012e32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012e36:	f7ff bb4a 	b.w	80124ce <_dtoa_r+0x2e>
 8012e3a:	692a      	ldr	r2, [r5, #16]
 8012e3c:	3202      	adds	r2, #2
 8012e3e:	0092      	lsls	r2, r2, #2
 8012e40:	f105 010c 	add.w	r1, r5, #12
 8012e44:	300c      	adds	r0, #12
 8012e46:	f000 ff31 	bl	8013cac <memcpy>
 8012e4a:	2201      	movs	r2, #1
 8012e4c:	4631      	mov	r1, r6
 8012e4e:	4648      	mov	r0, r9
 8012e50:	f000 fb46 	bl	80134e0 <__lshift>
 8012e54:	f10a 0301 	add.w	r3, sl, #1
 8012e58:	9300      	str	r3, [sp, #0]
 8012e5a:	eb0a 030b 	add.w	r3, sl, fp
 8012e5e:	9308      	str	r3, [sp, #32]
 8012e60:	9b04      	ldr	r3, [sp, #16]
 8012e62:	f003 0301 	and.w	r3, r3, #1
 8012e66:	462f      	mov	r7, r5
 8012e68:	9306      	str	r3, [sp, #24]
 8012e6a:	4605      	mov	r5, r0
 8012e6c:	9b00      	ldr	r3, [sp, #0]
 8012e6e:	9802      	ldr	r0, [sp, #8]
 8012e70:	4621      	mov	r1, r4
 8012e72:	f103 3bff 	add.w	fp, r3, #4294967295
 8012e76:	f7ff fa88 	bl	801238a <quorem>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	3330      	adds	r3, #48	@ 0x30
 8012e7e:	9003      	str	r0, [sp, #12]
 8012e80:	4639      	mov	r1, r7
 8012e82:	9802      	ldr	r0, [sp, #8]
 8012e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e86:	f000 fb97 	bl	80135b8 <__mcmp>
 8012e8a:	462a      	mov	r2, r5
 8012e8c:	9004      	str	r0, [sp, #16]
 8012e8e:	4621      	mov	r1, r4
 8012e90:	4648      	mov	r0, r9
 8012e92:	f000 fbad 	bl	80135f0 <__mdiff>
 8012e96:	68c2      	ldr	r2, [r0, #12]
 8012e98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e9a:	4606      	mov	r6, r0
 8012e9c:	bb02      	cbnz	r2, 8012ee0 <_dtoa_r+0xa40>
 8012e9e:	4601      	mov	r1, r0
 8012ea0:	9802      	ldr	r0, [sp, #8]
 8012ea2:	f000 fb89 	bl	80135b8 <__mcmp>
 8012ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	4631      	mov	r1, r6
 8012eac:	4648      	mov	r0, r9
 8012eae:	920c      	str	r2, [sp, #48]	@ 0x30
 8012eb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8012eb2:	f000 f94f 	bl	8013154 <_Bfree>
 8012eb6:	9b07      	ldr	r3, [sp, #28]
 8012eb8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012eba:	9e00      	ldr	r6, [sp, #0]
 8012ebc:	ea42 0103 	orr.w	r1, r2, r3
 8012ec0:	9b06      	ldr	r3, [sp, #24]
 8012ec2:	4319      	orrs	r1, r3
 8012ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ec6:	d10d      	bne.n	8012ee4 <_dtoa_r+0xa44>
 8012ec8:	2b39      	cmp	r3, #57	@ 0x39
 8012eca:	d027      	beq.n	8012f1c <_dtoa_r+0xa7c>
 8012ecc:	9a04      	ldr	r2, [sp, #16]
 8012ece:	2a00      	cmp	r2, #0
 8012ed0:	dd01      	ble.n	8012ed6 <_dtoa_r+0xa36>
 8012ed2:	9b03      	ldr	r3, [sp, #12]
 8012ed4:	3331      	adds	r3, #49	@ 0x31
 8012ed6:	f88b 3000 	strb.w	r3, [fp]
 8012eda:	e52e      	b.n	801293a <_dtoa_r+0x49a>
 8012edc:	4628      	mov	r0, r5
 8012ede:	e7b9      	b.n	8012e54 <_dtoa_r+0x9b4>
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	e7e2      	b.n	8012eaa <_dtoa_r+0xa0a>
 8012ee4:	9904      	ldr	r1, [sp, #16]
 8012ee6:	2900      	cmp	r1, #0
 8012ee8:	db04      	blt.n	8012ef4 <_dtoa_r+0xa54>
 8012eea:	9807      	ldr	r0, [sp, #28]
 8012eec:	4301      	orrs	r1, r0
 8012eee:	9806      	ldr	r0, [sp, #24]
 8012ef0:	4301      	orrs	r1, r0
 8012ef2:	d120      	bne.n	8012f36 <_dtoa_r+0xa96>
 8012ef4:	2a00      	cmp	r2, #0
 8012ef6:	ddee      	ble.n	8012ed6 <_dtoa_r+0xa36>
 8012ef8:	9902      	ldr	r1, [sp, #8]
 8012efa:	9300      	str	r3, [sp, #0]
 8012efc:	2201      	movs	r2, #1
 8012efe:	4648      	mov	r0, r9
 8012f00:	f000 faee 	bl	80134e0 <__lshift>
 8012f04:	4621      	mov	r1, r4
 8012f06:	9002      	str	r0, [sp, #8]
 8012f08:	f000 fb56 	bl	80135b8 <__mcmp>
 8012f0c:	2800      	cmp	r0, #0
 8012f0e:	9b00      	ldr	r3, [sp, #0]
 8012f10:	dc02      	bgt.n	8012f18 <_dtoa_r+0xa78>
 8012f12:	d1e0      	bne.n	8012ed6 <_dtoa_r+0xa36>
 8012f14:	07da      	lsls	r2, r3, #31
 8012f16:	d5de      	bpl.n	8012ed6 <_dtoa_r+0xa36>
 8012f18:	2b39      	cmp	r3, #57	@ 0x39
 8012f1a:	d1da      	bne.n	8012ed2 <_dtoa_r+0xa32>
 8012f1c:	2339      	movs	r3, #57	@ 0x39
 8012f1e:	f88b 3000 	strb.w	r3, [fp]
 8012f22:	4633      	mov	r3, r6
 8012f24:	461e      	mov	r6, r3
 8012f26:	3b01      	subs	r3, #1
 8012f28:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012f2c:	2a39      	cmp	r2, #57	@ 0x39
 8012f2e:	d04e      	beq.n	8012fce <_dtoa_r+0xb2e>
 8012f30:	3201      	adds	r2, #1
 8012f32:	701a      	strb	r2, [r3, #0]
 8012f34:	e501      	b.n	801293a <_dtoa_r+0x49a>
 8012f36:	2a00      	cmp	r2, #0
 8012f38:	dd03      	ble.n	8012f42 <_dtoa_r+0xaa2>
 8012f3a:	2b39      	cmp	r3, #57	@ 0x39
 8012f3c:	d0ee      	beq.n	8012f1c <_dtoa_r+0xa7c>
 8012f3e:	3301      	adds	r3, #1
 8012f40:	e7c9      	b.n	8012ed6 <_dtoa_r+0xa36>
 8012f42:	9a00      	ldr	r2, [sp, #0]
 8012f44:	9908      	ldr	r1, [sp, #32]
 8012f46:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012f4a:	428a      	cmp	r2, r1
 8012f4c:	d028      	beq.n	8012fa0 <_dtoa_r+0xb00>
 8012f4e:	9902      	ldr	r1, [sp, #8]
 8012f50:	2300      	movs	r3, #0
 8012f52:	220a      	movs	r2, #10
 8012f54:	4648      	mov	r0, r9
 8012f56:	f000 f91f 	bl	8013198 <__multadd>
 8012f5a:	42af      	cmp	r7, r5
 8012f5c:	9002      	str	r0, [sp, #8]
 8012f5e:	f04f 0300 	mov.w	r3, #0
 8012f62:	f04f 020a 	mov.w	r2, #10
 8012f66:	4639      	mov	r1, r7
 8012f68:	4648      	mov	r0, r9
 8012f6a:	d107      	bne.n	8012f7c <_dtoa_r+0xadc>
 8012f6c:	f000 f914 	bl	8013198 <__multadd>
 8012f70:	4607      	mov	r7, r0
 8012f72:	4605      	mov	r5, r0
 8012f74:	9b00      	ldr	r3, [sp, #0]
 8012f76:	3301      	adds	r3, #1
 8012f78:	9300      	str	r3, [sp, #0]
 8012f7a:	e777      	b.n	8012e6c <_dtoa_r+0x9cc>
 8012f7c:	f000 f90c 	bl	8013198 <__multadd>
 8012f80:	4629      	mov	r1, r5
 8012f82:	4607      	mov	r7, r0
 8012f84:	2300      	movs	r3, #0
 8012f86:	220a      	movs	r2, #10
 8012f88:	4648      	mov	r0, r9
 8012f8a:	f000 f905 	bl	8013198 <__multadd>
 8012f8e:	4605      	mov	r5, r0
 8012f90:	e7f0      	b.n	8012f74 <_dtoa_r+0xad4>
 8012f92:	f1bb 0f00 	cmp.w	fp, #0
 8012f96:	bfcc      	ite	gt
 8012f98:	465e      	movgt	r6, fp
 8012f9a:	2601      	movle	r6, #1
 8012f9c:	4456      	add	r6, sl
 8012f9e:	2700      	movs	r7, #0
 8012fa0:	9902      	ldr	r1, [sp, #8]
 8012fa2:	9300      	str	r3, [sp, #0]
 8012fa4:	2201      	movs	r2, #1
 8012fa6:	4648      	mov	r0, r9
 8012fa8:	f000 fa9a 	bl	80134e0 <__lshift>
 8012fac:	4621      	mov	r1, r4
 8012fae:	9002      	str	r0, [sp, #8]
 8012fb0:	f000 fb02 	bl	80135b8 <__mcmp>
 8012fb4:	2800      	cmp	r0, #0
 8012fb6:	dcb4      	bgt.n	8012f22 <_dtoa_r+0xa82>
 8012fb8:	d102      	bne.n	8012fc0 <_dtoa_r+0xb20>
 8012fba:	9b00      	ldr	r3, [sp, #0]
 8012fbc:	07db      	lsls	r3, r3, #31
 8012fbe:	d4b0      	bmi.n	8012f22 <_dtoa_r+0xa82>
 8012fc0:	4633      	mov	r3, r6
 8012fc2:	461e      	mov	r6, r3
 8012fc4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012fc8:	2a30      	cmp	r2, #48	@ 0x30
 8012fca:	d0fa      	beq.n	8012fc2 <_dtoa_r+0xb22>
 8012fcc:	e4b5      	b.n	801293a <_dtoa_r+0x49a>
 8012fce:	459a      	cmp	sl, r3
 8012fd0:	d1a8      	bne.n	8012f24 <_dtoa_r+0xa84>
 8012fd2:	2331      	movs	r3, #49	@ 0x31
 8012fd4:	f108 0801 	add.w	r8, r8, #1
 8012fd8:	f88a 3000 	strb.w	r3, [sl]
 8012fdc:	e4ad      	b.n	801293a <_dtoa_r+0x49a>
 8012fde:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012fe0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801303c <_dtoa_r+0xb9c>
 8012fe4:	b11b      	cbz	r3, 8012fee <_dtoa_r+0xb4e>
 8012fe6:	f10a 0308 	add.w	r3, sl, #8
 8012fea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012fec:	6013      	str	r3, [r2, #0]
 8012fee:	4650      	mov	r0, sl
 8012ff0:	b017      	add	sp, #92	@ 0x5c
 8012ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ff6:	9b07      	ldr	r3, [sp, #28]
 8012ff8:	2b01      	cmp	r3, #1
 8012ffa:	f77f ae2e 	ble.w	8012c5a <_dtoa_r+0x7ba>
 8012ffe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013000:	9308      	str	r3, [sp, #32]
 8013002:	2001      	movs	r0, #1
 8013004:	e64d      	b.n	8012ca2 <_dtoa_r+0x802>
 8013006:	f1bb 0f00 	cmp.w	fp, #0
 801300a:	f77f aed9 	ble.w	8012dc0 <_dtoa_r+0x920>
 801300e:	4656      	mov	r6, sl
 8013010:	9802      	ldr	r0, [sp, #8]
 8013012:	4621      	mov	r1, r4
 8013014:	f7ff f9b9 	bl	801238a <quorem>
 8013018:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801301c:	f806 3b01 	strb.w	r3, [r6], #1
 8013020:	eba6 020a 	sub.w	r2, r6, sl
 8013024:	4593      	cmp	fp, r2
 8013026:	ddb4      	ble.n	8012f92 <_dtoa_r+0xaf2>
 8013028:	9902      	ldr	r1, [sp, #8]
 801302a:	2300      	movs	r3, #0
 801302c:	220a      	movs	r2, #10
 801302e:	4648      	mov	r0, r9
 8013030:	f000 f8b2 	bl	8013198 <__multadd>
 8013034:	9002      	str	r0, [sp, #8]
 8013036:	e7eb      	b.n	8013010 <_dtoa_r+0xb70>
 8013038:	08015f20 	.word	0x08015f20
 801303c:	08015ea4 	.word	0x08015ea4

08013040 <_free_r>:
 8013040:	b538      	push	{r3, r4, r5, lr}
 8013042:	4605      	mov	r5, r0
 8013044:	2900      	cmp	r1, #0
 8013046:	d041      	beq.n	80130cc <_free_r+0x8c>
 8013048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801304c:	1f0c      	subs	r4, r1, #4
 801304e:	2b00      	cmp	r3, #0
 8013050:	bfb8      	it	lt
 8013052:	18e4      	addlt	r4, r4, r3
 8013054:	f7fe fa8e 	bl	8011574 <__malloc_lock>
 8013058:	4a1d      	ldr	r2, [pc, #116]	@ (80130d0 <_free_r+0x90>)
 801305a:	6813      	ldr	r3, [r2, #0]
 801305c:	b933      	cbnz	r3, 801306c <_free_r+0x2c>
 801305e:	6063      	str	r3, [r4, #4]
 8013060:	6014      	str	r4, [r2, #0]
 8013062:	4628      	mov	r0, r5
 8013064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013068:	f7fe ba8a 	b.w	8011580 <__malloc_unlock>
 801306c:	42a3      	cmp	r3, r4
 801306e:	d908      	bls.n	8013082 <_free_r+0x42>
 8013070:	6820      	ldr	r0, [r4, #0]
 8013072:	1821      	adds	r1, r4, r0
 8013074:	428b      	cmp	r3, r1
 8013076:	bf01      	itttt	eq
 8013078:	6819      	ldreq	r1, [r3, #0]
 801307a:	685b      	ldreq	r3, [r3, #4]
 801307c:	1809      	addeq	r1, r1, r0
 801307e:	6021      	streq	r1, [r4, #0]
 8013080:	e7ed      	b.n	801305e <_free_r+0x1e>
 8013082:	461a      	mov	r2, r3
 8013084:	685b      	ldr	r3, [r3, #4]
 8013086:	b10b      	cbz	r3, 801308c <_free_r+0x4c>
 8013088:	42a3      	cmp	r3, r4
 801308a:	d9fa      	bls.n	8013082 <_free_r+0x42>
 801308c:	6811      	ldr	r1, [r2, #0]
 801308e:	1850      	adds	r0, r2, r1
 8013090:	42a0      	cmp	r0, r4
 8013092:	d10b      	bne.n	80130ac <_free_r+0x6c>
 8013094:	6820      	ldr	r0, [r4, #0]
 8013096:	4401      	add	r1, r0
 8013098:	1850      	adds	r0, r2, r1
 801309a:	4283      	cmp	r3, r0
 801309c:	6011      	str	r1, [r2, #0]
 801309e:	d1e0      	bne.n	8013062 <_free_r+0x22>
 80130a0:	6818      	ldr	r0, [r3, #0]
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	6053      	str	r3, [r2, #4]
 80130a6:	4408      	add	r0, r1
 80130a8:	6010      	str	r0, [r2, #0]
 80130aa:	e7da      	b.n	8013062 <_free_r+0x22>
 80130ac:	d902      	bls.n	80130b4 <_free_r+0x74>
 80130ae:	230c      	movs	r3, #12
 80130b0:	602b      	str	r3, [r5, #0]
 80130b2:	e7d6      	b.n	8013062 <_free_r+0x22>
 80130b4:	6820      	ldr	r0, [r4, #0]
 80130b6:	1821      	adds	r1, r4, r0
 80130b8:	428b      	cmp	r3, r1
 80130ba:	bf04      	itt	eq
 80130bc:	6819      	ldreq	r1, [r3, #0]
 80130be:	685b      	ldreq	r3, [r3, #4]
 80130c0:	6063      	str	r3, [r4, #4]
 80130c2:	bf04      	itt	eq
 80130c4:	1809      	addeq	r1, r1, r0
 80130c6:	6021      	streq	r1, [r4, #0]
 80130c8:	6054      	str	r4, [r2, #4]
 80130ca:	e7ca      	b.n	8013062 <_free_r+0x22>
 80130cc:	bd38      	pop	{r3, r4, r5, pc}
 80130ce:	bf00      	nop
 80130d0:	20000ac0 	.word	0x20000ac0

080130d4 <_Balloc>:
 80130d4:	b570      	push	{r4, r5, r6, lr}
 80130d6:	69c6      	ldr	r6, [r0, #28]
 80130d8:	4604      	mov	r4, r0
 80130da:	460d      	mov	r5, r1
 80130dc:	b976      	cbnz	r6, 80130fc <_Balloc+0x28>
 80130de:	2010      	movs	r0, #16
 80130e0:	f7fe f99e 	bl	8011420 <malloc>
 80130e4:	4602      	mov	r2, r0
 80130e6:	61e0      	str	r0, [r4, #28]
 80130e8:	b920      	cbnz	r0, 80130f4 <_Balloc+0x20>
 80130ea:	4b18      	ldr	r3, [pc, #96]	@ (801314c <_Balloc+0x78>)
 80130ec:	4818      	ldr	r0, [pc, #96]	@ (8013150 <_Balloc+0x7c>)
 80130ee:	216b      	movs	r1, #107	@ 0x6b
 80130f0:	f000 fdea 	bl	8013cc8 <__assert_func>
 80130f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80130f8:	6006      	str	r6, [r0, #0]
 80130fa:	60c6      	str	r6, [r0, #12]
 80130fc:	69e6      	ldr	r6, [r4, #28]
 80130fe:	68f3      	ldr	r3, [r6, #12]
 8013100:	b183      	cbz	r3, 8013124 <_Balloc+0x50>
 8013102:	69e3      	ldr	r3, [r4, #28]
 8013104:	68db      	ldr	r3, [r3, #12]
 8013106:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801310a:	b9b8      	cbnz	r0, 801313c <_Balloc+0x68>
 801310c:	2101      	movs	r1, #1
 801310e:	fa01 f605 	lsl.w	r6, r1, r5
 8013112:	1d72      	adds	r2, r6, #5
 8013114:	0092      	lsls	r2, r2, #2
 8013116:	4620      	mov	r0, r4
 8013118:	f000 fdf4 	bl	8013d04 <_calloc_r>
 801311c:	b160      	cbz	r0, 8013138 <_Balloc+0x64>
 801311e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013122:	e00e      	b.n	8013142 <_Balloc+0x6e>
 8013124:	2221      	movs	r2, #33	@ 0x21
 8013126:	2104      	movs	r1, #4
 8013128:	4620      	mov	r0, r4
 801312a:	f000 fdeb 	bl	8013d04 <_calloc_r>
 801312e:	69e3      	ldr	r3, [r4, #28]
 8013130:	60f0      	str	r0, [r6, #12]
 8013132:	68db      	ldr	r3, [r3, #12]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d1e4      	bne.n	8013102 <_Balloc+0x2e>
 8013138:	2000      	movs	r0, #0
 801313a:	bd70      	pop	{r4, r5, r6, pc}
 801313c:	6802      	ldr	r2, [r0, #0]
 801313e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013142:	2300      	movs	r3, #0
 8013144:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013148:	e7f7      	b.n	801313a <_Balloc+0x66>
 801314a:	bf00      	nop
 801314c:	08015eb1 	.word	0x08015eb1
 8013150:	08015f31 	.word	0x08015f31

08013154 <_Bfree>:
 8013154:	b570      	push	{r4, r5, r6, lr}
 8013156:	69c6      	ldr	r6, [r0, #28]
 8013158:	4605      	mov	r5, r0
 801315a:	460c      	mov	r4, r1
 801315c:	b976      	cbnz	r6, 801317c <_Bfree+0x28>
 801315e:	2010      	movs	r0, #16
 8013160:	f7fe f95e 	bl	8011420 <malloc>
 8013164:	4602      	mov	r2, r0
 8013166:	61e8      	str	r0, [r5, #28]
 8013168:	b920      	cbnz	r0, 8013174 <_Bfree+0x20>
 801316a:	4b09      	ldr	r3, [pc, #36]	@ (8013190 <_Bfree+0x3c>)
 801316c:	4809      	ldr	r0, [pc, #36]	@ (8013194 <_Bfree+0x40>)
 801316e:	218f      	movs	r1, #143	@ 0x8f
 8013170:	f000 fdaa 	bl	8013cc8 <__assert_func>
 8013174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013178:	6006      	str	r6, [r0, #0]
 801317a:	60c6      	str	r6, [r0, #12]
 801317c:	b13c      	cbz	r4, 801318e <_Bfree+0x3a>
 801317e:	69eb      	ldr	r3, [r5, #28]
 8013180:	6862      	ldr	r2, [r4, #4]
 8013182:	68db      	ldr	r3, [r3, #12]
 8013184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013188:	6021      	str	r1, [r4, #0]
 801318a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801318e:	bd70      	pop	{r4, r5, r6, pc}
 8013190:	08015eb1 	.word	0x08015eb1
 8013194:	08015f31 	.word	0x08015f31

08013198 <__multadd>:
 8013198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801319c:	690d      	ldr	r5, [r1, #16]
 801319e:	4607      	mov	r7, r0
 80131a0:	460c      	mov	r4, r1
 80131a2:	461e      	mov	r6, r3
 80131a4:	f101 0c14 	add.w	ip, r1, #20
 80131a8:	2000      	movs	r0, #0
 80131aa:	f8dc 3000 	ldr.w	r3, [ip]
 80131ae:	b299      	uxth	r1, r3
 80131b0:	fb02 6101 	mla	r1, r2, r1, r6
 80131b4:	0c1e      	lsrs	r6, r3, #16
 80131b6:	0c0b      	lsrs	r3, r1, #16
 80131b8:	fb02 3306 	mla	r3, r2, r6, r3
 80131bc:	b289      	uxth	r1, r1
 80131be:	3001      	adds	r0, #1
 80131c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80131c4:	4285      	cmp	r5, r0
 80131c6:	f84c 1b04 	str.w	r1, [ip], #4
 80131ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80131ce:	dcec      	bgt.n	80131aa <__multadd+0x12>
 80131d0:	b30e      	cbz	r6, 8013216 <__multadd+0x7e>
 80131d2:	68a3      	ldr	r3, [r4, #8]
 80131d4:	42ab      	cmp	r3, r5
 80131d6:	dc19      	bgt.n	801320c <__multadd+0x74>
 80131d8:	6861      	ldr	r1, [r4, #4]
 80131da:	4638      	mov	r0, r7
 80131dc:	3101      	adds	r1, #1
 80131de:	f7ff ff79 	bl	80130d4 <_Balloc>
 80131e2:	4680      	mov	r8, r0
 80131e4:	b928      	cbnz	r0, 80131f2 <__multadd+0x5a>
 80131e6:	4602      	mov	r2, r0
 80131e8:	4b0c      	ldr	r3, [pc, #48]	@ (801321c <__multadd+0x84>)
 80131ea:	480d      	ldr	r0, [pc, #52]	@ (8013220 <__multadd+0x88>)
 80131ec:	21ba      	movs	r1, #186	@ 0xba
 80131ee:	f000 fd6b 	bl	8013cc8 <__assert_func>
 80131f2:	6922      	ldr	r2, [r4, #16]
 80131f4:	3202      	adds	r2, #2
 80131f6:	f104 010c 	add.w	r1, r4, #12
 80131fa:	0092      	lsls	r2, r2, #2
 80131fc:	300c      	adds	r0, #12
 80131fe:	f000 fd55 	bl	8013cac <memcpy>
 8013202:	4621      	mov	r1, r4
 8013204:	4638      	mov	r0, r7
 8013206:	f7ff ffa5 	bl	8013154 <_Bfree>
 801320a:	4644      	mov	r4, r8
 801320c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013210:	3501      	adds	r5, #1
 8013212:	615e      	str	r6, [r3, #20]
 8013214:	6125      	str	r5, [r4, #16]
 8013216:	4620      	mov	r0, r4
 8013218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801321c:	08015f20 	.word	0x08015f20
 8013220:	08015f31 	.word	0x08015f31

08013224 <__hi0bits>:
 8013224:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013228:	4603      	mov	r3, r0
 801322a:	bf36      	itet	cc
 801322c:	0403      	lslcc	r3, r0, #16
 801322e:	2000      	movcs	r0, #0
 8013230:	2010      	movcc	r0, #16
 8013232:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013236:	bf3c      	itt	cc
 8013238:	021b      	lslcc	r3, r3, #8
 801323a:	3008      	addcc	r0, #8
 801323c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013240:	bf3c      	itt	cc
 8013242:	011b      	lslcc	r3, r3, #4
 8013244:	3004      	addcc	r0, #4
 8013246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801324a:	bf3c      	itt	cc
 801324c:	009b      	lslcc	r3, r3, #2
 801324e:	3002      	addcc	r0, #2
 8013250:	2b00      	cmp	r3, #0
 8013252:	db05      	blt.n	8013260 <__hi0bits+0x3c>
 8013254:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013258:	f100 0001 	add.w	r0, r0, #1
 801325c:	bf08      	it	eq
 801325e:	2020      	moveq	r0, #32
 8013260:	4770      	bx	lr

08013262 <__lo0bits>:
 8013262:	6803      	ldr	r3, [r0, #0]
 8013264:	4602      	mov	r2, r0
 8013266:	f013 0007 	ands.w	r0, r3, #7
 801326a:	d00b      	beq.n	8013284 <__lo0bits+0x22>
 801326c:	07d9      	lsls	r1, r3, #31
 801326e:	d421      	bmi.n	80132b4 <__lo0bits+0x52>
 8013270:	0798      	lsls	r0, r3, #30
 8013272:	bf49      	itett	mi
 8013274:	085b      	lsrmi	r3, r3, #1
 8013276:	089b      	lsrpl	r3, r3, #2
 8013278:	2001      	movmi	r0, #1
 801327a:	6013      	strmi	r3, [r2, #0]
 801327c:	bf5c      	itt	pl
 801327e:	6013      	strpl	r3, [r2, #0]
 8013280:	2002      	movpl	r0, #2
 8013282:	4770      	bx	lr
 8013284:	b299      	uxth	r1, r3
 8013286:	b909      	cbnz	r1, 801328c <__lo0bits+0x2a>
 8013288:	0c1b      	lsrs	r3, r3, #16
 801328a:	2010      	movs	r0, #16
 801328c:	b2d9      	uxtb	r1, r3
 801328e:	b909      	cbnz	r1, 8013294 <__lo0bits+0x32>
 8013290:	3008      	adds	r0, #8
 8013292:	0a1b      	lsrs	r3, r3, #8
 8013294:	0719      	lsls	r1, r3, #28
 8013296:	bf04      	itt	eq
 8013298:	091b      	lsreq	r3, r3, #4
 801329a:	3004      	addeq	r0, #4
 801329c:	0799      	lsls	r1, r3, #30
 801329e:	bf04      	itt	eq
 80132a0:	089b      	lsreq	r3, r3, #2
 80132a2:	3002      	addeq	r0, #2
 80132a4:	07d9      	lsls	r1, r3, #31
 80132a6:	d403      	bmi.n	80132b0 <__lo0bits+0x4e>
 80132a8:	085b      	lsrs	r3, r3, #1
 80132aa:	f100 0001 	add.w	r0, r0, #1
 80132ae:	d003      	beq.n	80132b8 <__lo0bits+0x56>
 80132b0:	6013      	str	r3, [r2, #0]
 80132b2:	4770      	bx	lr
 80132b4:	2000      	movs	r0, #0
 80132b6:	4770      	bx	lr
 80132b8:	2020      	movs	r0, #32
 80132ba:	4770      	bx	lr

080132bc <__i2b>:
 80132bc:	b510      	push	{r4, lr}
 80132be:	460c      	mov	r4, r1
 80132c0:	2101      	movs	r1, #1
 80132c2:	f7ff ff07 	bl	80130d4 <_Balloc>
 80132c6:	4602      	mov	r2, r0
 80132c8:	b928      	cbnz	r0, 80132d6 <__i2b+0x1a>
 80132ca:	4b05      	ldr	r3, [pc, #20]	@ (80132e0 <__i2b+0x24>)
 80132cc:	4805      	ldr	r0, [pc, #20]	@ (80132e4 <__i2b+0x28>)
 80132ce:	f240 1145 	movw	r1, #325	@ 0x145
 80132d2:	f000 fcf9 	bl	8013cc8 <__assert_func>
 80132d6:	2301      	movs	r3, #1
 80132d8:	6144      	str	r4, [r0, #20]
 80132da:	6103      	str	r3, [r0, #16]
 80132dc:	bd10      	pop	{r4, pc}
 80132de:	bf00      	nop
 80132e0:	08015f20 	.word	0x08015f20
 80132e4:	08015f31 	.word	0x08015f31

080132e8 <__multiply>:
 80132e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132ec:	4617      	mov	r7, r2
 80132ee:	690a      	ldr	r2, [r1, #16]
 80132f0:	693b      	ldr	r3, [r7, #16]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	bfa8      	it	ge
 80132f6:	463b      	movge	r3, r7
 80132f8:	4689      	mov	r9, r1
 80132fa:	bfa4      	itt	ge
 80132fc:	460f      	movge	r7, r1
 80132fe:	4699      	movge	r9, r3
 8013300:	693d      	ldr	r5, [r7, #16]
 8013302:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013306:	68bb      	ldr	r3, [r7, #8]
 8013308:	6879      	ldr	r1, [r7, #4]
 801330a:	eb05 060a 	add.w	r6, r5, sl
 801330e:	42b3      	cmp	r3, r6
 8013310:	b085      	sub	sp, #20
 8013312:	bfb8      	it	lt
 8013314:	3101      	addlt	r1, #1
 8013316:	f7ff fedd 	bl	80130d4 <_Balloc>
 801331a:	b930      	cbnz	r0, 801332a <__multiply+0x42>
 801331c:	4602      	mov	r2, r0
 801331e:	4b41      	ldr	r3, [pc, #260]	@ (8013424 <__multiply+0x13c>)
 8013320:	4841      	ldr	r0, [pc, #260]	@ (8013428 <__multiply+0x140>)
 8013322:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013326:	f000 fccf 	bl	8013cc8 <__assert_func>
 801332a:	f100 0414 	add.w	r4, r0, #20
 801332e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8013332:	4623      	mov	r3, r4
 8013334:	2200      	movs	r2, #0
 8013336:	4573      	cmp	r3, lr
 8013338:	d320      	bcc.n	801337c <__multiply+0x94>
 801333a:	f107 0814 	add.w	r8, r7, #20
 801333e:	f109 0114 	add.w	r1, r9, #20
 8013342:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8013346:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801334a:	9302      	str	r3, [sp, #8]
 801334c:	1beb      	subs	r3, r5, r7
 801334e:	3b15      	subs	r3, #21
 8013350:	f023 0303 	bic.w	r3, r3, #3
 8013354:	3304      	adds	r3, #4
 8013356:	3715      	adds	r7, #21
 8013358:	42bd      	cmp	r5, r7
 801335a:	bf38      	it	cc
 801335c:	2304      	movcc	r3, #4
 801335e:	9301      	str	r3, [sp, #4]
 8013360:	9b02      	ldr	r3, [sp, #8]
 8013362:	9103      	str	r1, [sp, #12]
 8013364:	428b      	cmp	r3, r1
 8013366:	d80c      	bhi.n	8013382 <__multiply+0x9a>
 8013368:	2e00      	cmp	r6, #0
 801336a:	dd03      	ble.n	8013374 <__multiply+0x8c>
 801336c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013370:	2b00      	cmp	r3, #0
 8013372:	d055      	beq.n	8013420 <__multiply+0x138>
 8013374:	6106      	str	r6, [r0, #16]
 8013376:	b005      	add	sp, #20
 8013378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801337c:	f843 2b04 	str.w	r2, [r3], #4
 8013380:	e7d9      	b.n	8013336 <__multiply+0x4e>
 8013382:	f8b1 a000 	ldrh.w	sl, [r1]
 8013386:	f1ba 0f00 	cmp.w	sl, #0
 801338a:	d01f      	beq.n	80133cc <__multiply+0xe4>
 801338c:	46c4      	mov	ip, r8
 801338e:	46a1      	mov	r9, r4
 8013390:	2700      	movs	r7, #0
 8013392:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013396:	f8d9 3000 	ldr.w	r3, [r9]
 801339a:	fa1f fb82 	uxth.w	fp, r2
 801339e:	b29b      	uxth	r3, r3
 80133a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80133a4:	443b      	add	r3, r7
 80133a6:	f8d9 7000 	ldr.w	r7, [r9]
 80133aa:	0c12      	lsrs	r2, r2, #16
 80133ac:	0c3f      	lsrs	r7, r7, #16
 80133ae:	fb0a 7202 	mla	r2, sl, r2, r7
 80133b2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80133bc:	4565      	cmp	r5, ip
 80133be:	f849 3b04 	str.w	r3, [r9], #4
 80133c2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80133c6:	d8e4      	bhi.n	8013392 <__multiply+0xaa>
 80133c8:	9b01      	ldr	r3, [sp, #4]
 80133ca:	50e7      	str	r7, [r4, r3]
 80133cc:	9b03      	ldr	r3, [sp, #12]
 80133ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80133d2:	3104      	adds	r1, #4
 80133d4:	f1b9 0f00 	cmp.w	r9, #0
 80133d8:	d020      	beq.n	801341c <__multiply+0x134>
 80133da:	6823      	ldr	r3, [r4, #0]
 80133dc:	4647      	mov	r7, r8
 80133de:	46a4      	mov	ip, r4
 80133e0:	f04f 0a00 	mov.w	sl, #0
 80133e4:	f8b7 b000 	ldrh.w	fp, [r7]
 80133e8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80133ec:	fb09 220b 	mla	r2, r9, fp, r2
 80133f0:	4452      	add	r2, sl
 80133f2:	b29b      	uxth	r3, r3
 80133f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80133f8:	f84c 3b04 	str.w	r3, [ip], #4
 80133fc:	f857 3b04 	ldr.w	r3, [r7], #4
 8013400:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013404:	f8bc 3000 	ldrh.w	r3, [ip]
 8013408:	fb09 330a 	mla	r3, r9, sl, r3
 801340c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8013410:	42bd      	cmp	r5, r7
 8013412:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013416:	d8e5      	bhi.n	80133e4 <__multiply+0xfc>
 8013418:	9a01      	ldr	r2, [sp, #4]
 801341a:	50a3      	str	r3, [r4, r2]
 801341c:	3404      	adds	r4, #4
 801341e:	e79f      	b.n	8013360 <__multiply+0x78>
 8013420:	3e01      	subs	r6, #1
 8013422:	e7a1      	b.n	8013368 <__multiply+0x80>
 8013424:	08015f20 	.word	0x08015f20
 8013428:	08015f31 	.word	0x08015f31

0801342c <__pow5mult>:
 801342c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013430:	4615      	mov	r5, r2
 8013432:	f012 0203 	ands.w	r2, r2, #3
 8013436:	4607      	mov	r7, r0
 8013438:	460e      	mov	r6, r1
 801343a:	d007      	beq.n	801344c <__pow5mult+0x20>
 801343c:	4c25      	ldr	r4, [pc, #148]	@ (80134d4 <__pow5mult+0xa8>)
 801343e:	3a01      	subs	r2, #1
 8013440:	2300      	movs	r3, #0
 8013442:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013446:	f7ff fea7 	bl	8013198 <__multadd>
 801344a:	4606      	mov	r6, r0
 801344c:	10ad      	asrs	r5, r5, #2
 801344e:	d03d      	beq.n	80134cc <__pow5mult+0xa0>
 8013450:	69fc      	ldr	r4, [r7, #28]
 8013452:	b97c      	cbnz	r4, 8013474 <__pow5mult+0x48>
 8013454:	2010      	movs	r0, #16
 8013456:	f7fd ffe3 	bl	8011420 <malloc>
 801345a:	4602      	mov	r2, r0
 801345c:	61f8      	str	r0, [r7, #28]
 801345e:	b928      	cbnz	r0, 801346c <__pow5mult+0x40>
 8013460:	4b1d      	ldr	r3, [pc, #116]	@ (80134d8 <__pow5mult+0xac>)
 8013462:	481e      	ldr	r0, [pc, #120]	@ (80134dc <__pow5mult+0xb0>)
 8013464:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013468:	f000 fc2e 	bl	8013cc8 <__assert_func>
 801346c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013470:	6004      	str	r4, [r0, #0]
 8013472:	60c4      	str	r4, [r0, #12]
 8013474:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013478:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801347c:	b94c      	cbnz	r4, 8013492 <__pow5mult+0x66>
 801347e:	f240 2171 	movw	r1, #625	@ 0x271
 8013482:	4638      	mov	r0, r7
 8013484:	f7ff ff1a 	bl	80132bc <__i2b>
 8013488:	2300      	movs	r3, #0
 801348a:	f8c8 0008 	str.w	r0, [r8, #8]
 801348e:	4604      	mov	r4, r0
 8013490:	6003      	str	r3, [r0, #0]
 8013492:	f04f 0900 	mov.w	r9, #0
 8013496:	07eb      	lsls	r3, r5, #31
 8013498:	d50a      	bpl.n	80134b0 <__pow5mult+0x84>
 801349a:	4631      	mov	r1, r6
 801349c:	4622      	mov	r2, r4
 801349e:	4638      	mov	r0, r7
 80134a0:	f7ff ff22 	bl	80132e8 <__multiply>
 80134a4:	4631      	mov	r1, r6
 80134a6:	4680      	mov	r8, r0
 80134a8:	4638      	mov	r0, r7
 80134aa:	f7ff fe53 	bl	8013154 <_Bfree>
 80134ae:	4646      	mov	r6, r8
 80134b0:	106d      	asrs	r5, r5, #1
 80134b2:	d00b      	beq.n	80134cc <__pow5mult+0xa0>
 80134b4:	6820      	ldr	r0, [r4, #0]
 80134b6:	b938      	cbnz	r0, 80134c8 <__pow5mult+0x9c>
 80134b8:	4622      	mov	r2, r4
 80134ba:	4621      	mov	r1, r4
 80134bc:	4638      	mov	r0, r7
 80134be:	f7ff ff13 	bl	80132e8 <__multiply>
 80134c2:	6020      	str	r0, [r4, #0]
 80134c4:	f8c0 9000 	str.w	r9, [r0]
 80134c8:	4604      	mov	r4, r0
 80134ca:	e7e4      	b.n	8013496 <__pow5mult+0x6a>
 80134cc:	4630      	mov	r0, r6
 80134ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134d2:	bf00      	nop
 80134d4:	08015fe4 	.word	0x08015fe4
 80134d8:	08015eb1 	.word	0x08015eb1
 80134dc:	08015f31 	.word	0x08015f31

080134e0 <__lshift>:
 80134e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134e4:	460c      	mov	r4, r1
 80134e6:	6849      	ldr	r1, [r1, #4]
 80134e8:	6923      	ldr	r3, [r4, #16]
 80134ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80134ee:	68a3      	ldr	r3, [r4, #8]
 80134f0:	4607      	mov	r7, r0
 80134f2:	4691      	mov	r9, r2
 80134f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80134f8:	f108 0601 	add.w	r6, r8, #1
 80134fc:	42b3      	cmp	r3, r6
 80134fe:	db0b      	blt.n	8013518 <__lshift+0x38>
 8013500:	4638      	mov	r0, r7
 8013502:	f7ff fde7 	bl	80130d4 <_Balloc>
 8013506:	4605      	mov	r5, r0
 8013508:	b948      	cbnz	r0, 801351e <__lshift+0x3e>
 801350a:	4602      	mov	r2, r0
 801350c:	4b28      	ldr	r3, [pc, #160]	@ (80135b0 <__lshift+0xd0>)
 801350e:	4829      	ldr	r0, [pc, #164]	@ (80135b4 <__lshift+0xd4>)
 8013510:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013514:	f000 fbd8 	bl	8013cc8 <__assert_func>
 8013518:	3101      	adds	r1, #1
 801351a:	005b      	lsls	r3, r3, #1
 801351c:	e7ee      	b.n	80134fc <__lshift+0x1c>
 801351e:	2300      	movs	r3, #0
 8013520:	f100 0114 	add.w	r1, r0, #20
 8013524:	f100 0210 	add.w	r2, r0, #16
 8013528:	4618      	mov	r0, r3
 801352a:	4553      	cmp	r3, sl
 801352c:	db33      	blt.n	8013596 <__lshift+0xb6>
 801352e:	6920      	ldr	r0, [r4, #16]
 8013530:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013534:	f104 0314 	add.w	r3, r4, #20
 8013538:	f019 091f 	ands.w	r9, r9, #31
 801353c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013540:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013544:	d02b      	beq.n	801359e <__lshift+0xbe>
 8013546:	f1c9 0e20 	rsb	lr, r9, #32
 801354a:	468a      	mov	sl, r1
 801354c:	2200      	movs	r2, #0
 801354e:	6818      	ldr	r0, [r3, #0]
 8013550:	fa00 f009 	lsl.w	r0, r0, r9
 8013554:	4310      	orrs	r0, r2
 8013556:	f84a 0b04 	str.w	r0, [sl], #4
 801355a:	f853 2b04 	ldr.w	r2, [r3], #4
 801355e:	459c      	cmp	ip, r3
 8013560:	fa22 f20e 	lsr.w	r2, r2, lr
 8013564:	d8f3      	bhi.n	801354e <__lshift+0x6e>
 8013566:	ebac 0304 	sub.w	r3, ip, r4
 801356a:	3b15      	subs	r3, #21
 801356c:	f023 0303 	bic.w	r3, r3, #3
 8013570:	3304      	adds	r3, #4
 8013572:	f104 0015 	add.w	r0, r4, #21
 8013576:	4560      	cmp	r0, ip
 8013578:	bf88      	it	hi
 801357a:	2304      	movhi	r3, #4
 801357c:	50ca      	str	r2, [r1, r3]
 801357e:	b10a      	cbz	r2, 8013584 <__lshift+0xa4>
 8013580:	f108 0602 	add.w	r6, r8, #2
 8013584:	3e01      	subs	r6, #1
 8013586:	4638      	mov	r0, r7
 8013588:	612e      	str	r6, [r5, #16]
 801358a:	4621      	mov	r1, r4
 801358c:	f7ff fde2 	bl	8013154 <_Bfree>
 8013590:	4628      	mov	r0, r5
 8013592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013596:	f842 0f04 	str.w	r0, [r2, #4]!
 801359a:	3301      	adds	r3, #1
 801359c:	e7c5      	b.n	801352a <__lshift+0x4a>
 801359e:	3904      	subs	r1, #4
 80135a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80135a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80135a8:	459c      	cmp	ip, r3
 80135aa:	d8f9      	bhi.n	80135a0 <__lshift+0xc0>
 80135ac:	e7ea      	b.n	8013584 <__lshift+0xa4>
 80135ae:	bf00      	nop
 80135b0:	08015f20 	.word	0x08015f20
 80135b4:	08015f31 	.word	0x08015f31

080135b8 <__mcmp>:
 80135b8:	690a      	ldr	r2, [r1, #16]
 80135ba:	4603      	mov	r3, r0
 80135bc:	6900      	ldr	r0, [r0, #16]
 80135be:	1a80      	subs	r0, r0, r2
 80135c0:	b530      	push	{r4, r5, lr}
 80135c2:	d10e      	bne.n	80135e2 <__mcmp+0x2a>
 80135c4:	3314      	adds	r3, #20
 80135c6:	3114      	adds	r1, #20
 80135c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80135cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80135d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80135d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80135d8:	4295      	cmp	r5, r2
 80135da:	d003      	beq.n	80135e4 <__mcmp+0x2c>
 80135dc:	d205      	bcs.n	80135ea <__mcmp+0x32>
 80135de:	f04f 30ff 	mov.w	r0, #4294967295
 80135e2:	bd30      	pop	{r4, r5, pc}
 80135e4:	42a3      	cmp	r3, r4
 80135e6:	d3f3      	bcc.n	80135d0 <__mcmp+0x18>
 80135e8:	e7fb      	b.n	80135e2 <__mcmp+0x2a>
 80135ea:	2001      	movs	r0, #1
 80135ec:	e7f9      	b.n	80135e2 <__mcmp+0x2a>
	...

080135f0 <__mdiff>:
 80135f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f4:	4689      	mov	r9, r1
 80135f6:	4606      	mov	r6, r0
 80135f8:	4611      	mov	r1, r2
 80135fa:	4648      	mov	r0, r9
 80135fc:	4614      	mov	r4, r2
 80135fe:	f7ff ffdb 	bl	80135b8 <__mcmp>
 8013602:	1e05      	subs	r5, r0, #0
 8013604:	d112      	bne.n	801362c <__mdiff+0x3c>
 8013606:	4629      	mov	r1, r5
 8013608:	4630      	mov	r0, r6
 801360a:	f7ff fd63 	bl	80130d4 <_Balloc>
 801360e:	4602      	mov	r2, r0
 8013610:	b928      	cbnz	r0, 801361e <__mdiff+0x2e>
 8013612:	4b3f      	ldr	r3, [pc, #252]	@ (8013710 <__mdiff+0x120>)
 8013614:	f240 2137 	movw	r1, #567	@ 0x237
 8013618:	483e      	ldr	r0, [pc, #248]	@ (8013714 <__mdiff+0x124>)
 801361a:	f000 fb55 	bl	8013cc8 <__assert_func>
 801361e:	2301      	movs	r3, #1
 8013620:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013624:	4610      	mov	r0, r2
 8013626:	b003      	add	sp, #12
 8013628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801362c:	bfbc      	itt	lt
 801362e:	464b      	movlt	r3, r9
 8013630:	46a1      	movlt	r9, r4
 8013632:	4630      	mov	r0, r6
 8013634:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013638:	bfba      	itte	lt
 801363a:	461c      	movlt	r4, r3
 801363c:	2501      	movlt	r5, #1
 801363e:	2500      	movge	r5, #0
 8013640:	f7ff fd48 	bl	80130d4 <_Balloc>
 8013644:	4602      	mov	r2, r0
 8013646:	b918      	cbnz	r0, 8013650 <__mdiff+0x60>
 8013648:	4b31      	ldr	r3, [pc, #196]	@ (8013710 <__mdiff+0x120>)
 801364a:	f240 2145 	movw	r1, #581	@ 0x245
 801364e:	e7e3      	b.n	8013618 <__mdiff+0x28>
 8013650:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013654:	6926      	ldr	r6, [r4, #16]
 8013656:	60c5      	str	r5, [r0, #12]
 8013658:	f109 0310 	add.w	r3, r9, #16
 801365c:	f109 0514 	add.w	r5, r9, #20
 8013660:	f104 0e14 	add.w	lr, r4, #20
 8013664:	f100 0b14 	add.w	fp, r0, #20
 8013668:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801366c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013670:	9301      	str	r3, [sp, #4]
 8013672:	46d9      	mov	r9, fp
 8013674:	f04f 0c00 	mov.w	ip, #0
 8013678:	9b01      	ldr	r3, [sp, #4]
 801367a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801367e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013682:	9301      	str	r3, [sp, #4]
 8013684:	fa1f f38a 	uxth.w	r3, sl
 8013688:	4619      	mov	r1, r3
 801368a:	b283      	uxth	r3, r0
 801368c:	1acb      	subs	r3, r1, r3
 801368e:	0c00      	lsrs	r0, r0, #16
 8013690:	4463      	add	r3, ip
 8013692:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013696:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801369a:	b29b      	uxth	r3, r3
 801369c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80136a0:	4576      	cmp	r6, lr
 80136a2:	f849 3b04 	str.w	r3, [r9], #4
 80136a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80136aa:	d8e5      	bhi.n	8013678 <__mdiff+0x88>
 80136ac:	1b33      	subs	r3, r6, r4
 80136ae:	3b15      	subs	r3, #21
 80136b0:	f023 0303 	bic.w	r3, r3, #3
 80136b4:	3415      	adds	r4, #21
 80136b6:	3304      	adds	r3, #4
 80136b8:	42a6      	cmp	r6, r4
 80136ba:	bf38      	it	cc
 80136bc:	2304      	movcc	r3, #4
 80136be:	441d      	add	r5, r3
 80136c0:	445b      	add	r3, fp
 80136c2:	461e      	mov	r6, r3
 80136c4:	462c      	mov	r4, r5
 80136c6:	4544      	cmp	r4, r8
 80136c8:	d30e      	bcc.n	80136e8 <__mdiff+0xf8>
 80136ca:	f108 0103 	add.w	r1, r8, #3
 80136ce:	1b49      	subs	r1, r1, r5
 80136d0:	f021 0103 	bic.w	r1, r1, #3
 80136d4:	3d03      	subs	r5, #3
 80136d6:	45a8      	cmp	r8, r5
 80136d8:	bf38      	it	cc
 80136da:	2100      	movcc	r1, #0
 80136dc:	440b      	add	r3, r1
 80136de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80136e2:	b191      	cbz	r1, 801370a <__mdiff+0x11a>
 80136e4:	6117      	str	r7, [r2, #16]
 80136e6:	e79d      	b.n	8013624 <__mdiff+0x34>
 80136e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80136ec:	46e6      	mov	lr, ip
 80136ee:	0c08      	lsrs	r0, r1, #16
 80136f0:	fa1c fc81 	uxtah	ip, ip, r1
 80136f4:	4471      	add	r1, lr
 80136f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80136fa:	b289      	uxth	r1, r1
 80136fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013700:	f846 1b04 	str.w	r1, [r6], #4
 8013704:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013708:	e7dd      	b.n	80136c6 <__mdiff+0xd6>
 801370a:	3f01      	subs	r7, #1
 801370c:	e7e7      	b.n	80136de <__mdiff+0xee>
 801370e:	bf00      	nop
 8013710:	08015f20 	.word	0x08015f20
 8013714:	08015f31 	.word	0x08015f31

08013718 <__d2b>:
 8013718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801371c:	460f      	mov	r7, r1
 801371e:	2101      	movs	r1, #1
 8013720:	ec59 8b10 	vmov	r8, r9, d0
 8013724:	4616      	mov	r6, r2
 8013726:	f7ff fcd5 	bl	80130d4 <_Balloc>
 801372a:	4604      	mov	r4, r0
 801372c:	b930      	cbnz	r0, 801373c <__d2b+0x24>
 801372e:	4602      	mov	r2, r0
 8013730:	4b23      	ldr	r3, [pc, #140]	@ (80137c0 <__d2b+0xa8>)
 8013732:	4824      	ldr	r0, [pc, #144]	@ (80137c4 <__d2b+0xac>)
 8013734:	f240 310f 	movw	r1, #783	@ 0x30f
 8013738:	f000 fac6 	bl	8013cc8 <__assert_func>
 801373c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013744:	b10d      	cbz	r5, 801374a <__d2b+0x32>
 8013746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801374a:	9301      	str	r3, [sp, #4]
 801374c:	f1b8 0300 	subs.w	r3, r8, #0
 8013750:	d023      	beq.n	801379a <__d2b+0x82>
 8013752:	4668      	mov	r0, sp
 8013754:	9300      	str	r3, [sp, #0]
 8013756:	f7ff fd84 	bl	8013262 <__lo0bits>
 801375a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801375e:	b1d0      	cbz	r0, 8013796 <__d2b+0x7e>
 8013760:	f1c0 0320 	rsb	r3, r0, #32
 8013764:	fa02 f303 	lsl.w	r3, r2, r3
 8013768:	430b      	orrs	r3, r1
 801376a:	40c2      	lsrs	r2, r0
 801376c:	6163      	str	r3, [r4, #20]
 801376e:	9201      	str	r2, [sp, #4]
 8013770:	9b01      	ldr	r3, [sp, #4]
 8013772:	61a3      	str	r3, [r4, #24]
 8013774:	2b00      	cmp	r3, #0
 8013776:	bf0c      	ite	eq
 8013778:	2201      	moveq	r2, #1
 801377a:	2202      	movne	r2, #2
 801377c:	6122      	str	r2, [r4, #16]
 801377e:	b1a5      	cbz	r5, 80137aa <__d2b+0x92>
 8013780:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013784:	4405      	add	r5, r0
 8013786:	603d      	str	r5, [r7, #0]
 8013788:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801378c:	6030      	str	r0, [r6, #0]
 801378e:	4620      	mov	r0, r4
 8013790:	b003      	add	sp, #12
 8013792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013796:	6161      	str	r1, [r4, #20]
 8013798:	e7ea      	b.n	8013770 <__d2b+0x58>
 801379a:	a801      	add	r0, sp, #4
 801379c:	f7ff fd61 	bl	8013262 <__lo0bits>
 80137a0:	9b01      	ldr	r3, [sp, #4]
 80137a2:	6163      	str	r3, [r4, #20]
 80137a4:	3020      	adds	r0, #32
 80137a6:	2201      	movs	r2, #1
 80137a8:	e7e8      	b.n	801377c <__d2b+0x64>
 80137aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80137ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80137b2:	6038      	str	r0, [r7, #0]
 80137b4:	6918      	ldr	r0, [r3, #16]
 80137b6:	f7ff fd35 	bl	8013224 <__hi0bits>
 80137ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80137be:	e7e5      	b.n	801378c <__d2b+0x74>
 80137c0:	08015f20 	.word	0x08015f20
 80137c4:	08015f31 	.word	0x08015f31

080137c8 <__sfputc_r>:
 80137c8:	6893      	ldr	r3, [r2, #8]
 80137ca:	3b01      	subs	r3, #1
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	b410      	push	{r4}
 80137d0:	6093      	str	r3, [r2, #8]
 80137d2:	da08      	bge.n	80137e6 <__sfputc_r+0x1e>
 80137d4:	6994      	ldr	r4, [r2, #24]
 80137d6:	42a3      	cmp	r3, r4
 80137d8:	db01      	blt.n	80137de <__sfputc_r+0x16>
 80137da:	290a      	cmp	r1, #10
 80137dc:	d103      	bne.n	80137e6 <__sfputc_r+0x1e>
 80137de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137e2:	f7fe bc9e 	b.w	8012122 <__swbuf_r>
 80137e6:	6813      	ldr	r3, [r2, #0]
 80137e8:	1c58      	adds	r0, r3, #1
 80137ea:	6010      	str	r0, [r2, #0]
 80137ec:	7019      	strb	r1, [r3, #0]
 80137ee:	4608      	mov	r0, r1
 80137f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137f4:	4770      	bx	lr

080137f6 <__sfputs_r>:
 80137f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137f8:	4606      	mov	r6, r0
 80137fa:	460f      	mov	r7, r1
 80137fc:	4614      	mov	r4, r2
 80137fe:	18d5      	adds	r5, r2, r3
 8013800:	42ac      	cmp	r4, r5
 8013802:	d101      	bne.n	8013808 <__sfputs_r+0x12>
 8013804:	2000      	movs	r0, #0
 8013806:	e007      	b.n	8013818 <__sfputs_r+0x22>
 8013808:	f814 1b01 	ldrb.w	r1, [r4], #1
 801380c:	463a      	mov	r2, r7
 801380e:	4630      	mov	r0, r6
 8013810:	f7ff ffda 	bl	80137c8 <__sfputc_r>
 8013814:	1c43      	adds	r3, r0, #1
 8013816:	d1f3      	bne.n	8013800 <__sfputs_r+0xa>
 8013818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801381c <_vfiprintf_r>:
 801381c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013820:	460d      	mov	r5, r1
 8013822:	b09d      	sub	sp, #116	@ 0x74
 8013824:	4614      	mov	r4, r2
 8013826:	4698      	mov	r8, r3
 8013828:	4606      	mov	r6, r0
 801382a:	b118      	cbz	r0, 8013834 <_vfiprintf_r+0x18>
 801382c:	6a03      	ldr	r3, [r0, #32]
 801382e:	b90b      	cbnz	r3, 8013834 <_vfiprintf_r+0x18>
 8013830:	f7fe fb8e 	bl	8011f50 <__sinit>
 8013834:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013836:	07d9      	lsls	r1, r3, #31
 8013838:	d405      	bmi.n	8013846 <_vfiprintf_r+0x2a>
 801383a:	89ab      	ldrh	r3, [r5, #12]
 801383c:	059a      	lsls	r2, r3, #22
 801383e:	d402      	bmi.n	8013846 <_vfiprintf_r+0x2a>
 8013840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013842:	f7fe fda0 	bl	8012386 <__retarget_lock_acquire_recursive>
 8013846:	89ab      	ldrh	r3, [r5, #12]
 8013848:	071b      	lsls	r3, r3, #28
 801384a:	d501      	bpl.n	8013850 <_vfiprintf_r+0x34>
 801384c:	692b      	ldr	r3, [r5, #16]
 801384e:	b99b      	cbnz	r3, 8013878 <_vfiprintf_r+0x5c>
 8013850:	4629      	mov	r1, r5
 8013852:	4630      	mov	r0, r6
 8013854:	f7fe fca4 	bl	80121a0 <__swsetup_r>
 8013858:	b170      	cbz	r0, 8013878 <_vfiprintf_r+0x5c>
 801385a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801385c:	07dc      	lsls	r4, r3, #31
 801385e:	d504      	bpl.n	801386a <_vfiprintf_r+0x4e>
 8013860:	f04f 30ff 	mov.w	r0, #4294967295
 8013864:	b01d      	add	sp, #116	@ 0x74
 8013866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801386a:	89ab      	ldrh	r3, [r5, #12]
 801386c:	0598      	lsls	r0, r3, #22
 801386e:	d4f7      	bmi.n	8013860 <_vfiprintf_r+0x44>
 8013870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013872:	f7fe fd89 	bl	8012388 <__retarget_lock_release_recursive>
 8013876:	e7f3      	b.n	8013860 <_vfiprintf_r+0x44>
 8013878:	2300      	movs	r3, #0
 801387a:	9309      	str	r3, [sp, #36]	@ 0x24
 801387c:	2320      	movs	r3, #32
 801387e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013882:	f8cd 800c 	str.w	r8, [sp, #12]
 8013886:	2330      	movs	r3, #48	@ 0x30
 8013888:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013a38 <_vfiprintf_r+0x21c>
 801388c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013890:	f04f 0901 	mov.w	r9, #1
 8013894:	4623      	mov	r3, r4
 8013896:	469a      	mov	sl, r3
 8013898:	f813 2b01 	ldrb.w	r2, [r3], #1
 801389c:	b10a      	cbz	r2, 80138a2 <_vfiprintf_r+0x86>
 801389e:	2a25      	cmp	r2, #37	@ 0x25
 80138a0:	d1f9      	bne.n	8013896 <_vfiprintf_r+0x7a>
 80138a2:	ebba 0b04 	subs.w	fp, sl, r4
 80138a6:	d00b      	beq.n	80138c0 <_vfiprintf_r+0xa4>
 80138a8:	465b      	mov	r3, fp
 80138aa:	4622      	mov	r2, r4
 80138ac:	4629      	mov	r1, r5
 80138ae:	4630      	mov	r0, r6
 80138b0:	f7ff ffa1 	bl	80137f6 <__sfputs_r>
 80138b4:	3001      	adds	r0, #1
 80138b6:	f000 80a7 	beq.w	8013a08 <_vfiprintf_r+0x1ec>
 80138ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80138bc:	445a      	add	r2, fp
 80138be:	9209      	str	r2, [sp, #36]	@ 0x24
 80138c0:	f89a 3000 	ldrb.w	r3, [sl]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	f000 809f 	beq.w	8013a08 <_vfiprintf_r+0x1ec>
 80138ca:	2300      	movs	r3, #0
 80138cc:	f04f 32ff 	mov.w	r2, #4294967295
 80138d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80138d4:	f10a 0a01 	add.w	sl, sl, #1
 80138d8:	9304      	str	r3, [sp, #16]
 80138da:	9307      	str	r3, [sp, #28]
 80138dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80138e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80138e2:	4654      	mov	r4, sl
 80138e4:	2205      	movs	r2, #5
 80138e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138ea:	4853      	ldr	r0, [pc, #332]	@ (8013a38 <_vfiprintf_r+0x21c>)
 80138ec:	f7ec fc70 	bl	80001d0 <memchr>
 80138f0:	9a04      	ldr	r2, [sp, #16]
 80138f2:	b9d8      	cbnz	r0, 801392c <_vfiprintf_r+0x110>
 80138f4:	06d1      	lsls	r1, r2, #27
 80138f6:	bf44      	itt	mi
 80138f8:	2320      	movmi	r3, #32
 80138fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80138fe:	0713      	lsls	r3, r2, #28
 8013900:	bf44      	itt	mi
 8013902:	232b      	movmi	r3, #43	@ 0x2b
 8013904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013908:	f89a 3000 	ldrb.w	r3, [sl]
 801390c:	2b2a      	cmp	r3, #42	@ 0x2a
 801390e:	d015      	beq.n	801393c <_vfiprintf_r+0x120>
 8013910:	9a07      	ldr	r2, [sp, #28]
 8013912:	4654      	mov	r4, sl
 8013914:	2000      	movs	r0, #0
 8013916:	f04f 0c0a 	mov.w	ip, #10
 801391a:	4621      	mov	r1, r4
 801391c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013920:	3b30      	subs	r3, #48	@ 0x30
 8013922:	2b09      	cmp	r3, #9
 8013924:	d94b      	bls.n	80139be <_vfiprintf_r+0x1a2>
 8013926:	b1b0      	cbz	r0, 8013956 <_vfiprintf_r+0x13a>
 8013928:	9207      	str	r2, [sp, #28]
 801392a:	e014      	b.n	8013956 <_vfiprintf_r+0x13a>
 801392c:	eba0 0308 	sub.w	r3, r0, r8
 8013930:	fa09 f303 	lsl.w	r3, r9, r3
 8013934:	4313      	orrs	r3, r2
 8013936:	9304      	str	r3, [sp, #16]
 8013938:	46a2      	mov	sl, r4
 801393a:	e7d2      	b.n	80138e2 <_vfiprintf_r+0xc6>
 801393c:	9b03      	ldr	r3, [sp, #12]
 801393e:	1d19      	adds	r1, r3, #4
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	9103      	str	r1, [sp, #12]
 8013944:	2b00      	cmp	r3, #0
 8013946:	bfbb      	ittet	lt
 8013948:	425b      	neglt	r3, r3
 801394a:	f042 0202 	orrlt.w	r2, r2, #2
 801394e:	9307      	strge	r3, [sp, #28]
 8013950:	9307      	strlt	r3, [sp, #28]
 8013952:	bfb8      	it	lt
 8013954:	9204      	strlt	r2, [sp, #16]
 8013956:	7823      	ldrb	r3, [r4, #0]
 8013958:	2b2e      	cmp	r3, #46	@ 0x2e
 801395a:	d10a      	bne.n	8013972 <_vfiprintf_r+0x156>
 801395c:	7863      	ldrb	r3, [r4, #1]
 801395e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013960:	d132      	bne.n	80139c8 <_vfiprintf_r+0x1ac>
 8013962:	9b03      	ldr	r3, [sp, #12]
 8013964:	1d1a      	adds	r2, r3, #4
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	9203      	str	r2, [sp, #12]
 801396a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801396e:	3402      	adds	r4, #2
 8013970:	9305      	str	r3, [sp, #20]
 8013972:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013a48 <_vfiprintf_r+0x22c>
 8013976:	7821      	ldrb	r1, [r4, #0]
 8013978:	2203      	movs	r2, #3
 801397a:	4650      	mov	r0, sl
 801397c:	f7ec fc28 	bl	80001d0 <memchr>
 8013980:	b138      	cbz	r0, 8013992 <_vfiprintf_r+0x176>
 8013982:	9b04      	ldr	r3, [sp, #16]
 8013984:	eba0 000a 	sub.w	r0, r0, sl
 8013988:	2240      	movs	r2, #64	@ 0x40
 801398a:	4082      	lsls	r2, r0
 801398c:	4313      	orrs	r3, r2
 801398e:	3401      	adds	r4, #1
 8013990:	9304      	str	r3, [sp, #16]
 8013992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013996:	4829      	ldr	r0, [pc, #164]	@ (8013a3c <_vfiprintf_r+0x220>)
 8013998:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801399c:	2206      	movs	r2, #6
 801399e:	f7ec fc17 	bl	80001d0 <memchr>
 80139a2:	2800      	cmp	r0, #0
 80139a4:	d03f      	beq.n	8013a26 <_vfiprintf_r+0x20a>
 80139a6:	4b26      	ldr	r3, [pc, #152]	@ (8013a40 <_vfiprintf_r+0x224>)
 80139a8:	bb1b      	cbnz	r3, 80139f2 <_vfiprintf_r+0x1d6>
 80139aa:	9b03      	ldr	r3, [sp, #12]
 80139ac:	3307      	adds	r3, #7
 80139ae:	f023 0307 	bic.w	r3, r3, #7
 80139b2:	3308      	adds	r3, #8
 80139b4:	9303      	str	r3, [sp, #12]
 80139b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139b8:	443b      	add	r3, r7
 80139ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80139bc:	e76a      	b.n	8013894 <_vfiprintf_r+0x78>
 80139be:	fb0c 3202 	mla	r2, ip, r2, r3
 80139c2:	460c      	mov	r4, r1
 80139c4:	2001      	movs	r0, #1
 80139c6:	e7a8      	b.n	801391a <_vfiprintf_r+0xfe>
 80139c8:	2300      	movs	r3, #0
 80139ca:	3401      	adds	r4, #1
 80139cc:	9305      	str	r3, [sp, #20]
 80139ce:	4619      	mov	r1, r3
 80139d0:	f04f 0c0a 	mov.w	ip, #10
 80139d4:	4620      	mov	r0, r4
 80139d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139da:	3a30      	subs	r2, #48	@ 0x30
 80139dc:	2a09      	cmp	r2, #9
 80139de:	d903      	bls.n	80139e8 <_vfiprintf_r+0x1cc>
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d0c6      	beq.n	8013972 <_vfiprintf_r+0x156>
 80139e4:	9105      	str	r1, [sp, #20]
 80139e6:	e7c4      	b.n	8013972 <_vfiprintf_r+0x156>
 80139e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80139ec:	4604      	mov	r4, r0
 80139ee:	2301      	movs	r3, #1
 80139f0:	e7f0      	b.n	80139d4 <_vfiprintf_r+0x1b8>
 80139f2:	ab03      	add	r3, sp, #12
 80139f4:	9300      	str	r3, [sp, #0]
 80139f6:	462a      	mov	r2, r5
 80139f8:	4b12      	ldr	r3, [pc, #72]	@ (8013a44 <_vfiprintf_r+0x228>)
 80139fa:	a904      	add	r1, sp, #16
 80139fc:	4630      	mov	r0, r6
 80139fe:	f7fd fe65 	bl	80116cc <_printf_float>
 8013a02:	4607      	mov	r7, r0
 8013a04:	1c78      	adds	r0, r7, #1
 8013a06:	d1d6      	bne.n	80139b6 <_vfiprintf_r+0x19a>
 8013a08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013a0a:	07d9      	lsls	r1, r3, #31
 8013a0c:	d405      	bmi.n	8013a1a <_vfiprintf_r+0x1fe>
 8013a0e:	89ab      	ldrh	r3, [r5, #12]
 8013a10:	059a      	lsls	r2, r3, #22
 8013a12:	d402      	bmi.n	8013a1a <_vfiprintf_r+0x1fe>
 8013a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013a16:	f7fe fcb7 	bl	8012388 <__retarget_lock_release_recursive>
 8013a1a:	89ab      	ldrh	r3, [r5, #12]
 8013a1c:	065b      	lsls	r3, r3, #25
 8013a1e:	f53f af1f 	bmi.w	8013860 <_vfiprintf_r+0x44>
 8013a22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a24:	e71e      	b.n	8013864 <_vfiprintf_r+0x48>
 8013a26:	ab03      	add	r3, sp, #12
 8013a28:	9300      	str	r3, [sp, #0]
 8013a2a:	462a      	mov	r2, r5
 8013a2c:	4b05      	ldr	r3, [pc, #20]	@ (8013a44 <_vfiprintf_r+0x228>)
 8013a2e:	a904      	add	r1, sp, #16
 8013a30:	4630      	mov	r0, r6
 8013a32:	f7fe f8e3 	bl	8011bfc <_printf_i>
 8013a36:	e7e4      	b.n	8013a02 <_vfiprintf_r+0x1e6>
 8013a38:	08015f8a 	.word	0x08015f8a
 8013a3c:	08015f94 	.word	0x08015f94
 8013a40:	080116cd 	.word	0x080116cd
 8013a44:	080137f7 	.word	0x080137f7
 8013a48:	08015f90 	.word	0x08015f90

08013a4c <__sflush_r>:
 8013a4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a54:	0716      	lsls	r6, r2, #28
 8013a56:	4605      	mov	r5, r0
 8013a58:	460c      	mov	r4, r1
 8013a5a:	d454      	bmi.n	8013b06 <__sflush_r+0xba>
 8013a5c:	684b      	ldr	r3, [r1, #4]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	dc02      	bgt.n	8013a68 <__sflush_r+0x1c>
 8013a62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	dd48      	ble.n	8013afa <__sflush_r+0xae>
 8013a68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013a6a:	2e00      	cmp	r6, #0
 8013a6c:	d045      	beq.n	8013afa <__sflush_r+0xae>
 8013a6e:	2300      	movs	r3, #0
 8013a70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013a74:	682f      	ldr	r7, [r5, #0]
 8013a76:	6a21      	ldr	r1, [r4, #32]
 8013a78:	602b      	str	r3, [r5, #0]
 8013a7a:	d030      	beq.n	8013ade <__sflush_r+0x92>
 8013a7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013a7e:	89a3      	ldrh	r3, [r4, #12]
 8013a80:	0759      	lsls	r1, r3, #29
 8013a82:	d505      	bpl.n	8013a90 <__sflush_r+0x44>
 8013a84:	6863      	ldr	r3, [r4, #4]
 8013a86:	1ad2      	subs	r2, r2, r3
 8013a88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013a8a:	b10b      	cbz	r3, 8013a90 <__sflush_r+0x44>
 8013a8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013a8e:	1ad2      	subs	r2, r2, r3
 8013a90:	2300      	movs	r3, #0
 8013a92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013a94:	6a21      	ldr	r1, [r4, #32]
 8013a96:	4628      	mov	r0, r5
 8013a98:	47b0      	blx	r6
 8013a9a:	1c43      	adds	r3, r0, #1
 8013a9c:	89a3      	ldrh	r3, [r4, #12]
 8013a9e:	d106      	bne.n	8013aae <__sflush_r+0x62>
 8013aa0:	6829      	ldr	r1, [r5, #0]
 8013aa2:	291d      	cmp	r1, #29
 8013aa4:	d82b      	bhi.n	8013afe <__sflush_r+0xb2>
 8013aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8013b50 <__sflush_r+0x104>)
 8013aa8:	40ca      	lsrs	r2, r1
 8013aaa:	07d6      	lsls	r6, r2, #31
 8013aac:	d527      	bpl.n	8013afe <__sflush_r+0xb2>
 8013aae:	2200      	movs	r2, #0
 8013ab0:	6062      	str	r2, [r4, #4]
 8013ab2:	04d9      	lsls	r1, r3, #19
 8013ab4:	6922      	ldr	r2, [r4, #16]
 8013ab6:	6022      	str	r2, [r4, #0]
 8013ab8:	d504      	bpl.n	8013ac4 <__sflush_r+0x78>
 8013aba:	1c42      	adds	r2, r0, #1
 8013abc:	d101      	bne.n	8013ac2 <__sflush_r+0x76>
 8013abe:	682b      	ldr	r3, [r5, #0]
 8013ac0:	b903      	cbnz	r3, 8013ac4 <__sflush_r+0x78>
 8013ac2:	6560      	str	r0, [r4, #84]	@ 0x54
 8013ac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013ac6:	602f      	str	r7, [r5, #0]
 8013ac8:	b1b9      	cbz	r1, 8013afa <__sflush_r+0xae>
 8013aca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013ace:	4299      	cmp	r1, r3
 8013ad0:	d002      	beq.n	8013ad8 <__sflush_r+0x8c>
 8013ad2:	4628      	mov	r0, r5
 8013ad4:	f7ff fab4 	bl	8013040 <_free_r>
 8013ad8:	2300      	movs	r3, #0
 8013ada:	6363      	str	r3, [r4, #52]	@ 0x34
 8013adc:	e00d      	b.n	8013afa <__sflush_r+0xae>
 8013ade:	2301      	movs	r3, #1
 8013ae0:	4628      	mov	r0, r5
 8013ae2:	47b0      	blx	r6
 8013ae4:	4602      	mov	r2, r0
 8013ae6:	1c50      	adds	r0, r2, #1
 8013ae8:	d1c9      	bne.n	8013a7e <__sflush_r+0x32>
 8013aea:	682b      	ldr	r3, [r5, #0]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d0c6      	beq.n	8013a7e <__sflush_r+0x32>
 8013af0:	2b1d      	cmp	r3, #29
 8013af2:	d001      	beq.n	8013af8 <__sflush_r+0xac>
 8013af4:	2b16      	cmp	r3, #22
 8013af6:	d11e      	bne.n	8013b36 <__sflush_r+0xea>
 8013af8:	602f      	str	r7, [r5, #0]
 8013afa:	2000      	movs	r0, #0
 8013afc:	e022      	b.n	8013b44 <__sflush_r+0xf8>
 8013afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b02:	b21b      	sxth	r3, r3
 8013b04:	e01b      	b.n	8013b3e <__sflush_r+0xf2>
 8013b06:	690f      	ldr	r7, [r1, #16]
 8013b08:	2f00      	cmp	r7, #0
 8013b0a:	d0f6      	beq.n	8013afa <__sflush_r+0xae>
 8013b0c:	0793      	lsls	r3, r2, #30
 8013b0e:	680e      	ldr	r6, [r1, #0]
 8013b10:	bf08      	it	eq
 8013b12:	694b      	ldreq	r3, [r1, #20]
 8013b14:	600f      	str	r7, [r1, #0]
 8013b16:	bf18      	it	ne
 8013b18:	2300      	movne	r3, #0
 8013b1a:	eba6 0807 	sub.w	r8, r6, r7
 8013b1e:	608b      	str	r3, [r1, #8]
 8013b20:	f1b8 0f00 	cmp.w	r8, #0
 8013b24:	dde9      	ble.n	8013afa <__sflush_r+0xae>
 8013b26:	6a21      	ldr	r1, [r4, #32]
 8013b28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013b2a:	4643      	mov	r3, r8
 8013b2c:	463a      	mov	r2, r7
 8013b2e:	4628      	mov	r0, r5
 8013b30:	47b0      	blx	r6
 8013b32:	2800      	cmp	r0, #0
 8013b34:	dc08      	bgt.n	8013b48 <__sflush_r+0xfc>
 8013b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b3e:	81a3      	strh	r3, [r4, #12]
 8013b40:	f04f 30ff 	mov.w	r0, #4294967295
 8013b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b48:	4407      	add	r7, r0
 8013b4a:	eba8 0800 	sub.w	r8, r8, r0
 8013b4e:	e7e7      	b.n	8013b20 <__sflush_r+0xd4>
 8013b50:	20400001 	.word	0x20400001

08013b54 <_fflush_r>:
 8013b54:	b538      	push	{r3, r4, r5, lr}
 8013b56:	690b      	ldr	r3, [r1, #16]
 8013b58:	4605      	mov	r5, r0
 8013b5a:	460c      	mov	r4, r1
 8013b5c:	b913      	cbnz	r3, 8013b64 <_fflush_r+0x10>
 8013b5e:	2500      	movs	r5, #0
 8013b60:	4628      	mov	r0, r5
 8013b62:	bd38      	pop	{r3, r4, r5, pc}
 8013b64:	b118      	cbz	r0, 8013b6e <_fflush_r+0x1a>
 8013b66:	6a03      	ldr	r3, [r0, #32]
 8013b68:	b90b      	cbnz	r3, 8013b6e <_fflush_r+0x1a>
 8013b6a:	f7fe f9f1 	bl	8011f50 <__sinit>
 8013b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d0f3      	beq.n	8013b5e <_fflush_r+0xa>
 8013b76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013b78:	07d0      	lsls	r0, r2, #31
 8013b7a:	d404      	bmi.n	8013b86 <_fflush_r+0x32>
 8013b7c:	0599      	lsls	r1, r3, #22
 8013b7e:	d402      	bmi.n	8013b86 <_fflush_r+0x32>
 8013b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013b82:	f7fe fc00 	bl	8012386 <__retarget_lock_acquire_recursive>
 8013b86:	4628      	mov	r0, r5
 8013b88:	4621      	mov	r1, r4
 8013b8a:	f7ff ff5f 	bl	8013a4c <__sflush_r>
 8013b8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013b90:	07da      	lsls	r2, r3, #31
 8013b92:	4605      	mov	r5, r0
 8013b94:	d4e4      	bmi.n	8013b60 <_fflush_r+0xc>
 8013b96:	89a3      	ldrh	r3, [r4, #12]
 8013b98:	059b      	lsls	r3, r3, #22
 8013b9a:	d4e1      	bmi.n	8013b60 <_fflush_r+0xc>
 8013b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013b9e:	f7fe fbf3 	bl	8012388 <__retarget_lock_release_recursive>
 8013ba2:	e7dd      	b.n	8013b60 <_fflush_r+0xc>

08013ba4 <__swhatbuf_r>:
 8013ba4:	b570      	push	{r4, r5, r6, lr}
 8013ba6:	460c      	mov	r4, r1
 8013ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bac:	2900      	cmp	r1, #0
 8013bae:	b096      	sub	sp, #88	@ 0x58
 8013bb0:	4615      	mov	r5, r2
 8013bb2:	461e      	mov	r6, r3
 8013bb4:	da0d      	bge.n	8013bd2 <__swhatbuf_r+0x2e>
 8013bb6:	89a3      	ldrh	r3, [r4, #12]
 8013bb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013bbc:	f04f 0100 	mov.w	r1, #0
 8013bc0:	bf14      	ite	ne
 8013bc2:	2340      	movne	r3, #64	@ 0x40
 8013bc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013bc8:	2000      	movs	r0, #0
 8013bca:	6031      	str	r1, [r6, #0]
 8013bcc:	602b      	str	r3, [r5, #0]
 8013bce:	b016      	add	sp, #88	@ 0x58
 8013bd0:	bd70      	pop	{r4, r5, r6, pc}
 8013bd2:	466a      	mov	r2, sp
 8013bd4:	f000 f848 	bl	8013c68 <_fstat_r>
 8013bd8:	2800      	cmp	r0, #0
 8013bda:	dbec      	blt.n	8013bb6 <__swhatbuf_r+0x12>
 8013bdc:	9901      	ldr	r1, [sp, #4]
 8013bde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013be2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013be6:	4259      	negs	r1, r3
 8013be8:	4159      	adcs	r1, r3
 8013bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013bee:	e7eb      	b.n	8013bc8 <__swhatbuf_r+0x24>

08013bf0 <__smakebuf_r>:
 8013bf0:	898b      	ldrh	r3, [r1, #12]
 8013bf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013bf4:	079d      	lsls	r5, r3, #30
 8013bf6:	4606      	mov	r6, r0
 8013bf8:	460c      	mov	r4, r1
 8013bfa:	d507      	bpl.n	8013c0c <__smakebuf_r+0x1c>
 8013bfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013c00:	6023      	str	r3, [r4, #0]
 8013c02:	6123      	str	r3, [r4, #16]
 8013c04:	2301      	movs	r3, #1
 8013c06:	6163      	str	r3, [r4, #20]
 8013c08:	b003      	add	sp, #12
 8013c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c0c:	ab01      	add	r3, sp, #4
 8013c0e:	466a      	mov	r2, sp
 8013c10:	f7ff ffc8 	bl	8013ba4 <__swhatbuf_r>
 8013c14:	9f00      	ldr	r7, [sp, #0]
 8013c16:	4605      	mov	r5, r0
 8013c18:	4639      	mov	r1, r7
 8013c1a:	4630      	mov	r0, r6
 8013c1c:	f7fd fc2a 	bl	8011474 <_malloc_r>
 8013c20:	b948      	cbnz	r0, 8013c36 <__smakebuf_r+0x46>
 8013c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c26:	059a      	lsls	r2, r3, #22
 8013c28:	d4ee      	bmi.n	8013c08 <__smakebuf_r+0x18>
 8013c2a:	f023 0303 	bic.w	r3, r3, #3
 8013c2e:	f043 0302 	orr.w	r3, r3, #2
 8013c32:	81a3      	strh	r3, [r4, #12]
 8013c34:	e7e2      	b.n	8013bfc <__smakebuf_r+0xc>
 8013c36:	89a3      	ldrh	r3, [r4, #12]
 8013c38:	6020      	str	r0, [r4, #0]
 8013c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c3e:	81a3      	strh	r3, [r4, #12]
 8013c40:	9b01      	ldr	r3, [sp, #4]
 8013c42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013c46:	b15b      	cbz	r3, 8013c60 <__smakebuf_r+0x70>
 8013c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c4c:	4630      	mov	r0, r6
 8013c4e:	f000 f81d 	bl	8013c8c <_isatty_r>
 8013c52:	b128      	cbz	r0, 8013c60 <__smakebuf_r+0x70>
 8013c54:	89a3      	ldrh	r3, [r4, #12]
 8013c56:	f023 0303 	bic.w	r3, r3, #3
 8013c5a:	f043 0301 	orr.w	r3, r3, #1
 8013c5e:	81a3      	strh	r3, [r4, #12]
 8013c60:	89a3      	ldrh	r3, [r4, #12]
 8013c62:	431d      	orrs	r5, r3
 8013c64:	81a5      	strh	r5, [r4, #12]
 8013c66:	e7cf      	b.n	8013c08 <__smakebuf_r+0x18>

08013c68 <_fstat_r>:
 8013c68:	b538      	push	{r3, r4, r5, lr}
 8013c6a:	4d07      	ldr	r5, [pc, #28]	@ (8013c88 <_fstat_r+0x20>)
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	4604      	mov	r4, r0
 8013c70:	4608      	mov	r0, r1
 8013c72:	4611      	mov	r1, r2
 8013c74:	602b      	str	r3, [r5, #0]
 8013c76:	f7f7 fb7f 	bl	800b378 <_fstat>
 8013c7a:	1c43      	adds	r3, r0, #1
 8013c7c:	d102      	bne.n	8013c84 <_fstat_r+0x1c>
 8013c7e:	682b      	ldr	r3, [r5, #0]
 8013c80:	b103      	cbz	r3, 8013c84 <_fstat_r+0x1c>
 8013c82:	6023      	str	r3, [r4, #0]
 8013c84:	bd38      	pop	{r3, r4, r5, pc}
 8013c86:	bf00      	nop
 8013c88:	20000c00 	.word	0x20000c00

08013c8c <_isatty_r>:
 8013c8c:	b538      	push	{r3, r4, r5, lr}
 8013c8e:	4d06      	ldr	r5, [pc, #24]	@ (8013ca8 <_isatty_r+0x1c>)
 8013c90:	2300      	movs	r3, #0
 8013c92:	4604      	mov	r4, r0
 8013c94:	4608      	mov	r0, r1
 8013c96:	602b      	str	r3, [r5, #0]
 8013c98:	f7f7 fb7e 	bl	800b398 <_isatty>
 8013c9c:	1c43      	adds	r3, r0, #1
 8013c9e:	d102      	bne.n	8013ca6 <_isatty_r+0x1a>
 8013ca0:	682b      	ldr	r3, [r5, #0]
 8013ca2:	b103      	cbz	r3, 8013ca6 <_isatty_r+0x1a>
 8013ca4:	6023      	str	r3, [r4, #0]
 8013ca6:	bd38      	pop	{r3, r4, r5, pc}
 8013ca8:	20000c00 	.word	0x20000c00

08013cac <memcpy>:
 8013cac:	440a      	add	r2, r1
 8013cae:	4291      	cmp	r1, r2
 8013cb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8013cb4:	d100      	bne.n	8013cb8 <memcpy+0xc>
 8013cb6:	4770      	bx	lr
 8013cb8:	b510      	push	{r4, lr}
 8013cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013cc2:	4291      	cmp	r1, r2
 8013cc4:	d1f9      	bne.n	8013cba <memcpy+0xe>
 8013cc6:	bd10      	pop	{r4, pc}

08013cc8 <__assert_func>:
 8013cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013cca:	4614      	mov	r4, r2
 8013ccc:	461a      	mov	r2, r3
 8013cce:	4b09      	ldr	r3, [pc, #36]	@ (8013cf4 <__assert_func+0x2c>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	4605      	mov	r5, r0
 8013cd4:	68d8      	ldr	r0, [r3, #12]
 8013cd6:	b14c      	cbz	r4, 8013cec <__assert_func+0x24>
 8013cd8:	4b07      	ldr	r3, [pc, #28]	@ (8013cf8 <__assert_func+0x30>)
 8013cda:	9100      	str	r1, [sp, #0]
 8013cdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013ce0:	4906      	ldr	r1, [pc, #24]	@ (8013cfc <__assert_func+0x34>)
 8013ce2:	462b      	mov	r3, r5
 8013ce4:	f000 f842 	bl	8013d6c <fiprintf>
 8013ce8:	f000 f852 	bl	8013d90 <abort>
 8013cec:	4b04      	ldr	r3, [pc, #16]	@ (8013d00 <__assert_func+0x38>)
 8013cee:	461c      	mov	r4, r3
 8013cf0:	e7f3      	b.n	8013cda <__assert_func+0x12>
 8013cf2:	bf00      	nop
 8013cf4:	200000f8 	.word	0x200000f8
 8013cf8:	08015fa5 	.word	0x08015fa5
 8013cfc:	08015fb2 	.word	0x08015fb2
 8013d00:	08015fe0 	.word	0x08015fe0

08013d04 <_calloc_r>:
 8013d04:	b570      	push	{r4, r5, r6, lr}
 8013d06:	fba1 5402 	umull	r5, r4, r1, r2
 8013d0a:	b934      	cbnz	r4, 8013d1a <_calloc_r+0x16>
 8013d0c:	4629      	mov	r1, r5
 8013d0e:	f7fd fbb1 	bl	8011474 <_malloc_r>
 8013d12:	4606      	mov	r6, r0
 8013d14:	b928      	cbnz	r0, 8013d22 <_calloc_r+0x1e>
 8013d16:	4630      	mov	r0, r6
 8013d18:	bd70      	pop	{r4, r5, r6, pc}
 8013d1a:	220c      	movs	r2, #12
 8013d1c:	6002      	str	r2, [r0, #0]
 8013d1e:	2600      	movs	r6, #0
 8013d20:	e7f9      	b.n	8013d16 <_calloc_r+0x12>
 8013d22:	462a      	mov	r2, r5
 8013d24:	4621      	mov	r1, r4
 8013d26:	f7fe faa1 	bl	801226c <memset>
 8013d2a:	e7f4      	b.n	8013d16 <_calloc_r+0x12>

08013d2c <__ascii_mbtowc>:
 8013d2c:	b082      	sub	sp, #8
 8013d2e:	b901      	cbnz	r1, 8013d32 <__ascii_mbtowc+0x6>
 8013d30:	a901      	add	r1, sp, #4
 8013d32:	b142      	cbz	r2, 8013d46 <__ascii_mbtowc+0x1a>
 8013d34:	b14b      	cbz	r3, 8013d4a <__ascii_mbtowc+0x1e>
 8013d36:	7813      	ldrb	r3, [r2, #0]
 8013d38:	600b      	str	r3, [r1, #0]
 8013d3a:	7812      	ldrb	r2, [r2, #0]
 8013d3c:	1e10      	subs	r0, r2, #0
 8013d3e:	bf18      	it	ne
 8013d40:	2001      	movne	r0, #1
 8013d42:	b002      	add	sp, #8
 8013d44:	4770      	bx	lr
 8013d46:	4610      	mov	r0, r2
 8013d48:	e7fb      	b.n	8013d42 <__ascii_mbtowc+0x16>
 8013d4a:	f06f 0001 	mvn.w	r0, #1
 8013d4e:	e7f8      	b.n	8013d42 <__ascii_mbtowc+0x16>

08013d50 <__ascii_wctomb>:
 8013d50:	4603      	mov	r3, r0
 8013d52:	4608      	mov	r0, r1
 8013d54:	b141      	cbz	r1, 8013d68 <__ascii_wctomb+0x18>
 8013d56:	2aff      	cmp	r2, #255	@ 0xff
 8013d58:	d904      	bls.n	8013d64 <__ascii_wctomb+0x14>
 8013d5a:	228a      	movs	r2, #138	@ 0x8a
 8013d5c:	601a      	str	r2, [r3, #0]
 8013d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8013d62:	4770      	bx	lr
 8013d64:	700a      	strb	r2, [r1, #0]
 8013d66:	2001      	movs	r0, #1
 8013d68:	4770      	bx	lr
	...

08013d6c <fiprintf>:
 8013d6c:	b40e      	push	{r1, r2, r3}
 8013d6e:	b503      	push	{r0, r1, lr}
 8013d70:	4601      	mov	r1, r0
 8013d72:	ab03      	add	r3, sp, #12
 8013d74:	4805      	ldr	r0, [pc, #20]	@ (8013d8c <fiprintf+0x20>)
 8013d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d7a:	6800      	ldr	r0, [r0, #0]
 8013d7c:	9301      	str	r3, [sp, #4]
 8013d7e:	f7ff fd4d 	bl	801381c <_vfiprintf_r>
 8013d82:	b002      	add	sp, #8
 8013d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d88:	b003      	add	sp, #12
 8013d8a:	4770      	bx	lr
 8013d8c:	200000f8 	.word	0x200000f8

08013d90 <abort>:
 8013d90:	b508      	push	{r3, lr}
 8013d92:	2006      	movs	r0, #6
 8013d94:	f000 f82c 	bl	8013df0 <raise>
 8013d98:	2001      	movs	r0, #1
 8013d9a:	f7f7 fa9d 	bl	800b2d8 <_exit>

08013d9e <_raise_r>:
 8013d9e:	291f      	cmp	r1, #31
 8013da0:	b538      	push	{r3, r4, r5, lr}
 8013da2:	4605      	mov	r5, r0
 8013da4:	460c      	mov	r4, r1
 8013da6:	d904      	bls.n	8013db2 <_raise_r+0x14>
 8013da8:	2316      	movs	r3, #22
 8013daa:	6003      	str	r3, [r0, #0]
 8013dac:	f04f 30ff 	mov.w	r0, #4294967295
 8013db0:	bd38      	pop	{r3, r4, r5, pc}
 8013db2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013db4:	b112      	cbz	r2, 8013dbc <_raise_r+0x1e>
 8013db6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013dba:	b94b      	cbnz	r3, 8013dd0 <_raise_r+0x32>
 8013dbc:	4628      	mov	r0, r5
 8013dbe:	f000 f831 	bl	8013e24 <_getpid_r>
 8013dc2:	4622      	mov	r2, r4
 8013dc4:	4601      	mov	r1, r0
 8013dc6:	4628      	mov	r0, r5
 8013dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013dcc:	f000 b818 	b.w	8013e00 <_kill_r>
 8013dd0:	2b01      	cmp	r3, #1
 8013dd2:	d00a      	beq.n	8013dea <_raise_r+0x4c>
 8013dd4:	1c59      	adds	r1, r3, #1
 8013dd6:	d103      	bne.n	8013de0 <_raise_r+0x42>
 8013dd8:	2316      	movs	r3, #22
 8013dda:	6003      	str	r3, [r0, #0]
 8013ddc:	2001      	movs	r0, #1
 8013dde:	e7e7      	b.n	8013db0 <_raise_r+0x12>
 8013de0:	2100      	movs	r1, #0
 8013de2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013de6:	4620      	mov	r0, r4
 8013de8:	4798      	blx	r3
 8013dea:	2000      	movs	r0, #0
 8013dec:	e7e0      	b.n	8013db0 <_raise_r+0x12>
	...

08013df0 <raise>:
 8013df0:	4b02      	ldr	r3, [pc, #8]	@ (8013dfc <raise+0xc>)
 8013df2:	4601      	mov	r1, r0
 8013df4:	6818      	ldr	r0, [r3, #0]
 8013df6:	f7ff bfd2 	b.w	8013d9e <_raise_r>
 8013dfa:	bf00      	nop
 8013dfc:	200000f8 	.word	0x200000f8

08013e00 <_kill_r>:
 8013e00:	b538      	push	{r3, r4, r5, lr}
 8013e02:	4d07      	ldr	r5, [pc, #28]	@ (8013e20 <_kill_r+0x20>)
 8013e04:	2300      	movs	r3, #0
 8013e06:	4604      	mov	r4, r0
 8013e08:	4608      	mov	r0, r1
 8013e0a:	4611      	mov	r1, r2
 8013e0c:	602b      	str	r3, [r5, #0]
 8013e0e:	f7f7 fa53 	bl	800b2b8 <_kill>
 8013e12:	1c43      	adds	r3, r0, #1
 8013e14:	d102      	bne.n	8013e1c <_kill_r+0x1c>
 8013e16:	682b      	ldr	r3, [r5, #0]
 8013e18:	b103      	cbz	r3, 8013e1c <_kill_r+0x1c>
 8013e1a:	6023      	str	r3, [r4, #0]
 8013e1c:	bd38      	pop	{r3, r4, r5, pc}
 8013e1e:	bf00      	nop
 8013e20:	20000c00 	.word	0x20000c00

08013e24 <_getpid_r>:
 8013e24:	f7f7 ba40 	b.w	800b2a8 <_getpid>

08013e28 <asin>:
 8013e28:	b538      	push	{r3, r4, r5, lr}
 8013e2a:	ed2d 8b02 	vpush	{d8}
 8013e2e:	ec55 4b10 	vmov	r4, r5, d0
 8013e32:	f000 f911 	bl	8014058 <__ieee754_asin>
 8013e36:	4622      	mov	r2, r4
 8013e38:	462b      	mov	r3, r5
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	4629      	mov	r1, r5
 8013e3e:	eeb0 8a40 	vmov.f32	s16, s0
 8013e42:	eef0 8a60 	vmov.f32	s17, s1
 8013e46:	f7ec fe71 	bl	8000b2c <__aeabi_dcmpun>
 8013e4a:	b9a8      	cbnz	r0, 8013e78 <asin+0x50>
 8013e4c:	ec45 4b10 	vmov	d0, r4, r5
 8013e50:	f000 f820 	bl	8013e94 <fabs>
 8013e54:	4b0c      	ldr	r3, [pc, #48]	@ (8013e88 <asin+0x60>)
 8013e56:	ec51 0b10 	vmov	r0, r1, d0
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	f7ec fe5c 	bl	8000b18 <__aeabi_dcmpgt>
 8013e60:	b150      	cbz	r0, 8013e78 <asin+0x50>
 8013e62:	f7fe fa65 	bl	8012330 <__errno>
 8013e66:	ecbd 8b02 	vpop	{d8}
 8013e6a:	2321      	movs	r3, #33	@ 0x21
 8013e6c:	6003      	str	r3, [r0, #0]
 8013e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e72:	4806      	ldr	r0, [pc, #24]	@ (8013e8c <asin+0x64>)
 8013e74:	f000 b818 	b.w	8013ea8 <nan>
 8013e78:	eeb0 0a48 	vmov.f32	s0, s16
 8013e7c:	eef0 0a68 	vmov.f32	s1, s17
 8013e80:	ecbd 8b02 	vpop	{d8}
 8013e84:	bd38      	pop	{r3, r4, r5, pc}
 8013e86:	bf00      	nop
 8013e88:	3ff00000 	.word	0x3ff00000
 8013e8c:	08015fe0 	.word	0x08015fe0

08013e90 <atan2>:
 8013e90:	f000 bae6 	b.w	8014460 <__ieee754_atan2>

08013e94 <fabs>:
 8013e94:	ec51 0b10 	vmov	r0, r1, d0
 8013e98:	4602      	mov	r2, r0
 8013e9a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013e9e:	ec43 2b10 	vmov	d0, r2, r3
 8013ea2:	4770      	bx	lr
 8013ea4:	0000      	movs	r0, r0
	...

08013ea8 <nan>:
 8013ea8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013eb0 <nan+0x8>
 8013eac:	4770      	bx	lr
 8013eae:	bf00      	nop
 8013eb0:	00000000 	.word	0x00000000
 8013eb4:	7ff80000 	.word	0x7ff80000

08013eb8 <fmax>:
 8013eb8:	b508      	push	{r3, lr}
 8013eba:	ed2d 8b04 	vpush	{d8-d9}
 8013ebe:	eeb0 8a40 	vmov.f32	s16, s0
 8013ec2:	eef0 8a60 	vmov.f32	s17, s1
 8013ec6:	eeb0 9a41 	vmov.f32	s18, s2
 8013eca:	eef0 9a61 	vmov.f32	s19, s3
 8013ece:	f000 f847 	bl	8013f60 <__fpclassifyd>
 8013ed2:	b950      	cbnz	r0, 8013eea <fmax+0x32>
 8013ed4:	eeb0 8a49 	vmov.f32	s16, s18
 8013ed8:	eef0 8a69 	vmov.f32	s17, s19
 8013edc:	eeb0 0a48 	vmov.f32	s0, s16
 8013ee0:	eef0 0a68 	vmov.f32	s1, s17
 8013ee4:	ecbd 8b04 	vpop	{d8-d9}
 8013ee8:	bd08      	pop	{r3, pc}
 8013eea:	eeb0 0a49 	vmov.f32	s0, s18
 8013eee:	eef0 0a69 	vmov.f32	s1, s19
 8013ef2:	f000 f835 	bl	8013f60 <__fpclassifyd>
 8013ef6:	2800      	cmp	r0, #0
 8013ef8:	d0f0      	beq.n	8013edc <fmax+0x24>
 8013efa:	ec53 2b19 	vmov	r2, r3, d9
 8013efe:	ec51 0b18 	vmov	r0, r1, d8
 8013f02:	f7ec fe09 	bl	8000b18 <__aeabi_dcmpgt>
 8013f06:	2800      	cmp	r0, #0
 8013f08:	d0e4      	beq.n	8013ed4 <fmax+0x1c>
 8013f0a:	e7e7      	b.n	8013edc <fmax+0x24>

08013f0c <fmin>:
 8013f0c:	b508      	push	{r3, lr}
 8013f0e:	ed2d 8b04 	vpush	{d8-d9}
 8013f12:	eeb0 8a40 	vmov.f32	s16, s0
 8013f16:	eef0 8a60 	vmov.f32	s17, s1
 8013f1a:	eeb0 9a41 	vmov.f32	s18, s2
 8013f1e:	eef0 9a61 	vmov.f32	s19, s3
 8013f22:	f000 f81d 	bl	8013f60 <__fpclassifyd>
 8013f26:	b950      	cbnz	r0, 8013f3e <fmin+0x32>
 8013f28:	eeb0 8a49 	vmov.f32	s16, s18
 8013f2c:	eef0 8a69 	vmov.f32	s17, s19
 8013f30:	eeb0 0a48 	vmov.f32	s0, s16
 8013f34:	eef0 0a68 	vmov.f32	s1, s17
 8013f38:	ecbd 8b04 	vpop	{d8-d9}
 8013f3c:	bd08      	pop	{r3, pc}
 8013f3e:	eeb0 0a49 	vmov.f32	s0, s18
 8013f42:	eef0 0a69 	vmov.f32	s1, s19
 8013f46:	f000 f80b 	bl	8013f60 <__fpclassifyd>
 8013f4a:	2800      	cmp	r0, #0
 8013f4c:	d0f0      	beq.n	8013f30 <fmin+0x24>
 8013f4e:	ec53 2b19 	vmov	r2, r3, d9
 8013f52:	ec51 0b18 	vmov	r0, r1, d8
 8013f56:	f7ec fdc1 	bl	8000adc <__aeabi_dcmplt>
 8013f5a:	2800      	cmp	r0, #0
 8013f5c:	d0e4      	beq.n	8013f28 <fmin+0x1c>
 8013f5e:	e7e7      	b.n	8013f30 <fmin+0x24>

08013f60 <__fpclassifyd>:
 8013f60:	ec51 0b10 	vmov	r0, r1, d0
 8013f64:	460b      	mov	r3, r1
 8013f66:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8013f6a:	b510      	push	{r4, lr}
 8013f6c:	d104      	bne.n	8013f78 <__fpclassifyd+0x18>
 8013f6e:	2800      	cmp	r0, #0
 8013f70:	bf0c      	ite	eq
 8013f72:	2002      	moveq	r0, #2
 8013f74:	2003      	movne	r0, #3
 8013f76:	bd10      	pop	{r4, pc}
 8013f78:	4a09      	ldr	r2, [pc, #36]	@ (8013fa0 <__fpclassifyd+0x40>)
 8013f7a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8013f7e:	4294      	cmp	r4, r2
 8013f80:	d908      	bls.n	8013f94 <__fpclassifyd+0x34>
 8013f82:	4a08      	ldr	r2, [pc, #32]	@ (8013fa4 <__fpclassifyd+0x44>)
 8013f84:	4213      	tst	r3, r2
 8013f86:	d007      	beq.n	8013f98 <__fpclassifyd+0x38>
 8013f88:	4291      	cmp	r1, r2
 8013f8a:	d107      	bne.n	8013f9c <__fpclassifyd+0x3c>
 8013f8c:	fab0 f080 	clz	r0, r0
 8013f90:	0940      	lsrs	r0, r0, #5
 8013f92:	e7f0      	b.n	8013f76 <__fpclassifyd+0x16>
 8013f94:	2004      	movs	r0, #4
 8013f96:	e7ee      	b.n	8013f76 <__fpclassifyd+0x16>
 8013f98:	2003      	movs	r0, #3
 8013f9a:	e7ec      	b.n	8013f76 <__fpclassifyd+0x16>
 8013f9c:	2000      	movs	r0, #0
 8013f9e:	e7ea      	b.n	8013f76 <__fpclassifyd+0x16>
 8013fa0:	7fdfffff 	.word	0x7fdfffff
 8013fa4:	7ff00000 	.word	0x7ff00000

08013fa8 <fmaxf>:
 8013fa8:	b508      	push	{r3, lr}
 8013faa:	ed2d 8b02 	vpush	{d8}
 8013fae:	eeb0 8a40 	vmov.f32	s16, s0
 8013fb2:	eef0 8a60 	vmov.f32	s17, s1
 8013fb6:	f000 f831 	bl	801401c <__fpclassifyf>
 8013fba:	b930      	cbnz	r0, 8013fca <fmaxf+0x22>
 8013fbc:	eeb0 8a68 	vmov.f32	s16, s17
 8013fc0:	eeb0 0a48 	vmov.f32	s0, s16
 8013fc4:	ecbd 8b02 	vpop	{d8}
 8013fc8:	bd08      	pop	{r3, pc}
 8013fca:	eeb0 0a68 	vmov.f32	s0, s17
 8013fce:	f000 f825 	bl	801401c <__fpclassifyf>
 8013fd2:	2800      	cmp	r0, #0
 8013fd4:	d0f4      	beq.n	8013fc0 <fmaxf+0x18>
 8013fd6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fde:	dded      	ble.n	8013fbc <fmaxf+0x14>
 8013fe0:	e7ee      	b.n	8013fc0 <fmaxf+0x18>

08013fe2 <fminf>:
 8013fe2:	b508      	push	{r3, lr}
 8013fe4:	ed2d 8b02 	vpush	{d8}
 8013fe8:	eeb0 8a40 	vmov.f32	s16, s0
 8013fec:	eef0 8a60 	vmov.f32	s17, s1
 8013ff0:	f000 f814 	bl	801401c <__fpclassifyf>
 8013ff4:	b930      	cbnz	r0, 8014004 <fminf+0x22>
 8013ff6:	eeb0 8a68 	vmov.f32	s16, s17
 8013ffa:	eeb0 0a48 	vmov.f32	s0, s16
 8013ffe:	ecbd 8b02 	vpop	{d8}
 8014002:	bd08      	pop	{r3, pc}
 8014004:	eeb0 0a68 	vmov.f32	s0, s17
 8014008:	f000 f808 	bl	801401c <__fpclassifyf>
 801400c:	2800      	cmp	r0, #0
 801400e:	d0f4      	beq.n	8013ffa <fminf+0x18>
 8014010:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014018:	d5ed      	bpl.n	8013ff6 <fminf+0x14>
 801401a:	e7ee      	b.n	8013ffa <fminf+0x18>

0801401c <__fpclassifyf>:
 801401c:	ee10 3a10 	vmov	r3, s0
 8014020:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8014024:	d00d      	beq.n	8014042 <__fpclassifyf+0x26>
 8014026:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 801402a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801402e:	d30a      	bcc.n	8014046 <__fpclassifyf+0x2a>
 8014030:	4b07      	ldr	r3, [pc, #28]	@ (8014050 <__fpclassifyf+0x34>)
 8014032:	1e42      	subs	r2, r0, #1
 8014034:	429a      	cmp	r2, r3
 8014036:	d908      	bls.n	801404a <__fpclassifyf+0x2e>
 8014038:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 801403c:	4258      	negs	r0, r3
 801403e:	4158      	adcs	r0, r3
 8014040:	4770      	bx	lr
 8014042:	2002      	movs	r0, #2
 8014044:	4770      	bx	lr
 8014046:	2004      	movs	r0, #4
 8014048:	4770      	bx	lr
 801404a:	2003      	movs	r0, #3
 801404c:	4770      	bx	lr
 801404e:	bf00      	nop
 8014050:	007ffffe 	.word	0x007ffffe
 8014054:	00000000 	.word	0x00000000

08014058 <__ieee754_asin>:
 8014058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801405c:	ec55 4b10 	vmov	r4, r5, d0
 8014060:	4bc7      	ldr	r3, [pc, #796]	@ (8014380 <__ieee754_asin+0x328>)
 8014062:	b087      	sub	sp, #28
 8014064:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8014068:	429e      	cmp	r6, r3
 801406a:	9501      	str	r5, [sp, #4]
 801406c:	d92d      	bls.n	80140ca <__ieee754_asin+0x72>
 801406e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8014072:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8014076:	4326      	orrs	r6, r4
 8014078:	d116      	bne.n	80140a8 <__ieee754_asin+0x50>
 801407a:	a3a7      	add	r3, pc, #668	@ (adr r3, 8014318 <__ieee754_asin+0x2c0>)
 801407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014080:	4620      	mov	r0, r4
 8014082:	4629      	mov	r1, r5
 8014084:	f7ec fab8 	bl	80005f8 <__aeabi_dmul>
 8014088:	a3a5      	add	r3, pc, #660	@ (adr r3, 8014320 <__ieee754_asin+0x2c8>)
 801408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801408e:	4606      	mov	r6, r0
 8014090:	460f      	mov	r7, r1
 8014092:	4620      	mov	r0, r4
 8014094:	4629      	mov	r1, r5
 8014096:	f7ec faaf 	bl	80005f8 <__aeabi_dmul>
 801409a:	4602      	mov	r2, r0
 801409c:	460b      	mov	r3, r1
 801409e:	4630      	mov	r0, r6
 80140a0:	4639      	mov	r1, r7
 80140a2:	f7ec f8f3 	bl	800028c <__adddf3>
 80140a6:	e009      	b.n	80140bc <__ieee754_asin+0x64>
 80140a8:	4622      	mov	r2, r4
 80140aa:	462b      	mov	r3, r5
 80140ac:	4620      	mov	r0, r4
 80140ae:	4629      	mov	r1, r5
 80140b0:	f7ec f8ea 	bl	8000288 <__aeabi_dsub>
 80140b4:	4602      	mov	r2, r0
 80140b6:	460b      	mov	r3, r1
 80140b8:	f7ec fbc8 	bl	800084c <__aeabi_ddiv>
 80140bc:	4604      	mov	r4, r0
 80140be:	460d      	mov	r5, r1
 80140c0:	ec45 4b10 	vmov	d0, r4, r5
 80140c4:	b007      	add	sp, #28
 80140c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140ca:	4bae      	ldr	r3, [pc, #696]	@ (8014384 <__ieee754_asin+0x32c>)
 80140cc:	429e      	cmp	r6, r3
 80140ce:	d810      	bhi.n	80140f2 <__ieee754_asin+0x9a>
 80140d0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80140d4:	f080 80ad 	bcs.w	8014232 <__ieee754_asin+0x1da>
 80140d8:	a393      	add	r3, pc, #588	@ (adr r3, 8014328 <__ieee754_asin+0x2d0>)
 80140da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140de:	4620      	mov	r0, r4
 80140e0:	4629      	mov	r1, r5
 80140e2:	f7ec f8d3 	bl	800028c <__adddf3>
 80140e6:	4ba8      	ldr	r3, [pc, #672]	@ (8014388 <__ieee754_asin+0x330>)
 80140e8:	2200      	movs	r2, #0
 80140ea:	f7ec fd15 	bl	8000b18 <__aeabi_dcmpgt>
 80140ee:	2800      	cmp	r0, #0
 80140f0:	d1e6      	bne.n	80140c0 <__ieee754_asin+0x68>
 80140f2:	ec45 4b10 	vmov	d0, r4, r5
 80140f6:	f7ff fecd 	bl	8013e94 <fabs>
 80140fa:	49a3      	ldr	r1, [pc, #652]	@ (8014388 <__ieee754_asin+0x330>)
 80140fc:	ec53 2b10 	vmov	r2, r3, d0
 8014100:	2000      	movs	r0, #0
 8014102:	f7ec f8c1 	bl	8000288 <__aeabi_dsub>
 8014106:	4ba1      	ldr	r3, [pc, #644]	@ (801438c <__ieee754_asin+0x334>)
 8014108:	2200      	movs	r2, #0
 801410a:	f7ec fa75 	bl	80005f8 <__aeabi_dmul>
 801410e:	a388      	add	r3, pc, #544	@ (adr r3, 8014330 <__ieee754_asin+0x2d8>)
 8014110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014114:	4604      	mov	r4, r0
 8014116:	460d      	mov	r5, r1
 8014118:	f7ec fa6e 	bl	80005f8 <__aeabi_dmul>
 801411c:	a386      	add	r3, pc, #536	@ (adr r3, 8014338 <__ieee754_asin+0x2e0>)
 801411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014122:	f7ec f8b3 	bl	800028c <__adddf3>
 8014126:	4622      	mov	r2, r4
 8014128:	462b      	mov	r3, r5
 801412a:	f7ec fa65 	bl	80005f8 <__aeabi_dmul>
 801412e:	a384      	add	r3, pc, #528	@ (adr r3, 8014340 <__ieee754_asin+0x2e8>)
 8014130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014134:	f7ec f8a8 	bl	8000288 <__aeabi_dsub>
 8014138:	4622      	mov	r2, r4
 801413a:	462b      	mov	r3, r5
 801413c:	f7ec fa5c 	bl	80005f8 <__aeabi_dmul>
 8014140:	a381      	add	r3, pc, #516	@ (adr r3, 8014348 <__ieee754_asin+0x2f0>)
 8014142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014146:	f7ec f8a1 	bl	800028c <__adddf3>
 801414a:	4622      	mov	r2, r4
 801414c:	462b      	mov	r3, r5
 801414e:	f7ec fa53 	bl	80005f8 <__aeabi_dmul>
 8014152:	a37f      	add	r3, pc, #508	@ (adr r3, 8014350 <__ieee754_asin+0x2f8>)
 8014154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014158:	f7ec f896 	bl	8000288 <__aeabi_dsub>
 801415c:	4622      	mov	r2, r4
 801415e:	462b      	mov	r3, r5
 8014160:	f7ec fa4a 	bl	80005f8 <__aeabi_dmul>
 8014164:	a37c      	add	r3, pc, #496	@ (adr r3, 8014358 <__ieee754_asin+0x300>)
 8014166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801416a:	f7ec f88f 	bl	800028c <__adddf3>
 801416e:	4622      	mov	r2, r4
 8014170:	462b      	mov	r3, r5
 8014172:	f7ec fa41 	bl	80005f8 <__aeabi_dmul>
 8014176:	a37a      	add	r3, pc, #488	@ (adr r3, 8014360 <__ieee754_asin+0x308>)
 8014178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801417c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014180:	4620      	mov	r0, r4
 8014182:	4629      	mov	r1, r5
 8014184:	f7ec fa38 	bl	80005f8 <__aeabi_dmul>
 8014188:	a377      	add	r3, pc, #476	@ (adr r3, 8014368 <__ieee754_asin+0x310>)
 801418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801418e:	f7ec f87b 	bl	8000288 <__aeabi_dsub>
 8014192:	4622      	mov	r2, r4
 8014194:	462b      	mov	r3, r5
 8014196:	f7ec fa2f 	bl	80005f8 <__aeabi_dmul>
 801419a:	a375      	add	r3, pc, #468	@ (adr r3, 8014370 <__ieee754_asin+0x318>)
 801419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141a0:	f7ec f874 	bl	800028c <__adddf3>
 80141a4:	4622      	mov	r2, r4
 80141a6:	462b      	mov	r3, r5
 80141a8:	f7ec fa26 	bl	80005f8 <__aeabi_dmul>
 80141ac:	a372      	add	r3, pc, #456	@ (adr r3, 8014378 <__ieee754_asin+0x320>)
 80141ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b2:	f7ec f869 	bl	8000288 <__aeabi_dsub>
 80141b6:	4622      	mov	r2, r4
 80141b8:	462b      	mov	r3, r5
 80141ba:	f7ec fa1d 	bl	80005f8 <__aeabi_dmul>
 80141be:	4b72      	ldr	r3, [pc, #456]	@ (8014388 <__ieee754_asin+0x330>)
 80141c0:	2200      	movs	r2, #0
 80141c2:	f7ec f863 	bl	800028c <__adddf3>
 80141c6:	ec45 4b10 	vmov	d0, r4, r5
 80141ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80141ce:	f000 fba7 	bl	8014920 <__ieee754_sqrt>
 80141d2:	4b6f      	ldr	r3, [pc, #444]	@ (8014390 <__ieee754_asin+0x338>)
 80141d4:	429e      	cmp	r6, r3
 80141d6:	ec5b ab10 	vmov	sl, fp, d0
 80141da:	f240 80db 	bls.w	8014394 <__ieee754_asin+0x33c>
 80141de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141e6:	f7ec fb31 	bl	800084c <__aeabi_ddiv>
 80141ea:	4652      	mov	r2, sl
 80141ec:	465b      	mov	r3, fp
 80141ee:	f7ec fa03 	bl	80005f8 <__aeabi_dmul>
 80141f2:	4652      	mov	r2, sl
 80141f4:	465b      	mov	r3, fp
 80141f6:	f7ec f849 	bl	800028c <__adddf3>
 80141fa:	4602      	mov	r2, r0
 80141fc:	460b      	mov	r3, r1
 80141fe:	f7ec f845 	bl	800028c <__adddf3>
 8014202:	a347      	add	r3, pc, #284	@ (adr r3, 8014320 <__ieee754_asin+0x2c8>)
 8014204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014208:	f7ec f83e 	bl	8000288 <__aeabi_dsub>
 801420c:	4602      	mov	r2, r0
 801420e:	460b      	mov	r3, r1
 8014210:	a141      	add	r1, pc, #260	@ (adr r1, 8014318 <__ieee754_asin+0x2c0>)
 8014212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014216:	f7ec f837 	bl	8000288 <__aeabi_dsub>
 801421a:	9b01      	ldr	r3, [sp, #4]
 801421c:	2b00      	cmp	r3, #0
 801421e:	bfdc      	itt	le
 8014220:	4602      	movle	r2, r0
 8014222:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8014226:	4604      	mov	r4, r0
 8014228:	460d      	mov	r5, r1
 801422a:	bfdc      	itt	le
 801422c:	4614      	movle	r4, r2
 801422e:	461d      	movle	r5, r3
 8014230:	e746      	b.n	80140c0 <__ieee754_asin+0x68>
 8014232:	4622      	mov	r2, r4
 8014234:	462b      	mov	r3, r5
 8014236:	4620      	mov	r0, r4
 8014238:	4629      	mov	r1, r5
 801423a:	f7ec f9dd 	bl	80005f8 <__aeabi_dmul>
 801423e:	a33c      	add	r3, pc, #240	@ (adr r3, 8014330 <__ieee754_asin+0x2d8>)
 8014240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014244:	4606      	mov	r6, r0
 8014246:	460f      	mov	r7, r1
 8014248:	f7ec f9d6 	bl	80005f8 <__aeabi_dmul>
 801424c:	a33a      	add	r3, pc, #232	@ (adr r3, 8014338 <__ieee754_asin+0x2e0>)
 801424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014252:	f7ec f81b 	bl	800028c <__adddf3>
 8014256:	4632      	mov	r2, r6
 8014258:	463b      	mov	r3, r7
 801425a:	f7ec f9cd 	bl	80005f8 <__aeabi_dmul>
 801425e:	a338      	add	r3, pc, #224	@ (adr r3, 8014340 <__ieee754_asin+0x2e8>)
 8014260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014264:	f7ec f810 	bl	8000288 <__aeabi_dsub>
 8014268:	4632      	mov	r2, r6
 801426a:	463b      	mov	r3, r7
 801426c:	f7ec f9c4 	bl	80005f8 <__aeabi_dmul>
 8014270:	a335      	add	r3, pc, #212	@ (adr r3, 8014348 <__ieee754_asin+0x2f0>)
 8014272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014276:	f7ec f809 	bl	800028c <__adddf3>
 801427a:	4632      	mov	r2, r6
 801427c:	463b      	mov	r3, r7
 801427e:	f7ec f9bb 	bl	80005f8 <__aeabi_dmul>
 8014282:	a333      	add	r3, pc, #204	@ (adr r3, 8014350 <__ieee754_asin+0x2f8>)
 8014284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014288:	f7eb fffe 	bl	8000288 <__aeabi_dsub>
 801428c:	4632      	mov	r2, r6
 801428e:	463b      	mov	r3, r7
 8014290:	f7ec f9b2 	bl	80005f8 <__aeabi_dmul>
 8014294:	a330      	add	r3, pc, #192	@ (adr r3, 8014358 <__ieee754_asin+0x300>)
 8014296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801429a:	f7eb fff7 	bl	800028c <__adddf3>
 801429e:	4632      	mov	r2, r6
 80142a0:	463b      	mov	r3, r7
 80142a2:	f7ec f9a9 	bl	80005f8 <__aeabi_dmul>
 80142a6:	a32e      	add	r3, pc, #184	@ (adr r3, 8014360 <__ieee754_asin+0x308>)
 80142a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ac:	4680      	mov	r8, r0
 80142ae:	4689      	mov	r9, r1
 80142b0:	4630      	mov	r0, r6
 80142b2:	4639      	mov	r1, r7
 80142b4:	f7ec f9a0 	bl	80005f8 <__aeabi_dmul>
 80142b8:	a32b      	add	r3, pc, #172	@ (adr r3, 8014368 <__ieee754_asin+0x310>)
 80142ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142be:	f7eb ffe3 	bl	8000288 <__aeabi_dsub>
 80142c2:	4632      	mov	r2, r6
 80142c4:	463b      	mov	r3, r7
 80142c6:	f7ec f997 	bl	80005f8 <__aeabi_dmul>
 80142ca:	a329      	add	r3, pc, #164	@ (adr r3, 8014370 <__ieee754_asin+0x318>)
 80142cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142d0:	f7eb ffdc 	bl	800028c <__adddf3>
 80142d4:	4632      	mov	r2, r6
 80142d6:	463b      	mov	r3, r7
 80142d8:	f7ec f98e 	bl	80005f8 <__aeabi_dmul>
 80142dc:	a326      	add	r3, pc, #152	@ (adr r3, 8014378 <__ieee754_asin+0x320>)
 80142de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e2:	f7eb ffd1 	bl	8000288 <__aeabi_dsub>
 80142e6:	4632      	mov	r2, r6
 80142e8:	463b      	mov	r3, r7
 80142ea:	f7ec f985 	bl	80005f8 <__aeabi_dmul>
 80142ee:	4b26      	ldr	r3, [pc, #152]	@ (8014388 <__ieee754_asin+0x330>)
 80142f0:	2200      	movs	r2, #0
 80142f2:	f7eb ffcb 	bl	800028c <__adddf3>
 80142f6:	4602      	mov	r2, r0
 80142f8:	460b      	mov	r3, r1
 80142fa:	4640      	mov	r0, r8
 80142fc:	4649      	mov	r1, r9
 80142fe:	f7ec faa5 	bl	800084c <__aeabi_ddiv>
 8014302:	4622      	mov	r2, r4
 8014304:	462b      	mov	r3, r5
 8014306:	f7ec f977 	bl	80005f8 <__aeabi_dmul>
 801430a:	4602      	mov	r2, r0
 801430c:	460b      	mov	r3, r1
 801430e:	4620      	mov	r0, r4
 8014310:	4629      	mov	r1, r5
 8014312:	e6c6      	b.n	80140a2 <__ieee754_asin+0x4a>
 8014314:	f3af 8000 	nop.w
 8014318:	54442d18 	.word	0x54442d18
 801431c:	3ff921fb 	.word	0x3ff921fb
 8014320:	33145c07 	.word	0x33145c07
 8014324:	3c91a626 	.word	0x3c91a626
 8014328:	8800759c 	.word	0x8800759c
 801432c:	7e37e43c 	.word	0x7e37e43c
 8014330:	0dfdf709 	.word	0x0dfdf709
 8014334:	3f023de1 	.word	0x3f023de1
 8014338:	7501b288 	.word	0x7501b288
 801433c:	3f49efe0 	.word	0x3f49efe0
 8014340:	b5688f3b 	.word	0xb5688f3b
 8014344:	3fa48228 	.word	0x3fa48228
 8014348:	0e884455 	.word	0x0e884455
 801434c:	3fc9c155 	.word	0x3fc9c155
 8014350:	03eb6f7d 	.word	0x03eb6f7d
 8014354:	3fd4d612 	.word	0x3fd4d612
 8014358:	55555555 	.word	0x55555555
 801435c:	3fc55555 	.word	0x3fc55555
 8014360:	b12e9282 	.word	0xb12e9282
 8014364:	3fb3b8c5 	.word	0x3fb3b8c5
 8014368:	1b8d0159 	.word	0x1b8d0159
 801436c:	3fe6066c 	.word	0x3fe6066c
 8014370:	9c598ac8 	.word	0x9c598ac8
 8014374:	40002ae5 	.word	0x40002ae5
 8014378:	1c8a2d4b 	.word	0x1c8a2d4b
 801437c:	40033a27 	.word	0x40033a27
 8014380:	3fefffff 	.word	0x3fefffff
 8014384:	3fdfffff 	.word	0x3fdfffff
 8014388:	3ff00000 	.word	0x3ff00000
 801438c:	3fe00000 	.word	0x3fe00000
 8014390:	3fef3332 	.word	0x3fef3332
 8014394:	4652      	mov	r2, sl
 8014396:	465b      	mov	r3, fp
 8014398:	4650      	mov	r0, sl
 801439a:	4659      	mov	r1, fp
 801439c:	f7eb ff76 	bl	800028c <__adddf3>
 80143a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80143a4:	4606      	mov	r6, r0
 80143a6:	460f      	mov	r7, r1
 80143a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143ac:	f7ec fa4e 	bl	800084c <__aeabi_ddiv>
 80143b0:	4602      	mov	r2, r0
 80143b2:	460b      	mov	r3, r1
 80143b4:	4630      	mov	r0, r6
 80143b6:	4639      	mov	r1, r7
 80143b8:	f7ec f91e 	bl	80005f8 <__aeabi_dmul>
 80143bc:	f04f 0800 	mov.w	r8, #0
 80143c0:	4606      	mov	r6, r0
 80143c2:	460f      	mov	r7, r1
 80143c4:	4642      	mov	r2, r8
 80143c6:	465b      	mov	r3, fp
 80143c8:	4640      	mov	r0, r8
 80143ca:	4659      	mov	r1, fp
 80143cc:	f7ec f914 	bl	80005f8 <__aeabi_dmul>
 80143d0:	4602      	mov	r2, r0
 80143d2:	460b      	mov	r3, r1
 80143d4:	4620      	mov	r0, r4
 80143d6:	4629      	mov	r1, r5
 80143d8:	f7eb ff56 	bl	8000288 <__aeabi_dsub>
 80143dc:	4642      	mov	r2, r8
 80143de:	4604      	mov	r4, r0
 80143e0:	460d      	mov	r5, r1
 80143e2:	465b      	mov	r3, fp
 80143e4:	4650      	mov	r0, sl
 80143e6:	4659      	mov	r1, fp
 80143e8:	f7eb ff50 	bl	800028c <__adddf3>
 80143ec:	4602      	mov	r2, r0
 80143ee:	460b      	mov	r3, r1
 80143f0:	4620      	mov	r0, r4
 80143f2:	4629      	mov	r1, r5
 80143f4:	f7ec fa2a 	bl	800084c <__aeabi_ddiv>
 80143f8:	4602      	mov	r2, r0
 80143fa:	460b      	mov	r3, r1
 80143fc:	f7eb ff46 	bl	800028c <__adddf3>
 8014400:	4602      	mov	r2, r0
 8014402:	460b      	mov	r3, r1
 8014404:	a112      	add	r1, pc, #72	@ (adr r1, 8014450 <__ieee754_asin+0x3f8>)
 8014406:	e9d1 0100 	ldrd	r0, r1, [r1]
 801440a:	f7eb ff3d 	bl	8000288 <__aeabi_dsub>
 801440e:	4602      	mov	r2, r0
 8014410:	460b      	mov	r3, r1
 8014412:	4630      	mov	r0, r6
 8014414:	4639      	mov	r1, r7
 8014416:	f7eb ff37 	bl	8000288 <__aeabi_dsub>
 801441a:	4642      	mov	r2, r8
 801441c:	4604      	mov	r4, r0
 801441e:	460d      	mov	r5, r1
 8014420:	465b      	mov	r3, fp
 8014422:	4640      	mov	r0, r8
 8014424:	4659      	mov	r1, fp
 8014426:	f7eb ff31 	bl	800028c <__adddf3>
 801442a:	4602      	mov	r2, r0
 801442c:	460b      	mov	r3, r1
 801442e:	a10a      	add	r1, pc, #40	@ (adr r1, 8014458 <__ieee754_asin+0x400>)
 8014430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014434:	f7eb ff28 	bl	8000288 <__aeabi_dsub>
 8014438:	4602      	mov	r2, r0
 801443a:	460b      	mov	r3, r1
 801443c:	4620      	mov	r0, r4
 801443e:	4629      	mov	r1, r5
 8014440:	f7eb ff22 	bl	8000288 <__aeabi_dsub>
 8014444:	4602      	mov	r2, r0
 8014446:	460b      	mov	r3, r1
 8014448:	a103      	add	r1, pc, #12	@ (adr r1, 8014458 <__ieee754_asin+0x400>)
 801444a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801444e:	e6e2      	b.n	8014216 <__ieee754_asin+0x1be>
 8014450:	33145c07 	.word	0x33145c07
 8014454:	3c91a626 	.word	0x3c91a626
 8014458:	54442d18 	.word	0x54442d18
 801445c:	3fe921fb 	.word	0x3fe921fb

08014460 <__ieee754_atan2>:
 8014460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014464:	ec57 6b11 	vmov	r6, r7, d1
 8014468:	4273      	negs	r3, r6
 801446a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80145e8 <__ieee754_atan2+0x188>
 801446e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8014472:	4333      	orrs	r3, r6
 8014474:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8014478:	4543      	cmp	r3, r8
 801447a:	ec51 0b10 	vmov	r0, r1, d0
 801447e:	4635      	mov	r5, r6
 8014480:	d809      	bhi.n	8014496 <__ieee754_atan2+0x36>
 8014482:	4244      	negs	r4, r0
 8014484:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014488:	4304      	orrs	r4, r0
 801448a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801448e:	4544      	cmp	r4, r8
 8014490:	468e      	mov	lr, r1
 8014492:	4681      	mov	r9, r0
 8014494:	d907      	bls.n	80144a6 <__ieee754_atan2+0x46>
 8014496:	4632      	mov	r2, r6
 8014498:	463b      	mov	r3, r7
 801449a:	f7eb fef7 	bl	800028c <__adddf3>
 801449e:	ec41 0b10 	vmov	d0, r0, r1
 80144a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144a6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80144aa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80144ae:	4334      	orrs	r4, r6
 80144b0:	d103      	bne.n	80144ba <__ieee754_atan2+0x5a>
 80144b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144b6:	f000 b89b 	b.w	80145f0 <atan>
 80144ba:	17bc      	asrs	r4, r7, #30
 80144bc:	f004 0402 	and.w	r4, r4, #2
 80144c0:	ea53 0909 	orrs.w	r9, r3, r9
 80144c4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80144c8:	d107      	bne.n	80144da <__ieee754_atan2+0x7a>
 80144ca:	2c02      	cmp	r4, #2
 80144cc:	d05f      	beq.n	801458e <__ieee754_atan2+0x12e>
 80144ce:	2c03      	cmp	r4, #3
 80144d0:	d1e5      	bne.n	801449e <__ieee754_atan2+0x3e>
 80144d2:	a143      	add	r1, pc, #268	@ (adr r1, 80145e0 <__ieee754_atan2+0x180>)
 80144d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80144d8:	e7e1      	b.n	801449e <__ieee754_atan2+0x3e>
 80144da:	4315      	orrs	r5, r2
 80144dc:	d106      	bne.n	80144ec <__ieee754_atan2+0x8c>
 80144de:	f1be 0f00 	cmp.w	lr, #0
 80144e2:	db5f      	blt.n	80145a4 <__ieee754_atan2+0x144>
 80144e4:	a136      	add	r1, pc, #216	@ (adr r1, 80145c0 <__ieee754_atan2+0x160>)
 80144e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80144ea:	e7d8      	b.n	801449e <__ieee754_atan2+0x3e>
 80144ec:	4542      	cmp	r2, r8
 80144ee:	d10f      	bne.n	8014510 <__ieee754_atan2+0xb0>
 80144f0:	4293      	cmp	r3, r2
 80144f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80144f6:	d107      	bne.n	8014508 <__ieee754_atan2+0xa8>
 80144f8:	2c02      	cmp	r4, #2
 80144fa:	d84c      	bhi.n	8014596 <__ieee754_atan2+0x136>
 80144fc:	4b36      	ldr	r3, [pc, #216]	@ (80145d8 <__ieee754_atan2+0x178>)
 80144fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014502:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014506:	e7ca      	b.n	801449e <__ieee754_atan2+0x3e>
 8014508:	2c02      	cmp	r4, #2
 801450a:	d848      	bhi.n	801459e <__ieee754_atan2+0x13e>
 801450c:	4b33      	ldr	r3, [pc, #204]	@ (80145dc <__ieee754_atan2+0x17c>)
 801450e:	e7f6      	b.n	80144fe <__ieee754_atan2+0x9e>
 8014510:	4543      	cmp	r3, r8
 8014512:	d0e4      	beq.n	80144de <__ieee754_atan2+0x7e>
 8014514:	1a9b      	subs	r3, r3, r2
 8014516:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801451a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801451e:	da1e      	bge.n	801455e <__ieee754_atan2+0xfe>
 8014520:	2f00      	cmp	r7, #0
 8014522:	da01      	bge.n	8014528 <__ieee754_atan2+0xc8>
 8014524:	323c      	adds	r2, #60	@ 0x3c
 8014526:	db1e      	blt.n	8014566 <__ieee754_atan2+0x106>
 8014528:	4632      	mov	r2, r6
 801452a:	463b      	mov	r3, r7
 801452c:	f7ec f98e 	bl	800084c <__aeabi_ddiv>
 8014530:	ec41 0b10 	vmov	d0, r0, r1
 8014534:	f7ff fcae 	bl	8013e94 <fabs>
 8014538:	f000 f85a 	bl	80145f0 <atan>
 801453c:	ec51 0b10 	vmov	r0, r1, d0
 8014540:	2c01      	cmp	r4, #1
 8014542:	d013      	beq.n	801456c <__ieee754_atan2+0x10c>
 8014544:	2c02      	cmp	r4, #2
 8014546:	d015      	beq.n	8014574 <__ieee754_atan2+0x114>
 8014548:	2c00      	cmp	r4, #0
 801454a:	d0a8      	beq.n	801449e <__ieee754_atan2+0x3e>
 801454c:	a318      	add	r3, pc, #96	@ (adr r3, 80145b0 <__ieee754_atan2+0x150>)
 801454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014552:	f7eb fe99 	bl	8000288 <__aeabi_dsub>
 8014556:	a318      	add	r3, pc, #96	@ (adr r3, 80145b8 <__ieee754_atan2+0x158>)
 8014558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801455c:	e014      	b.n	8014588 <__ieee754_atan2+0x128>
 801455e:	a118      	add	r1, pc, #96	@ (adr r1, 80145c0 <__ieee754_atan2+0x160>)
 8014560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014564:	e7ec      	b.n	8014540 <__ieee754_atan2+0xe0>
 8014566:	2000      	movs	r0, #0
 8014568:	2100      	movs	r1, #0
 801456a:	e7e9      	b.n	8014540 <__ieee754_atan2+0xe0>
 801456c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014570:	4619      	mov	r1, r3
 8014572:	e794      	b.n	801449e <__ieee754_atan2+0x3e>
 8014574:	a30e      	add	r3, pc, #56	@ (adr r3, 80145b0 <__ieee754_atan2+0x150>)
 8014576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801457a:	f7eb fe85 	bl	8000288 <__aeabi_dsub>
 801457e:	4602      	mov	r2, r0
 8014580:	460b      	mov	r3, r1
 8014582:	a10d      	add	r1, pc, #52	@ (adr r1, 80145b8 <__ieee754_atan2+0x158>)
 8014584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014588:	f7eb fe7e 	bl	8000288 <__aeabi_dsub>
 801458c:	e787      	b.n	801449e <__ieee754_atan2+0x3e>
 801458e:	a10a      	add	r1, pc, #40	@ (adr r1, 80145b8 <__ieee754_atan2+0x158>)
 8014590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014594:	e783      	b.n	801449e <__ieee754_atan2+0x3e>
 8014596:	a10c      	add	r1, pc, #48	@ (adr r1, 80145c8 <__ieee754_atan2+0x168>)
 8014598:	e9d1 0100 	ldrd	r0, r1, [r1]
 801459c:	e77f      	b.n	801449e <__ieee754_atan2+0x3e>
 801459e:	2000      	movs	r0, #0
 80145a0:	2100      	movs	r1, #0
 80145a2:	e77c      	b.n	801449e <__ieee754_atan2+0x3e>
 80145a4:	a10a      	add	r1, pc, #40	@ (adr r1, 80145d0 <__ieee754_atan2+0x170>)
 80145a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145aa:	e778      	b.n	801449e <__ieee754_atan2+0x3e>
 80145ac:	f3af 8000 	nop.w
 80145b0:	33145c07 	.word	0x33145c07
 80145b4:	3ca1a626 	.word	0x3ca1a626
 80145b8:	54442d18 	.word	0x54442d18
 80145bc:	400921fb 	.word	0x400921fb
 80145c0:	54442d18 	.word	0x54442d18
 80145c4:	3ff921fb 	.word	0x3ff921fb
 80145c8:	54442d18 	.word	0x54442d18
 80145cc:	3fe921fb 	.word	0x3fe921fb
 80145d0:	54442d18 	.word	0x54442d18
 80145d4:	bff921fb 	.word	0xbff921fb
 80145d8:	08016200 	.word	0x08016200
 80145dc:	080161e8 	.word	0x080161e8
 80145e0:	54442d18 	.word	0x54442d18
 80145e4:	c00921fb 	.word	0xc00921fb
 80145e8:	7ff00000 	.word	0x7ff00000
 80145ec:	00000000 	.word	0x00000000

080145f0 <atan>:
 80145f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145f4:	ec55 4b10 	vmov	r4, r5, d0
 80145f8:	4bbf      	ldr	r3, [pc, #764]	@ (80148f8 <atan+0x308>)
 80145fa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80145fe:	429e      	cmp	r6, r3
 8014600:	46ab      	mov	fp, r5
 8014602:	d918      	bls.n	8014636 <atan+0x46>
 8014604:	4bbd      	ldr	r3, [pc, #756]	@ (80148fc <atan+0x30c>)
 8014606:	429e      	cmp	r6, r3
 8014608:	d801      	bhi.n	801460e <atan+0x1e>
 801460a:	d109      	bne.n	8014620 <atan+0x30>
 801460c:	b144      	cbz	r4, 8014620 <atan+0x30>
 801460e:	4622      	mov	r2, r4
 8014610:	462b      	mov	r3, r5
 8014612:	4620      	mov	r0, r4
 8014614:	4629      	mov	r1, r5
 8014616:	f7eb fe39 	bl	800028c <__adddf3>
 801461a:	4604      	mov	r4, r0
 801461c:	460d      	mov	r5, r1
 801461e:	e006      	b.n	801462e <atan+0x3e>
 8014620:	f1bb 0f00 	cmp.w	fp, #0
 8014624:	f340 812b 	ble.w	801487e <atan+0x28e>
 8014628:	a597      	add	r5, pc, #604	@ (adr r5, 8014888 <atan+0x298>)
 801462a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801462e:	ec45 4b10 	vmov	d0, r4, r5
 8014632:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014636:	4bb2      	ldr	r3, [pc, #712]	@ (8014900 <atan+0x310>)
 8014638:	429e      	cmp	r6, r3
 801463a:	d813      	bhi.n	8014664 <atan+0x74>
 801463c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8014640:	429e      	cmp	r6, r3
 8014642:	d80c      	bhi.n	801465e <atan+0x6e>
 8014644:	a392      	add	r3, pc, #584	@ (adr r3, 8014890 <atan+0x2a0>)
 8014646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801464a:	4620      	mov	r0, r4
 801464c:	4629      	mov	r1, r5
 801464e:	f7eb fe1d 	bl	800028c <__adddf3>
 8014652:	4bac      	ldr	r3, [pc, #688]	@ (8014904 <atan+0x314>)
 8014654:	2200      	movs	r2, #0
 8014656:	f7ec fa5f 	bl	8000b18 <__aeabi_dcmpgt>
 801465a:	2800      	cmp	r0, #0
 801465c:	d1e7      	bne.n	801462e <atan+0x3e>
 801465e:	f04f 3aff 	mov.w	sl, #4294967295
 8014662:	e029      	b.n	80146b8 <atan+0xc8>
 8014664:	f7ff fc16 	bl	8013e94 <fabs>
 8014668:	4ba7      	ldr	r3, [pc, #668]	@ (8014908 <atan+0x318>)
 801466a:	429e      	cmp	r6, r3
 801466c:	ec55 4b10 	vmov	r4, r5, d0
 8014670:	f200 80bc 	bhi.w	80147ec <atan+0x1fc>
 8014674:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8014678:	429e      	cmp	r6, r3
 801467a:	f200 809e 	bhi.w	80147ba <atan+0x1ca>
 801467e:	4622      	mov	r2, r4
 8014680:	462b      	mov	r3, r5
 8014682:	4620      	mov	r0, r4
 8014684:	4629      	mov	r1, r5
 8014686:	f7eb fe01 	bl	800028c <__adddf3>
 801468a:	4b9e      	ldr	r3, [pc, #632]	@ (8014904 <atan+0x314>)
 801468c:	2200      	movs	r2, #0
 801468e:	f7eb fdfb 	bl	8000288 <__aeabi_dsub>
 8014692:	2200      	movs	r2, #0
 8014694:	4606      	mov	r6, r0
 8014696:	460f      	mov	r7, r1
 8014698:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801469c:	4620      	mov	r0, r4
 801469e:	4629      	mov	r1, r5
 80146a0:	f7eb fdf4 	bl	800028c <__adddf3>
 80146a4:	4602      	mov	r2, r0
 80146a6:	460b      	mov	r3, r1
 80146a8:	4630      	mov	r0, r6
 80146aa:	4639      	mov	r1, r7
 80146ac:	f7ec f8ce 	bl	800084c <__aeabi_ddiv>
 80146b0:	f04f 0a00 	mov.w	sl, #0
 80146b4:	4604      	mov	r4, r0
 80146b6:	460d      	mov	r5, r1
 80146b8:	4622      	mov	r2, r4
 80146ba:	462b      	mov	r3, r5
 80146bc:	4620      	mov	r0, r4
 80146be:	4629      	mov	r1, r5
 80146c0:	f7eb ff9a 	bl	80005f8 <__aeabi_dmul>
 80146c4:	4602      	mov	r2, r0
 80146c6:	460b      	mov	r3, r1
 80146c8:	4680      	mov	r8, r0
 80146ca:	4689      	mov	r9, r1
 80146cc:	f7eb ff94 	bl	80005f8 <__aeabi_dmul>
 80146d0:	a371      	add	r3, pc, #452	@ (adr r3, 8014898 <atan+0x2a8>)
 80146d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d6:	4606      	mov	r6, r0
 80146d8:	460f      	mov	r7, r1
 80146da:	f7eb ff8d 	bl	80005f8 <__aeabi_dmul>
 80146de:	a370      	add	r3, pc, #448	@ (adr r3, 80148a0 <atan+0x2b0>)
 80146e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146e4:	f7eb fdd2 	bl	800028c <__adddf3>
 80146e8:	4632      	mov	r2, r6
 80146ea:	463b      	mov	r3, r7
 80146ec:	f7eb ff84 	bl	80005f8 <__aeabi_dmul>
 80146f0:	a36d      	add	r3, pc, #436	@ (adr r3, 80148a8 <atan+0x2b8>)
 80146f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f6:	f7eb fdc9 	bl	800028c <__adddf3>
 80146fa:	4632      	mov	r2, r6
 80146fc:	463b      	mov	r3, r7
 80146fe:	f7eb ff7b 	bl	80005f8 <__aeabi_dmul>
 8014702:	a36b      	add	r3, pc, #428	@ (adr r3, 80148b0 <atan+0x2c0>)
 8014704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014708:	f7eb fdc0 	bl	800028c <__adddf3>
 801470c:	4632      	mov	r2, r6
 801470e:	463b      	mov	r3, r7
 8014710:	f7eb ff72 	bl	80005f8 <__aeabi_dmul>
 8014714:	a368      	add	r3, pc, #416	@ (adr r3, 80148b8 <atan+0x2c8>)
 8014716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801471a:	f7eb fdb7 	bl	800028c <__adddf3>
 801471e:	4632      	mov	r2, r6
 8014720:	463b      	mov	r3, r7
 8014722:	f7eb ff69 	bl	80005f8 <__aeabi_dmul>
 8014726:	a366      	add	r3, pc, #408	@ (adr r3, 80148c0 <atan+0x2d0>)
 8014728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801472c:	f7eb fdae 	bl	800028c <__adddf3>
 8014730:	4642      	mov	r2, r8
 8014732:	464b      	mov	r3, r9
 8014734:	f7eb ff60 	bl	80005f8 <__aeabi_dmul>
 8014738:	a363      	add	r3, pc, #396	@ (adr r3, 80148c8 <atan+0x2d8>)
 801473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801473e:	4680      	mov	r8, r0
 8014740:	4689      	mov	r9, r1
 8014742:	4630      	mov	r0, r6
 8014744:	4639      	mov	r1, r7
 8014746:	f7eb ff57 	bl	80005f8 <__aeabi_dmul>
 801474a:	a361      	add	r3, pc, #388	@ (adr r3, 80148d0 <atan+0x2e0>)
 801474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014750:	f7eb fd9a 	bl	8000288 <__aeabi_dsub>
 8014754:	4632      	mov	r2, r6
 8014756:	463b      	mov	r3, r7
 8014758:	f7eb ff4e 	bl	80005f8 <__aeabi_dmul>
 801475c:	a35e      	add	r3, pc, #376	@ (adr r3, 80148d8 <atan+0x2e8>)
 801475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014762:	f7eb fd91 	bl	8000288 <__aeabi_dsub>
 8014766:	4632      	mov	r2, r6
 8014768:	463b      	mov	r3, r7
 801476a:	f7eb ff45 	bl	80005f8 <__aeabi_dmul>
 801476e:	a35c      	add	r3, pc, #368	@ (adr r3, 80148e0 <atan+0x2f0>)
 8014770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014774:	f7eb fd88 	bl	8000288 <__aeabi_dsub>
 8014778:	4632      	mov	r2, r6
 801477a:	463b      	mov	r3, r7
 801477c:	f7eb ff3c 	bl	80005f8 <__aeabi_dmul>
 8014780:	a359      	add	r3, pc, #356	@ (adr r3, 80148e8 <atan+0x2f8>)
 8014782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014786:	f7eb fd7f 	bl	8000288 <__aeabi_dsub>
 801478a:	4632      	mov	r2, r6
 801478c:	463b      	mov	r3, r7
 801478e:	f7eb ff33 	bl	80005f8 <__aeabi_dmul>
 8014792:	4602      	mov	r2, r0
 8014794:	460b      	mov	r3, r1
 8014796:	4640      	mov	r0, r8
 8014798:	4649      	mov	r1, r9
 801479a:	f7eb fd77 	bl	800028c <__adddf3>
 801479e:	4622      	mov	r2, r4
 80147a0:	462b      	mov	r3, r5
 80147a2:	f7eb ff29 	bl	80005f8 <__aeabi_dmul>
 80147a6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80147aa:	4602      	mov	r2, r0
 80147ac:	460b      	mov	r3, r1
 80147ae:	d148      	bne.n	8014842 <atan+0x252>
 80147b0:	4620      	mov	r0, r4
 80147b2:	4629      	mov	r1, r5
 80147b4:	f7eb fd68 	bl	8000288 <__aeabi_dsub>
 80147b8:	e72f      	b.n	801461a <atan+0x2a>
 80147ba:	4b52      	ldr	r3, [pc, #328]	@ (8014904 <atan+0x314>)
 80147bc:	2200      	movs	r2, #0
 80147be:	4620      	mov	r0, r4
 80147c0:	4629      	mov	r1, r5
 80147c2:	f7eb fd61 	bl	8000288 <__aeabi_dsub>
 80147c6:	4b4f      	ldr	r3, [pc, #316]	@ (8014904 <atan+0x314>)
 80147c8:	4606      	mov	r6, r0
 80147ca:	460f      	mov	r7, r1
 80147cc:	2200      	movs	r2, #0
 80147ce:	4620      	mov	r0, r4
 80147d0:	4629      	mov	r1, r5
 80147d2:	f7eb fd5b 	bl	800028c <__adddf3>
 80147d6:	4602      	mov	r2, r0
 80147d8:	460b      	mov	r3, r1
 80147da:	4630      	mov	r0, r6
 80147dc:	4639      	mov	r1, r7
 80147de:	f7ec f835 	bl	800084c <__aeabi_ddiv>
 80147e2:	f04f 0a01 	mov.w	sl, #1
 80147e6:	4604      	mov	r4, r0
 80147e8:	460d      	mov	r5, r1
 80147ea:	e765      	b.n	80146b8 <atan+0xc8>
 80147ec:	4b47      	ldr	r3, [pc, #284]	@ (801490c <atan+0x31c>)
 80147ee:	429e      	cmp	r6, r3
 80147f0:	d21c      	bcs.n	801482c <atan+0x23c>
 80147f2:	4b47      	ldr	r3, [pc, #284]	@ (8014910 <atan+0x320>)
 80147f4:	2200      	movs	r2, #0
 80147f6:	4620      	mov	r0, r4
 80147f8:	4629      	mov	r1, r5
 80147fa:	f7eb fd45 	bl	8000288 <__aeabi_dsub>
 80147fe:	4b44      	ldr	r3, [pc, #272]	@ (8014910 <atan+0x320>)
 8014800:	4606      	mov	r6, r0
 8014802:	460f      	mov	r7, r1
 8014804:	2200      	movs	r2, #0
 8014806:	4620      	mov	r0, r4
 8014808:	4629      	mov	r1, r5
 801480a:	f7eb fef5 	bl	80005f8 <__aeabi_dmul>
 801480e:	4b3d      	ldr	r3, [pc, #244]	@ (8014904 <atan+0x314>)
 8014810:	2200      	movs	r2, #0
 8014812:	f7eb fd3b 	bl	800028c <__adddf3>
 8014816:	4602      	mov	r2, r0
 8014818:	460b      	mov	r3, r1
 801481a:	4630      	mov	r0, r6
 801481c:	4639      	mov	r1, r7
 801481e:	f7ec f815 	bl	800084c <__aeabi_ddiv>
 8014822:	f04f 0a02 	mov.w	sl, #2
 8014826:	4604      	mov	r4, r0
 8014828:	460d      	mov	r5, r1
 801482a:	e745      	b.n	80146b8 <atan+0xc8>
 801482c:	4622      	mov	r2, r4
 801482e:	462b      	mov	r3, r5
 8014830:	4938      	ldr	r1, [pc, #224]	@ (8014914 <atan+0x324>)
 8014832:	2000      	movs	r0, #0
 8014834:	f7ec f80a 	bl	800084c <__aeabi_ddiv>
 8014838:	f04f 0a03 	mov.w	sl, #3
 801483c:	4604      	mov	r4, r0
 801483e:	460d      	mov	r5, r1
 8014840:	e73a      	b.n	80146b8 <atan+0xc8>
 8014842:	4b35      	ldr	r3, [pc, #212]	@ (8014918 <atan+0x328>)
 8014844:	4e35      	ldr	r6, [pc, #212]	@ (801491c <atan+0x32c>)
 8014846:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801484e:	f7eb fd1b 	bl	8000288 <__aeabi_dsub>
 8014852:	4622      	mov	r2, r4
 8014854:	462b      	mov	r3, r5
 8014856:	f7eb fd17 	bl	8000288 <__aeabi_dsub>
 801485a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801485e:	4602      	mov	r2, r0
 8014860:	460b      	mov	r3, r1
 8014862:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014866:	f7eb fd0f 	bl	8000288 <__aeabi_dsub>
 801486a:	f1bb 0f00 	cmp.w	fp, #0
 801486e:	4604      	mov	r4, r0
 8014870:	460d      	mov	r5, r1
 8014872:	f6bf aedc 	bge.w	801462e <atan+0x3e>
 8014876:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801487a:	461d      	mov	r5, r3
 801487c:	e6d7      	b.n	801462e <atan+0x3e>
 801487e:	a51c      	add	r5, pc, #112	@ (adr r5, 80148f0 <atan+0x300>)
 8014880:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014884:	e6d3      	b.n	801462e <atan+0x3e>
 8014886:	bf00      	nop
 8014888:	54442d18 	.word	0x54442d18
 801488c:	3ff921fb 	.word	0x3ff921fb
 8014890:	8800759c 	.word	0x8800759c
 8014894:	7e37e43c 	.word	0x7e37e43c
 8014898:	e322da11 	.word	0xe322da11
 801489c:	3f90ad3a 	.word	0x3f90ad3a
 80148a0:	24760deb 	.word	0x24760deb
 80148a4:	3fa97b4b 	.word	0x3fa97b4b
 80148a8:	a0d03d51 	.word	0xa0d03d51
 80148ac:	3fb10d66 	.word	0x3fb10d66
 80148b0:	c54c206e 	.word	0xc54c206e
 80148b4:	3fb745cd 	.word	0x3fb745cd
 80148b8:	920083ff 	.word	0x920083ff
 80148bc:	3fc24924 	.word	0x3fc24924
 80148c0:	5555550d 	.word	0x5555550d
 80148c4:	3fd55555 	.word	0x3fd55555
 80148c8:	2c6a6c2f 	.word	0x2c6a6c2f
 80148cc:	bfa2b444 	.word	0xbfa2b444
 80148d0:	52defd9a 	.word	0x52defd9a
 80148d4:	3fadde2d 	.word	0x3fadde2d
 80148d8:	af749a6d 	.word	0xaf749a6d
 80148dc:	3fb3b0f2 	.word	0x3fb3b0f2
 80148e0:	fe231671 	.word	0xfe231671
 80148e4:	3fbc71c6 	.word	0x3fbc71c6
 80148e8:	9998ebc4 	.word	0x9998ebc4
 80148ec:	3fc99999 	.word	0x3fc99999
 80148f0:	54442d18 	.word	0x54442d18
 80148f4:	bff921fb 	.word	0xbff921fb
 80148f8:	440fffff 	.word	0x440fffff
 80148fc:	7ff00000 	.word	0x7ff00000
 8014900:	3fdbffff 	.word	0x3fdbffff
 8014904:	3ff00000 	.word	0x3ff00000
 8014908:	3ff2ffff 	.word	0x3ff2ffff
 801490c:	40038000 	.word	0x40038000
 8014910:	3ff80000 	.word	0x3ff80000
 8014914:	bff00000 	.word	0xbff00000
 8014918:	08016218 	.word	0x08016218
 801491c:	08016238 	.word	0x08016238

08014920 <__ieee754_sqrt>:
 8014920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014924:	4a66      	ldr	r2, [pc, #408]	@ (8014ac0 <__ieee754_sqrt+0x1a0>)
 8014926:	ec55 4b10 	vmov	r4, r5, d0
 801492a:	43aa      	bics	r2, r5
 801492c:	462b      	mov	r3, r5
 801492e:	4621      	mov	r1, r4
 8014930:	d110      	bne.n	8014954 <__ieee754_sqrt+0x34>
 8014932:	4622      	mov	r2, r4
 8014934:	4620      	mov	r0, r4
 8014936:	4629      	mov	r1, r5
 8014938:	f7eb fe5e 	bl	80005f8 <__aeabi_dmul>
 801493c:	4602      	mov	r2, r0
 801493e:	460b      	mov	r3, r1
 8014940:	4620      	mov	r0, r4
 8014942:	4629      	mov	r1, r5
 8014944:	f7eb fca2 	bl	800028c <__adddf3>
 8014948:	4604      	mov	r4, r0
 801494a:	460d      	mov	r5, r1
 801494c:	ec45 4b10 	vmov	d0, r4, r5
 8014950:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014954:	2d00      	cmp	r5, #0
 8014956:	dc0e      	bgt.n	8014976 <__ieee754_sqrt+0x56>
 8014958:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801495c:	4322      	orrs	r2, r4
 801495e:	d0f5      	beq.n	801494c <__ieee754_sqrt+0x2c>
 8014960:	b19d      	cbz	r5, 801498a <__ieee754_sqrt+0x6a>
 8014962:	4622      	mov	r2, r4
 8014964:	4620      	mov	r0, r4
 8014966:	4629      	mov	r1, r5
 8014968:	f7eb fc8e 	bl	8000288 <__aeabi_dsub>
 801496c:	4602      	mov	r2, r0
 801496e:	460b      	mov	r3, r1
 8014970:	f7eb ff6c 	bl	800084c <__aeabi_ddiv>
 8014974:	e7e8      	b.n	8014948 <__ieee754_sqrt+0x28>
 8014976:	152a      	asrs	r2, r5, #20
 8014978:	d115      	bne.n	80149a6 <__ieee754_sqrt+0x86>
 801497a:	2000      	movs	r0, #0
 801497c:	e009      	b.n	8014992 <__ieee754_sqrt+0x72>
 801497e:	0acb      	lsrs	r3, r1, #11
 8014980:	3a15      	subs	r2, #21
 8014982:	0549      	lsls	r1, r1, #21
 8014984:	2b00      	cmp	r3, #0
 8014986:	d0fa      	beq.n	801497e <__ieee754_sqrt+0x5e>
 8014988:	e7f7      	b.n	801497a <__ieee754_sqrt+0x5a>
 801498a:	462a      	mov	r2, r5
 801498c:	e7fa      	b.n	8014984 <__ieee754_sqrt+0x64>
 801498e:	005b      	lsls	r3, r3, #1
 8014990:	3001      	adds	r0, #1
 8014992:	02dc      	lsls	r4, r3, #11
 8014994:	d5fb      	bpl.n	801498e <__ieee754_sqrt+0x6e>
 8014996:	1e44      	subs	r4, r0, #1
 8014998:	1b12      	subs	r2, r2, r4
 801499a:	f1c0 0420 	rsb	r4, r0, #32
 801499e:	fa21 f404 	lsr.w	r4, r1, r4
 80149a2:	4323      	orrs	r3, r4
 80149a4:	4081      	lsls	r1, r0
 80149a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80149aa:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80149ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80149b2:	07d2      	lsls	r2, r2, #31
 80149b4:	bf5c      	itt	pl
 80149b6:	005b      	lslpl	r3, r3, #1
 80149b8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80149bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80149c0:	bf58      	it	pl
 80149c2:	0049      	lslpl	r1, r1, #1
 80149c4:	2600      	movs	r6, #0
 80149c6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80149ca:	107f      	asrs	r7, r7, #1
 80149cc:	0049      	lsls	r1, r1, #1
 80149ce:	2016      	movs	r0, #22
 80149d0:	4632      	mov	r2, r6
 80149d2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80149d6:	1915      	adds	r5, r2, r4
 80149d8:	429d      	cmp	r5, r3
 80149da:	bfde      	ittt	le
 80149dc:	192a      	addle	r2, r5, r4
 80149de:	1b5b      	suble	r3, r3, r5
 80149e0:	1936      	addle	r6, r6, r4
 80149e2:	0fcd      	lsrs	r5, r1, #31
 80149e4:	3801      	subs	r0, #1
 80149e6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80149ea:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80149ee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80149f2:	d1f0      	bne.n	80149d6 <__ieee754_sqrt+0xb6>
 80149f4:	4605      	mov	r5, r0
 80149f6:	2420      	movs	r4, #32
 80149f8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80149fc:	4293      	cmp	r3, r2
 80149fe:	eb0c 0e00 	add.w	lr, ip, r0
 8014a02:	dc02      	bgt.n	8014a0a <__ieee754_sqrt+0xea>
 8014a04:	d113      	bne.n	8014a2e <__ieee754_sqrt+0x10e>
 8014a06:	458e      	cmp	lr, r1
 8014a08:	d811      	bhi.n	8014a2e <__ieee754_sqrt+0x10e>
 8014a0a:	f1be 0f00 	cmp.w	lr, #0
 8014a0e:	eb0e 000c 	add.w	r0, lr, ip
 8014a12:	da3f      	bge.n	8014a94 <__ieee754_sqrt+0x174>
 8014a14:	2800      	cmp	r0, #0
 8014a16:	db3d      	blt.n	8014a94 <__ieee754_sqrt+0x174>
 8014a18:	f102 0801 	add.w	r8, r2, #1
 8014a1c:	1a9b      	subs	r3, r3, r2
 8014a1e:	458e      	cmp	lr, r1
 8014a20:	bf88      	it	hi
 8014a22:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8014a26:	eba1 010e 	sub.w	r1, r1, lr
 8014a2a:	4465      	add	r5, ip
 8014a2c:	4642      	mov	r2, r8
 8014a2e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8014a32:	3c01      	subs	r4, #1
 8014a34:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8014a38:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014a3c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8014a40:	d1dc      	bne.n	80149fc <__ieee754_sqrt+0xdc>
 8014a42:	4319      	orrs	r1, r3
 8014a44:	d01b      	beq.n	8014a7e <__ieee754_sqrt+0x15e>
 8014a46:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8014ac4 <__ieee754_sqrt+0x1a4>
 8014a4a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8014ac8 <__ieee754_sqrt+0x1a8>
 8014a4e:	e9da 0100 	ldrd	r0, r1, [sl]
 8014a52:	e9db 2300 	ldrd	r2, r3, [fp]
 8014a56:	f7eb fc17 	bl	8000288 <__aeabi_dsub>
 8014a5a:	e9da 8900 	ldrd	r8, r9, [sl]
 8014a5e:	4602      	mov	r2, r0
 8014a60:	460b      	mov	r3, r1
 8014a62:	4640      	mov	r0, r8
 8014a64:	4649      	mov	r1, r9
 8014a66:	f7ec f843 	bl	8000af0 <__aeabi_dcmple>
 8014a6a:	b140      	cbz	r0, 8014a7e <__ieee754_sqrt+0x15e>
 8014a6c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8014a70:	e9da 0100 	ldrd	r0, r1, [sl]
 8014a74:	e9db 2300 	ldrd	r2, r3, [fp]
 8014a78:	d10e      	bne.n	8014a98 <__ieee754_sqrt+0x178>
 8014a7a:	3601      	adds	r6, #1
 8014a7c:	4625      	mov	r5, r4
 8014a7e:	1073      	asrs	r3, r6, #1
 8014a80:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8014a84:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8014a88:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8014a8c:	086b      	lsrs	r3, r5, #1
 8014a8e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8014a92:	e759      	b.n	8014948 <__ieee754_sqrt+0x28>
 8014a94:	4690      	mov	r8, r2
 8014a96:	e7c1      	b.n	8014a1c <__ieee754_sqrt+0xfc>
 8014a98:	f7eb fbf8 	bl	800028c <__adddf3>
 8014a9c:	e9da 8900 	ldrd	r8, r9, [sl]
 8014aa0:	4602      	mov	r2, r0
 8014aa2:	460b      	mov	r3, r1
 8014aa4:	4640      	mov	r0, r8
 8014aa6:	4649      	mov	r1, r9
 8014aa8:	f7ec f818 	bl	8000adc <__aeabi_dcmplt>
 8014aac:	b120      	cbz	r0, 8014ab8 <__ieee754_sqrt+0x198>
 8014aae:	1cab      	adds	r3, r5, #2
 8014ab0:	bf08      	it	eq
 8014ab2:	3601      	addeq	r6, #1
 8014ab4:	3502      	adds	r5, #2
 8014ab6:	e7e2      	b.n	8014a7e <__ieee754_sqrt+0x15e>
 8014ab8:	1c6b      	adds	r3, r5, #1
 8014aba:	f023 0501 	bic.w	r5, r3, #1
 8014abe:	e7de      	b.n	8014a7e <__ieee754_sqrt+0x15e>
 8014ac0:	7ff00000 	.word	0x7ff00000
 8014ac4:	08016260 	.word	0x08016260
 8014ac8:	08016258 	.word	0x08016258

08014acc <_init>:
 8014acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ace:	bf00      	nop
 8014ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ad2:	bc08      	pop	{r3}
 8014ad4:	469e      	mov	lr, r3
 8014ad6:	4770      	bx	lr

08014ad8 <_fini>:
 8014ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ada:	bf00      	nop
 8014adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ade:	bc08      	pop	{r3}
 8014ae0:	469e      	mov	lr, r3
 8014ae2:	4770      	bx	lr
