
Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001780  08012578  08012578  00013578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013cf8  08013cf8  000152a8  2**0
                  CONTENTS
  4 .ARM          00000008  08013cf8  08013cf8  00014cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d00  08013d00  000152a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d00  08013d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013d04  08013d04  00014d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a8  20000000  08013d08  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000152a8  2**0
                  CONTENTS
 10 .bss          000008e4  200002a8  200002a8  000152a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b8c  20000b8c  000152a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000152a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019102  00000000  00000000  000152d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b10  00000000  00000000  0002e3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  00031ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001174  00000000  00000000  000334a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026416  00000000  00000000  0003461c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dc4e  00000000  00000000  0005aa32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d76c8  00000000  00000000  00078680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014fd48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ec0  00000000  00000000  0014fd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  00156c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a8 	.word	0x200002a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801255c 	.word	0x0801255c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ac 	.word	0x200002ac
 80001cc:	0801255c 	.word	0x0801255c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9d3 	b.w	8001050 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b988 	b.w	8001050 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	468e      	mov	lr, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	4688      	mov	r8, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4617      	mov	r7, r2
 8000d6c:	d962      	bls.n	8000e34 <__udivmoddi4+0xdc>
 8000d6e:	fab2 f682 	clz	r6, r2
 8000d72:	b14e      	cbz	r6, 8000d88 <__udivmoddi4+0x30>
 8000d74:	f1c6 0320 	rsb	r3, r6, #32
 8000d78:	fa01 f806 	lsl.w	r8, r1, r6
 8000d7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d80:	40b7      	lsls	r7, r6
 8000d82:	ea43 0808 	orr.w	r8, r3, r8
 8000d86:	40b4      	lsls	r4, r6
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	fa1f fc87 	uxth.w	ip, r7
 8000d90:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d94:	0c23      	lsrs	r3, r4, #16
 8000d96:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9e:	fb01 f20c 	mul.w	r2, r1, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dac:	f080 80ea 	bcs.w	8000f84 <__udivmoddi4+0x22c>
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f240 80e7 	bls.w	8000f84 <__udivmoddi4+0x22c>
 8000db6:	3902      	subs	r1, #2
 8000db8:	443b      	add	r3, r7
 8000dba:	1a9a      	subs	r2, r3, r2
 8000dbc:	b2a3      	uxth	r3, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dca:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dce:	459c      	cmp	ip, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x8e>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd8:	f080 80d6 	bcs.w	8000f88 <__udivmoddi4+0x230>
 8000ddc:	459c      	cmp	ip, r3
 8000dde:	f240 80d3 	bls.w	8000f88 <__udivmoddi4+0x230>
 8000de2:	443b      	add	r3, r7
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dea:	eba3 030c 	sub.w	r3, r3, ip
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40f3      	lsrs	r3, r6
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xb6>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb0>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x14c>
 8000e16:	4573      	cmp	r3, lr
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xc8>
 8000e1a:	4282      	cmp	r2, r0
 8000e1c:	f200 8105 	bhi.w	800102a <__udivmoddi4+0x2d2>
 8000e20:	1a84      	subs	r4, r0, r2
 8000e22:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	4690      	mov	r8, r2
 8000e2a:	2d00      	cmp	r5, #0
 8000e2c:	d0e5      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e2e:	e9c5 4800 	strd	r4, r8, [r5]
 8000e32:	e7e2      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f000 8090 	beq.w	8000f5a <__udivmoddi4+0x202>
 8000e3a:	fab2 f682 	clz	r6, r2
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	f040 80a4 	bne.w	8000f8c <__udivmoddi4+0x234>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	0c03      	lsrs	r3, r0, #16
 8000e48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4c:	b280      	uxth	r0, r0
 8000e4e:	b2bc      	uxth	r4, r7
 8000e50:	2101      	movs	r1, #1
 8000e52:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e56:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5e:	fb04 f20c 	mul.w	r2, r4, ip
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x11e>
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e6c:	d202      	bcs.n	8000e74 <__udivmoddi4+0x11c>
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	f200 80e0 	bhi.w	8001034 <__udivmoddi4+0x2dc>
 8000e74:	46c4      	mov	ip, r8
 8000e76:	1a9b      	subs	r3, r3, r2
 8000e78:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e7c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e80:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e84:	fb02 f404 	mul.w	r4, r2, r4
 8000e88:	429c      	cmp	r4, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x144>
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x142>
 8000e94:	429c      	cmp	r4, r3
 8000e96:	f200 80ca 	bhi.w	800102e <__udivmoddi4+0x2d6>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	1b1b      	subs	r3, r3, r4
 8000e9e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x98>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb4:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ebc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ec0:	4323      	orrs	r3, r4
 8000ec2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec6:	fa1f fc87 	uxth.w	ip, r7
 8000eca:	fbbe f0f9 	udiv	r0, lr, r9
 8000ece:	0c1c      	lsrs	r4, r3, #16
 8000ed0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000edc:	45a6      	cmp	lr, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d909      	bls.n	8000ef8 <__udivmoddi4+0x1a0>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eea:	f080 809c 	bcs.w	8001026 <__udivmoddi4+0x2ce>
 8000eee:	45a6      	cmp	lr, r4
 8000ef0:	f240 8099 	bls.w	8001026 <__udivmoddi4+0x2ce>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	eba4 040e 	sub.w	r4, r4, lr
 8000efc:	fa1f fe83 	uxth.w	lr, r3
 8000f00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f04:	fb09 4413 	mls	r4, r9, r3, r4
 8000f08:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f0c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f10:	45a4      	cmp	ip, r4
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1ce>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f1a:	f080 8082 	bcs.w	8001022 <__udivmoddi4+0x2ca>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d97f      	bls.n	8001022 <__udivmoddi4+0x2ca>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f2a:	eba4 040c 	sub.w	r4, r4, ip
 8000f2e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f32:	4564      	cmp	r4, ip
 8000f34:	4673      	mov	r3, lr
 8000f36:	46e1      	mov	r9, ip
 8000f38:	d362      	bcc.n	8001000 <__udivmoddi4+0x2a8>
 8000f3a:	d05f      	beq.n	8000ffc <__udivmoddi4+0x2a4>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x1fe>
 8000f3e:	ebb8 0203 	subs.w	r2, r8, r3
 8000f42:	eb64 0409 	sbc.w	r4, r4, r9
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4e:	431e      	orrs	r6, r3
 8000f50:	40cc      	lsrs	r4, r1
 8000f52:	e9c5 6400 	strd	r6, r4, [r5]
 8000f56:	2100      	movs	r1, #0
 8000f58:	e74f      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000f5a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5e:	0c01      	lsrs	r1, r0, #16
 8000f60:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f64:	b280      	uxth	r0, r0
 8000f66:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	463c      	mov	r4, r7
 8000f70:	46b8      	mov	r8, r7
 8000f72:	46be      	mov	lr, r7
 8000f74:	2620      	movs	r6, #32
 8000f76:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f7a:	eba2 0208 	sub.w	r2, r2, r8
 8000f7e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f82:	e766      	b.n	8000e52 <__udivmoddi4+0xfa>
 8000f84:	4601      	mov	r1, r0
 8000f86:	e718      	b.n	8000dba <__udivmoddi4+0x62>
 8000f88:	4610      	mov	r0, r2
 8000f8a:	e72c      	b.n	8000de6 <__udivmoddi4+0x8e>
 8000f8c:	f1c6 0220 	rsb	r2, r6, #32
 8000f90:	fa2e f302 	lsr.w	r3, lr, r2
 8000f94:	40b7      	lsls	r7, r6
 8000f96:	40b1      	lsls	r1, r6
 8000f98:	fa20 f202 	lsr.w	r2, r0, r2
 8000f9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa6:	b2bc      	uxth	r4, r7
 8000fa8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fac:	0c11      	lsrs	r1, r2, #16
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb08 f904 	mul.w	r9, r8, r4
 8000fb6:	40b0      	lsls	r0, r6
 8000fb8:	4589      	cmp	r9, r1
 8000fba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fbe:	b280      	uxth	r0, r0
 8000fc0:	d93e      	bls.n	8001040 <__udivmoddi4+0x2e8>
 8000fc2:	1879      	adds	r1, r7, r1
 8000fc4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc8:	d201      	bcs.n	8000fce <__udivmoddi4+0x276>
 8000fca:	4589      	cmp	r9, r1
 8000fcc:	d81f      	bhi.n	800100e <__udivmoddi4+0x2b6>
 8000fce:	eba1 0109 	sub.w	r1, r1, r9
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fb09 f804 	mul.w	r8, r9, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe4:	4542      	cmp	r2, r8
 8000fe6:	d229      	bcs.n	800103c <__udivmoddi4+0x2e4>
 8000fe8:	18ba      	adds	r2, r7, r2
 8000fea:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fee:	d2c4      	bcs.n	8000f7a <__udivmoddi4+0x222>
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d2c2      	bcs.n	8000f7a <__udivmoddi4+0x222>
 8000ff4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff8:	443a      	add	r2, r7
 8000ffa:	e7be      	b.n	8000f7a <__udivmoddi4+0x222>
 8000ffc:	45f0      	cmp	r8, lr
 8000ffe:	d29d      	bcs.n	8000f3c <__udivmoddi4+0x1e4>
 8001000:	ebbe 0302 	subs.w	r3, lr, r2
 8001004:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001008:	3801      	subs	r0, #1
 800100a:	46e1      	mov	r9, ip
 800100c:	e796      	b.n	8000f3c <__udivmoddi4+0x1e4>
 800100e:	eba7 0909 	sub.w	r9, r7, r9
 8001012:	4449      	add	r1, r9
 8001014:	f1a8 0c02 	sub.w	ip, r8, #2
 8001018:	fbb1 f9fe 	udiv	r9, r1, lr
 800101c:	fb09 f804 	mul.w	r8, r9, r4
 8001020:	e7db      	b.n	8000fda <__udivmoddi4+0x282>
 8001022:	4673      	mov	r3, lr
 8001024:	e77f      	b.n	8000f26 <__udivmoddi4+0x1ce>
 8001026:	4650      	mov	r0, sl
 8001028:	e766      	b.n	8000ef8 <__udivmoddi4+0x1a0>
 800102a:	4608      	mov	r0, r1
 800102c:	e6fd      	b.n	8000e2a <__udivmoddi4+0xd2>
 800102e:	443b      	add	r3, r7
 8001030:	3a02      	subs	r2, #2
 8001032:	e733      	b.n	8000e9c <__udivmoddi4+0x144>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	443b      	add	r3, r7
 800103a:	e71c      	b.n	8000e76 <__udivmoddi4+0x11e>
 800103c:	4649      	mov	r1, r9
 800103e:	e79c      	b.n	8000f7a <__udivmoddi4+0x222>
 8001040:	eba1 0109 	sub.w	r1, r1, r9
 8001044:	46c4      	mov	ip, r8
 8001046:	fbb1 f9fe 	udiv	r9, r1, lr
 800104a:	fb09 f804 	mul.w	r8, r9, r4
 800104e:	e7c4      	b.n	8000fda <__udivmoddi4+0x282>

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af04      	add	r7, sp, #16
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 800105e:	4b32      	ldr	r3, [pc, #200]	@ (8001128 <set_int_enable+0xd4>)
 8001060:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001064:	2b00      	cmp	r3, #0
 8001066:	d025      	beq.n	80010b4 <set_int_enable+0x60>
        if (enable)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 800106e:	2302      	movs	r3, #2
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e001      	b.n	8001078 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001078:	4b2b      	ldr	r3, [pc, #172]	@ (8001128 <set_int_enable+0xd4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	b299      	uxth	r1, r3
 8001082:	4b29      	ldr	r3, [pc, #164]	@ (8001128 <set_int_enable+0xd4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	7bdb      	ldrb	r3, [r3, #15]
 8001088:	461a      	mov	r2, r3
 800108a:	2305      	movs	r3, #5
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2301      	movs	r3, #1
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f107 030f 	add.w	r3, r7, #15
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	4824      	ldr	r0, [pc, #144]	@ (800112c <set_int_enable+0xd8>)
 800109c:	f00a fa5a 	bl	800b554 <HAL_I2C_Mem_Write>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <set_int_enable+0x58>
            return -1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e039      	b.n	8001120 <set_int_enable+0xcc>
        st.chip_cfg.int_enable = tmp;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <set_int_enable+0xd4>)
 80010b0:	745a      	strb	r2, [r3, #17]
 80010b2:	e034      	b.n	800111e <set_int_enable+0xca>
    } else {
        if (!st.chip_cfg.sensors)
 80010b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <set_int_enable+0xd4>)
 80010b6:	7a9b      	ldrb	r3, [r3, #10]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <set_int_enable+0x6e>
            return -1;
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	e02e      	b.n	8001120 <set_int_enable+0xcc>
        if (enable && st.chip_cfg.int_enable)
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <set_int_enable+0x80>
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <set_int_enable+0xd4>)
 80010ca:	7c5b      	ldrb	r3, [r3, #17]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <set_int_enable+0x80>
            return 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e025      	b.n	8001120 <set_int_enable+0xcc>
        if (enable)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <set_int_enable+0x8c>
            tmp = BIT_DATA_RDY_EN;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e001      	b.n	80010e4 <set_int_enable+0x90>
        else
            tmp = 0x00;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80010e4:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <set_int_enable+0xd4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	b299      	uxth	r1, r3
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <set_int_enable+0xd4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	7bdb      	ldrb	r3, [r3, #15]
 80010f4:	461a      	mov	r2, r3
 80010f6:	2305      	movs	r3, #5
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	2301      	movs	r3, #1
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	f107 030f 	add.w	r3, r7, #15
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	4809      	ldr	r0, [pc, #36]	@ (800112c <set_int_enable+0xd8>)
 8001108:	f00a fa24 	bl	800b554 <HAL_I2C_Mem_Write>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <set_int_enable+0xc4>
            return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e003      	b.n	8001120 <set_int_enable+0xcc>
        st.chip_cfg.int_enable = tmp;
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	4b03      	ldr	r3, [pc, #12]	@ (8001128 <set_int_enable+0xd4>)
 800111c:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000000 	.word	0x20000000
 800112c:	20000328 	.word	0x20000328

08001130 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af04      	add	r7, sp, #16
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = 0x80;//BIT_RESET;
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 800113a:	4b95      	ldr	r3, [pc, #596]	@ (8001390 <mpu_init+0x260>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	b299      	uxth	r1, r3
 8001144:	4b92      	ldr	r3, [pc, #584]	@ (8001390 <mpu_init+0x260>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	7c9b      	ldrb	r3, [r3, #18]
 800114a:	461a      	mov	r2, r3
 800114c:	2305      	movs	r3, #5
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	2301      	movs	r3, #1
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	463b      	mov	r3, r7
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	488e      	ldr	r0, [pc, #568]	@ (8001394 <mpu_init+0x264>)
 800115c:	f00a f9fa 	bl	800b554 <HAL_I2C_Mem_Write>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <mpu_init+0x3c>
        return -1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e10c      	b.n	8001386 <mpu_init+0x256>
    delay_ms(100);
 800116c:	2064      	movs	r0, #100	@ 0x64
 800116e:	f009 fc01 	bl	800a974 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8001172:	2300      	movs	r3, #0
 8001174:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &(data[0])))
 8001176:	4b86      	ldr	r3, [pc, #536]	@ (8001390 <mpu_init+0x260>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b299      	uxth	r1, r3
 8001180:	4b83      	ldr	r3, [pc, #524]	@ (8001390 <mpu_init+0x260>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	7c9b      	ldrb	r3, [r3, #18]
 8001186:	461a      	mov	r2, r3
 8001188:	2305      	movs	r3, #5
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	2301      	movs	r3, #1
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	463b      	mov	r3, r7
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	487f      	ldr	r0, [pc, #508]	@ (8001394 <mpu_init+0x264>)
 8001198:	f00a f9dc 	bl	800b554 <HAL_I2C_Mem_Write>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <mpu_init+0x78>
        return -1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	e0ee      	b.n	8001386 <mpu_init+0x256>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 80011a8:	4b79      	ldr	r3, [pc, #484]	@ (8001390 <mpu_init+0x260>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	b299      	uxth	r1, r3
 80011b2:	4b77      	ldr	r3, [pc, #476]	@ (8001390 <mpu_init+0x260>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	7d9b      	ldrb	r3, [r3, #22]
 80011b8:	461a      	mov	r2, r3
 80011ba:	2305      	movs	r3, #5
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	2306      	movs	r3, #6
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	463b      	mov	r3, r7
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	4872      	ldr	r0, [pc, #456]	@ (8001394 <mpu_init+0x264>)
 80011ca:	f00a fabd 	bl	800b748 <HAL_I2C_Mem_Read>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <mpu_init+0xaa>
        return -1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	e0d5      	b.n	8001386 <mpu_init+0x256>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 80011da:	797b      	ldrb	r3, [r7, #5]
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 80011fa:	787b      	ldrb	r3, [r7, #1]
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8001204:	4313      	orrs	r3, r2
 8001206:	b25b      	sxtb	r3, r3
 8001208:	71fb      	strb	r3, [r7, #7]

    if (rev) {
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d015      	beq.n	800123c <mpu_init+0x10c>
        /* Congrats, these parts are better. */
        if (rev == 1)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d103      	bne.n	800121e <mpu_init+0xee>
            st.chip_cfg.accel_half = 1;
 8001216:	4b5e      	ldr	r3, [pc, #376]	@ (8001390 <mpu_init+0x260>)
 8001218:	2201      	movs	r2, #1
 800121a:	74da      	strb	r2, [r3, #19]
 800121c:	e041      	b.n	80012a2 <mpu_init+0x172>
        else if (rev == 2)
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d103      	bne.n	800122c <mpu_init+0xfc>
            st.chip_cfg.accel_half = 0;
 8001224:	4b5a      	ldr	r3, [pc, #360]	@ (8001390 <mpu_init+0x260>)
 8001226:	2200      	movs	r2, #0
 8001228:	74da      	strb	r2, [r3, #19]
 800122a:	e03a      	b.n	80012a2 <mpu_init+0x172>
        else {
            log_e("Unsupported software product rev %d.\n",rev);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4619      	mov	r1, r3
 8001230:	4859      	ldr	r0, [pc, #356]	@ (8001398 <mpu_init+0x268>)
 8001232:	f00e fb57 	bl	800f8e4 <iprintf>
            return -1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e0a4      	b.n	8001386 <mpu_init+0x256>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, &(data[0])))
 800123c:	4b54      	ldr	r3, [pc, #336]	@ (8001390 <mpu_init+0x260>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	b299      	uxth	r1, r3
 8001246:	4b52      	ldr	r3, [pc, #328]	@ (8001390 <mpu_init+0x260>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	78db      	ldrb	r3, [r3, #3]
 800124c:	461a      	mov	r2, r3
 800124e:	2305      	movs	r3, #5
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	2301      	movs	r3, #1
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	463b      	mov	r3, r7
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	484d      	ldr	r0, [pc, #308]	@ (8001394 <mpu_init+0x264>)
 800125e:	f00a fa73 	bl	800b748 <HAL_I2C_Mem_Read>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <mpu_init+0x13e>
            return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	e08b      	b.n	8001386 <mpu_init+0x256>
        rev = data[0] & 0x0F;
 800126e:	783b      	ldrb	r3, [r7, #0]
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	71fb      	strb	r3, [r7, #7]
        if (!rev) {
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <mpu_init+0x158>
            log_e("Product ID read as 0 indicates device is either incompatible or an MPU3050.\r\n");
 800127c:	4847      	ldr	r0, [pc, #284]	@ (800139c <mpu_init+0x26c>)
 800127e:	f00e fb99 	bl	800f9b4 <puts>
            return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e07e      	b.n	8001386 <mpu_init+0x256>
        } else if (rev == 4) {
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b04      	cmp	r3, #4
 800128c:	d106      	bne.n	800129c <mpu_init+0x16c>
            log_i("Half sensitivity part found.\r\n");
 800128e:	4844      	ldr	r0, [pc, #272]	@ (80013a0 <mpu_init+0x270>)
 8001290:	f00e fb90 	bl	800f9b4 <puts>
            st.chip_cfg.accel_half = 1;
 8001294:	4b3e      	ldr	r3, [pc, #248]	@ (8001390 <mpu_init+0x260>)
 8001296:	2201      	movs	r2, #1
 8001298:	74da      	strb	r2, [r3, #19]
 800129a:	e002      	b.n	80012a2 <mpu_init+0x172>
        } else
            st.chip_cfg.accel_half = 0;
 800129c:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <mpu_init+0x260>)
 800129e:	2200      	movs	r2, #0
 80012a0:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 80012a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <mpu_init+0x260>)
 80012a4:	22ff      	movs	r2, #255	@ 0xff
 80012a6:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 80012a8:	4b39      	ldr	r3, [pc, #228]	@ (8001390 <mpu_init+0x260>)
 80012aa:	22ff      	movs	r2, #255	@ 0xff
 80012ac:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 80012ae:	4b38      	ldr	r3, [pc, #224]	@ (8001390 <mpu_init+0x260>)
 80012b0:	22ff      	movs	r2, #255	@ 0xff
 80012b2:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 80012b4:	4b36      	ldr	r3, [pc, #216]	@ (8001390 <mpu_init+0x260>)
 80012b6:	22ff      	movs	r2, #255	@ 0xff
 80012b8:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 80012ba:	4b35      	ldr	r3, [pc, #212]	@ (8001390 <mpu_init+0x260>)
 80012bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012c0:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 80012c2:	4b33      	ldr	r3, [pc, #204]	@ (8001390 <mpu_init+0x260>)
 80012c4:	22ff      	movs	r2, #255	@ 0xff
 80012c6:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 80012c8:	4b31      	ldr	r3, [pc, #196]	@ (8001390 <mpu_init+0x260>)
 80012ca:	22ff      	movs	r2, #255	@ 0xff
 80012cc:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80012ce:	4b30      	ldr	r3, [pc, #192]	@ (8001390 <mpu_init+0x260>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 80012d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001390 <mpu_init+0x260>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    st.chip_cfg.latched_int = 0;
 80012dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001390 <mpu_init+0x260>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    st.chip_cfg.int_motion_only = 0;
 80012e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <mpu_init+0x260>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 80012ea:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <mpu_init+0x260>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80012f0:	220c      	movs	r2, #12
 80012f2:	2100      	movs	r1, #0
 80012f4:	482b      	ldr	r0, [pc, #172]	@ (80013a4 <mpu_init+0x274>)
 80012f6:	f00e fc4d 	bl	800fb94 <memset>
    st.chip_cfg.dmp_on = 0;
 80012fa:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <mpu_init+0x260>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    st.chip_cfg.dmp_loaded = 0;
 8001302:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <mpu_init+0x260>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <mpu_init+0x260>)
 800130c:	2200      	movs	r2, #0
 800130e:	84da      	strh	r2, [r3, #38]	@ 0x26

    if (mpu_set_gyro_fsr(2000))
 8001310:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001314:	f000 fa76 	bl	8001804 <mpu_set_gyro_fsr>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <mpu_init+0x1f4>
        return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e030      	b.n	8001386 <mpu_init+0x256>
    if (mpu_set_accel_fsr(2))
 8001324:	2002      	movs	r0, #2
 8001326:	f000 fb07 	bl	8001938 <mpu_set_accel_fsr>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <mpu_init+0x206>
        return -1;
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	e027      	b.n	8001386 <mpu_init+0x256>
    if (mpu_set_lpf(42))
 8001336:	202a      	movs	r0, #42	@ 0x2a
 8001338:	f000 fbae 	bl	8001a98 <mpu_set_lpf>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <mpu_init+0x218>
        return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e01e      	b.n	8001386 <mpu_init+0x256>
    if (mpu_set_sample_rate(50))
 8001348:	2032      	movs	r0, #50	@ 0x32
 800134a:	f000 fc19 	bl	8001b80 <mpu_set_sample_rate>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <mpu_init+0x22a>
        return -1;
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
 8001358:	e015      	b.n	8001386 <mpu_init+0x256>
    if (mpu_configure_fifo(0))
 800135a:	2000      	movs	r0, #0
 800135c:	f000 fd0a 	bl	8001d74 <mpu_configure_fifo>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <mpu_init+0x23c>
        return -1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e00c      	b.n	8001386 <mpu_init+0x256>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 800136c:	2000      	movs	r0, #0
 800136e:	f000 fe89 	bl	8002084 <mpu_set_bypass>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <mpu_init+0x24e>
        return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	e003      	b.n	8001386 <mpu_init+0x256>
#endif

    mpu_set_sensors(0);
 800137e:	2000      	movs	r0, #0
 8001380:	f000 fd4a 	bl	8001e18 <mpu_set_sensors>
    return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000000 	.word	0x20000000
 8001394:	20000328 	.word	0x20000328
 8001398:	08012578 	.word	0x08012578
 800139c:	080125a0 	.word	0x080125a0
 80013a0:	080125f0 	.word	0x080125f0
 80013a4:	20000016 	.word	0x20000016

080013a8 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af04      	add	r7, sp, #16
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b28      	cmp	r3, #40	@ 0x28
 80013b6:	d902      	bls.n	80013be <mpu_lp_accel_mode+0x16>
        return -1;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	e07d      	b.n	80014ba <mpu_lp_accel_mode+0x112>

    if (!rate) {
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d125      	bne.n	8001410 <mpu_lp_accel_mode+0x68>
        mpu_set_int_latched(0);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f000 ff5b 	bl	8002280 <mpu_set_int_latched>
        tmp[0] = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 80013ce:	2307      	movs	r3, #7
 80013d0:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80013d2:	4b3c      	ldr	r3, [pc, #240]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	b299      	uxth	r1, r3
 80013dc:	4b39      	ldr	r3, [pc, #228]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	7c9b      	ldrb	r3, [r3, #18]
 80013e2:	461a      	mov	r2, r3
 80013e4:	2305      	movs	r3, #5
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	2302      	movs	r3, #2
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	4834      	ldr	r0, [pc, #208]	@ (80014c8 <mpu_lp_accel_mode+0x120>)
 80013f6:	f00a f8ad 	bl	800b554 <HAL_I2C_Mem_Write>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <mpu_lp_accel_mode+0x5e>
            return -1;
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	e059      	b.n	80014ba <mpu_lp_accel_mode+0x112>
        st.chip_cfg.lp_accel_mode = 0;
 8001406:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 8001408:	2200      	movs	r2, #0
 800140a:	751a      	strb	r2, [r3, #20]
        return 0;
 800140c:	2300      	movs	r3, #0
 800140e:	e054      	b.n	80014ba <mpu_lp_accel_mode+0x112>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8001410:	2001      	movs	r0, #1
 8001412:	f000 ff35 	bl	8002280 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8001416:	2320      	movs	r3, #32
 8001418:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d105      	bne.n	800142c <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_1_25HZ;
 8001420:	2300      	movs	r3, #0
 8001422:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001424:	2005      	movs	r0, #5
 8001426:	f000 fb37 	bl	8001a98 <mpu_set_lpf>
 800142a:	e016      	b.n	800145a <mpu_lp_accel_mode+0xb2>
    } else if (rate <= 5) {
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d805      	bhi.n	800143e <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_5HZ;
 8001432:	2301      	movs	r3, #1
 8001434:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8001436:	2005      	movs	r0, #5
 8001438:	f000 fb2e 	bl	8001a98 <mpu_set_lpf>
 800143c:	e00d      	b.n	800145a <mpu_lp_accel_mode+0xb2>
    } else if (rate <= 20) {
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b14      	cmp	r3, #20
 8001442:	d805      	bhi.n	8001450 <mpu_lp_accel_mode+0xa8>
        tmp[1] = INV_LPA_20HZ;
 8001444:	2302      	movs	r3, #2
 8001446:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 8001448:	200a      	movs	r0, #10
 800144a:	f000 fb25 	bl	8001a98 <mpu_set_lpf>
 800144e:	e004      	b.n	800145a <mpu_lp_accel_mode+0xb2>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8001450:	2303      	movs	r3, #3
 8001452:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8001454:	2014      	movs	r0, #20
 8001456:	f000 fb1f 	bl	8001a98 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 800145a:	7b7b      	ldrb	r3, [r7, #13]
 800145c:	b25b      	sxtb	r3, r3
 800145e:	019b      	lsls	r3, r3, #6
 8001460:	b25b      	sxtb	r3, r3
 8001462:	f043 0307 	orr.w	r3, r3, #7
 8001466:	b25b      	sxtb	r3, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	b299      	uxth	r1, r3
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7c9b      	ldrb	r3, [r3, #18]
 800147c:	461a      	mov	r2, r3
 800147e:	2305      	movs	r3, #5
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	2302      	movs	r3, #2
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	480e      	ldr	r0, [pc, #56]	@ (80014c8 <mpu_lp_accel_mode+0x120>)
 8001490:	f00a f860 	bl	800b554 <HAL_I2C_Mem_Write>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <mpu_lp_accel_mode+0xf8>
        return -1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e00c      	b.n	80014ba <mpu_lp_accel_mode+0x112>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80014a0:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80014a2:	2208      	movs	r2, #8
 80014a4:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <mpu_lp_accel_mode+0x11c>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 fc5e 	bl	8001d74 <mpu_configure_fifo>

    return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000328 	.word	0x20000328

080014cc <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af04      	add	r7, sp, #16
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80014d2:	4b9e      	ldr	r3, [pc, #632]	@ (800174c <mpu_reset_fifo+0x280>)
 80014d4:	7a9b      	ldrb	r3, [r3, #10]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <mpu_reset_fifo+0x14>
        return -1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	e153      	b.n	8001788 <mpu_reset_fifo+0x2bc>

    data = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80014e4:	4b99      	ldr	r3, [pc, #612]	@ (800174c <mpu_reset_fifo+0x280>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	b299      	uxth	r1, r3
 80014ee:	4b97      	ldr	r3, [pc, #604]	@ (800174c <mpu_reset_fifo+0x280>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	7bdb      	ldrb	r3, [r3, #15]
 80014f4:	461a      	mov	r2, r3
 80014f6:	2305      	movs	r3, #5
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	2301      	movs	r3, #1
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2301      	movs	r3, #1
 8001504:	4892      	ldr	r0, [pc, #584]	@ (8001750 <mpu_reset_fifo+0x284>)
 8001506:	f00a f825 	bl	800b554 <HAL_I2C_Mem_Write>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <mpu_reset_fifo+0x4a>
        return -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	e138      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001516:	4b8d      	ldr	r3, [pc, #564]	@ (800174c <mpu_reset_fifo+0x280>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	b299      	uxth	r1, r3
 8001520:	4b8a      	ldr	r3, [pc, #552]	@ (800174c <mpu_reset_fifo+0x280>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	795b      	ldrb	r3, [r3, #5]
 8001526:	461a      	mov	r2, r3
 8001528:	2305      	movs	r3, #5
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	2301      	movs	r3, #1
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	4886      	ldr	r0, [pc, #536]	@ (8001750 <mpu_reset_fifo+0x284>)
 8001538:	f00a f80c 	bl	800b554 <HAL_I2C_Mem_Write>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <mpu_reset_fifo+0x7c>
        return -1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e11f      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001548:	4b80      	ldr	r3, [pc, #512]	@ (800174c <mpu_reset_fifo+0x280>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	b299      	uxth	r1, r3
 8001552:	4b7e      	ldr	r3, [pc, #504]	@ (800174c <mpu_reset_fifo+0x280>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	791b      	ldrb	r3, [r3, #4]
 8001558:	461a      	mov	r2, r3
 800155a:	2305      	movs	r3, #5
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	2301      	movs	r3, #1
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2301      	movs	r3, #1
 8001568:	4879      	ldr	r0, [pc, #484]	@ (8001750 <mpu_reset_fifo+0x284>)
 800156a:	f009 fff3 	bl	800b554 <HAL_I2C_Mem_Write>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <mpu_reset_fifo+0xae>
        return -1;
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	e106      	b.n	8001788 <mpu_reset_fifo+0x2bc>

    if (st.chip_cfg.dmp_on) {
 800157a:	4b74      	ldr	r3, [pc, #464]	@ (800174c <mpu_reset_fifo+0x280>)
 800157c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001580:	2b00      	cmp	r3, #0
 8001582:	d07e      	beq.n	8001682 <mpu_reset_fifo+0x1b6>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8001584:	230c      	movs	r3, #12
 8001586:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001588:	4b70      	ldr	r3, [pc, #448]	@ (800174c <mpu_reset_fifo+0x280>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	b299      	uxth	r1, r3
 8001592:	4b6e      	ldr	r3, [pc, #440]	@ (800174c <mpu_reset_fifo+0x280>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	791b      	ldrb	r3, [r3, #4]
 8001598:	461a      	mov	r2, r3
 800159a:	2305      	movs	r3, #5
 800159c:	9302      	str	r3, [sp, #8]
 800159e:	2301      	movs	r3, #1
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2301      	movs	r3, #1
 80015a8:	4869      	ldr	r0, [pc, #420]	@ (8001750 <mpu_reset_fifo+0x284>)
 80015aa:	f009 ffd3 	bl	800b554 <HAL_I2C_Mem_Write>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <mpu_reset_fifo+0xee>
            return -1;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	e0e6      	b.n	8001788 <mpu_reset_fifo+0x2bc>
       
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80015ba:	23c0      	movs	r3, #192	@ 0xc0
 80015bc:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80015be:	4b63      	ldr	r3, [pc, #396]	@ (800174c <mpu_reset_fifo+0x280>)
 80015c0:	7a9b      	ldrb	r3, [r3, #10]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <mpu_reset_fifo+0x108>
            data |= BIT_AUX_IF_EN;
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f043 0320 	orr.w	r3, r3, #32
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80015d4:	4b5d      	ldr	r3, [pc, #372]	@ (800174c <mpu_reset_fifo+0x280>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	b299      	uxth	r1, r3
 80015de:	4b5b      	ldr	r3, [pc, #364]	@ (800174c <mpu_reset_fifo+0x280>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	791b      	ldrb	r3, [r3, #4]
 80015e4:	461a      	mov	r2, r3
 80015e6:	2305      	movs	r3, #5
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2301      	movs	r3, #1
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2301      	movs	r3, #1
 80015f4:	4856      	ldr	r0, [pc, #344]	@ (8001750 <mpu_reset_fifo+0x284>)
 80015f6:	f009 ffad 	bl	800b554 <HAL_I2C_Mem_Write>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <mpu_reset_fifo+0x13a>
            return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
 8001604:	e0c0      	b.n	8001788 <mpu_reset_fifo+0x2bc>
        if (st.chip_cfg.int_enable)
 8001606:	4b51      	ldr	r3, [pc, #324]	@ (800174c <mpu_reset_fifo+0x280>)
 8001608:	7c5b      	ldrb	r3, [r3, #17]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <mpu_reset_fifo+0x148>
            data = BIT_DMP_INT_EN;
 800160e:	2302      	movs	r3, #2
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	e001      	b.n	8001618 <mpu_reset_fifo+0x14c>
        else
            data = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001618:	4b4c      	ldr	r3, [pc, #304]	@ (800174c <mpu_reset_fifo+0x280>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	b299      	uxth	r1, r3
 8001622:	4b4a      	ldr	r3, [pc, #296]	@ (800174c <mpu_reset_fifo+0x280>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	7bdb      	ldrb	r3, [r3, #15]
 8001628:	461a      	mov	r2, r3
 800162a:	2305      	movs	r3, #5
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	2301      	movs	r3, #1
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2301      	movs	r3, #1
 8001638:	4845      	ldr	r0, [pc, #276]	@ (8001750 <mpu_reset_fifo+0x284>)
 800163a:	f009 ff8b 	bl	800b554 <HAL_I2C_Mem_Write>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <mpu_reset_fifo+0x17e>
            return -1;
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	e09e      	b.n	8001788 <mpu_reset_fifo+0x2bc>
        data = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800164e:	4b3f      	ldr	r3, [pc, #252]	@ (800174c <mpu_reset_fifo+0x280>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	b299      	uxth	r1, r3
 8001658:	4b3c      	ldr	r3, [pc, #240]	@ (800174c <mpu_reset_fifo+0x280>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	795b      	ldrb	r3, [r3, #5]
 800165e:	461a      	mov	r2, r3
 8001660:	2305      	movs	r3, #5
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	2301      	movs	r3, #1
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	1dfb      	adds	r3, r7, #7
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2301      	movs	r3, #1
 800166e:	4838      	ldr	r0, [pc, #224]	@ (8001750 <mpu_reset_fifo+0x284>)
 8001670:	f009 ff70 	bl	800b554 <HAL_I2C_Mem_Write>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8085 	beq.w	8001786 <mpu_reset_fifo+0x2ba>
            return -1;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	e082      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    } else {
        data = BIT_FIFO_RST;
 8001682:	2304      	movs	r3, #4
 8001684:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001686:	4b31      	ldr	r3, [pc, #196]	@ (800174c <mpu_reset_fifo+0x280>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	b299      	uxth	r1, r3
 8001690:	4b2e      	ldr	r3, [pc, #184]	@ (800174c <mpu_reset_fifo+0x280>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	791b      	ldrb	r3, [r3, #4]
 8001696:	461a      	mov	r2, r3
 8001698:	2305      	movs	r3, #5
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2301      	movs	r3, #1
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	482a      	ldr	r0, [pc, #168]	@ (8001750 <mpu_reset_fifo+0x284>)
 80016a8:	f009 ff54 	bl	800b554 <HAL_I2C_Mem_Write>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <mpu_reset_fifo+0x1ec>
            return -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e067      	b.n	8001788 <mpu_reset_fifo+0x2bc>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80016b8:	4b24      	ldr	r3, [pc, #144]	@ (800174c <mpu_reset_fifo+0x280>)
 80016ba:	7c9b      	ldrb	r3, [r3, #18]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d105      	bne.n	80016cc <mpu_reset_fifo+0x200>
 80016c0:	4b22      	ldr	r3, [pc, #136]	@ (800174c <mpu_reset_fifo+0x280>)
 80016c2:	7a9b      	ldrb	r3, [r3, #10]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <mpu_reset_fifo+0x206>
            data = BIT_FIFO_EN;
 80016cc:	2340      	movs	r3, #64	@ 0x40
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	e001      	b.n	80016d6 <mpu_reset_fifo+0x20a>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 80016d2:	2360      	movs	r3, #96	@ 0x60
 80016d4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80016d6:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <mpu_reset_fifo+0x280>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	b299      	uxth	r1, r3
 80016e0:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <mpu_reset_fifo+0x280>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	791b      	ldrb	r3, [r3, #4]
 80016e6:	461a      	mov	r2, r3
 80016e8:	2305      	movs	r3, #5
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	2301      	movs	r3, #1
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	1dfb      	adds	r3, r7, #7
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	4816      	ldr	r0, [pc, #88]	@ (8001750 <mpu_reset_fifo+0x284>)
 80016f8:	f009 ff2c 	bl	800b554 <HAL_I2C_Mem_Write>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <mpu_reset_fifo+0x23c>
            return -1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e03f      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    
        if (st.chip_cfg.int_enable)
 8001708:	4b10      	ldr	r3, [pc, #64]	@ (800174c <mpu_reset_fifo+0x280>)
 800170a:	7c5b      	ldrb	r3, [r3, #17]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <mpu_reset_fifo+0x24a>
            data = BIT_DATA_RDY_EN;
 8001710:	2301      	movs	r3, #1
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	e001      	b.n	800171a <mpu_reset_fifo+0x24e>
        else
            data = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <mpu_reset_fifo+0x280>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	b299      	uxth	r1, r3
 8001724:	4b09      	ldr	r3, [pc, #36]	@ (800174c <mpu_reset_fifo+0x280>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	7bdb      	ldrb	r3, [r3, #15]
 800172a:	461a      	mov	r2, r3
 800172c:	2305      	movs	r3, #5
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	2301      	movs	r3, #1
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	1dfb      	adds	r3, r7, #7
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	4805      	ldr	r0, [pc, #20]	@ (8001750 <mpu_reset_fifo+0x284>)
 800173c:	f009 ff0a 	bl	800b554 <HAL_I2C_Mem_Write>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <mpu_reset_fifo+0x288>
            return -1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	e01d      	b.n	8001788 <mpu_reset_fifo+0x2bc>
 800174c:	20000000 	.word	0x20000000
 8001750:	20000328 	.word	0x20000328
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <mpu_reset_fifo+0x2c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	b299      	uxth	r1, r3
 800175e:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <mpu_reset_fifo+0x2c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	795b      	ldrb	r3, [r3, #5]
 8001764:	461a      	mov	r2, r3
 8001766:	2305      	movs	r3, #5
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	2301      	movs	r3, #1
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <mpu_reset_fifo+0x2c8>)
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	4808      	ldr	r0, [pc, #32]	@ (8001798 <mpu_reset_fifo+0x2cc>)
 8001776:	f009 feed 	bl	800b554 <HAL_I2C_Mem_Write>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <mpu_reset_fifo+0x2ba>
            return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	e000      	b.n	8001788 <mpu_reset_fifo+0x2bc>
    }
    return 0;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000000 	.word	0x20000000
 8001794:	20000010 	.word	0x20000010
 8001798:	20000328 	.word	0x20000328

0800179c <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 80017a4:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <mpu_get_gyro_fsr+0x64>)
 80017a6:	7a1b      	ldrb	r3, [r3, #8]
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d81e      	bhi.n	80017ea <mpu_get_gyro_fsr+0x4e>
 80017ac:	a201      	add	r2, pc, #4	@ (adr r2, 80017b4 <mpu_get_gyro_fsr+0x18>)
 80017ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b2:	bf00      	nop
 80017b4:	080017c5 	.word	0x080017c5
 80017b8:	080017cd 	.word	0x080017cd
 80017bc:	080017d7 	.word	0x080017d7
 80017c0:	080017e1 	.word	0x080017e1
    case INV_FSR_250DPS:
        fsr[0] = 250;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	22fa      	movs	r2, #250	@ 0xfa
 80017c8:	801a      	strh	r2, [r3, #0]
        break;
 80017ca:	e012      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80017d2:	801a      	strh	r2, [r3, #0]
        break;
 80017d4:	e00d      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017dc:	801a      	strh	r2, [r3, #0]
        break;
 80017de:	e008      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80017e6:	801a      	strh	r2, [r3, #0]
        break;
 80017e8:	e003      	b.n	80017f2 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	801a      	strh	r2, [r3, #0]
        break;
 80017f0:	bf00      	nop
    }
    return 0;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	20000000 	.word	0x20000000

08001804 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af04      	add	r7, sp, #16
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800180e:	4b2b      	ldr	r3, [pc, #172]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 8001810:	7a9b      	ldrb	r3, [r3, #10]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <mpu_set_gyro_fsr+0x18>
        return -1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e04a      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>

    switch (fsr) {
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001822:	d017      	beq.n	8001854 <mpu_set_gyro_fsr+0x50>
 8001824:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001828:	dc17      	bgt.n	800185a <mpu_set_gyro_fsr+0x56>
 800182a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800182e:	d00e      	beq.n	800184e <mpu_set_gyro_fsr+0x4a>
 8001830:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001834:	dc11      	bgt.n	800185a <mpu_set_gyro_fsr+0x56>
 8001836:	2bfa      	cmp	r3, #250	@ 0xfa
 8001838:	d003      	beq.n	8001842 <mpu_set_gyro_fsr+0x3e>
 800183a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800183e:	d003      	beq.n	8001848 <mpu_set_gyro_fsr+0x44>
 8001840:	e00b      	b.n	800185a <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
        break;
 8001846:	e00b      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8001848:	2308      	movs	r3, #8
 800184a:	73fb      	strb	r3, [r7, #15]
        break;
 800184c:	e008      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 800184e:	2310      	movs	r3, #16
 8001850:	73fb      	strb	r3, [r7, #15]
        break;
 8001852:	e005      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8001854:	2318      	movs	r3, #24
 8001856:	73fb      	strb	r3, [r7, #15]
        break;
 8001858:	e002      	b.n	8001860 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e028      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 8001862:	7a1a      	ldrb	r2, [r3, #8]
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	429a      	cmp	r2, r3
 800186c:	d101      	bne.n	8001872 <mpu_set_gyro_fsr+0x6e>
        return 0;
 800186e:	2300      	movs	r3, #0
 8001870:	e01f      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8001872:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	b299      	uxth	r1, r3
 800187c:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	799b      	ldrb	r3, [r3, #6]
 8001882:	461a      	mov	r2, r3
 8001884:	2305      	movs	r3, #5
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2301      	movs	r3, #1
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	f107 030f 	add.w	r3, r7, #15
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	480a      	ldr	r0, [pc, #40]	@ (80018c0 <mpu_set_gyro_fsr+0xbc>)
 8001896:	f009 fe5d 	bl	800b554 <HAL_I2C_Mem_Write>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <mpu_set_gyro_fsr+0xa2>
        return -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	e005      	b.n	80018b2 <mpu_set_gyro_fsr+0xae>
    st.chip_cfg.gyro_fsr = data >> 3;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <mpu_set_gyro_fsr+0xb8>)
 80018ae:	721a      	strb	r2, [r3, #8]
    return 0;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000328 	.word	0x20000328

080018c4 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <mpu_get_accel_fsr+0x70>)
 80018ce:	7a5b      	ldrb	r3, [r3, #9]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d81b      	bhi.n	800190c <mpu_get_accel_fsr+0x48>
 80018d4:	a201      	add	r2, pc, #4	@ (adr r2, 80018dc <mpu_get_accel_fsr+0x18>)
 80018d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018da:	bf00      	nop
 80018dc:	080018ed 	.word	0x080018ed
 80018e0:	080018f5 	.word	0x080018f5
 80018e4:	080018fd 	.word	0x080018fd
 80018e8:	08001905 	.word	0x08001905
    case INV_FSR_2G:
        fsr[0] = 2;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	701a      	strb	r2, [r3, #0]
        break;
 80018f2:	e00e      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2204      	movs	r2, #4
 80018f8:	701a      	strb	r2, [r3, #0]
        break;
 80018fa:	e00a      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2208      	movs	r2, #8
 8001900:	701a      	strb	r2, [r3, #0]
        break;
 8001902:	e006      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2210      	movs	r2, #16
 8001908:	701a      	strb	r2, [r3, #0]
        break;
 800190a:	e002      	b.n	8001912 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	e00a      	b.n	8001928 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <mpu_get_accel_fsr+0x70>)
 8001914:	7cdb      	ldrb	r3, [r3, #19]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	b2da      	uxtb	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	701a      	strb	r2, [r3, #0]
    return 0;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	20000000 	.word	0x20000000

08001938 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af04      	add	r7, sp, #16
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001942:	4b34      	ldr	r3, [pc, #208]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 8001944:	7a9b      	ldrb	r3, [r3, #10]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <mpu_set_accel_fsr+0x18>
        return -1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e05d      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>

    switch (fsr) {
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	3b02      	subs	r3, #2
 8001954:	2b0e      	cmp	r3, #14
 8001956:	d82d      	bhi.n	80019b4 <mpu_set_accel_fsr+0x7c>
 8001958:	a201      	add	r2, pc, #4	@ (adr r2, 8001960 <mpu_set_accel_fsr+0x28>)
 800195a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195e:	bf00      	nop
 8001960:	0800199d 	.word	0x0800199d
 8001964:	080019b5 	.word	0x080019b5
 8001968:	080019a3 	.word	0x080019a3
 800196c:	080019b5 	.word	0x080019b5
 8001970:	080019b5 	.word	0x080019b5
 8001974:	080019b5 	.word	0x080019b5
 8001978:	080019a9 	.word	0x080019a9
 800197c:	080019b5 	.word	0x080019b5
 8001980:	080019b5 	.word	0x080019b5
 8001984:	080019b5 	.word	0x080019b5
 8001988:	080019b5 	.word	0x080019b5
 800198c:	080019b5 	.word	0x080019b5
 8001990:	080019b5 	.word	0x080019b5
 8001994:	080019b5 	.word	0x080019b5
 8001998:	080019af 	.word	0x080019af
    case 2:
        data = INV_FSR_2G << 3;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
        break;
 80019a0:	e00b      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 80019a2:	2308      	movs	r3, #8
 80019a4:	73fb      	strb	r3, [r7, #15]
        break;
 80019a6:	e008      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 80019a8:	2310      	movs	r3, #16
 80019aa:	73fb      	strb	r3, [r7, #15]
        break;
 80019ac:	e005      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 80019ae:	2318      	movs	r3, #24
 80019b0:	73fb      	strb	r3, [r7, #15]
        break;
 80019b2:	e002      	b.n	80019ba <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
 80019b8:	e028      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 80019ba:	4b16      	ldr	r3, [pc, #88]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 80019bc:	7a5a      	ldrb	r2, [r3, #9]
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	08db      	lsrs	r3, r3, #3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d101      	bne.n	80019cc <mpu_set_accel_fsr+0x94>
        return 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	e01f      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	b299      	uxth	r1, r3
 80019d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	79db      	ldrb	r3, [r3, #7]
 80019dc:	461a      	mov	r2, r3
 80019de:	2305      	movs	r3, #5
 80019e0:	9302      	str	r3, [sp, #8]
 80019e2:	2301      	movs	r3, #1
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	f107 030f 	add.w	r3, r7, #15
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2301      	movs	r3, #1
 80019ee:	480a      	ldr	r0, [pc, #40]	@ (8001a18 <mpu_set_accel_fsr+0xe0>)
 80019f0:	f009 fdb0 	bl	800b554 <HAL_I2C_Mem_Write>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <mpu_set_accel_fsr+0xc8>
        return -1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	e005      	b.n	8001a0c <mpu_set_accel_fsr+0xd4>
    st.chip_cfg.accel_fsr = data >> 3;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	08db      	lsrs	r3, r3, #3
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <mpu_set_accel_fsr+0xdc>)
 8001a08:	725a      	strb	r2, [r3, #9]
    return 0;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000328 	.word	0x20000328

08001a1c <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 8001a24:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <mpu_get_lpf+0x78>)
 8001a26:	7adb      	ldrb	r3, [r3, #11]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	2b05      	cmp	r3, #5
 8001a2c:	d826      	bhi.n	8001a7c <mpu_get_lpf+0x60>
 8001a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <mpu_get_lpf+0x18>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a4d 	.word	0x08001a4d
 8001a38:	08001a55 	.word	0x08001a55
 8001a3c:	08001a5d 	.word	0x08001a5d
 8001a40:	08001a65 	.word	0x08001a65
 8001a44:	08001a6d 	.word	0x08001a6d
 8001a48:	08001a75 	.word	0x08001a75
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	22bc      	movs	r2, #188	@ 0xbc
 8001a50:	801a      	strh	r2, [r3, #0]
        break;
 8001a52:	e017      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2262      	movs	r2, #98	@ 0x62
 8001a58:	801a      	strh	r2, [r3, #0]
        break;
 8001a5a:	e013      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	222a      	movs	r2, #42	@ 0x2a
 8001a60:	801a      	strh	r2, [r3, #0]
        break;
 8001a62:	e00f      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2214      	movs	r2, #20
 8001a68:	801a      	strh	r2, [r3, #0]
        break;
 8001a6a:	e00b      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	220a      	movs	r2, #10
 8001a70:	801a      	strh	r2, [r3, #0]
        break;
 8001a72:	e007      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2205      	movs	r2, #5
 8001a78:	801a      	strh	r2, [r3, #0]
        break;
 8001a7a:	e003      	b.n	8001a84 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	801a      	strh	r2, [r3, #0]
        break;
 8001a82:	bf00      	nop
    }
    return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000000 	.word	0x20000000

08001a98 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af04      	add	r7, sp, #16
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001aa2:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001aa4:	7a9b      	ldrb	r3, [r3, #10]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <mpu_set_lpf+0x18>
        return -1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e044      	b.n	8001b3a <mpu_set_lpf+0xa2>

    if (lpf >= 188)
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	2bbb      	cmp	r3, #187	@ 0xbb
 8001ab4:	d902      	bls.n	8001abc <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	e019      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	2b61      	cmp	r3, #97	@ 0x61
 8001ac0:	d902      	bls.n	8001ac8 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	e013      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	2b29      	cmp	r3, #41	@ 0x29
 8001acc:	d902      	bls.n	8001ad4 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	e00d      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	2b13      	cmp	r3, #19
 8001ad8:	d902      	bls.n	8001ae0 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8001ada:	2304      	movs	r3, #4
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e007      	b.n	8001af0 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	2b09      	cmp	r3, #9
 8001ae4:	d902      	bls.n	8001aec <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 8001ae6:	2305      	movs	r3, #5
 8001ae8:	73fb      	strb	r3, [r7, #15]
 8001aea:	e001      	b.n	8001af0 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8001aec:	2306      	movs	r3, #6
 8001aee:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8001af0:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001af2:	7ada      	ldrb	r2, [r3, #11]
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d101      	bne.n	8001afe <mpu_set_lpf+0x66>
        return 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e01d      	b.n	8001b3a <mpu_set_lpf+0xa2>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001afe:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	b299      	uxth	r1, r3
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	789b      	ldrb	r3, [r3, #2]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2305      	movs	r3, #5
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	2301      	movs	r3, #1
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	f107 030f 	add.w	r3, r7, #15
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	4809      	ldr	r0, [pc, #36]	@ (8001b48 <mpu_set_lpf+0xb0>)
 8001b22:	f009 fd17 	bl	800b554 <HAL_I2C_Mem_Write>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <mpu_set_lpf+0x9a>
        return -1;
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b30:	e003      	b.n	8001b3a <mpu_set_lpf+0xa2>
    st.chip_cfg.lpf = data;
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <mpu_set_lpf+0xac>)
 8001b36:	72da      	strb	r2, [r3, #11]
    return 0;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000328 	.word	0x20000328

08001b4c <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 8001b54:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <mpu_get_sample_rate+0x30>)
 8001b56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <mpu_get_sample_rate+0x18>
        return -1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e004      	b.n	8001b6e <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <mpu_get_sample_rate+0x30>)
 8001b66:	89da      	ldrh	r2, [r3, #14]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	801a      	strh	r2, [r3, #0]
    return 0;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000000 	.word	0x20000000

08001b80 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af04      	add	r7, sp, #16
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001b8a:	4b34      	ldr	r3, [pc, #208]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001b8c:	7a9b      	ldrb	r3, [r3, #10]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d102      	bne.n	8001b98 <mpu_set_sample_rate+0x18>
        return -1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e05c      	b.n	8001c52 <mpu_set_sample_rate+0xd2>

    if (st.chip_cfg.dmp_on)
 8001b98:	4b30      	ldr	r3, [pc, #192]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001b9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <mpu_set_sample_rate+0x28>
        return -1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	e054      	b.n	8001c52 <mpu_set_sample_rate+0xd2>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001baa:	7d1b      	ldrb	r3, [r3, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00f      	beq.n	8001bd0 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <mpu_set_sample_rate+0x4a>
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	2b28      	cmp	r3, #40	@ 0x28
 8001bba:	d806      	bhi.n	8001bca <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fbf1 	bl	80013a8 <mpu_lp_accel_mode>
                return 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e043      	b.n	8001c52 <mpu_set_sample_rate+0xd2>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff fbec 	bl	80013a8 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d802      	bhi.n	8001bdc <mpu_set_sample_rate+0x5c>
            rate = 4;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	80fb      	strh	r3, [r7, #6]
 8001bda:	e006      	b.n	8001bea <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001be2:	d902      	bls.n	8001bea <mpu_set_sample_rate+0x6a>
            rate = 1000;
 8001be4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be8:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bf0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8001bfc:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	b299      	uxth	r1, r3
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	785b      	ldrb	r3, [r3, #1]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2305      	movs	r3, #5
 8001c10:	9302      	str	r3, [sp, #8]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	f107 030f 	add.w	r3, r7, #15
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	4810      	ldr	r0, [pc, #64]	@ (8001c60 <mpu_set_sample_rate+0xe0>)
 8001c20:	f009 fc98 	bl	800b554 <HAL_I2C_Mem_Write>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <mpu_set_sample_rate+0xb0>
            return -1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e010      	b.n	8001c52 <mpu_set_sample_rate+0xd2>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	3301      	adds	r3, #1
 8001c34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c38:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001c40:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <mpu_set_sample_rate+0xdc>)
 8001c44:	89db      	ldrh	r3, [r3, #14]
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff24 	bl	8001a98 <mpu_set_lpf>
        return 0;
 8001c50:	2300      	movs	r3, #0
    }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000328 	.word	0x20000328

08001c64 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <mpu_get_gyro_sens+0x5c>)
 8001c6e:	7a1b      	ldrb	r3, [r3, #8]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d81b      	bhi.n	8001cac <mpu_get_gyro_sens+0x48>
 8001c74:	a201      	add	r2, pc, #4	@ (adr r2, 8001c7c <mpu_get_gyro_sens+0x18>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001c95 	.word	0x08001c95
 8001c84:	08001c9d 	.word	0x08001c9d
 8001c88:	08001ca5 	.word	0x08001ca5
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <mpu_get_gyro_sens+0x60>)
 8001c90:	601a      	str	r2, [r3, #0]
        break;
 8001c92:	e00e      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <mpu_get_gyro_sens+0x64>)
 8001c98:	601a      	str	r2, [r3, #0]
        break;
 8001c9a:	e00a      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <mpu_get_gyro_sens+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
        break;
 8001ca2:	e006      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <mpu_get_gyro_sens+0x6c>)
 8001ca8:	601a      	str	r2, [r3, #0]
        break;
 8001caa:	e002      	b.n	8001cb2 <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	e000      	b.n	8001cb4 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	43030000 	.word	0x43030000
 8001cc8:	42830000 	.word	0x42830000
 8001ccc:	42033333 	.word	0x42033333
 8001cd0:	41833333 	.word	0x41833333

08001cd4 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d4c <mpu_get_accel_sens+0x78>)
 8001cde:	7a5b      	ldrb	r3, [r3, #9]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d81f      	bhi.n	8001d24 <mpu_get_accel_sens+0x50>
 8001ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cec <mpu_get_accel_sens+0x18>)
 8001ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cea:	bf00      	nop
 8001cec:	08001cfd 	.word	0x08001cfd
 8001cf0:	08001d07 	.word	0x08001d07
 8001cf4:	08001d11 	.word	0x08001d11
 8001cf8:	08001d1b 	.word	0x08001d1b
    case INV_FSR_2G:
        sens[0] = 16384;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d02:	801a      	strh	r2, [r3, #0]
        break;
 8001d04:	e011      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f641 729c 	movw	r2, #8092	@ 0x1f9c
 8001d0c:	801a      	strh	r2, [r3, #0]
        break;
 8001d0e:	e00c      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d16:	801a      	strh	r2, [r3, #0]
        break;
 8001d18:	e007      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d20:	801a      	strh	r2, [r3, #0]
        break;
 8001d22:	e002      	b.n	8001d2a <mpu_get_accel_sens+0x56>
    default:
        return -1;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	e00a      	b.n	8001d40 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8001d2a:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <mpu_get_accel_sens+0x78>)
 8001d2c:	7cdb      	ldrb	r3, [r3, #19]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	085b      	lsrs	r3, r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	801a      	strh	r2, [r3, #0]
    return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	20000000 	.word	0x20000000

08001d50 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8001d58:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <mpu_get_fifo_config+0x20>)
 8001d5a:	7c1a      	ldrb	r2, [r3, #16]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	701a      	strb	r2, [r3, #0]
    return 0;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000000 	.word	0x20000000

08001d74 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 8001d8a:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001d8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <mpu_configure_fifo+0x24>
        return 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e038      	b.n	8001e0a <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 8001d98:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001d9a:	7a9b      	ldrb	r3, [r3, #10]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <mpu_configure_fifo+0x32>
            return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
 8001da4:	e031      	b.n	8001e0a <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 8001da6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001da8:	7c1b      	ldrb	r3, [r3, #16]
 8001daa:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dae:	7a9a      	ldrb	r2, [r3, #10]
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4013      	ands	r3, r2
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001db8:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8001dba:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dbc:	7c1b      	ldrb	r3, [r3, #16]
 8001dbe:	79fa      	ldrb	r2, [r7, #7]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d003      	beq.n	8001dcc <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	e001      	b.n	8001dd0 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d103      	bne.n	8001dde <mpu_configure_fifo+0x6a>
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dd8:	7d1b      	ldrb	r3, [r3, #20]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <mpu_configure_fifo+0x72>
            set_int_enable(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f7ff f938 	bl	8001054 <set_int_enable>
 8001de4:	e002      	b.n	8001dec <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff f934 	bl	8001054 <set_int_enable>
        if (sensors) {
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00a      	beq.n	8001e08 <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8001df2:	f7ff fb6b 	bl	80014cc <mpu_reset_fifo>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8001dfc:	4a05      	ldr	r2, [pc, #20]	@ (8001e14 <mpu_configure_fifo+0xa0>)
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	7413      	strb	r3, [r2, #16]
                return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	e000      	b.n	8001e0a <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8001e08:	68fb      	ldr	r3, [r7, #12]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000

08001e18 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af04      	add	r7, sp, #16
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e007      	b.n	8001e42 <mpu_set_sensors+0x2a>
    else if (sensors)
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <mpu_set_sensors+0x26>
        data = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e001      	b.n	8001e42 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8001e3e:	2340      	movs	r3, #64	@ 0x40
 8001e40:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001e42:	4b40      	ldr	r3, [pc, #256]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	b299      	uxth	r1, r3
 8001e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	7c9b      	ldrb	r3, [r3, #18]
 8001e52:	461a      	mov	r2, r3
 8001e54:	2305      	movs	r3, #5
 8001e56:	9302      	str	r3, [sp, #8]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	f107 030f 	add.w	r3, r7, #15
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	2301      	movs	r3, #1
 8001e64:	4838      	ldr	r0, [pc, #224]	@ (8001f48 <mpu_set_sensors+0x130>)
 8001e66:	f009 fb75 	bl	800b554 <HAL_I2C_Mem_Write>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <mpu_set_sensors+0x64>
        st.chip_cfg.sensors = 0;
 8001e70:	4b34      	ldr	r3, [pc, #208]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	729a      	strb	r2, [r3, #10]
        return -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e05f      	b.n	8001f3c <mpu_set_sensors+0x124>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b2f      	ldr	r3, [pc, #188]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001e86:	731a      	strb	r2, [r3, #12]

    data = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d104      	bne.n	8001ea0 <mpu_set_sensors+0x88>
        data |= BIT_STBY_XG;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d104      	bne.n	8001eb4 <mpu_set_sensors+0x9c>
        data |= BIT_STBY_YG;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d104      	bne.n	8001ec8 <mpu_set_sensors+0xb0>
        data |= BIT_STBY_ZG;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d104      	bne.n	8001edc <mpu_set_sensors+0xc4>
        data |= BIT_STBY_XYZA;
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001edc:	4b19      	ldr	r3, [pc, #100]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	b299      	uxth	r1, r3
 8001ee6:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	7cdb      	ldrb	r3, [r3, #19]
 8001eec:	461a      	mov	r2, r3
 8001eee:	2305      	movs	r3, #5
 8001ef0:	9302      	str	r3, [sp, #8]
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	f107 030f 	add.w	r3, r7, #15
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2301      	movs	r3, #1
 8001efe:	4812      	ldr	r0, [pc, #72]	@ (8001f48 <mpu_set_sensors+0x130>)
 8001f00:	f009 fb28 	bl	800b554 <HAL_I2C_Mem_Write>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <mpu_set_sensors+0xfe>
        st.chip_cfg.sensors = 0;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	729a      	strb	r2, [r3, #10]
        return -1;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295
 8001f14:	e012      	b.n	8001f3c <mpu_set_sensors+0x124>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <mpu_set_sensors+0x110>
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d002      	beq.n	8001f28 <mpu_set_sensors+0x110>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f000 f9ac 	bl	8002280 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8001f28:	4a06      	ldr	r2, [pc, #24]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8001f2e:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <mpu_set_sensors+0x12c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8001f34:	2032      	movs	r0, #50	@ 0x32
 8001f36:	f008 fd1d 	bl	800a974 <HAL_Delay>
    return 0;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000000 	.word	0x20000000
 8001f48:	20000328 	.word	0x20000328

08001f4c <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	@ 0x28
 8001f50:	af04      	add	r7, sp, #16
 8001f52:	4603      	mov	r3, r0
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8001f5a:	4b48      	ldr	r3, [pc, #288]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <mpu_read_fifo_stream+0x1e>
        return -1;
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295
 8001f68:	e083      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    if (!st.chip_cfg.sensors)
 8001f6a:	4b44      	ldr	r3, [pc, #272]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f6c:	7a9b      	ldrb	r3, [r3, #10]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <mpu_read_fifo_stream+0x2c>
        return -1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	e07c      	b.n	8002072 <mpu_read_fifo_stream+0x126>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8001f78:	4b40      	ldr	r3, [pc, #256]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	b299      	uxth	r1, r3
 8001f82:	4b3e      	ldr	r3, [pc, #248]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	7a9b      	ldrb	r3, [r3, #10]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2305      	movs	r3, #5
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	2302      	movs	r3, #2
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2301      	movs	r3, #1
 8001f9a:	4839      	ldr	r0, [pc, #228]	@ (8002080 <mpu_read_fifo_stream+0x134>)
 8001f9c:	f009 fbd4 	bl	800b748 <HAL_I2C_Mem_Read>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <mpu_read_fifo_stream+0x60>
        return -1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	e062      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8001fac:	7d3b      	ldrb	r3, [r7, #20]
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	b21a      	sxth	r2, r3
 8001fb4:	7d7b      	ldrb	r3, [r7, #21]
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8001fbe:	8afa      	ldrh	r2, [r7, #22]
 8001fc0:	89fb      	ldrh	r3, [r7, #14]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d205      	bcs.n	8001fd2 <mpu_read_fifo_stream+0x86>
        more[0] = 0;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
        return -1;
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd0:	e04f      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	885b      	ldrh	r3, [r3, #2]
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	8afa      	ldrh	r2, [r7, #22]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d923      	bls.n	800202a <mpu_read_fifo_stream+0xde>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8001fe2:	4b26      	ldr	r3, [pc, #152]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	b299      	uxth	r1, r3
 8001fec:	4b23      	ldr	r3, [pc, #140]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	7c5b      	ldrb	r3, [r3, #17]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2305      	movs	r3, #5
 8001ff6:	9302      	str	r3, [sp, #8]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2301      	movs	r3, #1
 8002004:	481e      	ldr	r0, [pc, #120]	@ (8002080 <mpu_read_fifo_stream+0x134>)
 8002006:	f009 fb9f 	bl	800b748 <HAL_I2C_Mem_Read>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <mpu_read_fifo_stream+0xca>
            return -1;
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	e02d      	b.n	8002072 <mpu_read_fifo_stream+0x126>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8002016:	7d3b      	ldrb	r3, [r7, #20]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	d004      	beq.n	800202a <mpu_read_fifo_stream+0xde>
            mpu_reset_fifo();
 8002020:	f7ff fa54 	bl	80014cc <mpu_reset_fifo>
            return -2;
 8002024:	f06f 0301 	mvn.w	r3, #1
 8002028:	e023      	b.n	8002072 <mpu_read_fifo_stream+0x126>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <mpu_read_fifo_stream+0x130>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	b299      	uxth	r1, r3
 8002034:	4b11      	ldr	r3, [pc, #68]	@ (800207c <mpu_read_fifo_stream+0x130>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	7adb      	ldrb	r3, [r3, #11]
 800203a:	461a      	mov	r2, r3
 800203c:	2305      	movs	r3, #5
 800203e:	9302      	str	r3, [sp, #8]
 8002040:	89fb      	ldrh	r3, [r7, #14]
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2301      	movs	r3, #1
 800204a:	480d      	ldr	r0, [pc, #52]	@ (8002080 <mpu_read_fifo_stream+0x134>)
 800204c:	f009 fb7c 	bl	800b748 <HAL_I2C_Mem_Read>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <mpu_read_fifo_stream+0x110>
        return -1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	e00a      	b.n	8002072 <mpu_read_fifo_stream+0x126>
    more[0] = fifo_count / length - 1;
 800205c:	8afa      	ldrh	r2, [r7, #22]
 800205e:	89fb      	ldrh	r3, [r7, #14]
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	b29b      	uxth	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b2da      	uxtb	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	701a      	strb	r2, [r3, #0]
    return 0;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000000 	.word	0x20000000
 8002080:	20000328 	.word	0x20000328

08002084 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af04      	add	r7, sp, #16
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800208e:	4b7a      	ldr	r3, [pc, #488]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002090:	7c9b      	ldrb	r3, [r3, #18]
 8002092:	79fa      	ldrb	r2, [r7, #7]
 8002094:	429a      	cmp	r2, r3
 8002096:	d101      	bne.n	800209c <mpu_set_bypass+0x18>
        return 0;
 8002098:	2300      	movs	r3, #0
 800209a:	e0e8      	b.n	800226e <mpu_set_bypass+0x1ea>

    if (bypass_on) {
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d06b      	beq.n	800217a <mpu_set_bypass+0xf6>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80020a2:	4b75      	ldr	r3, [pc, #468]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	b299      	uxth	r1, r3
 80020ac:	4b72      	ldr	r3, [pc, #456]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	791b      	ldrb	r3, [r3, #4]
 80020b2:	461a      	mov	r2, r3
 80020b4:	2305      	movs	r3, #5
 80020b6:	9302      	str	r3, [sp, #8]
 80020b8:	2301      	movs	r3, #1
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	f107 030f 	add.w	r3, r7, #15
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2301      	movs	r3, #1
 80020c4:	486d      	ldr	r0, [pc, #436]	@ (800227c <mpu_set_bypass+0x1f8>)
 80020c6:	f009 fb3f 	bl	800b748 <HAL_I2C_Mem_Read>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <mpu_set_bypass+0x52>
            return -1;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
 80020d4:	e0cb      	b.n	800226e <mpu_set_bypass+0x1ea>
        tmp &= ~BIT_AUX_IF_EN;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	f023 0320 	bic.w	r3, r3, #32
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80020e0:	4b65      	ldr	r3, [pc, #404]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	b299      	uxth	r1, r3
 80020ea:	4b63      	ldr	r3, [pc, #396]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	791b      	ldrb	r3, [r3, #4]
 80020f0:	461a      	mov	r2, r3
 80020f2:	2305      	movs	r3, #5
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	2301      	movs	r3, #1
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	f107 030f 	add.w	r3, r7, #15
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2301      	movs	r3, #1
 8002102:	485e      	ldr	r0, [pc, #376]	@ (800227c <mpu_set_bypass+0x1f8>)
 8002104:	f009 fa26 	bl	800b554 <HAL_I2C_Mem_Write>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <mpu_set_bypass+0x90>
            return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
 8002112:	e0ac      	b.n	800226e <mpu_set_bypass+0x1ea>
        delay_ms(3);
 8002114:	2003      	movs	r0, #3
 8002116:	f008 fc2d 	bl	800a974 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 800211a:	2302      	movs	r3, #2
 800211c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800211e:	4b56      	ldr	r3, [pc, #344]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002120:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <mpu_set_bypass+0xae>
            tmp |= BIT_ACTL;
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800212e:	b2db      	uxtb	r3, r3
 8002130:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002132:	4b51      	ldr	r3, [pc, #324]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002134:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <mpu_set_bypass+0xc2>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002142:	b2db      	uxtb	r3, r3
 8002144:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002146:	4b4c      	ldr	r3, [pc, #304]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	b299      	uxth	r1, r3
 8002150:	4b49      	ldr	r3, [pc, #292]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	7d1b      	ldrb	r3, [r3, #20]
 8002156:	461a      	mov	r2, r3
 8002158:	2305      	movs	r3, #5
 800215a:	9302      	str	r3, [sp, #8]
 800215c:	2301      	movs	r3, #1
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	f107 030f 	add.w	r3, r7, #15
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2301      	movs	r3, #1
 8002168:	4844      	ldr	r0, [pc, #272]	@ (800227c <mpu_set_bypass+0x1f8>)
 800216a:	f009 f9f3 	bl	800b554 <HAL_I2C_Mem_Write>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d078      	beq.n	8002266 <mpu_set_bypass+0x1e2>
            return -1;
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	e079      	b.n	800226e <mpu_set_bypass+0x1ea>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800217a:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <mpu_set_bypass+0x1f4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	b299      	uxth	r1, r3
 8002184:	4b3c      	ldr	r3, [pc, #240]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	791b      	ldrb	r3, [r3, #4]
 800218a:	461a      	mov	r2, r3
 800218c:	2305      	movs	r3, #5
 800218e:	9302      	str	r3, [sp, #8]
 8002190:	2301      	movs	r3, #1
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	f107 030f 	add.w	r3, r7, #15
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2301      	movs	r3, #1
 800219c:	4837      	ldr	r0, [pc, #220]	@ (800227c <mpu_set_bypass+0x1f8>)
 800219e:	f009 fad3 	bl	800b748 <HAL_I2C_Mem_Read>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <mpu_set_bypass+0x12a>
            return -1;
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ac:	e05f      	b.n	800226e <mpu_set_bypass+0x1ea>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80021ae:	4b32      	ldr	r3, [pc, #200]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80021b0:	7a9b      	ldrb	r3, [r3, #10]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <mpu_set_bypass+0x142>
            tmp |= BIT_AUX_IF_EN;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	f043 0320 	orr.w	r3, r3, #32
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	e004      	b.n	80021d0 <mpu_set_bypass+0x14c>
        else
            tmp &= ~BIT_AUX_IF_EN;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	f023 0320 	bic.w	r3, r3, #32
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80021d0:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	b299      	uxth	r1, r3
 80021da:	4b27      	ldr	r3, [pc, #156]	@ (8002278 <mpu_set_bypass+0x1f4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	791b      	ldrb	r3, [r3, #4]
 80021e0:	461a      	mov	r2, r3
 80021e2:	2305      	movs	r3, #5
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	2301      	movs	r3, #1
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	f107 030f 	add.w	r3, r7, #15
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2301      	movs	r3, #1
 80021f2:	4822      	ldr	r0, [pc, #136]	@ (800227c <mpu_set_bypass+0x1f8>)
 80021f4:	f009 f9ae 	bl	800b554 <HAL_I2C_Mem_Write>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <mpu_set_bypass+0x180>
            return -1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	e034      	b.n	800226e <mpu_set_bypass+0x1ea>
        delay_ms(3);
 8002204:	2003      	movs	r0, #3
 8002206:	f008 fbb5 	bl	800a974 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 800220a:	4b1b      	ldr	r3, [pc, #108]	@ (8002278 <mpu_set_bypass+0x1f4>)
 800220c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <mpu_set_bypass+0x196>
            tmp = BIT_ACTL;
 8002214:	2380      	movs	r3, #128	@ 0x80
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	e001      	b.n	800221e <mpu_set_bypass+0x19a>
        else
            tmp = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002220:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <mpu_set_bypass+0x1ae>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800222e:	b2db      	uxtb	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	b299      	uxth	r1, r3
 800223c:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <mpu_set_bypass+0x1f4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	7d1b      	ldrb	r3, [r3, #20]
 8002242:	461a      	mov	r2, r3
 8002244:	2305      	movs	r3, #5
 8002246:	9302      	str	r3, [sp, #8]
 8002248:	2301      	movs	r3, #1
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	f107 030f 	add.w	r3, r7, #15
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2301      	movs	r3, #1
 8002254:	4809      	ldr	r0, [pc, #36]	@ (800227c <mpu_set_bypass+0x1f8>)
 8002256:	f009 f97d 	bl	800b554 <HAL_I2C_Mem_Write>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <mpu_set_bypass+0x1e2>
            return -1;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295
 8002264:	e003      	b.n	800226e <mpu_set_bypass+0x1ea>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8002266:	4a04      	ldr	r2, [pc, #16]	@ (8002278 <mpu_set_bypass+0x1f4>)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	7493      	strb	r3, [r2, #18]
    return 0;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000000 	.word	0x20000000
 800227c:	20000328 	.word	0x20000328

08002280 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af04      	add	r7, sp, #16
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800228a:	4b23      	ldr	r3, [pc, #140]	@ (8002318 <mpu_set_int_latched+0x98>)
 800228c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002290:	79fa      	ldrb	r2, [r7, #7]
 8002292:	429a      	cmp	r2, r3
 8002294:	d101      	bne.n	800229a <mpu_set_int_latched+0x1a>
        return 0;
 8002296:	2300      	movs	r3, #0
 8002298:	e039      	b.n	800230e <mpu_set_int_latched+0x8e>

    if (enable)
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80022a0:	2330      	movs	r3, #48	@ 0x30
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e001      	b.n	80022aa <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 80022aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022ac:	7c9b      	ldrb	r3, [r3, #18]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 80022bc:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022be:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d004      	beq.n	80022d0 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	b299      	uxth	r1, r3
 80022da:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <mpu_set_int_latched+0x98>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	7d1b      	ldrb	r3, [r3, #20]
 80022e0:	461a      	mov	r2, r3
 80022e2:	2305      	movs	r3, #5
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	2301      	movs	r3, #1
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	f107 030f 	add.w	r3, r7, #15
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2301      	movs	r3, #1
 80022f2:	480a      	ldr	r0, [pc, #40]	@ (800231c <mpu_set_int_latched+0x9c>)
 80022f4:	f009 f92e 	bl	800b554 <HAL_I2C_Mem_Write>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <mpu_set_int_latched+0x84>
        return -1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	e004      	b.n	800230e <mpu_set_int_latched+0x8e>
    st.chip_cfg.latched_int = enable;
 8002304:	4a04      	ldr	r2, [pc, #16]	@ (8002318 <mpu_set_int_latched+0x98>)
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
    return 0;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000
 800231c:	20000328 	.word	0x20000328

08002320 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	@ 0x28
 8002324:	af04      	add	r7, sp, #16
 8002326:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8002328:	4b45      	ldr	r3, [pc, #276]	@ (8002440 <get_accel_prod_shift+0x120>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	b299      	uxth	r1, r3
 8002332:	2305      	movs	r3, #5
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	2304      	movs	r3, #4
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	f107 0310 	add.w	r3, r7, #16
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2301      	movs	r3, #1
 8002342:	220d      	movs	r2, #13
 8002344:	483f      	ldr	r0, [pc, #252]	@ (8002444 <get_accel_prod_shift+0x124>)
 8002346:	f009 f9ff 	bl	800b748 <HAL_I2C_Mem_Read>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <get_accel_prod_shift+0x34>
        return 0x07;
 8002350:	2307      	movs	r3, #7
 8002352:	e071      	b.n	8002438 <get_accel_prod_shift+0x118>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 8002354:	7c3b      	ldrb	r3, [r7, #16]
 8002356:	10db      	asrs	r3, r3, #3
 8002358:	b25b      	sxtb	r3, r3
 800235a:	f003 031c 	and.w	r3, r3, #28
 800235e:	b25a      	sxtb	r2, r3
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	111b      	asrs	r3, r3, #4
 8002364:	b25b      	sxtb	r3, r3
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	b25b      	sxtb	r3, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	b25b      	sxtb	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 8002374:	7c7b      	ldrb	r3, [r7, #17]
 8002376:	10db      	asrs	r3, r3, #3
 8002378:	b25b      	sxtb	r3, r3
 800237a:	f003 031c 	and.w	r3, r3, #28
 800237e:	b25a      	sxtb	r2, r3
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	109b      	asrs	r3, r3, #2
 8002384:	b25b      	sxtb	r3, r3
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	b25b      	sxtb	r3, r3
 800238c:	4313      	orrs	r3, r2
 800238e:	b25b      	sxtb	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 8002394:	7cbb      	ldrb	r3, [r7, #18]
 8002396:	10db      	asrs	r3, r3, #3
 8002398:	b25b      	sxtb	r3, r3
 800239a:	f003 031c 	and.w	r3, r3, #28
 800239e:	b25a      	sxtb	r2, r3
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	b25b      	sxtb	r3, r3
 80023aa:	4313      	orrs	r3, r2
 80023ac:	b25b      	sxtb	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 80023b2:	2300      	movs	r3, #0
 80023b4:	75fb      	strb	r3, [r7, #23]
 80023b6:	e03b      	b.n	8002430 <get_accel_prod_shift+0x110>
        if (!shift_code[ii]) {
 80023b8:	7dfb      	ldrb	r3, [r7, #23]
 80023ba:	3318      	adds	r3, #24
 80023bc:	443b      	add	r3, r7
 80023be:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <get_accel_prod_shift+0xb6>
            st_shift[ii] = 0.f;
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
            continue;
 80023d4:	e029      	b.n	800242a <get_accel_prod_shift+0x10a>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	4a1a      	ldr	r2, [pc, #104]	@ (8002448 <get_accel_prod_shift+0x128>)
 80023e0:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 80023e2:	e00f      	b.n	8002404 <get_accel_prod_shift+0xe4>
            st_shift[ii] *= 1.034f;
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800244c <get_accel_prod_shift+0x12c>
 80023fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002400:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 8002404:	7dfb      	ldrb	r3, [r7, #23]
 8002406:	f103 0218 	add.w	r2, r3, #24
 800240a:	443a      	add	r2, r7
 800240c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8002410:	3a01      	subs	r2, #1
 8002412:	b2d1      	uxtb	r1, r2
 8002414:	f103 0218 	add.w	r2, r3, #24
 8002418:	443a      	add	r2, r7
 800241a:	f802 1c0c 	strb.w	r1, [r2, #-12]
 800241e:	3318      	adds	r3, #24
 8002420:	443b      	add	r3, r7
 8002422:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1dc      	bne.n	80023e4 <get_accel_prod_shift+0xc4>
    for (ii = 0; ii < 3; ii++) {
 800242a:	7dfb      	ldrb	r3, [r7, #23]
 800242c:	3301      	adds	r3, #1
 800242e:	75fb      	strb	r3, [r7, #23]
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d9c0      	bls.n	80023b8 <get_accel_prod_shift+0x98>
    }
    return 0;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000000 	.word	0x20000000
 8002444:	20000328 	.word	0x20000328
 8002448:	3eae147b 	.word	0x3eae147b
 800244c:	3f845a1d 	.word	0x3f845a1d

08002450 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	@ 0x28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff5c 	bl	8002320 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
 800246c:	e063      	b.n	8002536 <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	440b      	add	r3, r1
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	bfb8      	it	lt
 8002488:	425b      	neglt	r3, r3
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002492:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8002548 <accel_self_test+0xf8>
 8002496:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800249a:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	3328      	adds	r3, #40	@ 0x28
 80024a4:	443b      	add	r3, r7
 80024a6:	3b1c      	subs	r3, #28
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	d023      	beq.n	80024fe <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	3328      	adds	r3, #40	@ 0x28
 80024bc:	443b      	add	r3, r7
 80024be:	3b1c      	subs	r3, #28
 80024c0:	ed93 7a00 	vldr	s14, [r3]
 80024c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80024c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024d4:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 80024d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80024dc:	eef0 7ae7 	vabs.f32	s15, s15
 80024e0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800254c <accel_self_test+0xfc>
 80024e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ec:	dd20      	ble.n	8002530 <accel_self_test+0xe0>
                result |= 1 << jj;
 80024ee:	2201      	movs	r2, #1
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	6a3a      	ldr	r2, [r7, #32]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	e018      	b.n	8002530 <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 80024fe:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002550 <accel_self_test+0x100>
 8002502:	edd7 7a07 	vldr	s15, [r7, #28]
 8002506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250e:	d408      	bmi.n	8002522 <accel_self_test+0xd2>
            (st_shift_cust > test.max_g))
 8002510:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002554 <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 8002514:	edd7 7a07 	vldr	s15, [r7, #28]
 8002518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002520:	dd06      	ble.n	8002530 <accel_self_test+0xe0>
            result |= 1 << jj;
 8002522:	2201      	movs	r2, #1
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	6a3a      	ldr	r2, [r7, #32]
 800252c:	4313      	orrs	r3, r2
 800252e:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	3301      	adds	r3, #1
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	2b02      	cmp	r3, #2
 800253a:	dd98      	ble.n	800246e <accel_self_test+0x1e>
    }

    return result;
 800253c:	6a3b      	ldr	r3, [r7, #32]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3728      	adds	r7, #40	@ 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	47800000 	.word	0x47800000
 800254c:	3e0f5c29 	.word	0x3e0f5c29
 8002550:	3e99999a 	.word	0x3e99999a
 8002554:	3f733333 	.word	0x3f733333

08002558 <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08c      	sub	sp, #48	@ 0x30
 800255c:	af04      	add	r7, sp, #16
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 8002566:	4b59      	ldr	r3, [pc, #356]	@ (80026cc <gyro_self_test+0x174>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	b299      	uxth	r1, r3
 8002570:	2305      	movs	r3, #5
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	2303      	movs	r3, #3
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2301      	movs	r3, #1
 8002580:	220d      	movs	r2, #13
 8002582:	4853      	ldr	r0, [pc, #332]	@ (80026d0 <gyro_self_test+0x178>)
 8002584:	f009 f8e0 	bl	800b748 <HAL_I2C_Mem_Read>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <gyro_self_test+0x3a>
        return 0x07;
 800258e:	2307      	movs	r3, #7
 8002590:	e097      	b.n	80026c2 <gyro_self_test+0x16a>

    tmp[0] &= 0x1F;
 8002592:	7a3b      	ldrb	r3, [r7, #8]
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	b2db      	uxtb	r3, r3
 800259a:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 800259c:	7a7b      	ldrb	r3, [r7, #9]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 80025a6:	7abb      	ldrb	r3, [r7, #10]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	e080      	b.n	80026b8 <gyro_self_test+0x160>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	6839      	ldr	r1, [r7, #0]
 80025c6:	440b      	add	r3, r1
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bfb8      	it	lt
 80025d0:	425b      	neglt	r3, r3
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025da:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80026d4 <gyro_self_test+0x17c>
 80025de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e2:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 80025e6:	f107 0208 	add.w	r2, r7, #8
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4413      	add	r3, r2
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d045      	beq.n	8002680 <gyro_self_test+0x128>
            st_shift = 3275.f / test.gyro_sens;
 80025f4:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80026d8 <gyro_self_test+0x180>
 80025f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025fc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80026dc <gyro_self_test+0x184>
 8002600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002604:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 8002608:	e007      	b.n	800261a <gyro_self_test+0xc2>
                st_shift *= 1.046f;
 800260a:	edd7 7a05 	vldr	s15, [r7, #20]
 800260e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80026e0 <gyro_self_test+0x188>
 8002612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002616:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 800261a:	f107 0208 	add.w	r2, r7, #8
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	4413      	add	r3, r2
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	3b01      	subs	r3, #1
 8002626:	b2d9      	uxtb	r1, r3
 8002628:	f107 0208 	add.w	r2, r7, #8
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	460a      	mov	r2, r1
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	f107 0208 	add.w	r2, r7, #8
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	4413      	add	r3, r2
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e3      	bne.n	800260a <gyro_self_test+0xb2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 8002642:	edd7 6a04 	vldr	s13, [r7, #16]
 8002646:	ed97 7a05 	vldr	s14, [r7, #20]
 800264a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002652:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002656:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 800265a:	edd7 7a03 	vldr	s15, [r7, #12]
 800265e:	eef0 7ae7 	vabs.f32	s15, s15
 8002662:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80026e4 <gyro_self_test+0x18c>
 8002666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	dd20      	ble.n	80026b2 <gyro_self_test+0x15a>
                result |= 1 << jj;
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	e018      	b.n	80026b2 <gyro_self_test+0x15a>
        } else if ((st_shift_cust < test.min_dps) ||
 8002680:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002684:	edd7 7a04 	vldr	s15, [r7, #16]
 8002688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	d408      	bmi.n	80026a4 <gyro_self_test+0x14c>
            (st_shift_cust > test.max_dps))
 8002692:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80026e8 <gyro_self_test+0x190>
        } else if ((st_shift_cust < test.min_dps) ||
 8002696:	edd7 7a04 	vldr	s15, [r7, #16]
 800269a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a2:	dd06      	ble.n	80026b2 <gyro_self_test+0x15a>
            result |= 1 << jj;
 80026a4:	2201      	movs	r2, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	f77f af7b 	ble.w	80025b6 <gyro_self_test+0x5e>
    }
    return result;
 80026c0:	69bb      	ldr	r3, [r7, #24]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000328 	.word	0x20000328
 80026d4:	47800000 	.word	0x47800000
 80026d8:	00000083 	.word	0x00000083
 80026dc:	454cb000 	.word	0x454cb000
 80026e0:	3f85e354 	.word	0x3f85e354
 80026e4:	3e0f5c29 	.word	0x3e0f5c29
 80026e8:	42d20000 	.word	0x42d20000

080026ec <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 80026ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f0:	b0bc      	sub	sp, #240	@ 0xf0
 80026f2:	af04      	add	r7, sp, #16
 80026f4:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 80026f8:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80026fc:	4613      	mov	r3, r2
 80026fe:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 8002702:	2301      	movs	r3, #1
 8002704:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    data[1] = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 800270e:	4b9c      	ldr	r3, [pc, #624]	@ (8002980 <get_st_biases+0x294>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	b299      	uxth	r1, r3
 8002718:	4b99      	ldr	r3, [pc, #612]	@ (8002980 <get_st_biases+0x294>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	7c9b      	ldrb	r3, [r3, #18]
 800271e:	461a      	mov	r2, r3
 8002720:	2305      	movs	r3, #5
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	2302      	movs	r3, #2
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2301      	movs	r3, #1
 8002730:	4894      	ldr	r0, [pc, #592]	@ (8002984 <get_st_biases+0x298>)
 8002732:	f008 ff0f 	bl	800b554 <HAL_I2C_Mem_Write>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <get_st_biases+0x56>
        return -1;
 800273c:	f04f 33ff 	mov.w	r3, #4294967295
 8002740:	e3dc      	b.n	8002efc <get_st_biases+0x810>
    delay_ms(200);
 8002742:	20c8      	movs	r0, #200	@ 0xc8
 8002744:	f008 f916 	bl	800a974 <HAL_Delay>
    data[0] = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 800274e:	4b8c      	ldr	r3, [pc, #560]	@ (8002980 <get_st_biases+0x294>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	b299      	uxth	r1, r3
 8002758:	4b89      	ldr	r3, [pc, #548]	@ (8002980 <get_st_biases+0x294>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	7bdb      	ldrb	r3, [r3, #15]
 800275e:	461a      	mov	r2, r3
 8002760:	2305      	movs	r3, #5
 8002762:	9302      	str	r3, [sp, #8]
 8002764:	2301      	movs	r3, #1
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2301      	movs	r3, #1
 8002770:	4884      	ldr	r0, [pc, #528]	@ (8002984 <get_st_biases+0x298>)
 8002772:	f008 feef 	bl	800b554 <HAL_I2C_Mem_Write>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <get_st_biases+0x96>
        return -1;
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
 8002780:	e3bc      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002782:	4b7f      	ldr	r3, [pc, #508]	@ (8002980 <get_st_biases+0x294>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	b299      	uxth	r1, r3
 800278c:	4b7c      	ldr	r3, [pc, #496]	@ (8002980 <get_st_biases+0x294>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	795b      	ldrb	r3, [r3, #5]
 8002792:	461a      	mov	r2, r3
 8002794:	2305      	movs	r3, #5
 8002796:	9302      	str	r3, [sp, #8]
 8002798:	2301      	movs	r3, #1
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2301      	movs	r3, #1
 80027a4:	4877      	ldr	r0, [pc, #476]	@ (8002984 <get_st_biases+0x298>)
 80027a6:	f008 fed5 	bl	800b554 <HAL_I2C_Mem_Write>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <get_st_biases+0xca>
        return -1;
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
 80027b4:	e3a2      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80027b6:	4b72      	ldr	r3, [pc, #456]	@ (8002980 <get_st_biases+0x294>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	b299      	uxth	r1, r3
 80027c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002980 <get_st_biases+0x294>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	7c9b      	ldrb	r3, [r3, #18]
 80027c6:	461a      	mov	r2, r3
 80027c8:	2305      	movs	r3, #5
 80027ca:	9302      	str	r3, [sp, #8]
 80027cc:	2301      	movs	r3, #1
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2301      	movs	r3, #1
 80027d8:	486a      	ldr	r0, [pc, #424]	@ (8002984 <get_st_biases+0x298>)
 80027da:	f008 febb 	bl	800b554 <HAL_I2C_Mem_Write>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <get_st_biases+0xfe>
        return -1;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	e388      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80027ea:	4b65      	ldr	r3, [pc, #404]	@ (8002980 <get_st_biases+0x294>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	b299      	uxth	r1, r3
 80027f4:	4b62      	ldr	r3, [pc, #392]	@ (8002980 <get_st_biases+0x294>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	7ddb      	ldrb	r3, [r3, #23]
 80027fa:	461a      	mov	r2, r3
 80027fc:	2305      	movs	r3, #5
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	2301      	movs	r3, #1
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	485d      	ldr	r0, [pc, #372]	@ (8002984 <get_st_biases+0x298>)
 800280e:	f008 fea1 	bl	800b554 <HAL_I2C_Mem_Write>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <get_st_biases+0x132>
        return -1;
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
 800281c:	e36e      	b.n	8002efc <get_st_biases+0x810>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800281e:	4b58      	ldr	r3, [pc, #352]	@ (8002980 <get_st_biases+0x294>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	b299      	uxth	r1, r3
 8002828:	4b55      	ldr	r3, [pc, #340]	@ (8002980 <get_st_biases+0x294>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	791b      	ldrb	r3, [r3, #4]
 800282e:	461a      	mov	r2, r3
 8002830:	2305      	movs	r3, #5
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	2301      	movs	r3, #1
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2301      	movs	r3, #1
 8002840:	4850      	ldr	r0, [pc, #320]	@ (8002984 <get_st_biases+0x298>)
 8002842:	f008 fe87 	bl	800b554 <HAL_I2C_Mem_Write>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <get_st_biases+0x166>
        return -1;
 800284c:	f04f 33ff 	mov.w	r3, #4294967295
 8002850:	e354      	b.n	8002efc <get_st_biases+0x810>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 8002852:	230c      	movs	r3, #12
 8002854:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8002858:	4b49      	ldr	r3, [pc, #292]	@ (8002980 <get_st_biases+0x294>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	b299      	uxth	r1, r3
 8002862:	4b47      	ldr	r3, [pc, #284]	@ (8002980 <get_st_biases+0x294>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	791b      	ldrb	r3, [r3, #4]
 8002868:	461a      	mov	r2, r3
 800286a:	2305      	movs	r3, #5
 800286c:	9302      	str	r3, [sp, #8]
 800286e:	2301      	movs	r3, #1
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2301      	movs	r3, #1
 800287a:	4842      	ldr	r0, [pc, #264]	@ (8002984 <get_st_biases+0x298>)
 800287c:	f008 fe6a 	bl	800b554 <HAL_I2C_Mem_Write>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <get_st_biases+0x1a0>
        return -1;
 8002886:	f04f 33ff 	mov.w	r3, #4294967295
 800288a:	e337      	b.n	8002efc <get_st_biases+0x810>
    delay_ms(15);
 800288c:	200f      	movs	r0, #15
 800288e:	f008 f871 	bl	800a974 <HAL_Delay>
    data[0] = st.test->reg_lpf;
 8002892:	4b3b      	ldr	r3, [pc, #236]	@ (8002980 <get_st_biases+0x294>)
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	7a5b      	ldrb	r3, [r3, #9]
 8002898:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 800289c:	4b38      	ldr	r3, [pc, #224]	@ (8002980 <get_st_biases+0x294>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	b299      	uxth	r1, r3
 80028a6:	4b36      	ldr	r3, [pc, #216]	@ (8002980 <get_st_biases+0x294>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	789b      	ldrb	r3, [r3, #2]
 80028ac:	461a      	mov	r2, r3
 80028ae:	2305      	movs	r3, #5
 80028b0:	9302      	str	r3, [sp, #8]
 80028b2:	2301      	movs	r3, #1
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2301      	movs	r3, #1
 80028be:	4831      	ldr	r0, [pc, #196]	@ (8002984 <get_st_biases+0x298>)
 80028c0:	f008 fe48 	bl	800b554 <HAL_I2C_Mem_Write>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <get_st_biases+0x1e4>
        return -1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	e315      	b.n	8002efc <get_st_biases+0x810>
    data[0] = st.test->reg_rate_div;
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <get_st_biases+0x294>)
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	7a1b      	ldrb	r3, [r3, #8]
 80028d6:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 80028da:	4b29      	ldr	r3, [pc, #164]	@ (8002980 <get_st_biases+0x294>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	b299      	uxth	r1, r3
 80028e4:	4b26      	ldr	r3, [pc, #152]	@ (8002980 <get_st_biases+0x294>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	785b      	ldrb	r3, [r3, #1]
 80028ea:	461a      	mov	r2, r3
 80028ec:	2305      	movs	r3, #5
 80028ee:	9302      	str	r3, [sp, #8]
 80028f0:	2301      	movs	r3, #1
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2301      	movs	r3, #1
 80028fc:	4821      	ldr	r0, [pc, #132]	@ (8002984 <get_st_biases+0x298>)
 80028fe:	f008 fe29 	bl	800b554 <HAL_I2C_Mem_Write>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <get_st_biases+0x222>
        return -1;
 8002908:	f04f 33ff 	mov.w	r3, #4294967295
 800290c:	e2f6      	b.n	8002efc <get_st_biases+0x810>
    if (hw_test)
 800290e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <get_st_biases+0x23c>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 8002916:	4b1a      	ldr	r3, [pc, #104]	@ (8002980 <get_st_biases+0x294>)
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	7a9b      	ldrb	r3, [r3, #10]
 800291c:	f063 031f 	orn	r3, r3, #31
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 8002926:	e004      	b.n	8002932 <get_st_biases+0x246>
    else
        data[0] = st.test->reg_gyro_fsr;
 8002928:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <get_st_biases+0x294>)
 800292a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292c:	7a9b      	ldrb	r3, [r3, #10]
 800292e:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 8002932:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <get_st_biases+0x294>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	b299      	uxth	r1, r3
 800293c:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <get_st_biases+0x294>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	799b      	ldrb	r3, [r3, #6]
 8002942:	461a      	mov	r2, r3
 8002944:	2305      	movs	r3, #5
 8002946:	9302      	str	r3, [sp, #8]
 8002948:	2301      	movs	r3, #1
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2301      	movs	r3, #1
 8002954:	480b      	ldr	r0, [pc, #44]	@ (8002984 <get_st_biases+0x298>)
 8002956:	f008 fdfd 	bl	800b554 <HAL_I2C_Mem_Write>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <get_st_biases+0x27a>
        return -1;
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	e2ca      	b.n	8002efc <get_st_biases+0x810>

    if (hw_test)
 8002966:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00c      	beq.n	8002988 <get_st_biases+0x29c>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 800296e:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <get_st_biases+0x294>)
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	7adb      	ldrb	r3, [r3, #11]
 8002974:	f063 031f 	orn	r3, r3, #31
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 800297e:	e006      	b.n	800298e <get_st_biases+0x2a2>
 8002980:	20000000 	.word	0x20000000
 8002984:	20000328 	.word	0x20000328
    else
        data[0] = test.reg_accel_fsr;
 8002988:	2318      	movs	r3, #24
 800298a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 800298e:	4b73      	ldr	r3, [pc, #460]	@ (8002b5c <get_st_biases+0x470>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	b299      	uxth	r1, r3
 8002998:	4b70      	ldr	r3, [pc, #448]	@ (8002b5c <get_st_biases+0x470>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	79db      	ldrb	r3, [r3, #7]
 800299e:	461a      	mov	r2, r3
 80029a0:	2305      	movs	r3, #5
 80029a2:	9302      	str	r3, [sp, #8]
 80029a4:	2301      	movs	r3, #1
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2301      	movs	r3, #1
 80029b0:	486b      	ldr	r0, [pc, #428]	@ (8002b60 <get_st_biases+0x474>)
 80029b2:	f008 fdcf 	bl	800b554 <HAL_I2C_Mem_Write>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <get_st_biases+0x2d6>
        return -1;
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295
 80029c0:	e29c      	b.n	8002efc <get_st_biases+0x810>
    if (hw_test)
 80029c2:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <get_st_biases+0x2e4>
        delay_ms(200);
 80029ca:	20c8      	movs	r0, #200	@ 0xc8
 80029cc:	f007 ffd2 	bl	800a974 <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 80029d0:	2340      	movs	r3, #64	@ 0x40
 80029d2:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 80029d6:	4b61      	ldr	r3, [pc, #388]	@ (8002b5c <get_st_biases+0x470>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	b299      	uxth	r1, r3
 80029e0:	4b5e      	ldr	r3, [pc, #376]	@ (8002b5c <get_st_biases+0x470>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	791b      	ldrb	r3, [r3, #4]
 80029e6:	461a      	mov	r2, r3
 80029e8:	2305      	movs	r3, #5
 80029ea:	9302      	str	r3, [sp, #8]
 80029ec:	2301      	movs	r3, #1
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2301      	movs	r3, #1
 80029f8:	4859      	ldr	r0, [pc, #356]	@ (8002b60 <get_st_biases+0x474>)
 80029fa:	f008 fdab 	bl	800b554 <HAL_I2C_Mem_Write>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <get_st_biases+0x31e>
        return -1;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
 8002a08:	e278      	b.n	8002efc <get_st_biases+0x810>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 8002a0a:	2378      	movs	r3, #120	@ 0x78
 8002a0c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002a10:	4b52      	ldr	r3, [pc, #328]	@ (8002b5c <get_st_biases+0x470>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	b299      	uxth	r1, r3
 8002a1a:	4b50      	ldr	r3, [pc, #320]	@ (8002b5c <get_st_biases+0x470>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	795b      	ldrb	r3, [r3, #5]
 8002a20:	461a      	mov	r2, r3
 8002a22:	2305      	movs	r3, #5
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	2301      	movs	r3, #1
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	2301      	movs	r3, #1
 8002a32:	484b      	ldr	r0, [pc, #300]	@ (8002b60 <get_st_biases+0x474>)
 8002a34:	f008 fd8e 	bl	800b554 <HAL_I2C_Mem_Write>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <get_st_biases+0x358>
        return -1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	e25b      	b.n	8002efc <get_st_biases+0x810>
    delay_ms(test.wait_ms);
 8002a44:	2332      	movs	r3, #50	@ 0x32
 8002a46:	4618      	mov	r0, r3
 8002a48:	f007 ff94 	bl	800a974 <HAL_Delay>
    data[0] = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8002a52:	4b42      	ldr	r3, [pc, #264]	@ (8002b5c <get_st_biases+0x470>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	b299      	uxth	r1, r3
 8002a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b5c <get_st_biases+0x470>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	795b      	ldrb	r3, [r3, #5]
 8002a62:	461a      	mov	r2, r3
 8002a64:	2305      	movs	r3, #5
 8002a66:	9302      	str	r3, [sp, #8]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2301      	movs	r3, #1
 8002a74:	483a      	ldr	r0, [pc, #232]	@ (8002b60 <get_st_biases+0x474>)
 8002a76:	f008 fd6d 	bl	800b554 <HAL_I2C_Mem_Write>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <get_st_biases+0x39a>
        return -1;
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	e23a      	b.n	8002efc <get_st_biases+0x810>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 8002a86:	4b35      	ldr	r3, [pc, #212]	@ (8002b5c <get_st_biases+0x470>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	b299      	uxth	r1, r3
 8002a90:	4b32      	ldr	r3, [pc, #200]	@ (8002b5c <get_st_biases+0x470>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	7a9b      	ldrb	r3, [r3, #10]
 8002a96:	461a      	mov	r2, r3
 8002a98:	2305      	movs	r3, #5
 8002a9a:	9302      	str	r3, [sp, #8]
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	482d      	ldr	r0, [pc, #180]	@ (8002b60 <get_st_biases+0x474>)
 8002aaa:	f008 fe4d 	bl	800b748 <HAL_I2C_Mem_Read>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <get_st_biases+0x3ce>
        return -1;
 8002ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab8:	e220      	b.n	8002efc <get_st_biases+0x810>

    fifo_count = (data[0] << 8) | data[1];
 8002aba:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002abe:	b21b      	sxth	r3, r3
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	b21a      	sxth	r2, r3
 8002ac4:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b21b      	sxth	r3, r3
 8002ace:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 8002ad2:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 8002ad6:	4b23      	ldr	r3, [pc, #140]	@ (8002b64 <get_st_biases+0x478>)
 8002ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8002adc:	08db      	lsrs	r3, r3, #3
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 8002ae4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ae8:	f103 0108 	add.w	r1, r3, #8
 8002aec:	2300      	movs	r3, #0
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002af4:	1d1a      	adds	r2, r3, #4
 8002af6:	680b      	ldr	r3, [r1, #0]
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b00:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 8002b02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b06:	f103 0108 	add.w	r1, r3, #8
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	600b      	str	r3, [r1, #0]
 8002b0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b12:	1d1a      	adds	r2, r3, #4
 8002b14:	680b      	ldr	r3, [r1, #0]
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b1e:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 8002b20:	2300      	movs	r3, #0
 8002b22:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002b26:	e0b0      	b.n	8002c8a <get_st_biases+0x59e>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <get_st_biases+0x470>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	b299      	uxth	r1, r3
 8002b32:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <get_st_biases+0x470>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	7adb      	ldrb	r3, [r3, #11]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2305      	movs	r3, #5
 8002b3c:	9302      	str	r3, [sp, #8]
 8002b3e:	230c      	movs	r3, #12
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2301      	movs	r3, #1
 8002b4a:	4805      	ldr	r0, [pc, #20]	@ (8002b60 <get_st_biases+0x474>)
 8002b4c:	f008 fdfc 	bl	800b748 <HAL_I2C_Mem_Read>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <get_st_biases+0x47c>
            return -1;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5a:	e1cf      	b.n	8002efc <get_st_biases+0x810>
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000328 	.word	0x20000328
 8002b64:	aaaaaaab 	.word	0xaaaaaaab
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8002b68:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002b6c:	b21b      	sxth	r3, r3
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	b21a      	sxth	r2, r3
 8002b72:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002b76:	b21b      	sxth	r3, r3
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 8002b80:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	b21a      	sxth	r2, r3
 8002b8a:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8002b8e:	b21b      	sxth	r3, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b21b      	sxth	r3, r3
 8002b94:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 8002b98:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8002b9c:	b21b      	sxth	r3, r3
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	b21a      	sxth	r2, r3
 8002ba2:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
        accel[0] += (long)accel_cur[0];
 8002bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8002bba:	441a      	add	r2, r3
 8002bbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bc0:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 8002bc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	6819      	ldr	r1, [r3, #0]
 8002bca:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bd4:	1d1a      	adds	r2, r3, #4
 8002bd6:	180b      	adds	r3, r1, r0
 8002bd8:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 8002bda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bde:	3308      	adds	r3, #8
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 8002be6:	4618      	mov	r0, r3
 8002be8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bec:	f103 0208 	add.w	r2, r3, #8
 8002bf0:	180b      	adds	r3, r1, r0
 8002bf2:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 8002bf4:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	b21a      	sxth	r2, r3
 8002bfe:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002c02:	b21b      	sxth	r3, r3
 8002c04:	4313      	orrs	r3, r2
 8002c06:	b21b      	sxth	r3, r3
 8002c08:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 8002c0c:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 8002c10:	b21b      	sxth	r3, r3
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	b21a      	sxth	r2, r3
 8002c16:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 8002c1a:	b21b      	sxth	r3, r3
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 8002c24:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8002c28:	b21b      	sxth	r3, r3
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	b21a      	sxth	r2, r3
 8002c2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8002c32:	b21b      	sxth	r3, r3
 8002c34:	4313      	orrs	r3, r2
 8002c36:	b21b      	sxth	r3, r3
 8002c38:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
        gyro[0] += (long)gyro_cur[0];
 8002c3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 8002c46:	441a      	add	r2, r3
 8002c48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c4c:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 8002c4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c52:	3304      	adds	r3, #4
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c60:	1d1a      	adds	r2, r3, #4
 8002c62:	180b      	adds	r3, r1, r0
 8002c64:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 8002c66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c78:	f103 0208 	add.w	r2, r3, #8
 8002c7c:	180b      	adds	r3, r1, r0
 8002c7e:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 8002c80:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8002c84:	3301      	adds	r3, #1
 8002c86:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8002c8a:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 8002c8e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002c92:	429a      	cmp	r2, r3
 8002c94:	f4ff af48 	bcc.w	8002b28 <get_st_biases+0x43c>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 8002c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	17da      	asrs	r2, r3, #31
 8002ca0:	461c      	mov	r4, r3
 8002ca2:	4615      	mov	r5, r2
 8002ca4:	1423      	asrs	r3, r4, #16
 8002ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002caa:	0423      	lsls	r3, r4, #16
 8002cac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002cb0:	2283      	movs	r2, #131	@ 0x83
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8002cb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cbc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002cc0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002cc4:	f7fd ffe0 	bl	8000c88 <__aeabi_ldivmod>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cde:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002ce2:	f7fd ffd1 	bl	8000c88 <__aeabi_ldivmod>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cee:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 8002cf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	17da      	asrs	r2, r3, #31
 8002cfa:	4698      	mov	r8, r3
 8002cfc:	4691      	mov	r9, r2
 8002cfe:	ea4f 4328 	mov.w	r3, r8, asr #16
 8002d02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002d06:	ea4f 4308 	mov.w	r3, r8, lsl #16
 8002d0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d0e:	2283      	movs	r2, #131	@ 0x83
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d1a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002d1e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002d22:	f7fd ffb1 	bl	8000c88 <__aeabi_ldivmod>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002d32:	2200      	movs	r2, #0
 8002d34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d38:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002d3c:	f7fd ffa4 	bl	8000c88 <__aeabi_ldivmod>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d4c:	1d1a      	adds	r2, r3, #4
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 8002d52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d56:	3308      	adds	r3, #8
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	17da      	asrs	r2, r3, #31
 8002d5c:	469a      	mov	sl, r3
 8002d5e:	4693      	mov	fp, r2
 8002d60:	ea4f 432a 	mov.w	r3, sl, asr #16
 8002d64:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d66:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8002d6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d6c:	2283      	movs	r2, #131	@ 0x83
 8002d6e:	2300      	movs	r3, #0
 8002d70:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002d72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d74:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002d78:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002d7c:	f7fd ff84 	bl	8000c88 <__aeabi_ldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d90:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d92:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002d96:	f7fd ff77 	bl	8000c88 <__aeabi_ldivmod>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002da6:	f103 0208 	add.w	r2, r3, #8
 8002daa:	4603      	mov	r3, r0
 8002dac:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 8002dae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	17da      	asrs	r2, r3, #31
 8002db6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002db8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002dba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	141b      	asrs	r3, r3, #16
 8002dc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dce:	2300      	movs	r3, #0
 8002dd0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dd8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002ddc:	f7fd ff54 	bl	8000c88 <__aeabi_ldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4610      	mov	r0, r2
 8002de6:	4619      	mov	r1, r3
 8002de8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002dec:	2200      	movs	r2, #0
 8002dee:	643b      	str	r3, [r7, #64]	@ 0x40
 8002df0:	647a      	str	r2, [r7, #68]	@ 0x44
 8002df2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002df6:	f7fd ff47 	bl	8000c88 <__aeabi_ldivmod>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e02:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 8002e04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e08:	3304      	adds	r3, #4
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	17da      	asrs	r2, r3, #31
 8002e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e12:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002e16:	460b      	mov	r3, r1
 8002e18:	141b      	asrs	r3, r3, #16
 8002e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	041b      	lsls	r3, r3, #16
 8002e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e26:	2300      	movs	r3, #0
 8002e28:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e30:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002e34:	f7fd ff28 	bl	8000c88 <__aeabi_ldivmod>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002e44:	2200      	movs	r2, #0
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e4e:	f7fd ff1b 	bl	8000c88 <__aeabi_ldivmod>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e5e:	3304      	adds	r3, #4
 8002e60:	4602      	mov	r2, r0
 8002e62:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 8002e64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e68:	3308      	adds	r3, #8
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	17da      	asrs	r2, r3, #31
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	61fa      	str	r2, [r7, #28]
 8002e72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002e76:	460b      	mov	r3, r1
 8002e78:	141b      	asrs	r3, r3, #16
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	041b      	lsls	r3, r3, #16
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e86:	2300      	movs	r3, #0
 8002e88:	60ba      	str	r2, [r7, #8]
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e94:	f7fd fef8 	bl	8000c88 <__aeabi_ldivmod>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eae:	f7fd feeb 	bl	8000c88 <__aeabi_ldivmod>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 8002ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ec8:	3308      	adds	r3, #8
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	dd0a      	ble.n	8002ee6 <get_st_biases+0x7fa>
        accel[2] -= 65536L;
 8002ed0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002edc:	3308      	adds	r3, #8
 8002ede:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e009      	b.n	8002efa <get_st_biases+0x80e>
    else
        accel[2] += 65536L;
 8002ee6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002eea:	3308      	adds	r3, #8
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8002ef8:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	37e0      	adds	r7, #224	@ 0xe0
 8002f00:	46bd      	mov	sp, r7
 8002f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f06:	bf00      	nop

08002f08 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08e      	sub	sp, #56	@ 0x38
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 8002f12:	2302      	movs	r3, #2
 8002f14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 8002f18:	4b64      	ldr	r3, [pc, #400]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8002f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f000 fa18 	bl	8003358 <mpu_set_dmp_state>
        dmp_was_on = 1;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002f2e:	e002      	b.n	8002f36 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 8002f36:	f107 030c 	add.w	r3, r7, #12
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fc2e 	bl	800179c <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 8002f40:	f107 030f 	add.w	r3, r7, #15
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe fcbd 	bl	80018c4 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 8002f4a:	f107 0308 	add.w	r3, r7, #8
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fd64 	bl	8001a1c <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 8002f54:	f107 030a 	add.w	r3, r7, #10
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fdf7 	bl	8001b4c <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 8002f5e:	4b53      	ldr	r3, [pc, #332]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8002f60:	7a9b      	ldrb	r3, [r3, #10]
 8002f62:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 8002f66:	f107 030e 	add.w	r3, r7, #14
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fef0 	bl	8001d50 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f74:	e00a      	b.n	8002f8c <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 8002f76:	2200      	movs	r2, #0
 8002f78:	6839      	ldr	r1, [r7, #0]
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fbb6 	bl	80026ec <get_st_biases>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 8002f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f88:	3301      	adds	r3, #1
 8002f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f92:	429a      	cmp	r2, r3
 8002f94:	dbef      	blt.n	8002f76 <mpu_run_self_test+0x6e>
 8002f96:	e000      	b.n	8002f9a <mpu_run_self_test+0x92>
            break;
 8002f98:	bf00      	nop
    if (ii == tries) {
 8002f9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d102      	bne.n	8002faa <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8002fa8:	e045      	b.n	8003036 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fae:	e00d      	b.n	8002fcc <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 8002fb0:	f107 0110 	add.w	r1, r7, #16
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	2201      	movs	r2, #1
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fb96 	bl	80026ec <get_st_biases>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc8:	3301      	adds	r3, #1
 8002fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fcc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	dbec      	blt.n	8002fb0 <mpu_run_self_test+0xa8>
 8002fd6:	e000      	b.n	8002fda <mpu_run_self_test+0xd2>
            break;
 8002fd8:	bf00      	nop
    if (ii == tries) {
 8002fda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002fde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d102      	bne.n	8002fea <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 8002fe8:	e025      	b.n	8003036 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 8002fea:	f107 0310 	add.w	r3, r7, #16
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6838      	ldr	r0, [r7, #0]
 8002ff2:	f7ff fa2d 	bl	8002450 <accel_self_test>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff faa8 	bl	8002558 <gyro_self_test>
 8003008:	4603      	mov	r3, r0
 800300a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    result = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!gyro_result)
 8003012:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <mpu_run_self_test+0x11a>
        result |= 0x01;
 800301a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!accel_result)
 8003022:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <mpu_run_self_test+0x12c>
        result |= 0x02;
 800302a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	633b      	str	r3, [r7, #48]	@ 0x30
 8003032:	e000      	b.n	8003036 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 8003034:	bf00      	nop
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 8003036:	4b1d      	ldr	r3, [pc, #116]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003038:	22ff      	movs	r2, #255	@ 0xff
 800303a:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800303c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ac <mpu_run_self_test+0x1a4>)
 800303e:	22ff      	movs	r2, #255	@ 0xff
 8003040:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8003042:	4b1a      	ldr	r3, [pc, #104]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003044:	22ff      	movs	r2, #255	@ 0xff
 8003046:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8003048:	4b18      	ldr	r3, [pc, #96]	@ (80030ac <mpu_run_self_test+0x1a4>)
 800304a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800304e:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 8003050:	4b16      	ldr	r3, [pc, #88]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003052:	22ff      	movs	r2, #255	@ 0xff
 8003054:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 8003056:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <mpu_run_self_test+0x1a4>)
 8003058:	22ff      	movs	r2, #255	@ 0xff
 800305a:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800305c:	4b13      	ldr	r3, [pc, #76]	@ (80030ac <mpu_run_self_test+0x1a4>)
 800305e:	2201      	movs	r2, #1
 8003060:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 8003062:	89bb      	ldrh	r3, [r7, #12]
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe fbcd 	bl	8001804 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe fc63 	bl	8001938 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 8003072:	893b      	ldrh	r3, [r7, #8]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe fd0f 	bl	8001a98 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 800307a:	897b      	ldrh	r3, [r7, #10]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fd7f 	bl	8001b80 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 8003082:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fec6 	bl	8001e18 <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 800308c:	7bbb      	ldrb	r3, [r7, #14]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe fe70 	bl	8001d74 <mpu_configure_fifo>

    if (dmp_was_on)
 8003094:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <mpu_run_self_test+0x19a>
        mpu_set_dmp_state(1);
 800309c:	2001      	movs	r0, #1
 800309e:	f000 f95b 	bl	8003358 <mpu_set_dmp_state>

    return result;
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3738      	adds	r7, #56	@ 0x38
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000000 	.word	0x20000000

080030b0 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af04      	add	r7, sp, #16
 80030b6:	4603      	mov	r3, r0
 80030b8:	603a      	str	r2, [r7, #0]
 80030ba:	80fb      	strh	r3, [r7, #6]
 80030bc:	460b      	mov	r3, r1
 80030be:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <mpu_write_mem+0x1c>
        return -1;
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	e04e      	b.n	800316a <mpu_write_mem+0xba>
    if (!st.chip_cfg.sensors)
 80030cc:	4b29      	ldr	r3, [pc, #164]	@ (8003174 <mpu_write_mem+0xc4>)
 80030ce:	7a9b      	ldrb	r3, [r3, #10]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <mpu_write_mem+0x2a>
        return -1;
 80030d4:	f04f 33ff 	mov.w	r3, #4294967295
 80030d8:	e047      	b.n	800316a <mpu_write_mem+0xba>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	b29b      	uxth	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80030ea:	7b7b      	ldrb	r3, [r7, #13]
 80030ec:	461a      	mov	r2, r3
 80030ee:	88bb      	ldrh	r3, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	4a20      	ldr	r2, [pc, #128]	@ (8003174 <mpu_write_mem+0xc4>)
 80030f4:	6852      	ldr	r2, [r2, #4]
 80030f6:	8952      	ldrh	r2, [r2, #10]
 80030f8:	4293      	cmp	r3, r2
 80030fa:	dd02      	ble.n	8003102 <mpu_write_mem+0x52>
        return -1;
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003100:	e033      	b.n	800316a <mpu_write_mem+0xba>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8003102:	4b1c      	ldr	r3, [pc, #112]	@ (8003174 <mpu_write_mem+0xc4>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	b299      	uxth	r1, r3
 800310c:	4b19      	ldr	r3, [pc, #100]	@ (8003174 <mpu_write_mem+0xc4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	7e1b      	ldrb	r3, [r3, #24]
 8003112:	461a      	mov	r2, r3
 8003114:	2305      	movs	r3, #5
 8003116:	9302      	str	r3, [sp, #8]
 8003118:	2302      	movs	r3, #2
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	f107 030c 	add.w	r3, r7, #12
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	2301      	movs	r3, #1
 8003124:	4814      	ldr	r0, [pc, #80]	@ (8003178 <mpu_write_mem+0xc8>)
 8003126:	f008 fa15 	bl	800b554 <HAL_I2C_Mem_Write>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <mpu_write_mem+0x86>
        return -1;
 8003130:	f04f 33ff 	mov.w	r3, #4294967295
 8003134:	e019      	b.n	800316a <mpu_write_mem+0xba>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8003136:	4b0f      	ldr	r3, [pc, #60]	@ (8003174 <mpu_write_mem+0xc4>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	b299      	uxth	r1, r3
 8003140:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <mpu_write_mem+0xc4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	7d5b      	ldrb	r3, [r3, #21]
 8003146:	461a      	mov	r2, r3
 8003148:	2305      	movs	r3, #5
 800314a:	9302      	str	r3, [sp, #8]
 800314c:	88bb      	ldrh	r3, [r7, #4]
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2301      	movs	r3, #1
 8003156:	4808      	ldr	r0, [pc, #32]	@ (8003178 <mpu_write_mem+0xc8>)
 8003158:	f008 f9fc 	bl	800b554 <HAL_I2C_Mem_Write>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <mpu_write_mem+0xb8>
        return -1;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295
 8003166:	e000      	b.n	800316a <mpu_write_mem+0xba>
    return 0;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000000 	.word	0x20000000
 8003178:	20000328 	.word	0x20000328

0800317c <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af04      	add	r7, sp, #16
 8003182:	4603      	mov	r3, r0
 8003184:	603a      	str	r2, [r7, #0]
 8003186:	80fb      	strh	r3, [r7, #6]
 8003188:	460b      	mov	r3, r1
 800318a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d102      	bne.n	8003198 <mpu_read_mem+0x1c>
        return -1;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	e04e      	b.n	8003236 <mpu_read_mem+0xba>
    if (!st.chip_cfg.sensors)
 8003198:	4b29      	ldr	r3, [pc, #164]	@ (8003240 <mpu_read_mem+0xc4>)
 800319a:	7a9b      	ldrb	r3, [r3, #10]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <mpu_read_mem+0x2a>
        return -1;
 80031a0:	f04f 33ff 	mov.w	r3, #4294967295
 80031a4:	e047      	b.n	8003236 <mpu_read_mem+0xba>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 80031b6:	7b7b      	ldrb	r3, [r7, #13]
 80031b8:	461a      	mov	r2, r3
 80031ba:	88bb      	ldrh	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	4a20      	ldr	r2, [pc, #128]	@ (8003240 <mpu_read_mem+0xc4>)
 80031c0:	6852      	ldr	r2, [r2, #4]
 80031c2:	8952      	ldrh	r2, [r2, #10]
 80031c4:	4293      	cmp	r3, r2
 80031c6:	dd02      	ble.n	80031ce <mpu_read_mem+0x52>
        return -1;
 80031c8:	f04f 33ff 	mov.w	r3, #4294967295
 80031cc:	e033      	b.n	8003236 <mpu_read_mem+0xba>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80031ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003240 <mpu_read_mem+0xc4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	b299      	uxth	r1, r3
 80031d8:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <mpu_read_mem+0xc4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	7e1b      	ldrb	r3, [r3, #24]
 80031de:	461a      	mov	r2, r3
 80031e0:	2305      	movs	r3, #5
 80031e2:	9302      	str	r3, [sp, #8]
 80031e4:	2302      	movs	r3, #2
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	2301      	movs	r3, #1
 80031f0:	4814      	ldr	r0, [pc, #80]	@ (8003244 <mpu_read_mem+0xc8>)
 80031f2:	f008 f9af 	bl	800b554 <HAL_I2C_Mem_Write>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <mpu_read_mem+0x86>
        return -1;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003200:	e019      	b.n	8003236 <mpu_read_mem+0xba>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8003202:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <mpu_read_mem+0xc4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	b299      	uxth	r1, r3
 800320c:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <mpu_read_mem+0xc4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	7d5b      	ldrb	r3, [r3, #21]
 8003212:	461a      	mov	r2, r3
 8003214:	2305      	movs	r3, #5
 8003216:	9302      	str	r3, [sp, #8]
 8003218:	88bb      	ldrh	r3, [r7, #4]
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2301      	movs	r3, #1
 8003222:	4808      	ldr	r0, [pc, #32]	@ (8003244 <mpu_read_mem+0xc8>)
 8003224:	f008 fa90 	bl	800b748 <HAL_I2C_Mem_Read>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <mpu_read_mem+0xb8>
        return -1;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	e000      	b.n	8003236 <mpu_read_mem+0xba>
    return 0;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000000 	.word	0x20000000
 8003244:	20000328 	.word	0x20000328

08003248 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	@ 0x38
 800324c:	af04      	add	r7, sp, #16
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	4611      	mov	r1, r2
 8003252:	461a      	mov	r2, r3
 8003254:	4603      	mov	r3, r0
 8003256:	81fb      	strh	r3, [r7, #14]
 8003258:	460b      	mov	r3, r1
 800325a:	81bb      	strh	r3, [r7, #12]
 800325c:	4613      	mov	r3, r2
 800325e:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 8003260:	4b3b      	ldr	r3, [pc, #236]	@ (8003350 <mpu_load_firmware+0x108>)
 8003262:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	e06b      	b.n	8003348 <mpu_load_firmware+0x100>

    if (!firmware)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <mpu_load_firmware+0x34>
        return -1;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295
 800327a:	e065      	b.n	8003348 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 800327c:	2300      	movs	r3, #0
 800327e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003280:	e034      	b.n	80032ec <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 8003282:	89fa      	ldrh	r2, [r7, #14]
 8003284:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b10      	cmp	r3, #16
 800328a:	bfa8      	it	ge
 800328c:	2310      	movge	r3, #16
 800328e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8003290:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	441a      	add	r2, r3
 8003296:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8003298:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ff08 	bl	80030b0 <mpu_write_mem>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <mpu_load_firmware+0x64>
            return -1;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
 80032aa:	e04d      	b.n	8003348 <mpu_load_firmware+0x100>
        if (mpu_read_mem(ii, this_write, cur))
 80032ac:	f107 0214 	add.w	r2, r7, #20
 80032b0:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80032b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff61 	bl	800317c <mpu_read_mem>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <mpu_load_firmware+0x7e>
            return -1;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	e040      	b.n	8003348 <mpu_load_firmware+0x100>
        if (memcmp(firmware+ii, cur, this_write))
 80032c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4413      	add	r3, r2
 80032cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032ce:	f107 0114 	add.w	r1, r7, #20
 80032d2:	4618      	mov	r0, r3
 80032d4:	f00c fc4e 	bl	800fb74 <memcmp>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <mpu_load_firmware+0x9c>
            return -2;
 80032de:	f06f 0301 	mvn.w	r3, #1
 80032e2:	e031      	b.n	8003348 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 80032e4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80032e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032e8:	4413      	add	r3, r2
 80032ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80032ec:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80032ee:	89fb      	ldrh	r3, [r7, #14]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d3c6      	bcc.n	8003282 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 80032f4:	89bb      	ldrh	r3, [r7, #12]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 80032fe:	89bb      	ldrh	r3, [r7, #12]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8003304:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <mpu_load_firmware+0x108>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	b299      	uxth	r1, r3
 800330e:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <mpu_load_firmware+0x108>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	7e9b      	ldrb	r3, [r3, #26]
 8003314:	461a      	mov	r2, r3
 8003316:	2305      	movs	r3, #5
 8003318:	9302      	str	r3, [sp, #8]
 800331a:	2302      	movs	r3, #2
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	f107 0310 	add.w	r3, r7, #16
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2301      	movs	r3, #1
 8003326:	480b      	ldr	r0, [pc, #44]	@ (8003354 <mpu_load_firmware+0x10c>)
 8003328:	f008 f914 	bl	800b554 <HAL_I2C_Mem_Write>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <mpu_load_firmware+0xf0>
        return -1;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295
 8003336:	e007      	b.n	8003348 <mpu_load_firmware+0x100>

    st.chip_cfg.dmp_loaded = 1;
 8003338:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <mpu_load_firmware+0x108>)
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8003340:	4a03      	ldr	r2, [pc, #12]	@ (8003350 <mpu_load_firmware+0x108>)
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	84d3      	strh	r3, [r2, #38]	@ 0x26
    return 0;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3728      	adds	r7, #40	@ 0x28
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000000 	.word	0x20000000
 8003354:	20000328 	.word	0x20000328

08003358 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af04      	add	r7, sp, #16
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 8003362:	4b2e      	ldr	r3, [pc, #184]	@ (800341c <mpu_set_dmp_state+0xc4>)
 8003364:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003368:	79fa      	ldrb	r2, [r7, #7]
 800336a:	429a      	cmp	r2, r3
 800336c:	d101      	bne.n	8003372 <mpu_set_dmp_state+0x1a>
        return 0;
 800336e:	2300      	movs	r3, #0
 8003370:	e050      	b.n	8003414 <mpu_set_dmp_state+0xbc>

    if (enable) {
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d02f      	beq.n	80033d8 <mpu_set_dmp_state+0x80>
        if (!st.chip_cfg.dmp_loaded)
 8003378:	4b28      	ldr	r3, [pc, #160]	@ (800341c <mpu_set_dmp_state+0xc4>)
 800337a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <mpu_set_dmp_state+0x30>
            return -1;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295
 8003386:	e045      	b.n	8003414 <mpu_set_dmp_state+0xbc>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 8003388:	2000      	movs	r0, #0
 800338a:	f7fd fe63 	bl	8001054 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 800338e:	2000      	movs	r0, #0
 8003390:	f7fe fe78 	bl	8002084 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8003394:	4b21      	ldr	r3, [pc, #132]	@ (800341c <mpu_set_dmp_state+0xc4>)
 8003396:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe fbf1 	bl	8001b80 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80033a2:	4b1e      	ldr	r3, [pc, #120]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	b299      	uxth	r1, r3
 80033ac:	2305      	movs	r3, #5
 80033ae:	9302      	str	r3, [sp, #8]
 80033b0:	2301      	movs	r3, #1
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	f107 030f 	add.w	r3, r7, #15
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2301      	movs	r3, #1
 80033bc:	2223      	movs	r2, #35	@ 0x23
 80033be:	4818      	ldr	r0, [pc, #96]	@ (8003420 <mpu_set_dmp_state+0xc8>)
 80033c0:	f008 f8c8 	bl	800b554 <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 1;
 80033c4:	4b15      	ldr	r3, [pc, #84]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 80033cc:	2001      	movs	r0, #1
 80033ce:	f7fd fe41 	bl	8001054 <set_int_enable>
        mpu_reset_fifo();
 80033d2:	f7fe f87b 	bl	80014cc <mpu_reset_fifo>
 80033d6:	e01c      	b.n	8003412 <mpu_set_dmp_state+0xba>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 80033d8:	2000      	movs	r0, #0
 80033da:	f7fd fe3b 	bl	8001054 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 80033de:	4b0f      	ldr	r3, [pc, #60]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033e0:	7c1b      	ldrb	r3, [r3, #16]
 80033e2:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80033e4:	4b0d      	ldr	r3, [pc, #52]	@ (800341c <mpu_set_dmp_state+0xc4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	b299      	uxth	r1, r3
 80033ee:	2305      	movs	r3, #5
 80033f0:	9302      	str	r3, [sp, #8]
 80033f2:	2301      	movs	r3, #1
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	f107 030f 	add.w	r3, r7, #15
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2301      	movs	r3, #1
 80033fe:	2223      	movs	r2, #35	@ 0x23
 8003400:	4807      	ldr	r0, [pc, #28]	@ (8003420 <mpu_set_dmp_state+0xc8>)
 8003402:	f008 f8a7 	bl	800b554 <HAL_I2C_Mem_Write>
        st.chip_cfg.dmp_on = 0;
 8003406:	4b05      	ldr	r3, [pc, #20]	@ (800341c <mpu_set_dmp_state+0xc4>)
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        mpu_reset_fifo();
 800340e:	f7fe f85d 	bl	80014cc <mpu_reset_fifo>
    }
    return 0;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20000000 	.word	0x20000000
 8003420:	20000328 	.word	0x20000328

08003424 <myget_ms>:

    st.chip_cfg.int_motion_only = 0;
    return 0;
}
void myget_ms(unsigned long *time)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 800343c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003440:	23c8      	movs	r3, #200	@ 0xc8
 8003442:	4904      	ldr	r1, [pc, #16]	@ (8003454 <dmp_load_motion_driver_firmware+0x1c>)
 8003444:	f640 30f6 	movw	r0, #3062	@ 0xbf6
 8003448:	f7ff fefe 	bl	8003248 <mpu_load_firmware>
 800344c:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 800344e:	4618      	mov	r0, r3
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	080126fc 	.word	0x080126fc

08003458 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8003462:	4a6e      	ldr	r2, [pc, #440]	@ (800361c <dmp_set_orientation+0x1c4>)
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	4611      	mov	r1, r2
 800346c:	8019      	strh	r1, [r3, #0]
 800346e:	3302      	adds	r3, #2
 8003470:	0c12      	lsrs	r2, r2, #16
 8003472:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8003474:	4a6a      	ldr	r2, [pc, #424]	@ (8003620 <dmp_set_orientation+0x1c8>)
 8003476:	f107 0310 	add.w	r3, r7, #16
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	4611      	mov	r1, r2
 800347e:	8019      	strh	r1, [r3, #0]
 8003480:	3302      	adds	r3, #2
 8003482:	0c12      	lsrs	r2, r2, #16
 8003484:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8003486:	4a67      	ldr	r2, [pc, #412]	@ (8003624 <dmp_set_orientation+0x1cc>)
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	4611      	mov	r1, r2
 8003490:	8019      	strh	r1, [r3, #0]
 8003492:	3302      	adds	r3, #2
 8003494:	0c12      	lsrs	r2, r2, #16
 8003496:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8003498:	4a63      	ldr	r2, [pc, #396]	@ (8003628 <dmp_set_orientation+0x1d0>)
 800349a:	f107 0308 	add.w	r3, r7, #8
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	4611      	mov	r1, r2
 80034a2:	8019      	strh	r1, [r3, #0]
 80034a4:	3302      	adds	r3, #2
 80034a6:	0c12      	lsrs	r2, r2, #16
 80034a8:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	3320      	adds	r3, #32
 80034b2:	443b      	add	r3, r7
 80034b4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034b8:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	08db      	lsrs	r3, r3, #3
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	3320      	adds	r3, #32
 80034c6:	443b      	add	r3, r7
 80034c8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034cc:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	099b      	lsrs	r3, r3, #6
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	3320      	adds	r3, #32
 80034da:	443b      	add	r3, r7
 80034dc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80034e0:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	3320      	adds	r3, #32
 80034ea:	443b      	add	r3, r7
 80034ec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80034f0:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	08db      	lsrs	r3, r3, #3
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	3320      	adds	r3, #32
 80034fe:	443b      	add	r3, r7
 8003500:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003504:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	099b      	lsrs	r3, r3, #6
 800350a:	b29b      	uxth	r3, r3
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	3320      	adds	r3, #32
 8003512:	443b      	add	r3, r7
 8003514:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003518:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 800351a:	f107 031c 	add.w	r3, r7, #28
 800351e:	461a      	mov	r2, r3
 8003520:	2103      	movs	r1, #3
 8003522:	f240 4026 	movw	r0, #1062	@ 0x426
 8003526:	f7ff fdc3 	bl	80030b0 <mpu_write_mem>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <dmp_set_orientation+0xde>
        return -1;
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
 8003534:	e06e      	b.n	8003614 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8003536:	f107 0318 	add.w	r3, r7, #24
 800353a:	461a      	mov	r2, r3
 800353c:	2103      	movs	r1, #3
 800353e:	f240 402a 	movw	r0, #1066	@ 0x42a
 8003542:	f7ff fdb5 	bl	80030b0 <mpu_write_mem>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <dmp_set_orientation+0xfa>
        return -1;
 800354c:	f04f 33ff 	mov.w	r3, #4294967295
 8003550:	e060      	b.n	8003614 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8003552:	f107 031c 	add.w	r3, r7, #28
 8003556:	f107 020c 	add.w	r2, r7, #12
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	4611      	mov	r1, r2
 800355e:	8019      	strh	r1, [r3, #0]
 8003560:	3302      	adds	r3, #2
 8003562:	0c12      	lsrs	r2, r2, #16
 8003564:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8003566:	f107 0318 	add.w	r3, r7, #24
 800356a:	f107 0208 	add.w	r2, r7, #8
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	4611      	mov	r1, r2
 8003572:	8019      	strh	r1, [r3, #0]
 8003574:	3302      	adds	r3, #2
 8003576:	0c12      	lsrs	r2, r2, #16
 8003578:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 8003584:	7f3b      	ldrb	r3, [r7, #28]
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 800358e:	7e3b      	ldrb	r3, [r7, #24]
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	b2db      	uxtb	r3, r3
 8003596:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 80035a2:	7f7b      	ldrb	r3, [r7, #29]
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 80035ac:	7e7b      	ldrb	r3, [r7, #25]
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 80035c0:	7fbb      	ldrb	r3, [r7, #30]
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 80035ca:	7ebb      	ldrb	r3, [r7, #26]
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 80035d4:	f107 031c 	add.w	r3, r7, #28
 80035d8:	461a      	mov	r2, r3
 80035da:	2103      	movs	r1, #3
 80035dc:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 80035e0:	f7ff fd66 	bl	80030b0 <mpu_write_mem>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <dmp_set_orientation+0x198>
        return -1;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	e011      	b.n	8003614 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 80035f0:	f107 0318 	add.w	r3, r7, #24
 80035f4:	461a      	mov	r2, r3
 80035f6:	2103      	movs	r1, #3
 80035f8:	f240 4031 	movw	r0, #1073	@ 0x431
 80035fc:	f7ff fd58 	bl	80030b0 <mpu_write_mem>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <dmp_set_orientation+0x1b4>
        return -1;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	e003      	b.n	8003614 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 800360c:	4a07      	ldr	r2, [pc, #28]	@ (800362c <dmp_set_orientation+0x1d4>)
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	8113      	strh	r3, [r2, #8]
    return 0;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	08012610 	.word	0x08012610
 8003620:	08012614 	.word	0x08012614
 8003624:	08012618 	.word	0x08012618
 8003628:	0801261c 	.word	0x0801261c
 800362c:	200002c4 	.word	0x200002c4

08003630 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 8003630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003634:	b08c      	sub	sp, #48	@ 0x30
 8003636:	af00      	add	r7, sp, #0
 8003638:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 800363a:	4b80      	ldr	r3, [pc, #512]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 800363c:	891b      	ldrh	r3, [r3, #8]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (dmp.orient & 4)
 800364c:	4b7b      	ldr	r3, [pc, #492]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 800364e:	891b      	ldrh	r3, [r3, #8]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	425b      	negs	r3, r3
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800365e:	4b77      	ldr	r3, [pc, #476]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 8003660:	891b      	ldrh	r3, [r3, #8]
 8003662:	08db      	lsrs	r3, r3, #3
 8003664:	b29b      	uxth	r3, r3
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (dmp.orient & 0x20)
 8003674:	4b71      	ldr	r3, [pc, #452]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 8003676:	891b      	ldrh	r3, [r3, #8]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 8003680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003682:	425b      	negs	r3, r3
 8003684:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8003686:	4b6d      	ldr	r3, [pc, #436]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 8003688:	891b      	ldrh	r3, [r3, #8]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	b29b      	uxth	r3, r3
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	4413      	add	r3, r2
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dmp.orient & 0x100)
 800369c:	4b67      	ldr	r3, [pc, #412]	@ (800383c <dmp_set_gyro_bias+0x20c>)
 800369e:	891b      	ldrh	r3, [r3, #8]
 80036a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 80036a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036aa:	425b      	negs	r3, r3
 80036ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	17da      	asrs	r2, r3, #31
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	617a      	str	r2, [r7, #20]
 80036b6:	4b62      	ldr	r3, [pc, #392]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 80036b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036bc:	460a      	mov	r2, r1
 80036be:	fb03 f202 	mul.w	r2, r3, r2
 80036c2:	2300      	movs	r3, #0
 80036c4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80036c8:	4601      	mov	r1, r0
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	4a5b      	ldr	r2, [pc, #364]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 80036d2:	6939      	ldr	r1, [r7, #16]
 80036d4:	fba1 ab02 	umull	sl, fp, r1, r2
 80036d8:	445b      	add	r3, fp
 80036da:	469b      	mov	fp, r3
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	ea4f 729a 	mov.w	r2, sl, lsr #30
 80036e8:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 80036ec:	ea4f 73ab 	mov.w	r3, fp, asr #30
 80036f0:	4613      	mov	r3, r2
 80036f2:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 80036f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f6:	17da      	asrs	r2, r3, #31
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	60fa      	str	r2, [r7, #12]
 80036fc:	4b50      	ldr	r3, [pc, #320]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 80036fe:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003702:	465a      	mov	r2, fp
 8003704:	fb03 f202 	mul.w	r2, r3, r2
 8003708:	2300      	movs	r3, #0
 800370a:	4651      	mov	r1, sl
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	4413      	add	r3, r2
 8003712:	4a4b      	ldr	r2, [pc, #300]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 8003714:	4651      	mov	r1, sl
 8003716:	fba1 8902 	umull	r8, r9, r1, r2
 800371a:	444b      	add	r3, r9
 800371c:	4699      	mov	r9, r3
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800372a:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800372e:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003732:	4613      	mov	r3, r2
 8003734:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8003736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003738:	17da      	asrs	r2, r3, #31
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	4b40      	ldr	r3, [pc, #256]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 8003740:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003744:	464a      	mov	r2, r9
 8003746:	fb03 f202 	mul.w	r2, r3, r2
 800374a:	2300      	movs	r3, #0
 800374c:	4641      	mov	r1, r8
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	4413      	add	r3, r2
 8003754:	4a3a      	ldr	r2, [pc, #232]	@ (8003840 <dmp_set_gyro_bias+0x210>)
 8003756:	4641      	mov	r1, r8
 8003758:	fba1 4502 	umull	r4, r5, r1, r2
 800375c:	442b      	add	r3, r5
 800375e:	461d      	mov	r5, r3
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	0fa2      	lsrs	r2, r4, #30
 800376a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800376e:	17ab      	asrs	r3, r5, #30
 8003770:	4613      	mov	r3, r2
 8003772:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	161b      	asrs	r3, r3, #24
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	141b      	asrs	r3, r3, #16
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	121b      	asrs	r3, r3, #8
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	b2db      	uxtb	r3, r3
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 800379a:	f107 0320 	add.w	r3, r7, #32
 800379e:	461a      	mov	r2, r3
 80037a0:	2104      	movs	r1, #4
 80037a2:	f44f 7074 	mov.w	r0, #976	@ 0x3d0
 80037a6:	f7ff fc83 	bl	80030b0 <mpu_write_mem>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <dmp_set_gyro_bias+0x186>
        return -1;
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
 80037b4:	e03c      	b.n	8003830 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 80037b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b8:	161b      	asrs	r3, r3, #24
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 80037c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c2:	141b      	asrs	r3, r3, #16
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 80037ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037cc:	121b      	asrs	r3, r3, #8
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 80037dc:	f107 0320 	add.w	r3, r7, #32
 80037e0:	461a      	mov	r2, r3
 80037e2:	2104      	movs	r1, #4
 80037e4:	f44f 7075 	mov.w	r0, #980	@ 0x3d4
 80037e8:	f7ff fc62 	bl	80030b0 <mpu_write_mem>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <dmp_set_gyro_bias+0x1c8>
        return -1;
 80037f2:	f04f 33ff 	mov.w	r3, #4294967295
 80037f6:	e01b      	b.n	8003830 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 80037f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fa:	161b      	asrs	r3, r3, #24
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 8003802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003804:	141b      	asrs	r3, r3, #16
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 800380c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380e:	121b      	asrs	r3, r3, #8
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 8003816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 800381e:	f107 0320 	add.w	r3, r7, #32
 8003822:	461a      	mov	r2, r3
 8003824:	2104      	movs	r1, #4
 8003826:	f44f 7076 	mov.w	r0, #984	@ 0x3d8
 800382a:	f7ff fc41 	bl	80030b0 <mpu_write_mem>
 800382e:	4603      	mov	r3, r0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3730      	adds	r7, #48	@ 0x30
 8003834:	46bd      	mov	sp, r7
 8003836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383a:	bf00      	nop
 800383c:	200002c4 	.word	0x200002c4
 8003840:	02cae309 	.word	0x02cae309

08003844 <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 8003844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003848:	b094      	sub	sp, #80	@ 0x50
 800384a:	af00      	add	r7, sp, #0
 800384c:	6278      	str	r0, [r7, #36]	@ 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 800384e:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fa3e 	bl	8001cd4 <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 8003858:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800385a:	b29b      	uxth	r3, r3
 800385c:	2200      	movs	r2, #0
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	61fa      	str	r2, [r7, #28]
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	69f9      	ldr	r1, [r7, #28]
 800386c:	03cb      	lsls	r3, r1, #15
 800386e:	69b9      	ldr	r1, [r7, #24]
 8003870:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 8003874:	69b9      	ldr	r1, [r7, #24]
 8003876:	03ca      	lsls	r2, r1, #15
 8003878:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    //__no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 800387c:	4b71      	ldr	r3, [pc, #452]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 800387e:	891b      	ldrh	r3, [r3, #8]
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003888:	4413      	add	r3, r2
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (dmp.orient & 4)
 800388e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 8003890:	891b      	ldrh	r3, [r3, #8]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 800389a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800389c:	425b      	negs	r3, r3
 800389e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 80038a0:	4b68      	ldr	r3, [pc, #416]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038a2:	891b      	ldrh	r3, [r3, #8]
 80038a4:	08db      	lsrs	r3, r3, #3
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b0:	4413      	add	r3, r2
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (dmp.orient & 0x20)
 80038b6:	4b63      	ldr	r3, [pc, #396]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038b8:	891b      	ldrh	r3, [r3, #8]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 80038c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c4:	425b      	negs	r3, r3
 80038c6:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 80038c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038ca:	891b      	ldrh	r3, [r3, #8]
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d8:	4413      	add	r3, r2
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	647b      	str	r3, [r7, #68]	@ 0x44
    if (dmp.orient & 0x100)
 80038de:	4b59      	ldr	r3, [pc, #356]	@ (8003a44 <dmp_set_accel_bias+0x200>)
 80038e0:	891b      	ldrh	r3, [r3, #8]
 80038e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 80038ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ec:	425b      	negs	r3, r3
 80038ee:	647b      	str	r3, [r7, #68]	@ 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 80038f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038f2:	17da      	asrs	r2, r3, #31
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	617a      	str	r2, [r7, #20]
 80038f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038fe:	460a      	mov	r2, r1
 8003900:	fb02 f203 	mul.w	r2, r2, r3
 8003904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003906:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800390a:	4601      	mov	r1, r0
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003914:	6939      	ldr	r1, [r7, #16]
 8003916:	fba2 ab01 	umull	sl, fp, r2, r1
 800391a:	445b      	add	r3, fp
 800391c:	469b      	mov	fp, r3
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800392a:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 800392e:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8003932:	4613      	mov	r3, r2
 8003934:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 8003936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003938:	17da      	asrs	r2, r3, #31
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	60fa      	str	r2, [r7, #12]
 800393e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003940:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003944:	465a      	mov	r2, fp
 8003946:	fb02 f203 	mul.w	r2, r2, r3
 800394a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800394c:	4651      	mov	r1, sl
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003956:	4651      	mov	r1, sl
 8003958:	fba2 8901 	umull	r8, r9, r2, r1
 800395c:	444b      	add	r3, r9
 800395e:	4699      	mov	r9, r3
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800396c:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 8003970:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003974:	4613      	mov	r3, r2
 8003976:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 8003978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800397a:	17da      	asrs	r2, r3, #31
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003982:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003986:	464a      	mov	r2, r9
 8003988:	fb02 f203 	mul.w	r2, r2, r3
 800398c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800398e:	4641      	mov	r1, r8
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003998:	4641      	mov	r1, r8
 800399a:	fba2 4501 	umull	r4, r5, r2, r1
 800399e:	442b      	add	r3, r5
 80039a0:	461d      	mov	r5, r3
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	0fa2      	lsrs	r2, r4, #30
 80039ac:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80039b0:	17ab      	asrs	r3, r5, #30
 80039b2:	4613      	mov	r3, r2
 80039b4:	647b      	str	r3, [r7, #68]	@ 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 80039b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b8:	161b      	asrs	r3, r3, #24
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 80039c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039c2:	141b      	asrs	r3, r3, #16
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 80039ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039cc:	121b      	asrs	r3, r3, #8
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 80039d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 80039dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039de:	161b      	asrs	r3, r3, #24
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 80039e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e8:	141b      	asrs	r3, r3, #16
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 80039f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f2:	121b      	asrs	r3, r3, #8
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 80039fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 8003a02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a04:	161b      	asrs	r3, r3, #24
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 8003a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a0e:	141b      	asrs	r3, r3, #16
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 8003a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a18:	121b      	asrs	r3, r3, #8
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 8003a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 8003a28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	210c      	movs	r1, #12
 8003a30:	f44f 7025 	mov.w	r0, #660	@ 0x294
 8003a34:	f7ff fb3c 	bl	80030b0 <mpu_write_mem>
 8003a38:	4603      	mov	r3, r0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3750      	adds	r7, #80	@ 0x50
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a44:	200002c4 	.word	0x200002c4

08003a48 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8003a52:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad0 <dmp_set_fifo_rate+0x88>)
 8003a54:	f107 0310 	add.w	r3, r7, #16
 8003a58:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2bc8      	cmp	r3, #200	@ 0xc8
 8003a62:	d902      	bls.n	8003a6a <dmp_set_fifo_rate+0x22>
        return -1;
 8003a64:	f04f 33ff 	mov.w	r3, #4294967295
 8003a68:	e02e      	b.n	8003ac8 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	22c8      	movs	r2, #200	@ 0xc8
 8003a6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8003a78:	8bfb      	ldrh	r3, [r7, #30]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 8003a82:	8bfb      	ldrh	r3, [r7, #30]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8003a88:	f107 0308 	add.w	r3, r7, #8
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2102      	movs	r1, #2
 8003a90:	f240 2016 	movw	r0, #534	@ 0x216
 8003a94:	f7ff fb0c 	bl	80030b0 <mpu_write_mem>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <dmp_set_fifo_rate+0x5c>
        return -1;
 8003a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa2:	e011      	b.n	8003ac8 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	210c      	movs	r1, #12
 8003aac:	f640 20c1 	movw	r0, #2753	@ 0xac1
 8003ab0:	f7ff fafe 	bl	80030b0 <mpu_write_mem>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <dmp_set_fifo_rate+0x78>
        return -1;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	e003      	b.n	8003ac8 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8003ac0:	4a04      	ldr	r2, [pc, #16]	@ (8003ad4 <dmp_set_fifo_rate+0x8c>)
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	8193      	strh	r3, [r2, #12]
    return 0;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	08012620 	.word	0x08012620
 8003ad4:	200002c4 	.word	0x200002c4

08003ad8 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	460a      	mov	r2, r1
 8003ae2:	71fb      	strb	r3, [r7, #7]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <dmp_set_tap_thresh+0x22>
 8003af2:	88bb      	ldrh	r3, [r7, #4]
 8003af4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003af8:	d902      	bls.n	8003b00 <dmp_set_tap_thresh+0x28>
        return -1;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
 8003afe:	e10b      	b.n	8003d18 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8003b00:	88bb      	ldrh	r3, [r7, #4]
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b0a:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8003d20 <dmp_set_tap_thresh+0x248>
 8003b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b12:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 8003b16:	f107 030b 	add.w	r3, r7, #11
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fd fed2 	bl	80018c4 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8003b20:	7afb      	ldrb	r3, [r7, #11]
 8003b22:	3b02      	subs	r3, #2
 8003b24:	2b0e      	cmp	r3, #14
 8003b26:	d87d      	bhi.n	8003c24 <dmp_set_tap_thresh+0x14c>
 8003b28:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <dmp_set_tap_thresh+0x58>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b6d 	.word	0x08003b6d
 8003b34:	08003c25 	.word	0x08003c25
 8003b38:	08003b9b 	.word	0x08003b9b
 8003b3c:	08003c25 	.word	0x08003c25
 8003b40:	08003c25 	.word	0x08003c25
 8003b44:	08003c25 	.word	0x08003c25
 8003b48:	08003bc9 	.word	0x08003bc9
 8003b4c:	08003c25 	.word	0x08003c25
 8003b50:	08003c25 	.word	0x08003c25
 8003b54:	08003c25 	.word	0x08003c25
 8003b58:	08003c25 	.word	0x08003c25
 8003b5c:	08003c25 	.word	0x08003c25
 8003b60:	08003c25 	.word	0x08003c25
 8003b64:	08003c25 	.word	0x08003c25
 8003b68:	08003bf7 	.word	0x08003bf7
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8003b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b70:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8003d24 <dmp_set_tap_thresh+0x24c>
 8003b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b7c:	ee17 3a90 	vmov	r3, s15
 8003b80:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8003b82:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b86:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003d28 <dmp_set_tap_thresh+0x250>
 8003b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b92:	ee17 3a90 	vmov	r3, s15
 8003b96:	82bb      	strh	r3, [r7, #20]
        break;
 8003b98:	e047      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8003b9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b9e:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8003d2c <dmp_set_tap_thresh+0x254>
 8003ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003baa:	ee17 3a90 	vmov	r3, s15
 8003bae:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8003bb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bb4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8003d30 <dmp_set_tap_thresh+0x258>
 8003bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc0:	ee17 3a90 	vmov	r3, s15
 8003bc4:	82bb      	strh	r3, [r7, #20]
        break;
 8003bc6:	e030      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8003bc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bcc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003d34 <dmp_set_tap_thresh+0x25c>
 8003bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd8:	ee17 3a90 	vmov	r3, s15
 8003bdc:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8003bde:	edd7 7a04 	vldr	s15, [r7, #16]
 8003be2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003d38 <dmp_set_tap_thresh+0x260>
 8003be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bee:	ee17 3a90 	vmov	r3, s15
 8003bf2:	82bb      	strh	r3, [r7, #20]
        break;
 8003bf4:	e019      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8003bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bfa:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8003d3c <dmp_set_tap_thresh+0x264>
 8003bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c06:	ee17 3a90 	vmov	r3, s15
 8003c0a:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8003c0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c10:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003d40 <dmp_set_tap_thresh+0x268>
 8003c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c1c:	ee17 3a90 	vmov	r3, s15
 8003c20:	82bb      	strh	r3, [r7, #20]
        break;
 8003c22:	e002      	b.n	8003c2a <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	e076      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8003c2a:	8afb      	ldrh	r3, [r7, #22]
 8003c2c:	0a1b      	lsrs	r3, r3, #8
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8003c34:	8afb      	ldrh	r3, [r7, #22]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8003c3a:	8abb      	ldrh	r3, [r7, #20]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8003c44:	8abb      	ldrh	r3, [r7, #20]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01c      	beq.n	8003c8e <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8003c54:	f107 030c 	add.w	r3, r7, #12
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	f44f 70ea 	mov.w	r0, #468	@ 0x1d4
 8003c60:	f7ff fa26 	bl	80030b0 <mpu_write_mem>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <dmp_set_tap_thresh+0x198>
            return -1;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	e053      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8003c70:	f107 030c 	add.w	r3, r7, #12
 8003c74:	3302      	adds	r3, #2
 8003c76:	461a      	mov	r2, r3
 8003c78:	2102      	movs	r1, #2
 8003c7a:	f44f 7092 	mov.w	r0, #292	@ 0x124
 8003c7e:	f7ff fa17 	bl	80030b0 <mpu_write_mem>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <dmp_set_tap_thresh+0x1b6>
            return -1;
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	e044      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01c      	beq.n	8003cd2 <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8003c98:	f107 030c 	add.w	r3, r7, #12
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	f44f 70ec 	mov.w	r0, #472	@ 0x1d8
 8003ca4:	f7ff fa04 	bl	80030b0 <mpu_write_mem>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <dmp_set_tap_thresh+0x1dc>
            return -1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb2:	e031      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8003cb4:	f107 030c 	add.w	r3, r7, #12
 8003cb8:	3302      	adds	r3, #2
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	f44f 7094 	mov.w	r0, #296	@ 0x128
 8003cc2:	f7ff f9f5 	bl	80030b0 <mpu_write_mem>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <dmp_set_tap_thresh+0x1fa>
            return -1;
 8003ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd0:	e022      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01c      	beq.n	8003d16 <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8003cdc:	f107 030c 	add.w	r3, r7, #12
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	f44f 70ee 	mov.w	r0, #476	@ 0x1dc
 8003ce8:	f7ff f9e2 	bl	80030b0 <mpu_write_mem>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <dmp_set_tap_thresh+0x220>
            return -1;
 8003cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf6:	e00f      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8003cf8:	f107 030c 	add.w	r3, r7, #12
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2102      	movs	r1, #2
 8003d02:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003d06:	f7ff f9d3 	bl	80030b0 <mpu_write_mem>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <dmp_set_tap_thresh+0x23e>
            return -1;
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
 8003d14:	e000      	b.n	8003d18 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	43480000 	.word	0x43480000
 8003d24:	46800000 	.word	0x46800000
 8003d28:	46400000 	.word	0x46400000
 8003d2c:	46000000 	.word	0x46000000
 8003d30:	45c00000 	.word	0x45c00000
 8003d34:	45800000 	.word	0x45800000
 8003d38:	45400000 	.word	0x45400000
 8003d3c:	45000000 	.word	0x45000000
 8003d40:	44c00000 	.word	0x44c00000

08003d44 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d004      	beq.n	8003d66 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d004      	beq.n	8003d7a <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	f043 030c 	orr.w	r3, r3, #12
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	f043 0303 	orr.w	r3, r3, #3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8003d8e:	f107 030f 	add.w	r3, r7, #15
 8003d92:	461a      	mov	r2, r3
 8003d94:	2101      	movs	r1, #1
 8003d96:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 8003d9a:	f7ff f989 	bl	80030b0 <mpu_write_mem>
 8003d9e:	4603      	mov	r3, r0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <dmp_set_tap_count+0x16>
        min_taps = 1;
 8003db8:	2301      	movs	r3, #1
 8003dba:	71fb      	strb	r3, [r7, #7]
 8003dbc:	e004      	b.n	8003dc8 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d901      	bls.n	8003dc8 <dmp_set_tap_count+0x20>
        min_taps = 4;
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 8003dd0:	f107 030f 	add.w	r3, r7, #15
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	f240 104f 	movw	r0, #335	@ 0x14f
 8003ddc:	f7ff f968 	bl	80030b0 <mpu_write_mem>
 8003de0:	4603      	mov	r3, r0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	4a0c      	ldr	r2, [pc, #48]	@ (8003e2c <dmp_set_tap_time+0x40>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003e02:	89fb      	ldrh	r3, [r7, #14]
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003e0c:	89fb      	ldrh	r3, [r7, #14]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8003e12:	f107 030c 	add.w	r3, r7, #12
 8003e16:	461a      	mov	r2, r3
 8003e18:	2102      	movs	r1, #2
 8003e1a:	f44f 70ef 	mov.w	r0, #478	@ 0x1de
 8003e1e:	f7ff f947 	bl	80030b0 <mpu_write_mem>
 8003e22:	4603      	mov	r3, r0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	cccccccd 	.word	0xcccccccd

08003e30 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8003e70 <dmp_set_tap_time_multi+0x40>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8003e46:	89fb      	ldrh	r3, [r7, #14]
 8003e48:	0a1b      	lsrs	r3, r3, #8
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 8003e56:	f107 030c 	add.w	r3, r7, #12
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	f44f 70ed 	mov.w	r0, #474	@ 0x1da
 8003e62:	f7ff f925 	bl	80030b0 <mpu_write_mem>
 8003e66:	4603      	mov	r3, r0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	cccccccd 	.word	0xcccccccd

08003e74 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a13      	ldr	r2, [pc, #76]	@ (8003ed0 <dmp_set_shake_reject_thresh+0x5c>)
 8003e84:	fb82 1203 	smull	r1, r2, r2, r3
 8003e88:	1192      	asrs	r2, r2, #6
 8003e8a:	17db      	asrs	r3, r3, #31
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	887a      	ldrh	r2, [r7, #2]
 8003e90:	fb02 f303 	mul.w	r3, r2, r3
 8003e94:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	161b      	asrs	r3, r3, #24
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	141b      	asrs	r3, r3, #16
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	121b      	asrs	r3, r3, #8
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 8003eb4:	f107 0308 	add.w	r3, r7, #8
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2104      	movs	r1, #4
 8003ebc:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 8003ec0:	f7ff f8f6 	bl	80030b0 <mpu_write_mem>
 8003ec4:	4603      	mov	r3, r0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	10624dd3 	.word	0x10624dd3

08003ed4 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8003f14 <dmp_set_shake_reject_time+0x40>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	0a1b      	lsrs	r3, r3, #8
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 8003efa:	f107 030c 	add.w	r3, r7, #12
 8003efe:	461a      	mov	r2, r3
 8003f00:	2102      	movs	r1, #2
 8003f02:	f44f 70ad 	mov.w	r0, #346	@ 0x15a
 8003f06:	f7ff f8d3 	bl	80030b0 <mpu_write_mem>
 8003f0a:	4603      	mov	r3, r0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	cccccccd 	.word	0xcccccccd

08003f18 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	4a0c      	ldr	r2, [pc, #48]	@ (8003f58 <dmp_set_shake_reject_timeout+0x40>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	089b      	lsrs	r3, r3, #2
 8003f2c:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	0a1b      	lsrs	r3, r3, #8
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 8003f3e:	f107 030c 	add.w	r3, r7, #12
 8003f42:	461a      	mov	r2, r3
 8003f44:	2102      	movs	r1, #2
 8003f46:	f44f 70ac 	mov.w	r0, #344	@ 0x158
 8003f4a:	f7ff f8b1 	bl	80030b0 <mpu_write_mem>
 8003f4e:	4603      	mov	r3, r0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	cccccccd 	.word	0xcccccccd

08003f5c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8003f66:	2302      	movs	r3, #2
 8003f68:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 8003f6a:	23ca      	movs	r3, #202	@ 0xca
 8003f6c:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8003f6e:	23e3      	movs	r3, #227	@ 0xe3
 8003f70:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8003f72:	2309      	movs	r3, #9
 8003f74:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 8003f76:	f107 030c 	add.w	r3, r7, #12
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	2104      	movs	r1, #4
 8003f7e:	2068      	movs	r0, #104	@ 0x68
 8003f80:	f7ff f896 	bl	80030b0 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 8003f84:	23a3      	movs	r3, #163	@ 0xa3
 8003f86:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d006      	beq.n	8003fa0 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 8003f92:	23c0      	movs	r3, #192	@ 0xc0
 8003f94:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 8003f96:	23c8      	movs	r3, #200	@ 0xc8
 8003f98:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 8003f9a:	23c2      	movs	r3, #194	@ 0xc2
 8003f9c:	73fb      	strb	r3, [r7, #15]
 8003f9e:	e005      	b.n	8003fac <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 8003fa0:	23a3      	movs	r3, #163	@ 0xa3
 8003fa2:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 8003fa4:	23a3      	movs	r3, #163	@ 0xa3
 8003fa6:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 8003fa8:	23a3      	movs	r3, #163	@ 0xa3
 8003faa:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d006      	beq.n	8003fc4 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 8003fb6:	23c4      	movs	r3, #196	@ 0xc4
 8003fb8:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 8003fba:	23cc      	movs	r3, #204	@ 0xcc
 8003fbc:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 8003fbe:	23c6      	movs	r3, #198	@ 0xc6
 8003fc0:	74bb      	strb	r3, [r7, #18]
 8003fc2:	e005      	b.n	8003fd0 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 8003fc4:	23a3      	movs	r3, #163	@ 0xa3
 8003fc6:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 8003fc8:	23a3      	movs	r3, #163	@ 0xa3
 8003fca:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 8003fcc:	23a3      	movs	r3, #163	@ 0xa3
 8003fce:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 8003fd0:	23a3      	movs	r3, #163	@ 0xa3
 8003fd2:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8003fd4:	23a3      	movs	r3, #163	@ 0xa3
 8003fd6:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 8003fd8:	23a3      	movs	r3, #163	@ 0xa3
 8003fda:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8003fdc:	f107 030c 	add.w	r3, r7, #12
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	210a      	movs	r1, #10
 8003fe4:	f640 20a7 	movw	r0, #2727	@ 0xaa7
 8003fe8:	f7ff f862 	bl	80030b0 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	733b      	strb	r3, [r7, #12]
 8003ffa:	e001      	b.n	8004000 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8003ffc:	23d8      	movs	r3, #216	@ 0xd8
 8003ffe:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 8004000:	f107 030c 	add.w	r3, r7, #12
 8004004:	461a      	mov	r2, r3
 8004006:	2101      	movs	r1, #1
 8004008:	f640 20b6 	movw	r0, #2742	@ 0xab6
 800400c:	f7ff f850 	bl	80030b0 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800401a:	2001      	movs	r0, #1
 800401c:	f000 f8c6 	bl	80041ac <dmp_enable_gyro_cal>
 8004020:	e002      	b.n	8004028 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 8004022:	2000      	movs	r0, #0
 8004024:	f000 f8c2 	bl	80041ac <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01d      	beq.n	800406e <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 800403c:	23b2      	movs	r3, #178	@ 0xb2
 800403e:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 8004040:	238b      	movs	r3, #139	@ 0x8b
 8004042:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8004044:	23b6      	movs	r3, #182	@ 0xb6
 8004046:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8004048:	239b      	movs	r3, #155	@ 0x9b
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e007      	b.n	800405e <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 800404e:	23b0      	movs	r3, #176	@ 0xb0
 8004050:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 8004052:	2380      	movs	r3, #128	@ 0x80
 8004054:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 8004056:	23b4      	movs	r3, #180	@ 0xb4
 8004058:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 800405a:	2390      	movs	r3, #144	@ 0x90
 800405c:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800405e:	f107 030c 	add.w	r3, r7, #12
 8004062:	461a      	mov	r2, r3
 8004064:	2104      	movs	r1, #4
 8004066:	f640 20a2 	movw	r0, #2722	@ 0xaa2
 800406a:	f7ff f821 	bl	80030b0 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d025      	beq.n	80040c4 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 8004078:	23f8      	movs	r3, #248	@ 0xf8
 800407a:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800407c:	f107 030c 	add.w	r3, r7, #12
 8004080:	461a      	mov	r2, r3
 8004082:	2101      	movs	r1, #1
 8004084:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 8004088:	f7ff f812 	bl	80030b0 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800408c:	21fa      	movs	r1, #250	@ 0xfa
 800408e:	2007      	movs	r0, #7
 8004090:	f7ff fd22 	bl	8003ad8 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8004094:	2007      	movs	r0, #7
 8004096:	f7ff fe55 	bl	8003d44 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800409a:	2001      	movs	r0, #1
 800409c:	f7ff fe84 	bl	8003da8 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 80040a0:	2064      	movs	r0, #100	@ 0x64
 80040a2:	f7ff fea3 	bl	8003dec <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 80040a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80040aa:	f7ff fec1 	bl	8003e30 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 80040ae:	21c8      	movs	r1, #200	@ 0xc8
 80040b0:	483c      	ldr	r0, [pc, #240]	@ (80041a4 <dmp_enable_feature+0x248>)
 80040b2:	f7ff fedf 	bl	8003e74 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 80040b6:	2028      	movs	r0, #40	@ 0x28
 80040b8:	f7ff ff0c 	bl	8003ed4 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 80040bc:	200a      	movs	r0, #10
 80040be:	f7ff ff2b 	bl	8003f18 <dmp_set_shake_reject_timeout>
 80040c2:	e009      	b.n	80040d8 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 80040c4:	23d8      	movs	r3, #216	@ 0xd8
 80040c6:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80040c8:	f107 030c 	add.w	r3, r7, #12
 80040cc:	461a      	mov	r2, r3
 80040ce:	2101      	movs	r1, #1
 80040d0:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 80040d4:	f7fe ffec 	bl	80030b0 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 80040d8:	88fb      	ldrh	r3, [r7, #6]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 80040e2:	23d9      	movs	r3, #217	@ 0xd9
 80040e4:	733b      	strb	r3, [r7, #12]
 80040e6:	e001      	b.n	80040ec <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 80040e8:	23d8      	movs	r3, #216	@ 0xd8
 80040ea:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 80040ec:	f107 030c 	add.w	r3, r7, #12
 80040f0:	461a      	mov	r2, r3
 80040f2:	2101      	movs	r1, #1
 80040f4:	f240 703d 	movw	r0, #1853	@ 0x73d
 80040f8:	f7fe ffda 	bl	80030b0 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 8004106:	2001      	movs	r0, #1
 8004108:	f000 f880 	bl	800420c <dmp_enable_lp_quat>
 800410c:	e002      	b.n	8004114 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 800410e:	2000      	movs	r0, #0
 8004110:	f000 f87c 	bl	800420c <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 800411e:	2001      	movs	r0, #1
 8004120:	f000 f89b 	bl	800425a <dmp_enable_6x_lp_quat>
 8004124:	e002      	b.n	800412c <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 8004126:	2000      	movs	r0, #0
 8004128:	f000 f897 	bl	800425a <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	f043 0308 	orr.w	r3, r3, #8
 8004132:	b29a      	uxth	r2, r3
 8004134:	4b1c      	ldr	r3, [pc, #112]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004136:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8004138:	f7fd f9c8 	bl	80014cc <mpu_reset_fifo>

    dmp.packet_length = 0;
 800413c:	4b1a      	ldr	r3, [pc, #104]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800413e:	2200      	movs	r2, #0
 8004140:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8004142:	88fb      	ldrh	r3, [r7, #6]
 8004144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 800414c:	4b16      	ldr	r3, [pc, #88]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800414e:	7b9b      	ldrb	r3, [r3, #14]
 8004150:	3306      	adds	r3, #6
 8004152:	b2da      	uxtb	r2, r3
 8004154:	4b14      	ldr	r3, [pc, #80]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004156:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8004162:	4b11      	ldr	r3, [pc, #68]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004164:	7b9b      	ldrb	r3, [r3, #14]
 8004166:	3306      	adds	r3, #6
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4b0f      	ldr	r3, [pc, #60]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800416c:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	f003 0314 	and.w	r3, r3, #20
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8004178:	4b0b      	ldr	r3, [pc, #44]	@ (80041a8 <dmp_enable_feature+0x24c>)
 800417a:	7b9b      	ldrb	r3, [r3, #14]
 800417c:	3310      	adds	r3, #16
 800417e:	b2da      	uxtb	r2, r3
 8004180:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004182:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 800418e:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004190:	7b9b      	ldrb	r3, [r3, #14]
 8004192:	3304      	adds	r3, #4
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4b04      	ldr	r3, [pc, #16]	@ (80041a8 <dmp_enable_feature+0x24c>)
 8004198:	739a      	strb	r2, [r3, #14]

    return 0;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	02cae309 	.word	0x02cae309
 80041a8:	200002c4 	.word	0x200002c4

080041ac <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00f      	beq.n	80041dc <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 80041bc:	4a11      	ldr	r2, [pc, #68]	@ (8004204 <dmp_enable_gyro_cal+0x58>)
 80041be:	f107 0314 	add.w	r3, r7, #20
 80041c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80041c4:	c303      	stmia	r3!, {r0, r1}
 80041c6:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80041c8:	f107 0314 	add.w	r3, r7, #20
 80041cc:	461a      	mov	r2, r3
 80041ce:	2109      	movs	r1, #9
 80041d0:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 80041d4:	f7fe ff6c 	bl	80030b0 <mpu_write_mem>
 80041d8:	4603      	mov	r3, r0
 80041da:	e00e      	b.n	80041fa <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80041dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004208 <dmp_enable_gyro_cal+0x5c>)
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80041e4:	c303      	stmia	r3!, {r0, r1}
 80041e6:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80041e8:	f107 0308 	add.w	r3, r7, #8
 80041ec:	461a      	mov	r2, r3
 80041ee:	2109      	movs	r1, #9
 80041f0:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 80041f4:	f7fe ff5c 	bl	80030b0 <mpu_write_mem>
 80041f8:	4603      	mov	r3, r0
    }
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	0801262c 	.word	0x0801262c
 8004208:	08012638 	.word	0x08012638

0800420c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 800421c:	23c0      	movs	r3, #192	@ 0xc0
 800421e:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8004220:	23c2      	movs	r3, #194	@ 0xc2
 8004222:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8004224:	23c4      	movs	r3, #196	@ 0xc4
 8004226:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8004228:	23c6      	movs	r3, #198	@ 0xc6
 800422a:	73fb      	strb	r3, [r7, #15]
 800422c:	e006      	b.n	800423c <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 800422e:	f107 030c 	add.w	r3, r7, #12
 8004232:	2204      	movs	r2, #4
 8004234:	218b      	movs	r1, #139	@ 0x8b
 8004236:	4618      	mov	r0, r3
 8004238:	f00b fcac 	bl	800fb94 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	461a      	mov	r2, r3
 8004242:	2104      	movs	r1, #4
 8004244:	f640 2098 	movw	r0, #2712	@ 0xa98
 8004248:	f7fe ff32 	bl	80030b0 <mpu_write_mem>

    return mpu_reset_fifo();
 800424c:	f7fd f93e 	bl	80014cc <mpu_reset_fifo>
 8004250:	4603      	mov	r3, r0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	4603      	mov	r3, r0
 8004262:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 800426a:	2320      	movs	r3, #32
 800426c:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 800426e:	2328      	movs	r3, #40	@ 0x28
 8004270:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8004272:	2330      	movs	r3, #48	@ 0x30
 8004274:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 8004276:	2338      	movs	r3, #56	@ 0x38
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	e006      	b.n	800428a <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 800427c:	f107 030c 	add.w	r3, r7, #12
 8004280:	2204      	movs	r2, #4
 8004282:	21a3      	movs	r1, #163	@ 0xa3
 8004284:	4618      	mov	r0, r3
 8004286:	f00b fc85 	bl	800fb94 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 800428a:	f107 030c 	add.w	r3, r7, #12
 800428e:	461a      	mov	r2, r3
 8004290:	2104      	movs	r1, #4
 8004292:	f640 209e 	movw	r0, #2718	@ 0xa9e
 8004296:	f7fe ff0b 	bl	80030b0 <mpu_write_mem>

    return mpu_reset_fifo();
 800429a:	f7fd f917 	bl	80014cc <mpu_reset_fifo>
 800429e:	4603      	mov	r3, r0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3303      	adds	r3, #3
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042ba:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3303      	adds	r3, #3
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042c6:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3301      	adds	r3, #1
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d012      	beq.n	80042fc <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 80042d6:	7bbb      	ldrb	r3, [r7, #14]
 80042d8:	08db      	lsrs	r3, r3, #3
 80042da:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 80042dc:	7bbb      	ldrb	r3, [r7, #14]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	3301      	adds	r3, #1
 80042e6:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 80042e8:	4b10      	ldr	r3, [pc, #64]	@ (800432c <decode_gesture+0x84>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 80042f0:	4b0e      	ldr	r3, [pc, #56]	@ (800432c <decode_gesture+0x84>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	7b39      	ldrb	r1, [r7, #12]
 80042f6:	7b7a      	ldrb	r2, [r7, #13]
 80042f8:	4610      	mov	r0, r2
 80042fa:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3301      	adds	r3, #1
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 800430a:	4b08      	ldr	r3, [pc, #32]	@ (800432c <decode_gesture+0x84>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d006      	beq.n	8004320 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8004312:	4b06      	ldr	r3, [pc, #24]	@ (800432c <decode_gesture+0x84>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	7bfa      	ldrb	r2, [r7, #15]
 8004318:	0992      	lsrs	r2, r2, #6
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	4610      	mov	r0, r2
 800431e:	4798      	blx	r3
    }

    return 0;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	200002c4 	.word	0x200002c4

08004330 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b092      	sub	sp, #72	@ 0x48
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    sensors[0] = 0;
 8004344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004346:	2200      	movs	r2, #0
 8004348:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800434a:	4bb1      	ldr	r3, [pc, #708]	@ (8004610 <dmp_read_fifo+0x2e0>)
 800434c:	7b9b      	ldrb	r3, [r3, #14]
 800434e:	4618      	mov	r0, r3
 8004350:	f107 0320 	add.w	r3, r7, #32
 8004354:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004356:	4619      	mov	r1, r3
 8004358:	f7fd fdf8 	bl	8001f4c <mpu_read_fifo_stream>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <dmp_read_fifo+0x38>
        return -1;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
 8004366:	e14e      	b.n	8004606 <dmp_read_fifo+0x2d6>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8004368:	4ba9      	ldr	r3, [pc, #676]	@ (8004610 <dmp_read_fifo+0x2e0>)
 800436a:	895b      	ldrh	r3, [r3, #10]
 800436c:	f003 0314 	and.w	r3, r3, #20
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 808a 	beq.w	800448a <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004376:	f897 3020 	ldrb.w	r3, [r7, #32]
 800437a:	061a      	lsls	r2, r3, #24
 800437c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004380:	041b      	lsls	r3, r3, #16
 8004382:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8004384:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004388:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800438a:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800438c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004390:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8004396:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800439a:	061a      	lsls	r2, r3, #24
 800439c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80043a0:	041b      	lsls	r3, r3, #16
 80043a2:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80043a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80043a8:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80043aa:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80043ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043b0:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80043b6:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80043b8:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80043be:	061a      	lsls	r2, r3, #24
 80043c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80043c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80043cc:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043ce:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80043d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80043d4:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80043da:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80043dc:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80043de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80043e2:	061a      	lsls	r2, r3, #24
 80043e4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80043e8:	041b      	lsls	r3, r3, #16
 80043ea:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80043ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80043f0:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80043f2:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80043f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80043f8:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80043fe:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8004400:	601a      	str	r2, [r3, #0]
        ii += 16;
 8004402:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004406:	3310      	adds	r3, #16
 8004408:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	141b      	asrs	r3, r3, #16
 8004412:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3304      	adds	r3, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	141b      	asrs	r3, r3, #16
 800441c:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3308      	adds	r3, #8
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	141b      	asrs	r3, r3, #16
 8004426:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	330c      	adds	r3, #12
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	141b      	asrs	r3, r3, #16
 8004430:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	fb03 f202 	mul.w	r2, r3, r2
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	6979      	ldr	r1, [r7, #20]
 800443e:	fb01 f303 	mul.w	r3, r1, r3
 8004442:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	69b9      	ldr	r1, [r7, #24]
 8004448:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800444c:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	69f9      	ldr	r1, [r7, #28]
 8004452:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004456:	4413      	add	r3, r2
 8004458:	643b      	str	r3, [r7, #64]	@ 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 800445a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800445c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004460:	db03      	blt.n	800446a <dmp_read_fifo+0x13a>
 8004462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004464:	f1b3 5f88 	cmp.w	r3, #285212672	@ 0x11000000
 8004468:	dd07      	ble.n	800447a <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 800446a:	f7fd f82f 	bl	80014cc <mpu_reset_fifo>
            sensors[0] = 0;
 800446e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004470:	2200      	movs	r2, #0
 8004472:	801a      	strh	r2, [r3, #0]
            return -1;
 8004474:	f04f 33ff 	mov.w	r3, #4294967295
 8004478:	e0c5      	b.n	8004606 <dmp_read_fifo+0x2d6>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 800447a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800447c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004484:	b21a      	sxth	r2, r3
 8004486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004488:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800448a:	4b61      	ldr	r3, [pc, #388]	@ (8004610 <dmp_read_fifo+0x2e0>)
 800448c:	895b      	ldrh	r3, [r3, #10]
 800448e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d04f      	beq.n	8004536 <dmp_read_fifo+0x206>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004496:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800449a:	3348      	adds	r3, #72	@ 0x48
 800449c:	443b      	add	r3, r7
 800449e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044a2:	b21b      	sxth	r3, r3
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	b21a      	sxth	r2, r3
 80044a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044ac:	3301      	adds	r3, #1
 80044ae:	3348      	adds	r3, #72	@ 0x48
 80044b0:	443b      	add	r3, r7
 80044b2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044b6:	b21b      	sxth	r3, r3
 80044b8:	4313      	orrs	r3, r2
 80044ba:	b21a      	sxth	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80044c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044c4:	3302      	adds	r3, #2
 80044c6:	3348      	adds	r3, #72	@ 0x48
 80044c8:	443b      	add	r3, r7
 80044ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044ce:	b21b      	sxth	r3, r3
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	b219      	sxth	r1, r3
 80044d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044d8:	3303      	adds	r3, #3
 80044da:	3348      	adds	r3, #72	@ 0x48
 80044dc:	443b      	add	r3, r7
 80044de:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044e2:	b21a      	sxth	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	3302      	adds	r3, #2
 80044e8:	430a      	orrs	r2, r1
 80044ea:	b212      	sxth	r2, r2
 80044ec:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80044ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80044f2:	3304      	adds	r3, #4
 80044f4:	3348      	adds	r3, #72	@ 0x48
 80044f6:	443b      	add	r3, r7
 80044f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044fc:	b21b      	sxth	r3, r3
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	b219      	sxth	r1, r3
 8004502:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004506:	3305      	adds	r3, #5
 8004508:	3348      	adds	r3, #72	@ 0x48
 800450a:	443b      	add	r3, r7
 800450c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004510:	b21a      	sxth	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3304      	adds	r3, #4
 8004516:	430a      	orrs	r2, r1
 8004518:	b212      	sxth	r2, r2
 800451a:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800451c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004520:	3306      	adds	r3, #6
 8004522:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8004526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800452c:	f043 0308 	orr.w	r3, r3, #8
 8004530:	b21a      	sxth	r2, r3
 8004532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004534:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004536:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <dmp_read_fifo+0x2e0>)
 8004538:	895b      	ldrh	r3, [r3, #10]
 800453a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800453e:	2b00      	cmp	r3, #0
 8004540:	d04f      	beq.n	80045e2 <dmp_read_fifo+0x2b2>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8004542:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004546:	3348      	adds	r3, #72	@ 0x48
 8004548:	443b      	add	r3, r7
 800454a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800454e:	b21b      	sxth	r3, r3
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	b21a      	sxth	r2, r3
 8004554:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004558:	3301      	adds	r3, #1
 800455a:	3348      	adds	r3, #72	@ 0x48
 800455c:	443b      	add	r3, r7
 800455e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004562:	b21b      	sxth	r3, r3
 8004564:	4313      	orrs	r3, r2
 8004566:	b21a      	sxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800456c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004570:	3302      	adds	r3, #2
 8004572:	3348      	adds	r3, #72	@ 0x48
 8004574:	443b      	add	r3, r7
 8004576:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800457a:	b21b      	sxth	r3, r3
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	b219      	sxth	r1, r3
 8004580:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004584:	3303      	adds	r3, #3
 8004586:	3348      	adds	r3, #72	@ 0x48
 8004588:	443b      	add	r3, r7
 800458a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800458e:	b21a      	sxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3302      	adds	r3, #2
 8004594:	430a      	orrs	r2, r1
 8004596:	b212      	sxth	r2, r2
 8004598:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800459a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800459e:	3304      	adds	r3, #4
 80045a0:	3348      	adds	r3, #72	@ 0x48
 80045a2:	443b      	add	r3, r7
 80045a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045a8:	b21b      	sxth	r3, r3
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	b219      	sxth	r1, r3
 80045ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045b2:	3305      	adds	r3, #5
 80045b4:	3348      	adds	r3, #72	@ 0x48
 80045b6:	443b      	add	r3, r7
 80045b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045bc:	b21a      	sxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3304      	adds	r3, #4
 80045c2:	430a      	orrs	r2, r1
 80045c4:	b212      	sxth	r2, r2
 80045c6:	801a      	strh	r2, [r3, #0]
        ii += 6;
 80045c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045cc:	3306      	adds	r3, #6
 80045ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_GYRO;
 80045d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045d8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80045dc:	b21a      	sxth	r2, r3
 80045de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045e0:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80045e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <dmp_read_fifo+0x2e0>)
 80045e4:	895b      	ldrh	r3, [r3, #10]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <dmp_read_fifo+0x2ce>
        decode_gesture(fifo_data + ii);
 80045ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80045f2:	f107 0220 	add.w	r2, r7, #32
 80045f6:	4413      	add	r3, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fe55 	bl	80042a8 <decode_gesture>

    myget_ms(timestamp);
 80045fe:	6838      	ldr	r0, [r7, #0]
 8004600:	f7fe ff10 	bl	8003424 <myget_ms>
    return 0;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3748      	adds	r7, #72	@ 0x48
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	200002c4 	.word	0x200002c4

08004614 <run_self_test>:
#define DEFAULT_MPU_HZ (100)

#define q30 1073741824.0f

static int run_self_test(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	@ 0x28
 8004618:	af00      	add	r7, sp, #0
    int result;
    long gyro[3], accel[3];

    result = mpu_run_self_test(gyro, accel);
 800461a:	f107 020c 	add.w	r2, r7, #12
 800461e:	f107 0318 	add.w	r3, r7, #24
 8004622:	4611      	mov	r1, r2
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe fc6f 	bl	8002f08 <mpu_run_self_test>
 800462a:	6278      	str	r0, [r7, #36]	@ 0x24
    if (result == 0x3) {
 800462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462e:	2b03      	cmp	r3, #3
 8004630:	d150      	bne.n	80046d4 <run_self_test+0xc0>
        /* Test passed. We can trust the gyro data here, so let's push it down
         * to the DMP.
         */
        float sens;
        unsigned short accel_sens;
        mpu_get_gyro_sens(&sens);
 8004632:	f107 0308 	add.w	r3, r7, #8
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fb14 	bl	8001c64 <mpu_get_gyro_sens>
        gyro[0] = (long)(gyro[0] * sens);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004646:	edd7 7a02 	vldr	s15, [r7, #8]
 800464a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004652:	ee17 3a90 	vmov	r3, s15
 8004656:	61bb      	str	r3, [r7, #24]
        gyro[1] = (long)(gyro[1] * sens);
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004662:	edd7 7a02 	vldr	s15, [r7, #8]
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800466e:	ee17 3a90 	vmov	r3, s15
 8004672:	61fb      	str	r3, [r7, #28]
        gyro[2] = (long)(gyro[2] * sens);
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800467e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800468a:	ee17 3a90 	vmov	r3, s15
 800468e:	623b      	str	r3, [r7, #32]
        dmp_set_gyro_bias(gyro);
 8004690:	f107 0318 	add.w	r3, r7, #24
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe ffcb 	bl	8003630 <dmp_set_gyro_bias>
        mpu_get_accel_sens(&accel_sens);
 800469a:	1dbb      	adds	r3, r7, #6
 800469c:	4618      	mov	r0, r3
 800469e:	f7fd fb19 	bl	8001cd4 <mpu_get_accel_sens>
        accel[0] *= accel_sens;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	88fa      	ldrh	r2, [r7, #6]
 80046a6:	fb02 f303 	mul.w	r3, r2, r3
 80046aa:	60fb      	str	r3, [r7, #12]
        accel[1] *= accel_sens;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	88fa      	ldrh	r2, [r7, #6]
 80046b0:	fb02 f303 	mul.w	r3, r2, r3
 80046b4:	613b      	str	r3, [r7, #16]
        accel[2] *= accel_sens;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	88fa      	ldrh	r2, [r7, #6]
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	617b      	str	r3, [r7, #20]
        dmp_set_accel_bias(accel);
 80046c0:	f107 030c 	add.w	r3, r7, #12
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff f8bd 	bl	8003844 <dmp_set_accel_bias>
		printf("setting bias succesfully ......\r\n");
 80046ca:	4805      	ldr	r0, [pc, #20]	@ (80046e0 <run_self_test+0xcc>)
 80046cc:	f00b f972 	bl	800f9b4 <puts>
    }else
		{
			return -1;
		}
		return 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e001      	b.n	80046d8 <run_self_test+0xc4>
			return -1;
 80046d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3728      	adds	r7, #40	@ 0x28
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	0801265c 	.word	0x0801265c

080046e4 <inv_row_2_scale>:

static signed char gyro_orientation[9] = {-1, 0, 0,
                                           0,-1, 0,
                                           0, 0, 1};
static  unsigned short inv_row_2_scale(const signed char *row)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f993 3000 	ldrsb.w	r3, [r3]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	dd02      	ble.n	80046fc <inv_row_2_scale+0x18>
        b = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	81fb      	strh	r3, [r7, #14]
 80046fa:	e02d      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f993 3000 	ldrsb.w	r3, [r3]
 8004702:	2b00      	cmp	r3, #0
 8004704:	da02      	bge.n	800470c <inv_row_2_scale+0x28>
        b = 4;
 8004706:	2304      	movs	r3, #4
 8004708:	81fb      	strh	r3, [r7, #14]
 800470a:	e025      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3301      	adds	r3, #1
 8004710:	f993 3000 	ldrsb.w	r3, [r3]
 8004714:	2b00      	cmp	r3, #0
 8004716:	dd02      	ble.n	800471e <inv_row_2_scale+0x3a>
        b = 1;
 8004718:	2301      	movs	r3, #1
 800471a:	81fb      	strh	r3, [r7, #14]
 800471c:	e01c      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3301      	adds	r3, #1
 8004722:	f993 3000 	ldrsb.w	r3, [r3]
 8004726:	2b00      	cmp	r3, #0
 8004728:	da02      	bge.n	8004730 <inv_row_2_scale+0x4c>
        b = 5;
 800472a:	2305      	movs	r3, #5
 800472c:	81fb      	strh	r3, [r7, #14]
 800472e:	e013      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3302      	adds	r3, #2
 8004734:	f993 3000 	ldrsb.w	r3, [r3]
 8004738:	2b00      	cmp	r3, #0
 800473a:	dd02      	ble.n	8004742 <inv_row_2_scale+0x5e>
        b = 2;
 800473c:	2302      	movs	r3, #2
 800473e:	81fb      	strh	r3, [r7, #14]
 8004740:	e00a      	b.n	8004758 <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3302      	adds	r3, #2
 8004746:	f993 3000 	ldrsb.w	r3, [r3]
 800474a:	2b00      	cmp	r3, #0
 800474c:	da02      	bge.n	8004754 <inv_row_2_scale+0x70>
        b = 6;
 800474e:	2306      	movs	r3, #6
 8004750:	81fb      	strh	r3, [r7, #14]
 8004752:	e001      	b.n	8004758 <inv_row_2_scale+0x74>
    else
        b = 7;      // error
 8004754:	2307      	movs	r3, #7
 8004756:	81fb      	strh	r3, [r7, #14]
    return b;
 8004758:	89fb      	ldrh	r3, [r7, #14]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <inv_orientation_matrix_to_scalar>:


static  unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b084      	sub	sp, #16
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
    unsigned short scalar;
    scalar = inv_row_2_scale(mtx);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ffb8 	bl	80046e4 <inv_row_2_scale>
 8004774:	4603      	mov	r3, r0
 8004776:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3303      	adds	r3, #3
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff ffb1 	bl	80046e4 <inv_row_2_scale>
 8004782:	4603      	mov	r3, r0
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	b21a      	sxth	r2, r3
 8004788:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800478c:	4313      	orrs	r3, r2
 800478e:	b21b      	sxth	r3, r3
 8004790:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3306      	adds	r3, #6
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff ffa4 	bl	80046e4 <inv_row_2_scale>
 800479c:	4603      	mov	r3, r0
 800479e:	019b      	lsls	r3, r3, #6
 80047a0:	b21a      	sxth	r2, r3
 80047a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	b21b      	sxth	r3, r3
 80047aa:	81fb      	strh	r3, [r7, #14]


    return scalar;
 80047ac:	89fb      	ldrh	r3, [r7, #14]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <MPU6050_DMP_Init>:

int MPU6050_DMP_Init(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
	int result;
	//struct int_param_s int_param;
	result = mpu_init();
 80047be:	f7fc fcb7 	bl	8001130 <mpu_init>
 80047c2:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <MPU6050_DMP_Init+0x18>
	{
		 return -1;
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
 80047ce:	e05d      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 80047d0:	2078      	movs	r0, #120	@ 0x78
 80047d2:	f7fd fb21 	bl	8001e18 <mpu_set_sensors>
 80047d6:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <MPU6050_DMP_Init+0x2c>
	{
		 return -2;
 80047de:	f06f 0301 	mvn.w	r3, #1
 80047e2:	e053      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 80047e4:	2078      	movs	r0, #120	@ 0x78
 80047e6:	f7fd fac5 	bl	8001d74 <mpu_configure_fifo>
 80047ea:	6078      	str	r0, [r7, #4]
	if(result != 0)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <MPU6050_DMP_Init+0x40>
	{
		 return -3;
 80047f2:	f06f 0302 	mvn.w	r3, #2
 80047f6:	e049      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_set_sample_rate(DEFAULT_MPU_HZ);
 80047f8:	2064      	movs	r0, #100	@ 0x64
 80047fa:	f7fd f9c1 	bl	8001b80 <mpu_set_sample_rate>
 80047fe:	6078      	str	r0, [r7, #4]
	if(result != 0)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <MPU6050_DMP_Init+0x54>
	{
		 return -4;
 8004806:	f06f 0303 	mvn.w	r3, #3
 800480a:	e03f      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	
	result = dmp_load_motion_driver_firmware();
 800480c:	f7fe fe14 	bl	8003438 <dmp_load_motion_driver_firmware>
 8004810:	6078      	str	r0, [r7, #4]
	if(result != 0)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <MPU6050_DMP_Init+0x66>
	{
		 return -5;
 8004818:	f06f 0304 	mvn.w	r3, #4
 800481c:	e036      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation));
 800481e:	481d      	ldr	r0, [pc, #116]	@ (8004894 <MPU6050_DMP_Init+0xdc>)
 8004820:	f7ff ffa1 	bl	8004766 <inv_orientation_matrix_to_scalar>
 8004824:	4603      	mov	r3, r0
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fe16 	bl	8003458 <dmp_set_orientation>
 800482c:	6078      	str	r0, [r7, #4]
	if(result != 0)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <MPU6050_DMP_Init+0x82>
	{
		 return -6;
 8004834:	f06f 0305 	mvn.w	r3, #5
 8004838:	e028      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
 800483a:	f240 1073 	movw	r0, #371	@ 0x173
 800483e:	f7ff fb8d 	bl	8003f5c <dmp_enable_feature>
 8004842:	6078      	str	r0, [r7, #4]
	        DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO |
	        DMP_FEATURE_GYRO_CAL);
	if(result != 0)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <MPU6050_DMP_Init+0x98>
	{
		 return -7;
 800484a:	f06f 0306 	mvn.w	r3, #6
 800484e:	e01d      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = dmp_set_fifo_rate(DEFAULT_MPU_HZ);
 8004850:	2064      	movs	r0, #100	@ 0x64
 8004852:	f7ff f8f9 	bl	8003a48 <dmp_set_fifo_rate>
 8004856:	6078      	str	r0, [r7, #4]
	if(result != 0)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <MPU6050_DMP_Init+0xac>
	{
		 return -8;
 800485e:	f06f 0307 	mvn.w	r3, #7
 8004862:	e013      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = run_self_test();
 8004864:	f7ff fed6 	bl	8004614 <run_self_test>
 8004868:	6078      	str	r0, [r7, #4]
	if(result != 0)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <MPU6050_DMP_Init+0xbe>
	{
		 return -9;
 8004870:	f06f 0308 	mvn.w	r3, #8
 8004874:	e00a      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	result = mpu_set_dmp_state(1);
 8004876:	2001      	movs	r0, #1
 8004878:	f7fe fd6e 	bl	8003358 <mpu_set_dmp_state>
 800487c:	6078      	str	r0, [r7, #4]
	if(result != 0)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <MPU6050_DMP_Init+0xd2>
	{
		 return -10;
 8004884:	f06f 0309 	mvn.w	r3, #9
 8004888:	e000      	b.n	800488c <MPU6050_DMP_Init+0xd4>
	}
	return 0;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	2000002c 	.word	0x2000002c

08004898 <MPU6050_DMP_Get_Data>:

int MPU6050_DMP_Get_Data(float *Pitch,float *Roll,float *Yaw)
{
 8004898:	b5b0      	push	{r4, r5, r7, lr}
 800489a:	b094      	sub	sp, #80	@ 0x50
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
	float q0 = 0.0f;
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	647b      	str	r3, [r7, #68]	@ 0x44
	float q1 = 0.0f;
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	643b      	str	r3, [r7, #64]	@ 0x40
	float q2 = 0.0f;
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float q3 = 0.0f;
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	short accel[3]; 
	long quat[4];
  unsigned long timestamp;
	short sensors;
	unsigned char more;
	if(dmp_read_fifo(gyro,accel,quat,&timestamp,&sensors,&more))
 80048bc:	f107 0414 	add.w	r4, r7, #20
 80048c0:	f107 0218 	add.w	r2, r7, #24
 80048c4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80048c8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80048cc:	f107 0311 	add.w	r3, r7, #17
 80048d0:	9301      	str	r3, [sp, #4]
 80048d2:	f107 0312 	add.w	r3, r7, #18
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	4623      	mov	r3, r4
 80048da:	f7ff fd29 	bl	8004330 <dmp_read_fifo>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <MPU6050_DMP_Get_Data+0x52>
	{
		return -1;
 80048e4:	f04f 33ff 	mov.w	r3, #4294967295
 80048e8:	e0f6      	b.n	8004ad8 <MPU6050_DMP_Get_Data+0x240>
	}
	if(sensors & INV_WXYZ_QUAT)
 80048ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80ee 	beq.w	8004ad6 <MPU6050_DMP_Get_Data+0x23e>
	{
		q0=quat[0] / q30;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	ee07 3a90 	vmov	s15, r3
 8004900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004904:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8004ae8 <MPU6050_DMP_Get_Data+0x250>
 8004908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800490c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		q1=quat[1] / q30;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800491a:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8004ae8 <MPU6050_DMP_Get_Data+0x250>
 800491e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004922:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q2=quat[2] / q30;
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	ee07 3a90 	vmov	s15, r3
 800492c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004930:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8004ae8 <MPU6050_DMP_Get_Data+0x250>
 8004934:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004938:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q3=quat[3] / q30;
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004946:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8004ae8 <MPU6050_DMP_Get_Data+0x250>
 800494a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800494e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		
		*Pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3; 	
 8004952:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004956:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800495a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800495e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004962:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004966:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800496a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800496e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004972:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800497a:	ee17 0a90 	vmov	r0, s15
 800497e:	f7fb fde3 	bl	8000548 <__aeabi_f2d>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	ec43 2b10 	vmov	d0, r2, r3
 800498a:	f00c ff97 	bl	80118bc <asin>
 800498e:	ec51 0b10 	vmov	r0, r1, d0
 8004992:	a353      	add	r3, pc, #332	@ (adr r3, 8004ae0 <MPU6050_DMP_Get_Data+0x248>)
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f7fb fe2e 	bl	80005f8 <__aeabi_dmul>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	f7fc f920 	bl	8000be8 <__aeabi_d2f>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	601a      	str	r2, [r3, #0]
		*Roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; // roll
 80049ae:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80049b2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80049b6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80049ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049be:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80049c2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80049c6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80049ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d2:	ee17 0a90 	vmov	r0, s15
 80049d6:	f7fb fdb7 	bl	8000548 <__aeabi_f2d>
 80049da:	4604      	mov	r4, r0
 80049dc:	460d      	mov	r5, r1
 80049de:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80049e2:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80049e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049ea:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80049ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049f2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80049f6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80049fa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80049fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a0e:	ee17 0a90 	vmov	r0, s15
 8004a12:	f7fb fd99 	bl	8000548 <__aeabi_f2d>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	ec43 2b11 	vmov	d1, r2, r3
 8004a1e:	ec45 4b10 	vmov	d0, r4, r5
 8004a22:	f00c ff7f 	bl	8011924 <atan2>
 8004a26:	ec51 0b10 	vmov	r0, r1, d0
 8004a2a:	a32d      	add	r3, pc, #180	@ (adr r3, 8004ae0 <MPU6050_DMP_Get_Data+0x248>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f7fb fde2 	bl	80005f8 <__aeabi_dmul>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f7fc f8d4 	bl	8000be8 <__aeabi_d2f>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	601a      	str	r2, [r3, #0]
		*Yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;	//yaw
 8004a46:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004a4a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a52:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8004a56:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004a66:	ee17 0a90 	vmov	r0, s15
 8004a6a:	f7fb fd6d 	bl	8000548 <__aeabi_f2d>
 8004a6e:	4604      	mov	r4, r0
 8004a70:	460d      	mov	r5, r1
 8004a72:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004a76:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004a7a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004a7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a86:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004a8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a92:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004a96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a9e:	ee17 0a90 	vmov	r0, s15
 8004aa2:	f7fb fd51 	bl	8000548 <__aeabi_f2d>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	ec43 2b11 	vmov	d1, r2, r3
 8004aae:	ec45 4b10 	vmov	d0, r4, r5
 8004ab2:	f00c ff37 	bl	8011924 <atan2>
 8004ab6:	ec51 0b10 	vmov	r0, r1, d0
 8004aba:	a309      	add	r3, pc, #36	@ (adr r3, 8004ae0 <MPU6050_DMP_Get_Data+0x248>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f7fb fd9a 	bl	80005f8 <__aeabi_dmul>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4619      	mov	r1, r3
 8004acc:	f7fc f88c 	bl	8000be8 <__aeabi_d2f>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	601a      	str	r2, [r3, #0]
	}
	return 0;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3748      	adds	r7, #72	@ 0x48
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae0:	66666666 	.word	0x66666666
 8004ae4:	404ca666 	.word	0x404ca666
 8004ae8:	4e800000 	.word	0x4e800000

08004aec <OLED_I2C_Init>:
// #define OLED_W_SCL(x) HAL_GPIO_WritePin(GPIOB, SCL_Pin, (GPIO_PinState)(x))
// #define OLED_W_SDA(x) HAL_GPIO_WritePin(GPIOB, SDA_Pin, (GPIO_PinState)(x))

/*引脚初始化*/
void OLED_I2C_Init(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
	// 使用硬件I2C1，不需要手动初始化GPIO
	// 在CubeMX中已经配置好了I2C1
}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <OLED_WriteCommand>:
 * @brief  OLED写命令
 * @param  Command 要写入的命令
 * @retval 无
 */
void OLED_WriteCommand(uint8_t Command)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {0x00, Command}; // 0x00表示写命令
 8004b06:	2300      	movs	r3, #0
 8004b08:	733b      	strb	r3, [r7, #12]
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, buf, 2, 100);
 8004b0e:	f107 020c 	add.w	r2, r7, #12
 8004b12:	2364      	movs	r3, #100	@ 0x64
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	2302      	movs	r3, #2
 8004b18:	2178      	movs	r1, #120	@ 0x78
 8004b1a:	4803      	ldr	r0, [pc, #12]	@ (8004b28 <OLED_WriteCommand+0x2c>)
 8004b1c:	f006 fc1c 	bl	800b358 <HAL_I2C_Master_Transmit>
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	200002d4 	.word	0x200002d4

08004b2c <OLED_WriteData>:
 * @brief  OLED写数据
 * @param  Data 要写入的数据
 * @retval 无
 */
void OLED_WriteData(uint8_t Data)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	4603      	mov	r3, r0
 8004b34:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {0x40, Data}; // 0x40表示写数据
 8004b36:	2340      	movs	r3, #64	@ 0x40
 8004b38:	733b      	strb	r3, [r7, #12]
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, buf, 2, 100);
 8004b3e:	f107 020c 	add.w	r2, r7, #12
 8004b42:	2364      	movs	r3, #100	@ 0x64
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	2302      	movs	r3, #2
 8004b48:	2178      	movs	r1, #120	@ 0x78
 8004b4a:	4803      	ldr	r0, [pc, #12]	@ (8004b58 <OLED_WriteData+0x2c>)
 8004b4c:	f006 fc04 	bl	800b358 <HAL_I2C_Master_Transmit>
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	200002d4 	.word	0x200002d4

08004b5c <OLED_SetCursor>:
 * @param  Y 以左上为原点，向下方向的坐标，范围：0~7
 * @param  X 以左上为原点，向右方向的坐标，范围：0~127
 * @retval 无
 */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	460a      	mov	r2, r1
 8004b66:	71fb      	strb	r3, [r7, #7]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);				 //设置Y位置
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff ffc1 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4)); //设置X位置4位
 8004b7a:	79bb      	ldrb	r3, [r7, #6]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	f043 0310 	orr.w	r3, r3, #16
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff ffb8 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));		 //设置X位置4位
 8004b8c:	79bb      	ldrb	r3, [r7, #6]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff ffb1 	bl	8004afc <OLED_WriteCommand>
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <OLED_Clear>:
 * @brief  OLED清屏
 * @param  无
 * @retval 无
 */
void OLED_Clear(void)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8004ba8:	2300      	movs	r3, #0
 8004baa:	71bb      	strb	r3, [r7, #6]
 8004bac:	e014      	b.n	8004bd8 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 8004bae:	79bb      	ldrb	r3, [r7, #6]
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff ffd2 	bl	8004b5c <OLED_SetCursor>
		for (i = 0; i < 128; i++)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	71fb      	strb	r3, [r7, #7]
 8004bbc:	e005      	b.n	8004bca <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	f7ff ffb4 	bl	8004b2c <OLED_WriteData>
		for (i = 0; i < 128; i++)
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	71fb      	strb	r3, [r7, #7]
 8004bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	daf5      	bge.n	8004bbe <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 8004bd2:	79bb      	ldrb	r3, [r7, #6]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	71bb      	strb	r3, [r7, #6]
 8004bd8:	79bb      	ldrb	r3, [r7, #6]
 8004bda:	2b07      	cmp	r3, #7
 8004bdc:	d9e7      	bls.n	8004bae <OLED_Clear+0xc>
		}
	}
}
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <OLED_Clear_Part>:
 * @param  start 列开始位，范围：1~16
 * @param  end 列开始位，范围：1~16
 * @retval 无
 */
void OLED_Clear_Part(uint8_t Line, uint8_t start, uint8_t end)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	71fb      	strb	r3, [r7, #7]
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	71bb      	strb	r3, [r7, #6]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	717b      	strb	r3, [r7, #5]
	uint8_t i, Column;
	for (Column = start; Column <= end; Column++)
 8004bfa:	79bb      	ldrb	r3, [r7, #6]
 8004bfc:	73bb      	strb	r3, [r7, #14]
 8004bfe:	e036      	b.n	8004c6e <OLED_Clear_Part+0x86>
	{
		OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8); //设置光标位置在上半部
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	7bbb      	ldrb	r3, [r7, #14]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f7ff ffa0 	bl	8004b5c <OLED_SetCursor>
		for (i = 0; i < 8; i++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e005      	b.n	8004c2e <OLED_Clear_Part+0x46>
		{
			OLED_WriteData(0x00); //显示上半部分内
 8004c22:	2000      	movs	r0, #0
 8004c24:	f7ff ff82 	bl	8004b2c <OLED_WriteData>
		for (i = 0; i < 8; i++)
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	2b07      	cmp	r3, #7
 8004c32:	d9f6      	bls.n	8004c22 <OLED_Clear_Part+0x3a>
		}
		OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8); //设置光标位置在下半部
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	7bbb      	ldrb	r3, [r7, #14]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f7ff ff86 	bl	8004b5c <OLED_SetCursor>
		for (i = 0; i < 8; i++)
 8004c50:	2300      	movs	r3, #0
 8004c52:	73fb      	strb	r3, [r7, #15]
 8004c54:	e005      	b.n	8004c62 <OLED_Clear_Part+0x7a>
		{
			OLED_WriteData(0x00); //显示下半部分内
 8004c56:	2000      	movs	r0, #0
 8004c58:	f7ff ff68 	bl	8004b2c <OLED_WriteData>
		for (i = 0; i < 8; i++)
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b07      	cmp	r3, #7
 8004c66:	d9f6      	bls.n	8004c56 <OLED_Clear_Part+0x6e>
	for (Column = start; Column <= end; Column++)
 8004c68:	7bbb      	ldrb	r3, [r7, #14]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	73bb      	strb	r3, [r7, #14]
 8004c6e:	7bba      	ldrb	r2, [r7, #14]
 8004c70:	797b      	ldrb	r3, [r7, #5]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d9c4      	bls.n	8004c00 <OLED_Clear_Part+0x18>
		}
	}
}
 8004c76:	bf00      	nop
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <OLED_ShowChar>:
 * @param  Column 列位，范围：1~16
 * @param  Char 要显示的一个字，范围：ASCII见字符
 * @retval 无
 */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	71fb      	strb	r3, [r7, #7]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	71bb      	strb	r3, [r7, #6]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8); //设置光标位置在上半部
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	79bb      	ldrb	r3, [r7, #6]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f7ff ff57 	bl	8004b5c <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
 8004cb2:	e00e      	b.n	8004cd2 <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]); //显示上半部分内
 8004cb4:	797b      	ldrb	r3, [r7, #5]
 8004cb6:	f1a3 0220 	sub.w	r2, r3, #32
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	491b      	ldr	r1, [pc, #108]	@ (8004d2c <OLED_ShowChar+0xac>)
 8004cbe:	0112      	lsls	r2, r2, #4
 8004cc0:	440a      	add	r2, r1
 8004cc2:	4413      	add	r3, r2
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff ff30 	bl	8004b2c <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b07      	cmp	r3, #7
 8004cd6:	d9ed      	bls.n	8004cb4 <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8); //设置光标位置在下半部
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	79bb      	ldrb	r3, [r7, #6]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	4619      	mov	r1, r3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	f7ff ff34 	bl	8004b5c <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	73fb      	strb	r3, [r7, #15]
 8004cf8:	e00f      	b.n	8004d1a <OLED_ShowChar+0x9a>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]); //显示下半部分内
 8004cfa:	797b      	ldrb	r3, [r7, #5]
 8004cfc:	f1a3 0220 	sub.w	r2, r3, #32
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	3308      	adds	r3, #8
 8004d04:	4909      	ldr	r1, [pc, #36]	@ (8004d2c <OLED_ShowChar+0xac>)
 8004d06:	0112      	lsls	r2, r2, #4
 8004d08:	440a      	add	r2, r1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff ff0c 	bl	8004b2c <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	3301      	adds	r3, #1
 8004d18:	73fb      	strb	r3, [r7, #15]
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	2b07      	cmp	r3, #7
 8004d1e:	d9ec      	bls.n	8004cfa <OLED_ShowChar+0x7a>
	}
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	080132f4 	.word	0x080132f4

08004d30 <OLED_ShowString>:
 * @param  Column 起始列位置，范围：1~16
 * @param  String 要显示的字符串，范围：ASCII见字符
 * @retval 无
 */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4603      	mov	r3, r0
 8004d38:	603a      	str	r2, [r7, #0]
 8004d3a:	71fb      	strb	r3, [r7, #7]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 8004d40:	2300      	movs	r3, #0
 8004d42:	73fb      	strb	r3, [r7, #15]
 8004d44:	e00e      	b.n	8004d64 <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 8004d46:	79ba      	ldrb	r2, [r7, #6]
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	b2d9      	uxtb	r1, r3
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	4413      	add	r3, r2
 8004d54:	781a      	ldrb	r2, [r3, #0]
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff ff91 	bl	8004c80 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
 8004d60:	3301      	adds	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	4413      	add	r3, r2
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ea      	bne.n	8004d46 <OLED_ShowString+0x16>
	}
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <OLED_Pow>:
/**
 * @brief  OLED次方函数
 * @retval 返回值等于X的Y次方
 */
uint32_t OLED_Pow(uint32_t X, uint32_t Y)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
	uint32_t Result = 1;
 8004d84:	2301      	movs	r3, #1
 8004d86:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8004d88:	e004      	b.n	8004d94 <OLED_Pow+0x1a>
	{
		Result *= X;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	1e5a      	subs	r2, r3, #1
 8004d98:	603a      	str	r2, [r7, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f5      	bne.n	8004d8a <OLED_Pow+0x10>
	}
	return Result;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <OLED_ShowNum>:
 * @param  Number 要显示的数字，范围：0~4294967295
 * @param  Length 要显示数字的长度，范围：1~10
 * @retval 无
 */
void OLED_ShowNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 8004dac:	b590      	push	{r4, r7, lr}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	603a      	str	r2, [r7, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	4603      	mov	r3, r0
 8004db8:	71fb      	strb	r3, [r7, #7]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	71bb      	strb	r3, [r7, #6]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < Length; i++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
 8004dc6:	e023      	b.n	8004e10 <OLED_ShowNum+0x64>
	{
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(10, Length - i - 1) % 10 + '0');
 8004dc8:	79ba      	ldrb	r2, [r7, #6]
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	4413      	add	r3, r2
 8004dce:	b2dc      	uxtb	r4, r3
 8004dd0:	797a      	ldrb	r2, [r7, #5]
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	4619      	mov	r1, r3
 8004dda:	200a      	movs	r0, #10
 8004ddc:	f7ff ffcd 	bl	8004d7a <OLED_Pow>
 8004de0:	4602      	mov	r2, r0
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004de8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e24 <OLED_ShowNum+0x78>)
 8004dea:	fba3 2301 	umull	r2, r3, r3, r1
 8004dee:	08da      	lsrs	r2, r3, #3
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	1aca      	subs	r2, r1, r3
 8004dfa:	b2d3      	uxtb	r3, r2
 8004dfc:	3330      	adds	r3, #48	@ 0x30
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	4621      	mov	r1, r4
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ff3b 	bl	8004c80 <OLED_ShowChar>
	for (i = 0; i < Length; i++)
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
 8004e10:	7bfa      	ldrb	r2, [r7, #15]
 8004e12:	797b      	ldrb	r3, [r7, #5]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d3d7      	bcc.n	8004dc8 <OLED_ShowNum+0x1c>
	}
}
 8004e18:	bf00      	nop
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}
 8004e22:	bf00      	nop
 8004e24:	cccccccd 	.word	0xcccccccd

08004e28 <OLED_Init>:
 * @brief  OLED初始化
 * @param  无
 * @retval 无
 */
void OLED_Init(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
	// 增加上电延时
	HAL_Delay(100);  // 使用HAL_Delay替代for循环延时
 8004e2c:	2064      	movs	r0, #100	@ 0x64
 8004e2e:	f005 fda1 	bl	800a974 <HAL_Delay>

	// 初始化I2C
	OLED_I2C_Init();
 8004e32:	f7ff fe5b 	bl	8004aec <OLED_I2C_Init>

	// 等待OLED稳定
	HAL_Delay(100);
 8004e36:	2064      	movs	r0, #100	@ 0x64
 8004e38:	f005 fd9c 	bl	800a974 <HAL_Delay>

	OLED_WriteCommand(0xAE); //关闭显示
 8004e3c:	20ae      	movs	r0, #174	@ 0xae
 8004e3e:	f7ff fe5d 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xD5); //设置显示时钟分比/震荡器频率
 8004e42:	20d5      	movs	r0, #213	@ 0xd5
 8004e44:	f7ff fe5a 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 8004e48:	2080      	movs	r0, #128	@ 0x80
 8004e4a:	f7ff fe57 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xA8); //设置多路复用
 8004e4e:	20a8      	movs	r0, #168	@ 0xa8
 8004e50:	f7ff fe54 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 8004e54:	203f      	movs	r0, #63	@ 0x3f
 8004e56:	f7ff fe51 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xD3); //设置显示偏移
 8004e5a:	20d3      	movs	r0, #211	@ 0xd3
 8004e5c:	f7ff fe4e 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 8004e60:	2000      	movs	r0, #0
 8004e62:	f7ff fe4b 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0x40); //设置显示开始
 8004e66:	2040      	movs	r0, #64	@ 0x40
 8004e68:	f7ff fe48 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xA1); //设置左右方向0xA1正常 0xA0左右反置
 8004e6c:	20a1      	movs	r0, #161	@ 0xa1
 8004e6e:	f7ff fe45 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xC8); //设置上下方向0xC8正常 0xC0上下反置
 8004e72:	20c8      	movs	r0, #200	@ 0xc8
 8004e74:	f7ff fe42 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xDA); //设置COM引脚件配
 8004e78:	20da      	movs	r0, #218	@ 0xda
 8004e7a:	f7ff fe3f 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8004e7e:	2012      	movs	r0, #18
 8004e80:	f7ff fe3c 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0x81); //设置对比度控
 8004e84:	2081      	movs	r0, #129	@ 0x81
 8004e86:	f7ff fe39 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 8004e8a:	20cf      	movs	r0, #207	@ 0xcf
 8004e8c:	f7ff fe36 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xD9); //设置预充电周
 8004e90:	20d9      	movs	r0, #217	@ 0xd9
 8004e92:	f7ff fe33 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8004e96:	20f1      	movs	r0, #241	@ 0xf1
 8004e98:	f7ff fe30 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xDB); //设置VCOMH取消选择级别
 8004e9c:	20db      	movs	r0, #219	@ 0xdb
 8004e9e:	f7ff fe2d 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8004ea2:	2030      	movs	r0, #48	@ 0x30
 8004ea4:	f7ff fe2a 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xA4); //设置整个显示打开/关闭
 8004ea8:	20a4      	movs	r0, #164	@ 0xa4
 8004eaa:	f7ff fe27 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xA6); //设置正常/倒转显示
 8004eae:	20a6      	movs	r0, #166	@ 0xa6
 8004eb0:	f7ff fe24 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0x8D); //设置充电
 8004eb4:	208d      	movs	r0, #141	@ 0x8d
 8004eb6:	f7ff fe21 	bl	8004afc <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8004eba:	2014      	movs	r0, #20
 8004ebc:	f7ff fe1e 	bl	8004afc <OLED_WriteCommand>

	OLED_WriteCommand(0xAF); //开显示
 8004ec0:	20af      	movs	r0, #175	@ 0xaf
 8004ec2:	f7ff fe1b 	bl	8004afc <OLED_WriteCommand>

	OLED_Clear(); // OLED清屏
 8004ec6:	f7ff fe6c 	bl	8004ba2 <OLED_Clear>
	
	// 等待显示稳定
	HAL_Delay(100);
 8004eca:	2064      	movs	r0, #100	@ 0x64
 8004ecc:	f005 fd52 	bl	800a974 <HAL_Delay>
}
 8004ed0:	bf00      	nop
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <Servo_Init>:
// 定时器时钟频率（APB2=84MHz，TIMx使用84MHz）
#define TIMER_CLK_FREQ 168000000  // 单位：Hz

void Servo_Init(Servo* servo, TIM_HandleTypeDef* timer, uint32_t channel,
                GPIO_TypeDef* gpio_port, uint16_t gpio_pin) 
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
    servo->timer = timer;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	601a      	str	r2, [r3, #0]
    servo->channel = channel;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	605a      	str	r2, [r3, #4]
    servo->gpio_port = gpio_port;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	609a      	str	r2, [r3, #8]
    servo->gpio_pin = gpio_pin;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8c3a      	ldrh	r2, [r7, #32]
 8004ef8:	819a      	strh	r2, [r3, #12]
    servo->pulse_width = SERVO_MIN_PULSE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004f00:	611a      	str	r2, [r3, #16]

    // 配置PWM周期
    uint32_t period_cycles = (TIMER_CLK_FREQ / 1000000) * SERVO_PWM_PERIOD / 
                            (timer->Init.Prescaler + 1);
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	3301      	adds	r3, #1
    uint32_t period_cycles = (TIMER_CLK_FREQ / 1000000) * SERVO_PWM_PERIOD / 
 8004f08:	4a0d      	ldr	r2, [pc, #52]	@ (8004f40 <Servo_Init+0x6c>)
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_AUTORELOAD(timer, period_cycles - 1);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	3a01      	subs	r2, #1
 8004f18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	1e5a      	subs	r2, r3, #1
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	60da      	str	r2, [r3, #12]

    // 启动PWM
    HAL_TIM_PWM_Start(timer, channel);
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	68b8      	ldr	r0, [r7, #8]
 8004f26:	f007 ffe1 	bl	800ceec <HAL_TIM_PWM_Start>
    Servo_SetPulse(servo, servo->pulse_width);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f807 	bl	8004f44 <Servo_SetPulse>
}
 8004f36:	bf00      	nop
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	00334500 	.word	0x00334500

08004f44 <Servo_SetPulse>:
                    (uint32_t)((SERVO_MAX_PULSE - SERVO_MIN_PULSE) * angle / 180.0f);
    
    Servo_SetPulse(servo, pulse);
}

void Servo_SetPulse(Servo* servo, uint32_t pulse_us) {
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
    // 计算比较寄存器值
    uint32_t pulse_cycles = (TIMER_CLK_FREQ / 1000000) * pulse_us / 
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	22a8      	movs	r2, #168	@ 0xa8
 8004f52:	fb03 f202 	mul.w	r2, r3, r2
                           (servo->timer->Init.Prescaler + 1);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	3301      	adds	r3, #1
    uint32_t pulse_cycles = (TIMER_CLK_FREQ / 1000000) * pulse_us / 
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	60fb      	str	r3, [r7, #12]
    
    // 设置比较值
    switch(servo->channel) {
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <Servo_SetPulse+0x2e>
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d006      	beq.n	8004f7e <Servo_SetPulse+0x3a>
 8004f70:	e00b      	b.n	8004f8a <Servo_SetPulse+0x46>
        case TIM_CHANNEL_1:
            __HAL_TIM_SET_COMPARE(servo->timer, TIM_CHANNEL_1, pulse_cycles);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8004f7c:	e005      	b.n	8004f8a <Servo_SetPulse+0x46>
        case TIM_CHANNEL_2:
            __HAL_TIM_SET_COMPARE(servo->timer, TIM_CHANNEL_2, pulse_cycles);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8004f88:	bf00      	nop
        // 添加其他通道...
    }
    servo->pulse_width = pulse_us;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	611a      	str	r2, [r3, #16]
}
 8004f90:	bf00      	nop
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08e      	sub	sp, #56	@ 0x38
 8004fa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	605a      	str	r2, [r3, #4]
 8004fac:	609a      	str	r2, [r3, #8]
 8004fae:	60da      	str	r2, [r3, #12]
 8004fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	4bac      	ldr	r3, [pc, #688]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fba:	4aab      	ldr	r2, [pc, #684]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fbc:	f043 0310 	orr.w	r3, r3, #16
 8004fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fc2:	4ba9      	ldr	r3, [pc, #676]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc6:	f003 0310 	and.w	r3, r3, #16
 8004fca:	623b      	str	r3, [r7, #32]
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	4ba5      	ldr	r3, [pc, #660]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd6:	4aa4      	ldr	r2, [pc, #656]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fd8:	f043 0304 	orr.w	r3, r3, #4
 8004fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fde:	4ba2      	ldr	r3, [pc, #648]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	4b9e      	ldr	r3, [pc, #632]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff2:	4a9d      	ldr	r2, [pc, #628]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004ff4:	f043 0320 	orr.w	r3, r3, #32
 8004ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ffa:	4b9b      	ldr	r3, [pc, #620]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005006:	2300      	movs	r3, #0
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	4b97      	ldr	r3, [pc, #604]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500e:	4a96      	ldr	r2, [pc, #600]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005014:	6313      	str	r3, [r2, #48]	@ 0x30
 8005016:	4b94      	ldr	r3, [pc, #592]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	4b90      	ldr	r3, [pc, #576]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502a:	4a8f      	ldr	r2, [pc, #572]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	6313      	str	r3, [r2, #48]	@ 0x30
 8005032:	4b8d      	ldr	r3, [pc, #564]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	4b89      	ldr	r3, [pc, #548]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005046:	4a88      	ldr	r2, [pc, #544]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005048:	f043 0302 	orr.w	r3, r3, #2
 800504c:	6313      	str	r3, [r2, #48]	@ 0x30
 800504e:	4b86      	ldr	r3, [pc, #536]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	4b82      	ldr	r3, [pc, #520]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005062:	4a81      	ldr	r2, [pc, #516]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005064:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005068:	6313      	str	r3, [r2, #48]	@ 0x30
 800506a:	4b7f      	ldr	r3, [pc, #508]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005076:	2300      	movs	r3, #0
 8005078:	607b      	str	r3, [r7, #4]
 800507a:	4b7b      	ldr	r3, [pc, #492]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507e:	4a7a      	ldr	r2, [pc, #488]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005080:	f043 0308 	orr.w	r3, r3, #8
 8005084:	6313      	str	r3, [r2, #48]	@ 0x30
 8005086:	4b78      	ldr	r3, [pc, #480]	@ (8005268 <MX_GPIO_Init+0x2cc>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M4_IN1_Pin|M4_IN2_Pin|M3_IN1_Pin, GPIO_PIN_RESET);
 8005092:	2200      	movs	r2, #0
 8005094:	212a      	movs	r1, #42	@ 0x2a
 8005096:	4875      	ldr	r0, [pc, #468]	@ (800526c <MX_GPIO_Init+0x2d0>)
 8005098:	f005 ffe8 	bl	800b06c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_IN2_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800509c:	2200      	movs	r2, #0
 800509e:	f24f 0102 	movw	r1, #61442	@ 0xf002
 80050a2:	4873      	ldr	r0, [pc, #460]	@ (8005270 <MX_GPIO_Init+0x2d4>)
 80050a4:	f005 ffe2 	bl	800b06c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, M1_IN1_Pin|GPIO_PIN_1|M2_IN1_Pin|Trig_2_Pin, GPIO_PIN_RESET);
 80050a8:	2200      	movs	r2, #0
 80050aa:	f248 010b 	movw	r1, #32779	@ 0x800b
 80050ae:	4871      	ldr	r0, [pc, #452]	@ (8005274 <MX_GPIO_Init+0x2d8>)
 80050b0:	f005 ffdc 	bl	800b06c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M1_IN2_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12
 80050b4:	2200      	movs	r2, #0
 80050b6:	f24d 5180 	movw	r1, #54656	@ 0xd580
 80050ba:	486f      	ldr	r0, [pc, #444]	@ (8005278 <MX_GPIO_Init+0x2dc>)
 80050bc:	f005 ffd6 	bl	800b06c <HAL_GPIO_WritePin>
                          |Trig_4_Pin|Trig_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_RESET);
 80050c0:	2200      	movs	r2, #0
 80050c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050c6:	486d      	ldr	r0, [pc, #436]	@ (800527c <MX_GPIO_Init+0x2e0>)
 80050c8:	f005 ffd0 	bl	800b06c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE13
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_13
 80050cc:	f242 031f 	movw	r3, #8223	@ 0x201f
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050d2:	2303      	movs	r3, #3
 80050d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050de:	4619      	mov	r1, r3
 80050e0:	4865      	ldr	r0, [pc, #404]	@ (8005278 <MX_GPIO_Init+0x2dc>)
 80050e2:	f005 fe0f 	bl	800ad04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC2 PC4
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 80050e6:	f242 1315 	movw	r3, #8469	@ 0x2115
 80050ea:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ec:	2303      	movs	r3, #3
 80050ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050f8:	4619      	mov	r1, r3
 80050fa:	485c      	ldr	r0, [pc, #368]	@ (800526c <MX_GPIO_Init+0x2d0>)
 80050fc:	f005 fe02 	bl	800ad04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF7 PF8
                           PF9 PF10 PF11 PF12
                           PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005100:	f64f 73bf 	movw	r3, #65471	@ 0xffbf
 8005104:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005106:	2303      	movs	r3, #3
 8005108:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510a:	2300      	movs	r3, #0
 800510c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800510e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005112:	4619      	mov	r1, r3
 8005114:	485a      	ldr	r0, [pc, #360]	@ (8005280 <MX_GPIO_Init+0x2e4>)
 8005116:	f005 fdf5 	bl	800ad04 <HAL_GPIO_Init>

  /*Configure GPIO pins : M4_IN1_Pin M4_IN2_Pin M3_IN1_Pin */
  GPIO_InitStruct.Pin = M4_IN1_Pin|M4_IN2_Pin|M3_IN1_Pin;
 800511a:	232a      	movs	r3, #42	@ 0x2a
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800511e:	2301      	movs	r3, #1
 8005120:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005122:	2300      	movs	r3, #0
 8005124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005126:	2300      	movs	r3, #0
 8005128:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800512a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800512e:	4619      	mov	r1, r3
 8005130:	484e      	ldr	r0, [pc, #312]	@ (800526c <MX_GPIO_Init+0x2d0>)
 8005132:	f005 fde7 	bl	800ad04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8005136:	f649 0310 	movw	r3, #38928	@ 0x9810
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800513c:	2303      	movs	r3, #3
 800513e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005148:	4619      	mov	r1, r3
 800514a:	484e      	ldr	r0, [pc, #312]	@ (8005284 <MX_GPIO_Init+0x2e8>)
 800514c:	f005 fdda 	bl	800ad04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8005150:	f240 3335 	movw	r3, #821	@ 0x335
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005156:	2303      	movs	r3, #3
 8005158:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515a:	2300      	movs	r3, #0
 800515c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800515e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005162:	4619      	mov	r1, r3
 8005164:	4842      	ldr	r0, [pc, #264]	@ (8005270 <MX_GPIO_Init+0x2d4>)
 8005166:	f005 fdcd 	bl	800ad04 <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_IN2_Pin PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = M3_IN2_Pin|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800516a:	f24f 0302 	movw	r3, #61442	@ 0xf002
 800516e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005170:	2301      	movs	r3, #1
 8005172:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005174:	2300      	movs	r3, #0
 8005176:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005178:	2300      	movs	r3, #0
 800517a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800517c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005180:	4619      	mov	r1, r3
 8005182:	483b      	ldr	r0, [pc, #236]	@ (8005270 <MX_GPIO_Init+0x2d4>)
 8005184:	f005 fdbe 	bl	800ad04 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin PG1 M2_IN1_Pin Trig_2_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|GPIO_PIN_1|M2_IN1_Pin|Trig_2_Pin;
 8005188:	f248 030b 	movw	r3, #32779	@ 0x800b
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800518e:	2301      	movs	r3, #1
 8005190:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005192:	2300      	movs	r3, #0
 8005194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005196:	2300      	movs	r3, #0
 8005198:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800519a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800519e:	4619      	mov	r1, r3
 80051a0:	4834      	ldr	r0, [pc, #208]	@ (8005274 <MX_GPIO_Init+0x2d8>)
 80051a2:	f005 fdaf 	bl	800ad04 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN2_Pin PE8 PE10 PE12
                           Trig_4_Pin Trig_3_Pin */
  GPIO_InitStruct.Pin = M1_IN2_Pin|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12
 80051a6:	f24d 5380 	movw	r3, #54656	@ 0xd580
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |Trig_4_Pin|Trig_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051ac:	2301      	movs	r3, #1
 80051ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b4:	2300      	movs	r3, #0
 80051b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051bc:	4619      	mov	r1, r3
 80051be:	482e      	ldr	r0, [pc, #184]	@ (8005278 <MX_GPIO_Init+0x2dc>)
 80051c0:	f005 fda0 	bl	800ad04 <HAL_GPIO_Init>

  /*Configure GPIO pins : Echo_4_Pin Echo_3_Pin */
  GPIO_InitStruct.Pin = Echo_4_Pin|Echo_3_Pin;
 80051c4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80051c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80051ca:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80051ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051d8:	4619      	mov	r1, r3
 80051da:	4825      	ldr	r0, [pc, #148]	@ (8005270 <MX_GPIO_Init+0x2d4>)
 80051dc:	f005 fd92 	bl	800ad04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD0
                           PD1 PD3 PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_0
 80051e0:	f644 439b 	movw	r3, #19611	@ 0x4c9b
 80051e4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051e6:	2303      	movs	r3, #3
 80051e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051f2:	4619      	mov	r1, r3
 80051f4:	4821      	ldr	r0, [pc, #132]	@ (800527c <MX_GPIO_Init+0x2e0>)
 80051f6:	f005 fd85 	bl	800ad04 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IN2_Pin */
  GPIO_InitStruct.Pin = M2_IN2_Pin;
 80051fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005200:	2301      	movs	r3, #1
 8005202:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005204:	2300      	movs	r3, #0
 8005206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005208:	2300      	movs	r3, #0
 800520a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(M2_IN2_GPIO_Port, &GPIO_InitStruct);
 800520c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005210:	4619      	mov	r1, r3
 8005212:	481a      	ldr	r0, [pc, #104]	@ (800527c <MX_GPIO_Init+0x2e0>)
 8005214:	f005 fd76 	bl	800ad04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG4 PG5 PG6
                           PG7 PG8 PG10 PG11
                           PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8005218:	f641 53f4 	movw	r3, #7668	@ 0x1df4
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800521e:	2303      	movs	r3, #3
 8005220:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005222:	2300      	movs	r3, #0
 8005224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800522a:	4619      	mov	r1, r3
 800522c:	4811      	ldr	r0, [pc, #68]	@ (8005274 <MX_GPIO_Init+0x2d8>)
 800522e:	f005 fd69 	bl	800ad04 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_2_Pin */
  GPIO_InitStruct.Pin = Echo_2_Pin;
 8005232:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005238:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800523c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523e:	2300      	movs	r3, #0
 8005240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Echo_2_GPIO_Port, &GPIO_InitStruct);
 8005242:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005246:	4619      	mov	r1, r3
 8005248:	480a      	ldr	r0, [pc, #40]	@ (8005274 <MX_GPIO_Init+0x2d8>)
 800524a:	f005 fd5b 	bl	800ad04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800524e:	2200      	movs	r2, #0
 8005250:	2100      	movs	r1, #0
 8005252:	2028      	movs	r0, #40	@ 0x28
 8005254:	f005 fc8d 	bl	800ab72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005258:	2028      	movs	r0, #40	@ 0x28
 800525a:	f005 fca6 	bl	800abaa <HAL_NVIC_EnableIRQ>

}
 800525e:	bf00      	nop
 8005260:	3738      	adds	r7, #56	@ 0x38
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40023800 	.word	0x40023800
 800526c:	40020800 	.word	0x40020800
 8005270:	40020400 	.word	0x40020400
 8005274:	40021800 	.word	0x40021800
 8005278:	40021000 	.word	0x40021000
 800527c:	40020c00 	.word	0x40020c00
 8005280:	40021400 	.word	0x40021400
 8005284:	40020000 	.word	0x40020000

08005288 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800528c:	4b12      	ldr	r3, [pc, #72]	@ (80052d8 <MX_I2C1_Init+0x50>)
 800528e:	4a13      	ldr	r2, [pc, #76]	@ (80052dc <MX_I2C1_Init+0x54>)
 8005290:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005292:	4b11      	ldr	r3, [pc, #68]	@ (80052d8 <MX_I2C1_Init+0x50>)
 8005294:	4a12      	ldr	r2, [pc, #72]	@ (80052e0 <MX_I2C1_Init+0x58>)
 8005296:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005298:	4b0f      	ldr	r3, [pc, #60]	@ (80052d8 <MX_I2C1_Init+0x50>)
 800529a:	2200      	movs	r2, #0
 800529c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800529e:	4b0e      	ldr	r3, [pc, #56]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052a4:	4b0c      	ldr	r3, [pc, #48]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80052aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052ac:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80052b2:	4b09      	ldr	r3, [pc, #36]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052b8:	4b07      	ldr	r3, [pc, #28]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80052be:	4b06      	ldr	r3, [pc, #24]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052c4:	4804      	ldr	r0, [pc, #16]	@ (80052d8 <MX_I2C1_Init+0x50>)
 80052c6:	f005 ff03 	bl	800b0d0 <HAL_I2C_Init>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80052d0:	f002 f8f6 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80052d4:	bf00      	nop
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	200002d4 	.word	0x200002d4
 80052dc:	40005400 	.word	0x40005400
 80052e0:	00061a80 	.word	0x00061a80

080052e4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80052e8:	4b12      	ldr	r3, [pc, #72]	@ (8005334 <MX_I2C3_Init+0x50>)
 80052ea:	4a13      	ldr	r2, [pc, #76]	@ (8005338 <MX_I2C3_Init+0x54>)
 80052ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80052ee:	4b11      	ldr	r3, [pc, #68]	@ (8005334 <MX_I2C3_Init+0x50>)
 80052f0:	4a12      	ldr	r2, [pc, #72]	@ (800533c <MX_I2C3_Init+0x58>)
 80052f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80052f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005334 <MX_I2C3_Init+0x50>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80052fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005334 <MX_I2C3_Init+0x50>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005300:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <MX_I2C3_Init+0x50>)
 8005302:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005306:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005308:	4b0a      	ldr	r3, [pc, #40]	@ (8005334 <MX_I2C3_Init+0x50>)
 800530a:	2200      	movs	r2, #0
 800530c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800530e:	4b09      	ldr	r3, [pc, #36]	@ (8005334 <MX_I2C3_Init+0x50>)
 8005310:	2200      	movs	r2, #0
 8005312:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005314:	4b07      	ldr	r3, [pc, #28]	@ (8005334 <MX_I2C3_Init+0x50>)
 8005316:	2200      	movs	r2, #0
 8005318:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800531a:	4b06      	ldr	r3, [pc, #24]	@ (8005334 <MX_I2C3_Init+0x50>)
 800531c:	2200      	movs	r2, #0
 800531e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005320:	4804      	ldr	r0, [pc, #16]	@ (8005334 <MX_I2C3_Init+0x50>)
 8005322:	f005 fed5 	bl	800b0d0 <HAL_I2C_Init>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800532c:	f002 f8c8 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005330:	bf00      	nop
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000328 	.word	0x20000328
 8005338:	40005c00 	.word	0x40005c00
 800533c:	000186a0 	.word	0x000186a0

08005340 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08c      	sub	sp, #48	@ 0x30
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005348:	f107 031c 	add.w	r3, r7, #28
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	605a      	str	r2, [r3, #4]
 8005352:	609a      	str	r2, [r3, #8]
 8005354:	60da      	str	r2, [r3, #12]
 8005356:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a42      	ldr	r2, [pc, #264]	@ (8005468 <HAL_I2C_MspInit+0x128>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d12c      	bne.n	80053bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	4b41      	ldr	r3, [pc, #260]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 8005368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536a:	4a40      	ldr	r2, [pc, #256]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 800536c:	f043 0302 	orr.w	r3, r3, #2
 8005370:	6313      	str	r3, [r2, #48]	@ 0x30
 8005372:	4b3e      	ldr	r3, [pc, #248]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 8005374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	61bb      	str	r3, [r7, #24]
 800537c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800537e:	23c0      	movs	r3, #192	@ 0xc0
 8005380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005382:	2312      	movs	r3, #18
 8005384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005386:	2300      	movs	r3, #0
 8005388:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800538a:	2303      	movs	r3, #3
 800538c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800538e:	2304      	movs	r3, #4
 8005390:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005392:	f107 031c 	add.w	r3, r7, #28
 8005396:	4619      	mov	r1, r3
 8005398:	4835      	ldr	r0, [pc, #212]	@ (8005470 <HAL_I2C_MspInit+0x130>)
 800539a:	f005 fcb3 	bl	800ad04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	4b32      	ldr	r3, [pc, #200]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a6:	4a31      	ldr	r2, [pc, #196]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80053ae:	4b2f      	ldr	r3, [pc, #188]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80053ba:	e050      	b.n	800545e <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005474 <HAL_I2C_MspInit+0x134>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d14b      	bne.n	800545e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	4b28      	ldr	r3, [pc, #160]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ce:	4a27      	ldr	r2, [pc, #156]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053d0:	f043 0304 	orr.w	r3, r3, #4
 80053d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80053d6:	4b25      	ldr	r3, [pc, #148]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	4b21      	ldr	r3, [pc, #132]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ea:	4a20      	ldr	r2, [pc, #128]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80053f2:	4b1e      	ldr	r3, [pc, #120]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005404:	2312      	movs	r3, #18
 8005406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005408:	2300      	movs	r3, #0
 800540a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800540c:	2303      	movs	r3, #3
 800540e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005410:	2304      	movs	r3, #4
 8005412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005414:	f107 031c 	add.w	r3, r7, #28
 8005418:	4619      	mov	r1, r3
 800541a:	4817      	ldr	r0, [pc, #92]	@ (8005478 <HAL_I2C_MspInit+0x138>)
 800541c:	f005 fc72 	bl	800ad04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005426:	2312      	movs	r3, #18
 8005428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542a:	2300      	movs	r3, #0
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800542e:	2303      	movs	r3, #3
 8005430:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005432:	2304      	movs	r3, #4
 8005434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005436:	f107 031c 	add.w	r3, r7, #28
 800543a:	4619      	mov	r1, r3
 800543c:	480f      	ldr	r0, [pc, #60]	@ (800547c <HAL_I2C_MspInit+0x13c>)
 800543e:	f005 fc61 	bl	800ad04 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005442:	2300      	movs	r3, #0
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	4b09      	ldr	r3, [pc, #36]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544a:	4a08      	ldr	r2, [pc, #32]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 800544c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005450:	6413      	str	r3, [r2, #64]	@ 0x40
 8005452:	4b06      	ldr	r3, [pc, #24]	@ (800546c <HAL_I2C_MspInit+0x12c>)
 8005454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800545a:	60bb      	str	r3, [r7, #8]
 800545c:	68bb      	ldr	r3, [r7, #8]
}
 800545e:	bf00      	nop
 8005460:	3730      	adds	r7, #48	@ 0x30
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40005400 	.word	0x40005400
 800546c:	40023800 	.word	0x40023800
 8005470:	40020400 	.word	0x40020400
 8005474:	40005c00 	.word	0x40005c00
 8005478:	40020800 	.word	0x40020800
 800547c:	40020000 	.word	0x40020000

08005480 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define CLAMP(value, min, max) ((value) < (min) ? (min) : ((value) > (max) ? (max) : (value)))

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    // 检查是否是UART5（US100传感器使用的串口）
    if (huart == &huart5||huart == &huart2||huart == &huart3||huart == &huart4) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a14      	ldr	r2, [pc, #80]	@ (80054dc <HAL_UART_RxCpltCallback+0x5c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00b      	beq.n	80054a8 <HAL_UART_RxCpltCallback+0x28>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a13      	ldr	r2, [pc, #76]	@ (80054e0 <HAL_UART_RxCpltCallback+0x60>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <HAL_UART_RxCpltCallback+0x28>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a12      	ldr	r2, [pc, #72]	@ (80054e4 <HAL_UART_RxCpltCallback+0x64>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <HAL_UART_RxCpltCallback+0x28>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a11      	ldr	r2, [pc, #68]	@ (80054e8 <HAL_UART_RxCpltCallback+0x68>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d102      	bne.n	80054ae <HAL_UART_RxCpltCallback+0x2e>
        // 调用US100库的回调函数
        US100_UART_RxCpltCallback(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f004 fe21 	bl	800a0f0 <US100_UART_RxCpltCallback>
    } 
    if (huart == &huart1) {
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a0e      	ldr	r2, [pc, #56]	@ (80054ec <HAL_UART_RxCpltCallback+0x6c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d10e      	bne.n	80054d4 <HAL_UART_RxCpltCallback+0x54>
        // 处理其他串口的回调
        HAL_UART_Transmit(&huart1, message, strlen(message), 100);
 80054b6:	480e      	ldr	r0, [pc, #56]	@ (80054f0 <HAL_UART_RxCpltCallback+0x70>)
 80054b8:	f7fa feda 	bl	8000270 <strlen>
 80054bc:	4603      	mov	r3, r0
 80054be:	b29a      	uxth	r2, r3
 80054c0:	2364      	movs	r3, #100	@ 0x64
 80054c2:	490b      	ldr	r1, [pc, #44]	@ (80054f0 <HAL_UART_RxCpltCallback+0x70>)
 80054c4:	4809      	ldr	r0, [pc, #36]	@ (80054ec <HAL_UART_RxCpltCallback+0x6c>)
 80054c6:	f008 fcd1 	bl	800de6c <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart1, receivedata, 2);
 80054ca:	2202      	movs	r2, #2
 80054cc:	4909      	ldr	r1, [pc, #36]	@ (80054f4 <HAL_UART_RxCpltCallback+0x74>)
 80054ce:	4807      	ldr	r0, [pc, #28]	@ (80054ec <HAL_UART_RxCpltCallback+0x6c>)
 80054d0:	f008 fd57 	bl	800df82 <HAL_UART_Receive_IT>
    //     HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
        
    //     // 继续接收下一个字节
    //     HAL_UART_Receive_IT(&huart4, &uart4_rx_buffer, 1);
    // }
}
 80054d4:	bf00      	nop
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	200008d4 	.word	0x200008d4
 80054e0:	20000964 	.word	0x20000964
 80054e4:	200009ac 	.word	0x200009ac
 80054e8:	2000088c 	.word	0x2000088c
 80054ec:	2000091c 	.word	0x2000091c
 80054f0:	20000050 	.word	0x20000050
 80054f4:	20000454 	.word	0x20000454

080054f8 <meandistances>:

float* meandistances(float* distances)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]

    if (cz)
 8005500:	4b6d      	ldr	r3, [pc, #436]	@ (80056b8 <meandistances+0x1c0>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d020      	beq.n	800554a <meandistances+0x52>
    {
        cz = 0;
 8005508:	4b6b      	ldr	r3, [pc, #428]	@ (80056b8 <meandistances+0x1c0>)
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
        count_100ms = 1;
 800550e:	4b6b      	ldr	r3, [pc, #428]	@ (80056bc <meandistances+0x1c4>)
 8005510:	2201      	movs	r2, #1
 8005512:	601a      	str	r2, [r3, #0]
        start = HAL_GetTick();
 8005514:	f005 fa22 	bl	800a95c <HAL_GetTick>
 8005518:	4603      	mov	r3, r0
 800551a:	4a69      	ldr	r2, [pc, #420]	@ (80056c0 <meandistances+0x1c8>)
 800551c:	6013      	str	r3, [r2, #0]
        now = start;
 800551e:	4b68      	ldr	r3, [pc, #416]	@ (80056c0 <meandistances+0x1c8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a68      	ldr	r2, [pc, #416]	@ (80056c4 <meandistances+0x1cc>)
 8005524:	6013      	str	r3, [r2, #0]
        sum[0] = distances[0];
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a67      	ldr	r2, [pc, #412]	@ (80056c8 <meandistances+0x1d0>)
 800552c:	6013      	str	r3, [r2, #0]
        sum[1] = distances[1];
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	4a65      	ldr	r2, [pc, #404]	@ (80056c8 <meandistances+0x1d0>)
 8005534:	6053      	str	r3, [r2, #4]
        sum[2] = distances[2];
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	4a63      	ldr	r2, [pc, #396]	@ (80056c8 <meandistances+0x1d0>)
 800553c:	6093      	str	r3, [r2, #8]
        sum[3] = distances[3];
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	4a61      	ldr	r2, [pc, #388]	@ (80056c8 <meandistances+0x1d0>)
 8005544:	60d3      	str	r3, [r2, #12]
        return mean;  // 初始返回0值
 8005546:	4b61      	ldr	r3, [pc, #388]	@ (80056cc <meandistances+0x1d4>)
 8005548:	e0b1      	b.n	80056ae <meandistances+0x1b6>
    }
    else
    {
        now = HAL_GetTick();
 800554a:	f005 fa07 	bl	800a95c <HAL_GetTick>
 800554e:	4603      	mov	r3, r0
 8005550:	4a5c      	ldr	r2, [pc, #368]	@ (80056c4 <meandistances+0x1cc>)
 8005552:	6013      	str	r3, [r2, #0]
        if (now - start <= 100)
 8005554:	4b5b      	ldr	r3, [pc, #364]	@ (80056c4 <meandistances+0x1cc>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	4b59      	ldr	r3, [pc, #356]	@ (80056c0 <meandistances+0x1c8>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b64      	cmp	r3, #100	@ 0x64
 8005560:	d835      	bhi.n	80055ce <meandistances+0xd6>
        {
            sum[0] += distances[0];
 8005562:	4b59      	ldr	r3, [pc, #356]	@ (80056c8 <meandistances+0x1d0>)
 8005564:	ed93 7a00 	vldr	s14, [r3]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	edd3 7a00 	vldr	s15, [r3]
 800556e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005572:	4b55      	ldr	r3, [pc, #340]	@ (80056c8 <meandistances+0x1d0>)
 8005574:	edc3 7a00 	vstr	s15, [r3]
            sum[1] += distances[1];
 8005578:	4b53      	ldr	r3, [pc, #332]	@ (80056c8 <meandistances+0x1d0>)
 800557a:	ed93 7a01 	vldr	s14, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3304      	adds	r3, #4
 8005582:	edd3 7a00 	vldr	s15, [r3]
 8005586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800558a:	4b4f      	ldr	r3, [pc, #316]	@ (80056c8 <meandistances+0x1d0>)
 800558c:	edc3 7a01 	vstr	s15, [r3, #4]
            sum[2] += distances[2];
 8005590:	4b4d      	ldr	r3, [pc, #308]	@ (80056c8 <meandistances+0x1d0>)
 8005592:	ed93 7a02 	vldr	s14, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3308      	adds	r3, #8
 800559a:	edd3 7a00 	vldr	s15, [r3]
 800559e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055a2:	4b49      	ldr	r3, [pc, #292]	@ (80056c8 <meandistances+0x1d0>)
 80055a4:	edc3 7a02 	vstr	s15, [r3, #8]
            sum[3] += distances[3];
 80055a8:	4b47      	ldr	r3, [pc, #284]	@ (80056c8 <meandistances+0x1d0>)
 80055aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	330c      	adds	r3, #12
 80055b2:	edd3 7a00 	vldr	s15, [r3]
 80055b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055ba:	4b43      	ldr	r3, [pc, #268]	@ (80056c8 <meandistances+0x1d0>)
 80055bc:	edc3 7a03 	vstr	s15, [r3, #12]
            count_100ms += 1;
 80055c0:	4b3e      	ldr	r3, [pc, #248]	@ (80056bc <meandistances+0x1c4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	4a3d      	ldr	r2, [pc, #244]	@ (80056bc <meandistances+0x1c4>)
 80055c8:	6013      	str	r3, [r2, #0]
            return mean;  // 返回当前均值
 80055ca:	4b40      	ldr	r3, [pc, #256]	@ (80056cc <meandistances+0x1d4>)
 80055cc:	e06f      	b.n	80056ae <meandistances+0x1b6>
        }
        else
        {
            sum[0] += distances[0];
 80055ce:	4b3e      	ldr	r3, [pc, #248]	@ (80056c8 <meandistances+0x1d0>)
 80055d0:	ed93 7a00 	vldr	s14, [r3]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	edd3 7a00 	vldr	s15, [r3]
 80055da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055de:	4b3a      	ldr	r3, [pc, #232]	@ (80056c8 <meandistances+0x1d0>)
 80055e0:	edc3 7a00 	vstr	s15, [r3]
            sum[1] += distances[1];
 80055e4:	4b38      	ldr	r3, [pc, #224]	@ (80056c8 <meandistances+0x1d0>)
 80055e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3304      	adds	r3, #4
 80055ee:	edd3 7a00 	vldr	s15, [r3]
 80055f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055f6:	4b34      	ldr	r3, [pc, #208]	@ (80056c8 <meandistances+0x1d0>)
 80055f8:	edc3 7a01 	vstr	s15, [r3, #4]
            sum[2] += distances[2];
 80055fc:	4b32      	ldr	r3, [pc, #200]	@ (80056c8 <meandistances+0x1d0>)
 80055fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3308      	adds	r3, #8
 8005606:	edd3 7a00 	vldr	s15, [r3]
 800560a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800560e:	4b2e      	ldr	r3, [pc, #184]	@ (80056c8 <meandistances+0x1d0>)
 8005610:	edc3 7a02 	vstr	s15, [r3, #8]
            sum[3] += distances[3];
 8005614:	4b2c      	ldr	r3, [pc, #176]	@ (80056c8 <meandistances+0x1d0>)
 8005616:	ed93 7a03 	vldr	s14, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	330c      	adds	r3, #12
 800561e:	edd3 7a00 	vldr	s15, [r3]
 8005622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005626:	4b28      	ldr	r3, [pc, #160]	@ (80056c8 <meandistances+0x1d0>)
 8005628:	edc3 7a03 	vstr	s15, [r3, #12]
            count_100ms += 1;
 800562c:	4b23      	ldr	r3, [pc, #140]	@ (80056bc <meandistances+0x1c4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3301      	adds	r3, #1
 8005632:	4a22      	ldr	r2, [pc, #136]	@ (80056bc <meandistances+0x1c4>)
 8005634:	6013      	str	r3, [r2, #0]

            mean[0] = sum[0] / count_100ms;
 8005636:	4b24      	ldr	r3, [pc, #144]	@ (80056c8 <meandistances+0x1d0>)
 8005638:	edd3 6a00 	vldr	s13, [r3]
 800563c:	4b1f      	ldr	r3, [pc, #124]	@ (80056bc <meandistances+0x1c4>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	ee07 3a90 	vmov	s15, r3
 8005644:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800564c:	4b1f      	ldr	r3, [pc, #124]	@ (80056cc <meandistances+0x1d4>)
 800564e:	edc3 7a00 	vstr	s15, [r3]
            mean[1] = sum[1] / count_100ms;
 8005652:	4b1d      	ldr	r3, [pc, #116]	@ (80056c8 <meandistances+0x1d0>)
 8005654:	edd3 6a01 	vldr	s13, [r3, #4]
 8005658:	4b18      	ldr	r3, [pc, #96]	@ (80056bc <meandistances+0x1c4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	ee07 3a90 	vmov	s15, r3
 8005660:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005668:	4b18      	ldr	r3, [pc, #96]	@ (80056cc <meandistances+0x1d4>)
 800566a:	edc3 7a01 	vstr	s15, [r3, #4]
            mean[2] = sum[2] / count_100ms;
 800566e:	4b16      	ldr	r3, [pc, #88]	@ (80056c8 <meandistances+0x1d0>)
 8005670:	edd3 6a02 	vldr	s13, [r3, #8]
 8005674:	4b11      	ldr	r3, [pc, #68]	@ (80056bc <meandistances+0x1c4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	ee07 3a90 	vmov	s15, r3
 800567c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005684:	4b11      	ldr	r3, [pc, #68]	@ (80056cc <meandistances+0x1d4>)
 8005686:	edc3 7a02 	vstr	s15, [r3, #8]
            mean[3] = sum[3] / count_100ms;
 800568a:	4b0f      	ldr	r3, [pc, #60]	@ (80056c8 <meandistances+0x1d0>)
 800568c:	edd3 6a03 	vldr	s13, [r3, #12]
 8005690:	4b0a      	ldr	r3, [pc, #40]	@ (80056bc <meandistances+0x1c4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800569c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a0:	4b0a      	ldr	r3, [pc, #40]	@ (80056cc <meandistances+0x1d4>)
 80056a2:	edc3 7a03 	vstr	s15, [r3, #12]

            cz = 1;
 80056a6:	4b04      	ldr	r3, [pc, #16]	@ (80056b8 <meandistances+0x1c0>)
 80056a8:	2201      	movs	r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
            return mean;
 80056ac:	4b07      	ldr	r3, [pc, #28]	@ (80056cc <meandistances+0x1d4>)
        }
    }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000048 	.word	0x20000048
 80056bc:	2000041c 	.word	0x2000041c
 80056c0:	20000444 	.word	0x20000444
 80056c4:	20000448 	.word	0x20000448
 80056c8:	20000424 	.word	0x20000424
 80056cc:	20000434 	.word	0x20000434

080056d0 <smooth_speed_transition>:

#define MAX_SPEED_STEP 5  // 每次最大速度变化量
uint8_t smooth_speed_transition(uint8_t current, uint8_t target) {
 80056d0:	b5b0      	push	{r4, r5, r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	460a      	mov	r2, r1
 80056da:	71fb      	strb	r3, [r7, #7]
 80056dc:	4613      	mov	r3, r2
 80056de:	71bb      	strb	r3, [r7, #6]
    if(target > current) {
 80056e0:	79ba      	ldrb	r2, [r7, #6]
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d91b      	bls.n	8005720 <smooth_speed_transition+0x50>
        return fmin(current + MAX_SPEED_STEP, target);
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	3305      	adds	r3, #5
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fa ff19 	bl	8000524 <__aeabi_i2d>
 80056f2:	4604      	mov	r4, r0
 80056f4:	460d      	mov	r5, r1
 80056f6:	79bb      	ldrb	r3, [r7, #6]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fa ff03 	bl	8000504 <__aeabi_ui2d>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	ec43 2b11 	vmov	d1, r2, r3
 8005706:	ec45 4b10 	vmov	d0, r4, r5
 800570a:	f00c f947 	bl	801199c <fmin>
 800570e:	ec53 2b10 	vmov	r2, r3, d0
 8005712:	4610      	mov	r0, r2
 8005714:	4619      	mov	r1, r3
 8005716:	f7fb fa47 	bl	8000ba8 <__aeabi_d2uiz>
 800571a:	4603      	mov	r3, r0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	e020      	b.n	8005762 <smooth_speed_transition+0x92>
    } else if(target < current) {
 8005720:	79ba      	ldrb	r2, [r7, #6]
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	429a      	cmp	r2, r3
 8005726:	d21b      	bcs.n	8005760 <smooth_speed_transition+0x90>
        return fmax(current - MAX_SPEED_STEP, target);
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	3b05      	subs	r3, #5
 800572c:	4618      	mov	r0, r3
 800572e:	f7fa fef9 	bl	8000524 <__aeabi_i2d>
 8005732:	4604      	mov	r4, r0
 8005734:	460d      	mov	r5, r1
 8005736:	79bb      	ldrb	r3, [r7, #6]
 8005738:	4618      	mov	r0, r3
 800573a:	f7fa fee3 	bl	8000504 <__aeabi_ui2d>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	ec43 2b11 	vmov	d1, r2, r3
 8005746:	ec45 4b10 	vmov	d0, r4, r5
 800574a:	f00c f8fd 	bl	8011948 <fmax>
 800574e:	ec53 2b10 	vmov	r2, r3, d0
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	f7fb fa27 	bl	8000ba8 <__aeabi_d2uiz>
 800575a:	4603      	mov	r3, r0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	e000      	b.n	8005762 <smooth_speed_transition+0x92>
    }
    return current;
 8005760:	79fb      	ldrb	r3, [r7, #7]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800576c <PID_ResetAll>:

void PID_ResetAll(void) {
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  PID_Reset(&pid_yaw);
 8005770:	4806      	ldr	r0, [pc, #24]	@ (800578c <PID_ResetAll+0x20>)
 8005772:	f003 fb4f 	bl	8008e14 <PID_Reset>
  PID_Reset(&pid_rear);
 8005776:	4806      	ldr	r0, [pc, #24]	@ (8005790 <PID_ResetAll+0x24>)
 8005778:	f003 fb4c 	bl	8008e14 <PID_Reset>
  PID_Reset(&pid_front);
 800577c:	4805      	ldr	r0, [pc, #20]	@ (8005794 <PID_ResetAll+0x28>)
 800577e:	f003 fb49 	bl	8008e14 <PID_Reset>
  PID_Reset(&pid_position);
 8005782:	4805      	ldr	r0, [pc, #20]	@ (8005798 <PID_ResetAll+0x2c>)
 8005784:	f003 fb46 	bl	8008e14 <PID_Reset>
}
 8005788:	bf00      	nop
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000074 	.word	0x20000074
 8005790:	200000a4 	.word	0x200000a4
 8005794:	2000008c 	.word	0x2000008c
 8005798:	200000bc 	.word	0x200000bc

0800579c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b0ca      	sub	sp, #296	@ 0x128
 80057a0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80057a2:	f005 f875 	bl	800a890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80057a6:	f001 fe21 	bl	80073ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80057aa:	f7ff fbf7 	bl	8004f9c <MX_GPIO_Init>
  MX_I2C1_Init();
 80057ae:	f7ff fd6b 	bl	8005288 <MX_I2C1_Init>
  MX_I2C3_Init();
 80057b2:	f7ff fd97 	bl	80052e4 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80057b6:	f004 fdf3 	bl	800a3a0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80057ba:	f003 fcb9 	bl	8009130 <MX_TIM1_Init>
  MX_TIM3_Init();
 80057be:	f003 fd63 	bl	8009288 <MX_TIM3_Init>
  MX_TIM4_Init();
 80057c2:	f003 fdb5 	bl	8009330 <MX_TIM4_Init>
  MX_TIM5_Init();
 80057c6:	f003 fe07 	bl	80093d8 <MX_TIM5_Init>
  MX_TIM8_Init();
 80057ca:	f003 fed3 	bl	8009574 <MX_TIM8_Init>
  MX_TIM9_Init();
 80057ce:	f003 ff7f 	bl	80096d0 <MX_TIM9_Init>
  MX_TIM10_Init();
 80057d2:	f003 ffeb 	bl	80097ac <MX_TIM10_Init>
  MX_TIM2_Init();
 80057d6:	f003 fd03 	bl	80091e0 <MX_TIM2_Init>
  MX_UART4_Init();
 80057da:	f004 fd8d 	bl	800a2f8 <MX_UART4_Init>
  MX_UART5_Init();
 80057de:	f004 fdb5 	bl	800a34c <MX_UART5_Init>
  MX_USART2_UART_Init();
 80057e2:	f004 fe07 	bl	800a3f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80057e6:	f004 fe2f 	bl	800a448 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80057ea:	f004 fe57 	bl	800a49c <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80057ee:	f003 fe8b 	bl	8009508 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80057f2:	f7ff fb19 	bl	8004e28 <OLED_Init>

  HAL_UART_Receive_IT(&huart1, receivedata, 2);
 80057f6:	2202      	movs	r2, #2
 80057f8:	49ba      	ldr	r1, [pc, #744]	@ (8005ae4 <main+0x348>)
 80057fa:	48bb      	ldr	r0, [pc, #748]	@ (8005ae8 <main+0x34c>)
 80057fc:	f008 fbc1 	bl	800df82 <HAL_UART_Receive_IT>
  // 初始化UART4接收
  HAL_UART_Receive_IT(&huart4, &uart4_rx_buffer, 1);
 8005800:	2201      	movs	r2, #1
 8005802:	49ba      	ldr	r1, [pc, #744]	@ (8005aec <main+0x350>)
 8005804:	48ba      	ldr	r0, [pc, #744]	@ (8005af0 <main+0x354>)
 8005806:	f008 fbbc 	bl	800df82 <HAL_UART_Receive_IT>
  
  HAL_TIM_Base_Start(&htim6);
 800580a:	48ba      	ldr	r0, [pc, #744]	@ (8005af4 <main+0x358>)
 800580c:	f007 faac 	bl	800cd68 <HAL_TIM_Base_Start>
  Reset_Timer();  // 重置计时器
 8005810:	f002 f814 	bl	800783c <Reset_Timer>
  
  // 初始化MPU6050 DMP
  int mpu_result;
  int retry_count = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  uint32_t init_start_time = HAL_GetTick();
 800581a:	f005 f89f 	bl	800a95c <HAL_GetTick>
 800581e:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
  
  do {
      mpu_result = MPU6050_DMP_Init();
 8005822:	f7fe ffc9 	bl	80047b8 <MPU6050_DMP_Init>
 8005826:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
      if (mpu_result != 0) {
 800582a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01f      	beq.n	8005872 <main+0xd6>
          retry_count++;
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005836:	3301      	adds	r3, #1
 8005838:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
          // 只在每10次重试时更新显示，减少OLED操作
          if (retry_count % 10 == 0) {
 800583c:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8005840:	4bad      	ldr	r3, [pc, #692]	@ (8005af8 <main+0x35c>)
 8005842:	fb83 2301 	smull	r2, r3, r3, r1
 8005846:	109a      	asrs	r2, r3, #2
 8005848:	17cb      	asrs	r3, r1, #31
 800584a:	1ad2      	subs	r2, r2, r3
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	1aca      	subs	r2, r1, r3
 8005856:	2a00      	cmp	r2, #0
 8005858:	d10b      	bne.n	8005872 <main+0xd6>
              OLED_ShowString(1,1,"INITING...");
 800585a:	4aa8      	ldr	r2, [pc, #672]	@ (8005afc <main+0x360>)
 800585c:	2101      	movs	r1, #1
 800585e:	2001      	movs	r0, #1
 8005860:	f7ff fa66 	bl	8004d30 <OLED_ShowString>
              OLED_ShowNum(1,11,retry_count,2);
 8005864:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005868:	2302      	movs	r3, #2
 800586a:	210b      	movs	r1, #11
 800586c:	2001      	movs	r0, #1
 800586e:	f7ff fa9d 	bl	8004dac <OLED_ShowNum>
          }
      }
  } while (mpu_result != 0);
 8005872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1d3      	bne.n	8005822 <main+0x86>
  
  OLED_Clear();
 800587a:	f7ff f992 	bl	8004ba2 <OLED_Clear>
  OLED_ShowString(1,1,"SUCCESS");
 800587e:	4aa0      	ldr	r2, [pc, #640]	@ (8005b00 <main+0x364>)
 8005880:	2101      	movs	r1, #1
 8005882:	2001      	movs	r0, #1
 8005884:	f7ff fa54 	bl	8004d30 <OLED_ShowString>
  // 显示初始化耗时
  uint32_t init_time = HAL_GetTick() - init_start_time;
 8005888:	f005 f868 	bl	800a95c <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  OLED_ShowNum(2,1,init_time,4);
 8005898:	2304      	movs	r3, #4
 800589a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800589e:	2101      	movs	r1, #1
 80058a0:	2002      	movs	r0, #2
 80058a2:	f7ff fa83 	bl	8004dac <OLED_ShowNum>
  OLED_ShowString(2,5,"ms");
 80058a6:	4a97      	ldr	r2, [pc, #604]	@ (8005b04 <main+0x368>)
 80058a8:	2105      	movs	r1, #5
 80058aa:	2002      	movs	r0, #2
 80058ac:	f7ff fa40 	bl	8004d30 <OLED_ShowString>
  // Ultrasonic_Init(&ultrasonic_sensors[2], Trig_3_GPIO_Port, Trig_3_Pin, Echo_3_GPIO_Port, Echo_3_Pin);  // 传感器3
  // Ultrasonic_Init(&ultrasonic_sensors[3], Trig_4_GPIO_Port, Trig_4_Pin, Echo_4_GPIO_Port, Echo_4_Pin);  // 传感器4
  // Ultrasonic_Init(&ultrasonic_sensors[4], Trig_5_GPIO_Port, Trig_5_Pin, Echo_5_GPIO_Port, Echo_5_Pin);  // 传感器5

  // 初始化US100传感器顺时针1234
  US100_Init(&us100_sensor2, &huart5);
 80058b0:	4995      	ldr	r1, [pc, #596]	@ (8005b08 <main+0x36c>)
 80058b2:	4896      	ldr	r0, [pc, #600]	@ (8005b0c <main+0x370>)
 80058b4:	f004 fb2a 	bl	8009f0c <US100_Init>
  US100_Init(&us100_sensor1, &huart4);
 80058b8:	498d      	ldr	r1, [pc, #564]	@ (8005af0 <main+0x354>)
 80058ba:	4895      	ldr	r0, [pc, #596]	@ (8005b10 <main+0x374>)
 80058bc:	f004 fb26 	bl	8009f0c <US100_Init>
  US100_Init(&us100_sensor4, &huart3);
 80058c0:	4994      	ldr	r1, [pc, #592]	@ (8005b14 <main+0x378>)
 80058c2:	4895      	ldr	r0, [pc, #596]	@ (8005b18 <main+0x37c>)
 80058c4:	f004 fb22 	bl	8009f0c <US100_Init>
  US100_Init(&us100_sensor3, &huart2);
 80058c8:	4994      	ldr	r1, [pc, #592]	@ (8005b1c <main+0x380>)
 80058ca:	4895      	ldr	r0, [pc, #596]	@ (8005b20 <main+0x384>)
 80058cc:	f004 fb1e 	bl	8009f0c <US100_Init>
  
  // 等待一段时间，确保传感器稳定
  HAL_Delay(50);
 80058d0:	2032      	movs	r0, #50	@ 0x32
 80058d2:	f005 f84f 	bl	800a974 <HAL_Delay>
  
  // 开始第一次测量
  US100_StartMeasurement(&us100_sensor1);
 80058d6:	488e      	ldr	r0, [pc, #568]	@ (8005b10 <main+0x374>)
 80058d8:	f004 fb5a 	bl	8009f90 <US100_StartMeasurement>
  US100_StartMeasurement(&us100_sensor2);
 80058dc:	488b      	ldr	r0, [pc, #556]	@ (8005b0c <main+0x370>)
 80058de:	f004 fb57 	bl	8009f90 <US100_StartMeasurement>
  US100_StartMeasurement(&us100_sensor3);
 80058e2:	488f      	ldr	r0, [pc, #572]	@ (8005b20 <main+0x384>)
 80058e4:	f004 fb54 	bl	8009f90 <US100_StartMeasurement>
  US100_StartMeasurement(&us100_sensor4);
 80058e8:	488b      	ldr	r0, [pc, #556]	@ (8005b18 <main+0x37c>)
 80058ea:	f004 fb51 	bl	8009f90 <US100_StartMeasurement>

  Motor_Init(MOTOR_1,
 80058ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005b24 <main+0x388>)
 80058f0:	9303      	str	r3, [sp, #12]
 80058f2:	2380      	movs	r3, #128	@ 0x80
 80058f4:	9302      	str	r3, [sp, #8]
 80058f6:	4b8c      	ldr	r3, [pc, #560]	@ (8005b28 <main+0x38c>)
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	2301      	movs	r3, #1
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	4b8b      	ldr	r3, [pc, #556]	@ (8005b2c <main+0x390>)
 8005900:	2200      	movs	r2, #0
 8005902:	498b      	ldr	r1, [pc, #556]	@ (8005b30 <main+0x394>)
 8005904:	2000      	movs	r0, #0
 8005906:	f001 fde1 	bl	80074cc <Motor_Init>
            &htim5, TIM_CHANNEL_1,
            M1_IN1_GPIO_Port, M1_IN1_Pin,
            M1_IN2_GPIO_Port, M1_IN2_Pin,
            &htim1);

  Motor_Init(MOTOR_2,
 800590a:	4b8a      	ldr	r3, [pc, #552]	@ (8005b34 <main+0x398>)
 800590c:	9303      	str	r3, [sp, #12]
 800590e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005912:	9302      	str	r3, [sp, #8]
 8005914:	4b88      	ldr	r3, [pc, #544]	@ (8005b38 <main+0x39c>)
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	2308      	movs	r3, #8
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	4b83      	ldr	r3, [pc, #524]	@ (8005b2c <main+0x390>)
 800591e:	2204      	movs	r2, #4
 8005920:	4983      	ldr	r1, [pc, #524]	@ (8005b30 <main+0x394>)
 8005922:	2001      	movs	r0, #1
 8005924:	f001 fdd2 	bl	80074cc <Motor_Init>
            &htim5, TIM_CHANNEL_2,
            M2_IN1_GPIO_Port, M2_IN1_Pin,
            M2_IN2_GPIO_Port, M2_IN2_Pin,
            &htim4);

  Motor_Init(MOTOR_3,
 8005928:	4b84      	ldr	r3, [pc, #528]	@ (8005b3c <main+0x3a0>)
 800592a:	9303      	str	r3, [sp, #12]
 800592c:	2302      	movs	r3, #2
 800592e:	9302      	str	r3, [sp, #8]
 8005930:	4b83      	ldr	r3, [pc, #524]	@ (8005b40 <main+0x3a4>)
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	2320      	movs	r3, #32
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	4b82      	ldr	r3, [pc, #520]	@ (8005b44 <main+0x3a8>)
 800593a:	2208      	movs	r2, #8
 800593c:	497c      	ldr	r1, [pc, #496]	@ (8005b30 <main+0x394>)
 800593e:	2002      	movs	r0, #2
 8005940:	f001 fdc4 	bl	80074cc <Motor_Init>
            &htim5, TIM_CHANNEL_3,
            M3_IN1_GPIO_Port, M3_IN1_Pin,
            M3_IN2_GPIO_Port, M3_IN2_Pin,
            &htim3);

  Motor_Init(MOTOR_4,
 8005944:	4b80      	ldr	r3, [pc, #512]	@ (8005b48 <main+0x3ac>)
 8005946:	9303      	str	r3, [sp, #12]
 8005948:	2308      	movs	r3, #8
 800594a:	9302      	str	r3, [sp, #8]
 800594c:	4b7d      	ldr	r3, [pc, #500]	@ (8005b44 <main+0x3a8>)
 800594e:	9301      	str	r3, [sp, #4]
 8005950:	2302      	movs	r3, #2
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	4b7b      	ldr	r3, [pc, #492]	@ (8005b44 <main+0x3a8>)
 8005956:	220c      	movs	r2, #12
 8005958:	4975      	ldr	r1, [pc, #468]	@ (8005b30 <main+0x394>)
 800595a:	2003      	movs	r0, #3
 800595c:	f001 fdb6 	bl	80074cc <Motor_Init>
            &htim5, TIM_CHANNEL_4,
            M4_IN1_GPIO_Port, M4_IN1_Pin,
            M4_IN2_GPIO_Port, M4_IN2_Pin,
            &htim2);

  Servo_Init(&servo1, &htim8, TIM_CHANNEL_1, Servo_1_GPIO_Port, Servo_1_Pin);
 8005960:	2340      	movs	r3, #64	@ 0x40
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	4b77      	ldr	r3, [pc, #476]	@ (8005b44 <main+0x3a8>)
 8005966:	2200      	movs	r2, #0
 8005968:	4978      	ldr	r1, [pc, #480]	@ (8005b4c <main+0x3b0>)
 800596a:	4879      	ldr	r0, [pc, #484]	@ (8005b50 <main+0x3b4>)
 800596c:	f7ff fab2 	bl	8004ed4 <Servo_Init>
  Servo_Init(&servo2, &htim8, TIM_CHANNEL_2, Servo_2_GPIO_Port, Servo_2_Pin);
 8005970:	2380      	movs	r3, #128	@ 0x80
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	4b73      	ldr	r3, [pc, #460]	@ (8005b44 <main+0x3a8>)
 8005976:	2204      	movs	r2, #4
 8005978:	4974      	ldr	r1, [pc, #464]	@ (8005b4c <main+0x3b0>)
 800597a:	4876      	ldr	r0, [pc, #472]	@ (8005b54 <main+0x3b8>)
 800597c:	f7ff faaa 	bl	8004ed4 <Servo_Init>
  Servo_Init(&servo3, &htim9, TIM_CHANNEL_1, Servo_3_GPIO_Port, Servo_3_Pin);
 8005980:	2320      	movs	r3, #32
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	4b68      	ldr	r3, [pc, #416]	@ (8005b28 <main+0x38c>)
 8005986:	2200      	movs	r2, #0
 8005988:	4973      	ldr	r1, [pc, #460]	@ (8005b58 <main+0x3bc>)
 800598a:	4874      	ldr	r0, [pc, #464]	@ (8005b5c <main+0x3c0>)
 800598c:	f7ff faa2 	bl	8004ed4 <Servo_Init>
  Servo_Init(&servo4, &htim9, TIM_CHANNEL_2, Servo_4_GPIO_Port, Servo_4_Pin);
 8005990:	2340      	movs	r3, #64	@ 0x40
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	4b64      	ldr	r3, [pc, #400]	@ (8005b28 <main+0x38c>)
 8005996:	2204      	movs	r2, #4
 8005998:	496f      	ldr	r1, [pc, #444]	@ (8005b58 <main+0x3bc>)
 800599a:	4871      	ldr	r0, [pc, #452]	@ (8005b60 <main+0x3c4>)
 800599c:	f7ff fa9a 	bl	8004ed4 <Servo_Init>
  Servo_Init(&servo5, &htim10, TIM_CHANNEL_1, Servo_5_GPIO_Port, Servo_5_Pin);
 80059a0:	2340      	movs	r3, #64	@ 0x40
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	4b6f      	ldr	r3, [pc, #444]	@ (8005b64 <main+0x3c8>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	496f      	ldr	r1, [pc, #444]	@ (8005b68 <main+0x3cc>)
 80059aa:	4870      	ldr	r0, [pc, #448]	@ (8005b6c <main+0x3d0>)
 80059ac:	f7ff fa92 	bl	8004ed4 <Servo_Init>

  prev_time = HAL_GetTick();
 80059b0:	f004 ffd4 	bl	800a95c <HAL_GetTick>
 80059b4:	4603      	mov	r3, r0
 80059b6:	4a6e      	ldr	r2, [pc, #440]	@ (8005b70 <main+0x3d4>)
 80059b8:	6013      	str	r3, [r2, #0]

  /*------------------------------------MPU6050 DMP执行部分-------------------------------------*/
    OLED_ShowString(3,1,"yaw:");
 80059ba:	4a6e      	ldr	r2, [pc, #440]	@ (8005b74 <main+0x3d8>)
 80059bc:	2101      	movs	r1, #1
 80059be:	2003      	movs	r0, #3
 80059c0:	f7ff f9b6 	bl	8004d30 <OLED_ShowString>
    OLED_ShowString(3,9,"TAR:");
 80059c4:	4a6c      	ldr	r2, [pc, #432]	@ (8005b78 <main+0x3dc>)
 80059c6:	2109      	movs	r1, #9
 80059c8:	2003      	movs	r0, #3
 80059ca:	f7ff f9b1 	bl	8004d30 <OLED_ShowString>

  
  // 设置目标偏航角为当前偏航角
  target_yaw = yaw;
 80059ce:	4b6b      	ldr	r3, [pc, #428]	@ (8005b7c <main+0x3e0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a6b      	ldr	r2, [pc, #428]	@ (8005b80 <main+0x3e4>)
 80059d4:	6013      	str	r3, [r2, #0]
  
  // 重置PID控制器，避免积分项累积
  PID_Reset(&pid_yaw);
 80059d6:	486b      	ldr	r0, [pc, #428]	@ (8005b84 <main+0x3e8>)
 80059d8:	f003 fa1c 	bl	8008e14 <PID_Reset>
  PID_Reset(&pid_encoder);
 80059dc:	486a      	ldr	r0, [pc, #424]	@ (8005b88 <main+0x3ec>)
 80059de:	f003 fa19 	bl	8008e14 <PID_Reset>
  OLED_Clear_Part(1,1,5);
 80059e2:	2205      	movs	r2, #5
 80059e4:	2101      	movs	r1, #1
 80059e6:	2001      	movs	r0, #1
 80059e8:	f7ff f8fe 	bl	8004be8 <OLED_Clear_Part>
  OLED_ShowString(1, 6, "mm");
 80059ec:	4a67      	ldr	r2, [pc, #412]	@ (8005b8c <main+0x3f0>)
 80059ee:	2106      	movs	r1, #6
 80059f0:	2001      	movs	r0, #1
 80059f2:	f7ff f99d 	bl	8004d30 <OLED_ShowString>
  OLED_ShowString(1, 14, "mm");
 80059f6:	4a65      	ldr	r2, [pc, #404]	@ (8005b8c <main+0x3f0>)
 80059f8:	210e      	movs	r1, #14
 80059fa:	2001      	movs	r0, #1
 80059fc:	f7ff f998 	bl	8004d30 <OLED_ShowString>
  OLED_ShowString(2, 6, "mm");
 8005a00:	4a62      	ldr	r2, [pc, #392]	@ (8005b8c <main+0x3f0>)
 8005a02:	2106      	movs	r1, #6
 8005a04:	2002      	movs	r0, #2
 8005a06:	f7ff f993 	bl	8004d30 <OLED_ShowString>
  OLED_ShowString(2, 14, "mm");
 8005a0a:	4a60      	ldr	r2, [pc, #384]	@ (8005b8c <main+0x3f0>)
 8005a0c:	210e      	movs	r1, #14
 8005a0e:	2002      	movs	r0, #2
 8005a10:	f7ff f98e 	bl	8004d30 <OLED_ShowString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  start_start = HAL_GetTick();
 8005a14:	f004 ffa2 	bl	800a95c <HAL_GetTick>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	4a5d      	ldr	r2, [pc, #372]	@ (8005b90 <main+0x3f4>)
 8005a1c:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uint32_t current_time = HAL_GetTick();
 8005a1e:	f004 ff9d 	bl	800a95c <HAL_GetTick>
 8005a22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    
    // 添加延时，确保超声波传感器有足够的时间完成测量
    // HAL_Delay(50);  // 增加延时到50ms，给传感器更多恢复时间

    /*----------------------------------------------------------------------------US100传感器执行部分-------------------------------------------------------------*/
    US100_GetAllValidDistances(distances);
 8005a26:	485b      	ldr	r0, [pc, #364]	@ (8005b94 <main+0x3f8>)
 8005a28:	f004 fbba 	bl	800a1a0 <US100_GetAllValidDistances>
    
    while (distances[1]==0)
 8005a2c:	e002      	b.n	8005a34 <main+0x298>
    {
      US100_GetAllValidDistances(distances);
 8005a2e:	4859      	ldr	r0, [pc, #356]	@ (8005b94 <main+0x3f8>)
 8005a30:	f004 fbb6 	bl	800a1a0 <US100_GetAllValidDistances>
    while (distances[1]==0)
 8005a34:	4b57      	ldr	r3, [pc, #348]	@ (8005b94 <main+0x3f8>)
 8005a36:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a42:	d0f4      	beq.n	8005a2e <main+0x292>
    }

    if (current_time - oled_prev_time >= 100) {  // 每100ms更新一次显示
 8005a44:	4b54      	ldr	r3, [pc, #336]	@ (8005b98 <main+0x3fc>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b63      	cmp	r3, #99	@ 0x63
 8005a50:	d933      	bls.n	8005aba <main+0x31e>
        // 显示超声波距离，即使某些传感器没有数据也显示
        OLED_ShowNum(1, 1, distances[0], 5);  // 左前
 8005a52:	4b50      	ldr	r3, [pc, #320]	@ (8005b94 <main+0x3f8>)
 8005a54:	edd3 7a00 	vldr	s15, [r3]
 8005a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a5c:	2305      	movs	r3, #5
 8005a5e:	ee17 2a90 	vmov	r2, s15
 8005a62:	2101      	movs	r1, #1
 8005a64:	2001      	movs	r0, #1
 8005a66:	f7ff f9a1 	bl	8004dac <OLED_ShowNum>
        OLED_ShowNum(1, 9, distances[1], 5);  // 右前
 8005a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8005b94 <main+0x3f8>)
 8005a6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a74:	2305      	movs	r3, #5
 8005a76:	ee17 2a90 	vmov	r2, s15
 8005a7a:	2109      	movs	r1, #9
 8005a7c:	2001      	movs	r0, #1
 8005a7e:	f7ff f995 	bl	8004dac <OLED_ShowNum>
        OLED_ShowNum(2, 1, distances[2], 5);  // 左后
 8005a82:	4b44      	ldr	r3, [pc, #272]	@ (8005b94 <main+0x3f8>)
 8005a84:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a8c:	2305      	movs	r3, #5
 8005a8e:	ee17 2a90 	vmov	r2, s15
 8005a92:	2101      	movs	r1, #1
 8005a94:	2002      	movs	r0, #2
 8005a96:	f7ff f989 	bl	8004dac <OLED_ShowNum>
        OLED_ShowNum(2, 9, distances[3], 5);  // 右后
 8005a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8005b94 <main+0x3f8>)
 8005a9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005aa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa4:	2305      	movs	r3, #5
 8005aa6:	ee17 2a90 	vmov	r2, s15
 8005aaa:	2109      	movs	r1, #9
 8005aac:	2002      	movs	r0, #2
 8005aae:	f7ff f97d 	bl	8004dac <OLED_ShowNum>
        oled_prev_time = current_time;
 8005ab2:	4a39      	ldr	r2, [pc, #228]	@ (8005b98 <main+0x3fc>)
 8005ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ab8:	6013      	str	r3, [r2, #0]
    }

    if(delay_flag) 
 8005aba:	4b38      	ldr	r3, [pc, #224]	@ (8005b9c <main+0x400>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d006      	beq.n	8005ad0 <main+0x334>
    {
      HAL_Delay(500);
 8005ac2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005ac6:	f004 ff55 	bl	800a974 <HAL_Delay>
      delay_flag=false;
 8005aca:	4b34      	ldr	r3, [pc, #208]	@ (8005b9c <main+0x400>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	701a      	strb	r2, [r3, #0]
    /*---------------------------------------------------------------电机执行部分---------------------------------------------------------------------------------*/
    // straight_us100(distances[0]);
    // Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, 60, &yaw, &target_yaw);
    // Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, 60, &yaw, &target_yaw);
    // Update_Target_Yaw(&yaw, &target_yaw);
    OLED_ShowChar(3,5,yaw >= 0 ? '+' : '-'); 
 8005ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8005b7c <main+0x3e0>)
 8005ad2:	edd3 7a00 	vldr	s15, [r3]
 8005ad6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ade:	db5f      	blt.n	8005ba0 <main+0x404>
 8005ae0:	232b      	movs	r3, #43	@ 0x2b
 8005ae2:	e05e      	b.n	8005ba2 <main+0x406>
 8005ae4:	20000454 	.word	0x20000454
 8005ae8:	2000091c 	.word	0x2000091c
 8005aec:	20000456 	.word	0x20000456
 8005af0:	2000088c 	.word	0x2000088c
 8005af4:	200006b4 	.word	0x200006b4
 8005af8:	66666667 	.word	0x66666667
 8005afc:	08012680 	.word	0x08012680
 8005b00:	0801268c 	.word	0x0801268c
 8005b04:	08012694 	.word	0x08012694
 8005b08:	200008d4 	.word	0x200008d4
 8005b0c:	200004d0 	.word	0x200004d0
 8005b10:	200004bc 	.word	0x200004bc
 8005b14:	200009ac 	.word	0x200009ac
 8005b18:	200004f8 	.word	0x200004f8
 8005b1c:	20000964 	.word	0x20000964
 8005b20:	200004e4 	.word	0x200004e4
 8005b24:	2000054c 	.word	0x2000054c
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	40021800 	.word	0x40021800
 8005b30:	2000066c 	.word	0x2000066c
 8005b34:	20000624 	.word	0x20000624
 8005b38:	40020c00 	.word	0x40020c00
 8005b3c:	200005dc 	.word	0x200005dc
 8005b40:	40020400 	.word	0x40020400
 8005b44:	40020800 	.word	0x40020800
 8005b48:	20000594 	.word	0x20000594
 8005b4c:	200006fc 	.word	0x200006fc
 8005b50:	20000458 	.word	0x20000458
 8005b54:	2000046c 	.word	0x2000046c
 8005b58:	20000744 	.word	0x20000744
 8005b5c:	20000480 	.word	0x20000480
 8005b60:	20000494 	.word	0x20000494
 8005b64:	40021400 	.word	0x40021400
 8005b68:	2000078c 	.word	0x2000078c
 8005b6c:	200004a8 	.word	0x200004a8
 8005b70:	2000040c 	.word	0x2000040c
 8005b74:	08012698 	.word	0x08012698
 8005b78:	080126a0 	.word	0x080126a0
 8005b7c:	20000518 	.word	0x20000518
 8005b80:	20000514 	.word	0x20000514
 8005b84:	20000074 	.word	0x20000074
 8005b88:	2000005c 	.word	0x2000005c
 8005b8c:	080126a8 	.word	0x080126a8
 8005b90:	2000044c 	.word	0x2000044c
 8005b94:	20000038 	.word	0x20000038
 8005b98:	20000410 	.word	0x20000410
 8005b9c:	2000004e 	.word	0x2000004e
 8005ba0:	232d      	movs	r3, #45	@ 0x2d
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	2105      	movs	r1, #5
 8005ba6:	2003      	movs	r0, #3
 8005ba8:	f7ff f86a 	bl	8004c80 <OLED_ShowChar>
    OLED_ShowChar(3,13,target_yaw >= 0 ? '+' : '-'); 
 8005bac:	4bba      	ldr	r3, [pc, #744]	@ (8005e98 <main+0x6fc>)
 8005bae:	edd3 7a00 	vldr	s15, [r3]
 8005bb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bba:	db01      	blt.n	8005bc0 <main+0x424>
 8005bbc:	232b      	movs	r3, #43	@ 0x2b
 8005bbe:	e000      	b.n	8005bc2 <main+0x426>
 8005bc0:	232d      	movs	r3, #45	@ 0x2d
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	210d      	movs	r1, #13
 8005bc6:	2003      	movs	r0, #3
 8005bc8:	f7ff f85a 	bl	8004c80 <OLED_ShowChar>
    OLED_ShowNum(3,14,fabsf(target_yaw),3);
 8005bcc:	4bb2      	ldr	r3, [pc, #712]	@ (8005e98 <main+0x6fc>)
 8005bce:	edd3 7a00 	vldr	s15, [r3]
 8005bd2:	eef0 7ae7 	vabs.f32	s15, s15
 8005bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bda:	2303      	movs	r3, #3
 8005bdc:	ee17 2a90 	vmov	r2, s15
 8005be0:	210e      	movs	r1, #14
 8005be2:	2003      	movs	r0, #3
 8005be4:	f7ff f8e2 	bl	8004dac <OLED_ShowNum>
    OLED_ShowNum(3,6,fabsf(yaw),3);
 8005be8:	4bac      	ldr	r3, [pc, #688]	@ (8005e9c <main+0x700>)
 8005bea:	edd3 7a00 	vldr	s15, [r3]
 8005bee:	eef0 7ae7 	vabs.f32	s15, s15
 8005bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	ee17 2a90 	vmov	r2, s15
 8005bfc:	2106      	movs	r1, #6
 8005bfe:	2003      	movs	r0, #3
 8005c00:	f7ff f8d4 	bl	8004dac <OLED_ShowNum>
    
    OLED_ShowNum(4,1,path,2);  // 显示毫秒
 8005c04:	4ba6      	ldr	r3, [pc, #664]	@ (8005ea0 <main+0x704>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	2302      	movs	r3, #2
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	2004      	movs	r0, #4
 8005c0e:	f7ff f8cd 	bl	8004dac <OLED_ShowNum>
    // OLED_ShowNum(4,4,time,4); OLED_ShowNum(4,10,time_start,4);
    meandistances(distances);
 8005c12:	48a4      	ldr	r0, [pc, #656]	@ (8005ea4 <main+0x708>)
 8005c14:	f7ff fc70 	bl	80054f8 <meandistances>


    if (start_flag)
 8005c18:	4ba3      	ldr	r3, [pc, #652]	@ (8005ea8 <main+0x70c>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d02b      	beq.n	8005c78 <main+0x4dc>
    {
      start_now = HAL_GetTick();
 8005c20:	f004 fe9c 	bl	800a95c <HAL_GetTick>
 8005c24:	4603      	mov	r3, r0
 8005c26:	4aa1      	ldr	r2, [pc, #644]	@ (8005eac <main+0x710>)
 8005c28:	6013      	str	r3, [r2, #0]
      if (start_now - start_start <= 5000)
 8005c2a:	4ba0      	ldr	r3, [pc, #640]	@ (8005eac <main+0x710>)
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4ba0      	ldr	r3, [pc, #640]	@ (8005eb0 <main+0x714>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d818      	bhi.n	8005c6e <main+0x4d2>
      {
          Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, 60, &yaw, &target_yaw);
 8005c3c:	4b96      	ldr	r3, [pc, #600]	@ (8005e98 <main+0x6fc>)
 8005c3e:	9302      	str	r3, [sp, #8]
 8005c40:	4b96      	ldr	r3, [pc, #600]	@ (8005e9c <main+0x700>)
 8005c42:	9301      	str	r3, [sp, #4]
 8005c44:	233c      	movs	r3, #60	@ 0x3c
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	2303      	movs	r3, #3
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	2000      	movs	r0, #0
 8005c50:	f002 f824 	bl	8007c9c <Motor_Straight>
          Adjust_Left_Motors_By_Distance(MOTOR_1, MOTOR_3, distances[0], 30.0f);
 8005c54:	4b93      	ldr	r3, [pc, #588]	@ (8005ea4 <main+0x708>)
 8005c56:	edd3 7a00 	vldr	s15, [r3]
 8005c5a:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8005c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8005c62:	2102      	movs	r1, #2
 8005c64:	2000      	movs	r0, #0
 8005c66:	f002 fa3f 	bl	80080e8 <Adjust_Left_Motors_By_Distance>
      }else{
    	  start_flag = false;
      }
      continue;
 8005c6a:	f001 bba1 	b.w	80073b0 <main+0x1c14>
    	  start_flag = false;
 8005c6e:	4b8e      	ldr	r3, [pc, #568]	@ (8005ea8 <main+0x70c>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
      continue;
 8005c74:	f001 bb9c 	b.w	80073b0 <main+0x1c14>
    }
    


    switch (path)
 8005c78:	4b89      	ldr	r3, [pc, #548]	@ (8005ea0 <main+0x704>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b0c      	cmp	r3, #12
 8005c7e:	f63f aece 	bhi.w	8005a1e <main+0x282>
 8005c82:	a201      	add	r2, pc, #4	@ (adr r2, 8005c88 <main+0x4ec>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005cbd 	.word	0x08005cbd
 8005c8c:	08005ec9 	.word	0x08005ec9
 8005c90:	08006045 	.word	0x08006045
 8005c94:	08006233 	.word	0x08006233
 8005c98:	080063b5 	.word	0x080063b5
 8005c9c:	080065ad 	.word	0x080065ad
 8005ca0:	0800672d 	.word	0x0800672d
 8005ca4:	0800692d 	.word	0x0800692d
 8005ca8:	08006aaf 	.word	0x08006aaf
 8005cac:	08006ca7 	.word	0x08006ca7
 8005cb0:	08006e6d 	.word	0x08006e6d
 8005cb4:	0800701f 	.word	0x0800701f
 8005cb8:	080071df 	.word	0x080071df
    {
    case 0: {
      // 参数定义
      const float TARGET_DISTANCE = 1000.0f;   // 目标保持距离
 8005cbc:	4b7d      	ldr	r3, [pc, #500]	@ (8005eb4 <main+0x718>)
 8005cbe:	623b      	str	r3, [r7, #32]
      const float DECEL_RANGE = 300.0f;      // 减速区间范围（80~180mm）
 8005cc0:	4b7d      	ldr	r3, [pc, #500]	@ (8005eb8 <main+0x71c>)
 8005cc2:	61fb      	str	r3, [r7, #28]
      const uint8_t MIN_SPEED = 10;          // 最小速度（靠近时）
 8005cc4:	230a      	movs	r3, #10
 8005cc6:	76fb      	strb	r3, [r7, #27]
      const uint8_t MAX_SPEED = 60;          // 最大速度（远端时）
 8005cc8:	233c      	movs	r3, #60	@ 0x3c
 8005cca:	76bb      	strb	r3, [r7, #26]
  
      float current_distance = distances[1]; 
 8005ccc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005cd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cd4:	4a73      	ldr	r2, [pc, #460]	@ (8005ea4 <main+0x708>)
 8005cd6:	6852      	ldr	r2, [r2, #4]
 8005cd8:	601a      	str	r2, [r3, #0]
  
      // 速度计算逻辑
      uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 8005cda:	7ebb      	ldrb	r3, [r7, #26]
 8005cdc:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
  
      if (current_distance <= TARGET_DISTANCE && mean[1] <=TARGET_DISTANCE) {
 8005ce0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005ce4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce8:	ed93 7a00 	vldr	s14, [r3]
 8005cec:	edd7 7a08 	vldr	s15, [r7, #32]
 8005cf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf8:	d82d      	bhi.n	8005d56 <main+0x5ba>
 8005cfa:	4b70      	ldr	r3, [pc, #448]	@ (8005ebc <main+0x720>)
 8005cfc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d00:	ed97 7a08 	vldr	s14, [r7, #32]
 8005d04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0c:	db23      	blt.n	8005d56 <main+0x5ba>
          // 区域3：到达目标距离（≤80mm）
          motor_speed = MIN_SPEED;
 8005d0e:	7efb      	ldrb	r3, [r7, #27]
 8005d10:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
  
          // 执行路径切换逻辑
          if( mean[1] <=100 && current_distance<=100) {
 8005d14:	4b69      	ldr	r3, [pc, #420]	@ (8005ebc <main+0x720>)
 8005d16:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d1a:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8005ec0 <main+0x724>
 8005d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d26:	f200 8086 	bhi.w	8005e36 <main+0x69a>
 8005d2a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005d2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d32:	edd3 7a00 	vldr	s15, [r3]
 8005d36:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8005ec0 <main+0x724>
 8005d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d42:	d900      	bls.n	8005d46 <main+0x5aa>
 8005d44:	e077      	b.n	8005e36 <main+0x69a>
            path += 1;
 8005d46:	4b56      	ldr	r3, [pc, #344]	@ (8005ea0 <main+0x704>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	4a54      	ldr	r2, [pc, #336]	@ (8005ea0 <main+0x704>)
 8005d4e:	6013      	str	r3, [r2, #0]
            PID_ResetAll(); // 重置所有PID控制器
 8005d50:	f7ff fd0c 	bl	800576c <PID_ResetAll>
          if( mean[1] <=100 && current_distance<=100) {
 8005d54:	e06f      	b.n	8005e36 <main+0x69a>
        }
      } 
      else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE) && mean[1] <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8005d56:	ed97 7a08 	vldr	s14, [r7, #32]
 8005d5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d62:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005d66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d6a:	ed93 7a00 	vldr	s14, [r3]
 8005d6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d76:	d85b      	bhi.n	8005e30 <main+0x694>
 8005d78:	4b50      	ldr	r3, [pc, #320]	@ (8005ebc <main+0x720>)
 8005d7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8005d7e:	edd7 6a08 	vldr	s13, [r7, #32]
 8005d82:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d92:	d84d      	bhi.n	8005e30 <main+0x694>
          // 区域2：减速区间（70~170mm）
          // 距离越近速度越慢，线性变化：170mm->60, 70mm->10
          float distance_from_target = current_distance - TARGET_DISTANCE;
 8005d94:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d9c:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8005da0:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8005da4:	ed92 7a00 	vldr	s14, [r2]
 8005da8:	edd7 7a08 	vldr	s15, [r7, #32]
 8005dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005db0:	edc3 7a00 	vstr	s15, [r3]
          float ratio = 1.0f - (distance_from_target / DECEL_RANGE);
 8005db4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dbc:	edd3 6a00 	vldr	s13, [r3]
 8005dc0:	ed97 7a07 	vldr	s14, [r7, #28]
 8005dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dc8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005dcc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005dd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dd8:	edc3 7a00 	vstr	s15, [r3]
          motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 8005ddc:	7eba      	ldrb	r2, [r7, #26]
 8005dde:	7efb      	ldrb	r3, [r7, #27]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005dee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005df2:	edd3 7a00 	vldr	s15, [r3]
 8005df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dfe:	edc7 7a01 	vstr	s15, [r7, #4]
 8005e02:	793b      	ldrb	r3, [r7, #4]
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	7efb      	ldrb	r3, [r7, #27]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
          motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8005e0e:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8005e12:	7efb      	ldrb	r3, [r7, #27]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d307      	bcc.n	8005e28 <main+0x68c>
 8005e18:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8005e1c:	7ebb      	ldrb	r3, [r7, #26]
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	bf28      	it	cs
 8005e22:	4613      	movcs	r3, r2
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	e000      	b.n	8005e2a <main+0x68e>
 8005e28:	7efb      	ldrb	r3, [r7, #27]
 8005e2a:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
      else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE) && mean[1] <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8005e2e:	e002      	b.n	8005e36 <main+0x69a>
      }
      else {
          // 区域1：全速区间（>170mm）
          motor_speed = MAX_SPEED;
 8005e30:	7ebb      	ldrb	r3, [r7, #26]
 8005e32:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
      }
  
      // 执行带平滑过渡的电机控制
      static uint8_t last_speed = 0;
      motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8005e36:	4b23      	ldr	r3, [pc, #140]	@ (8005ec4 <main+0x728>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff fc45 	bl	80056d0 <smooth_speed_transition>
 8005e46:	4603      	mov	r3, r0
 8005e48:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
      last_speed = motor_speed;
 8005e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ec4 <main+0x728>)
 8005e4e:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8005e52:	7013      	strb	r3, [r2, #0]
  
      Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8005e54:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8005e58:	b21b      	sxth	r3, r3
 8005e5a:	4a0f      	ldr	r2, [pc, #60]	@ (8005e98 <main+0x6fc>)
 8005e5c:	9202      	str	r2, [sp, #8]
 8005e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8005e9c <main+0x700>)
 8005e60:	9201      	str	r2, [sp, #4]
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	2303      	movs	r3, #3
 8005e66:	2202      	movs	r2, #2
 8005e68:	2101      	movs	r1, #1
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	f001 ff16 	bl	8007c9c <Motor_Straight>
      
      // 使用左侧电机调整
      Adjust_Left_Motors_By_Distance(MOTOR_1, MOTOR_3, distances[0], 30.0f);
 8005e70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ea4 <main+0x708>)
 8005e72:	edd3 7a00 	vldr	s15, [r3]
 8005e76:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8005e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e7e:	2102      	movs	r1, #2
 8005e80:	2000      	movs	r0, #0
 8005e82:	f002 f931 	bl	80080e8 <Adjust_Left_Motors_By_Distance>
  
      OLED_ShowNum(4, 4, motor_speed, 2);
 8005e86:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	2104      	movs	r1, #4
 8005e8e:	2004      	movs	r0, #4
 8005e90:	f7fe ff8c 	bl	8004dac <OLED_ShowNum>
      break;
 8005e94:	f001 ba8c 	b.w	80073b0 <main+0x1c14>
 8005e98:	20000514 	.word	0x20000514
 8005e9c:	20000518 	.word	0x20000518
 8005ea0:	20000414 	.word	0x20000414
 8005ea4:	20000038 	.word	0x20000038
 8005ea8:	2000004c 	.word	0x2000004c
 8005eac:	20000450 	.word	0x20000450
 8005eb0:	2000044c 	.word	0x2000044c
 8005eb4:	447a0000 	.word	0x447a0000
 8005eb8:	43960000 	.word	0x43960000
 8005ebc:	20000434 	.word	0x20000434
 8005ec0:	42c80000 	.word	0x42c80000
 8005ec4:	2000050c 	.word	0x2000050c
  }
    
      case 1: {
        // 参数定义
        const float TARGET_DISTANCE = 80.0f;   // 目标保持距离
 8005ec8:	4bbf      	ldr	r3, [pc, #764]	@ (80061c8 <main+0xa2c>)
 8005eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        const float DECEL_RANGE = 100.0f;      // 减速区间范围（80~170mm）
 8005ecc:	4bbf      	ldr	r3, [pc, #764]	@ (80061cc <main+0xa30>)
 8005ece:	63bb      	str	r3, [r7, #56]	@ 0x38
        const uint8_t MIN_SPEED = 4;          // 最小速度（靠近时）
 8005ed0:	2304      	movs	r3, #4
 8005ed2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        const uint8_t MAX_SPEED = 60;          // 最大速度（远端时）
 8005ed6:	233c      	movs	r3, #60	@ 0x3c
 8005ed8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    
        // 获取当前检测距离（使用第4个传感器）
        float current_distance = distances[3]; 
 8005edc:	4bbc      	ldr	r3, [pc, #752]	@ (80061d0 <main+0xa34>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	633b      	str	r3, [r7, #48]	@ 0x30
    
        // 速度计算逻辑
        uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 8005ee2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005ee6:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
    
        if (current_distance <= TARGET_DISTANCE) {
 8005eea:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8005eee:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005ef2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efa:	d814      	bhi.n	8005f26 <main+0x78a>
            // 区域3：到达目标距离（≤80mm）
            motor_speed = MIN_SPEED;
 8005efc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005f00:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
    
            // 执行路径切换逻辑
            if(current_distance<=32) {
 8005f04:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005f08:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 80061d4 <main+0xa38>
 8005f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f14:	d858      	bhi.n	8005fc8 <main+0x82c>
                path += 1;
 8005f16:	4bb0      	ldr	r3, [pc, #704]	@ (80061d8 <main+0xa3c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	4aae      	ldr	r2, [pc, #696]	@ (80061d8 <main+0xa3c>)
 8005f1e:	6013      	str	r3, [r2, #0]
                PID_ResetAll(); // 重置所有PID控制器
 8005f20:	f7ff fc24 	bl	800576c <PID_ResetAll>
 8005f24:	e050      	b.n	8005fc8 <main+0x82c>
            }
        } 
        else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8005f26:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005f2a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f32:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8005f36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3e:	d83f      	bhi.n	8005fc0 <main+0x824>
            // 区域2：减速区间（80~180mm）
            // 距离越近速度越慢，线性变化：180mm->60, 80mm->10
            float distance_from_target = current_distance - TARGET_DISTANCE;
 8005f40:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8005f44:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f4c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            float ratio = 1.0f - (distance_from_target / DECEL_RANGE);
 8005f50:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8005f54:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8005f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f64:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 8005f68:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8005f6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f7a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f86:	edc7 7a01 	vstr	s15, [r7, #4]
 8005f8a:	793b      	ldrb	r3, [r7, #4]
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005f92:	4413      	add	r3, r2
 8005f94:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
            motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8005f98:	f897 2112 	ldrb.w	r2, [r7, #274]	@ 0x112
 8005f9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d308      	bcc.n	8005fb6 <main+0x81a>
 8005fa4:	f897 2112 	ldrb.w	r2, [r7, #274]	@ 0x112
 8005fa8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005fac:	4293      	cmp	r3, r2
 8005fae:	bf28      	it	cs
 8005fb0:	4613      	movcs	r3, r2
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	e001      	b.n	8005fba <main+0x81e>
 8005fb6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005fba:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
 8005fbe:	e003      	b.n	8005fc8 <main+0x82c>
        }
        else {
            // 区域1：全速区间（>170mm）
            motor_speed = MAX_SPEED;
 8005fc0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005fc4:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
        }
    
        // 执行带平滑过渡的电机控制
        static uint8_t last_speed = 0;
        motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8005fc8:	4b84      	ldr	r3, [pc, #528]	@ (80061dc <main+0xa40>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	f897 2112 	ldrb.w	r2, [r7, #274]	@ 0x112
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff fb7c 	bl	80056d0 <smooth_speed_transition>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
        last_speed = motor_speed;
 8005fde:	4a7f      	ldr	r2, [pc, #508]	@ (80061dc <main+0xa40>)
 8005fe0:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 8005fe4:	7013      	strb	r3, [r2, #0]
    
        Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8005fe6:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 8005fea:	b21b      	sxth	r3, r3
 8005fec:	4a7c      	ldr	r2, [pc, #496]	@ (80061e0 <main+0xa44>)
 8005fee:	9202      	str	r2, [sp, #8]
 8005ff0:	4a7c      	ldr	r2, [pc, #496]	@ (80061e4 <main+0xa48>)
 8005ff2:	9201      	str	r2, [sp, #4]
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	f001 fc2d 	bl	800785c <Motor_Rightward>
        
        // 使用前后电机调整
        float avg_distance = (distances[1] + distances[2]) / 2.0f;
 8006002:	4b73      	ldr	r3, [pc, #460]	@ (80061d0 <main+0xa34>)
 8006004:	ed93 7a01 	vldr	s14, [r3, #4]
 8006008:	4b71      	ldr	r3, [pc, #452]	@ (80061d0 <main+0xa34>)
 800600a:	edd3 7a02 	vldr	s15, [r3, #8]
 800600e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006012:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800601a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        Adjust_Motors_By_FrontBack_Distance(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, avg_distance, 30.0f);
 800601e:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8006022:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8006026:	2302      	movs	r3, #2
 8006028:	2201      	movs	r2, #1
 800602a:	2103      	movs	r1, #3
 800602c:	2000      	movs	r0, #0
 800602e:	f002 fb6b 	bl	8008708 <Adjust_Motors_By_FrontBack_Distance>
    
        OLED_ShowNum(4, 4, motor_speed, 2);
 8006032:	f897 2112 	ldrb.w	r2, [r7, #274]	@ 0x112
 8006036:	2302      	movs	r3, #2
 8006038:	2104      	movs	r1, #4
 800603a:	2004      	movs	r0, #4
 800603c:	f7fe feb6 	bl	8004dac <OLED_ShowNum>
        break;
 8006040:	f001 b9b6 	b.w	80073b0 <main+0x1c14>
    }
    
    case 2:
      if (path_change!=2)
 8006044:	4b68      	ldr	r3, [pc, #416]	@ (80061e8 <main+0xa4c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b02      	cmp	r3, #2
 800604a:	f000 80d9 	beq.w	8006200 <main+0xa64>
      {
        if ((distances[0]>=70&& mean[0]>=70 && path_change==0)||(distances[0]<=70&& mean[0]<=70&& path_change==1))
 800604e:	4b60      	ldr	r3, [pc, #384]	@ (80061d0 <main+0xa34>)
 8006050:	edd3 7a00 	vldr	s15, [r3]
 8006054:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80061ec <main+0xa50>
 8006058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800605c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006060:	db0d      	blt.n	800607e <main+0x8e2>
 8006062:	4b63      	ldr	r3, [pc, #396]	@ (80061f0 <main+0xa54>)
 8006064:	edd3 7a00 	vldr	s15, [r3]
 8006068:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80061ec <main+0xa50>
 800606c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006074:	db03      	blt.n	800607e <main+0x8e2>
 8006076:	4b5c      	ldr	r3, [pc, #368]	@ (80061e8 <main+0xa4c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d017      	beq.n	80060ae <main+0x912>
 800607e:	4b54      	ldr	r3, [pc, #336]	@ (80061d0 <main+0xa34>)
 8006080:	edd3 7a00 	vldr	s15, [r3]
 8006084:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80061ec <main+0xa50>
 8006088:	eef4 7ac7 	vcmpe.f32	s15, s14
 800608c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006090:	d826      	bhi.n	80060e0 <main+0x944>
 8006092:	4b57      	ldr	r3, [pc, #348]	@ (80061f0 <main+0xa54>)
 8006094:	edd3 7a00 	vldr	s15, [r3]
 8006098:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80061ec <main+0xa50>
 800609c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a4:	d81c      	bhi.n	80060e0 <main+0x944>
 80060a6:	4b50      	ldr	r3, [pc, #320]	@ (80061e8 <main+0xa4c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d118      	bne.n	80060e0 <main+0x944>
        {
          Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -33, &yaw, &target_yaw);
 80060ae:	4b4c      	ldr	r3, [pc, #304]	@ (80061e0 <main+0xa44>)
 80060b0:	9302      	str	r3, [sp, #8]
 80060b2:	4b4c      	ldr	r3, [pc, #304]	@ (80061e4 <main+0xa48>)
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	f06f 0320 	mvn.w	r3, #32
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	2303      	movs	r3, #3
 80060be:	2202      	movs	r2, #2
 80060c0:	2101      	movs	r1, #1
 80060c2:	2000      	movs	r0, #0
 80060c4:	f001 fdea 	bl	8007c9c <Motor_Straight>
          // 使用右侧电机调整
          Adjust_Right_Motors_By_Distance(MOTOR_2, MOTOR_4, distances[3], 30.0f);
 80060c8:	4b41      	ldr	r3, [pc, #260]	@ (80061d0 <main+0xa34>)
 80060ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80060ce:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 80060d2:	eeb0 0a67 	vmov.f32	s0, s15
 80060d6:	2103      	movs	r1, #3
 80060d8:	2001      	movs	r0, #1
 80060da:	f002 f98d 	bl	80083f8 <Adjust_Right_Motors_By_Distance>
 80060de:	e0a6      	b.n	800622e <main+0xa92>
        }else if (distances[0]<=100&& mean[0]<=100 && path_change==0)
 80060e0:	4b3b      	ldr	r3, [pc, #236]	@ (80061d0 <main+0xa34>)
 80060e2:	edd3 7a00 	vldr	s15, [r3]
 80060e6:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80061f4 <main+0xa58>
 80060ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f2:	d82b      	bhi.n	800614c <main+0x9b0>
 80060f4:	4b3e      	ldr	r3, [pc, #248]	@ (80061f0 <main+0xa54>)
 80060f6:	edd3 7a00 	vldr	s15, [r3]
 80060fa:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80061f4 <main+0xa58>
 80060fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006106:	d821      	bhi.n	800614c <main+0x9b0>
 8006108:	4b37      	ldr	r3, [pc, #220]	@ (80061e8 <main+0xa4c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d11d      	bne.n	800614c <main+0x9b0>
        {
          if(flag){
 8006110:	4b39      	ldr	r3, [pc, #228]	@ (80061f8 <main+0xa5c>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d007      	beq.n	8006128 <main+0x98c>
            time_start = HAL_GetTick();
 8006118:	f004 fc20 	bl	800a95c <HAL_GetTick>
 800611c:	4603      	mov	r3, r0
 800611e:	4a37      	ldr	r2, [pc, #220]	@ (80061fc <main+0xa60>)
 8006120:	6013      	str	r3, [r2, #0]
            flag = false;
 8006122:	4b35      	ldr	r3, [pc, #212]	@ (80061f8 <main+0xa5c>)
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]
          }
          uint32_t time = HAL_GetTick();
 8006128:	f004 fc18 	bl	800a95c <HAL_GetTick>
 800612c:	6478      	str	r0, [r7, #68]	@ 0x44
          if(time - time_start >=110){
 800612e:	4b33      	ldr	r3, [pc, #204]	@ (80061fc <main+0xa60>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b6d      	cmp	r3, #109	@ 0x6d
 8006138:	d978      	bls.n	800622c <main+0xa90>
            path_change+=1;
 800613a:	4b2b      	ldr	r3, [pc, #172]	@ (80061e8 <main+0xa4c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3301      	adds	r3, #1
 8006140:	4a29      	ldr	r2, [pc, #164]	@ (80061e8 <main+0xa4c>)
 8006142:	6013      	str	r3, [r2, #0]
            flag = true;
 8006144:	4b2c      	ldr	r3, [pc, #176]	@ (80061f8 <main+0xa5c>)
 8006146:	2201      	movs	r2, #1
 8006148:	701a      	strb	r2, [r3, #0]
        {
 800614a:	e06f      	b.n	800622c <main+0xa90>
          }
        }else if (distances[0]>=70&& mean[0]>=70&& path_change==1)
 800614c:	4b20      	ldr	r3, [pc, #128]	@ (80061d0 <main+0xa34>)
 800614e:	edd3 7a00 	vldr	s15, [r3]
 8006152:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80061ec <main+0xa50>
 8006156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800615a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800615e:	da01      	bge.n	8006164 <main+0x9c8>
        PID_Reset(&pid_rear);
        PID_Reset(&pid_front);
        PID_Reset(&pid_position);
      }
        
      break;
 8006160:	f001 b914 	b.w	800738c <main+0x1bf0>
        }else if (distances[0]>=70&& mean[0]>=70&& path_change==1)
 8006164:	4b22      	ldr	r3, [pc, #136]	@ (80061f0 <main+0xa54>)
 8006166:	edd3 7a00 	vldr	s15, [r3]
 800616a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80061ec <main+0xa50>
 800616e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006176:	da01      	bge.n	800617c <main+0x9e0>
      break;
 8006178:	f001 b908 	b.w	800738c <main+0x1bf0>
        }else if (distances[0]>=70&& mean[0]>=70&& path_change==1)
 800617c:	4b1a      	ldr	r3, [pc, #104]	@ (80061e8 <main+0xa4c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b01      	cmp	r3, #1
 8006182:	f041 8103 	bne.w	800738c <main+0x1bf0>
          if(flag){
 8006186:	4b1c      	ldr	r3, [pc, #112]	@ (80061f8 <main+0xa5c>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <main+0xa02>
            time_start = HAL_GetTick();
 800618e:	f004 fbe5 	bl	800a95c <HAL_GetTick>
 8006192:	4603      	mov	r3, r0
 8006194:	4a19      	ldr	r2, [pc, #100]	@ (80061fc <main+0xa60>)
 8006196:	6013      	str	r3, [r2, #0]
            flag = false;
 8006198:	4b17      	ldr	r3, [pc, #92]	@ (80061f8 <main+0xa5c>)
 800619a:	2200      	movs	r2, #0
 800619c:	701a      	strb	r2, [r3, #0]
          uint32_t time = HAL_GetTick();
 800619e:	f004 fbdd 	bl	800a95c <HAL_GetTick>
 80061a2:	6438      	str	r0, [r7, #64]	@ 0x40
          if(time - time_start >=110){
 80061a4:	4b15      	ldr	r3, [pc, #84]	@ (80061fc <main+0xa60>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b6d      	cmp	r3, #109	@ 0x6d
 80061ae:	f241 80ed 	bls.w	800738c <main+0x1bf0>
            path_change+=1;
 80061b2:	4b0d      	ldr	r3, [pc, #52]	@ (80061e8 <main+0xa4c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3301      	adds	r3, #1
 80061b8:	4a0b      	ldr	r2, [pc, #44]	@ (80061e8 <main+0xa4c>)
 80061ba:	6013      	str	r3, [r2, #0]
            flag = true;
 80061bc:	4b0e      	ldr	r3, [pc, #56]	@ (80061f8 <main+0xa5c>)
 80061be:	2201      	movs	r2, #1
 80061c0:	701a      	strb	r2, [r3, #0]
      break;
 80061c2:	f001 b8e3 	b.w	800738c <main+0x1bf0>
 80061c6:	bf00      	nop
 80061c8:	42a00000 	.word	0x42a00000
 80061cc:	42c80000 	.word	0x42c80000
 80061d0:	20000038 	.word	0x20000038
 80061d4:	42000000 	.word	0x42000000
 80061d8:	20000414 	.word	0x20000414
 80061dc:	2000050d 	.word	0x2000050d
 80061e0:	20000514 	.word	0x20000514
 80061e4:	20000518 	.word	0x20000518
 80061e8:	20000418 	.word	0x20000418
 80061ec:	428c0000 	.word	0x428c0000
 80061f0:	20000434 	.word	0x20000434
 80061f4:	42c80000 	.word	0x42c80000
 80061f8:	2000004d 	.word	0x2000004d
 80061fc:	20000420 	.word	0x20000420
        path_change = 0;
 8006200:	4bba      	ldr	r3, [pc, #744]	@ (80064ec <main+0xd50>)
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
        path +=1;
 8006206:	4bba      	ldr	r3, [pc, #744]	@ (80064f0 <main+0xd54>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3301      	adds	r3, #1
 800620c:	4ab8      	ldr	r2, [pc, #736]	@ (80064f0 <main+0xd54>)
 800620e:	6013      	str	r3, [r2, #0]
        PID_Reset(&pid_yaw);        
 8006210:	48b8      	ldr	r0, [pc, #736]	@ (80064f4 <main+0xd58>)
 8006212:	f002 fdff 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_rear);
 8006216:	48b8      	ldr	r0, [pc, #736]	@ (80064f8 <main+0xd5c>)
 8006218:	f002 fdfc 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_front);
 800621c:	48b7      	ldr	r0, [pc, #732]	@ (80064fc <main+0xd60>)
 800621e:	f002 fdf9 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_position);
 8006222:	48b7      	ldr	r0, [pc, #732]	@ (8006500 <main+0xd64>)
 8006224:	f002 fdf6 	bl	8008e14 <PID_Reset>
      break;
 8006228:	f001 b8b0 	b.w	800738c <main+0x1bf0>
        {
 800622c:	bf00      	nop
      break;
 800622e:	f001 b8ad 	b.w	800738c <main+0x1bf0>

    case 3:{
      // 参数定义
      const float TARGET_DISTANCE = 80.0f;   // 目标保持距离
 8006232:	4bb4      	ldr	r3, [pc, #720]	@ (8006504 <main+0xd68>)
 8006234:	663b      	str	r3, [r7, #96]	@ 0x60
      const float DECEL_RANGE = 100.0f;      // 减速区间范围（70~170mm）
 8006236:	4bb4      	ldr	r3, [pc, #720]	@ (8006508 <main+0xd6c>)
 8006238:	65fb      	str	r3, [r7, #92]	@ 0x5c
      const uint8_t MIN_SPEED = -4;          // 最小速度（靠近时）
 800623a:	23fc      	movs	r3, #252	@ 0xfc
 800623c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
      const uint8_t MAX_SPEED = -60;          // 最大速度（远端时）
 8006240:	23c4      	movs	r3, #196	@ 0xc4
 8006242:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
  
      // 获取当前检测距离（使用第4个传感器）
      float current_distance = distances[0]; 
 8006246:	4bb1      	ldr	r3, [pc, #708]	@ (800650c <main+0xd70>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	657b      	str	r3, [r7, #84]	@ 0x54
  
      // 速度计算逻辑
      uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 800624c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8006250:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
  
      if (current_distance <= TARGET_DISTANCE) {
 8006254:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8006258:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800625c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006264:	d814      	bhi.n	8006290 <main+0xaf4>
          // 区域3：到达目标距离（≤70mm）
          motor_speed = MIN_SPEED;
 8006266:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800626a:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
  
          // 执行路径切换逻辑
          if(current_distance<=50) {
 800626e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8006272:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8006510 <main+0xd74>
 8006276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800627a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800627e:	d858      	bhi.n	8006332 <main+0xb96>
            path += 1;
 8006280:	4b9b      	ldr	r3, [pc, #620]	@ (80064f0 <main+0xd54>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3301      	adds	r3, #1
 8006286:	4a9a      	ldr	r2, [pc, #616]	@ (80064f0 <main+0xd54>)
 8006288:	6013      	str	r3, [r2, #0]
            PID_ResetAll(); // 重置所有PID控制器
 800628a:	f7ff fa6f 	bl	800576c <PID_ResetAll>
 800628e:	e050      	b.n	8006332 <main+0xb96>
          }
      } 
      else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8006290:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8006294:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8006298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800629c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80062a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a8:	d83f      	bhi.n	800632a <main+0xb8e>
          // 区域2：减速区间（70~170mm）
          // 距离越近速度越慢，线性变化：170mm->60, 70mm->10
          float distance_from_target = current_distance - TARGET_DISTANCE;
 80062aa:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80062ae:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80062b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062b6:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
          float ratio = 1.0f - (distance_from_target / DECEL_RANGE);
 80062ba:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80062be:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80062c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062ce:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
          motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 80062d2:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 80062d6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	ee07 3a90 	vmov	s15, r3
 80062e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062e4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80062e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80062f4:	793b      	ldrb	r3, [r7, #4]
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80062fc:	4413      	add	r3, r2
 80062fe:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
          motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8006302:	f897 2111 	ldrb.w	r2, [r7, #273]	@ 0x111
 8006306:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800630a:	429a      	cmp	r2, r3
 800630c:	d308      	bcc.n	8006320 <main+0xb84>
 800630e:	f897 2111 	ldrb.w	r2, [r7, #273]	@ 0x111
 8006312:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8006316:	4293      	cmp	r3, r2
 8006318:	bf28      	it	cs
 800631a:	4613      	movcs	r3, r2
 800631c:	b2db      	uxtb	r3, r3
 800631e:	e001      	b.n	8006324 <main+0xb88>
 8006320:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006324:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
 8006328:	e003      	b.n	8006332 <main+0xb96>
      }
      else {
          // 区域1：全速区间（>170mm）
          motor_speed = MAX_SPEED;
 800632a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800632e:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
      }
  
      // 执行带平滑过渡的电机控制
      static uint8_t last_speed = 0;
      motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8006332:	4b78      	ldr	r3, [pc, #480]	@ (8006514 <main+0xd78>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	f897 2111 	ldrb.w	r2, [r7, #273]	@ 0x111
 800633a:	4611      	mov	r1, r2
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff f9c7 	bl	80056d0 <smooth_speed_transition>
 8006342:	4603      	mov	r3, r0
 8006344:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
      last_speed = motor_speed;
 8006348:	4a72      	ldr	r2, [pc, #456]	@ (8006514 <main+0xd78>)
 800634a:	f897 3111 	ldrb.w	r3, [r7, #273]	@ 0x111
 800634e:	7013      	strb	r3, [r2, #0]
  
      Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -motor_speed, &yaw, &target_yaw);
 8006350:	f897 3111 	ldrb.w	r3, [r7, #273]	@ 0x111
 8006354:	b29b      	uxth	r3, r3
 8006356:	425b      	negs	r3, r3
 8006358:	b29b      	uxth	r3, r3
 800635a:	b21b      	sxth	r3, r3
 800635c:	4a6e      	ldr	r2, [pc, #440]	@ (8006518 <main+0xd7c>)
 800635e:	9202      	str	r2, [sp, #8]
 8006360:	4a6e      	ldr	r2, [pc, #440]	@ (800651c <main+0xd80>)
 8006362:	9201      	str	r2, [sp, #4]
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	2303      	movs	r3, #3
 8006368:	2202      	movs	r2, #2
 800636a:	2101      	movs	r1, #1
 800636c:	2000      	movs	r0, #0
 800636e:	f001 fa75 	bl	800785c <Motor_Rightward>
      
      // 使用前后电机调整
      float avg_distance = (distances[1] + distances[2]) / 2.0f;
 8006372:	4b66      	ldr	r3, [pc, #408]	@ (800650c <main+0xd70>)
 8006374:	ed93 7a01 	vldr	s14, [r3, #4]
 8006378:	4b64      	ldr	r3, [pc, #400]	@ (800650c <main+0xd70>)
 800637a:	edd3 7a02 	vldr	s15, [r3, #8]
 800637e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006382:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800638a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      Adjust_Motors_By_FrontBack_Distance(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, avg_distance, 30.0f);
 800638e:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8006392:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8006396:	2302      	movs	r3, #2
 8006398:	2201      	movs	r2, #1
 800639a:	2103      	movs	r1, #3
 800639c:	2000      	movs	r0, #0
 800639e:	f002 f9b3 	bl	8008708 <Adjust_Motors_By_FrontBack_Distance>
  
      OLED_ShowNum(4, 4, motor_speed, 2);
 80063a2:	f897 2111 	ldrb.w	r2, [r7, #273]	@ 0x111
 80063a6:	2302      	movs	r3, #2
 80063a8:	2104      	movs	r1, #4
 80063aa:	2004      	movs	r0, #4
 80063ac:	f7fe fcfe 	bl	8004dac <OLED_ShowNum>
      break;
 80063b0:	f000 bffe 	b.w	80073b0 <main+0x1c14>
  }

    case 4:

      if (path_change!=2)
 80063b4:	4b4d      	ldr	r3, [pc, #308]	@ (80064ec <main+0xd50>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	f000 80de 	beq.w	800657a <main+0xdde>
      {
        if ((distances[3]>=70 && mean[3]>=70  && path_change==0)||(distances[3]<=70 && mean[3]<=70 && path_change==1))
 80063be:	4b53      	ldr	r3, [pc, #332]	@ (800650c <main+0xd70>)
 80063c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80063c4:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8006520 <main+0xd84>
 80063c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d0:	db0d      	blt.n	80063ee <main+0xc52>
 80063d2:	4b54      	ldr	r3, [pc, #336]	@ (8006524 <main+0xd88>)
 80063d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80063d8:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8006520 <main+0xd84>
 80063dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e4:	db03      	blt.n	80063ee <main+0xc52>
 80063e6:	4b41      	ldr	r3, [pc, #260]	@ (80064ec <main+0xd50>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d017      	beq.n	800641e <main+0xc82>
 80063ee:	4b47      	ldr	r3, [pc, #284]	@ (800650c <main+0xd70>)
 80063f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80063f4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8006520 <main+0xd84>
 80063f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006400:	d826      	bhi.n	8006450 <main+0xcb4>
 8006402:	4b48      	ldr	r3, [pc, #288]	@ (8006524 <main+0xd88>)
 8006404:	edd3 7a03 	vldr	s15, [r3, #12]
 8006408:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8006520 <main+0xd84>
 800640c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006414:	d81c      	bhi.n	8006450 <main+0xcb4>
 8006416:	4b35      	ldr	r3, [pc, #212]	@ (80064ec <main+0xd50>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d118      	bne.n	8006450 <main+0xcb4>
        {
          Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 800641e:	4b3e      	ldr	r3, [pc, #248]	@ (8006518 <main+0xd7c>)
 8006420:	9302      	str	r3, [sp, #8]
 8006422:	4b3e      	ldr	r3, [pc, #248]	@ (800651c <main+0xd80>)
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	f06f 031d 	mvn.w	r3, #29
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	2303      	movs	r3, #3
 800642e:	2202      	movs	r2, #2
 8006430:	2101      	movs	r1, #1
 8006432:	2000      	movs	r0, #0
 8006434:	f001 fc32 	bl	8007c9c <Motor_Straight>
          // 使用左侧电机调整
          Adjust_Left_Motors_By_Distance(MOTOR_1, MOTOR_3, distances[0], 30.0f);
 8006438:	4b34      	ldr	r3, [pc, #208]	@ (800650c <main+0xd70>)
 800643a:	edd3 7a00 	vldr	s15, [r3]
 800643e:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8006442:	eeb0 0a67 	vmov.f32	s0, s15
 8006446:	2102      	movs	r1, #2
 8006448:	2000      	movs	r0, #0
 800644a:	f001 fe4d 	bl	80080e8 <Adjust_Left_Motors_By_Distance>
 800644e:	e0ab      	b.n	80065a8 <main+0xe0c>
        }else if (distances[3]<=70&& mean[3]<=70&& path_change==0)
 8006450:	4b2e      	ldr	r3, [pc, #184]	@ (800650c <main+0xd70>)
 8006452:	edd3 7a03 	vldr	s15, [r3, #12]
 8006456:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8006520 <main+0xd84>
 800645a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800645e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006462:	d82b      	bhi.n	80064bc <main+0xd20>
 8006464:	4b2f      	ldr	r3, [pc, #188]	@ (8006524 <main+0xd88>)
 8006466:	edd3 7a03 	vldr	s15, [r3, #12]
 800646a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006520 <main+0xd84>
 800646e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006476:	d821      	bhi.n	80064bc <main+0xd20>
 8006478:	4b1c      	ldr	r3, [pc, #112]	@ (80064ec <main+0xd50>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d11d      	bne.n	80064bc <main+0xd20>
        {
          if(flag){
 8006480:	4b29      	ldr	r3, [pc, #164]	@ (8006528 <main+0xd8c>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d007      	beq.n	8006498 <main+0xcfc>
            time_start = HAL_GetTick();
 8006488:	f004 fa68 	bl	800a95c <HAL_GetTick>
 800648c:	4603      	mov	r3, r0
 800648e:	4a27      	ldr	r2, [pc, #156]	@ (800652c <main+0xd90>)
 8006490:	6013      	str	r3, [r2, #0]
            flag = false;
 8006492:	4b25      	ldr	r3, [pc, #148]	@ (8006528 <main+0xd8c>)
 8006494:	2200      	movs	r2, #0
 8006496:	701a      	strb	r2, [r3, #0]
          }
          uint32_t time = HAL_GetTick();
 8006498:	f004 fa60 	bl	800a95c <HAL_GetTick>
 800649c:	66b8      	str	r0, [r7, #104]	@ 0x68
          if(time - time_start >=100){
 800649e:	4b23      	ldr	r3, [pc, #140]	@ (800652c <main+0xd90>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b63      	cmp	r3, #99	@ 0x63
 80064a8:	d97d      	bls.n	80065a6 <main+0xe0a>
            path_change+=1;
 80064aa:	4b10      	ldr	r3, [pc, #64]	@ (80064ec <main+0xd50>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3301      	adds	r3, #1
 80064b0:	4a0e      	ldr	r2, [pc, #56]	@ (80064ec <main+0xd50>)
 80064b2:	6013      	str	r3, [r2, #0]
            flag = true;
 80064b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006528 <main+0xd8c>)
 80064b6:	2201      	movs	r2, #1
 80064b8:	701a      	strb	r2, [r3, #0]
        {
 80064ba:	e074      	b.n	80065a6 <main+0xe0a>
          }
        }else if (distances[3]>=70&& mean[3]>=70&& path_change==1)
 80064bc:	4b13      	ldr	r3, [pc, #76]	@ (800650c <main+0xd70>)
 80064be:	edd3 7a03 	vldr	s15, [r3, #12]
 80064c2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006520 <main+0xd84>
 80064c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ce:	da01      	bge.n	80064d4 <main+0xd38>
        PID_Reset(&pid_rear);
        PID_Reset(&pid_front);
        PID_Reset(&pid_position);
      }
        
      break;
 80064d0:	f000 bf5f 	b.w	8007392 <main+0x1bf6>
        }else if (distances[3]>=70&& mean[3]>=70&& path_change==1)
 80064d4:	4b13      	ldr	r3, [pc, #76]	@ (8006524 <main+0xd88>)
 80064d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80064da:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8006520 <main+0xd84>
 80064de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e6:	da23      	bge.n	8006530 <main+0xd94>
      break;
 80064e8:	f000 bf53 	b.w	8007392 <main+0x1bf6>
 80064ec:	20000418 	.word	0x20000418
 80064f0:	20000414 	.word	0x20000414
 80064f4:	20000074 	.word	0x20000074
 80064f8:	200000a4 	.word	0x200000a4
 80064fc:	2000008c 	.word	0x2000008c
 8006500:	200000bc 	.word	0x200000bc
 8006504:	42a00000 	.word	0x42a00000
 8006508:	42c80000 	.word	0x42c80000
 800650c:	20000038 	.word	0x20000038
 8006510:	42480000 	.word	0x42480000
 8006514:	2000050e 	.word	0x2000050e
 8006518:	20000514 	.word	0x20000514
 800651c:	20000518 	.word	0x20000518
 8006520:	428c0000 	.word	0x428c0000
 8006524:	20000434 	.word	0x20000434
 8006528:	2000004d 	.word	0x2000004d
 800652c:	20000420 	.word	0x20000420
        }else if (distances[3]>=70&& mean[3]>=70&& path_change==1)
 8006530:	4bc1      	ldr	r3, [pc, #772]	@ (8006838 <main+0x109c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b01      	cmp	r3, #1
 8006536:	f040 872c 	bne.w	8007392 <main+0x1bf6>
          if(flag){
 800653a:	4bc0      	ldr	r3, [pc, #768]	@ (800683c <main+0x10a0>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <main+0xdb6>
            time_start = HAL_GetTick();
 8006542:	f004 fa0b 	bl	800a95c <HAL_GetTick>
 8006546:	4603      	mov	r3, r0
 8006548:	4abd      	ldr	r2, [pc, #756]	@ (8006840 <main+0x10a4>)
 800654a:	6013      	str	r3, [r2, #0]
            flag = false;
 800654c:	4bbb      	ldr	r3, [pc, #748]	@ (800683c <main+0x10a0>)
 800654e:	2200      	movs	r2, #0
 8006550:	701a      	strb	r2, [r3, #0]
          uint32_t time = HAL_GetTick();
 8006552:	f004 fa03 	bl	800a95c <HAL_GetTick>
 8006556:	6678      	str	r0, [r7, #100]	@ 0x64
          if(time - time_start >=100){
 8006558:	4bb9      	ldr	r3, [pc, #740]	@ (8006840 <main+0x10a4>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b63      	cmp	r3, #99	@ 0x63
 8006562:	f240 8716 	bls.w	8007392 <main+0x1bf6>
            path_change+=1;
 8006566:	4bb4      	ldr	r3, [pc, #720]	@ (8006838 <main+0x109c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3301      	adds	r3, #1
 800656c:	4ab2      	ldr	r2, [pc, #712]	@ (8006838 <main+0x109c>)
 800656e:	6013      	str	r3, [r2, #0]
            flag = true;
 8006570:	4bb2      	ldr	r3, [pc, #712]	@ (800683c <main+0x10a0>)
 8006572:	2201      	movs	r2, #1
 8006574:	701a      	strb	r2, [r3, #0]
      break;
 8006576:	f000 bf0c 	b.w	8007392 <main+0x1bf6>
        path_change = 0;
 800657a:	4baf      	ldr	r3, [pc, #700]	@ (8006838 <main+0x109c>)
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
        path +=1;
 8006580:	4bb0      	ldr	r3, [pc, #704]	@ (8006844 <main+0x10a8>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3301      	adds	r3, #1
 8006586:	4aaf      	ldr	r2, [pc, #700]	@ (8006844 <main+0x10a8>)
 8006588:	6013      	str	r3, [r2, #0]
        PID_Reset(&pid_yaw);        
 800658a:	48af      	ldr	r0, [pc, #700]	@ (8006848 <main+0x10ac>)
 800658c:	f002 fc42 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_rear);
 8006590:	48ae      	ldr	r0, [pc, #696]	@ (800684c <main+0x10b0>)
 8006592:	f002 fc3f 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_front);
 8006596:	48ae      	ldr	r0, [pc, #696]	@ (8006850 <main+0x10b4>)
 8006598:	f002 fc3c 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_position);
 800659c:	48ad      	ldr	r0, [pc, #692]	@ (8006854 <main+0x10b8>)
 800659e:	f002 fc39 	bl	8008e14 <PID_Reset>
      break;
 80065a2:	f000 bef6 	b.w	8007392 <main+0x1bf6>
        {
 80065a6:	bf00      	nop
      break;
 80065a8:	f000 bef3 	b.w	8007392 <main+0x1bf6>

    case 5:{
      // 参数定义
      const float TARGET_DISTANCE = 80.0f;   // 目标保持距离
 80065ac:	4baa      	ldr	r3, [pc, #680]	@ (8006858 <main+0x10bc>)
 80065ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      const float DECEL_RANGE = 100.0f;      // 减速区间范围（70~170mm）
 80065b2:	4baa      	ldr	r3, [pc, #680]	@ (800685c <main+0x10c0>)
 80065b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      const uint8_t MIN_SPEED = 4;          // 最小速度（靠近时）
 80065b8:	2304      	movs	r3, #4
 80065ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      const uint8_t MAX_SPEED = 60;          // 最大速度（远端时）
 80065be:	233c      	movs	r3, #60	@ 0x3c
 80065c0:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
  
      // 获取当前检测距离（使用第4个传感器）
      float current_distance = distances[3]; 
 80065c4:	4ba6      	ldr	r3, [pc, #664]	@ (8006860 <main+0x10c4>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  
      // 速度计算逻辑
      uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 80065ca:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80065ce:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
  
      if (current_distance <= TARGET_DISTANCE) {
 80065d2:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80065d6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80065da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e2:	d814      	bhi.n	800660e <main+0xe72>
          // 区域3：到达目标距离（≤70mm）
          motor_speed = MIN_SPEED;
 80065e4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80065e8:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
  
          // 执行路径切换逻辑
          if(current_distance<=50) {
 80065ec:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80065f0:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8006864 <main+0x10c8>
 80065f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065fc:	d858      	bhi.n	80066b0 <main+0xf14>
            path += 1;
 80065fe:	4b91      	ldr	r3, [pc, #580]	@ (8006844 <main+0x10a8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	4a8f      	ldr	r2, [pc, #572]	@ (8006844 <main+0x10a8>)
 8006606:	6013      	str	r3, [r2, #0]
            PID_ResetAll(); // 重置所有PID控制器
 8006608:	f7ff f8b0 	bl	800576c <PID_ResetAll>
 800660c:	e050      	b.n	80066b0 <main+0xf14>
          }
      } 
      else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 800660e:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8006612:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8006616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800661a:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800661e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006626:	d83f      	bhi.n	80066a8 <main+0xf0c>
          // 区域2：减速区间（70~170mm）
          // 距离越近速度越慢，线性变化：170mm->60, 70mm->10
          float distance_from_target = current_distance - TARGET_DISTANCE;
 8006628:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800662c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8006630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006634:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
          float ratio = 1.0f - (distance_from_target / DECEL_RANGE);
 8006638:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 800663c:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8006640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006644:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800664c:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
          motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 8006650:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8006654:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006662:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8006666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800666a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800666e:	edc7 7a01 	vstr	s15, [r7, #4]
 8006672:	793b      	ldrb	r3, [r7, #4]
 8006674:	b2da      	uxtb	r2, r3
 8006676:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800667a:	4413      	add	r3, r2
 800667c:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
          motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8006680:	f897 2110 	ldrb.w	r2, [r7, #272]	@ 0x110
 8006684:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006688:	429a      	cmp	r2, r3
 800668a:	d308      	bcc.n	800669e <main+0xf02>
 800668c:	f897 2110 	ldrb.w	r2, [r7, #272]	@ 0x110
 8006690:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006694:	4293      	cmp	r3, r2
 8006696:	bf28      	it	cs
 8006698:	4613      	movcs	r3, r2
 800669a:	b2db      	uxtb	r3, r3
 800669c:	e001      	b.n	80066a2 <main+0xf06>
 800669e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80066a2:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
 80066a6:	e003      	b.n	80066b0 <main+0xf14>
      }
      else {
          // 区域1：全速区间（>170mm）
          motor_speed = MAX_SPEED;
 80066a8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80066ac:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
      }
  
      // 执行带平滑过渡的电机控制
      static uint8_t last_speed = 0;
      motor_speed = smooth_speed_transition(last_speed, motor_speed);
 80066b0:	4b6d      	ldr	r3, [pc, #436]	@ (8006868 <main+0x10cc>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	f897 2110 	ldrb.w	r2, [r7, #272]	@ 0x110
 80066b8:	4611      	mov	r1, r2
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff f808 	bl	80056d0 <smooth_speed_transition>
 80066c0:	4603      	mov	r3, r0
 80066c2:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
      last_speed = motor_speed;
 80066c6:	4a68      	ldr	r2, [pc, #416]	@ (8006868 <main+0x10cc>)
 80066c8:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 80066cc:	7013      	strb	r3, [r2, #0]
  
      Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 80066ce:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 80066d2:	b21b      	sxth	r3, r3
 80066d4:	4a65      	ldr	r2, [pc, #404]	@ (800686c <main+0x10d0>)
 80066d6:	9202      	str	r2, [sp, #8]
 80066d8:	4a65      	ldr	r2, [pc, #404]	@ (8006870 <main+0x10d4>)
 80066da:	9201      	str	r2, [sp, #4]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	2303      	movs	r3, #3
 80066e0:	2202      	movs	r2, #2
 80066e2:	2101      	movs	r1, #1
 80066e4:	2000      	movs	r0, #0
 80066e6:	f001 f8b9 	bl	800785c <Motor_Rightward>
      
      // 使用前后电机调整
      float avg_distance = (distances[1] + distances[2]) / 2.0f;
 80066ea:	4b5d      	ldr	r3, [pc, #372]	@ (8006860 <main+0x10c4>)
 80066ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80066f0:	4b5b      	ldr	r3, [pc, #364]	@ (8006860 <main+0x10c4>)
 80066f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80066f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066fa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80066fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006702:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
      Adjust_Motors_By_FrontBack_Distance(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, avg_distance, 30.0f);
 8006706:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 800670a:	ed97 0a1b 	vldr	s0, [r7, #108]	@ 0x6c
 800670e:	2302      	movs	r3, #2
 8006710:	2201      	movs	r2, #1
 8006712:	2103      	movs	r1, #3
 8006714:	2000      	movs	r0, #0
 8006716:	f001 fff7 	bl	8008708 <Adjust_Motors_By_FrontBack_Distance>
  
      OLED_ShowNum(4, 4, motor_speed, 2);
 800671a:	f897 2110 	ldrb.w	r2, [r7, #272]	@ 0x110
 800671e:	2302      	movs	r3, #2
 8006720:	2104      	movs	r1, #4
 8006722:	2004      	movs	r0, #4
 8006724:	f7fe fb42 	bl	8004dac <OLED_ShowNum>
      break;
 8006728:	f000 be42 	b.w	80073b0 <main+0x1c14>
  }

      case 6:
      if (path_change!=2)
 800672c:	4b42      	ldr	r3, [pc, #264]	@ (8006838 <main+0x109c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b02      	cmp	r3, #2
 8006732:	f000 80e2 	beq.w	80068fa <main+0x115e>
      {
        if ((distances[0]>=70 && mean[0]>=70 && path_change==0)||(distances[0]<=70 && mean[0]<=70 && path_change==1))
 8006736:	4b4a      	ldr	r3, [pc, #296]	@ (8006860 <main+0x10c4>)
 8006738:	edd3 7a00 	vldr	s15, [r3]
 800673c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8006874 <main+0x10d8>
 8006740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006748:	db0d      	blt.n	8006766 <main+0xfca>
 800674a:	4b4b      	ldr	r3, [pc, #300]	@ (8006878 <main+0x10dc>)
 800674c:	edd3 7a00 	vldr	s15, [r3]
 8006750:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8006874 <main+0x10d8>
 8006754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800675c:	db03      	blt.n	8006766 <main+0xfca>
 800675e:	4b36      	ldr	r3, [pc, #216]	@ (8006838 <main+0x109c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d017      	beq.n	8006796 <main+0xffa>
 8006766:	4b3e      	ldr	r3, [pc, #248]	@ (8006860 <main+0x10c4>)
 8006768:	edd3 7a00 	vldr	s15, [r3]
 800676c:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8006874 <main+0x10d8>
 8006770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006778:	d826      	bhi.n	80067c8 <main+0x102c>
 800677a:	4b3f      	ldr	r3, [pc, #252]	@ (8006878 <main+0x10dc>)
 800677c:	edd3 7a00 	vldr	s15, [r3]
 8006780:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8006874 <main+0x10d8>
 8006784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800678c:	d81c      	bhi.n	80067c8 <main+0x102c>
 800678e:	4b2a      	ldr	r3, [pc, #168]	@ (8006838 <main+0x109c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d118      	bne.n	80067c8 <main+0x102c>
        {
          Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8006796:	4b35      	ldr	r3, [pc, #212]	@ (800686c <main+0x10d0>)
 8006798:	9302      	str	r3, [sp, #8]
 800679a:	4b35      	ldr	r3, [pc, #212]	@ (8006870 <main+0x10d4>)
 800679c:	9301      	str	r3, [sp, #4]
 800679e:	f06f 031d 	mvn.w	r3, #29
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	2303      	movs	r3, #3
 80067a6:	2202      	movs	r2, #2
 80067a8:	2101      	movs	r1, #1
 80067aa:	2000      	movs	r0, #0
 80067ac:	f001 fa76 	bl	8007c9c <Motor_Straight>
          // 使用右侧电机调整
          Adjust_Right_Motors_By_Distance(MOTOR_2, MOTOR_4, distances[3], 30.0f);
 80067b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006860 <main+0x10c4>)
 80067b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80067b6:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 80067ba:	eeb0 0a67 	vmov.f32	s0, s15
 80067be:	2103      	movs	r1, #3
 80067c0:	2001      	movs	r0, #1
 80067c2:	f001 fe19 	bl	80083f8 <Adjust_Right_Motors_By_Distance>
 80067c6:	e0af      	b.n	8006928 <main+0x118c>
        }else if (distances[0]<=70 && mean[0]<=70 && path_change==0)
 80067c8:	4b25      	ldr	r3, [pc, #148]	@ (8006860 <main+0x10c4>)
 80067ca:	edd3 7a00 	vldr	s15, [r3]
 80067ce:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8006874 <main+0x10d8>
 80067d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067da:	d84f      	bhi.n	800687c <main+0x10e0>
 80067dc:	4b26      	ldr	r3, [pc, #152]	@ (8006878 <main+0x10dc>)
 80067de:	edd3 7a00 	vldr	s15, [r3]
 80067e2:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8006874 <main+0x10d8>
 80067e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ee:	d845      	bhi.n	800687c <main+0x10e0>
 80067f0:	4b11      	ldr	r3, [pc, #68]	@ (8006838 <main+0x109c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d141      	bne.n	800687c <main+0x10e0>
        {
          if(flag){
 80067f8:	4b10      	ldr	r3, [pc, #64]	@ (800683c <main+0x10a0>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <main+0x1074>
            time_start = HAL_GetTick();
 8006800:	f004 f8ac 	bl	800a95c <HAL_GetTick>
 8006804:	4603      	mov	r3, r0
 8006806:	4a0e      	ldr	r2, [pc, #56]	@ (8006840 <main+0x10a4>)
 8006808:	6013      	str	r3, [r2, #0]
            flag = false;
 800680a:	4b0c      	ldr	r3, [pc, #48]	@ (800683c <main+0x10a0>)
 800680c:	2200      	movs	r2, #0
 800680e:	701a      	strb	r2, [r3, #0]
          }
          uint32_t time = HAL_GetTick();
 8006810:	f004 f8a4 	bl	800a95c <HAL_GetTick>
 8006814:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
          if(time - time_start >=100){
 8006818:	4b09      	ldr	r3, [pc, #36]	@ (8006840 <main+0x10a4>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b63      	cmp	r3, #99	@ 0x63
 8006824:	d97f      	bls.n	8006926 <main+0x118a>
            path_change+=1;
 8006826:	4b04      	ldr	r3, [pc, #16]	@ (8006838 <main+0x109c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3301      	adds	r3, #1
 800682c:	4a02      	ldr	r2, [pc, #8]	@ (8006838 <main+0x109c>)
 800682e:	6013      	str	r3, [r2, #0]
            flag = true;
 8006830:	4b02      	ldr	r3, [pc, #8]	@ (800683c <main+0x10a0>)
 8006832:	2201      	movs	r2, #1
 8006834:	701a      	strb	r2, [r3, #0]
        {
 8006836:	e076      	b.n	8006926 <main+0x118a>
 8006838:	20000418 	.word	0x20000418
 800683c:	2000004d 	.word	0x2000004d
 8006840:	20000420 	.word	0x20000420
 8006844:	20000414 	.word	0x20000414
 8006848:	20000074 	.word	0x20000074
 800684c:	200000a4 	.word	0x200000a4
 8006850:	2000008c 	.word	0x2000008c
 8006854:	200000bc 	.word	0x200000bc
 8006858:	42a00000 	.word	0x42a00000
 800685c:	42c80000 	.word	0x42c80000
 8006860:	20000038 	.word	0x20000038
 8006864:	42480000 	.word	0x42480000
 8006868:	2000050f 	.word	0x2000050f
 800686c:	20000514 	.word	0x20000514
 8006870:	20000518 	.word	0x20000518
 8006874:	428c0000 	.word	0x428c0000
 8006878:	20000434 	.word	0x20000434
          }
        }else if (distances[0]>=70 && mean[0]>=70 && path_change==1)
 800687c:	4bb3      	ldr	r3, [pc, #716]	@ (8006b4c <main+0x13b0>)
 800687e:	edd3 7a00 	vldr	s15, [r3]
 8006882:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8006b50 <main+0x13b4>
 8006886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800688a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800688e:	da01      	bge.n	8006894 <main+0x10f8>
        PID_Reset(&pid_rear);
        PID_Reset(&pid_front);
        PID_Reset(&pid_position);
      }
        
      break;
 8006890:	f000 bd82 	b.w	8007398 <main+0x1bfc>
        }else if (distances[0]>=70 && mean[0]>=70 && path_change==1)
 8006894:	4baf      	ldr	r3, [pc, #700]	@ (8006b54 <main+0x13b8>)
 8006896:	edd3 7a00 	vldr	s15, [r3]
 800689a:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8006b50 <main+0x13b4>
 800689e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a6:	da01      	bge.n	80068ac <main+0x1110>
      break;
 80068a8:	f000 bd76 	b.w	8007398 <main+0x1bfc>
        }else if (distances[0]>=70 && mean[0]>=70 && path_change==1)
 80068ac:	4baa      	ldr	r3, [pc, #680]	@ (8006b58 <main+0x13bc>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	f040 8571 	bne.w	8007398 <main+0x1bfc>
          if(flag){
 80068b6:	4ba9      	ldr	r3, [pc, #676]	@ (8006b5c <main+0x13c0>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d007      	beq.n	80068ce <main+0x1132>
            time_start = HAL_GetTick();
 80068be:	f004 f84d 	bl	800a95c <HAL_GetTick>
 80068c2:	4603      	mov	r3, r0
 80068c4:	4aa6      	ldr	r2, [pc, #664]	@ (8006b60 <main+0x13c4>)
 80068c6:	6013      	str	r3, [r2, #0]
            flag = false;
 80068c8:	4ba4      	ldr	r3, [pc, #656]	@ (8006b5c <main+0x13c0>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	701a      	strb	r2, [r3, #0]
          uint32_t time = HAL_GetTick();
 80068ce:	f004 f845 	bl	800a95c <HAL_GetTick>
 80068d2:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
          if(time - time_start >=100){
 80068d6:	4ba2      	ldr	r3, [pc, #648]	@ (8006b60 <main+0x13c4>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b63      	cmp	r3, #99	@ 0x63
 80068e2:	f240 8559 	bls.w	8007398 <main+0x1bfc>
            path_change+=1;
 80068e6:	4b9c      	ldr	r3, [pc, #624]	@ (8006b58 <main+0x13bc>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3301      	adds	r3, #1
 80068ec:	4a9a      	ldr	r2, [pc, #616]	@ (8006b58 <main+0x13bc>)
 80068ee:	6013      	str	r3, [r2, #0]
            flag = true;
 80068f0:	4b9a      	ldr	r3, [pc, #616]	@ (8006b5c <main+0x13c0>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	701a      	strb	r2, [r3, #0]
      break;
 80068f6:	f000 bd4f 	b.w	8007398 <main+0x1bfc>
        path_change = 0;
 80068fa:	4b97      	ldr	r3, [pc, #604]	@ (8006b58 <main+0x13bc>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
        path +=1;
 8006900:	4b98      	ldr	r3, [pc, #608]	@ (8006b64 <main+0x13c8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3301      	adds	r3, #1
 8006906:	4a97      	ldr	r2, [pc, #604]	@ (8006b64 <main+0x13c8>)
 8006908:	6013      	str	r3, [r2, #0]
        PID_Reset(&pid_yaw);        
 800690a:	4897      	ldr	r0, [pc, #604]	@ (8006b68 <main+0x13cc>)
 800690c:	f002 fa82 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_rear);
 8006910:	4896      	ldr	r0, [pc, #600]	@ (8006b6c <main+0x13d0>)
 8006912:	f002 fa7f 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_front);
 8006916:	4896      	ldr	r0, [pc, #600]	@ (8006b70 <main+0x13d4>)
 8006918:	f002 fa7c 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_position);
 800691c:	4895      	ldr	r0, [pc, #596]	@ (8006b74 <main+0x13d8>)
 800691e:	f002 fa79 	bl	8008e14 <PID_Reset>
      break;
 8006922:	f000 bd39 	b.w	8007398 <main+0x1bfc>
        {
 8006926:	bf00      	nop
      break;
 8006928:	f000 bd36 	b.w	8007398 <main+0x1bfc>

    case 7:{
        // 参数定义
        const float TARGET_DISTANCE = 80.0f;   // 目标保持距离
 800692c:	4b92      	ldr	r3, [pc, #584]	@ (8006b78 <main+0x13dc>)
 800692e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        const float DECEL_RANGE = 100.0f;      // 减速区间范围（70~170mm）
 8006932:	4b92      	ldr	r3, [pc, #584]	@ (8006b7c <main+0x13e0>)
 8006934:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        const uint8_t MIN_SPEED = -4;          // 最小速度（靠近时）
 8006938:	23fc      	movs	r3, #252	@ 0xfc
 800693a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        const uint8_t MAX_SPEED = -60;          // 最大速度（远端时）
 800693e:	23c4      	movs	r3, #196	@ 0xc4
 8006940:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    
        // 获取当前检测距离（使用第4个传感器）
        float current_distance = distances[0]; 
 8006944:	4b81      	ldr	r3, [pc, #516]	@ (8006b4c <main+0x13b0>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    
        // 速度计算逻辑
        uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 800694c:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
 8006950:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    
        if (current_distance <= TARGET_DISTANCE) {
 8006954:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8006958:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800695c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006964:	d814      	bhi.n	8006990 <main+0x11f4>
            // 区域3：到达目标距离（≤70mm）
            motor_speed = MIN_SPEED;
 8006966:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800696a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    
            // 执行路径切换逻辑
            if(current_distance<=50) {
 800696e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8006972:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8006b80 <main+0x13e4>
 8006976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800697a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800697e:	d858      	bhi.n	8006a32 <main+0x1296>
              path += 1;
 8006980:	4b78      	ldr	r3, [pc, #480]	@ (8006b64 <main+0x13c8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3301      	adds	r3, #1
 8006986:	4a77      	ldr	r2, [pc, #476]	@ (8006b64 <main+0x13c8>)
 8006988:	6013      	str	r3, [r2, #0]
              PID_ResetAll(); // 重置所有PID控制器
 800698a:	f7fe feef 	bl	800576c <PID_ResetAll>
 800698e:	e050      	b.n	8006a32 <main+0x1296>
            }
        } 
        else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8006990:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 8006994:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8006998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800699c:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 80069a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a8:	d83f      	bhi.n	8006a2a <main+0x128e>
            // 区域2：减速区间（70~170mm）
            // 距离越近速度越慢，线性变化：170mm->60, 70mm->10
            float distance_from_target = current_distance - TARGET_DISTANCE;
 80069aa:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 80069ae:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80069b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069b6:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            float ratio = 1.0f - (distance_from_target / DECEL_RANGE);
 80069ba:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 80069be:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80069c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069ce:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 80069d2:	f897 20a2 	ldrb.w	r2, [r7, #162]	@ 0xa2
 80069d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	ee07 3a90 	vmov	s15, r3
 80069e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069e4:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80069e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80069f4:	793b      	ldrb	r3, [r7, #4]
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80069fc:	4413      	add	r3, r2
 80069fe:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
            motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8006a02:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8006a06:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d308      	bcc.n	8006a20 <main+0x1284>
 8006a0e:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8006a12:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
 8006a16:	4293      	cmp	r3, r2
 8006a18:	bf28      	it	cs
 8006a1a:	4613      	movcs	r3, r2
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	e001      	b.n	8006a24 <main+0x1288>
 8006a20:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006a24:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8006a28:	e003      	b.n	8006a32 <main+0x1296>
        }
        else {
            // 区域1：全速区间（>170mm）
            motor_speed = MAX_SPEED;
 8006a2a:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
 8006a2e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        }
    
        // 执行带平滑过渡的电机控制
        static uint8_t last_speed = 0;
        motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8006a32:	4b54      	ldr	r3, [pc, #336]	@ (8006b84 <main+0x13e8>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe fe47 	bl	80056d0 <smooth_speed_transition>
 8006a42:	4603      	mov	r3, r0
 8006a44:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        last_speed = motor_speed;
 8006a48:	4a4e      	ldr	r2, [pc, #312]	@ (8006b84 <main+0x13e8>)
 8006a4a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8006a4e:	7013      	strb	r3, [r2, #0]
    
        Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8006a50:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8006a54:	b21b      	sxth	r3, r3
 8006a56:	4a4c      	ldr	r2, [pc, #304]	@ (8006b88 <main+0x13ec>)
 8006a58:	9202      	str	r2, [sp, #8]
 8006a5a:	4a4c      	ldr	r2, [pc, #304]	@ (8006b8c <main+0x13f0>)
 8006a5c:	9201      	str	r2, [sp, #4]
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	2303      	movs	r3, #3
 8006a62:	2202      	movs	r2, #2
 8006a64:	2101      	movs	r1, #1
 8006a66:	2000      	movs	r0, #0
 8006a68:	f000 fef8 	bl	800785c <Motor_Rightward>
        
        // 使用前后电机调整
        float avg_distance = (distances[1] + distances[2]) / 2.0f;
 8006a6c:	4b37      	ldr	r3, [pc, #220]	@ (8006b4c <main+0x13b0>)
 8006a6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8006a72:	4b36      	ldr	r3, [pc, #216]	@ (8006b4c <main+0x13b0>)
 8006a74:	edd3 7a02 	vldr	s15, [r3, #8]
 8006a78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a7c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006a80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a84:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        Adjust_Motors_By_FrontBack_Distance(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, avg_distance, 30.0f);
 8006a88:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8006a8c:	ed97 0a24 	vldr	s0, [r7, #144]	@ 0x90
 8006a90:	2302      	movs	r3, #2
 8006a92:	2201      	movs	r2, #1
 8006a94:	2103      	movs	r1, #3
 8006a96:	2000      	movs	r0, #0
 8006a98:	f001 fe36 	bl	8008708 <Adjust_Motors_By_FrontBack_Distance>
    
        OLED_ShowNum(4, 4, motor_speed, 2);
 8006a9c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	2104      	movs	r1, #4
 8006aa4:	2004      	movs	r0, #4
 8006aa6:	f7fe f981 	bl	8004dac <OLED_ShowNum>
        break;
 8006aaa:	f000 bc81 	b.w	80073b0 <main+0x1c14>
    }

    case 8:

      if (path_change!=2)
 8006aae:	4b2a      	ldr	r3, [pc, #168]	@ (8006b58 <main+0x13bc>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	f000 80e0 	beq.w	8006c78 <main+0x14dc>
      {
        if ((distances[3]>=70 && mean[3]>=70 && path_change==0)||(distances[3]<=70 && mean[3]<=70 && path_change==1))
 8006ab8:	4b24      	ldr	r3, [pc, #144]	@ (8006b4c <main+0x13b0>)
 8006aba:	edd3 7a03 	vldr	s15, [r3, #12]
 8006abe:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8006b50 <main+0x13b4>
 8006ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aca:	db0d      	blt.n	8006ae8 <main+0x134c>
 8006acc:	4b21      	ldr	r3, [pc, #132]	@ (8006b54 <main+0x13b8>)
 8006ace:	edd3 7a03 	vldr	s15, [r3, #12]
 8006ad2:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8006b50 <main+0x13b4>
 8006ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ade:	db03      	blt.n	8006ae8 <main+0x134c>
 8006ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b58 <main+0x13bc>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d017      	beq.n	8006b18 <main+0x137c>
 8006ae8:	4b18      	ldr	r3, [pc, #96]	@ (8006b4c <main+0x13b0>)
 8006aea:	edd3 7a03 	vldr	s15, [r3, #12]
 8006aee:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006b50 <main+0x13b4>
 8006af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006afa:	d849      	bhi.n	8006b90 <main+0x13f4>
 8006afc:	4b15      	ldr	r3, [pc, #84]	@ (8006b54 <main+0x13b8>)
 8006afe:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b02:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8006b50 <main+0x13b4>
 8006b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b0e:	d83f      	bhi.n	8006b90 <main+0x13f4>
 8006b10:	4b11      	ldr	r3, [pc, #68]	@ (8006b58 <main+0x13bc>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d13b      	bne.n	8006b90 <main+0x13f4>
        {
          Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8006b18:	4b1b      	ldr	r3, [pc, #108]	@ (8006b88 <main+0x13ec>)
 8006b1a:	9302      	str	r3, [sp, #8]
 8006b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8006b8c <main+0x13f0>)
 8006b1e:	9301      	str	r3, [sp, #4]
 8006b20:	f06f 031d 	mvn.w	r3, #29
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	2303      	movs	r3, #3
 8006b28:	2202      	movs	r2, #2
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	f001 f8b5 	bl	8007c9c <Motor_Straight>
          // 使用左侧电机调整
          Adjust_Left_Motors_By_Distance(MOTOR_1, MOTOR_3, distances[0], 30.0f);
 8006b32:	4b06      	ldr	r3, [pc, #24]	@ (8006b4c <main+0x13b0>)
 8006b34:	edd3 7a00 	vldr	s15, [r3]
 8006b38:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8006b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b40:	2102      	movs	r1, #2
 8006b42:	2000      	movs	r0, #0
 8006b44:	f001 fad0 	bl	80080e8 <Adjust_Left_Motors_By_Distance>
 8006b48:	e0ac      	b.n	8006ca4 <main+0x1508>
 8006b4a:	bf00      	nop
 8006b4c:	20000038 	.word	0x20000038
 8006b50:	428c0000 	.word	0x428c0000
 8006b54:	20000434 	.word	0x20000434
 8006b58:	20000418 	.word	0x20000418
 8006b5c:	2000004d 	.word	0x2000004d
 8006b60:	20000420 	.word	0x20000420
 8006b64:	20000414 	.word	0x20000414
 8006b68:	20000074 	.word	0x20000074
 8006b6c:	200000a4 	.word	0x200000a4
 8006b70:	2000008c 	.word	0x2000008c
 8006b74:	200000bc 	.word	0x200000bc
 8006b78:	42a00000 	.word	0x42a00000
 8006b7c:	42c80000 	.word	0x42c80000
 8006b80:	42480000 	.word	0x42480000
 8006b84:	20000510 	.word	0x20000510
 8006b88:	20000514 	.word	0x20000514
 8006b8c:	20000518 	.word	0x20000518
        }else if (distances[3]<=70 && mean[3]<=70 && path_change==0)
 8006b90:	4ba5      	ldr	r3, [pc, #660]	@ (8006e28 <main+0x168c>)
 8006b92:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b96:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8006e2c <main+0x1690>
 8006b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba2:	d82d      	bhi.n	8006c00 <main+0x1464>
 8006ba4:	4ba2      	ldr	r3, [pc, #648]	@ (8006e30 <main+0x1694>)
 8006ba6:	edd3 7a03 	vldr	s15, [r3, #12]
 8006baa:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8006e2c <main+0x1690>
 8006bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb6:	d823      	bhi.n	8006c00 <main+0x1464>
 8006bb8:	4b9e      	ldr	r3, [pc, #632]	@ (8006e34 <main+0x1698>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d11f      	bne.n	8006c00 <main+0x1464>
        {
          if(flag){
 8006bc0:	4b9d      	ldr	r3, [pc, #628]	@ (8006e38 <main+0x169c>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d007      	beq.n	8006bd8 <main+0x143c>
            time_start = HAL_GetTick();
 8006bc8:	f003 fec8 	bl	800a95c <HAL_GetTick>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	4a9b      	ldr	r2, [pc, #620]	@ (8006e3c <main+0x16a0>)
 8006bd0:	6013      	str	r3, [r2, #0]
            flag = false;
 8006bd2:	4b99      	ldr	r3, [pc, #612]	@ (8006e38 <main+0x169c>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	701a      	strb	r2, [r3, #0]
          }
          uint32_t time = HAL_GetTick();
 8006bd8:	f003 fec0 	bl	800a95c <HAL_GetTick>
 8006bdc:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
          if(time - time_start >=100){
 8006be0:	4b96      	ldr	r3, [pc, #600]	@ (8006e3c <main+0x16a0>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b63      	cmp	r3, #99	@ 0x63
 8006bec:	d959      	bls.n	8006ca2 <main+0x1506>
            path_change+=1;
 8006bee:	4b91      	ldr	r3, [pc, #580]	@ (8006e34 <main+0x1698>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	4a8f      	ldr	r2, [pc, #572]	@ (8006e34 <main+0x1698>)
 8006bf6:	6013      	str	r3, [r2, #0]
            flag = true;
 8006bf8:	4b8f      	ldr	r3, [pc, #572]	@ (8006e38 <main+0x169c>)
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	701a      	strb	r2, [r3, #0]
        {
 8006bfe:	e050      	b.n	8006ca2 <main+0x1506>
          }
        }else if (distances[3]>=70 && mean[3]>=70 && path_change==1)
 8006c00:	4b89      	ldr	r3, [pc, #548]	@ (8006e28 <main+0x168c>)
 8006c02:	edd3 7a03 	vldr	s15, [r3, #12]
 8006c06:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8006e2c <main+0x1690>
 8006c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c12:	da00      	bge.n	8006c16 <main+0x147a>
        PID_Reset(&pid_rear);
        PID_Reset(&pid_front);
        PID_Reset(&pid_position);
      }
        
      break;
 8006c14:	e3c3      	b.n	800739e <main+0x1c02>
        }else if (distances[3]>=70 && mean[3]>=70 && path_change==1)
 8006c16:	4b86      	ldr	r3, [pc, #536]	@ (8006e30 <main+0x1694>)
 8006c18:	edd3 7a03 	vldr	s15, [r3, #12]
 8006c1c:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8006e2c <main+0x1690>
 8006c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c28:	da00      	bge.n	8006c2c <main+0x1490>
      break;
 8006c2a:	e3b8      	b.n	800739e <main+0x1c02>
        }else if (distances[3]>=70 && mean[3]>=70 && path_change==1)
 8006c2c:	4b81      	ldr	r3, [pc, #516]	@ (8006e34 <main+0x1698>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	f040 83b4 	bne.w	800739e <main+0x1c02>
          if(flag){
 8006c36:	4b80      	ldr	r3, [pc, #512]	@ (8006e38 <main+0x169c>)
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d007      	beq.n	8006c4e <main+0x14b2>
            time_start = HAL_GetTick();
 8006c3e:	f003 fe8d 	bl	800a95c <HAL_GetTick>
 8006c42:	4603      	mov	r3, r0
 8006c44:	4a7d      	ldr	r2, [pc, #500]	@ (8006e3c <main+0x16a0>)
 8006c46:	6013      	str	r3, [r2, #0]
            flag = false;
 8006c48:	4b7b      	ldr	r3, [pc, #492]	@ (8006e38 <main+0x169c>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	701a      	strb	r2, [r3, #0]
          uint32_t time = HAL_GetTick();
 8006c4e:	f003 fe85 	bl	800a95c <HAL_GetTick>
 8006c52:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
          if(time - time_start >=100){
 8006c56:	4b79      	ldr	r3, [pc, #484]	@ (8006e3c <main+0x16a0>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2b63      	cmp	r3, #99	@ 0x63
 8006c62:	f240 839c 	bls.w	800739e <main+0x1c02>
            path_change+=1;
 8006c66:	4b73      	ldr	r3, [pc, #460]	@ (8006e34 <main+0x1698>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	4a71      	ldr	r2, [pc, #452]	@ (8006e34 <main+0x1698>)
 8006c6e:	6013      	str	r3, [r2, #0]
            flag = true;
 8006c70:	4b71      	ldr	r3, [pc, #452]	@ (8006e38 <main+0x169c>)
 8006c72:	2201      	movs	r2, #1
 8006c74:	701a      	strb	r2, [r3, #0]
      break;
 8006c76:	e392      	b.n	800739e <main+0x1c02>
        path_change = 0;
 8006c78:	4b6e      	ldr	r3, [pc, #440]	@ (8006e34 <main+0x1698>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
        path +=1;
 8006c7e:	4b70      	ldr	r3, [pc, #448]	@ (8006e40 <main+0x16a4>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3301      	adds	r3, #1
 8006c84:	4a6e      	ldr	r2, [pc, #440]	@ (8006e40 <main+0x16a4>)
 8006c86:	6013      	str	r3, [r2, #0]
        PID_Reset(&pid_yaw);        
 8006c88:	486e      	ldr	r0, [pc, #440]	@ (8006e44 <main+0x16a8>)
 8006c8a:	f002 f8c3 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_rear);
 8006c8e:	486e      	ldr	r0, [pc, #440]	@ (8006e48 <main+0x16ac>)
 8006c90:	f002 f8c0 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_front);
 8006c94:	486d      	ldr	r0, [pc, #436]	@ (8006e4c <main+0x16b0>)
 8006c96:	f002 f8bd 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_position);
 8006c9a:	486d      	ldr	r0, [pc, #436]	@ (8006e50 <main+0x16b4>)
 8006c9c:	f002 f8ba 	bl	8008e14 <PID_Reset>
      break;
 8006ca0:	e37d      	b.n	800739e <main+0x1c02>
        {
 8006ca2:	bf00      	nop
      break;
 8006ca4:	e37b      	b.n	800739e <main+0x1c02>

    case 9:{
      // 参数定义
      const float TARGET_DISTANCE = 80.0f;   // 目标保持距离
 8006ca6:	4b6b      	ldr	r3, [pc, #428]	@ (8006e54 <main+0x16b8>)
 8006ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
      const float DECEL_RANGE = 100.0f;      // 减速区间范围（70~170mm）
 8006cac:	4b6a      	ldr	r3, [pc, #424]	@ (8006e58 <main+0x16bc>)
 8006cae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      const uint8_t MIN_SPEED = 4;          // 最小速度（靠近时）
 8006cb2:	2304      	movs	r3, #4
 8006cb4:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
      const uint8_t MAX_SPEED = 60;          // 最大速度（远端时）
 8006cb8:	233c      	movs	r3, #60	@ 0x3c
 8006cba:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
  
      // 获取当前检测距离（使用第4个传感器）
      float current_distance = distances[3]; 
 8006cbe:	4b5a      	ldr	r3, [pc, #360]	@ (8006e28 <main+0x168c>)
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  
      // 速度计算逻辑
      uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 8006cc6:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8006cca:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
  
      if (current_distance <= TARGET_DISTANCE) {
 8006cce:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 8006cd2:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8006cd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cde:	d814      	bhi.n	8006d0a <main+0x156e>
          // 区域3：到达目标距离（≤70mm）
          motor_speed = MIN_SPEED;
 8006ce0:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8006ce4:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
  
          // 执行路径切换逻辑
          if(current_distance<=50) {
 8006ce8:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8006cec:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8006e5c <main+0x16c0>
 8006cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf8:	d858      	bhi.n	8006dac <main+0x1610>
            path += 1;
 8006cfa:	4b51      	ldr	r3, [pc, #324]	@ (8006e40 <main+0x16a4>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	4a4f      	ldr	r2, [pc, #316]	@ (8006e40 <main+0x16a4>)
 8006d02:	6013      	str	r3, [r2, #0]
            PID_ResetAll(); // 重置所有PID控制器
 8006d04:	f7fe fd32 	bl	800576c <PID_ResetAll>
 8006d08:	e050      	b.n	8006dac <main+0x1610>
          }
      } 
      else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8006d0a:	ed97 7a33 	vldr	s14, [r7, #204]	@ 0xcc
 8006d0e:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8006d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d16:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 8006d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d22:	d83f      	bhi.n	8006da4 <main+0x1608>
          // 区域2：减速区间（70~170mm）
          // 距离越近速度越慢，线性变化：170mm->60, 70mm->10
          float distance_from_target = current_distance - TARGET_DISTANCE;
 8006d24:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 8006d28:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8006d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d30:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
          float ratio = 1.0f - (distance_from_target / DECEL_RANGE);
 8006d34:	edd7 6a2f 	vldr	s13, [r7, #188]	@ 0xbc
 8006d38:	ed97 7a32 	vldr	s14, [r7, #200]	@ 0xc8
 8006d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d48:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
          motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 8006d4c:	f897 20c6 	ldrb.w	r2, [r7, #198]	@ 0xc6
 8006d50:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d5e:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8006d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d6a:	edc7 7a01 	vstr	s15, [r7, #4]
 8006d6e:	793b      	ldrb	r3, [r7, #4]
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8006d76:	4413      	add	r3, r2
 8006d78:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
          motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 8006d7c:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8006d80:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d308      	bcc.n	8006d9a <main+0x15fe>
 8006d88:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8006d8c:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8006d90:	4293      	cmp	r3, r2
 8006d92:	bf28      	it	cs
 8006d94:	4613      	movcs	r3, r2
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	e001      	b.n	8006d9e <main+0x1602>
 8006d9a:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8006d9e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8006da2:	e003      	b.n	8006dac <main+0x1610>
      }
      else {
          // 区域1：全速区间（>170mm）
          motor_speed = MAX_SPEED;
 8006da4:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 8006da8:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
      }
  
      // 执行带平滑过渡的电机控制
      static uint8_t last_speed = 0;
      motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8006dac:	4b2c      	ldr	r3, [pc, #176]	@ (8006e60 <main+0x16c4>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8006db4:	4611      	mov	r1, r2
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe fc8a 	bl	80056d0 <smooth_speed_transition>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
      last_speed = motor_speed;
 8006dc2:	4a27      	ldr	r2, [pc, #156]	@ (8006e60 <main+0x16c4>)
 8006dc4:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8006dc8:	7013      	strb	r3, [r2, #0]
  
      Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8006dca:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8006dce:	b21b      	sxth	r3, r3
 8006dd0:	4a24      	ldr	r2, [pc, #144]	@ (8006e64 <main+0x16c8>)
 8006dd2:	9202      	str	r2, [sp, #8]
 8006dd4:	4a24      	ldr	r2, [pc, #144]	@ (8006e68 <main+0x16cc>)
 8006dd6:	9201      	str	r2, [sp, #4]
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	2303      	movs	r3, #3
 8006ddc:	2202      	movs	r2, #2
 8006dde:	2101      	movs	r1, #1
 8006de0:	2000      	movs	r0, #0
 8006de2:	f000 fd3b 	bl	800785c <Motor_Rightward>
      
      // 使用前后电机调整
      float avg_distance = (distances[1] + distances[2]) / 2.0f;
 8006de6:	4b10      	ldr	r3, [pc, #64]	@ (8006e28 <main+0x168c>)
 8006de8:	ed93 7a01 	vldr	s14, [r3, #4]
 8006dec:	4b0e      	ldr	r3, [pc, #56]	@ (8006e28 <main+0x168c>)
 8006dee:	edd3 7a02 	vldr	s15, [r3, #8]
 8006df2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006df6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006dfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006dfe:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
      Adjust_Motors_By_FrontBack_Distance(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, avg_distance, 30.0f);
 8006e02:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8006e06:	ed97 0a2d 	vldr	s0, [r7, #180]	@ 0xb4
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	2103      	movs	r1, #3
 8006e10:	2000      	movs	r0, #0
 8006e12:	f001 fc79 	bl	8008708 <Adjust_Motors_By_FrontBack_Distance>
  
      OLED_ShowNum(4, 4, motor_speed, 2);
 8006e16:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	2104      	movs	r1, #4
 8006e1e:	2004      	movs	r0, #4
 8006e20:	f7fd ffc4 	bl	8004dac <OLED_ShowNum>
      break;
 8006e24:	e2c4      	b.n	80073b0 <main+0x1c14>
 8006e26:	bf00      	nop
 8006e28:	20000038 	.word	0x20000038
 8006e2c:	428c0000 	.word	0x428c0000
 8006e30:	20000434 	.word	0x20000434
 8006e34:	20000418 	.word	0x20000418
 8006e38:	2000004d 	.word	0x2000004d
 8006e3c:	20000420 	.word	0x20000420
 8006e40:	20000414 	.word	0x20000414
 8006e44:	20000074 	.word	0x20000074
 8006e48:	200000a4 	.word	0x200000a4
 8006e4c:	2000008c 	.word	0x2000008c
 8006e50:	200000bc 	.word	0x200000bc
 8006e54:	42a00000 	.word	0x42a00000
 8006e58:	42c80000 	.word	0x42c80000
 8006e5c:	42480000 	.word	0x42480000
 8006e60:	20000511 	.word	0x20000511
 8006e64:	20000514 	.word	0x20000514
 8006e68:	20000518 	.word	0x20000518
  }

    case 10:
      if (path_change!=2)
 8006e6c:	4bab      	ldr	r3, [pc, #684]	@ (800711c <main+0x1980>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	f000 80bd 	beq.w	8006ff0 <main+0x1854>
      {
        if ((distances[0]>=70 && mean[0]>=70 && path_change==0)||(distances[0]<=70 && mean[0]<=70 && path_change==1))
 8006e76:	4baa      	ldr	r3, [pc, #680]	@ (8007120 <main+0x1984>)
 8006e78:	edd3 7a00 	vldr	s15, [r3]
 8006e7c:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8007124 <main+0x1988>
 8006e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e88:	db0d      	blt.n	8006ea6 <main+0x170a>
 8006e8a:	4ba7      	ldr	r3, [pc, #668]	@ (8007128 <main+0x198c>)
 8006e8c:	edd3 7a00 	vldr	s15, [r3]
 8006e90:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8007124 <main+0x1988>
 8006e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e9c:	db03      	blt.n	8006ea6 <main+0x170a>
 8006e9e:	4b9f      	ldr	r3, [pc, #636]	@ (800711c <main+0x1980>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d017      	beq.n	8006ed6 <main+0x173a>
 8006ea6:	4b9e      	ldr	r3, [pc, #632]	@ (8007120 <main+0x1984>)
 8006ea8:	edd3 7a00 	vldr	s15, [r3]
 8006eac:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8007124 <main+0x1988>
 8006eb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb8:	d826      	bhi.n	8006f08 <main+0x176c>
 8006eba:	4b9b      	ldr	r3, [pc, #620]	@ (8007128 <main+0x198c>)
 8006ebc:	edd3 7a00 	vldr	s15, [r3]
 8006ec0:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8007124 <main+0x1988>
 8006ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ecc:	d81c      	bhi.n	8006f08 <main+0x176c>
 8006ece:	4b93      	ldr	r3, [pc, #588]	@ (800711c <main+0x1980>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d118      	bne.n	8006f08 <main+0x176c>
        {
          Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8006ed6:	4b95      	ldr	r3, [pc, #596]	@ (800712c <main+0x1990>)
 8006ed8:	9302      	str	r3, [sp, #8]
 8006eda:	4b95      	ldr	r3, [pc, #596]	@ (8007130 <main+0x1994>)
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	f06f 031d 	mvn.w	r3, #29
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	2101      	movs	r1, #1
 8006eea:	2000      	movs	r0, #0
 8006eec:	f000 fed6 	bl	8007c9c <Motor_Straight>
          // 使用右侧电机调整
          Adjust_Right_Motors_By_Distance(MOTOR_2, MOTOR_4, distances[3], 30.0f);
 8006ef0:	4b8b      	ldr	r3, [pc, #556]	@ (8007120 <main+0x1984>)
 8006ef2:	edd3 7a03 	vldr	s15, [r3, #12]
 8006ef6:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8006efa:	eeb0 0a67 	vmov.f32	s0, s15
 8006efe:	2103      	movs	r1, #3
 8006f00:	2001      	movs	r0, #1
 8006f02:	f001 fa79 	bl	80083f8 <Adjust_Right_Motors_By_Distance>
 8006f06:	e089      	b.n	800701c <main+0x1880>
        }else if (distances[0]<=70 && mean[0]<=70 && path_change==0)
 8006f08:	4b85      	ldr	r3, [pc, #532]	@ (8007120 <main+0x1984>)
 8006f0a:	edd3 7a00 	vldr	s15, [r3]
 8006f0e:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8007124 <main+0x1988>
 8006f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f1a:	d82d      	bhi.n	8006f78 <main+0x17dc>
 8006f1c:	4b82      	ldr	r3, [pc, #520]	@ (8007128 <main+0x198c>)
 8006f1e:	edd3 7a00 	vldr	s15, [r3]
 8006f22:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8007124 <main+0x1988>
 8006f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2e:	d823      	bhi.n	8006f78 <main+0x17dc>
 8006f30:	4b7a      	ldr	r3, [pc, #488]	@ (800711c <main+0x1980>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d11f      	bne.n	8006f78 <main+0x17dc>
        {
          if(flag){
 8006f38:	4b7e      	ldr	r3, [pc, #504]	@ (8007134 <main+0x1998>)
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d007      	beq.n	8006f50 <main+0x17b4>
            time_start = HAL_GetTick();
 8006f40:	f003 fd0c 	bl	800a95c <HAL_GetTick>
 8006f44:	4603      	mov	r3, r0
 8006f46:	4a7c      	ldr	r2, [pc, #496]	@ (8007138 <main+0x199c>)
 8006f48:	6013      	str	r3, [r2, #0]
            flag = false;
 8006f4a:	4b7a      	ldr	r3, [pc, #488]	@ (8007134 <main+0x1998>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	701a      	strb	r2, [r3, #0]
          }
          uint32_t time = HAL_GetTick();
 8006f50:	f003 fd04 	bl	800a95c <HAL_GetTick>
 8006f54:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
          if(time - time_start >=100){
 8006f58:	4b77      	ldr	r3, [pc, #476]	@ (8007138 <main+0x199c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b63      	cmp	r3, #99	@ 0x63
 8006f64:	d959      	bls.n	800701a <main+0x187e>
            path_change+=1;
 8006f66:	4b6d      	ldr	r3, [pc, #436]	@ (800711c <main+0x1980>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800711c <main+0x1980>)
 8006f6e:	6013      	str	r3, [r2, #0]
            flag = true;
 8006f70:	4b70      	ldr	r3, [pc, #448]	@ (8007134 <main+0x1998>)
 8006f72:	2201      	movs	r2, #1
 8006f74:	701a      	strb	r2, [r3, #0]
        {
 8006f76:	e050      	b.n	800701a <main+0x187e>
          }
        }else if (distances[0]>=70 && mean[0]>=70 && path_change==1)
 8006f78:	4b69      	ldr	r3, [pc, #420]	@ (8007120 <main+0x1984>)
 8006f7a:	edd3 7a00 	vldr	s15, [r3]
 8006f7e:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8007124 <main+0x1988>
 8006f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f8a:	da00      	bge.n	8006f8e <main+0x17f2>
        PID_Reset(&pid_rear);
        PID_Reset(&pid_front);
        PID_Reset(&pid_position);
      }
        
      break;
 8006f8c:	e20a      	b.n	80073a4 <main+0x1c08>
        }else if (distances[0]>=70 && mean[0]>=70 && path_change==1)
 8006f8e:	4b66      	ldr	r3, [pc, #408]	@ (8007128 <main+0x198c>)
 8006f90:	edd3 7a00 	vldr	s15, [r3]
 8006f94:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8007124 <main+0x1988>
 8006f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa0:	da00      	bge.n	8006fa4 <main+0x1808>
      break;
 8006fa2:	e1ff      	b.n	80073a4 <main+0x1c08>
        }else if (distances[0]>=70 && mean[0]>=70 && path_change==1)
 8006fa4:	4b5d      	ldr	r3, [pc, #372]	@ (800711c <main+0x1980>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	f040 81fb 	bne.w	80073a4 <main+0x1c08>
          if(flag){
 8006fae:	4b61      	ldr	r3, [pc, #388]	@ (8007134 <main+0x1998>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d007      	beq.n	8006fc6 <main+0x182a>
            time_start = HAL_GetTick();
 8006fb6:	f003 fcd1 	bl	800a95c <HAL_GetTick>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4a5e      	ldr	r2, [pc, #376]	@ (8007138 <main+0x199c>)
 8006fbe:	6013      	str	r3, [r2, #0]
            flag = false;
 8006fc0:	4b5c      	ldr	r3, [pc, #368]	@ (8007134 <main+0x1998>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	701a      	strb	r2, [r3, #0]
          uint32_t time = HAL_GetTick();
 8006fc6:	f003 fcc9 	bl	800a95c <HAL_GetTick>
 8006fca:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
          if(time - time_start >=100){
 8006fce:	4b5a      	ldr	r3, [pc, #360]	@ (8007138 <main+0x199c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b63      	cmp	r3, #99	@ 0x63
 8006fda:	f240 81e3 	bls.w	80073a4 <main+0x1c08>
            path_change+=1;
 8006fde:	4b4f      	ldr	r3, [pc, #316]	@ (800711c <main+0x1980>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	4a4d      	ldr	r2, [pc, #308]	@ (800711c <main+0x1980>)
 8006fe6:	6013      	str	r3, [r2, #0]
            flag = true;
 8006fe8:	4b52      	ldr	r3, [pc, #328]	@ (8007134 <main+0x1998>)
 8006fea:	2201      	movs	r2, #1
 8006fec:	701a      	strb	r2, [r3, #0]
      break;
 8006fee:	e1d9      	b.n	80073a4 <main+0x1c08>
        path_change = 0;
 8006ff0:	4b4a      	ldr	r3, [pc, #296]	@ (800711c <main+0x1980>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]
        path +=1;
 8006ff6:	4b51      	ldr	r3, [pc, #324]	@ (800713c <main+0x19a0>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	4a4f      	ldr	r2, [pc, #316]	@ (800713c <main+0x19a0>)
 8006ffe:	6013      	str	r3, [r2, #0]
        PID_Reset(&pid_yaw);        
 8007000:	484f      	ldr	r0, [pc, #316]	@ (8007140 <main+0x19a4>)
 8007002:	f001 ff07 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_rear);
 8007006:	484f      	ldr	r0, [pc, #316]	@ (8007144 <main+0x19a8>)
 8007008:	f001 ff04 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_front);
 800700c:	484e      	ldr	r0, [pc, #312]	@ (8007148 <main+0x19ac>)
 800700e:	f001 ff01 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_position);
 8007012:	484e      	ldr	r0, [pc, #312]	@ (800714c <main+0x19b0>)
 8007014:	f001 fefe 	bl	8008e14 <PID_Reset>
      break;
 8007018:	e1c4      	b.n	80073a4 <main+0x1c08>
        {
 800701a:	bf00      	nop
      break;
 800701c:	e1c2      	b.n	80073a4 <main+0x1c08>

    case 11:{
      // 参数定义
      const float TARGET_DISTANCE = 80.0f;   // 目标保持距离
 800701e:	4b4c      	ldr	r3, [pc, #304]	@ (8007150 <main+0x19b4>)
 8007020:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
      const float DECEL_RANGE = 100.0f;      // 减速区间范围（70~170mm）
 8007024:	4b4b      	ldr	r3, [pc, #300]	@ (8007154 <main+0x19b8>)
 8007026:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      const uint8_t MIN_SPEED = -4;          // 最小速度（靠近时）
 800702a:	23fc      	movs	r3, #252	@ 0xfc
 800702c:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
      const uint8_t MAX_SPEED = -60;          // 最大速度（远端时）
 8007030:	23c4      	movs	r3, #196	@ 0xc4
 8007032:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
  
      // 获取当前检测距离（使用第4个传感器）
      float current_distance = distances[0]; 
 8007036:	4b3a      	ldr	r3, [pc, #232]	@ (8007120 <main+0x1984>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  
      // 速度计算逻辑
      uint8_t motor_speed = MAX_SPEED;  // 默认最大速度
 800703e:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 8007042:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
  
      if (current_distance <= TARGET_DISTANCE) {
 8007046:	ed97 7a39 	vldr	s14, [r7, #228]	@ 0xe4
 800704a:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 800704e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007056:	d814      	bhi.n	8007082 <main+0x18e6>
          // 区域3：到达目标距离（≤70mm）
          motor_speed = MIN_SPEED;
 8007058:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 800705c:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
  
          // 执行路径切换逻辑
          if(current_distance<=50) {
 8007060:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8007064:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8007158 <main+0x19bc>
 8007068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800706c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007070:	d878      	bhi.n	8007164 <main+0x19c8>
            path += 1;
 8007072:	4b32      	ldr	r3, [pc, #200]	@ (800713c <main+0x19a0>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3301      	adds	r3, #1
 8007078:	4a30      	ldr	r2, [pc, #192]	@ (800713c <main+0x19a0>)
 800707a:	6013      	str	r3, [r2, #0]
            PID_ResetAll(); // 重置所有PID控制器
 800707c:	f7fe fb76 	bl	800576c <PID_ResetAll>
 8007080:	e070      	b.n	8007164 <main+0x19c8>
          }
      } 
      else if (current_distance <= (TARGET_DISTANCE + DECEL_RANGE)) {
 8007082:	ed97 7a3c 	vldr	s14, [r7, #240]	@ 0xf0
 8007086:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 800708a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800708e:	ed97 7a39 	vldr	s14, [r7, #228]	@ 0xe4
 8007092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800709a:	d85f      	bhi.n	800715c <main+0x19c0>
          // 区域2：减速区间（70~170mm）
          // 距离越近速度越慢，线性变化：170mm->60, 70mm->10
          float distance_from_target = current_distance - TARGET_DISTANCE;
 800709c:	ed97 7a39 	vldr	s14, [r7, #228]	@ 0xe4
 80070a0:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 80070a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070a8:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
          float ratio = 1.0f - (distance_from_target / DECEL_RANGE);
 80070ac:	edd7 6a38 	vldr	s13, [r7, #224]	@ 0xe0
 80070b0:	ed97 7a3b 	vldr	s14, [r7, #236]	@ 0xec
 80070b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070c0:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
          motor_speed = MIN_SPEED + (uint8_t)((MAX_SPEED - MIN_SPEED) * ratio);
 80070c4:	f897 20ea 	ldrb.w	r2, [r7, #234]	@ 0xea
 80070c8:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070d6:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 80070da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80070e6:	793b      	ldrb	r3, [r7, #4]
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80070ee:	4413      	add	r3, r2
 80070f0:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
          motor_speed = CLAMP(motor_speed, MIN_SPEED, MAX_SPEED);
 80070f4:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 80070f8:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d308      	bcc.n	8007112 <main+0x1976>
 8007100:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8007104:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 8007108:	4293      	cmp	r3, r2
 800710a:	bf28      	it	cs
 800710c:	4613      	movcs	r3, r2
 800710e:	b2db      	uxtb	r3, r3
 8007110:	e001      	b.n	8007116 <main+0x197a>
 8007112:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8007116:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800711a:	e023      	b.n	8007164 <main+0x19c8>
 800711c:	20000418 	.word	0x20000418
 8007120:	20000038 	.word	0x20000038
 8007124:	428c0000 	.word	0x428c0000
 8007128:	20000434 	.word	0x20000434
 800712c:	20000514 	.word	0x20000514
 8007130:	20000518 	.word	0x20000518
 8007134:	2000004d 	.word	0x2000004d
 8007138:	20000420 	.word	0x20000420
 800713c:	20000414 	.word	0x20000414
 8007140:	20000074 	.word	0x20000074
 8007144:	200000a4 	.word	0x200000a4
 8007148:	2000008c 	.word	0x2000008c
 800714c:	200000bc 	.word	0x200000bc
 8007150:	42a00000 	.word	0x42a00000
 8007154:	42c80000 	.word	0x42c80000
 8007158:	42480000 	.word	0x42480000
      }
      else {
          // 区域1：全速区间（>170mm）
          motor_speed = MAX_SPEED;
 800715c:	f897 30ea 	ldrb.w	r3, [r7, #234]	@ 0xea
 8007160:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
      }
  
      // 执行带平滑过渡的电机控制
      static uint8_t last_speed = 0;
      motor_speed = smooth_speed_transition(last_speed, motor_speed);
 8007164:	4b93      	ldr	r3, [pc, #588]	@ (80073b4 <main+0x1c18>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 800716c:	4611      	mov	r1, r2
 800716e:	4618      	mov	r0, r3
 8007170:	f7fe faae 	bl	80056d0 <smooth_speed_transition>
 8007174:	4603      	mov	r3, r0
 8007176:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
      last_speed = motor_speed;
 800717a:	4a8e      	ldr	r2, [pc, #568]	@ (80073b4 <main+0x1c18>)
 800717c:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8007180:	7013      	strb	r3, [r2, #0]
  
      Motor_Rightward(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, motor_speed, &yaw, &target_yaw);
 8007182:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 8007186:	b21b      	sxth	r3, r3
 8007188:	4a8b      	ldr	r2, [pc, #556]	@ (80073b8 <main+0x1c1c>)
 800718a:	9202      	str	r2, [sp, #8]
 800718c:	4a8b      	ldr	r2, [pc, #556]	@ (80073bc <main+0x1c20>)
 800718e:	9201      	str	r2, [sp, #4]
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	2303      	movs	r3, #3
 8007194:	2202      	movs	r2, #2
 8007196:	2101      	movs	r1, #1
 8007198:	2000      	movs	r0, #0
 800719a:	f000 fb5f 	bl	800785c <Motor_Rightward>
      
      // 使用前后电机调整
      float avg_distance = (distances[1] + distances[2]) / 2.0f;
 800719e:	4b88      	ldr	r3, [pc, #544]	@ (80073c0 <main+0x1c24>)
 80071a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80071a4:	4b86      	ldr	r3, [pc, #536]	@ (80073c0 <main+0x1c24>)
 80071a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80071aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80071ae:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80071b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071b6:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8
      Adjust_Motors_By_FrontBack_Distance(MOTOR_1, MOTOR_4, MOTOR_2, MOTOR_3, avg_distance, 30.0f);
 80071ba:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 80071be:	ed97 0a36 	vldr	s0, [r7, #216]	@ 0xd8
 80071c2:	2302      	movs	r3, #2
 80071c4:	2201      	movs	r2, #1
 80071c6:	2103      	movs	r1, #3
 80071c8:	2000      	movs	r0, #0
 80071ca:	f001 fa9d 	bl	8008708 <Adjust_Motors_By_FrontBack_Distance>
  
      OLED_ShowNum(4, 4, motor_speed, 2);
 80071ce:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 80071d2:	2302      	movs	r3, #2
 80071d4:	2104      	movs	r1, #4
 80071d6:	2004      	movs	r0, #4
 80071d8:	f7fd fde8 	bl	8004dac <OLED_ShowNum>
      break;
 80071dc:	e0e8      	b.n	80073b0 <main+0x1c14>
  }

    case 12:

      if (path_change!=2)
 80071de:	4b79      	ldr	r3, [pc, #484]	@ (80073c4 <main+0x1c28>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	f000 80bb 	beq.w	800735e <main+0x1bc2>
      {
        if ((distances[3]>=70 && mean[3]>=70 && path_change==0)||(distances[3]<=70 && mean[3]<=70 && path_change==1))
 80071e8:	4b75      	ldr	r3, [pc, #468]	@ (80073c0 <main+0x1c24>)
 80071ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80071ee:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80073c8 <main+0x1c2c>
 80071f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fa:	db0d      	blt.n	8007218 <main+0x1a7c>
 80071fc:	4b73      	ldr	r3, [pc, #460]	@ (80073cc <main+0x1c30>)
 80071fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8007202:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 80073c8 <main+0x1c2c>
 8007206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800720a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800720e:	db03      	blt.n	8007218 <main+0x1a7c>
 8007210:	4b6c      	ldr	r3, [pc, #432]	@ (80073c4 <main+0x1c28>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d017      	beq.n	8007248 <main+0x1aac>
 8007218:	4b69      	ldr	r3, [pc, #420]	@ (80073c0 <main+0x1c24>)
 800721a:	edd3 7a03 	vldr	s15, [r3, #12]
 800721e:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80073c8 <main+0x1c2c>
 8007222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800722a:	d826      	bhi.n	800727a <main+0x1ade>
 800722c:	4b67      	ldr	r3, [pc, #412]	@ (80073cc <main+0x1c30>)
 800722e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007232:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80073c8 <main+0x1c2c>
 8007236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800723a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723e:	d81c      	bhi.n	800727a <main+0x1ade>
 8007240:	4b60      	ldr	r3, [pc, #384]	@ (80073c4 <main+0x1c28>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d118      	bne.n	800727a <main+0x1ade>
        {
          Motor_Straight(MOTOR_1, MOTOR_2, MOTOR_3, MOTOR_4, -30, &yaw, &target_yaw);
 8007248:	4b5b      	ldr	r3, [pc, #364]	@ (80073b8 <main+0x1c1c>)
 800724a:	9302      	str	r3, [sp, #8]
 800724c:	4b5b      	ldr	r3, [pc, #364]	@ (80073bc <main+0x1c20>)
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	f06f 031d 	mvn.w	r3, #29
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	2303      	movs	r3, #3
 8007258:	2202      	movs	r2, #2
 800725a:	2101      	movs	r1, #1
 800725c:	2000      	movs	r0, #0
 800725e:	f000 fd1d 	bl	8007c9c <Motor_Straight>
          // 使用左侧电机调整
          Adjust_Left_Motors_By_Distance(MOTOR_1, MOTOR_3, distances[0], 30.0f);
 8007262:	4b57      	ldr	r3, [pc, #348]	@ (80073c0 <main+0x1c24>)
 8007264:	edd3 7a00 	vldr	s15, [r3]
 8007268:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 800726c:	eeb0 0a67 	vmov.f32	s0, s15
 8007270:	2102      	movs	r1, #2
 8007272:	2000      	movs	r0, #0
 8007274:	f000 ff38 	bl	80080e8 <Adjust_Left_Motors_By_Distance>
 8007278:	e087      	b.n	800738a <main+0x1bee>
        }else if (distances[3]<=70 && mean[3]<=70 && path_change==0)
 800727a:	4b51      	ldr	r3, [pc, #324]	@ (80073c0 <main+0x1c24>)
 800727c:	edd3 7a03 	vldr	s15, [r3, #12]
 8007280:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80073c8 <main+0x1c2c>
 8007284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728c:	d82d      	bhi.n	80072ea <main+0x1b4e>
 800728e:	4b4f      	ldr	r3, [pc, #316]	@ (80073cc <main+0x1c30>)
 8007290:	edd3 7a03 	vldr	s15, [r3, #12]
 8007294:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80073c8 <main+0x1c2c>
 8007298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800729c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a0:	d823      	bhi.n	80072ea <main+0x1b4e>
 80072a2:	4b48      	ldr	r3, [pc, #288]	@ (80073c4 <main+0x1c28>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d11f      	bne.n	80072ea <main+0x1b4e>
        {
          if(flag){
 80072aa:	4b49      	ldr	r3, [pc, #292]	@ (80073d0 <main+0x1c34>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d007      	beq.n	80072c2 <main+0x1b26>
            time_start = HAL_GetTick();
 80072b2:	f003 fb53 	bl	800a95c <HAL_GetTick>
 80072b6:	4603      	mov	r3, r0
 80072b8:	4a46      	ldr	r2, [pc, #280]	@ (80073d4 <main+0x1c38>)
 80072ba:	6013      	str	r3, [r2, #0]
            flag = false;
 80072bc:	4b44      	ldr	r3, [pc, #272]	@ (80073d0 <main+0x1c34>)
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
          }
          uint32_t time = HAL_GetTick();
 80072c2:	f003 fb4b 	bl	800a95c <HAL_GetTick>
 80072c6:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
          if(time - time_start >=100){
 80072ca:	4b42      	ldr	r3, [pc, #264]	@ (80073d4 <main+0x1c38>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b63      	cmp	r3, #99	@ 0x63
 80072d6:	d957      	bls.n	8007388 <main+0x1bec>
            path_change+=1;
 80072d8:	4b3a      	ldr	r3, [pc, #232]	@ (80073c4 <main+0x1c28>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3301      	adds	r3, #1
 80072de:	4a39      	ldr	r2, [pc, #228]	@ (80073c4 <main+0x1c28>)
 80072e0:	6013      	str	r3, [r2, #0]
            flag = true;
 80072e2:	4b3b      	ldr	r3, [pc, #236]	@ (80073d0 <main+0x1c34>)
 80072e4:	2201      	movs	r2, #1
 80072e6:	701a      	strb	r2, [r3, #0]
        {
 80072e8:	e04e      	b.n	8007388 <main+0x1bec>
          }
        }else if (distances[3]>=70 && mean[3]>=70 && path_change==1)
 80072ea:	4b35      	ldr	r3, [pc, #212]	@ (80073c0 <main+0x1c24>)
 80072ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80072f0:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80073c8 <main+0x1c2c>
 80072f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072fc:	da00      	bge.n	8007300 <main+0x1b64>
        PID_Reset(&pid_rear);
        PID_Reset(&pid_front);
        PID_Reset(&pid_position);
      }
        
      break;
 80072fe:	e054      	b.n	80073aa <main+0x1c0e>
        }else if (distances[3]>=70 && mean[3]>=70 && path_change==1)
 8007300:	4b32      	ldr	r3, [pc, #200]	@ (80073cc <main+0x1c30>)
 8007302:	edd3 7a03 	vldr	s15, [r3, #12]
 8007306:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80073c8 <main+0x1c2c>
 800730a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800730e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007312:	da00      	bge.n	8007316 <main+0x1b7a>
      break;
 8007314:	e049      	b.n	80073aa <main+0x1c0e>
        }else if (distances[3]>=70 && mean[3]>=70 && path_change==1)
 8007316:	4b2b      	ldr	r3, [pc, #172]	@ (80073c4 <main+0x1c28>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d145      	bne.n	80073aa <main+0x1c0e>
          if(flag){
 800731e:	4b2c      	ldr	r3, [pc, #176]	@ (80073d0 <main+0x1c34>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d007      	beq.n	8007336 <main+0x1b9a>
            time_start = HAL_GetTick();
 8007326:	f003 fb19 	bl	800a95c <HAL_GetTick>
 800732a:	4603      	mov	r3, r0
 800732c:	4a29      	ldr	r2, [pc, #164]	@ (80073d4 <main+0x1c38>)
 800732e:	6013      	str	r3, [r2, #0]
            flag = false;
 8007330:	4b27      	ldr	r3, [pc, #156]	@ (80073d0 <main+0x1c34>)
 8007332:	2200      	movs	r2, #0
 8007334:	701a      	strb	r2, [r3, #0]
          uint32_t time = HAL_GetTick();
 8007336:	f003 fb11 	bl	800a95c <HAL_GetTick>
 800733a:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
          if(time - time_start >=100){
 800733e:	4b25      	ldr	r3, [pc, #148]	@ (80073d4 <main+0x1c38>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	2b63      	cmp	r3, #99	@ 0x63
 800734a:	d92e      	bls.n	80073aa <main+0x1c0e>
            path_change+=1;
 800734c:	4b1d      	ldr	r3, [pc, #116]	@ (80073c4 <main+0x1c28>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3301      	adds	r3, #1
 8007352:	4a1c      	ldr	r2, [pc, #112]	@ (80073c4 <main+0x1c28>)
 8007354:	6013      	str	r3, [r2, #0]
            flag = true;
 8007356:	4b1e      	ldr	r3, [pc, #120]	@ (80073d0 <main+0x1c34>)
 8007358:	2201      	movs	r2, #1
 800735a:	701a      	strb	r2, [r3, #0]
      break;
 800735c:	e025      	b.n	80073aa <main+0x1c0e>
        path_change = 0;
 800735e:	4b19      	ldr	r3, [pc, #100]	@ (80073c4 <main+0x1c28>)
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
        path +=1;
 8007364:	4b1c      	ldr	r3, [pc, #112]	@ (80073d8 <main+0x1c3c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3301      	adds	r3, #1
 800736a:	4a1b      	ldr	r2, [pc, #108]	@ (80073d8 <main+0x1c3c>)
 800736c:	6013      	str	r3, [r2, #0]
        PID_Reset(&pid_yaw);        
 800736e:	481b      	ldr	r0, [pc, #108]	@ (80073dc <main+0x1c40>)
 8007370:	f001 fd50 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_rear);
 8007374:	481a      	ldr	r0, [pc, #104]	@ (80073e0 <main+0x1c44>)
 8007376:	f001 fd4d 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_front);
 800737a:	481a      	ldr	r0, [pc, #104]	@ (80073e4 <main+0x1c48>)
 800737c:	f001 fd4a 	bl	8008e14 <PID_Reset>
        PID_Reset(&pid_position);
 8007380:	4819      	ldr	r0, [pc, #100]	@ (80073e8 <main+0x1c4c>)
 8007382:	f001 fd47 	bl	8008e14 <PID_Reset>
      break;
 8007386:	e010      	b.n	80073aa <main+0x1c0e>
        {
 8007388:	bf00      	nop
      break;
 800738a:	e00e      	b.n	80073aa <main+0x1c0e>
      break;
 800738c:	bf00      	nop
 800738e:	f7fe bb46 	b.w	8005a1e <main+0x282>
      break;
 8007392:	bf00      	nop
 8007394:	f7fe bb43 	b.w	8005a1e <main+0x282>
      break;
 8007398:	bf00      	nop
 800739a:	f7fe bb40 	b.w	8005a1e <main+0x282>
      break;
 800739e:	bf00      	nop
 80073a0:	f7fe bb3d 	b.w	8005a1e <main+0x282>
      break;
 80073a4:	bf00      	nop
 80073a6:	f7fe bb3a 	b.w	8005a1e <main+0x282>
      break;
 80073aa:	bf00      	nop
 80073ac:	f7fe bb37 	b.w	8005a1e <main+0x282>
  {
 80073b0:	f7fe bb35 	b.w	8005a1e <main+0x282>
 80073b4:	20000512 	.word	0x20000512
 80073b8:	20000514 	.word	0x20000514
 80073bc:	20000518 	.word	0x20000518
 80073c0:	20000038 	.word	0x20000038
 80073c4:	20000418 	.word	0x20000418
 80073c8:	428c0000 	.word	0x428c0000
 80073cc:	20000434 	.word	0x20000434
 80073d0:	2000004d 	.word	0x2000004d
 80073d4:	20000420 	.word	0x20000420
 80073d8:	20000414 	.word	0x20000414
 80073dc:	20000074 	.word	0x20000074
 80073e0:	200000a4 	.word	0x200000a4
 80073e4:	2000008c 	.word	0x2000008c
 80073e8:	200000bc 	.word	0x200000bc

080073ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b094      	sub	sp, #80	@ 0x50
 80073f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80073f2:	f107 0320 	add.w	r3, r7, #32
 80073f6:	2230      	movs	r2, #48	@ 0x30
 80073f8:	2100      	movs	r1, #0
 80073fa:	4618      	mov	r0, r3
 80073fc:	f008 fbca 	bl	800fb94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007400:	f107 030c 	add.w	r3, r7, #12
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	605a      	str	r2, [r3, #4]
 800740a:	609a      	str	r2, [r3, #8]
 800740c:	60da      	str	r2, [r3, #12]
 800740e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007410:	2300      	movs	r3, #0
 8007412:	60bb      	str	r3, [r7, #8]
 8007414:	4b28      	ldr	r3, [pc, #160]	@ (80074b8 <SystemClock_Config+0xcc>)
 8007416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007418:	4a27      	ldr	r2, [pc, #156]	@ (80074b8 <SystemClock_Config+0xcc>)
 800741a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800741e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007420:	4b25      	ldr	r3, [pc, #148]	@ (80074b8 <SystemClock_Config+0xcc>)
 8007422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007428:	60bb      	str	r3, [r7, #8]
 800742a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800742c:	2300      	movs	r3, #0
 800742e:	607b      	str	r3, [r7, #4]
 8007430:	4b22      	ldr	r3, [pc, #136]	@ (80074bc <SystemClock_Config+0xd0>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a21      	ldr	r2, [pc, #132]	@ (80074bc <SystemClock_Config+0xd0>)
 8007436:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	4b1f      	ldr	r3, [pc, #124]	@ (80074bc <SystemClock_Config+0xd0>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007444:	607b      	str	r3, [r7, #4]
 8007446:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007448:	2302      	movs	r3, #2
 800744a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800744c:	2301      	movs	r3, #1
 800744e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007450:	2310      	movs	r3, #16
 8007452:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007454:	2302      	movs	r3, #2
 8007456:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007458:	2300      	movs	r3, #0
 800745a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800745c:	2308      	movs	r3, #8
 800745e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007460:	23a8      	movs	r3, #168	@ 0xa8
 8007462:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007464:	2302      	movs	r3, #2
 8007466:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007468:	2304      	movs	r3, #4
 800746a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800746c:	f107 0320 	add.w	r3, r7, #32
 8007470:	4618      	mov	r0, r3
 8007472:	f004 ffd1 	bl	800c418 <HAL_RCC_OscConfig>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800747c:	f000 f820 	bl	80074c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007480:	230f      	movs	r3, #15
 8007482:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007484:	2302      	movs	r3, #2
 8007486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007488:	2300      	movs	r3, #0
 800748a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800748c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8007490:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007492:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007496:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007498:	f107 030c 	add.w	r3, r7, #12
 800749c:	2105      	movs	r1, #5
 800749e:	4618      	mov	r0, r3
 80074a0:	f005 fa32 	bl	800c908 <HAL_RCC_ClockConfig>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80074aa:	f000 f809 	bl	80074c0 <Error_Handler>
  }
}
 80074ae:	bf00      	nop
 80074b0:	3750      	adds	r7, #80	@ 0x50
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	40023800 	.word	0x40023800
 80074bc:	40007000 	.word	0x40007000

080074c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80074c4:	b672      	cpsid	i
}
 80074c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80074c8:	bf00      	nop
 80074ca:	e7fd      	b.n	80074c8 <Error_Handler+0x8>

080074cc <Motor_Init>:
void Motor_Init(Motor_ID id,
                TIM_HandleTypeDef* pwm_tim, uint32_t pwm_ch,
                GPIO_TypeDef* in1_port, uint16_t in1_pin,
                GPIO_TypeDef* in2_port, uint16_t in2_pin,
                TIM_HandleTypeDef* encoder_tim)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	607a      	str	r2, [r7, #4]
 80074d6:	603b      	str	r3, [r7, #0]
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]
    motors[id].pwm_tim = pwm_tim;
 80074dc:	7bfa      	ldrb	r2, [r7, #15]
 80074de:	4938      	ldr	r1, [pc, #224]	@ (80075c0 <Motor_Init+0xf4>)
 80074e0:	4613      	mov	r3, r2
 80074e2:	00db      	lsls	r3, r3, #3
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	440b      	add	r3, r1
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	601a      	str	r2, [r3, #0]
    motors[id].pwm_channel = pwm_ch;
 80074ee:	7bfa      	ldrb	r2, [r7, #15]
 80074f0:	4933      	ldr	r1, [pc, #204]	@ (80075c0 <Motor_Init+0xf4>)
 80074f2:	4613      	mov	r3, r2
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	440b      	add	r3, r1
 80074fc:	3304      	adds	r3, #4
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	601a      	str	r2, [r3, #0]

    motors[id].in1_port = in1_port;
 8007502:	7bfa      	ldrb	r2, [r7, #15]
 8007504:	492e      	ldr	r1, [pc, #184]	@ (80075c0 <Motor_Init+0xf4>)
 8007506:	4613      	mov	r3, r2
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	440b      	add	r3, r1
 8007510:	3308      	adds	r3, #8
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	601a      	str	r2, [r3, #0]
    motors[id].in1_pin = in1_pin;
 8007516:	7bfa      	ldrb	r2, [r7, #15]
 8007518:	4929      	ldr	r1, [pc, #164]	@ (80075c0 <Motor_Init+0xf4>)
 800751a:	4613      	mov	r3, r2
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	4413      	add	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	440b      	add	r3, r1
 8007524:	330c      	adds	r3, #12
 8007526:	8b3a      	ldrh	r2, [r7, #24]
 8007528:	801a      	strh	r2, [r3, #0]
    motors[id].in2_port = in2_port;
 800752a:	7bfa      	ldrb	r2, [r7, #15]
 800752c:	4924      	ldr	r1, [pc, #144]	@ (80075c0 <Motor_Init+0xf4>)
 800752e:	4613      	mov	r3, r2
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	4413      	add	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	440b      	add	r3, r1
 8007538:	3310      	adds	r3, #16
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	601a      	str	r2, [r3, #0]
    motors[id].in2_pin = in2_pin;
 800753e:	7bfa      	ldrb	r2, [r7, #15]
 8007540:	491f      	ldr	r1, [pc, #124]	@ (80075c0 <Motor_Init+0xf4>)
 8007542:	4613      	mov	r3, r2
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	3314      	adds	r3, #20
 800754e:	8c3a      	ldrh	r2, [r7, #32]
 8007550:	801a      	strh	r2, [r3, #0]

    motors[id].encoder_tim = encoder_tim;
 8007552:	7bfa      	ldrb	r2, [r7, #15]
 8007554:	491a      	ldr	r1, [pc, #104]	@ (80075c0 <Motor_Init+0xf4>)
 8007556:	4613      	mov	r3, r2
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	3318      	adds	r3, #24
 8007562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007564:	601a      	str	r2, [r3, #0]
    motors[id].encoder_offset = 0;
 8007566:	7bfa      	ldrb	r2, [r7, #15]
 8007568:	4915      	ldr	r1, [pc, #84]	@ (80075c0 <Motor_Init+0xf4>)
 800756a:	4613      	mov	r3, r2
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	440b      	add	r3, r1
 8007574:	331c      	adds	r3, #28
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]
    motors[id].encoder_total = 0;
 800757a:	7bfa      	ldrb	r2, [r7, #15]
 800757c:	4910      	ldr	r1, [pc, #64]	@ (80075c0 <Motor_Init+0xf4>)
 800757e:	4613      	mov	r3, r2
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	440b      	add	r3, r1
 8007588:	3320      	adds	r3, #32
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]

    HAL_TIM_PWM_Start(pwm_tim, pwm_ch);
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	68b8      	ldr	r0, [r7, #8]
 8007592:	f005 fcab 	bl	800ceec <HAL_TIM_PWM_Start>
    HAL_TIM_Encoder_Start(encoder_tim, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8007596:	2104      	movs	r1, #4
 8007598:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800759a:	f005 fe15 	bl	800d1c8 <HAL_TIM_Encoder_Start>
    motors[id].encoder_offset = (int32_t)__HAL_TIM_GET_COUNTER(encoder_tim);
 800759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a4:	7bfa      	ldrb	r2, [r7, #15]
 80075a6:	4618      	mov	r0, r3
 80075a8:	4905      	ldr	r1, [pc, #20]	@ (80075c0 <Motor_Init+0xf4>)
 80075aa:	4613      	mov	r3, r2
 80075ac:	00db      	lsls	r3, r3, #3
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	440b      	add	r3, r1
 80075b4:	331c      	adds	r3, #28
 80075b6:	6018      	str	r0, [r3, #0]
}
 80075b8:	bf00      	nop
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	2000037c 	.word	0x2000037c

080075c4 <Motor_SetSpeed>:

void Motor_SetSpeed(Motor_ID id, int16_t speed)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	460a      	mov	r2, r1
 80075ce:	71fb      	strb	r3, [r7, #7]
 80075d0:	4613      	mov	r3, r2
 80075d2:	80bb      	strh	r3, [r7, #4]
    speed = (speed > 100) ? 100 : (speed < -100) ? -100 : speed;
 80075d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80075d8:	2b64      	cmp	r3, #100	@ 0x64
 80075da:	dc08      	bgt.n	80075ee <Motor_SetSpeed+0x2a>
 80075dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80075e0:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 80075e4:	4293      	cmp	r3, r2
 80075e6:	bfb8      	it	lt
 80075e8:	4613      	movlt	r3, r2
 80075ea:	b21b      	sxth	r3, r3
 80075ec:	e000      	b.n	80075f0 <Motor_SetSpeed+0x2c>
 80075ee:	2364      	movs	r3, #100	@ 0x64
 80075f0:	80bb      	strh	r3, [r7, #4]

    if(speed >= 0) {
 80075f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	db2c      	blt.n	8007654 <Motor_SetSpeed+0x90>
        HAL_GPIO_WritePin(motors[id].in1_port, motors[id].in1_pin, GPIO_PIN_SET);
 80075fa:	79fa      	ldrb	r2, [r7, #7]
 80075fc:	495e      	ldr	r1, [pc, #376]	@ (8007778 <Motor_SetSpeed+0x1b4>)
 80075fe:	4613      	mov	r3, r2
 8007600:	00db      	lsls	r3, r3, #3
 8007602:	4413      	add	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	440b      	add	r3, r1
 8007608:	3308      	adds	r3, #8
 800760a:	6818      	ldr	r0, [r3, #0]
 800760c:	79fa      	ldrb	r2, [r7, #7]
 800760e:	495a      	ldr	r1, [pc, #360]	@ (8007778 <Motor_SetSpeed+0x1b4>)
 8007610:	4613      	mov	r3, r2
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	440b      	add	r3, r1
 800761a:	330c      	adds	r3, #12
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	2201      	movs	r2, #1
 8007620:	4619      	mov	r1, r3
 8007622:	f003 fd23 	bl	800b06c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motors[id].in2_port, motors[id].in2_pin, GPIO_PIN_RESET);
 8007626:	79fa      	ldrb	r2, [r7, #7]
 8007628:	4953      	ldr	r1, [pc, #332]	@ (8007778 <Motor_SetSpeed+0x1b4>)
 800762a:	4613      	mov	r3, r2
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	4413      	add	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	440b      	add	r3, r1
 8007634:	3310      	adds	r3, #16
 8007636:	6818      	ldr	r0, [r3, #0]
 8007638:	79fa      	ldrb	r2, [r7, #7]
 800763a:	494f      	ldr	r1, [pc, #316]	@ (8007778 <Motor_SetSpeed+0x1b4>)
 800763c:	4613      	mov	r3, r2
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	3314      	adds	r3, #20
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	2200      	movs	r2, #0
 800764c:	4619      	mov	r1, r3
 800764e:	f003 fd0d 	bl	800b06c <HAL_GPIO_WritePin>
 8007652:	e02f      	b.n	80076b4 <Motor_SetSpeed+0xf0>
    } else {
        HAL_GPIO_WritePin(motors[id].in1_port, motors[id].in1_pin, GPIO_PIN_RESET);
 8007654:	79fa      	ldrb	r2, [r7, #7]
 8007656:	4948      	ldr	r1, [pc, #288]	@ (8007778 <Motor_SetSpeed+0x1b4>)
 8007658:	4613      	mov	r3, r2
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	3308      	adds	r3, #8
 8007664:	6818      	ldr	r0, [r3, #0]
 8007666:	79fa      	ldrb	r2, [r7, #7]
 8007668:	4943      	ldr	r1, [pc, #268]	@ (8007778 <Motor_SetSpeed+0x1b4>)
 800766a:	4613      	mov	r3, r2
 800766c:	00db      	lsls	r3, r3, #3
 800766e:	4413      	add	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	440b      	add	r3, r1
 8007674:	330c      	adds	r3, #12
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	2200      	movs	r2, #0
 800767a:	4619      	mov	r1, r3
 800767c:	f003 fcf6 	bl	800b06c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motors[id].in2_port, motors[id].in2_pin, GPIO_PIN_SET);
 8007680:	79fa      	ldrb	r2, [r7, #7]
 8007682:	493d      	ldr	r1, [pc, #244]	@ (8007778 <Motor_SetSpeed+0x1b4>)
 8007684:	4613      	mov	r3, r2
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	440b      	add	r3, r1
 800768e:	3310      	adds	r3, #16
 8007690:	6818      	ldr	r0, [r3, #0]
 8007692:	79fa      	ldrb	r2, [r7, #7]
 8007694:	4938      	ldr	r1, [pc, #224]	@ (8007778 <Motor_SetSpeed+0x1b4>)
 8007696:	4613      	mov	r3, r2
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	4413      	add	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	440b      	add	r3, r1
 80076a0:	3314      	adds	r3, #20
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	2201      	movs	r2, #1
 80076a6:	4619      	mov	r1, r3
 80076a8:	f003 fce0 	bl	800b06c <HAL_GPIO_WritePin>
        speed = -speed;
 80076ac:	88bb      	ldrh	r3, [r7, #4]
 80076ae:	425b      	negs	r3, r3
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	80bb      	strh	r3, [r7, #4]
    }

    uint32_t duty = (speed * 9999) / 100;
 80076b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80076b8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80076bc:	fb02 f303 	mul.w	r3, r2, r3
 80076c0:	4a2e      	ldr	r2, [pc, #184]	@ (800777c <Motor_SetSpeed+0x1b8>)
 80076c2:	fb82 1203 	smull	r1, r2, r2, r3
 80076c6:	1152      	asrs	r2, r2, #5
 80076c8:	17db      	asrs	r3, r3, #31
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 80076ce:	79fa      	ldrb	r2, [r7, #7]
 80076d0:	4929      	ldr	r1, [pc, #164]	@ (8007778 <Motor_SetSpeed+0x1b4>)
 80076d2:	4613      	mov	r3, r2
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	440b      	add	r3, r1
 80076dc:	3304      	adds	r3, #4
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10b      	bne.n	80076fc <Motor_SetSpeed+0x138>
 80076e4:	79fa      	ldrb	r2, [r7, #7]
 80076e6:	4924      	ldr	r1, [pc, #144]	@ (8007778 <Motor_SetSpeed+0x1b4>)
 80076e8:	4613      	mov	r3, r2
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	4413      	add	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	440b      	add	r3, r1
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80076fa:	e038      	b.n	800776e <Motor_SetSpeed+0x1aa>
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 80076fc:	79fa      	ldrb	r2, [r7, #7]
 80076fe:	491e      	ldr	r1, [pc, #120]	@ (8007778 <Motor_SetSpeed+0x1b4>)
 8007700:	4613      	mov	r3, r2
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	440b      	add	r3, r1
 800770a:	3304      	adds	r3, #4
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b04      	cmp	r3, #4
 8007710:	d10b      	bne.n	800772a <Motor_SetSpeed+0x166>
 8007712:	79fa      	ldrb	r2, [r7, #7]
 8007714:	4918      	ldr	r1, [pc, #96]	@ (8007778 <Motor_SetSpeed+0x1b4>)
 8007716:	4613      	mov	r3, r2
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	4413      	add	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	440b      	add	r3, r1
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8007728:	e021      	b.n	800776e <Motor_SetSpeed+0x1aa>
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 800772a:	79fa      	ldrb	r2, [r7, #7]
 800772c:	4912      	ldr	r1, [pc, #72]	@ (8007778 <Motor_SetSpeed+0x1b4>)
 800772e:	4613      	mov	r3, r2
 8007730:	00db      	lsls	r3, r3, #3
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	440b      	add	r3, r1
 8007738:	3304      	adds	r3, #4
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b08      	cmp	r3, #8
 800773e:	d10b      	bne.n	8007758 <Motor_SetSpeed+0x194>
 8007740:	79fa      	ldrb	r2, [r7, #7]
 8007742:	490d      	ldr	r1, [pc, #52]	@ (8007778 <Motor_SetSpeed+0x1b4>)
 8007744:	4613      	mov	r3, r2
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	4413      	add	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	440b      	add	r3, r1
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8007756:	e00a      	b.n	800776e <Motor_SetSpeed+0x1aa>
    __HAL_TIM_SET_COMPARE(motors[id].pwm_tim, motors[id].pwm_channel, duty);
 8007758:	79fa      	ldrb	r2, [r7, #7]
 800775a:	4907      	ldr	r1, [pc, #28]	@ (8007778 <Motor_SetSpeed+0x1b4>)
 800775c:	4613      	mov	r3, r2
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	4413      	add	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	440b      	add	r3, r1
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	2000037c 	.word	0x2000037c
 800777c:	51eb851f 	.word	0x51eb851f

08007780 <Motor_GetEncoder>:

int32_t Motor_GetEncoder(Motor_ID id)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	71fb      	strb	r3, [r7, #7]
    int32_t current_cnt = (int32_t)__HAL_TIM_GET_COUNTER(motors[id].encoder_tim);
 800778a:	79fa      	ldrb	r2, [r7, #7]
 800778c:	492a      	ldr	r1, [pc, #168]	@ (8007838 <Motor_GetEncoder+0xb8>)
 800778e:	4613      	mov	r3, r2
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	440b      	add	r3, r1
 8007798:	3318      	adds	r3, #24
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a0:	60bb      	str	r3, [r7, #8]
    int32_t diff = current_cnt - motors[id].encoder_offset;
 80077a2:	79fa      	ldrb	r2, [r7, #7]
 80077a4:	4924      	ldr	r1, [pc, #144]	@ (8007838 <Motor_GetEncoder+0xb8>)
 80077a6:	4613      	mov	r3, r2
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	4413      	add	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	440b      	add	r3, r1
 80077b0:	331c      	adds	r3, #28
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	60fb      	str	r3, [r7, #12]
    
    if (diff > 32767) diff -= 65536;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077c0:	db04      	blt.n	80077cc <Motor_GetEncoder+0x4c>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	e007      	b.n	80077dc <Motor_GetEncoder+0x5c>
    else if (diff < -32768) diff += 65536;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80077d2:	da03      	bge.n	80077dc <Motor_GetEncoder+0x5c>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80077da:	60fb      	str	r3, [r7, #12]
    
    motors[id].encoder_total += diff;
 80077dc:	79fa      	ldrb	r2, [r7, #7]
 80077de:	4916      	ldr	r1, [pc, #88]	@ (8007838 <Motor_GetEncoder+0xb8>)
 80077e0:	4613      	mov	r3, r2
 80077e2:	00db      	lsls	r3, r3, #3
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	3320      	adds	r3, #32
 80077ec:	6819      	ldr	r1, [r3, #0]
 80077ee:	79fa      	ldrb	r2, [r7, #7]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4419      	add	r1, r3
 80077f4:	4810      	ldr	r0, [pc, #64]	@ (8007838 <Motor_GetEncoder+0xb8>)
 80077f6:	4613      	mov	r3, r2
 80077f8:	00db      	lsls	r3, r3, #3
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4403      	add	r3, r0
 8007800:	3320      	adds	r3, #32
 8007802:	6019      	str	r1, [r3, #0]
    motors[id].encoder_offset = current_cnt;
 8007804:	79fa      	ldrb	r2, [r7, #7]
 8007806:	490c      	ldr	r1, [pc, #48]	@ (8007838 <Motor_GetEncoder+0xb8>)
 8007808:	4613      	mov	r3, r2
 800780a:	00db      	lsls	r3, r3, #3
 800780c:	4413      	add	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	440b      	add	r3, r1
 8007812:	331c      	adds	r3, #28
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	601a      	str	r2, [r3, #0]
    
    return motors[id].encoder_total;
 8007818:	79fa      	ldrb	r2, [r7, #7]
 800781a:	4907      	ldr	r1, [pc, #28]	@ (8007838 <Motor_GetEncoder+0xb8>)
 800781c:	4613      	mov	r3, r2
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	440b      	add	r3, r1
 8007826:	3320      	adds	r3, #32
 8007828:	681b      	ldr	r3, [r3, #0]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	2000037c 	.word	0x2000037c

0800783c <Reset_Timer>:
    prev_counter = current_counter;
    return diff ; 
}

void Reset_Timer(void)
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
    prev_counter = __HAL_TIM_GET_COUNTER(&htim6);
 8007840:	4b04      	ldr	r3, [pc, #16]	@ (8007854 <Reset_Timer+0x18>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007846:	4a04      	ldr	r2, [pc, #16]	@ (8007858 <Reset_Timer+0x1c>)
 8007848:	6013      	str	r3, [r2, #0]
}
 800784a:	bf00      	nop
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	200006b4 	.word	0x200006b4
 8007858:	2000051c 	.word	0x2000051c

0800785c <Motor_Rightward>:

void Motor_Rightward(Motor_ID id1, Motor_ID id2, Motor_ID id3, Motor_ID id4, int16_t speed, float* yaw, float* target_yaw) {
 800785c:	b590      	push	{r4, r7, lr}
 800785e:	b09f      	sub	sp, #124	@ 0x7c
 8007860:	af00      	add	r7, sp, #0
 8007862:	4604      	mov	r4, r0
 8007864:	4608      	mov	r0, r1
 8007866:	4611      	mov	r1, r2
 8007868:	461a      	mov	r2, r3
 800786a:	4623      	mov	r3, r4
 800786c:	71fb      	strb	r3, [r7, #7]
 800786e:	4603      	mov	r3, r0
 8007870:	71bb      	strb	r3, [r7, #6]
 8007872:	460b      	mov	r3, r1
 8007874:	717b      	strb	r3, [r7, #5]
 8007876:	4613      	mov	r3, r2
 8007878:	713b      	strb	r3, [r7, #4]
    // 使用 HAL_GetTick 计算时间差
    static uint32_t prev_tick = 0;
    uint32_t current_tick = HAL_GetTick();
 800787a:	f003 f86f 	bl	800a95c <HAL_GetTick>
 800787e:	66b8      	str	r0, [r7, #104]	@ 0x68
    float dt = (current_tick - prev_tick) / 1000.0f;  // 转换为秒
 8007880:	4b5d      	ldr	r3, [pc, #372]	@ (80079f8 <Motor_Rightward+0x19c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	ee07 3a90 	vmov	s15, r3
 800788c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007890:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80079fc <Motor_Rightward+0x1a0>
 8007894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007898:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    prev_tick = current_tick;
 800789c:	4a56      	ldr	r2, [pc, #344]	@ (80079f8 <Motor_Rightward+0x19c>)
 800789e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80078a0:	6013      	str	r3, [r2, #0]

    if (dt <= 0.001f) {
 80078a2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80078a6:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8007a00 <Motor_Rightward+0x1a4>
 80078aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b2:	d801      	bhi.n	80078b8 <Motor_Rightward+0x5c>
        dt = 0.001f;  // 最小时间差为1ms
 80078b4:	4b53      	ldr	r3, [pc, #332]	@ (8007a04 <Motor_Rightward+0x1a8>)
 80078b6:	677b      	str	r3, [r7, #116]	@ 0x74

    // 静态变量存储上一次的编码器值
    static int32_t prev_enc1 = 0, prev_enc2 = 0, prev_enc3 = 0, prev_enc4 = 0;

    // 获取当前编码器值
    int32_t enc1 = Motor_GetEncoder(id1);
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7ff ff60 	bl	8007780 <Motor_GetEncoder>
 80078c0:	6678      	str	r0, [r7, #100]	@ 0x64
    int32_t enc2 = -Motor_GetEncoder(id2);
 80078c2:	79bb      	ldrb	r3, [r7, #6]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff ff5b 	bl	8007780 <Motor_GetEncoder>
 80078ca:	4603      	mov	r3, r0
 80078cc:	425b      	negs	r3, r3
 80078ce:	663b      	str	r3, [r7, #96]	@ 0x60
    int32_t enc3 = -Motor_GetEncoder(id3);
 80078d0:	797b      	ldrb	r3, [r7, #5]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7ff ff54 	bl	8007780 <Motor_GetEncoder>
 80078d8:	4603      	mov	r3, r0
 80078da:	425b      	negs	r3, r3
 80078dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int32_t enc4 = Motor_GetEncoder(id4);
 80078de:	793b      	ldrb	r3, [r7, #4]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7ff ff4d 	bl	8007780 <Motor_GetEncoder>
 80078e6:	65b8      	str	r0, [r7, #88]	@ 0x58

    // 计算编码器速度（单位时间内的变化量）
    float speed1 = (enc1 - prev_enc1) / dt;
 80078e8:	4b47      	ldr	r3, [pc, #284]	@ (8007a08 <Motor_Rightward+0x1ac>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	ee07 3a90 	vmov	s15, r3
 80078f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80078f8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80078fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007900:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float speed2 = (enc2 - prev_enc2) / dt;
 8007904:	4b41      	ldr	r3, [pc, #260]	@ (8007a0c <Motor_Rightward+0x1b0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	ee07 3a90 	vmov	s15, r3
 8007910:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007914:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800791c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    float speed3 = (enc3 - prev_enc3) / dt;
 8007920:	4b3b      	ldr	r3, [pc, #236]	@ (8007a10 <Motor_Rightward+0x1b4>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	ee07 3a90 	vmov	s15, r3
 800792c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007930:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007938:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float speed4 = (enc4 - prev_enc4) / dt;
 800793c:	4b35      	ldr	r3, [pc, #212]	@ (8007a14 <Motor_Rightward+0x1b8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	ee07 3a90 	vmov	s15, r3
 8007948:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800794c:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007954:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    // OLED_ShowNum(2,2,(int16_t)fabsf(speed3),4);  // 左后数字
    // OLED_ShowChar(2,9,speed4 >= 0 ? '+' : '-');  // 右前符号
    // OLED_ShowNum(2,10,(int16_t)fabsf(speed4),4);  // 右前数字

    // 更新上一次的编码器值
    prev_enc1 = enc1;
 8007958:	4a2b      	ldr	r2, [pc, #172]	@ (8007a08 <Motor_Rightward+0x1ac>)
 800795a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800795c:	6013      	str	r3, [r2, #0]
    prev_enc2 = enc2;
 800795e:	4a2b      	ldr	r2, [pc, #172]	@ (8007a0c <Motor_Rightward+0x1b0>)
 8007960:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007962:	6013      	str	r3, [r2, #0]
    prev_enc3 = enc3;
 8007964:	4a2a      	ldr	r2, [pc, #168]	@ (8007a10 <Motor_Rightward+0x1b4>)
 8007966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007968:	6013      	str	r3, [r2, #0]
    prev_enc4 = enc4;
 800796a:	4a2a      	ldr	r2, [pc, #168]	@ (8007a14 <Motor_Rightward+0x1b8>)
 800796c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800796e:	6013      	str	r3, [r2, #0]

    // 获取当前偏航角
    float pitch, roll, current_yaw;
    if (MPU6050_DMP_Get_Data(&pitch, &roll, &current_yaw) != 0) {
 8007970:	f107 020c 	add.w	r2, r7, #12
 8007974:	f107 0110 	add.w	r1, r7, #16
 8007978:	f107 0314 	add.w	r3, r7, #20
 800797c:	4618      	mov	r0, r3
 800797e:	f7fc ff8b 	bl	8004898 <MPU6050_DMP_Get_Data>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d014      	beq.n	80079b2 <Motor_Rightward+0x156>
        Motor_SetSpeed(id1, 0);
 8007988:	79fb      	ldrb	r3, [r7, #7]
 800798a:	2100      	movs	r1, #0
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff fe19 	bl	80075c4 <Motor_SetSpeed>
        Motor_SetSpeed(id2, 0);
 8007992:	79bb      	ldrb	r3, [r7, #6]
 8007994:	2100      	movs	r1, #0
 8007996:	4618      	mov	r0, r3
 8007998:	f7ff fe14 	bl	80075c4 <Motor_SetSpeed>
        Motor_SetSpeed(id3, 0);
 800799c:	797b      	ldrb	r3, [r7, #5]
 800799e:	2100      	movs	r1, #0
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff fe0f 	bl	80075c4 <Motor_SetSpeed>
        Motor_SetSpeed(id4, 0);
 80079a6:	793b      	ldrb	r3, [r7, #4]
 80079a8:	2100      	movs	r1, #0
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7ff fe0a 	bl	80075c4 <Motor_SetSpeed>
 80079b0:	e165      	b.n	8007c7e <Motor_Rightward+0x422>
        return;
    }
    *yaw = current_yaw;
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079b8:	601a      	str	r2, [r3, #0]
        
    float yaw_error = *target_yaw - *yaw;
 80079ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079be:	ed93 7a00 	vldr	s14, [r3]
 80079c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079c6:	edd3 7a00 	vldr	s15, [r3]
 80079ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079ce:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    if (yaw_error > 180) yaw_error -= 360;
 80079d2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80079d6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8007a18 <Motor_Rightward+0x1bc>
 80079da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e2:	dd23      	ble.n	8007a2c <Motor_Rightward+0x1d0>
 80079e4:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80079e8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007a20 <Motor_Rightward+0x1c4>
 80079ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079f0:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 80079f4:	e02b      	b.n	8007a4e <Motor_Rightward+0x1f2>
 80079f6:	bf00      	nop
 80079f8:	20000520 	.word	0x20000520
 80079fc:	447a0000 	.word	0x447a0000
 8007a00:	3a83126f 	.word	0x3a83126f
 8007a04:	3a83126f 	.word	0x3a83126f
 8007a08:	20000524 	.word	0x20000524
 8007a0c:	20000528 	.word	0x20000528
 8007a10:	2000052c 	.word	0x2000052c
 8007a14:	20000530 	.word	0x20000530
 8007a18:	43340000 	.word	0x43340000
 8007a1c:	c3340000 	.word	0xc3340000
 8007a20:	43b40000 	.word	0x43b40000
 8007a24:	3e99999a 	.word	0x3e99999a
 8007a28:	3dcccccd 	.word	0x3dcccccd
    else if (yaw_error < -180) yaw_error += 360;
 8007a2c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007a30:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8007a1c <Motor_Rightward+0x1c0>
 8007a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a3c:	d507      	bpl.n	8007a4e <Motor_Rightward+0x1f2>
 8007a3e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007a42:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 8007a20 <Motor_Rightward+0x1c4>
 8007a46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a4a:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

    // 计算速度误差
    float front_speed_error = speed1 - speed4;  // 前轮组速度同步（左前-右前）
 8007a4e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8007a52:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8007a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a5a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float rear_speed_error = speed2 - speed3;   // 后轮组速度同步（右后-左后）
 8007a5e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8007a62:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8007a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a6a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float position_speed_error = (front_speed_error - rear_speed_error) / 2;  // 前后轮组速度同步
 8007a6e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8007a72:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8007a76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007a7a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8007a7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a82:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // 速度分配 - 修正后的分配方式
    float base_speed = speed;
 8007a86:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	@ 0x88
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a92:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    
    // 限制PID输出的最大值，防止过度修正
    float max_pid_output = base_speed * 0.3f;  // 降低PID输出最大值为基准速度的30%
 8007a96:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8007a9a:	ed1f 7a1e 	vldr	s14, [pc, #-120]	@ 8007a24 <Motor_Rightward+0x1c8>
 8007a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007aa2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    
    // 计算偏航角PID输出
    float yaw_pid_output = 0.0f;
 8007aa6:	f04f 0300 	mov.w	r3, #0
 8007aaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (fabs(yaw_error) > 0.1f) {
 8007aac:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007ab0:	eef0 7ae7 	vabs.f32	s15, s15
 8007ab4:	ed1f 7a24 	vldr	s14, [pc, #-144]	@ 8007a28 <Motor_Rightward+0x1cc>
 8007ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac0:	dd08      	ble.n	8007ad4 <Motor_Rightward+0x278>
        yaw_pid_output = PID_Calculate(&pid_yaw, yaw_error, dt);
 8007ac2:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007ac6:	ed97 0a1c 	vldr	s0, [r7, #112]	@ 0x70
 8007aca:	486e      	ldr	r0, [pc, #440]	@ (8007c84 <Motor_Rightward+0x428>)
 8007acc:	f001 f926 	bl	8008d1c <PID_Calculate>
 8007ad0:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
        // 误差小于1度时，重置PID控制器
        // PID_Reset(&pid_yaw);
    }
    
    // 计算前后轮组的速度PID输出
    float front_pid_output = PID_Calculate(&pid_front, front_speed_error, dt);
 8007ad4:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007ad8:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8007adc:	486a      	ldr	r0, [pc, #424]	@ (8007c88 <Motor_Rightward+0x42c>)
 8007ade:	f001 f91d 	bl	8008d1c <PID_Calculate>
 8007ae2:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
    float rear_pid_output = PID_Calculate(&pid_rear, rear_speed_error, dt);
 8007ae6:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007aea:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8007aee:	4867      	ldr	r0, [pc, #412]	@ (8007c8c <Motor_Rightward+0x430>)
 8007af0:	f001 f914 	bl	8008d1c <PID_Calculate>
 8007af4:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
    float position_pid_output = PID_Calculate(&pid_position, position_speed_error + yaw_pid_output, dt);
 8007af8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8007afc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b04:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007b08:	eeb0 0a67 	vmov.f32	s0, s15
 8007b0c:	4860      	ldr	r0, [pc, #384]	@ (8007c90 <Motor_Rightward+0x434>)
 8007b0e:	f001 f905 	bl	8008d1c <PID_Calculate>
 8007b12:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    // front_pid_output = fmaxf(fminf(front_pid_output, max_pid_output*1), -max_pid_output*1);
    // rear_pid_output = fmaxf(fminf(rear_pid_output, max_pid_output*1), -max_pid_output*1);
    // position_pid_output = fmaxf(fminf(position_pid_output, max_pid_output*1), -max_pid_output*1);
    
    // 前轮组 - 左前右前同步
    float motor_speed1 = -(base_speed - front_pid_output - position_pid_output - yaw_pid_output);  // 左前
 8007b16:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007b1a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8007b1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b22:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007b26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b2a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b32:	eef1 7a67 	vneg.f32	s15, s15
 8007b36:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float motor_speed4 = (base_speed + front_pid_output - position_pid_output - yaw_pid_output);   // 右前
 8007b3a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007b3e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8007b42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b46:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007b4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b4e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b56:	edc7 7a08 	vstr	s15, [r7, #32]
    
    // 后轮组 - 左后右后同步
    float motor_speed2 = (base_speed - rear_pid_output + position_pid_output + yaw_pid_output);   // 右后
 8007b5a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007b5e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007b62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b66:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b6e:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8007b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b76:	edc7 7a07 	vstr	s15, [r7, #28]
    float motor_speed3 = -(base_speed + rear_pid_output + position_pid_output + yaw_pid_output);  // 左后
 8007b7a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007b7e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007b82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b86:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b8e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b96:	eef1 7a67 	vneg.f32	s15, s15
 8007b9a:	edc7 7a06 	vstr	s15, [r7, #24]

    // 限幅
    motor_speed1 = fmaxf(fminf(motor_speed1, 100.0f), -100.0f);
 8007b9e:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8007c94 <Motor_Rightward+0x438>
 8007ba2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8007ba6:	f009 ff64 	bl	8011a72 <fminf>
 8007baa:	eef0 7a40 	vmov.f32	s15, s0
 8007bae:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8007c98 <Motor_Rightward+0x43c>
 8007bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8007bb6:	f009 ff3f 	bl	8011a38 <fmaxf>
 8007bba:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    motor_speed2 = fmaxf(fminf(motor_speed2, 100.0f), -100.0f);
 8007bbe:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8007c94 <Motor_Rightward+0x438>
 8007bc2:	ed97 0a07 	vldr	s0, [r7, #28]
 8007bc6:	f009 ff54 	bl	8011a72 <fminf>
 8007bca:	eef0 7a40 	vmov.f32	s15, s0
 8007bce:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8007c98 <Motor_Rightward+0x43c>
 8007bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8007bd6:	f009 ff2f 	bl	8011a38 <fmaxf>
 8007bda:	ed87 0a07 	vstr	s0, [r7, #28]
    motor_speed3 = fmaxf(fminf(motor_speed3, 100.0f), -100.0f);
 8007bde:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8007c94 <Motor_Rightward+0x438>
 8007be2:	ed97 0a06 	vldr	s0, [r7, #24]
 8007be6:	f009 ff44 	bl	8011a72 <fminf>
 8007bea:	eef0 7a40 	vmov.f32	s15, s0
 8007bee:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8007c98 <Motor_Rightward+0x43c>
 8007bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8007bf6:	f009 ff1f 	bl	8011a38 <fmaxf>
 8007bfa:	ed87 0a06 	vstr	s0, [r7, #24]
    motor_speed4 = fmaxf(fminf(motor_speed4, 100.0f), -100.0f);
 8007bfe:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8007c94 <Motor_Rightward+0x438>
 8007c02:	ed97 0a08 	vldr	s0, [r7, #32]
 8007c06:	f009 ff34 	bl	8011a72 <fminf>
 8007c0a:	eef0 7a40 	vmov.f32	s15, s0
 8007c0e:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8007c98 <Motor_Rightward+0x43c>
 8007c12:	eeb0 0a67 	vmov.f32	s0, s15
 8007c16:	f009 ff0f 	bl	8011a38 <fmaxf>
 8007c1a:	ed87 0a08 	vstr	s0, [r7, #32]

    // 设置电机速度
    Motor_SetSpeed(id1, motor_speed1);
 8007c1e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8007c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c26:	ee17 3a90 	vmov	r3, s15
 8007c2a:	b21a      	sxth	r2, r3
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff fcc7 	bl	80075c4 <Motor_SetSpeed>
    Motor_SetSpeed(id2, motor_speed2);
 8007c36:	edd7 7a07 	vldr	s15, [r7, #28]
 8007c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c3e:	ee17 3a90 	vmov	r3, s15
 8007c42:	b21a      	sxth	r2, r3
 8007c44:	79bb      	ldrb	r3, [r7, #6]
 8007c46:	4611      	mov	r1, r2
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7ff fcbb 	bl	80075c4 <Motor_SetSpeed>
    Motor_SetSpeed(id3, motor_speed3);
 8007c4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007c52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c56:	ee17 3a90 	vmov	r3, s15
 8007c5a:	b21a      	sxth	r2, r3
 8007c5c:	797b      	ldrb	r3, [r7, #5]
 8007c5e:	4611      	mov	r1, r2
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7ff fcaf 	bl	80075c4 <Motor_SetSpeed>
    Motor_SetSpeed(id4, motor_speed4);
 8007c66:	edd7 7a08 	vldr	s15, [r7, #32]
 8007c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c6e:	ee17 3a90 	vmov	r3, s15
 8007c72:	b21a      	sxth	r2, r3
 8007c74:	793b      	ldrb	r3, [r7, #4]
 8007c76:	4611      	mov	r1, r2
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff fca3 	bl	80075c4 <Motor_SetSpeed>
}
 8007c7e:	377c      	adds	r7, #124	@ 0x7c
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd90      	pop	{r4, r7, pc}
 8007c84:	20000074 	.word	0x20000074
 8007c88:	2000008c 	.word	0x2000008c
 8007c8c:	200000a4 	.word	0x200000a4
 8007c90:	200000bc 	.word	0x200000bc
 8007c94:	42c80000 	.word	0x42c80000
 8007c98:	c2c80000 	.word	0xc2c80000

08007c9c <Motor_Straight>:

void Motor_Straight(Motor_ID id1, Motor_ID id2, Motor_ID id3, Motor_ID id4, int16_t speed, float* yaw, float* target_yaw) {
 8007c9c:	b590      	push	{r4, r7, lr}
 8007c9e:	b09f      	sub	sp, #124	@ 0x7c
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4623      	mov	r3, r4
 8007cac:	71fb      	strb	r3, [r7, #7]
 8007cae:	4603      	mov	r3, r0
 8007cb0:	71bb      	strb	r3, [r7, #6]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	717b      	strb	r3, [r7, #5]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	713b      	strb	r3, [r7, #4]
    // 使用 HAL_GetTick 计算时间差
    static uint32_t prev_tick = 0;
    uint32_t current_tick = HAL_GetTick();
 8007cba:	f002 fe4f 	bl	800a95c <HAL_GetTick>
 8007cbe:	66b8      	str	r0, [r7, #104]	@ 0x68
    float dt = (current_tick - prev_tick) / 1000.0f;  // 转换为秒
 8007cc0:	4b87      	ldr	r3, [pc, #540]	@ (8007ee0 <Motor_Straight+0x244>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	ee07 3a90 	vmov	s15, r3
 8007ccc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007cd0:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8007ee4 <Motor_Straight+0x248>
 8007cd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007cd8:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    prev_tick = current_tick;
 8007cdc:	4a80      	ldr	r2, [pc, #512]	@ (8007ee0 <Motor_Straight+0x244>)
 8007cde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ce0:	6013      	str	r3, [r2, #0]
        
    // 添加时间差保护
    if (dt <= 0.001f) {
 8007ce2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8007ce6:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8007ee8 <Motor_Straight+0x24c>
 8007cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf2:	d801      	bhi.n	8007cf8 <Motor_Straight+0x5c>
        dt = 0.001f;  // 最小时间差为1ms
 8007cf4:	4b7d      	ldr	r3, [pc, #500]	@ (8007eec <Motor_Straight+0x250>)
 8007cf6:	677b      	str	r3, [r7, #116]	@ 0x74

    // 静态变量存储上一次的编码器值
    static int32_t prev_enc1 = 0, prev_enc2 = 0, prev_enc3 = 0, prev_enc4 = 0;

    // 获取当前编码器值
    int32_t enc1 = Motor_GetEncoder(id1);
 8007cf8:	79fb      	ldrb	r3, [r7, #7]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff fd40 	bl	8007780 <Motor_GetEncoder>
 8007d00:	6678      	str	r0, [r7, #100]	@ 0x64
    int32_t enc2 = -Motor_GetEncoder(id2);
 8007d02:	79bb      	ldrb	r3, [r7, #6]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7ff fd3b 	bl	8007780 <Motor_GetEncoder>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	425b      	negs	r3, r3
 8007d0e:	663b      	str	r3, [r7, #96]	@ 0x60
    int32_t enc3 = Motor_GetEncoder(id3);
 8007d10:	797b      	ldrb	r3, [r7, #5]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7ff fd34 	bl	8007780 <Motor_GetEncoder>
 8007d18:	65f8      	str	r0, [r7, #92]	@ 0x5c
    int32_t enc4 = -Motor_GetEncoder(id4);
 8007d1a:	793b      	ldrb	r3, [r7, #4]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7ff fd2f 	bl	8007780 <Motor_GetEncoder>
 8007d22:	4603      	mov	r3, r0
 8007d24:	425b      	negs	r3, r3
 8007d26:	65bb      	str	r3, [r7, #88]	@ 0x58

    // 计算编码器速度（单位时间内的变化量）
    float speed1 = (enc1 - prev_enc1) / dt;
 8007d28:	4b71      	ldr	r3, [pc, #452]	@ (8007ef0 <Motor_Straight+0x254>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	ee07 3a90 	vmov	s15, r3
 8007d34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007d38:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d40:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float speed2 = (enc2 - prev_enc2) / dt;
 8007d44:	4b6b      	ldr	r3, [pc, #428]	@ (8007ef4 <Motor_Straight+0x258>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	ee07 3a90 	vmov	s15, r3
 8007d50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007d54:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007d58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d5c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    float speed3 = (enc3 - prev_enc3) / dt;
 8007d60:	4b65      	ldr	r3, [pc, #404]	@ (8007ef8 <Motor_Straight+0x25c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	ee07 3a90 	vmov	s15, r3
 8007d6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007d70:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d78:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float speed4 = (enc4 - prev_enc4) / dt;
 8007d7c:	4b5f      	ldr	r3, [pc, #380]	@ (8007efc <Motor_Straight+0x260>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	ee07 3a90 	vmov	s15, r3
 8007d88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007d8c:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8007d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d94:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    // OLED_ShowNum(2,2,(int16_t)fabsf(speed3),4);  // 左后数字
    // OLED_ShowChar(2,9,speed4 >= 0 ? '+' : '-');  // 右前符号
    // OLED_ShowNum(2,10,(int16_t)fabsf(speed4),4);  // 右前数字

    // 更新上一次的编码器值
    prev_enc1 = enc1;
 8007d98:	4a55      	ldr	r2, [pc, #340]	@ (8007ef0 <Motor_Straight+0x254>)
 8007d9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d9c:	6013      	str	r3, [r2, #0]
    prev_enc2 = enc2;
 8007d9e:	4a55      	ldr	r2, [pc, #340]	@ (8007ef4 <Motor_Straight+0x258>)
 8007da0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007da2:	6013      	str	r3, [r2, #0]
    prev_enc3 = enc3;
 8007da4:	4a54      	ldr	r2, [pc, #336]	@ (8007ef8 <Motor_Straight+0x25c>)
 8007da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007da8:	6013      	str	r3, [r2, #0]
    prev_enc4 = enc4;
 8007daa:	4a54      	ldr	r2, [pc, #336]	@ (8007efc <Motor_Straight+0x260>)
 8007dac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dae:	6013      	str	r3, [r2, #0]

    // 获取当前偏航角
    float pitch, roll, current_yaw;
    if (MPU6050_DMP_Get_Data(&pitch, &roll, &current_yaw) != 0) {
 8007db0:	f107 020c 	add.w	r2, r7, #12
 8007db4:	f107 0110 	add.w	r1, r7, #16
 8007db8:	f107 0314 	add.w	r3, r7, #20
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fc fd6b 	bl	8004898 <MPU6050_DMP_Get_Data>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d014      	beq.n	8007df2 <Motor_Straight+0x156>
        Motor_SetSpeed(id1, 0);
 8007dc8:	79fb      	ldrb	r3, [r7, #7]
 8007dca:	2100      	movs	r1, #0
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff fbf9 	bl	80075c4 <Motor_SetSpeed>
        Motor_SetSpeed(id2, 0);
 8007dd2:	79bb      	ldrb	r3, [r7, #6]
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff fbf4 	bl	80075c4 <Motor_SetSpeed>
        Motor_SetSpeed(id3, 0);
 8007ddc:	797b      	ldrb	r3, [r7, #5]
 8007dde:	2100      	movs	r1, #0
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7ff fbef 	bl	80075c4 <Motor_SetSpeed>
        Motor_SetSpeed(id4, 0);
 8007de6:	793b      	ldrb	r3, [r7, #4]
 8007de8:	2100      	movs	r1, #0
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7ff fbea 	bl	80075c4 <Motor_SetSpeed>
 8007df0:	e16a      	b.n	80080c8 <Motor_Straight+0x42c>
        return;
    }
    *yaw = current_yaw;
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007df8:	601a      	str	r2, [r3, #0]

    // 计算偏航角误差
    float yaw_error = *target_yaw - *yaw;
 8007dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007dfe:	ed93 7a00 	vldr	s14, [r3]
 8007e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e06:	edd3 7a00 	vldr	s15, [r3]
 8007e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e0e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    if (yaw_error > 180) yaw_error -= 360;
 8007e12:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007e16:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8007f00 <Motor_Straight+0x264>
 8007e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e22:	dd08      	ble.n	8007e36 <Motor_Straight+0x19a>
 8007e24:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007e28:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8007f04 <Motor_Straight+0x268>
 8007e2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e30:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 8007e34:	e010      	b.n	8007e58 <Motor_Straight+0x1bc>
    else if (yaw_error < -180) yaw_error += 360;
 8007e36:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007e3a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8007f08 <Motor_Straight+0x26c>
 8007e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e46:	d507      	bpl.n	8007e58 <Motor_Straight+0x1bc>
 8007e48:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007e4c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8007f04 <Motor_Straight+0x268>
 8007e50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e54:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

    // 计算速度误差
    float left_speed_error = speed1 - speed3;  // 左侧轮子速度同步
 8007e58:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8007e5c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8007e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e64:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float right_speed_error = speed2 - speed4;  // 右侧轮子速度同步
 8007e68:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8007e6c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8007e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e74:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float position_speed_error = (left_speed_error + right_speed_error) / 2;  // 左右两侧速度同步
 8007e78:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8007e7c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8007e80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e84:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8007e88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e8c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // 速度分配 - 修正后的分配方式
    float base_speed = speed;
 8007e90:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	@ 0x88
 8007e94:	ee07 3a90 	vmov	s15, r3
 8007e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e9c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    
    // 限制PID输出的最大值，防止过度修正
    float max_pid_output = base_speed * 0.3f;
 8007ea0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8007ea4:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007f0c <Motor_Straight+0x270>
 8007ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007eac:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    
    // 计算偏航角PID输出
    float yaw_pid_output = 0.0f;
 8007eb0:	f04f 0300 	mov.w	r3, #0
 8007eb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (fabs(yaw_error) > 0.1f) {
 8007eb6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8007eba:	eef0 7ae7 	vabs.f32	s15, s15
 8007ebe:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007f10 <Motor_Straight+0x274>
 8007ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eca:	dd25      	ble.n	8007f18 <Motor_Straight+0x27c>
        yaw_pid_output = PID_Calculate(&pid_yaw, yaw_error, dt);
 8007ecc:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007ed0:	ed97 0a1c 	vldr	s0, [r7, #112]	@ 0x70
 8007ed4:	480f      	ldr	r0, [pc, #60]	@ (8007f14 <Motor_Straight+0x278>)
 8007ed6:	f000 ff21 	bl	8008d1c <PID_Calculate>
 8007eda:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
 8007ede:	e01e      	b.n	8007f1e <Motor_Straight+0x282>
 8007ee0:	20000534 	.word	0x20000534
 8007ee4:	447a0000 	.word	0x447a0000
 8007ee8:	3a83126f 	.word	0x3a83126f
 8007eec:	3a83126f 	.word	0x3a83126f
 8007ef0:	20000538 	.word	0x20000538
 8007ef4:	2000053c 	.word	0x2000053c
 8007ef8:	20000540 	.word	0x20000540
 8007efc:	20000544 	.word	0x20000544
 8007f00:	43340000 	.word	0x43340000
 8007f04:	43b40000 	.word	0x43b40000
 8007f08:	c3340000 	.word	0xc3340000
 8007f0c:	3e99999a 	.word	0x3e99999a
 8007f10:	3dcccccd 	.word	0x3dcccccd
 8007f14:	20000074 	.word	0x20000074
        // yaw_pid_output = fmaxf(fminf(yaw_pid_output, max_pid_output*1), -max_pid_output*1);
    } else {
        // 误差小于1度时，重置PID控制器
        PID_Reset(&pid_yaw);
 8007f18:	486d      	ldr	r0, [pc, #436]	@ (80080d0 <Motor_Straight+0x434>)
 8007f1a:	f000 ff7b 	bl	8008e14 <PID_Reset>
    }
    
    // 计算左右轮组的速度PID输出
    float left_pid_output = PID_Calculate(&pid_front, left_speed_error, dt);
 8007f1e:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007f22:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8007f26:	486b      	ldr	r0, [pc, #428]	@ (80080d4 <Motor_Straight+0x438>)
 8007f28:	f000 fef8 	bl	8008d1c <PID_Calculate>
 8007f2c:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
    float right_pid_output = PID_Calculate(&pid_rear, right_speed_error, dt);
 8007f30:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007f34:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8007f38:	4867      	ldr	r0, [pc, #412]	@ (80080d8 <Motor_Straight+0x43c>)
 8007f3a:	f000 feef 	bl	8008d1c <PID_Calculate>
 8007f3e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
    float position_pid_output = PID_Calculate(&pid_position, position_speed_error + yaw_pid_output, dt);
 8007f42:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8007f46:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f4e:	edd7 0a1d 	vldr	s1, [r7, #116]	@ 0x74
 8007f52:	eeb0 0a67 	vmov.f32	s0, s15
 8007f56:	4861      	ldr	r0, [pc, #388]	@ (80080dc <Motor_Straight+0x440>)
 8007f58:	f000 fee0 	bl	8008d1c <PID_Calculate>
 8007f5c:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    // left_pid_output = fmaxf(fminf(left_pid_output, max_pid_output*1), -max_pid_output*1);
    // right_pid_output = fmaxf(fminf(right_pid_output, max_pid_output*1), -max_pid_output*1);
    // position_pid_output = fmaxf(fminf(position_pid_output, max_pid_output*1), -max_pid_output*1);
    
    // 左侧轮子 - 正转
    float motor_speed1 = -(base_speed - left_pid_output - position_pid_output - yaw_pid_output);  // 左前
 8007f60:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007f64:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8007f68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f6c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007f70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f74:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f7c:	eef1 7a67 	vneg.f32	s15, s15
 8007f80:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float motor_speed3 = (base_speed + left_pid_output - position_pid_output - yaw_pid_output);   // 左后
 8007f84:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007f88:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8007f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f90:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007f94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f98:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fa0:	edc7 7a08 	vstr	s15, [r7, #32]
    
    // 右侧轮子 - 反转
    float motor_speed2 = (base_speed - right_pid_output + position_pid_output + yaw_pid_output);  // 右前
 8007fa4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007fa8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007fac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007fb0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fb8:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8007fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fc0:	edc7 7a07 	vstr	s15, [r7, #28]
    float motor_speed4 = -(base_speed + right_pid_output + position_pid_output + yaw_pid_output); // 右后
 8007fc4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007fc8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007fcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007fd0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007fd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007fd8:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8007fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fe0:	eef1 7a67 	vneg.f32	s15, s15
 8007fe4:	edc7 7a06 	vstr	s15, [r7, #24]

    // 限幅
    motor_speed1 = fmaxf(fminf(motor_speed1, 100.0f), -100.0f);
 8007fe8:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 80080e0 <Motor_Straight+0x444>
 8007fec:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8007ff0:	f009 fd3f 	bl	8011a72 <fminf>
 8007ff4:	eef0 7a40 	vmov.f32	s15, s0
 8007ff8:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 80080e4 <Motor_Straight+0x448>
 8007ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8008000:	f009 fd1a 	bl	8011a38 <fmaxf>
 8008004:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    motor_speed2 = fmaxf(fminf(motor_speed2, 100.0f), -100.0f);
 8008008:	eddf 0a35 	vldr	s1, [pc, #212]	@ 80080e0 <Motor_Straight+0x444>
 800800c:	ed97 0a07 	vldr	s0, [r7, #28]
 8008010:	f009 fd2f 	bl	8011a72 <fminf>
 8008014:	eef0 7a40 	vmov.f32	s15, s0
 8008018:	eddf 0a32 	vldr	s1, [pc, #200]	@ 80080e4 <Motor_Straight+0x448>
 800801c:	eeb0 0a67 	vmov.f32	s0, s15
 8008020:	f009 fd0a 	bl	8011a38 <fmaxf>
 8008024:	ed87 0a07 	vstr	s0, [r7, #28]
    motor_speed3 = fmaxf(fminf(motor_speed3, 100.0f), -100.0f);
 8008028:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 80080e0 <Motor_Straight+0x444>
 800802c:	ed97 0a08 	vldr	s0, [r7, #32]
 8008030:	f009 fd1f 	bl	8011a72 <fminf>
 8008034:	eef0 7a40 	vmov.f32	s15, s0
 8008038:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 80080e4 <Motor_Straight+0x448>
 800803c:	eeb0 0a67 	vmov.f32	s0, s15
 8008040:	f009 fcfa 	bl	8011a38 <fmaxf>
 8008044:	ed87 0a08 	vstr	s0, [r7, #32]
    motor_speed4 = fmaxf(fminf(motor_speed4, 100.0f), -100.0f);
 8008048:	eddf 0a25 	vldr	s1, [pc, #148]	@ 80080e0 <Motor_Straight+0x444>
 800804c:	ed97 0a06 	vldr	s0, [r7, #24]
 8008050:	f009 fd0f 	bl	8011a72 <fminf>
 8008054:	eef0 7a40 	vmov.f32	s15, s0
 8008058:	eddf 0a22 	vldr	s1, [pc, #136]	@ 80080e4 <Motor_Straight+0x448>
 800805c:	eeb0 0a67 	vmov.f32	s0, s15
 8008060:	f009 fcea 	bl	8011a38 <fmaxf>
 8008064:	ed87 0a06 	vstr	s0, [r7, #24]

    // 设置电机速度
    Motor_SetSpeed(id1, motor_speed1);
 8008068:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800806c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008070:	ee17 3a90 	vmov	r3, s15
 8008074:	b21a      	sxth	r2, r3
 8008076:	79fb      	ldrb	r3, [r7, #7]
 8008078:	4611      	mov	r1, r2
 800807a:	4618      	mov	r0, r3
 800807c:	f7ff faa2 	bl	80075c4 <Motor_SetSpeed>
    Motor_SetSpeed(id2, motor_speed2);
 8008080:	edd7 7a07 	vldr	s15, [r7, #28]
 8008084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008088:	ee17 3a90 	vmov	r3, s15
 800808c:	b21a      	sxth	r2, r3
 800808e:	79bb      	ldrb	r3, [r7, #6]
 8008090:	4611      	mov	r1, r2
 8008092:	4618      	mov	r0, r3
 8008094:	f7ff fa96 	bl	80075c4 <Motor_SetSpeed>
    Motor_SetSpeed(id3, motor_speed3);
 8008098:	edd7 7a08 	vldr	s15, [r7, #32]
 800809c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080a0:	ee17 3a90 	vmov	r3, s15
 80080a4:	b21a      	sxth	r2, r3
 80080a6:	797b      	ldrb	r3, [r7, #5]
 80080a8:	4611      	mov	r1, r2
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7ff fa8a 	bl	80075c4 <Motor_SetSpeed>
    Motor_SetSpeed(id4, motor_speed4);
 80080b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80080b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080b8:	ee17 3a90 	vmov	r3, s15
 80080bc:	b21a      	sxth	r2, r3
 80080be:	793b      	ldrb	r3, [r7, #4]
 80080c0:	4611      	mov	r1, r2
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7ff fa7e 	bl	80075c4 <Motor_SetSpeed>
}
 80080c8:	377c      	adds	r7, #124	@ 0x7c
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd90      	pop	{r4, r7, pc}
 80080ce:	bf00      	nop
 80080d0:	20000074 	.word	0x20000074
 80080d4:	2000008c 	.word	0x2000008c
 80080d8:	200000a4 	.word	0x200000a4
 80080dc:	200000bc 	.word	0x200000bc
 80080e0:	42c80000 	.word	0x42c80000
 80080e4:	c2c80000 	.word	0xc2c80000

080080e8 <Adjust_Left_Motors_By_Distance>:
    // 设置电机速度
    Motor_SetSpeed(id1, speed1);
    Motor_SetSpeed(id2, speed2);
}

void Adjust_Left_Motors_By_Distance(Motor_ID id1, Motor_ID id3, float distance, float threshold) {
 80080e8:	b480      	push	{r7}
 80080ea:	b089      	sub	sp, #36	@ 0x24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	460a      	mov	r2, r1
 80080f2:	ed87 0a02 	vstr	s0, [r7, #8]
 80080f6:	edc7 0a01 	vstr	s1, [r7, #4]
 80080fa:	73fb      	strb	r3, [r7, #15]
 80080fc:	4613      	mov	r3, r2
 80080fe:	73bb      	strb	r3, [r7, #14]
    if (distance < threshold) {
 8008100:	ed97 7a02 	vldr	s14, [r7, #8]
 8008104:	edd7 7a01 	vldr	s15, [r7, #4]
 8008108:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800810c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008110:	d400      	bmi.n	8008114 <Adjust_Left_Motors_By_Distance+0x2c>
        
        // Apply new compare values
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, compare1 + adjustment1);
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, compare3 + adjustment3);
    }
}
 8008112:	e169      	b.n	80083e8 <Adjust_Left_Motors_By_Distance+0x300>
        uint32_t compare1 = __HAL_TIM_GET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel);
 8008114:	7bfa      	ldrb	r2, [r7, #15]
 8008116:	499f      	ldr	r1, [pc, #636]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 8008118:	4613      	mov	r3, r2
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	440b      	add	r3, r1
 8008122:	3304      	adds	r3, #4
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10a      	bne.n	8008140 <Adjust_Left_Motors_By_Distance+0x58>
 800812a:	7bfa      	ldrb	r2, [r7, #15]
 800812c:	4999      	ldr	r1, [pc, #612]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 800812e:	4613      	mov	r3, r2
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	4413      	add	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	440b      	add	r3, r1
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800813e:	e035      	b.n	80081ac <Adjust_Left_Motors_By_Distance+0xc4>
 8008140:	7bfa      	ldrb	r2, [r7, #15]
 8008142:	4994      	ldr	r1, [pc, #592]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 8008144:	4613      	mov	r3, r2
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	4413      	add	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	440b      	add	r3, r1
 800814e:	3304      	adds	r3, #4
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b04      	cmp	r3, #4
 8008154:	d10a      	bne.n	800816c <Adjust_Left_Motors_By_Distance+0x84>
 8008156:	7bfa      	ldrb	r2, [r7, #15]
 8008158:	498e      	ldr	r1, [pc, #568]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 800815a:	4613      	mov	r3, r2
 800815c:	00db      	lsls	r3, r3, #3
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	440b      	add	r3, r1
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816a:	e01f      	b.n	80081ac <Adjust_Left_Motors_By_Distance+0xc4>
 800816c:	7bfa      	ldrb	r2, [r7, #15]
 800816e:	4989      	ldr	r1, [pc, #548]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 8008170:	4613      	mov	r3, r2
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	4413      	add	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	440b      	add	r3, r1
 800817a:	3304      	adds	r3, #4
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b08      	cmp	r3, #8
 8008180:	d10a      	bne.n	8008198 <Adjust_Left_Motors_By_Distance+0xb0>
 8008182:	7bfa      	ldrb	r2, [r7, #15]
 8008184:	4983      	ldr	r1, [pc, #524]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 8008186:	4613      	mov	r3, r2
 8008188:	00db      	lsls	r3, r3, #3
 800818a:	4413      	add	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	440b      	add	r3, r1
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008196:	e009      	b.n	80081ac <Adjust_Left_Motors_By_Distance+0xc4>
 8008198:	7bfa      	ldrb	r2, [r7, #15]
 800819a:	497e      	ldr	r1, [pc, #504]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 800819c:	4613      	mov	r3, r2
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	4413      	add	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	440b      	add	r3, r1
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ac:	61fb      	str	r3, [r7, #28]
        uint32_t compare3 = __HAL_TIM_GET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel);
 80081ae:	7bba      	ldrb	r2, [r7, #14]
 80081b0:	4978      	ldr	r1, [pc, #480]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 80081b2:	4613      	mov	r3, r2
 80081b4:	00db      	lsls	r3, r3, #3
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	440b      	add	r3, r1
 80081bc:	3304      	adds	r3, #4
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10a      	bne.n	80081da <Adjust_Left_Motors_By_Distance+0xf2>
 80081c4:	7bba      	ldrb	r2, [r7, #14]
 80081c6:	4973      	ldr	r1, [pc, #460]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 80081c8:	4613      	mov	r3, r2
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	4413      	add	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	440b      	add	r3, r1
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081d8:	e035      	b.n	8008246 <Adjust_Left_Motors_By_Distance+0x15e>
 80081da:	7bba      	ldrb	r2, [r7, #14]
 80081dc:	496d      	ldr	r1, [pc, #436]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 80081de:	4613      	mov	r3, r2
 80081e0:	00db      	lsls	r3, r3, #3
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	440b      	add	r3, r1
 80081e8:	3304      	adds	r3, #4
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	d10a      	bne.n	8008206 <Adjust_Left_Motors_By_Distance+0x11e>
 80081f0:	7bba      	ldrb	r2, [r7, #14]
 80081f2:	4968      	ldr	r1, [pc, #416]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 80081f4:	4613      	mov	r3, r2
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	440b      	add	r3, r1
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008204:	e01f      	b.n	8008246 <Adjust_Left_Motors_By_Distance+0x15e>
 8008206:	7bba      	ldrb	r2, [r7, #14]
 8008208:	4962      	ldr	r1, [pc, #392]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 800820a:	4613      	mov	r3, r2
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	440b      	add	r3, r1
 8008214:	3304      	adds	r3, #4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b08      	cmp	r3, #8
 800821a:	d10a      	bne.n	8008232 <Adjust_Left_Motors_By_Distance+0x14a>
 800821c:	7bba      	ldrb	r2, [r7, #14]
 800821e:	495d      	ldr	r1, [pc, #372]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 8008220:	4613      	mov	r3, r2
 8008222:	00db      	lsls	r3, r3, #3
 8008224:	4413      	add	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	440b      	add	r3, r1
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008230:	e009      	b.n	8008246 <Adjust_Left_Motors_By_Distance+0x15e>
 8008232:	7bba      	ldrb	r2, [r7, #14]
 8008234:	4957      	ldr	r1, [pc, #348]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 8008236:	4613      	mov	r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	4413      	add	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	440b      	add	r3, r1
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008246:	61bb      	str	r3, [r7, #24]
        uint32_t adjustment1 = compare1 * 0.1f;
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	ee07 3a90 	vmov	s15, r3
 800824e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008252:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8008398 <Adjust_Left_Motors_By_Distance+0x2b0>
 8008256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800825a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800825e:	ee17 3a90 	vmov	r3, s15
 8008262:	617b      	str	r3, [r7, #20]
        uint32_t adjustment3 = compare3 * 0.1f;
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	ee07 3a90 	vmov	s15, r3
 800826a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826e:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8008398 <Adjust_Left_Motors_By_Distance+0x2b0>
 8008272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800827a:	ee17 3a90 	vmov	r3, s15
 800827e:	613b      	str	r3, [r7, #16]
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, compare1 + adjustment1);
 8008280:	7bfa      	ldrb	r2, [r7, #15]
 8008282:	4944      	ldr	r1, [pc, #272]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 8008284:	4613      	mov	r3, r2
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	4413      	add	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	440b      	add	r3, r1
 800828e:	3304      	adds	r3, #4
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10d      	bne.n	80082b2 <Adjust_Left_Motors_By_Distance+0x1ca>
 8008296:	7bfa      	ldrb	r2, [r7, #15]
 8008298:	493e      	ldr	r1, [pc, #248]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 800829a:	4613      	mov	r3, r2
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	440b      	add	r3, r1
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69f9      	ldr	r1, [r7, #28]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	440a      	add	r2, r1
 80082ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80082b0:	e03e      	b.n	8008330 <Adjust_Left_Motors_By_Distance+0x248>
 80082b2:	7bfa      	ldrb	r2, [r7, #15]
 80082b4:	4937      	ldr	r1, [pc, #220]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 80082b6:	4613      	mov	r3, r2
 80082b8:	00db      	lsls	r3, r3, #3
 80082ba:	4413      	add	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	440b      	add	r3, r1
 80082c0:	3304      	adds	r3, #4
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b04      	cmp	r3, #4
 80082c6:	d10d      	bne.n	80082e4 <Adjust_Left_Motors_By_Distance+0x1fc>
 80082c8:	7bfa      	ldrb	r2, [r7, #15]
 80082ca:	4932      	ldr	r1, [pc, #200]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 80082cc:	4613      	mov	r3, r2
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	440b      	add	r3, r1
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	69f9      	ldr	r1, [r7, #28]
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	440b      	add	r3, r1
 80082e0:	6393      	str	r3, [r2, #56]	@ 0x38
 80082e2:	e025      	b.n	8008330 <Adjust_Left_Motors_By_Distance+0x248>
 80082e4:	7bfa      	ldrb	r2, [r7, #15]
 80082e6:	492b      	ldr	r1, [pc, #172]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 80082e8:	4613      	mov	r3, r2
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	4413      	add	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	440b      	add	r3, r1
 80082f2:	3304      	adds	r3, #4
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b08      	cmp	r3, #8
 80082f8:	d10d      	bne.n	8008316 <Adjust_Left_Motors_By_Distance+0x22e>
 80082fa:	7bfa      	ldrb	r2, [r7, #15]
 80082fc:	4925      	ldr	r1, [pc, #148]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 80082fe:	4613      	mov	r3, r2
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	4413      	add	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	440b      	add	r3, r1
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	69f9      	ldr	r1, [r7, #28]
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	440b      	add	r3, r1
 8008312:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008314:	e00c      	b.n	8008330 <Adjust_Left_Motors_By_Distance+0x248>
 8008316:	7bfa      	ldrb	r2, [r7, #15]
 8008318:	491e      	ldr	r1, [pc, #120]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 800831a:	4613      	mov	r3, r2
 800831c:	00db      	lsls	r3, r3, #3
 800831e:	4413      	add	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	440b      	add	r3, r1
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	69f9      	ldr	r1, [r7, #28]
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	440b      	add	r3, r1
 800832e:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, compare3 + adjustment3);
 8008330:	7bba      	ldrb	r2, [r7, #14]
 8008332:	4918      	ldr	r1, [pc, #96]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 8008334:	4613      	mov	r3, r2
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	4413      	add	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	440b      	add	r3, r1
 800833e:	3304      	adds	r3, #4
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10d      	bne.n	8008362 <Adjust_Left_Motors_By_Distance+0x27a>
 8008346:	7bba      	ldrb	r2, [r7, #14]
 8008348:	4912      	ldr	r1, [pc, #72]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 800834a:	4613      	mov	r3, r2
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	440b      	add	r3, r1
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	69b9      	ldr	r1, [r7, #24]
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	440a      	add	r2, r1
 800835e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8008360:	e042      	b.n	80083e8 <Adjust_Left_Motors_By_Distance+0x300>
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, compare3 + adjustment3);
 8008362:	7bba      	ldrb	r2, [r7, #14]
 8008364:	490b      	ldr	r1, [pc, #44]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 8008366:	4613      	mov	r3, r2
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	4413      	add	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	440b      	add	r3, r1
 8008370:	3304      	adds	r3, #4
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b04      	cmp	r3, #4
 8008376:	d111      	bne.n	800839c <Adjust_Left_Motors_By_Distance+0x2b4>
 8008378:	7bba      	ldrb	r2, [r7, #14]
 800837a:	4906      	ldr	r1, [pc, #24]	@ (8008394 <Adjust_Left_Motors_By_Distance+0x2ac>)
 800837c:	4613      	mov	r3, r2
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	4413      	add	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	440b      	add	r3, r1
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	69b9      	ldr	r1, [r7, #24]
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	440b      	add	r3, r1
 8008390:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8008392:	e029      	b.n	80083e8 <Adjust_Left_Motors_By_Distance+0x300>
 8008394:	2000037c 	.word	0x2000037c
 8008398:	3dcccccd 	.word	0x3dcccccd
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, compare3 + adjustment3);
 800839c:	7bba      	ldrb	r2, [r7, #14]
 800839e:	4915      	ldr	r1, [pc, #84]	@ (80083f4 <Adjust_Left_Motors_By_Distance+0x30c>)
 80083a0:	4613      	mov	r3, r2
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	4413      	add	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	3304      	adds	r3, #4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b08      	cmp	r3, #8
 80083b0:	d10d      	bne.n	80083ce <Adjust_Left_Motors_By_Distance+0x2e6>
 80083b2:	7bba      	ldrb	r2, [r7, #14]
 80083b4:	490f      	ldr	r1, [pc, #60]	@ (80083f4 <Adjust_Left_Motors_By_Distance+0x30c>)
 80083b6:	4613      	mov	r3, r2
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	4413      	add	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	440b      	add	r3, r1
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	69b9      	ldr	r1, [r7, #24]
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	440b      	add	r3, r1
 80083ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80083cc:	e00c      	b.n	80083e8 <Adjust_Left_Motors_By_Distance+0x300>
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, compare3 + adjustment3);
 80083ce:	7bba      	ldrb	r2, [r7, #14]
 80083d0:	4908      	ldr	r1, [pc, #32]	@ (80083f4 <Adjust_Left_Motors_By_Distance+0x30c>)
 80083d2:	4613      	mov	r3, r2
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	440b      	add	r3, r1
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	69b9      	ldr	r1, [r7, #24]
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	440b      	add	r3, r1
 80083e6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80083e8:	bf00      	nop
 80083ea:	3724      	adds	r7, #36	@ 0x24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	2000037c 	.word	0x2000037c

080083f8 <Adjust_Right_Motors_By_Distance>:

void Adjust_Right_Motors_By_Distance(Motor_ID id2, Motor_ID id4, float distance, float threshold) {
 80083f8:	b480      	push	{r7}
 80083fa:	b089      	sub	sp, #36	@ 0x24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	4603      	mov	r3, r0
 8008400:	460a      	mov	r2, r1
 8008402:	ed87 0a02 	vstr	s0, [r7, #8]
 8008406:	edc7 0a01 	vstr	s1, [r7, #4]
 800840a:	73fb      	strb	r3, [r7, #15]
 800840c:	4613      	mov	r3, r2
 800840e:	73bb      	strb	r3, [r7, #14]
    if (distance < threshold) {
 8008410:	ed97 7a02 	vldr	s14, [r7, #8]
 8008414:	edd7 7a01 	vldr	s15, [r7, #4]
 8008418:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800841c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008420:	d400      	bmi.n	8008424 <Adjust_Right_Motors_By_Distance+0x2c>
        
        // Apply new compare values
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, compare2 + adjustment2);
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, compare4 + adjustment4);
    }
}
 8008422:	e169      	b.n	80086f8 <Adjust_Right_Motors_By_Distance+0x300>
        uint32_t compare2 = __HAL_TIM_GET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel);
 8008424:	7bfa      	ldrb	r2, [r7, #15]
 8008426:	499f      	ldr	r1, [pc, #636]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 8008428:	4613      	mov	r3, r2
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	440b      	add	r3, r1
 8008432:	3304      	adds	r3, #4
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <Adjust_Right_Motors_By_Distance+0x58>
 800843a:	7bfa      	ldrb	r2, [r7, #15]
 800843c:	4999      	ldr	r1, [pc, #612]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 800843e:	4613      	mov	r3, r2
 8008440:	00db      	lsls	r3, r3, #3
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	440b      	add	r3, r1
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800844e:	e035      	b.n	80084bc <Adjust_Right_Motors_By_Distance+0xc4>
 8008450:	7bfa      	ldrb	r2, [r7, #15]
 8008452:	4994      	ldr	r1, [pc, #592]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 8008454:	4613      	mov	r3, r2
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	440b      	add	r3, r1
 800845e:	3304      	adds	r3, #4
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b04      	cmp	r3, #4
 8008464:	d10a      	bne.n	800847c <Adjust_Right_Motors_By_Distance+0x84>
 8008466:	7bfa      	ldrb	r2, [r7, #15]
 8008468:	498e      	ldr	r1, [pc, #568]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 800846a:	4613      	mov	r3, r2
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	440b      	add	r3, r1
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800847a:	e01f      	b.n	80084bc <Adjust_Right_Motors_By_Distance+0xc4>
 800847c:	7bfa      	ldrb	r2, [r7, #15]
 800847e:	4989      	ldr	r1, [pc, #548]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 8008480:	4613      	mov	r3, r2
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	4413      	add	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	440b      	add	r3, r1
 800848a:	3304      	adds	r3, #4
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b08      	cmp	r3, #8
 8008490:	d10a      	bne.n	80084a8 <Adjust_Right_Motors_By_Distance+0xb0>
 8008492:	7bfa      	ldrb	r2, [r7, #15]
 8008494:	4983      	ldr	r1, [pc, #524]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 8008496:	4613      	mov	r3, r2
 8008498:	00db      	lsls	r3, r3, #3
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	440b      	add	r3, r1
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084a6:	e009      	b.n	80084bc <Adjust_Right_Motors_By_Distance+0xc4>
 80084a8:	7bfa      	ldrb	r2, [r7, #15]
 80084aa:	497e      	ldr	r1, [pc, #504]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 80084ac:	4613      	mov	r3, r2
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	4413      	add	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	440b      	add	r3, r1
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084bc:	61fb      	str	r3, [r7, #28]
        uint32_t compare4 = __HAL_TIM_GET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel);
 80084be:	7bba      	ldrb	r2, [r7, #14]
 80084c0:	4978      	ldr	r1, [pc, #480]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 80084c2:	4613      	mov	r3, r2
 80084c4:	00db      	lsls	r3, r3, #3
 80084c6:	4413      	add	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	440b      	add	r3, r1
 80084cc:	3304      	adds	r3, #4
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10a      	bne.n	80084ea <Adjust_Right_Motors_By_Distance+0xf2>
 80084d4:	7bba      	ldrb	r2, [r7, #14]
 80084d6:	4973      	ldr	r1, [pc, #460]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 80084d8:	4613      	mov	r3, r2
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	4413      	add	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	440b      	add	r3, r1
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084e8:	e035      	b.n	8008556 <Adjust_Right_Motors_By_Distance+0x15e>
 80084ea:	7bba      	ldrb	r2, [r7, #14]
 80084ec:	496d      	ldr	r1, [pc, #436]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 80084ee:	4613      	mov	r3, r2
 80084f0:	00db      	lsls	r3, r3, #3
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	440b      	add	r3, r1
 80084f8:	3304      	adds	r3, #4
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	d10a      	bne.n	8008516 <Adjust_Right_Motors_By_Distance+0x11e>
 8008500:	7bba      	ldrb	r2, [r7, #14]
 8008502:	4968      	ldr	r1, [pc, #416]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 8008504:	4613      	mov	r3, r2
 8008506:	00db      	lsls	r3, r3, #3
 8008508:	4413      	add	r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	440b      	add	r3, r1
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008514:	e01f      	b.n	8008556 <Adjust_Right_Motors_By_Distance+0x15e>
 8008516:	7bba      	ldrb	r2, [r7, #14]
 8008518:	4962      	ldr	r1, [pc, #392]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 800851a:	4613      	mov	r3, r2
 800851c:	00db      	lsls	r3, r3, #3
 800851e:	4413      	add	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	440b      	add	r3, r1
 8008524:	3304      	adds	r3, #4
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b08      	cmp	r3, #8
 800852a:	d10a      	bne.n	8008542 <Adjust_Right_Motors_By_Distance+0x14a>
 800852c:	7bba      	ldrb	r2, [r7, #14]
 800852e:	495d      	ldr	r1, [pc, #372]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 8008530:	4613      	mov	r3, r2
 8008532:	00db      	lsls	r3, r3, #3
 8008534:	4413      	add	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	440b      	add	r3, r1
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008540:	e009      	b.n	8008556 <Adjust_Right_Motors_By_Distance+0x15e>
 8008542:	7bba      	ldrb	r2, [r7, #14]
 8008544:	4957      	ldr	r1, [pc, #348]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 8008546:	4613      	mov	r3, r2
 8008548:	00db      	lsls	r3, r3, #3
 800854a:	4413      	add	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	440b      	add	r3, r1
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008556:	61bb      	str	r3, [r7, #24]
        uint32_t adjustment2 = compare2 * 0.1f;
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	ee07 3a90 	vmov	s15, r3
 800855e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008562:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80086a8 <Adjust_Right_Motors_By_Distance+0x2b0>
 8008566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800856a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800856e:	ee17 3a90 	vmov	r3, s15
 8008572:	617b      	str	r3, [r7, #20]
        uint32_t adjustment4 = compare4 * 0.1f;
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857e:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80086a8 <Adjust_Right_Motors_By_Distance+0x2b0>
 8008582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800858a:	ee17 3a90 	vmov	r3, s15
 800858e:	613b      	str	r3, [r7, #16]
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, compare2 + adjustment2);
 8008590:	7bfa      	ldrb	r2, [r7, #15]
 8008592:	4944      	ldr	r1, [pc, #272]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 8008594:	4613      	mov	r3, r2
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	440b      	add	r3, r1
 800859e:	3304      	adds	r3, #4
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10d      	bne.n	80085c2 <Adjust_Right_Motors_By_Distance+0x1ca>
 80085a6:	7bfa      	ldrb	r2, [r7, #15]
 80085a8:	493e      	ldr	r1, [pc, #248]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 80085aa:	4613      	mov	r3, r2
 80085ac:	00db      	lsls	r3, r3, #3
 80085ae:	4413      	add	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	440b      	add	r3, r1
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	69f9      	ldr	r1, [r7, #28]
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	440a      	add	r2, r1
 80085be:	635a      	str	r2, [r3, #52]	@ 0x34
 80085c0:	e03e      	b.n	8008640 <Adjust_Right_Motors_By_Distance+0x248>
 80085c2:	7bfa      	ldrb	r2, [r7, #15]
 80085c4:	4937      	ldr	r1, [pc, #220]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 80085c6:	4613      	mov	r3, r2
 80085c8:	00db      	lsls	r3, r3, #3
 80085ca:	4413      	add	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	440b      	add	r3, r1
 80085d0:	3304      	adds	r3, #4
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b04      	cmp	r3, #4
 80085d6:	d10d      	bne.n	80085f4 <Adjust_Right_Motors_By_Distance+0x1fc>
 80085d8:	7bfa      	ldrb	r2, [r7, #15]
 80085da:	4932      	ldr	r1, [pc, #200]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 80085dc:	4613      	mov	r3, r2
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	4413      	add	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	440b      	add	r3, r1
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	69f9      	ldr	r1, [r7, #28]
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	440b      	add	r3, r1
 80085f0:	6393      	str	r3, [r2, #56]	@ 0x38
 80085f2:	e025      	b.n	8008640 <Adjust_Right_Motors_By_Distance+0x248>
 80085f4:	7bfa      	ldrb	r2, [r7, #15]
 80085f6:	492b      	ldr	r1, [pc, #172]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 80085f8:	4613      	mov	r3, r2
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	440b      	add	r3, r1
 8008602:	3304      	adds	r3, #4
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b08      	cmp	r3, #8
 8008608:	d10d      	bne.n	8008626 <Adjust_Right_Motors_By_Distance+0x22e>
 800860a:	7bfa      	ldrb	r2, [r7, #15]
 800860c:	4925      	ldr	r1, [pc, #148]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 800860e:	4613      	mov	r3, r2
 8008610:	00db      	lsls	r3, r3, #3
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	440b      	add	r3, r1
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	69f9      	ldr	r1, [r7, #28]
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	440b      	add	r3, r1
 8008622:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008624:	e00c      	b.n	8008640 <Adjust_Right_Motors_By_Distance+0x248>
 8008626:	7bfa      	ldrb	r2, [r7, #15]
 8008628:	491e      	ldr	r1, [pc, #120]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 800862a:	4613      	mov	r3, r2
 800862c:	00db      	lsls	r3, r3, #3
 800862e:	4413      	add	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	440b      	add	r3, r1
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	69f9      	ldr	r1, [r7, #28]
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	440b      	add	r3, r1
 800863e:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, compare4 + adjustment4);
 8008640:	7bba      	ldrb	r2, [r7, #14]
 8008642:	4918      	ldr	r1, [pc, #96]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 8008644:	4613      	mov	r3, r2
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	4413      	add	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	440b      	add	r3, r1
 800864e:	3304      	adds	r3, #4
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10d      	bne.n	8008672 <Adjust_Right_Motors_By_Distance+0x27a>
 8008656:	7bba      	ldrb	r2, [r7, #14]
 8008658:	4912      	ldr	r1, [pc, #72]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 800865a:	4613      	mov	r3, r2
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	440b      	add	r3, r1
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	69b9      	ldr	r1, [r7, #24]
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	440a      	add	r2, r1
 800866e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8008670:	e042      	b.n	80086f8 <Adjust_Right_Motors_By_Distance+0x300>
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, compare4 + adjustment4);
 8008672:	7bba      	ldrb	r2, [r7, #14]
 8008674:	490b      	ldr	r1, [pc, #44]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 8008676:	4613      	mov	r3, r2
 8008678:	00db      	lsls	r3, r3, #3
 800867a:	4413      	add	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	440b      	add	r3, r1
 8008680:	3304      	adds	r3, #4
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b04      	cmp	r3, #4
 8008686:	d111      	bne.n	80086ac <Adjust_Right_Motors_By_Distance+0x2b4>
 8008688:	7bba      	ldrb	r2, [r7, #14]
 800868a:	4906      	ldr	r1, [pc, #24]	@ (80086a4 <Adjust_Right_Motors_By_Distance+0x2ac>)
 800868c:	4613      	mov	r3, r2
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	440b      	add	r3, r1
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	69b9      	ldr	r1, [r7, #24]
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	440b      	add	r3, r1
 80086a0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80086a2:	e029      	b.n	80086f8 <Adjust_Right_Motors_By_Distance+0x300>
 80086a4:	2000037c 	.word	0x2000037c
 80086a8:	3dcccccd 	.word	0x3dcccccd
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, compare4 + adjustment4);
 80086ac:	7bba      	ldrb	r2, [r7, #14]
 80086ae:	4915      	ldr	r1, [pc, #84]	@ (8008704 <Adjust_Right_Motors_By_Distance+0x30c>)
 80086b0:	4613      	mov	r3, r2
 80086b2:	00db      	lsls	r3, r3, #3
 80086b4:	4413      	add	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	440b      	add	r3, r1
 80086ba:	3304      	adds	r3, #4
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b08      	cmp	r3, #8
 80086c0:	d10d      	bne.n	80086de <Adjust_Right_Motors_By_Distance+0x2e6>
 80086c2:	7bba      	ldrb	r2, [r7, #14]
 80086c4:	490f      	ldr	r1, [pc, #60]	@ (8008704 <Adjust_Right_Motors_By_Distance+0x30c>)
 80086c6:	4613      	mov	r3, r2
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	4413      	add	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	440b      	add	r3, r1
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	69b9      	ldr	r1, [r7, #24]
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	440b      	add	r3, r1
 80086da:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80086dc:	e00c      	b.n	80086f8 <Adjust_Right_Motors_By_Distance+0x300>
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, compare4 + adjustment4);
 80086de:	7bba      	ldrb	r2, [r7, #14]
 80086e0:	4908      	ldr	r1, [pc, #32]	@ (8008704 <Adjust_Right_Motors_By_Distance+0x30c>)
 80086e2:	4613      	mov	r3, r2
 80086e4:	00db      	lsls	r3, r3, #3
 80086e6:	4413      	add	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	440b      	add	r3, r1
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	69b9      	ldr	r1, [r7, #24]
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	440b      	add	r3, r1
 80086f6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80086f8:	bf00      	nop
 80086fa:	3724      	adds	r7, #36	@ 0x24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	2000037c 	.word	0x2000037c

08008708 <Adjust_Motors_By_FrontBack_Distance>:

void Adjust_Motors_By_FrontBack_Distance(Motor_ID id1, Motor_ID id4, Motor_ID id2, Motor_ID id3, float distance, float threshold) {
 8008708:	b490      	push	{r4, r7}
 800870a:	b08c      	sub	sp, #48	@ 0x30
 800870c:	af00      	add	r7, sp, #0
 800870e:	4604      	mov	r4, r0
 8008710:	4608      	mov	r0, r1
 8008712:	4611      	mov	r1, r2
 8008714:	461a      	mov	r2, r3
 8008716:	ed87 0a02 	vstr	s0, [r7, #8]
 800871a:	edc7 0a01 	vstr	s1, [r7, #4]
 800871e:	4623      	mov	r3, r4
 8008720:	73fb      	strb	r3, [r7, #15]
 8008722:	4603      	mov	r3, r0
 8008724:	73bb      	strb	r3, [r7, #14]
 8008726:	460b      	mov	r3, r1
 8008728:	737b      	strb	r3, [r7, #13]
 800872a:	4613      	mov	r3, r2
 800872c:	733b      	strb	r3, [r7, #12]
    if (distance < threshold) {
 800872e:	ed97 7a02 	vldr	s14, [r7, #8]
 8008732:	edd7 7a01 	vldr	s15, [r7, #4]
 8008736:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800873a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800873e:	f140 816c 	bpl.w	8008a1a <Adjust_Motors_By_FrontBack_Distance+0x312>
        // Get current compare values for front motors
        uint32_t compare1 = __HAL_TIM_GET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel);
 8008742:	7bfa      	ldrb	r2, [r7, #15]
 8008744:	499f      	ldr	r1, [pc, #636]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8008746:	4613      	mov	r3, r2
 8008748:	00db      	lsls	r3, r3, #3
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	440b      	add	r3, r1
 8008750:	3304      	adds	r3, #4
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10a      	bne.n	800876e <Adjust_Motors_By_FrontBack_Distance+0x66>
 8008758:	7bfa      	ldrb	r2, [r7, #15]
 800875a:	499a      	ldr	r1, [pc, #616]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800875c:	4613      	mov	r3, r2
 800875e:	00db      	lsls	r3, r3, #3
 8008760:	4413      	add	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	440b      	add	r3, r1
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800876c:	e035      	b.n	80087da <Adjust_Motors_By_FrontBack_Distance+0xd2>
 800876e:	7bfa      	ldrb	r2, [r7, #15]
 8008770:	4994      	ldr	r1, [pc, #592]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8008772:	4613      	mov	r3, r2
 8008774:	00db      	lsls	r3, r3, #3
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	440b      	add	r3, r1
 800877c:	3304      	adds	r3, #4
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b04      	cmp	r3, #4
 8008782:	d10a      	bne.n	800879a <Adjust_Motors_By_FrontBack_Distance+0x92>
 8008784:	7bfa      	ldrb	r2, [r7, #15]
 8008786:	498f      	ldr	r1, [pc, #572]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8008788:	4613      	mov	r3, r2
 800878a:	00db      	lsls	r3, r3, #3
 800878c:	4413      	add	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	440b      	add	r3, r1
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008798:	e01f      	b.n	80087da <Adjust_Motors_By_FrontBack_Distance+0xd2>
 800879a:	7bfa      	ldrb	r2, [r7, #15]
 800879c:	4989      	ldr	r1, [pc, #548]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800879e:	4613      	mov	r3, r2
 80087a0:	00db      	lsls	r3, r3, #3
 80087a2:	4413      	add	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	440b      	add	r3, r1
 80087a8:	3304      	adds	r3, #4
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b08      	cmp	r3, #8
 80087ae:	d10a      	bne.n	80087c6 <Adjust_Motors_By_FrontBack_Distance+0xbe>
 80087b0:	7bfa      	ldrb	r2, [r7, #15]
 80087b2:	4984      	ldr	r1, [pc, #528]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 80087b4:	4613      	mov	r3, r2
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	4413      	add	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	440b      	add	r3, r1
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c4:	e009      	b.n	80087da <Adjust_Motors_By_FrontBack_Distance+0xd2>
 80087c6:	7bfa      	ldrb	r2, [r7, #15]
 80087c8:	497e      	ldr	r1, [pc, #504]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 80087ca:	4613      	mov	r3, r2
 80087cc:	00db      	lsls	r3, r3, #3
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	440b      	add	r3, r1
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087da:	61fb      	str	r3, [r7, #28]
        uint32_t compare4 = __HAL_TIM_GET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel);
 80087dc:	7bba      	ldrb	r2, [r7, #14]
 80087de:	4979      	ldr	r1, [pc, #484]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 80087e0:	4613      	mov	r3, r2
 80087e2:	00db      	lsls	r3, r3, #3
 80087e4:	4413      	add	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	440b      	add	r3, r1
 80087ea:	3304      	adds	r3, #4
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10a      	bne.n	8008808 <Adjust_Motors_By_FrontBack_Distance+0x100>
 80087f2:	7bba      	ldrb	r2, [r7, #14]
 80087f4:	4973      	ldr	r1, [pc, #460]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 80087f6:	4613      	mov	r3, r2
 80087f8:	00db      	lsls	r3, r3, #3
 80087fa:	4413      	add	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	440b      	add	r3, r1
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008806:	e035      	b.n	8008874 <Adjust_Motors_By_FrontBack_Distance+0x16c>
 8008808:	7bba      	ldrb	r2, [r7, #14]
 800880a:	496e      	ldr	r1, [pc, #440]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800880c:	4613      	mov	r3, r2
 800880e:	00db      	lsls	r3, r3, #3
 8008810:	4413      	add	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	440b      	add	r3, r1
 8008816:	3304      	adds	r3, #4
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b04      	cmp	r3, #4
 800881c:	d10a      	bne.n	8008834 <Adjust_Motors_By_FrontBack_Distance+0x12c>
 800881e:	7bba      	ldrb	r2, [r7, #14]
 8008820:	4968      	ldr	r1, [pc, #416]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8008822:	4613      	mov	r3, r2
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	440b      	add	r3, r1
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008832:	e01f      	b.n	8008874 <Adjust_Motors_By_FrontBack_Distance+0x16c>
 8008834:	7bba      	ldrb	r2, [r7, #14]
 8008836:	4963      	ldr	r1, [pc, #396]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8008838:	4613      	mov	r3, r2
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	4413      	add	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	440b      	add	r3, r1
 8008842:	3304      	adds	r3, #4
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b08      	cmp	r3, #8
 8008848:	d10a      	bne.n	8008860 <Adjust_Motors_By_FrontBack_Distance+0x158>
 800884a:	7bba      	ldrb	r2, [r7, #14]
 800884c:	495d      	ldr	r1, [pc, #372]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800884e:	4613      	mov	r3, r2
 8008850:	00db      	lsls	r3, r3, #3
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	440b      	add	r3, r1
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800885e:	e009      	b.n	8008874 <Adjust_Motors_By_FrontBack_Distance+0x16c>
 8008860:	7bba      	ldrb	r2, [r7, #14]
 8008862:	4958      	ldr	r1, [pc, #352]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8008864:	4613      	mov	r3, r2
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	440b      	add	r3, r1
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008874:	61bb      	str	r3, [r7, #24]
        
        // Calculate adjustment (increase by 10% of current value)
        uint32_t adjustment1 = compare1 * 0.1f;
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	ee07 3a90 	vmov	s15, r3
 800887c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008880:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80089c8 <Adjust_Motors_By_FrontBack_Distance+0x2c0>
 8008884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800888c:	ee17 3a90 	vmov	r3, s15
 8008890:	617b      	str	r3, [r7, #20]
        uint32_t adjustment4 = compare4 * 0.1f;
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	ee07 3a90 	vmov	s15, r3
 8008898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80089c8 <Adjust_Motors_By_FrontBack_Distance+0x2c0>
 80088a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088a8:	ee17 3a90 	vmov	r3, s15
 80088ac:	613b      	str	r3, [r7, #16]
        
        // Apply new compare values to front motors
        __HAL_TIM_SET_COMPARE(motors[id1].pwm_tim, motors[id1].pwm_channel, compare1 + adjustment1);
 80088ae:	7bfa      	ldrb	r2, [r7, #15]
 80088b0:	4944      	ldr	r1, [pc, #272]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 80088b2:	4613      	mov	r3, r2
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	4413      	add	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	440b      	add	r3, r1
 80088bc:	3304      	adds	r3, #4
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10d      	bne.n	80088e0 <Adjust_Motors_By_FrontBack_Distance+0x1d8>
 80088c4:	7bfa      	ldrb	r2, [r7, #15]
 80088c6:	493f      	ldr	r1, [pc, #252]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 80088c8:	4613      	mov	r3, r2
 80088ca:	00db      	lsls	r3, r3, #3
 80088cc:	4413      	add	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	440b      	add	r3, r1
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	69f9      	ldr	r1, [r7, #28]
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	440a      	add	r2, r1
 80088dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80088de:	e03e      	b.n	800895e <Adjust_Motors_By_FrontBack_Distance+0x256>
 80088e0:	7bfa      	ldrb	r2, [r7, #15]
 80088e2:	4938      	ldr	r1, [pc, #224]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 80088e4:	4613      	mov	r3, r2
 80088e6:	00db      	lsls	r3, r3, #3
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	440b      	add	r3, r1
 80088ee:	3304      	adds	r3, #4
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	d10d      	bne.n	8008912 <Adjust_Motors_By_FrontBack_Distance+0x20a>
 80088f6:	7bfa      	ldrb	r2, [r7, #15]
 80088f8:	4932      	ldr	r1, [pc, #200]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 80088fa:	4613      	mov	r3, r2
 80088fc:	00db      	lsls	r3, r3, #3
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	440b      	add	r3, r1
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	69f9      	ldr	r1, [r7, #28]
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	440b      	add	r3, r1
 800890e:	6393      	str	r3, [r2, #56]	@ 0x38
 8008910:	e025      	b.n	800895e <Adjust_Motors_By_FrontBack_Distance+0x256>
 8008912:	7bfa      	ldrb	r2, [r7, #15]
 8008914:	492b      	ldr	r1, [pc, #172]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8008916:	4613      	mov	r3, r2
 8008918:	00db      	lsls	r3, r3, #3
 800891a:	4413      	add	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	440b      	add	r3, r1
 8008920:	3304      	adds	r3, #4
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b08      	cmp	r3, #8
 8008926:	d10d      	bne.n	8008944 <Adjust_Motors_By_FrontBack_Distance+0x23c>
 8008928:	7bfa      	ldrb	r2, [r7, #15]
 800892a:	4926      	ldr	r1, [pc, #152]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 800892c:	4613      	mov	r3, r2
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	4413      	add	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	440b      	add	r3, r1
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	69f9      	ldr	r1, [r7, #28]
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	440b      	add	r3, r1
 8008940:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008942:	e00c      	b.n	800895e <Adjust_Motors_By_FrontBack_Distance+0x256>
 8008944:	7bfa      	ldrb	r2, [r7, #15]
 8008946:	491f      	ldr	r1, [pc, #124]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8008948:	4613      	mov	r3, r2
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	4413      	add	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	440b      	add	r3, r1
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	69f9      	ldr	r1, [r7, #28]
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	440b      	add	r3, r1
 800895c:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, compare4 + adjustment4);
 800895e:	7bba      	ldrb	r2, [r7, #14]
 8008960:	4918      	ldr	r1, [pc, #96]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8008962:	4613      	mov	r3, r2
 8008964:	00db      	lsls	r3, r3, #3
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	440b      	add	r3, r1
 800896c:	3304      	adds	r3, #4
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10d      	bne.n	8008990 <Adjust_Motors_By_FrontBack_Distance+0x288>
 8008974:	7bba      	ldrb	r2, [r7, #14]
 8008976:	4913      	ldr	r1, [pc, #76]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8008978:	4613      	mov	r3, r2
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	4413      	add	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	440b      	add	r3, r1
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	69b9      	ldr	r1, [r7, #24]
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	440a      	add	r2, r1
 800898c:	635a      	str	r2, [r3, #52]	@ 0x34
        
        // Apply new compare values to back motors
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, compare2 + adjustment2);
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, compare3 + adjustment3);
    }
}
 800898e:	e1bd      	b.n	8008d0c <Adjust_Motors_By_FrontBack_Distance+0x604>
        __HAL_TIM_SET_COMPARE(motors[id4].pwm_tim, motors[id4].pwm_channel, compare4 + adjustment4);
 8008990:	7bba      	ldrb	r2, [r7, #14]
 8008992:	490c      	ldr	r1, [pc, #48]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 8008994:	4613      	mov	r3, r2
 8008996:	00db      	lsls	r3, r3, #3
 8008998:	4413      	add	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	440b      	add	r3, r1
 800899e:	3304      	adds	r3, #4
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d112      	bne.n	80089cc <Adjust_Motors_By_FrontBack_Distance+0x2c4>
 80089a6:	7bba      	ldrb	r2, [r7, #14]
 80089a8:	4906      	ldr	r1, [pc, #24]	@ (80089c4 <Adjust_Motors_By_FrontBack_Distance+0x2bc>)
 80089aa:	4613      	mov	r3, r2
 80089ac:	00db      	lsls	r3, r3, #3
 80089ae:	4413      	add	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	440b      	add	r3, r1
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	69b9      	ldr	r1, [r7, #24]
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	440b      	add	r3, r1
 80089be:	6393      	str	r3, [r2, #56]	@ 0x38
 80089c0:	e1a4      	b.n	8008d0c <Adjust_Motors_By_FrontBack_Distance+0x604>
 80089c2:	bf00      	nop
 80089c4:	2000037c 	.word	0x2000037c
 80089c8:	3dcccccd 	.word	0x3dcccccd
 80089cc:	7bba      	ldrb	r2, [r7, #14]
 80089ce:	499a      	ldr	r1, [pc, #616]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 80089d0:	4613      	mov	r3, r2
 80089d2:	00db      	lsls	r3, r3, #3
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	440b      	add	r3, r1
 80089da:	3304      	adds	r3, #4
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b08      	cmp	r3, #8
 80089e0:	d10d      	bne.n	80089fe <Adjust_Motors_By_FrontBack_Distance+0x2f6>
 80089e2:	7bba      	ldrb	r2, [r7, #14]
 80089e4:	4994      	ldr	r1, [pc, #592]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 80089e6:	4613      	mov	r3, r2
 80089e8:	00db      	lsls	r3, r3, #3
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	440b      	add	r3, r1
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	69b9      	ldr	r1, [r7, #24]
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	440b      	add	r3, r1
 80089fa:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80089fc:	e186      	b.n	8008d0c <Adjust_Motors_By_FrontBack_Distance+0x604>
 80089fe:	7bba      	ldrb	r2, [r7, #14]
 8008a00:	498d      	ldr	r1, [pc, #564]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008a02:	4613      	mov	r3, r2
 8008a04:	00db      	lsls	r3, r3, #3
 8008a06:	4413      	add	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	440b      	add	r3, r1
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	69b9      	ldr	r1, [r7, #24]
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	440b      	add	r3, r1
 8008a16:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8008a18:	e178      	b.n	8008d0c <Adjust_Motors_By_FrontBack_Distance+0x604>
    } else if(distance > threshold + 20.0f){
 8008a1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8008a1e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8008a22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a26:	ed97 7a02 	vldr	s14, [r7, #8]
 8008a2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a32:	dc00      	bgt.n	8008a36 <Adjust_Motors_By_FrontBack_Distance+0x32e>
}
 8008a34:	e16a      	b.n	8008d0c <Adjust_Motors_By_FrontBack_Distance+0x604>
        uint32_t compare2 = __HAL_TIM_GET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel);
 8008a36:	7b7a      	ldrb	r2, [r7, #13]
 8008a38:	497f      	ldr	r1, [pc, #508]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	00db      	lsls	r3, r3, #3
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	3304      	adds	r3, #4
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10a      	bne.n	8008a62 <Adjust_Motors_By_FrontBack_Distance+0x35a>
 8008a4c:	7b7a      	ldrb	r2, [r7, #13]
 8008a4e:	497a      	ldr	r1, [pc, #488]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008a50:	4613      	mov	r3, r2
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	4413      	add	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	440b      	add	r3, r1
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a60:	e035      	b.n	8008ace <Adjust_Motors_By_FrontBack_Distance+0x3c6>
 8008a62:	7b7a      	ldrb	r2, [r7, #13]
 8008a64:	4974      	ldr	r1, [pc, #464]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008a66:	4613      	mov	r3, r2
 8008a68:	00db      	lsls	r3, r3, #3
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	440b      	add	r3, r1
 8008a70:	3304      	adds	r3, #4
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2b04      	cmp	r3, #4
 8008a76:	d10a      	bne.n	8008a8e <Adjust_Motors_By_FrontBack_Distance+0x386>
 8008a78:	7b7a      	ldrb	r2, [r7, #13]
 8008a7a:	496f      	ldr	r1, [pc, #444]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	00db      	lsls	r3, r3, #3
 8008a80:	4413      	add	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	440b      	add	r3, r1
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a8c:	e01f      	b.n	8008ace <Adjust_Motors_By_FrontBack_Distance+0x3c6>
 8008a8e:	7b7a      	ldrb	r2, [r7, #13]
 8008a90:	4969      	ldr	r1, [pc, #420]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008a92:	4613      	mov	r3, r2
 8008a94:	00db      	lsls	r3, r3, #3
 8008a96:	4413      	add	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	440b      	add	r3, r1
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b08      	cmp	r3, #8
 8008aa2:	d10a      	bne.n	8008aba <Adjust_Motors_By_FrontBack_Distance+0x3b2>
 8008aa4:	7b7a      	ldrb	r2, [r7, #13]
 8008aa6:	4964      	ldr	r1, [pc, #400]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	440b      	add	r3, r1
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab8:	e009      	b.n	8008ace <Adjust_Motors_By_FrontBack_Distance+0x3c6>
 8008aba:	7b7a      	ldrb	r2, [r7, #13]
 8008abc:	495e      	ldr	r1, [pc, #376]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008abe:	4613      	mov	r3, r2
 8008ac0:	00db      	lsls	r3, r3, #3
 8008ac2:	4413      	add	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	440b      	add	r3, r1
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t compare3 = __HAL_TIM_GET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel);
 8008ad0:	7b3a      	ldrb	r2, [r7, #12]
 8008ad2:	4959      	ldr	r1, [pc, #356]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	00db      	lsls	r3, r3, #3
 8008ad8:	4413      	add	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	440b      	add	r3, r1
 8008ade:	3304      	adds	r3, #4
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10a      	bne.n	8008afc <Adjust_Motors_By_FrontBack_Distance+0x3f4>
 8008ae6:	7b3a      	ldrb	r2, [r7, #12]
 8008ae8:	4953      	ldr	r1, [pc, #332]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008aea:	4613      	mov	r3, r2
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	4413      	add	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	440b      	add	r3, r1
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008afa:	e035      	b.n	8008b68 <Adjust_Motors_By_FrontBack_Distance+0x460>
 8008afc:	7b3a      	ldrb	r2, [r7, #12]
 8008afe:	494e      	ldr	r1, [pc, #312]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008b00:	4613      	mov	r3, r2
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	4413      	add	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	440b      	add	r3, r1
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b04      	cmp	r3, #4
 8008b10:	d10a      	bne.n	8008b28 <Adjust_Motors_By_FrontBack_Distance+0x420>
 8008b12:	7b3a      	ldrb	r2, [r7, #12]
 8008b14:	4948      	ldr	r1, [pc, #288]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008b16:	4613      	mov	r3, r2
 8008b18:	00db      	lsls	r3, r3, #3
 8008b1a:	4413      	add	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	440b      	add	r3, r1
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b26:	e01f      	b.n	8008b68 <Adjust_Motors_By_FrontBack_Distance+0x460>
 8008b28:	7b3a      	ldrb	r2, [r7, #12]
 8008b2a:	4943      	ldr	r1, [pc, #268]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	00db      	lsls	r3, r3, #3
 8008b30:	4413      	add	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	440b      	add	r3, r1
 8008b36:	3304      	adds	r3, #4
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b08      	cmp	r3, #8
 8008b3c:	d10a      	bne.n	8008b54 <Adjust_Motors_By_FrontBack_Distance+0x44c>
 8008b3e:	7b3a      	ldrb	r2, [r7, #12]
 8008b40:	493d      	ldr	r1, [pc, #244]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008b42:	4613      	mov	r3, r2
 8008b44:	00db      	lsls	r3, r3, #3
 8008b46:	4413      	add	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	440b      	add	r3, r1
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b52:	e009      	b.n	8008b68 <Adjust_Motors_By_FrontBack_Distance+0x460>
 8008b54:	7b3a      	ldrb	r2, [r7, #12]
 8008b56:	4938      	ldr	r1, [pc, #224]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008b58:	4613      	mov	r3, r2
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	4413      	add	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	440b      	add	r3, r1
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b68:	62bb      	str	r3, [r7, #40]	@ 0x28
        uint32_t adjustment2 = compare2 * 0.1f;
 8008b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6c:	ee07 3a90 	vmov	s15, r3
 8008b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b74:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8008c3c <Adjust_Motors_By_FrontBack_Distance+0x534>
 8008b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b80:	ee17 3a90 	vmov	r3, s15
 8008b84:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t adjustment3 = compare3 * 0.1f;
 8008b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b88:	ee07 3a90 	vmov	s15, r3
 8008b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b90:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8008c3c <Adjust_Motors_By_FrontBack_Distance+0x534>
 8008b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b9c:	ee17 3a90 	vmov	r3, s15
 8008ba0:	623b      	str	r3, [r7, #32]
        __HAL_TIM_SET_COMPARE(motors[id2].pwm_tim, motors[id2].pwm_channel, compare2 + adjustment2);
 8008ba2:	7b7a      	ldrb	r2, [r7, #13]
 8008ba4:	4924      	ldr	r1, [pc, #144]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	4413      	add	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	440b      	add	r3, r1
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10d      	bne.n	8008bd4 <Adjust_Motors_By_FrontBack_Distance+0x4cc>
 8008bb8:	7b7a      	ldrb	r2, [r7, #13]
 8008bba:	491f      	ldr	r1, [pc, #124]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	00db      	lsls	r3, r3, #3
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	440b      	add	r3, r1
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bce:	440a      	add	r2, r1
 8008bd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8008bd2:	e042      	b.n	8008c5a <Adjust_Motors_By_FrontBack_Distance+0x552>
 8008bd4:	7b7a      	ldrb	r2, [r7, #13]
 8008bd6:	4918      	ldr	r1, [pc, #96]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008bd8:	4613      	mov	r3, r2
 8008bda:	00db      	lsls	r3, r3, #3
 8008bdc:	4413      	add	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	440b      	add	r3, r1
 8008be2:	3304      	adds	r3, #4
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	d10d      	bne.n	8008c06 <Adjust_Motors_By_FrontBack_Distance+0x4fe>
 8008bea:	7b7a      	ldrb	r2, [r7, #13]
 8008bec:	4912      	ldr	r1, [pc, #72]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008bee:	4613      	mov	r3, r2
 8008bf0:	00db      	lsls	r3, r3, #3
 8008bf2:	4413      	add	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	440b      	add	r3, r1
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c00:	440b      	add	r3, r1
 8008c02:	6393      	str	r3, [r2, #56]	@ 0x38
 8008c04:	e029      	b.n	8008c5a <Adjust_Motors_By_FrontBack_Distance+0x552>
 8008c06:	7b7a      	ldrb	r2, [r7, #13]
 8008c08:	490b      	ldr	r1, [pc, #44]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	00db      	lsls	r3, r3, #3
 8008c0e:	4413      	add	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	440b      	add	r3, r1
 8008c14:	3304      	adds	r3, #4
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	d111      	bne.n	8008c40 <Adjust_Motors_By_FrontBack_Distance+0x538>
 8008c1c:	7b7a      	ldrb	r2, [r7, #13]
 8008c1e:	4906      	ldr	r1, [pc, #24]	@ (8008c38 <Adjust_Motors_By_FrontBack_Distance+0x530>)
 8008c20:	4613      	mov	r3, r2
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	4413      	add	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	440b      	add	r3, r1
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c32:	440b      	add	r3, r1
 8008c34:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008c36:	e010      	b.n	8008c5a <Adjust_Motors_By_FrontBack_Distance+0x552>
 8008c38:	2000037c 	.word	0x2000037c
 8008c3c:	3dcccccd 	.word	0x3dcccccd
 8008c40:	7b7a      	ldrb	r2, [r7, #13]
 8008c42:	4935      	ldr	r1, [pc, #212]	@ (8008d18 <Adjust_Motors_By_FrontBack_Distance+0x610>)
 8008c44:	4613      	mov	r3, r2
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c56:	440b      	add	r3, r1
 8008c58:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, compare3 + adjustment3);
 8008c5a:	7b3a      	ldrb	r2, [r7, #12]
 8008c5c:	492e      	ldr	r1, [pc, #184]	@ (8008d18 <Adjust_Motors_By_FrontBack_Distance+0x610>)
 8008c5e:	4613      	mov	r3, r2
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	4413      	add	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	440b      	add	r3, r1
 8008c68:	3304      	adds	r3, #4
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10d      	bne.n	8008c8c <Adjust_Motors_By_FrontBack_Distance+0x584>
 8008c70:	7b3a      	ldrb	r2, [r7, #12]
 8008c72:	4929      	ldr	r1, [pc, #164]	@ (8008d18 <Adjust_Motors_By_FrontBack_Distance+0x610>)
 8008c74:	4613      	mov	r3, r2
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	4413      	add	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c84:	6a3a      	ldr	r2, [r7, #32]
 8008c86:	440a      	add	r2, r1
 8008c88:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8008c8a:	e03f      	b.n	8008d0c <Adjust_Motors_By_FrontBack_Distance+0x604>
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, compare3 + adjustment3);
 8008c8c:	7b3a      	ldrb	r2, [r7, #12]
 8008c8e:	4922      	ldr	r1, [pc, #136]	@ (8008d18 <Adjust_Motors_By_FrontBack_Distance+0x610>)
 8008c90:	4613      	mov	r3, r2
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	4413      	add	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	440b      	add	r3, r1
 8008c9a:	3304      	adds	r3, #4
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	d10d      	bne.n	8008cbe <Adjust_Motors_By_FrontBack_Distance+0x5b6>
 8008ca2:	7b3a      	ldrb	r2, [r7, #12]
 8008ca4:	491c      	ldr	r1, [pc, #112]	@ (8008d18 <Adjust_Motors_By_FrontBack_Distance+0x610>)
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	4413      	add	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	440b      	add	r3, r1
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	440b      	add	r3, r1
 8008cba:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8008cbc:	e026      	b.n	8008d0c <Adjust_Motors_By_FrontBack_Distance+0x604>
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, compare3 + adjustment3);
 8008cbe:	7b3a      	ldrb	r2, [r7, #12]
 8008cc0:	4915      	ldr	r1, [pc, #84]	@ (8008d18 <Adjust_Motors_By_FrontBack_Distance+0x610>)
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	4413      	add	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	440b      	add	r3, r1
 8008ccc:	3304      	adds	r3, #4
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b08      	cmp	r3, #8
 8008cd2:	d10d      	bne.n	8008cf0 <Adjust_Motors_By_FrontBack_Distance+0x5e8>
 8008cd4:	7b3a      	ldrb	r2, [r7, #12]
 8008cd6:	4910      	ldr	r1, [pc, #64]	@ (8008d18 <Adjust_Motors_By_FrontBack_Distance+0x610>)
 8008cd8:	4613      	mov	r3, r2
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	440b      	add	r3, r1
 8008cec:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8008cee:	e00d      	b.n	8008d0c <Adjust_Motors_By_FrontBack_Distance+0x604>
        __HAL_TIM_SET_COMPARE(motors[id3].pwm_tim, motors[id3].pwm_channel, compare3 + adjustment3);
 8008cf0:	7b3a      	ldrb	r2, [r7, #12]
 8008cf2:	4909      	ldr	r1, [pc, #36]	@ (8008d18 <Adjust_Motors_By_FrontBack_Distance+0x610>)
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	4413      	add	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	440b      	add	r3, r1
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	440b      	add	r3, r1
 8008d08:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8008d0a:	e7ff      	b.n	8008d0c <Adjust_Motors_By_FrontBack_Distance+0x604>
 8008d0c:	bf00      	nop
 8008d0e:	3730      	adds	r7, #48	@ 0x30
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bc90      	pop	{r4, r7}
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	2000037c 	.word	0x2000037c

08008d1c <PID_Calculate>:
    .prev_error = 0.0f,
    .max_integral = 50.0f
};

/* Exported functions --------------------------------------------------------*/
float PID_Calculate(PIDController* pid, float error, float dt) {
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b088      	sub	sp, #32
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	ed87 0a02 	vstr	s0, [r7, #8]
 8008d28:	edc7 0a01 	vstr	s1, [r7, #4]
    // 添加时间差保护
    if (dt <= 0.001f) {
 8008d2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008d30:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8008e0c <PID_Calculate+0xf0>
 8008d34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3c:	d801      	bhi.n	8008d42 <PID_Calculate+0x26>
        dt = 0.001f;  // 最小时间差为1ms
 8008d3e:	4b34      	ldr	r3, [pc, #208]	@ (8008e10 <PID_Calculate+0xf4>)
 8008d40:	607b      	str	r3, [r7, #4]
    }

    float proportional = pid->Kp * error;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	edd3 7a00 	vldr	s15, [r3]
 8008d48:	ed97 7a02 	vldr	s14, [r7, #8]
 8008d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d50:	edc7 7a07 	vstr	s15, [r7, #28]

    pid->integral += error * dt;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	ed93 7a03 	vldr	s14, [r3, #12]
 8008d5a:	edd7 6a02 	vldr	s13, [r7, #8]
 8008d5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	edc3 7a03 	vstr	s15, [r3, #12]
    pid->integral = fmaxf(fminf(pid->integral, pid->max_integral), -pid->max_integral);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	edd3 7a03 	vldr	s15, [r3, #12]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	ed93 7a05 	vldr	s14, [r3, #20]
 8008d7c:	eef0 0a47 	vmov.f32	s1, s14
 8008d80:	eeb0 0a67 	vmov.f32	s0, s15
 8008d84:	f008 fe75 	bl	8011a72 <fminf>
 8008d88:	eeb0 7a40 	vmov.f32	s14, s0
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	edd3 7a05 	vldr	s15, [r3, #20]
 8008d92:	eef1 7a67 	vneg.f32	s15, s15
 8008d96:	eef0 0a67 	vmov.f32	s1, s15
 8008d9a:	eeb0 0a47 	vmov.f32	s0, s14
 8008d9e:	f008 fe4b 	bl	8011a38 <fmaxf>
 8008da2:	eef0 7a40 	vmov.f32	s15, s0
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	edc3 7a03 	vstr	s15, [r3, #12]

    float derivative = pid->Kd * (error - pid->prev_error) / dt;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	ed93 7a02 	vldr	s14, [r3, #8]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	edd3 7a04 	vldr	s15, [r3, #16]
 8008db8:	edd7 6a02 	vldr	s13, [r7, #8]
 8008dbc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008dc0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008dc4:	ed97 7a01 	vldr	s14, [r7, #4]
 8008dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dcc:	edc7 7a06 	vstr	s15, [r7, #24]

    float output = proportional + (pid->Ki * pid->integral) + derivative;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	ed93 7a01 	vldr	s14, [r3, #4]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8008ddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008de0:	edd7 7a07 	vldr	s15, [r7, #28]
 8008de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008de8:	ed97 7a06 	vldr	s14, [r7, #24]
 8008dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008df0:	edc7 7a05 	vstr	s15, [r7, #20]

    pid->prev_error = error;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	611a      	str	r2, [r3, #16]

    return output;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	ee07 3a90 	vmov	s15, r3
}
 8008e00:	eeb0 0a67 	vmov.f32	s0, s15
 8008e04:	3720      	adds	r7, #32
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	3a83126f 	.word	0x3a83126f
 8008e10:	3a83126f 	.word	0x3a83126f

08008e14 <PID_Reset>:

void PID_Reset(PIDController* pid) {
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
    pid->integral = 0.0f;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f04f 0200 	mov.w	r2, #0
 8008e22:	60da      	str	r2, [r3, #12]
    pid->prev_error = 0.0f;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f04f 0200 	mov.w	r2, #0
 8008e2a:	611a      	str	r2, [r3, #16]
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e3e:	2300      	movs	r3, #0
 8008e40:	607b      	str	r3, [r7, #4]
 8008e42:	4b10      	ldr	r3, [pc, #64]	@ (8008e84 <HAL_MspInit+0x4c>)
 8008e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e46:	4a0f      	ldr	r2, [pc, #60]	@ (8008e84 <HAL_MspInit+0x4c>)
 8008e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8008e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e84 <HAL_MspInit+0x4c>)
 8008e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e56:	607b      	str	r3, [r7, #4]
 8008e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	603b      	str	r3, [r7, #0]
 8008e5e:	4b09      	ldr	r3, [pc, #36]	@ (8008e84 <HAL_MspInit+0x4c>)
 8008e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e62:	4a08      	ldr	r2, [pc, #32]	@ (8008e84 <HAL_MspInit+0x4c>)
 8008e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8008e6a:	4b06      	ldr	r3, [pc, #24]	@ (8008e84 <HAL_MspInit+0x4c>)
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e72:	603b      	str	r3, [r7, #0]
 8008e74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008e76:	bf00      	nop
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	40023800 	.word	0x40023800

08008e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008e8c:	bf00      	nop
 8008e8e:	e7fd      	b.n	8008e8c <NMI_Handler+0x4>

08008e90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008e90:	b480      	push	{r7}
 8008e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008e94:	bf00      	nop
 8008e96:	e7fd      	b.n	8008e94 <HardFault_Handler+0x4>

08008e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008e9c:	bf00      	nop
 8008e9e:	e7fd      	b.n	8008e9c <MemManage_Handler+0x4>

08008ea0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ea4:	bf00      	nop
 8008ea6:	e7fd      	b.n	8008ea4 <BusFault_Handler+0x4>

08008ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008eac:	bf00      	nop
 8008eae:	e7fd      	b.n	8008eac <UsageFault_Handler+0x4>

08008eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008eb4:	bf00      	nop
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ec2:	bf00      	nop
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008ed0:	bf00      	nop
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ede:	f001 fd29 	bl	800a934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ee2:	bf00      	nop
 8008ee4:	bd80      	pop	{r7, pc}
	...

08008ee8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008eec:	4802      	ldr	r0, [pc, #8]	@ (8008ef8 <USART1_IRQHandler+0x10>)
 8008eee:	f005 f86d 	bl	800dfcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008ef2:	bf00      	nop
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	2000091c 	.word	0x2000091c

08008efc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008f00:	4802      	ldr	r0, [pc, #8]	@ (8008f0c <USART2_IRQHandler+0x10>)
 8008f02:	f005 f863 	bl	800dfcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008f06:	bf00      	nop
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20000964 	.word	0x20000964

08008f10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008f14:	4802      	ldr	r0, [pc, #8]	@ (8008f20 <USART3_IRQHandler+0x10>)
 8008f16:	f005 f859 	bl	800dfcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008f1a:	bf00      	nop
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	200009ac 	.word	0x200009ac

08008f24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Echo_4_Pin);
 8008f28:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008f2c:	f002 f8b8 	bl	800b0a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Echo_3_Pin);
 8008f30:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008f34:	f002 f8b4 	bl	800b0a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Echo_2_Pin);
 8008f38:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008f3c:	f002 f8b0 	bl	800b0a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008f40:	bf00      	nop
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008f48:	4802      	ldr	r0, [pc, #8]	@ (8008f54 <UART4_IRQHandler+0x10>)
 8008f4a:	f005 f83f 	bl	800dfcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8008f4e:	bf00      	nop
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	2000088c 	.word	0x2000088c

08008f58 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8008f5c:	4802      	ldr	r0, [pc, #8]	@ (8008f68 <UART5_IRQHandler+0x10>)
 8008f5e:	f005 f835 	bl	800dfcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8008f62:	bf00      	nop
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	200008d4 	.word	0x200008d4

08008f6c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8008f70:	4802      	ldr	r0, [pc, #8]	@ (8008f7c <USART6_IRQHandler+0x10>)
 8008f72:	f005 f82b 	bl	800dfcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8008f76:	bf00      	nop
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	200009f4 	.word	0x200009f4

08008f80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008f80:	b480      	push	{r7}
 8008f82:	af00      	add	r7, sp, #0
  return 1;
 8008f84:	2301      	movs	r3, #1
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <_kill>:

int _kill(int pid, int sig)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008f9a:	f006 fe4d 	bl	800fc38 <__errno>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2216      	movs	r2, #22
 8008fa2:	601a      	str	r2, [r3, #0]
  return -1;
 8008fa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <_exit>:

void _exit (int status)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f7ff ffe7 	bl	8008f90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008fc2:	bf00      	nop
 8008fc4:	e7fd      	b.n	8008fc2 <_exit+0x12>

08008fc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b086      	sub	sp, #24
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	60b9      	str	r1, [r7, #8]
 8008fd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	617b      	str	r3, [r7, #20]
 8008fd6:	e00a      	b.n	8008fee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008fd8:	f3af 8000 	nop.w
 8008fdc:	4601      	mov	r1, r0
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	60ba      	str	r2, [r7, #8]
 8008fe4:	b2ca      	uxtb	r2, r1
 8008fe6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	3301      	adds	r3, #1
 8008fec:	617b      	str	r3, [r7, #20]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	dbf0      	blt.n	8008fd8 <_read+0x12>
  }

  return len;
 8008ff6:	687b      	ldr	r3, [r7, #4]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3718      	adds	r7, #24
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800900c:	2300      	movs	r3, #0
 800900e:	617b      	str	r3, [r7, #20]
 8009010:	e009      	b.n	8009026 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	60ba      	str	r2, [r7, #8]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	4618      	mov	r0, r3
 800901c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	3301      	adds	r3, #1
 8009024:	617b      	str	r3, [r7, #20]
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	429a      	cmp	r2, r3
 800902c:	dbf1      	blt.n	8009012 <_write+0x12>
  }
  return len;
 800902e:	687b      	ldr	r3, [r7, #4]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3718      	adds	r7, #24
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <_close>:

int _close(int file)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009040:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009044:	4618      	mov	r0, r3
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009060:	605a      	str	r2, [r3, #4]
  return 0;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <_isatty>:

int _isatty(int file)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009078:	2301      	movs	r3, #1
}
 800907a:	4618      	mov	r0, r3
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009086:	b480      	push	{r7}
 8009088:	b085      	sub	sp, #20
 800908a:	af00      	add	r7, sp, #0
 800908c:	60f8      	str	r0, [r7, #12]
 800908e:	60b9      	str	r1, [r7, #8]
 8009090:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80090a8:	4a14      	ldr	r2, [pc, #80]	@ (80090fc <_sbrk+0x5c>)
 80090aa:	4b15      	ldr	r3, [pc, #84]	@ (8009100 <_sbrk+0x60>)
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80090b4:	4b13      	ldr	r3, [pc, #76]	@ (8009104 <_sbrk+0x64>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d102      	bne.n	80090c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80090bc:	4b11      	ldr	r3, [pc, #68]	@ (8009104 <_sbrk+0x64>)
 80090be:	4a12      	ldr	r2, [pc, #72]	@ (8009108 <_sbrk+0x68>)
 80090c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80090c2:	4b10      	ldr	r3, [pc, #64]	@ (8009104 <_sbrk+0x64>)
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4413      	add	r3, r2
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d207      	bcs.n	80090e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80090d0:	f006 fdb2 	bl	800fc38 <__errno>
 80090d4:	4603      	mov	r3, r0
 80090d6:	220c      	movs	r2, #12
 80090d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80090da:	f04f 33ff 	mov.w	r3, #4294967295
 80090de:	e009      	b.n	80090f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80090e0:	4b08      	ldr	r3, [pc, #32]	@ (8009104 <_sbrk+0x64>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80090e6:	4b07      	ldr	r3, [pc, #28]	@ (8009104 <_sbrk+0x64>)
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4413      	add	r3, r2
 80090ee:	4a05      	ldr	r2, [pc, #20]	@ (8009104 <_sbrk+0x64>)
 80090f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80090f2:	68fb      	ldr	r3, [r7, #12]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3718      	adds	r7, #24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	20020000 	.word	0x20020000
 8009100:	00000400 	.word	0x00000400
 8009104:	20000548 	.word	0x20000548
 8009108:	20000b90 	.word	0x20000b90

0800910c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800910c:	b480      	push	{r7}
 800910e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009110:	4b06      	ldr	r3, [pc, #24]	@ (800912c <SystemInit+0x20>)
 8009112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009116:	4a05      	ldr	r2, [pc, #20]	@ (800912c <SystemInit+0x20>)
 8009118:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800911c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009120:	bf00      	nop
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	e000ed00 	.word	0xe000ed00

08009130 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b08c      	sub	sp, #48	@ 0x30
 8009134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009136:	f107 030c 	add.w	r3, r7, #12
 800913a:	2224      	movs	r2, #36	@ 0x24
 800913c:	2100      	movs	r1, #0
 800913e:	4618      	mov	r0, r3
 8009140:	f006 fd28 	bl	800fb94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009144:	1d3b      	adds	r3, r7, #4
 8009146:	2200      	movs	r2, #0
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800914c:	4b22      	ldr	r3, [pc, #136]	@ (80091d8 <MX_TIM1_Init+0xa8>)
 800914e:	4a23      	ldr	r2, [pc, #140]	@ (80091dc <MX_TIM1_Init+0xac>)
 8009150:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009152:	4b21      	ldr	r3, [pc, #132]	@ (80091d8 <MX_TIM1_Init+0xa8>)
 8009154:	2200      	movs	r2, #0
 8009156:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009158:	4b1f      	ldr	r3, [pc, #124]	@ (80091d8 <MX_TIM1_Init+0xa8>)
 800915a:	2200      	movs	r2, #0
 800915c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800915e:	4b1e      	ldr	r3, [pc, #120]	@ (80091d8 <MX_TIM1_Init+0xa8>)
 8009160:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009164:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009166:	4b1c      	ldr	r3, [pc, #112]	@ (80091d8 <MX_TIM1_Init+0xa8>)
 8009168:	2200      	movs	r2, #0
 800916a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800916c:	4b1a      	ldr	r3, [pc, #104]	@ (80091d8 <MX_TIM1_Init+0xa8>)
 800916e:	2200      	movs	r2, #0
 8009170:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009172:	4b19      	ldr	r3, [pc, #100]	@ (80091d8 <MX_TIM1_Init+0xa8>)
 8009174:	2200      	movs	r2, #0
 8009176:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009178:	2301      	movs	r3, #1
 800917a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800917c:	2300      	movs	r3, #0
 800917e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009180:	2301      	movs	r3, #1
 8009182:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009184:	2300      	movs	r3, #0
 8009186:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8009188:	230f      	movs	r3, #15
 800918a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800918c:	2300      	movs	r3, #0
 800918e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009190:	2301      	movs	r3, #1
 8009192:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009194:	2300      	movs	r3, #0
 8009196:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8009198:	230f      	movs	r3, #15
 800919a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800919c:	f107 030c 	add.w	r3, r7, #12
 80091a0:	4619      	mov	r1, r3
 80091a2:	480d      	ldr	r0, [pc, #52]	@ (80091d8 <MX_TIM1_Init+0xa8>)
 80091a4:	f003 ff6a 	bl	800d07c <HAL_TIM_Encoder_Init>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80091ae:	f7fe f987 	bl	80074c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80091b2:	2300      	movs	r3, #0
 80091b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80091ba:	1d3b      	adds	r3, r7, #4
 80091bc:	4619      	mov	r1, r3
 80091be:	4806      	ldr	r0, [pc, #24]	@ (80091d8 <MX_TIM1_Init+0xa8>)
 80091c0:	f004 fd36 	bl	800dc30 <HAL_TIMEx_MasterConfigSynchronization>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80091ca:	f7fe f979 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80091ce:	bf00      	nop
 80091d0:	3730      	adds	r7, #48	@ 0x30
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	2000054c 	.word	0x2000054c
 80091dc:	40010000 	.word	0x40010000

080091e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b08c      	sub	sp, #48	@ 0x30
 80091e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80091e6:	f107 030c 	add.w	r3, r7, #12
 80091ea:	2224      	movs	r2, #36	@ 0x24
 80091ec:	2100      	movs	r1, #0
 80091ee:	4618      	mov	r0, r3
 80091f0:	f006 fcd0 	bl	800fb94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091f4:	1d3b      	adds	r3, r7, #4
 80091f6:	2200      	movs	r2, #0
 80091f8:	601a      	str	r2, [r3, #0]
 80091fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80091fc:	4b21      	ldr	r3, [pc, #132]	@ (8009284 <MX_TIM2_Init+0xa4>)
 80091fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009202:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009204:	4b1f      	ldr	r3, [pc, #124]	@ (8009284 <MX_TIM2_Init+0xa4>)
 8009206:	2200      	movs	r2, #0
 8009208:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800920a:	4b1e      	ldr	r3, [pc, #120]	@ (8009284 <MX_TIM2_Init+0xa4>)
 800920c:	2200      	movs	r2, #0
 800920e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8009210:	4b1c      	ldr	r3, [pc, #112]	@ (8009284 <MX_TIM2_Init+0xa4>)
 8009212:	f04f 32ff 	mov.w	r2, #4294967295
 8009216:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009218:	4b1a      	ldr	r3, [pc, #104]	@ (8009284 <MX_TIM2_Init+0xa4>)
 800921a:	2200      	movs	r2, #0
 800921c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800921e:	4b19      	ldr	r3, [pc, #100]	@ (8009284 <MX_TIM2_Init+0xa4>)
 8009220:	2200      	movs	r2, #0
 8009222:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009224:	2301      	movs	r3, #1
 8009226:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009228:	2300      	movs	r3, #0
 800922a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800922c:	2301      	movs	r3, #1
 800922e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009230:	2300      	movs	r3, #0
 8009232:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8009234:	230f      	movs	r3, #15
 8009236:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009238:	2300      	movs	r3, #0
 800923a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800923c:	2301      	movs	r3, #1
 800923e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009240:	2300      	movs	r3, #0
 8009242:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8009244:	230f      	movs	r3, #15
 8009246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8009248:	f107 030c 	add.w	r3, r7, #12
 800924c:	4619      	mov	r1, r3
 800924e:	480d      	ldr	r0, [pc, #52]	@ (8009284 <MX_TIM2_Init+0xa4>)
 8009250:	f003 ff14 	bl	800d07c <HAL_TIM_Encoder_Init>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800925a:	f7fe f931 	bl	80074c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800925e:	2300      	movs	r3, #0
 8009260:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009262:	2300      	movs	r3, #0
 8009264:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009266:	1d3b      	adds	r3, r7, #4
 8009268:	4619      	mov	r1, r3
 800926a:	4806      	ldr	r0, [pc, #24]	@ (8009284 <MX_TIM2_Init+0xa4>)
 800926c:	f004 fce0 	bl	800dc30 <HAL_TIMEx_MasterConfigSynchronization>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8009276:	f7fe f923 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800927a:	bf00      	nop
 800927c:	3730      	adds	r7, #48	@ 0x30
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	20000594 	.word	0x20000594

08009288 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08c      	sub	sp, #48	@ 0x30
 800928c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800928e:	f107 030c 	add.w	r3, r7, #12
 8009292:	2224      	movs	r2, #36	@ 0x24
 8009294:	2100      	movs	r1, #0
 8009296:	4618      	mov	r0, r3
 8009298:	f006 fc7c 	bl	800fb94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800929c:	1d3b      	adds	r3, r7, #4
 800929e:	2200      	movs	r2, #0
 80092a0:	601a      	str	r2, [r3, #0]
 80092a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80092a4:	4b20      	ldr	r3, [pc, #128]	@ (8009328 <MX_TIM3_Init+0xa0>)
 80092a6:	4a21      	ldr	r2, [pc, #132]	@ (800932c <MX_TIM3_Init+0xa4>)
 80092a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80092aa:	4b1f      	ldr	r3, [pc, #124]	@ (8009328 <MX_TIM3_Init+0xa0>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80092b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009328 <MX_TIM3_Init+0xa0>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80092b6:	4b1c      	ldr	r3, [pc, #112]	@ (8009328 <MX_TIM3_Init+0xa0>)
 80092b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80092be:	4b1a      	ldr	r3, [pc, #104]	@ (8009328 <MX_TIM3_Init+0xa0>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80092c4:	4b18      	ldr	r3, [pc, #96]	@ (8009328 <MX_TIM3_Init+0xa0>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80092ca:	2301      	movs	r3, #1
 80092cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80092ce:	2300      	movs	r3, #0
 80092d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80092d2:	2301      	movs	r3, #1
 80092d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80092d6:	2300      	movs	r3, #0
 80092d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80092da:	230f      	movs	r3, #15
 80092dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80092de:	2300      	movs	r3, #0
 80092e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80092e2:	2301      	movs	r3, #1
 80092e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80092e6:	2300      	movs	r3, #0
 80092e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80092ea:	230f      	movs	r3, #15
 80092ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80092ee:	f107 030c 	add.w	r3, r7, #12
 80092f2:	4619      	mov	r1, r3
 80092f4:	480c      	ldr	r0, [pc, #48]	@ (8009328 <MX_TIM3_Init+0xa0>)
 80092f6:	f003 fec1 	bl	800d07c <HAL_TIM_Encoder_Init>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8009300:	f7fe f8de 	bl	80074c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009304:	2300      	movs	r3, #0
 8009306:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009308:	2300      	movs	r3, #0
 800930a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800930c:	1d3b      	adds	r3, r7, #4
 800930e:	4619      	mov	r1, r3
 8009310:	4805      	ldr	r0, [pc, #20]	@ (8009328 <MX_TIM3_Init+0xa0>)
 8009312:	f004 fc8d 	bl	800dc30 <HAL_TIMEx_MasterConfigSynchronization>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d001      	beq.n	8009320 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800931c:	f7fe f8d0 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8009320:	bf00      	nop
 8009322:	3730      	adds	r7, #48	@ 0x30
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	200005dc 	.word	0x200005dc
 800932c:	40000400 	.word	0x40000400

08009330 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b08c      	sub	sp, #48	@ 0x30
 8009334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009336:	f107 030c 	add.w	r3, r7, #12
 800933a:	2224      	movs	r2, #36	@ 0x24
 800933c:	2100      	movs	r1, #0
 800933e:	4618      	mov	r0, r3
 8009340:	f006 fc28 	bl	800fb94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009344:	1d3b      	adds	r3, r7, #4
 8009346:	2200      	movs	r2, #0
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800934c:	4b20      	ldr	r3, [pc, #128]	@ (80093d0 <MX_TIM4_Init+0xa0>)
 800934e:	4a21      	ldr	r2, [pc, #132]	@ (80093d4 <MX_TIM4_Init+0xa4>)
 8009350:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009352:	4b1f      	ldr	r3, [pc, #124]	@ (80093d0 <MX_TIM4_Init+0xa0>)
 8009354:	2200      	movs	r2, #0
 8009356:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009358:	4b1d      	ldr	r3, [pc, #116]	@ (80093d0 <MX_TIM4_Init+0xa0>)
 800935a:	2200      	movs	r2, #0
 800935c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800935e:	4b1c      	ldr	r3, [pc, #112]	@ (80093d0 <MX_TIM4_Init+0xa0>)
 8009360:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009364:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009366:	4b1a      	ldr	r3, [pc, #104]	@ (80093d0 <MX_TIM4_Init+0xa0>)
 8009368:	2200      	movs	r2, #0
 800936a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800936c:	4b18      	ldr	r3, [pc, #96]	@ (80093d0 <MX_TIM4_Init+0xa0>)
 800936e:	2200      	movs	r2, #0
 8009370:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009372:	2301      	movs	r3, #1
 8009374:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009376:	2300      	movs	r3, #0
 8009378:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800937a:	2301      	movs	r3, #1
 800937c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800937e:	2300      	movs	r3, #0
 8009380:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8009382:	230f      	movs	r3, #15
 8009384:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009386:	2300      	movs	r3, #0
 8009388:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800938a:	2301      	movs	r3, #1
 800938c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800938e:	2300      	movs	r3, #0
 8009390:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8009392:	2300      	movs	r3, #0
 8009394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8009396:	f107 030c 	add.w	r3, r7, #12
 800939a:	4619      	mov	r1, r3
 800939c:	480c      	ldr	r0, [pc, #48]	@ (80093d0 <MX_TIM4_Init+0xa0>)
 800939e:	f003 fe6d 	bl	800d07c <HAL_TIM_Encoder_Init>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80093a8:	f7fe f88a 	bl	80074c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80093ac:	2300      	movs	r3, #0
 80093ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80093b0:	2300      	movs	r3, #0
 80093b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80093b4:	1d3b      	adds	r3, r7, #4
 80093b6:	4619      	mov	r1, r3
 80093b8:	4805      	ldr	r0, [pc, #20]	@ (80093d0 <MX_TIM4_Init+0xa0>)
 80093ba:	f004 fc39 	bl	800dc30 <HAL_TIMEx_MasterConfigSynchronization>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80093c4:	f7fe f87c 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80093c8:	bf00      	nop
 80093ca:	3730      	adds	r7, #48	@ 0x30
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	20000624 	.word	0x20000624
 80093d4:	40000800 	.word	0x40000800

080093d8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b08e      	sub	sp, #56	@ 0x38
 80093dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80093de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80093e2:	2200      	movs	r2, #0
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	605a      	str	r2, [r3, #4]
 80093e8:	609a      	str	r2, [r3, #8]
 80093ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80093ec:	f107 0320 	add.w	r3, r7, #32
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80093f6:	1d3b      	adds	r3, r7, #4
 80093f8:	2200      	movs	r2, #0
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	605a      	str	r2, [r3, #4]
 80093fe:	609a      	str	r2, [r3, #8]
 8009400:	60da      	str	r2, [r3, #12]
 8009402:	611a      	str	r2, [r3, #16]
 8009404:	615a      	str	r2, [r3, #20]
 8009406:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8009408:	4b3d      	ldr	r3, [pc, #244]	@ (8009500 <MX_TIM5_Init+0x128>)
 800940a:	4a3e      	ldr	r2, [pc, #248]	@ (8009504 <MX_TIM5_Init+0x12c>)
 800940c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 800940e:	4b3c      	ldr	r3, [pc, #240]	@ (8009500 <MX_TIM5_Init+0x128>)
 8009410:	2253      	movs	r2, #83	@ 0x53
 8009412:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009414:	4b3a      	ldr	r3, [pc, #232]	@ (8009500 <MX_TIM5_Init+0x128>)
 8009416:	2200      	movs	r2, #0
 8009418:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 800941a:	4b39      	ldr	r3, [pc, #228]	@ (8009500 <MX_TIM5_Init+0x128>)
 800941c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8009420:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009422:	4b37      	ldr	r3, [pc, #220]	@ (8009500 <MX_TIM5_Init+0x128>)
 8009424:	2200      	movs	r2, #0
 8009426:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009428:	4b35      	ldr	r3, [pc, #212]	@ (8009500 <MX_TIM5_Init+0x128>)
 800942a:	2200      	movs	r2, #0
 800942c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800942e:	4834      	ldr	r0, [pc, #208]	@ (8009500 <MX_TIM5_Init+0x128>)
 8009430:	f003 fc4a 	bl	800ccc8 <HAL_TIM_Base_Init>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800943a:	f7fe f841 	bl	80074c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800943e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009442:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8009444:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009448:	4619      	mov	r1, r3
 800944a:	482d      	ldr	r0, [pc, #180]	@ (8009500 <MX_TIM5_Init+0x128>)
 800944c:	f004 f80c 	bl	800d468 <HAL_TIM_ConfigClockSource>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8009456:	f7fe f833 	bl	80074c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800945a:	4829      	ldr	r0, [pc, #164]	@ (8009500 <MX_TIM5_Init+0x128>)
 800945c:	f003 fcec 	bl	800ce38 <HAL_TIM_PWM_Init>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8009466:	f7fe f82b 	bl	80074c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800946a:	2300      	movs	r3, #0
 800946c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800946e:	2300      	movs	r3, #0
 8009470:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009472:	f107 0320 	add.w	r3, r7, #32
 8009476:	4619      	mov	r1, r3
 8009478:	4821      	ldr	r0, [pc, #132]	@ (8009500 <MX_TIM5_Init+0x128>)
 800947a:	f004 fbd9 	bl	800dc30 <HAL_TIMEx_MasterConfigSynchronization>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d001      	beq.n	8009488 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8009484:	f7fe f81c 	bl	80074c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009488:	2360      	movs	r3, #96	@ 0x60
 800948a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800948c:	2300      	movs	r3, #0
 800948e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009490:	2300      	movs	r3, #0
 8009492:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009494:	2300      	movs	r3, #0
 8009496:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009498:	1d3b      	adds	r3, r7, #4
 800949a:	2200      	movs	r2, #0
 800949c:	4619      	mov	r1, r3
 800949e:	4818      	ldr	r0, [pc, #96]	@ (8009500 <MX_TIM5_Init+0x128>)
 80094a0:	f003 ff20 	bl	800d2e4 <HAL_TIM_PWM_ConfigChannel>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80094aa:	f7fe f809 	bl	80074c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80094ae:	1d3b      	adds	r3, r7, #4
 80094b0:	2204      	movs	r2, #4
 80094b2:	4619      	mov	r1, r3
 80094b4:	4812      	ldr	r0, [pc, #72]	@ (8009500 <MX_TIM5_Init+0x128>)
 80094b6:	f003 ff15 	bl	800d2e4 <HAL_TIM_PWM_ConfigChannel>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80094c0:	f7fd fffe 	bl	80074c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80094c4:	1d3b      	adds	r3, r7, #4
 80094c6:	2208      	movs	r2, #8
 80094c8:	4619      	mov	r1, r3
 80094ca:	480d      	ldr	r0, [pc, #52]	@ (8009500 <MX_TIM5_Init+0x128>)
 80094cc:	f003 ff0a 	bl	800d2e4 <HAL_TIM_PWM_ConfigChannel>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 80094d6:	f7fd fff3 	bl	80074c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80094da:	1d3b      	adds	r3, r7, #4
 80094dc:	220c      	movs	r2, #12
 80094de:	4619      	mov	r1, r3
 80094e0:	4807      	ldr	r0, [pc, #28]	@ (8009500 <MX_TIM5_Init+0x128>)
 80094e2:	f003 feff 	bl	800d2e4 <HAL_TIM_PWM_ConfigChannel>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <MX_TIM5_Init+0x118>
  {
    Error_Handler();
 80094ec:	f7fd ffe8 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80094f0:	4803      	ldr	r0, [pc, #12]	@ (8009500 <MX_TIM5_Init+0x128>)
 80094f2:	f000 fb2b 	bl	8009b4c <HAL_TIM_MspPostInit>

}
 80094f6:	bf00      	nop
 80094f8:	3738      	adds	r7, #56	@ 0x38
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	2000066c 	.word	0x2000066c
 8009504:	40000c00 	.word	0x40000c00

08009508 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800950e:	463b      	mov	r3, r7
 8009510:	2200      	movs	r2, #0
 8009512:	601a      	str	r2, [r3, #0]
 8009514:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8009516:	4b15      	ldr	r3, [pc, #84]	@ (800956c <MX_TIM6_Init+0x64>)
 8009518:	4a15      	ldr	r2, [pc, #84]	@ (8009570 <MX_TIM6_Init+0x68>)
 800951a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 800951c:	4b13      	ldr	r3, [pc, #76]	@ (800956c <MX_TIM6_Init+0x64>)
 800951e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8009522:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009524:	4b11      	ldr	r3, [pc, #68]	@ (800956c <MX_TIM6_Init+0x64>)
 8009526:	2200      	movs	r2, #0
 8009528:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800952a:	4b10      	ldr	r3, [pc, #64]	@ (800956c <MX_TIM6_Init+0x64>)
 800952c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009530:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009532:	4b0e      	ldr	r3, [pc, #56]	@ (800956c <MX_TIM6_Init+0x64>)
 8009534:	2200      	movs	r2, #0
 8009536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009538:	480c      	ldr	r0, [pc, #48]	@ (800956c <MX_TIM6_Init+0x64>)
 800953a:	f003 fbc5 	bl	800ccc8 <HAL_TIM_Base_Init>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8009544:	f7fd ffbc 	bl	80074c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009548:	2300      	movs	r3, #0
 800954a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800954c:	2300      	movs	r3, #0
 800954e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009550:	463b      	mov	r3, r7
 8009552:	4619      	mov	r1, r3
 8009554:	4805      	ldr	r0, [pc, #20]	@ (800956c <MX_TIM6_Init+0x64>)
 8009556:	f004 fb6b 	bl	800dc30 <HAL_TIMEx_MasterConfigSynchronization>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8009560:	f7fd ffae 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009564:	bf00      	nop
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	200006b4 	.word	0x200006b4
 8009570:	40001000 	.word	0x40001000

08009574 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b096      	sub	sp, #88	@ 0x58
 8009578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800957a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800957e:	2200      	movs	r2, #0
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	605a      	str	r2, [r3, #4]
 8009584:	609a      	str	r2, [r3, #8]
 8009586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009588:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800958c:	2200      	movs	r2, #0
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009596:	2200      	movs	r2, #0
 8009598:	601a      	str	r2, [r3, #0]
 800959a:	605a      	str	r2, [r3, #4]
 800959c:	609a      	str	r2, [r3, #8]
 800959e:	60da      	str	r2, [r3, #12]
 80095a0:	611a      	str	r2, [r3, #16]
 80095a2:	615a      	str	r2, [r3, #20]
 80095a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80095a6:	1d3b      	adds	r3, r7, #4
 80095a8:	2220      	movs	r2, #32
 80095aa:	2100      	movs	r1, #0
 80095ac:	4618      	mov	r0, r3
 80095ae:	f006 faf1 	bl	800fb94 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80095b2:	4b45      	ldr	r3, [pc, #276]	@ (80096c8 <MX_TIM8_Init+0x154>)
 80095b4:	4a45      	ldr	r2, [pc, #276]	@ (80096cc <MX_TIM8_Init+0x158>)
 80095b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 80095b8:	4b43      	ldr	r3, [pc, #268]	@ (80096c8 <MX_TIM8_Init+0x154>)
 80095ba:	22a7      	movs	r2, #167	@ 0xa7
 80095bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095be:	4b42      	ldr	r3, [pc, #264]	@ (80096c8 <MX_TIM8_Init+0x154>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000-1;
 80095c4:	4b40      	ldr	r3, [pc, #256]	@ (80096c8 <MX_TIM8_Init+0x154>)
 80095c6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80095ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095cc:	4b3e      	ldr	r3, [pc, #248]	@ (80096c8 <MX_TIM8_Init+0x154>)
 80095ce:	2200      	movs	r2, #0
 80095d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80095d2:	4b3d      	ldr	r3, [pc, #244]	@ (80096c8 <MX_TIM8_Init+0x154>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095d8:	4b3b      	ldr	r3, [pc, #236]	@ (80096c8 <MX_TIM8_Init+0x154>)
 80095da:	2200      	movs	r2, #0
 80095dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80095de:	483a      	ldr	r0, [pc, #232]	@ (80096c8 <MX_TIM8_Init+0x154>)
 80095e0:	f003 fb72 	bl	800ccc8 <HAL_TIM_Base_Init>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80095ea:	f7fd ff69 	bl	80074c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80095ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80095f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80095f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80095f8:	4619      	mov	r1, r3
 80095fa:	4833      	ldr	r0, [pc, #204]	@ (80096c8 <MX_TIM8_Init+0x154>)
 80095fc:	f003 ff34 	bl	800d468 <HAL_TIM_ConfigClockSource>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8009606:	f7fd ff5b 	bl	80074c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800960a:	482f      	ldr	r0, [pc, #188]	@ (80096c8 <MX_TIM8_Init+0x154>)
 800960c:	f003 fc14 	bl	800ce38 <HAL_TIM_PWM_Init>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8009616:	f7fd ff53 	bl	80074c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800961a:	2300      	movs	r3, #0
 800961c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800961e:	2300      	movs	r3, #0
 8009620:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009622:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009626:	4619      	mov	r1, r3
 8009628:	4827      	ldr	r0, [pc, #156]	@ (80096c8 <MX_TIM8_Init+0x154>)
 800962a:	f004 fb01 	bl	800dc30 <HAL_TIMEx_MasterConfigSynchronization>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8009634:	f7fd ff44 	bl	80074c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009638:	2360      	movs	r3, #96	@ 0x60
 800963a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1000;
 800963c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009640:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009642:	2300      	movs	r3, #0
 8009644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009646:	2300      	movs	r3, #0
 8009648:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800964a:	2300      	movs	r3, #0
 800964c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800964e:	2300      	movs	r3, #0
 8009650:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009652:	2300      	movs	r3, #0
 8009654:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800965a:	2200      	movs	r2, #0
 800965c:	4619      	mov	r1, r3
 800965e:	481a      	ldr	r0, [pc, #104]	@ (80096c8 <MX_TIM8_Init+0x154>)
 8009660:	f003 fe40 	bl	800d2e4 <HAL_TIM_PWM_ConfigChannel>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800966a:	f7fd ff29 	bl	80074c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800966e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009672:	2204      	movs	r2, #4
 8009674:	4619      	mov	r1, r3
 8009676:	4814      	ldr	r0, [pc, #80]	@ (80096c8 <MX_TIM8_Init+0x154>)
 8009678:	f003 fe34 	bl	800d2e4 <HAL_TIM_PWM_ConfigChannel>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8009682:	f7fd ff1d 	bl	80074c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009686:	2300      	movs	r3, #0
 8009688:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800968a:	2300      	movs	r3, #0
 800968c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800968e:	2300      	movs	r3, #0
 8009690:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009692:	2300      	movs	r3, #0
 8009694:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009696:	2300      	movs	r3, #0
 8009698:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800969a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800969e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80096a0:	2300      	movs	r3, #0
 80096a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80096a4:	1d3b      	adds	r3, r7, #4
 80096a6:	4619      	mov	r1, r3
 80096a8:	4807      	ldr	r0, [pc, #28]	@ (80096c8 <MX_TIM8_Init+0x154>)
 80096aa:	f004 fb3d 	bl	800dd28 <HAL_TIMEx_ConfigBreakDeadTime>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 80096b4:	f7fd ff04 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80096b8:	4803      	ldr	r0, [pc, #12]	@ (80096c8 <MX_TIM8_Init+0x154>)
 80096ba:	f000 fa47 	bl	8009b4c <HAL_TIM_MspPostInit>

}
 80096be:	bf00      	nop
 80096c0:	3758      	adds	r7, #88	@ 0x58
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	200006fc 	.word	0x200006fc
 80096cc:	40010400 	.word	0x40010400

080096d0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b08c      	sub	sp, #48	@ 0x30
 80096d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80096d6:	f107 0320 	add.w	r3, r7, #32
 80096da:	2200      	movs	r2, #0
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	605a      	str	r2, [r3, #4]
 80096e0:	609a      	str	r2, [r3, #8]
 80096e2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80096e4:	1d3b      	adds	r3, r7, #4
 80096e6:	2200      	movs	r2, #0
 80096e8:	601a      	str	r2, [r3, #0]
 80096ea:	605a      	str	r2, [r3, #4]
 80096ec:	609a      	str	r2, [r3, #8]
 80096ee:	60da      	str	r2, [r3, #12]
 80096f0:	611a      	str	r2, [r3, #16]
 80096f2:	615a      	str	r2, [r3, #20]
 80096f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80096f6:	4b2b      	ldr	r3, [pc, #172]	@ (80097a4 <MX_TIM9_Init+0xd4>)
 80096f8:	4a2b      	ldr	r2, [pc, #172]	@ (80097a8 <MX_TIM9_Init+0xd8>)
 80096fa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 80096fc:	4b29      	ldr	r3, [pc, #164]	@ (80097a4 <MX_TIM9_Init+0xd4>)
 80096fe:	22a7      	movs	r2, #167	@ 0xa7
 8009700:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009702:	4b28      	ldr	r3, [pc, #160]	@ (80097a4 <MX_TIM9_Init+0xd4>)
 8009704:	2200      	movs	r2, #0
 8009706:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 8009708:	4b26      	ldr	r3, [pc, #152]	@ (80097a4 <MX_TIM9_Init+0xd4>)
 800970a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800970e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009710:	4b24      	ldr	r3, [pc, #144]	@ (80097a4 <MX_TIM9_Init+0xd4>)
 8009712:	2200      	movs	r2, #0
 8009714:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009716:	4b23      	ldr	r3, [pc, #140]	@ (80097a4 <MX_TIM9_Init+0xd4>)
 8009718:	2200      	movs	r2, #0
 800971a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800971c:	4821      	ldr	r0, [pc, #132]	@ (80097a4 <MX_TIM9_Init+0xd4>)
 800971e:	f003 fad3 	bl	800ccc8 <HAL_TIM_Base_Init>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8009728:	f7fd feca 	bl	80074c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800972c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009730:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8009732:	f107 0320 	add.w	r3, r7, #32
 8009736:	4619      	mov	r1, r3
 8009738:	481a      	ldr	r0, [pc, #104]	@ (80097a4 <MX_TIM9_Init+0xd4>)
 800973a:	f003 fe95 	bl	800d468 <HAL_TIM_ConfigClockSource>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8009744:	f7fd febc 	bl	80074c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8009748:	4816      	ldr	r0, [pc, #88]	@ (80097a4 <MX_TIM9_Init+0xd4>)
 800974a:	f003 fb75 	bl	800ce38 <HAL_TIM_PWM_Init>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8009754:	f7fd feb4 	bl	80074c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009758:	2360      	movs	r3, #96	@ 0x60
 800975a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800975c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009760:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009762:	2300      	movs	r3, #0
 8009764:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009766:	2300      	movs	r3, #0
 8009768:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800976a:	1d3b      	adds	r3, r7, #4
 800976c:	2200      	movs	r2, #0
 800976e:	4619      	mov	r1, r3
 8009770:	480c      	ldr	r0, [pc, #48]	@ (80097a4 <MX_TIM9_Init+0xd4>)
 8009772:	f003 fdb7 	bl	800d2e4 <HAL_TIM_PWM_ConfigChannel>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 800977c:	f7fd fea0 	bl	80074c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009780:	1d3b      	adds	r3, r7, #4
 8009782:	2204      	movs	r2, #4
 8009784:	4619      	mov	r1, r3
 8009786:	4807      	ldr	r0, [pc, #28]	@ (80097a4 <MX_TIM9_Init+0xd4>)
 8009788:	f003 fdac 	bl	800d2e4 <HAL_TIM_PWM_ConfigChannel>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 8009792:	f7fd fe95 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8009796:	4803      	ldr	r0, [pc, #12]	@ (80097a4 <MX_TIM9_Init+0xd4>)
 8009798:	f000 f9d8 	bl	8009b4c <HAL_TIM_MspPostInit>

}
 800979c:	bf00      	nop
 800979e:	3730      	adds	r7, #48	@ 0x30
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20000744 	.word	0x20000744
 80097a8:	40014000 	.word	0x40014000

080097ac <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b088      	sub	sp, #32
 80097b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80097b2:	1d3b      	adds	r3, r7, #4
 80097b4:	2200      	movs	r2, #0
 80097b6:	601a      	str	r2, [r3, #0]
 80097b8:	605a      	str	r2, [r3, #4]
 80097ba:	609a      	str	r2, [r3, #8]
 80097bc:	60da      	str	r2, [r3, #12]
 80097be:	611a      	str	r2, [r3, #16]
 80097c0:	615a      	str	r2, [r3, #20]
 80097c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80097c4:	4b1e      	ldr	r3, [pc, #120]	@ (8009840 <MX_TIM10_Init+0x94>)
 80097c6:	4a1f      	ldr	r2, [pc, #124]	@ (8009844 <MX_TIM10_Init+0x98>)
 80097c8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80097ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009840 <MX_TIM10_Init+0x94>)
 80097cc:	22a7      	movs	r2, #167	@ 0xa7
 80097ce:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80097d0:	4b1b      	ldr	r3, [pc, #108]	@ (8009840 <MX_TIM10_Init+0x94>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 20000-1;
 80097d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009840 <MX_TIM10_Init+0x94>)
 80097d8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80097dc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80097de:	4b18      	ldr	r3, [pc, #96]	@ (8009840 <MX_TIM10_Init+0x94>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80097e4:	4b16      	ldr	r3, [pc, #88]	@ (8009840 <MX_TIM10_Init+0x94>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80097ea:	4815      	ldr	r0, [pc, #84]	@ (8009840 <MX_TIM10_Init+0x94>)
 80097ec:	f003 fa6c 	bl	800ccc8 <HAL_TIM_Base_Init>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80097f6:	f7fd fe63 	bl	80074c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80097fa:	4811      	ldr	r0, [pc, #68]	@ (8009840 <MX_TIM10_Init+0x94>)
 80097fc:	f003 fb1c 	bl	800ce38 <HAL_TIM_PWM_Init>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8009806:	f7fd fe5b 	bl	80074c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800980a:	2360      	movs	r3, #96	@ 0x60
 800980c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009812:	2300      	movs	r3, #0
 8009814:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009816:	2300      	movs	r3, #0
 8009818:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800981a:	1d3b      	adds	r3, r7, #4
 800981c:	2200      	movs	r2, #0
 800981e:	4619      	mov	r1, r3
 8009820:	4807      	ldr	r0, [pc, #28]	@ (8009840 <MX_TIM10_Init+0x94>)
 8009822:	f003 fd5f 	bl	800d2e4 <HAL_TIM_PWM_ConfigChannel>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800982c:	f7fd fe48 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8009830:	4803      	ldr	r0, [pc, #12]	@ (8009840 <MX_TIM10_Init+0x94>)
 8009832:	f000 f98b 	bl	8009b4c <HAL_TIM_MspPostInit>

}
 8009836:	bf00      	nop
 8009838:	3720      	adds	r7, #32
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	2000078c 	.word	0x2000078c
 8009844:	40014400 	.word	0x40014400

08009848 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b090      	sub	sp, #64	@ 0x40
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009850:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009854:	2200      	movs	r2, #0
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	605a      	str	r2, [r3, #4]
 800985a:	609a      	str	r2, [r3, #8]
 800985c:	60da      	str	r2, [r3, #12]
 800985e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a74      	ldr	r2, [pc, #464]	@ (8009a38 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d12d      	bne.n	80098c6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800986a:	2300      	movs	r3, #0
 800986c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800986e:	4b73      	ldr	r3, [pc, #460]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8009870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009872:	4a72      	ldr	r2, [pc, #456]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8009874:	f043 0301 	orr.w	r3, r3, #1
 8009878:	6453      	str	r3, [r2, #68]	@ 0x44
 800987a:	4b70      	ldr	r3, [pc, #448]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 800987c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009884:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009886:	2300      	movs	r3, #0
 8009888:	627b      	str	r3, [r7, #36]	@ 0x24
 800988a:	4b6c      	ldr	r3, [pc, #432]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 800988c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800988e:	4a6b      	ldr	r2, [pc, #428]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8009890:	f043 0310 	orr.w	r3, r3, #16
 8009894:	6313      	str	r3, [r2, #48]	@ 0x30
 8009896:	4b69      	ldr	r3, [pc, #420]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8009898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800989a:	f003 0310 	and.w	r3, r3, #16
 800989e:	627b      	str	r3, [r7, #36]	@ 0x24
 80098a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M1_E1_Pin|M1_E2_Pin;
 80098a2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80098a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098a8:	2302      	movs	r3, #2
 80098aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ac:	2300      	movs	r3, #0
 80098ae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098b0:	2300      	movs	r3, #0
 80098b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80098b4:	2301      	movs	r3, #1
 80098b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80098b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80098bc:	4619      	mov	r1, r3
 80098be:	4860      	ldr	r0, [pc, #384]	@ (8009a40 <HAL_TIM_Encoder_MspInit+0x1f8>)
 80098c0:	f001 fa20 	bl	800ad04 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80098c4:	e0b3      	b.n	8009a2e <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM2)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ce:	d14a      	bne.n	8009966 <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80098d0:	2300      	movs	r3, #0
 80098d2:	623b      	str	r3, [r7, #32]
 80098d4:	4b59      	ldr	r3, [pc, #356]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80098d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098d8:	4a58      	ldr	r2, [pc, #352]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80098da:	f043 0301 	orr.w	r3, r3, #1
 80098de:	6413      	str	r3, [r2, #64]	@ 0x40
 80098e0:	4b56      	ldr	r3, [pc, #344]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80098e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e4:	f003 0301 	and.w	r3, r3, #1
 80098e8:	623b      	str	r3, [r7, #32]
 80098ea:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098ec:	2300      	movs	r3, #0
 80098ee:	61fb      	str	r3, [r7, #28]
 80098f0:	4b52      	ldr	r3, [pc, #328]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80098f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098f4:	4a51      	ldr	r2, [pc, #324]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80098f6:	f043 0301 	orr.w	r3, r3, #1
 80098fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80098fc:	4b4f      	ldr	r3, [pc, #316]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80098fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	61fb      	str	r3, [r7, #28]
 8009906:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009908:	2300      	movs	r3, #0
 800990a:	61bb      	str	r3, [r7, #24]
 800990c:	4b4b      	ldr	r3, [pc, #300]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 800990e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009910:	4a4a      	ldr	r2, [pc, #296]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8009912:	f043 0302 	orr.w	r3, r3, #2
 8009916:	6313      	str	r3, [r2, #48]	@ 0x30
 8009918:	4b48      	ldr	r3, [pc, #288]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 800991a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800991c:	f003 0302 	and.w	r3, r3, #2
 8009920:	61bb      	str	r3, [r7, #24]
 8009922:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M4_E1_Pin;
 8009924:	2320      	movs	r3, #32
 8009926:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009928:	2302      	movs	r3, #2
 800992a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800992c:	2300      	movs	r3, #0
 800992e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009930:	2300      	movs	r3, #0
 8009932:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009934:	2301      	movs	r3, #1
 8009936:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M4_E1_GPIO_Port, &GPIO_InitStruct);
 8009938:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800993c:	4619      	mov	r1, r3
 800993e:	4841      	ldr	r0, [pc, #260]	@ (8009a44 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8009940:	f001 f9e0 	bl	800ad04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M4_E2_Pin;
 8009944:	2308      	movs	r3, #8
 8009946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009948:	2302      	movs	r3, #2
 800994a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800994c:	2300      	movs	r3, #0
 800994e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009950:	2300      	movs	r3, #0
 8009952:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009954:	2301      	movs	r3, #1
 8009956:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(M4_E2_GPIO_Port, &GPIO_InitStruct);
 8009958:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800995c:	4619      	mov	r1, r3
 800995e:	483a      	ldr	r0, [pc, #232]	@ (8009a48 <HAL_TIM_Encoder_MspInit+0x200>)
 8009960:	f001 f9d0 	bl	800ad04 <HAL_GPIO_Init>
}
 8009964:	e063      	b.n	8009a2e <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM3)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a38      	ldr	r2, [pc, #224]	@ (8009a4c <HAL_TIM_Encoder_MspInit+0x204>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d12c      	bne.n	80099ca <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009970:	2300      	movs	r3, #0
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	4b31      	ldr	r3, [pc, #196]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8009976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009978:	4a30      	ldr	r2, [pc, #192]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 800997a:	f043 0302 	orr.w	r3, r3, #2
 800997e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009980:	4b2e      	ldr	r3, [pc, #184]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8009982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009984:	f003 0302 	and.w	r3, r3, #2
 8009988:	617b      	str	r3, [r7, #20]
 800998a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800998c:	2300      	movs	r3, #0
 800998e:	613b      	str	r3, [r7, #16]
 8009990:	4b2a      	ldr	r3, [pc, #168]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8009992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009994:	4a29      	ldr	r2, [pc, #164]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8009996:	f043 0301 	orr.w	r3, r3, #1
 800999a:	6313      	str	r3, [r2, #48]	@ 0x30
 800999c:	4b27      	ldr	r3, [pc, #156]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 800999e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099a0:	f003 0301 	and.w	r3, r3, #1
 80099a4:	613b      	str	r3, [r7, #16]
 80099a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_E1_Pin|M3_E2_Pin;
 80099a8:	23c0      	movs	r3, #192	@ 0xc0
 80099aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099ac:	2302      	movs	r3, #2
 80099ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099b0:	2300      	movs	r3, #0
 80099b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099b4:	2300      	movs	r3, #0
 80099b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80099b8:	2302      	movs	r3, #2
 80099ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80099c0:	4619      	mov	r1, r3
 80099c2:	4820      	ldr	r0, [pc, #128]	@ (8009a44 <HAL_TIM_Encoder_MspInit+0x1fc>)
 80099c4:	f001 f99e 	bl	800ad04 <HAL_GPIO_Init>
}
 80099c8:	e031      	b.n	8009a2e <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(tim_encoderHandle->Instance==TIM4)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a20      	ldr	r2, [pc, #128]	@ (8009a50 <HAL_TIM_Encoder_MspInit+0x208>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d12c      	bne.n	8009a2e <HAL_TIM_Encoder_MspInit+0x1e6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80099d4:	2300      	movs	r3, #0
 80099d6:	60fb      	str	r3, [r7, #12]
 80099d8:	4b18      	ldr	r3, [pc, #96]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80099da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099dc:	4a17      	ldr	r2, [pc, #92]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80099de:	f043 0304 	orr.w	r3, r3, #4
 80099e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80099e4:	4b15      	ldr	r3, [pc, #84]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80099e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e8:	f003 0304 	and.w	r3, r3, #4
 80099ec:	60fb      	str	r3, [r7, #12]
 80099ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80099f0:	2300      	movs	r3, #0
 80099f2:	60bb      	str	r3, [r7, #8]
 80099f4:	4b11      	ldr	r3, [pc, #68]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80099f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f8:	4a10      	ldr	r2, [pc, #64]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80099fa:	f043 0308 	orr.w	r3, r3, #8
 80099fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8009a00:	4b0e      	ldr	r3, [pc, #56]	@ (8009a3c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8009a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a04:	f003 0308 	and.w	r3, r3, #8
 8009a08:	60bb      	str	r3, [r7, #8]
 8009a0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M2_E1_Pin|M2_E2_Pin;
 8009a0c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8009a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a12:	2302      	movs	r3, #2
 8009a14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8009a1e:	2302      	movs	r3, #2
 8009a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009a22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009a26:	4619      	mov	r1, r3
 8009a28:	480a      	ldr	r0, [pc, #40]	@ (8009a54 <HAL_TIM_Encoder_MspInit+0x20c>)
 8009a2a:	f001 f96b 	bl	800ad04 <HAL_GPIO_Init>
}
 8009a2e:	bf00      	nop
 8009a30:	3740      	adds	r7, #64	@ 0x40
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	40010000 	.word	0x40010000
 8009a3c:	40023800 	.word	0x40023800
 8009a40:	40021000 	.word	0x40021000
 8009a44:	40020000 	.word	0x40020000
 8009a48:	40020400 	.word	0x40020400
 8009a4c:	40000400 	.word	0x40000400
 8009a50:	40000800 	.word	0x40000800
 8009a54:	40020c00 	.word	0x40020c00

08009a58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b089      	sub	sp, #36	@ 0x24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a33      	ldr	r2, [pc, #204]	@ (8009b34 <HAL_TIM_Base_MspInit+0xdc>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d10e      	bne.n	8009a88 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	61fb      	str	r3, [r7, #28]
 8009a6e:	4b32      	ldr	r3, [pc, #200]	@ (8009b38 <HAL_TIM_Base_MspInit+0xe0>)
 8009a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a72:	4a31      	ldr	r2, [pc, #196]	@ (8009b38 <HAL_TIM_Base_MspInit+0xe0>)
 8009a74:	f043 0308 	orr.w	r3, r3, #8
 8009a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8009a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8009b38 <HAL_TIM_Base_MspInit+0xe0>)
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a7e:	f003 0308 	and.w	r3, r3, #8
 8009a82:	61fb      	str	r3, [r7, #28]
 8009a84:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8009a86:	e04e      	b.n	8009b26 <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM6)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8009b3c <HAL_TIM_Base_MspInit+0xe4>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d10e      	bne.n	8009ab0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009a92:	2300      	movs	r3, #0
 8009a94:	61bb      	str	r3, [r7, #24]
 8009a96:	4b28      	ldr	r3, [pc, #160]	@ (8009b38 <HAL_TIM_Base_MspInit+0xe0>)
 8009a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a9a:	4a27      	ldr	r2, [pc, #156]	@ (8009b38 <HAL_TIM_Base_MspInit+0xe0>)
 8009a9c:	f043 0310 	orr.w	r3, r3, #16
 8009aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8009aa2:	4b25      	ldr	r3, [pc, #148]	@ (8009b38 <HAL_TIM_Base_MspInit+0xe0>)
 8009aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa6:	f003 0310 	and.w	r3, r3, #16
 8009aaa:	61bb      	str	r3, [r7, #24]
 8009aac:	69bb      	ldr	r3, [r7, #24]
}
 8009aae:	e03a      	b.n	8009b26 <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM8)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a22      	ldr	r2, [pc, #136]	@ (8009b40 <HAL_TIM_Base_MspInit+0xe8>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d10e      	bne.n	8009ad8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009aba:	2300      	movs	r3, #0
 8009abc:	617b      	str	r3, [r7, #20]
 8009abe:	4b1e      	ldr	r3, [pc, #120]	@ (8009b38 <HAL_TIM_Base_MspInit+0xe0>)
 8009ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8009b38 <HAL_TIM_Base_MspInit+0xe0>)
 8009ac4:	f043 0302 	orr.w	r3, r3, #2
 8009ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8009aca:	4b1b      	ldr	r3, [pc, #108]	@ (8009b38 <HAL_TIM_Base_MspInit+0xe0>)
 8009acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ace:	f003 0302 	and.w	r3, r3, #2
 8009ad2:	617b      	str	r3, [r7, #20]
 8009ad4:	697b      	ldr	r3, [r7, #20]
}
 8009ad6:	e026      	b.n	8009b26 <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM9)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a19      	ldr	r2, [pc, #100]	@ (8009b44 <HAL_TIM_Base_MspInit+0xec>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d10e      	bne.n	8009b00 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	613b      	str	r3, [r7, #16]
 8009ae6:	4b14      	ldr	r3, [pc, #80]	@ (8009b38 <HAL_TIM_Base_MspInit+0xe0>)
 8009ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aea:	4a13      	ldr	r2, [pc, #76]	@ (8009b38 <HAL_TIM_Base_MspInit+0xe0>)
 8009aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8009af2:	4b11      	ldr	r3, [pc, #68]	@ (8009b38 <HAL_TIM_Base_MspInit+0xe0>)
 8009af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009af6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009afa:	613b      	str	r3, [r7, #16]
 8009afc:	693b      	ldr	r3, [r7, #16]
}
 8009afe:	e012      	b.n	8009b26 <HAL_TIM_Base_MspInit+0xce>
  else if(tim_baseHandle->Instance==TIM10)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a10      	ldr	r2, [pc, #64]	@ (8009b48 <HAL_TIM_Base_MspInit+0xf0>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d10d      	bne.n	8009b26 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60fb      	str	r3, [r7, #12]
 8009b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b38 <HAL_TIM_Base_MspInit+0xe0>)
 8009b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b12:	4a09      	ldr	r2, [pc, #36]	@ (8009b38 <HAL_TIM_Base_MspInit+0xe0>)
 8009b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8009b1a:	4b07      	ldr	r3, [pc, #28]	@ (8009b38 <HAL_TIM_Base_MspInit+0xe0>)
 8009b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b22:	60fb      	str	r3, [r7, #12]
 8009b24:	68fb      	ldr	r3, [r7, #12]
}
 8009b26:	bf00      	nop
 8009b28:	3724      	adds	r7, #36	@ 0x24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	40000c00 	.word	0x40000c00
 8009b38:	40023800 	.word	0x40023800
 8009b3c:	40001000 	.word	0x40001000
 8009b40:	40010400 	.word	0x40010400
 8009b44:	40014000 	.word	0x40014000
 8009b48:	40014400 	.word	0x40014400

08009b4c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b08c      	sub	sp, #48	@ 0x30
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b54:	f107 031c 	add.w	r3, r7, #28
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	605a      	str	r2, [r3, #4]
 8009b5e:	609a      	str	r2, [r3, #8]
 8009b60:	60da      	str	r2, [r3, #12]
 8009b62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a48      	ldr	r2, [pc, #288]	@ (8009c8c <HAL_TIM_MspPostInit+0x140>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d11e      	bne.n	8009bac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b6e:	2300      	movs	r3, #0
 8009b70:	61bb      	str	r3, [r7, #24]
 8009b72:	4b47      	ldr	r3, [pc, #284]	@ (8009c90 <HAL_TIM_MspPostInit+0x144>)
 8009b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b76:	4a46      	ldr	r2, [pc, #280]	@ (8009c90 <HAL_TIM_MspPostInit+0x144>)
 8009b78:	f043 0301 	orr.w	r3, r3, #1
 8009b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b7e:	4b44      	ldr	r3, [pc, #272]	@ (8009c90 <HAL_TIM_MspPostInit+0x144>)
 8009b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b82:	f003 0301 	and.w	r3, r3, #1
 8009b86:	61bb      	str	r3, [r7, #24]
 8009b88:	69bb      	ldr	r3, [r7, #24]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin|M3_PWM_Pin|M4_PWM_Pin;
 8009b8a:	230f      	movs	r3, #15
 8009b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b8e:	2302      	movs	r3, #2
 8009b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b92:	2300      	movs	r3, #0
 8009b94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b96:	2300      	movs	r3, #0
 8009b98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b9e:	f107 031c 	add.w	r3, r7, #28
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	483b      	ldr	r0, [pc, #236]	@ (8009c94 <HAL_TIM_MspPostInit+0x148>)
 8009ba6:	f001 f8ad 	bl	800ad04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8009baa:	e06a      	b.n	8009c82 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM8)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a39      	ldr	r2, [pc, #228]	@ (8009c98 <HAL_TIM_MspPostInit+0x14c>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d11e      	bne.n	8009bf4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	617b      	str	r3, [r7, #20]
 8009bba:	4b35      	ldr	r3, [pc, #212]	@ (8009c90 <HAL_TIM_MspPostInit+0x144>)
 8009bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bbe:	4a34      	ldr	r2, [pc, #208]	@ (8009c90 <HAL_TIM_MspPostInit+0x144>)
 8009bc0:	f043 0304 	orr.w	r3, r3, #4
 8009bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bc6:	4b32      	ldr	r3, [pc, #200]	@ (8009c90 <HAL_TIM_MspPostInit+0x144>)
 8009bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bca:	f003 0304 	and.w	r3, r3, #4
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Servo_1_Pin|Servo_2_Pin;
 8009bd2:	23c0      	movs	r3, #192	@ 0xc0
 8009bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bde:	2300      	movs	r3, #0
 8009be0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8009be2:	2303      	movs	r3, #3
 8009be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009be6:	f107 031c 	add.w	r3, r7, #28
 8009bea:	4619      	mov	r1, r3
 8009bec:	482b      	ldr	r0, [pc, #172]	@ (8009c9c <HAL_TIM_MspPostInit+0x150>)
 8009bee:	f001 f889 	bl	800ad04 <HAL_GPIO_Init>
}
 8009bf2:	e046      	b.n	8009c82 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM9)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a29      	ldr	r2, [pc, #164]	@ (8009ca0 <HAL_TIM_MspPostInit+0x154>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d11e      	bne.n	8009c3c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009bfe:	2300      	movs	r3, #0
 8009c00:	613b      	str	r3, [r7, #16]
 8009c02:	4b23      	ldr	r3, [pc, #140]	@ (8009c90 <HAL_TIM_MspPostInit+0x144>)
 8009c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c06:	4a22      	ldr	r2, [pc, #136]	@ (8009c90 <HAL_TIM_MspPostInit+0x144>)
 8009c08:	f043 0310 	orr.w	r3, r3, #16
 8009c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c0e:	4b20      	ldr	r3, [pc, #128]	@ (8009c90 <HAL_TIM_MspPostInit+0x144>)
 8009c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c12:	f003 0310 	and.w	r3, r3, #16
 8009c16:	613b      	str	r3, [r7, #16]
 8009c18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo_3_Pin|Servo_4_Pin;
 8009c1a:	2360      	movs	r3, #96	@ 0x60
 8009c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c1e:	2302      	movs	r3, #2
 8009c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c22:	2300      	movs	r3, #0
 8009c24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c26:	2300      	movs	r3, #0
 8009c28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009c2e:	f107 031c 	add.w	r3, r7, #28
 8009c32:	4619      	mov	r1, r3
 8009c34:	481b      	ldr	r0, [pc, #108]	@ (8009ca4 <HAL_TIM_MspPostInit+0x158>)
 8009c36:	f001 f865 	bl	800ad04 <HAL_GPIO_Init>
}
 8009c3a:	e022      	b.n	8009c82 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM10)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a19      	ldr	r2, [pc, #100]	@ (8009ca8 <HAL_TIM_MspPostInit+0x15c>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d11d      	bne.n	8009c82 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009c46:	2300      	movs	r3, #0
 8009c48:	60fb      	str	r3, [r7, #12]
 8009c4a:	4b11      	ldr	r3, [pc, #68]	@ (8009c90 <HAL_TIM_MspPostInit+0x144>)
 8009c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c4e:	4a10      	ldr	r2, [pc, #64]	@ (8009c90 <HAL_TIM_MspPostInit+0x144>)
 8009c50:	f043 0320 	orr.w	r3, r3, #32
 8009c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c56:	4b0e      	ldr	r3, [pc, #56]	@ (8009c90 <HAL_TIM_MspPostInit+0x144>)
 8009c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	60fb      	str	r3, [r7, #12]
 8009c60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_5_Pin;
 8009c62:	2340      	movs	r3, #64	@ 0x40
 8009c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c66:	2302      	movs	r3, #2
 8009c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8009c72:	2303      	movs	r3, #3
 8009c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Servo_5_GPIO_Port, &GPIO_InitStruct);
 8009c76:	f107 031c 	add.w	r3, r7, #28
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	480b      	ldr	r0, [pc, #44]	@ (8009cac <HAL_TIM_MspPostInit+0x160>)
 8009c7e:	f001 f841 	bl	800ad04 <HAL_GPIO_Init>
}
 8009c82:	bf00      	nop
 8009c84:	3730      	adds	r7, #48	@ 0x30
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	40000c00 	.word	0x40000c00
 8009c90:	40023800 	.word	0x40023800
 8009c94:	40020000 	.word	0x40020000
 8009c98:	40010400 	.word	0x40010400
 8009c9c:	40020800 	.word	0x40020800
 8009ca0:	40014000 	.word	0x40014000
 8009ca4:	40021000 	.word	0x40021000
 8009ca8:	40014400 	.word	0x40014400
 8009cac:	40021400 	.word	0x40021400

08009cb0 <get_us_timestamp>:
// 距离滤波缓冲区
static float distance_buffer[MAX_ULTRASONIC_SENSORS][FILTER_SAMPLES] = {0};
static uint8_t buffer_index[MAX_ULTRASONIC_SENSORS] = {0};

// 获取微秒级时间戳
static uint32_t get_us_timestamp(void) {
 8009cb0:	b590      	push	{r4, r7, lr}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
    // 使用SysTick计数器获取微秒级时间戳
    uint32_t ticks = SysTick->VAL;
 8009cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ce4 <get_us_timestamp+0x34>)
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	60fb      	str	r3, [r7, #12]
    uint32_t ticks_per_us = SYSCLK_FREQ / 1000000;
 8009cbc:	23a8      	movs	r3, #168	@ 0xa8
 8009cbe:	60bb      	str	r3, [r7, #8]
    uint32_t us = (ticks / ticks_per_us) + (HAL_GetTick() * 1000);
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	fbb2 f4f3 	udiv	r4, r2, r3
 8009cc8:	f000 fe48 	bl	800a95c <HAL_GetTick>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009cd2:	fb02 f303 	mul.w	r3, r2, r3
 8009cd6:	4423      	add	r3, r4
 8009cd8:	607b      	str	r3, [r7, #4]
    return us;
 8009cda:	687b      	ldr	r3, [r7, #4]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3714      	adds	r7, #20
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd90      	pop	{r4, r7, pc}
 8009ce4:	e000e010 	.word	0xe000e010

08009ce8 <HAL_GPIO_EXTI_Callback>:
            break;
    }
}

// Echo中断回调
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b090      	sub	sp, #64	@ 0x40
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < sensor_count; i++) {
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009cf8:	e0ee      	b.n	8009ed8 <HAL_GPIO_EXTI_Callback+0x1f0>
        UltrasonicSensor* s = active_sensors[i];
 8009cfa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009cfe:	4a7c      	ldr	r2, [pc, #496]	@ (8009ef0 <HAL_GPIO_EXTI_Callback+0x208>)
 8009d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        
        if (GPIO_Pin == s->echo_pin) {
 8009d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d08:	899b      	ldrh	r3, [r3, #12]
 8009d0a:	88fa      	ldrh	r2, [r7, #6]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	f040 80de 	bne.w	8009ece <HAL_GPIO_EXTI_Callback+0x1e6>
            if (HAL_GPIO_ReadPin(s->echo_port, s->echo_pin)) {
 8009d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d14:	689a      	ldr	r2, [r3, #8]
 8009d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d18:	899b      	ldrh	r3, [r3, #12]
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	f001 f98d 	bl	800b03c <HAL_GPIO_ReadPin>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d005      	beq.n	8009d34 <HAL_GPIO_EXTI_Callback+0x4c>
                // 上升沿，记录开始时间（微秒级）
                s->pulse_start = get_us_timestamp();
 8009d28:	f7ff ffc2 	bl	8009cb0 <get_us_timestamp>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d30:	615a      	str	r2, [r3, #20]
 8009d32:	e0cc      	b.n	8009ece <HAL_GPIO_EXTI_Callback+0x1e6>
            } else {
                // 下降沿，计算时间（微秒级）
                uint32_t end_time = get_us_timestamp();
 8009d34:	f7ff ffbc 	bl	8009cb0 <get_us_timestamp>
 8009d38:	62b8      	str	r0, [r7, #40]	@ 0x28
                uint32_t duration_us = end_time - s->pulse_start;
 8009d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3c:	695b      	ldr	r3, [r3, #20]
 8009d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	627b      	str	r3, [r7, #36]	@ 0x24
                
                // 计算距离（厘米）：声速340m/s = 0.034cm/μs
                float raw_distance = (duration_us * 0.034f) / 2.0f;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d46:	ee07 3a90 	vmov	s15, r3
 8009d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d4e:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8009ef4 <HAL_GPIO_EXTI_Callback+0x20c>
 8009d52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009d56:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8009d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d5e:	edc7 7a08 	vstr	s15, [r7, #32]
                
                // 检查距离是否在有效范围内
                if (raw_distance >= MIN_VALID_DISTANCE && raw_distance <= MAX_VALID_DISTANCE) {
 8009d62:	edd7 7a08 	vldr	s15, [r7, #32]
 8009d66:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8009d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d72:	f2c0 8091 	blt.w	8009e98 <HAL_GPIO_EXTI_Callback+0x1b0>
 8009d76:	edd7 7a08 	vldr	s15, [r7, #32]
 8009d7a:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8009ef8 <HAL_GPIO_EXTI_Callback+0x210>
 8009d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d86:	f200 8087 	bhi.w	8009e98 <HAL_GPIO_EXTI_Callback+0x1b0>
                    // 更新滤波缓冲区
                    distance_buffer[i][buffer_index[i]] = raw_distance;
 8009d8a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009d8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009d92:	495a      	ldr	r1, [pc, #360]	@ (8009efc <HAL_GPIO_EXTI_Callback+0x214>)
 8009d94:	5ccb      	ldrb	r3, [r1, r3]
 8009d96:	4618      	mov	r0, r3
 8009d98:	4959      	ldr	r1, [pc, #356]	@ (8009f00 <HAL_GPIO_EXTI_Callback+0x218>)
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4413      	add	r3, r2
 8009da0:	4403      	add	r3, r0
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	440b      	add	r3, r1
 8009da6:	6a3a      	ldr	r2, [r7, #32]
 8009da8:	601a      	str	r2, [r3, #0]
                    buffer_index[i] = (buffer_index[i] + 1) % FILTER_SAMPLES;
 8009daa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009dae:	4a53      	ldr	r2, [pc, #332]	@ (8009efc <HAL_GPIO_EXTI_Callback+0x214>)
 8009db0:	5cd3      	ldrb	r3, [r2, r3]
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	4b53      	ldr	r3, [pc, #332]	@ (8009f04 <HAL_GPIO_EXTI_Callback+0x21c>)
 8009db6:	fb83 1302 	smull	r1, r3, r3, r2
 8009dba:	1059      	asrs	r1, r3, #1
 8009dbc:	17d3      	asrs	r3, r2, #31
 8009dbe:	1ac9      	subs	r1, r1, r3
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	440b      	add	r3, r1
 8009dc6:	1ad1      	subs	r1, r2, r3
 8009dc8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009dcc:	b2c9      	uxtb	r1, r1
 8009dce:	4a4b      	ldr	r2, [pc, #300]	@ (8009efc <HAL_GPIO_EXTI_Callback+0x214>)
 8009dd0:	54d1      	strb	r1, [r2, r3]
                    
                    // 计算中值滤波
                    float temp_buffer[FILTER_SAMPLES];
                    for (int j = 0; j < FILTER_SAMPLES; j++) {
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009dd6:	e013      	b.n	8009e00 <HAL_GPIO_EXTI_Callback+0x118>
                        temp_buffer[j] = distance_buffer[i][j];
 8009dd8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009ddc:	4948      	ldr	r1, [pc, #288]	@ (8009f00 <HAL_GPIO_EXTI_Callback+0x218>)
 8009dde:	4613      	mov	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009de6:	4413      	add	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	440b      	add	r3, r1
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	3340      	adds	r3, #64	@ 0x40
 8009df4:	443b      	add	r3, r7
 8009df6:	3b38      	subs	r3, #56	@ 0x38
 8009df8:	601a      	str	r2, [r3, #0]
                    for (int j = 0; j < FILTER_SAMPLES; j++) {
 8009dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e02:	2b04      	cmp	r3, #4
 8009e04:	dde8      	ble.n	8009dd8 <HAL_GPIO_EXTI_Callback+0xf0>
                    }
                    
                    // 简单冒泡排序
                    for (int j = 0; j < FILTER_SAMPLES - 1; j++) {
 8009e06:	2300      	movs	r3, #0
 8009e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e0a:	e03e      	b.n	8009e8a <HAL_GPIO_EXTI_Callback+0x1a2>
                        for (int k = 0; k < FILTER_SAMPLES - j - 1; k++) {
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e10:	e032      	b.n	8009e78 <HAL_GPIO_EXTI_Callback+0x190>
                            if (temp_buffer[k] > temp_buffer[k + 1]) {
 8009e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	3340      	adds	r3, #64	@ 0x40
 8009e18:	443b      	add	r3, r7
 8009e1a:	3b38      	subs	r3, #56	@ 0x38
 8009e1c:	ed93 7a00 	vldr	s14, [r3]
 8009e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e22:	3301      	adds	r3, #1
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	3340      	adds	r3, #64	@ 0x40
 8009e28:	443b      	add	r3, r7
 8009e2a:	3b38      	subs	r3, #56	@ 0x38
 8009e2c:	edd3 7a00 	vldr	s15, [r3]
 8009e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e38:	dd1b      	ble.n	8009e72 <HAL_GPIO_EXTI_Callback+0x18a>
                                float temp = temp_buffer[k];
 8009e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	3340      	adds	r3, #64	@ 0x40
 8009e40:	443b      	add	r3, r7
 8009e42:	3b38      	subs	r3, #56	@ 0x38
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	61fb      	str	r3, [r7, #28]
                                temp_buffer[k] = temp_buffer[k + 1];
 8009e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	3340      	adds	r3, #64	@ 0x40
 8009e50:	443b      	add	r3, r7
 8009e52:	3b38      	subs	r3, #56	@ 0x38
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	3340      	adds	r3, #64	@ 0x40
 8009e5c:	443b      	add	r3, r7
 8009e5e:	3b38      	subs	r3, #56	@ 0x38
 8009e60:	601a      	str	r2, [r3, #0]
                                temp_buffer[k + 1] = temp;
 8009e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e64:	3301      	adds	r3, #1
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	3340      	adds	r3, #64	@ 0x40
 8009e6a:	443b      	add	r3, r7
 8009e6c:	3b38      	subs	r3, #56	@ 0x38
 8009e6e:	69fa      	ldr	r2, [r7, #28]
 8009e70:	601a      	str	r2, [r3, #0]
                        for (int k = 0; k < FILTER_SAMPLES - j - 1; k++) {
 8009e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e74:	3301      	adds	r3, #1
 8009e76:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e7a:	f1c3 0304 	rsb	r3, r3, #4
 8009e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e80:	429a      	cmp	r2, r3
 8009e82:	dbc6      	blt.n	8009e12 <HAL_GPIO_EXTI_Callback+0x12a>
                    for (int j = 0; j < FILTER_SAMPLES - 1; j++) {
 8009e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e86:	3301      	adds	r3, #1
 8009e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e8c:	2b03      	cmp	r3, #3
 8009e8e:	ddbd      	ble.n	8009e0c <HAL_GPIO_EXTI_Callback+0x124>
                            }
                        }
                    }
                    
                    // 取中值
                    s->distance = temp_buffer[FILTER_SAMPLES / 2];
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e94:	619a      	str	r2, [r3, #24]
                if (raw_distance >= MIN_VALID_DISTANCE && raw_distance <= MAX_VALID_DISTANCE) {
 8009e96:	e017      	b.n	8009ec8 <HAL_GPIO_EXTI_Callback+0x1e0>
                } else {
                    // 距离无效，保持上一次的有效值
                    // 如果所有值都无效，则设为0
                    if (s->distance < MIN_VALID_DISTANCE || s->distance > MAX_VALID_DISTANCE) {
 8009e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e9a:	edd3 7a06 	vldr	s15, [r3, #24]
 8009e9e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8009ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eaa:	d409      	bmi.n	8009ec0 <HAL_GPIO_EXTI_Callback+0x1d8>
 8009eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eae:	edd3 7a06 	vldr	s15, [r3, #24]
 8009eb2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8009ef8 <HAL_GPIO_EXTI_Callback+0x210>
 8009eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ebe:	dd03      	ble.n	8009ec8 <HAL_GPIO_EXTI_Callback+0x1e0>
                        s->distance = 0.0f;
 8009ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec2:	f04f 0200 	mov.w	r2, #0
 8009ec6:	619a      	str	r2, [r3, #24]
                    }
                }
                
                s->data_ready = 1;
 8009ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eca:	2201      	movs	r2, #1
 8009ecc:	771a      	strb	r2, [r3, #28]
    for (uint8_t i = 0; i < sensor_count; i++) {
 8009ece:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8009f08 <HAL_GPIO_EXTI_Callback+0x220>)
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	f4ff af0a 	bcc.w	8009cfa <HAL_GPIO_EXTI_Callback+0x12>
            }
        }
    }
}
 8009ee6:	bf00      	nop
 8009ee8:	bf00      	nop
 8009eea:	3740      	adds	r7, #64	@ 0x40
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	200007d4 	.word	0x200007d4
 8009ef4:	3d0b4396 	.word	0x3d0b4396
 8009ef8:	43c80000 	.word	0x43c80000
 8009efc:	20000850 	.word	0x20000850
 8009f00:	200007ec 	.word	0x200007ec
 8009f04:	66666667 	.word	0x66666667
 8009f08:	200007e8 	.word	0x200007e8

08009f0c <US100_Init>:
#define US100_TIMEOUT_MS 300  // 增加超时时间到300ms

// 静态变量用于存储上次有效的距离值
static float last_valid_distances[MAX_US100_SENSORS] = {0};

void US100_Init(US100Sensor* sensor, UART_HandleTypeDef* uart) {
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
    if (us100_sensor_count >= MAX_US100_SENSORS) return;
 8009f16:	4b1c      	ldr	r3, [pc, #112]	@ (8009f88 <US100_Init+0x7c>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	2b04      	cmp	r3, #4
 8009f1c:	d82d      	bhi.n	8009f7a <US100_Init+0x6e>
    
    // 保存串口句柄
    sensor->uart = uart;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	601a      	str	r2, [r3, #0]
    
    // 初始化状态
    sensor->state = US100_STATE_IDLE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	711a      	strb	r2, [r3, #4]
    sensor->data_ready = 0;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	749a      	strb	r2, [r3, #18]
    sensor->distance = 0.0f;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	821a      	strh	r2, [r3, #16]
    sensor->rx_index = 0;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	739a      	strb	r2, [r3, #14]
    
    // 添加到活动传感器数组
    active_sensors[us100_sensor_count++] = sensor;
 8009f3c:	4b12      	ldr	r3, [pc, #72]	@ (8009f88 <US100_Init+0x7c>)
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	1c5a      	adds	r2, r3, #1
 8009f42:	b2d1      	uxtb	r1, r2
 8009f44:	4a10      	ldr	r2, [pc, #64]	@ (8009f88 <US100_Init+0x7c>)
 8009f46:	7011      	strb	r1, [r2, #0]
 8009f48:	4619      	mov	r1, r3
 8009f4a:	4a10      	ldr	r2, [pc, #64]	@ (8009f8c <US100_Init+0x80>)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    // 确保串口已初始化
    if (HAL_UART_GetState(uart) != HAL_UART_STATE_READY) {
 8009f52:	6838      	ldr	r0, [r7, #0]
 8009f54:	f004 faec 	bl	800e530 <HAL_UART_GetState>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b20      	cmp	r3, #32
 8009f5c:	d005      	beq.n	8009f6a <US100_Init+0x5e>
        if (HAL_UART_Init(uart) != HAL_OK) {
 8009f5e:	6838      	ldr	r0, [r7, #0]
 8009f60:	f003 ff34 	bl	800ddcc <HAL_UART_Init>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d109      	bne.n	8009f7e <US100_Init+0x72>
            return;
        }
    }
    
    // 启动串口接收
    HAL_UART_Receive_IT(uart, &sensor->rx_buffer[0], 1);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	330c      	adds	r3, #12
 8009f6e:	2201      	movs	r2, #1
 8009f70:	4619      	mov	r1, r3
 8009f72:	6838      	ldr	r0, [r7, #0]
 8009f74:	f004 f805 	bl	800df82 <HAL_UART_Receive_IT>
 8009f78:	e002      	b.n	8009f80 <US100_Init+0x74>
    if (us100_sensor_count >= MAX_US100_SENSORS) return;
 8009f7a:	bf00      	nop
 8009f7c:	e000      	b.n	8009f80 <US100_Init+0x74>
            return;
 8009f7e:	bf00      	nop
}
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	2000086c 	.word	0x2000086c
 8009f8c:	20000858 	.word	0x20000858

08009f90 <US100_StartMeasurement>:

void US100_StartMeasurement(US100Sensor* sensor) {
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
    if (sensor->state != US100_STATE_IDLE) {
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	791b      	ldrb	r3, [r3, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00d      	beq.n	8009fbc <US100_StartMeasurement+0x2c>
        sensor->state = US100_STATE_IDLE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	711a      	strb	r2, [r3, #4]
        sensor->rx_index = 0;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	739a      	strb	r2, [r3, #14]
        HAL_UART_Receive_IT(sensor->uart, &sensor->rx_buffer[0], 1);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6818      	ldr	r0, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	330c      	adds	r3, #12
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	f003 ffe3 	bl	800df82 <HAL_UART_Receive_IT>
    }
    
    // 开始新的测量
    sensor->state = US100_STATE_SENDING;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	711a      	strb	r2, [r3, #4]
    sensor->timestamp = HAL_GetTick();
 8009fc2:	f000 fccb 	bl	800a95c <HAL_GetTick>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	609a      	str	r2, [r3, #8]
    
    // 发送读取距离命令
    uint8_t cmd = US100_CMD_READ_DISTANCE;
 8009fcc:	2355      	movs	r3, #85	@ 0x55
 8009fce:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(sensor->uart, &cmd, 1, 100);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6818      	ldr	r0, [r3, #0]
 8009fd4:	f107 010f 	add.w	r1, r7, #15
 8009fd8:	2364      	movs	r3, #100	@ 0x64
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f003 ff46 	bl	800de6c <HAL_UART_Transmit>
}
 8009fe0:	bf00      	nop
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <US100_Update>:

void US100_Update(US100Sensor* sensor) {
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8009ff0:	f000 fcb4 	bl	800a95c <HAL_GetTick>
 8009ff4:	60f8      	str	r0, [r7, #12]
    
    switch (sensor->state) {
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	791b      	ldrb	r3, [r3, #4]
 8009ffa:	2b03      	cmp	r3, #3
 8009ffc:	d029      	beq.n	800a052 <US100_Update+0x6a>
 8009ffe:	2b03      	cmp	r3, #3
 800a000:	dc6b      	bgt.n	800a0da <US100_Update+0xf2>
 800a002:	2b01      	cmp	r3, #1
 800a004:	d002      	beq.n	800a00c <US100_Update+0x24>
 800a006:	2b02      	cmp	r3, #2
 800a008:	d00d      	beq.n	800a026 <US100_Update+0x3e>
                sensor->state = US100_STATE_IDLE;
            }
            break;
            
        default:
            break;
 800a00a:	e066      	b.n	800a0da <US100_Update+0xf2>
            if ((now - sensor->timestamp) >= 10) {
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	2b09      	cmp	r3, #9
 800a016:	d962      	bls.n	800a0de <US100_Update+0xf6>
                sensor->state = US100_STATE_WAITING;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2202      	movs	r2, #2
 800a01c:	711a      	strb	r2, [r3, #4]
                sensor->timestamp = now;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	609a      	str	r2, [r3, #8]
            break;
 800a024:	e05b      	b.n	800a0de <US100_Update+0xf6>
            if ((now - sensor->timestamp) >= US100_TIMEOUT_MS) {
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800a032:	d356      	bcc.n	800a0e2 <US100_Update+0xfa>
                sensor->state = US100_STATE_IDLE;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	711a      	strb	r2, [r3, #4]
                sensor->rx_index = 0;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	739a      	strb	r2, [r3, #14]
                HAL_UART_Receive_IT(sensor->uart, &sensor->rx_buffer[0], 1);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6818      	ldr	r0, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	330c      	adds	r3, #12
 800a048:	2201      	movs	r2, #1
 800a04a:	4619      	mov	r1, r3
 800a04c:	f003 ff99 	bl	800df82 <HAL_UART_Receive_IT>
            break;
 800a050:	e047      	b.n	800a0e2 <US100_Update+0xfa>
            if (sensor->rx_index >= 2) {
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	7b9b      	ldrb	r3, [r3, #14]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d945      	bls.n	800a0e6 <US100_Update+0xfe>
                if (sensor->rx_buffer[0] == 0xFF && sensor->rx_buffer[1] == 0xFF) {
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	7b1b      	ldrb	r3, [r3, #12]
 800a05e:	2bff      	cmp	r3, #255	@ 0xff
 800a060:	d112      	bne.n	800a088 <US100_Update+0xa0>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	7b5b      	ldrb	r3, [r3, #13]
 800a066:	2bff      	cmp	r3, #255	@ 0xff
 800a068:	d10e      	bne.n	800a088 <US100_Update+0xa0>
                    sensor->state = US100_STATE_IDLE;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	711a      	strb	r2, [r3, #4]
                    sensor->rx_index = 0;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	739a      	strb	r2, [r3, #14]
                    HAL_UART_Receive_IT(sensor->uart, &sensor->rx_buffer[0], 1);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6818      	ldr	r0, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	330c      	adds	r3, #12
 800a07e:	2201      	movs	r2, #1
 800a080:	4619      	mov	r1, r3
 800a082:	f003 ff7e 	bl	800df82 <HAL_UART_Receive_IT>
                    return;
 800a086:	e02f      	b.n	800a0e8 <US100_Update+0x100>
                uint16_t raw_distance = (sensor->rx_buffer[1] << 8) | sensor->rx_buffer[0];
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	7b5b      	ldrb	r3, [r3, #13]
 800a08c:	b21b      	sxth	r3, r3
 800a08e:	021b      	lsls	r3, r3, #8
 800a090:	b21a      	sxth	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	7b1b      	ldrb	r3, [r3, #12]
 800a096:	b21b      	sxth	r3, r3
 800a098:	4313      	orrs	r3, r2
 800a09a:	b21b      	sxth	r3, r3
 800a09c:	817b      	strh	r3, [r7, #10]
                if (raw_distance > 40000) {
 800a09e:	897b      	ldrh	r3, [r7, #10]
 800a0a0:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d90e      	bls.n	800a0c6 <US100_Update+0xde>
                    sensor->state = US100_STATE_IDLE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	711a      	strb	r2, [r3, #4]
                    sensor->rx_index = 0;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	739a      	strb	r2, [r3, #14]
                    HAL_UART_Receive_IT(sensor->uart, &sensor->rx_buffer[0], 1);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6818      	ldr	r0, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	330c      	adds	r3, #12
 800a0bc:	2201      	movs	r2, #1
 800a0be:	4619      	mov	r1, r3
 800a0c0:	f003 ff5f 	bl	800df82 <HAL_UART_Receive_IT>
                    return;
 800a0c4:	e010      	b.n	800a0e8 <US100_Update+0x100>
                sensor->distance = raw_distance;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	897a      	ldrh	r2, [r7, #10]
 800a0ca:	821a      	strh	r2, [r3, #16]
                sensor->data_ready = 1;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	749a      	strb	r2, [r3, #18]
                sensor->state = US100_STATE_IDLE;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	711a      	strb	r2, [r3, #4]
            break;
 800a0d8:	e005      	b.n	800a0e6 <US100_Update+0xfe>
            break;
 800a0da:	bf00      	nop
 800a0dc:	e004      	b.n	800a0e8 <US100_Update+0x100>
            break;
 800a0de:	bf00      	nop
 800a0e0:	e002      	b.n	800a0e8 <US100_Update+0x100>
            break;
 800a0e2:	bf00      	nop
 800a0e4:	e000      	b.n	800a0e8 <US100_Update+0x100>
            break;
 800a0e6:	bf00      	nop
    }
}
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
	...

0800a0f0 <US100_UART_RxCpltCallback>:

void US100_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	73fb      	strb	r3, [r7, #15]
 800a0fc:	e026      	b.n	800a14c <US100_UART_RxCpltCallback+0x5c>
        US100Sensor* s = active_sensors[i];
 800a0fe:	7bfb      	ldrb	r3, [r7, #15]
 800a100:	4a17      	ldr	r2, [pc, #92]	@ (800a160 <US100_UART_RxCpltCallback+0x70>)
 800a102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a106:	60bb      	str	r3, [r7, #8]
        
        if (huart == s->uart) {
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d119      	bne.n	800a146 <US100_UART_RxCpltCallback+0x56>
            s->rx_index++;
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	7b9b      	ldrb	r3, [r3, #14]
 800a116:	3301      	adds	r3, #1
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	739a      	strb	r2, [r3, #14]
            
            if (s->rx_index >= 2) {
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	7b9b      	ldrb	r3, [r3, #14]
 800a122:	2b01      	cmp	r3, #1
 800a124:	d903      	bls.n	800a12e <US100_UART_RxCpltCallback+0x3e>
                s->state = US100_STATE_RECEIVING;
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	2203      	movs	r2, #3
 800a12a:	711a      	strb	r2, [r3, #4]
            } else {
                HAL_UART_Receive_IT(huart, &s->rx_buffer[s->rx_index], 1);
            }
            
            break;
 800a12c:	e014      	b.n	800a158 <US100_UART_RxCpltCallback+0x68>
                HAL_UART_Receive_IT(huart, &s->rx_buffer[s->rx_index], 1);
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	7b9b      	ldrb	r3, [r3, #14]
 800a132:	3308      	adds	r3, #8
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	4413      	add	r3, r2
 800a138:	3304      	adds	r3, #4
 800a13a:	2201      	movs	r2, #1
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f003 ff1f 	bl	800df82 <HAL_UART_Receive_IT>
            break;
 800a144:	e008      	b.n	800a158 <US100_UART_RxCpltCallback+0x68>
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800a146:	7bfb      	ldrb	r3, [r7, #15]
 800a148:	3301      	adds	r3, #1
 800a14a:	73fb      	strb	r3, [r7, #15]
 800a14c:	4b05      	ldr	r3, [pc, #20]	@ (800a164 <US100_UART_RxCpltCallback+0x74>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	7bfa      	ldrb	r2, [r7, #15]
 800a152:	429a      	cmp	r2, r3
 800a154:	d3d3      	bcc.n	800a0fe <US100_UART_RxCpltCallback+0xe>
        }
    }
}
 800a156:	bf00      	nop
 800a158:	bf00      	nop
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20000858 	.word	0x20000858
 800a164:	2000086c 	.word	0x2000086c

0800a168 <US100_GetDistance>:

float US100_GetDistance(US100Sensor* sensor) {
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
    if (sensor->data_ready) {
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	7c9b      	ldrb	r3, [r3, #18]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d009      	beq.n	800a18c <US100_GetDistance+0x24>
        sensor->data_ready = 0;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	749a      	strb	r2, [r3, #18]
        return sensor->distance;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	8a1b      	ldrh	r3, [r3, #16]
 800a182:	ee07 3a90 	vmov	s15, r3
 800a186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18a:	e001      	b.n	800a190 <US100_GetDistance+0x28>
    }
    return -1.0f; // 无效数据
 800a18c:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
}
 800a190:	eeb0 0a67 	vmov.f32	s0, s15
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
	...

0800a1a0 <US100_GetAllValidDistances>:

void US100_GetAllValidDistances(float* distances) {
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
    // 更新所有传感器的状态
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	75fb      	strb	r3, [r7, #23]
 800a1ac:	e009      	b.n	800a1c2 <US100_GetAllValidDistances+0x22>
        US100_Update(active_sensors[i]);
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	4a4c      	ldr	r2, [pc, #304]	@ (800a2e4 <US100_GetAllValidDistances+0x144>)
 800a1b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7ff ff16 	bl	8009fe8 <US100_Update>
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800a1bc:	7dfb      	ldrb	r3, [r7, #23]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	75fb      	strb	r3, [r7, #23]
 800a1c2:	4b49      	ldr	r3, [pc, #292]	@ (800a2e8 <US100_GetAllValidDistances+0x148>)
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	7dfa      	ldrb	r2, [r7, #23]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d3f0      	bcc.n	800a1ae <US100_GetAllValidDistances+0xe>
    }
    
    // 获取所有传感器的距离值
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	75bb      	strb	r3, [r7, #22]
 800a1d0:	e022      	b.n	800a218 <US100_GetAllValidDistances+0x78>
        float current_distance = US100_GetDistance(active_sensors[i]);
 800a1d2:	7dbb      	ldrb	r3, [r7, #22]
 800a1d4:	4a43      	ldr	r2, [pc, #268]	@ (800a2e4 <US100_GetAllValidDistances+0x144>)
 800a1d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7ff ffc4 	bl	800a168 <US100_GetDistance>
 800a1e0:	ed87 0a02 	vstr	s0, [r7, #8]
        if (current_distance > 0) {
 800a1e4:	edd7 7a02 	vldr	s15, [r7, #8]
 800a1e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f0:	dd05      	ble.n	800a1fe <US100_GetAllValidDistances+0x5e>
            last_valid_distances[i] = current_distance;
 800a1f2:	7dbb      	ldrb	r3, [r7, #22]
 800a1f4:	4a3d      	ldr	r2, [pc, #244]	@ (800a2ec <US100_GetAllValidDistances+0x14c>)
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	601a      	str	r2, [r3, #0]
        }
        distances[i] = last_valid_distances[i];
 800a1fe:	7dba      	ldrb	r2, [r7, #22]
 800a200:	7dbb      	ldrb	r3, [r7, #22]
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	440b      	add	r3, r1
 800a208:	4938      	ldr	r1, [pc, #224]	@ (800a2ec <US100_GetAllValidDistances+0x14c>)
 800a20a:	0092      	lsls	r2, r2, #2
 800a20c:	440a      	add	r2, r1
 800a20e:	6812      	ldr	r2, [r2, #0]
 800a210:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800a212:	7dbb      	ldrb	r3, [r7, #22]
 800a214:	3301      	adds	r3, #1
 800a216:	75bb      	strb	r3, [r7, #22]
 800a218:	4b33      	ldr	r3, [pc, #204]	@ (800a2e8 <US100_GetAllValidDistances+0x148>)
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	7dba      	ldrb	r2, [r7, #22]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d3d7      	bcc.n	800a1d2 <US100_GetAllValidDistances+0x32>
    }
    
    // 检查是否所有传感器都有有效数据
    uint8_t all_valid = 1;
 800a222:	2301      	movs	r3, #1
 800a224:	757b      	strb	r3, [r7, #21]
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800a226:	2300      	movs	r3, #0
 800a228:	753b      	strb	r3, [r7, #20]
 800a22a:	e010      	b.n	800a24e <US100_GetAllValidDistances+0xae>
        if (distances[i] <= 0) {
 800a22c:	7d3b      	ldrb	r3, [r7, #20]
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	4413      	add	r3, r2
 800a234:	edd3 7a00 	vldr	s15, [r3]
 800a238:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a240:	d802      	bhi.n	800a248 <US100_GetAllValidDistances+0xa8>
            all_valid = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	757b      	strb	r3, [r7, #21]
            break;
 800a246:	e007      	b.n	800a258 <US100_GetAllValidDistances+0xb8>
    for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800a248:	7d3b      	ldrb	r3, [r7, #20]
 800a24a:	3301      	adds	r3, #1
 800a24c:	753b      	strb	r3, [r7, #20]
 800a24e:	4b26      	ldr	r3, [pc, #152]	@ (800a2e8 <US100_GetAllValidDistances+0x148>)
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	7d3a      	ldrb	r2, [r7, #20]
 800a254:	429a      	cmp	r2, r3
 800a256:	d3e9      	bcc.n	800a22c <US100_GetAllValidDistances+0x8c>
        }
    }
    
    // 如果所有传感器都有有效数据，开始下一次测量
    if (all_valid) {
 800a258:	7d7b      	ldrb	r3, [r7, #21]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d012      	beq.n	800a284 <US100_GetAllValidDistances+0xe4>
        for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800a25e:	2300      	movs	r3, #0
 800a260:	74fb      	strb	r3, [r7, #19]
 800a262:	e009      	b.n	800a278 <US100_GetAllValidDistances+0xd8>
            US100_StartMeasurement(active_sensors[i]);
 800a264:	7cfb      	ldrb	r3, [r7, #19]
 800a266:	4a1f      	ldr	r2, [pc, #124]	@ (800a2e4 <US100_GetAllValidDistances+0x144>)
 800a268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7ff fe8f 	bl	8009f90 <US100_StartMeasurement>
        for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800a272:	7cfb      	ldrb	r3, [r7, #19]
 800a274:	3301      	adds	r3, #1
 800a276:	74fb      	strb	r3, [r7, #19]
 800a278:	4b1b      	ldr	r3, [pc, #108]	@ (800a2e8 <US100_GetAllValidDistances+0x148>)
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	7cfa      	ldrb	r2, [r7, #19]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d3f0      	bcc.n	800a264 <US100_GetAllValidDistances+0xc4>
            }
            
            last_measurement_time = current_time;
        }
    }
}
 800a282:	e02a      	b.n	800a2da <US100_GetAllValidDistances+0x13a>
        uint32_t current_time = HAL_GetTick();
 800a284:	f000 fb6a 	bl	800a95c <HAL_GetTick>
 800a288:	60f8      	str	r0, [r7, #12]
        if (current_time - last_measurement_time > 30) {
 800a28a:	4b19      	ldr	r3, [pc, #100]	@ (800a2f0 <US100_GetAllValidDistances+0x150>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	2b1e      	cmp	r3, #30
 800a294:	d921      	bls.n	800a2da <US100_GetAllValidDistances+0x13a>
            timeout_count++;
 800a296:	4b17      	ldr	r3, [pc, #92]	@ (800a2f4 <US100_GetAllValidDistances+0x154>)
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	3301      	adds	r3, #1
 800a29c:	b2da      	uxtb	r2, r3
 800a29e:	4b15      	ldr	r3, [pc, #84]	@ (800a2f4 <US100_GetAllValidDistances+0x154>)
 800a2a0:	701a      	strb	r2, [r3, #0]
            if (timeout_count >= 3) {
 800a2a2:	4b14      	ldr	r3, [pc, #80]	@ (800a2f4 <US100_GetAllValidDistances+0x154>)
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d914      	bls.n	800a2d4 <US100_GetAllValidDistances+0x134>
                for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	74bb      	strb	r3, [r7, #18]
 800a2ae:	e009      	b.n	800a2c4 <US100_GetAllValidDistances+0x124>
                    US100_StartMeasurement(active_sensors[i]);
 800a2b0:	7cbb      	ldrb	r3, [r7, #18]
 800a2b2:	4a0c      	ldr	r2, [pc, #48]	@ (800a2e4 <US100_GetAllValidDistances+0x144>)
 800a2b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7ff fe69 	bl	8009f90 <US100_StartMeasurement>
                for (uint8_t i = 0; i < us100_sensor_count; i++) {
 800a2be:	7cbb      	ldrb	r3, [r7, #18]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	74bb      	strb	r3, [r7, #18]
 800a2c4:	4b08      	ldr	r3, [pc, #32]	@ (800a2e8 <US100_GetAllValidDistances+0x148>)
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	7cba      	ldrb	r2, [r7, #18]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d3f0      	bcc.n	800a2b0 <US100_GetAllValidDistances+0x110>
                timeout_count = 0;
 800a2ce:	4b09      	ldr	r3, [pc, #36]	@ (800a2f4 <US100_GetAllValidDistances+0x154>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	701a      	strb	r2, [r3, #0]
            last_measurement_time = current_time;
 800a2d4:	4a06      	ldr	r2, [pc, #24]	@ (800a2f0 <US100_GetAllValidDistances+0x150>)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6013      	str	r3, [r2, #0]
}
 800a2da:	bf00      	nop
 800a2dc:	3718      	adds	r7, #24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	20000858 	.word	0x20000858
 800a2e8:	2000086c 	.word	0x2000086c
 800a2ec:	20000870 	.word	0x20000870
 800a2f0:	20000884 	.word	0x20000884
 800a2f4:	20000888 	.word	0x20000888

0800a2f8 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800a2fc:	4b11      	ldr	r3, [pc, #68]	@ (800a344 <MX_UART4_Init+0x4c>)
 800a2fe:	4a12      	ldr	r2, [pc, #72]	@ (800a348 <MX_UART4_Init+0x50>)
 800a300:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800a302:	4b10      	ldr	r3, [pc, #64]	@ (800a344 <MX_UART4_Init+0x4c>)
 800a304:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800a308:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a30a:	4b0e      	ldr	r3, [pc, #56]	@ (800a344 <MX_UART4_Init+0x4c>)
 800a30c:	2200      	movs	r2, #0
 800a30e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a310:	4b0c      	ldr	r3, [pc, #48]	@ (800a344 <MX_UART4_Init+0x4c>)
 800a312:	2200      	movs	r2, #0
 800a314:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a316:	4b0b      	ldr	r3, [pc, #44]	@ (800a344 <MX_UART4_Init+0x4c>)
 800a318:	2200      	movs	r2, #0
 800a31a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a31c:	4b09      	ldr	r3, [pc, #36]	@ (800a344 <MX_UART4_Init+0x4c>)
 800a31e:	220c      	movs	r2, #12
 800a320:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a322:	4b08      	ldr	r3, [pc, #32]	@ (800a344 <MX_UART4_Init+0x4c>)
 800a324:	2200      	movs	r2, #0
 800a326:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a328:	4b06      	ldr	r3, [pc, #24]	@ (800a344 <MX_UART4_Init+0x4c>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a32e:	4805      	ldr	r0, [pc, #20]	@ (800a344 <MX_UART4_Init+0x4c>)
 800a330:	f003 fd4c 	bl	800ddcc <HAL_UART_Init>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800a33a:	f7fd f8c1 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800a33e:	bf00      	nop
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	2000088c 	.word	0x2000088c
 800a348:	40004c00 	.word	0x40004c00

0800a34c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800a350:	4b11      	ldr	r3, [pc, #68]	@ (800a398 <MX_UART5_Init+0x4c>)
 800a352:	4a12      	ldr	r2, [pc, #72]	@ (800a39c <MX_UART5_Init+0x50>)
 800a354:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800a356:	4b10      	ldr	r3, [pc, #64]	@ (800a398 <MX_UART5_Init+0x4c>)
 800a358:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800a35c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800a35e:	4b0e      	ldr	r3, [pc, #56]	@ (800a398 <MX_UART5_Init+0x4c>)
 800a360:	2200      	movs	r2, #0
 800a362:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800a364:	4b0c      	ldr	r3, [pc, #48]	@ (800a398 <MX_UART5_Init+0x4c>)
 800a366:	2200      	movs	r2, #0
 800a368:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800a36a:	4b0b      	ldr	r3, [pc, #44]	@ (800a398 <MX_UART5_Init+0x4c>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800a370:	4b09      	ldr	r3, [pc, #36]	@ (800a398 <MX_UART5_Init+0x4c>)
 800a372:	220c      	movs	r2, #12
 800a374:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a376:	4b08      	ldr	r3, [pc, #32]	@ (800a398 <MX_UART5_Init+0x4c>)
 800a378:	2200      	movs	r2, #0
 800a37a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800a37c:	4b06      	ldr	r3, [pc, #24]	@ (800a398 <MX_UART5_Init+0x4c>)
 800a37e:	2200      	movs	r2, #0
 800a380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800a382:	4805      	ldr	r0, [pc, #20]	@ (800a398 <MX_UART5_Init+0x4c>)
 800a384:	f003 fd22 	bl	800ddcc <HAL_UART_Init>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800a38e:	f7fd f897 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800a392:	bf00      	nop
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	200008d4 	.word	0x200008d4
 800a39c:	40005000 	.word	0x40005000

0800a3a0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a3a4:	4b11      	ldr	r3, [pc, #68]	@ (800a3ec <MX_USART1_UART_Init+0x4c>)
 800a3a6:	4a12      	ldr	r2, [pc, #72]	@ (800a3f0 <MX_USART1_UART_Init+0x50>)
 800a3a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a3aa:	4b10      	ldr	r3, [pc, #64]	@ (800a3ec <MX_USART1_UART_Init+0x4c>)
 800a3ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a3b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a3b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a3ec <MX_USART1_UART_Init+0x4c>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a3b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a3ec <MX_USART1_UART_Init+0x4c>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a3be:	4b0b      	ldr	r3, [pc, #44]	@ (800a3ec <MX_USART1_UART_Init+0x4c>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a3c4:	4b09      	ldr	r3, [pc, #36]	@ (800a3ec <MX_USART1_UART_Init+0x4c>)
 800a3c6:	220c      	movs	r2, #12
 800a3c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a3ca:	4b08      	ldr	r3, [pc, #32]	@ (800a3ec <MX_USART1_UART_Init+0x4c>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a3d0:	4b06      	ldr	r3, [pc, #24]	@ (800a3ec <MX_USART1_UART_Init+0x4c>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a3d6:	4805      	ldr	r0, [pc, #20]	@ (800a3ec <MX_USART1_UART_Init+0x4c>)
 800a3d8:	f003 fcf8 	bl	800ddcc <HAL_UART_Init>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a3e2:	f7fd f86d 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a3e6:	bf00      	nop
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	2000091c 	.word	0x2000091c
 800a3f0:	40011000 	.word	0x40011000

0800a3f4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a3f8:	4b11      	ldr	r3, [pc, #68]	@ (800a440 <MX_USART2_UART_Init+0x4c>)
 800a3fa:	4a12      	ldr	r2, [pc, #72]	@ (800a444 <MX_USART2_UART_Init+0x50>)
 800a3fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800a3fe:	4b10      	ldr	r3, [pc, #64]	@ (800a440 <MX_USART2_UART_Init+0x4c>)
 800a400:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800a404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a406:	4b0e      	ldr	r3, [pc, #56]	@ (800a440 <MX_USART2_UART_Init+0x4c>)
 800a408:	2200      	movs	r2, #0
 800a40a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a40c:	4b0c      	ldr	r3, [pc, #48]	@ (800a440 <MX_USART2_UART_Init+0x4c>)
 800a40e:	2200      	movs	r2, #0
 800a410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a412:	4b0b      	ldr	r3, [pc, #44]	@ (800a440 <MX_USART2_UART_Init+0x4c>)
 800a414:	2200      	movs	r2, #0
 800a416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a418:	4b09      	ldr	r3, [pc, #36]	@ (800a440 <MX_USART2_UART_Init+0x4c>)
 800a41a:	220c      	movs	r2, #12
 800a41c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a41e:	4b08      	ldr	r3, [pc, #32]	@ (800a440 <MX_USART2_UART_Init+0x4c>)
 800a420:	2200      	movs	r2, #0
 800a422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a424:	4b06      	ldr	r3, [pc, #24]	@ (800a440 <MX_USART2_UART_Init+0x4c>)
 800a426:	2200      	movs	r2, #0
 800a428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a42a:	4805      	ldr	r0, [pc, #20]	@ (800a440 <MX_USART2_UART_Init+0x4c>)
 800a42c:	f003 fcce 	bl	800ddcc <HAL_UART_Init>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a436:	f7fd f843 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a43a:	bf00      	nop
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	20000964 	.word	0x20000964
 800a444:	40004400 	.word	0x40004400

0800a448 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a44c:	4b11      	ldr	r3, [pc, #68]	@ (800a494 <MX_USART3_UART_Init+0x4c>)
 800a44e:	4a12      	ldr	r2, [pc, #72]	@ (800a498 <MX_USART3_UART_Init+0x50>)
 800a450:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800a452:	4b10      	ldr	r3, [pc, #64]	@ (800a494 <MX_USART3_UART_Init+0x4c>)
 800a454:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800a458:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a45a:	4b0e      	ldr	r3, [pc, #56]	@ (800a494 <MX_USART3_UART_Init+0x4c>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a460:	4b0c      	ldr	r3, [pc, #48]	@ (800a494 <MX_USART3_UART_Init+0x4c>)
 800a462:	2200      	movs	r2, #0
 800a464:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a466:	4b0b      	ldr	r3, [pc, #44]	@ (800a494 <MX_USART3_UART_Init+0x4c>)
 800a468:	2200      	movs	r2, #0
 800a46a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a46c:	4b09      	ldr	r3, [pc, #36]	@ (800a494 <MX_USART3_UART_Init+0x4c>)
 800a46e:	220c      	movs	r2, #12
 800a470:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a472:	4b08      	ldr	r3, [pc, #32]	@ (800a494 <MX_USART3_UART_Init+0x4c>)
 800a474:	2200      	movs	r2, #0
 800a476:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a478:	4b06      	ldr	r3, [pc, #24]	@ (800a494 <MX_USART3_UART_Init+0x4c>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a47e:	4805      	ldr	r0, [pc, #20]	@ (800a494 <MX_USART3_UART_Init+0x4c>)
 800a480:	f003 fca4 	bl	800ddcc <HAL_UART_Init>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800a48a:	f7fd f819 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a48e:	bf00      	nop
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	200009ac 	.word	0x200009ac
 800a498:	40004800 	.word	0x40004800

0800a49c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800a4a0:	4b11      	ldr	r3, [pc, #68]	@ (800a4e8 <MX_USART6_UART_Init+0x4c>)
 800a4a2:	4a12      	ldr	r2, [pc, #72]	@ (800a4ec <MX_USART6_UART_Init+0x50>)
 800a4a4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800a4a6:	4b10      	ldr	r3, [pc, #64]	@ (800a4e8 <MX_USART6_UART_Init+0x4c>)
 800a4a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800a4ac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800a4ae:	4b0e      	ldr	r3, [pc, #56]	@ (800a4e8 <MX_USART6_UART_Init+0x4c>)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800a4b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e8 <MX_USART6_UART_Init+0x4c>)
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800a4ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a4e8 <MX_USART6_UART_Init+0x4c>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800a4c0:	4b09      	ldr	r3, [pc, #36]	@ (800a4e8 <MX_USART6_UART_Init+0x4c>)
 800a4c2:	220c      	movs	r2, #12
 800a4c4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a4c6:	4b08      	ldr	r3, [pc, #32]	@ (800a4e8 <MX_USART6_UART_Init+0x4c>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800a4cc:	4b06      	ldr	r3, [pc, #24]	@ (800a4e8 <MX_USART6_UART_Init+0x4c>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800a4d2:	4805      	ldr	r0, [pc, #20]	@ (800a4e8 <MX_USART6_UART_Init+0x4c>)
 800a4d4:	f003 fc7a 	bl	800ddcc <HAL_UART_Init>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800a4de:	f7fc ffef 	bl	80074c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800a4e2:	bf00      	nop
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	200009f4 	.word	0x200009f4
 800a4ec:	40011400 	.word	0x40011400

0800a4f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b094      	sub	sp, #80	@ 0x50
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	605a      	str	r2, [r3, #4]
 800a502:	609a      	str	r2, [r3, #8]
 800a504:	60da      	str	r2, [r3, #12]
 800a506:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4aa0      	ldr	r2, [pc, #640]	@ (800a790 <HAL_UART_MspInit+0x2a0>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d135      	bne.n	800a57e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a512:	2300      	movs	r3, #0
 800a514:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a516:	4b9f      	ldr	r3, [pc, #636]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a51a:	4a9e      	ldr	r2, [pc, #632]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a51c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a520:	6413      	str	r3, [r2, #64]	@ 0x40
 800a522:	4b9c      	ldr	r3, [pc, #624]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a526:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a52a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a52e:	2300      	movs	r3, #0
 800a530:	637b      	str	r3, [r7, #52]	@ 0x34
 800a532:	4b98      	ldr	r3, [pc, #608]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a536:	4a97      	ldr	r2, [pc, #604]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a538:	f043 0304 	orr.w	r3, r3, #4
 800a53c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a53e:	4b95      	ldr	r3, [pc, #596]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a542:	f003 0304 	and.w	r3, r3, #4
 800a546:	637b      	str	r3, [r7, #52]	@ 0x34
 800a548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_1_Pin|RX_1_Pin;
 800a54a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a550:	2302      	movs	r3, #2
 800a552:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a554:	2300      	movs	r3, #0
 800a556:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a558:	2303      	movs	r3, #3
 800a55a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a55c:	2308      	movs	r3, #8
 800a55e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a560:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a564:	4619      	mov	r1, r3
 800a566:	488c      	ldr	r0, [pc, #560]	@ (800a798 <HAL_UART_MspInit+0x2a8>)
 800a568:	f000 fbcc 	bl	800ad04 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800a56c:	2200      	movs	r2, #0
 800a56e:	2100      	movs	r1, #0
 800a570:	2034      	movs	r0, #52	@ 0x34
 800a572:	f000 fafe 	bl	800ab72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a576:	2034      	movs	r0, #52	@ 0x34
 800a578:	f000 fb17 	bl	800abaa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800a57c:	e154      	b.n	800a828 <HAL_UART_MspInit+0x338>
  else if(uartHandle->Instance==UART5)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a86      	ldr	r2, [pc, #536]	@ (800a79c <HAL_UART_MspInit+0x2ac>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d153      	bne.n	800a630 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 800a588:	2300      	movs	r3, #0
 800a58a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a58c:	4b81      	ldr	r3, [pc, #516]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a58e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a590:	4a80      	ldr	r2, [pc, #512]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a596:	6413      	str	r3, [r2, #64]	@ 0x40
 800a598:	4b7e      	ldr	r3, [pc, #504]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a59a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a59c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5a0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5a8:	4b7a      	ldr	r3, [pc, #488]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a5aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ac:	4a79      	ldr	r2, [pc, #484]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a5ae:	f043 0304 	orr.w	r3, r3, #4
 800a5b2:	6313      	str	r3, [r2, #48]	@ 0x30
 800a5b4:	4b77      	ldr	r3, [pc, #476]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a5b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5b8:	f003 0304 	and.w	r3, r3, #4
 800a5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5c4:	4b73      	ldr	r3, [pc, #460]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a5c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5c8:	4a72      	ldr	r2, [pc, #456]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a5ca:	f043 0308 	orr.w	r3, r3, #8
 800a5ce:	6313      	str	r3, [r2, #48]	@ 0x30
 800a5d0:	4b70      	ldr	r3, [pc, #448]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a5d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5d4:	f003 0308 	and.w	r3, r3, #8
 800a5d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a5dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800a5ee:	2308      	movs	r3, #8
 800a5f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5f2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	4867      	ldr	r0, [pc, #412]	@ (800a798 <HAL_UART_MspInit+0x2a8>)
 800a5fa:	f000 fb83 	bl	800ad04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a5fe:	2304      	movs	r3, #4
 800a600:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a602:	2302      	movs	r3, #2
 800a604:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a606:	2300      	movs	r3, #0
 800a608:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a60a:	2303      	movs	r3, #3
 800a60c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800a60e:	2308      	movs	r3, #8
 800a610:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a612:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a616:	4619      	mov	r1, r3
 800a618:	4861      	ldr	r0, [pc, #388]	@ (800a7a0 <HAL_UART_MspInit+0x2b0>)
 800a61a:	f000 fb73 	bl	800ad04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800a61e:	2200      	movs	r2, #0
 800a620:	2100      	movs	r1, #0
 800a622:	2035      	movs	r0, #53	@ 0x35
 800a624:	f000 faa5 	bl	800ab72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800a628:	2035      	movs	r0, #53	@ 0x35
 800a62a:	f000 fabe 	bl	800abaa <HAL_NVIC_EnableIRQ>
}
 800a62e:	e0fb      	b.n	800a828 <HAL_UART_MspInit+0x338>
  else if(uartHandle->Instance==USART1)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a5b      	ldr	r2, [pc, #364]	@ (800a7a4 <HAL_UART_MspInit+0x2b4>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d135      	bne.n	800a6a6 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a63a:	2300      	movs	r3, #0
 800a63c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a63e:	4b55      	ldr	r3, [pc, #340]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a642:	4a54      	ldr	r2, [pc, #336]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a644:	f043 0310 	orr.w	r3, r3, #16
 800a648:	6453      	str	r3, [r2, #68]	@ 0x44
 800a64a:	4b52      	ldr	r3, [pc, #328]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a64c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a64e:	f003 0310 	and.w	r3, r3, #16
 800a652:	627b      	str	r3, [r7, #36]	@ 0x24
 800a654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a656:	2300      	movs	r3, #0
 800a658:	623b      	str	r3, [r7, #32]
 800a65a:	4b4e      	ldr	r3, [pc, #312]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a65c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a65e:	4a4d      	ldr	r2, [pc, #308]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a660:	f043 0301 	orr.w	r3, r3, #1
 800a664:	6313      	str	r3, [r2, #48]	@ 0x30
 800a666:	4b4b      	ldr	r3, [pc, #300]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	623b      	str	r3, [r7, #32]
 800a670:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a672:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800a676:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a678:	2302      	movs	r3, #2
 800a67a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a67c:	2300      	movs	r3, #0
 800a67e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a680:	2303      	movs	r3, #3
 800a682:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a684:	2307      	movs	r3, #7
 800a686:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a688:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a68c:	4619      	mov	r1, r3
 800a68e:	4846      	ldr	r0, [pc, #280]	@ (800a7a8 <HAL_UART_MspInit+0x2b8>)
 800a690:	f000 fb38 	bl	800ad04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a694:	2200      	movs	r2, #0
 800a696:	2100      	movs	r1, #0
 800a698:	2025      	movs	r0, #37	@ 0x25
 800a69a:	f000 fa6a 	bl	800ab72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a69e:	2025      	movs	r0, #37	@ 0x25
 800a6a0:	f000 fa83 	bl	800abaa <HAL_NVIC_EnableIRQ>
}
 800a6a4:	e0c0      	b.n	800a828 <HAL_UART_MspInit+0x338>
  else if(uartHandle->Instance==USART2)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a40      	ldr	r2, [pc, #256]	@ (800a7ac <HAL_UART_MspInit+0x2bc>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d134      	bne.n	800a71a <HAL_UART_MspInit+0x22a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	61fb      	str	r3, [r7, #28]
 800a6b4:	4b37      	ldr	r3, [pc, #220]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a6b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6b8:	4a36      	ldr	r2, [pc, #216]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a6ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6be:	6413      	str	r3, [r2, #64]	@ 0x40
 800a6c0:	4b34      	ldr	r3, [pc, #208]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a6c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6c8:	61fb      	str	r3, [r7, #28]
 800a6ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	61bb      	str	r3, [r7, #24]
 800a6d0:	4b30      	ldr	r3, [pc, #192]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6d4:	4a2f      	ldr	r2, [pc, #188]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a6d6:	f043 0308 	orr.w	r3, r3, #8
 800a6da:	6313      	str	r3, [r2, #48]	@ 0x30
 800a6dc:	4b2d      	ldr	r3, [pc, #180]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e0:	f003 0308 	and.w	r3, r3, #8
 800a6e4:	61bb      	str	r3, [r7, #24]
 800a6e6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800a6e8:	2360      	movs	r3, #96	@ 0x60
 800a6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a6f8:	2307      	movs	r3, #7
 800a6fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a6fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a700:	4619      	mov	r1, r3
 800a702:	4827      	ldr	r0, [pc, #156]	@ (800a7a0 <HAL_UART_MspInit+0x2b0>)
 800a704:	f000 fafe 	bl	800ad04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800a708:	2200      	movs	r2, #0
 800a70a:	2100      	movs	r1, #0
 800a70c:	2026      	movs	r0, #38	@ 0x26
 800a70e:	f000 fa30 	bl	800ab72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a712:	2026      	movs	r0, #38	@ 0x26
 800a714:	f000 fa49 	bl	800abaa <HAL_NVIC_EnableIRQ>
}
 800a718:	e086      	b.n	800a828 <HAL_UART_MspInit+0x338>
  else if(uartHandle->Instance==USART3)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a24      	ldr	r2, [pc, #144]	@ (800a7b0 <HAL_UART_MspInit+0x2c0>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d147      	bne.n	800a7b4 <HAL_UART_MspInit+0x2c4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a724:	2300      	movs	r3, #0
 800a726:	617b      	str	r3, [r7, #20]
 800a728:	4b1a      	ldr	r3, [pc, #104]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a72a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a72c:	4a19      	ldr	r2, [pc, #100]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a72e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a732:	6413      	str	r3, [r2, #64]	@ 0x40
 800a734:	4b17      	ldr	r3, [pc, #92]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a738:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a73c:	617b      	str	r3, [r7, #20]
 800a73e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a740:	2300      	movs	r3, #0
 800a742:	613b      	str	r3, [r7, #16]
 800a744:	4b13      	ldr	r3, [pc, #76]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a748:	4a12      	ldr	r2, [pc, #72]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a74a:	f043 0308 	orr.w	r3, r3, #8
 800a74e:	6313      	str	r3, [r2, #48]	@ 0x30
 800a750:	4b10      	ldr	r3, [pc, #64]	@ (800a794 <HAL_UART_MspInit+0x2a4>)
 800a752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a754:	f003 0308 	and.w	r3, r3, #8
 800a758:	613b      	str	r3, [r7, #16]
 800a75a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a75c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a760:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a762:	2302      	movs	r3, #2
 800a764:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a766:	2300      	movs	r3, #0
 800a768:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a76a:	2303      	movs	r3, #3
 800a76c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a76e:	2307      	movs	r3, #7
 800a770:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a772:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a776:	4619      	mov	r1, r3
 800a778:	4809      	ldr	r0, [pc, #36]	@ (800a7a0 <HAL_UART_MspInit+0x2b0>)
 800a77a:	f000 fac3 	bl	800ad04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800a77e:	2200      	movs	r2, #0
 800a780:	2100      	movs	r1, #0
 800a782:	2027      	movs	r0, #39	@ 0x27
 800a784:	f000 f9f5 	bl	800ab72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a788:	2027      	movs	r0, #39	@ 0x27
 800a78a:	f000 fa0e 	bl	800abaa <HAL_NVIC_EnableIRQ>
}
 800a78e:	e04b      	b.n	800a828 <HAL_UART_MspInit+0x338>
 800a790:	40004c00 	.word	0x40004c00
 800a794:	40023800 	.word	0x40023800
 800a798:	40020800 	.word	0x40020800
 800a79c:	40005000 	.word	0x40005000
 800a7a0:	40020c00 	.word	0x40020c00
 800a7a4:	40011000 	.word	0x40011000
 800a7a8:	40020000 	.word	0x40020000
 800a7ac:	40004400 	.word	0x40004400
 800a7b0:	40004800 	.word	0x40004800
  else if(uartHandle->Instance==USART6)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a830 <HAL_UART_MspInit+0x340>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d134      	bne.n	800a828 <HAL_UART_MspInit+0x338>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a7be:	2300      	movs	r3, #0
 800a7c0:	60fb      	str	r3, [r7, #12]
 800a7c2:	4b1c      	ldr	r3, [pc, #112]	@ (800a834 <HAL_UART_MspInit+0x344>)
 800a7c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7c6:	4a1b      	ldr	r2, [pc, #108]	@ (800a834 <HAL_UART_MspInit+0x344>)
 800a7c8:	f043 0320 	orr.w	r3, r3, #32
 800a7cc:	6453      	str	r3, [r2, #68]	@ 0x44
 800a7ce:	4b19      	ldr	r3, [pc, #100]	@ (800a834 <HAL_UART_MspInit+0x344>)
 800a7d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7d2:	f003 0320 	and.w	r3, r3, #32
 800a7d6:	60fb      	str	r3, [r7, #12]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60bb      	str	r3, [r7, #8]
 800a7de:	4b15      	ldr	r3, [pc, #84]	@ (800a834 <HAL_UART_MspInit+0x344>)
 800a7e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7e2:	4a14      	ldr	r2, [pc, #80]	@ (800a834 <HAL_UART_MspInit+0x344>)
 800a7e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800a7ea:	4b12      	ldr	r3, [pc, #72]	@ (800a834 <HAL_UART_MspInit+0x344>)
 800a7ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7f2:	60bb      	str	r3, [r7, #8]
 800a7f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800a7f6:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 800a7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a800:	2300      	movs	r3, #0
 800a802:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a804:	2303      	movs	r3, #3
 800a806:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a808:	2308      	movs	r3, #8
 800a80a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a80c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a810:	4619      	mov	r1, r3
 800a812:	4809      	ldr	r0, [pc, #36]	@ (800a838 <HAL_UART_MspInit+0x348>)
 800a814:	f000 fa76 	bl	800ad04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800a818:	2200      	movs	r2, #0
 800a81a:	2100      	movs	r1, #0
 800a81c:	2047      	movs	r0, #71	@ 0x47
 800a81e:	f000 f9a8 	bl	800ab72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800a822:	2047      	movs	r0, #71	@ 0x47
 800a824:	f000 f9c1 	bl	800abaa <HAL_NVIC_EnableIRQ>
}
 800a828:	bf00      	nop
 800a82a:	3750      	adds	r7, #80	@ 0x50
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	40011400 	.word	0x40011400
 800a834:	40023800 	.word	0x40023800
 800a838:	40021800 	.word	0x40021800

0800a83c <Reset_Handler>:
 800a83c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a874 <LoopFillZerobss+0xe>
 800a840:	f7fe fc64 	bl	800910c <SystemInit>
 800a844:	480c      	ldr	r0, [pc, #48]	@ (800a878 <LoopFillZerobss+0x12>)
 800a846:	490d      	ldr	r1, [pc, #52]	@ (800a87c <LoopFillZerobss+0x16>)
 800a848:	4a0d      	ldr	r2, [pc, #52]	@ (800a880 <LoopFillZerobss+0x1a>)
 800a84a:	2300      	movs	r3, #0
 800a84c:	e002      	b.n	800a854 <LoopCopyDataInit>

0800a84e <CopyDataInit>:
 800a84e:	58d4      	ldr	r4, [r2, r3]
 800a850:	50c4      	str	r4, [r0, r3]
 800a852:	3304      	adds	r3, #4

0800a854 <LoopCopyDataInit>:
 800a854:	18c4      	adds	r4, r0, r3
 800a856:	428c      	cmp	r4, r1
 800a858:	d3f9      	bcc.n	800a84e <CopyDataInit>
 800a85a:	4a0a      	ldr	r2, [pc, #40]	@ (800a884 <LoopFillZerobss+0x1e>)
 800a85c:	4c0a      	ldr	r4, [pc, #40]	@ (800a888 <LoopFillZerobss+0x22>)
 800a85e:	2300      	movs	r3, #0
 800a860:	e001      	b.n	800a866 <LoopFillZerobss>

0800a862 <FillZerobss>:
 800a862:	6013      	str	r3, [r2, #0]
 800a864:	3204      	adds	r2, #4

0800a866 <LoopFillZerobss>:
 800a866:	42a2      	cmp	r2, r4
 800a868:	d3fb      	bcc.n	800a862 <FillZerobss>
 800a86a:	f005 f9eb 	bl	800fc44 <__libc_init_array>
 800a86e:	f7fa ff95 	bl	800579c <main>
 800a872:	4770      	bx	lr
 800a874:	20020000 	.word	0x20020000
 800a878:	20000000 	.word	0x20000000
 800a87c:	200002a8 	.word	0x200002a8
 800a880:	08013d08 	.word	0x08013d08
 800a884:	200002a8 	.word	0x200002a8
 800a888:	20000b8c 	.word	0x20000b8c

0800a88c <ADC_IRQHandler>:
 800a88c:	e7fe      	b.n	800a88c <ADC_IRQHandler>
	...

0800a890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a894:	4b0e      	ldr	r3, [pc, #56]	@ (800a8d0 <HAL_Init+0x40>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a0d      	ldr	r2, [pc, #52]	@ (800a8d0 <HAL_Init+0x40>)
 800a89a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a89e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a8a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a8d0 <HAL_Init+0x40>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a0a      	ldr	r2, [pc, #40]	@ (800a8d0 <HAL_Init+0x40>)
 800a8a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a8aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a8ac:	4b08      	ldr	r3, [pc, #32]	@ (800a8d0 <HAL_Init+0x40>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a07      	ldr	r2, [pc, #28]	@ (800a8d0 <HAL_Init+0x40>)
 800a8b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a8b8:	2003      	movs	r0, #3
 800a8ba:	f000 f94f 	bl	800ab5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a8be:	200f      	movs	r0, #15
 800a8c0:	f000 f808 	bl	800a8d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a8c4:	f7fe fab8 	bl	8008e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	40023c00 	.word	0x40023c00

0800a8d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a8dc:	4b12      	ldr	r3, [pc, #72]	@ (800a928 <HAL_InitTick+0x54>)
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	4b12      	ldr	r3, [pc, #72]	@ (800a92c <HAL_InitTick+0x58>)
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a8ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 f967 	bl	800abc6 <HAL_SYSTICK_Config>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d001      	beq.n	800a902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e00e      	b.n	800a920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2b0f      	cmp	r3, #15
 800a906:	d80a      	bhi.n	800a91e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a908:	2200      	movs	r2, #0
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	f04f 30ff 	mov.w	r0, #4294967295
 800a910:	f000 f92f 	bl	800ab72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a914:	4a06      	ldr	r2, [pc, #24]	@ (800a930 <HAL_InitTick+0x5c>)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	e000      	b.n	800a920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
}
 800a920:	4618      	mov	r0, r3
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	200000d4 	.word	0x200000d4
 800a92c:	200000dc 	.word	0x200000dc
 800a930:	200000d8 	.word	0x200000d8

0800a934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a934:	b480      	push	{r7}
 800a936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a938:	4b06      	ldr	r3, [pc, #24]	@ (800a954 <HAL_IncTick+0x20>)
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	461a      	mov	r2, r3
 800a93e:	4b06      	ldr	r3, [pc, #24]	@ (800a958 <HAL_IncTick+0x24>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4413      	add	r3, r2
 800a944:	4a04      	ldr	r2, [pc, #16]	@ (800a958 <HAL_IncTick+0x24>)
 800a946:	6013      	str	r3, [r2, #0]
}
 800a948:	bf00      	nop
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	200000dc 	.word	0x200000dc
 800a958:	20000a3c 	.word	0x20000a3c

0800a95c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0
  return uwTick;
 800a960:	4b03      	ldr	r3, [pc, #12]	@ (800a970 <HAL_GetTick+0x14>)
 800a962:	681b      	ldr	r3, [r3, #0]
}
 800a964:	4618      	mov	r0, r3
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	20000a3c 	.word	0x20000a3c

0800a974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a97c:	f7ff ffee 	bl	800a95c <HAL_GetTick>
 800a980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98c:	d005      	beq.n	800a99a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a98e:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b8 <HAL_Delay+0x44>)
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	4413      	add	r3, r2
 800a998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a99a:	bf00      	nop
 800a99c:	f7ff ffde 	bl	800a95c <HAL_GetTick>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d8f7      	bhi.n	800a99c <HAL_Delay+0x28>
  {
  }
}
 800a9ac:	bf00      	nop
 800a9ae:	bf00      	nop
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	200000dc 	.word	0x200000dc

0800a9bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f003 0307 	and.w	r3, r3, #7
 800a9ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a9cc:	4b0c      	ldr	r3, [pc, #48]	@ (800aa00 <__NVIC_SetPriorityGrouping+0x44>)
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a9d8:	4013      	ands	r3, r2
 800a9da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a9e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a9e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a9ee:	4a04      	ldr	r2, [pc, #16]	@ (800aa00 <__NVIC_SetPriorityGrouping+0x44>)
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	60d3      	str	r3, [r2, #12]
}
 800a9f4:	bf00      	nop
 800a9f6:	3714      	adds	r7, #20
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr
 800aa00:	e000ed00 	.word	0xe000ed00

0800aa04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800aa04:	b480      	push	{r7}
 800aa06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800aa08:	4b04      	ldr	r3, [pc, #16]	@ (800aa1c <__NVIC_GetPriorityGrouping+0x18>)
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	0a1b      	lsrs	r3, r3, #8
 800aa0e:	f003 0307 	and.w	r3, r3, #7
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr
 800aa1c:	e000ed00 	.word	0xe000ed00

0800aa20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	4603      	mov	r3, r0
 800aa28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aa2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	db0b      	blt.n	800aa4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aa32:	79fb      	ldrb	r3, [r7, #7]
 800aa34:	f003 021f 	and.w	r2, r3, #31
 800aa38:	4907      	ldr	r1, [pc, #28]	@ (800aa58 <__NVIC_EnableIRQ+0x38>)
 800aa3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa3e:	095b      	lsrs	r3, r3, #5
 800aa40:	2001      	movs	r0, #1
 800aa42:	fa00 f202 	lsl.w	r2, r0, r2
 800aa46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800aa4a:	bf00      	nop
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	e000e100 	.word	0xe000e100

0800aa5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	4603      	mov	r3, r0
 800aa64:	6039      	str	r1, [r7, #0]
 800aa66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aa68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	db0a      	blt.n	800aa86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	b2da      	uxtb	r2, r3
 800aa74:	490c      	ldr	r1, [pc, #48]	@ (800aaa8 <__NVIC_SetPriority+0x4c>)
 800aa76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa7a:	0112      	lsls	r2, r2, #4
 800aa7c:	b2d2      	uxtb	r2, r2
 800aa7e:	440b      	add	r3, r1
 800aa80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800aa84:	e00a      	b.n	800aa9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	4908      	ldr	r1, [pc, #32]	@ (800aaac <__NVIC_SetPriority+0x50>)
 800aa8c:	79fb      	ldrb	r3, [r7, #7]
 800aa8e:	f003 030f 	and.w	r3, r3, #15
 800aa92:	3b04      	subs	r3, #4
 800aa94:	0112      	lsls	r2, r2, #4
 800aa96:	b2d2      	uxtb	r2, r2
 800aa98:	440b      	add	r3, r1
 800aa9a:	761a      	strb	r2, [r3, #24]
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	e000e100 	.word	0xe000e100
 800aaac:	e000ed00 	.word	0xe000ed00

0800aab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b089      	sub	sp, #36	@ 0x24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f003 0307 	and.w	r3, r3, #7
 800aac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	f1c3 0307 	rsb	r3, r3, #7
 800aaca:	2b04      	cmp	r3, #4
 800aacc:	bf28      	it	cs
 800aace:	2304      	movcs	r3, #4
 800aad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	3304      	adds	r3, #4
 800aad6:	2b06      	cmp	r3, #6
 800aad8:	d902      	bls.n	800aae0 <NVIC_EncodePriority+0x30>
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	3b03      	subs	r3, #3
 800aade:	e000      	b.n	800aae2 <NVIC_EncodePriority+0x32>
 800aae0:	2300      	movs	r3, #0
 800aae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aae4:	f04f 32ff 	mov.w	r2, #4294967295
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	fa02 f303 	lsl.w	r3, r2, r3
 800aaee:	43da      	mvns	r2, r3
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	401a      	ands	r2, r3
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800aaf8:	f04f 31ff 	mov.w	r1, #4294967295
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	fa01 f303 	lsl.w	r3, r1, r3
 800ab02:	43d9      	mvns	r1, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ab08:	4313      	orrs	r3, r2
         );
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3724      	adds	r7, #36	@ 0x24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
	...

0800ab18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	3b01      	subs	r3, #1
 800ab24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab28:	d301      	bcc.n	800ab2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e00f      	b.n	800ab4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ab2e:	4a0a      	ldr	r2, [pc, #40]	@ (800ab58 <SysTick_Config+0x40>)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	3b01      	subs	r3, #1
 800ab34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ab36:	210f      	movs	r1, #15
 800ab38:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3c:	f7ff ff8e 	bl	800aa5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ab40:	4b05      	ldr	r3, [pc, #20]	@ (800ab58 <SysTick_Config+0x40>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ab46:	4b04      	ldr	r3, [pc, #16]	@ (800ab58 <SysTick_Config+0x40>)
 800ab48:	2207      	movs	r2, #7
 800ab4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	e000e010 	.word	0xe000e010

0800ab5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7ff ff29 	bl	800a9bc <__NVIC_SetPriorityGrouping>
}
 800ab6a:	bf00      	nop
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b086      	sub	sp, #24
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	4603      	mov	r3, r0
 800ab7a:	60b9      	str	r1, [r7, #8]
 800ab7c:	607a      	str	r2, [r7, #4]
 800ab7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ab80:	2300      	movs	r3, #0
 800ab82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ab84:	f7ff ff3e 	bl	800aa04 <__NVIC_GetPriorityGrouping>
 800ab88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	68b9      	ldr	r1, [r7, #8]
 800ab8e:	6978      	ldr	r0, [r7, #20]
 800ab90:	f7ff ff8e 	bl	800aab0 <NVIC_EncodePriority>
 800ab94:	4602      	mov	r2, r0
 800ab96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab9a:	4611      	mov	r1, r2
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7ff ff5d 	bl	800aa5c <__NVIC_SetPriority>
}
 800aba2:	bf00      	nop
 800aba4:	3718      	adds	r7, #24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b082      	sub	sp, #8
 800abae:	af00      	add	r7, sp, #0
 800abb0:	4603      	mov	r3, r0
 800abb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800abb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abb8:	4618      	mov	r0, r3
 800abba:	f7ff ff31 	bl	800aa20 <__NVIC_EnableIRQ>
}
 800abbe:	bf00      	nop
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b082      	sub	sp, #8
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f7ff ffa2 	bl	800ab18 <SysTick_Config>
 800abd4:	4603      	mov	r3, r0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800abec:	f7ff feb6 	bl	800a95c <HAL_GetTick>
 800abf0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d008      	beq.n	800ac10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2280      	movs	r2, #128	@ 0x80
 800ac02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e052      	b.n	800acb6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f022 0216 	bic.w	r2, r2, #22
 800ac1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	695a      	ldr	r2, [r3, #20]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ac2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d103      	bne.n	800ac40 <HAL_DMA_Abort+0x62>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d007      	beq.n	800ac50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f022 0208 	bic.w	r2, r2, #8
 800ac4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f022 0201 	bic.w	r2, r2, #1
 800ac5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ac60:	e013      	b.n	800ac8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ac62:	f7ff fe7b 	bl	800a95c <HAL_GetTick>
 800ac66:	4602      	mov	r2, r0
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	1ad3      	subs	r3, r2, r3
 800ac6c:	2b05      	cmp	r3, #5
 800ac6e:	d90c      	bls.n	800ac8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2220      	movs	r2, #32
 800ac74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2203      	movs	r2, #3
 800ac7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800ac86:	2303      	movs	r3, #3
 800ac88:	e015      	b.n	800acb6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1e4      	bne.n	800ac62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac9c:	223f      	movs	r2, #63	@ 0x3f
 800ac9e:	409a      	lsls	r2, r3
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b083      	sub	sp, #12
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800accc:	b2db      	uxtb	r3, r3
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d004      	beq.n	800acdc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2280      	movs	r2, #128	@ 0x80
 800acd6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e00c      	b.n	800acf6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2205      	movs	r2, #5
 800ace0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f022 0201 	bic.w	r2, r2, #1
 800acf2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	370c      	adds	r7, #12
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
	...

0800ad04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b089      	sub	sp, #36	@ 0x24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ad12:	2300      	movs	r3, #0
 800ad14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ad16:	2300      	movs	r3, #0
 800ad18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	61fb      	str	r3, [r7, #28]
 800ad1e:	e16b      	b.n	800aff8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ad20:	2201      	movs	r2, #1
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	fa02 f303 	lsl.w	r3, r2, r3
 800ad28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	4013      	ands	r3, r2
 800ad32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ad34:	693a      	ldr	r2, [r7, #16]
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	f040 815a 	bne.w	800aff2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	f003 0303 	and.w	r3, r3, #3
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d005      	beq.n	800ad56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	d130      	bne.n	800adb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	005b      	lsls	r3, r3, #1
 800ad60:	2203      	movs	r2, #3
 800ad62:	fa02 f303 	lsl.w	r3, r2, r3
 800ad66:	43db      	mvns	r3, r3
 800ad68:	69ba      	ldr	r2, [r7, #24]
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	68da      	ldr	r2, [r3, #12]
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	005b      	lsls	r3, r3, #1
 800ad76:	fa02 f303 	lsl.w	r3, r2, r3
 800ad7a:	69ba      	ldr	r2, [r7, #24]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	fa02 f303 	lsl.w	r3, r2, r3
 800ad94:	43db      	mvns	r3, r3
 800ad96:	69ba      	ldr	r2, [r7, #24]
 800ad98:	4013      	ands	r3, r2
 800ad9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	091b      	lsrs	r3, r3, #4
 800ada2:	f003 0201 	and.w	r2, r3, #1
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	fa02 f303 	lsl.w	r3, r2, r3
 800adac:	69ba      	ldr	r2, [r7, #24]
 800adae:	4313      	orrs	r3, r2
 800adb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	69ba      	ldr	r2, [r7, #24]
 800adb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	f003 0303 	and.w	r3, r3, #3
 800adc0:	2b03      	cmp	r3, #3
 800adc2:	d017      	beq.n	800adf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	005b      	lsls	r3, r3, #1
 800adce:	2203      	movs	r2, #3
 800add0:	fa02 f303 	lsl.w	r3, r2, r3
 800add4:	43db      	mvns	r3, r3
 800add6:	69ba      	ldr	r2, [r7, #24]
 800add8:	4013      	ands	r3, r2
 800adda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	689a      	ldr	r2, [r3, #8]
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	005b      	lsls	r3, r3, #1
 800ade4:	fa02 f303 	lsl.w	r3, r2, r3
 800ade8:	69ba      	ldr	r2, [r7, #24]
 800adea:	4313      	orrs	r3, r2
 800adec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	69ba      	ldr	r2, [r7, #24]
 800adf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	f003 0303 	and.w	r3, r3, #3
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	d123      	bne.n	800ae48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	08da      	lsrs	r2, r3, #3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	3208      	adds	r2, #8
 800ae08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	f003 0307 	and.w	r3, r3, #7
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	220f      	movs	r2, #15
 800ae18:	fa02 f303 	lsl.w	r3, r2, r3
 800ae1c:	43db      	mvns	r3, r3
 800ae1e:	69ba      	ldr	r2, [r7, #24]
 800ae20:	4013      	ands	r3, r2
 800ae22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	691a      	ldr	r2, [r3, #16]
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	f003 0307 	and.w	r3, r3, #7
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	fa02 f303 	lsl.w	r3, r2, r3
 800ae34:	69ba      	ldr	r2, [r7, #24]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	08da      	lsrs	r2, r3, #3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	3208      	adds	r2, #8
 800ae42:	69b9      	ldr	r1, [r7, #24]
 800ae44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	005b      	lsls	r3, r3, #1
 800ae52:	2203      	movs	r2, #3
 800ae54:	fa02 f303 	lsl.w	r3, r2, r3
 800ae58:	43db      	mvns	r3, r3
 800ae5a:	69ba      	ldr	r2, [r7, #24]
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	f003 0203 	and.w	r2, r3, #3
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	005b      	lsls	r3, r3, #1
 800ae6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae70:	69ba      	ldr	r2, [r7, #24]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	69ba      	ldr	r2, [r7, #24]
 800ae7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f000 80b4 	beq.w	800aff2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60fb      	str	r3, [r7, #12]
 800ae8e:	4b60      	ldr	r3, [pc, #384]	@ (800b010 <HAL_GPIO_Init+0x30c>)
 800ae90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae92:	4a5f      	ldr	r2, [pc, #380]	@ (800b010 <HAL_GPIO_Init+0x30c>)
 800ae94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ae98:	6453      	str	r3, [r2, #68]	@ 0x44
 800ae9a:	4b5d      	ldr	r3, [pc, #372]	@ (800b010 <HAL_GPIO_Init+0x30c>)
 800ae9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aea2:	60fb      	str	r3, [r7, #12]
 800aea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aea6:	4a5b      	ldr	r2, [pc, #364]	@ (800b014 <HAL_GPIO_Init+0x310>)
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	089b      	lsrs	r3, r3, #2
 800aeac:	3302      	adds	r3, #2
 800aeae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	f003 0303 	and.w	r3, r3, #3
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	220f      	movs	r2, #15
 800aebe:	fa02 f303 	lsl.w	r3, r2, r3
 800aec2:	43db      	mvns	r3, r3
 800aec4:	69ba      	ldr	r2, [r7, #24]
 800aec6:	4013      	ands	r3, r2
 800aec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a52      	ldr	r2, [pc, #328]	@ (800b018 <HAL_GPIO_Init+0x314>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d02b      	beq.n	800af2a <HAL_GPIO_Init+0x226>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a51      	ldr	r2, [pc, #324]	@ (800b01c <HAL_GPIO_Init+0x318>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d025      	beq.n	800af26 <HAL_GPIO_Init+0x222>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4a50      	ldr	r2, [pc, #320]	@ (800b020 <HAL_GPIO_Init+0x31c>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d01f      	beq.n	800af22 <HAL_GPIO_Init+0x21e>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a4f      	ldr	r2, [pc, #316]	@ (800b024 <HAL_GPIO_Init+0x320>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d019      	beq.n	800af1e <HAL_GPIO_Init+0x21a>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a4e      	ldr	r2, [pc, #312]	@ (800b028 <HAL_GPIO_Init+0x324>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d013      	beq.n	800af1a <HAL_GPIO_Init+0x216>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a4d      	ldr	r2, [pc, #308]	@ (800b02c <HAL_GPIO_Init+0x328>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d00d      	beq.n	800af16 <HAL_GPIO_Init+0x212>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a4c      	ldr	r2, [pc, #304]	@ (800b030 <HAL_GPIO_Init+0x32c>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d007      	beq.n	800af12 <HAL_GPIO_Init+0x20e>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a4b      	ldr	r2, [pc, #300]	@ (800b034 <HAL_GPIO_Init+0x330>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d101      	bne.n	800af0e <HAL_GPIO_Init+0x20a>
 800af0a:	2307      	movs	r3, #7
 800af0c:	e00e      	b.n	800af2c <HAL_GPIO_Init+0x228>
 800af0e:	2308      	movs	r3, #8
 800af10:	e00c      	b.n	800af2c <HAL_GPIO_Init+0x228>
 800af12:	2306      	movs	r3, #6
 800af14:	e00a      	b.n	800af2c <HAL_GPIO_Init+0x228>
 800af16:	2305      	movs	r3, #5
 800af18:	e008      	b.n	800af2c <HAL_GPIO_Init+0x228>
 800af1a:	2304      	movs	r3, #4
 800af1c:	e006      	b.n	800af2c <HAL_GPIO_Init+0x228>
 800af1e:	2303      	movs	r3, #3
 800af20:	e004      	b.n	800af2c <HAL_GPIO_Init+0x228>
 800af22:	2302      	movs	r3, #2
 800af24:	e002      	b.n	800af2c <HAL_GPIO_Init+0x228>
 800af26:	2301      	movs	r3, #1
 800af28:	e000      	b.n	800af2c <HAL_GPIO_Init+0x228>
 800af2a:	2300      	movs	r3, #0
 800af2c:	69fa      	ldr	r2, [r7, #28]
 800af2e:	f002 0203 	and.w	r2, r2, #3
 800af32:	0092      	lsls	r2, r2, #2
 800af34:	4093      	lsls	r3, r2
 800af36:	69ba      	ldr	r2, [r7, #24]
 800af38:	4313      	orrs	r3, r2
 800af3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800af3c:	4935      	ldr	r1, [pc, #212]	@ (800b014 <HAL_GPIO_Init+0x310>)
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	089b      	lsrs	r3, r3, #2
 800af42:	3302      	adds	r3, #2
 800af44:	69ba      	ldr	r2, [r7, #24]
 800af46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800af4a:	4b3b      	ldr	r3, [pc, #236]	@ (800b038 <HAL_GPIO_Init+0x334>)
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	43db      	mvns	r3, r3
 800af54:	69ba      	ldr	r2, [r7, #24]
 800af56:	4013      	ands	r3, r2
 800af58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800af62:	2b00      	cmp	r3, #0
 800af64:	d003      	beq.n	800af6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800af66:	69ba      	ldr	r2, [r7, #24]
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800af6e:	4a32      	ldr	r2, [pc, #200]	@ (800b038 <HAL_GPIO_Init+0x334>)
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800af74:	4b30      	ldr	r3, [pc, #192]	@ (800b038 <HAL_GPIO_Init+0x334>)
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	43db      	mvns	r3, r3
 800af7e:	69ba      	ldr	r2, [r7, #24]
 800af80:	4013      	ands	r3, r2
 800af82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d003      	beq.n	800af98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800af90:	69ba      	ldr	r2, [r7, #24]
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	4313      	orrs	r3, r2
 800af96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800af98:	4a27      	ldr	r2, [pc, #156]	@ (800b038 <HAL_GPIO_Init+0x334>)
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800af9e:	4b26      	ldr	r3, [pc, #152]	@ (800b038 <HAL_GPIO_Init+0x334>)
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	43db      	mvns	r3, r3
 800afa8:	69ba      	ldr	r2, [r7, #24]
 800afaa:	4013      	ands	r3, r2
 800afac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d003      	beq.n	800afc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800afba:	69ba      	ldr	r2, [r7, #24]
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800afc2:	4a1d      	ldr	r2, [pc, #116]	@ (800b038 <HAL_GPIO_Init+0x334>)
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800afc8:	4b1b      	ldr	r3, [pc, #108]	@ (800b038 <HAL_GPIO_Init+0x334>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	43db      	mvns	r3, r3
 800afd2:	69ba      	ldr	r2, [r7, #24]
 800afd4:	4013      	ands	r3, r2
 800afd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d003      	beq.n	800afec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800afe4:	69ba      	ldr	r2, [r7, #24]
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	4313      	orrs	r3, r2
 800afea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800afec:	4a12      	ldr	r2, [pc, #72]	@ (800b038 <HAL_GPIO_Init+0x334>)
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	3301      	adds	r3, #1
 800aff6:	61fb      	str	r3, [r7, #28]
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	2b0f      	cmp	r3, #15
 800affc:	f67f ae90 	bls.w	800ad20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b000:	bf00      	nop
 800b002:	bf00      	nop
 800b004:	3724      	adds	r7, #36	@ 0x24
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	40023800 	.word	0x40023800
 800b014:	40013800 	.word	0x40013800
 800b018:	40020000 	.word	0x40020000
 800b01c:	40020400 	.word	0x40020400
 800b020:	40020800 	.word	0x40020800
 800b024:	40020c00 	.word	0x40020c00
 800b028:	40021000 	.word	0x40021000
 800b02c:	40021400 	.word	0x40021400
 800b030:	40021800 	.word	0x40021800
 800b034:	40021c00 	.word	0x40021c00
 800b038:	40013c00 	.word	0x40013c00

0800b03c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	460b      	mov	r3, r1
 800b046:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	691a      	ldr	r2, [r3, #16]
 800b04c:	887b      	ldrh	r3, [r7, #2]
 800b04e:	4013      	ands	r3, r2
 800b050:	2b00      	cmp	r3, #0
 800b052:	d002      	beq.n	800b05a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b054:	2301      	movs	r3, #1
 800b056:	73fb      	strb	r3, [r7, #15]
 800b058:	e001      	b.n	800b05e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b05a:	2300      	movs	r3, #0
 800b05c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	460b      	mov	r3, r1
 800b076:	807b      	strh	r3, [r7, #2]
 800b078:	4613      	mov	r3, r2
 800b07a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b07c:	787b      	ldrb	r3, [r7, #1]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d003      	beq.n	800b08a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b082:	887a      	ldrh	r2, [r7, #2]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b088:	e003      	b.n	800b092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b08a:	887b      	ldrh	r3, [r7, #2]
 800b08c:	041a      	lsls	r2, r3, #16
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	619a      	str	r2, [r3, #24]
}
 800b092:	bf00      	nop
 800b094:	370c      	adds	r7, #12
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
	...

0800b0a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b0aa:	4b08      	ldr	r3, [pc, #32]	@ (800b0cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b0ac:	695a      	ldr	r2, [r3, #20]
 800b0ae:	88fb      	ldrh	r3, [r7, #6]
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d006      	beq.n	800b0c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b0b6:	4a05      	ldr	r2, [pc, #20]	@ (800b0cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b0b8:	88fb      	ldrh	r3, [r7, #6]
 800b0ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b0bc:	88fb      	ldrh	r3, [r7, #6]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fe fe12 	bl	8009ce8 <HAL_GPIO_EXTI_Callback>
  }
}
 800b0c4:	bf00      	nop
 800b0c6:	3708      	adds	r7, #8
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	40013c00 	.word	0x40013c00

0800b0d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d101      	bne.n	800b0e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e12b      	b.n	800b33a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d106      	bne.n	800b0fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7fa f922 	bl	8005340 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2224      	movs	r2, #36	@ 0x24
 800b100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f022 0201 	bic.w	r2, r2, #1
 800b112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b134:	f001 fda0 	bl	800cc78 <HAL_RCC_GetPCLK1Freq>
 800b138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	4a81      	ldr	r2, [pc, #516]	@ (800b344 <HAL_I2C_Init+0x274>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d807      	bhi.n	800b154 <HAL_I2C_Init+0x84>
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	4a80      	ldr	r2, [pc, #512]	@ (800b348 <HAL_I2C_Init+0x278>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	bf94      	ite	ls
 800b14c:	2301      	movls	r3, #1
 800b14e:	2300      	movhi	r3, #0
 800b150:	b2db      	uxtb	r3, r3
 800b152:	e006      	b.n	800b162 <HAL_I2C_Init+0x92>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	4a7d      	ldr	r2, [pc, #500]	@ (800b34c <HAL_I2C_Init+0x27c>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	bf94      	ite	ls
 800b15c:	2301      	movls	r3, #1
 800b15e:	2300      	movhi	r3, #0
 800b160:	b2db      	uxtb	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e0e7      	b.n	800b33a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	4a78      	ldr	r2, [pc, #480]	@ (800b350 <HAL_I2C_Init+0x280>)
 800b16e:	fba2 2303 	umull	r2, r3, r2, r3
 800b172:	0c9b      	lsrs	r3, r3, #18
 800b174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	430a      	orrs	r2, r1
 800b188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	6a1b      	ldr	r3, [r3, #32]
 800b190:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	4a6a      	ldr	r2, [pc, #424]	@ (800b344 <HAL_I2C_Init+0x274>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d802      	bhi.n	800b1a4 <HAL_I2C_Init+0xd4>
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	e009      	b.n	800b1b8 <HAL_I2C_Init+0xe8>
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b1aa:	fb02 f303 	mul.w	r3, r2, r3
 800b1ae:	4a69      	ldr	r2, [pc, #420]	@ (800b354 <HAL_I2C_Init+0x284>)
 800b1b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b4:	099b      	lsrs	r3, r3, #6
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	6812      	ldr	r2, [r2, #0]
 800b1bc:	430b      	orrs	r3, r1
 800b1be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	69db      	ldr	r3, [r3, #28]
 800b1c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800b1ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	495c      	ldr	r1, [pc, #368]	@ (800b344 <HAL_I2C_Init+0x274>)
 800b1d4:	428b      	cmp	r3, r1
 800b1d6:	d819      	bhi.n	800b20c <HAL_I2C_Init+0x13c>
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	1e59      	subs	r1, r3, #1
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	005b      	lsls	r3, r3, #1
 800b1e2:	fbb1 f3f3 	udiv	r3, r1, r3
 800b1e6:	1c59      	adds	r1, r3, #1
 800b1e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b1ec:	400b      	ands	r3, r1
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00a      	beq.n	800b208 <HAL_I2C_Init+0x138>
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	1e59      	subs	r1, r3, #1
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	005b      	lsls	r3, r3, #1
 800b1fc:	fbb1 f3f3 	udiv	r3, r1, r3
 800b200:	3301      	adds	r3, #1
 800b202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b206:	e051      	b.n	800b2ac <HAL_I2C_Init+0x1dc>
 800b208:	2304      	movs	r3, #4
 800b20a:	e04f      	b.n	800b2ac <HAL_I2C_Init+0x1dc>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d111      	bne.n	800b238 <HAL_I2C_Init+0x168>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	1e58      	subs	r0, r3, #1
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6859      	ldr	r1, [r3, #4]
 800b21c:	460b      	mov	r3, r1
 800b21e:	005b      	lsls	r3, r3, #1
 800b220:	440b      	add	r3, r1
 800b222:	fbb0 f3f3 	udiv	r3, r0, r3
 800b226:	3301      	adds	r3, #1
 800b228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	bf0c      	ite	eq
 800b230:	2301      	moveq	r3, #1
 800b232:	2300      	movne	r3, #0
 800b234:	b2db      	uxtb	r3, r3
 800b236:	e012      	b.n	800b25e <HAL_I2C_Init+0x18e>
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	1e58      	subs	r0, r3, #1
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6859      	ldr	r1, [r3, #4]
 800b240:	460b      	mov	r3, r1
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	440b      	add	r3, r1
 800b246:	0099      	lsls	r1, r3, #2
 800b248:	440b      	add	r3, r1
 800b24a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b24e:	3301      	adds	r3, #1
 800b250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b254:	2b00      	cmp	r3, #0
 800b256:	bf0c      	ite	eq
 800b258:	2301      	moveq	r3, #1
 800b25a:	2300      	movne	r3, #0
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <HAL_I2C_Init+0x196>
 800b262:	2301      	movs	r3, #1
 800b264:	e022      	b.n	800b2ac <HAL_I2C_Init+0x1dc>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10e      	bne.n	800b28c <HAL_I2C_Init+0x1bc>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	1e58      	subs	r0, r3, #1
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6859      	ldr	r1, [r3, #4]
 800b276:	460b      	mov	r3, r1
 800b278:	005b      	lsls	r3, r3, #1
 800b27a:	440b      	add	r3, r1
 800b27c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b280:	3301      	adds	r3, #1
 800b282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b28a:	e00f      	b.n	800b2ac <HAL_I2C_Init+0x1dc>
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	1e58      	subs	r0, r3, #1
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6859      	ldr	r1, [r3, #4]
 800b294:	460b      	mov	r3, r1
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	440b      	add	r3, r1
 800b29a:	0099      	lsls	r1, r3, #2
 800b29c:	440b      	add	r3, r1
 800b29e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b2ac:	6879      	ldr	r1, [r7, #4]
 800b2ae:	6809      	ldr	r1, [r1, #0]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	69da      	ldr	r2, [r3, #28]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	430a      	orrs	r2, r1
 800b2ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800b2da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	6911      	ldr	r1, [r2, #16]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	68d2      	ldr	r2, [r2, #12]
 800b2e6:	4311      	orrs	r1, r2
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	6812      	ldr	r2, [r2, #0]
 800b2ec:	430b      	orrs	r3, r1
 800b2ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	695a      	ldr	r2, [r3, #20]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	431a      	orrs	r2, r3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	430a      	orrs	r2, r1
 800b30a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f042 0201 	orr.w	r2, r2, #1
 800b31a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2220      	movs	r2, #32
 800b326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	000186a0 	.word	0x000186a0
 800b348:	001e847f 	.word	0x001e847f
 800b34c:	003d08ff 	.word	0x003d08ff
 800b350:	431bde83 	.word	0x431bde83
 800b354:	10624dd3 	.word	0x10624dd3

0800b358 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b088      	sub	sp, #32
 800b35c:	af02      	add	r7, sp, #8
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	607a      	str	r2, [r7, #4]
 800b362:	461a      	mov	r2, r3
 800b364:	460b      	mov	r3, r1
 800b366:	817b      	strh	r3, [r7, #10]
 800b368:	4613      	mov	r3, r2
 800b36a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b36c:	f7ff faf6 	bl	800a95c <HAL_GetTick>
 800b370:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	2b20      	cmp	r3, #32
 800b37c:	f040 80e0 	bne.w	800b540 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	9300      	str	r3, [sp, #0]
 800b384:	2319      	movs	r3, #25
 800b386:	2201      	movs	r2, #1
 800b388:	4970      	ldr	r1, [pc, #448]	@ (800b54c <HAL_I2C_Master_Transmit+0x1f4>)
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f000 fe0e 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d001      	beq.n	800b39a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b396:	2302      	movs	r3, #2
 800b398:	e0d3      	b.n	800b542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d101      	bne.n	800b3a8 <HAL_I2C_Master_Transmit+0x50>
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	e0cc      	b.n	800b542 <HAL_I2C_Master_Transmit+0x1ea>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 0301 	and.w	r3, r3, #1
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d007      	beq.n	800b3ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f042 0201 	orr.w	r2, r2, #1
 800b3cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b3dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2221      	movs	r2, #33	@ 0x21
 800b3e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2210      	movs	r2, #16
 800b3ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	893a      	ldrh	r2, [r7, #8]
 800b3fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b404:	b29a      	uxth	r2, r3
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	4a50      	ldr	r2, [pc, #320]	@ (800b550 <HAL_I2C_Master_Transmit+0x1f8>)
 800b40e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b410:	8979      	ldrh	r1, [r7, #10]
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	6a3a      	ldr	r2, [r7, #32]
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f000 fbc8 	bl	800bbac <I2C_MasterRequestWrite>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b422:	2301      	movs	r3, #1
 800b424:	e08d      	b.n	800b542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b426:	2300      	movs	r3, #0
 800b428:	613b      	str	r3, [r7, #16]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	695b      	ldr	r3, [r3, #20]
 800b430:	613b      	str	r3, [r7, #16]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	699b      	ldr	r3, [r3, #24]
 800b438:	613b      	str	r3, [r7, #16]
 800b43a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b43c:	e066      	b.n	800b50c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b43e:	697a      	ldr	r2, [r7, #20]
 800b440:	6a39      	ldr	r1, [r7, #32]
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f000 fecc 	bl	800c1e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00d      	beq.n	800b46a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b452:	2b04      	cmp	r3, #4
 800b454:	d107      	bne.n	800b466 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e06b      	b.n	800b542 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b46e:	781a      	ldrb	r2, [r3, #0]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b47a:	1c5a      	adds	r2, r3, #1
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b484:	b29b      	uxth	r3, r3
 800b486:	3b01      	subs	r3, #1
 800b488:	b29a      	uxth	r2, r3
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b492:	3b01      	subs	r3, #1
 800b494:	b29a      	uxth	r2, r3
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	695b      	ldr	r3, [r3, #20]
 800b4a0:	f003 0304 	and.w	r3, r3, #4
 800b4a4:	2b04      	cmp	r3, #4
 800b4a6:	d11b      	bne.n	800b4e0 <HAL_I2C_Master_Transmit+0x188>
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d017      	beq.n	800b4e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4b4:	781a      	ldrb	r2, [r3, #0]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4c0:	1c5a      	adds	r2, r3, #1
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4e0:	697a      	ldr	r2, [r7, #20]
 800b4e2:	6a39      	ldr	r1, [r7, #32]
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 fec3 	bl	800c270 <I2C_WaitOnBTFFlagUntilTimeout>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00d      	beq.n	800b50c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4f4:	2b04      	cmp	r3, #4
 800b4f6:	d107      	bne.n	800b508 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b506:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b508:	2301      	movs	r3, #1
 800b50a:	e01a      	b.n	800b542 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b510:	2b00      	cmp	r3, #0
 800b512:	d194      	bne.n	800b43e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2220      	movs	r2, #32
 800b528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2200      	movs	r2, #0
 800b530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2200      	movs	r2, #0
 800b538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b53c:	2300      	movs	r3, #0
 800b53e:	e000      	b.n	800b542 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b540:	2302      	movs	r3, #2
  }
}
 800b542:	4618      	mov	r0, r3
 800b544:	3718      	adds	r7, #24
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	00100002 	.word	0x00100002
 800b550:	ffff0000 	.word	0xffff0000

0800b554 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b088      	sub	sp, #32
 800b558:	af02      	add	r7, sp, #8
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	4608      	mov	r0, r1
 800b55e:	4611      	mov	r1, r2
 800b560:	461a      	mov	r2, r3
 800b562:	4603      	mov	r3, r0
 800b564:	817b      	strh	r3, [r7, #10]
 800b566:	460b      	mov	r3, r1
 800b568:	813b      	strh	r3, [r7, #8]
 800b56a:	4613      	mov	r3, r2
 800b56c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b56e:	f7ff f9f5 	bl	800a95c <HAL_GetTick>
 800b572:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	2b20      	cmp	r3, #32
 800b57e:	f040 80d9 	bne.w	800b734 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	9300      	str	r3, [sp, #0]
 800b586:	2319      	movs	r3, #25
 800b588:	2201      	movs	r2, #1
 800b58a:	496d      	ldr	r1, [pc, #436]	@ (800b740 <HAL_I2C_Mem_Write+0x1ec>)
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f000 fd0d 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d001      	beq.n	800b59c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b598:	2302      	movs	r3, #2
 800b59a:	e0cc      	b.n	800b736 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d101      	bne.n	800b5aa <HAL_I2C_Mem_Write+0x56>
 800b5a6:	2302      	movs	r3, #2
 800b5a8:	e0c5      	b.n	800b736 <HAL_I2C_Mem_Write+0x1e2>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 0301 	and.w	r3, r3, #1
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d007      	beq.n	800b5d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f042 0201 	orr.w	r2, r2, #1
 800b5ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b5de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2221      	movs	r2, #33	@ 0x21
 800b5e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2240      	movs	r2, #64	@ 0x40
 800b5ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6a3a      	ldr	r2, [r7, #32]
 800b5fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b600:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b606:	b29a      	uxth	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	4a4d      	ldr	r2, [pc, #308]	@ (800b744 <HAL_I2C_Mem_Write+0x1f0>)
 800b610:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b612:	88f8      	ldrh	r0, [r7, #6]
 800b614:	893a      	ldrh	r2, [r7, #8]
 800b616:	8979      	ldrh	r1, [r7, #10]
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	9301      	str	r3, [sp, #4]
 800b61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	4603      	mov	r3, r0
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	f000 fb44 	bl	800bcb0 <I2C_RequestMemoryWrite>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d052      	beq.n	800b6d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	e081      	b.n	800b736 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b632:	697a      	ldr	r2, [r7, #20]
 800b634:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 fdd2 	bl	800c1e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00d      	beq.n	800b65e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b646:	2b04      	cmp	r3, #4
 800b648:	d107      	bne.n	800b65a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b658:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	e06b      	b.n	800b736 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b662:	781a      	ldrb	r2, [r3, #0]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b66e:	1c5a      	adds	r2, r3, #1
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b678:	3b01      	subs	r3, #1
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b684:	b29b      	uxth	r3, r3
 800b686:	3b01      	subs	r3, #1
 800b688:	b29a      	uxth	r2, r3
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	695b      	ldr	r3, [r3, #20]
 800b694:	f003 0304 	and.w	r3, r3, #4
 800b698:	2b04      	cmp	r3, #4
 800b69a:	d11b      	bne.n	800b6d4 <HAL_I2C_Mem_Write+0x180>
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d017      	beq.n	800b6d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6a8:	781a      	ldrb	r2, [r3, #0]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6b4:	1c5a      	adds	r2, r3, #1
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	b29a      	uxth	r2, r3
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1aa      	bne.n	800b632 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6dc:	697a      	ldr	r2, [r7, #20]
 800b6de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f000 fdc5 	bl	800c270 <I2C_WaitOnBTFFlagUntilTimeout>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00d      	beq.n	800b708 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6f0:	2b04      	cmp	r3, #4
 800b6f2:	d107      	bne.n	800b704 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b702:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	e016      	b.n	800b736 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2220      	movs	r2, #32
 800b71c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	e000      	b.n	800b736 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b734:	2302      	movs	r3, #2
  }
}
 800b736:	4618      	mov	r0, r3
 800b738:	3718      	adds	r7, #24
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	00100002 	.word	0x00100002
 800b744:	ffff0000 	.word	0xffff0000

0800b748 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b08c      	sub	sp, #48	@ 0x30
 800b74c:	af02      	add	r7, sp, #8
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	4608      	mov	r0, r1
 800b752:	4611      	mov	r1, r2
 800b754:	461a      	mov	r2, r3
 800b756:	4603      	mov	r3, r0
 800b758:	817b      	strh	r3, [r7, #10]
 800b75a:	460b      	mov	r3, r1
 800b75c:	813b      	strh	r3, [r7, #8]
 800b75e:	4613      	mov	r3, r2
 800b760:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b762:	f7ff f8fb 	bl	800a95c <HAL_GetTick>
 800b766:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	2b20      	cmp	r3, #32
 800b772:	f040 8214 	bne.w	800bb9e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	2319      	movs	r3, #25
 800b77c:	2201      	movs	r2, #1
 800b77e:	497b      	ldr	r1, [pc, #492]	@ (800b96c <HAL_I2C_Mem_Read+0x224>)
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f000 fc13 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d001      	beq.n	800b790 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b78c:	2302      	movs	r3, #2
 800b78e:	e207      	b.n	800bba0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b796:	2b01      	cmp	r3, #1
 800b798:	d101      	bne.n	800b79e <HAL_I2C_Mem_Read+0x56>
 800b79a:	2302      	movs	r3, #2
 800b79c:	e200      	b.n	800bba0 <HAL_I2C_Mem_Read+0x458>
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 0301 	and.w	r3, r3, #1
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d007      	beq.n	800b7c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f042 0201 	orr.w	r2, r2, #1
 800b7c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b7d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2222      	movs	r2, #34	@ 0x22
 800b7d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2240      	movs	r2, #64	@ 0x40
 800b7e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800b7f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	4a5b      	ldr	r2, [pc, #364]	@ (800b970 <HAL_I2C_Mem_Read+0x228>)
 800b804:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b806:	88f8      	ldrh	r0, [r7, #6]
 800b808:	893a      	ldrh	r2, [r7, #8]
 800b80a:	8979      	ldrh	r1, [r7, #10]
 800b80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80e:	9301      	str	r3, [sp, #4]
 800b810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	4603      	mov	r3, r0
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f000 fae0 	bl	800bddc <I2C_RequestMemoryRead>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d001      	beq.n	800b826 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	e1bc      	b.n	800bba0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d113      	bne.n	800b856 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b82e:	2300      	movs	r3, #0
 800b830:	623b      	str	r3, [r7, #32]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	695b      	ldr	r3, [r3, #20]
 800b838:	623b      	str	r3, [r7, #32]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	699b      	ldr	r3, [r3, #24]
 800b840:	623b      	str	r3, [r7, #32]
 800b842:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	e190      	b.n	800bb78 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d11b      	bne.n	800b896 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b86c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b86e:	2300      	movs	r3, #0
 800b870:	61fb      	str	r3, [r7, #28]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	695b      	ldr	r3, [r3, #20]
 800b878:	61fb      	str	r3, [r7, #28]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	699b      	ldr	r3, [r3, #24]
 800b880:	61fb      	str	r3, [r7, #28]
 800b882:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b892:	601a      	str	r2, [r3, #0]
 800b894:	e170      	b.n	800bb78 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b89a:	2b02      	cmp	r3, #2
 800b89c:	d11b      	bne.n	800b8d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b8ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b8bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8be:	2300      	movs	r3, #0
 800b8c0:	61bb      	str	r3, [r7, #24]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	695b      	ldr	r3, [r3, #20]
 800b8c8:	61bb      	str	r3, [r7, #24]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	699b      	ldr	r3, [r3, #24]
 800b8d0:	61bb      	str	r3, [r7, #24]
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	e150      	b.n	800bb78 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	617b      	str	r3, [r7, #20]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	695b      	ldr	r3, [r3, #20]
 800b8e0:	617b      	str	r3, [r7, #20]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	699b      	ldr	r3, [r3, #24]
 800b8e8:	617b      	str	r3, [r7, #20]
 800b8ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b8ec:	e144      	b.n	800bb78 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	f200 80f1 	bhi.w	800bada <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d123      	bne.n	800b948 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b902:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f000 fcfb 	bl	800c300 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d001      	beq.n	800b914 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	e145      	b.n	800bba0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	691a      	ldr	r2, [r3, #16]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b91e:	b2d2      	uxtb	r2, r2
 800b920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b926:	1c5a      	adds	r2, r3, #1
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b930:	3b01      	subs	r3, #1
 800b932:	b29a      	uxth	r2, r3
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	3b01      	subs	r3, #1
 800b940:	b29a      	uxth	r2, r3
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b946:	e117      	b.n	800bb78 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d14e      	bne.n	800b9ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b956:	2200      	movs	r2, #0
 800b958:	4906      	ldr	r1, [pc, #24]	@ (800b974 <HAL_I2C_Mem_Read+0x22c>)
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f000 fb26 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d008      	beq.n	800b978 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	e11a      	b.n	800bba0 <HAL_I2C_Mem_Read+0x458>
 800b96a:	bf00      	nop
 800b96c:	00100002 	.word	0x00100002
 800b970:	ffff0000 	.word	0xffff0000
 800b974:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	691a      	ldr	r2, [r3, #16]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b992:	b2d2      	uxtb	r2, r2
 800b994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b99a:	1c5a      	adds	r2, r3, #1
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	b29a      	uxth	r2, r3
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	691a      	ldr	r2, [r3, #16]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9c4:	b2d2      	uxtb	r2, r2
 800b9c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9cc:	1c5a      	adds	r2, r3, #1
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b9ec:	e0c4      	b.n	800bb78 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	496c      	ldr	r1, [pc, #432]	@ (800bba8 <HAL_I2C_Mem_Read+0x460>)
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f000 fad7 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	e0cb      	b.n	800bba0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	691a      	ldr	r2, [r3, #16]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba22:	b2d2      	uxtb	r2, r2
 800ba24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba2a:	1c5a      	adds	r2, r3, #1
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba34:	3b01      	subs	r3, #1
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	3b01      	subs	r3, #1
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4c:	9300      	str	r3, [sp, #0]
 800ba4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba50:	2200      	movs	r2, #0
 800ba52:	4955      	ldr	r1, [pc, #340]	@ (800bba8 <HAL_I2C_Mem_Read+0x460>)
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f000 faa9 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	e09d      	b.n	800bba0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	691a      	ldr	r2, [r3, #16]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba7e:	b2d2      	uxtb	r2, r2
 800ba80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba86:	1c5a      	adds	r2, r3, #1
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba90:	3b01      	subs	r3, #1
 800ba92:	b29a      	uxth	r2, r3
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	691a      	ldr	r2, [r3, #16]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab0:	b2d2      	uxtb	r2, r2
 800bab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bac2:	3b01      	subs	r3, #1
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bace:	b29b      	uxth	r3, r3
 800bad0:	3b01      	subs	r3, #1
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bad8:	e04e      	b.n	800bb78 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800badc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f000 fc0e 	bl	800c300 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800baea:	2301      	movs	r3, #1
 800baec:	e058      	b.n	800bba0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	691a      	ldr	r2, [r3, #16]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baf8:	b2d2      	uxtb	r2, r2
 800bafa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb00:	1c5a      	adds	r2, r3, #1
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	695b      	ldr	r3, [r3, #20]
 800bb26:	f003 0304 	and.w	r3, r3, #4
 800bb2a:	2b04      	cmp	r3, #4
 800bb2c:	d124      	bne.n	800bb78 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb32:	2b03      	cmp	r3, #3
 800bb34:	d107      	bne.n	800bb46 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb44:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	691a      	ldr	r2, [r3, #16]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb50:	b2d2      	uxtb	r2, r2
 800bb52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb58:	1c5a      	adds	r2, r3, #1
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb62:	3b01      	subs	r3, #1
 800bb64:	b29a      	uxth	r2, r3
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	3b01      	subs	r3, #1
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f47f aeb6 	bne.w	800b8ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2220      	movs	r2, #32
 800bb86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	e000      	b.n	800bba0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800bb9e:	2302      	movs	r3, #2
  }
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3728      	adds	r7, #40	@ 0x28
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	00010004 	.word	0x00010004

0800bbac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b088      	sub	sp, #32
 800bbb0:	af02      	add	r7, sp, #8
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	607a      	str	r2, [r7, #4]
 800bbb6:	603b      	str	r3, [r7, #0]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2b08      	cmp	r3, #8
 800bbc6:	d006      	beq.n	800bbd6 <I2C_MasterRequestWrite+0x2a>
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d003      	beq.n	800bbd6 <I2C_MasterRequestWrite+0x2a>
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bbd4:	d108      	bne.n	800bbe8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	e00b      	b.n	800bc00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbec:	2b12      	cmp	r3, #18
 800bbee:	d107      	bne.n	800bc00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bbfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f000 f9cd 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00d      	beq.n	800bc34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc26:	d103      	bne.n	800bc30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bc2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bc30:	2303      	movs	r3, #3
 800bc32:	e035      	b.n	800bca0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bc3c:	d108      	bne.n	800bc50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bc3e:	897b      	ldrh	r3, [r7, #10]
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	461a      	mov	r2, r3
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800bc4c:	611a      	str	r2, [r3, #16]
 800bc4e:	e01b      	b.n	800bc88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bc50:	897b      	ldrh	r3, [r7, #10]
 800bc52:	11db      	asrs	r3, r3, #7
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	f003 0306 	and.w	r3, r3, #6
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	f063 030f 	orn	r3, r3, #15
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	490e      	ldr	r1, [pc, #56]	@ (800bca8 <I2C_MasterRequestWrite+0xfc>)
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f000 fa16 	bl	800c0a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d001      	beq.n	800bc7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e010      	b.n	800bca0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bc7e:	897b      	ldrh	r3, [r7, #10]
 800bc80:	b2da      	uxtb	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	4907      	ldr	r1, [pc, #28]	@ (800bcac <I2C_MasterRequestWrite+0x100>)
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f000 fa06 	bl	800c0a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e000      	b.n	800bca0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3718      	adds	r7, #24
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	00010008 	.word	0x00010008
 800bcac:	00010002 	.word	0x00010002

0800bcb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b088      	sub	sp, #32
 800bcb4:	af02      	add	r7, sp, #8
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	4608      	mov	r0, r1
 800bcba:	4611      	mov	r1, r2
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	817b      	strh	r3, [r7, #10]
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	813b      	strh	r3, [r7, #8]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bcd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bcda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	6a3b      	ldr	r3, [r7, #32]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f000 f960 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d00d      	beq.n	800bd0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd00:	d103      	bne.n	800bd0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bd0a:	2303      	movs	r3, #3
 800bd0c:	e05f      	b.n	800bdce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bd0e:	897b      	ldrh	r3, [r7, #10]
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	461a      	mov	r2, r3
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800bd1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd20:	6a3a      	ldr	r2, [r7, #32]
 800bd22:	492d      	ldr	r1, [pc, #180]	@ (800bdd8 <I2C_RequestMemoryWrite+0x128>)
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f000 f9bb 	bl	800c0a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d001      	beq.n	800bd34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e04c      	b.n	800bdce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd34:	2300      	movs	r3, #0
 800bd36:	617b      	str	r3, [r7, #20]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	695b      	ldr	r3, [r3, #20]
 800bd3e:	617b      	str	r3, [r7, #20]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	699b      	ldr	r3, [r3, #24]
 800bd46:	617b      	str	r3, [r7, #20]
 800bd48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd4c:	6a39      	ldr	r1, [r7, #32]
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f000 fa46 	bl	800c1e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00d      	beq.n	800bd76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd5e:	2b04      	cmp	r3, #4
 800bd60:	d107      	bne.n	800bd72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bd72:	2301      	movs	r3, #1
 800bd74:	e02b      	b.n	800bdce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd76:	88fb      	ldrh	r3, [r7, #6]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d105      	bne.n	800bd88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bd7c:	893b      	ldrh	r3, [r7, #8]
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	611a      	str	r2, [r3, #16]
 800bd86:	e021      	b.n	800bdcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bd88:	893b      	ldrh	r3, [r7, #8]
 800bd8a:	0a1b      	lsrs	r3, r3, #8
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	b2da      	uxtb	r2, r3
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd98:	6a39      	ldr	r1, [r7, #32]
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f000 fa20 	bl	800c1e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00d      	beq.n	800bdc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdaa:	2b04      	cmp	r3, #4
 800bdac:	d107      	bne.n	800bdbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bdbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e005      	b.n	800bdce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bdc2:	893b      	ldrh	r3, [r7, #8]
 800bdc4:	b2da      	uxtb	r2, r3
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3718      	adds	r7, #24
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	00010002 	.word	0x00010002

0800bddc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b088      	sub	sp, #32
 800bde0:	af02      	add	r7, sp, #8
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	4608      	mov	r0, r1
 800bde6:	4611      	mov	r1, r2
 800bde8:	461a      	mov	r2, r3
 800bdea:	4603      	mov	r3, r0
 800bdec:	817b      	strh	r3, [r7, #10]
 800bdee:	460b      	mov	r3, r1
 800bdf0:	813b      	strh	r3, [r7, #8]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800be04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800be14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800be16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	6a3b      	ldr	r3, [r7, #32]
 800be1c:	2200      	movs	r2, #0
 800be1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800be22:	68f8      	ldr	r0, [r7, #12]
 800be24:	f000 f8c2 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00d      	beq.n	800be4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be3c:	d103      	bne.n	800be46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800be46:	2303      	movs	r3, #3
 800be48:	e0aa      	b.n	800bfa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800be4a:	897b      	ldrh	r3, [r7, #10]
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	461a      	mov	r2, r3
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800be58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800be5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be5c:	6a3a      	ldr	r2, [r7, #32]
 800be5e:	4952      	ldr	r1, [pc, #328]	@ (800bfa8 <I2C_RequestMemoryRead+0x1cc>)
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f000 f91d 	bl	800c0a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d001      	beq.n	800be70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800be6c:	2301      	movs	r3, #1
 800be6e:	e097      	b.n	800bfa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be70:	2300      	movs	r3, #0
 800be72:	617b      	str	r3, [r7, #20]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	617b      	str	r3, [r7, #20]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	699b      	ldr	r3, [r3, #24]
 800be82:	617b      	str	r3, [r7, #20]
 800be84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be88:	6a39      	ldr	r1, [r7, #32]
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f000 f9a8 	bl	800c1e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800be90:	4603      	mov	r3, r0
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00d      	beq.n	800beb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be9a:	2b04      	cmp	r3, #4
 800be9c:	d107      	bne.n	800beae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800beac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	e076      	b.n	800bfa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800beb2:	88fb      	ldrh	r3, [r7, #6]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d105      	bne.n	800bec4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800beb8:	893b      	ldrh	r3, [r7, #8]
 800beba:	b2da      	uxtb	r2, r3
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	611a      	str	r2, [r3, #16]
 800bec2:	e021      	b.n	800bf08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bec4:	893b      	ldrh	r3, [r7, #8]
 800bec6:	0a1b      	lsrs	r3, r3, #8
 800bec8:	b29b      	uxth	r3, r3
 800beca:	b2da      	uxtb	r2, r3
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bed4:	6a39      	ldr	r1, [r7, #32]
 800bed6:	68f8      	ldr	r0, [r7, #12]
 800bed8:	f000 f982 	bl	800c1e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00d      	beq.n	800befe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bee6:	2b04      	cmp	r3, #4
 800bee8:	d107      	bne.n	800befa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bef8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	e050      	b.n	800bfa0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800befe:	893b      	ldrh	r3, [r7, #8]
 800bf00:	b2da      	uxtb	r2, r3
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf0a:	6a39      	ldr	r1, [r7, #32]
 800bf0c:	68f8      	ldr	r0, [r7, #12]
 800bf0e:	f000 f967 	bl	800c1e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00d      	beq.n	800bf34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf1c:	2b04      	cmp	r3, #4
 800bf1e:	d107      	bne.n	800bf30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e035      	b.n	800bfa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bf44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	6a3b      	ldr	r3, [r7, #32]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f000 f82b 	bl	800bfac <I2C_WaitOnFlagUntilTimeout>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00d      	beq.n	800bf78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf6a:	d103      	bne.n	800bf74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bf74:	2303      	movs	r3, #3
 800bf76:	e013      	b.n	800bfa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bf78:	897b      	ldrh	r3, [r7, #10]
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	f043 0301 	orr.w	r3, r3, #1
 800bf80:	b2da      	uxtb	r2, r3
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf8a:	6a3a      	ldr	r2, [r7, #32]
 800bf8c:	4906      	ldr	r1, [pc, #24]	@ (800bfa8 <I2C_RequestMemoryRead+0x1cc>)
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	f000 f886 	bl	800c0a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d001      	beq.n	800bf9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e000      	b.n	800bfa0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3718      	adds	r7, #24
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	00010002 	.word	0x00010002

0800bfac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	603b      	str	r3, [r7, #0]
 800bfb8:	4613      	mov	r3, r2
 800bfba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfbc:	e048      	b.n	800c050 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc4:	d044      	beq.n	800c050 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfc6:	f7fe fcc9 	bl	800a95c <HAL_GetTick>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	683a      	ldr	r2, [r7, #0]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d302      	bcc.n	800bfdc <I2C_WaitOnFlagUntilTimeout+0x30>
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d139      	bne.n	800c050 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	0c1b      	lsrs	r3, r3, #16
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d10d      	bne.n	800c002 <I2C_WaitOnFlagUntilTimeout+0x56>
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	695b      	ldr	r3, [r3, #20]
 800bfec:	43da      	mvns	r2, r3
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	4013      	ands	r3, r2
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	bf0c      	ite	eq
 800bff8:	2301      	moveq	r3, #1
 800bffa:	2300      	movne	r3, #0
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	461a      	mov	r2, r3
 800c000:	e00c      	b.n	800c01c <I2C_WaitOnFlagUntilTimeout+0x70>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	699b      	ldr	r3, [r3, #24]
 800c008:	43da      	mvns	r2, r3
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	4013      	ands	r3, r2
 800c00e:	b29b      	uxth	r3, r3
 800c010:	2b00      	cmp	r3, #0
 800c012:	bf0c      	ite	eq
 800c014:	2301      	moveq	r3, #1
 800c016:	2300      	movne	r3, #0
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	461a      	mov	r2, r3
 800c01c:	79fb      	ldrb	r3, [r7, #7]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d116      	bne.n	800c050 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2200      	movs	r2, #0
 800c026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2220      	movs	r2, #32
 800c02c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c03c:	f043 0220 	orr.w	r2, r3, #32
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	e023      	b.n	800c098 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	0c1b      	lsrs	r3, r3, #16
 800c054:	b2db      	uxtb	r3, r3
 800c056:	2b01      	cmp	r3, #1
 800c058:	d10d      	bne.n	800c076 <I2C_WaitOnFlagUntilTimeout+0xca>
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	695b      	ldr	r3, [r3, #20]
 800c060:	43da      	mvns	r2, r3
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	4013      	ands	r3, r2
 800c066:	b29b      	uxth	r3, r3
 800c068:	2b00      	cmp	r3, #0
 800c06a:	bf0c      	ite	eq
 800c06c:	2301      	moveq	r3, #1
 800c06e:	2300      	movne	r3, #0
 800c070:	b2db      	uxtb	r3, r3
 800c072:	461a      	mov	r2, r3
 800c074:	e00c      	b.n	800c090 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	699b      	ldr	r3, [r3, #24]
 800c07c:	43da      	mvns	r2, r3
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	4013      	ands	r3, r2
 800c082:	b29b      	uxth	r3, r3
 800c084:	2b00      	cmp	r3, #0
 800c086:	bf0c      	ite	eq
 800c088:	2301      	moveq	r3, #1
 800c08a:	2300      	movne	r3, #0
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	461a      	mov	r2, r3
 800c090:	79fb      	ldrb	r3, [r7, #7]
 800c092:	429a      	cmp	r2, r3
 800c094:	d093      	beq.n	800bfbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	607a      	str	r2, [r7, #4]
 800c0ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c0ae:	e071      	b.n	800c194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	695b      	ldr	r3, [r3, #20]
 800c0b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0be:	d123      	bne.n	800c108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c0ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c0d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2220      	movs	r2, #32
 800c0e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0f4:	f043 0204 	orr.w	r2, r3, #4
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	e067      	b.n	800c1d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10e:	d041      	beq.n	800c194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c110:	f7fe fc24 	bl	800a95c <HAL_GetTick>
 800c114:	4602      	mov	r2, r0
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d302      	bcc.n	800c126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d136      	bne.n	800c194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	0c1b      	lsrs	r3, r3, #16
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d10c      	bne.n	800c14a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	43da      	mvns	r2, r3
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	4013      	ands	r3, r2
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	2b00      	cmp	r3, #0
 800c140:	bf14      	ite	ne
 800c142:	2301      	movne	r3, #1
 800c144:	2300      	moveq	r3, #0
 800c146:	b2db      	uxtb	r3, r3
 800c148:	e00b      	b.n	800c162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	699b      	ldr	r3, [r3, #24]
 800c150:	43da      	mvns	r2, r3
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	4013      	ands	r3, r2
 800c156:	b29b      	uxth	r3, r3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	bf14      	ite	ne
 800c15c:	2301      	movne	r3, #1
 800c15e:	2300      	moveq	r3, #0
 800c160:	b2db      	uxtb	r3, r3
 800c162:	2b00      	cmp	r3, #0
 800c164:	d016      	beq.n	800c194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2200      	movs	r2, #0
 800c16a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2220      	movs	r2, #32
 800c170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c180:	f043 0220 	orr.w	r2, r3, #32
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2200      	movs	r2, #0
 800c18c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c190:	2301      	movs	r3, #1
 800c192:	e021      	b.n	800c1d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	0c1b      	lsrs	r3, r3, #16
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d10c      	bne.n	800c1b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	43da      	mvns	r2, r3
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	4013      	ands	r3, r2
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	bf14      	ite	ne
 800c1b0:	2301      	movne	r3, #1
 800c1b2:	2300      	moveq	r3, #0
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	e00b      	b.n	800c1d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	699b      	ldr	r3, [r3, #24]
 800c1be:	43da      	mvns	r2, r3
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	bf14      	ite	ne
 800c1ca:	2301      	movne	r3, #1
 800c1cc:	2300      	moveq	r3, #0
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f47f af6d 	bne.w	800c0b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c1ec:	e034      	b.n	800c258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f000 f8e3 	bl	800c3ba <I2C_IsAcknowledgeFailed>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d001      	beq.n	800c1fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e034      	b.n	800c268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c204:	d028      	beq.n	800c258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c206:	f7fe fba9 	bl	800a95c <HAL_GetTick>
 800c20a:	4602      	mov	r2, r0
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	1ad3      	subs	r3, r2, r3
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	429a      	cmp	r2, r3
 800c214:	d302      	bcc.n	800c21c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d11d      	bne.n	800c258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	695b      	ldr	r3, [r3, #20]
 800c222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c226:	2b80      	cmp	r3, #128	@ 0x80
 800c228:	d016      	beq.n	800c258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2220      	movs	r2, #32
 800c234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c244:	f043 0220 	orr.w	r2, r3, #32
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2200      	movs	r2, #0
 800c250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	e007      	b.n	800c268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	695b      	ldr	r3, [r3, #20]
 800c25e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c262:	2b80      	cmp	r3, #128	@ 0x80
 800c264:	d1c3      	bne.n	800c1ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c266:	2300      	movs	r3, #0
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c27c:	e034      	b.n	800c2e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f000 f89b 	bl	800c3ba <I2C_IsAcknowledgeFailed>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d001      	beq.n	800c28e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c28a:	2301      	movs	r3, #1
 800c28c:	e034      	b.n	800c2f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c294:	d028      	beq.n	800c2e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c296:	f7fe fb61 	bl	800a95c <HAL_GetTick>
 800c29a:	4602      	mov	r2, r0
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	1ad3      	subs	r3, r2, r3
 800c2a0:	68ba      	ldr	r2, [r7, #8]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d302      	bcc.n	800c2ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d11d      	bne.n	800c2e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	695b      	ldr	r3, [r3, #20]
 800c2b2:	f003 0304 	and.w	r3, r3, #4
 800c2b6:	2b04      	cmp	r3, #4
 800c2b8:	d016      	beq.n	800c2e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2220      	movs	r2, #32
 800c2c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2d4:	f043 0220 	orr.w	r2, r3, #32
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	e007      	b.n	800c2f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	695b      	ldr	r3, [r3, #20]
 800c2ee:	f003 0304 	and.w	r3, r3, #4
 800c2f2:	2b04      	cmp	r3, #4
 800c2f4:	d1c3      	bne.n	800c27e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c2f6:	2300      	movs	r3, #0
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c30c:	e049      	b.n	800c3a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	695b      	ldr	r3, [r3, #20]
 800c314:	f003 0310 	and.w	r3, r3, #16
 800c318:	2b10      	cmp	r3, #16
 800c31a:	d119      	bne.n	800c350 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f06f 0210 	mvn.w	r2, #16
 800c324:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2200      	movs	r2, #0
 800c32a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2220      	movs	r2, #32
 800c330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c34c:	2301      	movs	r3, #1
 800c34e:	e030      	b.n	800c3b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c350:	f7fe fb04 	bl	800a95c <HAL_GetTick>
 800c354:	4602      	mov	r2, r0
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	68ba      	ldr	r2, [r7, #8]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d302      	bcc.n	800c366 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d11d      	bne.n	800c3a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	695b      	ldr	r3, [r3, #20]
 800c36c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c370:	2b40      	cmp	r3, #64	@ 0x40
 800c372:	d016      	beq.n	800c3a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2200      	movs	r2, #0
 800c378:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2220      	movs	r2, #32
 800c37e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2200      	movs	r2, #0
 800c386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c38e:	f043 0220 	orr.w	r2, r3, #32
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2200      	movs	r2, #0
 800c39a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e007      	b.n	800c3b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	695b      	ldr	r3, [r3, #20]
 800c3a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3ac:	2b40      	cmp	r3, #64	@ 0x40
 800c3ae:	d1ae      	bne.n	800c30e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c3ba:	b480      	push	{r7}
 800c3bc:	b083      	sub	sp, #12
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	695b      	ldr	r3, [r3, #20]
 800c3c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3d0:	d11b      	bne.n	800c40a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c3da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2220      	movs	r2, #32
 800c3e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3f6:	f043 0204 	orr.w	r2, r3, #4
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	e000      	b.n	800c40c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b086      	sub	sp, #24
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	e267      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f003 0301 	and.w	r3, r3, #1
 800c432:	2b00      	cmp	r3, #0
 800c434:	d075      	beq.n	800c522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c436:	4b88      	ldr	r3, [pc, #544]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	f003 030c 	and.w	r3, r3, #12
 800c43e:	2b04      	cmp	r3, #4
 800c440:	d00c      	beq.n	800c45c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c442:	4b85      	ldr	r3, [pc, #532]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c44a:	2b08      	cmp	r3, #8
 800c44c:	d112      	bne.n	800c474 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c44e:	4b82      	ldr	r3, [pc, #520]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c456:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c45a:	d10b      	bne.n	800c474 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c45c:	4b7e      	ldr	r3, [pc, #504]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d05b      	beq.n	800c520 <HAL_RCC_OscConfig+0x108>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d157      	bne.n	800c520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	e242      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c47c:	d106      	bne.n	800c48c <HAL_RCC_OscConfig+0x74>
 800c47e:	4b76      	ldr	r3, [pc, #472]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a75      	ldr	r2, [pc, #468]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c488:	6013      	str	r3, [r2, #0]
 800c48a:	e01d      	b.n	800c4c8 <HAL_RCC_OscConfig+0xb0>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c494:	d10c      	bne.n	800c4b0 <HAL_RCC_OscConfig+0x98>
 800c496:	4b70      	ldr	r3, [pc, #448]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a6f      	ldr	r2, [pc, #444]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c49c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c4a0:	6013      	str	r3, [r2, #0]
 800c4a2:	4b6d      	ldr	r3, [pc, #436]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a6c      	ldr	r2, [pc, #432]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c4a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c4ac:	6013      	str	r3, [r2, #0]
 800c4ae:	e00b      	b.n	800c4c8 <HAL_RCC_OscConfig+0xb0>
 800c4b0:	4b69      	ldr	r3, [pc, #420]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a68      	ldr	r2, [pc, #416]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c4b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c4ba:	6013      	str	r3, [r2, #0]
 800c4bc:	4b66      	ldr	r3, [pc, #408]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4a65      	ldr	r2, [pc, #404]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c4c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c4c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d013      	beq.n	800c4f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c4d0:	f7fe fa44 	bl	800a95c <HAL_GetTick>
 800c4d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c4d6:	e008      	b.n	800c4ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c4d8:	f7fe fa40 	bl	800a95c <HAL_GetTick>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	1ad3      	subs	r3, r2, r3
 800c4e2:	2b64      	cmp	r3, #100	@ 0x64
 800c4e4:	d901      	bls.n	800c4ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c4e6:	2303      	movs	r3, #3
 800c4e8:	e207      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c4ea:	4b5b      	ldr	r3, [pc, #364]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d0f0      	beq.n	800c4d8 <HAL_RCC_OscConfig+0xc0>
 800c4f6:	e014      	b.n	800c522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c4f8:	f7fe fa30 	bl	800a95c <HAL_GetTick>
 800c4fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c4fe:	e008      	b.n	800c512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c500:	f7fe fa2c 	bl	800a95c <HAL_GetTick>
 800c504:	4602      	mov	r2, r0
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	2b64      	cmp	r3, #100	@ 0x64
 800c50c:	d901      	bls.n	800c512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c50e:	2303      	movs	r3, #3
 800c510:	e1f3      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c512:	4b51      	ldr	r3, [pc, #324]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1f0      	bne.n	800c500 <HAL_RCC_OscConfig+0xe8>
 800c51e:	e000      	b.n	800c522 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f003 0302 	and.w	r3, r3, #2
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d063      	beq.n	800c5f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c52e:	4b4a      	ldr	r3, [pc, #296]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	f003 030c 	and.w	r3, r3, #12
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00b      	beq.n	800c552 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c53a:	4b47      	ldr	r3, [pc, #284]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c542:	2b08      	cmp	r3, #8
 800c544:	d11c      	bne.n	800c580 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c546:	4b44      	ldr	r3, [pc, #272]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d116      	bne.n	800c580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c552:	4b41      	ldr	r3, [pc, #260]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f003 0302 	and.w	r3, r3, #2
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d005      	beq.n	800c56a <HAL_RCC_OscConfig+0x152>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	2b01      	cmp	r3, #1
 800c564:	d001      	beq.n	800c56a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	e1c7      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c56a:	4b3b      	ldr	r3, [pc, #236]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	691b      	ldr	r3, [r3, #16]
 800c576:	00db      	lsls	r3, r3, #3
 800c578:	4937      	ldr	r1, [pc, #220]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c57a:	4313      	orrs	r3, r2
 800c57c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c57e:	e03a      	b.n	800c5f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d020      	beq.n	800c5ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c588:	4b34      	ldr	r3, [pc, #208]	@ (800c65c <HAL_RCC_OscConfig+0x244>)
 800c58a:	2201      	movs	r2, #1
 800c58c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c58e:	f7fe f9e5 	bl	800a95c <HAL_GetTick>
 800c592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c594:	e008      	b.n	800c5a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c596:	f7fe f9e1 	bl	800a95c <HAL_GetTick>
 800c59a:	4602      	mov	r2, r0
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	1ad3      	subs	r3, r2, r3
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	d901      	bls.n	800c5a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	e1a8      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c5a8:	4b2b      	ldr	r3, [pc, #172]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 0302 	and.w	r3, r3, #2
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d0f0      	beq.n	800c596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c5b4:	4b28      	ldr	r3, [pc, #160]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	00db      	lsls	r3, r3, #3
 800c5c2:	4925      	ldr	r1, [pc, #148]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	600b      	str	r3, [r1, #0]
 800c5c8:	e015      	b.n	800c5f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c5ca:	4b24      	ldr	r3, [pc, #144]	@ (800c65c <HAL_RCC_OscConfig+0x244>)
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5d0:	f7fe f9c4 	bl	800a95c <HAL_GetTick>
 800c5d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c5d6:	e008      	b.n	800c5ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5d8:	f7fe f9c0 	bl	800a95c <HAL_GetTick>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	1ad3      	subs	r3, r2, r3
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	d901      	bls.n	800c5ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c5e6:	2303      	movs	r3, #3
 800c5e8:	e187      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c5ea:	4b1b      	ldr	r3, [pc, #108]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f003 0302 	and.w	r3, r3, #2
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1f0      	bne.n	800c5d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f003 0308 	and.w	r3, r3, #8
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d036      	beq.n	800c670 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	695b      	ldr	r3, [r3, #20]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d016      	beq.n	800c638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c60a:	4b15      	ldr	r3, [pc, #84]	@ (800c660 <HAL_RCC_OscConfig+0x248>)
 800c60c:	2201      	movs	r2, #1
 800c60e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c610:	f7fe f9a4 	bl	800a95c <HAL_GetTick>
 800c614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c616:	e008      	b.n	800c62a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c618:	f7fe f9a0 	bl	800a95c <HAL_GetTick>
 800c61c:	4602      	mov	r2, r0
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	1ad3      	subs	r3, r2, r3
 800c622:	2b02      	cmp	r3, #2
 800c624:	d901      	bls.n	800c62a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c626:	2303      	movs	r3, #3
 800c628:	e167      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c62a:	4b0b      	ldr	r3, [pc, #44]	@ (800c658 <HAL_RCC_OscConfig+0x240>)
 800c62c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c62e:	f003 0302 	and.w	r3, r3, #2
 800c632:	2b00      	cmp	r3, #0
 800c634:	d0f0      	beq.n	800c618 <HAL_RCC_OscConfig+0x200>
 800c636:	e01b      	b.n	800c670 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c638:	4b09      	ldr	r3, [pc, #36]	@ (800c660 <HAL_RCC_OscConfig+0x248>)
 800c63a:	2200      	movs	r2, #0
 800c63c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c63e:	f7fe f98d 	bl	800a95c <HAL_GetTick>
 800c642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c644:	e00e      	b.n	800c664 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c646:	f7fe f989 	bl	800a95c <HAL_GetTick>
 800c64a:	4602      	mov	r2, r0
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	1ad3      	subs	r3, r2, r3
 800c650:	2b02      	cmp	r3, #2
 800c652:	d907      	bls.n	800c664 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c654:	2303      	movs	r3, #3
 800c656:	e150      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
 800c658:	40023800 	.word	0x40023800
 800c65c:	42470000 	.word	0x42470000
 800c660:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c664:	4b88      	ldr	r3, [pc, #544]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c668:	f003 0302 	and.w	r3, r3, #2
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1ea      	bne.n	800c646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 0304 	and.w	r3, r3, #4
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f000 8097 	beq.w	800c7ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c67e:	2300      	movs	r3, #0
 800c680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c682:	4b81      	ldr	r3, [pc, #516]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10f      	bne.n	800c6ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c68e:	2300      	movs	r3, #0
 800c690:	60bb      	str	r3, [r7, #8]
 800c692:	4b7d      	ldr	r3, [pc, #500]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c696:	4a7c      	ldr	r2, [pc, #496]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c69c:	6413      	str	r3, [r2, #64]	@ 0x40
 800c69e:	4b7a      	ldr	r3, [pc, #488]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c6a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c6a6:	60bb      	str	r3, [r7, #8]
 800c6a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c6ae:	4b77      	ldr	r3, [pc, #476]	@ (800c88c <HAL_RCC_OscConfig+0x474>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d118      	bne.n	800c6ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c6ba:	4b74      	ldr	r3, [pc, #464]	@ (800c88c <HAL_RCC_OscConfig+0x474>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4a73      	ldr	r2, [pc, #460]	@ (800c88c <HAL_RCC_OscConfig+0x474>)
 800c6c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c6c6:	f7fe f949 	bl	800a95c <HAL_GetTick>
 800c6ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c6cc:	e008      	b.n	800c6e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c6ce:	f7fe f945 	bl	800a95c <HAL_GetTick>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	1ad3      	subs	r3, r2, r3
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d901      	bls.n	800c6e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c6dc:	2303      	movs	r3, #3
 800c6de:	e10c      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c6e0:	4b6a      	ldr	r3, [pc, #424]	@ (800c88c <HAL_RCC_OscConfig+0x474>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d0f0      	beq.n	800c6ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d106      	bne.n	800c702 <HAL_RCC_OscConfig+0x2ea>
 800c6f4:	4b64      	ldr	r3, [pc, #400]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c6f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6f8:	4a63      	ldr	r2, [pc, #396]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c6fa:	f043 0301 	orr.w	r3, r3, #1
 800c6fe:	6713      	str	r3, [r2, #112]	@ 0x70
 800c700:	e01c      	b.n	800c73c <HAL_RCC_OscConfig+0x324>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	689b      	ldr	r3, [r3, #8]
 800c706:	2b05      	cmp	r3, #5
 800c708:	d10c      	bne.n	800c724 <HAL_RCC_OscConfig+0x30c>
 800c70a:	4b5f      	ldr	r3, [pc, #380]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c70c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c70e:	4a5e      	ldr	r2, [pc, #376]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c710:	f043 0304 	orr.w	r3, r3, #4
 800c714:	6713      	str	r3, [r2, #112]	@ 0x70
 800c716:	4b5c      	ldr	r3, [pc, #368]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c71a:	4a5b      	ldr	r2, [pc, #364]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c71c:	f043 0301 	orr.w	r3, r3, #1
 800c720:	6713      	str	r3, [r2, #112]	@ 0x70
 800c722:	e00b      	b.n	800c73c <HAL_RCC_OscConfig+0x324>
 800c724:	4b58      	ldr	r3, [pc, #352]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c728:	4a57      	ldr	r2, [pc, #348]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c72a:	f023 0301 	bic.w	r3, r3, #1
 800c72e:	6713      	str	r3, [r2, #112]	@ 0x70
 800c730:	4b55      	ldr	r3, [pc, #340]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c734:	4a54      	ldr	r2, [pc, #336]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c736:	f023 0304 	bic.w	r3, r3, #4
 800c73a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d015      	beq.n	800c770 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c744:	f7fe f90a 	bl	800a95c <HAL_GetTick>
 800c748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c74a:	e00a      	b.n	800c762 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c74c:	f7fe f906 	bl	800a95c <HAL_GetTick>
 800c750:	4602      	mov	r2, r0
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	1ad3      	subs	r3, r2, r3
 800c756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d901      	bls.n	800c762 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c75e:	2303      	movs	r3, #3
 800c760:	e0cb      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c762:	4b49      	ldr	r3, [pc, #292]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c766:	f003 0302 	and.w	r3, r3, #2
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d0ee      	beq.n	800c74c <HAL_RCC_OscConfig+0x334>
 800c76e:	e014      	b.n	800c79a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c770:	f7fe f8f4 	bl	800a95c <HAL_GetTick>
 800c774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c776:	e00a      	b.n	800c78e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c778:	f7fe f8f0 	bl	800a95c <HAL_GetTick>
 800c77c:	4602      	mov	r2, r0
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c786:	4293      	cmp	r3, r2
 800c788:	d901      	bls.n	800c78e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c78a:	2303      	movs	r3, #3
 800c78c:	e0b5      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c78e:	4b3e      	ldr	r3, [pc, #248]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c792:	f003 0302 	and.w	r3, r3, #2
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1ee      	bne.n	800c778 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c79a:	7dfb      	ldrb	r3, [r7, #23]
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d105      	bne.n	800c7ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c7a0:	4b39      	ldr	r3, [pc, #228]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c7a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7a4:	4a38      	ldr	r2, [pc, #224]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c7a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c7aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	699b      	ldr	r3, [r3, #24]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f000 80a1 	beq.w	800c8f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c7b6:	4b34      	ldr	r3, [pc, #208]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	f003 030c 	and.w	r3, r3, #12
 800c7be:	2b08      	cmp	r3, #8
 800c7c0:	d05c      	beq.n	800c87c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	699b      	ldr	r3, [r3, #24]
 800c7c6:	2b02      	cmp	r3, #2
 800c7c8:	d141      	bne.n	800c84e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7ca:	4b31      	ldr	r3, [pc, #196]	@ (800c890 <HAL_RCC_OscConfig+0x478>)
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c7d0:	f7fe f8c4 	bl	800a95c <HAL_GetTick>
 800c7d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c7d6:	e008      	b.n	800c7ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7d8:	f7fe f8c0 	bl	800a95c <HAL_GetTick>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	d901      	bls.n	800c7ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c7e6:	2303      	movs	r3, #3
 800c7e8:	e087      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c7ea:	4b27      	ldr	r3, [pc, #156]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1f0      	bne.n	800c7d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	69da      	ldr	r2, [r3, #28]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6a1b      	ldr	r3, [r3, #32]
 800c7fe:	431a      	orrs	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c804:	019b      	lsls	r3, r3, #6
 800c806:	431a      	orrs	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c80c:	085b      	lsrs	r3, r3, #1
 800c80e:	3b01      	subs	r3, #1
 800c810:	041b      	lsls	r3, r3, #16
 800c812:	431a      	orrs	r2, r3
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c818:	061b      	lsls	r3, r3, #24
 800c81a:	491b      	ldr	r1, [pc, #108]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c81c:	4313      	orrs	r3, r2
 800c81e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c820:	4b1b      	ldr	r3, [pc, #108]	@ (800c890 <HAL_RCC_OscConfig+0x478>)
 800c822:	2201      	movs	r2, #1
 800c824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c826:	f7fe f899 	bl	800a95c <HAL_GetTick>
 800c82a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c82c:	e008      	b.n	800c840 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c82e:	f7fe f895 	bl	800a95c <HAL_GetTick>
 800c832:	4602      	mov	r2, r0
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	1ad3      	subs	r3, r2, r3
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d901      	bls.n	800c840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c83c:	2303      	movs	r3, #3
 800c83e:	e05c      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c840:	4b11      	ldr	r3, [pc, #68]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d0f0      	beq.n	800c82e <HAL_RCC_OscConfig+0x416>
 800c84c:	e054      	b.n	800c8f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c84e:	4b10      	ldr	r3, [pc, #64]	@ (800c890 <HAL_RCC_OscConfig+0x478>)
 800c850:	2200      	movs	r2, #0
 800c852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c854:	f7fe f882 	bl	800a95c <HAL_GetTick>
 800c858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c85a:	e008      	b.n	800c86e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c85c:	f7fe f87e 	bl	800a95c <HAL_GetTick>
 800c860:	4602      	mov	r2, r0
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	2b02      	cmp	r3, #2
 800c868:	d901      	bls.n	800c86e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c86a:	2303      	movs	r3, #3
 800c86c:	e045      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c86e:	4b06      	ldr	r3, [pc, #24]	@ (800c888 <HAL_RCC_OscConfig+0x470>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c876:	2b00      	cmp	r3, #0
 800c878:	d1f0      	bne.n	800c85c <HAL_RCC_OscConfig+0x444>
 800c87a:	e03d      	b.n	800c8f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	699b      	ldr	r3, [r3, #24]
 800c880:	2b01      	cmp	r3, #1
 800c882:	d107      	bne.n	800c894 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c884:	2301      	movs	r3, #1
 800c886:	e038      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
 800c888:	40023800 	.word	0x40023800
 800c88c:	40007000 	.word	0x40007000
 800c890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c894:	4b1b      	ldr	r3, [pc, #108]	@ (800c904 <HAL_RCC_OscConfig+0x4ec>)
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	699b      	ldr	r3, [r3, #24]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d028      	beq.n	800c8f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d121      	bne.n	800c8f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d11a      	bne.n	800c8f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800c8c4:	4013      	ands	r3, r2
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c8ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d111      	bne.n	800c8f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8da:	085b      	lsrs	r3, r3, #1
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d107      	bne.n	800c8f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d001      	beq.n	800c8f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e000      	b.n	800c8fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3718      	adds	r7, #24
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	40023800 	.word	0x40023800

0800c908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d101      	bne.n	800c91c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c918:	2301      	movs	r3, #1
 800c91a:	e0cc      	b.n	800cab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c91c:	4b68      	ldr	r3, [pc, #416]	@ (800cac0 <HAL_RCC_ClockConfig+0x1b8>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f003 0307 	and.w	r3, r3, #7
 800c924:	683a      	ldr	r2, [r7, #0]
 800c926:	429a      	cmp	r2, r3
 800c928:	d90c      	bls.n	800c944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c92a:	4b65      	ldr	r3, [pc, #404]	@ (800cac0 <HAL_RCC_ClockConfig+0x1b8>)
 800c92c:	683a      	ldr	r2, [r7, #0]
 800c92e:	b2d2      	uxtb	r2, r2
 800c930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c932:	4b63      	ldr	r3, [pc, #396]	@ (800cac0 <HAL_RCC_ClockConfig+0x1b8>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f003 0307 	and.w	r3, r3, #7
 800c93a:	683a      	ldr	r2, [r7, #0]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d001      	beq.n	800c944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	e0b8      	b.n	800cab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f003 0302 	and.w	r3, r3, #2
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d020      	beq.n	800c992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f003 0304 	and.w	r3, r3, #4
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d005      	beq.n	800c968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c95c:	4b59      	ldr	r3, [pc, #356]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	4a58      	ldr	r2, [pc, #352]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800c962:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800c966:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f003 0308 	and.w	r3, r3, #8
 800c970:	2b00      	cmp	r3, #0
 800c972:	d005      	beq.n	800c980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c974:	4b53      	ldr	r3, [pc, #332]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	4a52      	ldr	r2, [pc, #328]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800c97a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800c97e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c980:	4b50      	ldr	r3, [pc, #320]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	494d      	ldr	r1, [pc, #308]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800c98e:	4313      	orrs	r3, r2
 800c990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f003 0301 	and.w	r3, r3, #1
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d044      	beq.n	800ca28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d107      	bne.n	800c9b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c9a6:	4b47      	ldr	r3, [pc, #284]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d119      	bne.n	800c9e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	e07f      	b.n	800cab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d003      	beq.n	800c9c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c9c2:	2b03      	cmp	r3, #3
 800c9c4:	d107      	bne.n	800c9d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c9c6:	4b3f      	ldr	r3, [pc, #252]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d109      	bne.n	800c9e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	e06f      	b.n	800cab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c9d6:	4b3b      	ldr	r3, [pc, #236]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f003 0302 	and.w	r3, r3, #2
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d101      	bne.n	800c9e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e067      	b.n	800cab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c9e6:	4b37      	ldr	r3, [pc, #220]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	f023 0203 	bic.w	r2, r3, #3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	4934      	ldr	r1, [pc, #208]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c9f8:	f7fd ffb0 	bl	800a95c <HAL_GetTick>
 800c9fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9fe:	e00a      	b.n	800ca16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca00:	f7fd ffac 	bl	800a95c <HAL_GetTick>
 800ca04:	4602      	mov	r2, r0
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	1ad3      	subs	r3, r2, r3
 800ca0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d901      	bls.n	800ca16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ca12:	2303      	movs	r3, #3
 800ca14:	e04f      	b.n	800cab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca16:	4b2b      	ldr	r3, [pc, #172]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	f003 020c 	and.w	r2, r3, #12
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d1eb      	bne.n	800ca00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ca28:	4b25      	ldr	r3, [pc, #148]	@ (800cac0 <HAL_RCC_ClockConfig+0x1b8>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f003 0307 	and.w	r3, r3, #7
 800ca30:	683a      	ldr	r2, [r7, #0]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d20c      	bcs.n	800ca50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca36:	4b22      	ldr	r3, [pc, #136]	@ (800cac0 <HAL_RCC_ClockConfig+0x1b8>)
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	b2d2      	uxtb	r2, r2
 800ca3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca3e:	4b20      	ldr	r3, [pc, #128]	@ (800cac0 <HAL_RCC_ClockConfig+0x1b8>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f003 0307 	and.w	r3, r3, #7
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d001      	beq.n	800ca50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	e032      	b.n	800cab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f003 0304 	and.w	r3, r3, #4
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d008      	beq.n	800ca6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ca5c:	4b19      	ldr	r3, [pc, #100]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	4916      	ldr	r1, [pc, #88]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f003 0308 	and.w	r3, r3, #8
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d009      	beq.n	800ca8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ca7a:	4b12      	ldr	r3, [pc, #72]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	691b      	ldr	r3, [r3, #16]
 800ca86:	00db      	lsls	r3, r3, #3
 800ca88:	490e      	ldr	r1, [pc, #56]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ca8e:	f000 f821 	bl	800cad4 <HAL_RCC_GetSysClockFreq>
 800ca92:	4602      	mov	r2, r0
 800ca94:	4b0b      	ldr	r3, [pc, #44]	@ (800cac4 <HAL_RCC_ClockConfig+0x1bc>)
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	091b      	lsrs	r3, r3, #4
 800ca9a:	f003 030f 	and.w	r3, r3, #15
 800ca9e:	490a      	ldr	r1, [pc, #40]	@ (800cac8 <HAL_RCC_ClockConfig+0x1c0>)
 800caa0:	5ccb      	ldrb	r3, [r1, r3]
 800caa2:	fa22 f303 	lsr.w	r3, r2, r3
 800caa6:	4a09      	ldr	r2, [pc, #36]	@ (800cacc <HAL_RCC_ClockConfig+0x1c4>)
 800caa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800caaa:	4b09      	ldr	r3, [pc, #36]	@ (800cad0 <HAL_RCC_ClockConfig+0x1c8>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4618      	mov	r0, r3
 800cab0:	f7fd ff10 	bl	800a8d4 <HAL_InitTick>

  return HAL_OK;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	40023c00 	.word	0x40023c00
 800cac4:	40023800 	.word	0x40023800
 800cac8:	080138e4 	.word	0x080138e4
 800cacc:	200000d4 	.word	0x200000d4
 800cad0:	200000d8 	.word	0x200000d8

0800cad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cad8:	b090      	sub	sp, #64	@ 0x40
 800cada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800cadc:	2300      	movs	r3, #0
 800cade:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800cae0:	2300      	movs	r3, #0
 800cae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800cae4:	2300      	movs	r3, #0
 800cae6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800cae8:	2300      	movs	r3, #0
 800caea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800caec:	4b59      	ldr	r3, [pc, #356]	@ (800cc54 <HAL_RCC_GetSysClockFreq+0x180>)
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	f003 030c 	and.w	r3, r3, #12
 800caf4:	2b08      	cmp	r3, #8
 800caf6:	d00d      	beq.n	800cb14 <HAL_RCC_GetSysClockFreq+0x40>
 800caf8:	2b08      	cmp	r3, #8
 800cafa:	f200 80a1 	bhi.w	800cc40 <HAL_RCC_GetSysClockFreq+0x16c>
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d002      	beq.n	800cb08 <HAL_RCC_GetSysClockFreq+0x34>
 800cb02:	2b04      	cmp	r3, #4
 800cb04:	d003      	beq.n	800cb0e <HAL_RCC_GetSysClockFreq+0x3a>
 800cb06:	e09b      	b.n	800cc40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cb08:	4b53      	ldr	r3, [pc, #332]	@ (800cc58 <HAL_RCC_GetSysClockFreq+0x184>)
 800cb0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800cb0c:	e09b      	b.n	800cc46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cb0e:	4b53      	ldr	r3, [pc, #332]	@ (800cc5c <HAL_RCC_GetSysClockFreq+0x188>)
 800cb10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800cb12:	e098      	b.n	800cc46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cb14:	4b4f      	ldr	r3, [pc, #316]	@ (800cc54 <HAL_RCC_GetSysClockFreq+0x180>)
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cb1e:	4b4d      	ldr	r3, [pc, #308]	@ (800cc54 <HAL_RCC_GetSysClockFreq+0x180>)
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d028      	beq.n	800cb7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cb2a:	4b4a      	ldr	r3, [pc, #296]	@ (800cc54 <HAL_RCC_GetSysClockFreq+0x180>)
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	099b      	lsrs	r3, r3, #6
 800cb30:	2200      	movs	r2, #0
 800cb32:	623b      	str	r3, [r7, #32]
 800cb34:	627a      	str	r2, [r7, #36]	@ 0x24
 800cb36:	6a3b      	ldr	r3, [r7, #32]
 800cb38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	4b47      	ldr	r3, [pc, #284]	@ (800cc5c <HAL_RCC_GetSysClockFreq+0x188>)
 800cb40:	fb03 f201 	mul.w	r2, r3, r1
 800cb44:	2300      	movs	r3, #0
 800cb46:	fb00 f303 	mul.w	r3, r0, r3
 800cb4a:	4413      	add	r3, r2
 800cb4c:	4a43      	ldr	r2, [pc, #268]	@ (800cc5c <HAL_RCC_GetSysClockFreq+0x188>)
 800cb4e:	fba0 1202 	umull	r1, r2, r0, r2
 800cb52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb54:	460a      	mov	r2, r1
 800cb56:	62ba      	str	r2, [r7, #40]	@ 0x28
 800cb58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb5a:	4413      	add	r3, r2
 800cb5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb60:	2200      	movs	r2, #0
 800cb62:	61bb      	str	r3, [r7, #24]
 800cb64:	61fa      	str	r2, [r7, #28]
 800cb66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cb6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800cb6e:	f7f4 f8db 	bl	8000d28 <__aeabi_uldivmod>
 800cb72:	4602      	mov	r2, r0
 800cb74:	460b      	mov	r3, r1
 800cb76:	4613      	mov	r3, r2
 800cb78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb7a:	e053      	b.n	800cc24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cb7c:	4b35      	ldr	r3, [pc, #212]	@ (800cc54 <HAL_RCC_GetSysClockFreq+0x180>)
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	099b      	lsrs	r3, r3, #6
 800cb82:	2200      	movs	r2, #0
 800cb84:	613b      	str	r3, [r7, #16]
 800cb86:	617a      	str	r2, [r7, #20]
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800cb8e:	f04f 0b00 	mov.w	fp, #0
 800cb92:	4652      	mov	r2, sl
 800cb94:	465b      	mov	r3, fp
 800cb96:	f04f 0000 	mov.w	r0, #0
 800cb9a:	f04f 0100 	mov.w	r1, #0
 800cb9e:	0159      	lsls	r1, r3, #5
 800cba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cba4:	0150      	lsls	r0, r2, #5
 800cba6:	4602      	mov	r2, r0
 800cba8:	460b      	mov	r3, r1
 800cbaa:	ebb2 080a 	subs.w	r8, r2, sl
 800cbae:	eb63 090b 	sbc.w	r9, r3, fp
 800cbb2:	f04f 0200 	mov.w	r2, #0
 800cbb6:	f04f 0300 	mov.w	r3, #0
 800cbba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800cbbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800cbc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800cbc6:	ebb2 0408 	subs.w	r4, r2, r8
 800cbca:	eb63 0509 	sbc.w	r5, r3, r9
 800cbce:	f04f 0200 	mov.w	r2, #0
 800cbd2:	f04f 0300 	mov.w	r3, #0
 800cbd6:	00eb      	lsls	r3, r5, #3
 800cbd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cbdc:	00e2      	lsls	r2, r4, #3
 800cbde:	4614      	mov	r4, r2
 800cbe0:	461d      	mov	r5, r3
 800cbe2:	eb14 030a 	adds.w	r3, r4, sl
 800cbe6:	603b      	str	r3, [r7, #0]
 800cbe8:	eb45 030b 	adc.w	r3, r5, fp
 800cbec:	607b      	str	r3, [r7, #4]
 800cbee:	f04f 0200 	mov.w	r2, #0
 800cbf2:	f04f 0300 	mov.w	r3, #0
 800cbf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	028b      	lsls	r3, r1, #10
 800cbfe:	4621      	mov	r1, r4
 800cc00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cc04:	4621      	mov	r1, r4
 800cc06:	028a      	lsls	r2, r1, #10
 800cc08:	4610      	mov	r0, r2
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc0e:	2200      	movs	r2, #0
 800cc10:	60bb      	str	r3, [r7, #8]
 800cc12:	60fa      	str	r2, [r7, #12]
 800cc14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cc18:	f7f4 f886 	bl	8000d28 <__aeabi_uldivmod>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	460b      	mov	r3, r1
 800cc20:	4613      	mov	r3, r2
 800cc22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800cc24:	4b0b      	ldr	r3, [pc, #44]	@ (800cc54 <HAL_RCC_GetSysClockFreq+0x180>)
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	0c1b      	lsrs	r3, r3, #16
 800cc2a:	f003 0303 	and.w	r3, r3, #3
 800cc2e:	3301      	adds	r3, #1
 800cc30:	005b      	lsls	r3, r3, #1
 800cc32:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800cc34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc38:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800cc3e:	e002      	b.n	800cc46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cc40:	4b05      	ldr	r3, [pc, #20]	@ (800cc58 <HAL_RCC_GetSysClockFreq+0x184>)
 800cc42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800cc44:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cc46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3740      	adds	r7, #64	@ 0x40
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc52:	bf00      	nop
 800cc54:	40023800 	.word	0x40023800
 800cc58:	00f42400 	.word	0x00f42400
 800cc5c:	017d7840 	.word	0x017d7840

0800cc60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cc60:	b480      	push	{r7}
 800cc62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cc64:	4b03      	ldr	r3, [pc, #12]	@ (800cc74 <HAL_RCC_GetHCLKFreq+0x14>)
 800cc66:	681b      	ldr	r3, [r3, #0]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	200000d4 	.word	0x200000d4

0800cc78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cc7c:	f7ff fff0 	bl	800cc60 <HAL_RCC_GetHCLKFreq>
 800cc80:	4602      	mov	r2, r0
 800cc82:	4b05      	ldr	r3, [pc, #20]	@ (800cc98 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cc84:	689b      	ldr	r3, [r3, #8]
 800cc86:	0a9b      	lsrs	r3, r3, #10
 800cc88:	f003 0307 	and.w	r3, r3, #7
 800cc8c:	4903      	ldr	r1, [pc, #12]	@ (800cc9c <HAL_RCC_GetPCLK1Freq+0x24>)
 800cc8e:	5ccb      	ldrb	r3, [r1, r3]
 800cc90:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	40023800 	.word	0x40023800
 800cc9c:	080138f4 	.word	0x080138f4

0800cca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cca4:	f7ff ffdc 	bl	800cc60 <HAL_RCC_GetHCLKFreq>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	4b05      	ldr	r3, [pc, #20]	@ (800ccc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	0b5b      	lsrs	r3, r3, #13
 800ccb0:	f003 0307 	and.w	r3, r3, #7
 800ccb4:	4903      	ldr	r1, [pc, #12]	@ (800ccc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ccb6:	5ccb      	ldrb	r3, [r1, r3]
 800ccb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	40023800 	.word	0x40023800
 800ccc4:	080138f4 	.word	0x080138f4

0800ccc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d101      	bne.n	800ccda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e041      	b.n	800cd5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d106      	bne.n	800ccf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7fc feb2 	bl	8009a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2202      	movs	r2, #2
 800ccf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	3304      	adds	r3, #4
 800cd04:	4619      	mov	r1, r3
 800cd06:	4610      	mov	r0, r2
 800cd08:	f000 fc76 	bl	800d5f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2201      	movs	r2, #1
 800cd18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2201      	movs	r2, #1
 800cd28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2201      	movs	r2, #1
 800cd38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2201      	movs	r2, #1
 800cd40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2201      	movs	r2, #1
 800cd48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2201      	movs	r2, #1
 800cd58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cd5c:	2300      	movs	r3, #0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3708      	adds	r7, #8
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
	...

0800cd68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d001      	beq.n	800cd80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e046      	b.n	800ce0e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2202      	movs	r2, #2
 800cd84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a23      	ldr	r2, [pc, #140]	@ (800ce1c <HAL_TIM_Base_Start+0xb4>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d022      	beq.n	800cdd8 <HAL_TIM_Base_Start+0x70>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd9a:	d01d      	beq.n	800cdd8 <HAL_TIM_Base_Start+0x70>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a1f      	ldr	r2, [pc, #124]	@ (800ce20 <HAL_TIM_Base_Start+0xb8>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d018      	beq.n	800cdd8 <HAL_TIM_Base_Start+0x70>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a1e      	ldr	r2, [pc, #120]	@ (800ce24 <HAL_TIM_Base_Start+0xbc>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d013      	beq.n	800cdd8 <HAL_TIM_Base_Start+0x70>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a1c      	ldr	r2, [pc, #112]	@ (800ce28 <HAL_TIM_Base_Start+0xc0>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d00e      	beq.n	800cdd8 <HAL_TIM_Base_Start+0x70>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a1b      	ldr	r2, [pc, #108]	@ (800ce2c <HAL_TIM_Base_Start+0xc4>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d009      	beq.n	800cdd8 <HAL_TIM_Base_Start+0x70>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a19      	ldr	r2, [pc, #100]	@ (800ce30 <HAL_TIM_Base_Start+0xc8>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d004      	beq.n	800cdd8 <HAL_TIM_Base_Start+0x70>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a18      	ldr	r2, [pc, #96]	@ (800ce34 <HAL_TIM_Base_Start+0xcc>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d111      	bne.n	800cdfc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	f003 0307 	and.w	r3, r3, #7
 800cde2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2b06      	cmp	r3, #6
 800cde8:	d010      	beq.n	800ce0c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f042 0201 	orr.w	r2, r2, #1
 800cdf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdfa:	e007      	b.n	800ce0c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f042 0201 	orr.w	r2, r2, #1
 800ce0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3714      	adds	r7, #20
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	40010000 	.word	0x40010000
 800ce20:	40000400 	.word	0x40000400
 800ce24:	40000800 	.word	0x40000800
 800ce28:	40000c00 	.word	0x40000c00
 800ce2c:	40010400 	.word	0x40010400
 800ce30:	40014000 	.word	0x40014000
 800ce34:	40001800 	.word	0x40001800

0800ce38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d101      	bne.n	800ce4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
 800ce48:	e041      	b.n	800cece <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d106      	bne.n	800ce64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 f839 	bl	800ced6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2202      	movs	r2, #2
 800ce68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	3304      	adds	r3, #4
 800ce74:	4619      	mov	r1, r3
 800ce76:	4610      	mov	r0, r2
 800ce78:	f000 fbbe 	bl	800d5f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2201      	movs	r2, #1
 800ce88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2201      	movs	r2, #1
 800cea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2201      	movs	r2, #1
 800cec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cecc:	2300      	movs	r3, #0
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3708      	adds	r7, #8
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ced6:	b480      	push	{r7}
 800ced8:	b083      	sub	sp, #12
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cede:	bf00      	nop
 800cee0:	370c      	adds	r7, #12
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr
	...

0800ceec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d109      	bne.n	800cf10 <HAL_TIM_PWM_Start+0x24>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	bf14      	ite	ne
 800cf08:	2301      	movne	r3, #1
 800cf0a:	2300      	moveq	r3, #0
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	e022      	b.n	800cf56 <HAL_TIM_PWM_Start+0x6a>
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	2b04      	cmp	r3, #4
 800cf14:	d109      	bne.n	800cf2a <HAL_TIM_PWM_Start+0x3e>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	bf14      	ite	ne
 800cf22:	2301      	movne	r3, #1
 800cf24:	2300      	moveq	r3, #0
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	e015      	b.n	800cf56 <HAL_TIM_PWM_Start+0x6a>
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	2b08      	cmp	r3, #8
 800cf2e:	d109      	bne.n	800cf44 <HAL_TIM_PWM_Start+0x58>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	bf14      	ite	ne
 800cf3c:	2301      	movne	r3, #1
 800cf3e:	2300      	moveq	r3, #0
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	e008      	b.n	800cf56 <HAL_TIM_PWM_Start+0x6a>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	bf14      	ite	ne
 800cf50:	2301      	movne	r3, #1
 800cf52:	2300      	moveq	r3, #0
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d001      	beq.n	800cf5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e07c      	b.n	800d058 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d104      	bne.n	800cf6e <HAL_TIM_PWM_Start+0x82>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2202      	movs	r2, #2
 800cf68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cf6c:	e013      	b.n	800cf96 <HAL_TIM_PWM_Start+0xaa>
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b04      	cmp	r3, #4
 800cf72:	d104      	bne.n	800cf7e <HAL_TIM_PWM_Start+0x92>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2202      	movs	r2, #2
 800cf78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cf7c:	e00b      	b.n	800cf96 <HAL_TIM_PWM_Start+0xaa>
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	2b08      	cmp	r3, #8
 800cf82:	d104      	bne.n	800cf8e <HAL_TIM_PWM_Start+0xa2>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2202      	movs	r2, #2
 800cf88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cf8c:	e003      	b.n	800cf96 <HAL_TIM_PWM_Start+0xaa>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2202      	movs	r2, #2
 800cf92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	6839      	ldr	r1, [r7, #0]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f000 fe20 	bl	800dbe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a2d      	ldr	r2, [pc, #180]	@ (800d060 <HAL_TIM_PWM_Start+0x174>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d004      	beq.n	800cfb8 <HAL_TIM_PWM_Start+0xcc>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4a2c      	ldr	r2, [pc, #176]	@ (800d064 <HAL_TIM_PWM_Start+0x178>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d101      	bne.n	800cfbc <HAL_TIM_PWM_Start+0xd0>
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e000      	b.n	800cfbe <HAL_TIM_PWM_Start+0xd2>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d007      	beq.n	800cfd2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cfd0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a22      	ldr	r2, [pc, #136]	@ (800d060 <HAL_TIM_PWM_Start+0x174>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d022      	beq.n	800d022 <HAL_TIM_PWM_Start+0x136>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfe4:	d01d      	beq.n	800d022 <HAL_TIM_PWM_Start+0x136>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a1f      	ldr	r2, [pc, #124]	@ (800d068 <HAL_TIM_PWM_Start+0x17c>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d018      	beq.n	800d022 <HAL_TIM_PWM_Start+0x136>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a1d      	ldr	r2, [pc, #116]	@ (800d06c <HAL_TIM_PWM_Start+0x180>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d013      	beq.n	800d022 <HAL_TIM_PWM_Start+0x136>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a1c      	ldr	r2, [pc, #112]	@ (800d070 <HAL_TIM_PWM_Start+0x184>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d00e      	beq.n	800d022 <HAL_TIM_PWM_Start+0x136>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a16      	ldr	r2, [pc, #88]	@ (800d064 <HAL_TIM_PWM_Start+0x178>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d009      	beq.n	800d022 <HAL_TIM_PWM_Start+0x136>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4a18      	ldr	r2, [pc, #96]	@ (800d074 <HAL_TIM_PWM_Start+0x188>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d004      	beq.n	800d022 <HAL_TIM_PWM_Start+0x136>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a16      	ldr	r2, [pc, #88]	@ (800d078 <HAL_TIM_PWM_Start+0x18c>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d111      	bne.n	800d046 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	f003 0307 	and.w	r3, r3, #7
 800d02c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2b06      	cmp	r3, #6
 800d032:	d010      	beq.n	800d056 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f042 0201 	orr.w	r2, r2, #1
 800d042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d044:	e007      	b.n	800d056 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f042 0201 	orr.w	r2, r2, #1
 800d054:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d056:	2300      	movs	r3, #0
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	40010000 	.word	0x40010000
 800d064:	40010400 	.word	0x40010400
 800d068:	40000400 	.word	0x40000400
 800d06c:	40000800 	.word	0x40000800
 800d070:	40000c00 	.word	0x40000c00
 800d074:	40014000 	.word	0x40014000
 800d078:	40001800 	.word	0x40001800

0800d07c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b086      	sub	sp, #24
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d101      	bne.n	800d090 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d08c:	2301      	movs	r3, #1
 800d08e:	e097      	b.n	800d1c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d096:	b2db      	uxtb	r3, r3
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d106      	bne.n	800d0aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7fc fbcf 	bl	8009848 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2202      	movs	r2, #2
 800d0ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	689b      	ldr	r3, [r3, #8]
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	6812      	ldr	r2, [r2, #0]
 800d0bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d0c0:	f023 0307 	bic.w	r3, r3, #7
 800d0c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	f000 fa91 	bl	800d5f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	699b      	ldr	r3, [r3, #24]
 800d0e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	6a1b      	ldr	r3, [r3, #32]
 800d0ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	697a      	ldr	r2, [r7, #20]
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d0fe:	f023 0303 	bic.w	r3, r3, #3
 800d102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	689a      	ldr	r2, [r3, #8]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	699b      	ldr	r3, [r3, #24]
 800d10c:	021b      	lsls	r3, r3, #8
 800d10e:	4313      	orrs	r3, r2
 800d110:	693a      	ldr	r2, [r7, #16]
 800d112:	4313      	orrs	r3, r2
 800d114:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800d11c:	f023 030c 	bic.w	r3, r3, #12
 800d120:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d128:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d12c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	68da      	ldr	r2, [r3, #12]
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	69db      	ldr	r3, [r3, #28]
 800d136:	021b      	lsls	r3, r3, #8
 800d138:	4313      	orrs	r3, r2
 800d13a:	693a      	ldr	r2, [r7, #16]
 800d13c:	4313      	orrs	r3, r2
 800d13e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	691b      	ldr	r3, [r3, #16]
 800d144:	011a      	lsls	r2, r3, #4
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	6a1b      	ldr	r3, [r3, #32]
 800d14a:	031b      	lsls	r3, r3, #12
 800d14c:	4313      	orrs	r3, r2
 800d14e:	693a      	ldr	r2, [r7, #16]
 800d150:	4313      	orrs	r3, r2
 800d152:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800d15a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800d162:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	685a      	ldr	r2, [r3, #4]
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	695b      	ldr	r3, [r3, #20]
 800d16c:	011b      	lsls	r3, r3, #4
 800d16e:	4313      	orrs	r3, r2
 800d170:	68fa      	ldr	r2, [r7, #12]
 800d172:	4313      	orrs	r3, r2
 800d174:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	697a      	ldr	r2, [r7, #20]
 800d17c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	693a      	ldr	r2, [r7, #16]
 800d184:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2201      	movs	r2, #1
 800d192:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2201      	movs	r2, #1
 800d19a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d1be:	2300      	movs	r3, #0
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3718      	adds	r7, #24
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d1d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d1e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d1e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d1f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d110      	bne.n	800d21a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d1f8:	7bfb      	ldrb	r3, [r7, #15]
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d102      	bne.n	800d204 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d1fe:	7b7b      	ldrb	r3, [r7, #13]
 800d200:	2b01      	cmp	r3, #1
 800d202:	d001      	beq.n	800d208 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800d204:	2301      	movs	r3, #1
 800d206:	e069      	b.n	800d2dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2202      	movs	r2, #2
 800d20c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2202      	movs	r2, #2
 800d214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d218:	e031      	b.n	800d27e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	2b04      	cmp	r3, #4
 800d21e:	d110      	bne.n	800d242 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d220:	7bbb      	ldrb	r3, [r7, #14]
 800d222:	2b01      	cmp	r3, #1
 800d224:	d102      	bne.n	800d22c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d226:	7b3b      	ldrb	r3, [r7, #12]
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d001      	beq.n	800d230 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800d22c:	2301      	movs	r3, #1
 800d22e:	e055      	b.n	800d2dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2202      	movs	r2, #2
 800d234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2202      	movs	r2, #2
 800d23c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d240:	e01d      	b.n	800d27e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d242:	7bfb      	ldrb	r3, [r7, #15]
 800d244:	2b01      	cmp	r3, #1
 800d246:	d108      	bne.n	800d25a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d248:	7bbb      	ldrb	r3, [r7, #14]
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d105      	bne.n	800d25a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d24e:	7b7b      	ldrb	r3, [r7, #13]
 800d250:	2b01      	cmp	r3, #1
 800d252:	d102      	bne.n	800d25a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d254:	7b3b      	ldrb	r3, [r7, #12]
 800d256:	2b01      	cmp	r3, #1
 800d258:	d001      	beq.n	800d25e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800d25a:	2301      	movs	r3, #1
 800d25c:	e03e      	b.n	800d2dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2202      	movs	r2, #2
 800d262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2202      	movs	r2, #2
 800d26a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2202      	movs	r2, #2
 800d272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2202      	movs	r2, #2
 800d27a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d003      	beq.n	800d28c <HAL_TIM_Encoder_Start+0xc4>
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	2b04      	cmp	r3, #4
 800d288:	d008      	beq.n	800d29c <HAL_TIM_Encoder_Start+0xd4>
 800d28a:	e00f      	b.n	800d2ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2201      	movs	r2, #1
 800d292:	2100      	movs	r1, #0
 800d294:	4618      	mov	r0, r3
 800d296:	f000 fca5 	bl	800dbe4 <TIM_CCxChannelCmd>
      break;
 800d29a:	e016      	b.n	800d2ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	2104      	movs	r1, #4
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f000 fc9d 	bl	800dbe4 <TIM_CCxChannelCmd>
      break;
 800d2aa:	e00e      	b.n	800d2ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	2100      	movs	r1, #0
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f000 fc95 	bl	800dbe4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2201      	movs	r2, #1
 800d2c0:	2104      	movs	r1, #4
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f000 fc8e 	bl	800dbe4 <TIM_CCxChannelCmd>
      break;
 800d2c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f042 0201 	orr.w	r2, r2, #1
 800d2d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3710      	adds	r7, #16
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b086      	sub	sp, #24
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d101      	bne.n	800d302 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d2fe:	2302      	movs	r3, #2
 800d300:	e0ae      	b.n	800d460 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2201      	movs	r2, #1
 800d306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2b0c      	cmp	r3, #12
 800d30e:	f200 809f 	bhi.w	800d450 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d312:	a201      	add	r2, pc, #4	@ (adr r2, 800d318 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d318:	0800d34d 	.word	0x0800d34d
 800d31c:	0800d451 	.word	0x0800d451
 800d320:	0800d451 	.word	0x0800d451
 800d324:	0800d451 	.word	0x0800d451
 800d328:	0800d38d 	.word	0x0800d38d
 800d32c:	0800d451 	.word	0x0800d451
 800d330:	0800d451 	.word	0x0800d451
 800d334:	0800d451 	.word	0x0800d451
 800d338:	0800d3cf 	.word	0x0800d3cf
 800d33c:	0800d451 	.word	0x0800d451
 800d340:	0800d451 	.word	0x0800d451
 800d344:	0800d451 	.word	0x0800d451
 800d348:	0800d40f 	.word	0x0800d40f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	68b9      	ldr	r1, [r7, #8]
 800d352:	4618      	mov	r0, r3
 800d354:	f000 f9fc 	bl	800d750 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	699a      	ldr	r2, [r3, #24]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f042 0208 	orr.w	r2, r2, #8
 800d366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	699a      	ldr	r2, [r3, #24]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f022 0204 	bic.w	r2, r2, #4
 800d376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	6999      	ldr	r1, [r3, #24]
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	691a      	ldr	r2, [r3, #16]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	430a      	orrs	r2, r1
 800d388:	619a      	str	r2, [r3, #24]
      break;
 800d38a:	e064      	b.n	800d456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	68b9      	ldr	r1, [r7, #8]
 800d392:	4618      	mov	r0, r3
 800d394:	f000 fa4c 	bl	800d830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	699a      	ldr	r2, [r3, #24]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d3a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	699a      	ldr	r2, [r3, #24]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d3b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	6999      	ldr	r1, [r3, #24]
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	021a      	lsls	r2, r3, #8
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	430a      	orrs	r2, r1
 800d3ca:	619a      	str	r2, [r3, #24]
      break;
 800d3cc:	e043      	b.n	800d456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	68b9      	ldr	r1, [r7, #8]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f000 faa1 	bl	800d91c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	69da      	ldr	r2, [r3, #28]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f042 0208 	orr.w	r2, r2, #8
 800d3e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	69da      	ldr	r2, [r3, #28]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f022 0204 	bic.w	r2, r2, #4
 800d3f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	69d9      	ldr	r1, [r3, #28]
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	691a      	ldr	r2, [r3, #16]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	430a      	orrs	r2, r1
 800d40a:	61da      	str	r2, [r3, #28]
      break;
 800d40c:	e023      	b.n	800d456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	68b9      	ldr	r1, [r7, #8]
 800d414:	4618      	mov	r0, r3
 800d416:	f000 faf5 	bl	800da04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	69da      	ldr	r2, [r3, #28]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	69da      	ldr	r2, [r3, #28]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	69d9      	ldr	r1, [r3, #28]
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	691b      	ldr	r3, [r3, #16]
 800d444:	021a      	lsls	r2, r3, #8
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	430a      	orrs	r2, r1
 800d44c:	61da      	str	r2, [r3, #28]
      break;
 800d44e:	e002      	b.n	800d456 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d450:	2301      	movs	r3, #1
 800d452:	75fb      	strb	r3, [r7, #23]
      break;
 800d454:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2200      	movs	r2, #0
 800d45a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d45e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3718      	adds	r7, #24
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d472:	2300      	movs	r3, #0
 800d474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d101      	bne.n	800d484 <HAL_TIM_ConfigClockSource+0x1c>
 800d480:	2302      	movs	r3, #2
 800d482:	e0b4      	b.n	800d5ee <HAL_TIM_ConfigClockSource+0x186>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2201      	movs	r2, #1
 800d488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2202      	movs	r2, #2
 800d490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d4a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d4aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	68ba      	ldr	r2, [r7, #8]
 800d4b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d4bc:	d03e      	beq.n	800d53c <HAL_TIM_ConfigClockSource+0xd4>
 800d4be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d4c2:	f200 8087 	bhi.w	800d5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800d4c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4ca:	f000 8086 	beq.w	800d5da <HAL_TIM_ConfigClockSource+0x172>
 800d4ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4d2:	d87f      	bhi.n	800d5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800d4d4:	2b70      	cmp	r3, #112	@ 0x70
 800d4d6:	d01a      	beq.n	800d50e <HAL_TIM_ConfigClockSource+0xa6>
 800d4d8:	2b70      	cmp	r3, #112	@ 0x70
 800d4da:	d87b      	bhi.n	800d5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800d4dc:	2b60      	cmp	r3, #96	@ 0x60
 800d4de:	d050      	beq.n	800d582 <HAL_TIM_ConfigClockSource+0x11a>
 800d4e0:	2b60      	cmp	r3, #96	@ 0x60
 800d4e2:	d877      	bhi.n	800d5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800d4e4:	2b50      	cmp	r3, #80	@ 0x50
 800d4e6:	d03c      	beq.n	800d562 <HAL_TIM_ConfigClockSource+0xfa>
 800d4e8:	2b50      	cmp	r3, #80	@ 0x50
 800d4ea:	d873      	bhi.n	800d5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800d4ec:	2b40      	cmp	r3, #64	@ 0x40
 800d4ee:	d058      	beq.n	800d5a2 <HAL_TIM_ConfigClockSource+0x13a>
 800d4f0:	2b40      	cmp	r3, #64	@ 0x40
 800d4f2:	d86f      	bhi.n	800d5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800d4f4:	2b30      	cmp	r3, #48	@ 0x30
 800d4f6:	d064      	beq.n	800d5c2 <HAL_TIM_ConfigClockSource+0x15a>
 800d4f8:	2b30      	cmp	r3, #48	@ 0x30
 800d4fa:	d86b      	bhi.n	800d5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800d4fc:	2b20      	cmp	r3, #32
 800d4fe:	d060      	beq.n	800d5c2 <HAL_TIM_ConfigClockSource+0x15a>
 800d500:	2b20      	cmp	r3, #32
 800d502:	d867      	bhi.n	800d5d4 <HAL_TIM_ConfigClockSource+0x16c>
 800d504:	2b00      	cmp	r3, #0
 800d506:	d05c      	beq.n	800d5c2 <HAL_TIM_ConfigClockSource+0x15a>
 800d508:	2b10      	cmp	r3, #16
 800d50a:	d05a      	beq.n	800d5c2 <HAL_TIM_ConfigClockSource+0x15a>
 800d50c:	e062      	b.n	800d5d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d51e:	f000 fb41 	bl	800dba4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	689b      	ldr	r3, [r3, #8]
 800d528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	68ba      	ldr	r2, [r7, #8]
 800d538:	609a      	str	r2, [r3, #8]
      break;
 800d53a:	e04f      	b.n	800d5dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d54c:	f000 fb2a 	bl	800dba4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	689a      	ldr	r2, [r3, #8]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d55e:	609a      	str	r2, [r3, #8]
      break;
 800d560:	e03c      	b.n	800d5dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d56e:	461a      	mov	r2, r3
 800d570:	f000 fa9e 	bl	800dab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2150      	movs	r1, #80	@ 0x50
 800d57a:	4618      	mov	r0, r3
 800d57c:	f000 faf7 	bl	800db6e <TIM_ITRx_SetConfig>
      break;
 800d580:	e02c      	b.n	800d5dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d58e:	461a      	mov	r2, r3
 800d590:	f000 fabd 	bl	800db0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2160      	movs	r1, #96	@ 0x60
 800d59a:	4618      	mov	r0, r3
 800d59c:	f000 fae7 	bl	800db6e <TIM_ITRx_SetConfig>
      break;
 800d5a0:	e01c      	b.n	800d5dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	f000 fa7e 	bl	800dab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2140      	movs	r1, #64	@ 0x40
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f000 fad7 	bl	800db6e <TIM_ITRx_SetConfig>
      break;
 800d5c0:	e00c      	b.n	800d5dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	4610      	mov	r0, r2
 800d5ce:	f000 face 	bl	800db6e <TIM_ITRx_SetConfig>
      break;
 800d5d2:	e003      	b.n	800d5dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	73fb      	strb	r3, [r7, #15]
      break;
 800d5d8:	e000      	b.n	800d5dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d5da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
	...

0800d5f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4a46      	ldr	r2, [pc, #280]	@ (800d724 <TIM_Base_SetConfig+0x12c>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d013      	beq.n	800d638 <TIM_Base_SetConfig+0x40>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d616:	d00f      	beq.n	800d638 <TIM_Base_SetConfig+0x40>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	4a43      	ldr	r2, [pc, #268]	@ (800d728 <TIM_Base_SetConfig+0x130>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d00b      	beq.n	800d638 <TIM_Base_SetConfig+0x40>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4a42      	ldr	r2, [pc, #264]	@ (800d72c <TIM_Base_SetConfig+0x134>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d007      	beq.n	800d638 <TIM_Base_SetConfig+0x40>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	4a41      	ldr	r2, [pc, #260]	@ (800d730 <TIM_Base_SetConfig+0x138>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d003      	beq.n	800d638 <TIM_Base_SetConfig+0x40>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	4a40      	ldr	r2, [pc, #256]	@ (800d734 <TIM_Base_SetConfig+0x13c>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d108      	bne.n	800d64a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d63e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	68fa      	ldr	r2, [r7, #12]
 800d646:	4313      	orrs	r3, r2
 800d648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4a35      	ldr	r2, [pc, #212]	@ (800d724 <TIM_Base_SetConfig+0x12c>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d02b      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d658:	d027      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4a32      	ldr	r2, [pc, #200]	@ (800d728 <TIM_Base_SetConfig+0x130>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d023      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4a31      	ldr	r2, [pc, #196]	@ (800d72c <TIM_Base_SetConfig+0x134>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d01f      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4a30      	ldr	r2, [pc, #192]	@ (800d730 <TIM_Base_SetConfig+0x138>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d01b      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4a2f      	ldr	r2, [pc, #188]	@ (800d734 <TIM_Base_SetConfig+0x13c>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d017      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4a2e      	ldr	r2, [pc, #184]	@ (800d738 <TIM_Base_SetConfig+0x140>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d013      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4a2d      	ldr	r2, [pc, #180]	@ (800d73c <TIM_Base_SetConfig+0x144>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d00f      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4a2c      	ldr	r2, [pc, #176]	@ (800d740 <TIM_Base_SetConfig+0x148>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d00b      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4a2b      	ldr	r2, [pc, #172]	@ (800d744 <TIM_Base_SetConfig+0x14c>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d007      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4a2a      	ldr	r2, [pc, #168]	@ (800d748 <TIM_Base_SetConfig+0x150>)
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d003      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	4a29      	ldr	r2, [pc, #164]	@ (800d74c <TIM_Base_SetConfig+0x154>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d108      	bne.n	800d6bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d6b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	68fa      	ldr	r2, [r7, #12]
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	695b      	ldr	r3, [r3, #20]
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	689a      	ldr	r2, [r3, #8]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	4a10      	ldr	r2, [pc, #64]	@ (800d724 <TIM_Base_SetConfig+0x12c>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d003      	beq.n	800d6f0 <TIM_Base_SetConfig+0xf8>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4a12      	ldr	r2, [pc, #72]	@ (800d734 <TIM_Base_SetConfig+0x13c>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d103      	bne.n	800d6f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	691a      	ldr	r2, [r3, #16]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	691b      	ldr	r3, [r3, #16]
 800d702:	f003 0301 	and.w	r3, r3, #1
 800d706:	2b01      	cmp	r3, #1
 800d708:	d105      	bne.n	800d716 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	691b      	ldr	r3, [r3, #16]
 800d70e:	f023 0201 	bic.w	r2, r3, #1
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	611a      	str	r2, [r3, #16]
  }
}
 800d716:	bf00      	nop
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	40010000 	.word	0x40010000
 800d728:	40000400 	.word	0x40000400
 800d72c:	40000800 	.word	0x40000800
 800d730:	40000c00 	.word	0x40000c00
 800d734:	40010400 	.word	0x40010400
 800d738:	40014000 	.word	0x40014000
 800d73c:	40014400 	.word	0x40014400
 800d740:	40014800 	.word	0x40014800
 800d744:	40001800 	.word	0x40001800
 800d748:	40001c00 	.word	0x40001c00
 800d74c:	40002000 	.word	0x40002000

0800d750 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d750:	b480      	push	{r7}
 800d752:	b087      	sub	sp, #28
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6a1b      	ldr	r3, [r3, #32]
 800d75e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6a1b      	ldr	r3, [r3, #32]
 800d764:	f023 0201 	bic.w	r2, r3, #1
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	699b      	ldr	r3, [r3, #24]
 800d776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d77e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f023 0303 	bic.w	r3, r3, #3
 800d786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	4313      	orrs	r3, r2
 800d790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	f023 0302 	bic.w	r3, r3, #2
 800d798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	697a      	ldr	r2, [r7, #20]
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	4a20      	ldr	r2, [pc, #128]	@ (800d828 <TIM_OC1_SetConfig+0xd8>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d003      	beq.n	800d7b4 <TIM_OC1_SetConfig+0x64>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a1f      	ldr	r2, [pc, #124]	@ (800d82c <TIM_OC1_SetConfig+0xdc>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d10c      	bne.n	800d7ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	f023 0308 	bic.w	r3, r3, #8
 800d7ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	697a      	ldr	r2, [r7, #20]
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	f023 0304 	bic.w	r3, r3, #4
 800d7cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	4a15      	ldr	r2, [pc, #84]	@ (800d828 <TIM_OC1_SetConfig+0xd8>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d003      	beq.n	800d7de <TIM_OC1_SetConfig+0x8e>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	4a14      	ldr	r2, [pc, #80]	@ (800d82c <TIM_OC1_SetConfig+0xdc>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d111      	bne.n	800d802 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d7e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d7ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	695b      	ldr	r3, [r3, #20]
 800d7f2:	693a      	ldr	r2, [r7, #16]
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	699b      	ldr	r3, [r3, #24]
 800d7fc:	693a      	ldr	r2, [r7, #16]
 800d7fe:	4313      	orrs	r3, r2
 800d800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	68fa      	ldr	r2, [r7, #12]
 800d80c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	685a      	ldr	r2, [r3, #4]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	697a      	ldr	r2, [r7, #20]
 800d81a:	621a      	str	r2, [r3, #32]
}
 800d81c:	bf00      	nop
 800d81e:	371c      	adds	r7, #28
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr
 800d828:	40010000 	.word	0x40010000
 800d82c:	40010400 	.word	0x40010400

0800d830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d830:	b480      	push	{r7}
 800d832:	b087      	sub	sp, #28
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6a1b      	ldr	r3, [r3, #32]
 800d83e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6a1b      	ldr	r3, [r3, #32]
 800d844:	f023 0210 	bic.w	r2, r3, #16
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	699b      	ldr	r3, [r3, #24]
 800d856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d85e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	021b      	lsls	r3, r3, #8
 800d86e:	68fa      	ldr	r2, [r7, #12]
 800d870:	4313      	orrs	r3, r2
 800d872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	f023 0320 	bic.w	r3, r3, #32
 800d87a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	011b      	lsls	r3, r3, #4
 800d882:	697a      	ldr	r2, [r7, #20]
 800d884:	4313      	orrs	r3, r2
 800d886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	4a22      	ldr	r2, [pc, #136]	@ (800d914 <TIM_OC2_SetConfig+0xe4>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d003      	beq.n	800d898 <TIM_OC2_SetConfig+0x68>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	4a21      	ldr	r2, [pc, #132]	@ (800d918 <TIM_OC2_SetConfig+0xe8>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d10d      	bne.n	800d8b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d89e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	011b      	lsls	r3, r3, #4
 800d8a6:	697a      	ldr	r2, [r7, #20]
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	4a17      	ldr	r2, [pc, #92]	@ (800d914 <TIM_OC2_SetConfig+0xe4>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d003      	beq.n	800d8c4 <TIM_OC2_SetConfig+0x94>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	4a16      	ldr	r2, [pc, #88]	@ (800d918 <TIM_OC2_SetConfig+0xe8>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d113      	bne.n	800d8ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d8ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d8d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	695b      	ldr	r3, [r3, #20]
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	693a      	ldr	r2, [r7, #16]
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	699b      	ldr	r3, [r3, #24]
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	693a      	ldr	r2, [r7, #16]
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	693a      	ldr	r2, [r7, #16]
 800d8f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	68fa      	ldr	r2, [r7, #12]
 800d8f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	685a      	ldr	r2, [r3, #4]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	697a      	ldr	r2, [r7, #20]
 800d904:	621a      	str	r2, [r3, #32]
}
 800d906:	bf00      	nop
 800d908:	371c      	adds	r7, #28
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop
 800d914:	40010000 	.word	0x40010000
 800d918:	40010400 	.word	0x40010400

0800d91c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b087      	sub	sp, #28
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6a1b      	ldr	r3, [r3, #32]
 800d92a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6a1b      	ldr	r3, [r3, #32]
 800d930:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	69db      	ldr	r3, [r3, #28]
 800d942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d94a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f023 0303 	bic.w	r3, r3, #3
 800d952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	4313      	orrs	r3, r2
 800d95c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	021b      	lsls	r3, r3, #8
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	4313      	orrs	r3, r2
 800d970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	4a21      	ldr	r2, [pc, #132]	@ (800d9fc <TIM_OC3_SetConfig+0xe0>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d003      	beq.n	800d982 <TIM_OC3_SetConfig+0x66>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	4a20      	ldr	r2, [pc, #128]	@ (800da00 <TIM_OC3_SetConfig+0xe4>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d10d      	bne.n	800d99e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	021b      	lsls	r3, r3, #8
 800d990:	697a      	ldr	r2, [r7, #20]
 800d992:	4313      	orrs	r3, r2
 800d994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d99c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4a16      	ldr	r2, [pc, #88]	@ (800d9fc <TIM_OC3_SetConfig+0xe0>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d003      	beq.n	800d9ae <TIM_OC3_SetConfig+0x92>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4a15      	ldr	r2, [pc, #84]	@ (800da00 <TIM_OC3_SetConfig+0xe4>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d113      	bne.n	800d9d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d9b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d9bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	695b      	ldr	r3, [r3, #20]
 800d9c2:	011b      	lsls	r3, r3, #4
 800d9c4:	693a      	ldr	r2, [r7, #16]
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	699b      	ldr	r3, [r3, #24]
 800d9ce:	011b      	lsls	r3, r3, #4
 800d9d0:	693a      	ldr	r2, [r7, #16]
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	693a      	ldr	r2, [r7, #16]
 800d9da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	68fa      	ldr	r2, [r7, #12]
 800d9e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	685a      	ldr	r2, [r3, #4]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	697a      	ldr	r2, [r7, #20]
 800d9ee:	621a      	str	r2, [r3, #32]
}
 800d9f0:	bf00      	nop
 800d9f2:	371c      	adds	r7, #28
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr
 800d9fc:	40010000 	.word	0x40010000
 800da00:	40010400 	.word	0x40010400

0800da04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da04:	b480      	push	{r7}
 800da06:	b087      	sub	sp, #28
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a1b      	ldr	r3, [r3, #32]
 800da12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6a1b      	ldr	r3, [r3, #32]
 800da18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	69db      	ldr	r3, [r3, #28]
 800da2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800da3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	021b      	lsls	r3, r3, #8
 800da42:	68fa      	ldr	r2, [r7, #12]
 800da44:	4313      	orrs	r3, r2
 800da46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800da4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	031b      	lsls	r3, r3, #12
 800da56:	693a      	ldr	r2, [r7, #16]
 800da58:	4313      	orrs	r3, r2
 800da5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	4a12      	ldr	r2, [pc, #72]	@ (800daa8 <TIM_OC4_SetConfig+0xa4>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d003      	beq.n	800da6c <TIM_OC4_SetConfig+0x68>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	4a11      	ldr	r2, [pc, #68]	@ (800daac <TIM_OC4_SetConfig+0xa8>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d109      	bne.n	800da80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800da72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	695b      	ldr	r3, [r3, #20]
 800da78:	019b      	lsls	r3, r3, #6
 800da7a:	697a      	ldr	r2, [r7, #20]
 800da7c:	4313      	orrs	r3, r2
 800da7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	697a      	ldr	r2, [r7, #20]
 800da84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	685a      	ldr	r2, [r3, #4]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	693a      	ldr	r2, [r7, #16]
 800da98:	621a      	str	r2, [r3, #32]
}
 800da9a:	bf00      	nop
 800da9c:	371c      	adds	r7, #28
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	40010000 	.word	0x40010000
 800daac:	40010400 	.word	0x40010400

0800dab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b087      	sub	sp, #28
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	6a1b      	ldr	r3, [r3, #32]
 800dac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	6a1b      	ldr	r3, [r3, #32]
 800dac6:	f023 0201 	bic.w	r2, r3, #1
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	699b      	ldr	r3, [r3, #24]
 800dad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	011b      	lsls	r3, r3, #4
 800dae0:	693a      	ldr	r2, [r7, #16]
 800dae2:	4313      	orrs	r3, r2
 800dae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	f023 030a 	bic.w	r3, r3, #10
 800daec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800daee:	697a      	ldr	r2, [r7, #20]
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	693a      	ldr	r2, [r7, #16]
 800dafa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	697a      	ldr	r2, [r7, #20]
 800db00:	621a      	str	r2, [r3, #32]
}
 800db02:	bf00      	nop
 800db04:	371c      	adds	r7, #28
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr

0800db0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db0e:	b480      	push	{r7}
 800db10:	b087      	sub	sp, #28
 800db12:	af00      	add	r7, sp, #0
 800db14:	60f8      	str	r0, [r7, #12]
 800db16:	60b9      	str	r1, [r7, #8]
 800db18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	6a1b      	ldr	r3, [r3, #32]
 800db1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6a1b      	ldr	r3, [r3, #32]
 800db24:	f023 0210 	bic.w	r2, r3, #16
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	699b      	ldr	r3, [r3, #24]
 800db30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800db38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	031b      	lsls	r3, r3, #12
 800db3e:	693a      	ldr	r2, [r7, #16]
 800db40:	4313      	orrs	r3, r2
 800db42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800db4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	011b      	lsls	r3, r3, #4
 800db50:	697a      	ldr	r2, [r7, #20]
 800db52:	4313      	orrs	r3, r2
 800db54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	693a      	ldr	r2, [r7, #16]
 800db5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	697a      	ldr	r2, [r7, #20]
 800db60:	621a      	str	r2, [r3, #32]
}
 800db62:	bf00      	nop
 800db64:	371c      	adds	r7, #28
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr

0800db6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800db6e:	b480      	push	{r7}
 800db70:	b085      	sub	sp, #20
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
 800db76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	689b      	ldr	r3, [r3, #8]
 800db7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800db86:	683a      	ldr	r2, [r7, #0]
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	4313      	orrs	r3, r2
 800db8c:	f043 0307 	orr.w	r3, r3, #7
 800db90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	609a      	str	r2, [r3, #8]
}
 800db98:	bf00      	nop
 800db9a:	3714      	adds	r7, #20
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr

0800dba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b087      	sub	sp, #28
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
 800dbb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dbbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	021a      	lsls	r2, r3, #8
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	431a      	orrs	r2, r3
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	697a      	ldr	r2, [r7, #20]
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	697a      	ldr	r2, [r7, #20]
 800dbd6:	609a      	str	r2, [r3, #8]
}
 800dbd8:	bf00      	nop
 800dbda:	371c      	adds	r7, #28
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b087      	sub	sp, #28
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	f003 031f 	and.w	r3, r3, #31
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6a1a      	ldr	r2, [r3, #32]
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	43db      	mvns	r3, r3
 800dc06:	401a      	ands	r2, r3
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6a1a      	ldr	r2, [r3, #32]
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	f003 031f 	and.w	r3, r3, #31
 800dc16:	6879      	ldr	r1, [r7, #4]
 800dc18:	fa01 f303 	lsl.w	r3, r1, r3
 800dc1c:	431a      	orrs	r2, r3
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	621a      	str	r2, [r3, #32]
}
 800dc22:	bf00      	nop
 800dc24:	371c      	adds	r7, #28
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr
	...

0800dc30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b085      	sub	sp, #20
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d101      	bne.n	800dc48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc44:	2302      	movs	r3, #2
 800dc46:	e05a      	b.n	800dcfe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2202      	movs	r2, #2
 800dc54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	68fa      	ldr	r2, [r7, #12]
 800dc76:	4313      	orrs	r3, r2
 800dc78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	68fa      	ldr	r2, [r7, #12]
 800dc80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4a21      	ldr	r2, [pc, #132]	@ (800dd0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d022      	beq.n	800dcd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc94:	d01d      	beq.n	800dcd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a1d      	ldr	r2, [pc, #116]	@ (800dd10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d018      	beq.n	800dcd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a1b      	ldr	r2, [pc, #108]	@ (800dd14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d013      	beq.n	800dcd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4a1a      	ldr	r2, [pc, #104]	@ (800dd18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d00e      	beq.n	800dcd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4a18      	ldr	r2, [pc, #96]	@ (800dd1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d009      	beq.n	800dcd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4a17      	ldr	r2, [pc, #92]	@ (800dd20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d004      	beq.n	800dcd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a15      	ldr	r2, [pc, #84]	@ (800dd24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d10c      	bne.n	800dcec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dcd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	68ba      	ldr	r2, [r7, #8]
 800dce0:	4313      	orrs	r3, r2
 800dce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	68ba      	ldr	r2, [r7, #8]
 800dcea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dcfc:	2300      	movs	r3, #0
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3714      	adds	r7, #20
 800dd02:	46bd      	mov	sp, r7
 800dd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd08:	4770      	bx	lr
 800dd0a:	bf00      	nop
 800dd0c:	40010000 	.word	0x40010000
 800dd10:	40000400 	.word	0x40000400
 800dd14:	40000800 	.word	0x40000800
 800dd18:	40000c00 	.word	0x40000c00
 800dd1c:	40010400 	.word	0x40010400
 800dd20:	40014000 	.word	0x40014000
 800dd24:	40001800 	.word	0x40001800

0800dd28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dd32:	2300      	movs	r3, #0
 800dd34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d101      	bne.n	800dd44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dd40:	2302      	movs	r3, #2
 800dd42:	e03d      	b.n	800ddc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2201      	movs	r2, #1
 800dd48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	4313      	orrs	r3, r2
 800dd58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	4313      	orrs	r3, r2
 800dd66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	4313      	orrs	r3, r2
 800dd74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4313      	orrs	r3, r2
 800dd82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	691b      	ldr	r3, [r3, #16]
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	695b      	ldr	r3, [r3, #20]
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	69db      	ldr	r3, [r3, #28]
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ddbe:	2300      	movs	r3, #0
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3714      	adds	r7, #20
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr

0800ddcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d101      	bne.n	800ddde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ddda:	2301      	movs	r3, #1
 800dddc:	e042      	b.n	800de64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d106      	bne.n	800ddf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2200      	movs	r2, #0
 800ddee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f7fc fb7c 	bl	800a4f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2224      	movs	r2, #36	@ 0x24
 800ddfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	68da      	ldr	r2, [r3, #12]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800de0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f000 fddb 	bl	800e9cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	691a      	ldr	r2, [r3, #16]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800de24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	695a      	ldr	r2, [r3, #20]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800de34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	68da      	ldr	r2, [r3, #12]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800de44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2220      	movs	r2, #32
 800de50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2220      	movs	r2, #32
 800de58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2200      	movs	r2, #0
 800de60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800de62:	2300      	movs	r3, #0
}
 800de64:	4618      	mov	r0, r3
 800de66:	3708      	adds	r7, #8
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b08a      	sub	sp, #40	@ 0x28
 800de70:	af02      	add	r7, sp, #8
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	603b      	str	r3, [r7, #0]
 800de78:	4613      	mov	r3, r2
 800de7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800de7c:	2300      	movs	r3, #0
 800de7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de86:	b2db      	uxtb	r3, r3
 800de88:	2b20      	cmp	r3, #32
 800de8a:	d175      	bne.n	800df78 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d002      	beq.n	800de98 <HAL_UART_Transmit+0x2c>
 800de92:	88fb      	ldrh	r3, [r7, #6]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d101      	bne.n	800de9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800de98:	2301      	movs	r3, #1
 800de9a:	e06e      	b.n	800df7a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2200      	movs	r2, #0
 800dea0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2221      	movs	r2, #33	@ 0x21
 800dea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800deaa:	f7fc fd57 	bl	800a95c <HAL_GetTick>
 800deae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	88fa      	ldrh	r2, [r7, #6]
 800deb4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	88fa      	ldrh	r2, [r7, #6]
 800deba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dec4:	d108      	bne.n	800ded8 <HAL_UART_Transmit+0x6c>
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	691b      	ldr	r3, [r3, #16]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d104      	bne.n	800ded8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800dece:	2300      	movs	r3, #0
 800ded0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	61bb      	str	r3, [r7, #24]
 800ded6:	e003      	b.n	800dee0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dedc:	2300      	movs	r3, #0
 800dede:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dee0:	e02e      	b.n	800df40 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	9300      	str	r3, [sp, #0]
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	2200      	movs	r2, #0
 800deea:	2180      	movs	r1, #128	@ 0x80
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	f000 fb3d 	bl	800e56c <UART_WaitOnFlagUntilTimeout>
 800def2:	4603      	mov	r3, r0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d005      	beq.n	800df04 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2220      	movs	r2, #32
 800defc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800df00:	2303      	movs	r3, #3
 800df02:	e03a      	b.n	800df7a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d10b      	bne.n	800df22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	881b      	ldrh	r3, [r3, #0]
 800df0e:	461a      	mov	r2, r3
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	3302      	adds	r3, #2
 800df1e:	61bb      	str	r3, [r7, #24]
 800df20:	e007      	b.n	800df32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	781a      	ldrb	r2, [r3, #0]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	3301      	adds	r3, #1
 800df30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800df36:	b29b      	uxth	r3, r3
 800df38:	3b01      	subs	r3, #1
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800df44:	b29b      	uxth	r3, r3
 800df46:	2b00      	cmp	r3, #0
 800df48:	d1cb      	bne.n	800dee2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	9300      	str	r3, [sp, #0]
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	2200      	movs	r2, #0
 800df52:	2140      	movs	r1, #64	@ 0x40
 800df54:	68f8      	ldr	r0, [r7, #12]
 800df56:	f000 fb09 	bl	800e56c <UART_WaitOnFlagUntilTimeout>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d005      	beq.n	800df6c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2220      	movs	r2, #32
 800df64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800df68:	2303      	movs	r3, #3
 800df6a:	e006      	b.n	800df7a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2220      	movs	r2, #32
 800df70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800df74:	2300      	movs	r3, #0
 800df76:	e000      	b.n	800df7a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800df78:	2302      	movs	r3, #2
  }
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3720      	adds	r7, #32
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b084      	sub	sp, #16
 800df86:	af00      	add	r7, sp, #0
 800df88:	60f8      	str	r0, [r7, #12]
 800df8a:	60b9      	str	r1, [r7, #8]
 800df8c:	4613      	mov	r3, r2
 800df8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800df96:	b2db      	uxtb	r3, r3
 800df98:	2b20      	cmp	r3, #32
 800df9a:	d112      	bne.n	800dfc2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d002      	beq.n	800dfa8 <HAL_UART_Receive_IT+0x26>
 800dfa2:	88fb      	ldrh	r3, [r7, #6]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d101      	bne.n	800dfac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e00b      	b.n	800dfc4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dfb2:	88fb      	ldrh	r3, [r7, #6]
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	68b9      	ldr	r1, [r7, #8]
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f000 fb30 	bl	800e61e <UART_Start_Receive_IT>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	e000      	b.n	800dfc4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800dfc2:	2302      	movs	r3, #2
  }
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3710      	adds	r7, #16
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b0ba      	sub	sp, #232	@ 0xe8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	695b      	ldr	r3, [r3, #20]
 800dfee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800dff2:	2300      	movs	r3, #0
 800dff4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800dff8:	2300      	movs	r3, #0
 800dffa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800dffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e002:	f003 030f 	and.w	r3, r3, #15
 800e006:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800e00a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d10f      	bne.n	800e032 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e016:	f003 0320 	and.w	r3, r3, #32
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d009      	beq.n	800e032 <HAL_UART_IRQHandler+0x66>
 800e01e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e022:	f003 0320 	and.w	r3, r3, #32
 800e026:	2b00      	cmp	r3, #0
 800e028:	d003      	beq.n	800e032 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f000 fc10 	bl	800e850 <UART_Receive_IT>
      return;
 800e030:	e25b      	b.n	800e4ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e036:	2b00      	cmp	r3, #0
 800e038:	f000 80de 	beq.w	800e1f8 <HAL_UART_IRQHandler+0x22c>
 800e03c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e040:	f003 0301 	and.w	r3, r3, #1
 800e044:	2b00      	cmp	r3, #0
 800e046:	d106      	bne.n	800e056 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e04c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800e050:	2b00      	cmp	r3, #0
 800e052:	f000 80d1 	beq.w	800e1f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e05a:	f003 0301 	and.w	r3, r3, #1
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00b      	beq.n	800e07a <HAL_UART_IRQHandler+0xae>
 800e062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d005      	beq.n	800e07a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e072:	f043 0201 	orr.w	r2, r3, #1
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e07e:	f003 0304 	and.w	r3, r3, #4
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00b      	beq.n	800e09e <HAL_UART_IRQHandler+0xd2>
 800e086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e08a:	f003 0301 	and.w	r3, r3, #1
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d005      	beq.n	800e09e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e096:	f043 0202 	orr.w	r2, r3, #2
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e09e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0a2:	f003 0302 	and.w	r3, r3, #2
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d00b      	beq.n	800e0c2 <HAL_UART_IRQHandler+0xf6>
 800e0aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e0ae:	f003 0301 	and.w	r3, r3, #1
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d005      	beq.n	800e0c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0ba:	f043 0204 	orr.w	r2, r3, #4
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e0c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0c6:	f003 0308 	and.w	r3, r3, #8
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d011      	beq.n	800e0f2 <HAL_UART_IRQHandler+0x126>
 800e0ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0d2:	f003 0320 	and.w	r3, r3, #32
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d105      	bne.n	800e0e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e0da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e0de:	f003 0301 	and.w	r3, r3, #1
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d005      	beq.n	800e0f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0ea:	f043 0208 	orr.w	r2, r3, #8
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	f000 81f2 	beq.w	800e4e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e0fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e100:	f003 0320 	and.w	r3, r3, #32
 800e104:	2b00      	cmp	r3, #0
 800e106:	d008      	beq.n	800e11a <HAL_UART_IRQHandler+0x14e>
 800e108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e10c:	f003 0320 	and.w	r3, r3, #32
 800e110:	2b00      	cmp	r3, #0
 800e112:	d002      	beq.n	800e11a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f000 fb9b 	bl	800e850 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	695b      	ldr	r3, [r3, #20]
 800e120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e124:	2b40      	cmp	r3, #64	@ 0x40
 800e126:	bf0c      	ite	eq
 800e128:	2301      	moveq	r3, #1
 800e12a:	2300      	movne	r3, #0
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e136:	f003 0308 	and.w	r3, r3, #8
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d103      	bne.n	800e146 <HAL_UART_IRQHandler+0x17a>
 800e13e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e142:	2b00      	cmp	r3, #0
 800e144:	d04f      	beq.n	800e1e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f000 faa3 	bl	800e692 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	695b      	ldr	r3, [r3, #20]
 800e152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e156:	2b40      	cmp	r3, #64	@ 0x40
 800e158:	d141      	bne.n	800e1de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	3314      	adds	r3, #20
 800e160:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e164:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e168:	e853 3f00 	ldrex	r3, [r3]
 800e16c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e170:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e178:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	3314      	adds	r3, #20
 800e182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e186:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e18a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e18e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e196:	e841 2300 	strex	r3, r2, [r1]
 800e19a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e19e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1d9      	bne.n	800e15a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d013      	beq.n	800e1d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1b2:	4a7e      	ldr	r2, [pc, #504]	@ (800e3ac <HAL_UART_IRQHandler+0x3e0>)
 800e1b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fc fd7f 	bl	800acbe <HAL_DMA_Abort_IT>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d016      	beq.n	800e1f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1d4:	e00e      	b.n	800e1f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 f994 	bl	800e504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1dc:	e00a      	b.n	800e1f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 f990 	bl	800e504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1e4:	e006      	b.n	800e1f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 f98c 	bl	800e504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800e1f2:	e175      	b.n	800e4e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1f4:	bf00      	nop
    return;
 800e1f6:	e173      	b.n	800e4e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	f040 814f 	bne.w	800e4a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e206:	f003 0310 	and.w	r3, r3, #16
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	f000 8148 	beq.w	800e4a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e214:	f003 0310 	and.w	r3, r3, #16
 800e218:	2b00      	cmp	r3, #0
 800e21a:	f000 8141 	beq.w	800e4a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e21e:	2300      	movs	r3, #0
 800e220:	60bb      	str	r3, [r7, #8]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	60bb      	str	r3, [r7, #8]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	60bb      	str	r3, [r7, #8]
 800e232:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	695b      	ldr	r3, [r3, #20]
 800e23a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e23e:	2b40      	cmp	r3, #64	@ 0x40
 800e240:	f040 80b6 	bne.w	800e3b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e250:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e254:	2b00      	cmp	r3, #0
 800e256:	f000 8145 	beq.w	800e4e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e25e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e262:	429a      	cmp	r2, r3
 800e264:	f080 813e 	bcs.w	800e4e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e26e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e274:	69db      	ldr	r3, [r3, #28]
 800e276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e27a:	f000 8088 	beq.w	800e38e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	330c      	adds	r3, #12
 800e284:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e288:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e28c:	e853 3f00 	ldrex	r3, [r3]
 800e290:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e294:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e29c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	330c      	adds	r3, #12
 800e2a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e2aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e2ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e2b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e2ba:	e841 2300 	strex	r3, r2, [r1]
 800e2be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e2c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d1d9      	bne.n	800e27e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	3314      	adds	r3, #20
 800e2d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e2d4:	e853 3f00 	ldrex	r3, [r3]
 800e2d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e2da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e2dc:	f023 0301 	bic.w	r3, r3, #1
 800e2e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	3314      	adds	r3, #20
 800e2ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e2ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e2f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e2f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e2fa:	e841 2300 	strex	r3, r2, [r1]
 800e2fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e300:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e302:	2b00      	cmp	r3, #0
 800e304:	d1e1      	bne.n	800e2ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	3314      	adds	r3, #20
 800e30c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e30e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e310:	e853 3f00 	ldrex	r3, [r3]
 800e314:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e316:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e31c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3314      	adds	r3, #20
 800e326:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e32a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e32c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e32e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e330:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e332:	e841 2300 	strex	r3, r2, [r1]
 800e336:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e338:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d1e3      	bne.n	800e306 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2220      	movs	r2, #32
 800e342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	330c      	adds	r3, #12
 800e352:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e356:	e853 3f00 	ldrex	r3, [r3]
 800e35a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e35c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e35e:	f023 0310 	bic.w	r3, r3, #16
 800e362:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	330c      	adds	r3, #12
 800e36c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e370:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e372:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e374:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e376:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e378:	e841 2300 	strex	r3, r2, [r1]
 800e37c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e37e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e380:	2b00      	cmp	r3, #0
 800e382:	d1e3      	bne.n	800e34c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e388:	4618      	mov	r0, r3
 800e38a:	f7fc fc28 	bl	800abde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2202      	movs	r2, #2
 800e392:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	1ad3      	subs	r3, r2, r3
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f000 f8b7 	bl	800e518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e3aa:	e09b      	b.n	800e4e4 <HAL_UART_IRQHandler+0x518>
 800e3ac:	0800e759 	.word	0x0800e759
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	1ad3      	subs	r3, r2, r3
 800e3bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f000 808e 	beq.w	800e4e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800e3cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	f000 8089 	beq.w	800e4e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	330c      	adds	r3, #12
 800e3dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e0:	e853 3f00 	ldrex	r3, [r3]
 800e3e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e3e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e3ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	330c      	adds	r3, #12
 800e3f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800e3fa:	647a      	str	r2, [r7, #68]	@ 0x44
 800e3fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e400:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e402:	e841 2300 	strex	r3, r2, [r1]
 800e406:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d1e3      	bne.n	800e3d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	3314      	adds	r3, #20
 800e414:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e418:	e853 3f00 	ldrex	r3, [r3]
 800e41c:	623b      	str	r3, [r7, #32]
   return(result);
 800e41e:	6a3b      	ldr	r3, [r7, #32]
 800e420:	f023 0301 	bic.w	r3, r3, #1
 800e424:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	3314      	adds	r3, #20
 800e42e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e432:	633a      	str	r2, [r7, #48]	@ 0x30
 800e434:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e436:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e43a:	e841 2300 	strex	r3, r2, [r1]
 800e43e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e442:	2b00      	cmp	r3, #0
 800e444:	d1e3      	bne.n	800e40e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2220      	movs	r2, #32
 800e44a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2200      	movs	r2, #0
 800e452:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	330c      	adds	r3, #12
 800e45a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	e853 3f00 	ldrex	r3, [r3]
 800e462:	60fb      	str	r3, [r7, #12]
   return(result);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f023 0310 	bic.w	r3, r3, #16
 800e46a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	330c      	adds	r3, #12
 800e474:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800e478:	61fa      	str	r2, [r7, #28]
 800e47a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e47c:	69b9      	ldr	r1, [r7, #24]
 800e47e:	69fa      	ldr	r2, [r7, #28]
 800e480:	e841 2300 	strex	r3, r2, [r1]
 800e484:	617b      	str	r3, [r7, #20]
   return(result);
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d1e3      	bne.n	800e454 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2202      	movs	r2, #2
 800e490:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e492:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e496:	4619      	mov	r1, r3
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f000 f83d 	bl	800e518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e49e:	e023      	b.n	800e4e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e4a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e4a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d009      	beq.n	800e4c0 <HAL_UART_IRQHandler+0x4f4>
 800e4ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e4b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d003      	beq.n	800e4c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 f961 	bl	800e780 <UART_Transmit_IT>
    return;
 800e4be:	e014      	b.n	800e4ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e4c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e4c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d00e      	beq.n	800e4ea <HAL_UART_IRQHandler+0x51e>
 800e4cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e4d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d008      	beq.n	800e4ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 f9a1 	bl	800e820 <UART_EndTransmit_IT>
    return;
 800e4de:	e004      	b.n	800e4ea <HAL_UART_IRQHandler+0x51e>
    return;
 800e4e0:	bf00      	nop
 800e4e2:	e002      	b.n	800e4ea <HAL_UART_IRQHandler+0x51e>
      return;
 800e4e4:	bf00      	nop
 800e4e6:	e000      	b.n	800e4ea <HAL_UART_IRQHandler+0x51e>
      return;
 800e4e8:	bf00      	nop
  }
}
 800e4ea:	37e8      	adds	r7, #232	@ 0xe8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e4f8:	bf00      	nop
 800e4fa:	370c      	adds	r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e50c:	bf00      	nop
 800e50e:	370c      	adds	r7, #12
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e518:	b480      	push	{r7}
 800e51a:	b083      	sub	sp, #12
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	460b      	mov	r3, r1
 800e522:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e524:	bf00      	nop
 800e526:	370c      	adds	r7, #12
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr

0800e530 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800e530:	b480      	push	{r7}
 800e532:	b085      	sub	sp, #20
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800e538:	2300      	movs	r3, #0
 800e53a:	60fb      	str	r3, [r7, #12]
 800e53c:	2300      	movs	r3, #0
 800e53e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e546:	b2db      	uxtb	r3, r3
 800e548:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e550:	b2db      	uxtb	r3, r3
 800e552:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	b2da      	uxtb	r2, r3
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	4313      	orrs	r3, r2
 800e55e:	b2db      	uxtb	r3, r3
}
 800e560:	4618      	mov	r0, r3
 800e562:	3714      	adds	r7, #20
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b086      	sub	sp, #24
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	603b      	str	r3, [r7, #0]
 800e578:	4613      	mov	r3, r2
 800e57a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e57c:	e03b      	b.n	800e5f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e57e:	6a3b      	ldr	r3, [r7, #32]
 800e580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e584:	d037      	beq.n	800e5f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e586:	f7fc f9e9 	bl	800a95c <HAL_GetTick>
 800e58a:	4602      	mov	r2, r0
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	1ad3      	subs	r3, r2, r3
 800e590:	6a3a      	ldr	r2, [r7, #32]
 800e592:	429a      	cmp	r2, r3
 800e594:	d302      	bcc.n	800e59c <UART_WaitOnFlagUntilTimeout+0x30>
 800e596:	6a3b      	ldr	r3, [r7, #32]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d101      	bne.n	800e5a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e59c:	2303      	movs	r3, #3
 800e59e:	e03a      	b.n	800e616 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	f003 0304 	and.w	r3, r3, #4
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d023      	beq.n	800e5f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	2b80      	cmp	r3, #128	@ 0x80
 800e5b2:	d020      	beq.n	800e5f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	2b40      	cmp	r3, #64	@ 0x40
 800e5b8:	d01d      	beq.n	800e5f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f003 0308 	and.w	r3, r3, #8
 800e5c4:	2b08      	cmp	r3, #8
 800e5c6:	d116      	bne.n	800e5f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	617b      	str	r3, [r7, #20]
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	617b      	str	r3, [r7, #20]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	617b      	str	r3, [r7, #20]
 800e5dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e5de:	68f8      	ldr	r0, [r7, #12]
 800e5e0:	f000 f857 	bl	800e692 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2208      	movs	r2, #8
 800e5e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	e00f      	b.n	800e616 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	4013      	ands	r3, r2
 800e600:	68ba      	ldr	r2, [r7, #8]
 800e602:	429a      	cmp	r2, r3
 800e604:	bf0c      	ite	eq
 800e606:	2301      	moveq	r3, #1
 800e608:	2300      	movne	r3, #0
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	461a      	mov	r2, r3
 800e60e:	79fb      	ldrb	r3, [r7, #7]
 800e610:	429a      	cmp	r2, r3
 800e612:	d0b4      	beq.n	800e57e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e614:	2300      	movs	r3, #0
}
 800e616:	4618      	mov	r0, r3
 800e618:	3718      	adds	r7, #24
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}

0800e61e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e61e:	b480      	push	{r7}
 800e620:	b085      	sub	sp, #20
 800e622:	af00      	add	r7, sp, #0
 800e624:	60f8      	str	r0, [r7, #12]
 800e626:	60b9      	str	r1, [r7, #8]
 800e628:	4613      	mov	r3, r2
 800e62a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	68ba      	ldr	r2, [r7, #8]
 800e630:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	88fa      	ldrh	r2, [r7, #6]
 800e636:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	88fa      	ldrh	r2, [r7, #6]
 800e63c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	2200      	movs	r2, #0
 800e642:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2222      	movs	r2, #34	@ 0x22
 800e648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	691b      	ldr	r3, [r3, #16]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d007      	beq.n	800e664 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	68da      	ldr	r2, [r3, #12]
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e662:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	695a      	ldr	r2, [r3, #20]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f042 0201 	orr.w	r2, r2, #1
 800e672:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	68da      	ldr	r2, [r3, #12]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f042 0220 	orr.w	r2, r2, #32
 800e682:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e684:	2300      	movs	r3, #0
}
 800e686:	4618      	mov	r0, r3
 800e688:	3714      	adds	r7, #20
 800e68a:	46bd      	mov	sp, r7
 800e68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e690:	4770      	bx	lr

0800e692 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e692:	b480      	push	{r7}
 800e694:	b095      	sub	sp, #84	@ 0x54
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	330c      	adds	r3, #12
 800e6a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6a4:	e853 3f00 	ldrex	r3, [r3]
 800e6a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e6b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	330c      	adds	r3, #12
 800e6b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e6ba:	643a      	str	r2, [r7, #64]	@ 0x40
 800e6bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e6c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e6c2:	e841 2300 	strex	r3, r2, [r1]
 800e6c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d1e5      	bne.n	800e69a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	3314      	adds	r3, #20
 800e6d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d6:	6a3b      	ldr	r3, [r7, #32]
 800e6d8:	e853 3f00 	ldrex	r3, [r3]
 800e6dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	f023 0301 	bic.w	r3, r3, #1
 800e6e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	3314      	adds	r3, #20
 800e6ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e6ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e6f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e6f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e6f6:	e841 2300 	strex	r3, r2, [r1]
 800e6fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d1e5      	bne.n	800e6ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e706:	2b01      	cmp	r3, #1
 800e708:	d119      	bne.n	800e73e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	330c      	adds	r3, #12
 800e710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	e853 3f00 	ldrex	r3, [r3]
 800e718:	60bb      	str	r3, [r7, #8]
   return(result);
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	f023 0310 	bic.w	r3, r3, #16
 800e720:	647b      	str	r3, [r7, #68]	@ 0x44
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	330c      	adds	r3, #12
 800e728:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e72a:	61ba      	str	r2, [r7, #24]
 800e72c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e72e:	6979      	ldr	r1, [r7, #20]
 800e730:	69ba      	ldr	r2, [r7, #24]
 800e732:	e841 2300 	strex	r3, r2, [r1]
 800e736:	613b      	str	r3, [r7, #16]
   return(result);
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1e5      	bne.n	800e70a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2220      	movs	r2, #32
 800e742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2200      	movs	r2, #0
 800e74a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e74c:	bf00      	nop
 800e74e:	3754      	adds	r7, #84	@ 0x54
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr

0800e758 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e764:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2200      	movs	r2, #0
 800e76a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2200      	movs	r2, #0
 800e770:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e772:	68f8      	ldr	r0, [r7, #12]
 800e774:	f7ff fec6 	bl	800e504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e778:	bf00      	nop
 800e77a:	3710      	adds	r7, #16
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e780:	b480      	push	{r7}
 800e782:	b085      	sub	sp, #20
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	2b21      	cmp	r3, #33	@ 0x21
 800e792:	d13e      	bne.n	800e812 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	689b      	ldr	r3, [r3, #8]
 800e798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e79c:	d114      	bne.n	800e7c8 <UART_Transmit_IT+0x48>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	691b      	ldr	r3, [r3, #16]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d110      	bne.n	800e7c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6a1b      	ldr	r3, [r3, #32]
 800e7aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	881b      	ldrh	r3, [r3, #0]
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e7ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6a1b      	ldr	r3, [r3, #32]
 800e7c0:	1c9a      	adds	r2, r3, #2
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	621a      	str	r2, [r3, #32]
 800e7c6:	e008      	b.n	800e7da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6a1b      	ldr	r3, [r3, #32]
 800e7cc:	1c59      	adds	r1, r3, #1
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	6211      	str	r1, [r2, #32]
 800e7d2:	781a      	ldrb	r2, [r3, #0]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d10f      	bne.n	800e80e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	68da      	ldr	r2, [r3, #12]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e7fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	68da      	ldr	r2, [r3, #12]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e80c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e80e:	2300      	movs	r3, #0
 800e810:	e000      	b.n	800e814 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e812:	2302      	movs	r3, #2
  }
}
 800e814:	4618      	mov	r0, r3
 800e816:	3714      	adds	r7, #20
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	68da      	ldr	r2, [r3, #12]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e836:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2220      	movs	r2, #32
 800e83c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7ff fe55 	bl	800e4f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e846:	2300      	movs	r3, #0
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b08c      	sub	sp, #48	@ 0x30
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e85e:	b2db      	uxtb	r3, r3
 800e860:	2b22      	cmp	r3, #34	@ 0x22
 800e862:	f040 80ae 	bne.w	800e9c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e86e:	d117      	bne.n	800e8a0 <UART_Receive_IT+0x50>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d113      	bne.n	800e8a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e878:	2300      	movs	r3, #0
 800e87a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e880:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	b29b      	uxth	r3, r3
 800e88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e88e:	b29a      	uxth	r2, r3
 800e890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e892:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e898:	1c9a      	adds	r2, r3, #2
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	629a      	str	r2, [r3, #40]	@ 0x28
 800e89e:	e026      	b.n	800e8ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	689b      	ldr	r3, [r3, #8]
 800e8ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e8b2:	d007      	beq.n	800e8c4 <UART_Receive_IT+0x74>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	689b      	ldr	r3, [r3, #8]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d10a      	bne.n	800e8d2 <UART_Receive_IT+0x82>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	691b      	ldr	r3, [r3, #16]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d106      	bne.n	800e8d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	b2da      	uxtb	r2, r3
 800e8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8ce:	701a      	strb	r2, [r3, #0]
 800e8d0:	e008      	b.n	800e8e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e8de:	b2da      	uxtb	r2, r3
 800e8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8e8:	1c5a      	adds	r2, r3, #1
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	3b01      	subs	r3, #1
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d15d      	bne.n	800e9be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	68da      	ldr	r2, [r3, #12]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f022 0220 	bic.w	r2, r2, #32
 800e910:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	68da      	ldr	r2, [r3, #12]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e920:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	695a      	ldr	r2, [r3, #20]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	f022 0201 	bic.w	r2, r2, #1
 800e930:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2220      	movs	r2, #32
 800e936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2200      	movs	r2, #0
 800e93e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e944:	2b01      	cmp	r3, #1
 800e946:	d135      	bne.n	800e9b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	330c      	adds	r3, #12
 800e954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	e853 3f00 	ldrex	r3, [r3]
 800e95c:	613b      	str	r3, [r7, #16]
   return(result);
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	f023 0310 	bic.w	r3, r3, #16
 800e964:	627b      	str	r3, [r7, #36]	@ 0x24
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	330c      	adds	r3, #12
 800e96c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e96e:	623a      	str	r2, [r7, #32]
 800e970:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e972:	69f9      	ldr	r1, [r7, #28]
 800e974:	6a3a      	ldr	r2, [r7, #32]
 800e976:	e841 2300 	strex	r3, r2, [r1]
 800e97a:	61bb      	str	r3, [r7, #24]
   return(result);
 800e97c:	69bb      	ldr	r3, [r7, #24]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d1e5      	bne.n	800e94e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f003 0310 	and.w	r3, r3, #16
 800e98c:	2b10      	cmp	r3, #16
 800e98e:	d10a      	bne.n	800e9a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e990:	2300      	movs	r3, #0
 800e992:	60fb      	str	r3, [r7, #12]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	60fb      	str	r3, [r7, #12]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	60fb      	str	r3, [r7, #12]
 800e9a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f7ff fdb3 	bl	800e518 <HAL_UARTEx_RxEventCallback>
 800e9b2:	e002      	b.n	800e9ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f7f6 fd63 	bl	8005480 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	e002      	b.n	800e9c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	e000      	b.n	800e9c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800e9c2:	2302      	movs	r3, #2
  }
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3730      	adds	r7, #48	@ 0x30
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e9cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e9d0:	b0c0      	sub	sp, #256	@ 0x100
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e9d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	691b      	ldr	r3, [r3, #16]
 800e9e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800e9e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e9e8:	68d9      	ldr	r1, [r3, #12]
 800e9ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e9ee:	681a      	ldr	r2, [r3, #0]
 800e9f0:	ea40 0301 	orr.w	r3, r0, r1
 800e9f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e9f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e9fa:	689a      	ldr	r2, [r3, #8]
 800e9fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea00:	691b      	ldr	r3, [r3, #16]
 800ea02:	431a      	orrs	r2, r3
 800ea04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea08:	695b      	ldr	r3, [r3, #20]
 800ea0a:	431a      	orrs	r2, r3
 800ea0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea10:	69db      	ldr	r3, [r3, #28]
 800ea12:	4313      	orrs	r3, r2
 800ea14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ea18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	68db      	ldr	r3, [r3, #12]
 800ea20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ea24:	f021 010c 	bic.w	r1, r1, #12
 800ea28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea2c:	681a      	ldr	r2, [r3, #0]
 800ea2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ea32:	430b      	orrs	r3, r1
 800ea34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ea36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	695b      	ldr	r3, [r3, #20]
 800ea3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ea42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea46:	6999      	ldr	r1, [r3, #24]
 800ea48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	ea40 0301 	orr.w	r3, r0, r1
 800ea52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ea54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea58:	681a      	ldr	r2, [r3, #0]
 800ea5a:	4b8f      	ldr	r3, [pc, #572]	@ (800ec98 <UART_SetConfig+0x2cc>)
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d005      	beq.n	800ea6c <UART_SetConfig+0xa0>
 800ea60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	4b8d      	ldr	r3, [pc, #564]	@ (800ec9c <UART_SetConfig+0x2d0>)
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d104      	bne.n	800ea76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ea6c:	f7fe f918 	bl	800cca0 <HAL_RCC_GetPCLK2Freq>
 800ea70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ea74:	e003      	b.n	800ea7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ea76:	f7fe f8ff 	bl	800cc78 <HAL_RCC_GetPCLK1Freq>
 800ea7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ea7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea82:	69db      	ldr	r3, [r3, #28]
 800ea84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ea88:	f040 810c 	bne.w	800eca4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ea8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ea90:	2200      	movs	r2, #0
 800ea92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ea96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ea9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ea9e:	4622      	mov	r2, r4
 800eaa0:	462b      	mov	r3, r5
 800eaa2:	1891      	adds	r1, r2, r2
 800eaa4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800eaa6:	415b      	adcs	r3, r3
 800eaa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eaaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800eaae:	4621      	mov	r1, r4
 800eab0:	eb12 0801 	adds.w	r8, r2, r1
 800eab4:	4629      	mov	r1, r5
 800eab6:	eb43 0901 	adc.w	r9, r3, r1
 800eaba:	f04f 0200 	mov.w	r2, #0
 800eabe:	f04f 0300 	mov.w	r3, #0
 800eac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800eac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800eaca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800eace:	4690      	mov	r8, r2
 800ead0:	4699      	mov	r9, r3
 800ead2:	4623      	mov	r3, r4
 800ead4:	eb18 0303 	adds.w	r3, r8, r3
 800ead8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800eadc:	462b      	mov	r3, r5
 800eade:	eb49 0303 	adc.w	r3, r9, r3
 800eae2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800eae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	2200      	movs	r2, #0
 800eaee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800eaf2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800eaf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800eafa:	460b      	mov	r3, r1
 800eafc:	18db      	adds	r3, r3, r3
 800eafe:	653b      	str	r3, [r7, #80]	@ 0x50
 800eb00:	4613      	mov	r3, r2
 800eb02:	eb42 0303 	adc.w	r3, r2, r3
 800eb06:	657b      	str	r3, [r7, #84]	@ 0x54
 800eb08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800eb0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800eb10:	f7f2 f90a 	bl	8000d28 <__aeabi_uldivmod>
 800eb14:	4602      	mov	r2, r0
 800eb16:	460b      	mov	r3, r1
 800eb18:	4b61      	ldr	r3, [pc, #388]	@ (800eca0 <UART_SetConfig+0x2d4>)
 800eb1a:	fba3 2302 	umull	r2, r3, r3, r2
 800eb1e:	095b      	lsrs	r3, r3, #5
 800eb20:	011c      	lsls	r4, r3, #4
 800eb22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eb26:	2200      	movs	r2, #0
 800eb28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800eb2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800eb30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800eb34:	4642      	mov	r2, r8
 800eb36:	464b      	mov	r3, r9
 800eb38:	1891      	adds	r1, r2, r2
 800eb3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800eb3c:	415b      	adcs	r3, r3
 800eb3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800eb44:	4641      	mov	r1, r8
 800eb46:	eb12 0a01 	adds.w	sl, r2, r1
 800eb4a:	4649      	mov	r1, r9
 800eb4c:	eb43 0b01 	adc.w	fp, r3, r1
 800eb50:	f04f 0200 	mov.w	r2, #0
 800eb54:	f04f 0300 	mov.w	r3, #0
 800eb58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800eb5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800eb60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eb64:	4692      	mov	sl, r2
 800eb66:	469b      	mov	fp, r3
 800eb68:	4643      	mov	r3, r8
 800eb6a:	eb1a 0303 	adds.w	r3, sl, r3
 800eb6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800eb72:	464b      	mov	r3, r9
 800eb74:	eb4b 0303 	adc.w	r3, fp, r3
 800eb78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800eb7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800eb88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800eb8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800eb90:	460b      	mov	r3, r1
 800eb92:	18db      	adds	r3, r3, r3
 800eb94:	643b      	str	r3, [r7, #64]	@ 0x40
 800eb96:	4613      	mov	r3, r2
 800eb98:	eb42 0303 	adc.w	r3, r2, r3
 800eb9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800eba2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800eba6:	f7f2 f8bf 	bl	8000d28 <__aeabi_uldivmod>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	460b      	mov	r3, r1
 800ebae:	4611      	mov	r1, r2
 800ebb0:	4b3b      	ldr	r3, [pc, #236]	@ (800eca0 <UART_SetConfig+0x2d4>)
 800ebb2:	fba3 2301 	umull	r2, r3, r3, r1
 800ebb6:	095b      	lsrs	r3, r3, #5
 800ebb8:	2264      	movs	r2, #100	@ 0x64
 800ebba:	fb02 f303 	mul.w	r3, r2, r3
 800ebbe:	1acb      	subs	r3, r1, r3
 800ebc0:	00db      	lsls	r3, r3, #3
 800ebc2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ebc6:	4b36      	ldr	r3, [pc, #216]	@ (800eca0 <UART_SetConfig+0x2d4>)
 800ebc8:	fba3 2302 	umull	r2, r3, r3, r2
 800ebcc:	095b      	lsrs	r3, r3, #5
 800ebce:	005b      	lsls	r3, r3, #1
 800ebd0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ebd4:	441c      	add	r4, r3
 800ebd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ebda:	2200      	movs	r2, #0
 800ebdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ebe0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ebe4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ebe8:	4642      	mov	r2, r8
 800ebea:	464b      	mov	r3, r9
 800ebec:	1891      	adds	r1, r2, r2
 800ebee:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ebf0:	415b      	adcs	r3, r3
 800ebf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ebf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ebf8:	4641      	mov	r1, r8
 800ebfa:	1851      	adds	r1, r2, r1
 800ebfc:	6339      	str	r1, [r7, #48]	@ 0x30
 800ebfe:	4649      	mov	r1, r9
 800ec00:	414b      	adcs	r3, r1
 800ec02:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec04:	f04f 0200 	mov.w	r2, #0
 800ec08:	f04f 0300 	mov.w	r3, #0
 800ec0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ec10:	4659      	mov	r1, fp
 800ec12:	00cb      	lsls	r3, r1, #3
 800ec14:	4651      	mov	r1, sl
 800ec16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ec1a:	4651      	mov	r1, sl
 800ec1c:	00ca      	lsls	r2, r1, #3
 800ec1e:	4610      	mov	r0, r2
 800ec20:	4619      	mov	r1, r3
 800ec22:	4603      	mov	r3, r0
 800ec24:	4642      	mov	r2, r8
 800ec26:	189b      	adds	r3, r3, r2
 800ec28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ec2c:	464b      	mov	r3, r9
 800ec2e:	460a      	mov	r2, r1
 800ec30:	eb42 0303 	adc.w	r3, r2, r3
 800ec34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ec38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ec44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ec48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	18db      	adds	r3, r3, r3
 800ec50:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ec52:	4613      	mov	r3, r2
 800ec54:	eb42 0303 	adc.w	r3, r2, r3
 800ec58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ec5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ec62:	f7f2 f861 	bl	8000d28 <__aeabi_uldivmod>
 800ec66:	4602      	mov	r2, r0
 800ec68:	460b      	mov	r3, r1
 800ec6a:	4b0d      	ldr	r3, [pc, #52]	@ (800eca0 <UART_SetConfig+0x2d4>)
 800ec6c:	fba3 1302 	umull	r1, r3, r3, r2
 800ec70:	095b      	lsrs	r3, r3, #5
 800ec72:	2164      	movs	r1, #100	@ 0x64
 800ec74:	fb01 f303 	mul.w	r3, r1, r3
 800ec78:	1ad3      	subs	r3, r2, r3
 800ec7a:	00db      	lsls	r3, r3, #3
 800ec7c:	3332      	adds	r3, #50	@ 0x32
 800ec7e:	4a08      	ldr	r2, [pc, #32]	@ (800eca0 <UART_SetConfig+0x2d4>)
 800ec80:	fba2 2303 	umull	r2, r3, r2, r3
 800ec84:	095b      	lsrs	r3, r3, #5
 800ec86:	f003 0207 	and.w	r2, r3, #7
 800ec8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4422      	add	r2, r4
 800ec92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ec94:	e106      	b.n	800eea4 <UART_SetConfig+0x4d8>
 800ec96:	bf00      	nop
 800ec98:	40011000 	.word	0x40011000
 800ec9c:	40011400 	.word	0x40011400
 800eca0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800eca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ecae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ecb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ecb6:	4642      	mov	r2, r8
 800ecb8:	464b      	mov	r3, r9
 800ecba:	1891      	adds	r1, r2, r2
 800ecbc:	6239      	str	r1, [r7, #32]
 800ecbe:	415b      	adcs	r3, r3
 800ecc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800ecc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ecc6:	4641      	mov	r1, r8
 800ecc8:	1854      	adds	r4, r2, r1
 800ecca:	4649      	mov	r1, r9
 800eccc:	eb43 0501 	adc.w	r5, r3, r1
 800ecd0:	f04f 0200 	mov.w	r2, #0
 800ecd4:	f04f 0300 	mov.w	r3, #0
 800ecd8:	00eb      	lsls	r3, r5, #3
 800ecda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ecde:	00e2      	lsls	r2, r4, #3
 800ece0:	4614      	mov	r4, r2
 800ece2:	461d      	mov	r5, r3
 800ece4:	4643      	mov	r3, r8
 800ece6:	18e3      	adds	r3, r4, r3
 800ece8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ecec:	464b      	mov	r3, r9
 800ecee:	eb45 0303 	adc.w	r3, r5, r3
 800ecf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ecf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ed02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ed06:	f04f 0200 	mov.w	r2, #0
 800ed0a:	f04f 0300 	mov.w	r3, #0
 800ed0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ed12:	4629      	mov	r1, r5
 800ed14:	008b      	lsls	r3, r1, #2
 800ed16:	4621      	mov	r1, r4
 800ed18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ed1c:	4621      	mov	r1, r4
 800ed1e:	008a      	lsls	r2, r1, #2
 800ed20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ed24:	f7f2 f800 	bl	8000d28 <__aeabi_uldivmod>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	4b60      	ldr	r3, [pc, #384]	@ (800eeb0 <UART_SetConfig+0x4e4>)
 800ed2e:	fba3 2302 	umull	r2, r3, r3, r2
 800ed32:	095b      	lsrs	r3, r3, #5
 800ed34:	011c      	lsls	r4, r3, #4
 800ed36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ed40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ed44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ed48:	4642      	mov	r2, r8
 800ed4a:	464b      	mov	r3, r9
 800ed4c:	1891      	adds	r1, r2, r2
 800ed4e:	61b9      	str	r1, [r7, #24]
 800ed50:	415b      	adcs	r3, r3
 800ed52:	61fb      	str	r3, [r7, #28]
 800ed54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ed58:	4641      	mov	r1, r8
 800ed5a:	1851      	adds	r1, r2, r1
 800ed5c:	6139      	str	r1, [r7, #16]
 800ed5e:	4649      	mov	r1, r9
 800ed60:	414b      	adcs	r3, r1
 800ed62:	617b      	str	r3, [r7, #20]
 800ed64:	f04f 0200 	mov.w	r2, #0
 800ed68:	f04f 0300 	mov.w	r3, #0
 800ed6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ed70:	4659      	mov	r1, fp
 800ed72:	00cb      	lsls	r3, r1, #3
 800ed74:	4651      	mov	r1, sl
 800ed76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ed7a:	4651      	mov	r1, sl
 800ed7c:	00ca      	lsls	r2, r1, #3
 800ed7e:	4610      	mov	r0, r2
 800ed80:	4619      	mov	r1, r3
 800ed82:	4603      	mov	r3, r0
 800ed84:	4642      	mov	r2, r8
 800ed86:	189b      	adds	r3, r3, r2
 800ed88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ed8c:	464b      	mov	r3, r9
 800ed8e:	460a      	mov	r2, r1
 800ed90:	eb42 0303 	adc.w	r3, r2, r3
 800ed94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ed98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800eda2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800eda4:	f04f 0200 	mov.w	r2, #0
 800eda8:	f04f 0300 	mov.w	r3, #0
 800edac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800edb0:	4649      	mov	r1, r9
 800edb2:	008b      	lsls	r3, r1, #2
 800edb4:	4641      	mov	r1, r8
 800edb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800edba:	4641      	mov	r1, r8
 800edbc:	008a      	lsls	r2, r1, #2
 800edbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800edc2:	f7f1 ffb1 	bl	8000d28 <__aeabi_uldivmod>
 800edc6:	4602      	mov	r2, r0
 800edc8:	460b      	mov	r3, r1
 800edca:	4611      	mov	r1, r2
 800edcc:	4b38      	ldr	r3, [pc, #224]	@ (800eeb0 <UART_SetConfig+0x4e4>)
 800edce:	fba3 2301 	umull	r2, r3, r3, r1
 800edd2:	095b      	lsrs	r3, r3, #5
 800edd4:	2264      	movs	r2, #100	@ 0x64
 800edd6:	fb02 f303 	mul.w	r3, r2, r3
 800edda:	1acb      	subs	r3, r1, r3
 800eddc:	011b      	lsls	r3, r3, #4
 800edde:	3332      	adds	r3, #50	@ 0x32
 800ede0:	4a33      	ldr	r2, [pc, #204]	@ (800eeb0 <UART_SetConfig+0x4e4>)
 800ede2:	fba2 2303 	umull	r2, r3, r2, r3
 800ede6:	095b      	lsrs	r3, r3, #5
 800ede8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800edec:	441c      	add	r4, r3
 800edee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800edf2:	2200      	movs	r2, #0
 800edf4:	673b      	str	r3, [r7, #112]	@ 0x70
 800edf6:	677a      	str	r2, [r7, #116]	@ 0x74
 800edf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800edfc:	4642      	mov	r2, r8
 800edfe:	464b      	mov	r3, r9
 800ee00:	1891      	adds	r1, r2, r2
 800ee02:	60b9      	str	r1, [r7, #8]
 800ee04:	415b      	adcs	r3, r3
 800ee06:	60fb      	str	r3, [r7, #12]
 800ee08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ee0c:	4641      	mov	r1, r8
 800ee0e:	1851      	adds	r1, r2, r1
 800ee10:	6039      	str	r1, [r7, #0]
 800ee12:	4649      	mov	r1, r9
 800ee14:	414b      	adcs	r3, r1
 800ee16:	607b      	str	r3, [r7, #4]
 800ee18:	f04f 0200 	mov.w	r2, #0
 800ee1c:	f04f 0300 	mov.w	r3, #0
 800ee20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ee24:	4659      	mov	r1, fp
 800ee26:	00cb      	lsls	r3, r1, #3
 800ee28:	4651      	mov	r1, sl
 800ee2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ee2e:	4651      	mov	r1, sl
 800ee30:	00ca      	lsls	r2, r1, #3
 800ee32:	4610      	mov	r0, r2
 800ee34:	4619      	mov	r1, r3
 800ee36:	4603      	mov	r3, r0
 800ee38:	4642      	mov	r2, r8
 800ee3a:	189b      	adds	r3, r3, r2
 800ee3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ee3e:	464b      	mov	r3, r9
 800ee40:	460a      	mov	r2, r1
 800ee42:	eb42 0303 	adc.w	r3, r2, r3
 800ee46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ee48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	663b      	str	r3, [r7, #96]	@ 0x60
 800ee52:	667a      	str	r2, [r7, #100]	@ 0x64
 800ee54:	f04f 0200 	mov.w	r2, #0
 800ee58:	f04f 0300 	mov.w	r3, #0
 800ee5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ee60:	4649      	mov	r1, r9
 800ee62:	008b      	lsls	r3, r1, #2
 800ee64:	4641      	mov	r1, r8
 800ee66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ee6a:	4641      	mov	r1, r8
 800ee6c:	008a      	lsls	r2, r1, #2
 800ee6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ee72:	f7f1 ff59 	bl	8000d28 <__aeabi_uldivmod>
 800ee76:	4602      	mov	r2, r0
 800ee78:	460b      	mov	r3, r1
 800ee7a:	4b0d      	ldr	r3, [pc, #52]	@ (800eeb0 <UART_SetConfig+0x4e4>)
 800ee7c:	fba3 1302 	umull	r1, r3, r3, r2
 800ee80:	095b      	lsrs	r3, r3, #5
 800ee82:	2164      	movs	r1, #100	@ 0x64
 800ee84:	fb01 f303 	mul.w	r3, r1, r3
 800ee88:	1ad3      	subs	r3, r2, r3
 800ee8a:	011b      	lsls	r3, r3, #4
 800ee8c:	3332      	adds	r3, #50	@ 0x32
 800ee8e:	4a08      	ldr	r2, [pc, #32]	@ (800eeb0 <UART_SetConfig+0x4e4>)
 800ee90:	fba2 2303 	umull	r2, r3, r2, r3
 800ee94:	095b      	lsrs	r3, r3, #5
 800ee96:	f003 020f 	and.w	r2, r3, #15
 800ee9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4422      	add	r2, r4
 800eea2:	609a      	str	r2, [r3, #8]
}
 800eea4:	bf00      	nop
 800eea6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eeb0:	51eb851f 	.word	0x51eb851f

0800eeb4 <__cvt>:
 800eeb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb8:	ec57 6b10 	vmov	r6, r7, d0
 800eebc:	2f00      	cmp	r7, #0
 800eebe:	460c      	mov	r4, r1
 800eec0:	4619      	mov	r1, r3
 800eec2:	463b      	mov	r3, r7
 800eec4:	bfbb      	ittet	lt
 800eec6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800eeca:	461f      	movlt	r7, r3
 800eecc:	2300      	movge	r3, #0
 800eece:	232d      	movlt	r3, #45	@ 0x2d
 800eed0:	700b      	strb	r3, [r1, #0]
 800eed2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eed4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800eed8:	4691      	mov	r9, r2
 800eeda:	f023 0820 	bic.w	r8, r3, #32
 800eede:	bfbc      	itt	lt
 800eee0:	4632      	movlt	r2, r6
 800eee2:	4616      	movlt	r6, r2
 800eee4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eee8:	d005      	beq.n	800eef6 <__cvt+0x42>
 800eeea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800eeee:	d100      	bne.n	800eef2 <__cvt+0x3e>
 800eef0:	3401      	adds	r4, #1
 800eef2:	2102      	movs	r1, #2
 800eef4:	e000      	b.n	800eef8 <__cvt+0x44>
 800eef6:	2103      	movs	r1, #3
 800eef8:	ab03      	add	r3, sp, #12
 800eefa:	9301      	str	r3, [sp, #4]
 800eefc:	ab02      	add	r3, sp, #8
 800eefe:	9300      	str	r3, [sp, #0]
 800ef00:	ec47 6b10 	vmov	d0, r6, r7
 800ef04:	4653      	mov	r3, sl
 800ef06:	4622      	mov	r2, r4
 800ef08:	f000 ff4e 	bl	800fda8 <_dtoa_r>
 800ef0c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ef10:	4605      	mov	r5, r0
 800ef12:	d119      	bne.n	800ef48 <__cvt+0x94>
 800ef14:	f019 0f01 	tst.w	r9, #1
 800ef18:	d00e      	beq.n	800ef38 <__cvt+0x84>
 800ef1a:	eb00 0904 	add.w	r9, r0, r4
 800ef1e:	2200      	movs	r2, #0
 800ef20:	2300      	movs	r3, #0
 800ef22:	4630      	mov	r0, r6
 800ef24:	4639      	mov	r1, r7
 800ef26:	f7f1 fdcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef2a:	b108      	cbz	r0, 800ef30 <__cvt+0x7c>
 800ef2c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ef30:	2230      	movs	r2, #48	@ 0x30
 800ef32:	9b03      	ldr	r3, [sp, #12]
 800ef34:	454b      	cmp	r3, r9
 800ef36:	d31e      	bcc.n	800ef76 <__cvt+0xc2>
 800ef38:	9b03      	ldr	r3, [sp, #12]
 800ef3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef3c:	1b5b      	subs	r3, r3, r5
 800ef3e:	4628      	mov	r0, r5
 800ef40:	6013      	str	r3, [r2, #0]
 800ef42:	b004      	add	sp, #16
 800ef44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ef4c:	eb00 0904 	add.w	r9, r0, r4
 800ef50:	d1e5      	bne.n	800ef1e <__cvt+0x6a>
 800ef52:	7803      	ldrb	r3, [r0, #0]
 800ef54:	2b30      	cmp	r3, #48	@ 0x30
 800ef56:	d10a      	bne.n	800ef6e <__cvt+0xba>
 800ef58:	2200      	movs	r2, #0
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	4630      	mov	r0, r6
 800ef5e:	4639      	mov	r1, r7
 800ef60:	f7f1 fdb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef64:	b918      	cbnz	r0, 800ef6e <__cvt+0xba>
 800ef66:	f1c4 0401 	rsb	r4, r4, #1
 800ef6a:	f8ca 4000 	str.w	r4, [sl]
 800ef6e:	f8da 3000 	ldr.w	r3, [sl]
 800ef72:	4499      	add	r9, r3
 800ef74:	e7d3      	b.n	800ef1e <__cvt+0x6a>
 800ef76:	1c59      	adds	r1, r3, #1
 800ef78:	9103      	str	r1, [sp, #12]
 800ef7a:	701a      	strb	r2, [r3, #0]
 800ef7c:	e7d9      	b.n	800ef32 <__cvt+0x7e>

0800ef7e <__exponent>:
 800ef7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef80:	2900      	cmp	r1, #0
 800ef82:	bfba      	itte	lt
 800ef84:	4249      	neglt	r1, r1
 800ef86:	232d      	movlt	r3, #45	@ 0x2d
 800ef88:	232b      	movge	r3, #43	@ 0x2b
 800ef8a:	2909      	cmp	r1, #9
 800ef8c:	7002      	strb	r2, [r0, #0]
 800ef8e:	7043      	strb	r3, [r0, #1]
 800ef90:	dd29      	ble.n	800efe6 <__exponent+0x68>
 800ef92:	f10d 0307 	add.w	r3, sp, #7
 800ef96:	461d      	mov	r5, r3
 800ef98:	270a      	movs	r7, #10
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	fbb1 f6f7 	udiv	r6, r1, r7
 800efa0:	fb07 1416 	mls	r4, r7, r6, r1
 800efa4:	3430      	adds	r4, #48	@ 0x30
 800efa6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800efaa:	460c      	mov	r4, r1
 800efac:	2c63      	cmp	r4, #99	@ 0x63
 800efae:	f103 33ff 	add.w	r3, r3, #4294967295
 800efb2:	4631      	mov	r1, r6
 800efb4:	dcf1      	bgt.n	800ef9a <__exponent+0x1c>
 800efb6:	3130      	adds	r1, #48	@ 0x30
 800efb8:	1e94      	subs	r4, r2, #2
 800efba:	f803 1c01 	strb.w	r1, [r3, #-1]
 800efbe:	1c41      	adds	r1, r0, #1
 800efc0:	4623      	mov	r3, r4
 800efc2:	42ab      	cmp	r3, r5
 800efc4:	d30a      	bcc.n	800efdc <__exponent+0x5e>
 800efc6:	f10d 0309 	add.w	r3, sp, #9
 800efca:	1a9b      	subs	r3, r3, r2
 800efcc:	42ac      	cmp	r4, r5
 800efce:	bf88      	it	hi
 800efd0:	2300      	movhi	r3, #0
 800efd2:	3302      	adds	r3, #2
 800efd4:	4403      	add	r3, r0
 800efd6:	1a18      	subs	r0, r3, r0
 800efd8:	b003      	add	sp, #12
 800efda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efdc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800efe0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800efe4:	e7ed      	b.n	800efc2 <__exponent+0x44>
 800efe6:	2330      	movs	r3, #48	@ 0x30
 800efe8:	3130      	adds	r1, #48	@ 0x30
 800efea:	7083      	strb	r3, [r0, #2]
 800efec:	70c1      	strb	r1, [r0, #3]
 800efee:	1d03      	adds	r3, r0, #4
 800eff0:	e7f1      	b.n	800efd6 <__exponent+0x58>
	...

0800eff4 <_printf_float>:
 800eff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff8:	b08d      	sub	sp, #52	@ 0x34
 800effa:	460c      	mov	r4, r1
 800effc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f000:	4616      	mov	r6, r2
 800f002:	461f      	mov	r7, r3
 800f004:	4605      	mov	r5, r0
 800f006:	f000 fdcd 	bl	800fba4 <_localeconv_r>
 800f00a:	6803      	ldr	r3, [r0, #0]
 800f00c:	9304      	str	r3, [sp, #16]
 800f00e:	4618      	mov	r0, r3
 800f010:	f7f1 f92e 	bl	8000270 <strlen>
 800f014:	2300      	movs	r3, #0
 800f016:	930a      	str	r3, [sp, #40]	@ 0x28
 800f018:	f8d8 3000 	ldr.w	r3, [r8]
 800f01c:	9005      	str	r0, [sp, #20]
 800f01e:	3307      	adds	r3, #7
 800f020:	f023 0307 	bic.w	r3, r3, #7
 800f024:	f103 0208 	add.w	r2, r3, #8
 800f028:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f02c:	f8d4 b000 	ldr.w	fp, [r4]
 800f030:	f8c8 2000 	str.w	r2, [r8]
 800f034:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f038:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f03c:	9307      	str	r3, [sp, #28]
 800f03e:	f8cd 8018 	str.w	r8, [sp, #24]
 800f042:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f04a:	4b9c      	ldr	r3, [pc, #624]	@ (800f2bc <_printf_float+0x2c8>)
 800f04c:	f04f 32ff 	mov.w	r2, #4294967295
 800f050:	f7f1 fd6c 	bl	8000b2c <__aeabi_dcmpun>
 800f054:	bb70      	cbnz	r0, 800f0b4 <_printf_float+0xc0>
 800f056:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f05a:	4b98      	ldr	r3, [pc, #608]	@ (800f2bc <_printf_float+0x2c8>)
 800f05c:	f04f 32ff 	mov.w	r2, #4294967295
 800f060:	f7f1 fd46 	bl	8000af0 <__aeabi_dcmple>
 800f064:	bb30      	cbnz	r0, 800f0b4 <_printf_float+0xc0>
 800f066:	2200      	movs	r2, #0
 800f068:	2300      	movs	r3, #0
 800f06a:	4640      	mov	r0, r8
 800f06c:	4649      	mov	r1, r9
 800f06e:	f7f1 fd35 	bl	8000adc <__aeabi_dcmplt>
 800f072:	b110      	cbz	r0, 800f07a <_printf_float+0x86>
 800f074:	232d      	movs	r3, #45	@ 0x2d
 800f076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f07a:	4a91      	ldr	r2, [pc, #580]	@ (800f2c0 <_printf_float+0x2cc>)
 800f07c:	4b91      	ldr	r3, [pc, #580]	@ (800f2c4 <_printf_float+0x2d0>)
 800f07e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f082:	bf8c      	ite	hi
 800f084:	4690      	movhi	r8, r2
 800f086:	4698      	movls	r8, r3
 800f088:	2303      	movs	r3, #3
 800f08a:	6123      	str	r3, [r4, #16]
 800f08c:	f02b 0304 	bic.w	r3, fp, #4
 800f090:	6023      	str	r3, [r4, #0]
 800f092:	f04f 0900 	mov.w	r9, #0
 800f096:	9700      	str	r7, [sp, #0]
 800f098:	4633      	mov	r3, r6
 800f09a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f09c:	4621      	mov	r1, r4
 800f09e:	4628      	mov	r0, r5
 800f0a0:	f000 f9d2 	bl	800f448 <_printf_common>
 800f0a4:	3001      	adds	r0, #1
 800f0a6:	f040 808d 	bne.w	800f1c4 <_printf_float+0x1d0>
 800f0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ae:	b00d      	add	sp, #52	@ 0x34
 800f0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b4:	4642      	mov	r2, r8
 800f0b6:	464b      	mov	r3, r9
 800f0b8:	4640      	mov	r0, r8
 800f0ba:	4649      	mov	r1, r9
 800f0bc:	f7f1 fd36 	bl	8000b2c <__aeabi_dcmpun>
 800f0c0:	b140      	cbz	r0, 800f0d4 <_printf_float+0xe0>
 800f0c2:	464b      	mov	r3, r9
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	bfbc      	itt	lt
 800f0c8:	232d      	movlt	r3, #45	@ 0x2d
 800f0ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f0ce:	4a7e      	ldr	r2, [pc, #504]	@ (800f2c8 <_printf_float+0x2d4>)
 800f0d0:	4b7e      	ldr	r3, [pc, #504]	@ (800f2cc <_printf_float+0x2d8>)
 800f0d2:	e7d4      	b.n	800f07e <_printf_float+0x8a>
 800f0d4:	6863      	ldr	r3, [r4, #4]
 800f0d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f0da:	9206      	str	r2, [sp, #24]
 800f0dc:	1c5a      	adds	r2, r3, #1
 800f0de:	d13b      	bne.n	800f158 <_printf_float+0x164>
 800f0e0:	2306      	movs	r3, #6
 800f0e2:	6063      	str	r3, [r4, #4]
 800f0e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	6022      	str	r2, [r4, #0]
 800f0ec:	9303      	str	r3, [sp, #12]
 800f0ee:	ab0a      	add	r3, sp, #40	@ 0x28
 800f0f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f0f4:	ab09      	add	r3, sp, #36	@ 0x24
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	6861      	ldr	r1, [r4, #4]
 800f0fa:	ec49 8b10 	vmov	d0, r8, r9
 800f0fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f102:	4628      	mov	r0, r5
 800f104:	f7ff fed6 	bl	800eeb4 <__cvt>
 800f108:	9b06      	ldr	r3, [sp, #24]
 800f10a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f10c:	2b47      	cmp	r3, #71	@ 0x47
 800f10e:	4680      	mov	r8, r0
 800f110:	d129      	bne.n	800f166 <_printf_float+0x172>
 800f112:	1cc8      	adds	r0, r1, #3
 800f114:	db02      	blt.n	800f11c <_printf_float+0x128>
 800f116:	6863      	ldr	r3, [r4, #4]
 800f118:	4299      	cmp	r1, r3
 800f11a:	dd41      	ble.n	800f1a0 <_printf_float+0x1ac>
 800f11c:	f1aa 0a02 	sub.w	sl, sl, #2
 800f120:	fa5f fa8a 	uxtb.w	sl, sl
 800f124:	3901      	subs	r1, #1
 800f126:	4652      	mov	r2, sl
 800f128:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f12c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f12e:	f7ff ff26 	bl	800ef7e <__exponent>
 800f132:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f134:	1813      	adds	r3, r2, r0
 800f136:	2a01      	cmp	r2, #1
 800f138:	4681      	mov	r9, r0
 800f13a:	6123      	str	r3, [r4, #16]
 800f13c:	dc02      	bgt.n	800f144 <_printf_float+0x150>
 800f13e:	6822      	ldr	r2, [r4, #0]
 800f140:	07d2      	lsls	r2, r2, #31
 800f142:	d501      	bpl.n	800f148 <_printf_float+0x154>
 800f144:	3301      	adds	r3, #1
 800f146:	6123      	str	r3, [r4, #16]
 800f148:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d0a2      	beq.n	800f096 <_printf_float+0xa2>
 800f150:	232d      	movs	r3, #45	@ 0x2d
 800f152:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f156:	e79e      	b.n	800f096 <_printf_float+0xa2>
 800f158:	9a06      	ldr	r2, [sp, #24]
 800f15a:	2a47      	cmp	r2, #71	@ 0x47
 800f15c:	d1c2      	bne.n	800f0e4 <_printf_float+0xf0>
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d1c0      	bne.n	800f0e4 <_printf_float+0xf0>
 800f162:	2301      	movs	r3, #1
 800f164:	e7bd      	b.n	800f0e2 <_printf_float+0xee>
 800f166:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f16a:	d9db      	bls.n	800f124 <_printf_float+0x130>
 800f16c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f170:	d118      	bne.n	800f1a4 <_printf_float+0x1b0>
 800f172:	2900      	cmp	r1, #0
 800f174:	6863      	ldr	r3, [r4, #4]
 800f176:	dd0b      	ble.n	800f190 <_printf_float+0x19c>
 800f178:	6121      	str	r1, [r4, #16]
 800f17a:	b913      	cbnz	r3, 800f182 <_printf_float+0x18e>
 800f17c:	6822      	ldr	r2, [r4, #0]
 800f17e:	07d0      	lsls	r0, r2, #31
 800f180:	d502      	bpl.n	800f188 <_printf_float+0x194>
 800f182:	3301      	adds	r3, #1
 800f184:	440b      	add	r3, r1
 800f186:	6123      	str	r3, [r4, #16]
 800f188:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f18a:	f04f 0900 	mov.w	r9, #0
 800f18e:	e7db      	b.n	800f148 <_printf_float+0x154>
 800f190:	b913      	cbnz	r3, 800f198 <_printf_float+0x1a4>
 800f192:	6822      	ldr	r2, [r4, #0]
 800f194:	07d2      	lsls	r2, r2, #31
 800f196:	d501      	bpl.n	800f19c <_printf_float+0x1a8>
 800f198:	3302      	adds	r3, #2
 800f19a:	e7f4      	b.n	800f186 <_printf_float+0x192>
 800f19c:	2301      	movs	r3, #1
 800f19e:	e7f2      	b.n	800f186 <_printf_float+0x192>
 800f1a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f1a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1a6:	4299      	cmp	r1, r3
 800f1a8:	db05      	blt.n	800f1b6 <_printf_float+0x1c2>
 800f1aa:	6823      	ldr	r3, [r4, #0]
 800f1ac:	6121      	str	r1, [r4, #16]
 800f1ae:	07d8      	lsls	r0, r3, #31
 800f1b0:	d5ea      	bpl.n	800f188 <_printf_float+0x194>
 800f1b2:	1c4b      	adds	r3, r1, #1
 800f1b4:	e7e7      	b.n	800f186 <_printf_float+0x192>
 800f1b6:	2900      	cmp	r1, #0
 800f1b8:	bfd4      	ite	le
 800f1ba:	f1c1 0202 	rsble	r2, r1, #2
 800f1be:	2201      	movgt	r2, #1
 800f1c0:	4413      	add	r3, r2
 800f1c2:	e7e0      	b.n	800f186 <_printf_float+0x192>
 800f1c4:	6823      	ldr	r3, [r4, #0]
 800f1c6:	055a      	lsls	r2, r3, #21
 800f1c8:	d407      	bmi.n	800f1da <_printf_float+0x1e6>
 800f1ca:	6923      	ldr	r3, [r4, #16]
 800f1cc:	4642      	mov	r2, r8
 800f1ce:	4631      	mov	r1, r6
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	47b8      	blx	r7
 800f1d4:	3001      	adds	r0, #1
 800f1d6:	d12b      	bne.n	800f230 <_printf_float+0x23c>
 800f1d8:	e767      	b.n	800f0aa <_printf_float+0xb6>
 800f1da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f1de:	f240 80dd 	bls.w	800f39c <_printf_float+0x3a8>
 800f1e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	f7f1 fc6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1ee:	2800      	cmp	r0, #0
 800f1f0:	d033      	beq.n	800f25a <_printf_float+0x266>
 800f1f2:	4a37      	ldr	r2, [pc, #220]	@ (800f2d0 <_printf_float+0x2dc>)
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	4631      	mov	r1, r6
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	47b8      	blx	r7
 800f1fc:	3001      	adds	r0, #1
 800f1fe:	f43f af54 	beq.w	800f0aa <_printf_float+0xb6>
 800f202:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f206:	4543      	cmp	r3, r8
 800f208:	db02      	blt.n	800f210 <_printf_float+0x21c>
 800f20a:	6823      	ldr	r3, [r4, #0]
 800f20c:	07d8      	lsls	r0, r3, #31
 800f20e:	d50f      	bpl.n	800f230 <_printf_float+0x23c>
 800f210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f214:	4631      	mov	r1, r6
 800f216:	4628      	mov	r0, r5
 800f218:	47b8      	blx	r7
 800f21a:	3001      	adds	r0, #1
 800f21c:	f43f af45 	beq.w	800f0aa <_printf_float+0xb6>
 800f220:	f04f 0900 	mov.w	r9, #0
 800f224:	f108 38ff 	add.w	r8, r8, #4294967295
 800f228:	f104 0a1a 	add.w	sl, r4, #26
 800f22c:	45c8      	cmp	r8, r9
 800f22e:	dc09      	bgt.n	800f244 <_printf_float+0x250>
 800f230:	6823      	ldr	r3, [r4, #0]
 800f232:	079b      	lsls	r3, r3, #30
 800f234:	f100 8103 	bmi.w	800f43e <_printf_float+0x44a>
 800f238:	68e0      	ldr	r0, [r4, #12]
 800f23a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f23c:	4298      	cmp	r0, r3
 800f23e:	bfb8      	it	lt
 800f240:	4618      	movlt	r0, r3
 800f242:	e734      	b.n	800f0ae <_printf_float+0xba>
 800f244:	2301      	movs	r3, #1
 800f246:	4652      	mov	r2, sl
 800f248:	4631      	mov	r1, r6
 800f24a:	4628      	mov	r0, r5
 800f24c:	47b8      	blx	r7
 800f24e:	3001      	adds	r0, #1
 800f250:	f43f af2b 	beq.w	800f0aa <_printf_float+0xb6>
 800f254:	f109 0901 	add.w	r9, r9, #1
 800f258:	e7e8      	b.n	800f22c <_printf_float+0x238>
 800f25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	dc39      	bgt.n	800f2d4 <_printf_float+0x2e0>
 800f260:	4a1b      	ldr	r2, [pc, #108]	@ (800f2d0 <_printf_float+0x2dc>)
 800f262:	2301      	movs	r3, #1
 800f264:	4631      	mov	r1, r6
 800f266:	4628      	mov	r0, r5
 800f268:	47b8      	blx	r7
 800f26a:	3001      	adds	r0, #1
 800f26c:	f43f af1d 	beq.w	800f0aa <_printf_float+0xb6>
 800f270:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f274:	ea59 0303 	orrs.w	r3, r9, r3
 800f278:	d102      	bne.n	800f280 <_printf_float+0x28c>
 800f27a:	6823      	ldr	r3, [r4, #0]
 800f27c:	07d9      	lsls	r1, r3, #31
 800f27e:	d5d7      	bpl.n	800f230 <_printf_float+0x23c>
 800f280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f284:	4631      	mov	r1, r6
 800f286:	4628      	mov	r0, r5
 800f288:	47b8      	blx	r7
 800f28a:	3001      	adds	r0, #1
 800f28c:	f43f af0d 	beq.w	800f0aa <_printf_float+0xb6>
 800f290:	f04f 0a00 	mov.w	sl, #0
 800f294:	f104 0b1a 	add.w	fp, r4, #26
 800f298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f29a:	425b      	negs	r3, r3
 800f29c:	4553      	cmp	r3, sl
 800f29e:	dc01      	bgt.n	800f2a4 <_printf_float+0x2b0>
 800f2a0:	464b      	mov	r3, r9
 800f2a2:	e793      	b.n	800f1cc <_printf_float+0x1d8>
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	465a      	mov	r2, fp
 800f2a8:	4631      	mov	r1, r6
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	47b8      	blx	r7
 800f2ae:	3001      	adds	r0, #1
 800f2b0:	f43f aefb 	beq.w	800f0aa <_printf_float+0xb6>
 800f2b4:	f10a 0a01 	add.w	sl, sl, #1
 800f2b8:	e7ee      	b.n	800f298 <_printf_float+0x2a4>
 800f2ba:	bf00      	nop
 800f2bc:	7fefffff 	.word	0x7fefffff
 800f2c0:	08013900 	.word	0x08013900
 800f2c4:	080138fc 	.word	0x080138fc
 800f2c8:	08013908 	.word	0x08013908
 800f2cc:	08013904 	.word	0x08013904
 800f2d0:	0801390c 	.word	0x0801390c
 800f2d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f2d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f2da:	4553      	cmp	r3, sl
 800f2dc:	bfa8      	it	ge
 800f2de:	4653      	movge	r3, sl
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	4699      	mov	r9, r3
 800f2e4:	dc36      	bgt.n	800f354 <_printf_float+0x360>
 800f2e6:	f04f 0b00 	mov.w	fp, #0
 800f2ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2ee:	f104 021a 	add.w	r2, r4, #26
 800f2f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f2f4:	9306      	str	r3, [sp, #24]
 800f2f6:	eba3 0309 	sub.w	r3, r3, r9
 800f2fa:	455b      	cmp	r3, fp
 800f2fc:	dc31      	bgt.n	800f362 <_printf_float+0x36e>
 800f2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f300:	459a      	cmp	sl, r3
 800f302:	dc3a      	bgt.n	800f37a <_printf_float+0x386>
 800f304:	6823      	ldr	r3, [r4, #0]
 800f306:	07da      	lsls	r2, r3, #31
 800f308:	d437      	bmi.n	800f37a <_printf_float+0x386>
 800f30a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f30c:	ebaa 0903 	sub.w	r9, sl, r3
 800f310:	9b06      	ldr	r3, [sp, #24]
 800f312:	ebaa 0303 	sub.w	r3, sl, r3
 800f316:	4599      	cmp	r9, r3
 800f318:	bfa8      	it	ge
 800f31a:	4699      	movge	r9, r3
 800f31c:	f1b9 0f00 	cmp.w	r9, #0
 800f320:	dc33      	bgt.n	800f38a <_printf_float+0x396>
 800f322:	f04f 0800 	mov.w	r8, #0
 800f326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f32a:	f104 0b1a 	add.w	fp, r4, #26
 800f32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f330:	ebaa 0303 	sub.w	r3, sl, r3
 800f334:	eba3 0309 	sub.w	r3, r3, r9
 800f338:	4543      	cmp	r3, r8
 800f33a:	f77f af79 	ble.w	800f230 <_printf_float+0x23c>
 800f33e:	2301      	movs	r3, #1
 800f340:	465a      	mov	r2, fp
 800f342:	4631      	mov	r1, r6
 800f344:	4628      	mov	r0, r5
 800f346:	47b8      	blx	r7
 800f348:	3001      	adds	r0, #1
 800f34a:	f43f aeae 	beq.w	800f0aa <_printf_float+0xb6>
 800f34e:	f108 0801 	add.w	r8, r8, #1
 800f352:	e7ec      	b.n	800f32e <_printf_float+0x33a>
 800f354:	4642      	mov	r2, r8
 800f356:	4631      	mov	r1, r6
 800f358:	4628      	mov	r0, r5
 800f35a:	47b8      	blx	r7
 800f35c:	3001      	adds	r0, #1
 800f35e:	d1c2      	bne.n	800f2e6 <_printf_float+0x2f2>
 800f360:	e6a3      	b.n	800f0aa <_printf_float+0xb6>
 800f362:	2301      	movs	r3, #1
 800f364:	4631      	mov	r1, r6
 800f366:	4628      	mov	r0, r5
 800f368:	9206      	str	r2, [sp, #24]
 800f36a:	47b8      	blx	r7
 800f36c:	3001      	adds	r0, #1
 800f36e:	f43f ae9c 	beq.w	800f0aa <_printf_float+0xb6>
 800f372:	9a06      	ldr	r2, [sp, #24]
 800f374:	f10b 0b01 	add.w	fp, fp, #1
 800f378:	e7bb      	b.n	800f2f2 <_printf_float+0x2fe>
 800f37a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f37e:	4631      	mov	r1, r6
 800f380:	4628      	mov	r0, r5
 800f382:	47b8      	blx	r7
 800f384:	3001      	adds	r0, #1
 800f386:	d1c0      	bne.n	800f30a <_printf_float+0x316>
 800f388:	e68f      	b.n	800f0aa <_printf_float+0xb6>
 800f38a:	9a06      	ldr	r2, [sp, #24]
 800f38c:	464b      	mov	r3, r9
 800f38e:	4442      	add	r2, r8
 800f390:	4631      	mov	r1, r6
 800f392:	4628      	mov	r0, r5
 800f394:	47b8      	blx	r7
 800f396:	3001      	adds	r0, #1
 800f398:	d1c3      	bne.n	800f322 <_printf_float+0x32e>
 800f39a:	e686      	b.n	800f0aa <_printf_float+0xb6>
 800f39c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f3a0:	f1ba 0f01 	cmp.w	sl, #1
 800f3a4:	dc01      	bgt.n	800f3aa <_printf_float+0x3b6>
 800f3a6:	07db      	lsls	r3, r3, #31
 800f3a8:	d536      	bpl.n	800f418 <_printf_float+0x424>
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	4642      	mov	r2, r8
 800f3ae:	4631      	mov	r1, r6
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	47b8      	blx	r7
 800f3b4:	3001      	adds	r0, #1
 800f3b6:	f43f ae78 	beq.w	800f0aa <_printf_float+0xb6>
 800f3ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3be:	4631      	mov	r1, r6
 800f3c0:	4628      	mov	r0, r5
 800f3c2:	47b8      	blx	r7
 800f3c4:	3001      	adds	r0, #1
 800f3c6:	f43f ae70 	beq.w	800f0aa <_printf_float+0xb6>
 800f3ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3d6:	f7f1 fb77 	bl	8000ac8 <__aeabi_dcmpeq>
 800f3da:	b9c0      	cbnz	r0, 800f40e <_printf_float+0x41a>
 800f3dc:	4653      	mov	r3, sl
 800f3de:	f108 0201 	add.w	r2, r8, #1
 800f3e2:	4631      	mov	r1, r6
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	47b8      	blx	r7
 800f3e8:	3001      	adds	r0, #1
 800f3ea:	d10c      	bne.n	800f406 <_printf_float+0x412>
 800f3ec:	e65d      	b.n	800f0aa <_printf_float+0xb6>
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	465a      	mov	r2, fp
 800f3f2:	4631      	mov	r1, r6
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	47b8      	blx	r7
 800f3f8:	3001      	adds	r0, #1
 800f3fa:	f43f ae56 	beq.w	800f0aa <_printf_float+0xb6>
 800f3fe:	f108 0801 	add.w	r8, r8, #1
 800f402:	45d0      	cmp	r8, sl
 800f404:	dbf3      	blt.n	800f3ee <_printf_float+0x3fa>
 800f406:	464b      	mov	r3, r9
 800f408:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f40c:	e6df      	b.n	800f1ce <_printf_float+0x1da>
 800f40e:	f04f 0800 	mov.w	r8, #0
 800f412:	f104 0b1a 	add.w	fp, r4, #26
 800f416:	e7f4      	b.n	800f402 <_printf_float+0x40e>
 800f418:	2301      	movs	r3, #1
 800f41a:	4642      	mov	r2, r8
 800f41c:	e7e1      	b.n	800f3e2 <_printf_float+0x3ee>
 800f41e:	2301      	movs	r3, #1
 800f420:	464a      	mov	r2, r9
 800f422:	4631      	mov	r1, r6
 800f424:	4628      	mov	r0, r5
 800f426:	47b8      	blx	r7
 800f428:	3001      	adds	r0, #1
 800f42a:	f43f ae3e 	beq.w	800f0aa <_printf_float+0xb6>
 800f42e:	f108 0801 	add.w	r8, r8, #1
 800f432:	68e3      	ldr	r3, [r4, #12]
 800f434:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f436:	1a5b      	subs	r3, r3, r1
 800f438:	4543      	cmp	r3, r8
 800f43a:	dcf0      	bgt.n	800f41e <_printf_float+0x42a>
 800f43c:	e6fc      	b.n	800f238 <_printf_float+0x244>
 800f43e:	f04f 0800 	mov.w	r8, #0
 800f442:	f104 0919 	add.w	r9, r4, #25
 800f446:	e7f4      	b.n	800f432 <_printf_float+0x43e>

0800f448 <_printf_common>:
 800f448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f44c:	4616      	mov	r6, r2
 800f44e:	4698      	mov	r8, r3
 800f450:	688a      	ldr	r2, [r1, #8]
 800f452:	690b      	ldr	r3, [r1, #16]
 800f454:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f458:	4293      	cmp	r3, r2
 800f45a:	bfb8      	it	lt
 800f45c:	4613      	movlt	r3, r2
 800f45e:	6033      	str	r3, [r6, #0]
 800f460:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f464:	4607      	mov	r7, r0
 800f466:	460c      	mov	r4, r1
 800f468:	b10a      	cbz	r2, 800f46e <_printf_common+0x26>
 800f46a:	3301      	adds	r3, #1
 800f46c:	6033      	str	r3, [r6, #0]
 800f46e:	6823      	ldr	r3, [r4, #0]
 800f470:	0699      	lsls	r1, r3, #26
 800f472:	bf42      	ittt	mi
 800f474:	6833      	ldrmi	r3, [r6, #0]
 800f476:	3302      	addmi	r3, #2
 800f478:	6033      	strmi	r3, [r6, #0]
 800f47a:	6825      	ldr	r5, [r4, #0]
 800f47c:	f015 0506 	ands.w	r5, r5, #6
 800f480:	d106      	bne.n	800f490 <_printf_common+0x48>
 800f482:	f104 0a19 	add.w	sl, r4, #25
 800f486:	68e3      	ldr	r3, [r4, #12]
 800f488:	6832      	ldr	r2, [r6, #0]
 800f48a:	1a9b      	subs	r3, r3, r2
 800f48c:	42ab      	cmp	r3, r5
 800f48e:	dc26      	bgt.n	800f4de <_printf_common+0x96>
 800f490:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f494:	6822      	ldr	r2, [r4, #0]
 800f496:	3b00      	subs	r3, #0
 800f498:	bf18      	it	ne
 800f49a:	2301      	movne	r3, #1
 800f49c:	0692      	lsls	r2, r2, #26
 800f49e:	d42b      	bmi.n	800f4f8 <_printf_common+0xb0>
 800f4a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f4a4:	4641      	mov	r1, r8
 800f4a6:	4638      	mov	r0, r7
 800f4a8:	47c8      	blx	r9
 800f4aa:	3001      	adds	r0, #1
 800f4ac:	d01e      	beq.n	800f4ec <_printf_common+0xa4>
 800f4ae:	6823      	ldr	r3, [r4, #0]
 800f4b0:	6922      	ldr	r2, [r4, #16]
 800f4b2:	f003 0306 	and.w	r3, r3, #6
 800f4b6:	2b04      	cmp	r3, #4
 800f4b8:	bf02      	ittt	eq
 800f4ba:	68e5      	ldreq	r5, [r4, #12]
 800f4bc:	6833      	ldreq	r3, [r6, #0]
 800f4be:	1aed      	subeq	r5, r5, r3
 800f4c0:	68a3      	ldr	r3, [r4, #8]
 800f4c2:	bf0c      	ite	eq
 800f4c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f4c8:	2500      	movne	r5, #0
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	bfc4      	itt	gt
 800f4ce:	1a9b      	subgt	r3, r3, r2
 800f4d0:	18ed      	addgt	r5, r5, r3
 800f4d2:	2600      	movs	r6, #0
 800f4d4:	341a      	adds	r4, #26
 800f4d6:	42b5      	cmp	r5, r6
 800f4d8:	d11a      	bne.n	800f510 <_printf_common+0xc8>
 800f4da:	2000      	movs	r0, #0
 800f4dc:	e008      	b.n	800f4f0 <_printf_common+0xa8>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	4652      	mov	r2, sl
 800f4e2:	4641      	mov	r1, r8
 800f4e4:	4638      	mov	r0, r7
 800f4e6:	47c8      	blx	r9
 800f4e8:	3001      	adds	r0, #1
 800f4ea:	d103      	bne.n	800f4f4 <_printf_common+0xac>
 800f4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4f4:	3501      	adds	r5, #1
 800f4f6:	e7c6      	b.n	800f486 <_printf_common+0x3e>
 800f4f8:	18e1      	adds	r1, r4, r3
 800f4fa:	1c5a      	adds	r2, r3, #1
 800f4fc:	2030      	movs	r0, #48	@ 0x30
 800f4fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f502:	4422      	add	r2, r4
 800f504:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f508:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f50c:	3302      	adds	r3, #2
 800f50e:	e7c7      	b.n	800f4a0 <_printf_common+0x58>
 800f510:	2301      	movs	r3, #1
 800f512:	4622      	mov	r2, r4
 800f514:	4641      	mov	r1, r8
 800f516:	4638      	mov	r0, r7
 800f518:	47c8      	blx	r9
 800f51a:	3001      	adds	r0, #1
 800f51c:	d0e6      	beq.n	800f4ec <_printf_common+0xa4>
 800f51e:	3601      	adds	r6, #1
 800f520:	e7d9      	b.n	800f4d6 <_printf_common+0x8e>
	...

0800f524 <_printf_i>:
 800f524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f528:	7e0f      	ldrb	r7, [r1, #24]
 800f52a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f52c:	2f78      	cmp	r7, #120	@ 0x78
 800f52e:	4691      	mov	r9, r2
 800f530:	4680      	mov	r8, r0
 800f532:	460c      	mov	r4, r1
 800f534:	469a      	mov	sl, r3
 800f536:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f53a:	d807      	bhi.n	800f54c <_printf_i+0x28>
 800f53c:	2f62      	cmp	r7, #98	@ 0x62
 800f53e:	d80a      	bhi.n	800f556 <_printf_i+0x32>
 800f540:	2f00      	cmp	r7, #0
 800f542:	f000 80d1 	beq.w	800f6e8 <_printf_i+0x1c4>
 800f546:	2f58      	cmp	r7, #88	@ 0x58
 800f548:	f000 80b8 	beq.w	800f6bc <_printf_i+0x198>
 800f54c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f550:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f554:	e03a      	b.n	800f5cc <_printf_i+0xa8>
 800f556:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f55a:	2b15      	cmp	r3, #21
 800f55c:	d8f6      	bhi.n	800f54c <_printf_i+0x28>
 800f55e:	a101      	add	r1, pc, #4	@ (adr r1, 800f564 <_printf_i+0x40>)
 800f560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f564:	0800f5bd 	.word	0x0800f5bd
 800f568:	0800f5d1 	.word	0x0800f5d1
 800f56c:	0800f54d 	.word	0x0800f54d
 800f570:	0800f54d 	.word	0x0800f54d
 800f574:	0800f54d 	.word	0x0800f54d
 800f578:	0800f54d 	.word	0x0800f54d
 800f57c:	0800f5d1 	.word	0x0800f5d1
 800f580:	0800f54d 	.word	0x0800f54d
 800f584:	0800f54d 	.word	0x0800f54d
 800f588:	0800f54d 	.word	0x0800f54d
 800f58c:	0800f54d 	.word	0x0800f54d
 800f590:	0800f6cf 	.word	0x0800f6cf
 800f594:	0800f5fb 	.word	0x0800f5fb
 800f598:	0800f689 	.word	0x0800f689
 800f59c:	0800f54d 	.word	0x0800f54d
 800f5a0:	0800f54d 	.word	0x0800f54d
 800f5a4:	0800f6f1 	.word	0x0800f6f1
 800f5a8:	0800f54d 	.word	0x0800f54d
 800f5ac:	0800f5fb 	.word	0x0800f5fb
 800f5b0:	0800f54d 	.word	0x0800f54d
 800f5b4:	0800f54d 	.word	0x0800f54d
 800f5b8:	0800f691 	.word	0x0800f691
 800f5bc:	6833      	ldr	r3, [r6, #0]
 800f5be:	1d1a      	adds	r2, r3, #4
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	6032      	str	r2, [r6, #0]
 800f5c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f5c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	e09c      	b.n	800f70a <_printf_i+0x1e6>
 800f5d0:	6833      	ldr	r3, [r6, #0]
 800f5d2:	6820      	ldr	r0, [r4, #0]
 800f5d4:	1d19      	adds	r1, r3, #4
 800f5d6:	6031      	str	r1, [r6, #0]
 800f5d8:	0606      	lsls	r6, r0, #24
 800f5da:	d501      	bpl.n	800f5e0 <_printf_i+0xbc>
 800f5dc:	681d      	ldr	r5, [r3, #0]
 800f5de:	e003      	b.n	800f5e8 <_printf_i+0xc4>
 800f5e0:	0645      	lsls	r5, r0, #25
 800f5e2:	d5fb      	bpl.n	800f5dc <_printf_i+0xb8>
 800f5e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f5e8:	2d00      	cmp	r5, #0
 800f5ea:	da03      	bge.n	800f5f4 <_printf_i+0xd0>
 800f5ec:	232d      	movs	r3, #45	@ 0x2d
 800f5ee:	426d      	negs	r5, r5
 800f5f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5f4:	4858      	ldr	r0, [pc, #352]	@ (800f758 <_printf_i+0x234>)
 800f5f6:	230a      	movs	r3, #10
 800f5f8:	e011      	b.n	800f61e <_printf_i+0xfa>
 800f5fa:	6821      	ldr	r1, [r4, #0]
 800f5fc:	6833      	ldr	r3, [r6, #0]
 800f5fe:	0608      	lsls	r0, r1, #24
 800f600:	f853 5b04 	ldr.w	r5, [r3], #4
 800f604:	d402      	bmi.n	800f60c <_printf_i+0xe8>
 800f606:	0649      	lsls	r1, r1, #25
 800f608:	bf48      	it	mi
 800f60a:	b2ad      	uxthmi	r5, r5
 800f60c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f60e:	4852      	ldr	r0, [pc, #328]	@ (800f758 <_printf_i+0x234>)
 800f610:	6033      	str	r3, [r6, #0]
 800f612:	bf14      	ite	ne
 800f614:	230a      	movne	r3, #10
 800f616:	2308      	moveq	r3, #8
 800f618:	2100      	movs	r1, #0
 800f61a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f61e:	6866      	ldr	r6, [r4, #4]
 800f620:	60a6      	str	r6, [r4, #8]
 800f622:	2e00      	cmp	r6, #0
 800f624:	db05      	blt.n	800f632 <_printf_i+0x10e>
 800f626:	6821      	ldr	r1, [r4, #0]
 800f628:	432e      	orrs	r6, r5
 800f62a:	f021 0104 	bic.w	r1, r1, #4
 800f62e:	6021      	str	r1, [r4, #0]
 800f630:	d04b      	beq.n	800f6ca <_printf_i+0x1a6>
 800f632:	4616      	mov	r6, r2
 800f634:	fbb5 f1f3 	udiv	r1, r5, r3
 800f638:	fb03 5711 	mls	r7, r3, r1, r5
 800f63c:	5dc7      	ldrb	r7, [r0, r7]
 800f63e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f642:	462f      	mov	r7, r5
 800f644:	42bb      	cmp	r3, r7
 800f646:	460d      	mov	r5, r1
 800f648:	d9f4      	bls.n	800f634 <_printf_i+0x110>
 800f64a:	2b08      	cmp	r3, #8
 800f64c:	d10b      	bne.n	800f666 <_printf_i+0x142>
 800f64e:	6823      	ldr	r3, [r4, #0]
 800f650:	07df      	lsls	r7, r3, #31
 800f652:	d508      	bpl.n	800f666 <_printf_i+0x142>
 800f654:	6923      	ldr	r3, [r4, #16]
 800f656:	6861      	ldr	r1, [r4, #4]
 800f658:	4299      	cmp	r1, r3
 800f65a:	bfde      	ittt	le
 800f65c:	2330      	movle	r3, #48	@ 0x30
 800f65e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f662:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f666:	1b92      	subs	r2, r2, r6
 800f668:	6122      	str	r2, [r4, #16]
 800f66a:	f8cd a000 	str.w	sl, [sp]
 800f66e:	464b      	mov	r3, r9
 800f670:	aa03      	add	r2, sp, #12
 800f672:	4621      	mov	r1, r4
 800f674:	4640      	mov	r0, r8
 800f676:	f7ff fee7 	bl	800f448 <_printf_common>
 800f67a:	3001      	adds	r0, #1
 800f67c:	d14a      	bne.n	800f714 <_printf_i+0x1f0>
 800f67e:	f04f 30ff 	mov.w	r0, #4294967295
 800f682:	b004      	add	sp, #16
 800f684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f688:	6823      	ldr	r3, [r4, #0]
 800f68a:	f043 0320 	orr.w	r3, r3, #32
 800f68e:	6023      	str	r3, [r4, #0]
 800f690:	4832      	ldr	r0, [pc, #200]	@ (800f75c <_printf_i+0x238>)
 800f692:	2778      	movs	r7, #120	@ 0x78
 800f694:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f698:	6823      	ldr	r3, [r4, #0]
 800f69a:	6831      	ldr	r1, [r6, #0]
 800f69c:	061f      	lsls	r7, r3, #24
 800f69e:	f851 5b04 	ldr.w	r5, [r1], #4
 800f6a2:	d402      	bmi.n	800f6aa <_printf_i+0x186>
 800f6a4:	065f      	lsls	r7, r3, #25
 800f6a6:	bf48      	it	mi
 800f6a8:	b2ad      	uxthmi	r5, r5
 800f6aa:	6031      	str	r1, [r6, #0]
 800f6ac:	07d9      	lsls	r1, r3, #31
 800f6ae:	bf44      	itt	mi
 800f6b0:	f043 0320 	orrmi.w	r3, r3, #32
 800f6b4:	6023      	strmi	r3, [r4, #0]
 800f6b6:	b11d      	cbz	r5, 800f6c0 <_printf_i+0x19c>
 800f6b8:	2310      	movs	r3, #16
 800f6ba:	e7ad      	b.n	800f618 <_printf_i+0xf4>
 800f6bc:	4826      	ldr	r0, [pc, #152]	@ (800f758 <_printf_i+0x234>)
 800f6be:	e7e9      	b.n	800f694 <_printf_i+0x170>
 800f6c0:	6823      	ldr	r3, [r4, #0]
 800f6c2:	f023 0320 	bic.w	r3, r3, #32
 800f6c6:	6023      	str	r3, [r4, #0]
 800f6c8:	e7f6      	b.n	800f6b8 <_printf_i+0x194>
 800f6ca:	4616      	mov	r6, r2
 800f6cc:	e7bd      	b.n	800f64a <_printf_i+0x126>
 800f6ce:	6833      	ldr	r3, [r6, #0]
 800f6d0:	6825      	ldr	r5, [r4, #0]
 800f6d2:	6961      	ldr	r1, [r4, #20]
 800f6d4:	1d18      	adds	r0, r3, #4
 800f6d6:	6030      	str	r0, [r6, #0]
 800f6d8:	062e      	lsls	r6, r5, #24
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	d501      	bpl.n	800f6e2 <_printf_i+0x1be>
 800f6de:	6019      	str	r1, [r3, #0]
 800f6e0:	e002      	b.n	800f6e8 <_printf_i+0x1c4>
 800f6e2:	0668      	lsls	r0, r5, #25
 800f6e4:	d5fb      	bpl.n	800f6de <_printf_i+0x1ba>
 800f6e6:	8019      	strh	r1, [r3, #0]
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	6123      	str	r3, [r4, #16]
 800f6ec:	4616      	mov	r6, r2
 800f6ee:	e7bc      	b.n	800f66a <_printf_i+0x146>
 800f6f0:	6833      	ldr	r3, [r6, #0]
 800f6f2:	1d1a      	adds	r2, r3, #4
 800f6f4:	6032      	str	r2, [r6, #0]
 800f6f6:	681e      	ldr	r6, [r3, #0]
 800f6f8:	6862      	ldr	r2, [r4, #4]
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	4630      	mov	r0, r6
 800f6fe:	f7f0 fd67 	bl	80001d0 <memchr>
 800f702:	b108      	cbz	r0, 800f708 <_printf_i+0x1e4>
 800f704:	1b80      	subs	r0, r0, r6
 800f706:	6060      	str	r0, [r4, #4]
 800f708:	6863      	ldr	r3, [r4, #4]
 800f70a:	6123      	str	r3, [r4, #16]
 800f70c:	2300      	movs	r3, #0
 800f70e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f712:	e7aa      	b.n	800f66a <_printf_i+0x146>
 800f714:	6923      	ldr	r3, [r4, #16]
 800f716:	4632      	mov	r2, r6
 800f718:	4649      	mov	r1, r9
 800f71a:	4640      	mov	r0, r8
 800f71c:	47d0      	blx	sl
 800f71e:	3001      	adds	r0, #1
 800f720:	d0ad      	beq.n	800f67e <_printf_i+0x15a>
 800f722:	6823      	ldr	r3, [r4, #0]
 800f724:	079b      	lsls	r3, r3, #30
 800f726:	d413      	bmi.n	800f750 <_printf_i+0x22c>
 800f728:	68e0      	ldr	r0, [r4, #12]
 800f72a:	9b03      	ldr	r3, [sp, #12]
 800f72c:	4298      	cmp	r0, r3
 800f72e:	bfb8      	it	lt
 800f730:	4618      	movlt	r0, r3
 800f732:	e7a6      	b.n	800f682 <_printf_i+0x15e>
 800f734:	2301      	movs	r3, #1
 800f736:	4632      	mov	r2, r6
 800f738:	4649      	mov	r1, r9
 800f73a:	4640      	mov	r0, r8
 800f73c:	47d0      	blx	sl
 800f73e:	3001      	adds	r0, #1
 800f740:	d09d      	beq.n	800f67e <_printf_i+0x15a>
 800f742:	3501      	adds	r5, #1
 800f744:	68e3      	ldr	r3, [r4, #12]
 800f746:	9903      	ldr	r1, [sp, #12]
 800f748:	1a5b      	subs	r3, r3, r1
 800f74a:	42ab      	cmp	r3, r5
 800f74c:	dcf2      	bgt.n	800f734 <_printf_i+0x210>
 800f74e:	e7eb      	b.n	800f728 <_printf_i+0x204>
 800f750:	2500      	movs	r5, #0
 800f752:	f104 0619 	add.w	r6, r4, #25
 800f756:	e7f5      	b.n	800f744 <_printf_i+0x220>
 800f758:	0801390e 	.word	0x0801390e
 800f75c:	0801391f 	.word	0x0801391f

0800f760 <std>:
 800f760:	2300      	movs	r3, #0
 800f762:	b510      	push	{r4, lr}
 800f764:	4604      	mov	r4, r0
 800f766:	e9c0 3300 	strd	r3, r3, [r0]
 800f76a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f76e:	6083      	str	r3, [r0, #8]
 800f770:	8181      	strh	r1, [r0, #12]
 800f772:	6643      	str	r3, [r0, #100]	@ 0x64
 800f774:	81c2      	strh	r2, [r0, #14]
 800f776:	6183      	str	r3, [r0, #24]
 800f778:	4619      	mov	r1, r3
 800f77a:	2208      	movs	r2, #8
 800f77c:	305c      	adds	r0, #92	@ 0x5c
 800f77e:	f000 fa09 	bl	800fb94 <memset>
 800f782:	4b0d      	ldr	r3, [pc, #52]	@ (800f7b8 <std+0x58>)
 800f784:	6263      	str	r3, [r4, #36]	@ 0x24
 800f786:	4b0d      	ldr	r3, [pc, #52]	@ (800f7bc <std+0x5c>)
 800f788:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f78a:	4b0d      	ldr	r3, [pc, #52]	@ (800f7c0 <std+0x60>)
 800f78c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f78e:	4b0d      	ldr	r3, [pc, #52]	@ (800f7c4 <std+0x64>)
 800f790:	6323      	str	r3, [r4, #48]	@ 0x30
 800f792:	4b0d      	ldr	r3, [pc, #52]	@ (800f7c8 <std+0x68>)
 800f794:	6224      	str	r4, [r4, #32]
 800f796:	429c      	cmp	r4, r3
 800f798:	d006      	beq.n	800f7a8 <std+0x48>
 800f79a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f79e:	4294      	cmp	r4, r2
 800f7a0:	d002      	beq.n	800f7a8 <std+0x48>
 800f7a2:	33d0      	adds	r3, #208	@ 0xd0
 800f7a4:	429c      	cmp	r4, r3
 800f7a6:	d105      	bne.n	800f7b4 <std+0x54>
 800f7a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7b0:	f000 ba6c 	b.w	800fc8c <__retarget_lock_init_recursive>
 800f7b4:	bd10      	pop	{r4, pc}
 800f7b6:	bf00      	nop
 800f7b8:	0800f9c5 	.word	0x0800f9c5
 800f7bc:	0800f9e7 	.word	0x0800f9e7
 800f7c0:	0800fa1f 	.word	0x0800fa1f
 800f7c4:	0800fa43 	.word	0x0800fa43
 800f7c8:	20000a40 	.word	0x20000a40

0800f7cc <stdio_exit_handler>:
 800f7cc:	4a02      	ldr	r2, [pc, #8]	@ (800f7d8 <stdio_exit_handler+0xc>)
 800f7ce:	4903      	ldr	r1, [pc, #12]	@ (800f7dc <stdio_exit_handler+0x10>)
 800f7d0:	4803      	ldr	r0, [pc, #12]	@ (800f7e0 <stdio_exit_handler+0x14>)
 800f7d2:	f000 b869 	b.w	800f8a8 <_fwalk_sglue>
 800f7d6:	bf00      	nop
 800f7d8:	200000e0 	.word	0x200000e0
 800f7dc:	080115c9 	.word	0x080115c9
 800f7e0:	200000f0 	.word	0x200000f0

0800f7e4 <cleanup_stdio>:
 800f7e4:	6841      	ldr	r1, [r0, #4]
 800f7e6:	4b0c      	ldr	r3, [pc, #48]	@ (800f818 <cleanup_stdio+0x34>)
 800f7e8:	4299      	cmp	r1, r3
 800f7ea:	b510      	push	{r4, lr}
 800f7ec:	4604      	mov	r4, r0
 800f7ee:	d001      	beq.n	800f7f4 <cleanup_stdio+0x10>
 800f7f0:	f001 feea 	bl	80115c8 <_fflush_r>
 800f7f4:	68a1      	ldr	r1, [r4, #8]
 800f7f6:	4b09      	ldr	r3, [pc, #36]	@ (800f81c <cleanup_stdio+0x38>)
 800f7f8:	4299      	cmp	r1, r3
 800f7fa:	d002      	beq.n	800f802 <cleanup_stdio+0x1e>
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f001 fee3 	bl	80115c8 <_fflush_r>
 800f802:	68e1      	ldr	r1, [r4, #12]
 800f804:	4b06      	ldr	r3, [pc, #24]	@ (800f820 <cleanup_stdio+0x3c>)
 800f806:	4299      	cmp	r1, r3
 800f808:	d004      	beq.n	800f814 <cleanup_stdio+0x30>
 800f80a:	4620      	mov	r0, r4
 800f80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f810:	f001 beda 	b.w	80115c8 <_fflush_r>
 800f814:	bd10      	pop	{r4, pc}
 800f816:	bf00      	nop
 800f818:	20000a40 	.word	0x20000a40
 800f81c:	20000aa8 	.word	0x20000aa8
 800f820:	20000b10 	.word	0x20000b10

0800f824 <global_stdio_init.part.0>:
 800f824:	b510      	push	{r4, lr}
 800f826:	4b0b      	ldr	r3, [pc, #44]	@ (800f854 <global_stdio_init.part.0+0x30>)
 800f828:	4c0b      	ldr	r4, [pc, #44]	@ (800f858 <global_stdio_init.part.0+0x34>)
 800f82a:	4a0c      	ldr	r2, [pc, #48]	@ (800f85c <global_stdio_init.part.0+0x38>)
 800f82c:	601a      	str	r2, [r3, #0]
 800f82e:	4620      	mov	r0, r4
 800f830:	2200      	movs	r2, #0
 800f832:	2104      	movs	r1, #4
 800f834:	f7ff ff94 	bl	800f760 <std>
 800f838:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f83c:	2201      	movs	r2, #1
 800f83e:	2109      	movs	r1, #9
 800f840:	f7ff ff8e 	bl	800f760 <std>
 800f844:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f848:	2202      	movs	r2, #2
 800f84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f84e:	2112      	movs	r1, #18
 800f850:	f7ff bf86 	b.w	800f760 <std>
 800f854:	20000b78 	.word	0x20000b78
 800f858:	20000a40 	.word	0x20000a40
 800f85c:	0800f7cd 	.word	0x0800f7cd

0800f860 <__sfp_lock_acquire>:
 800f860:	4801      	ldr	r0, [pc, #4]	@ (800f868 <__sfp_lock_acquire+0x8>)
 800f862:	f000 ba14 	b.w	800fc8e <__retarget_lock_acquire_recursive>
 800f866:	bf00      	nop
 800f868:	20000b81 	.word	0x20000b81

0800f86c <__sfp_lock_release>:
 800f86c:	4801      	ldr	r0, [pc, #4]	@ (800f874 <__sfp_lock_release+0x8>)
 800f86e:	f000 ba0f 	b.w	800fc90 <__retarget_lock_release_recursive>
 800f872:	bf00      	nop
 800f874:	20000b81 	.word	0x20000b81

0800f878 <__sinit>:
 800f878:	b510      	push	{r4, lr}
 800f87a:	4604      	mov	r4, r0
 800f87c:	f7ff fff0 	bl	800f860 <__sfp_lock_acquire>
 800f880:	6a23      	ldr	r3, [r4, #32]
 800f882:	b11b      	cbz	r3, 800f88c <__sinit+0x14>
 800f884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f888:	f7ff bff0 	b.w	800f86c <__sfp_lock_release>
 800f88c:	4b04      	ldr	r3, [pc, #16]	@ (800f8a0 <__sinit+0x28>)
 800f88e:	6223      	str	r3, [r4, #32]
 800f890:	4b04      	ldr	r3, [pc, #16]	@ (800f8a4 <__sinit+0x2c>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d1f5      	bne.n	800f884 <__sinit+0xc>
 800f898:	f7ff ffc4 	bl	800f824 <global_stdio_init.part.0>
 800f89c:	e7f2      	b.n	800f884 <__sinit+0xc>
 800f89e:	bf00      	nop
 800f8a0:	0800f7e5 	.word	0x0800f7e5
 800f8a4:	20000b78 	.word	0x20000b78

0800f8a8 <_fwalk_sglue>:
 800f8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8ac:	4607      	mov	r7, r0
 800f8ae:	4688      	mov	r8, r1
 800f8b0:	4614      	mov	r4, r2
 800f8b2:	2600      	movs	r6, #0
 800f8b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f8b8:	f1b9 0901 	subs.w	r9, r9, #1
 800f8bc:	d505      	bpl.n	800f8ca <_fwalk_sglue+0x22>
 800f8be:	6824      	ldr	r4, [r4, #0]
 800f8c0:	2c00      	cmp	r4, #0
 800f8c2:	d1f7      	bne.n	800f8b4 <_fwalk_sglue+0xc>
 800f8c4:	4630      	mov	r0, r6
 800f8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8ca:	89ab      	ldrh	r3, [r5, #12]
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d907      	bls.n	800f8e0 <_fwalk_sglue+0x38>
 800f8d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	d003      	beq.n	800f8e0 <_fwalk_sglue+0x38>
 800f8d8:	4629      	mov	r1, r5
 800f8da:	4638      	mov	r0, r7
 800f8dc:	47c0      	blx	r8
 800f8de:	4306      	orrs	r6, r0
 800f8e0:	3568      	adds	r5, #104	@ 0x68
 800f8e2:	e7e9      	b.n	800f8b8 <_fwalk_sglue+0x10>

0800f8e4 <iprintf>:
 800f8e4:	b40f      	push	{r0, r1, r2, r3}
 800f8e6:	b507      	push	{r0, r1, r2, lr}
 800f8e8:	4906      	ldr	r1, [pc, #24]	@ (800f904 <iprintf+0x20>)
 800f8ea:	ab04      	add	r3, sp, #16
 800f8ec:	6808      	ldr	r0, [r1, #0]
 800f8ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8f2:	6881      	ldr	r1, [r0, #8]
 800f8f4:	9301      	str	r3, [sp, #4]
 800f8f6:	f001 fccb 	bl	8011290 <_vfiprintf_r>
 800f8fa:	b003      	add	sp, #12
 800f8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f900:	b004      	add	sp, #16
 800f902:	4770      	bx	lr
 800f904:	200000ec 	.word	0x200000ec

0800f908 <_puts_r>:
 800f908:	6a03      	ldr	r3, [r0, #32]
 800f90a:	b570      	push	{r4, r5, r6, lr}
 800f90c:	6884      	ldr	r4, [r0, #8]
 800f90e:	4605      	mov	r5, r0
 800f910:	460e      	mov	r6, r1
 800f912:	b90b      	cbnz	r3, 800f918 <_puts_r+0x10>
 800f914:	f7ff ffb0 	bl	800f878 <__sinit>
 800f918:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f91a:	07db      	lsls	r3, r3, #31
 800f91c:	d405      	bmi.n	800f92a <_puts_r+0x22>
 800f91e:	89a3      	ldrh	r3, [r4, #12]
 800f920:	0598      	lsls	r0, r3, #22
 800f922:	d402      	bmi.n	800f92a <_puts_r+0x22>
 800f924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f926:	f000 f9b2 	bl	800fc8e <__retarget_lock_acquire_recursive>
 800f92a:	89a3      	ldrh	r3, [r4, #12]
 800f92c:	0719      	lsls	r1, r3, #28
 800f92e:	d502      	bpl.n	800f936 <_puts_r+0x2e>
 800f930:	6923      	ldr	r3, [r4, #16]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d135      	bne.n	800f9a2 <_puts_r+0x9a>
 800f936:	4621      	mov	r1, r4
 800f938:	4628      	mov	r0, r5
 800f93a:	f000 f8c5 	bl	800fac8 <__swsetup_r>
 800f93e:	b380      	cbz	r0, 800f9a2 <_puts_r+0x9a>
 800f940:	f04f 35ff 	mov.w	r5, #4294967295
 800f944:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f946:	07da      	lsls	r2, r3, #31
 800f948:	d405      	bmi.n	800f956 <_puts_r+0x4e>
 800f94a:	89a3      	ldrh	r3, [r4, #12]
 800f94c:	059b      	lsls	r3, r3, #22
 800f94e:	d402      	bmi.n	800f956 <_puts_r+0x4e>
 800f950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f952:	f000 f99d 	bl	800fc90 <__retarget_lock_release_recursive>
 800f956:	4628      	mov	r0, r5
 800f958:	bd70      	pop	{r4, r5, r6, pc}
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	da04      	bge.n	800f968 <_puts_r+0x60>
 800f95e:	69a2      	ldr	r2, [r4, #24]
 800f960:	429a      	cmp	r2, r3
 800f962:	dc17      	bgt.n	800f994 <_puts_r+0x8c>
 800f964:	290a      	cmp	r1, #10
 800f966:	d015      	beq.n	800f994 <_puts_r+0x8c>
 800f968:	6823      	ldr	r3, [r4, #0]
 800f96a:	1c5a      	adds	r2, r3, #1
 800f96c:	6022      	str	r2, [r4, #0]
 800f96e:	7019      	strb	r1, [r3, #0]
 800f970:	68a3      	ldr	r3, [r4, #8]
 800f972:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f976:	3b01      	subs	r3, #1
 800f978:	60a3      	str	r3, [r4, #8]
 800f97a:	2900      	cmp	r1, #0
 800f97c:	d1ed      	bne.n	800f95a <_puts_r+0x52>
 800f97e:	2b00      	cmp	r3, #0
 800f980:	da11      	bge.n	800f9a6 <_puts_r+0x9e>
 800f982:	4622      	mov	r2, r4
 800f984:	210a      	movs	r1, #10
 800f986:	4628      	mov	r0, r5
 800f988:	f000 f85f 	bl	800fa4a <__swbuf_r>
 800f98c:	3001      	adds	r0, #1
 800f98e:	d0d7      	beq.n	800f940 <_puts_r+0x38>
 800f990:	250a      	movs	r5, #10
 800f992:	e7d7      	b.n	800f944 <_puts_r+0x3c>
 800f994:	4622      	mov	r2, r4
 800f996:	4628      	mov	r0, r5
 800f998:	f000 f857 	bl	800fa4a <__swbuf_r>
 800f99c:	3001      	adds	r0, #1
 800f99e:	d1e7      	bne.n	800f970 <_puts_r+0x68>
 800f9a0:	e7ce      	b.n	800f940 <_puts_r+0x38>
 800f9a2:	3e01      	subs	r6, #1
 800f9a4:	e7e4      	b.n	800f970 <_puts_r+0x68>
 800f9a6:	6823      	ldr	r3, [r4, #0]
 800f9a8:	1c5a      	adds	r2, r3, #1
 800f9aa:	6022      	str	r2, [r4, #0]
 800f9ac:	220a      	movs	r2, #10
 800f9ae:	701a      	strb	r2, [r3, #0]
 800f9b0:	e7ee      	b.n	800f990 <_puts_r+0x88>
	...

0800f9b4 <puts>:
 800f9b4:	4b02      	ldr	r3, [pc, #8]	@ (800f9c0 <puts+0xc>)
 800f9b6:	4601      	mov	r1, r0
 800f9b8:	6818      	ldr	r0, [r3, #0]
 800f9ba:	f7ff bfa5 	b.w	800f908 <_puts_r>
 800f9be:	bf00      	nop
 800f9c0:	200000ec 	.word	0x200000ec

0800f9c4 <__sread>:
 800f9c4:	b510      	push	{r4, lr}
 800f9c6:	460c      	mov	r4, r1
 800f9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9cc:	f000 f910 	bl	800fbf0 <_read_r>
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	bfab      	itete	ge
 800f9d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f9d6:	89a3      	ldrhlt	r3, [r4, #12]
 800f9d8:	181b      	addge	r3, r3, r0
 800f9da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f9de:	bfac      	ite	ge
 800f9e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f9e2:	81a3      	strhlt	r3, [r4, #12]
 800f9e4:	bd10      	pop	{r4, pc}

0800f9e6 <__swrite>:
 800f9e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ea:	461f      	mov	r7, r3
 800f9ec:	898b      	ldrh	r3, [r1, #12]
 800f9ee:	05db      	lsls	r3, r3, #23
 800f9f0:	4605      	mov	r5, r0
 800f9f2:	460c      	mov	r4, r1
 800f9f4:	4616      	mov	r6, r2
 800f9f6:	d505      	bpl.n	800fa04 <__swrite+0x1e>
 800f9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9fc:	2302      	movs	r3, #2
 800f9fe:	2200      	movs	r2, #0
 800fa00:	f000 f8e4 	bl	800fbcc <_lseek_r>
 800fa04:	89a3      	ldrh	r3, [r4, #12]
 800fa06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa0e:	81a3      	strh	r3, [r4, #12]
 800fa10:	4632      	mov	r2, r6
 800fa12:	463b      	mov	r3, r7
 800fa14:	4628      	mov	r0, r5
 800fa16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa1a:	f000 b8fb 	b.w	800fc14 <_write_r>

0800fa1e <__sseek>:
 800fa1e:	b510      	push	{r4, lr}
 800fa20:	460c      	mov	r4, r1
 800fa22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa26:	f000 f8d1 	bl	800fbcc <_lseek_r>
 800fa2a:	1c43      	adds	r3, r0, #1
 800fa2c:	89a3      	ldrh	r3, [r4, #12]
 800fa2e:	bf15      	itete	ne
 800fa30:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fa32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fa36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fa3a:	81a3      	strheq	r3, [r4, #12]
 800fa3c:	bf18      	it	ne
 800fa3e:	81a3      	strhne	r3, [r4, #12]
 800fa40:	bd10      	pop	{r4, pc}

0800fa42 <__sclose>:
 800fa42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa46:	f000 b8b1 	b.w	800fbac <_close_r>

0800fa4a <__swbuf_r>:
 800fa4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa4c:	460e      	mov	r6, r1
 800fa4e:	4614      	mov	r4, r2
 800fa50:	4605      	mov	r5, r0
 800fa52:	b118      	cbz	r0, 800fa5c <__swbuf_r+0x12>
 800fa54:	6a03      	ldr	r3, [r0, #32]
 800fa56:	b90b      	cbnz	r3, 800fa5c <__swbuf_r+0x12>
 800fa58:	f7ff ff0e 	bl	800f878 <__sinit>
 800fa5c:	69a3      	ldr	r3, [r4, #24]
 800fa5e:	60a3      	str	r3, [r4, #8]
 800fa60:	89a3      	ldrh	r3, [r4, #12]
 800fa62:	071a      	lsls	r2, r3, #28
 800fa64:	d501      	bpl.n	800fa6a <__swbuf_r+0x20>
 800fa66:	6923      	ldr	r3, [r4, #16]
 800fa68:	b943      	cbnz	r3, 800fa7c <__swbuf_r+0x32>
 800fa6a:	4621      	mov	r1, r4
 800fa6c:	4628      	mov	r0, r5
 800fa6e:	f000 f82b 	bl	800fac8 <__swsetup_r>
 800fa72:	b118      	cbz	r0, 800fa7c <__swbuf_r+0x32>
 800fa74:	f04f 37ff 	mov.w	r7, #4294967295
 800fa78:	4638      	mov	r0, r7
 800fa7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa7c:	6823      	ldr	r3, [r4, #0]
 800fa7e:	6922      	ldr	r2, [r4, #16]
 800fa80:	1a98      	subs	r0, r3, r2
 800fa82:	6963      	ldr	r3, [r4, #20]
 800fa84:	b2f6      	uxtb	r6, r6
 800fa86:	4283      	cmp	r3, r0
 800fa88:	4637      	mov	r7, r6
 800fa8a:	dc05      	bgt.n	800fa98 <__swbuf_r+0x4e>
 800fa8c:	4621      	mov	r1, r4
 800fa8e:	4628      	mov	r0, r5
 800fa90:	f001 fd9a 	bl	80115c8 <_fflush_r>
 800fa94:	2800      	cmp	r0, #0
 800fa96:	d1ed      	bne.n	800fa74 <__swbuf_r+0x2a>
 800fa98:	68a3      	ldr	r3, [r4, #8]
 800fa9a:	3b01      	subs	r3, #1
 800fa9c:	60a3      	str	r3, [r4, #8]
 800fa9e:	6823      	ldr	r3, [r4, #0]
 800faa0:	1c5a      	adds	r2, r3, #1
 800faa2:	6022      	str	r2, [r4, #0]
 800faa4:	701e      	strb	r6, [r3, #0]
 800faa6:	6962      	ldr	r2, [r4, #20]
 800faa8:	1c43      	adds	r3, r0, #1
 800faaa:	429a      	cmp	r2, r3
 800faac:	d004      	beq.n	800fab8 <__swbuf_r+0x6e>
 800faae:	89a3      	ldrh	r3, [r4, #12]
 800fab0:	07db      	lsls	r3, r3, #31
 800fab2:	d5e1      	bpl.n	800fa78 <__swbuf_r+0x2e>
 800fab4:	2e0a      	cmp	r6, #10
 800fab6:	d1df      	bne.n	800fa78 <__swbuf_r+0x2e>
 800fab8:	4621      	mov	r1, r4
 800faba:	4628      	mov	r0, r5
 800fabc:	f001 fd84 	bl	80115c8 <_fflush_r>
 800fac0:	2800      	cmp	r0, #0
 800fac2:	d0d9      	beq.n	800fa78 <__swbuf_r+0x2e>
 800fac4:	e7d6      	b.n	800fa74 <__swbuf_r+0x2a>
	...

0800fac8 <__swsetup_r>:
 800fac8:	b538      	push	{r3, r4, r5, lr}
 800faca:	4b29      	ldr	r3, [pc, #164]	@ (800fb70 <__swsetup_r+0xa8>)
 800facc:	4605      	mov	r5, r0
 800face:	6818      	ldr	r0, [r3, #0]
 800fad0:	460c      	mov	r4, r1
 800fad2:	b118      	cbz	r0, 800fadc <__swsetup_r+0x14>
 800fad4:	6a03      	ldr	r3, [r0, #32]
 800fad6:	b90b      	cbnz	r3, 800fadc <__swsetup_r+0x14>
 800fad8:	f7ff fece 	bl	800f878 <__sinit>
 800fadc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fae0:	0719      	lsls	r1, r3, #28
 800fae2:	d422      	bmi.n	800fb2a <__swsetup_r+0x62>
 800fae4:	06da      	lsls	r2, r3, #27
 800fae6:	d407      	bmi.n	800faf8 <__swsetup_r+0x30>
 800fae8:	2209      	movs	r2, #9
 800faea:	602a      	str	r2, [r5, #0]
 800faec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800faf0:	81a3      	strh	r3, [r4, #12]
 800faf2:	f04f 30ff 	mov.w	r0, #4294967295
 800faf6:	e033      	b.n	800fb60 <__swsetup_r+0x98>
 800faf8:	0758      	lsls	r0, r3, #29
 800fafa:	d512      	bpl.n	800fb22 <__swsetup_r+0x5a>
 800fafc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fafe:	b141      	cbz	r1, 800fb12 <__swsetup_r+0x4a>
 800fb00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb04:	4299      	cmp	r1, r3
 800fb06:	d002      	beq.n	800fb0e <__swsetup_r+0x46>
 800fb08:	4628      	mov	r0, r5
 800fb0a:	f000 ff1d 	bl	8010948 <_free_r>
 800fb0e:	2300      	movs	r3, #0
 800fb10:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb12:	89a3      	ldrh	r3, [r4, #12]
 800fb14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fb18:	81a3      	strh	r3, [r4, #12]
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	6063      	str	r3, [r4, #4]
 800fb1e:	6923      	ldr	r3, [r4, #16]
 800fb20:	6023      	str	r3, [r4, #0]
 800fb22:	89a3      	ldrh	r3, [r4, #12]
 800fb24:	f043 0308 	orr.w	r3, r3, #8
 800fb28:	81a3      	strh	r3, [r4, #12]
 800fb2a:	6923      	ldr	r3, [r4, #16]
 800fb2c:	b94b      	cbnz	r3, 800fb42 <__swsetup_r+0x7a>
 800fb2e:	89a3      	ldrh	r3, [r4, #12]
 800fb30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fb34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb38:	d003      	beq.n	800fb42 <__swsetup_r+0x7a>
 800fb3a:	4621      	mov	r1, r4
 800fb3c:	4628      	mov	r0, r5
 800fb3e:	f001 fd91 	bl	8011664 <__smakebuf_r>
 800fb42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb46:	f013 0201 	ands.w	r2, r3, #1
 800fb4a:	d00a      	beq.n	800fb62 <__swsetup_r+0x9a>
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	60a2      	str	r2, [r4, #8]
 800fb50:	6962      	ldr	r2, [r4, #20]
 800fb52:	4252      	negs	r2, r2
 800fb54:	61a2      	str	r2, [r4, #24]
 800fb56:	6922      	ldr	r2, [r4, #16]
 800fb58:	b942      	cbnz	r2, 800fb6c <__swsetup_r+0xa4>
 800fb5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb5e:	d1c5      	bne.n	800faec <__swsetup_r+0x24>
 800fb60:	bd38      	pop	{r3, r4, r5, pc}
 800fb62:	0799      	lsls	r1, r3, #30
 800fb64:	bf58      	it	pl
 800fb66:	6962      	ldrpl	r2, [r4, #20]
 800fb68:	60a2      	str	r2, [r4, #8]
 800fb6a:	e7f4      	b.n	800fb56 <__swsetup_r+0x8e>
 800fb6c:	2000      	movs	r0, #0
 800fb6e:	e7f7      	b.n	800fb60 <__swsetup_r+0x98>
 800fb70:	200000ec 	.word	0x200000ec

0800fb74 <memcmp>:
 800fb74:	b510      	push	{r4, lr}
 800fb76:	3901      	subs	r1, #1
 800fb78:	4402      	add	r2, r0
 800fb7a:	4290      	cmp	r0, r2
 800fb7c:	d101      	bne.n	800fb82 <memcmp+0xe>
 800fb7e:	2000      	movs	r0, #0
 800fb80:	e005      	b.n	800fb8e <memcmp+0x1a>
 800fb82:	7803      	ldrb	r3, [r0, #0]
 800fb84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fb88:	42a3      	cmp	r3, r4
 800fb8a:	d001      	beq.n	800fb90 <memcmp+0x1c>
 800fb8c:	1b18      	subs	r0, r3, r4
 800fb8e:	bd10      	pop	{r4, pc}
 800fb90:	3001      	adds	r0, #1
 800fb92:	e7f2      	b.n	800fb7a <memcmp+0x6>

0800fb94 <memset>:
 800fb94:	4402      	add	r2, r0
 800fb96:	4603      	mov	r3, r0
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d100      	bne.n	800fb9e <memset+0xa>
 800fb9c:	4770      	bx	lr
 800fb9e:	f803 1b01 	strb.w	r1, [r3], #1
 800fba2:	e7f9      	b.n	800fb98 <memset+0x4>

0800fba4 <_localeconv_r>:
 800fba4:	4800      	ldr	r0, [pc, #0]	@ (800fba8 <_localeconv_r+0x4>)
 800fba6:	4770      	bx	lr
 800fba8:	2000022c 	.word	0x2000022c

0800fbac <_close_r>:
 800fbac:	b538      	push	{r3, r4, r5, lr}
 800fbae:	4d06      	ldr	r5, [pc, #24]	@ (800fbc8 <_close_r+0x1c>)
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	4608      	mov	r0, r1
 800fbb6:	602b      	str	r3, [r5, #0]
 800fbb8:	f7f9 fa3e 	bl	8009038 <_close>
 800fbbc:	1c43      	adds	r3, r0, #1
 800fbbe:	d102      	bne.n	800fbc6 <_close_r+0x1a>
 800fbc0:	682b      	ldr	r3, [r5, #0]
 800fbc2:	b103      	cbz	r3, 800fbc6 <_close_r+0x1a>
 800fbc4:	6023      	str	r3, [r4, #0]
 800fbc6:	bd38      	pop	{r3, r4, r5, pc}
 800fbc8:	20000b7c 	.word	0x20000b7c

0800fbcc <_lseek_r>:
 800fbcc:	b538      	push	{r3, r4, r5, lr}
 800fbce:	4d07      	ldr	r5, [pc, #28]	@ (800fbec <_lseek_r+0x20>)
 800fbd0:	4604      	mov	r4, r0
 800fbd2:	4608      	mov	r0, r1
 800fbd4:	4611      	mov	r1, r2
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	602a      	str	r2, [r5, #0]
 800fbda:	461a      	mov	r2, r3
 800fbdc:	f7f9 fa53 	bl	8009086 <_lseek>
 800fbe0:	1c43      	adds	r3, r0, #1
 800fbe2:	d102      	bne.n	800fbea <_lseek_r+0x1e>
 800fbe4:	682b      	ldr	r3, [r5, #0]
 800fbe6:	b103      	cbz	r3, 800fbea <_lseek_r+0x1e>
 800fbe8:	6023      	str	r3, [r4, #0]
 800fbea:	bd38      	pop	{r3, r4, r5, pc}
 800fbec:	20000b7c 	.word	0x20000b7c

0800fbf0 <_read_r>:
 800fbf0:	b538      	push	{r3, r4, r5, lr}
 800fbf2:	4d07      	ldr	r5, [pc, #28]	@ (800fc10 <_read_r+0x20>)
 800fbf4:	4604      	mov	r4, r0
 800fbf6:	4608      	mov	r0, r1
 800fbf8:	4611      	mov	r1, r2
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	602a      	str	r2, [r5, #0]
 800fbfe:	461a      	mov	r2, r3
 800fc00:	f7f9 f9e1 	bl	8008fc6 <_read>
 800fc04:	1c43      	adds	r3, r0, #1
 800fc06:	d102      	bne.n	800fc0e <_read_r+0x1e>
 800fc08:	682b      	ldr	r3, [r5, #0]
 800fc0a:	b103      	cbz	r3, 800fc0e <_read_r+0x1e>
 800fc0c:	6023      	str	r3, [r4, #0]
 800fc0e:	bd38      	pop	{r3, r4, r5, pc}
 800fc10:	20000b7c 	.word	0x20000b7c

0800fc14 <_write_r>:
 800fc14:	b538      	push	{r3, r4, r5, lr}
 800fc16:	4d07      	ldr	r5, [pc, #28]	@ (800fc34 <_write_r+0x20>)
 800fc18:	4604      	mov	r4, r0
 800fc1a:	4608      	mov	r0, r1
 800fc1c:	4611      	mov	r1, r2
 800fc1e:	2200      	movs	r2, #0
 800fc20:	602a      	str	r2, [r5, #0]
 800fc22:	461a      	mov	r2, r3
 800fc24:	f7f9 f9ec 	bl	8009000 <_write>
 800fc28:	1c43      	adds	r3, r0, #1
 800fc2a:	d102      	bne.n	800fc32 <_write_r+0x1e>
 800fc2c:	682b      	ldr	r3, [r5, #0]
 800fc2e:	b103      	cbz	r3, 800fc32 <_write_r+0x1e>
 800fc30:	6023      	str	r3, [r4, #0]
 800fc32:	bd38      	pop	{r3, r4, r5, pc}
 800fc34:	20000b7c 	.word	0x20000b7c

0800fc38 <__errno>:
 800fc38:	4b01      	ldr	r3, [pc, #4]	@ (800fc40 <__errno+0x8>)
 800fc3a:	6818      	ldr	r0, [r3, #0]
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	200000ec 	.word	0x200000ec

0800fc44 <__libc_init_array>:
 800fc44:	b570      	push	{r4, r5, r6, lr}
 800fc46:	4d0d      	ldr	r5, [pc, #52]	@ (800fc7c <__libc_init_array+0x38>)
 800fc48:	4c0d      	ldr	r4, [pc, #52]	@ (800fc80 <__libc_init_array+0x3c>)
 800fc4a:	1b64      	subs	r4, r4, r5
 800fc4c:	10a4      	asrs	r4, r4, #2
 800fc4e:	2600      	movs	r6, #0
 800fc50:	42a6      	cmp	r6, r4
 800fc52:	d109      	bne.n	800fc68 <__libc_init_array+0x24>
 800fc54:	4d0b      	ldr	r5, [pc, #44]	@ (800fc84 <__libc_init_array+0x40>)
 800fc56:	4c0c      	ldr	r4, [pc, #48]	@ (800fc88 <__libc_init_array+0x44>)
 800fc58:	f002 fc80 	bl	801255c <_init>
 800fc5c:	1b64      	subs	r4, r4, r5
 800fc5e:	10a4      	asrs	r4, r4, #2
 800fc60:	2600      	movs	r6, #0
 800fc62:	42a6      	cmp	r6, r4
 800fc64:	d105      	bne.n	800fc72 <__libc_init_array+0x2e>
 800fc66:	bd70      	pop	{r4, r5, r6, pc}
 800fc68:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc6c:	4798      	blx	r3
 800fc6e:	3601      	adds	r6, #1
 800fc70:	e7ee      	b.n	800fc50 <__libc_init_array+0xc>
 800fc72:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc76:	4798      	blx	r3
 800fc78:	3601      	adds	r6, #1
 800fc7a:	e7f2      	b.n	800fc62 <__libc_init_array+0x1e>
 800fc7c:	08013d00 	.word	0x08013d00
 800fc80:	08013d00 	.word	0x08013d00
 800fc84:	08013d00 	.word	0x08013d00
 800fc88:	08013d04 	.word	0x08013d04

0800fc8c <__retarget_lock_init_recursive>:
 800fc8c:	4770      	bx	lr

0800fc8e <__retarget_lock_acquire_recursive>:
 800fc8e:	4770      	bx	lr

0800fc90 <__retarget_lock_release_recursive>:
 800fc90:	4770      	bx	lr

0800fc92 <quorem>:
 800fc92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc96:	6903      	ldr	r3, [r0, #16]
 800fc98:	690c      	ldr	r4, [r1, #16]
 800fc9a:	42a3      	cmp	r3, r4
 800fc9c:	4607      	mov	r7, r0
 800fc9e:	db7e      	blt.n	800fd9e <quorem+0x10c>
 800fca0:	3c01      	subs	r4, #1
 800fca2:	f101 0814 	add.w	r8, r1, #20
 800fca6:	00a3      	lsls	r3, r4, #2
 800fca8:	f100 0514 	add.w	r5, r0, #20
 800fcac:	9300      	str	r3, [sp, #0]
 800fcae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fcb2:	9301      	str	r3, [sp, #4]
 800fcb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fcb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fcc4:	fbb2 f6f3 	udiv	r6, r2, r3
 800fcc8:	d32e      	bcc.n	800fd28 <quorem+0x96>
 800fcca:	f04f 0a00 	mov.w	sl, #0
 800fcce:	46c4      	mov	ip, r8
 800fcd0:	46ae      	mov	lr, r5
 800fcd2:	46d3      	mov	fp, sl
 800fcd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fcd8:	b298      	uxth	r0, r3
 800fcda:	fb06 a000 	mla	r0, r6, r0, sl
 800fcde:	0c02      	lsrs	r2, r0, #16
 800fce0:	0c1b      	lsrs	r3, r3, #16
 800fce2:	fb06 2303 	mla	r3, r6, r3, r2
 800fce6:	f8de 2000 	ldr.w	r2, [lr]
 800fcea:	b280      	uxth	r0, r0
 800fcec:	b292      	uxth	r2, r2
 800fcee:	1a12      	subs	r2, r2, r0
 800fcf0:	445a      	add	r2, fp
 800fcf2:	f8de 0000 	ldr.w	r0, [lr]
 800fcf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fd00:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fd04:	b292      	uxth	r2, r2
 800fd06:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fd0a:	45e1      	cmp	r9, ip
 800fd0c:	f84e 2b04 	str.w	r2, [lr], #4
 800fd10:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fd14:	d2de      	bcs.n	800fcd4 <quorem+0x42>
 800fd16:	9b00      	ldr	r3, [sp, #0]
 800fd18:	58eb      	ldr	r3, [r5, r3]
 800fd1a:	b92b      	cbnz	r3, 800fd28 <quorem+0x96>
 800fd1c:	9b01      	ldr	r3, [sp, #4]
 800fd1e:	3b04      	subs	r3, #4
 800fd20:	429d      	cmp	r5, r3
 800fd22:	461a      	mov	r2, r3
 800fd24:	d32f      	bcc.n	800fd86 <quorem+0xf4>
 800fd26:	613c      	str	r4, [r7, #16]
 800fd28:	4638      	mov	r0, r7
 800fd2a:	f001 f97f 	bl	801102c <__mcmp>
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	db25      	blt.n	800fd7e <quorem+0xec>
 800fd32:	4629      	mov	r1, r5
 800fd34:	2000      	movs	r0, #0
 800fd36:	f858 2b04 	ldr.w	r2, [r8], #4
 800fd3a:	f8d1 c000 	ldr.w	ip, [r1]
 800fd3e:	fa1f fe82 	uxth.w	lr, r2
 800fd42:	fa1f f38c 	uxth.w	r3, ip
 800fd46:	eba3 030e 	sub.w	r3, r3, lr
 800fd4a:	4403      	add	r3, r0
 800fd4c:	0c12      	lsrs	r2, r2, #16
 800fd4e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fd52:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd5c:	45c1      	cmp	r9, r8
 800fd5e:	f841 3b04 	str.w	r3, [r1], #4
 800fd62:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fd66:	d2e6      	bcs.n	800fd36 <quorem+0xa4>
 800fd68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd70:	b922      	cbnz	r2, 800fd7c <quorem+0xea>
 800fd72:	3b04      	subs	r3, #4
 800fd74:	429d      	cmp	r5, r3
 800fd76:	461a      	mov	r2, r3
 800fd78:	d30b      	bcc.n	800fd92 <quorem+0x100>
 800fd7a:	613c      	str	r4, [r7, #16]
 800fd7c:	3601      	adds	r6, #1
 800fd7e:	4630      	mov	r0, r6
 800fd80:	b003      	add	sp, #12
 800fd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd86:	6812      	ldr	r2, [r2, #0]
 800fd88:	3b04      	subs	r3, #4
 800fd8a:	2a00      	cmp	r2, #0
 800fd8c:	d1cb      	bne.n	800fd26 <quorem+0x94>
 800fd8e:	3c01      	subs	r4, #1
 800fd90:	e7c6      	b.n	800fd20 <quorem+0x8e>
 800fd92:	6812      	ldr	r2, [r2, #0]
 800fd94:	3b04      	subs	r3, #4
 800fd96:	2a00      	cmp	r2, #0
 800fd98:	d1ef      	bne.n	800fd7a <quorem+0xe8>
 800fd9a:	3c01      	subs	r4, #1
 800fd9c:	e7ea      	b.n	800fd74 <quorem+0xe2>
 800fd9e:	2000      	movs	r0, #0
 800fda0:	e7ee      	b.n	800fd80 <quorem+0xee>
 800fda2:	0000      	movs	r0, r0
 800fda4:	0000      	movs	r0, r0
	...

0800fda8 <_dtoa_r>:
 800fda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdac:	69c7      	ldr	r7, [r0, #28]
 800fdae:	b097      	sub	sp, #92	@ 0x5c
 800fdb0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fdb4:	ec55 4b10 	vmov	r4, r5, d0
 800fdb8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800fdba:	9107      	str	r1, [sp, #28]
 800fdbc:	4681      	mov	r9, r0
 800fdbe:	920c      	str	r2, [sp, #48]	@ 0x30
 800fdc0:	9311      	str	r3, [sp, #68]	@ 0x44
 800fdc2:	b97f      	cbnz	r7, 800fde4 <_dtoa_r+0x3c>
 800fdc4:	2010      	movs	r0, #16
 800fdc6:	f000 fe09 	bl	80109dc <malloc>
 800fdca:	4602      	mov	r2, r0
 800fdcc:	f8c9 001c 	str.w	r0, [r9, #28]
 800fdd0:	b920      	cbnz	r0, 800fddc <_dtoa_r+0x34>
 800fdd2:	4ba9      	ldr	r3, [pc, #676]	@ (8010078 <_dtoa_r+0x2d0>)
 800fdd4:	21ef      	movs	r1, #239	@ 0xef
 800fdd6:	48a9      	ldr	r0, [pc, #676]	@ (801007c <_dtoa_r+0x2d4>)
 800fdd8:	f001 fcc0 	bl	801175c <__assert_func>
 800fddc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fde0:	6007      	str	r7, [r0, #0]
 800fde2:	60c7      	str	r7, [r0, #12]
 800fde4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fde8:	6819      	ldr	r1, [r3, #0]
 800fdea:	b159      	cbz	r1, 800fe04 <_dtoa_r+0x5c>
 800fdec:	685a      	ldr	r2, [r3, #4]
 800fdee:	604a      	str	r2, [r1, #4]
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	4093      	lsls	r3, r2
 800fdf4:	608b      	str	r3, [r1, #8]
 800fdf6:	4648      	mov	r0, r9
 800fdf8:	f000 fee6 	bl	8010bc8 <_Bfree>
 800fdfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fe00:	2200      	movs	r2, #0
 800fe02:	601a      	str	r2, [r3, #0]
 800fe04:	1e2b      	subs	r3, r5, #0
 800fe06:	bfb9      	ittee	lt
 800fe08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fe0c:	9305      	strlt	r3, [sp, #20]
 800fe0e:	2300      	movge	r3, #0
 800fe10:	6033      	strge	r3, [r6, #0]
 800fe12:	9f05      	ldr	r7, [sp, #20]
 800fe14:	4b9a      	ldr	r3, [pc, #616]	@ (8010080 <_dtoa_r+0x2d8>)
 800fe16:	bfbc      	itt	lt
 800fe18:	2201      	movlt	r2, #1
 800fe1a:	6032      	strlt	r2, [r6, #0]
 800fe1c:	43bb      	bics	r3, r7
 800fe1e:	d112      	bne.n	800fe46 <_dtoa_r+0x9e>
 800fe20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fe22:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fe26:	6013      	str	r3, [r2, #0]
 800fe28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fe2c:	4323      	orrs	r3, r4
 800fe2e:	f000 855a 	beq.w	80108e6 <_dtoa_r+0xb3e>
 800fe32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fe34:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010094 <_dtoa_r+0x2ec>
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	f000 855c 	beq.w	80108f6 <_dtoa_r+0xb4e>
 800fe3e:	f10a 0303 	add.w	r3, sl, #3
 800fe42:	f000 bd56 	b.w	80108f2 <_dtoa_r+0xb4a>
 800fe46:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	ec51 0b17 	vmov	r0, r1, d7
 800fe50:	2300      	movs	r3, #0
 800fe52:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fe56:	f7f0 fe37 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe5a:	4680      	mov	r8, r0
 800fe5c:	b158      	cbz	r0, 800fe76 <_dtoa_r+0xce>
 800fe5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fe60:	2301      	movs	r3, #1
 800fe62:	6013      	str	r3, [r2, #0]
 800fe64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fe66:	b113      	cbz	r3, 800fe6e <_dtoa_r+0xc6>
 800fe68:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fe6a:	4b86      	ldr	r3, [pc, #536]	@ (8010084 <_dtoa_r+0x2dc>)
 800fe6c:	6013      	str	r3, [r2, #0]
 800fe6e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010098 <_dtoa_r+0x2f0>
 800fe72:	f000 bd40 	b.w	80108f6 <_dtoa_r+0xb4e>
 800fe76:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800fe7a:	aa14      	add	r2, sp, #80	@ 0x50
 800fe7c:	a915      	add	r1, sp, #84	@ 0x54
 800fe7e:	4648      	mov	r0, r9
 800fe80:	f001 f984 	bl	801118c <__d2b>
 800fe84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fe88:	9002      	str	r0, [sp, #8]
 800fe8a:	2e00      	cmp	r6, #0
 800fe8c:	d078      	beq.n	800ff80 <_dtoa_r+0x1d8>
 800fe8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe90:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800fe94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fe9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fea0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fea4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fea8:	4619      	mov	r1, r3
 800feaa:	2200      	movs	r2, #0
 800feac:	4b76      	ldr	r3, [pc, #472]	@ (8010088 <_dtoa_r+0x2e0>)
 800feae:	f7f0 f9eb 	bl	8000288 <__aeabi_dsub>
 800feb2:	a36b      	add	r3, pc, #428	@ (adr r3, 8010060 <_dtoa_r+0x2b8>)
 800feb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb8:	f7f0 fb9e 	bl	80005f8 <__aeabi_dmul>
 800febc:	a36a      	add	r3, pc, #424	@ (adr r3, 8010068 <_dtoa_r+0x2c0>)
 800febe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec2:	f7f0 f9e3 	bl	800028c <__adddf3>
 800fec6:	4604      	mov	r4, r0
 800fec8:	4630      	mov	r0, r6
 800feca:	460d      	mov	r5, r1
 800fecc:	f7f0 fb2a 	bl	8000524 <__aeabi_i2d>
 800fed0:	a367      	add	r3, pc, #412	@ (adr r3, 8010070 <_dtoa_r+0x2c8>)
 800fed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed6:	f7f0 fb8f 	bl	80005f8 <__aeabi_dmul>
 800feda:	4602      	mov	r2, r0
 800fedc:	460b      	mov	r3, r1
 800fede:	4620      	mov	r0, r4
 800fee0:	4629      	mov	r1, r5
 800fee2:	f7f0 f9d3 	bl	800028c <__adddf3>
 800fee6:	4604      	mov	r4, r0
 800fee8:	460d      	mov	r5, r1
 800feea:	f7f0 fe35 	bl	8000b58 <__aeabi_d2iz>
 800feee:	2200      	movs	r2, #0
 800fef0:	4607      	mov	r7, r0
 800fef2:	2300      	movs	r3, #0
 800fef4:	4620      	mov	r0, r4
 800fef6:	4629      	mov	r1, r5
 800fef8:	f7f0 fdf0 	bl	8000adc <__aeabi_dcmplt>
 800fefc:	b140      	cbz	r0, 800ff10 <_dtoa_r+0x168>
 800fefe:	4638      	mov	r0, r7
 800ff00:	f7f0 fb10 	bl	8000524 <__aeabi_i2d>
 800ff04:	4622      	mov	r2, r4
 800ff06:	462b      	mov	r3, r5
 800ff08:	f7f0 fdde 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff0c:	b900      	cbnz	r0, 800ff10 <_dtoa_r+0x168>
 800ff0e:	3f01      	subs	r7, #1
 800ff10:	2f16      	cmp	r7, #22
 800ff12:	d852      	bhi.n	800ffba <_dtoa_r+0x212>
 800ff14:	4b5d      	ldr	r3, [pc, #372]	@ (801008c <_dtoa_r+0x2e4>)
 800ff16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ff1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ff22:	f7f0 fddb 	bl	8000adc <__aeabi_dcmplt>
 800ff26:	2800      	cmp	r0, #0
 800ff28:	d049      	beq.n	800ffbe <_dtoa_r+0x216>
 800ff2a:	3f01      	subs	r7, #1
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ff30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ff32:	1b9b      	subs	r3, r3, r6
 800ff34:	1e5a      	subs	r2, r3, #1
 800ff36:	bf45      	ittet	mi
 800ff38:	f1c3 0301 	rsbmi	r3, r3, #1
 800ff3c:	9300      	strmi	r3, [sp, #0]
 800ff3e:	2300      	movpl	r3, #0
 800ff40:	2300      	movmi	r3, #0
 800ff42:	9206      	str	r2, [sp, #24]
 800ff44:	bf54      	ite	pl
 800ff46:	9300      	strpl	r3, [sp, #0]
 800ff48:	9306      	strmi	r3, [sp, #24]
 800ff4a:	2f00      	cmp	r7, #0
 800ff4c:	db39      	blt.n	800ffc2 <_dtoa_r+0x21a>
 800ff4e:	9b06      	ldr	r3, [sp, #24]
 800ff50:	970d      	str	r7, [sp, #52]	@ 0x34
 800ff52:	443b      	add	r3, r7
 800ff54:	9306      	str	r3, [sp, #24]
 800ff56:	2300      	movs	r3, #0
 800ff58:	9308      	str	r3, [sp, #32]
 800ff5a:	9b07      	ldr	r3, [sp, #28]
 800ff5c:	2b09      	cmp	r3, #9
 800ff5e:	d863      	bhi.n	8010028 <_dtoa_r+0x280>
 800ff60:	2b05      	cmp	r3, #5
 800ff62:	bfc4      	itt	gt
 800ff64:	3b04      	subgt	r3, #4
 800ff66:	9307      	strgt	r3, [sp, #28]
 800ff68:	9b07      	ldr	r3, [sp, #28]
 800ff6a:	f1a3 0302 	sub.w	r3, r3, #2
 800ff6e:	bfcc      	ite	gt
 800ff70:	2400      	movgt	r4, #0
 800ff72:	2401      	movle	r4, #1
 800ff74:	2b03      	cmp	r3, #3
 800ff76:	d863      	bhi.n	8010040 <_dtoa_r+0x298>
 800ff78:	e8df f003 	tbb	[pc, r3]
 800ff7c:	2b375452 	.word	0x2b375452
 800ff80:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ff84:	441e      	add	r6, r3
 800ff86:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ff8a:	2b20      	cmp	r3, #32
 800ff8c:	bfc1      	itttt	gt
 800ff8e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ff92:	409f      	lslgt	r7, r3
 800ff94:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ff98:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ff9c:	bfd6      	itet	le
 800ff9e:	f1c3 0320 	rsble	r3, r3, #32
 800ffa2:	ea47 0003 	orrgt.w	r0, r7, r3
 800ffa6:	fa04 f003 	lslle.w	r0, r4, r3
 800ffaa:	f7f0 faab 	bl	8000504 <__aeabi_ui2d>
 800ffae:	2201      	movs	r2, #1
 800ffb0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ffb4:	3e01      	subs	r6, #1
 800ffb6:	9212      	str	r2, [sp, #72]	@ 0x48
 800ffb8:	e776      	b.n	800fea8 <_dtoa_r+0x100>
 800ffba:	2301      	movs	r3, #1
 800ffbc:	e7b7      	b.n	800ff2e <_dtoa_r+0x186>
 800ffbe:	9010      	str	r0, [sp, #64]	@ 0x40
 800ffc0:	e7b6      	b.n	800ff30 <_dtoa_r+0x188>
 800ffc2:	9b00      	ldr	r3, [sp, #0]
 800ffc4:	1bdb      	subs	r3, r3, r7
 800ffc6:	9300      	str	r3, [sp, #0]
 800ffc8:	427b      	negs	r3, r7
 800ffca:	9308      	str	r3, [sp, #32]
 800ffcc:	2300      	movs	r3, #0
 800ffce:	930d      	str	r3, [sp, #52]	@ 0x34
 800ffd0:	e7c3      	b.n	800ff5a <_dtoa_r+0x1b2>
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ffd8:	eb07 0b03 	add.w	fp, r7, r3
 800ffdc:	f10b 0301 	add.w	r3, fp, #1
 800ffe0:	2b01      	cmp	r3, #1
 800ffe2:	9303      	str	r3, [sp, #12]
 800ffe4:	bfb8      	it	lt
 800ffe6:	2301      	movlt	r3, #1
 800ffe8:	e006      	b.n	800fff8 <_dtoa_r+0x250>
 800ffea:	2301      	movs	r3, #1
 800ffec:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	dd28      	ble.n	8010046 <_dtoa_r+0x29e>
 800fff4:	469b      	mov	fp, r3
 800fff6:	9303      	str	r3, [sp, #12]
 800fff8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800fffc:	2100      	movs	r1, #0
 800fffe:	2204      	movs	r2, #4
 8010000:	f102 0514 	add.w	r5, r2, #20
 8010004:	429d      	cmp	r5, r3
 8010006:	d926      	bls.n	8010056 <_dtoa_r+0x2ae>
 8010008:	6041      	str	r1, [r0, #4]
 801000a:	4648      	mov	r0, r9
 801000c:	f000 fd9c 	bl	8010b48 <_Balloc>
 8010010:	4682      	mov	sl, r0
 8010012:	2800      	cmp	r0, #0
 8010014:	d142      	bne.n	801009c <_dtoa_r+0x2f4>
 8010016:	4b1e      	ldr	r3, [pc, #120]	@ (8010090 <_dtoa_r+0x2e8>)
 8010018:	4602      	mov	r2, r0
 801001a:	f240 11af 	movw	r1, #431	@ 0x1af
 801001e:	e6da      	b.n	800fdd6 <_dtoa_r+0x2e>
 8010020:	2300      	movs	r3, #0
 8010022:	e7e3      	b.n	800ffec <_dtoa_r+0x244>
 8010024:	2300      	movs	r3, #0
 8010026:	e7d5      	b.n	800ffd4 <_dtoa_r+0x22c>
 8010028:	2401      	movs	r4, #1
 801002a:	2300      	movs	r3, #0
 801002c:	9307      	str	r3, [sp, #28]
 801002e:	9409      	str	r4, [sp, #36]	@ 0x24
 8010030:	f04f 3bff 	mov.w	fp, #4294967295
 8010034:	2200      	movs	r2, #0
 8010036:	f8cd b00c 	str.w	fp, [sp, #12]
 801003a:	2312      	movs	r3, #18
 801003c:	920c      	str	r2, [sp, #48]	@ 0x30
 801003e:	e7db      	b.n	800fff8 <_dtoa_r+0x250>
 8010040:	2301      	movs	r3, #1
 8010042:	9309      	str	r3, [sp, #36]	@ 0x24
 8010044:	e7f4      	b.n	8010030 <_dtoa_r+0x288>
 8010046:	f04f 0b01 	mov.w	fp, #1
 801004a:	f8cd b00c 	str.w	fp, [sp, #12]
 801004e:	465b      	mov	r3, fp
 8010050:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010054:	e7d0      	b.n	800fff8 <_dtoa_r+0x250>
 8010056:	3101      	adds	r1, #1
 8010058:	0052      	lsls	r2, r2, #1
 801005a:	e7d1      	b.n	8010000 <_dtoa_r+0x258>
 801005c:	f3af 8000 	nop.w
 8010060:	636f4361 	.word	0x636f4361
 8010064:	3fd287a7 	.word	0x3fd287a7
 8010068:	8b60c8b3 	.word	0x8b60c8b3
 801006c:	3fc68a28 	.word	0x3fc68a28
 8010070:	509f79fb 	.word	0x509f79fb
 8010074:	3fd34413 	.word	0x3fd34413
 8010078:	0801393d 	.word	0x0801393d
 801007c:	08013954 	.word	0x08013954
 8010080:	7ff00000 	.word	0x7ff00000
 8010084:	0801390d 	.word	0x0801390d
 8010088:	3ff80000 	.word	0x3ff80000
 801008c:	08013aa8 	.word	0x08013aa8
 8010090:	080139ac 	.word	0x080139ac
 8010094:	08013939 	.word	0x08013939
 8010098:	0801390c 	.word	0x0801390c
 801009c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80100a0:	6018      	str	r0, [r3, #0]
 80100a2:	9b03      	ldr	r3, [sp, #12]
 80100a4:	2b0e      	cmp	r3, #14
 80100a6:	f200 80a1 	bhi.w	80101ec <_dtoa_r+0x444>
 80100aa:	2c00      	cmp	r4, #0
 80100ac:	f000 809e 	beq.w	80101ec <_dtoa_r+0x444>
 80100b0:	2f00      	cmp	r7, #0
 80100b2:	dd33      	ble.n	801011c <_dtoa_r+0x374>
 80100b4:	4b9c      	ldr	r3, [pc, #624]	@ (8010328 <_dtoa_r+0x580>)
 80100b6:	f007 020f 	and.w	r2, r7, #15
 80100ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80100be:	ed93 7b00 	vldr	d7, [r3]
 80100c2:	05f8      	lsls	r0, r7, #23
 80100c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80100c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80100cc:	d516      	bpl.n	80100fc <_dtoa_r+0x354>
 80100ce:	4b97      	ldr	r3, [pc, #604]	@ (801032c <_dtoa_r+0x584>)
 80100d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80100d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80100d8:	f7f0 fbb8 	bl	800084c <__aeabi_ddiv>
 80100dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80100e0:	f004 040f 	and.w	r4, r4, #15
 80100e4:	2603      	movs	r6, #3
 80100e6:	4d91      	ldr	r5, [pc, #580]	@ (801032c <_dtoa_r+0x584>)
 80100e8:	b954      	cbnz	r4, 8010100 <_dtoa_r+0x358>
 80100ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80100ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80100f2:	f7f0 fbab 	bl	800084c <__aeabi_ddiv>
 80100f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80100fa:	e028      	b.n	801014e <_dtoa_r+0x3a6>
 80100fc:	2602      	movs	r6, #2
 80100fe:	e7f2      	b.n	80100e6 <_dtoa_r+0x33e>
 8010100:	07e1      	lsls	r1, r4, #31
 8010102:	d508      	bpl.n	8010116 <_dtoa_r+0x36e>
 8010104:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010108:	e9d5 2300 	ldrd	r2, r3, [r5]
 801010c:	f7f0 fa74 	bl	80005f8 <__aeabi_dmul>
 8010110:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010114:	3601      	adds	r6, #1
 8010116:	1064      	asrs	r4, r4, #1
 8010118:	3508      	adds	r5, #8
 801011a:	e7e5      	b.n	80100e8 <_dtoa_r+0x340>
 801011c:	f000 80af 	beq.w	801027e <_dtoa_r+0x4d6>
 8010120:	427c      	negs	r4, r7
 8010122:	4b81      	ldr	r3, [pc, #516]	@ (8010328 <_dtoa_r+0x580>)
 8010124:	4d81      	ldr	r5, [pc, #516]	@ (801032c <_dtoa_r+0x584>)
 8010126:	f004 020f 	and.w	r2, r4, #15
 801012a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801012e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010132:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010136:	f7f0 fa5f 	bl	80005f8 <__aeabi_dmul>
 801013a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801013e:	1124      	asrs	r4, r4, #4
 8010140:	2300      	movs	r3, #0
 8010142:	2602      	movs	r6, #2
 8010144:	2c00      	cmp	r4, #0
 8010146:	f040 808f 	bne.w	8010268 <_dtoa_r+0x4c0>
 801014a:	2b00      	cmp	r3, #0
 801014c:	d1d3      	bne.n	80100f6 <_dtoa_r+0x34e>
 801014e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010150:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010154:	2b00      	cmp	r3, #0
 8010156:	f000 8094 	beq.w	8010282 <_dtoa_r+0x4da>
 801015a:	4b75      	ldr	r3, [pc, #468]	@ (8010330 <_dtoa_r+0x588>)
 801015c:	2200      	movs	r2, #0
 801015e:	4620      	mov	r0, r4
 8010160:	4629      	mov	r1, r5
 8010162:	f7f0 fcbb 	bl	8000adc <__aeabi_dcmplt>
 8010166:	2800      	cmp	r0, #0
 8010168:	f000 808b 	beq.w	8010282 <_dtoa_r+0x4da>
 801016c:	9b03      	ldr	r3, [sp, #12]
 801016e:	2b00      	cmp	r3, #0
 8010170:	f000 8087 	beq.w	8010282 <_dtoa_r+0x4da>
 8010174:	f1bb 0f00 	cmp.w	fp, #0
 8010178:	dd34      	ble.n	80101e4 <_dtoa_r+0x43c>
 801017a:	4620      	mov	r0, r4
 801017c:	4b6d      	ldr	r3, [pc, #436]	@ (8010334 <_dtoa_r+0x58c>)
 801017e:	2200      	movs	r2, #0
 8010180:	4629      	mov	r1, r5
 8010182:	f7f0 fa39 	bl	80005f8 <__aeabi_dmul>
 8010186:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801018a:	f107 38ff 	add.w	r8, r7, #4294967295
 801018e:	3601      	adds	r6, #1
 8010190:	465c      	mov	r4, fp
 8010192:	4630      	mov	r0, r6
 8010194:	f7f0 f9c6 	bl	8000524 <__aeabi_i2d>
 8010198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801019c:	f7f0 fa2c 	bl	80005f8 <__aeabi_dmul>
 80101a0:	4b65      	ldr	r3, [pc, #404]	@ (8010338 <_dtoa_r+0x590>)
 80101a2:	2200      	movs	r2, #0
 80101a4:	f7f0 f872 	bl	800028c <__adddf3>
 80101a8:	4605      	mov	r5, r0
 80101aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80101ae:	2c00      	cmp	r4, #0
 80101b0:	d16a      	bne.n	8010288 <_dtoa_r+0x4e0>
 80101b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80101b6:	4b61      	ldr	r3, [pc, #388]	@ (801033c <_dtoa_r+0x594>)
 80101b8:	2200      	movs	r2, #0
 80101ba:	f7f0 f865 	bl	8000288 <__aeabi_dsub>
 80101be:	4602      	mov	r2, r0
 80101c0:	460b      	mov	r3, r1
 80101c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80101c6:	462a      	mov	r2, r5
 80101c8:	4633      	mov	r3, r6
 80101ca:	f7f0 fca5 	bl	8000b18 <__aeabi_dcmpgt>
 80101ce:	2800      	cmp	r0, #0
 80101d0:	f040 8298 	bne.w	8010704 <_dtoa_r+0x95c>
 80101d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80101d8:	462a      	mov	r2, r5
 80101da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80101de:	f7f0 fc7d 	bl	8000adc <__aeabi_dcmplt>
 80101e2:	bb38      	cbnz	r0, 8010234 <_dtoa_r+0x48c>
 80101e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80101e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80101ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	f2c0 8157 	blt.w	80104a2 <_dtoa_r+0x6fa>
 80101f4:	2f0e      	cmp	r7, #14
 80101f6:	f300 8154 	bgt.w	80104a2 <_dtoa_r+0x6fa>
 80101fa:	4b4b      	ldr	r3, [pc, #300]	@ (8010328 <_dtoa_r+0x580>)
 80101fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010200:	ed93 7b00 	vldr	d7, [r3]
 8010204:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010206:	2b00      	cmp	r3, #0
 8010208:	ed8d 7b00 	vstr	d7, [sp]
 801020c:	f280 80e5 	bge.w	80103da <_dtoa_r+0x632>
 8010210:	9b03      	ldr	r3, [sp, #12]
 8010212:	2b00      	cmp	r3, #0
 8010214:	f300 80e1 	bgt.w	80103da <_dtoa_r+0x632>
 8010218:	d10c      	bne.n	8010234 <_dtoa_r+0x48c>
 801021a:	4b48      	ldr	r3, [pc, #288]	@ (801033c <_dtoa_r+0x594>)
 801021c:	2200      	movs	r2, #0
 801021e:	ec51 0b17 	vmov	r0, r1, d7
 8010222:	f7f0 f9e9 	bl	80005f8 <__aeabi_dmul>
 8010226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801022a:	f7f0 fc6b 	bl	8000b04 <__aeabi_dcmpge>
 801022e:	2800      	cmp	r0, #0
 8010230:	f000 8266 	beq.w	8010700 <_dtoa_r+0x958>
 8010234:	2400      	movs	r4, #0
 8010236:	4625      	mov	r5, r4
 8010238:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801023a:	4656      	mov	r6, sl
 801023c:	ea6f 0803 	mvn.w	r8, r3
 8010240:	2700      	movs	r7, #0
 8010242:	4621      	mov	r1, r4
 8010244:	4648      	mov	r0, r9
 8010246:	f000 fcbf 	bl	8010bc8 <_Bfree>
 801024a:	2d00      	cmp	r5, #0
 801024c:	f000 80bd 	beq.w	80103ca <_dtoa_r+0x622>
 8010250:	b12f      	cbz	r7, 801025e <_dtoa_r+0x4b6>
 8010252:	42af      	cmp	r7, r5
 8010254:	d003      	beq.n	801025e <_dtoa_r+0x4b6>
 8010256:	4639      	mov	r1, r7
 8010258:	4648      	mov	r0, r9
 801025a:	f000 fcb5 	bl	8010bc8 <_Bfree>
 801025e:	4629      	mov	r1, r5
 8010260:	4648      	mov	r0, r9
 8010262:	f000 fcb1 	bl	8010bc8 <_Bfree>
 8010266:	e0b0      	b.n	80103ca <_dtoa_r+0x622>
 8010268:	07e2      	lsls	r2, r4, #31
 801026a:	d505      	bpl.n	8010278 <_dtoa_r+0x4d0>
 801026c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010270:	f7f0 f9c2 	bl	80005f8 <__aeabi_dmul>
 8010274:	3601      	adds	r6, #1
 8010276:	2301      	movs	r3, #1
 8010278:	1064      	asrs	r4, r4, #1
 801027a:	3508      	adds	r5, #8
 801027c:	e762      	b.n	8010144 <_dtoa_r+0x39c>
 801027e:	2602      	movs	r6, #2
 8010280:	e765      	b.n	801014e <_dtoa_r+0x3a6>
 8010282:	9c03      	ldr	r4, [sp, #12]
 8010284:	46b8      	mov	r8, r7
 8010286:	e784      	b.n	8010192 <_dtoa_r+0x3ea>
 8010288:	4b27      	ldr	r3, [pc, #156]	@ (8010328 <_dtoa_r+0x580>)
 801028a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801028c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010290:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010294:	4454      	add	r4, sl
 8010296:	2900      	cmp	r1, #0
 8010298:	d054      	beq.n	8010344 <_dtoa_r+0x59c>
 801029a:	4929      	ldr	r1, [pc, #164]	@ (8010340 <_dtoa_r+0x598>)
 801029c:	2000      	movs	r0, #0
 801029e:	f7f0 fad5 	bl	800084c <__aeabi_ddiv>
 80102a2:	4633      	mov	r3, r6
 80102a4:	462a      	mov	r2, r5
 80102a6:	f7ef ffef 	bl	8000288 <__aeabi_dsub>
 80102aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80102ae:	4656      	mov	r6, sl
 80102b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102b4:	f7f0 fc50 	bl	8000b58 <__aeabi_d2iz>
 80102b8:	4605      	mov	r5, r0
 80102ba:	f7f0 f933 	bl	8000524 <__aeabi_i2d>
 80102be:	4602      	mov	r2, r0
 80102c0:	460b      	mov	r3, r1
 80102c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102c6:	f7ef ffdf 	bl	8000288 <__aeabi_dsub>
 80102ca:	3530      	adds	r5, #48	@ 0x30
 80102cc:	4602      	mov	r2, r0
 80102ce:	460b      	mov	r3, r1
 80102d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80102d4:	f806 5b01 	strb.w	r5, [r6], #1
 80102d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80102dc:	f7f0 fbfe 	bl	8000adc <__aeabi_dcmplt>
 80102e0:	2800      	cmp	r0, #0
 80102e2:	d172      	bne.n	80103ca <_dtoa_r+0x622>
 80102e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102e8:	4911      	ldr	r1, [pc, #68]	@ (8010330 <_dtoa_r+0x588>)
 80102ea:	2000      	movs	r0, #0
 80102ec:	f7ef ffcc 	bl	8000288 <__aeabi_dsub>
 80102f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80102f4:	f7f0 fbf2 	bl	8000adc <__aeabi_dcmplt>
 80102f8:	2800      	cmp	r0, #0
 80102fa:	f040 80b4 	bne.w	8010466 <_dtoa_r+0x6be>
 80102fe:	42a6      	cmp	r6, r4
 8010300:	f43f af70 	beq.w	80101e4 <_dtoa_r+0x43c>
 8010304:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010308:	4b0a      	ldr	r3, [pc, #40]	@ (8010334 <_dtoa_r+0x58c>)
 801030a:	2200      	movs	r2, #0
 801030c:	f7f0 f974 	bl	80005f8 <__aeabi_dmul>
 8010310:	4b08      	ldr	r3, [pc, #32]	@ (8010334 <_dtoa_r+0x58c>)
 8010312:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010316:	2200      	movs	r2, #0
 8010318:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801031c:	f7f0 f96c 	bl	80005f8 <__aeabi_dmul>
 8010320:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010324:	e7c4      	b.n	80102b0 <_dtoa_r+0x508>
 8010326:	bf00      	nop
 8010328:	08013aa8 	.word	0x08013aa8
 801032c:	08013a80 	.word	0x08013a80
 8010330:	3ff00000 	.word	0x3ff00000
 8010334:	40240000 	.word	0x40240000
 8010338:	401c0000 	.word	0x401c0000
 801033c:	40140000 	.word	0x40140000
 8010340:	3fe00000 	.word	0x3fe00000
 8010344:	4631      	mov	r1, r6
 8010346:	4628      	mov	r0, r5
 8010348:	f7f0 f956 	bl	80005f8 <__aeabi_dmul>
 801034c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010350:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010352:	4656      	mov	r6, sl
 8010354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010358:	f7f0 fbfe 	bl	8000b58 <__aeabi_d2iz>
 801035c:	4605      	mov	r5, r0
 801035e:	f7f0 f8e1 	bl	8000524 <__aeabi_i2d>
 8010362:	4602      	mov	r2, r0
 8010364:	460b      	mov	r3, r1
 8010366:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801036a:	f7ef ff8d 	bl	8000288 <__aeabi_dsub>
 801036e:	3530      	adds	r5, #48	@ 0x30
 8010370:	f806 5b01 	strb.w	r5, [r6], #1
 8010374:	4602      	mov	r2, r0
 8010376:	460b      	mov	r3, r1
 8010378:	42a6      	cmp	r6, r4
 801037a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801037e:	f04f 0200 	mov.w	r2, #0
 8010382:	d124      	bne.n	80103ce <_dtoa_r+0x626>
 8010384:	4baf      	ldr	r3, [pc, #700]	@ (8010644 <_dtoa_r+0x89c>)
 8010386:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801038a:	f7ef ff7f 	bl	800028c <__adddf3>
 801038e:	4602      	mov	r2, r0
 8010390:	460b      	mov	r3, r1
 8010392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010396:	f7f0 fbbf 	bl	8000b18 <__aeabi_dcmpgt>
 801039a:	2800      	cmp	r0, #0
 801039c:	d163      	bne.n	8010466 <_dtoa_r+0x6be>
 801039e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80103a2:	49a8      	ldr	r1, [pc, #672]	@ (8010644 <_dtoa_r+0x89c>)
 80103a4:	2000      	movs	r0, #0
 80103a6:	f7ef ff6f 	bl	8000288 <__aeabi_dsub>
 80103aa:	4602      	mov	r2, r0
 80103ac:	460b      	mov	r3, r1
 80103ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80103b2:	f7f0 fb93 	bl	8000adc <__aeabi_dcmplt>
 80103b6:	2800      	cmp	r0, #0
 80103b8:	f43f af14 	beq.w	80101e4 <_dtoa_r+0x43c>
 80103bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80103be:	1e73      	subs	r3, r6, #1
 80103c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80103c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80103c6:	2b30      	cmp	r3, #48	@ 0x30
 80103c8:	d0f8      	beq.n	80103bc <_dtoa_r+0x614>
 80103ca:	4647      	mov	r7, r8
 80103cc:	e03b      	b.n	8010446 <_dtoa_r+0x69e>
 80103ce:	4b9e      	ldr	r3, [pc, #632]	@ (8010648 <_dtoa_r+0x8a0>)
 80103d0:	f7f0 f912 	bl	80005f8 <__aeabi_dmul>
 80103d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103d8:	e7bc      	b.n	8010354 <_dtoa_r+0x5ac>
 80103da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80103de:	4656      	mov	r6, sl
 80103e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103e4:	4620      	mov	r0, r4
 80103e6:	4629      	mov	r1, r5
 80103e8:	f7f0 fa30 	bl	800084c <__aeabi_ddiv>
 80103ec:	f7f0 fbb4 	bl	8000b58 <__aeabi_d2iz>
 80103f0:	4680      	mov	r8, r0
 80103f2:	f7f0 f897 	bl	8000524 <__aeabi_i2d>
 80103f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103fa:	f7f0 f8fd 	bl	80005f8 <__aeabi_dmul>
 80103fe:	4602      	mov	r2, r0
 8010400:	460b      	mov	r3, r1
 8010402:	4620      	mov	r0, r4
 8010404:	4629      	mov	r1, r5
 8010406:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801040a:	f7ef ff3d 	bl	8000288 <__aeabi_dsub>
 801040e:	f806 4b01 	strb.w	r4, [r6], #1
 8010412:	9d03      	ldr	r5, [sp, #12]
 8010414:	eba6 040a 	sub.w	r4, r6, sl
 8010418:	42a5      	cmp	r5, r4
 801041a:	4602      	mov	r2, r0
 801041c:	460b      	mov	r3, r1
 801041e:	d133      	bne.n	8010488 <_dtoa_r+0x6e0>
 8010420:	f7ef ff34 	bl	800028c <__adddf3>
 8010424:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010428:	4604      	mov	r4, r0
 801042a:	460d      	mov	r5, r1
 801042c:	f7f0 fb74 	bl	8000b18 <__aeabi_dcmpgt>
 8010430:	b9c0      	cbnz	r0, 8010464 <_dtoa_r+0x6bc>
 8010432:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010436:	4620      	mov	r0, r4
 8010438:	4629      	mov	r1, r5
 801043a:	f7f0 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 801043e:	b110      	cbz	r0, 8010446 <_dtoa_r+0x69e>
 8010440:	f018 0f01 	tst.w	r8, #1
 8010444:	d10e      	bne.n	8010464 <_dtoa_r+0x6bc>
 8010446:	9902      	ldr	r1, [sp, #8]
 8010448:	4648      	mov	r0, r9
 801044a:	f000 fbbd 	bl	8010bc8 <_Bfree>
 801044e:	2300      	movs	r3, #0
 8010450:	7033      	strb	r3, [r6, #0]
 8010452:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010454:	3701      	adds	r7, #1
 8010456:	601f      	str	r7, [r3, #0]
 8010458:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801045a:	2b00      	cmp	r3, #0
 801045c:	f000 824b 	beq.w	80108f6 <_dtoa_r+0xb4e>
 8010460:	601e      	str	r6, [r3, #0]
 8010462:	e248      	b.n	80108f6 <_dtoa_r+0xb4e>
 8010464:	46b8      	mov	r8, r7
 8010466:	4633      	mov	r3, r6
 8010468:	461e      	mov	r6, r3
 801046a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801046e:	2a39      	cmp	r2, #57	@ 0x39
 8010470:	d106      	bne.n	8010480 <_dtoa_r+0x6d8>
 8010472:	459a      	cmp	sl, r3
 8010474:	d1f8      	bne.n	8010468 <_dtoa_r+0x6c0>
 8010476:	2230      	movs	r2, #48	@ 0x30
 8010478:	f108 0801 	add.w	r8, r8, #1
 801047c:	f88a 2000 	strb.w	r2, [sl]
 8010480:	781a      	ldrb	r2, [r3, #0]
 8010482:	3201      	adds	r2, #1
 8010484:	701a      	strb	r2, [r3, #0]
 8010486:	e7a0      	b.n	80103ca <_dtoa_r+0x622>
 8010488:	4b6f      	ldr	r3, [pc, #444]	@ (8010648 <_dtoa_r+0x8a0>)
 801048a:	2200      	movs	r2, #0
 801048c:	f7f0 f8b4 	bl	80005f8 <__aeabi_dmul>
 8010490:	2200      	movs	r2, #0
 8010492:	2300      	movs	r3, #0
 8010494:	4604      	mov	r4, r0
 8010496:	460d      	mov	r5, r1
 8010498:	f7f0 fb16 	bl	8000ac8 <__aeabi_dcmpeq>
 801049c:	2800      	cmp	r0, #0
 801049e:	d09f      	beq.n	80103e0 <_dtoa_r+0x638>
 80104a0:	e7d1      	b.n	8010446 <_dtoa_r+0x69e>
 80104a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104a4:	2a00      	cmp	r2, #0
 80104a6:	f000 80ea 	beq.w	801067e <_dtoa_r+0x8d6>
 80104aa:	9a07      	ldr	r2, [sp, #28]
 80104ac:	2a01      	cmp	r2, #1
 80104ae:	f300 80cd 	bgt.w	801064c <_dtoa_r+0x8a4>
 80104b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80104b4:	2a00      	cmp	r2, #0
 80104b6:	f000 80c1 	beq.w	801063c <_dtoa_r+0x894>
 80104ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80104be:	9c08      	ldr	r4, [sp, #32]
 80104c0:	9e00      	ldr	r6, [sp, #0]
 80104c2:	9a00      	ldr	r2, [sp, #0]
 80104c4:	441a      	add	r2, r3
 80104c6:	9200      	str	r2, [sp, #0]
 80104c8:	9a06      	ldr	r2, [sp, #24]
 80104ca:	2101      	movs	r1, #1
 80104cc:	441a      	add	r2, r3
 80104ce:	4648      	mov	r0, r9
 80104d0:	9206      	str	r2, [sp, #24]
 80104d2:	f000 fc2d 	bl	8010d30 <__i2b>
 80104d6:	4605      	mov	r5, r0
 80104d8:	b166      	cbz	r6, 80104f4 <_dtoa_r+0x74c>
 80104da:	9b06      	ldr	r3, [sp, #24]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	dd09      	ble.n	80104f4 <_dtoa_r+0x74c>
 80104e0:	42b3      	cmp	r3, r6
 80104e2:	9a00      	ldr	r2, [sp, #0]
 80104e4:	bfa8      	it	ge
 80104e6:	4633      	movge	r3, r6
 80104e8:	1ad2      	subs	r2, r2, r3
 80104ea:	9200      	str	r2, [sp, #0]
 80104ec:	9a06      	ldr	r2, [sp, #24]
 80104ee:	1af6      	subs	r6, r6, r3
 80104f0:	1ad3      	subs	r3, r2, r3
 80104f2:	9306      	str	r3, [sp, #24]
 80104f4:	9b08      	ldr	r3, [sp, #32]
 80104f6:	b30b      	cbz	r3, 801053c <_dtoa_r+0x794>
 80104f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	f000 80c6 	beq.w	801068c <_dtoa_r+0x8e4>
 8010500:	2c00      	cmp	r4, #0
 8010502:	f000 80c0 	beq.w	8010686 <_dtoa_r+0x8de>
 8010506:	4629      	mov	r1, r5
 8010508:	4622      	mov	r2, r4
 801050a:	4648      	mov	r0, r9
 801050c:	f000 fcc8 	bl	8010ea0 <__pow5mult>
 8010510:	9a02      	ldr	r2, [sp, #8]
 8010512:	4601      	mov	r1, r0
 8010514:	4605      	mov	r5, r0
 8010516:	4648      	mov	r0, r9
 8010518:	f000 fc20 	bl	8010d5c <__multiply>
 801051c:	9902      	ldr	r1, [sp, #8]
 801051e:	4680      	mov	r8, r0
 8010520:	4648      	mov	r0, r9
 8010522:	f000 fb51 	bl	8010bc8 <_Bfree>
 8010526:	9b08      	ldr	r3, [sp, #32]
 8010528:	1b1b      	subs	r3, r3, r4
 801052a:	9308      	str	r3, [sp, #32]
 801052c:	f000 80b1 	beq.w	8010692 <_dtoa_r+0x8ea>
 8010530:	9a08      	ldr	r2, [sp, #32]
 8010532:	4641      	mov	r1, r8
 8010534:	4648      	mov	r0, r9
 8010536:	f000 fcb3 	bl	8010ea0 <__pow5mult>
 801053a:	9002      	str	r0, [sp, #8]
 801053c:	2101      	movs	r1, #1
 801053e:	4648      	mov	r0, r9
 8010540:	f000 fbf6 	bl	8010d30 <__i2b>
 8010544:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010546:	4604      	mov	r4, r0
 8010548:	2b00      	cmp	r3, #0
 801054a:	f000 81d8 	beq.w	80108fe <_dtoa_r+0xb56>
 801054e:	461a      	mov	r2, r3
 8010550:	4601      	mov	r1, r0
 8010552:	4648      	mov	r0, r9
 8010554:	f000 fca4 	bl	8010ea0 <__pow5mult>
 8010558:	9b07      	ldr	r3, [sp, #28]
 801055a:	2b01      	cmp	r3, #1
 801055c:	4604      	mov	r4, r0
 801055e:	f300 809f 	bgt.w	80106a0 <_dtoa_r+0x8f8>
 8010562:	9b04      	ldr	r3, [sp, #16]
 8010564:	2b00      	cmp	r3, #0
 8010566:	f040 8097 	bne.w	8010698 <_dtoa_r+0x8f0>
 801056a:	9b05      	ldr	r3, [sp, #20]
 801056c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010570:	2b00      	cmp	r3, #0
 8010572:	f040 8093 	bne.w	801069c <_dtoa_r+0x8f4>
 8010576:	9b05      	ldr	r3, [sp, #20]
 8010578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801057c:	0d1b      	lsrs	r3, r3, #20
 801057e:	051b      	lsls	r3, r3, #20
 8010580:	b133      	cbz	r3, 8010590 <_dtoa_r+0x7e8>
 8010582:	9b00      	ldr	r3, [sp, #0]
 8010584:	3301      	adds	r3, #1
 8010586:	9300      	str	r3, [sp, #0]
 8010588:	9b06      	ldr	r3, [sp, #24]
 801058a:	3301      	adds	r3, #1
 801058c:	9306      	str	r3, [sp, #24]
 801058e:	2301      	movs	r3, #1
 8010590:	9308      	str	r3, [sp, #32]
 8010592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010594:	2b00      	cmp	r3, #0
 8010596:	f000 81b8 	beq.w	801090a <_dtoa_r+0xb62>
 801059a:	6923      	ldr	r3, [r4, #16]
 801059c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80105a0:	6918      	ldr	r0, [r3, #16]
 80105a2:	f000 fb79 	bl	8010c98 <__hi0bits>
 80105a6:	f1c0 0020 	rsb	r0, r0, #32
 80105aa:	9b06      	ldr	r3, [sp, #24]
 80105ac:	4418      	add	r0, r3
 80105ae:	f010 001f 	ands.w	r0, r0, #31
 80105b2:	f000 8082 	beq.w	80106ba <_dtoa_r+0x912>
 80105b6:	f1c0 0320 	rsb	r3, r0, #32
 80105ba:	2b04      	cmp	r3, #4
 80105bc:	dd73      	ble.n	80106a6 <_dtoa_r+0x8fe>
 80105be:	9b00      	ldr	r3, [sp, #0]
 80105c0:	f1c0 001c 	rsb	r0, r0, #28
 80105c4:	4403      	add	r3, r0
 80105c6:	9300      	str	r3, [sp, #0]
 80105c8:	9b06      	ldr	r3, [sp, #24]
 80105ca:	4403      	add	r3, r0
 80105cc:	4406      	add	r6, r0
 80105ce:	9306      	str	r3, [sp, #24]
 80105d0:	9b00      	ldr	r3, [sp, #0]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	dd05      	ble.n	80105e2 <_dtoa_r+0x83a>
 80105d6:	9902      	ldr	r1, [sp, #8]
 80105d8:	461a      	mov	r2, r3
 80105da:	4648      	mov	r0, r9
 80105dc:	f000 fcba 	bl	8010f54 <__lshift>
 80105e0:	9002      	str	r0, [sp, #8]
 80105e2:	9b06      	ldr	r3, [sp, #24]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	dd05      	ble.n	80105f4 <_dtoa_r+0x84c>
 80105e8:	4621      	mov	r1, r4
 80105ea:	461a      	mov	r2, r3
 80105ec:	4648      	mov	r0, r9
 80105ee:	f000 fcb1 	bl	8010f54 <__lshift>
 80105f2:	4604      	mov	r4, r0
 80105f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d061      	beq.n	80106be <_dtoa_r+0x916>
 80105fa:	9802      	ldr	r0, [sp, #8]
 80105fc:	4621      	mov	r1, r4
 80105fe:	f000 fd15 	bl	801102c <__mcmp>
 8010602:	2800      	cmp	r0, #0
 8010604:	da5b      	bge.n	80106be <_dtoa_r+0x916>
 8010606:	2300      	movs	r3, #0
 8010608:	9902      	ldr	r1, [sp, #8]
 801060a:	220a      	movs	r2, #10
 801060c:	4648      	mov	r0, r9
 801060e:	f000 fafd 	bl	8010c0c <__multadd>
 8010612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010614:	9002      	str	r0, [sp, #8]
 8010616:	f107 38ff 	add.w	r8, r7, #4294967295
 801061a:	2b00      	cmp	r3, #0
 801061c:	f000 8177 	beq.w	801090e <_dtoa_r+0xb66>
 8010620:	4629      	mov	r1, r5
 8010622:	2300      	movs	r3, #0
 8010624:	220a      	movs	r2, #10
 8010626:	4648      	mov	r0, r9
 8010628:	f000 faf0 	bl	8010c0c <__multadd>
 801062c:	f1bb 0f00 	cmp.w	fp, #0
 8010630:	4605      	mov	r5, r0
 8010632:	dc6f      	bgt.n	8010714 <_dtoa_r+0x96c>
 8010634:	9b07      	ldr	r3, [sp, #28]
 8010636:	2b02      	cmp	r3, #2
 8010638:	dc49      	bgt.n	80106ce <_dtoa_r+0x926>
 801063a:	e06b      	b.n	8010714 <_dtoa_r+0x96c>
 801063c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801063e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010642:	e73c      	b.n	80104be <_dtoa_r+0x716>
 8010644:	3fe00000 	.word	0x3fe00000
 8010648:	40240000 	.word	0x40240000
 801064c:	9b03      	ldr	r3, [sp, #12]
 801064e:	1e5c      	subs	r4, r3, #1
 8010650:	9b08      	ldr	r3, [sp, #32]
 8010652:	42a3      	cmp	r3, r4
 8010654:	db09      	blt.n	801066a <_dtoa_r+0x8c2>
 8010656:	1b1c      	subs	r4, r3, r4
 8010658:	9b03      	ldr	r3, [sp, #12]
 801065a:	2b00      	cmp	r3, #0
 801065c:	f6bf af30 	bge.w	80104c0 <_dtoa_r+0x718>
 8010660:	9b00      	ldr	r3, [sp, #0]
 8010662:	9a03      	ldr	r2, [sp, #12]
 8010664:	1a9e      	subs	r6, r3, r2
 8010666:	2300      	movs	r3, #0
 8010668:	e72b      	b.n	80104c2 <_dtoa_r+0x71a>
 801066a:	9b08      	ldr	r3, [sp, #32]
 801066c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801066e:	9408      	str	r4, [sp, #32]
 8010670:	1ae3      	subs	r3, r4, r3
 8010672:	441a      	add	r2, r3
 8010674:	9e00      	ldr	r6, [sp, #0]
 8010676:	9b03      	ldr	r3, [sp, #12]
 8010678:	920d      	str	r2, [sp, #52]	@ 0x34
 801067a:	2400      	movs	r4, #0
 801067c:	e721      	b.n	80104c2 <_dtoa_r+0x71a>
 801067e:	9c08      	ldr	r4, [sp, #32]
 8010680:	9e00      	ldr	r6, [sp, #0]
 8010682:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010684:	e728      	b.n	80104d8 <_dtoa_r+0x730>
 8010686:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801068a:	e751      	b.n	8010530 <_dtoa_r+0x788>
 801068c:	9a08      	ldr	r2, [sp, #32]
 801068e:	9902      	ldr	r1, [sp, #8]
 8010690:	e750      	b.n	8010534 <_dtoa_r+0x78c>
 8010692:	f8cd 8008 	str.w	r8, [sp, #8]
 8010696:	e751      	b.n	801053c <_dtoa_r+0x794>
 8010698:	2300      	movs	r3, #0
 801069a:	e779      	b.n	8010590 <_dtoa_r+0x7e8>
 801069c:	9b04      	ldr	r3, [sp, #16]
 801069e:	e777      	b.n	8010590 <_dtoa_r+0x7e8>
 80106a0:	2300      	movs	r3, #0
 80106a2:	9308      	str	r3, [sp, #32]
 80106a4:	e779      	b.n	801059a <_dtoa_r+0x7f2>
 80106a6:	d093      	beq.n	80105d0 <_dtoa_r+0x828>
 80106a8:	9a00      	ldr	r2, [sp, #0]
 80106aa:	331c      	adds	r3, #28
 80106ac:	441a      	add	r2, r3
 80106ae:	9200      	str	r2, [sp, #0]
 80106b0:	9a06      	ldr	r2, [sp, #24]
 80106b2:	441a      	add	r2, r3
 80106b4:	441e      	add	r6, r3
 80106b6:	9206      	str	r2, [sp, #24]
 80106b8:	e78a      	b.n	80105d0 <_dtoa_r+0x828>
 80106ba:	4603      	mov	r3, r0
 80106bc:	e7f4      	b.n	80106a8 <_dtoa_r+0x900>
 80106be:	9b03      	ldr	r3, [sp, #12]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	46b8      	mov	r8, r7
 80106c4:	dc20      	bgt.n	8010708 <_dtoa_r+0x960>
 80106c6:	469b      	mov	fp, r3
 80106c8:	9b07      	ldr	r3, [sp, #28]
 80106ca:	2b02      	cmp	r3, #2
 80106cc:	dd1e      	ble.n	801070c <_dtoa_r+0x964>
 80106ce:	f1bb 0f00 	cmp.w	fp, #0
 80106d2:	f47f adb1 	bne.w	8010238 <_dtoa_r+0x490>
 80106d6:	4621      	mov	r1, r4
 80106d8:	465b      	mov	r3, fp
 80106da:	2205      	movs	r2, #5
 80106dc:	4648      	mov	r0, r9
 80106de:	f000 fa95 	bl	8010c0c <__multadd>
 80106e2:	4601      	mov	r1, r0
 80106e4:	4604      	mov	r4, r0
 80106e6:	9802      	ldr	r0, [sp, #8]
 80106e8:	f000 fca0 	bl	801102c <__mcmp>
 80106ec:	2800      	cmp	r0, #0
 80106ee:	f77f ada3 	ble.w	8010238 <_dtoa_r+0x490>
 80106f2:	4656      	mov	r6, sl
 80106f4:	2331      	movs	r3, #49	@ 0x31
 80106f6:	f806 3b01 	strb.w	r3, [r6], #1
 80106fa:	f108 0801 	add.w	r8, r8, #1
 80106fe:	e59f      	b.n	8010240 <_dtoa_r+0x498>
 8010700:	9c03      	ldr	r4, [sp, #12]
 8010702:	46b8      	mov	r8, r7
 8010704:	4625      	mov	r5, r4
 8010706:	e7f4      	b.n	80106f2 <_dtoa_r+0x94a>
 8010708:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801070c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801070e:	2b00      	cmp	r3, #0
 8010710:	f000 8101 	beq.w	8010916 <_dtoa_r+0xb6e>
 8010714:	2e00      	cmp	r6, #0
 8010716:	dd05      	ble.n	8010724 <_dtoa_r+0x97c>
 8010718:	4629      	mov	r1, r5
 801071a:	4632      	mov	r2, r6
 801071c:	4648      	mov	r0, r9
 801071e:	f000 fc19 	bl	8010f54 <__lshift>
 8010722:	4605      	mov	r5, r0
 8010724:	9b08      	ldr	r3, [sp, #32]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d05c      	beq.n	80107e4 <_dtoa_r+0xa3c>
 801072a:	6869      	ldr	r1, [r5, #4]
 801072c:	4648      	mov	r0, r9
 801072e:	f000 fa0b 	bl	8010b48 <_Balloc>
 8010732:	4606      	mov	r6, r0
 8010734:	b928      	cbnz	r0, 8010742 <_dtoa_r+0x99a>
 8010736:	4b82      	ldr	r3, [pc, #520]	@ (8010940 <_dtoa_r+0xb98>)
 8010738:	4602      	mov	r2, r0
 801073a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801073e:	f7ff bb4a 	b.w	800fdd6 <_dtoa_r+0x2e>
 8010742:	692a      	ldr	r2, [r5, #16]
 8010744:	3202      	adds	r2, #2
 8010746:	0092      	lsls	r2, r2, #2
 8010748:	f105 010c 	add.w	r1, r5, #12
 801074c:	300c      	adds	r0, #12
 801074e:	f000 fff7 	bl	8011740 <memcpy>
 8010752:	2201      	movs	r2, #1
 8010754:	4631      	mov	r1, r6
 8010756:	4648      	mov	r0, r9
 8010758:	f000 fbfc 	bl	8010f54 <__lshift>
 801075c:	f10a 0301 	add.w	r3, sl, #1
 8010760:	9300      	str	r3, [sp, #0]
 8010762:	eb0a 030b 	add.w	r3, sl, fp
 8010766:	9308      	str	r3, [sp, #32]
 8010768:	9b04      	ldr	r3, [sp, #16]
 801076a:	f003 0301 	and.w	r3, r3, #1
 801076e:	462f      	mov	r7, r5
 8010770:	9306      	str	r3, [sp, #24]
 8010772:	4605      	mov	r5, r0
 8010774:	9b00      	ldr	r3, [sp, #0]
 8010776:	9802      	ldr	r0, [sp, #8]
 8010778:	4621      	mov	r1, r4
 801077a:	f103 3bff 	add.w	fp, r3, #4294967295
 801077e:	f7ff fa88 	bl	800fc92 <quorem>
 8010782:	4603      	mov	r3, r0
 8010784:	3330      	adds	r3, #48	@ 0x30
 8010786:	9003      	str	r0, [sp, #12]
 8010788:	4639      	mov	r1, r7
 801078a:	9802      	ldr	r0, [sp, #8]
 801078c:	9309      	str	r3, [sp, #36]	@ 0x24
 801078e:	f000 fc4d 	bl	801102c <__mcmp>
 8010792:	462a      	mov	r2, r5
 8010794:	9004      	str	r0, [sp, #16]
 8010796:	4621      	mov	r1, r4
 8010798:	4648      	mov	r0, r9
 801079a:	f000 fc63 	bl	8011064 <__mdiff>
 801079e:	68c2      	ldr	r2, [r0, #12]
 80107a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107a2:	4606      	mov	r6, r0
 80107a4:	bb02      	cbnz	r2, 80107e8 <_dtoa_r+0xa40>
 80107a6:	4601      	mov	r1, r0
 80107a8:	9802      	ldr	r0, [sp, #8]
 80107aa:	f000 fc3f 	bl	801102c <__mcmp>
 80107ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107b0:	4602      	mov	r2, r0
 80107b2:	4631      	mov	r1, r6
 80107b4:	4648      	mov	r0, r9
 80107b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80107b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80107ba:	f000 fa05 	bl	8010bc8 <_Bfree>
 80107be:	9b07      	ldr	r3, [sp, #28]
 80107c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80107c2:	9e00      	ldr	r6, [sp, #0]
 80107c4:	ea42 0103 	orr.w	r1, r2, r3
 80107c8:	9b06      	ldr	r3, [sp, #24]
 80107ca:	4319      	orrs	r1, r3
 80107cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107ce:	d10d      	bne.n	80107ec <_dtoa_r+0xa44>
 80107d0:	2b39      	cmp	r3, #57	@ 0x39
 80107d2:	d027      	beq.n	8010824 <_dtoa_r+0xa7c>
 80107d4:	9a04      	ldr	r2, [sp, #16]
 80107d6:	2a00      	cmp	r2, #0
 80107d8:	dd01      	ble.n	80107de <_dtoa_r+0xa36>
 80107da:	9b03      	ldr	r3, [sp, #12]
 80107dc:	3331      	adds	r3, #49	@ 0x31
 80107de:	f88b 3000 	strb.w	r3, [fp]
 80107e2:	e52e      	b.n	8010242 <_dtoa_r+0x49a>
 80107e4:	4628      	mov	r0, r5
 80107e6:	e7b9      	b.n	801075c <_dtoa_r+0x9b4>
 80107e8:	2201      	movs	r2, #1
 80107ea:	e7e2      	b.n	80107b2 <_dtoa_r+0xa0a>
 80107ec:	9904      	ldr	r1, [sp, #16]
 80107ee:	2900      	cmp	r1, #0
 80107f0:	db04      	blt.n	80107fc <_dtoa_r+0xa54>
 80107f2:	9807      	ldr	r0, [sp, #28]
 80107f4:	4301      	orrs	r1, r0
 80107f6:	9806      	ldr	r0, [sp, #24]
 80107f8:	4301      	orrs	r1, r0
 80107fa:	d120      	bne.n	801083e <_dtoa_r+0xa96>
 80107fc:	2a00      	cmp	r2, #0
 80107fe:	ddee      	ble.n	80107de <_dtoa_r+0xa36>
 8010800:	9902      	ldr	r1, [sp, #8]
 8010802:	9300      	str	r3, [sp, #0]
 8010804:	2201      	movs	r2, #1
 8010806:	4648      	mov	r0, r9
 8010808:	f000 fba4 	bl	8010f54 <__lshift>
 801080c:	4621      	mov	r1, r4
 801080e:	9002      	str	r0, [sp, #8]
 8010810:	f000 fc0c 	bl	801102c <__mcmp>
 8010814:	2800      	cmp	r0, #0
 8010816:	9b00      	ldr	r3, [sp, #0]
 8010818:	dc02      	bgt.n	8010820 <_dtoa_r+0xa78>
 801081a:	d1e0      	bne.n	80107de <_dtoa_r+0xa36>
 801081c:	07da      	lsls	r2, r3, #31
 801081e:	d5de      	bpl.n	80107de <_dtoa_r+0xa36>
 8010820:	2b39      	cmp	r3, #57	@ 0x39
 8010822:	d1da      	bne.n	80107da <_dtoa_r+0xa32>
 8010824:	2339      	movs	r3, #57	@ 0x39
 8010826:	f88b 3000 	strb.w	r3, [fp]
 801082a:	4633      	mov	r3, r6
 801082c:	461e      	mov	r6, r3
 801082e:	3b01      	subs	r3, #1
 8010830:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010834:	2a39      	cmp	r2, #57	@ 0x39
 8010836:	d04e      	beq.n	80108d6 <_dtoa_r+0xb2e>
 8010838:	3201      	adds	r2, #1
 801083a:	701a      	strb	r2, [r3, #0]
 801083c:	e501      	b.n	8010242 <_dtoa_r+0x49a>
 801083e:	2a00      	cmp	r2, #0
 8010840:	dd03      	ble.n	801084a <_dtoa_r+0xaa2>
 8010842:	2b39      	cmp	r3, #57	@ 0x39
 8010844:	d0ee      	beq.n	8010824 <_dtoa_r+0xa7c>
 8010846:	3301      	adds	r3, #1
 8010848:	e7c9      	b.n	80107de <_dtoa_r+0xa36>
 801084a:	9a00      	ldr	r2, [sp, #0]
 801084c:	9908      	ldr	r1, [sp, #32]
 801084e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010852:	428a      	cmp	r2, r1
 8010854:	d028      	beq.n	80108a8 <_dtoa_r+0xb00>
 8010856:	9902      	ldr	r1, [sp, #8]
 8010858:	2300      	movs	r3, #0
 801085a:	220a      	movs	r2, #10
 801085c:	4648      	mov	r0, r9
 801085e:	f000 f9d5 	bl	8010c0c <__multadd>
 8010862:	42af      	cmp	r7, r5
 8010864:	9002      	str	r0, [sp, #8]
 8010866:	f04f 0300 	mov.w	r3, #0
 801086a:	f04f 020a 	mov.w	r2, #10
 801086e:	4639      	mov	r1, r7
 8010870:	4648      	mov	r0, r9
 8010872:	d107      	bne.n	8010884 <_dtoa_r+0xadc>
 8010874:	f000 f9ca 	bl	8010c0c <__multadd>
 8010878:	4607      	mov	r7, r0
 801087a:	4605      	mov	r5, r0
 801087c:	9b00      	ldr	r3, [sp, #0]
 801087e:	3301      	adds	r3, #1
 8010880:	9300      	str	r3, [sp, #0]
 8010882:	e777      	b.n	8010774 <_dtoa_r+0x9cc>
 8010884:	f000 f9c2 	bl	8010c0c <__multadd>
 8010888:	4629      	mov	r1, r5
 801088a:	4607      	mov	r7, r0
 801088c:	2300      	movs	r3, #0
 801088e:	220a      	movs	r2, #10
 8010890:	4648      	mov	r0, r9
 8010892:	f000 f9bb 	bl	8010c0c <__multadd>
 8010896:	4605      	mov	r5, r0
 8010898:	e7f0      	b.n	801087c <_dtoa_r+0xad4>
 801089a:	f1bb 0f00 	cmp.w	fp, #0
 801089e:	bfcc      	ite	gt
 80108a0:	465e      	movgt	r6, fp
 80108a2:	2601      	movle	r6, #1
 80108a4:	4456      	add	r6, sl
 80108a6:	2700      	movs	r7, #0
 80108a8:	9902      	ldr	r1, [sp, #8]
 80108aa:	9300      	str	r3, [sp, #0]
 80108ac:	2201      	movs	r2, #1
 80108ae:	4648      	mov	r0, r9
 80108b0:	f000 fb50 	bl	8010f54 <__lshift>
 80108b4:	4621      	mov	r1, r4
 80108b6:	9002      	str	r0, [sp, #8]
 80108b8:	f000 fbb8 	bl	801102c <__mcmp>
 80108bc:	2800      	cmp	r0, #0
 80108be:	dcb4      	bgt.n	801082a <_dtoa_r+0xa82>
 80108c0:	d102      	bne.n	80108c8 <_dtoa_r+0xb20>
 80108c2:	9b00      	ldr	r3, [sp, #0]
 80108c4:	07db      	lsls	r3, r3, #31
 80108c6:	d4b0      	bmi.n	801082a <_dtoa_r+0xa82>
 80108c8:	4633      	mov	r3, r6
 80108ca:	461e      	mov	r6, r3
 80108cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108d0:	2a30      	cmp	r2, #48	@ 0x30
 80108d2:	d0fa      	beq.n	80108ca <_dtoa_r+0xb22>
 80108d4:	e4b5      	b.n	8010242 <_dtoa_r+0x49a>
 80108d6:	459a      	cmp	sl, r3
 80108d8:	d1a8      	bne.n	801082c <_dtoa_r+0xa84>
 80108da:	2331      	movs	r3, #49	@ 0x31
 80108dc:	f108 0801 	add.w	r8, r8, #1
 80108e0:	f88a 3000 	strb.w	r3, [sl]
 80108e4:	e4ad      	b.n	8010242 <_dtoa_r+0x49a>
 80108e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80108e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010944 <_dtoa_r+0xb9c>
 80108ec:	b11b      	cbz	r3, 80108f6 <_dtoa_r+0xb4e>
 80108ee:	f10a 0308 	add.w	r3, sl, #8
 80108f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80108f4:	6013      	str	r3, [r2, #0]
 80108f6:	4650      	mov	r0, sl
 80108f8:	b017      	add	sp, #92	@ 0x5c
 80108fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108fe:	9b07      	ldr	r3, [sp, #28]
 8010900:	2b01      	cmp	r3, #1
 8010902:	f77f ae2e 	ble.w	8010562 <_dtoa_r+0x7ba>
 8010906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010908:	9308      	str	r3, [sp, #32]
 801090a:	2001      	movs	r0, #1
 801090c:	e64d      	b.n	80105aa <_dtoa_r+0x802>
 801090e:	f1bb 0f00 	cmp.w	fp, #0
 8010912:	f77f aed9 	ble.w	80106c8 <_dtoa_r+0x920>
 8010916:	4656      	mov	r6, sl
 8010918:	9802      	ldr	r0, [sp, #8]
 801091a:	4621      	mov	r1, r4
 801091c:	f7ff f9b9 	bl	800fc92 <quorem>
 8010920:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010924:	f806 3b01 	strb.w	r3, [r6], #1
 8010928:	eba6 020a 	sub.w	r2, r6, sl
 801092c:	4593      	cmp	fp, r2
 801092e:	ddb4      	ble.n	801089a <_dtoa_r+0xaf2>
 8010930:	9902      	ldr	r1, [sp, #8]
 8010932:	2300      	movs	r3, #0
 8010934:	220a      	movs	r2, #10
 8010936:	4648      	mov	r0, r9
 8010938:	f000 f968 	bl	8010c0c <__multadd>
 801093c:	9002      	str	r0, [sp, #8]
 801093e:	e7eb      	b.n	8010918 <_dtoa_r+0xb70>
 8010940:	080139ac 	.word	0x080139ac
 8010944:	08013930 	.word	0x08013930

08010948 <_free_r>:
 8010948:	b538      	push	{r3, r4, r5, lr}
 801094a:	4605      	mov	r5, r0
 801094c:	2900      	cmp	r1, #0
 801094e:	d041      	beq.n	80109d4 <_free_r+0x8c>
 8010950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010954:	1f0c      	subs	r4, r1, #4
 8010956:	2b00      	cmp	r3, #0
 8010958:	bfb8      	it	lt
 801095a:	18e4      	addlt	r4, r4, r3
 801095c:	f000 f8e8 	bl	8010b30 <__malloc_lock>
 8010960:	4a1d      	ldr	r2, [pc, #116]	@ (80109d8 <_free_r+0x90>)
 8010962:	6813      	ldr	r3, [r2, #0]
 8010964:	b933      	cbnz	r3, 8010974 <_free_r+0x2c>
 8010966:	6063      	str	r3, [r4, #4]
 8010968:	6014      	str	r4, [r2, #0]
 801096a:	4628      	mov	r0, r5
 801096c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010970:	f000 b8e4 	b.w	8010b3c <__malloc_unlock>
 8010974:	42a3      	cmp	r3, r4
 8010976:	d908      	bls.n	801098a <_free_r+0x42>
 8010978:	6820      	ldr	r0, [r4, #0]
 801097a:	1821      	adds	r1, r4, r0
 801097c:	428b      	cmp	r3, r1
 801097e:	bf01      	itttt	eq
 8010980:	6819      	ldreq	r1, [r3, #0]
 8010982:	685b      	ldreq	r3, [r3, #4]
 8010984:	1809      	addeq	r1, r1, r0
 8010986:	6021      	streq	r1, [r4, #0]
 8010988:	e7ed      	b.n	8010966 <_free_r+0x1e>
 801098a:	461a      	mov	r2, r3
 801098c:	685b      	ldr	r3, [r3, #4]
 801098e:	b10b      	cbz	r3, 8010994 <_free_r+0x4c>
 8010990:	42a3      	cmp	r3, r4
 8010992:	d9fa      	bls.n	801098a <_free_r+0x42>
 8010994:	6811      	ldr	r1, [r2, #0]
 8010996:	1850      	adds	r0, r2, r1
 8010998:	42a0      	cmp	r0, r4
 801099a:	d10b      	bne.n	80109b4 <_free_r+0x6c>
 801099c:	6820      	ldr	r0, [r4, #0]
 801099e:	4401      	add	r1, r0
 80109a0:	1850      	adds	r0, r2, r1
 80109a2:	4283      	cmp	r3, r0
 80109a4:	6011      	str	r1, [r2, #0]
 80109a6:	d1e0      	bne.n	801096a <_free_r+0x22>
 80109a8:	6818      	ldr	r0, [r3, #0]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	6053      	str	r3, [r2, #4]
 80109ae:	4408      	add	r0, r1
 80109b0:	6010      	str	r0, [r2, #0]
 80109b2:	e7da      	b.n	801096a <_free_r+0x22>
 80109b4:	d902      	bls.n	80109bc <_free_r+0x74>
 80109b6:	230c      	movs	r3, #12
 80109b8:	602b      	str	r3, [r5, #0]
 80109ba:	e7d6      	b.n	801096a <_free_r+0x22>
 80109bc:	6820      	ldr	r0, [r4, #0]
 80109be:	1821      	adds	r1, r4, r0
 80109c0:	428b      	cmp	r3, r1
 80109c2:	bf04      	itt	eq
 80109c4:	6819      	ldreq	r1, [r3, #0]
 80109c6:	685b      	ldreq	r3, [r3, #4]
 80109c8:	6063      	str	r3, [r4, #4]
 80109ca:	bf04      	itt	eq
 80109cc:	1809      	addeq	r1, r1, r0
 80109ce:	6021      	streq	r1, [r4, #0]
 80109d0:	6054      	str	r4, [r2, #4]
 80109d2:	e7ca      	b.n	801096a <_free_r+0x22>
 80109d4:	bd38      	pop	{r3, r4, r5, pc}
 80109d6:	bf00      	nop
 80109d8:	20000b88 	.word	0x20000b88

080109dc <malloc>:
 80109dc:	4b02      	ldr	r3, [pc, #8]	@ (80109e8 <malloc+0xc>)
 80109de:	4601      	mov	r1, r0
 80109e0:	6818      	ldr	r0, [r3, #0]
 80109e2:	f000 b825 	b.w	8010a30 <_malloc_r>
 80109e6:	bf00      	nop
 80109e8:	200000ec 	.word	0x200000ec

080109ec <sbrk_aligned>:
 80109ec:	b570      	push	{r4, r5, r6, lr}
 80109ee:	4e0f      	ldr	r6, [pc, #60]	@ (8010a2c <sbrk_aligned+0x40>)
 80109f0:	460c      	mov	r4, r1
 80109f2:	6831      	ldr	r1, [r6, #0]
 80109f4:	4605      	mov	r5, r0
 80109f6:	b911      	cbnz	r1, 80109fe <sbrk_aligned+0x12>
 80109f8:	f000 fe92 	bl	8011720 <_sbrk_r>
 80109fc:	6030      	str	r0, [r6, #0]
 80109fe:	4621      	mov	r1, r4
 8010a00:	4628      	mov	r0, r5
 8010a02:	f000 fe8d 	bl	8011720 <_sbrk_r>
 8010a06:	1c43      	adds	r3, r0, #1
 8010a08:	d103      	bne.n	8010a12 <sbrk_aligned+0x26>
 8010a0a:	f04f 34ff 	mov.w	r4, #4294967295
 8010a0e:	4620      	mov	r0, r4
 8010a10:	bd70      	pop	{r4, r5, r6, pc}
 8010a12:	1cc4      	adds	r4, r0, #3
 8010a14:	f024 0403 	bic.w	r4, r4, #3
 8010a18:	42a0      	cmp	r0, r4
 8010a1a:	d0f8      	beq.n	8010a0e <sbrk_aligned+0x22>
 8010a1c:	1a21      	subs	r1, r4, r0
 8010a1e:	4628      	mov	r0, r5
 8010a20:	f000 fe7e 	bl	8011720 <_sbrk_r>
 8010a24:	3001      	adds	r0, #1
 8010a26:	d1f2      	bne.n	8010a0e <sbrk_aligned+0x22>
 8010a28:	e7ef      	b.n	8010a0a <sbrk_aligned+0x1e>
 8010a2a:	bf00      	nop
 8010a2c:	20000b84 	.word	0x20000b84

08010a30 <_malloc_r>:
 8010a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a34:	1ccd      	adds	r5, r1, #3
 8010a36:	f025 0503 	bic.w	r5, r5, #3
 8010a3a:	3508      	adds	r5, #8
 8010a3c:	2d0c      	cmp	r5, #12
 8010a3e:	bf38      	it	cc
 8010a40:	250c      	movcc	r5, #12
 8010a42:	2d00      	cmp	r5, #0
 8010a44:	4606      	mov	r6, r0
 8010a46:	db01      	blt.n	8010a4c <_malloc_r+0x1c>
 8010a48:	42a9      	cmp	r1, r5
 8010a4a:	d904      	bls.n	8010a56 <_malloc_r+0x26>
 8010a4c:	230c      	movs	r3, #12
 8010a4e:	6033      	str	r3, [r6, #0]
 8010a50:	2000      	movs	r0, #0
 8010a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010b2c <_malloc_r+0xfc>
 8010a5a:	f000 f869 	bl	8010b30 <__malloc_lock>
 8010a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8010a62:	461c      	mov	r4, r3
 8010a64:	bb44      	cbnz	r4, 8010ab8 <_malloc_r+0x88>
 8010a66:	4629      	mov	r1, r5
 8010a68:	4630      	mov	r0, r6
 8010a6a:	f7ff ffbf 	bl	80109ec <sbrk_aligned>
 8010a6e:	1c43      	adds	r3, r0, #1
 8010a70:	4604      	mov	r4, r0
 8010a72:	d158      	bne.n	8010b26 <_malloc_r+0xf6>
 8010a74:	f8d8 4000 	ldr.w	r4, [r8]
 8010a78:	4627      	mov	r7, r4
 8010a7a:	2f00      	cmp	r7, #0
 8010a7c:	d143      	bne.n	8010b06 <_malloc_r+0xd6>
 8010a7e:	2c00      	cmp	r4, #0
 8010a80:	d04b      	beq.n	8010b1a <_malloc_r+0xea>
 8010a82:	6823      	ldr	r3, [r4, #0]
 8010a84:	4639      	mov	r1, r7
 8010a86:	4630      	mov	r0, r6
 8010a88:	eb04 0903 	add.w	r9, r4, r3
 8010a8c:	f000 fe48 	bl	8011720 <_sbrk_r>
 8010a90:	4581      	cmp	r9, r0
 8010a92:	d142      	bne.n	8010b1a <_malloc_r+0xea>
 8010a94:	6821      	ldr	r1, [r4, #0]
 8010a96:	1a6d      	subs	r5, r5, r1
 8010a98:	4629      	mov	r1, r5
 8010a9a:	4630      	mov	r0, r6
 8010a9c:	f7ff ffa6 	bl	80109ec <sbrk_aligned>
 8010aa0:	3001      	adds	r0, #1
 8010aa2:	d03a      	beq.n	8010b1a <_malloc_r+0xea>
 8010aa4:	6823      	ldr	r3, [r4, #0]
 8010aa6:	442b      	add	r3, r5
 8010aa8:	6023      	str	r3, [r4, #0]
 8010aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8010aae:	685a      	ldr	r2, [r3, #4]
 8010ab0:	bb62      	cbnz	r2, 8010b0c <_malloc_r+0xdc>
 8010ab2:	f8c8 7000 	str.w	r7, [r8]
 8010ab6:	e00f      	b.n	8010ad8 <_malloc_r+0xa8>
 8010ab8:	6822      	ldr	r2, [r4, #0]
 8010aba:	1b52      	subs	r2, r2, r5
 8010abc:	d420      	bmi.n	8010b00 <_malloc_r+0xd0>
 8010abe:	2a0b      	cmp	r2, #11
 8010ac0:	d917      	bls.n	8010af2 <_malloc_r+0xc2>
 8010ac2:	1961      	adds	r1, r4, r5
 8010ac4:	42a3      	cmp	r3, r4
 8010ac6:	6025      	str	r5, [r4, #0]
 8010ac8:	bf18      	it	ne
 8010aca:	6059      	strne	r1, [r3, #4]
 8010acc:	6863      	ldr	r3, [r4, #4]
 8010ace:	bf08      	it	eq
 8010ad0:	f8c8 1000 	streq.w	r1, [r8]
 8010ad4:	5162      	str	r2, [r4, r5]
 8010ad6:	604b      	str	r3, [r1, #4]
 8010ad8:	4630      	mov	r0, r6
 8010ada:	f000 f82f 	bl	8010b3c <__malloc_unlock>
 8010ade:	f104 000b 	add.w	r0, r4, #11
 8010ae2:	1d23      	adds	r3, r4, #4
 8010ae4:	f020 0007 	bic.w	r0, r0, #7
 8010ae8:	1ac2      	subs	r2, r0, r3
 8010aea:	bf1c      	itt	ne
 8010aec:	1a1b      	subne	r3, r3, r0
 8010aee:	50a3      	strne	r3, [r4, r2]
 8010af0:	e7af      	b.n	8010a52 <_malloc_r+0x22>
 8010af2:	6862      	ldr	r2, [r4, #4]
 8010af4:	42a3      	cmp	r3, r4
 8010af6:	bf0c      	ite	eq
 8010af8:	f8c8 2000 	streq.w	r2, [r8]
 8010afc:	605a      	strne	r2, [r3, #4]
 8010afe:	e7eb      	b.n	8010ad8 <_malloc_r+0xa8>
 8010b00:	4623      	mov	r3, r4
 8010b02:	6864      	ldr	r4, [r4, #4]
 8010b04:	e7ae      	b.n	8010a64 <_malloc_r+0x34>
 8010b06:	463c      	mov	r4, r7
 8010b08:	687f      	ldr	r7, [r7, #4]
 8010b0a:	e7b6      	b.n	8010a7a <_malloc_r+0x4a>
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	685b      	ldr	r3, [r3, #4]
 8010b10:	42a3      	cmp	r3, r4
 8010b12:	d1fb      	bne.n	8010b0c <_malloc_r+0xdc>
 8010b14:	2300      	movs	r3, #0
 8010b16:	6053      	str	r3, [r2, #4]
 8010b18:	e7de      	b.n	8010ad8 <_malloc_r+0xa8>
 8010b1a:	230c      	movs	r3, #12
 8010b1c:	6033      	str	r3, [r6, #0]
 8010b1e:	4630      	mov	r0, r6
 8010b20:	f000 f80c 	bl	8010b3c <__malloc_unlock>
 8010b24:	e794      	b.n	8010a50 <_malloc_r+0x20>
 8010b26:	6005      	str	r5, [r0, #0]
 8010b28:	e7d6      	b.n	8010ad8 <_malloc_r+0xa8>
 8010b2a:	bf00      	nop
 8010b2c:	20000b88 	.word	0x20000b88

08010b30 <__malloc_lock>:
 8010b30:	4801      	ldr	r0, [pc, #4]	@ (8010b38 <__malloc_lock+0x8>)
 8010b32:	f7ff b8ac 	b.w	800fc8e <__retarget_lock_acquire_recursive>
 8010b36:	bf00      	nop
 8010b38:	20000b80 	.word	0x20000b80

08010b3c <__malloc_unlock>:
 8010b3c:	4801      	ldr	r0, [pc, #4]	@ (8010b44 <__malloc_unlock+0x8>)
 8010b3e:	f7ff b8a7 	b.w	800fc90 <__retarget_lock_release_recursive>
 8010b42:	bf00      	nop
 8010b44:	20000b80 	.word	0x20000b80

08010b48 <_Balloc>:
 8010b48:	b570      	push	{r4, r5, r6, lr}
 8010b4a:	69c6      	ldr	r6, [r0, #28]
 8010b4c:	4604      	mov	r4, r0
 8010b4e:	460d      	mov	r5, r1
 8010b50:	b976      	cbnz	r6, 8010b70 <_Balloc+0x28>
 8010b52:	2010      	movs	r0, #16
 8010b54:	f7ff ff42 	bl	80109dc <malloc>
 8010b58:	4602      	mov	r2, r0
 8010b5a:	61e0      	str	r0, [r4, #28]
 8010b5c:	b920      	cbnz	r0, 8010b68 <_Balloc+0x20>
 8010b5e:	4b18      	ldr	r3, [pc, #96]	@ (8010bc0 <_Balloc+0x78>)
 8010b60:	4818      	ldr	r0, [pc, #96]	@ (8010bc4 <_Balloc+0x7c>)
 8010b62:	216b      	movs	r1, #107	@ 0x6b
 8010b64:	f000 fdfa 	bl	801175c <__assert_func>
 8010b68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b6c:	6006      	str	r6, [r0, #0]
 8010b6e:	60c6      	str	r6, [r0, #12]
 8010b70:	69e6      	ldr	r6, [r4, #28]
 8010b72:	68f3      	ldr	r3, [r6, #12]
 8010b74:	b183      	cbz	r3, 8010b98 <_Balloc+0x50>
 8010b76:	69e3      	ldr	r3, [r4, #28]
 8010b78:	68db      	ldr	r3, [r3, #12]
 8010b7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b7e:	b9b8      	cbnz	r0, 8010bb0 <_Balloc+0x68>
 8010b80:	2101      	movs	r1, #1
 8010b82:	fa01 f605 	lsl.w	r6, r1, r5
 8010b86:	1d72      	adds	r2, r6, #5
 8010b88:	0092      	lsls	r2, r2, #2
 8010b8a:	4620      	mov	r0, r4
 8010b8c:	f000 fe04 	bl	8011798 <_calloc_r>
 8010b90:	b160      	cbz	r0, 8010bac <_Balloc+0x64>
 8010b92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010b96:	e00e      	b.n	8010bb6 <_Balloc+0x6e>
 8010b98:	2221      	movs	r2, #33	@ 0x21
 8010b9a:	2104      	movs	r1, #4
 8010b9c:	4620      	mov	r0, r4
 8010b9e:	f000 fdfb 	bl	8011798 <_calloc_r>
 8010ba2:	69e3      	ldr	r3, [r4, #28]
 8010ba4:	60f0      	str	r0, [r6, #12]
 8010ba6:	68db      	ldr	r3, [r3, #12]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d1e4      	bne.n	8010b76 <_Balloc+0x2e>
 8010bac:	2000      	movs	r0, #0
 8010bae:	bd70      	pop	{r4, r5, r6, pc}
 8010bb0:	6802      	ldr	r2, [r0, #0]
 8010bb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010bbc:	e7f7      	b.n	8010bae <_Balloc+0x66>
 8010bbe:	bf00      	nop
 8010bc0:	0801393d 	.word	0x0801393d
 8010bc4:	080139bd 	.word	0x080139bd

08010bc8 <_Bfree>:
 8010bc8:	b570      	push	{r4, r5, r6, lr}
 8010bca:	69c6      	ldr	r6, [r0, #28]
 8010bcc:	4605      	mov	r5, r0
 8010bce:	460c      	mov	r4, r1
 8010bd0:	b976      	cbnz	r6, 8010bf0 <_Bfree+0x28>
 8010bd2:	2010      	movs	r0, #16
 8010bd4:	f7ff ff02 	bl	80109dc <malloc>
 8010bd8:	4602      	mov	r2, r0
 8010bda:	61e8      	str	r0, [r5, #28]
 8010bdc:	b920      	cbnz	r0, 8010be8 <_Bfree+0x20>
 8010bde:	4b09      	ldr	r3, [pc, #36]	@ (8010c04 <_Bfree+0x3c>)
 8010be0:	4809      	ldr	r0, [pc, #36]	@ (8010c08 <_Bfree+0x40>)
 8010be2:	218f      	movs	r1, #143	@ 0x8f
 8010be4:	f000 fdba 	bl	801175c <__assert_func>
 8010be8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010bec:	6006      	str	r6, [r0, #0]
 8010bee:	60c6      	str	r6, [r0, #12]
 8010bf0:	b13c      	cbz	r4, 8010c02 <_Bfree+0x3a>
 8010bf2:	69eb      	ldr	r3, [r5, #28]
 8010bf4:	6862      	ldr	r2, [r4, #4]
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010bfc:	6021      	str	r1, [r4, #0]
 8010bfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010c02:	bd70      	pop	{r4, r5, r6, pc}
 8010c04:	0801393d 	.word	0x0801393d
 8010c08:	080139bd 	.word	0x080139bd

08010c0c <__multadd>:
 8010c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c10:	690d      	ldr	r5, [r1, #16]
 8010c12:	4607      	mov	r7, r0
 8010c14:	460c      	mov	r4, r1
 8010c16:	461e      	mov	r6, r3
 8010c18:	f101 0c14 	add.w	ip, r1, #20
 8010c1c:	2000      	movs	r0, #0
 8010c1e:	f8dc 3000 	ldr.w	r3, [ip]
 8010c22:	b299      	uxth	r1, r3
 8010c24:	fb02 6101 	mla	r1, r2, r1, r6
 8010c28:	0c1e      	lsrs	r6, r3, #16
 8010c2a:	0c0b      	lsrs	r3, r1, #16
 8010c2c:	fb02 3306 	mla	r3, r2, r6, r3
 8010c30:	b289      	uxth	r1, r1
 8010c32:	3001      	adds	r0, #1
 8010c34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010c38:	4285      	cmp	r5, r0
 8010c3a:	f84c 1b04 	str.w	r1, [ip], #4
 8010c3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010c42:	dcec      	bgt.n	8010c1e <__multadd+0x12>
 8010c44:	b30e      	cbz	r6, 8010c8a <__multadd+0x7e>
 8010c46:	68a3      	ldr	r3, [r4, #8]
 8010c48:	42ab      	cmp	r3, r5
 8010c4a:	dc19      	bgt.n	8010c80 <__multadd+0x74>
 8010c4c:	6861      	ldr	r1, [r4, #4]
 8010c4e:	4638      	mov	r0, r7
 8010c50:	3101      	adds	r1, #1
 8010c52:	f7ff ff79 	bl	8010b48 <_Balloc>
 8010c56:	4680      	mov	r8, r0
 8010c58:	b928      	cbnz	r0, 8010c66 <__multadd+0x5a>
 8010c5a:	4602      	mov	r2, r0
 8010c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8010c90 <__multadd+0x84>)
 8010c5e:	480d      	ldr	r0, [pc, #52]	@ (8010c94 <__multadd+0x88>)
 8010c60:	21ba      	movs	r1, #186	@ 0xba
 8010c62:	f000 fd7b 	bl	801175c <__assert_func>
 8010c66:	6922      	ldr	r2, [r4, #16]
 8010c68:	3202      	adds	r2, #2
 8010c6a:	f104 010c 	add.w	r1, r4, #12
 8010c6e:	0092      	lsls	r2, r2, #2
 8010c70:	300c      	adds	r0, #12
 8010c72:	f000 fd65 	bl	8011740 <memcpy>
 8010c76:	4621      	mov	r1, r4
 8010c78:	4638      	mov	r0, r7
 8010c7a:	f7ff ffa5 	bl	8010bc8 <_Bfree>
 8010c7e:	4644      	mov	r4, r8
 8010c80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010c84:	3501      	adds	r5, #1
 8010c86:	615e      	str	r6, [r3, #20]
 8010c88:	6125      	str	r5, [r4, #16]
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c90:	080139ac 	.word	0x080139ac
 8010c94:	080139bd 	.word	0x080139bd

08010c98 <__hi0bits>:
 8010c98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	bf36      	itet	cc
 8010ca0:	0403      	lslcc	r3, r0, #16
 8010ca2:	2000      	movcs	r0, #0
 8010ca4:	2010      	movcc	r0, #16
 8010ca6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010caa:	bf3c      	itt	cc
 8010cac:	021b      	lslcc	r3, r3, #8
 8010cae:	3008      	addcc	r0, #8
 8010cb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010cb4:	bf3c      	itt	cc
 8010cb6:	011b      	lslcc	r3, r3, #4
 8010cb8:	3004      	addcc	r0, #4
 8010cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010cbe:	bf3c      	itt	cc
 8010cc0:	009b      	lslcc	r3, r3, #2
 8010cc2:	3002      	addcc	r0, #2
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	db05      	blt.n	8010cd4 <__hi0bits+0x3c>
 8010cc8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010ccc:	f100 0001 	add.w	r0, r0, #1
 8010cd0:	bf08      	it	eq
 8010cd2:	2020      	moveq	r0, #32
 8010cd4:	4770      	bx	lr

08010cd6 <__lo0bits>:
 8010cd6:	6803      	ldr	r3, [r0, #0]
 8010cd8:	4602      	mov	r2, r0
 8010cda:	f013 0007 	ands.w	r0, r3, #7
 8010cde:	d00b      	beq.n	8010cf8 <__lo0bits+0x22>
 8010ce0:	07d9      	lsls	r1, r3, #31
 8010ce2:	d421      	bmi.n	8010d28 <__lo0bits+0x52>
 8010ce4:	0798      	lsls	r0, r3, #30
 8010ce6:	bf49      	itett	mi
 8010ce8:	085b      	lsrmi	r3, r3, #1
 8010cea:	089b      	lsrpl	r3, r3, #2
 8010cec:	2001      	movmi	r0, #1
 8010cee:	6013      	strmi	r3, [r2, #0]
 8010cf0:	bf5c      	itt	pl
 8010cf2:	6013      	strpl	r3, [r2, #0]
 8010cf4:	2002      	movpl	r0, #2
 8010cf6:	4770      	bx	lr
 8010cf8:	b299      	uxth	r1, r3
 8010cfa:	b909      	cbnz	r1, 8010d00 <__lo0bits+0x2a>
 8010cfc:	0c1b      	lsrs	r3, r3, #16
 8010cfe:	2010      	movs	r0, #16
 8010d00:	b2d9      	uxtb	r1, r3
 8010d02:	b909      	cbnz	r1, 8010d08 <__lo0bits+0x32>
 8010d04:	3008      	adds	r0, #8
 8010d06:	0a1b      	lsrs	r3, r3, #8
 8010d08:	0719      	lsls	r1, r3, #28
 8010d0a:	bf04      	itt	eq
 8010d0c:	091b      	lsreq	r3, r3, #4
 8010d0e:	3004      	addeq	r0, #4
 8010d10:	0799      	lsls	r1, r3, #30
 8010d12:	bf04      	itt	eq
 8010d14:	089b      	lsreq	r3, r3, #2
 8010d16:	3002      	addeq	r0, #2
 8010d18:	07d9      	lsls	r1, r3, #31
 8010d1a:	d403      	bmi.n	8010d24 <__lo0bits+0x4e>
 8010d1c:	085b      	lsrs	r3, r3, #1
 8010d1e:	f100 0001 	add.w	r0, r0, #1
 8010d22:	d003      	beq.n	8010d2c <__lo0bits+0x56>
 8010d24:	6013      	str	r3, [r2, #0]
 8010d26:	4770      	bx	lr
 8010d28:	2000      	movs	r0, #0
 8010d2a:	4770      	bx	lr
 8010d2c:	2020      	movs	r0, #32
 8010d2e:	4770      	bx	lr

08010d30 <__i2b>:
 8010d30:	b510      	push	{r4, lr}
 8010d32:	460c      	mov	r4, r1
 8010d34:	2101      	movs	r1, #1
 8010d36:	f7ff ff07 	bl	8010b48 <_Balloc>
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	b928      	cbnz	r0, 8010d4a <__i2b+0x1a>
 8010d3e:	4b05      	ldr	r3, [pc, #20]	@ (8010d54 <__i2b+0x24>)
 8010d40:	4805      	ldr	r0, [pc, #20]	@ (8010d58 <__i2b+0x28>)
 8010d42:	f240 1145 	movw	r1, #325	@ 0x145
 8010d46:	f000 fd09 	bl	801175c <__assert_func>
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	6144      	str	r4, [r0, #20]
 8010d4e:	6103      	str	r3, [r0, #16]
 8010d50:	bd10      	pop	{r4, pc}
 8010d52:	bf00      	nop
 8010d54:	080139ac 	.word	0x080139ac
 8010d58:	080139bd 	.word	0x080139bd

08010d5c <__multiply>:
 8010d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d60:	4617      	mov	r7, r2
 8010d62:	690a      	ldr	r2, [r1, #16]
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	bfa8      	it	ge
 8010d6a:	463b      	movge	r3, r7
 8010d6c:	4689      	mov	r9, r1
 8010d6e:	bfa4      	itt	ge
 8010d70:	460f      	movge	r7, r1
 8010d72:	4699      	movge	r9, r3
 8010d74:	693d      	ldr	r5, [r7, #16]
 8010d76:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	6879      	ldr	r1, [r7, #4]
 8010d7e:	eb05 060a 	add.w	r6, r5, sl
 8010d82:	42b3      	cmp	r3, r6
 8010d84:	b085      	sub	sp, #20
 8010d86:	bfb8      	it	lt
 8010d88:	3101      	addlt	r1, #1
 8010d8a:	f7ff fedd 	bl	8010b48 <_Balloc>
 8010d8e:	b930      	cbnz	r0, 8010d9e <__multiply+0x42>
 8010d90:	4602      	mov	r2, r0
 8010d92:	4b41      	ldr	r3, [pc, #260]	@ (8010e98 <__multiply+0x13c>)
 8010d94:	4841      	ldr	r0, [pc, #260]	@ (8010e9c <__multiply+0x140>)
 8010d96:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010d9a:	f000 fcdf 	bl	801175c <__assert_func>
 8010d9e:	f100 0414 	add.w	r4, r0, #20
 8010da2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010da6:	4623      	mov	r3, r4
 8010da8:	2200      	movs	r2, #0
 8010daa:	4573      	cmp	r3, lr
 8010dac:	d320      	bcc.n	8010df0 <__multiply+0x94>
 8010dae:	f107 0814 	add.w	r8, r7, #20
 8010db2:	f109 0114 	add.w	r1, r9, #20
 8010db6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010dba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010dbe:	9302      	str	r3, [sp, #8]
 8010dc0:	1beb      	subs	r3, r5, r7
 8010dc2:	3b15      	subs	r3, #21
 8010dc4:	f023 0303 	bic.w	r3, r3, #3
 8010dc8:	3304      	adds	r3, #4
 8010dca:	3715      	adds	r7, #21
 8010dcc:	42bd      	cmp	r5, r7
 8010dce:	bf38      	it	cc
 8010dd0:	2304      	movcc	r3, #4
 8010dd2:	9301      	str	r3, [sp, #4]
 8010dd4:	9b02      	ldr	r3, [sp, #8]
 8010dd6:	9103      	str	r1, [sp, #12]
 8010dd8:	428b      	cmp	r3, r1
 8010dda:	d80c      	bhi.n	8010df6 <__multiply+0x9a>
 8010ddc:	2e00      	cmp	r6, #0
 8010dde:	dd03      	ble.n	8010de8 <__multiply+0x8c>
 8010de0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d055      	beq.n	8010e94 <__multiply+0x138>
 8010de8:	6106      	str	r6, [r0, #16]
 8010dea:	b005      	add	sp, #20
 8010dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df0:	f843 2b04 	str.w	r2, [r3], #4
 8010df4:	e7d9      	b.n	8010daa <__multiply+0x4e>
 8010df6:	f8b1 a000 	ldrh.w	sl, [r1]
 8010dfa:	f1ba 0f00 	cmp.w	sl, #0
 8010dfe:	d01f      	beq.n	8010e40 <__multiply+0xe4>
 8010e00:	46c4      	mov	ip, r8
 8010e02:	46a1      	mov	r9, r4
 8010e04:	2700      	movs	r7, #0
 8010e06:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010e0a:	f8d9 3000 	ldr.w	r3, [r9]
 8010e0e:	fa1f fb82 	uxth.w	fp, r2
 8010e12:	b29b      	uxth	r3, r3
 8010e14:	fb0a 330b 	mla	r3, sl, fp, r3
 8010e18:	443b      	add	r3, r7
 8010e1a:	f8d9 7000 	ldr.w	r7, [r9]
 8010e1e:	0c12      	lsrs	r2, r2, #16
 8010e20:	0c3f      	lsrs	r7, r7, #16
 8010e22:	fb0a 7202 	mla	r2, sl, r2, r7
 8010e26:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e30:	4565      	cmp	r5, ip
 8010e32:	f849 3b04 	str.w	r3, [r9], #4
 8010e36:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010e3a:	d8e4      	bhi.n	8010e06 <__multiply+0xaa>
 8010e3c:	9b01      	ldr	r3, [sp, #4]
 8010e3e:	50e7      	str	r7, [r4, r3]
 8010e40:	9b03      	ldr	r3, [sp, #12]
 8010e42:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010e46:	3104      	adds	r1, #4
 8010e48:	f1b9 0f00 	cmp.w	r9, #0
 8010e4c:	d020      	beq.n	8010e90 <__multiply+0x134>
 8010e4e:	6823      	ldr	r3, [r4, #0]
 8010e50:	4647      	mov	r7, r8
 8010e52:	46a4      	mov	ip, r4
 8010e54:	f04f 0a00 	mov.w	sl, #0
 8010e58:	f8b7 b000 	ldrh.w	fp, [r7]
 8010e5c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010e60:	fb09 220b 	mla	r2, r9, fp, r2
 8010e64:	4452      	add	r2, sl
 8010e66:	b29b      	uxth	r3, r3
 8010e68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e6c:	f84c 3b04 	str.w	r3, [ip], #4
 8010e70:	f857 3b04 	ldr.w	r3, [r7], #4
 8010e74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010e78:	f8bc 3000 	ldrh.w	r3, [ip]
 8010e7c:	fb09 330a 	mla	r3, r9, sl, r3
 8010e80:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010e84:	42bd      	cmp	r5, r7
 8010e86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010e8a:	d8e5      	bhi.n	8010e58 <__multiply+0xfc>
 8010e8c:	9a01      	ldr	r2, [sp, #4]
 8010e8e:	50a3      	str	r3, [r4, r2]
 8010e90:	3404      	adds	r4, #4
 8010e92:	e79f      	b.n	8010dd4 <__multiply+0x78>
 8010e94:	3e01      	subs	r6, #1
 8010e96:	e7a1      	b.n	8010ddc <__multiply+0x80>
 8010e98:	080139ac 	.word	0x080139ac
 8010e9c:	080139bd 	.word	0x080139bd

08010ea0 <__pow5mult>:
 8010ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ea4:	4615      	mov	r5, r2
 8010ea6:	f012 0203 	ands.w	r2, r2, #3
 8010eaa:	4607      	mov	r7, r0
 8010eac:	460e      	mov	r6, r1
 8010eae:	d007      	beq.n	8010ec0 <__pow5mult+0x20>
 8010eb0:	4c25      	ldr	r4, [pc, #148]	@ (8010f48 <__pow5mult+0xa8>)
 8010eb2:	3a01      	subs	r2, #1
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010eba:	f7ff fea7 	bl	8010c0c <__multadd>
 8010ebe:	4606      	mov	r6, r0
 8010ec0:	10ad      	asrs	r5, r5, #2
 8010ec2:	d03d      	beq.n	8010f40 <__pow5mult+0xa0>
 8010ec4:	69fc      	ldr	r4, [r7, #28]
 8010ec6:	b97c      	cbnz	r4, 8010ee8 <__pow5mult+0x48>
 8010ec8:	2010      	movs	r0, #16
 8010eca:	f7ff fd87 	bl	80109dc <malloc>
 8010ece:	4602      	mov	r2, r0
 8010ed0:	61f8      	str	r0, [r7, #28]
 8010ed2:	b928      	cbnz	r0, 8010ee0 <__pow5mult+0x40>
 8010ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8010f4c <__pow5mult+0xac>)
 8010ed6:	481e      	ldr	r0, [pc, #120]	@ (8010f50 <__pow5mult+0xb0>)
 8010ed8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010edc:	f000 fc3e 	bl	801175c <__assert_func>
 8010ee0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010ee4:	6004      	str	r4, [r0, #0]
 8010ee6:	60c4      	str	r4, [r0, #12]
 8010ee8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010eec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010ef0:	b94c      	cbnz	r4, 8010f06 <__pow5mult+0x66>
 8010ef2:	f240 2171 	movw	r1, #625	@ 0x271
 8010ef6:	4638      	mov	r0, r7
 8010ef8:	f7ff ff1a 	bl	8010d30 <__i2b>
 8010efc:	2300      	movs	r3, #0
 8010efe:	f8c8 0008 	str.w	r0, [r8, #8]
 8010f02:	4604      	mov	r4, r0
 8010f04:	6003      	str	r3, [r0, #0]
 8010f06:	f04f 0900 	mov.w	r9, #0
 8010f0a:	07eb      	lsls	r3, r5, #31
 8010f0c:	d50a      	bpl.n	8010f24 <__pow5mult+0x84>
 8010f0e:	4631      	mov	r1, r6
 8010f10:	4622      	mov	r2, r4
 8010f12:	4638      	mov	r0, r7
 8010f14:	f7ff ff22 	bl	8010d5c <__multiply>
 8010f18:	4631      	mov	r1, r6
 8010f1a:	4680      	mov	r8, r0
 8010f1c:	4638      	mov	r0, r7
 8010f1e:	f7ff fe53 	bl	8010bc8 <_Bfree>
 8010f22:	4646      	mov	r6, r8
 8010f24:	106d      	asrs	r5, r5, #1
 8010f26:	d00b      	beq.n	8010f40 <__pow5mult+0xa0>
 8010f28:	6820      	ldr	r0, [r4, #0]
 8010f2a:	b938      	cbnz	r0, 8010f3c <__pow5mult+0x9c>
 8010f2c:	4622      	mov	r2, r4
 8010f2e:	4621      	mov	r1, r4
 8010f30:	4638      	mov	r0, r7
 8010f32:	f7ff ff13 	bl	8010d5c <__multiply>
 8010f36:	6020      	str	r0, [r4, #0]
 8010f38:	f8c0 9000 	str.w	r9, [r0]
 8010f3c:	4604      	mov	r4, r0
 8010f3e:	e7e4      	b.n	8010f0a <__pow5mult+0x6a>
 8010f40:	4630      	mov	r0, r6
 8010f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f46:	bf00      	nop
 8010f48:	08013a70 	.word	0x08013a70
 8010f4c:	0801393d 	.word	0x0801393d
 8010f50:	080139bd 	.word	0x080139bd

08010f54 <__lshift>:
 8010f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f58:	460c      	mov	r4, r1
 8010f5a:	6849      	ldr	r1, [r1, #4]
 8010f5c:	6923      	ldr	r3, [r4, #16]
 8010f5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010f62:	68a3      	ldr	r3, [r4, #8]
 8010f64:	4607      	mov	r7, r0
 8010f66:	4691      	mov	r9, r2
 8010f68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010f6c:	f108 0601 	add.w	r6, r8, #1
 8010f70:	42b3      	cmp	r3, r6
 8010f72:	db0b      	blt.n	8010f8c <__lshift+0x38>
 8010f74:	4638      	mov	r0, r7
 8010f76:	f7ff fde7 	bl	8010b48 <_Balloc>
 8010f7a:	4605      	mov	r5, r0
 8010f7c:	b948      	cbnz	r0, 8010f92 <__lshift+0x3e>
 8010f7e:	4602      	mov	r2, r0
 8010f80:	4b28      	ldr	r3, [pc, #160]	@ (8011024 <__lshift+0xd0>)
 8010f82:	4829      	ldr	r0, [pc, #164]	@ (8011028 <__lshift+0xd4>)
 8010f84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010f88:	f000 fbe8 	bl	801175c <__assert_func>
 8010f8c:	3101      	adds	r1, #1
 8010f8e:	005b      	lsls	r3, r3, #1
 8010f90:	e7ee      	b.n	8010f70 <__lshift+0x1c>
 8010f92:	2300      	movs	r3, #0
 8010f94:	f100 0114 	add.w	r1, r0, #20
 8010f98:	f100 0210 	add.w	r2, r0, #16
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	4553      	cmp	r3, sl
 8010fa0:	db33      	blt.n	801100a <__lshift+0xb6>
 8010fa2:	6920      	ldr	r0, [r4, #16]
 8010fa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010fa8:	f104 0314 	add.w	r3, r4, #20
 8010fac:	f019 091f 	ands.w	r9, r9, #31
 8010fb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010fb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010fb8:	d02b      	beq.n	8011012 <__lshift+0xbe>
 8010fba:	f1c9 0e20 	rsb	lr, r9, #32
 8010fbe:	468a      	mov	sl, r1
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	6818      	ldr	r0, [r3, #0]
 8010fc4:	fa00 f009 	lsl.w	r0, r0, r9
 8010fc8:	4310      	orrs	r0, r2
 8010fca:	f84a 0b04 	str.w	r0, [sl], #4
 8010fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fd2:	459c      	cmp	ip, r3
 8010fd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8010fd8:	d8f3      	bhi.n	8010fc2 <__lshift+0x6e>
 8010fda:	ebac 0304 	sub.w	r3, ip, r4
 8010fde:	3b15      	subs	r3, #21
 8010fe0:	f023 0303 	bic.w	r3, r3, #3
 8010fe4:	3304      	adds	r3, #4
 8010fe6:	f104 0015 	add.w	r0, r4, #21
 8010fea:	4560      	cmp	r0, ip
 8010fec:	bf88      	it	hi
 8010fee:	2304      	movhi	r3, #4
 8010ff0:	50ca      	str	r2, [r1, r3]
 8010ff2:	b10a      	cbz	r2, 8010ff8 <__lshift+0xa4>
 8010ff4:	f108 0602 	add.w	r6, r8, #2
 8010ff8:	3e01      	subs	r6, #1
 8010ffa:	4638      	mov	r0, r7
 8010ffc:	612e      	str	r6, [r5, #16]
 8010ffe:	4621      	mov	r1, r4
 8011000:	f7ff fde2 	bl	8010bc8 <_Bfree>
 8011004:	4628      	mov	r0, r5
 8011006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801100a:	f842 0f04 	str.w	r0, [r2, #4]!
 801100e:	3301      	adds	r3, #1
 8011010:	e7c5      	b.n	8010f9e <__lshift+0x4a>
 8011012:	3904      	subs	r1, #4
 8011014:	f853 2b04 	ldr.w	r2, [r3], #4
 8011018:	f841 2f04 	str.w	r2, [r1, #4]!
 801101c:	459c      	cmp	ip, r3
 801101e:	d8f9      	bhi.n	8011014 <__lshift+0xc0>
 8011020:	e7ea      	b.n	8010ff8 <__lshift+0xa4>
 8011022:	bf00      	nop
 8011024:	080139ac 	.word	0x080139ac
 8011028:	080139bd 	.word	0x080139bd

0801102c <__mcmp>:
 801102c:	690a      	ldr	r2, [r1, #16]
 801102e:	4603      	mov	r3, r0
 8011030:	6900      	ldr	r0, [r0, #16]
 8011032:	1a80      	subs	r0, r0, r2
 8011034:	b530      	push	{r4, r5, lr}
 8011036:	d10e      	bne.n	8011056 <__mcmp+0x2a>
 8011038:	3314      	adds	r3, #20
 801103a:	3114      	adds	r1, #20
 801103c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011040:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011044:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011048:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801104c:	4295      	cmp	r5, r2
 801104e:	d003      	beq.n	8011058 <__mcmp+0x2c>
 8011050:	d205      	bcs.n	801105e <__mcmp+0x32>
 8011052:	f04f 30ff 	mov.w	r0, #4294967295
 8011056:	bd30      	pop	{r4, r5, pc}
 8011058:	42a3      	cmp	r3, r4
 801105a:	d3f3      	bcc.n	8011044 <__mcmp+0x18>
 801105c:	e7fb      	b.n	8011056 <__mcmp+0x2a>
 801105e:	2001      	movs	r0, #1
 8011060:	e7f9      	b.n	8011056 <__mcmp+0x2a>
	...

08011064 <__mdiff>:
 8011064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011068:	4689      	mov	r9, r1
 801106a:	4606      	mov	r6, r0
 801106c:	4611      	mov	r1, r2
 801106e:	4648      	mov	r0, r9
 8011070:	4614      	mov	r4, r2
 8011072:	f7ff ffdb 	bl	801102c <__mcmp>
 8011076:	1e05      	subs	r5, r0, #0
 8011078:	d112      	bne.n	80110a0 <__mdiff+0x3c>
 801107a:	4629      	mov	r1, r5
 801107c:	4630      	mov	r0, r6
 801107e:	f7ff fd63 	bl	8010b48 <_Balloc>
 8011082:	4602      	mov	r2, r0
 8011084:	b928      	cbnz	r0, 8011092 <__mdiff+0x2e>
 8011086:	4b3f      	ldr	r3, [pc, #252]	@ (8011184 <__mdiff+0x120>)
 8011088:	f240 2137 	movw	r1, #567	@ 0x237
 801108c:	483e      	ldr	r0, [pc, #248]	@ (8011188 <__mdiff+0x124>)
 801108e:	f000 fb65 	bl	801175c <__assert_func>
 8011092:	2301      	movs	r3, #1
 8011094:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011098:	4610      	mov	r0, r2
 801109a:	b003      	add	sp, #12
 801109c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110a0:	bfbc      	itt	lt
 80110a2:	464b      	movlt	r3, r9
 80110a4:	46a1      	movlt	r9, r4
 80110a6:	4630      	mov	r0, r6
 80110a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80110ac:	bfba      	itte	lt
 80110ae:	461c      	movlt	r4, r3
 80110b0:	2501      	movlt	r5, #1
 80110b2:	2500      	movge	r5, #0
 80110b4:	f7ff fd48 	bl	8010b48 <_Balloc>
 80110b8:	4602      	mov	r2, r0
 80110ba:	b918      	cbnz	r0, 80110c4 <__mdiff+0x60>
 80110bc:	4b31      	ldr	r3, [pc, #196]	@ (8011184 <__mdiff+0x120>)
 80110be:	f240 2145 	movw	r1, #581	@ 0x245
 80110c2:	e7e3      	b.n	801108c <__mdiff+0x28>
 80110c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80110c8:	6926      	ldr	r6, [r4, #16]
 80110ca:	60c5      	str	r5, [r0, #12]
 80110cc:	f109 0310 	add.w	r3, r9, #16
 80110d0:	f109 0514 	add.w	r5, r9, #20
 80110d4:	f104 0e14 	add.w	lr, r4, #20
 80110d8:	f100 0b14 	add.w	fp, r0, #20
 80110dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80110e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80110e4:	9301      	str	r3, [sp, #4]
 80110e6:	46d9      	mov	r9, fp
 80110e8:	f04f 0c00 	mov.w	ip, #0
 80110ec:	9b01      	ldr	r3, [sp, #4]
 80110ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80110f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80110f6:	9301      	str	r3, [sp, #4]
 80110f8:	fa1f f38a 	uxth.w	r3, sl
 80110fc:	4619      	mov	r1, r3
 80110fe:	b283      	uxth	r3, r0
 8011100:	1acb      	subs	r3, r1, r3
 8011102:	0c00      	lsrs	r0, r0, #16
 8011104:	4463      	add	r3, ip
 8011106:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801110a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801110e:	b29b      	uxth	r3, r3
 8011110:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011114:	4576      	cmp	r6, lr
 8011116:	f849 3b04 	str.w	r3, [r9], #4
 801111a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801111e:	d8e5      	bhi.n	80110ec <__mdiff+0x88>
 8011120:	1b33      	subs	r3, r6, r4
 8011122:	3b15      	subs	r3, #21
 8011124:	f023 0303 	bic.w	r3, r3, #3
 8011128:	3415      	adds	r4, #21
 801112a:	3304      	adds	r3, #4
 801112c:	42a6      	cmp	r6, r4
 801112e:	bf38      	it	cc
 8011130:	2304      	movcc	r3, #4
 8011132:	441d      	add	r5, r3
 8011134:	445b      	add	r3, fp
 8011136:	461e      	mov	r6, r3
 8011138:	462c      	mov	r4, r5
 801113a:	4544      	cmp	r4, r8
 801113c:	d30e      	bcc.n	801115c <__mdiff+0xf8>
 801113e:	f108 0103 	add.w	r1, r8, #3
 8011142:	1b49      	subs	r1, r1, r5
 8011144:	f021 0103 	bic.w	r1, r1, #3
 8011148:	3d03      	subs	r5, #3
 801114a:	45a8      	cmp	r8, r5
 801114c:	bf38      	it	cc
 801114e:	2100      	movcc	r1, #0
 8011150:	440b      	add	r3, r1
 8011152:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011156:	b191      	cbz	r1, 801117e <__mdiff+0x11a>
 8011158:	6117      	str	r7, [r2, #16]
 801115a:	e79d      	b.n	8011098 <__mdiff+0x34>
 801115c:	f854 1b04 	ldr.w	r1, [r4], #4
 8011160:	46e6      	mov	lr, ip
 8011162:	0c08      	lsrs	r0, r1, #16
 8011164:	fa1c fc81 	uxtah	ip, ip, r1
 8011168:	4471      	add	r1, lr
 801116a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801116e:	b289      	uxth	r1, r1
 8011170:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011174:	f846 1b04 	str.w	r1, [r6], #4
 8011178:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801117c:	e7dd      	b.n	801113a <__mdiff+0xd6>
 801117e:	3f01      	subs	r7, #1
 8011180:	e7e7      	b.n	8011152 <__mdiff+0xee>
 8011182:	bf00      	nop
 8011184:	080139ac 	.word	0x080139ac
 8011188:	080139bd 	.word	0x080139bd

0801118c <__d2b>:
 801118c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011190:	460f      	mov	r7, r1
 8011192:	2101      	movs	r1, #1
 8011194:	ec59 8b10 	vmov	r8, r9, d0
 8011198:	4616      	mov	r6, r2
 801119a:	f7ff fcd5 	bl	8010b48 <_Balloc>
 801119e:	4604      	mov	r4, r0
 80111a0:	b930      	cbnz	r0, 80111b0 <__d2b+0x24>
 80111a2:	4602      	mov	r2, r0
 80111a4:	4b23      	ldr	r3, [pc, #140]	@ (8011234 <__d2b+0xa8>)
 80111a6:	4824      	ldr	r0, [pc, #144]	@ (8011238 <__d2b+0xac>)
 80111a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80111ac:	f000 fad6 	bl	801175c <__assert_func>
 80111b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80111b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80111b8:	b10d      	cbz	r5, 80111be <__d2b+0x32>
 80111ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80111be:	9301      	str	r3, [sp, #4]
 80111c0:	f1b8 0300 	subs.w	r3, r8, #0
 80111c4:	d023      	beq.n	801120e <__d2b+0x82>
 80111c6:	4668      	mov	r0, sp
 80111c8:	9300      	str	r3, [sp, #0]
 80111ca:	f7ff fd84 	bl	8010cd6 <__lo0bits>
 80111ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80111d2:	b1d0      	cbz	r0, 801120a <__d2b+0x7e>
 80111d4:	f1c0 0320 	rsb	r3, r0, #32
 80111d8:	fa02 f303 	lsl.w	r3, r2, r3
 80111dc:	430b      	orrs	r3, r1
 80111de:	40c2      	lsrs	r2, r0
 80111e0:	6163      	str	r3, [r4, #20]
 80111e2:	9201      	str	r2, [sp, #4]
 80111e4:	9b01      	ldr	r3, [sp, #4]
 80111e6:	61a3      	str	r3, [r4, #24]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	bf0c      	ite	eq
 80111ec:	2201      	moveq	r2, #1
 80111ee:	2202      	movne	r2, #2
 80111f0:	6122      	str	r2, [r4, #16]
 80111f2:	b1a5      	cbz	r5, 801121e <__d2b+0x92>
 80111f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80111f8:	4405      	add	r5, r0
 80111fa:	603d      	str	r5, [r7, #0]
 80111fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011200:	6030      	str	r0, [r6, #0]
 8011202:	4620      	mov	r0, r4
 8011204:	b003      	add	sp, #12
 8011206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801120a:	6161      	str	r1, [r4, #20]
 801120c:	e7ea      	b.n	80111e4 <__d2b+0x58>
 801120e:	a801      	add	r0, sp, #4
 8011210:	f7ff fd61 	bl	8010cd6 <__lo0bits>
 8011214:	9b01      	ldr	r3, [sp, #4]
 8011216:	6163      	str	r3, [r4, #20]
 8011218:	3020      	adds	r0, #32
 801121a:	2201      	movs	r2, #1
 801121c:	e7e8      	b.n	80111f0 <__d2b+0x64>
 801121e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011222:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011226:	6038      	str	r0, [r7, #0]
 8011228:	6918      	ldr	r0, [r3, #16]
 801122a:	f7ff fd35 	bl	8010c98 <__hi0bits>
 801122e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011232:	e7e5      	b.n	8011200 <__d2b+0x74>
 8011234:	080139ac 	.word	0x080139ac
 8011238:	080139bd 	.word	0x080139bd

0801123c <__sfputc_r>:
 801123c:	6893      	ldr	r3, [r2, #8]
 801123e:	3b01      	subs	r3, #1
 8011240:	2b00      	cmp	r3, #0
 8011242:	b410      	push	{r4}
 8011244:	6093      	str	r3, [r2, #8]
 8011246:	da08      	bge.n	801125a <__sfputc_r+0x1e>
 8011248:	6994      	ldr	r4, [r2, #24]
 801124a:	42a3      	cmp	r3, r4
 801124c:	db01      	blt.n	8011252 <__sfputc_r+0x16>
 801124e:	290a      	cmp	r1, #10
 8011250:	d103      	bne.n	801125a <__sfputc_r+0x1e>
 8011252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011256:	f7fe bbf8 	b.w	800fa4a <__swbuf_r>
 801125a:	6813      	ldr	r3, [r2, #0]
 801125c:	1c58      	adds	r0, r3, #1
 801125e:	6010      	str	r0, [r2, #0]
 8011260:	7019      	strb	r1, [r3, #0]
 8011262:	4608      	mov	r0, r1
 8011264:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011268:	4770      	bx	lr

0801126a <__sfputs_r>:
 801126a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801126c:	4606      	mov	r6, r0
 801126e:	460f      	mov	r7, r1
 8011270:	4614      	mov	r4, r2
 8011272:	18d5      	adds	r5, r2, r3
 8011274:	42ac      	cmp	r4, r5
 8011276:	d101      	bne.n	801127c <__sfputs_r+0x12>
 8011278:	2000      	movs	r0, #0
 801127a:	e007      	b.n	801128c <__sfputs_r+0x22>
 801127c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011280:	463a      	mov	r2, r7
 8011282:	4630      	mov	r0, r6
 8011284:	f7ff ffda 	bl	801123c <__sfputc_r>
 8011288:	1c43      	adds	r3, r0, #1
 801128a:	d1f3      	bne.n	8011274 <__sfputs_r+0xa>
 801128c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011290 <_vfiprintf_r>:
 8011290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011294:	460d      	mov	r5, r1
 8011296:	b09d      	sub	sp, #116	@ 0x74
 8011298:	4614      	mov	r4, r2
 801129a:	4698      	mov	r8, r3
 801129c:	4606      	mov	r6, r0
 801129e:	b118      	cbz	r0, 80112a8 <_vfiprintf_r+0x18>
 80112a0:	6a03      	ldr	r3, [r0, #32]
 80112a2:	b90b      	cbnz	r3, 80112a8 <_vfiprintf_r+0x18>
 80112a4:	f7fe fae8 	bl	800f878 <__sinit>
 80112a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80112aa:	07d9      	lsls	r1, r3, #31
 80112ac:	d405      	bmi.n	80112ba <_vfiprintf_r+0x2a>
 80112ae:	89ab      	ldrh	r3, [r5, #12]
 80112b0:	059a      	lsls	r2, r3, #22
 80112b2:	d402      	bmi.n	80112ba <_vfiprintf_r+0x2a>
 80112b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80112b6:	f7fe fcea 	bl	800fc8e <__retarget_lock_acquire_recursive>
 80112ba:	89ab      	ldrh	r3, [r5, #12]
 80112bc:	071b      	lsls	r3, r3, #28
 80112be:	d501      	bpl.n	80112c4 <_vfiprintf_r+0x34>
 80112c0:	692b      	ldr	r3, [r5, #16]
 80112c2:	b99b      	cbnz	r3, 80112ec <_vfiprintf_r+0x5c>
 80112c4:	4629      	mov	r1, r5
 80112c6:	4630      	mov	r0, r6
 80112c8:	f7fe fbfe 	bl	800fac8 <__swsetup_r>
 80112cc:	b170      	cbz	r0, 80112ec <_vfiprintf_r+0x5c>
 80112ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80112d0:	07dc      	lsls	r4, r3, #31
 80112d2:	d504      	bpl.n	80112de <_vfiprintf_r+0x4e>
 80112d4:	f04f 30ff 	mov.w	r0, #4294967295
 80112d8:	b01d      	add	sp, #116	@ 0x74
 80112da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112de:	89ab      	ldrh	r3, [r5, #12]
 80112e0:	0598      	lsls	r0, r3, #22
 80112e2:	d4f7      	bmi.n	80112d4 <_vfiprintf_r+0x44>
 80112e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80112e6:	f7fe fcd3 	bl	800fc90 <__retarget_lock_release_recursive>
 80112ea:	e7f3      	b.n	80112d4 <_vfiprintf_r+0x44>
 80112ec:	2300      	movs	r3, #0
 80112ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80112f0:	2320      	movs	r3, #32
 80112f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80112f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80112fa:	2330      	movs	r3, #48	@ 0x30
 80112fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80114ac <_vfiprintf_r+0x21c>
 8011300:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011304:	f04f 0901 	mov.w	r9, #1
 8011308:	4623      	mov	r3, r4
 801130a:	469a      	mov	sl, r3
 801130c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011310:	b10a      	cbz	r2, 8011316 <_vfiprintf_r+0x86>
 8011312:	2a25      	cmp	r2, #37	@ 0x25
 8011314:	d1f9      	bne.n	801130a <_vfiprintf_r+0x7a>
 8011316:	ebba 0b04 	subs.w	fp, sl, r4
 801131a:	d00b      	beq.n	8011334 <_vfiprintf_r+0xa4>
 801131c:	465b      	mov	r3, fp
 801131e:	4622      	mov	r2, r4
 8011320:	4629      	mov	r1, r5
 8011322:	4630      	mov	r0, r6
 8011324:	f7ff ffa1 	bl	801126a <__sfputs_r>
 8011328:	3001      	adds	r0, #1
 801132a:	f000 80a7 	beq.w	801147c <_vfiprintf_r+0x1ec>
 801132e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011330:	445a      	add	r2, fp
 8011332:	9209      	str	r2, [sp, #36]	@ 0x24
 8011334:	f89a 3000 	ldrb.w	r3, [sl]
 8011338:	2b00      	cmp	r3, #0
 801133a:	f000 809f 	beq.w	801147c <_vfiprintf_r+0x1ec>
 801133e:	2300      	movs	r3, #0
 8011340:	f04f 32ff 	mov.w	r2, #4294967295
 8011344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011348:	f10a 0a01 	add.w	sl, sl, #1
 801134c:	9304      	str	r3, [sp, #16]
 801134e:	9307      	str	r3, [sp, #28]
 8011350:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011354:	931a      	str	r3, [sp, #104]	@ 0x68
 8011356:	4654      	mov	r4, sl
 8011358:	2205      	movs	r2, #5
 801135a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801135e:	4853      	ldr	r0, [pc, #332]	@ (80114ac <_vfiprintf_r+0x21c>)
 8011360:	f7ee ff36 	bl	80001d0 <memchr>
 8011364:	9a04      	ldr	r2, [sp, #16]
 8011366:	b9d8      	cbnz	r0, 80113a0 <_vfiprintf_r+0x110>
 8011368:	06d1      	lsls	r1, r2, #27
 801136a:	bf44      	itt	mi
 801136c:	2320      	movmi	r3, #32
 801136e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011372:	0713      	lsls	r3, r2, #28
 8011374:	bf44      	itt	mi
 8011376:	232b      	movmi	r3, #43	@ 0x2b
 8011378:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801137c:	f89a 3000 	ldrb.w	r3, [sl]
 8011380:	2b2a      	cmp	r3, #42	@ 0x2a
 8011382:	d015      	beq.n	80113b0 <_vfiprintf_r+0x120>
 8011384:	9a07      	ldr	r2, [sp, #28]
 8011386:	4654      	mov	r4, sl
 8011388:	2000      	movs	r0, #0
 801138a:	f04f 0c0a 	mov.w	ip, #10
 801138e:	4621      	mov	r1, r4
 8011390:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011394:	3b30      	subs	r3, #48	@ 0x30
 8011396:	2b09      	cmp	r3, #9
 8011398:	d94b      	bls.n	8011432 <_vfiprintf_r+0x1a2>
 801139a:	b1b0      	cbz	r0, 80113ca <_vfiprintf_r+0x13a>
 801139c:	9207      	str	r2, [sp, #28]
 801139e:	e014      	b.n	80113ca <_vfiprintf_r+0x13a>
 80113a0:	eba0 0308 	sub.w	r3, r0, r8
 80113a4:	fa09 f303 	lsl.w	r3, r9, r3
 80113a8:	4313      	orrs	r3, r2
 80113aa:	9304      	str	r3, [sp, #16]
 80113ac:	46a2      	mov	sl, r4
 80113ae:	e7d2      	b.n	8011356 <_vfiprintf_r+0xc6>
 80113b0:	9b03      	ldr	r3, [sp, #12]
 80113b2:	1d19      	adds	r1, r3, #4
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	9103      	str	r1, [sp, #12]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	bfbb      	ittet	lt
 80113bc:	425b      	neglt	r3, r3
 80113be:	f042 0202 	orrlt.w	r2, r2, #2
 80113c2:	9307      	strge	r3, [sp, #28]
 80113c4:	9307      	strlt	r3, [sp, #28]
 80113c6:	bfb8      	it	lt
 80113c8:	9204      	strlt	r2, [sp, #16]
 80113ca:	7823      	ldrb	r3, [r4, #0]
 80113cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80113ce:	d10a      	bne.n	80113e6 <_vfiprintf_r+0x156>
 80113d0:	7863      	ldrb	r3, [r4, #1]
 80113d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80113d4:	d132      	bne.n	801143c <_vfiprintf_r+0x1ac>
 80113d6:	9b03      	ldr	r3, [sp, #12]
 80113d8:	1d1a      	adds	r2, r3, #4
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	9203      	str	r2, [sp, #12]
 80113de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80113e2:	3402      	adds	r4, #2
 80113e4:	9305      	str	r3, [sp, #20]
 80113e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80114bc <_vfiprintf_r+0x22c>
 80113ea:	7821      	ldrb	r1, [r4, #0]
 80113ec:	2203      	movs	r2, #3
 80113ee:	4650      	mov	r0, sl
 80113f0:	f7ee feee 	bl	80001d0 <memchr>
 80113f4:	b138      	cbz	r0, 8011406 <_vfiprintf_r+0x176>
 80113f6:	9b04      	ldr	r3, [sp, #16]
 80113f8:	eba0 000a 	sub.w	r0, r0, sl
 80113fc:	2240      	movs	r2, #64	@ 0x40
 80113fe:	4082      	lsls	r2, r0
 8011400:	4313      	orrs	r3, r2
 8011402:	3401      	adds	r4, #1
 8011404:	9304      	str	r3, [sp, #16]
 8011406:	f814 1b01 	ldrb.w	r1, [r4], #1
 801140a:	4829      	ldr	r0, [pc, #164]	@ (80114b0 <_vfiprintf_r+0x220>)
 801140c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011410:	2206      	movs	r2, #6
 8011412:	f7ee fedd 	bl	80001d0 <memchr>
 8011416:	2800      	cmp	r0, #0
 8011418:	d03f      	beq.n	801149a <_vfiprintf_r+0x20a>
 801141a:	4b26      	ldr	r3, [pc, #152]	@ (80114b4 <_vfiprintf_r+0x224>)
 801141c:	bb1b      	cbnz	r3, 8011466 <_vfiprintf_r+0x1d6>
 801141e:	9b03      	ldr	r3, [sp, #12]
 8011420:	3307      	adds	r3, #7
 8011422:	f023 0307 	bic.w	r3, r3, #7
 8011426:	3308      	adds	r3, #8
 8011428:	9303      	str	r3, [sp, #12]
 801142a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801142c:	443b      	add	r3, r7
 801142e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011430:	e76a      	b.n	8011308 <_vfiprintf_r+0x78>
 8011432:	fb0c 3202 	mla	r2, ip, r2, r3
 8011436:	460c      	mov	r4, r1
 8011438:	2001      	movs	r0, #1
 801143a:	e7a8      	b.n	801138e <_vfiprintf_r+0xfe>
 801143c:	2300      	movs	r3, #0
 801143e:	3401      	adds	r4, #1
 8011440:	9305      	str	r3, [sp, #20]
 8011442:	4619      	mov	r1, r3
 8011444:	f04f 0c0a 	mov.w	ip, #10
 8011448:	4620      	mov	r0, r4
 801144a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801144e:	3a30      	subs	r2, #48	@ 0x30
 8011450:	2a09      	cmp	r2, #9
 8011452:	d903      	bls.n	801145c <_vfiprintf_r+0x1cc>
 8011454:	2b00      	cmp	r3, #0
 8011456:	d0c6      	beq.n	80113e6 <_vfiprintf_r+0x156>
 8011458:	9105      	str	r1, [sp, #20]
 801145a:	e7c4      	b.n	80113e6 <_vfiprintf_r+0x156>
 801145c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011460:	4604      	mov	r4, r0
 8011462:	2301      	movs	r3, #1
 8011464:	e7f0      	b.n	8011448 <_vfiprintf_r+0x1b8>
 8011466:	ab03      	add	r3, sp, #12
 8011468:	9300      	str	r3, [sp, #0]
 801146a:	462a      	mov	r2, r5
 801146c:	4b12      	ldr	r3, [pc, #72]	@ (80114b8 <_vfiprintf_r+0x228>)
 801146e:	a904      	add	r1, sp, #16
 8011470:	4630      	mov	r0, r6
 8011472:	f7fd fdbf 	bl	800eff4 <_printf_float>
 8011476:	4607      	mov	r7, r0
 8011478:	1c78      	adds	r0, r7, #1
 801147a:	d1d6      	bne.n	801142a <_vfiprintf_r+0x19a>
 801147c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801147e:	07d9      	lsls	r1, r3, #31
 8011480:	d405      	bmi.n	801148e <_vfiprintf_r+0x1fe>
 8011482:	89ab      	ldrh	r3, [r5, #12]
 8011484:	059a      	lsls	r2, r3, #22
 8011486:	d402      	bmi.n	801148e <_vfiprintf_r+0x1fe>
 8011488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801148a:	f7fe fc01 	bl	800fc90 <__retarget_lock_release_recursive>
 801148e:	89ab      	ldrh	r3, [r5, #12]
 8011490:	065b      	lsls	r3, r3, #25
 8011492:	f53f af1f 	bmi.w	80112d4 <_vfiprintf_r+0x44>
 8011496:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011498:	e71e      	b.n	80112d8 <_vfiprintf_r+0x48>
 801149a:	ab03      	add	r3, sp, #12
 801149c:	9300      	str	r3, [sp, #0]
 801149e:	462a      	mov	r2, r5
 80114a0:	4b05      	ldr	r3, [pc, #20]	@ (80114b8 <_vfiprintf_r+0x228>)
 80114a2:	a904      	add	r1, sp, #16
 80114a4:	4630      	mov	r0, r6
 80114a6:	f7fe f83d 	bl	800f524 <_printf_i>
 80114aa:	e7e4      	b.n	8011476 <_vfiprintf_r+0x1e6>
 80114ac:	08013a16 	.word	0x08013a16
 80114b0:	08013a20 	.word	0x08013a20
 80114b4:	0800eff5 	.word	0x0800eff5
 80114b8:	0801126b 	.word	0x0801126b
 80114bc:	08013a1c 	.word	0x08013a1c

080114c0 <__sflush_r>:
 80114c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80114c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114c8:	0716      	lsls	r6, r2, #28
 80114ca:	4605      	mov	r5, r0
 80114cc:	460c      	mov	r4, r1
 80114ce:	d454      	bmi.n	801157a <__sflush_r+0xba>
 80114d0:	684b      	ldr	r3, [r1, #4]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	dc02      	bgt.n	80114dc <__sflush_r+0x1c>
 80114d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80114d8:	2b00      	cmp	r3, #0
 80114da:	dd48      	ble.n	801156e <__sflush_r+0xae>
 80114dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114de:	2e00      	cmp	r6, #0
 80114e0:	d045      	beq.n	801156e <__sflush_r+0xae>
 80114e2:	2300      	movs	r3, #0
 80114e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80114e8:	682f      	ldr	r7, [r5, #0]
 80114ea:	6a21      	ldr	r1, [r4, #32]
 80114ec:	602b      	str	r3, [r5, #0]
 80114ee:	d030      	beq.n	8011552 <__sflush_r+0x92>
 80114f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80114f2:	89a3      	ldrh	r3, [r4, #12]
 80114f4:	0759      	lsls	r1, r3, #29
 80114f6:	d505      	bpl.n	8011504 <__sflush_r+0x44>
 80114f8:	6863      	ldr	r3, [r4, #4]
 80114fa:	1ad2      	subs	r2, r2, r3
 80114fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80114fe:	b10b      	cbz	r3, 8011504 <__sflush_r+0x44>
 8011500:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011502:	1ad2      	subs	r2, r2, r3
 8011504:	2300      	movs	r3, #0
 8011506:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011508:	6a21      	ldr	r1, [r4, #32]
 801150a:	4628      	mov	r0, r5
 801150c:	47b0      	blx	r6
 801150e:	1c43      	adds	r3, r0, #1
 8011510:	89a3      	ldrh	r3, [r4, #12]
 8011512:	d106      	bne.n	8011522 <__sflush_r+0x62>
 8011514:	6829      	ldr	r1, [r5, #0]
 8011516:	291d      	cmp	r1, #29
 8011518:	d82b      	bhi.n	8011572 <__sflush_r+0xb2>
 801151a:	4a2a      	ldr	r2, [pc, #168]	@ (80115c4 <__sflush_r+0x104>)
 801151c:	40ca      	lsrs	r2, r1
 801151e:	07d6      	lsls	r6, r2, #31
 8011520:	d527      	bpl.n	8011572 <__sflush_r+0xb2>
 8011522:	2200      	movs	r2, #0
 8011524:	6062      	str	r2, [r4, #4]
 8011526:	04d9      	lsls	r1, r3, #19
 8011528:	6922      	ldr	r2, [r4, #16]
 801152a:	6022      	str	r2, [r4, #0]
 801152c:	d504      	bpl.n	8011538 <__sflush_r+0x78>
 801152e:	1c42      	adds	r2, r0, #1
 8011530:	d101      	bne.n	8011536 <__sflush_r+0x76>
 8011532:	682b      	ldr	r3, [r5, #0]
 8011534:	b903      	cbnz	r3, 8011538 <__sflush_r+0x78>
 8011536:	6560      	str	r0, [r4, #84]	@ 0x54
 8011538:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801153a:	602f      	str	r7, [r5, #0]
 801153c:	b1b9      	cbz	r1, 801156e <__sflush_r+0xae>
 801153e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011542:	4299      	cmp	r1, r3
 8011544:	d002      	beq.n	801154c <__sflush_r+0x8c>
 8011546:	4628      	mov	r0, r5
 8011548:	f7ff f9fe 	bl	8010948 <_free_r>
 801154c:	2300      	movs	r3, #0
 801154e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011550:	e00d      	b.n	801156e <__sflush_r+0xae>
 8011552:	2301      	movs	r3, #1
 8011554:	4628      	mov	r0, r5
 8011556:	47b0      	blx	r6
 8011558:	4602      	mov	r2, r0
 801155a:	1c50      	adds	r0, r2, #1
 801155c:	d1c9      	bne.n	80114f2 <__sflush_r+0x32>
 801155e:	682b      	ldr	r3, [r5, #0]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d0c6      	beq.n	80114f2 <__sflush_r+0x32>
 8011564:	2b1d      	cmp	r3, #29
 8011566:	d001      	beq.n	801156c <__sflush_r+0xac>
 8011568:	2b16      	cmp	r3, #22
 801156a:	d11e      	bne.n	80115aa <__sflush_r+0xea>
 801156c:	602f      	str	r7, [r5, #0]
 801156e:	2000      	movs	r0, #0
 8011570:	e022      	b.n	80115b8 <__sflush_r+0xf8>
 8011572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011576:	b21b      	sxth	r3, r3
 8011578:	e01b      	b.n	80115b2 <__sflush_r+0xf2>
 801157a:	690f      	ldr	r7, [r1, #16]
 801157c:	2f00      	cmp	r7, #0
 801157e:	d0f6      	beq.n	801156e <__sflush_r+0xae>
 8011580:	0793      	lsls	r3, r2, #30
 8011582:	680e      	ldr	r6, [r1, #0]
 8011584:	bf08      	it	eq
 8011586:	694b      	ldreq	r3, [r1, #20]
 8011588:	600f      	str	r7, [r1, #0]
 801158a:	bf18      	it	ne
 801158c:	2300      	movne	r3, #0
 801158e:	eba6 0807 	sub.w	r8, r6, r7
 8011592:	608b      	str	r3, [r1, #8]
 8011594:	f1b8 0f00 	cmp.w	r8, #0
 8011598:	dde9      	ble.n	801156e <__sflush_r+0xae>
 801159a:	6a21      	ldr	r1, [r4, #32]
 801159c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801159e:	4643      	mov	r3, r8
 80115a0:	463a      	mov	r2, r7
 80115a2:	4628      	mov	r0, r5
 80115a4:	47b0      	blx	r6
 80115a6:	2800      	cmp	r0, #0
 80115a8:	dc08      	bgt.n	80115bc <__sflush_r+0xfc>
 80115aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115b2:	81a3      	strh	r3, [r4, #12]
 80115b4:	f04f 30ff 	mov.w	r0, #4294967295
 80115b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115bc:	4407      	add	r7, r0
 80115be:	eba8 0800 	sub.w	r8, r8, r0
 80115c2:	e7e7      	b.n	8011594 <__sflush_r+0xd4>
 80115c4:	20400001 	.word	0x20400001

080115c8 <_fflush_r>:
 80115c8:	b538      	push	{r3, r4, r5, lr}
 80115ca:	690b      	ldr	r3, [r1, #16]
 80115cc:	4605      	mov	r5, r0
 80115ce:	460c      	mov	r4, r1
 80115d0:	b913      	cbnz	r3, 80115d8 <_fflush_r+0x10>
 80115d2:	2500      	movs	r5, #0
 80115d4:	4628      	mov	r0, r5
 80115d6:	bd38      	pop	{r3, r4, r5, pc}
 80115d8:	b118      	cbz	r0, 80115e2 <_fflush_r+0x1a>
 80115da:	6a03      	ldr	r3, [r0, #32]
 80115dc:	b90b      	cbnz	r3, 80115e2 <_fflush_r+0x1a>
 80115de:	f7fe f94b 	bl	800f878 <__sinit>
 80115e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d0f3      	beq.n	80115d2 <_fflush_r+0xa>
 80115ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80115ec:	07d0      	lsls	r0, r2, #31
 80115ee:	d404      	bmi.n	80115fa <_fflush_r+0x32>
 80115f0:	0599      	lsls	r1, r3, #22
 80115f2:	d402      	bmi.n	80115fa <_fflush_r+0x32>
 80115f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115f6:	f7fe fb4a 	bl	800fc8e <__retarget_lock_acquire_recursive>
 80115fa:	4628      	mov	r0, r5
 80115fc:	4621      	mov	r1, r4
 80115fe:	f7ff ff5f 	bl	80114c0 <__sflush_r>
 8011602:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011604:	07da      	lsls	r2, r3, #31
 8011606:	4605      	mov	r5, r0
 8011608:	d4e4      	bmi.n	80115d4 <_fflush_r+0xc>
 801160a:	89a3      	ldrh	r3, [r4, #12]
 801160c:	059b      	lsls	r3, r3, #22
 801160e:	d4e1      	bmi.n	80115d4 <_fflush_r+0xc>
 8011610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011612:	f7fe fb3d 	bl	800fc90 <__retarget_lock_release_recursive>
 8011616:	e7dd      	b.n	80115d4 <_fflush_r+0xc>

08011618 <__swhatbuf_r>:
 8011618:	b570      	push	{r4, r5, r6, lr}
 801161a:	460c      	mov	r4, r1
 801161c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011620:	2900      	cmp	r1, #0
 8011622:	b096      	sub	sp, #88	@ 0x58
 8011624:	4615      	mov	r5, r2
 8011626:	461e      	mov	r6, r3
 8011628:	da0d      	bge.n	8011646 <__swhatbuf_r+0x2e>
 801162a:	89a3      	ldrh	r3, [r4, #12]
 801162c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011630:	f04f 0100 	mov.w	r1, #0
 8011634:	bf14      	ite	ne
 8011636:	2340      	movne	r3, #64	@ 0x40
 8011638:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801163c:	2000      	movs	r0, #0
 801163e:	6031      	str	r1, [r6, #0]
 8011640:	602b      	str	r3, [r5, #0]
 8011642:	b016      	add	sp, #88	@ 0x58
 8011644:	bd70      	pop	{r4, r5, r6, pc}
 8011646:	466a      	mov	r2, sp
 8011648:	f000 f848 	bl	80116dc <_fstat_r>
 801164c:	2800      	cmp	r0, #0
 801164e:	dbec      	blt.n	801162a <__swhatbuf_r+0x12>
 8011650:	9901      	ldr	r1, [sp, #4]
 8011652:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011656:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801165a:	4259      	negs	r1, r3
 801165c:	4159      	adcs	r1, r3
 801165e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011662:	e7eb      	b.n	801163c <__swhatbuf_r+0x24>

08011664 <__smakebuf_r>:
 8011664:	898b      	ldrh	r3, [r1, #12]
 8011666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011668:	079d      	lsls	r5, r3, #30
 801166a:	4606      	mov	r6, r0
 801166c:	460c      	mov	r4, r1
 801166e:	d507      	bpl.n	8011680 <__smakebuf_r+0x1c>
 8011670:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011674:	6023      	str	r3, [r4, #0]
 8011676:	6123      	str	r3, [r4, #16]
 8011678:	2301      	movs	r3, #1
 801167a:	6163      	str	r3, [r4, #20]
 801167c:	b003      	add	sp, #12
 801167e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011680:	ab01      	add	r3, sp, #4
 8011682:	466a      	mov	r2, sp
 8011684:	f7ff ffc8 	bl	8011618 <__swhatbuf_r>
 8011688:	9f00      	ldr	r7, [sp, #0]
 801168a:	4605      	mov	r5, r0
 801168c:	4639      	mov	r1, r7
 801168e:	4630      	mov	r0, r6
 8011690:	f7ff f9ce 	bl	8010a30 <_malloc_r>
 8011694:	b948      	cbnz	r0, 80116aa <__smakebuf_r+0x46>
 8011696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801169a:	059a      	lsls	r2, r3, #22
 801169c:	d4ee      	bmi.n	801167c <__smakebuf_r+0x18>
 801169e:	f023 0303 	bic.w	r3, r3, #3
 80116a2:	f043 0302 	orr.w	r3, r3, #2
 80116a6:	81a3      	strh	r3, [r4, #12]
 80116a8:	e7e2      	b.n	8011670 <__smakebuf_r+0xc>
 80116aa:	89a3      	ldrh	r3, [r4, #12]
 80116ac:	6020      	str	r0, [r4, #0]
 80116ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116b2:	81a3      	strh	r3, [r4, #12]
 80116b4:	9b01      	ldr	r3, [sp, #4]
 80116b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80116ba:	b15b      	cbz	r3, 80116d4 <__smakebuf_r+0x70>
 80116bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116c0:	4630      	mov	r0, r6
 80116c2:	f000 f81d 	bl	8011700 <_isatty_r>
 80116c6:	b128      	cbz	r0, 80116d4 <__smakebuf_r+0x70>
 80116c8:	89a3      	ldrh	r3, [r4, #12]
 80116ca:	f023 0303 	bic.w	r3, r3, #3
 80116ce:	f043 0301 	orr.w	r3, r3, #1
 80116d2:	81a3      	strh	r3, [r4, #12]
 80116d4:	89a3      	ldrh	r3, [r4, #12]
 80116d6:	431d      	orrs	r5, r3
 80116d8:	81a5      	strh	r5, [r4, #12]
 80116da:	e7cf      	b.n	801167c <__smakebuf_r+0x18>

080116dc <_fstat_r>:
 80116dc:	b538      	push	{r3, r4, r5, lr}
 80116de:	4d07      	ldr	r5, [pc, #28]	@ (80116fc <_fstat_r+0x20>)
 80116e0:	2300      	movs	r3, #0
 80116e2:	4604      	mov	r4, r0
 80116e4:	4608      	mov	r0, r1
 80116e6:	4611      	mov	r1, r2
 80116e8:	602b      	str	r3, [r5, #0]
 80116ea:	f7f7 fcb1 	bl	8009050 <_fstat>
 80116ee:	1c43      	adds	r3, r0, #1
 80116f0:	d102      	bne.n	80116f8 <_fstat_r+0x1c>
 80116f2:	682b      	ldr	r3, [r5, #0]
 80116f4:	b103      	cbz	r3, 80116f8 <_fstat_r+0x1c>
 80116f6:	6023      	str	r3, [r4, #0]
 80116f8:	bd38      	pop	{r3, r4, r5, pc}
 80116fa:	bf00      	nop
 80116fc:	20000b7c 	.word	0x20000b7c

08011700 <_isatty_r>:
 8011700:	b538      	push	{r3, r4, r5, lr}
 8011702:	4d06      	ldr	r5, [pc, #24]	@ (801171c <_isatty_r+0x1c>)
 8011704:	2300      	movs	r3, #0
 8011706:	4604      	mov	r4, r0
 8011708:	4608      	mov	r0, r1
 801170a:	602b      	str	r3, [r5, #0]
 801170c:	f7f7 fcb0 	bl	8009070 <_isatty>
 8011710:	1c43      	adds	r3, r0, #1
 8011712:	d102      	bne.n	801171a <_isatty_r+0x1a>
 8011714:	682b      	ldr	r3, [r5, #0]
 8011716:	b103      	cbz	r3, 801171a <_isatty_r+0x1a>
 8011718:	6023      	str	r3, [r4, #0]
 801171a:	bd38      	pop	{r3, r4, r5, pc}
 801171c:	20000b7c 	.word	0x20000b7c

08011720 <_sbrk_r>:
 8011720:	b538      	push	{r3, r4, r5, lr}
 8011722:	4d06      	ldr	r5, [pc, #24]	@ (801173c <_sbrk_r+0x1c>)
 8011724:	2300      	movs	r3, #0
 8011726:	4604      	mov	r4, r0
 8011728:	4608      	mov	r0, r1
 801172a:	602b      	str	r3, [r5, #0]
 801172c:	f7f7 fcb8 	bl	80090a0 <_sbrk>
 8011730:	1c43      	adds	r3, r0, #1
 8011732:	d102      	bne.n	801173a <_sbrk_r+0x1a>
 8011734:	682b      	ldr	r3, [r5, #0]
 8011736:	b103      	cbz	r3, 801173a <_sbrk_r+0x1a>
 8011738:	6023      	str	r3, [r4, #0]
 801173a:	bd38      	pop	{r3, r4, r5, pc}
 801173c:	20000b7c 	.word	0x20000b7c

08011740 <memcpy>:
 8011740:	440a      	add	r2, r1
 8011742:	4291      	cmp	r1, r2
 8011744:	f100 33ff 	add.w	r3, r0, #4294967295
 8011748:	d100      	bne.n	801174c <memcpy+0xc>
 801174a:	4770      	bx	lr
 801174c:	b510      	push	{r4, lr}
 801174e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011756:	4291      	cmp	r1, r2
 8011758:	d1f9      	bne.n	801174e <memcpy+0xe>
 801175a:	bd10      	pop	{r4, pc}

0801175c <__assert_func>:
 801175c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801175e:	4614      	mov	r4, r2
 8011760:	461a      	mov	r2, r3
 8011762:	4b09      	ldr	r3, [pc, #36]	@ (8011788 <__assert_func+0x2c>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	4605      	mov	r5, r0
 8011768:	68d8      	ldr	r0, [r3, #12]
 801176a:	b14c      	cbz	r4, 8011780 <__assert_func+0x24>
 801176c:	4b07      	ldr	r3, [pc, #28]	@ (801178c <__assert_func+0x30>)
 801176e:	9100      	str	r1, [sp, #0]
 8011770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011774:	4906      	ldr	r1, [pc, #24]	@ (8011790 <__assert_func+0x34>)
 8011776:	462b      	mov	r3, r5
 8011778:	f000 f842 	bl	8011800 <fiprintf>
 801177c:	f000 f852 	bl	8011824 <abort>
 8011780:	4b04      	ldr	r3, [pc, #16]	@ (8011794 <__assert_func+0x38>)
 8011782:	461c      	mov	r4, r3
 8011784:	e7f3      	b.n	801176e <__assert_func+0x12>
 8011786:	bf00      	nop
 8011788:	200000ec 	.word	0x200000ec
 801178c:	08013a31 	.word	0x08013a31
 8011790:	08013a3e 	.word	0x08013a3e
 8011794:	08013a6c 	.word	0x08013a6c

08011798 <_calloc_r>:
 8011798:	b570      	push	{r4, r5, r6, lr}
 801179a:	fba1 5402 	umull	r5, r4, r1, r2
 801179e:	b934      	cbnz	r4, 80117ae <_calloc_r+0x16>
 80117a0:	4629      	mov	r1, r5
 80117a2:	f7ff f945 	bl	8010a30 <_malloc_r>
 80117a6:	4606      	mov	r6, r0
 80117a8:	b928      	cbnz	r0, 80117b6 <_calloc_r+0x1e>
 80117aa:	4630      	mov	r0, r6
 80117ac:	bd70      	pop	{r4, r5, r6, pc}
 80117ae:	220c      	movs	r2, #12
 80117b0:	6002      	str	r2, [r0, #0]
 80117b2:	2600      	movs	r6, #0
 80117b4:	e7f9      	b.n	80117aa <_calloc_r+0x12>
 80117b6:	462a      	mov	r2, r5
 80117b8:	4621      	mov	r1, r4
 80117ba:	f7fe f9eb 	bl	800fb94 <memset>
 80117be:	e7f4      	b.n	80117aa <_calloc_r+0x12>

080117c0 <__ascii_mbtowc>:
 80117c0:	b082      	sub	sp, #8
 80117c2:	b901      	cbnz	r1, 80117c6 <__ascii_mbtowc+0x6>
 80117c4:	a901      	add	r1, sp, #4
 80117c6:	b142      	cbz	r2, 80117da <__ascii_mbtowc+0x1a>
 80117c8:	b14b      	cbz	r3, 80117de <__ascii_mbtowc+0x1e>
 80117ca:	7813      	ldrb	r3, [r2, #0]
 80117cc:	600b      	str	r3, [r1, #0]
 80117ce:	7812      	ldrb	r2, [r2, #0]
 80117d0:	1e10      	subs	r0, r2, #0
 80117d2:	bf18      	it	ne
 80117d4:	2001      	movne	r0, #1
 80117d6:	b002      	add	sp, #8
 80117d8:	4770      	bx	lr
 80117da:	4610      	mov	r0, r2
 80117dc:	e7fb      	b.n	80117d6 <__ascii_mbtowc+0x16>
 80117de:	f06f 0001 	mvn.w	r0, #1
 80117e2:	e7f8      	b.n	80117d6 <__ascii_mbtowc+0x16>

080117e4 <__ascii_wctomb>:
 80117e4:	4603      	mov	r3, r0
 80117e6:	4608      	mov	r0, r1
 80117e8:	b141      	cbz	r1, 80117fc <__ascii_wctomb+0x18>
 80117ea:	2aff      	cmp	r2, #255	@ 0xff
 80117ec:	d904      	bls.n	80117f8 <__ascii_wctomb+0x14>
 80117ee:	228a      	movs	r2, #138	@ 0x8a
 80117f0:	601a      	str	r2, [r3, #0]
 80117f2:	f04f 30ff 	mov.w	r0, #4294967295
 80117f6:	4770      	bx	lr
 80117f8:	700a      	strb	r2, [r1, #0]
 80117fa:	2001      	movs	r0, #1
 80117fc:	4770      	bx	lr
	...

08011800 <fiprintf>:
 8011800:	b40e      	push	{r1, r2, r3}
 8011802:	b503      	push	{r0, r1, lr}
 8011804:	4601      	mov	r1, r0
 8011806:	ab03      	add	r3, sp, #12
 8011808:	4805      	ldr	r0, [pc, #20]	@ (8011820 <fiprintf+0x20>)
 801180a:	f853 2b04 	ldr.w	r2, [r3], #4
 801180e:	6800      	ldr	r0, [r0, #0]
 8011810:	9301      	str	r3, [sp, #4]
 8011812:	f7ff fd3d 	bl	8011290 <_vfiprintf_r>
 8011816:	b002      	add	sp, #8
 8011818:	f85d eb04 	ldr.w	lr, [sp], #4
 801181c:	b003      	add	sp, #12
 801181e:	4770      	bx	lr
 8011820:	200000ec 	.word	0x200000ec

08011824 <abort>:
 8011824:	b508      	push	{r3, lr}
 8011826:	2006      	movs	r0, #6
 8011828:	f000 f82c 	bl	8011884 <raise>
 801182c:	2001      	movs	r0, #1
 801182e:	f7f7 fbbf 	bl	8008fb0 <_exit>

08011832 <_raise_r>:
 8011832:	291f      	cmp	r1, #31
 8011834:	b538      	push	{r3, r4, r5, lr}
 8011836:	4605      	mov	r5, r0
 8011838:	460c      	mov	r4, r1
 801183a:	d904      	bls.n	8011846 <_raise_r+0x14>
 801183c:	2316      	movs	r3, #22
 801183e:	6003      	str	r3, [r0, #0]
 8011840:	f04f 30ff 	mov.w	r0, #4294967295
 8011844:	bd38      	pop	{r3, r4, r5, pc}
 8011846:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011848:	b112      	cbz	r2, 8011850 <_raise_r+0x1e>
 801184a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801184e:	b94b      	cbnz	r3, 8011864 <_raise_r+0x32>
 8011850:	4628      	mov	r0, r5
 8011852:	f000 f831 	bl	80118b8 <_getpid_r>
 8011856:	4622      	mov	r2, r4
 8011858:	4601      	mov	r1, r0
 801185a:	4628      	mov	r0, r5
 801185c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011860:	f000 b818 	b.w	8011894 <_kill_r>
 8011864:	2b01      	cmp	r3, #1
 8011866:	d00a      	beq.n	801187e <_raise_r+0x4c>
 8011868:	1c59      	adds	r1, r3, #1
 801186a:	d103      	bne.n	8011874 <_raise_r+0x42>
 801186c:	2316      	movs	r3, #22
 801186e:	6003      	str	r3, [r0, #0]
 8011870:	2001      	movs	r0, #1
 8011872:	e7e7      	b.n	8011844 <_raise_r+0x12>
 8011874:	2100      	movs	r1, #0
 8011876:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801187a:	4620      	mov	r0, r4
 801187c:	4798      	blx	r3
 801187e:	2000      	movs	r0, #0
 8011880:	e7e0      	b.n	8011844 <_raise_r+0x12>
	...

08011884 <raise>:
 8011884:	4b02      	ldr	r3, [pc, #8]	@ (8011890 <raise+0xc>)
 8011886:	4601      	mov	r1, r0
 8011888:	6818      	ldr	r0, [r3, #0]
 801188a:	f7ff bfd2 	b.w	8011832 <_raise_r>
 801188e:	bf00      	nop
 8011890:	200000ec 	.word	0x200000ec

08011894 <_kill_r>:
 8011894:	b538      	push	{r3, r4, r5, lr}
 8011896:	4d07      	ldr	r5, [pc, #28]	@ (80118b4 <_kill_r+0x20>)
 8011898:	2300      	movs	r3, #0
 801189a:	4604      	mov	r4, r0
 801189c:	4608      	mov	r0, r1
 801189e:	4611      	mov	r1, r2
 80118a0:	602b      	str	r3, [r5, #0]
 80118a2:	f7f7 fb75 	bl	8008f90 <_kill>
 80118a6:	1c43      	adds	r3, r0, #1
 80118a8:	d102      	bne.n	80118b0 <_kill_r+0x1c>
 80118aa:	682b      	ldr	r3, [r5, #0]
 80118ac:	b103      	cbz	r3, 80118b0 <_kill_r+0x1c>
 80118ae:	6023      	str	r3, [r4, #0]
 80118b0:	bd38      	pop	{r3, r4, r5, pc}
 80118b2:	bf00      	nop
 80118b4:	20000b7c 	.word	0x20000b7c

080118b8 <_getpid_r>:
 80118b8:	f7f7 bb62 	b.w	8008f80 <_getpid>

080118bc <asin>:
 80118bc:	b538      	push	{r3, r4, r5, lr}
 80118be:	ed2d 8b02 	vpush	{d8}
 80118c2:	ec55 4b10 	vmov	r4, r5, d0
 80118c6:	f000 f90f 	bl	8011ae8 <__ieee754_asin>
 80118ca:	4622      	mov	r2, r4
 80118cc:	462b      	mov	r3, r5
 80118ce:	4620      	mov	r0, r4
 80118d0:	4629      	mov	r1, r5
 80118d2:	eeb0 8a40 	vmov.f32	s16, s0
 80118d6:	eef0 8a60 	vmov.f32	s17, s1
 80118da:	f7ef f927 	bl	8000b2c <__aeabi_dcmpun>
 80118de:	b9a8      	cbnz	r0, 801190c <asin+0x50>
 80118e0:	ec45 4b10 	vmov	d0, r4, r5
 80118e4:	f000 f820 	bl	8011928 <fabs>
 80118e8:	4b0c      	ldr	r3, [pc, #48]	@ (801191c <asin+0x60>)
 80118ea:	ec51 0b10 	vmov	r0, r1, d0
 80118ee:	2200      	movs	r2, #0
 80118f0:	f7ef f912 	bl	8000b18 <__aeabi_dcmpgt>
 80118f4:	b150      	cbz	r0, 801190c <asin+0x50>
 80118f6:	f7fe f99f 	bl	800fc38 <__errno>
 80118fa:	ecbd 8b02 	vpop	{d8}
 80118fe:	2321      	movs	r3, #33	@ 0x21
 8011900:	6003      	str	r3, [r0, #0]
 8011902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011906:	4806      	ldr	r0, [pc, #24]	@ (8011920 <asin+0x64>)
 8011908:	f000 b816 	b.w	8011938 <nan>
 801190c:	eeb0 0a48 	vmov.f32	s0, s16
 8011910:	eef0 0a68 	vmov.f32	s1, s17
 8011914:	ecbd 8b02 	vpop	{d8}
 8011918:	bd38      	pop	{r3, r4, r5, pc}
 801191a:	bf00      	nop
 801191c:	3ff00000 	.word	0x3ff00000
 8011920:	08013a6c 	.word	0x08013a6c

08011924 <atan2>:
 8011924:	f000 bae4 	b.w	8011ef0 <__ieee754_atan2>

08011928 <fabs>:
 8011928:	ec51 0b10 	vmov	r0, r1, d0
 801192c:	4602      	mov	r2, r0
 801192e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011932:	ec43 2b10 	vmov	d0, r2, r3
 8011936:	4770      	bx	lr

08011938 <nan>:
 8011938:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011940 <nan+0x8>
 801193c:	4770      	bx	lr
 801193e:	bf00      	nop
 8011940:	00000000 	.word	0x00000000
 8011944:	7ff80000 	.word	0x7ff80000

08011948 <fmax>:
 8011948:	b508      	push	{r3, lr}
 801194a:	ed2d 8b04 	vpush	{d8-d9}
 801194e:	eeb0 8a40 	vmov.f32	s16, s0
 8011952:	eef0 8a60 	vmov.f32	s17, s1
 8011956:	eeb0 9a41 	vmov.f32	s18, s2
 801195a:	eef0 9a61 	vmov.f32	s19, s3
 801195e:	f000 f847 	bl	80119f0 <__fpclassifyd>
 8011962:	b950      	cbnz	r0, 801197a <fmax+0x32>
 8011964:	eeb0 8a49 	vmov.f32	s16, s18
 8011968:	eef0 8a69 	vmov.f32	s17, s19
 801196c:	eeb0 0a48 	vmov.f32	s0, s16
 8011970:	eef0 0a68 	vmov.f32	s1, s17
 8011974:	ecbd 8b04 	vpop	{d8-d9}
 8011978:	bd08      	pop	{r3, pc}
 801197a:	eeb0 0a49 	vmov.f32	s0, s18
 801197e:	eef0 0a69 	vmov.f32	s1, s19
 8011982:	f000 f835 	bl	80119f0 <__fpclassifyd>
 8011986:	2800      	cmp	r0, #0
 8011988:	d0f0      	beq.n	801196c <fmax+0x24>
 801198a:	ec53 2b19 	vmov	r2, r3, d9
 801198e:	ec51 0b18 	vmov	r0, r1, d8
 8011992:	f7ef f8c1 	bl	8000b18 <__aeabi_dcmpgt>
 8011996:	2800      	cmp	r0, #0
 8011998:	d0e4      	beq.n	8011964 <fmax+0x1c>
 801199a:	e7e7      	b.n	801196c <fmax+0x24>

0801199c <fmin>:
 801199c:	b508      	push	{r3, lr}
 801199e:	ed2d 8b04 	vpush	{d8-d9}
 80119a2:	eeb0 8a40 	vmov.f32	s16, s0
 80119a6:	eef0 8a60 	vmov.f32	s17, s1
 80119aa:	eeb0 9a41 	vmov.f32	s18, s2
 80119ae:	eef0 9a61 	vmov.f32	s19, s3
 80119b2:	f000 f81d 	bl	80119f0 <__fpclassifyd>
 80119b6:	b950      	cbnz	r0, 80119ce <fmin+0x32>
 80119b8:	eeb0 8a49 	vmov.f32	s16, s18
 80119bc:	eef0 8a69 	vmov.f32	s17, s19
 80119c0:	eeb0 0a48 	vmov.f32	s0, s16
 80119c4:	eef0 0a68 	vmov.f32	s1, s17
 80119c8:	ecbd 8b04 	vpop	{d8-d9}
 80119cc:	bd08      	pop	{r3, pc}
 80119ce:	eeb0 0a49 	vmov.f32	s0, s18
 80119d2:	eef0 0a69 	vmov.f32	s1, s19
 80119d6:	f000 f80b 	bl	80119f0 <__fpclassifyd>
 80119da:	2800      	cmp	r0, #0
 80119dc:	d0f0      	beq.n	80119c0 <fmin+0x24>
 80119de:	ec53 2b19 	vmov	r2, r3, d9
 80119e2:	ec51 0b18 	vmov	r0, r1, d8
 80119e6:	f7ef f879 	bl	8000adc <__aeabi_dcmplt>
 80119ea:	2800      	cmp	r0, #0
 80119ec:	d0e4      	beq.n	80119b8 <fmin+0x1c>
 80119ee:	e7e7      	b.n	80119c0 <fmin+0x24>

080119f0 <__fpclassifyd>:
 80119f0:	ec51 0b10 	vmov	r0, r1, d0
 80119f4:	460b      	mov	r3, r1
 80119f6:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 80119fa:	b510      	push	{r4, lr}
 80119fc:	d104      	bne.n	8011a08 <__fpclassifyd+0x18>
 80119fe:	2800      	cmp	r0, #0
 8011a00:	bf0c      	ite	eq
 8011a02:	2002      	moveq	r0, #2
 8011a04:	2003      	movne	r0, #3
 8011a06:	bd10      	pop	{r4, pc}
 8011a08:	4a09      	ldr	r2, [pc, #36]	@ (8011a30 <__fpclassifyd+0x40>)
 8011a0a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8011a0e:	4294      	cmp	r4, r2
 8011a10:	d908      	bls.n	8011a24 <__fpclassifyd+0x34>
 8011a12:	4a08      	ldr	r2, [pc, #32]	@ (8011a34 <__fpclassifyd+0x44>)
 8011a14:	4213      	tst	r3, r2
 8011a16:	d007      	beq.n	8011a28 <__fpclassifyd+0x38>
 8011a18:	4291      	cmp	r1, r2
 8011a1a:	d107      	bne.n	8011a2c <__fpclassifyd+0x3c>
 8011a1c:	fab0 f080 	clz	r0, r0
 8011a20:	0940      	lsrs	r0, r0, #5
 8011a22:	e7f0      	b.n	8011a06 <__fpclassifyd+0x16>
 8011a24:	2004      	movs	r0, #4
 8011a26:	e7ee      	b.n	8011a06 <__fpclassifyd+0x16>
 8011a28:	2003      	movs	r0, #3
 8011a2a:	e7ec      	b.n	8011a06 <__fpclassifyd+0x16>
 8011a2c:	2000      	movs	r0, #0
 8011a2e:	e7ea      	b.n	8011a06 <__fpclassifyd+0x16>
 8011a30:	7fdfffff 	.word	0x7fdfffff
 8011a34:	7ff00000 	.word	0x7ff00000

08011a38 <fmaxf>:
 8011a38:	b508      	push	{r3, lr}
 8011a3a:	ed2d 8b02 	vpush	{d8}
 8011a3e:	eeb0 8a40 	vmov.f32	s16, s0
 8011a42:	eef0 8a60 	vmov.f32	s17, s1
 8011a46:	f000 f831 	bl	8011aac <__fpclassifyf>
 8011a4a:	b930      	cbnz	r0, 8011a5a <fmaxf+0x22>
 8011a4c:	eeb0 8a68 	vmov.f32	s16, s17
 8011a50:	eeb0 0a48 	vmov.f32	s0, s16
 8011a54:	ecbd 8b02 	vpop	{d8}
 8011a58:	bd08      	pop	{r3, pc}
 8011a5a:	eeb0 0a68 	vmov.f32	s0, s17
 8011a5e:	f000 f825 	bl	8011aac <__fpclassifyf>
 8011a62:	2800      	cmp	r0, #0
 8011a64:	d0f4      	beq.n	8011a50 <fmaxf+0x18>
 8011a66:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a6e:	dded      	ble.n	8011a4c <fmaxf+0x14>
 8011a70:	e7ee      	b.n	8011a50 <fmaxf+0x18>

08011a72 <fminf>:
 8011a72:	b508      	push	{r3, lr}
 8011a74:	ed2d 8b02 	vpush	{d8}
 8011a78:	eeb0 8a40 	vmov.f32	s16, s0
 8011a7c:	eef0 8a60 	vmov.f32	s17, s1
 8011a80:	f000 f814 	bl	8011aac <__fpclassifyf>
 8011a84:	b930      	cbnz	r0, 8011a94 <fminf+0x22>
 8011a86:	eeb0 8a68 	vmov.f32	s16, s17
 8011a8a:	eeb0 0a48 	vmov.f32	s0, s16
 8011a8e:	ecbd 8b02 	vpop	{d8}
 8011a92:	bd08      	pop	{r3, pc}
 8011a94:	eeb0 0a68 	vmov.f32	s0, s17
 8011a98:	f000 f808 	bl	8011aac <__fpclassifyf>
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	d0f4      	beq.n	8011a8a <fminf+0x18>
 8011aa0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aa8:	d5ed      	bpl.n	8011a86 <fminf+0x14>
 8011aaa:	e7ee      	b.n	8011a8a <fminf+0x18>

08011aac <__fpclassifyf>:
 8011aac:	ee10 3a10 	vmov	r3, s0
 8011ab0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8011ab4:	d00d      	beq.n	8011ad2 <__fpclassifyf+0x26>
 8011ab6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8011aba:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8011abe:	d30a      	bcc.n	8011ad6 <__fpclassifyf+0x2a>
 8011ac0:	4b07      	ldr	r3, [pc, #28]	@ (8011ae0 <__fpclassifyf+0x34>)
 8011ac2:	1e42      	subs	r2, r0, #1
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d908      	bls.n	8011ada <__fpclassifyf+0x2e>
 8011ac8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8011acc:	4258      	negs	r0, r3
 8011ace:	4158      	adcs	r0, r3
 8011ad0:	4770      	bx	lr
 8011ad2:	2002      	movs	r0, #2
 8011ad4:	4770      	bx	lr
 8011ad6:	2004      	movs	r0, #4
 8011ad8:	4770      	bx	lr
 8011ada:	2003      	movs	r0, #3
 8011adc:	4770      	bx	lr
 8011ade:	bf00      	nop
 8011ae0:	007ffffe 	.word	0x007ffffe
 8011ae4:	00000000 	.word	0x00000000

08011ae8 <__ieee754_asin>:
 8011ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aec:	ec55 4b10 	vmov	r4, r5, d0
 8011af0:	4bc7      	ldr	r3, [pc, #796]	@ (8011e10 <__ieee754_asin+0x328>)
 8011af2:	b087      	sub	sp, #28
 8011af4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8011af8:	429e      	cmp	r6, r3
 8011afa:	9501      	str	r5, [sp, #4]
 8011afc:	d92d      	bls.n	8011b5a <__ieee754_asin+0x72>
 8011afe:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8011b02:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8011b06:	4326      	orrs	r6, r4
 8011b08:	d116      	bne.n	8011b38 <__ieee754_asin+0x50>
 8011b0a:	a3a7      	add	r3, pc, #668	@ (adr r3, 8011da8 <__ieee754_asin+0x2c0>)
 8011b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b10:	4620      	mov	r0, r4
 8011b12:	4629      	mov	r1, r5
 8011b14:	f7ee fd70 	bl	80005f8 <__aeabi_dmul>
 8011b18:	a3a5      	add	r3, pc, #660	@ (adr r3, 8011db0 <__ieee754_asin+0x2c8>)
 8011b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b1e:	4606      	mov	r6, r0
 8011b20:	460f      	mov	r7, r1
 8011b22:	4620      	mov	r0, r4
 8011b24:	4629      	mov	r1, r5
 8011b26:	f7ee fd67 	bl	80005f8 <__aeabi_dmul>
 8011b2a:	4602      	mov	r2, r0
 8011b2c:	460b      	mov	r3, r1
 8011b2e:	4630      	mov	r0, r6
 8011b30:	4639      	mov	r1, r7
 8011b32:	f7ee fbab 	bl	800028c <__adddf3>
 8011b36:	e009      	b.n	8011b4c <__ieee754_asin+0x64>
 8011b38:	4622      	mov	r2, r4
 8011b3a:	462b      	mov	r3, r5
 8011b3c:	4620      	mov	r0, r4
 8011b3e:	4629      	mov	r1, r5
 8011b40:	f7ee fba2 	bl	8000288 <__aeabi_dsub>
 8011b44:	4602      	mov	r2, r0
 8011b46:	460b      	mov	r3, r1
 8011b48:	f7ee fe80 	bl	800084c <__aeabi_ddiv>
 8011b4c:	4604      	mov	r4, r0
 8011b4e:	460d      	mov	r5, r1
 8011b50:	ec45 4b10 	vmov	d0, r4, r5
 8011b54:	b007      	add	sp, #28
 8011b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b5a:	4bae      	ldr	r3, [pc, #696]	@ (8011e14 <__ieee754_asin+0x32c>)
 8011b5c:	429e      	cmp	r6, r3
 8011b5e:	d810      	bhi.n	8011b82 <__ieee754_asin+0x9a>
 8011b60:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8011b64:	f080 80ad 	bcs.w	8011cc2 <__ieee754_asin+0x1da>
 8011b68:	a393      	add	r3, pc, #588	@ (adr r3, 8011db8 <__ieee754_asin+0x2d0>)
 8011b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6e:	4620      	mov	r0, r4
 8011b70:	4629      	mov	r1, r5
 8011b72:	f7ee fb8b 	bl	800028c <__adddf3>
 8011b76:	4ba8      	ldr	r3, [pc, #672]	@ (8011e18 <__ieee754_asin+0x330>)
 8011b78:	2200      	movs	r2, #0
 8011b7a:	f7ee ffcd 	bl	8000b18 <__aeabi_dcmpgt>
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	d1e6      	bne.n	8011b50 <__ieee754_asin+0x68>
 8011b82:	ec45 4b10 	vmov	d0, r4, r5
 8011b86:	f7ff fecf 	bl	8011928 <fabs>
 8011b8a:	49a3      	ldr	r1, [pc, #652]	@ (8011e18 <__ieee754_asin+0x330>)
 8011b8c:	ec53 2b10 	vmov	r2, r3, d0
 8011b90:	2000      	movs	r0, #0
 8011b92:	f7ee fb79 	bl	8000288 <__aeabi_dsub>
 8011b96:	4ba1      	ldr	r3, [pc, #644]	@ (8011e1c <__ieee754_asin+0x334>)
 8011b98:	2200      	movs	r2, #0
 8011b9a:	f7ee fd2d 	bl	80005f8 <__aeabi_dmul>
 8011b9e:	a388      	add	r3, pc, #544	@ (adr r3, 8011dc0 <__ieee754_asin+0x2d8>)
 8011ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba4:	4604      	mov	r4, r0
 8011ba6:	460d      	mov	r5, r1
 8011ba8:	f7ee fd26 	bl	80005f8 <__aeabi_dmul>
 8011bac:	a386      	add	r3, pc, #536	@ (adr r3, 8011dc8 <__ieee754_asin+0x2e0>)
 8011bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb2:	f7ee fb6b 	bl	800028c <__adddf3>
 8011bb6:	4622      	mov	r2, r4
 8011bb8:	462b      	mov	r3, r5
 8011bba:	f7ee fd1d 	bl	80005f8 <__aeabi_dmul>
 8011bbe:	a384      	add	r3, pc, #528	@ (adr r3, 8011dd0 <__ieee754_asin+0x2e8>)
 8011bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc4:	f7ee fb60 	bl	8000288 <__aeabi_dsub>
 8011bc8:	4622      	mov	r2, r4
 8011bca:	462b      	mov	r3, r5
 8011bcc:	f7ee fd14 	bl	80005f8 <__aeabi_dmul>
 8011bd0:	a381      	add	r3, pc, #516	@ (adr r3, 8011dd8 <__ieee754_asin+0x2f0>)
 8011bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd6:	f7ee fb59 	bl	800028c <__adddf3>
 8011bda:	4622      	mov	r2, r4
 8011bdc:	462b      	mov	r3, r5
 8011bde:	f7ee fd0b 	bl	80005f8 <__aeabi_dmul>
 8011be2:	a37f      	add	r3, pc, #508	@ (adr r3, 8011de0 <__ieee754_asin+0x2f8>)
 8011be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be8:	f7ee fb4e 	bl	8000288 <__aeabi_dsub>
 8011bec:	4622      	mov	r2, r4
 8011bee:	462b      	mov	r3, r5
 8011bf0:	f7ee fd02 	bl	80005f8 <__aeabi_dmul>
 8011bf4:	a37c      	add	r3, pc, #496	@ (adr r3, 8011de8 <__ieee754_asin+0x300>)
 8011bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bfa:	f7ee fb47 	bl	800028c <__adddf3>
 8011bfe:	4622      	mov	r2, r4
 8011c00:	462b      	mov	r3, r5
 8011c02:	f7ee fcf9 	bl	80005f8 <__aeabi_dmul>
 8011c06:	a37a      	add	r3, pc, #488	@ (adr r3, 8011df0 <__ieee754_asin+0x308>)
 8011c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c10:	4620      	mov	r0, r4
 8011c12:	4629      	mov	r1, r5
 8011c14:	f7ee fcf0 	bl	80005f8 <__aeabi_dmul>
 8011c18:	a377      	add	r3, pc, #476	@ (adr r3, 8011df8 <__ieee754_asin+0x310>)
 8011c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1e:	f7ee fb33 	bl	8000288 <__aeabi_dsub>
 8011c22:	4622      	mov	r2, r4
 8011c24:	462b      	mov	r3, r5
 8011c26:	f7ee fce7 	bl	80005f8 <__aeabi_dmul>
 8011c2a:	a375      	add	r3, pc, #468	@ (adr r3, 8011e00 <__ieee754_asin+0x318>)
 8011c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c30:	f7ee fb2c 	bl	800028c <__adddf3>
 8011c34:	4622      	mov	r2, r4
 8011c36:	462b      	mov	r3, r5
 8011c38:	f7ee fcde 	bl	80005f8 <__aeabi_dmul>
 8011c3c:	a372      	add	r3, pc, #456	@ (adr r3, 8011e08 <__ieee754_asin+0x320>)
 8011c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c42:	f7ee fb21 	bl	8000288 <__aeabi_dsub>
 8011c46:	4622      	mov	r2, r4
 8011c48:	462b      	mov	r3, r5
 8011c4a:	f7ee fcd5 	bl	80005f8 <__aeabi_dmul>
 8011c4e:	4b72      	ldr	r3, [pc, #456]	@ (8011e18 <__ieee754_asin+0x330>)
 8011c50:	2200      	movs	r2, #0
 8011c52:	f7ee fb1b 	bl	800028c <__adddf3>
 8011c56:	ec45 4b10 	vmov	d0, r4, r5
 8011c5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011c5e:	f000 fba7 	bl	80123b0 <__ieee754_sqrt>
 8011c62:	4b6f      	ldr	r3, [pc, #444]	@ (8011e20 <__ieee754_asin+0x338>)
 8011c64:	429e      	cmp	r6, r3
 8011c66:	ec5b ab10 	vmov	sl, fp, d0
 8011c6a:	f240 80db 	bls.w	8011e24 <__ieee754_asin+0x33c>
 8011c6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c76:	f7ee fde9 	bl	800084c <__aeabi_ddiv>
 8011c7a:	4652      	mov	r2, sl
 8011c7c:	465b      	mov	r3, fp
 8011c7e:	f7ee fcbb 	bl	80005f8 <__aeabi_dmul>
 8011c82:	4652      	mov	r2, sl
 8011c84:	465b      	mov	r3, fp
 8011c86:	f7ee fb01 	bl	800028c <__adddf3>
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	460b      	mov	r3, r1
 8011c8e:	f7ee fafd 	bl	800028c <__adddf3>
 8011c92:	a347      	add	r3, pc, #284	@ (adr r3, 8011db0 <__ieee754_asin+0x2c8>)
 8011c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c98:	f7ee faf6 	bl	8000288 <__aeabi_dsub>
 8011c9c:	4602      	mov	r2, r0
 8011c9e:	460b      	mov	r3, r1
 8011ca0:	a141      	add	r1, pc, #260	@ (adr r1, 8011da8 <__ieee754_asin+0x2c0>)
 8011ca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ca6:	f7ee faef 	bl	8000288 <__aeabi_dsub>
 8011caa:	9b01      	ldr	r3, [sp, #4]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	bfdc      	itt	le
 8011cb0:	4602      	movle	r2, r0
 8011cb2:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	460d      	mov	r5, r1
 8011cba:	bfdc      	itt	le
 8011cbc:	4614      	movle	r4, r2
 8011cbe:	461d      	movle	r5, r3
 8011cc0:	e746      	b.n	8011b50 <__ieee754_asin+0x68>
 8011cc2:	4622      	mov	r2, r4
 8011cc4:	462b      	mov	r3, r5
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	4629      	mov	r1, r5
 8011cca:	f7ee fc95 	bl	80005f8 <__aeabi_dmul>
 8011cce:	a33c      	add	r3, pc, #240	@ (adr r3, 8011dc0 <__ieee754_asin+0x2d8>)
 8011cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd4:	4606      	mov	r6, r0
 8011cd6:	460f      	mov	r7, r1
 8011cd8:	f7ee fc8e 	bl	80005f8 <__aeabi_dmul>
 8011cdc:	a33a      	add	r3, pc, #232	@ (adr r3, 8011dc8 <__ieee754_asin+0x2e0>)
 8011cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce2:	f7ee fad3 	bl	800028c <__adddf3>
 8011ce6:	4632      	mov	r2, r6
 8011ce8:	463b      	mov	r3, r7
 8011cea:	f7ee fc85 	bl	80005f8 <__aeabi_dmul>
 8011cee:	a338      	add	r3, pc, #224	@ (adr r3, 8011dd0 <__ieee754_asin+0x2e8>)
 8011cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf4:	f7ee fac8 	bl	8000288 <__aeabi_dsub>
 8011cf8:	4632      	mov	r2, r6
 8011cfa:	463b      	mov	r3, r7
 8011cfc:	f7ee fc7c 	bl	80005f8 <__aeabi_dmul>
 8011d00:	a335      	add	r3, pc, #212	@ (adr r3, 8011dd8 <__ieee754_asin+0x2f0>)
 8011d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d06:	f7ee fac1 	bl	800028c <__adddf3>
 8011d0a:	4632      	mov	r2, r6
 8011d0c:	463b      	mov	r3, r7
 8011d0e:	f7ee fc73 	bl	80005f8 <__aeabi_dmul>
 8011d12:	a333      	add	r3, pc, #204	@ (adr r3, 8011de0 <__ieee754_asin+0x2f8>)
 8011d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d18:	f7ee fab6 	bl	8000288 <__aeabi_dsub>
 8011d1c:	4632      	mov	r2, r6
 8011d1e:	463b      	mov	r3, r7
 8011d20:	f7ee fc6a 	bl	80005f8 <__aeabi_dmul>
 8011d24:	a330      	add	r3, pc, #192	@ (adr r3, 8011de8 <__ieee754_asin+0x300>)
 8011d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d2a:	f7ee faaf 	bl	800028c <__adddf3>
 8011d2e:	4632      	mov	r2, r6
 8011d30:	463b      	mov	r3, r7
 8011d32:	f7ee fc61 	bl	80005f8 <__aeabi_dmul>
 8011d36:	a32e      	add	r3, pc, #184	@ (adr r3, 8011df0 <__ieee754_asin+0x308>)
 8011d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3c:	4680      	mov	r8, r0
 8011d3e:	4689      	mov	r9, r1
 8011d40:	4630      	mov	r0, r6
 8011d42:	4639      	mov	r1, r7
 8011d44:	f7ee fc58 	bl	80005f8 <__aeabi_dmul>
 8011d48:	a32b      	add	r3, pc, #172	@ (adr r3, 8011df8 <__ieee754_asin+0x310>)
 8011d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d4e:	f7ee fa9b 	bl	8000288 <__aeabi_dsub>
 8011d52:	4632      	mov	r2, r6
 8011d54:	463b      	mov	r3, r7
 8011d56:	f7ee fc4f 	bl	80005f8 <__aeabi_dmul>
 8011d5a:	a329      	add	r3, pc, #164	@ (adr r3, 8011e00 <__ieee754_asin+0x318>)
 8011d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d60:	f7ee fa94 	bl	800028c <__adddf3>
 8011d64:	4632      	mov	r2, r6
 8011d66:	463b      	mov	r3, r7
 8011d68:	f7ee fc46 	bl	80005f8 <__aeabi_dmul>
 8011d6c:	a326      	add	r3, pc, #152	@ (adr r3, 8011e08 <__ieee754_asin+0x320>)
 8011d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d72:	f7ee fa89 	bl	8000288 <__aeabi_dsub>
 8011d76:	4632      	mov	r2, r6
 8011d78:	463b      	mov	r3, r7
 8011d7a:	f7ee fc3d 	bl	80005f8 <__aeabi_dmul>
 8011d7e:	4b26      	ldr	r3, [pc, #152]	@ (8011e18 <__ieee754_asin+0x330>)
 8011d80:	2200      	movs	r2, #0
 8011d82:	f7ee fa83 	bl	800028c <__adddf3>
 8011d86:	4602      	mov	r2, r0
 8011d88:	460b      	mov	r3, r1
 8011d8a:	4640      	mov	r0, r8
 8011d8c:	4649      	mov	r1, r9
 8011d8e:	f7ee fd5d 	bl	800084c <__aeabi_ddiv>
 8011d92:	4622      	mov	r2, r4
 8011d94:	462b      	mov	r3, r5
 8011d96:	f7ee fc2f 	bl	80005f8 <__aeabi_dmul>
 8011d9a:	4602      	mov	r2, r0
 8011d9c:	460b      	mov	r3, r1
 8011d9e:	4620      	mov	r0, r4
 8011da0:	4629      	mov	r1, r5
 8011da2:	e6c6      	b.n	8011b32 <__ieee754_asin+0x4a>
 8011da4:	f3af 8000 	nop.w
 8011da8:	54442d18 	.word	0x54442d18
 8011dac:	3ff921fb 	.word	0x3ff921fb
 8011db0:	33145c07 	.word	0x33145c07
 8011db4:	3c91a626 	.word	0x3c91a626
 8011db8:	8800759c 	.word	0x8800759c
 8011dbc:	7e37e43c 	.word	0x7e37e43c
 8011dc0:	0dfdf709 	.word	0x0dfdf709
 8011dc4:	3f023de1 	.word	0x3f023de1
 8011dc8:	7501b288 	.word	0x7501b288
 8011dcc:	3f49efe0 	.word	0x3f49efe0
 8011dd0:	b5688f3b 	.word	0xb5688f3b
 8011dd4:	3fa48228 	.word	0x3fa48228
 8011dd8:	0e884455 	.word	0x0e884455
 8011ddc:	3fc9c155 	.word	0x3fc9c155
 8011de0:	03eb6f7d 	.word	0x03eb6f7d
 8011de4:	3fd4d612 	.word	0x3fd4d612
 8011de8:	55555555 	.word	0x55555555
 8011dec:	3fc55555 	.word	0x3fc55555
 8011df0:	b12e9282 	.word	0xb12e9282
 8011df4:	3fb3b8c5 	.word	0x3fb3b8c5
 8011df8:	1b8d0159 	.word	0x1b8d0159
 8011dfc:	3fe6066c 	.word	0x3fe6066c
 8011e00:	9c598ac8 	.word	0x9c598ac8
 8011e04:	40002ae5 	.word	0x40002ae5
 8011e08:	1c8a2d4b 	.word	0x1c8a2d4b
 8011e0c:	40033a27 	.word	0x40033a27
 8011e10:	3fefffff 	.word	0x3fefffff
 8011e14:	3fdfffff 	.word	0x3fdfffff
 8011e18:	3ff00000 	.word	0x3ff00000
 8011e1c:	3fe00000 	.word	0x3fe00000
 8011e20:	3fef3332 	.word	0x3fef3332
 8011e24:	4652      	mov	r2, sl
 8011e26:	465b      	mov	r3, fp
 8011e28:	4650      	mov	r0, sl
 8011e2a:	4659      	mov	r1, fp
 8011e2c:	f7ee fa2e 	bl	800028c <__adddf3>
 8011e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e34:	4606      	mov	r6, r0
 8011e36:	460f      	mov	r7, r1
 8011e38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e3c:	f7ee fd06 	bl	800084c <__aeabi_ddiv>
 8011e40:	4602      	mov	r2, r0
 8011e42:	460b      	mov	r3, r1
 8011e44:	4630      	mov	r0, r6
 8011e46:	4639      	mov	r1, r7
 8011e48:	f7ee fbd6 	bl	80005f8 <__aeabi_dmul>
 8011e4c:	f04f 0800 	mov.w	r8, #0
 8011e50:	4606      	mov	r6, r0
 8011e52:	460f      	mov	r7, r1
 8011e54:	4642      	mov	r2, r8
 8011e56:	465b      	mov	r3, fp
 8011e58:	4640      	mov	r0, r8
 8011e5a:	4659      	mov	r1, fp
 8011e5c:	f7ee fbcc 	bl	80005f8 <__aeabi_dmul>
 8011e60:	4602      	mov	r2, r0
 8011e62:	460b      	mov	r3, r1
 8011e64:	4620      	mov	r0, r4
 8011e66:	4629      	mov	r1, r5
 8011e68:	f7ee fa0e 	bl	8000288 <__aeabi_dsub>
 8011e6c:	4642      	mov	r2, r8
 8011e6e:	4604      	mov	r4, r0
 8011e70:	460d      	mov	r5, r1
 8011e72:	465b      	mov	r3, fp
 8011e74:	4650      	mov	r0, sl
 8011e76:	4659      	mov	r1, fp
 8011e78:	f7ee fa08 	bl	800028c <__adddf3>
 8011e7c:	4602      	mov	r2, r0
 8011e7e:	460b      	mov	r3, r1
 8011e80:	4620      	mov	r0, r4
 8011e82:	4629      	mov	r1, r5
 8011e84:	f7ee fce2 	bl	800084c <__aeabi_ddiv>
 8011e88:	4602      	mov	r2, r0
 8011e8a:	460b      	mov	r3, r1
 8011e8c:	f7ee f9fe 	bl	800028c <__adddf3>
 8011e90:	4602      	mov	r2, r0
 8011e92:	460b      	mov	r3, r1
 8011e94:	a112      	add	r1, pc, #72	@ (adr r1, 8011ee0 <__ieee754_asin+0x3f8>)
 8011e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e9a:	f7ee f9f5 	bl	8000288 <__aeabi_dsub>
 8011e9e:	4602      	mov	r2, r0
 8011ea0:	460b      	mov	r3, r1
 8011ea2:	4630      	mov	r0, r6
 8011ea4:	4639      	mov	r1, r7
 8011ea6:	f7ee f9ef 	bl	8000288 <__aeabi_dsub>
 8011eaa:	4642      	mov	r2, r8
 8011eac:	4604      	mov	r4, r0
 8011eae:	460d      	mov	r5, r1
 8011eb0:	465b      	mov	r3, fp
 8011eb2:	4640      	mov	r0, r8
 8011eb4:	4659      	mov	r1, fp
 8011eb6:	f7ee f9e9 	bl	800028c <__adddf3>
 8011eba:	4602      	mov	r2, r0
 8011ebc:	460b      	mov	r3, r1
 8011ebe:	a10a      	add	r1, pc, #40	@ (adr r1, 8011ee8 <__ieee754_asin+0x400>)
 8011ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ec4:	f7ee f9e0 	bl	8000288 <__aeabi_dsub>
 8011ec8:	4602      	mov	r2, r0
 8011eca:	460b      	mov	r3, r1
 8011ecc:	4620      	mov	r0, r4
 8011ece:	4629      	mov	r1, r5
 8011ed0:	f7ee f9da 	bl	8000288 <__aeabi_dsub>
 8011ed4:	4602      	mov	r2, r0
 8011ed6:	460b      	mov	r3, r1
 8011ed8:	a103      	add	r1, pc, #12	@ (adr r1, 8011ee8 <__ieee754_asin+0x400>)
 8011eda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ede:	e6e2      	b.n	8011ca6 <__ieee754_asin+0x1be>
 8011ee0:	33145c07 	.word	0x33145c07
 8011ee4:	3c91a626 	.word	0x3c91a626
 8011ee8:	54442d18 	.word	0x54442d18
 8011eec:	3fe921fb 	.word	0x3fe921fb

08011ef0 <__ieee754_atan2>:
 8011ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ef4:	ec57 6b11 	vmov	r6, r7, d1
 8011ef8:	4273      	negs	r3, r6
 8011efa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8012078 <__ieee754_atan2+0x188>
 8011efe:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8011f02:	4333      	orrs	r3, r6
 8011f04:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011f08:	4543      	cmp	r3, r8
 8011f0a:	ec51 0b10 	vmov	r0, r1, d0
 8011f0e:	4635      	mov	r5, r6
 8011f10:	d809      	bhi.n	8011f26 <__ieee754_atan2+0x36>
 8011f12:	4244      	negs	r4, r0
 8011f14:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011f18:	4304      	orrs	r4, r0
 8011f1a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011f1e:	4544      	cmp	r4, r8
 8011f20:	468e      	mov	lr, r1
 8011f22:	4681      	mov	r9, r0
 8011f24:	d907      	bls.n	8011f36 <__ieee754_atan2+0x46>
 8011f26:	4632      	mov	r2, r6
 8011f28:	463b      	mov	r3, r7
 8011f2a:	f7ee f9af 	bl	800028c <__adddf3>
 8011f2e:	ec41 0b10 	vmov	d0, r0, r1
 8011f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f36:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8011f3a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8011f3e:	4334      	orrs	r4, r6
 8011f40:	d103      	bne.n	8011f4a <__ieee754_atan2+0x5a>
 8011f42:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f46:	f000 b89b 	b.w	8012080 <atan>
 8011f4a:	17bc      	asrs	r4, r7, #30
 8011f4c:	f004 0402 	and.w	r4, r4, #2
 8011f50:	ea53 0909 	orrs.w	r9, r3, r9
 8011f54:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011f58:	d107      	bne.n	8011f6a <__ieee754_atan2+0x7a>
 8011f5a:	2c02      	cmp	r4, #2
 8011f5c:	d05f      	beq.n	801201e <__ieee754_atan2+0x12e>
 8011f5e:	2c03      	cmp	r4, #3
 8011f60:	d1e5      	bne.n	8011f2e <__ieee754_atan2+0x3e>
 8011f62:	a143      	add	r1, pc, #268	@ (adr r1, 8012070 <__ieee754_atan2+0x180>)
 8011f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f68:	e7e1      	b.n	8011f2e <__ieee754_atan2+0x3e>
 8011f6a:	4315      	orrs	r5, r2
 8011f6c:	d106      	bne.n	8011f7c <__ieee754_atan2+0x8c>
 8011f6e:	f1be 0f00 	cmp.w	lr, #0
 8011f72:	db5f      	blt.n	8012034 <__ieee754_atan2+0x144>
 8011f74:	a136      	add	r1, pc, #216	@ (adr r1, 8012050 <__ieee754_atan2+0x160>)
 8011f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f7a:	e7d8      	b.n	8011f2e <__ieee754_atan2+0x3e>
 8011f7c:	4542      	cmp	r2, r8
 8011f7e:	d10f      	bne.n	8011fa0 <__ieee754_atan2+0xb0>
 8011f80:	4293      	cmp	r3, r2
 8011f82:	f104 34ff 	add.w	r4, r4, #4294967295
 8011f86:	d107      	bne.n	8011f98 <__ieee754_atan2+0xa8>
 8011f88:	2c02      	cmp	r4, #2
 8011f8a:	d84c      	bhi.n	8012026 <__ieee754_atan2+0x136>
 8011f8c:	4b36      	ldr	r3, [pc, #216]	@ (8012068 <__ieee754_atan2+0x178>)
 8011f8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011f92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011f96:	e7ca      	b.n	8011f2e <__ieee754_atan2+0x3e>
 8011f98:	2c02      	cmp	r4, #2
 8011f9a:	d848      	bhi.n	801202e <__ieee754_atan2+0x13e>
 8011f9c:	4b33      	ldr	r3, [pc, #204]	@ (801206c <__ieee754_atan2+0x17c>)
 8011f9e:	e7f6      	b.n	8011f8e <__ieee754_atan2+0x9e>
 8011fa0:	4543      	cmp	r3, r8
 8011fa2:	d0e4      	beq.n	8011f6e <__ieee754_atan2+0x7e>
 8011fa4:	1a9b      	subs	r3, r3, r2
 8011fa6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8011faa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011fae:	da1e      	bge.n	8011fee <__ieee754_atan2+0xfe>
 8011fb0:	2f00      	cmp	r7, #0
 8011fb2:	da01      	bge.n	8011fb8 <__ieee754_atan2+0xc8>
 8011fb4:	323c      	adds	r2, #60	@ 0x3c
 8011fb6:	db1e      	blt.n	8011ff6 <__ieee754_atan2+0x106>
 8011fb8:	4632      	mov	r2, r6
 8011fba:	463b      	mov	r3, r7
 8011fbc:	f7ee fc46 	bl	800084c <__aeabi_ddiv>
 8011fc0:	ec41 0b10 	vmov	d0, r0, r1
 8011fc4:	f7ff fcb0 	bl	8011928 <fabs>
 8011fc8:	f000 f85a 	bl	8012080 <atan>
 8011fcc:	ec51 0b10 	vmov	r0, r1, d0
 8011fd0:	2c01      	cmp	r4, #1
 8011fd2:	d013      	beq.n	8011ffc <__ieee754_atan2+0x10c>
 8011fd4:	2c02      	cmp	r4, #2
 8011fd6:	d015      	beq.n	8012004 <__ieee754_atan2+0x114>
 8011fd8:	2c00      	cmp	r4, #0
 8011fda:	d0a8      	beq.n	8011f2e <__ieee754_atan2+0x3e>
 8011fdc:	a318      	add	r3, pc, #96	@ (adr r3, 8012040 <__ieee754_atan2+0x150>)
 8011fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe2:	f7ee f951 	bl	8000288 <__aeabi_dsub>
 8011fe6:	a318      	add	r3, pc, #96	@ (adr r3, 8012048 <__ieee754_atan2+0x158>)
 8011fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fec:	e014      	b.n	8012018 <__ieee754_atan2+0x128>
 8011fee:	a118      	add	r1, pc, #96	@ (adr r1, 8012050 <__ieee754_atan2+0x160>)
 8011ff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ff4:	e7ec      	b.n	8011fd0 <__ieee754_atan2+0xe0>
 8011ff6:	2000      	movs	r0, #0
 8011ff8:	2100      	movs	r1, #0
 8011ffa:	e7e9      	b.n	8011fd0 <__ieee754_atan2+0xe0>
 8011ffc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012000:	4619      	mov	r1, r3
 8012002:	e794      	b.n	8011f2e <__ieee754_atan2+0x3e>
 8012004:	a30e      	add	r3, pc, #56	@ (adr r3, 8012040 <__ieee754_atan2+0x150>)
 8012006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801200a:	f7ee f93d 	bl	8000288 <__aeabi_dsub>
 801200e:	4602      	mov	r2, r0
 8012010:	460b      	mov	r3, r1
 8012012:	a10d      	add	r1, pc, #52	@ (adr r1, 8012048 <__ieee754_atan2+0x158>)
 8012014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012018:	f7ee f936 	bl	8000288 <__aeabi_dsub>
 801201c:	e787      	b.n	8011f2e <__ieee754_atan2+0x3e>
 801201e:	a10a      	add	r1, pc, #40	@ (adr r1, 8012048 <__ieee754_atan2+0x158>)
 8012020:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012024:	e783      	b.n	8011f2e <__ieee754_atan2+0x3e>
 8012026:	a10c      	add	r1, pc, #48	@ (adr r1, 8012058 <__ieee754_atan2+0x168>)
 8012028:	e9d1 0100 	ldrd	r0, r1, [r1]
 801202c:	e77f      	b.n	8011f2e <__ieee754_atan2+0x3e>
 801202e:	2000      	movs	r0, #0
 8012030:	2100      	movs	r1, #0
 8012032:	e77c      	b.n	8011f2e <__ieee754_atan2+0x3e>
 8012034:	a10a      	add	r1, pc, #40	@ (adr r1, 8012060 <__ieee754_atan2+0x170>)
 8012036:	e9d1 0100 	ldrd	r0, r1, [r1]
 801203a:	e778      	b.n	8011f2e <__ieee754_atan2+0x3e>
 801203c:	f3af 8000 	nop.w
 8012040:	33145c07 	.word	0x33145c07
 8012044:	3ca1a626 	.word	0x3ca1a626
 8012048:	54442d18 	.word	0x54442d18
 801204c:	400921fb 	.word	0x400921fb
 8012050:	54442d18 	.word	0x54442d18
 8012054:	3ff921fb 	.word	0x3ff921fb
 8012058:	54442d18 	.word	0x54442d18
 801205c:	3fe921fb 	.word	0x3fe921fb
 8012060:	54442d18 	.word	0x54442d18
 8012064:	bff921fb 	.word	0xbff921fb
 8012068:	08013c90 	.word	0x08013c90
 801206c:	08013c78 	.word	0x08013c78
 8012070:	54442d18 	.word	0x54442d18
 8012074:	c00921fb 	.word	0xc00921fb
 8012078:	7ff00000 	.word	0x7ff00000
 801207c:	00000000 	.word	0x00000000

08012080 <atan>:
 8012080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012084:	ec55 4b10 	vmov	r4, r5, d0
 8012088:	4bbf      	ldr	r3, [pc, #764]	@ (8012388 <atan+0x308>)
 801208a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801208e:	429e      	cmp	r6, r3
 8012090:	46ab      	mov	fp, r5
 8012092:	d918      	bls.n	80120c6 <atan+0x46>
 8012094:	4bbd      	ldr	r3, [pc, #756]	@ (801238c <atan+0x30c>)
 8012096:	429e      	cmp	r6, r3
 8012098:	d801      	bhi.n	801209e <atan+0x1e>
 801209a:	d109      	bne.n	80120b0 <atan+0x30>
 801209c:	b144      	cbz	r4, 80120b0 <atan+0x30>
 801209e:	4622      	mov	r2, r4
 80120a0:	462b      	mov	r3, r5
 80120a2:	4620      	mov	r0, r4
 80120a4:	4629      	mov	r1, r5
 80120a6:	f7ee f8f1 	bl	800028c <__adddf3>
 80120aa:	4604      	mov	r4, r0
 80120ac:	460d      	mov	r5, r1
 80120ae:	e006      	b.n	80120be <atan+0x3e>
 80120b0:	f1bb 0f00 	cmp.w	fp, #0
 80120b4:	f340 812b 	ble.w	801230e <atan+0x28e>
 80120b8:	a597      	add	r5, pc, #604	@ (adr r5, 8012318 <atan+0x298>)
 80120ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80120be:	ec45 4b10 	vmov	d0, r4, r5
 80120c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120c6:	4bb2      	ldr	r3, [pc, #712]	@ (8012390 <atan+0x310>)
 80120c8:	429e      	cmp	r6, r3
 80120ca:	d813      	bhi.n	80120f4 <atan+0x74>
 80120cc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80120d0:	429e      	cmp	r6, r3
 80120d2:	d80c      	bhi.n	80120ee <atan+0x6e>
 80120d4:	a392      	add	r3, pc, #584	@ (adr r3, 8012320 <atan+0x2a0>)
 80120d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120da:	4620      	mov	r0, r4
 80120dc:	4629      	mov	r1, r5
 80120de:	f7ee f8d5 	bl	800028c <__adddf3>
 80120e2:	4bac      	ldr	r3, [pc, #688]	@ (8012394 <atan+0x314>)
 80120e4:	2200      	movs	r2, #0
 80120e6:	f7ee fd17 	bl	8000b18 <__aeabi_dcmpgt>
 80120ea:	2800      	cmp	r0, #0
 80120ec:	d1e7      	bne.n	80120be <atan+0x3e>
 80120ee:	f04f 3aff 	mov.w	sl, #4294967295
 80120f2:	e029      	b.n	8012148 <atan+0xc8>
 80120f4:	f7ff fc18 	bl	8011928 <fabs>
 80120f8:	4ba7      	ldr	r3, [pc, #668]	@ (8012398 <atan+0x318>)
 80120fa:	429e      	cmp	r6, r3
 80120fc:	ec55 4b10 	vmov	r4, r5, d0
 8012100:	f200 80bc 	bhi.w	801227c <atan+0x1fc>
 8012104:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8012108:	429e      	cmp	r6, r3
 801210a:	f200 809e 	bhi.w	801224a <atan+0x1ca>
 801210e:	4622      	mov	r2, r4
 8012110:	462b      	mov	r3, r5
 8012112:	4620      	mov	r0, r4
 8012114:	4629      	mov	r1, r5
 8012116:	f7ee f8b9 	bl	800028c <__adddf3>
 801211a:	4b9e      	ldr	r3, [pc, #632]	@ (8012394 <atan+0x314>)
 801211c:	2200      	movs	r2, #0
 801211e:	f7ee f8b3 	bl	8000288 <__aeabi_dsub>
 8012122:	2200      	movs	r2, #0
 8012124:	4606      	mov	r6, r0
 8012126:	460f      	mov	r7, r1
 8012128:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801212c:	4620      	mov	r0, r4
 801212e:	4629      	mov	r1, r5
 8012130:	f7ee f8ac 	bl	800028c <__adddf3>
 8012134:	4602      	mov	r2, r0
 8012136:	460b      	mov	r3, r1
 8012138:	4630      	mov	r0, r6
 801213a:	4639      	mov	r1, r7
 801213c:	f7ee fb86 	bl	800084c <__aeabi_ddiv>
 8012140:	f04f 0a00 	mov.w	sl, #0
 8012144:	4604      	mov	r4, r0
 8012146:	460d      	mov	r5, r1
 8012148:	4622      	mov	r2, r4
 801214a:	462b      	mov	r3, r5
 801214c:	4620      	mov	r0, r4
 801214e:	4629      	mov	r1, r5
 8012150:	f7ee fa52 	bl	80005f8 <__aeabi_dmul>
 8012154:	4602      	mov	r2, r0
 8012156:	460b      	mov	r3, r1
 8012158:	4680      	mov	r8, r0
 801215a:	4689      	mov	r9, r1
 801215c:	f7ee fa4c 	bl	80005f8 <__aeabi_dmul>
 8012160:	a371      	add	r3, pc, #452	@ (adr r3, 8012328 <atan+0x2a8>)
 8012162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012166:	4606      	mov	r6, r0
 8012168:	460f      	mov	r7, r1
 801216a:	f7ee fa45 	bl	80005f8 <__aeabi_dmul>
 801216e:	a370      	add	r3, pc, #448	@ (adr r3, 8012330 <atan+0x2b0>)
 8012170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012174:	f7ee f88a 	bl	800028c <__adddf3>
 8012178:	4632      	mov	r2, r6
 801217a:	463b      	mov	r3, r7
 801217c:	f7ee fa3c 	bl	80005f8 <__aeabi_dmul>
 8012180:	a36d      	add	r3, pc, #436	@ (adr r3, 8012338 <atan+0x2b8>)
 8012182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012186:	f7ee f881 	bl	800028c <__adddf3>
 801218a:	4632      	mov	r2, r6
 801218c:	463b      	mov	r3, r7
 801218e:	f7ee fa33 	bl	80005f8 <__aeabi_dmul>
 8012192:	a36b      	add	r3, pc, #428	@ (adr r3, 8012340 <atan+0x2c0>)
 8012194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012198:	f7ee f878 	bl	800028c <__adddf3>
 801219c:	4632      	mov	r2, r6
 801219e:	463b      	mov	r3, r7
 80121a0:	f7ee fa2a 	bl	80005f8 <__aeabi_dmul>
 80121a4:	a368      	add	r3, pc, #416	@ (adr r3, 8012348 <atan+0x2c8>)
 80121a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121aa:	f7ee f86f 	bl	800028c <__adddf3>
 80121ae:	4632      	mov	r2, r6
 80121b0:	463b      	mov	r3, r7
 80121b2:	f7ee fa21 	bl	80005f8 <__aeabi_dmul>
 80121b6:	a366      	add	r3, pc, #408	@ (adr r3, 8012350 <atan+0x2d0>)
 80121b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121bc:	f7ee f866 	bl	800028c <__adddf3>
 80121c0:	4642      	mov	r2, r8
 80121c2:	464b      	mov	r3, r9
 80121c4:	f7ee fa18 	bl	80005f8 <__aeabi_dmul>
 80121c8:	a363      	add	r3, pc, #396	@ (adr r3, 8012358 <atan+0x2d8>)
 80121ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ce:	4680      	mov	r8, r0
 80121d0:	4689      	mov	r9, r1
 80121d2:	4630      	mov	r0, r6
 80121d4:	4639      	mov	r1, r7
 80121d6:	f7ee fa0f 	bl	80005f8 <__aeabi_dmul>
 80121da:	a361      	add	r3, pc, #388	@ (adr r3, 8012360 <atan+0x2e0>)
 80121dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e0:	f7ee f852 	bl	8000288 <__aeabi_dsub>
 80121e4:	4632      	mov	r2, r6
 80121e6:	463b      	mov	r3, r7
 80121e8:	f7ee fa06 	bl	80005f8 <__aeabi_dmul>
 80121ec:	a35e      	add	r3, pc, #376	@ (adr r3, 8012368 <atan+0x2e8>)
 80121ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f2:	f7ee f849 	bl	8000288 <__aeabi_dsub>
 80121f6:	4632      	mov	r2, r6
 80121f8:	463b      	mov	r3, r7
 80121fa:	f7ee f9fd 	bl	80005f8 <__aeabi_dmul>
 80121fe:	a35c      	add	r3, pc, #368	@ (adr r3, 8012370 <atan+0x2f0>)
 8012200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012204:	f7ee f840 	bl	8000288 <__aeabi_dsub>
 8012208:	4632      	mov	r2, r6
 801220a:	463b      	mov	r3, r7
 801220c:	f7ee f9f4 	bl	80005f8 <__aeabi_dmul>
 8012210:	a359      	add	r3, pc, #356	@ (adr r3, 8012378 <atan+0x2f8>)
 8012212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012216:	f7ee f837 	bl	8000288 <__aeabi_dsub>
 801221a:	4632      	mov	r2, r6
 801221c:	463b      	mov	r3, r7
 801221e:	f7ee f9eb 	bl	80005f8 <__aeabi_dmul>
 8012222:	4602      	mov	r2, r0
 8012224:	460b      	mov	r3, r1
 8012226:	4640      	mov	r0, r8
 8012228:	4649      	mov	r1, r9
 801222a:	f7ee f82f 	bl	800028c <__adddf3>
 801222e:	4622      	mov	r2, r4
 8012230:	462b      	mov	r3, r5
 8012232:	f7ee f9e1 	bl	80005f8 <__aeabi_dmul>
 8012236:	f1ba 3fff 	cmp.w	sl, #4294967295
 801223a:	4602      	mov	r2, r0
 801223c:	460b      	mov	r3, r1
 801223e:	d148      	bne.n	80122d2 <atan+0x252>
 8012240:	4620      	mov	r0, r4
 8012242:	4629      	mov	r1, r5
 8012244:	f7ee f820 	bl	8000288 <__aeabi_dsub>
 8012248:	e72f      	b.n	80120aa <atan+0x2a>
 801224a:	4b52      	ldr	r3, [pc, #328]	@ (8012394 <atan+0x314>)
 801224c:	2200      	movs	r2, #0
 801224e:	4620      	mov	r0, r4
 8012250:	4629      	mov	r1, r5
 8012252:	f7ee f819 	bl	8000288 <__aeabi_dsub>
 8012256:	4b4f      	ldr	r3, [pc, #316]	@ (8012394 <atan+0x314>)
 8012258:	4606      	mov	r6, r0
 801225a:	460f      	mov	r7, r1
 801225c:	2200      	movs	r2, #0
 801225e:	4620      	mov	r0, r4
 8012260:	4629      	mov	r1, r5
 8012262:	f7ee f813 	bl	800028c <__adddf3>
 8012266:	4602      	mov	r2, r0
 8012268:	460b      	mov	r3, r1
 801226a:	4630      	mov	r0, r6
 801226c:	4639      	mov	r1, r7
 801226e:	f7ee faed 	bl	800084c <__aeabi_ddiv>
 8012272:	f04f 0a01 	mov.w	sl, #1
 8012276:	4604      	mov	r4, r0
 8012278:	460d      	mov	r5, r1
 801227a:	e765      	b.n	8012148 <atan+0xc8>
 801227c:	4b47      	ldr	r3, [pc, #284]	@ (801239c <atan+0x31c>)
 801227e:	429e      	cmp	r6, r3
 8012280:	d21c      	bcs.n	80122bc <atan+0x23c>
 8012282:	4b47      	ldr	r3, [pc, #284]	@ (80123a0 <atan+0x320>)
 8012284:	2200      	movs	r2, #0
 8012286:	4620      	mov	r0, r4
 8012288:	4629      	mov	r1, r5
 801228a:	f7ed fffd 	bl	8000288 <__aeabi_dsub>
 801228e:	4b44      	ldr	r3, [pc, #272]	@ (80123a0 <atan+0x320>)
 8012290:	4606      	mov	r6, r0
 8012292:	460f      	mov	r7, r1
 8012294:	2200      	movs	r2, #0
 8012296:	4620      	mov	r0, r4
 8012298:	4629      	mov	r1, r5
 801229a:	f7ee f9ad 	bl	80005f8 <__aeabi_dmul>
 801229e:	4b3d      	ldr	r3, [pc, #244]	@ (8012394 <atan+0x314>)
 80122a0:	2200      	movs	r2, #0
 80122a2:	f7ed fff3 	bl	800028c <__adddf3>
 80122a6:	4602      	mov	r2, r0
 80122a8:	460b      	mov	r3, r1
 80122aa:	4630      	mov	r0, r6
 80122ac:	4639      	mov	r1, r7
 80122ae:	f7ee facd 	bl	800084c <__aeabi_ddiv>
 80122b2:	f04f 0a02 	mov.w	sl, #2
 80122b6:	4604      	mov	r4, r0
 80122b8:	460d      	mov	r5, r1
 80122ba:	e745      	b.n	8012148 <atan+0xc8>
 80122bc:	4622      	mov	r2, r4
 80122be:	462b      	mov	r3, r5
 80122c0:	4938      	ldr	r1, [pc, #224]	@ (80123a4 <atan+0x324>)
 80122c2:	2000      	movs	r0, #0
 80122c4:	f7ee fac2 	bl	800084c <__aeabi_ddiv>
 80122c8:	f04f 0a03 	mov.w	sl, #3
 80122cc:	4604      	mov	r4, r0
 80122ce:	460d      	mov	r5, r1
 80122d0:	e73a      	b.n	8012148 <atan+0xc8>
 80122d2:	4b35      	ldr	r3, [pc, #212]	@ (80123a8 <atan+0x328>)
 80122d4:	4e35      	ldr	r6, [pc, #212]	@ (80123ac <atan+0x32c>)
 80122d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80122da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122de:	f7ed ffd3 	bl	8000288 <__aeabi_dsub>
 80122e2:	4622      	mov	r2, r4
 80122e4:	462b      	mov	r3, r5
 80122e6:	f7ed ffcf 	bl	8000288 <__aeabi_dsub>
 80122ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80122ee:	4602      	mov	r2, r0
 80122f0:	460b      	mov	r3, r1
 80122f2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80122f6:	f7ed ffc7 	bl	8000288 <__aeabi_dsub>
 80122fa:	f1bb 0f00 	cmp.w	fp, #0
 80122fe:	4604      	mov	r4, r0
 8012300:	460d      	mov	r5, r1
 8012302:	f6bf aedc 	bge.w	80120be <atan+0x3e>
 8012306:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801230a:	461d      	mov	r5, r3
 801230c:	e6d7      	b.n	80120be <atan+0x3e>
 801230e:	a51c      	add	r5, pc, #112	@ (adr r5, 8012380 <atan+0x300>)
 8012310:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012314:	e6d3      	b.n	80120be <atan+0x3e>
 8012316:	bf00      	nop
 8012318:	54442d18 	.word	0x54442d18
 801231c:	3ff921fb 	.word	0x3ff921fb
 8012320:	8800759c 	.word	0x8800759c
 8012324:	7e37e43c 	.word	0x7e37e43c
 8012328:	e322da11 	.word	0xe322da11
 801232c:	3f90ad3a 	.word	0x3f90ad3a
 8012330:	24760deb 	.word	0x24760deb
 8012334:	3fa97b4b 	.word	0x3fa97b4b
 8012338:	a0d03d51 	.word	0xa0d03d51
 801233c:	3fb10d66 	.word	0x3fb10d66
 8012340:	c54c206e 	.word	0xc54c206e
 8012344:	3fb745cd 	.word	0x3fb745cd
 8012348:	920083ff 	.word	0x920083ff
 801234c:	3fc24924 	.word	0x3fc24924
 8012350:	5555550d 	.word	0x5555550d
 8012354:	3fd55555 	.word	0x3fd55555
 8012358:	2c6a6c2f 	.word	0x2c6a6c2f
 801235c:	bfa2b444 	.word	0xbfa2b444
 8012360:	52defd9a 	.word	0x52defd9a
 8012364:	3fadde2d 	.word	0x3fadde2d
 8012368:	af749a6d 	.word	0xaf749a6d
 801236c:	3fb3b0f2 	.word	0x3fb3b0f2
 8012370:	fe231671 	.word	0xfe231671
 8012374:	3fbc71c6 	.word	0x3fbc71c6
 8012378:	9998ebc4 	.word	0x9998ebc4
 801237c:	3fc99999 	.word	0x3fc99999
 8012380:	54442d18 	.word	0x54442d18
 8012384:	bff921fb 	.word	0xbff921fb
 8012388:	440fffff 	.word	0x440fffff
 801238c:	7ff00000 	.word	0x7ff00000
 8012390:	3fdbffff 	.word	0x3fdbffff
 8012394:	3ff00000 	.word	0x3ff00000
 8012398:	3ff2ffff 	.word	0x3ff2ffff
 801239c:	40038000 	.word	0x40038000
 80123a0:	3ff80000 	.word	0x3ff80000
 80123a4:	bff00000 	.word	0xbff00000
 80123a8:	08013ca8 	.word	0x08013ca8
 80123ac:	08013cc8 	.word	0x08013cc8

080123b0 <__ieee754_sqrt>:
 80123b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b4:	4a66      	ldr	r2, [pc, #408]	@ (8012550 <__ieee754_sqrt+0x1a0>)
 80123b6:	ec55 4b10 	vmov	r4, r5, d0
 80123ba:	43aa      	bics	r2, r5
 80123bc:	462b      	mov	r3, r5
 80123be:	4621      	mov	r1, r4
 80123c0:	d110      	bne.n	80123e4 <__ieee754_sqrt+0x34>
 80123c2:	4622      	mov	r2, r4
 80123c4:	4620      	mov	r0, r4
 80123c6:	4629      	mov	r1, r5
 80123c8:	f7ee f916 	bl	80005f8 <__aeabi_dmul>
 80123cc:	4602      	mov	r2, r0
 80123ce:	460b      	mov	r3, r1
 80123d0:	4620      	mov	r0, r4
 80123d2:	4629      	mov	r1, r5
 80123d4:	f7ed ff5a 	bl	800028c <__adddf3>
 80123d8:	4604      	mov	r4, r0
 80123da:	460d      	mov	r5, r1
 80123dc:	ec45 4b10 	vmov	d0, r4, r5
 80123e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123e4:	2d00      	cmp	r5, #0
 80123e6:	dc0e      	bgt.n	8012406 <__ieee754_sqrt+0x56>
 80123e8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80123ec:	4322      	orrs	r2, r4
 80123ee:	d0f5      	beq.n	80123dc <__ieee754_sqrt+0x2c>
 80123f0:	b19d      	cbz	r5, 801241a <__ieee754_sqrt+0x6a>
 80123f2:	4622      	mov	r2, r4
 80123f4:	4620      	mov	r0, r4
 80123f6:	4629      	mov	r1, r5
 80123f8:	f7ed ff46 	bl	8000288 <__aeabi_dsub>
 80123fc:	4602      	mov	r2, r0
 80123fe:	460b      	mov	r3, r1
 8012400:	f7ee fa24 	bl	800084c <__aeabi_ddiv>
 8012404:	e7e8      	b.n	80123d8 <__ieee754_sqrt+0x28>
 8012406:	152a      	asrs	r2, r5, #20
 8012408:	d115      	bne.n	8012436 <__ieee754_sqrt+0x86>
 801240a:	2000      	movs	r0, #0
 801240c:	e009      	b.n	8012422 <__ieee754_sqrt+0x72>
 801240e:	0acb      	lsrs	r3, r1, #11
 8012410:	3a15      	subs	r2, #21
 8012412:	0549      	lsls	r1, r1, #21
 8012414:	2b00      	cmp	r3, #0
 8012416:	d0fa      	beq.n	801240e <__ieee754_sqrt+0x5e>
 8012418:	e7f7      	b.n	801240a <__ieee754_sqrt+0x5a>
 801241a:	462a      	mov	r2, r5
 801241c:	e7fa      	b.n	8012414 <__ieee754_sqrt+0x64>
 801241e:	005b      	lsls	r3, r3, #1
 8012420:	3001      	adds	r0, #1
 8012422:	02dc      	lsls	r4, r3, #11
 8012424:	d5fb      	bpl.n	801241e <__ieee754_sqrt+0x6e>
 8012426:	1e44      	subs	r4, r0, #1
 8012428:	1b12      	subs	r2, r2, r4
 801242a:	f1c0 0420 	rsb	r4, r0, #32
 801242e:	fa21 f404 	lsr.w	r4, r1, r4
 8012432:	4323      	orrs	r3, r4
 8012434:	4081      	lsls	r1, r0
 8012436:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801243a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801243e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012442:	07d2      	lsls	r2, r2, #31
 8012444:	bf5c      	itt	pl
 8012446:	005b      	lslpl	r3, r3, #1
 8012448:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801244c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012450:	bf58      	it	pl
 8012452:	0049      	lslpl	r1, r1, #1
 8012454:	2600      	movs	r6, #0
 8012456:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801245a:	107f      	asrs	r7, r7, #1
 801245c:	0049      	lsls	r1, r1, #1
 801245e:	2016      	movs	r0, #22
 8012460:	4632      	mov	r2, r6
 8012462:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012466:	1915      	adds	r5, r2, r4
 8012468:	429d      	cmp	r5, r3
 801246a:	bfde      	ittt	le
 801246c:	192a      	addle	r2, r5, r4
 801246e:	1b5b      	suble	r3, r3, r5
 8012470:	1936      	addle	r6, r6, r4
 8012472:	0fcd      	lsrs	r5, r1, #31
 8012474:	3801      	subs	r0, #1
 8012476:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801247a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801247e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012482:	d1f0      	bne.n	8012466 <__ieee754_sqrt+0xb6>
 8012484:	4605      	mov	r5, r0
 8012486:	2420      	movs	r4, #32
 8012488:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801248c:	4293      	cmp	r3, r2
 801248e:	eb0c 0e00 	add.w	lr, ip, r0
 8012492:	dc02      	bgt.n	801249a <__ieee754_sqrt+0xea>
 8012494:	d113      	bne.n	80124be <__ieee754_sqrt+0x10e>
 8012496:	458e      	cmp	lr, r1
 8012498:	d811      	bhi.n	80124be <__ieee754_sqrt+0x10e>
 801249a:	f1be 0f00 	cmp.w	lr, #0
 801249e:	eb0e 000c 	add.w	r0, lr, ip
 80124a2:	da3f      	bge.n	8012524 <__ieee754_sqrt+0x174>
 80124a4:	2800      	cmp	r0, #0
 80124a6:	db3d      	blt.n	8012524 <__ieee754_sqrt+0x174>
 80124a8:	f102 0801 	add.w	r8, r2, #1
 80124ac:	1a9b      	subs	r3, r3, r2
 80124ae:	458e      	cmp	lr, r1
 80124b0:	bf88      	it	hi
 80124b2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80124b6:	eba1 010e 	sub.w	r1, r1, lr
 80124ba:	4465      	add	r5, ip
 80124bc:	4642      	mov	r2, r8
 80124be:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80124c2:	3c01      	subs	r4, #1
 80124c4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80124c8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80124cc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80124d0:	d1dc      	bne.n	801248c <__ieee754_sqrt+0xdc>
 80124d2:	4319      	orrs	r1, r3
 80124d4:	d01b      	beq.n	801250e <__ieee754_sqrt+0x15e>
 80124d6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8012554 <__ieee754_sqrt+0x1a4>
 80124da:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8012558 <__ieee754_sqrt+0x1a8>
 80124de:	e9da 0100 	ldrd	r0, r1, [sl]
 80124e2:	e9db 2300 	ldrd	r2, r3, [fp]
 80124e6:	f7ed fecf 	bl	8000288 <__aeabi_dsub>
 80124ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80124ee:	4602      	mov	r2, r0
 80124f0:	460b      	mov	r3, r1
 80124f2:	4640      	mov	r0, r8
 80124f4:	4649      	mov	r1, r9
 80124f6:	f7ee fafb 	bl	8000af0 <__aeabi_dcmple>
 80124fa:	b140      	cbz	r0, 801250e <__ieee754_sqrt+0x15e>
 80124fc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012500:	e9da 0100 	ldrd	r0, r1, [sl]
 8012504:	e9db 2300 	ldrd	r2, r3, [fp]
 8012508:	d10e      	bne.n	8012528 <__ieee754_sqrt+0x178>
 801250a:	3601      	adds	r6, #1
 801250c:	4625      	mov	r5, r4
 801250e:	1073      	asrs	r3, r6, #1
 8012510:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8012514:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8012518:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 801251c:	086b      	lsrs	r3, r5, #1
 801251e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8012522:	e759      	b.n	80123d8 <__ieee754_sqrt+0x28>
 8012524:	4690      	mov	r8, r2
 8012526:	e7c1      	b.n	80124ac <__ieee754_sqrt+0xfc>
 8012528:	f7ed feb0 	bl	800028c <__adddf3>
 801252c:	e9da 8900 	ldrd	r8, r9, [sl]
 8012530:	4602      	mov	r2, r0
 8012532:	460b      	mov	r3, r1
 8012534:	4640      	mov	r0, r8
 8012536:	4649      	mov	r1, r9
 8012538:	f7ee fad0 	bl	8000adc <__aeabi_dcmplt>
 801253c:	b120      	cbz	r0, 8012548 <__ieee754_sqrt+0x198>
 801253e:	1cab      	adds	r3, r5, #2
 8012540:	bf08      	it	eq
 8012542:	3601      	addeq	r6, #1
 8012544:	3502      	adds	r5, #2
 8012546:	e7e2      	b.n	801250e <__ieee754_sqrt+0x15e>
 8012548:	1c6b      	adds	r3, r5, #1
 801254a:	f023 0501 	bic.w	r5, r3, #1
 801254e:	e7de      	b.n	801250e <__ieee754_sqrt+0x15e>
 8012550:	7ff00000 	.word	0x7ff00000
 8012554:	08013cf0 	.word	0x08013cf0
 8012558:	08013ce8 	.word	0x08013ce8

0801255c <_init>:
 801255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801255e:	bf00      	nop
 8012560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012562:	bc08      	pop	{r3}
 8012564:	469e      	mov	lr, r3
 8012566:	4770      	bx	lr

08012568 <_fini>:
 8012568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801256a:	bf00      	nop
 801256c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801256e:	bc08      	pop	{r3}
 8012570:	469e      	mov	lr, r3
 8012572:	4770      	bx	lr
